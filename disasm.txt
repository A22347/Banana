
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 17 c3 00 00       	call   c000c337 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 f4 01 00       	call   c001f458 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 ff 01 c0       	mov    ebx,0xc001ffe2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec ff 01 c0    	cmp    ebx,0xc001ffec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ec 3d 02 c0       	mov    eax,0xc0023dec
c0000049:	3d ec 3d 02 c0       	cmp    eax,0xc0023dec
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ec 3d 02 c0       	push   0xc0023dec
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ec 3d 02 c0       	mov    eax,0xc0023dec
c0000075:	2d ec 3d 02 c0       	sub    eax,0xc0023dec
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ec 3d 02 c0       	push   0xc0023dec
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 8c 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f8c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 ff 01 c0       	mov    ebx,0xc001fff4
c00000bb:	81 eb f0 ff 01 c0    	sub    ebx,0xc001fff0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 ff 01 c0       	mov    esi,0xc001fff0
c00000ca:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 90 3f 02 c0       	mov    ds:0xc0023f90,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ec 3d 02 c0       	push   0xc0023dec
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 8c 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f8c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 94 3f 02 c0       	push   0xc0023f94
c000012c:	68 ec 3d 02 c0       	push   0xc0023dec
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 03                	jne    c000018f <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]

c000018f <voodooXADD.usermode>:
c000018f:	89 35 2a 02 00 c0    	mov    DWORD PTR ds:0xc000022a,esi
c0000195:	89 25 26 02 00 c0    	mov    DWORD PTR ds:0xc0000226,esp
c000019b:	60                   	pusha  
c000019c:	b0 90                	mov    al,0x90
c000019e:	b9 20 00 00 00       	mov    ecx,0x20
c00001a3:	bf fd 01 00 c0       	mov    edi,0xc00001fd
c00001a8:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001aa:	61                   	popa   
c00001ab:	60                   	pusha  
c00001ac:	89 d6                	mov    esi,edx
c00001ae:	bf fd 01 00 c0       	mov    edi,0xc00001fd
c00001b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001b5:	61                   	popa   
c00001b6:	60                   	pusha  
c00001b7:	89 d6                	mov    esi,edx
c00001b9:	bf 0d 02 00 c0       	mov    edi,0xc000020d
c00001be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c0:	61                   	popa   
c00001c1:	b1 90                	mov    cl,0x90
c00001c3:	85 db                	test   ebx,ebx
c00001c5:	74 06                	je     c00001cd <voodooXADD.skipChange>
c00001c7:	8a 8b fc 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe04]

c00001cd <voodooXADD.skipChange>:
c00001cd:	88 8b fd 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe03],cl
c00001d3:	80 ab fe 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe02],0x3a
c00001da:	88 8b 0d 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdf3],cl
c00001e0:	80 ab 0e 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdf2],0xbe
c00001e7:	89 c4                	mov    esp,eax
c00001e9:	81 c4 10 00 00 00    	add    esp,0x10
c00001ef:	5f                   	pop    edi
c00001f0:	5e                   	pop    esi
c00001f1:	5d                   	pop    ebp
c00001f2:	5b                   	pop    ebx
c00001f3:	5b                   	pop    ebx
c00001f4:	5a                   	pop    edx
c00001f5:	59                   	pop    ecx
c00001f6:	58                   	pop    eax
c00001f7:	8b 25 2a 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022a

c00001fd <voodooXADD.helper>:
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	8b 25 26 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000226
c0000223:	61                   	popa   
c0000224:	c9                   	leave  
c0000225:	c3                   	ret    

c0000226 <voodooXADD.oldStack>:
c0000226:	00 00                	add    BYTE PTR [eax],al
	...

c000022a <voodooXADD.newStack>:
c000022a:	00 00                	add    BYTE PTR [eax],al
	...

c000022e <doTPAUSE>:
c000022e:	fb                   	sti    
c000022f:	31 c0                	xor    eax,eax
c0000231:	31 d2                	xor    edx,edx
c0000233:	66 0f ae f0          	tpause eax
c0000237:	c3                   	ret    

c0000238 <hasLegacyFPU>:
c0000238:	0f 20 c2             	mov    edx,cr0
c000023b:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000241:	0f 22 c2             	mov    cr0,edx
c0000244:	db e3                	fninit 
c0000246:	dd 3d 5b 02 00 c0    	fnstsw WORD PTR ds:0xc000025b
c000024c:	31 c0                	xor    eax,eax
c000024e:	66 81 3d 5b 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000025b,0x0
c0000257:	75 01                	jne    c000025a <hasLegacyFPU.nofpu>

c0000259 <hasLegacyFPU.hasfpu>:
c0000259:	40                   	inc    eax

c000025a <hasLegacyFPU.nofpu>:
c000025a:	c3                   	ret    

c000025b <testword>:
c000025b:	aa                   	stos   BYTE PTR es:[edi],al
c000025c:	55                   	push   ebp

c000025d <is486>:
c000025d:	0f 09                	wbinvd 
c000025f:	31 c0                	xor    eax,eax
c0000261:	40                   	inc    eax
c0000262:	c3                   	ret    
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	31 c0                	xor    eax,eax
c0000292:	c3                   	ret    

c0000293 <goToVM86>:
c0000293:	fa                   	cli    
c0000294:	55                   	push   ebp
c0000295:	89 e5                	mov    ebp,esp
c0000297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000029a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000029d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a3:	25 ff ff 00 00       	and    eax,0xffff
c00002a8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002b4:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002ba:	52                   	push   edx
c00002bb:	51                   	push   ecx
c00002bc:	68 02 02 02 00       	push   0x20202
c00002c1:	53                   	push   ebx
c00002c2:	50                   	push   eax
c00002c3:	cf                   	iret   

c00002c4 <goToUsermode>:
c00002c4:	fa                   	cli    
c00002c5:	55                   	push   ebp
c00002c6:	89 e5                	mov    ebp,esp
c00002c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002cb:	66 b8 23 00          	mov    ax,0x23
c00002cf:	66 8e d8             	mov    ds,ax
c00002d2:	66 8e c0             	mov    es,ax
c00002d5:	66 8e e0             	mov    fs,ax
c00002d8:	66 8e e8             	mov    gs,ax
c00002db:	89 e0                	mov    eax,esp
c00002dd:	68 23 00 00 00       	push   0x23
c00002e2:	50                   	push   eax
c00002e3:	68 02 02 00 00       	push   0x202
c00002e8:	68 1b 00 00 00       	push   0x1b
c00002ed:	53                   	push   ebx
c00002ee:	cf                   	iret   

c00002ef <switchToThreadASMFirstTime>:
c00002ef:	9c                   	pushf  
c00002f0:	fa                   	cli    
c00002f1:	50                   	push   eax
c00002f2:	53                   	push   ebx
c00002f3:	51                   	push   ecx
c00002f4:	52                   	push   edx
c00002f5:	56                   	push   esi
c00002f6:	57                   	push   edi
c00002f7:	55                   	push   ebp
c00002f8:	e9 11 00 00 00       	jmp    c000030e <commonThreadSwitch>

c00002fd <switchToThreadASM>:
c00002fd:	9c                   	pushf  
c00002fe:	50                   	push   eax
c00002ff:	53                   	push   ebx
c0000300:	51                   	push   ecx
c0000301:	52                   	push   edx
c0000302:	56                   	push   esi
c0000303:	57                   	push   edi
c0000304:	55                   	push   ebp
c0000305:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000030b:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000030e <commonThreadSwitch>:
c000030e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000312:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000318:	8b 06                	mov    eax,DWORD PTR [esi]
c000031a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000031d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000320:	0f 20 d9             	mov    ecx,cr3
c0000323:	39 c8                	cmp    eax,ecx
c0000325:	74 03                	je     c000032a <commonThreadSwitch.doneVAS>
c0000327:	0f 22 d8             	mov    cr3,eax

c000032a <commonThreadSwitch.doneVAS>:
c000032a:	85 d2                	test   edx,edx
c000032c:	74 4e                	je     c000037c <commonThreadSwitch.notFirstTime>
c000032e:	fa                   	cli    
c000032f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000332:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000337:	60                   	pusha  
c0000338:	e8 d1 eb 00 00       	call   c000ef0e <mapVASFirstTime>
c000033d:	61                   	popa   
c000033e:	89 c4                	mov    esp,eax
c0000340:	56                   	push   esi
c0000341:	52                   	push   edx
c0000342:	e8 4d 81 01 00       	call   c0018494 <changeTSS>
c0000347:	5a                   	pop    edx
c0000348:	5e                   	pop    esi
c0000349:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000350:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000356:	74 39                	je     c0000391 <commonThreadSwitch.cameOffAFork>
c0000358:	5d                   	pop    ebp
c0000359:	5f                   	pop    edi
c000035a:	5e                   	pop    esi
c000035b:	59                   	pop    ecx
c000035c:	59                   	pop    ecx
c000035d:	5b                   	pop    ebx
c000035e:	58                   	pop    eax
c000035f:	81 c4 04 00 00 00    	add    esp,0x4
c0000365:	6a 02                	push   0x2
c0000367:	9d                   	popf   
c0000368:	52                   	push   edx
c0000369:	e8 39 85 01 00       	call   c00188a7 <taskStartupFunction>
c000036e:	5a                   	pop    edx
c000036f:	50                   	push   eax
c0000370:	ff d2                	call   edx
c0000372:	e8 df 8a 01 00       	call   c0018e56 <taskReturned>
c0000377:	e9 fb ff ff ff       	jmp    c0000377 <commonThreadSwitch.doneVAS+0x4d>

c000037c <commonThreadSwitch.notFirstTime>:
c000037c:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000037f:	56                   	push   esi
c0000380:	52                   	push   edx
c0000381:	e8 0e 81 01 00       	call   c0018494 <changeTSS>
c0000386:	5a                   	pop    edx
c0000387:	5e                   	pop    esi
c0000388:	5d                   	pop    ebp
c0000389:	5f                   	pop    edi
c000038a:	5e                   	pop    esi
c000038b:	5a                   	pop    edx
c000038c:	59                   	pop    ecx
c000038d:	5b                   	pop    ebx
c000038e:	58                   	pop    eax
c000038f:	9d                   	popf   
c0000390:	c3                   	ret    

c0000391 <commonThreadSwitch.cameOffAFork>:
c0000391:	31 c0                	xor    eax,eax
c0000393:	31 d2                	xor    edx,edx
c0000395:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000398:	e9 a2 02 00 00       	jmp    c000063f <offAForkJumpThingy>

c000039d <detectCPUID>:
c000039d:	9c                   	pushf  
c000039e:	9c                   	pushf  
c000039f:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003a6:	9d                   	popf   
c00003a7:	9c                   	pushf  
c00003a8:	58                   	pop    eax
c00003a9:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003ac:	9d                   	popf   
c00003ad:	25 00 00 20 00       	and    eax,0x200000
c00003b2:	c3                   	ret    

c00003b3 <asmQuickAcquireLock>:
c00003b3:	55                   	push   ebp
c00003b4:	89 e5                	mov    ebp,esp
c00003b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b9 <asmQuickAcquireLock.retry>:
c00003b9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003be:	72 02                	jb     c00003c2 <asmQuickAcquireLock.spin_with_pause>
c00003c0:	fa                   	cli    
c00003c1:	c3                   	ret    

c00003c2 <asmQuickAcquireLock.spin_with_pause>:
c00003c2:	f3 90                	pause  
c00003c4:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003ca:	75 f6                	jne    c00003c2 <asmQuickAcquireLock.spin_with_pause>
c00003cc:	e9 e8 ff ff ff       	jmp    c00003b9 <asmQuickAcquireLock.retry>

c00003d1 <asmQuickReleaseLock>:
c00003d1:	55                   	push   ebp
c00003d2:	89 e5                	mov    ebp,esp
c00003d4:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock>:
c00003dd:	55                   	push   ebp
c00003de:	89 e5                	mov    ebp,esp
c00003e0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e3 <asmAcquireLock.retry>:
c00003e3:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003e8:	72 05                	jb     c00003ef <asmAcquireLock.spin_with_pause>
c00003ea:	9c                   	pushf  
c00003eb:	58                   	pop    eax
c00003ec:	fa                   	cli    
c00003ed:	5d                   	pop    ebp
c00003ee:	c3                   	ret    

c00003ef <asmAcquireLock.spin_with_pause>:
c00003ef:	f3 90                	pause  
c00003f1:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003f7:	75 f6                	jne    c00003ef <asmAcquireLock.spin_with_pause>
c00003f9:	e9 e5 ff ff ff       	jmp    c00003e3 <asmAcquireLock.retry>

c00003fe <asmReleaseLock>:
c00003fe:	55                   	push   ebp
c00003ff:	89 e5                	mov    ebp,esp
c0000401:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000404:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000040d:	52                   	push   edx
c000040e:	9d                   	popf   
c000040f:	5d                   	pop    ebp
c0000410:	c3                   	ret    

c0000411 <loadGDT>:
c0000411:	0f 01 15 d0 43 02 c0 	lgdtd  ds:0xc00243d0
c0000418:	66 b8 10 00          	mov    ax,0x10
c000041c:	66 8e d8             	mov    ds,ax
c000041f:	66 8e c0             	mov    es,ax
c0000422:	66 8e e0             	mov    fs,ax
c0000425:	66 8e e8             	mov    gs,ax
c0000428:	66 8e d0             	mov    ss,ax
c000042b:	e9 00 00 00 00       	jmp    c0000430 <flush2>

c0000430 <flush2>:
c0000430:	c3                   	ret    

c0000431 <isr0>:
c0000431:	fa                   	cli    
c0000432:	68 00 00 00 00       	push   0x0
c0000437:	68 00 00 00 00       	push   0x0
c000043c:	e9 a2 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000441 <isr1>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 01                	push   0x1
c0000446:	e9 98 01 00 00       	jmp    c00005e3 <int_common_stub>

c000044b <isr2>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 02                	push   0x2
c0000450:	e9 8e 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000455 <isr3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 03                	push   0x3
c000045a:	e9 84 01 00 00       	jmp    c00005e3 <int_common_stub>

c000045f <isr4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 04                	push   0x4
c0000464:	e9 7a 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000469 <isr5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 05                	push   0x5
c000046e:	e9 70 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000473 <isr6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 06                	push   0x6
c0000478:	e9 66 01 00 00       	jmp    c00005e3 <int_common_stub>

c000047d <isr7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 07                	push   0x7
c0000482:	e9 5c 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000487 <isr8>:
c0000487:	fa                   	cli    
c0000488:	6a 08                	push   0x8
c000048a:	e9 54 01 00 00       	jmp    c00005e3 <int_common_stub>

c000048f <isr9>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 09                	push   0x9
c0000494:	e9 4a 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000499 <isr10>:
c0000499:	fa                   	cli    
c000049a:	6a 0a                	push   0xa
c000049c:	e9 42 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004a1 <isr11>:
c00004a1:	fa                   	cli    
c00004a2:	6a 0b                	push   0xb
c00004a4:	e9 3a 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004a9 <isr12>:
c00004a9:	fa                   	cli    
c00004aa:	6a 0c                	push   0xc
c00004ac:	e9 32 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004b1 <isr13>:
c00004b1:	fa                   	cli    
c00004b2:	6a 0d                	push   0xd
c00004b4:	e9 2a 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004b9 <isr14>:
c00004b9:	fa                   	cli    
c00004ba:	6a 0e                	push   0xe
c00004bc:	e9 22 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004c1 <isr15>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 0f                	push   0xf
c00004c6:	e9 18 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004cb <isr16>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 10                	push   0x10
c00004d0:	e9 0e 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004d5 <isr17>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 11                	push   0x11
c00004da:	e9 04 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004df <isr18>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 12                	push   0x12
c00004e4:	e9 fa 00 00 00       	jmp    c00005e3 <int_common_stub>

c00004e9 <isr96>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 60                	push   0x60
c00004ee:	e9 20 01 00 00       	jmp    c0000613 <syscall_common_stub>

c00004f3 <irq0>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 20                	push   0x20
c00004f8:	e9 e6 00 00 00       	jmp    c00005e3 <int_common_stub>

c00004fd <irq1>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 21                	push   0x21
c0000502:	e9 dc 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000507 <irq2>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 22                	push   0x22
c000050c:	e9 d2 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000511 <irq3>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 23                	push   0x23
c0000516:	e9 c8 00 00 00       	jmp    c00005e3 <int_common_stub>

c000051b <irq4>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 24                	push   0x24
c0000520:	e9 be 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000525 <irq5>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 25                	push   0x25
c000052a:	e9 b4 00 00 00       	jmp    c00005e3 <int_common_stub>

c000052f <irq6>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 26                	push   0x26
c0000534:	e9 aa 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000539 <irq7>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 27                	push   0x27
c000053e:	e9 a0 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000543 <irq8>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 28                	push   0x28
c0000548:	e9 96 00 00 00       	jmp    c00005e3 <int_common_stub>

c000054d <irq9>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 29                	push   0x29
c0000552:	e9 8c 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000557 <irq10>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 2a                	push   0x2a
c000055c:	e9 82 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000561 <irq11>:
c0000561:	fa                   	cli    
c0000562:	6a 00                	push   0x0
c0000564:	6a 2b                	push   0x2b
c0000566:	e9 78 00 00 00       	jmp    c00005e3 <int_common_stub>

c000056b <irq12>:
c000056b:	fa                   	cli    
c000056c:	6a 00                	push   0x0
c000056e:	6a 2c                	push   0x2c
c0000570:	e9 6e 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000575 <irq13>:
c0000575:	fa                   	cli    
c0000576:	6a 00                	push   0x0
c0000578:	6a 2d                	push   0x2d
c000057a:	e9 64 00 00 00       	jmp    c00005e3 <int_common_stub>

c000057f <irq14>:
c000057f:	fa                   	cli    
c0000580:	6a 00                	push   0x0
c0000582:	6a 2e                	push   0x2e
c0000584:	e9 5a 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000589 <irq15>:
c0000589:	fa                   	cli    
c000058a:	6a 00                	push   0x0
c000058c:	6a 2f                	push   0x2f
c000058e:	e9 50 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000593 <irq16>:
c0000593:	fa                   	cli    
c0000594:	6a 00                	push   0x0
c0000596:	6a 30                	push   0x30
c0000598:	e9 46 00 00 00       	jmp    c00005e3 <int_common_stub>

c000059d <irq17>:
c000059d:	fa                   	cli    
c000059e:	6a 00                	push   0x0
c00005a0:	6a 31                	push   0x31
c00005a2:	e9 3c 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005a7 <irq18>:
c00005a7:	fa                   	cli    
c00005a8:	6a 00                	push   0x0
c00005aa:	6a 32                	push   0x32
c00005ac:	e9 32 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005b1 <irq19>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 33                	push   0x33
c00005b6:	e9 28 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005bb <irq20>:
c00005bb:	fa                   	cli    
c00005bc:	6a 00                	push   0x0
c00005be:	6a 34                	push   0x34
c00005c0:	e9 1e 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005c5 <irq21>:
c00005c5:	fa                   	cli    
c00005c6:	6a 00                	push   0x0
c00005c8:	6a 35                	push   0x35
c00005ca:	e9 14 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005cf <irq22>:
c00005cf:	fa                   	cli    
c00005d0:	6a 00                	push   0x0
c00005d2:	6a 36                	push   0x36
c00005d4:	e9 0a 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005d9 <irq23>:
c00005d9:	fa                   	cli    
c00005da:	6a 00                	push   0x0
c00005dc:	6a 37                	push   0x37
c00005de:	e9 00 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005e3 <int_common_stub>:
c00005e3:	60                   	pusha  
c00005e4:	1e                   	push   ds
c00005e5:	06                   	push   es
c00005e6:	0f a0                	push   fs
c00005e8:	0f a8                	push   gs
c00005ea:	66 b8 10 00          	mov    ax,0x10
c00005ee:	66 8e d8             	mov    ds,ax
c00005f1:	66 8e c0             	mov    es,ax
c00005f4:	66 8e e0             	mov    fs,ax
c00005f7:	66 8e e8             	mov    gs,ax
c00005fa:	89 e1                	mov    ecx,esp
c00005fc:	51                   	push   ecx
c00005fd:	b9 e7 0d 01 c0       	mov    ecx,0xc0010de7
c0000602:	ff d1                	call   ecx
c0000604:	59                   	pop    ecx
c0000605:	0f a9                	pop    gs
c0000607:	0f a1                	pop    fs
c0000609:	07                   	pop    es
c000060a:	1f                   	pop    ds
c000060b:	61                   	popa   
c000060c:	81 c4 08 00 00 00    	add    esp,0x8
c0000612:	cf                   	iret   

c0000613 <syscall_common_stub>:
c0000613:	60                   	pusha  
c0000614:	1e                   	push   ds
c0000615:	06                   	push   es
c0000616:	0f a0                	push   fs
c0000618:	0f a8                	push   gs
c000061a:	66 b8 10 00          	mov    ax,0x10
c000061e:	66 8e d8             	mov    ds,ax
c0000621:	66 8e c0             	mov    es,ax
c0000624:	66 8e e0             	mov    fs,ax
c0000627:	66 8e e8             	mov    gs,ax
c000062a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000630:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000633:	89 e1                	mov    ecx,esp
c0000635:	51                   	push   ecx
c0000636:	fb                   	sti    
c0000637:	b9 e7 0d 01 c0       	mov    ecx,0xc0010de7
c000063c:	ff d1                	call   ecx
c000063e:	59                   	pop    ecx

c000063f <offAForkJumpThingy>:
c000063f:	0f a9                	pop    gs
c0000641:	0f a1                	pop    fs
c0000643:	07                   	pop    es
c0000644:	1f                   	pop    ds
c0000645:	61                   	popa   
c0000646:	81 c4 08 00 00 00    	add    esp,0x8
c000064c:	cf                   	iret   

c000064d <memcmp>:
c000064d:	56                   	push   esi
c000064e:	53                   	push   ebx
c000064f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000653:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000657:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000065b:	01 d6                	add    esi,edx
c000065d:	39 f2                	cmp    edx,esi
c000065f:	74 0e                	je     c000066f <memcmp+0x22>
c0000661:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000664:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000667:	38 c8                	cmp    al,cl
c0000669:	75 08                	jne    c0000673 <memcmp+0x26>
c000066b:	42                   	inc    edx
c000066c:	43                   	inc    ebx
c000066d:	eb ee                	jmp    c000065d <memcmp+0x10>
c000066f:	31 c0                	xor    eax,eax
c0000671:	eb 02                	jmp    c0000675 <memcmp+0x28>
c0000673:	29 c8                	sub    eax,ecx
c0000675:	5b                   	pop    ebx
c0000676:	5e                   	pop    esi
c0000677:	c3                   	ret    

c0000678 <memmove>:
c0000678:	56                   	push   esi
c0000679:	53                   	push   ebx
c000067a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000067e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000682:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000686:	39 c8                	cmp    eax,ecx
c0000688:	73 12                	jae    c000069c <memmove+0x24>
c000068a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000068d:	89 c3                	mov    ebx,eax
c000068f:	39 f1                	cmp    ecx,esi
c0000691:	74 1a                	je     c00006ad <memmove+0x35>
c0000693:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000695:	43                   	inc    ebx
c0000696:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000699:	41                   	inc    ecx
c000069a:	eb f3                	jmp    c000068f <memmove+0x17>
c000069c:	76 0f                	jbe    c00006ad <memmove+0x35>
c000069e:	85 d2                	test   edx,edx
c00006a0:	74 0b                	je     c00006ad <memmove+0x35>
c00006a2:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00006a6:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00006aa:	4a                   	dec    edx
c00006ab:	eb f1                	jmp    c000069e <memmove+0x26>
c00006ad:	5b                   	pop    ebx
c00006ae:	5e                   	pop    esi
c00006af:	c3                   	ret    

c00006b0 <memcpy>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006bb:	89 da                	mov    edx,ebx
c00006bd:	89 d9                	mov    ecx,ebx
c00006bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006c3:	83 e2 fc             	and    edx,0xfffffffc
c00006c6:	c1 e9 02             	shr    ecx,0x2
c00006c9:	89 c7                	mov    edi,eax
c00006cb:	fc                   	cld    
c00006cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ce:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006d1:	01 c2                	add    edx,eax
c00006d3:	01 de                	add    esi,ebx
c00006d5:	39 f1                	cmp    ecx,esi
c00006d7:	74 09                	je     c00006e2 <memcpy+0x32>
c00006d9:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006db:	42                   	inc    edx
c00006dc:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006df:	41                   	inc    ecx
c00006e0:	eb f3                	jmp    c00006d5 <memcpy+0x25>
c00006e2:	5b                   	pop    ebx
c00006e3:	5e                   	pop    esi
c00006e4:	5f                   	pop    edi
c00006e5:	c3                   	ret    

c00006e6 <memset>:
c00006e6:	53                   	push   ebx
c00006e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006ef:	89 c2                	mov    edx,eax
c00006f1:	01 c1                	add    ecx,eax
c00006f3:	39 ca                	cmp    edx,ecx
c00006f5:	74 0a                	je     c0000701 <memset+0x1b>
c00006f7:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006fb:	42                   	inc    edx
c00006fc:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ff:	eb f2                	jmp    c00006f3 <memset+0xd>
c0000701:	5b                   	pop    ebx
c0000702:	c3                   	ret    

c0000703 <strlen>:
c0000703:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000707:	31 c0                	xor    eax,eax
c0000709:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000070d:	74 03                	je     c0000712 <strlen+0xf>
c000070f:	40                   	inc    eax
c0000710:	eb f7                	jmp    c0000709 <strlen+0x6>
c0000712:	c3                   	ret    

c0000713 <strpbrk>:
c0000713:	53                   	push   ebx
c0000714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000718:	8a 08                	mov    cl,BYTE PTR [eax]
c000071a:	84 c9                	test   cl,cl
c000071c:	74 14                	je     c0000732 <strpbrk+0x1f>
c000071e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000722:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000724:	84 db                	test   bl,bl
c0000726:	74 07                	je     c000072f <strpbrk+0x1c>
c0000728:	38 cb                	cmp    bl,cl
c000072a:	74 08                	je     c0000734 <strpbrk+0x21>
c000072c:	42                   	inc    edx
c000072d:	eb f3                	jmp    c0000722 <strpbrk+0xf>
c000072f:	40                   	inc    eax
c0000730:	eb e6                	jmp    c0000718 <strpbrk+0x5>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	c3                   	ret    

c0000736 <strtok>:
c0000736:	56                   	push   esi
c0000737:	53                   	push   ebx
c0000738:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000073c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000740:	85 db                	test   ebx,ebx
c0000742:	75 0e                	jne    c0000752 <strtok+0x1c>
c0000744:	8b 1d ac 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fac
c000074a:	85 db                	test   ebx,ebx
c000074c:	75 04                	jne    c0000752 <strtok+0x1c>
c000074e:	31 db                	xor    ebx,ebx
c0000750:	eb 2e                	jmp    c0000780 <strtok+0x4a>
c0000752:	56                   	push   esi
c0000753:	53                   	push   ebx
c0000754:	e8 ba ff ff ff       	call   c0000713 <strpbrk>
c0000759:	5a                   	pop    edx
c000075a:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c000075f:	59                   	pop    ecx
c0000760:	a1 ac 3f 02 c0       	mov    eax,ds:0xc0023fac
c0000765:	39 d8                	cmp    eax,ebx
c0000767:	75 07                	jne    c0000770 <strtok+0x3a>
c0000769:	43                   	inc    ebx
c000076a:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000076e:	eb e2                	jmp    c0000752 <strtok+0x1c>
c0000770:	85 c0                	test   eax,eax
c0000772:	74 da                	je     c000074e <strtok+0x18>
c0000774:	8d 50 01             	lea    edx,[eax+0x1]
c0000777:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000077a:	89 15 ac 3f 02 c0    	mov    DWORD PTR ds:0xc0023fac,edx
c0000780:	89 d8                	mov    eax,ebx
c0000782:	5b                   	pop    ebx
c0000783:	5e                   	pop    esi
c0000784:	c3                   	ret    

c0000785 <strcpy>:
c0000785:	53                   	push   ebx
c0000786:	31 d2                	xor    edx,edx
c0000788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000078c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000790:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000793:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000796:	84 c9                	test   cl,cl
c0000798:	74 06                	je     c00007a0 <strcpy+0x1b>
c000079a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000079d:	42                   	inc    edx
c000079e:	eb ec                	jmp    c000078c <strcpy+0x7>
c00007a0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00007a3:	5b                   	pop    ebx
c00007a4:	c3                   	ret    

c00007a5 <strncpy>:
c00007a5:	56                   	push   esi
c00007a6:	53                   	push   ebx
c00007a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007b3:	89 c3                	mov    ebx,eax
c00007b5:	85 c9                	test   ecx,ecx
c00007b7:	74 1a                	je     c00007d3 <strncpy+0x2e>
c00007b9:	46                   	inc    esi
c00007ba:	43                   	inc    ebx
c00007bb:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007be:	49                   	dec    ecx
c00007bf:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007c2:	84 d2                	test   dl,dl
c00007c4:	75 ef                	jne    c00007b5 <strncpy+0x10>
c00007c6:	31 d2                	xor    edx,edx
c00007c8:	39 d1                	cmp    ecx,edx
c00007ca:	74 07                	je     c00007d3 <strncpy+0x2e>
c00007cc:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007d0:	42                   	inc    edx
c00007d1:	eb f5                	jmp    c00007c8 <strncpy+0x23>
c00007d3:	5b                   	pop    ebx
c00007d4:	5e                   	pop    esi
c00007d5:	c3                   	ret    

c00007d6 <strcmp>:
c00007d6:	31 c9                	xor    ecx,ecx
c00007d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007e0:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007e4:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007e8:	38 d0                	cmp    al,dl
c00007ea:	75 08                	jne    c00007f4 <strcmp+0x1e>
c00007ec:	41                   	inc    ecx
c00007ed:	84 c0                	test   al,al
c00007ef:	75 e7                	jne    c00007d8 <strcmp+0x2>
c00007f1:	31 c0                	xor    eax,eax
c00007f3:	c3                   	ret    
c00007f4:	29 d0                	sub    eax,edx
c00007f6:	c3                   	ret    

c00007f7 <strchr>:
c00007f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007fb:	8a 10                	mov    dl,BYTE PTR [eax]
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 09                	je     c000080a <strchr+0x13>
c0000801:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000805:	74 05                	je     c000080c <strchr+0x15>
c0000807:	40                   	inc    eax
c0000808:	eb f1                	jmp    c00007fb <strchr+0x4>
c000080a:	31 c0                	xor    eax,eax
c000080c:	c3                   	ret    

c000080d <strncmp>:
c000080d:	56                   	push   esi
c000080e:	53                   	push   ebx
c000080f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000081b:	01 d6                	add    esi,edx
c000081d:	39 f2                	cmp    edx,esi
c000081f:	74 12                	je     c0000833 <strncmp+0x26>
c0000821:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000824:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000827:	38 c8                	cmp    al,cl
c0000829:	75 0c                	jne    c0000837 <strncmp+0x2a>
c000082b:	42                   	inc    edx
c000082c:	84 c0                	test   al,al
c000082e:	74 03                	je     c0000833 <strncmp+0x26>
c0000830:	43                   	inc    ebx
c0000831:	eb ea                	jmp    c000081d <strncmp+0x10>
c0000833:	31 c0                	xor    eax,eax
c0000835:	eb 02                	jmp    c0000839 <strncmp+0x2c>
c0000837:	29 c8                	sub    eax,ecx
c0000839:	5b                   	pop    ebx
c000083a:	5e                   	pop    esi
c000083b:	c3                   	ret    

c000083c <strcat>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	89 c1                	mov    ecx,eax
c0000843:	8d 51 01             	lea    edx,[ecx+0x1]
c0000846:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000084a:	74 04                	je     c0000850 <strcat+0x14>
c000084c:	89 d1                	mov    ecx,edx
c000084e:	eb f3                	jmp    c0000843 <strcat+0x7>
c0000850:	31 d2                	xor    edx,edx
c0000852:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000856:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000859:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000085c:	42                   	inc    edx
c000085d:	84 db                	test   bl,bl
c000085f:	75 f1                	jne    c0000852 <strcat+0x16>
c0000861:	5b                   	pop    ebx
c0000862:	c3                   	ret    

c0000863 <strncat>:
c0000863:	56                   	push   esi
c0000864:	53                   	push   ebx
c0000865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000869:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000086d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000871:	89 c2                	mov    edx,eax
c0000873:	85 db                	test   ebx,ebx
c0000875:	74 23                	je     c000089a <strncat+0x37>
c0000877:	8d 72 01             	lea    esi,[edx+0x1]
c000087a:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000087e:	74 04                	je     c0000884 <strncat+0x21>
c0000880:	89 f2                	mov    edx,esi
c0000882:	eb f3                	jmp    c0000877 <strncat+0x14>
c0000884:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000887:	41                   	inc    ecx
c0000888:	42                   	inc    edx
c0000889:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000088c:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000088f:	84 db                	test   bl,bl
c0000891:	74 07                	je     c000089a <strncat+0x37>
c0000893:	39 f1                	cmp    ecx,esi
c0000895:	75 f0                	jne    c0000887 <strncat+0x24>
c0000897:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000089a:	5b                   	pop    ebx
c000089b:	5e                   	pop    esi
c000089c:	c3                   	ret    

c000089d <strstr>:
c000089d:	57                   	push   edi
c000089e:	56                   	push   esi
c000089f:	53                   	push   ebx
c00008a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008a8:	57                   	push   edi
c00008a9:	e8 55 fe ff ff       	call   c0000703 <strlen>
c00008ae:	59                   	pop    ecx
c00008af:	89 c6                	mov    esi,eax
c00008b1:	85 c0                	test   eax,eax
c00008b3:	74 1f                	je     c00008d4 <strstr+0x37>
c00008b5:	53                   	push   ebx
c00008b6:	e8 48 fe ff ff       	call   c0000703 <strlen>
c00008bb:	5a                   	pop    edx
c00008bc:	39 f0                	cmp    eax,esi
c00008be:	72 12                	jb     c00008d2 <strstr+0x35>
c00008c0:	56                   	push   esi
c00008c1:	57                   	push   edi
c00008c2:	53                   	push   ebx
c00008c3:	e8 85 fd ff ff       	call   c000064d <memcmp>
c00008c8:	83 c4 0c             	add    esp,0xc
c00008cb:	85 c0                	test   eax,eax
c00008cd:	74 05                	je     c00008d4 <strstr+0x37>
c00008cf:	43                   	inc    ebx
c00008d0:	eb e3                	jmp    c00008b5 <strstr+0x18>
c00008d2:	31 db                	xor    ebx,ebx
c00008d4:	89 d8                	mov    eax,ebx
c00008d6:	5b                   	pop    ebx
c00008d7:	5e                   	pop    esi
c00008d8:	5f                   	pop    edi
c00008d9:	c3                   	ret    

c00008da <toupper>:
c00008da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008de:	0f b6 d0             	movzx  edx,al
c00008e1:	f6 82 00 00 02 c0 02 	test   BYTE PTR [edx-0x3ffe0000],0x2
c00008e8:	74 03                	je     c00008ed <toupper+0x13>
c00008ea:	83 e8 20             	sub    eax,0x20
c00008ed:	c3                   	ret    

c00008ee <tolower>:
c00008ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f2:	0f b6 d0             	movzx  edx,al
c00008f5:	f6 82 00 00 02 c0 01 	test   BYTE PTR [edx-0x3ffe0000],0x1
c00008fc:	74 03                	je     c0000901 <tolower+0x13>
c00008fe:	83 c0 20             	add    eax,0x20
c0000901:	c3                   	ret    

c0000902 <simple_strtoul>:
c0000902:	55                   	push   ebp
c0000903:	57                   	push   edi
c0000904:	56                   	push   esi
c0000905:	53                   	push   ebx
c0000906:	83 ec 08             	sub    esp,0x8
c0000909:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000090d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000911:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000914:	f6 82 00 00 02 c0 08 	test   BYTE PTR [edx-0x3ffe0000],0x8
c000091b:	74 03                	je     c0000920 <simple_strtoul+0x1e>
c000091d:	41                   	inc    ecx
c000091e:	eb f1                	jmp    c0000911 <simple_strtoul+0xf>
c0000920:	80 fa 09             	cmp    dl,0x9
c0000923:	74 f8                	je     c000091d <simple_strtoul+0x1b>
c0000925:	80 fa 2d             	cmp    dl,0x2d
c0000928:	75 0b                	jne    c0000935 <simple_strtoul+0x33>
c000092a:	41                   	inc    ecx
c000092b:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000933:	eb 0e                	jmp    c0000943 <simple_strtoul+0x41>
c0000935:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000093d:	80 fa 2b             	cmp    dl,0x2b
c0000940:	75 01                	jne    c0000943 <simple_strtoul+0x41>
c0000942:	41                   	inc    ecx
c0000943:	85 f6                	test   esi,esi
c0000945:	75 22                	jne    c0000969 <simple_strtoul+0x67>
c0000947:	be 0a 00 00 00       	mov    esi,0xa
c000094c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000094f:	75 5a                	jne    c00009ab <simple_strtoul+0xa9>
c0000951:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000955:	50                   	push   eax
c0000956:	e8 93 ff ff ff       	call   c00008ee <tolower>
c000095b:	5a                   	pop    edx
c000095c:	83 f8 78             	cmp    eax,0x78
c000095f:	74 03                	je     c0000964 <simple_strtoul+0x62>
c0000961:	41                   	inc    ecx
c0000962:	eb 16                	jmp    c000097a <simple_strtoul+0x78>
c0000964:	83 c1 02             	add    ecx,0x2
c0000967:	eb 22                	jmp    c000098b <simple_strtoul+0x89>
c0000969:	8d 46 fe             	lea    eax,[esi-0x2]
c000096c:	83 f8 22             	cmp    eax,0x22
c000096f:	0f 87 b7 00 00 00    	ja     c0000a2c <simple_strtoul+0x12a>
c0000975:	83 fe 08             	cmp    esi,0x8
c0000978:	75 0c                	jne    c0000986 <simple_strtoul+0x84>
c000097a:	be 08 00 00 00       	mov    esi,0x8
c000097f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000982:	75 27                	jne    c00009ab <simple_strtoul+0xa9>
c0000984:	eb 1f                	jmp    c00009a5 <simple_strtoul+0xa3>
c0000986:	83 fe 10             	cmp    esi,0x10
c0000989:	75 20                	jne    c00009ab <simple_strtoul+0xa9>
c000098b:	be 10 00 00 00       	mov    esi,0x10
c0000990:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000993:	75 16                	jne    c00009ab <simple_strtoul+0xa9>
c0000995:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000999:	50                   	push   eax
c000099a:	e8 4f ff ff ff       	call   c00008ee <tolower>
c000099f:	5d                   	pop    ebp
c00009a0:	83 f8 78             	cmp    eax,0x78
c00009a3:	74 03                	je     c00009a8 <simple_strtoul+0xa6>
c00009a5:	41                   	inc    ecx
c00009a6:	eb 03                	jmp    c00009ab <simple_strtoul+0xa9>
c00009a8:	83 c1 02             	add    ecx,0x2
c00009ab:	31 ed                	xor    ebp,ebp
c00009ad:	31 db                	xor    ebx,ebx
c00009af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009b6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b8:	84 d2                	test   dl,dl
c00009ba:	74 27                	je     c00009e3 <simple_strtoul+0xe1>
c00009bc:	0f b6 fa             	movzx  edi,dl
c00009bf:	f6 87 00 00 02 c0 04 	test   BYTE PTR [edi-0x3ffe0000],0x4
c00009c6:	74 05                	je     c00009cd <simple_strtoul+0xcb>
c00009c8:	83 ef 30             	sub    edi,0x30
c00009cb:	eb 22                	jmp    c00009ef <simple_strtoul+0xed>
c00009cd:	0f be d2             	movsx  edx,dl
c00009d0:	52                   	push   edx
c00009d1:	e8 04 ff ff ff       	call   c00008da <toupper>
c00009d6:	5f                   	pop    edi
c00009d7:	0f b6 d0             	movzx  edx,al
c00009da:	f6 82 00 00 02 c0 01 	test   BYTE PTR [edx-0x3ffe0000],0x1
c00009e1:	75 09                	jne    c00009ec <simple_strtoul+0xea>
c00009e3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009e8:	75 2d                	jne    c0000a17 <simple_strtoul+0x115>
c00009ea:	eb 57                	jmp    c0000a43 <simple_strtoul+0x141>
c00009ec:	8d 78 c9             	lea    edi,[eax-0x37]
c00009ef:	39 f7                	cmp    edi,esi
c00009f1:	73 f0                	jae    c00009e3 <simple_strtoul+0xe1>
c00009f3:	31 d2                	xor    edx,edx
c00009f5:	89 f8                	mov    eax,edi
c00009f7:	f7 d0                	not    eax
c00009f9:	f7 f6                	div    esi
c00009fb:	39 d8                	cmp    eax,ebx
c00009fd:	72 0e                	jb     c0000a0d <simple_strtoul+0x10b>
c00009ff:	0f af de             	imul   ebx,esi
c0000a02:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a09:	01 fb                	add    ebx,edi
c0000a0b:	eb 07                	jmp    c0000a14 <simple_strtoul+0x112>
c0000a0d:	bd 01 00 00 00       	mov    ebp,0x1
c0000a12:	31 db                	xor    ebx,ebx
c0000a14:	41                   	inc    ecx
c0000a15:	eb 9f                	jmp    c00009b6 <simple_strtoul+0xb4>
c0000a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1a:	09 d8                	or     eax,ebx
c0000a1c:	75 1f                	jne    c0000a3d <simple_strtoul+0x13b>
c0000a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a22:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a26:	31 db                	xor    ebx,ebx
c0000a28:	89 38                	mov    DWORD PTR [eax],edi
c0000a2a:	eb 17                	jmp    c0000a43 <simple_strtoul+0x141>
c0000a2c:	31 db                	xor    ebx,ebx
c0000a2e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a33:	74 14                	je     c0000a49 <simple_strtoul+0x147>
c0000a35:	31 ed                	xor    ebp,ebp
c0000a37:	85 c9                	test   ecx,ecx
c0000a39:	75 e3                	jne    c0000a1e <simple_strtoul+0x11c>
c0000a3b:	31 db                	xor    ebx,ebx
c0000a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a41:	89 08                	mov    DWORD PTR [eax],ecx
c0000a43:	4d                   	dec    ebp
c0000a44:	75 03                	jne    c0000a49 <simple_strtoul+0x147>
c0000a46:	83 cb ff             	or     ebx,0xffffffff
c0000a49:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a4e:	75 02                	jne    c0000a52 <simple_strtoul+0x150>
c0000a50:	f7 db                	neg    ebx
c0000a52:	83 c4 08             	add    esp,0x8
c0000a55:	89 d8                	mov    eax,ebx
c0000a57:	5b                   	pop    ebx
c0000a58:	5e                   	pop    esi
c0000a59:	5f                   	pop    edi
c0000a5a:	5d                   	pop    ebp
c0000a5b:	c3                   	ret    

c0000a5c <largebin_index>:
c0000a5c:	89 c2                	mov    edx,eax
c0000a5e:	c1 ea 08             	shr    edx,0x8
c0000a61:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a67:	77 10                	ja     c0000a79 <largebin_index+0x1d>
c0000a69:	0f bd d2             	bsr    edx,edx
c0000a6c:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a6f:	d3 e8                	shr    eax,cl
c0000a71:	83 e0 03             	and    eax,0x3
c0000a74:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a78:	c3                   	ret    
c0000a79:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a7e:	c3                   	ret    

c0000a7f <malloc_init_state>:
c0000a7f:	53                   	push   ebx
c0000a80:	8d 50 34             	lea    edx,[eax+0x34]
c0000a83:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a89:	89 d1                	mov    ecx,edx
c0000a8b:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a8e:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a91:	83 c2 08             	add    edx,0x8
c0000a94:	39 da                	cmp    edx,ebx
c0000a96:	75 f3                	jne    c0000a8b <malloc_init_state+0xc>
c0000a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a9a:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000aa4:	83 e2 03             	and    edx,0x3
c0000aa7:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ab1:	83 ca 48             	or     edx,0x48
c0000ab4:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000abe:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ac8:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ad4:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ade:	5b                   	pop    ebx
c0000adf:	c3                   	ret    

c0000ae0 <malloc_consolidate>:
c0000ae0:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ae2:	85 d2                	test   edx,edx
c0000ae4:	0f 84 d8 00 00 00    	je     c0000bc2 <malloc_consolidate+0xe2>
c0000aea:	55                   	push   ebp
c0000aeb:	83 e2 fd             	and    edx,0xfffffffd
c0000aee:	57                   	push   edi
c0000aef:	89 c5                	mov    ebp,eax
c0000af1:	56                   	push   esi
c0000af2:	8d 78 34             	lea    edi,[eax+0x34]
c0000af5:	53                   	push   ebx
c0000af6:	83 ec 10             	sub    esp,0x10
c0000af9:	89 10                	mov    DWORD PTR [eax],edx
c0000afb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aff:	c1 ea 03             	shr    edx,0x3
c0000b02:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000b06:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000b0a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000b0d:	85 d2                	test   edx,edx
c0000b0f:	0f 84 98 00 00 00    	je     c0000bad <malloc_consolidate+0xcd>
c0000b15:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b1c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b1f:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b22:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b26:	89 f9                	mov    ecx,edi
c0000b28:	83 e1 fe             	and    ecx,0xfffffffe
c0000b2b:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b2e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b31:	83 e3 fc             	and    ebx,0xfffffffc
c0000b34:	83 e7 01             	and    edi,0x1
c0000b37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b3a:	75 14                	jne    c0000b50 <malloc_consolidate+0x70>
c0000b3c:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b3e:	29 fa                	sub    edx,edi
c0000b40:	01 f9                	add    ecx,edi
c0000b42:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b45:	89 fb                	mov    ebx,edi
c0000b47:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b4a:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b4d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b50:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b53:	74 40                	je     c0000b95 <malloc_consolidate+0xb5>
c0000b55:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b58:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b5b:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b5f:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b62:	83 e7 01             	and    edi,0x1
c0000b65:	75 0e                	jne    c0000b75 <malloc_consolidate+0x95>
c0000b67:	01 d9                	add    ecx,ebx
c0000b69:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b6c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b6f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b72:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b75:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b78:	89 ce                	mov    esi,ecx
c0000b7a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b7d:	83 ce 01             	or     esi,0x1
c0000b80:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b83:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b86:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b89:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b8d:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b90:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b93:	eb 0c                	jmp    c0000ba1 <malloc_consolidate+0xc1>
c0000b95:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b98:	83 c9 01             	or     ecx,0x1
c0000b9b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b9e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ba5:	85 d2                	test   edx,edx
c0000ba7:	0f 85 6f ff ff ff    	jne    c0000b1c <malloc_consolidate+0x3c>
c0000bad:	83 c5 04             	add    ebp,0x4
c0000bb0:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000bb4:	0f 85 50 ff ff ff    	jne    c0000b0a <malloc_consolidate+0x2a>
c0000bba:	83 c4 10             	add    esp,0x10
c0000bbd:	5b                   	pop    ebx
c0000bbe:	5e                   	pop    esi
c0000bbf:	5f                   	pop    edi
c0000bc0:	5d                   	pop    ebp
c0000bc1:	c3                   	ret    
c0000bc2:	e9 b8 fe ff ff       	jmp    c0000a7f <malloc_init_state>

c0000bc7 <dlfree>:
c0000bc7:	57                   	push   edi
c0000bc8:	56                   	push   esi
c0000bc9:	53                   	push   ebx
c0000bca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bce:	85 db                	test   ebx,ebx
c0000bd0:	0f 84 e2 00 00 00    	je     c0000cb8 <dlfree+0xf1>
c0000bd6:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bd9:	8b 0d c0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc0
c0000bdf:	89 f0                	mov    eax,esi
c0000be1:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000be4:	83 e0 fc             	and    eax,0xfffffffc
c0000be7:	39 c1                	cmp    ecx,eax
c0000be9:	72 24                	jb     c0000c0f <dlfree+0x48>
c0000beb:	83 c9 03             	or     ecx,0x3
c0000bee:	c1 e8 03             	shr    eax,0x3
c0000bf1:	89 0d c0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc0,ecx
c0000bf7:	83 e8 02             	sub    eax,0x2
c0000bfa:	8b 0c 85 c4 3f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc03c]
c0000c01:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000c03:	89 14 85 c4 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc03c],edx
c0000c0a:	e9 a9 00 00 00       	jmp    c0000cb8 <dlfree+0xf1>
c0000c0f:	83 e6 02             	and    esi,0x2
c0000c12:	0f 85 a0 00 00 00    	jne    c0000cb8 <dlfree+0xf1>
c0000c18:	83 c9 01             	or     ecx,0x1
c0000c1b:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c1e:	89 0d c0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fc0,ecx
c0000c24:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c27:	83 e1 fc             	and    ecx,0xfffffffc
c0000c2a:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c2e:	75 13                	jne    c0000c43 <dlfree+0x7c>
c0000c30:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c33:	29 da                	sub    edx,ebx
c0000c35:	01 d8                	add    eax,ebx
c0000c37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	39 35 ec 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fec,esi
c0000c49:	74 40                	je     c0000c8b <dlfree+0xc4>
c0000c4b:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c4f:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c52:	80 e3 01             	and    bl,0x1
c0000c55:	75 0e                	jne    c0000c65 <dlfree+0x9e>
c0000c57:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c5a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c5d:	01 c8                	add    eax,ecx
c0000c5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c65:	8b 0d fc 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ffc
c0000c6b:	c7 42 0c f4 3f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023ff4
c0000c72:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c75:	89 15 fc 3f 02 c0    	mov    DWORD PTR ds:0xc0023ffc,edx
c0000c7b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c7e:	89 c1                	mov    ecx,eax
c0000c80:	83 c9 01             	or     ecx,0x1
c0000c83:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c86:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c89:	eb 10                	jmp    c0000c9b <dlfree+0xd4>
c0000c8b:	01 c8                	add    eax,ecx
c0000c8d:	89 c1                	mov    ecx,eax
c0000c8f:	83 c9 01             	or     ecx,0x1
c0000c92:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c95:	89 15 ec 3f 02 c0    	mov    DWORD PTR ds:0xc0023fec,edx
c0000c9b:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ca0:	76 16                	jbe    c0000cb8 <dlfree+0xf1>
c0000ca2:	f6 05 c0 3f 02 c0 02 	test   BYTE PTR ds:0xc0023fc0,0x2
c0000ca9:	74 0d                	je     c0000cb8 <dlfree+0xf1>
c0000cab:	5b                   	pop    ebx
c0000cac:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0000cb1:	5e                   	pop    esi
c0000cb2:	5f                   	pop    edi
c0000cb3:	e9 28 fe ff ff       	jmp    c0000ae0 <malloc_consolidate>
c0000cb8:	5b                   	pop    ebx
c0000cb9:	5e                   	pop    esi
c0000cba:	5f                   	pop    edi
c0000cbb:	c3                   	ret    

c0000cbc <sYSMALLOc>:
c0000cbc:	55                   	push   ebp
c0000cbd:	57                   	push   edi
c0000cbe:	56                   	push   esi
c0000cbf:	53                   	push   ebx
c0000cc0:	89 d3                	mov    ebx,edx
c0000cc2:	83 ec 2c             	sub    esp,0x2c
c0000cc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000cc9:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ccf:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cd2:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cd9:	74 1f                	je     c0000cfa <sYSMALLOc+0x3e>
c0000cdb:	89 d8                	mov    eax,ebx
c0000cdd:	e8 fe fd ff ff       	call   c0000ae0 <malloc_consolidate>
c0000ce2:	83 ec 0c             	sub    esp,0xc
c0000ce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ce9:	83 e8 07             	sub    eax,0x7
c0000cec:	50                   	push   eax
c0000ced:	e8 30 02 00 00       	call   c0000f22 <dlmalloc>
c0000cf2:	83 c4 10             	add    esp,0x10
c0000cf5:	e9 20 02 00 00       	jmp    c0000f1a <sYSMALLOc+0x25e>
c0000cfa:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cfd:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000d03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000d06:	83 e0 fc             	and    eax,0xfffffffc
c0000d09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000d0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000d11:	83 c0 10             	add    eax,0x10
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d1a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d21:	74 04                	je     c0000d27 <sYSMALLOc+0x6b>
c0000d23:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d27:	f7 da                	neg    edx
c0000d29:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d2d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d31:	21 d1                	and    ecx,edx
c0000d33:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d37:	7f 07                	jg     c0000d40 <sYSMALLOc+0x84>
c0000d39:	31 c0                	xor    eax,eax
c0000d3b:	e9 da 01 00 00       	jmp    c0000f1a <sYSMALLOc+0x25e>
c0000d40:	83 ec 0c             	sub    esp,0xc
c0000d43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d47:	e8 49 b1 00 00       	call   c000be95 <sbrk>
c0000d4c:	83 c4 10             	add    esp,0x10
c0000d4f:	89 c6                	mov    esi,eax
c0000d51:	83 f8 ff             	cmp    eax,0xffffffff
c0000d54:	74 e3                	je     c0000d39 <sYSMALLOc+0x7d>
c0000d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d5a:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d5e:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d61:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d67:	39 f1                	cmp    ecx,esi
c0000d69:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d6f:	75 13                	jne    c0000d84 <sYSMALLOc+0xc8>
c0000d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d75:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d79:	83 c8 01             	or     eax,0x1
c0000d7c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d7f:	e9 3e 01 00 00       	jmp    c0000ec2 <sYSMALLOc+0x206>
c0000d84:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d8a:	88 d0                	mov    al,dl
c0000d8c:	83 e0 01             	and    eax,0x1
c0000d8f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d94:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d98:	0f 95 c0             	setne  al
c0000d9b:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d9f:	39 f1                	cmp    ecx,esi
c0000da1:	76 12                	jbe    c0000db5 <sYSMALLOc+0xf9>
c0000da3:	84 c0                	test   al,al
c0000da5:	74 0e                	je     c0000db5 <sYSMALLOc+0xf9>
c0000da7:	83 e2 fe             	and    edx,0xfffffffe
c0000daa:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000db0:	e9 83 00 00 00       	jmp    c0000e38 <sYSMALLOc+0x17c>
c0000db5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000dba:	74 7c                	je     c0000e38 <sYSMALLOc+0x17c>
c0000dbc:	84 c0                	test   al,al
c0000dbe:	74 0c                	je     c0000dcc <sYSMALLOc+0x110>
c0000dc0:	89 f0                	mov    eax,esi
c0000dc2:	29 c8                	sub    eax,ecx
c0000dc4:	01 e8                	add    eax,ebp
c0000dc6:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dcc:	89 f2                	mov    edx,esi
c0000dce:	83 e2 07             	and    edx,0x7
c0000dd1:	74 0c                	je     c0000ddf <sYSMALLOc+0x123>
c0000dd3:	b8 08 00 00 00       	mov    eax,0x8
c0000dd8:	29 d0                	sub    eax,edx
c0000dda:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ddd:	eb 04                	jmp    c0000de3 <sYSMALLOc+0x127>
c0000ddf:	89 f5                	mov    ebp,esi
c0000de1:	31 c0                	xor    eax,eax
c0000de3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000de7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000deb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000def:	01 c1                	add    ecx,eax
c0000df1:	83 ec 0c             	sub    esp,0xc
c0000df4:	01 f1                	add    ecx,esi
c0000df6:	01 ca                	add    edx,ecx
c0000df8:	29 c8                	sub    eax,ecx
c0000dfa:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dfe:	01 c2                	add    edx,eax
c0000e00:	52                   	push   edx
c0000e01:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000e05:	e8 8b b0 00 00       	call   c000be95 <sbrk>
c0000e0a:	83 c4 10             	add    esp,0x10
c0000e0d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000e14:	75 0f                	jne    c0000e25 <sYSMALLOc+0x169>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	6a 00                	push   0x0
c0000e1b:	e8 75 b0 00 00       	call   c000be95 <sbrk>
c0000e20:	83 c4 10             	add    esp,0x10
c0000e23:	eb 30                	jmp    c0000e55 <sYSMALLOc+0x199>
c0000e25:	39 c6                	cmp    esi,eax
c0000e27:	76 33                	jbe    c0000e5c <sYSMALLOc+0x1a0>
c0000e29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e2d:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e34:	01 f0                	add    eax,esi
c0000e36:	eb 1d                	jmp    c0000e55 <sYSMALLOc+0x199>
c0000e38:	83 ec 0c             	sub    esp,0xc
c0000e3b:	89 f5                	mov    ebp,esi
c0000e3d:	6a 00                	push   0x0
c0000e3f:	e8 51 b0 00 00       	call   c000be95 <sbrk>
c0000e44:	89 c2                	mov    edx,eax
c0000e46:	29 f2                	sub    edx,esi
c0000e48:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e4c:	83 c4 10             	add    esp,0x10
c0000e4f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e55:	31 d2                	xor    edx,edx
c0000e57:	83 f8 ff             	cmp    eax,0xffffffff
c0000e5a:	74 66                	je     c0000ec2 <sYSMALLOc+0x206>
c0000e5c:	29 e8                	sub    eax,ebp
c0000e5e:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e61:	01 d0                	add    eax,edx
c0000e63:	83 c8 01             	or     eax,0x1
c0000e66:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e69:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e6f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e74:	74 4c                	je     c0000ec2 <sYSMALLOc+0x206>
c0000e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 e8 0c             	sub    eax,0xc
c0000e7d:	83 e0 f8             	and    eax,0xfffffff8
c0000e80:	89 c2                	mov    edx,eax
c0000e82:	83 ca 01             	or     edx,0x1
c0000e85:	83 f8 0f             	cmp    eax,0xf
c0000e88:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8b:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e93:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9b:	76 25                	jbe    c0000ec2 <sYSMALLOc+0x206>
c0000e9d:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ea3:	83 ec 0c             	sub    esp,0xc
c0000ea6:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000eb0:	83 c7 08             	add    edi,0x8
c0000eb3:	57                   	push   edi
c0000eb4:	e8 0e fd ff ff       	call   c0000bc7 <dlfree>
c0000eb9:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ec8:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ece:	73 06                	jae    c0000ed6 <sYSMALLOc+0x21a>
c0000ed0:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ed6:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000edc:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ee2:	73 06                	jae    c0000eea <sYSMALLOc+0x22e>
c0000ee4:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000eea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000eed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ef0:	83 e2 fc             	and    edx,0xfffffffc
c0000ef3:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ef7:	0f 82 3c fe ff ff    	jb     c0000d39 <sYSMALLOc+0x7d>
c0000efd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000f01:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f04:	29 fa                	sub    edx,edi
c0000f06:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f09:	83 ca 01             	or     edx,0x1
c0000f0c:	89 fb                	mov    ebx,edi
c0000f0e:	83 c0 08             	add    eax,0x8
c0000f11:	83 cb 01             	or     ebx,0x1
c0000f14:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f17:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f1a:	83 c4 2c             	add    esp,0x2c
c0000f1d:	5b                   	pop    ebx
c0000f1e:	5e                   	pop    esi
c0000f1f:	5f                   	pop    edi
c0000f20:	5d                   	pop    ebp
c0000f21:	c3                   	ret    

c0000f22 <dlmalloc>:
c0000f22:	55                   	push   ebp
c0000f23:	57                   	push   edi
c0000f24:	56                   	push   esi
c0000f25:	53                   	push   ebx
c0000f26:	83 ec 1c             	sub    esp,0x1c
c0000f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f2d:	83 f8 df             	cmp    eax,0xffffffdf
c0000f30:	0f 87 70 03 00 00    	ja     c00012a6 <dlmalloc+0x384>
c0000f36:	83 c0 0b             	add    eax,0xb
c0000f39:	be 10 00 00 00       	mov    esi,0x10
c0000f3e:	83 f8 0f             	cmp    eax,0xf
c0000f41:	76 05                	jbe    c0000f48 <dlmalloc+0x26>
c0000f43:	83 e0 f8             	and    eax,0xfffffff8
c0000f46:	89 c6                	mov    esi,eax
c0000f48:	8b 3d c0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fc0
c0000f4e:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f54:	75 17                	jne    c0000f6d <dlmalloc+0x4b>
c0000f56:	85 ff                	test   edi,edi
c0000f58:	0f 85 05 03 00 00    	jne    c0001263 <dlmalloc+0x341>
c0000f5e:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0000f63:	e8 78 fb ff ff       	call   c0000ae0 <malloc_consolidate>
c0000f68:	e9 f6 02 00 00       	jmp    c0001263 <dlmalloc+0x341>
c0000f6d:	39 f7                	cmp    edi,esi
c0000f6f:	72 1f                	jb     c0000f90 <dlmalloc+0x6e>
c0000f71:	89 f2                	mov    edx,esi
c0000f73:	c1 ea 03             	shr    edx,0x3
c0000f76:	83 ea 02             	sub    edx,0x2
c0000f79:	8b 04 95 c4 3f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc03c]
c0000f80:	85 c0                	test   eax,eax
c0000f82:	74 0c                	je     c0000f90 <dlmalloc+0x6e>
c0000f84:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f87:	89 0c 95 c4 3f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc03c],ecx
c0000f8e:	eb 30                	jmp    c0000fc0 <dlmalloc+0x9e>
c0000f90:	89 f0                	mov    eax,esi
c0000f92:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f98:	77 2e                	ja     c0000fc8 <dlmalloc+0xa6>
c0000f9a:	c1 e8 03             	shr    eax,0x3
c0000f9d:	8d 14 c5 f4 3f 02 c0 	lea    edx,[eax*8-0x3ffdc00c]
c0000fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fa8:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000fab:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000fae:	39 c3                	cmp    ebx,eax
c0000fb0:	74 2e                	je     c0000fe0 <dlmalloc+0xbe>
c0000fb2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fb5:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fba:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fbd:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fc0:	83 c0 08             	add    eax,0x8
c0000fc3:	e9 e0 02 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0000fc8:	e8 8f fa ff ff       	call   c0000a5c <largebin_index>
c0000fcd:	83 e7 02             	and    edi,0x2
c0000fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fd4:	74 0a                	je     c0000fe0 <dlmalloc+0xbe>
c0000fd6:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0000fdb:	e8 00 fb ff ff       	call   c0000ae0 <malloc_consolidate>
c0000fe0:	8d 46 10             	lea    eax,[esi+0x10]
c0000fe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fe7:	8b 1d 00 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024000
c0000fed:	81 fb f4 3f 02 c0    	cmp    ebx,0xc0023ff4
c0000ff3:	0f 84 13 01 00 00    	je     c000110c <dlmalloc+0x1ea>
c0000ff9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000ffc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fff:	83 e7 fc             	and    edi,0xfffffffc
c0001002:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001008:	77 4c                	ja     c0001056 <dlmalloc+0x134>
c000100a:	3d f4 3f 02 c0       	cmp    eax,0xc0023ff4
c000100f:	75 45                	jne    c0001056 <dlmalloc+0x134>
c0001011:	39 1d f0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023ff0,ebx
c0001017:	75 3d                	jne    c0001056 <dlmalloc+0x134>
c0001019:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000101d:	73 37                	jae    c0001056 <dlmalloc+0x134>
c000101f:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001022:	89 fa                	mov    edx,edi
c0001024:	a3 fc 3f 02 c0       	mov    ds:0xc0023ffc,eax
c0001029:	a3 00 40 02 c0       	mov    ds:0xc0024000,eax
c000102e:	a3 f0 3f 02 c0       	mov    ds:0xc0023ff0,eax
c0001033:	29 f2                	sub    edx,esi
c0001035:	c7 40 08 f4 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023ff4
c000103c:	c7 40 0c f4 3f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023ff4
c0001043:	83 ce 01             	or     esi,0x1
c0001046:	89 d1                	mov    ecx,edx
c0001048:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000104b:	83 c9 01             	or     ecx,0x1
c000104e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001051:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001054:	eb 15                	jmp    c000106b <dlmalloc+0x149>
c0001056:	a3 00 40 02 c0       	mov    ds:0xc0024000,eax
c000105b:	39 fe                	cmp    esi,edi
c000105d:	c7 40 08 f4 3f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023ff4
c0001064:	75 0d                	jne    c0001073 <dlmalloc+0x151>
c0001066:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000106b:	8d 43 08             	lea    eax,[ebx+0x8]
c000106e:	e9 35 02 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001073:	89 f8                	mov    eax,edi
c0001075:	81 ff ff 00 00 00    	cmp    edi,0xff
c000107b:	77 19                	ja     c0001096 <dlmalloc+0x174>
c000107d:	c1 e8 03             	shr    eax,0x3
c0001080:	8d 14 00             	lea    edx,[eax+eax*1]
c0001083:	83 c2 0d             	add    edx,0xd
c0001086:	8d 2c 95 b8 3f 02 c0 	lea    ebp,[edx*4-0x3ffdc048]
c000108d:	8b 14 95 c0 3f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc040]
c0001094:	eb 46                	jmp    c00010dc <dlmalloc+0x1ba>
c0001096:	e8 c1 f9 ff ff       	call   c0000a5c <largebin_index>
c000109b:	8d 14 00             	lea    edx,[eax+eax*1]
c000109e:	83 c2 0d             	add    edx,0xd
c00010a1:	8d 0c 95 c0 3f 02 c0 	lea    ecx,[edx*4-0x3ffdc040]
c00010a8:	8b 14 95 c0 3f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc040]
c00010af:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010b2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010b6:	89 d5                	mov    ebp,edx
c00010b8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010bc:	74 1e                	je     c00010dc <dlmalloc+0x1ba>
c00010be:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010c1:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010c4:	77 12                	ja     c00010d8 <dlmalloc+0x1b6>
c00010c6:	83 cf 01             	or     edi,0x1
c00010c9:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010cc:	76 05                	jbe    c00010d3 <dlmalloc+0x1b1>
c00010ce:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010d1:	eb f6                	jmp    c00010c9 <dlmalloc+0x1a7>
c00010d3:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010d6:	eb 04                	jmp    c00010dc <dlmalloc+0x1ba>
c00010d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010dc:	89 c7                	mov    edi,eax
c00010de:	88 c1                	mov    cl,al
c00010e0:	c1 ff 05             	sar    edi,0x5
c00010e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010e7:	bf 01 00 00 00       	mov    edi,0x1
c00010ec:	d3 e7                	shl    edi,cl
c00010ee:	89 f8                	mov    eax,edi
c00010f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010f4:	09 04 bd f4 42 02 c0 	or     DWORD PTR [edi*4-0x3ffdbd0c],eax
c00010fb:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001101:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001104:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001107:	e9 db fe ff ff       	jmp    c0000fe7 <dlmalloc+0xc5>
c000110c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001112:	76 78                	jbe    c000118c <dlmalloc+0x26a>
c0001114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001118:	8d 04 c5 f4 3f 02 c0 	lea    eax,[eax*8-0x3ffdc00c]
c000111f:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001122:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001125:	39 ca                	cmp    edx,ecx
c0001127:	74 63                	je     c000118c <dlmalloc+0x26a>
c0001129:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000112c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000112f:	83 e3 fc             	and    ebx,0xfffffffc
c0001132:	39 de                	cmp    esi,ebx
c0001134:	77 52                	ja     c0001188 <dlmalloc+0x266>
c0001136:	89 df                	mov    edi,ebx
c0001138:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000113b:	29 f7                	sub    edi,esi
c000113d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001140:	01 d3                	add    ebx,edx
c0001142:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001145:	83 ff 0f             	cmp    edi,0xf
c0001148:	8d 42 08             	lea    eax,[edx+0x8]
c000114b:	77 09                	ja     c0001156 <dlmalloc+0x234>
c000114d:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001151:	e9 52 01 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001156:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001159:	83 ce 01             	or     esi,0x1
c000115c:	89 0d fc 3f 02 c0    	mov    DWORD PTR ds:0xc0023ffc,ecx
c0001162:	89 0d 00 40 02 c0    	mov    DWORD PTR ds:0xc0024000,ecx
c0001168:	c7 41 08 f4 3f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023ff4
c000116f:	c7 41 0c f4 3f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023ff4
c0001176:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001179:	89 fa                	mov    edx,edi
c000117b:	83 ca 01             	or     edx,0x1
c000117e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001181:	89 3b                	mov    DWORD PTR [ebx],edi
c0001183:	e9 20 01 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001188:	89 c2                	mov    edx,eax
c000118a:	eb 99                	jmp    c0001125 <dlmalloc+0x203>
c000118c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001190:	b8 01 00 00 00       	mov    eax,0x1
c0001195:	41                   	inc    ecx
c0001196:	89 cb                	mov    ebx,ecx
c0001198:	8d 14 cd ec 3f 02 c0 	lea    edx,[ecx*8-0x3ffdc014]
c000119f:	c1 eb 05             	shr    ebx,0x5
c00011a2:	d3 e0                	shl    eax,cl
c00011a4:	8b 3c 9d f4 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbd0c]
c00011ab:	39 f8                	cmp    eax,edi
c00011ad:	77 04                	ja     c00011b3 <dlmalloc+0x291>
c00011af:	85 c0                	test   eax,eax
c00011b1:	75 26                	jne    c00011d9 <dlmalloc+0x2b7>
c00011b3:	43                   	inc    ebx
c00011b4:	83 fb 02             	cmp    ebx,0x2
c00011b7:	0f 87 a6 00 00 00    	ja     c0001263 <dlmalloc+0x341>
c00011bd:	8b 3c 9d f4 42 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbd0c]
c00011c4:	85 ff                	test   edi,edi
c00011c6:	74 eb                	je     c00011b3 <dlmalloc+0x291>
c00011c8:	89 d8                	mov    eax,ebx
c00011ca:	c1 e0 06             	shl    eax,0x6
c00011cd:	8d 14 85 ec 3f 02 c0 	lea    edx,[eax*4-0x3ffdc014]
c00011d4:	b8 01 00 00 00       	mov    eax,0x1
c00011d9:	85 f8                	test   eax,edi
c00011db:	75 07                	jne    c00011e4 <dlmalloc+0x2c2>
c00011dd:	83 c2 08             	add    edx,0x8
c00011e0:	01 c0                	add    eax,eax
c00011e2:	eb f5                	jmp    c00011d9 <dlmalloc+0x2b7>
c00011e4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	75 14                	jne    c00011ff <dlmalloc+0x2dd>
c00011eb:	89 c1                	mov    ecx,eax
c00011ed:	83 c2 08             	add    edx,0x8
c00011f0:	f7 d1                	not    ecx
c00011f2:	01 c0                	add    eax,eax
c00011f4:	21 cf                	and    edi,ecx
c00011f6:	89 3c 9d f4 42 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbd0c],edi
c00011fd:	eb ac                	jmp    c00011ab <dlmalloc+0x289>
c00011ff:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001202:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001205:	83 e0 fc             	and    eax,0xfffffffc
c0001208:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000120b:	89 c3                	mov    ebx,eax
c000120d:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001210:	29 f3                	sub    ebx,esi
c0001212:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001215:	83 fb 0f             	cmp    ebx,0xf
c0001218:	8d 41 08             	lea    eax,[ecx+0x8]
c000121b:	77 09                	ja     c0001226 <dlmalloc+0x304>
c000121d:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001221:	e9 82 00 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001226:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001229:	81 fe ff 00 00 00    	cmp    esi,0xff
c000122f:	89 3d fc 3f 02 c0    	mov    DWORD PTR ds:0xc0023ffc,edi
c0001235:	89 3d 00 40 02 c0    	mov    DWORD PTR ds:0xc0024000,edi
c000123b:	c7 47 08 f4 3f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023ff4
c0001242:	c7 47 0c f4 3f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023ff4
c0001249:	77 06                	ja     c0001251 <dlmalloc+0x32f>
c000124b:	89 3d f0 3f 02 c0    	mov    DWORD PTR ds:0xc0023ff0,edi
c0001251:	83 ce 01             	or     esi,0x1
c0001254:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001257:	89 d9                	mov    ecx,ebx
c0001259:	83 c9 01             	or     ecx,0x1
c000125c:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000125f:	89 1a                	mov    DWORD PTR [edx],ebx
c0001261:	eb 45                	jmp    c00012a8 <dlmalloc+0x386>
c0001263:	a1 ec 3f 02 c0       	mov    eax,ds:0xc0023fec
c0001268:	8d 4e 10             	lea    ecx,[esi+0x10]
c000126b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000126e:	83 e2 fc             	and    edx,0xfffffffc
c0001271:	39 d1                	cmp    ecx,edx
c0001273:	77 1e                	ja     c0001293 <dlmalloc+0x371>
c0001275:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001278:	89 f3                	mov    ebx,esi
c000127a:	89 0d ec 3f 02 c0    	mov    DWORD PTR ds:0xc0023fec,ecx
c0001280:	83 cb 01             	or     ebx,0x1
c0001283:	29 f2                	sub    edx,esi
c0001285:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001288:	83 ca 01             	or     edx,0x1
c000128b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000128e:	e9 2d fd ff ff       	jmp    c0000fc0 <dlmalloc+0x9e>
c0001293:	83 c4 1c             	add    esp,0x1c
c0001296:	89 f0                	mov    eax,esi
c0001298:	5b                   	pop    ebx
c0001299:	ba c0 3f 02 c0       	mov    edx,0xc0023fc0
c000129e:	5e                   	pop    esi
c000129f:	5f                   	pop    edi
c00012a0:	5d                   	pop    ebp
c00012a1:	e9 16 fa ff ff       	jmp    c0000cbc <sYSMALLOc>
c00012a6:	31 c0                	xor    eax,eax
c00012a8:	83 c4 1c             	add    esp,0x1c
c00012ab:	5b                   	pop    ebx
c00012ac:	5e                   	pop    esi
c00012ad:	5f                   	pop    edi
c00012ae:	5d                   	pop    ebp
c00012af:	c3                   	ret    

c00012b0 <iALLOc>:
c00012b0:	55                   	push   ebp
c00012b1:	89 c5                	mov    ebp,eax
c00012b3:	57                   	push   edi
c00012b4:	56                   	push   esi
c00012b5:	53                   	push   ebx
c00012b6:	83 ec 2c             	sub    esp,0x2c
c00012b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012bd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012c5:	83 3d c0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fc0,0x0
c00012cc:	75 12                	jne    c00012e0 <iALLOc+0x30>
c00012ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012d2:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00012d7:	e8 04 f8 ff ff       	call   c0000ae0 <malloc_consolidate>
c00012dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012e5:	74 12                	je     c00012f9 <iALLOc+0x49>
c00012e7:	85 ed                	test   ebp,ebp
c00012e9:	0f 84 64 01 00 00    	je     c0001453 <iALLOc+0x1a3>
c00012ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012f7:	eb 33                	jmp    c000132c <iALLOc+0x7c>
c00012f9:	85 ed                	test   ebp,ebp
c00012fb:	75 14                	jne    c0001311 <iALLOc+0x61>
c00012fd:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001305:	83 c4 2c             	add    esp,0x2c
c0001308:	5b                   	pop    ebx
c0001309:	5e                   	pop    esi
c000130a:	5f                   	pop    edi
c000130b:	5d                   	pop    ebp
c000130c:	e9 11 fc ff ff       	jmp    c0000f22 <dlmalloc>
c0001311:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001318:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001320:	83 f8 0f             	cmp    eax,0xf
c0001323:	76 07                	jbe    c000132c <iALLOc+0x7c>
c0001325:	83 e0 f8             	and    eax,0xfffffff8
c0001328:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000132c:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001331:	75 09                	jne    c000133c <iALLOc+0x8c>
c0001333:	89 d0                	mov    eax,edx
c0001335:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001338:	31 f6                	xor    esi,esi
c000133a:	eb 3b                	jmp    c0001377 <iALLOc+0xc7>
c000133c:	8b 02                	mov    eax,DWORD PTR [edx]
c000133e:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001346:	83 c0 0b             	add    eax,0xb
c0001349:	83 f8 0f             	cmp    eax,0xf
c000134c:	76 07                	jbe    c0001355 <iALLOc+0xa5>
c000134e:	83 e0 f8             	and    eax,0xfffffff8
c0001351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001355:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001359:	0f af f5             	imul   esi,ebp
c000135c:	eb 25                	jmp    c0001383 <iALLOc+0xd3>
c000135e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001360:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001363:	bb 10 00 00 00       	mov    ebx,0x10
c0001368:	83 f9 0f             	cmp    ecx,0xf
c000136b:	76 05                	jbe    c0001372 <iALLOc+0xc2>
c000136d:	83 e1 f8             	and    ecx,0xfffffff8
c0001370:	89 cb                	mov    ebx,ecx
c0001372:	01 de                	add    esi,ebx
c0001374:	83 c0 04             	add    eax,0x4
c0001377:	39 c7                	cmp    edi,eax
c0001379:	75 e3                	jne    c000135e <iALLOc+0xae>
c000137b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001383:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001387:	8b 1d 14 43 02 c0    	mov    ebx,DWORD PTR ds:0xc0024314
c000138d:	83 ec 0c             	sub    esp,0xc
c0001390:	c7 05 14 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024314,0x0
c000139a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000139e:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00013a2:	50                   	push   eax
c00013a3:	e8 7a fb ff ff       	call   c0000f22 <dlmalloc>
c00013a8:	83 c4 10             	add    esp,0x10
c00013ab:	89 1d 14 43 02 c0    	mov    DWORD PTR ds:0xc0024314,ebx
c00013b1:	85 c0                	test   eax,eax
c00013b3:	0f 84 92 00 00 00    	je     c000144b <iALLOc+0x19b>
c00013b9:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013bc:	8d 78 f8             	lea    edi,[eax-0x8]
c00013bf:	83 e3 fc             	and    ebx,0xfffffffc
c00013c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013c6:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013cb:	74 1e                	je     c00013eb <iALLOc+0x13b>
c00013cd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013d1:	89 d9                	mov    ecx,ebx
c00013d3:	52                   	push   edx
c00013d4:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013d8:	83 e9 04             	sub    ecx,0x4
c00013db:	51                   	push   ecx
c00013dc:	6a 00                	push   0x0
c00013de:	50                   	push   eax
c00013df:	e8 02 f3 ff ff       	call   c00006e6 <memset>
c00013e4:	83 c4 10             	add    esp,0x10
c00013e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f0:	75 14                	jne    c0001406 <iALLOc+0x156>
c00013f2:	8d 04 37             	lea    eax,[edi+esi*1]
c00013f5:	29 f3                	sub    ebx,esi
c00013f7:	8d 48 08             	lea    ecx,[eax+0x8]
c00013fa:	83 cb 01             	or     ebx,0x1
c00013fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001401:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001404:	89 f3                	mov    ebx,esi
c0001406:	31 c0                	xor    eax,eax
c0001408:	4d                   	dec    ebp
c0001409:	8d 4f 08             	lea    ecx,[edi+0x8]
c000140c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001410:	39 c5                	cmp    ebp,eax
c0001412:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001415:	74 2c                	je     c0001443 <iALLOc+0x193>
c0001417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000141b:	85 c9                	test   ecx,ecx
c000141d:	75 15                	jne    c0001434 <iALLOc+0x184>
c000141f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001422:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001425:	b9 10 00 00 00       	mov    ecx,0x10
c000142a:	83 fe 0f             	cmp    esi,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0x184>
c000142f:	83 e6 f8             	and    esi,0xfffffff8
c0001432:	89 f1                	mov    ecx,esi
c0001434:	89 ce                	mov    esi,ecx
c0001436:	29 cb                	sub    ebx,ecx
c0001438:	83 ce 01             	or     esi,0x1
c000143b:	40                   	inc    eax
c000143c:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000143f:	01 cf                	add    edi,ecx
c0001441:	eb c6                	jmp    c0001409 <iALLOc+0x159>
c0001443:	83 cb 01             	or     ebx,0x1
c0001446:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001449:	eb 08                	jmp    c0001453 <iALLOc+0x1a3>
c000144b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001457:	83 c4 2c             	add    esp,0x2c
c000145a:	5b                   	pop    ebx
c000145b:	5e                   	pop    esi
c000145c:	5f                   	pop    edi
c000145d:	5d                   	pop    ebp
c000145e:	c3                   	ret    

c000145f <dlrealloc>:
c000145f:	55                   	push   ebp
c0001460:	57                   	push   edi
c0001461:	56                   	push   esi
c0001462:	53                   	push   ebx
c0001463:	83 ec 1c             	sub    esp,0x1c
c0001466:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000146a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000146e:	85 db                	test   ebx,ebx
c0001470:	75 10                	jne    c0001482 <dlrealloc+0x23>
c0001472:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001476:	83 c4 1c             	add    esp,0x1c
c0001479:	5b                   	pop    ebx
c000147a:	5e                   	pop    esi
c000147b:	5f                   	pop    edi
c000147c:	5d                   	pop    ebp
c000147d:	e9 a0 fa ff ff       	jmp    c0000f22 <dlmalloc>
c0001482:	83 f8 df             	cmp    eax,0xffffffdf
c0001485:	76 07                	jbe    c000148e <dlrealloc+0x2f>
c0001487:	31 db                	xor    ebx,ebx
c0001489:	e9 7c 01 00 00       	jmp    c000160a <dlrealloc+0x1ab>
c000148e:	83 c0 0b             	add    eax,0xb
c0001491:	bf 10 00 00 00       	mov    edi,0x10
c0001496:	83 f8 0f             	cmp    eax,0xf
c0001499:	76 05                	jbe    c00014a0 <dlrealloc+0x41>
c000149b:	83 e0 f8             	and    eax,0xfffffff8
c000149e:	89 c7                	mov    edi,eax
c00014a0:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00014a3:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00014a6:	89 c6                	mov    esi,eax
c00014a8:	83 e6 fc             	and    esi,0xfffffffc
c00014ab:	a8 02                	test   al,0x2
c00014ad:	75 d8                	jne    c0001487 <dlrealloc+0x28>
c00014af:	39 f7                	cmp    edi,esi
c00014b1:	0f 86 15 01 00 00    	jbe    c00015cc <dlrealloc+0x16d>
c00014b7:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014be:	39 15 ec 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fec,edx
c00014c4:	75 33                	jne    c00014f9 <dlrealloc+0x9a>
c00014c6:	83 e1 fc             	and    ecx,0xfffffffc
c00014c9:	01 f1                	add    ecx,esi
c00014cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014cf:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014d6:	77 49                	ja     c0001521 <dlrealloc+0xc2>
c00014d8:	01 fd                	add    ebp,edi
c00014da:	83 e0 01             	and    eax,0x1
c00014dd:	09 f8                	or     eax,edi
c00014df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014e2:	89 2d ec 3f 02 c0    	mov    DWORD PTR ds:0xc0023fec,ebp
c00014e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ec:	29 f8                	sub    eax,edi
c00014ee:	83 c8 01             	or     eax,0x1
c00014f1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014f4:	e9 11 01 00 00       	jmp    c000160a <dlrealloc+0x1ab>
c00014f9:	89 c8                	mov    eax,ecx
c00014fb:	83 e0 fe             	and    eax,0xfffffffe
c00014fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001503:	75 1c                	jne    c0001521 <dlrealloc+0xc2>
c0001505:	83 e1 fc             	and    ecx,0xfffffffc
c0001508:	01 f1                	add    ecx,esi
c000150a:	39 cf                	cmp    edi,ecx
c000150c:	77 13                	ja     c0001521 <dlrealloc+0xc2>
c000150e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001511:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001514:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001517:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000151a:	89 ce                	mov    esi,ecx
c000151c:	e9 ab 00 00 00       	jmp    c00015cc <dlrealloc+0x16d>
c0001521:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001525:	8d 47 f9             	lea    eax,[edi-0x7]
c0001528:	83 ec 0c             	sub    esp,0xc
c000152b:	50                   	push   eax
c000152c:	e8 f1 f9 ff ff       	call   c0000f22 <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 c1                	mov    ecx,eax
c0001536:	85 c0                	test   eax,eax
c0001538:	0f 84 49 ff ff ff    	je     c0001487 <dlrealloc+0x28>
c000153e:	8d 40 f8             	lea    eax,[eax-0x8]
c0001541:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001545:	39 c2                	cmp    edx,eax
c0001547:	75 0a                	jne    c0001553 <dlrealloc+0xf4>
c0001549:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000154c:	83 e0 fc             	and    eax,0xfffffffc
c000154f:	01 c6                	add    esi,eax
c0001551:	eb 79                	jmp    c00015cc <dlrealloc+0x16d>
c0001553:	83 ee 04             	sub    esi,0x4
c0001556:	83 fe 27             	cmp    esi,0x27
c0001559:	76 16                	jbe    c0001571 <dlrealloc+0x112>
c000155b:	50                   	push   eax
c000155c:	56                   	push   esi
c000155d:	53                   	push   ebx
c000155e:	51                   	push   ecx
c000155f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001563:	e8 48 f1 ff ff       	call   c00006b0 <memcpy>
c0001568:	83 c4 10             	add    esp,0x10
c000156b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156f:	eb 43                	jmp    c00015b4 <dlrealloc+0x155>
c0001571:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001573:	83 fe 13             	cmp    esi,0x13
c0001576:	89 01                	mov    DWORD PTR [ecx],eax
c0001578:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000157b:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000157e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001581:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001584:	76 2e                	jbe    c00015b4 <dlrealloc+0x155>
c0001586:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001589:	83 fe 1b             	cmp    esi,0x1b
c000158c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000158f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001592:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001595:	76 1d                	jbe    c00015b4 <dlrealloc+0x155>
c0001597:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000159a:	83 fe 23             	cmp    esi,0x23
c000159d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00015a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00015a3:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00015a6:	76 0c                	jbe    c00015b4 <dlrealloc+0x155>
c00015a8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00015ab:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00015ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015b1:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015b8:	83 ec 0c             	sub    esp,0xc
c00015bb:	53                   	push   ebx
c00015bc:	e8 06 f6 ff ff       	call   c0000bc7 <dlfree>
c00015c1:	83 c4 10             	add    esp,0x10
c00015c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015c8:	89 cb                	mov    ebx,ecx
c00015ca:	eb 3e                	jmp    c000160a <dlrealloc+0x1ab>
c00015cc:	89 f2                	mov    edx,esi
c00015ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015d1:	29 fa                	sub    edx,edi
c00015d3:	83 e1 01             	and    ecx,0x1
c00015d6:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015da:	83 fa 0f             	cmp    edx,0xf
c00015dd:	77 0b                	ja     c00015ea <dlrealloc+0x18b>
c00015df:	09 ce                	or     esi,ecx
c00015e1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e8:	eb 20                	jmp    c000160a <dlrealloc+0x1ab>
c00015ea:	01 fd                	add    ebp,edi
c00015ec:	83 ec 0c             	sub    esp,0xc
c00015ef:	09 cf                	or     edi,ecx
c00015f1:	83 ca 01             	or     edx,0x1
c00015f4:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015f7:	83 c5 08             	add    ebp,0x8
c00015fa:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015fd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001601:	55                   	push   ebp
c0001602:	e8 c0 f5 ff ff       	call   c0000bc7 <dlfree>
c0001607:	83 c4 10             	add    esp,0x10
c000160a:	83 c4 1c             	add    esp,0x1c
c000160d:	89 d8                	mov    eax,ebx
c000160f:	5b                   	pop    ebx
c0001610:	5e                   	pop    esi
c0001611:	5f                   	pop    edi
c0001612:	5d                   	pop    ebp
c0001613:	c3                   	ret    

c0001614 <dlmemalign>:
c0001614:	55                   	push   ebp
c0001615:	57                   	push   edi
c0001616:	56                   	push   esi
c0001617:	53                   	push   ebx
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000161f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001623:	83 fa 08             	cmp    edx,0x8
c0001626:	77 10                	ja     c0001638 <dlmemalign+0x24>
c0001628:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000162c:	83 c4 0c             	add    esp,0xc
c000162f:	5b                   	pop    ebx
c0001630:	5e                   	pop    esi
c0001631:	5f                   	pop    edi
c0001632:	5d                   	pop    ebp
c0001633:	e9 ea f8 ff ff       	jmp    c0000f22 <dlmalloc>
c0001638:	bf 10 00 00 00       	mov    edi,0x10
c000163d:	83 fa 0f             	cmp    edx,0xf
c0001640:	76 13                	jbe    c0001655 <dlmemalign+0x41>
c0001642:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001645:	85 d1                	test   ecx,edx
c0001647:	75 04                	jne    c000164d <dlmemalign+0x39>
c0001649:	89 d7                	mov    edi,edx
c000164b:	eb 08                	jmp    c0001655 <dlmemalign+0x41>
c000164d:	39 d7                	cmp    edi,edx
c000164f:	73 04                	jae    c0001655 <dlmemalign+0x41>
c0001651:	01 ff                	add    edi,edi
c0001653:	eb f8                	jmp    c000164d <dlmemalign+0x39>
c0001655:	83 f8 df             	cmp    eax,0xffffffdf
c0001658:	76 07                	jbe    c0001661 <dlmemalign+0x4d>
c000165a:	31 c0                	xor    eax,eax
c000165c:	e9 ce 00 00 00       	jmp    c000172f <dlmemalign+0x11b>
c0001661:	83 c0 0b             	add    eax,0xb
c0001664:	bd 10 00 00 00       	mov    ebp,0x10
c0001669:	83 f8 0f             	cmp    eax,0xf
c000166c:	76 05                	jbe    c0001673 <dlmemalign+0x5f>
c000166e:	83 e0 f8             	and    eax,0xfffffff8
c0001671:	89 c5                	mov    ebp,eax
c0001673:	83 ec 0c             	sub    esp,0xc
c0001676:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000167a:	50                   	push   eax
c000167b:	e8 a2 f8 ff ff       	call   c0000f22 <dlmalloc>
c0001680:	83 c4 10             	add    esp,0x10
c0001683:	89 c1                	mov    ecx,eax
c0001685:	85 c0                	test   eax,eax
c0001687:	74 d1                	je     c000165a <dlmemalign+0x46>
c0001689:	31 d2                	xor    edx,edx
c000168b:	8d 70 f8             	lea    esi,[eax-0x8]
c000168e:	f7 f7                	div    edi
c0001690:	85 d2                	test   edx,edx
c0001692:	74 62                	je     c00016f6 <dlmemalign+0xe2>
c0001694:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001698:	89 f8                	mov    eax,edi
c000169a:	f7 d8                	neg    eax
c000169c:	21 c3                	and    ebx,eax
c000169e:	83 eb 08             	sub    ebx,0x8
c00016a1:	89 d8                	mov    eax,ebx
c00016a3:	29 f0                	sub    eax,esi
c00016a5:	83 f8 0f             	cmp    eax,0xf
c00016a8:	77 02                	ja     c00016ac <dlmemalign+0x98>
c00016aa:	01 fb                	add    ebx,edi
c00016ac:	89 d8                	mov    eax,ebx
c00016ae:	29 f0                	sub    eax,esi
c00016b0:	89 c6                	mov    esi,eax
c00016b2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b5:	89 c2                	mov    edx,eax
c00016b7:	83 e2 fc             	and    edx,0xfffffffc
c00016ba:	29 f2                	sub    edx,esi
c00016bc:	a8 02                	test   al,0x2
c00016be:	74 10                	je     c00016d0 <dlmemalign+0xbc>
c00016c0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016c3:	83 ca 02             	or     edx,0x2
c00016c6:	8d 43 08             	lea    eax,[ebx+0x8]
c00016c9:	89 33                	mov    DWORD PTR [ebx],esi
c00016cb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ce:	eb 5f                	jmp    c000172f <dlmemalign+0x11b>
c00016d0:	83 ec 0c             	sub    esp,0xc
c00016d3:	89 d0                	mov    eax,edx
c00016d5:	83 c8 01             	or     eax,0x1
c00016d8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016db:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016e3:	83 e0 01             	and    eax,0x1
c00016e6:	09 f0                	or     eax,esi
c00016e8:	89 de                	mov    esi,ebx
c00016ea:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016ed:	51                   	push   ecx
c00016ee:	e8 d4 f4 ff ff       	call   c0000bc7 <dlfree>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	a8 02                	test   al,0x2
c00016fb:	75 2f                	jne    c000172c <dlmemalign+0x118>
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	8d 55 10             	lea    edx,[ebp+0x10]
c0001703:	39 c2                	cmp    edx,eax
c0001705:	73 25                	jae    c000172c <dlmemalign+0x118>
c0001707:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000170a:	83 ec 0c             	sub    esp,0xc
c000170d:	29 e8                	sub    eax,ebp
c000170f:	83 c2 08             	add    edx,0x8
c0001712:	83 c8 01             	or     eax,0x1
c0001715:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001718:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000171b:	83 e0 01             	and    eax,0x1
c000171e:	09 c5                	or     ebp,eax
c0001720:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001723:	52                   	push   edx
c0001724:	e8 9e f4 ff ff       	call   c0000bc7 <dlfree>
c0001729:	83 c4 10             	add    esp,0x10
c000172c:	8d 46 08             	lea    eax,[esi+0x8]
c000172f:	83 c4 0c             	add    esp,0xc
c0001732:	5b                   	pop    ebx
c0001733:	5e                   	pop    esi
c0001734:	5f                   	pop    edi
c0001735:	5d                   	pop    ebp
c0001736:	c3                   	ret    

c0001737 <dlcalloc>:
c0001737:	53                   	push   ebx
c0001738:	83 ec 14             	sub    esp,0x14
c000173b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000173f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001744:	50                   	push   eax
c0001745:	e8 d8 f7 ff ff       	call   c0000f22 <dlmalloc>
c000174a:	83 c4 10             	add    esp,0x10
c000174d:	89 c3                	mov    ebx,eax
c000174f:	85 c0                	test   eax,eax
c0001751:	74 77                	je     c00017ca <dlcalloc+0x93>
c0001753:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001756:	89 d0                	mov    eax,edx
c0001758:	83 e0 fc             	and    eax,0xfffffffc
c000175b:	80 e2 02             	and    dl,0x2
c000175e:	75 5a                	jne    c00017ba <dlcalloc+0x83>
c0001760:	83 e8 04             	sub    eax,0x4
c0001763:	83 f8 27             	cmp    eax,0x27
c0001766:	76 03                	jbe    c000176b <dlcalloc+0x34>
c0001768:	51                   	push   ecx
c0001769:	eb 53                	jmp    c00017be <dlcalloc+0x87>
c000176b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001771:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001778:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000177f:	83 f8 13             	cmp    eax,0x13
c0001782:	76 46                	jbe    c00017ca <dlcalloc+0x93>
c0001784:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000178b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001792:	83 f8 1b             	cmp    eax,0x1b
c0001795:	76 33                	jbe    c00017ca <dlcalloc+0x93>
c0001797:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000179e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00017a5:	83 f8 23             	cmp    eax,0x23
c00017a8:	76 20                	jbe    c00017ca <dlcalloc+0x93>
c00017aa:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017b1:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017b8:	eb 10                	jmp    c00017ca <dlcalloc+0x93>
c00017ba:	83 e8 08             	sub    eax,0x8
c00017bd:	52                   	push   edx
c00017be:	50                   	push   eax
c00017bf:	6a 00                	push   0x0
c00017c1:	53                   	push   ebx
c00017c2:	e8 1f ef ff ff       	call   c00006e6 <memset>
c00017c7:	83 c4 10             	add    esp,0x10
c00017ca:	89 d8                	mov    eax,ebx
c00017cc:	83 c4 08             	add    esp,0x8
c00017cf:	5b                   	pop    ebx
c00017d0:	c3                   	ret    

c00017d1 <dlcfree>:
c00017d1:	e9 f1 f3 ff ff       	jmp    c0000bc7 <dlfree>

c00017d6 <dlindependent_calloc>:
c00017d6:	83 ec 28             	sub    esp,0x28
c00017d9:	b9 03 00 00 00       	mov    ecx,0x3
c00017de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017f2:	e8 b9 fa ff ff       	call   c00012b0 <iALLOc>
c00017f7:	83 c4 2c             	add    esp,0x2c
c00017fa:	c3                   	ret    

c00017fb <dlindependent_comalloc>:
c00017fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001803:	31 c9                	xor    ecx,ecx
c0001805:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001809:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000180d:	e9 9e fa ff ff       	jmp    c00012b0 <iALLOc>

c0001812 <dlvalloc>:
c0001812:	83 ec 0c             	sub    esp,0xc
c0001815:	83 3d c0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fc0,0x0
c000181c:	75 0a                	jne    c0001828 <dlvalloc+0x16>
c000181e:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0001823:	e8 b8 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c0001828:	50                   	push   eax
c0001829:	50                   	push   eax
c000182a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000182e:	ff 35 1c 43 02 c0    	push   DWORD PTR ds:0xc002431c
c0001834:	e8 db fd ff ff       	call   c0001614 <dlmemalign>
c0001839:	83 c4 1c             	add    esp,0x1c
c000183c:	c3                   	ret    

c000183d <dlpvalloc>:
c000183d:	83 ec 0c             	sub    esp,0xc
c0001840:	83 3d c0 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fc0,0x0
c0001847:	75 0a                	jne    c0001853 <dlpvalloc+0x16>
c0001849:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c000184e:	e8 8d f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c0001853:	a1 1c 43 02 c0       	mov    eax,ds:0xc002431c
c0001858:	89 c1                	mov    ecx,eax
c000185a:	52                   	push   edx
c000185b:	f7 d9                	neg    ecx
c000185d:	52                   	push   edx
c000185e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001862:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001866:	21 ca                	and    edx,ecx
c0001868:	52                   	push   edx
c0001869:	50                   	push   eax
c000186a:	e8 a5 fd ff ff       	call   c0001614 <dlmemalign>
c000186f:	83 c4 1c             	add    esp,0x1c
c0001872:	c3                   	ret    

c0001873 <dlmalloc_trim>:
c0001873:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0001878:	e8 63 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c000187d:	31 c0                	xor    eax,eax
c000187f:	c3                   	ret    

c0001880 <dlmalloc_usable_size>:
c0001880:	53                   	push   ebx
c0001881:	31 c0                	xor    eax,eax
c0001883:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001887:	85 c9                	test   ecx,ecx
c0001889:	74 24                	je     c00018af <dlmalloc_usable_size+0x2f>
c000188b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000188e:	f6 c2 02             	test   dl,0x2
c0001891:	74 08                	je     c000189b <dlmalloc_usable_size+0x1b>
c0001893:	83 e2 fc             	and    edx,0xfffffffc
c0001896:	8d 42 f8             	lea    eax,[edx-0x8]
c0001899:	eb 14                	jmp    c00018af <dlmalloc_usable_size+0x2f>
c000189b:	89 d3                	mov    ebx,edx
c000189d:	31 c0                	xor    eax,eax
c000189f:	83 e3 fe             	and    ebx,0xfffffffe
c00018a2:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00018a7:	74 06                	je     c00018af <dlmalloc_usable_size+0x2f>
c00018a9:	83 e2 fc             	and    edx,0xfffffffc
c00018ac:	8d 42 fc             	lea    eax,[edx-0x4]
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlmallinfo>:
c00018b1:	55                   	push   ebp
c00018b2:	57                   	push   edi
c00018b3:	56                   	push   esi
c00018b4:	53                   	push   ebx
c00018b5:	83 ec 08             	sub    esp,0x8
c00018b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018bc:	83 3d ec 3f 02 c0 00 	cmp    DWORD PTR ds:0xc0023fec,0x0
c00018c3:	75 0a                	jne    c00018cf <dlmallinfo+0x1e>
c00018c5:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00018ca:	e8 11 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c00018cf:	a1 ec 3f 02 c0       	mov    eax,ds:0xc0023fec
c00018d4:	31 ed                	xor    ebp,ebp
c00018d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018d9:	31 c9                	xor    ecx,ecx
c00018db:	83 e0 fc             	and    eax,0xfffffffc
c00018de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018e2:	31 c0                	xor    eax,eax
c00018e4:	8b 14 85 c4 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc03c]
c00018eb:	85 d2                	test   edx,edx
c00018ed:	74 0e                	je     c00018fd <dlmallinfo+0x4c>
c00018ef:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018f2:	45                   	inc    ebp
c00018f3:	83 e6 fc             	and    esi,0xfffffffc
c00018f6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018f9:	01 f1                	add    ecx,esi
c00018fb:	eb ee                	jmp    c00018eb <dlmallinfo+0x3a>
c00018fd:	40                   	inc    eax
c00018fe:	83 f8 0a             	cmp    eax,0xa
c0001901:	75 e1                	jne    c00018e4 <dlmallinfo+0x33>
c0001903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001907:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000190e:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001911:	b8 f4 3f 02 c0       	mov    eax,0xc0023ff4
c0001916:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001919:	39 f0                	cmp    eax,esi
c000191b:	74 10                	je     c000192d <dlmallinfo+0x7c>
c000191d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001920:	ff 04 24             	inc    DWORD PTR [esp]
c0001923:	83 e7 fc             	and    edi,0xfffffffc
c0001926:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001929:	01 fa                	add    edx,edi
c000192b:	eb ec                	jmp    c0001919 <dlmallinfo+0x68>
c000192d:	83 c0 08             	add    eax,0x8
c0001930:	3d ec 42 02 c0       	cmp    eax,0xc00242ec
c0001935:	75 df                	jne    c0001916 <dlmallinfo+0x65>
c0001937:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000193a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000193d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001940:	a1 28 43 02 c0       	mov    eax,ds:0xc0024328
c0001945:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001948:	89 03                	mov    DWORD PTR [ebx],eax
c000194a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000194d:	8b 35 10 43 02 c0    	mov    esi,DWORD PTR ds:0xc0024310
c0001953:	29 d0                	sub    eax,edx
c0001955:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001958:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000195b:	8b 35 24 43 02 c0    	mov    esi,DWORD PTR ds:0xc0024324
c0001961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001965:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001968:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000196b:	8b 35 34 43 02 c0    	mov    esi,DWORD PTR ds:0xc0024334
c0001971:	89 d8                	mov    eax,ebx
c0001973:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001976:	83 c4 08             	add    esp,0x8
c0001979:	5b                   	pop    ebx
c000197a:	5e                   	pop    esi
c000197b:	5f                   	pop    edi
c000197c:	5d                   	pop    ebp
c000197d:	c2 04 00             	ret    0x4

c0001980 <dlmalloc_stats>:
c0001980:	83 ec 30             	sub    esp,0x30
c0001983:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001987:	50                   	push   eax
c0001988:	e8 24 ff ff ff       	call   c00018b1 <dlmallinfo>
c000198d:	83 c4 30             	add    esp,0x30
c0001990:	c3                   	ret    

c0001991 <dlmallopt>:
c0001991:	56                   	push   esi
c0001992:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c0001997:	53                   	push   ebx
c0001998:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000199c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00019a0:	e8 3b f1 ff ff       	call   c0000ae0 <malloc_consolidate>
c00019a5:	8d 46 04             	lea    eax,[esi+0x4]
c00019a8:	83 f8 05             	cmp    eax,0x5
c00019ab:	77 67                	ja     c0001a14 <dlmallopt+0x83>
c00019ad:	ff 24 85 04 01 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfefc]
c00019b4:	83 fb 50             	cmp    ebx,0x50
c00019b7:	77 5b                	ja     c0001a14 <dlmallopt+0x83>
c00019b9:	ba 08 00 00 00       	mov    edx,0x8
c00019be:	85 db                	test   ebx,ebx
c00019c0:	74 12                	je     c00019d4 <dlmallopt+0x43>
c00019c2:	83 c3 0b             	add    ebx,0xb
c00019c5:	ba 10 00 00 00       	mov    edx,0x10
c00019ca:	83 fb 0f             	cmp    ebx,0xf
c00019cd:	76 05                	jbe    c00019d4 <dlmallopt+0x43>
c00019cf:	89 da                	mov    edx,ebx
c00019d1:	83 e2 f8             	and    edx,0xfffffff8
c00019d4:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c00019d9:	83 e0 03             	and    eax,0x3
c00019dc:	09 d0                	or     eax,edx
c00019de:	a3 c0 3f 02 c0       	mov    ds:0xc0023fc0,eax
c00019e3:	eb 31                	jmp    c0001a16 <dlmallopt+0x85>
c00019e5:	89 1d 04 43 02 c0    	mov    DWORD PTR ds:0xc0024304,ebx
c00019eb:	eb 06                	jmp    c00019f3 <dlmallopt+0x62>
c00019ed:	89 1d 08 43 02 c0    	mov    DWORD PTR ds:0xc0024308,ebx
c00019f3:	be 01 00 00 00       	mov    esi,0x1
c00019f8:	eb 1c                	jmp    c0001a16 <dlmallopt+0x85>
c00019fa:	89 1d 0c 43 02 c0    	mov    DWORD PTR ds:0xc002430c,ebx
c0001a00:	eb f1                	jmp    c00019f3 <dlmallopt+0x62>
c0001a02:	31 f6                	xor    esi,esi
c0001a04:	85 db                	test   ebx,ebx
c0001a06:	75 0e                	jne    c0001a16 <dlmallopt+0x85>
c0001a08:	c7 05 14 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024314,0x0
c0001a12:	eb df                	jmp    c00019f3 <dlmallopt+0x62>
c0001a14:	31 f6                	xor    esi,esi
c0001a16:	89 f0                	mov    eax,esi
c0001a18:	5b                   	pop    ebx
c0001a19:	5e                   	pop    esi
c0001a1a:	c3                   	ret    

c0001a1b <disk_status>:
c0001a1b:	31 c0                	xor    eax,eax
c0001a1d:	c3                   	ret    

c0001a1e <disk_initialize>:
c0001a1e:	31 c0                	xor    eax,eax
c0001a20:	c3                   	ret    

c0001a21 <disk_read>:
c0001a21:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a26:	0f b6 04 85 e0 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda720]
c0001a2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a32:	e9 8d 8b 01 00       	jmp    c001a5c4 <fatWrapperReadDisk>

c0001a37 <disk_write>:
c0001a37:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3c:	0f b6 04 85 e0 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda720]
c0001a44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a48:	e9 be 8b 01 00       	jmp    c001a60b <fatWrapperWriteDisk>

c0001a4d <disk_ioctl>:
c0001a4d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a5b:	0f b6 04 85 e0 58 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda720]
c0001a63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a67:	e9 e6 8b 01 00       	jmp    c001a652 <fatWrapperIoctl>

c0001a6c <ld_word>:
c0001a6c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a70:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a73:	c1 e2 08             	shl    edx,0x8
c0001a76:	09 d0                	or     eax,edx
c0001a78:	c3                   	ret    

c0001a79 <ld_dword>:
c0001a79:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a7d:	89 d1                	mov    ecx,edx
c0001a7f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a83:	c1 e1 08             	shl    ecx,0x8
c0001a86:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a89:	09 ca                	or     edx,ecx
c0001a8b:	c1 e2 08             	shl    edx,0x8
c0001a8e:	09 d0                	or     eax,edx
c0001a90:	c3                   	ret    

c0001a91 <ld_qword>:
c0001a91:	57                   	push   edi
c0001a92:	56                   	push   esi
c0001a93:	53                   	push   ebx
c0001a94:	31 db                	xor    ebx,ebx
c0001a96:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a99:	89 df                	mov    edi,ebx
c0001a9b:	89 ce                	mov    esi,ecx
c0001a9d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001aa1:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	09 f2                	or     edx,esi
c0001aaa:	89 d6                	mov    esi,edx
c0001aac:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ab0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ab4:	c1 e6 08             	shl    esi,0x8
c0001ab7:	09 f2                	or     edx,esi
c0001ab9:	89 d6                	mov    esi,edx
c0001abb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001abf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ac3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ac6:	c1 e6 08             	shl    esi,0x8
c0001ac9:	89 fb                	mov    ebx,edi
c0001acb:	09 f2                	or     edx,esi
c0001acd:	89 d1                	mov    ecx,edx
c0001acf:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ad3:	c1 e1 08             	shl    ecx,0x8
c0001ad6:	89 da                	mov    edx,ebx
c0001ad8:	09 c8                	or     eax,ecx
c0001ada:	5b                   	pop    ebx
c0001adb:	5e                   	pop    esi
c0001adc:	5f                   	pop    edi
c0001add:	c3                   	ret    

c0001ade <st_word>:
c0001ade:	66 89 10             	mov    WORD PTR [eax],dx
c0001ae1:	c3                   	ret    

c0001ae2 <st_dword>:
c0001ae2:	89 10                	mov    DWORD PTR [eax],edx
c0001ae4:	c3                   	ret    

c0001ae5 <st_qword>:
c0001ae5:	89 10                	mov    DWORD PTR [eax],edx
c0001ae7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001aea:	c3                   	ret    

c0001aeb <mem_cpy>:
c0001aeb:	85 c9                	test   ecx,ecx
c0001aed:	74 10                	je     c0001aff <mem_cpy+0x14>
c0001aef:	57                   	push   edi
c0001af0:	01 c1                	add    ecx,eax
c0001af2:	56                   	push   esi
c0001af3:	89 c7                	mov    edi,eax
c0001af5:	89 d6                	mov    esi,edx
c0001af7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001af8:	39 f9                	cmp    ecx,edi
c0001afa:	75 fb                	jne    c0001af7 <mem_cpy+0xc>
c0001afc:	5e                   	pop    esi
c0001afd:	5f                   	pop    edi
c0001afe:	c3                   	ret    
c0001aff:	c3                   	ret    

c0001b00 <mem_set>:
c0001b00:	01 c1                	add    ecx,eax
c0001b02:	40                   	inc    eax
c0001b03:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b06:	39 c8                	cmp    eax,ecx
c0001b08:	75 f8                	jne    c0001b02 <mem_set+0x2>
c0001b0a:	c3                   	ret    

c0001b0b <mem_cmp>:
c0001b0b:	57                   	push   edi
c0001b0c:	56                   	push   esi
c0001b0d:	89 c6                	mov    esi,eax
c0001b0f:	53                   	push   ebx
c0001b10:	46                   	inc    esi
c0001b11:	42                   	inc    edx
c0001b12:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b16:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b1a:	29 fb                	sub    ebx,edi
c0001b1c:	89 cf                	mov    edi,ecx
c0001b1e:	29 f7                	sub    edi,esi
c0001b20:	01 c7                	add    edi,eax
c0001b22:	74 04                	je     c0001b28 <mem_cmp+0x1d>
c0001b24:	85 db                	test   ebx,ebx
c0001b26:	74 e8                	je     c0001b10 <mem_cmp+0x5>
c0001b28:	89 d8                	mov    eax,ebx
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <chk_chr>:
c0001b2e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b31:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b34:	74 07                	je     c0001b3d <chk_chr+0xf>
c0001b36:	39 d1                	cmp    ecx,edx
c0001b38:	74 03                	je     c0001b3d <chk_chr+0xf>
c0001b3a:	40                   	inc    eax
c0001b3b:	eb f1                	jmp    c0001b2e <chk_chr>
c0001b3d:	89 c8                	mov    eax,ecx
c0001b3f:	c3                   	ret    

c0001b40 <dbc_1st>:
c0001b40:	31 c0                	xor    eax,eax
c0001b42:	c3                   	ret    

c0001b43 <dbc_2nd>:
c0001b43:	31 c0                	xor    eax,eax
c0001b45:	c3                   	ret    

c0001b46 <tchar2uni>:
c0001b46:	57                   	push   edi
c0001b47:	89 c7                	mov    edi,eax
c0001b49:	56                   	push   esi
c0001b4a:	53                   	push   ebx
c0001b4b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b4d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b4f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b52:	84 c9                	test   cl,cl
c0001b54:	78 0a                	js     c0001b60 <tchar2uni+0x1a>
c0001b56:	0f b6 d1             	movzx  edx,cl
c0001b59:	89 f3                	mov    ebx,esi
c0001b5b:	e9 9f 00 00 00       	jmp    c0001bff <tchar2uni+0xb9>
c0001b60:	88 ca                	mov    dl,cl
c0001b62:	83 e2 e0             	and    edx,0xffffffe0
c0001b65:	80 fa c0             	cmp    dl,0xc0
c0001b68:	75 0c                	jne    c0001b76 <tchar2uni+0x30>
c0001b6a:	89 ca                	mov    edx,ecx
c0001b6c:	b9 01 00 00 00       	mov    ecx,0x1
c0001b71:	83 e2 1f             	and    edx,0x1f
c0001b74:	eb 2e                	jmp    c0001ba4 <tchar2uni+0x5e>
c0001b76:	88 ca                	mov    dl,cl
c0001b78:	83 e2 f0             	and    edx,0xfffffff0
c0001b7b:	80 fa e0             	cmp    dl,0xe0
c0001b7e:	75 0c                	jne    c0001b8c <tchar2uni+0x46>
c0001b80:	89 ca                	mov    edx,ecx
c0001b82:	b9 02 00 00 00       	mov    ecx,0x2
c0001b87:	83 e2 0f             	and    edx,0xf
c0001b8a:	eb 18                	jmp    c0001ba4 <tchar2uni+0x5e>
c0001b8c:	88 ca                	mov    dl,cl
c0001b8e:	83 e2 f8             	and    edx,0xfffffff8
c0001b91:	88 d0                	mov    al,dl
c0001b93:	83 ca ff             	or     edx,0xffffffff
c0001b96:	3c f0                	cmp    al,0xf0
c0001b98:	75 6c                	jne    c0001c06 <tchar2uni+0xc0>
c0001b9a:	89 ca                	mov    edx,ecx
c0001b9c:	b9 03 00 00 00       	mov    ecx,0x3
c0001ba1:	83 e2 07             	and    edx,0x7
c0001ba4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ba8:	46                   	inc    esi
c0001ba9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001bac:	88 c8                	mov    al,cl
c0001bae:	83 e0 c0             	and    eax,0xffffffc0
c0001bb1:	3c 80                	cmp    al,0x80
c0001bb3:	75 4e                	jne    c0001c03 <tchar2uni+0xbd>
c0001bb5:	c1 e2 06             	shl    edx,0x6
c0001bb8:	83 e1 3f             	and    ecx,0x3f
c0001bbb:	09 ca                	or     edx,ecx
c0001bbd:	39 de                	cmp    esi,ebx
c0001bbf:	75 e7                	jne    c0001ba8 <tchar2uni+0x62>
c0001bc1:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bc4:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bca:	77 37                	ja     c0001c03 <tchar2uni+0xbd>
c0001bcc:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bd2:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bd8:	76 29                	jbe    c0001c03 <tchar2uni+0xbd>
c0001bda:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001be0:	76 1d                	jbe    c0001bff <tchar2uni+0xb9>
c0001be2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001be8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bee:	c1 e1 06             	shl    ecx,0x6
c0001bf1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bf7:	09 ca                	or     edx,ecx
c0001bf9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bff:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c01:	eb 03                	jmp    c0001c06 <tchar2uni+0xc0>
c0001c03:	83 ca ff             	or     edx,0xffffffff
c0001c06:	5b                   	pop    ebx
c0001c07:	89 d0                	mov    eax,edx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	c3                   	ret    

c0001c0c <put_utf>:
c0001c0c:	53                   	push   ebx
c0001c0d:	83 f8 7f             	cmp    eax,0x7f
c0001c10:	89 c3                	mov    ebx,eax
c0001c12:	b0 00                	mov    al,0x0
c0001c14:	77 11                	ja     c0001c27 <put_utf+0x1b>
c0001c16:	85 c9                	test   ecx,ecx
c0001c18:	0f 84 e5 00 00 00    	je     c0001d03 <put_utf+0xf7>
c0001c1e:	88 1a                	mov    BYTE PTR [edx],bl
c0001c20:	b0 01                	mov    al,0x1
c0001c22:	e9 dc 00 00 00       	jmp    c0001d03 <put_utf+0xf7>
c0001c27:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c2d:	77 23                	ja     c0001c52 <put_utf+0x46>
c0001c2f:	83 f9 01             	cmp    ecx,0x1
c0001c32:	0f 86 cb 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c38:	89 d8                	mov    eax,ebx
c0001c3a:	83 e3 3f             	and    ebx,0x3f
c0001c3d:	c1 e8 06             	shr    eax,0x6
c0001c40:	83 cb 80             	or     ebx,0xffffff80
c0001c43:	83 c8 c0             	or     eax,0xffffffc0
c0001c46:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c49:	88 02                	mov    BYTE PTR [edx],al
c0001c4b:	b0 02                	mov    al,0x2
c0001c4d:	e9 b1 00 00 00       	jmp    c0001d03 <put_utf+0xf7>
c0001c52:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c58:	77 40                	ja     c0001c9a <put_utf+0x8e>
c0001c5a:	83 f9 02             	cmp    ecx,0x2
c0001c5d:	0f 86 a0 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c63:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c6f:	0f 86 8e 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c75:	89 d8                	mov    eax,ebx
c0001c77:	c1 e8 0c             	shr    eax,0xc
c0001c7a:	83 c8 e0             	or     eax,0xffffffe0
c0001c7d:	88 02                	mov    BYTE PTR [edx],al
c0001c7f:	89 d8                	mov    eax,ebx
c0001c81:	83 e3 3f             	and    ebx,0x3f
c0001c84:	c1 e8 06             	shr    eax,0x6
c0001c87:	83 cb 80             	or     ebx,0xffffff80
c0001c8a:	83 e0 3f             	and    eax,0x3f
c0001c8d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c90:	83 c8 80             	or     eax,0xffffff80
c0001c93:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c96:	b0 03                	mov    al,0x3
c0001c98:	eb 69                	jmp    c0001d03 <put_utf+0xf7>
c0001c9a:	83 f9 03             	cmp    ecx,0x3
c0001c9d:	76 64                	jbe    c0001d03 <put_utf+0xf7>
c0001c9f:	89 d9                	mov    ecx,ebx
c0001ca1:	0f b7 c3             	movzx  eax,bx
c0001ca4:	66 31 c9             	xor    cx,cx
c0001ca7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001cad:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001cb3:	c1 e9 06             	shr    ecx,0x6
c0001cb6:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cbc:	77 43                	ja     c0001d01 <put_utf+0xf5>
c0001cbe:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cc4:	77 3b                	ja     c0001d01 <put_utf+0xf5>
c0001cc6:	09 cb                	or     ebx,ecx
c0001cc8:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cce:	89 d8                	mov    eax,ebx
c0001cd0:	c1 e8 12             	shr    eax,0x12
c0001cd3:	83 c8 f0             	or     eax,0xfffffff0
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	89 d8                	mov    eax,ebx
c0001cda:	c1 e8 0c             	shr    eax,0xc
c0001cdd:	83 e0 3f             	and    eax,0x3f
c0001ce0:	83 c8 80             	or     eax,0xffffff80
c0001ce3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ce6:	89 d8                	mov    eax,ebx
c0001ce8:	83 e3 3f             	and    ebx,0x3f
c0001ceb:	c1 e8 06             	shr    eax,0x6
c0001cee:	83 cb 80             	or     ebx,0xffffff80
c0001cf1:	83 e0 3f             	and    eax,0x3f
c0001cf4:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cf7:	83 c8 80             	or     eax,0xffffff80
c0001cfa:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cfd:	b0 04                	mov    al,0x4
c0001cff:	eb 02                	jmp    c0001d03 <put_utf+0xf7>
c0001d01:	31 c0                	xor    eax,eax
c0001d03:	5b                   	pop    ebx
c0001d04:	c3                   	ret    

c0001d05 <clst2sect>:
c0001d05:	89 c1                	mov    ecx,eax
c0001d07:	83 ea 02             	sub    edx,0x2
c0001d0a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001d0d:	83 e8 02             	sub    eax,0x2
c0001d10:	39 d0                	cmp    eax,edx
c0001d12:	76 0d                	jbe    c0001d21 <clst2sect+0x1c>
c0001d14:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d18:	f7 e2                	mul    edx
c0001d1a:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d1d:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d20:	c3                   	ret    
c0001d21:	31 c0                	xor    eax,eax
c0001d23:	31 d2                	xor    edx,edx
c0001d25:	c3                   	ret    

c0001d26 <clmt_clust>:
c0001d26:	57                   	push   edi
c0001d27:	89 cf                	mov    edi,ecx
c0001d29:	56                   	push   esi
c0001d2a:	89 d6                	mov    esi,edx
c0001d2c:	53                   	push   ebx
c0001d2d:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d31:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d34:	89 f2                	mov    edx,esi
c0001d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d38:	c1 ef 09             	shr    edi,0x9
c0001d3b:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d3f:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d42:	89 f9                	mov    ecx,edi
c0001d44:	31 ff                	xor    edi,edi
c0001d46:	57                   	push   edi
c0001d47:	56                   	push   esi
c0001d48:	51                   	push   ecx
c0001d49:	52                   	push   edx
c0001d4a:	e8 ad d4 01 00       	call   c001f1fc <__udivdi3>
c0001d4f:	83 c4 10             	add    esp,0x10
c0001d52:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d54:	85 d2                	test   edx,edx
c0001d56:	74 10                	je     c0001d68 <clmt_clust+0x42>
c0001d58:	39 d0                	cmp    eax,edx
c0001d5a:	72 07                	jb     c0001d63 <clmt_clust+0x3d>
c0001d5c:	29 d0                	sub    eax,edx
c0001d5e:	83 c3 08             	add    ebx,0x8
c0001d61:	eb ef                	jmp    c0001d52 <clmt_clust+0x2c>
c0001d63:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d66:	89 c2                	mov    edx,eax
c0001d68:	5b                   	pop    ebx
c0001d69:	89 d0                	mov    eax,edx
c0001d6b:	5e                   	pop    esi
c0001d6c:	5f                   	pop    edi
c0001d6d:	c3                   	ret    

c0001d6e <pick_lfn>:
c0001d6e:	55                   	push   ebp
c0001d6f:	57                   	push   edi
c0001d70:	56                   	push   esi
c0001d71:	89 d6                	mov    esi,edx
c0001d73:	53                   	push   ebx
c0001d74:	89 c3                	mov    ebx,eax
c0001d76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d79:	e8 ee fc ff ff       	call   c0001a6c <ld_word>
c0001d7e:	66 85 c0             	test   ax,ax
c0001d81:	74 04                	je     c0001d87 <pick_lfn+0x19>
c0001d83:	31 c0                	xor    eax,eax
c0001d85:	eb 5c                	jmp    c0001de3 <pick_lfn+0x75>
c0001d87:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d8a:	bd 01 00 00 00       	mov    ebp,0x1
c0001d8f:	83 e1 bf             	and    ecx,0xffffffbf
c0001d92:	31 ff                	xor    edi,edi
c0001d94:	49                   	dec    ecx
c0001d95:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d98:	0f b6 87 20 02 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfde0]
c0001d9f:	01 f0                	add    eax,esi
c0001da1:	e8 c6 fc ff ff       	call   c0001a6c <ld_word>
c0001da6:	66 85 ed             	test   bp,bp
c0001da9:	74 11                	je     c0001dbc <pick_lfn+0x4e>
c0001dab:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db1:	77 d0                	ja     c0001d83 <pick_lfn+0x15>
c0001db3:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001db7:	89 c5                	mov    ebp,eax
c0001db9:	41                   	inc    ecx
c0001dba:	eb 04                	jmp    c0001dc0 <pick_lfn+0x52>
c0001dbc:	66 40                	inc    ax
c0001dbe:	75 c3                	jne    c0001d83 <pick_lfn+0x15>
c0001dc0:	47                   	inc    edi
c0001dc1:	83 ff 0d             	cmp    edi,0xd
c0001dc4:	75 d2                	jne    c0001d98 <pick_lfn+0x2a>
c0001dc6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dc9:	74 13                	je     c0001dde <pick_lfn+0x70>
c0001dcb:	66 85 ed             	test   bp,bp
c0001dce:	74 0e                	je     c0001dde <pick_lfn+0x70>
c0001dd0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dd6:	77 ab                	ja     c0001d83 <pick_lfn+0x15>
c0001dd8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dde:	b8 01 00 00 00       	mov    eax,0x1
c0001de3:	5b                   	pop    ebx
c0001de4:	5e                   	pop    esi
c0001de5:	5f                   	pop    edi
c0001de6:	5d                   	pop    ebp
c0001de7:	c3                   	ret    

c0001de8 <put_lfn>:
c0001de8:	55                   	push   ebp
c0001de9:	31 ed                	xor    ebp,ebp
c0001deb:	57                   	push   edi
c0001dec:	89 d7                	mov    edi,edx
c0001dee:	56                   	push   esi
c0001def:	31 f6                	xor    esi,esi
c0001df1:	53                   	push   ebx
c0001df2:	83 ec 08             	sub    esp,0x8
c0001df5:	89 04 24             	mov    DWORD PTR [esp],eax
c0001df8:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e00:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e06:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e09:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e0c:	31 d2                	xor    edx,edx
c0001e0e:	e8 cb fc ff ff       	call   c0001ade <st_word>
c0001e13:	0f b6 d9             	movzx  ebx,cl
c0001e16:	4b                   	dec    ebx
c0001e17:	6b db 0d             	imul   ebx,ebx,0xd
c0001e1a:	66 83 fe ff          	cmp    si,0xffff
c0001e1e:	74 08                	je     c0001e28 <put_lfn+0x40>
c0001e20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e23:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e27:	43                   	inc    ebx
c0001e28:	0f b6 85 20 02 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfde0]
c0001e2f:	0f b7 d6             	movzx  edx,si
c0001e32:	01 f8                	add    eax,edi
c0001e34:	e8 a5 fc ff ff       	call   c0001ade <st_word>
c0001e39:	66 85 f6             	test   si,si
c0001e3c:	75 03                	jne    c0001e41 <put_lfn+0x59>
c0001e3e:	83 ce ff             	or     esi,0xffffffff
c0001e41:	45                   	inc    ebp
c0001e42:	83 fd 0d             	cmp    ebp,0xd
c0001e45:	75 d3                	jne    c0001e1a <put_lfn+0x32>
c0001e47:	66 46                	inc    si
c0001e49:	74 0a                	je     c0001e55 <put_lfn+0x6d>
c0001e4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e4e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e53:	75 09                	jne    c0001e5e <put_lfn+0x76>
c0001e55:	88 c8                	mov    al,cl
c0001e57:	83 c8 40             	or     eax,0x40
c0001e5a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e5e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e62:	88 07                	mov    BYTE PTR [edi],al
c0001e64:	83 c4 08             	add    esp,0x8
c0001e67:	5b                   	pop    ebx
c0001e68:	5e                   	pop    esi
c0001e69:	5f                   	pop    edi
c0001e6a:	5d                   	pop    ebp
c0001e6b:	c3                   	ret    

c0001e6c <gen_numname>:
c0001e6c:	57                   	push   edi
c0001e6d:	89 cf                	mov    edi,ecx
c0001e6f:	56                   	push   esi
c0001e70:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e75:	53                   	push   ebx
c0001e76:	89 c6                	mov    esi,eax
c0001e78:	83 ec 10             	sub    esp,0x10
c0001e7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e7f:	e8 67 fc ff ff       	call   c0001aeb <mem_cpy>
c0001e84:	83 fb 05             	cmp    ebx,0x5
c0001e87:	76 2d                	jbe    c0001eb6 <gen_numname+0x4a>
c0001e89:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e8c:	66 85 c0             	test   ax,ax
c0001e8f:	74 25                	je     c0001eb6 <gen_numname+0x4a>
c0001e91:	83 c7 02             	add    edi,0x2
c0001e94:	ba 10 00 00 00       	mov    edx,0x10
c0001e99:	01 db                	add    ebx,ebx
c0001e9b:	89 c1                	mov    ecx,eax
c0001e9d:	66 d1 e8             	shr    ax,1
c0001ea0:	83 e1 01             	and    ecx,0x1
c0001ea3:	01 cb                	add    ebx,ecx
c0001ea5:	0f ba e3 10          	bt     ebx,0x10
c0001ea9:	73 06                	jae    c0001eb1 <gen_numname+0x45>
c0001eab:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001eb1:	4a                   	dec    edx
c0001eb2:	75 e5                	jne    c0001e99 <gen_numname+0x2d>
c0001eb4:	eb d3                	jmp    c0001e89 <gen_numname+0x1d>
c0001eb6:	b8 07 00 00 00       	mov    eax,0x7
c0001ebb:	88 d9                	mov    cl,bl
c0001ebd:	83 e1 0f             	and    ecx,0xf
c0001ec0:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ec3:	80 fa 39             	cmp    dl,0x39
c0001ec6:	76 03                	jbe    c0001ecb <gen_numname+0x5f>
c0001ec8:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ecb:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ece:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ed2:	89 da                	mov    edx,ebx
c0001ed4:	c1 ea 04             	shr    edx,0x4
c0001ed7:	83 fb 0f             	cmp    ebx,0xf
c0001eda:	76 06                	jbe    c0001ee2 <gen_numname+0x76>
c0001edc:	89 c8                	mov    eax,ecx
c0001ede:	89 d3                	mov    ebx,edx
c0001ee0:	eb d9                	jmp    c0001ebb <gen_numname+0x4f>
c0001ee2:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ee7:	31 d2                	xor    edx,edx
c0001ee9:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eec:	8d 04 16             	lea    eax,[esi+edx*1]
c0001eef:	39 ca                	cmp    edx,ecx
c0001ef1:	73 18                	jae    c0001f0b <gen_numname+0x9f>
c0001ef3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ef6:	3c 20                	cmp    al,0x20
c0001ef8:	74 11                	je     c0001f0b <gen_numname+0x9f>
c0001efa:	e8 41 fc ff ff       	call   c0001b40 <dbc_1st>
c0001eff:	85 c0                	test   eax,eax
c0001f01:	74 05                	je     c0001f08 <gen_numname+0x9c>
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	74 04                	je     c0001f0b <gen_numname+0x9f>
c0001f07:	42                   	inc    edx
c0001f08:	42                   	inc    edx
c0001f09:	eb e1                	jmp    c0001eec <gen_numname+0x80>
c0001f0b:	b0 20                	mov    al,0x20
c0001f0d:	83 f9 07             	cmp    ecx,0x7
c0001f10:	77 05                	ja     c0001f17 <gen_numname+0xab>
c0001f12:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f16:	41                   	inc    ecx
c0001f17:	42                   	inc    edx
c0001f18:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f1c:	83 fa 07             	cmp    edx,0x7
c0001f1f:	76 ea                	jbe    c0001f0b <gen_numname+0x9f>
c0001f21:	83 c4 10             	add    esp,0x10
c0001f24:	5b                   	pop    ebx
c0001f25:	5e                   	pop    esi
c0001f26:	5f                   	pop    edi
c0001f27:	c3                   	ret    

c0001f28 <sum_sfn>:
c0001f28:	31 c9                	xor    ecx,ecx
c0001f2a:	31 d2                	xor    edx,edx
c0001f2c:	d0 ca                	ror    dl,1
c0001f2e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f31:	41                   	inc    ecx
c0001f32:	83 f9 0b             	cmp    ecx,0xb
c0001f35:	75 f5                	jne    c0001f2c <sum_sfn+0x4>
c0001f37:	88 d0                	mov    al,dl
c0001f39:	c3                   	ret    

c0001f3a <xdir_sum>:
c0001f3a:	56                   	push   esi
c0001f3b:	31 c9                	xor    ecx,ecx
c0001f3d:	53                   	push   ebx
c0001f3e:	31 d2                	xor    edx,edx
c0001f40:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f44:	43                   	inc    ebx
c0001f45:	c1 e3 05             	shl    ebx,0x5
c0001f48:	83 fa 02             	cmp    edx,0x2
c0001f4b:	74 0b                	je     c0001f58 <xdir_sum+0x1e>
c0001f4d:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f51:	66 d1 c9             	ror    cx,1
c0001f54:	01 f1                	add    ecx,esi
c0001f56:	eb 05                	jmp    c0001f5d <xdir_sum+0x23>
c0001f58:	ba 03 00 00 00       	mov    edx,0x3
c0001f5d:	42                   	inc    edx
c0001f5e:	39 d3                	cmp    ebx,edx
c0001f60:	77 e6                	ja     c0001f48 <xdir_sum+0xe>
c0001f62:	89 c8                	mov    eax,ecx
c0001f64:	5b                   	pop    ebx
c0001f65:	5e                   	pop    esi
c0001f66:	c3                   	ret    

c0001f67 <xsum32>:
c0001f67:	d1 ca                	ror    edx,1
c0001f69:	0f b6 c0             	movzx  eax,al
c0001f6c:	01 d0                	add    eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <get_xfileinfo>:
c0001f6f:	55                   	push   ebp
c0001f70:	31 c9                	xor    ecx,ecx
c0001f72:	57                   	push   edi
c0001f73:	bd 40 00 00 00       	mov    ebp,0x40
c0001f78:	56                   	push   esi
c0001f79:	31 ff                	xor    edi,edi
c0001f7b:	53                   	push   ebx
c0001f7c:	89 c6                	mov    esi,eax
c0001f7e:	83 ec 0c             	sub    esp,0xc
c0001f81:	89 d3                	mov    ebx,edx
c0001f83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f8a:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f91:	76 6d                	jbe    c0002000 <get_xfileinfo+0x91>
c0001f93:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f99:	76 0b                	jbe    c0001fa6 <get_xfileinfo+0x37>
c0001f9b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f9f:	bf 01 00 00 00       	mov    edi,0x1
c0001fa4:	eb 63                	jmp    c0002009 <get_xfileinfo+0x9a>
c0001fa6:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001fac:	75 03                	jne    c0001fb1 <get_xfileinfo+0x42>
c0001fae:	83 c5 02             	add    ebp,0x2
c0001fb1:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fb4:	83 c5 02             	add    ebp,0x2
c0001fb7:	e8 b0 fa ff ff       	call   c0001a6c <ld_word>
c0001fbc:	ff 04 24             	inc    DWORD PTR [esp]
c0001fbf:	66 85 c9             	test   cx,cx
c0001fc2:	75 0d                	jne    c0001fd1 <get_xfileinfo+0x62>
c0001fc4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fca:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fcf:	76 2b                	jbe    c0001ffc <get_xfileinfo+0x8d>
c0001fd1:	c1 e1 10             	shl    ecx,0x10
c0001fd4:	ba ff 00 00 00       	mov    edx,0xff
c0001fd9:	0f b7 c0             	movzx  eax,ax
c0001fdc:	29 fa                	sub    edx,edi
c0001fde:	09 c8                	or     eax,ecx
c0001fe0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fe4:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fe8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fec:	e8 1b fc ff ff       	call   c0001c0c <put_utf>
c0001ff1:	84 c0                	test   al,al
c0001ff3:	74 a6                	je     c0001f9b <get_xfileinfo+0x2c>
c0001ff5:	0f b6 c0             	movzx  eax,al
c0001ff8:	01 c7                	add    edi,eax
c0001ffa:	31 c0                	xor    eax,eax
c0001ffc:	89 c1                	mov    ecx,eax
c0001ffe:	eb 8a                	jmp    c0001f8a <get_xfileinfo+0x1b>
c0002000:	85 ff                	test   edi,edi
c0002002:	74 97                	je     c0001f9b <get_xfileinfo+0x2c>
c0002004:	66 85 c9             	test   cx,cx
c0002007:	75 92                	jne    c0001f9b <get_xfileinfo+0x2c>
c0002009:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000200e:	31 c0                	xor    eax,eax
c0002010:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002014:	31 d2                	xor    edx,edx
c0002016:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002019:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000201c:	80 e1 10             	and    cl,0x10
c000201f:	75 08                	jne    c0002029 <get_xfileinfo+0xba>
c0002021:	8d 46 38             	lea    eax,[esi+0x38]
c0002024:	e8 68 fa ff ff       	call   c0001a91 <ld_qword>
c0002029:	89 03                	mov    DWORD PTR [ebx],eax
c000202b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000202e:	8d 46 0c             	lea    eax,[esi+0xc]
c0002031:	e8 36 fa ff ff       	call   c0001a6c <ld_word>
c0002036:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000203a:	8d 46 0e             	lea    eax,[esi+0xe]
c000203d:	e8 2a fa ff ff       	call   c0001a6c <ld_word>
c0002042:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002046:	83 c4 0c             	add    esp,0xc
c0002049:	5b                   	pop    ebx
c000204a:	5e                   	pop    esi
c000204b:	5f                   	pop    edi
c000204c:	5d                   	pop    ebp
c000204d:	c3                   	ret    

c000204e <get_ldnumber>:
c000204e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002050:	85 d2                	test   edx,edx
c0002052:	74 14                	je     c0002068 <get_ldnumber+0x1a>
c0002054:	56                   	push   esi
c0002055:	53                   	push   ebx
c0002056:	89 d3                	mov    ebx,edx
c0002058:	43                   	inc    ebx
c0002059:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000205c:	80 f9 1f             	cmp    cl,0x1f
c000205f:	76 0d                	jbe    c000206e <get_ldnumber+0x20>
c0002061:	80 f9 3a             	cmp    cl,0x3a
c0002064:	75 f2                	jne    c0002058 <get_ldnumber+0xa>
c0002066:	eb 0a                	jmp    c0002072 <get_ldnumber+0x24>
c0002068:	83 c9 ff             	or     ecx,0xffffffff
c000206b:	89 c8                	mov    eax,ecx
c000206d:	c3                   	ret    
c000206e:	31 c9                	xor    ecx,ecx
c0002070:	eb 24                	jmp    c0002096 <get_ldnumber+0x48>
c0002072:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002075:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002078:	80 f9 09             	cmp    cl,0x9
c000207b:	77 16                	ja     c0002093 <get_ldnumber+0x45>
c000207d:	83 c2 02             	add    edx,0x2
c0002080:	83 c9 ff             	or     ecx,0xffffffff
c0002083:	39 d3                	cmp    ebx,edx
c0002085:	75 0f                	jne    c0002096 <get_ldnumber+0x48>
c0002087:	89 f2                	mov    edx,esi
c0002089:	89 18                	mov    DWORD PTR [eax],ebx
c000208b:	0f be ca             	movsx  ecx,dl
c000208e:	83 e9 30             	sub    ecx,0x30
c0002091:	eb 03                	jmp    c0002096 <get_ldnumber+0x48>
c0002093:	83 c9 ff             	or     ecx,0xffffffff
c0002096:	89 c8                	mov    eax,ecx
c0002098:	5b                   	pop    ebx
c0002099:	5e                   	pop    esi
c000209a:	c3                   	ret    

c000209b <crc32>:
c000209b:	56                   	push   esi
c000209c:	89 d6                	mov    esi,edx
c000209e:	53                   	push   ebx
c000209f:	b2 01                	mov    dl,0x1
c00020a1:	bb 08 00 00 00       	mov    ebx,0x8
c00020a6:	89 f1                	mov    ecx,esi
c00020a8:	84 d1                	test   cl,dl
c00020aa:	0f 95 c1             	setne  cl
c00020ad:	0f b6 c9             	movzx  ecx,cl
c00020b0:	31 c1                	xor    ecx,eax
c00020b2:	89 c8                	mov    eax,ecx
c00020b4:	d1 e8                	shr    eax,1
c00020b6:	80 e1 01             	and    cl,0x1
c00020b9:	74 05                	je     c00020c0 <crc32+0x25>
c00020bb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020c0:	d1 e2                	shl    edx,1
c00020c2:	4b                   	dec    ebx
c00020c3:	75 e1                	jne    c00020a6 <crc32+0xb>
c00020c5:	5b                   	pop    ebx
c00020c6:	5e                   	pop    esi
c00020c7:	c3                   	ret    

c00020c8 <test_gpt_header>:
c00020c8:	55                   	push   ebp
c00020c9:	b9 10 00 00 00       	mov    ecx,0x10
c00020ce:	57                   	push   edi
c00020cf:	ba 20 01 02 c0       	mov    edx,0xc0020120
c00020d4:	56                   	push   esi
c00020d5:	31 ff                	xor    edi,edi
c00020d7:	53                   	push   ebx
c00020d8:	89 c3                	mov    ebx,eax
c00020da:	e8 2c fa ff ff       	call   c0001b0b <mem_cmp>
c00020df:	85 c0                	test   eax,eax
c00020e1:	75 55                	jne    c0002138 <test_gpt_header+0x70>
c00020e3:	89 c7                	mov    edi,eax
c00020e5:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020ea:	83 ce ff             	or     esi,0xffffffff
c00020ed:	31 d2                	xor    edx,edx
c00020ef:	83 fd 03             	cmp    ebp,0x3
c00020f2:	76 05                	jbe    c00020f9 <test_gpt_header+0x31>
c00020f4:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020f9:	89 f0                	mov    eax,esi
c00020fb:	45                   	inc    ebp
c00020fc:	e8 9a ff ff ff       	call   c000209b <crc32>
c0002101:	83 fd 4c             	cmp    ebp,0x4c
c0002104:	89 c6                	mov    esi,eax
c0002106:	75 e5                	jne    c00020ed <test_gpt_header+0x25>
c0002108:	8d 43 10             	lea    eax,[ebx+0x10]
c000210b:	f7 d6                	not    esi
c000210d:	e8 67 f9 ff ff       	call   c0001a79 <ld_dword>
c0002112:	39 c6                	cmp    esi,eax
c0002114:	75 22                	jne    c0002138 <test_gpt_header+0x70>
c0002116:	8d 43 54             	lea    eax,[ebx+0x54]
c0002119:	e8 5b f9 ff ff       	call   c0001a79 <ld_dword>
c000211e:	83 c0 80             	add    eax,0xffffff80
c0002121:	75 15                	jne    c0002138 <test_gpt_header+0x70>
c0002123:	8d 43 50             	lea    eax,[ebx+0x50]
c0002126:	e8 4e f9 ff ff       	call   c0001a79 <ld_dword>
c000212b:	3d 80 00 00 00       	cmp    eax,0x80
c0002130:	0f 96 c0             	setbe  al
c0002133:	0f b6 c0             	movzx  eax,al
c0002136:	89 c7                	mov    edi,eax
c0002138:	5b                   	pop    ebx
c0002139:	89 f8                	mov    eax,edi
c000213b:	5e                   	pop    esi
c000213c:	5f                   	pop    edi
c000213d:	5d                   	pop    ebp
c000213e:	c3                   	ret    

c000213f <make_rand>:
c000213f:	56                   	push   esi
c0002140:	85 c0                	test   eax,eax
c0002142:	53                   	push   ebx
c0002143:	75 05                	jne    c000214a <make_rand+0xb>
c0002145:	b8 01 00 00 00       	mov    eax,0x1
c000214a:	01 d1                	add    ecx,edx
c000214c:	bb 08 00 00 00       	mov    ebx,0x8
c0002151:	89 c6                	mov    esi,eax
c0002153:	d1 e8                	shr    eax,1
c0002155:	83 e6 01             	and    esi,0x1
c0002158:	85 f6                	test   esi,esi
c000215a:	74 05                	je     c0002161 <make_rand+0x22>
c000215c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002161:	4b                   	dec    ebx
c0002162:	75 ed                	jne    c0002151 <make_rand+0x12>
c0002164:	42                   	inc    edx
c0002165:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002168:	39 ca                	cmp    edx,ecx
c000216a:	75 e0                	jne    c000214c <make_rand+0xd>
c000216c:	5b                   	pop    ebx
c000216d:	5e                   	pop    esi
c000216e:	c3                   	ret    

c000216f <validate>:
c000216f:	56                   	push   esi
c0002170:	53                   	push   ebx
c0002171:	89 d6                	mov    esi,edx
c0002173:	51                   	push   ecx
c0002174:	85 c0                	test   eax,eax
c0002176:	75 09                	jne    c0002181 <validate+0x12>
c0002178:	b8 09 00 00 00       	mov    eax,0x9
c000217d:	31 c9                	xor    ecx,ecx
c000217f:	eb 2f                	jmp    c00021b0 <validate+0x41>
c0002181:	89 c3                	mov    ebx,eax
c0002183:	8b 00                	mov    eax,DWORD PTR [eax]
c0002185:	85 c0                	test   eax,eax
c0002187:	74 ef                	je     c0002178 <validate+0x9>
c0002189:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000218c:	74 ea                	je     c0002178 <validate+0x9>
c000218e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002192:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002196:	75 e0                	jne    c0002178 <validate+0x9>
c0002198:	83 ec 0c             	sub    esp,0xc
c000219b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000219f:	50                   	push   eax
c00021a0:	e8 76 f8 ff ff       	call   c0001a1b <disk_status>
c00021a5:	83 c4 10             	add    esp,0x10
c00021a8:	a8 01                	test   al,0x1
c00021aa:	75 cc                	jne    c0002178 <validate+0x9>
c00021ac:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ae:	31 c0                	xor    eax,eax
c00021b0:	89 0e                	mov    DWORD PTR [esi],ecx
c00021b2:	5a                   	pop    edx
c00021b3:	5b                   	pop    ebx
c00021b4:	5e                   	pop    esi
c00021b5:	c3                   	ret    

c00021b6 <sync_window>:
c00021b6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021ba:	0f 84 85 00 00 00    	je     c0002245 <sync_window+0x8f>
c00021c0:	55                   	push   ebp
c00021c1:	8d 68 54             	lea    ebp,[eax+0x54]
c00021c4:	57                   	push   edi
c00021c5:	56                   	push   esi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	83 ec 28             	sub    esp,0x28
c00021cc:	6a 01                	push   0x1
c00021ce:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021d1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021d4:	55                   	push   ebp
c00021d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021d9:	50                   	push   eax
c00021da:	e8 58 f8 ff ff       	call   c0001a37 <disk_write>
c00021df:	83 c4 20             	add    esp,0x20
c00021e2:	ba 01 00 00 00       	mov    edx,0x1
c00021e7:	85 c0                	test   eax,eax
c00021e9:	75 50                	jne    c000223b <sync_window+0x85>
c00021eb:	31 ff                	xor    edi,edi
c00021ed:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021f0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021f4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021f8:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021fb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021fe:	89 c6                	mov    esi,eax
c0002200:	89 d7                	mov    edi,edx
c0002202:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002205:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002209:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000220c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002210:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002214:	73 23                	jae    c0002239 <sync_window+0x83>
c0002216:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000221a:	75 1d                	jne    c0002239 <sync_window+0x83>
c000221c:	83 ec 0c             	sub    esp,0xc
c000221f:	6a 01                	push   0x1
c0002221:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002225:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002229:	52                   	push   edx
c000222a:	50                   	push   eax
c000222b:	55                   	push   ebp
c000222c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002230:	50                   	push   eax
c0002231:	e8 01 f8 ff ff       	call   c0001a37 <disk_write>
c0002236:	83 c4 20             	add    esp,0x20
c0002239:	31 d2                	xor    edx,edx
c000223b:	83 c4 1c             	add    esp,0x1c
c000223e:	89 d0                	mov    eax,edx
c0002240:	5b                   	pop    ebx
c0002241:	5e                   	pop    esi
c0002242:	5f                   	pop    edi
c0002243:	5d                   	pop    ebp
c0002244:	c3                   	ret    
c0002245:	31 d2                	xor    edx,edx
c0002247:	89 d0                	mov    eax,edx
c0002249:	c3                   	ret    

c000224a <move_window>:
c000224a:	56                   	push   esi
c000224b:	53                   	push   ebx
c000224c:	89 c3                	mov    ebx,eax
c000224e:	83 ec 14             	sub    esp,0x14
c0002251:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002254:	75 07                	jne    c000225d <move_window+0x13>
c0002256:	31 f6                	xor    esi,esi
c0002258:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000225b:	74 59                	je     c00022b6 <move_window+0x6c>
c000225d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002261:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002265:	89 d8                	mov    eax,ebx
c0002267:	e8 4a ff ff ff       	call   c00021b6 <sync_window>
c000226c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002270:	89 c6                	mov    esi,eax
c0002272:	85 c0                	test   eax,eax
c0002274:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002278:	75 3c                	jne    c00022b6 <move_window+0x6c>
c000227a:	83 ec 0c             	sub    esp,0xc
c000227d:	8d 43 54             	lea    eax,[ebx+0x54]
c0002280:	6a 01                	push   0x1
c0002282:	51                   	push   ecx
c0002283:	52                   	push   edx
c0002284:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002288:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000228c:	50                   	push   eax
c000228d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002291:	50                   	push   eax
c0002292:	e8 8a f7 ff ff       	call   c0001a21 <disk_read>
c0002297:	83 c4 20             	add    esp,0x20
c000229a:	85 c0                	test   eax,eax
c000229c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00022a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00022a4:	74 0a                	je     c00022b0 <move_window+0x66>
c00022a6:	83 ca ff             	or     edx,0xffffffff
c00022a9:	be 01 00 00 00       	mov    esi,0x1
c00022ae:	89 d1                	mov    ecx,edx
c00022b0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022b3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022b6:	89 f0                	mov    eax,esi
c00022b8:	83 c4 14             	add    esp,0x14
c00022bb:	5b                   	pop    ebx
c00022bc:	5e                   	pop    esi
c00022bd:	c3                   	ret    

c00022be <check_fs>:
c00022be:	53                   	push   ebx
c00022bf:	89 c3                	mov    ebx,eax
c00022c1:	83 ec 08             	sub    esp,0x8
c00022c4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022c8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022cf:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022d6:	e8 6f ff ff ff       	call   c000224a <move_window>
c00022db:	ba 04 00 00 00       	mov    edx,0x4
c00022e0:	85 c0                	test   eax,eax
c00022e2:	0f 85 89 00 00 00    	jne    c0002371 <check_fs+0xb3>
c00022e8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022ee:	e8 79 f7 ff ff       	call   c0001a6c <ld_word>
c00022f3:	ba 03 00 00 00       	mov    edx,0x3
c00022f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00022fc:	75 73                	jne    c0002371 <check_fs+0xb3>
c00022fe:	ba 40 02 02 c0       	mov    edx,0xc0020240
c0002303:	8d 43 54             	lea    eax,[ebx+0x54]
c0002306:	b9 0b 00 00 00       	mov    ecx,0xb
c000230b:	e8 fb f7 ff ff       	call   c0001b0b <mem_cmp>
c0002310:	ba 01 00 00 00       	mov    edx,0x1
c0002315:	85 c0                	test   eax,eax
c0002317:	74 58                	je     c0002371 <check_fs+0xb3>
c0002319:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000231c:	8d 50 18             	lea    edx,[eax+0x18]
c000231f:	80 fa 01             	cmp    dl,0x1
c0002322:	76 09                	jbe    c000232d <check_fs+0x6f>
c0002324:	ba 02 00 00 00       	mov    edx,0x2
c0002329:	3c eb                	cmp    al,0xeb
c000232b:	75 44                	jne    c0002371 <check_fs+0xb3>
c000232d:	ba f8 2e 02 c0       	mov    edx,0xc0022ef8
c0002332:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002338:	b9 03 00 00 00       	mov    ecx,0x3
c000233d:	e8 c9 f7 ff ff       	call   c0001b0b <mem_cmp>
c0002342:	31 d2                	xor    edx,edx
c0002344:	85 c0                	test   eax,eax
c0002346:	74 29                	je     c0002371 <check_fs+0xb3>
c0002348:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000234d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002353:	b9 05 00 00 00       	mov    ecx,0x5
c0002358:	e8 ae f7 ff ff       	call   c0001b0b <mem_cmp>
c000235d:	31 d2                	xor    edx,edx
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0e                	je     c0002371 <check_fs+0xb3>
c0002363:	31 d2                	xor    edx,edx
c0002365:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000236c:	0f 95 c2             	setne  dl
c000236f:	01 d2                	add    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	83 c4 08             	add    esp,0x8
c0002376:	5b                   	pop    ebx
c0002377:	c3                   	ret    

c0002378 <find_volume>:
c0002378:	55                   	push   ebp
c0002379:	31 c9                	xor    ecx,ecx
c000237b:	57                   	push   edi
c000237c:	56                   	push   esi
c000237d:	89 d6                	mov    esi,edx
c000237f:	53                   	push   ebx
c0002380:	31 d2                	xor    edx,edx
c0002382:	83 ec 3c             	sub    esp,0x3c
c0002385:	89 c3                	mov    ebx,eax
c0002387:	e8 32 ff ff ff       	call   c00022be <check_fs>
c000238c:	83 f8 02             	cmp    eax,0x2
c000238f:	74 0e                	je     c000239f <find_volume+0x27>
c0002391:	0f 87 5d 01 00 00    	ja     c00024f4 <find_volume+0x17c>
c0002397:	85 f6                	test   esi,esi
c0002399:	0f 84 55 01 00 00    	je     c00024f4 <find_volume+0x17c>
c000239f:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00023a6:	0f 85 dd 00 00 00    	jne    c0002489 <find_volume+0x111>
c00023ac:	31 c9                	xor    ecx,ecx
c00023ae:	ba 01 00 00 00       	mov    edx,0x1
c00023b3:	89 d8                	mov    eax,ebx
c00023b5:	e8 90 fe ff ff       	call   c000224a <move_window>
c00023ba:	85 c0                	test   eax,eax
c00023bc:	74 0a                	je     c00023c8 <find_volume+0x50>
c00023be:	b8 04 00 00 00       	mov    eax,0x4
c00023c3:	e9 2c 01 00 00       	jmp    c00024f4 <find_volume+0x17c>
c00023c8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023cb:	89 e8                	mov    eax,ebp
c00023cd:	e8 f6 fc ff ff       	call   c00020c8 <test_gpt_header>
c00023d2:	85 c0                	test   eax,eax
c00023d4:	75 0a                	jne    c00023e0 <find_volume+0x68>
c00023d6:	b8 03 00 00 00       	mov    eax,0x3
c00023db:	e9 14 01 00 00       	jmp    c00024f4 <find_volume+0x17c>
c00023e0:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023e6:	e8 8e f6 ff ff       	call   c0001a79 <ld_dword>
c00023eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023ef:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023f5:	e8 97 f6 ff ff       	call   c0001a91 <ld_qword>
c00023fa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002406:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000240a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002412:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002416:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000241a:	74 ba                	je     c00023d6 <find_volume+0x5e>
c000241c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002420:	31 c9                	xor    ecx,ecx
c0002422:	c1 e7 07             	shl    edi,0x7
c0002425:	89 d8                	mov    eax,ebx
c0002427:	89 fa                	mov    edx,edi
c0002429:	c1 ea 09             	shr    edx,0x9
c000242c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002430:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002434:	e8 11 fe ff ff       	call   c000224a <move_window>
c0002439:	85 c0                	test   eax,eax
c000243b:	75 81                	jne    c00023be <find_volume+0x46>
c000243d:	81 e7 80 01 00 00    	and    edi,0x180
c0002443:	b9 10 00 00 00       	mov    ecx,0x10
c0002448:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000244c:	ba 30 02 02 c0       	mov    edx,0xc0020230
c0002451:	e8 b5 f6 ff ff       	call   c0001b0b <mem_cmp>
c0002456:	85 c0                	test   eax,eax
c0002458:	75 29                	jne    c0002483 <find_volume+0x10b>
c000245a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000245e:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002462:	e8 2a f6 ff ff       	call   c0001a91 <ld_qword>
c0002467:	89 d1                	mov    ecx,edx
c0002469:	89 c2                	mov    edx,eax
c000246b:	89 d8                	mov    eax,ebx
c000246d:	e8 4c fe ff ff       	call   c00022be <check_fs>
c0002472:	85 f6                	test   esi,esi
c0002474:	75 07                	jne    c000247d <find_volume+0x105>
c0002476:	83 f8 01             	cmp    eax,0x1
c0002479:	77 08                	ja     c0002483 <find_volume+0x10b>
c000247b:	eb 77                	jmp    c00024f4 <find_volume+0x17c>
c000247d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002481:	74 71                	je     c00024f4 <find_volume+0x17c>
c0002483:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002487:	eb 89                	jmp    c0002412 <find_volume+0x9a>
c0002489:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000248d:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002493:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002499:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000249d:	89 cd                	mov    ebp,ecx
c000249f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00024a3:	89 f8                	mov    eax,edi
c00024a5:	83 c7 10             	add    edi,0x10
c00024a8:	e8 cc f5 ff ff       	call   c0001a79 <ld_dword>
c00024ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00024b1:	89 01                	mov    DWORD PTR [ecx],eax
c00024b3:	83 c1 04             	add    ecx,0x4
c00024b6:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024ba:	75 e3                	jne    c000249f <find_volume+0x127>
c00024bc:	31 ff                	xor    edi,edi
c00024be:	85 f6                	test   esi,esi
c00024c0:	74 03                	je     c00024c5 <find_volume+0x14d>
c00024c2:	8d 7e ff             	lea    edi,[esi-0x1]
c00024c5:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024c9:	85 d2                	test   edx,edx
c00024cb:	74 14                	je     c00024e1 <find_volume+0x169>
c00024cd:	31 c9                	xor    ecx,ecx
c00024cf:	89 d8                	mov    eax,ebx
c00024d1:	e8 e8 fd ff ff       	call   c00022be <check_fs>
c00024d6:	83 f8 01             	cmp    eax,0x1
c00024d9:	76 19                	jbe    c00024f4 <find_volume+0x17c>
c00024db:	85 f6                	test   esi,esi
c00024dd:	74 0f                	je     c00024ee <find_volume+0x176>
c00024df:	eb 13                	jmp    c00024f4 <find_volume+0x17c>
c00024e1:	85 f6                	test   esi,esi
c00024e3:	0f 85 ed fe ff ff    	jne    c00023d6 <find_volume+0x5e>
c00024e9:	b8 03 00 00 00       	mov    eax,0x3
c00024ee:	47                   	inc    edi
c00024ef:	83 ff 03             	cmp    edi,0x3
c00024f2:	76 d1                	jbe    c00024c5 <find_volume+0x14d>
c00024f4:	83 c4 3c             	add    esp,0x3c
c00024f7:	5b                   	pop    ebx
c00024f8:	5e                   	pop    esi
c00024f9:	5f                   	pop    edi
c00024fa:	5d                   	pop    ebp
c00024fb:	c3                   	ret    

c00024fc <mount_volume>:
c00024fc:	55                   	push   ebp
c00024fd:	57                   	push   edi
c00024fe:	89 cf                	mov    edi,ecx
c0002500:	56                   	push   esi
c0002501:	53                   	push   ebx
c0002502:	bb 0b 00 00 00       	mov    ebx,0xb
c0002507:	83 ec 3c             	sub    esp,0x3c
c000250a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002510:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002514:	e8 35 fb ff ff       	call   c000204e <get_ldnumber>
c0002519:	85 c0                	test   eax,eax
c000251b:	0f 88 3a 05 00 00    	js     c0002a5b <mount_volume+0x55f>
c0002521:	8b 2c 85 60 43 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbca0]
c0002528:	89 c6                	mov    esi,eax
c000252a:	bb 0c 00 00 00       	mov    ebx,0xc
c000252f:	85 ed                	test   ebp,ebp
c0002531:	0f 84 24 05 00 00    	je     c0002a5b <mount_volume+0x55f>
c0002537:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000253b:	83 e7 fe             	and    edi,0xfffffffe
c000253e:	89 2a                	mov    DWORD PTR [edx],ebp
c0002540:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002544:	74 32                	je     c0002578 <mount_volume+0x7c>
c0002546:	83 ec 0c             	sub    esp,0xc
c0002549:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000254d:	50                   	push   eax
c000254e:	e8 c8 f4 ff ff       	call   c0001a1b <disk_status>
c0002553:	83 c4 10             	add    esp,0x10
c0002556:	a8 01                	test   al,0x1
c0002558:	75 1e                	jne    c0002578 <mount_volume+0x7c>
c000255a:	31 db                	xor    ebx,ebx
c000255c:	89 f9                	mov    ecx,edi
c000255e:	84 c9                	test   cl,cl
c0002560:	0f 84 f5 04 00 00    	je     c0002a5b <mount_volume+0x55f>
c0002566:	a8 04                	test   al,0x4
c0002568:	0f 84 ed 04 00 00    	je     c0002a5b <mount_volume+0x55f>
c000256e:	bb 0a 00 00 00       	mov    ebx,0xa
c0002573:	e9 e3 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c0002578:	83 ec 0c             	sub    esp,0xc
c000257b:	89 f0                	mov    eax,esi
c000257d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002581:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002584:	0f b6 f0             	movzx  esi,al
c0002587:	bb 03 00 00 00       	mov    ebx,0x3
c000258c:	56                   	push   esi
c000258d:	e8 8c f4 ff ff       	call   c0001a1e <disk_initialize>
c0002592:	83 c4 10             	add    esp,0x10
c0002595:	a8 01                	test   al,0x1
c0002597:	0f 85 be 04 00 00    	jne    c0002a5b <mount_volume+0x55f>
c000259d:	89 f9                	mov    ecx,edi
c000259f:	84 c9                	test   cl,cl
c00025a1:	74 04                	je     c00025a7 <mount_volume+0xab>
c00025a3:	a8 04                	test   al,0x4
c00025a5:	75 c7                	jne    c000256e <mount_volume+0x72>
c00025a7:	31 d2                	xor    edx,edx
c00025a9:	89 e8                	mov    eax,ebp
c00025ab:	e8 c8 fd ff ff       	call   c0002378 <find_volume>
c00025b0:	83 f8 04             	cmp    eax,0x4
c00025b3:	75 0a                	jne    c00025bf <mount_volume+0xc3>
c00025b5:	bb 01 00 00 00       	mov    ebx,0x1
c00025ba:	e9 9c 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c00025bf:	83 f8 01             	cmp    eax,0x1
c00025c2:	76 0a                	jbe    c00025ce <mount_volume+0xd2>
c00025c4:	bb 0d 00 00 00       	mov    ebx,0xd
c00025c9:	e9 8d 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c00025ce:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025d1:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025dc:	75 17                	jne    c00025f5 <mount_volume+0xf9>
c00025de:	b8 0b 00 00 00       	mov    eax,0xb
c00025e3:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025e8:	75 da                	jne    c00025c4 <mount_volume+0xc8>
c00025ea:	40                   	inc    eax
c00025eb:	83 f8 40             	cmp    eax,0x40
c00025ee:	75 f3                	jne    c00025e3 <mount_volume+0xe7>
c00025f0:	e9 5a 02 00 00       	jmp    c000284f <mount_volume+0x353>
c00025f5:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025f8:	e8 6f f4 ff ff       	call   c0001a6c <ld_word>
c00025fd:	66 3d 00 02          	cmp    ax,0x200
c0002601:	75 c1                	jne    c00025c4 <mount_volume+0xc8>
c0002603:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002606:	e8 61 f4 ff ff       	call   c0001a6c <ld_word>
c000260b:	0f b7 c0             	movzx  eax,ax
c000260e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002612:	85 c0                	test   eax,eax
c0002614:	75 0c                	jne    c0002622 <mount_volume+0x126>
c0002616:	8d 45 78             	lea    eax,[ebp+0x78]
c0002619:	e8 5b f4 ff ff       	call   c0001a79 <ld_dword>
c000261e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002626:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002629:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000262c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002630:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002633:	48                   	dec    eax
c0002634:	3c 01                	cmp    al,0x1
c0002636:	77 8c                	ja     c00025c4 <mount_volume+0xc8>
c0002638:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000263c:	89 c3                	mov    ebx,eax
c000263e:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002642:	66 85 c0             	test   ax,ax
c0002645:	0f 84 79 ff ff ff    	je     c00025c4 <mount_volume+0xc8>
c000264b:	8d 40 ff             	lea    eax,[eax-0x1]
c000264e:	85 d8                	test   eax,ebx
c0002650:	0f 85 6e ff ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002656:	8d 45 65             	lea    eax,[ebp+0x65]
c0002659:	e8 0e f4 ff ff       	call   c0001a6c <ld_word>
c000265e:	89 c7                	mov    edi,eax
c0002660:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002664:	a8 0f                	test   al,0xf
c0002666:	0f 85 58 ff ff ff    	jne    c00025c4 <mount_volume+0xc8>
c000266c:	8d 45 67             	lea    eax,[ebp+0x67]
c000266f:	e8 f8 f3 ff ff       	call   c0001a6c <ld_word>
c0002674:	0f b7 f0             	movzx  esi,ax
c0002677:	85 f6                	test   esi,esi
c0002679:	75 0a                	jne    c0002685 <mount_volume+0x189>
c000267b:	8d 45 74             	lea    eax,[ebp+0x74]
c000267e:	e8 f6 f3 ff ff       	call   c0001a79 <ld_dword>
c0002683:	89 c6                	mov    esi,eax
c0002685:	8d 45 62             	lea    eax,[ebp+0x62]
c0002688:	e8 df f3 ff ff       	call   c0001a6c <ld_word>
c000268d:	66 85 c0             	test   ax,ax
c0002690:	0f 84 2e ff ff ff    	je     c00025c4 <mount_volume+0xc8>
c0002696:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000269b:	0f b7 c8             	movzx  ecx,ax
c000269e:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00026a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00026a7:	89 fa                	mov    edx,edi
c00026a9:	66 c1 ea 04          	shr    dx,0x4
c00026ad:	0f b7 d2             	movzx  edx,dx
c00026b0:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00026b4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026bb:	39 c6                	cmp    esi,eax
c00026bd:	0f 82 01 ff ff ff    	jb     c00025c4 <mount_volume+0xc8>
c00026c3:	29 c6                	sub    esi,eax
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	89 f0                	mov    eax,esi
c00026c9:	f7 f3                	div    ebx
c00026cb:	39 de                	cmp    esi,ebx
c00026cd:	0f 82 f1 fe ff ff    	jb     c00025c4 <mount_volume+0xc8>
c00026d3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026d8:	0f 87 e6 fe ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00026de:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026e3:	0f 86 63 03 00 00    	jbe    c0002a4c <mount_volume+0x550>
c00026e9:	bb 03 00 00 00       	mov    ebx,0x3
c00026ee:	8d 70 02             	lea    esi,[eax+0x2]
c00026f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026f9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026fc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026ff:	31 d2                	xor    edx,edx
c0002701:	89 c8                	mov    eax,ecx
c0002703:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002706:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000270a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000270e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002712:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002716:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002719:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000271c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002720:	31 d2                	xor    edx,edx
c0002722:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002726:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000272a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000272d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002730:	83 fb 03             	cmp    ebx,0x3
c0002733:	75 2b                	jne    c0002760 <mount_volume+0x264>
c0002735:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002738:	e8 2f f3 ff ff       	call   c0001a6c <ld_word>
c000273d:	66 09 c7             	or     di,ax
c0002740:	0f 85 7e fe ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002746:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000274c:	c1 e6 02             	shl    esi,0x2
c000274f:	e8 25 f3 ff ff       	call   c0001a79 <ld_dword>
c0002754:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000275b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000275e:	eb 30                	jmp    c0002790 <mount_volume+0x294>
c0002760:	66 85 ff             	test   di,di
c0002763:	0f 84 5b fe ff ff    	je     c00025c4 <mount_volume+0xc8>
c0002769:	31 d2                	xor    edx,edx
c000276b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000276f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002773:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002777:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000277a:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000277d:	83 fb 02             	cmp    ebx,0x2
c0002780:	75 04                	jne    c0002786 <mount_volume+0x28a>
c0002782:	01 f6                	add    esi,esi
c0002784:	eb 0a                	jmp    c0002790 <mount_volume+0x294>
c0002786:	8d 04 76             	lea    eax,[esi+esi*2]
c0002789:	83 e6 01             	and    esi,0x1
c000278c:	d1 e8                	shr    eax,1
c000278e:	01 c6                	add    esi,eax
c0002790:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002796:	c1 ee 09             	shr    esi,0x9
c0002799:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000279d:	0f 87 21 fe ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00027a3:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00027aa:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00027b1:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00027b5:	83 fb 03             	cmp    ebx,0x3
c00027b8:	75 7a                	jne    c0002834 <mount_volume+0x338>
c00027ba:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027c0:	e8 a7 f2 ff ff       	call   c0001a6c <ld_word>
c00027c5:	66 48                	dec    ax
c00027c7:	75 6b                	jne    c0002834 <mount_volume+0x338>
c00027c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027d1:	83 c2 01             	add    edx,0x1
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	83 d1 00             	adc    ecx,0x0
c00027d9:	e8 6c fa ff ff       	call   c000224a <move_window>
c00027de:	85 c0                	test   eax,eax
c00027e0:	75 52                	jne    c0002834 <mount_volume+0x338>
c00027e2:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027e6:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ec:	e8 7b f2 ff ff       	call   c0001a6c <ld_word>
c00027f1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027f5:	75 3d                	jne    c0002834 <mount_volume+0x338>
c00027f7:	8d 45 54             	lea    eax,[ebp+0x54]
c00027fa:	e8 7a f2 ff ff       	call   c0001a79 <ld_dword>
c00027ff:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002804:	75 2e                	jne    c0002834 <mount_volume+0x338>
c0002806:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000280c:	e8 68 f2 ff ff       	call   c0001a79 <ld_dword>
c0002811:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002816:	75 1c                	jne    c0002834 <mount_volume+0x338>
c0002818:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000281e:	e8 56 f2 ff ff       	call   c0001a79 <ld_dword>
c0002823:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002826:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000282c:	e8 48 f2 ff ff       	call   c0001a79 <ld_dword>
c0002831:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002834:	66 a1 40 43 02 c0    	mov    ax,ds:0xc0024340
c000283a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000283d:	40                   	inc    eax
c000283e:	31 db                	xor    ebx,ebx
c0002840:	66 a3 40 43 02 c0    	mov    ds:0xc0024340,ax
c0002846:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000284a:	e9 0c 02 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c000284f:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002855:	e8 12 f2 ff ff       	call   c0001a6c <ld_word>
c000285a:	66 3d 00 01          	cmp    ax,0x100
c000285e:	0f 85 60 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002864:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000286b:	0f 85 53 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002871:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002877:	e8 15 f2 ff ff       	call   c0001a91 <ld_qword>
c000287c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002880:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002884:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000288a:	e8 ea f1 ff ff       	call   c0001a79 <ld_dword>
c000288f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002892:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002898:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000289b:	fe c8                	dec    al
c000289d:	0f 85 21 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c00028a3:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00028aa:	bb 01 00 00 00       	mov    ebx,0x1
c00028af:	d3 e3                	shl    ebx,cl
c00028b1:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028b5:	66 85 db             	test   bx,bx
c00028b8:	0f 84 06 fd ff ff    	je     c00025c4 <mount_volume+0xc8>
c00028be:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028c4:	e8 b0 f1 ff ff       	call   c0001a79 <ld_dword>
c00028c9:	89 c6                	mov    esi,eax
c00028cb:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028d0:	0f 87 ee fc ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00028d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028da:	8d 40 02             	lea    eax,[eax+0x2]
c00028dd:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028e0:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028e7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ea:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028f0:	e8 84 f1 ff ff       	call   c0001a79 <ld_dword>
c00028f5:	31 d2                	xor    edx,edx
c00028f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002903:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002907:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000290a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000290d:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002913:	e8 61 f1 ff ff       	call   c0001a79 <ld_dword>
c0002918:	31 d2                	xor    edx,edx
c000291a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000291e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002922:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002926:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002929:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000292c:	0f b7 c3             	movzx  eax,bx
c000292f:	31 d2                	xor    edx,edx
c0002931:	0f af f0             	imul   esi,eax
c0002934:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002938:	89 f0                	mov    eax,esi
c000293a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000293e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002942:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002946:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000294a:	39 c1                	cmp    ecx,eax
c000294c:	89 df                	mov    edi,ebx
c000294e:	19 d7                	sbb    edi,edx
c0002950:	0f 82 6e fc ff ff    	jb     c00025c4 <mount_volume+0xc8>
c0002956:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000295c:	31 db                	xor    ebx,ebx
c000295e:	e8 16 f1 ff ff       	call   c0001a79 <ld_dword>
c0002963:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000296a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002975:	85 db                	test   ebx,ebx
c0002977:	75 39                	jne    c00029b2 <mount_volume+0x4b6>
c0002979:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000297d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002981:	0f 86 3d fc ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c0002987:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000298a:	31 ff                	xor    edi,edi
c000298c:	89 e8                	mov    eax,ebp
c000298e:	e8 72 f3 ff ff       	call   c0001d05 <clst2sect>
c0002993:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002997:	01 c6                	add    esi,eax
c0002999:	89 e8                	mov    eax,ebp
c000299b:	11 d7                	adc    edi,edx
c000299d:	89 f2                	mov    edx,esi
c000299f:	89 f9                	mov    ecx,edi
c00029a1:	e8 a4 f8 ff ff       	call   c000224a <move_window>
c00029a6:	85 c0                	test   eax,eax
c00029a8:	0f 85 07 fc ff ff    	jne    c00025b5 <mount_volume+0xb9>
c00029ae:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00029b2:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029b7:	74 0b                	je     c00029c4 <mount_volume+0x4c8>
c00029b9:	83 c3 20             	add    ebx,0x20
c00029bc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029c2:	eb b1                	jmp    c0002975 <mount_volume+0x479>
c00029c4:	8d 75 54             	lea    esi,[ebp+0x54]
c00029c7:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029cb:	e8 a9 f0 ff ff       	call   c0001a79 <ld_dword>
c00029d0:	89 c3                	mov    ebx,eax
c00029d2:	83 f8 01             	cmp    eax,0x1
c00029d5:	0f 86 e9 fb ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c00029db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029de:	0f 86 e0 fb ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c00029e4:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029e7:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029eb:	0f af c2             	imul   eax,edx
c00029ee:	31 d2                	xor    edx,edx
c00029f0:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029f3:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029f6:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029f9:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029fc:	31 c9                	xor    ecx,ecx
c00029fe:	89 da                	mov    edx,ebx
c0002a00:	89 e8                	mov    eax,ebp
c0002a02:	c1 ea 07             	shr    edx,0x7
c0002a05:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002a08:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002a0b:	e8 3a f8 ff ff       	call   c000224a <move_window>
c0002a10:	85 c0                	test   eax,eax
c0002a12:	0f 85 9d fb ff ff    	jne    c00025b5 <mount_volume+0xb9>
c0002a18:	89 d8                	mov    eax,ebx
c0002a1a:	83 e0 7f             	and    eax,0x7f
c0002a1d:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a20:	e8 54 f0 ff ff       	call   c0001a79 <ld_dword>
c0002a25:	83 f8 ff             	cmp    eax,0xffffffff
c0002a28:	74 0a                	je     c0002a34 <mount_volume+0x538>
c0002a2a:	43                   	inc    ebx
c0002a2b:	39 d8                	cmp    eax,ebx
c0002a2d:	74 cd                	je     c00029fc <mount_volume+0x500>
c0002a2f:	e9 90 fb ff ff       	jmp    c00025c4 <mount_volume+0xc8>
c0002a34:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a3b:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a42:	bb 04 00 00 00       	mov    ebx,0x4
c0002a47:	e9 e8 fd ff ff       	jmp    c0002834 <mount_volume+0x338>
c0002a4c:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a51:	19 db                	sbb    ebx,ebx
c0002a53:	83 c3 02             	add    ebx,0x2
c0002a56:	e9 93 fc ff ff       	jmp    c00026ee <mount_volume+0x1f2>
c0002a5b:	83 c4 3c             	add    esp,0x3c
c0002a5e:	89 d8                	mov    eax,ebx
c0002a60:	5b                   	pop    ebx
c0002a61:	5e                   	pop    esi
c0002a62:	5f                   	pop    edi
c0002a63:	5d                   	pop    ebp
c0002a64:	c3                   	ret    

c0002a65 <find_bitmap>:
c0002a65:	55                   	push   ebp
c0002a66:	57                   	push   edi
c0002a67:	89 c7                	mov    edi,eax
c0002a69:	56                   	push   esi
c0002a6a:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a6d:	53                   	push   ebx
c0002a6e:	83 ec 1c             	sub    esp,0x1c
c0002a71:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a78:	83 e8 02             	sub    eax,0x2
c0002a7b:	39 f0                	cmp    eax,esi
c0002a7d:	77 02                	ja     c0002a81 <find_bitmap+0x1c>
c0002a7f:	31 f6                	xor    esi,esi
c0002a81:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a85:	89 f3                	mov    ebx,esi
c0002a87:	31 ed                	xor    ebp,ebp
c0002a89:	31 c9                	xor    ecx,ecx
c0002a8b:	89 da                	mov    edx,ebx
c0002a8d:	89 f8                	mov    eax,edi
c0002a8f:	c1 ea 0c             	shr    edx,0xc
c0002a92:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a95:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a98:	e8 ad f7 ff ff       	call   c000224a <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	75 68                	jne    c0002b09 <find_bitmap+0xa4>
c0002aa1:	89 da                	mov    edx,ebx
c0002aa3:	89 d9                	mov    ecx,ebx
c0002aa5:	c1 ea 03             	shr    edx,0x3
c0002aa8:	83 e1 07             	and    ecx,0x7
c0002aab:	b8 01 00 00 00       	mov    eax,0x1
c0002ab0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ab6:	d3 e0                	shl    eax,cl
c0002ab8:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002abb:	83 e9 02             	sub    ecx,0x2
c0002abe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ac2:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ac6:	43                   	inc    ebx
c0002ac7:	21 c1                	and    ecx,eax
c0002ac9:	d1 e0                	shl    eax,1
c0002acb:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002acf:	77 09                	ja     c0002ada <find_bitmap+0x75>
c0002ad1:	31 db                	xor    ebx,ebx
c0002ad3:	ba 00 02 00 00       	mov    edx,0x200
c0002ad8:	31 c0                	xor    eax,eax
c0002ada:	84 c9                	test   cl,cl
c0002adc:	75 10                	jne    c0002aee <find_bitmap+0x89>
c0002ade:	45                   	inc    ebp
c0002adf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ae3:	75 0f                	jne    c0002af4 <find_bitmap+0x8f>
c0002ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ae9:	83 c0 02             	add    eax,0x2
c0002aec:	eb 22                	jmp    c0002b10 <find_bitmap+0xab>
c0002aee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002af2:	31 ed                	xor    ebp,ebp
c0002af4:	39 de                	cmp    esi,ebx
c0002af6:	74 16                	je     c0002b0e <find_bitmap+0xa9>
c0002af8:	84 c0                	test   al,al
c0002afa:	75 c6                	jne    c0002ac2 <find_bitmap+0x5d>
c0002afc:	42                   	inc    edx
c0002afd:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002b03:	77 84                	ja     c0002a89 <find_bitmap+0x24>
c0002b05:	b0 01                	mov    al,0x1
c0002b07:	eb b9                	jmp    c0002ac2 <find_bitmap+0x5d>
c0002b09:	83 c8 ff             	or     eax,0xffffffff
c0002b0c:	eb 02                	jmp    c0002b10 <find_bitmap+0xab>
c0002b0e:	31 c0                	xor    eax,eax
c0002b10:	83 c4 1c             	add    esp,0x1c
c0002b13:	5b                   	pop    ebx
c0002b14:	5e                   	pop    esi
c0002b15:	5f                   	pop    edi
c0002b16:	5d                   	pop    ebp
c0002b17:	c3                   	ret    

c0002b18 <change_bitmap>:
c0002b18:	55                   	push   ebp
c0002b19:	89 cd                	mov    ebp,ecx
c0002b1b:	57                   	push   edi
c0002b1c:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b1f:	56                   	push   esi
c0002b20:	89 c7                	mov    edi,eax
c0002b22:	53                   	push   ebx
c0002b23:	89 c8                	mov    eax,ecx
c0002b25:	83 ec 1c             	sub    esp,0x1c
c0002b28:	31 d2                	xor    edx,edx
c0002b2a:	89 ce                	mov    esi,ecx
c0002b2c:	c1 e8 0c             	shr    eax,0xc
c0002b2f:	bb 01 00 00 00       	mov    ebx,0x1
c0002b34:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b37:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b3a:	c1 ee 03             	shr    esi,0x3
c0002b3d:	83 e1 07             	and    ecx,0x7
c0002b40:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b46:	d3 e3                	shl    ebx,cl
c0002b48:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b4c:	89 c1                	mov    ecx,eax
c0002b4e:	89 d3                	mov    ebx,edx
c0002b50:	83 c1 01             	add    ecx,0x1
c0002b53:	83 d3 00             	adc    ebx,0x0
c0002b56:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b5a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b5e:	89 d1                	mov    ecx,edx
c0002b60:	89 c2                	mov    edx,eax
c0002b62:	89 f8                	mov    eax,edi
c0002b64:	e8 e1 f6 ff ff       	call   c000224a <move_window>
c0002b69:	89 c1                	mov    ecx,eax
c0002b6b:	85 c0                	test   eax,eax
c0002b6d:	75 48                	jne    c0002bb7 <change_bitmap+0x9f>
c0002b6f:	31 d2                	xor    edx,edx
c0002b71:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b75:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b79:	0f 95 c2             	setne  dl
c0002b7c:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b80:	74 3c                	je     c0002bbe <change_bitmap+0xa6>
c0002b82:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b86:	4d                   	dec    ebp
c0002b87:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b8b:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b8f:	74 32                	je     c0002bc3 <change_bitmap+0xab>
c0002b91:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b95:	75 d8                	jne    c0002b6f <change_bitmap+0x57>
c0002b97:	8d 46 01             	lea    eax,[esi+0x1]
c0002b9a:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b9f:	89 c3                	mov    ebx,eax
c0002ba1:	31 f6                	xor    esi,esi
c0002ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bab:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002bb1:	74 99                	je     c0002b4c <change_bitmap+0x34>
c0002bb3:	89 de                	mov    esi,ebx
c0002bb5:	eb b8                	jmp    c0002b6f <change_bitmap+0x57>
c0002bb7:	b9 01 00 00 00       	mov    ecx,0x1
c0002bbc:	eb 05                	jmp    c0002bc3 <change_bitmap+0xab>
c0002bbe:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc3:	83 c4 1c             	add    esp,0x1c
c0002bc6:	89 c8                	mov    eax,ecx
c0002bc8:	5b                   	pop    ebx
c0002bc9:	5e                   	pop    esi
c0002bca:	5f                   	pop    edi
c0002bcb:	5d                   	pop    ebp
c0002bcc:	c3                   	ret    

c0002bcd <put_fat>:
c0002bcd:	83 fa 01             	cmp    edx,0x1
c0002bd0:	0f 86 7b 01 00 00    	jbe    c0002d51 <put_fat+0x184>
c0002bd6:	55                   	push   ebp
c0002bd7:	57                   	push   edi
c0002bd8:	89 cf                	mov    edi,ecx
c0002bda:	56                   	push   esi
c0002bdb:	b9 02 00 00 00       	mov    ecx,0x2
c0002be0:	53                   	push   ebx
c0002be1:	89 c6                	mov    esi,eax
c0002be3:	83 ec 1c             	sub    esp,0x1c
c0002be6:	89 d3                	mov    ebx,edx
c0002be8:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002beb:	0f 86 68 01 00 00    	jbe    c0002d59 <put_fat+0x18c>
c0002bf1:	8a 00                	mov    al,BYTE PTR [eax]
c0002bf3:	3c 02                	cmp    al,0x2
c0002bf5:	0f 84 c7 00 00 00    	je     c0002cc2 <put_fat+0xf5>
c0002bfb:	77 09                	ja     c0002c06 <put_fat+0x39>
c0002bfd:	fe c8                	dec    al
c0002bff:	74 17                	je     c0002c18 <put_fat+0x4b>
c0002c01:	e9 53 01 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002c06:	b9 02 00 00 00       	mov    ecx,0x2
c0002c0b:	3c 04                	cmp    al,0x4
c0002c0d:	0f 86 e1 00 00 00    	jbe    c0002cf4 <put_fat+0x127>
c0002c13:	e9 41 01 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002c18:	89 d5                	mov    ebp,edx
c0002c1a:	31 c9                	xor    ecx,ecx
c0002c1c:	d1 ed                	shr    ebp,1
c0002c1e:	89 f0                	mov    eax,esi
c0002c20:	01 d5                	add    ebp,edx
c0002c22:	89 ea                	mov    edx,ebp
c0002c24:	c1 ea 09             	shr    edx,0x9
c0002c27:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c2a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c2d:	e8 18 f6 ff ff       	call   c000224a <move_window>
c0002c32:	89 c1                	mov    ecx,eax
c0002c34:	85 c0                	test   eax,eax
c0002c36:	0f 85 1d 01 00 00    	jne    c0002d59 <put_fat+0x18c>
c0002c3c:	8d 46 54             	lea    eax,[esi+0x54]
c0002c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c43:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c46:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c50:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c54:	89 f8                	mov    eax,edi
c0002c56:	83 e3 01             	and    ebx,0x1
c0002c59:	74 0d                	je     c0002c68 <put_fat+0x9b>
c0002c5b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c5e:	89 fa                	mov    edx,edi
c0002c60:	83 e0 0f             	and    eax,0xf
c0002c63:	c1 e2 04             	shl    edx,0x4
c0002c66:	09 d0                	or     eax,edx
c0002c68:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c6f:	31 c9                	xor    ecx,ecx
c0002c71:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c75:	c1 ea 09             	shr    edx,0x9
c0002c78:	89 f0                	mov    eax,esi
c0002c7a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c7d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c80:	e8 c5 f5 ff ff       	call   c000224a <move_window>
c0002c85:	89 c1                	mov    ecx,eax
c0002c87:	85 c0                	test   eax,eax
c0002c89:	0f 85 ca 00 00 00    	jne    c0002d59 <put_fat+0x18c>
c0002c8f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c93:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c99:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c9d:	85 db                	test   ebx,ebx
c0002c9f:	74 07                	je     c0002ca8 <put_fat+0xdb>
c0002ca1:	c1 ef 04             	shr    edi,0x4
c0002ca4:	89 fa                	mov    edx,edi
c0002ca6:	eb 0e                	jmp    c0002cb6 <put_fat+0xe9>
c0002ca8:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002cab:	c1 ef 08             	shr    edi,0x8
c0002cae:	83 e2 f0             	and    edx,0xfffffff0
c0002cb1:	83 e7 0f             	and    edi,0xf
c0002cb4:	09 fa                	or     edx,edi
c0002cb6:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002cb9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cbd:	e9 97 00 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002cc2:	31 c9                	xor    ecx,ecx
c0002cc4:	c1 ea 08             	shr    edx,0x8
c0002cc7:	89 f0                	mov    eax,esi
c0002cc9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ccc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccf:	e8 76 f5 ff ff       	call   c000224a <move_window>
c0002cd4:	89 c1                	mov    ecx,eax
c0002cd6:	85 c0                	test   eax,eax
c0002cd8:	75 7f                	jne    c0002d59 <put_fat+0x18c>
c0002cda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cde:	01 db                	add    ebx,ebx
c0002ce0:	0f b7 d7             	movzx  edx,di
c0002ce3:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ce9:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ced:	e8 ec ed ff ff       	call   c0001ade <st_word>
c0002cf2:	eb 53                	jmp    c0002d47 <put_fat+0x17a>
c0002cf4:	31 c9                	xor    ecx,ecx
c0002cf6:	c1 ea 07             	shr    edx,0x7
c0002cf9:	89 f0                	mov    eax,esi
c0002cfb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cfe:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d01:	e8 44 f5 ff ff       	call   c000224a <move_window>
c0002d06:	89 c1                	mov    ecx,eax
c0002d08:	85 c0                	test   eax,eax
c0002d0a:	75 4d                	jne    c0002d59 <put_fat+0x18c>
c0002d0c:	c1 e3 02             	shl    ebx,0x2
c0002d0f:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002d15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d18:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d1c:	74 1c                	je     c0002d3a <put_fat+0x16d>
c0002d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d22:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d28:	89 d8                	mov    eax,ebx
c0002d2a:	e8 4a ed ff ff       	call   c0001a79 <ld_dword>
c0002d2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d33:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d38:	09 c7                	or     edi,eax
c0002d3a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d3e:	89 fa                	mov    edx,edi
c0002d40:	89 d8                	mov    eax,ebx
c0002d42:	e8 9b ed ff ff       	call   c0001ae2 <st_dword>
c0002d47:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d4f:	eb 08                	jmp    c0002d59 <put_fat+0x18c>
c0002d51:	b9 02 00 00 00       	mov    ecx,0x2
c0002d56:	89 c8                	mov    eax,ecx
c0002d58:	c3                   	ret    
c0002d59:	83 c4 1c             	add    esp,0x1c
c0002d5c:	89 c8                	mov    eax,ecx
c0002d5e:	5b                   	pop    ebx
c0002d5f:	5e                   	pop    esi
c0002d60:	5f                   	pop    edi
c0002d61:	5d                   	pop    ebp
c0002d62:	c3                   	ret    

c0002d63 <fill_last_frag>:
c0002d63:	57                   	push   edi
c0002d64:	89 cf                	mov    edi,ecx
c0002d66:	56                   	push   esi
c0002d67:	89 d6                	mov    esi,edx
c0002d69:	53                   	push   ebx
c0002d6a:	89 c3                	mov    ebx,eax
c0002d6c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d6f:	85 c0                	test   eax,eax
c0002d71:	74 21                	je     c0002d94 <fill_last_frag+0x31>
c0002d73:	89 f9                	mov    ecx,edi
c0002d75:	83 f8 01             	cmp    eax,0x1
c0002d78:	76 05                	jbe    c0002d7f <fill_last_frag+0x1c>
c0002d7a:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d7d:	29 c1                	sub    ecx,eax
c0002d7f:	8d 56 01             	lea    edx,[esi+0x1]
c0002d82:	29 c2                	sub    edx,eax
c0002d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d86:	e8 42 fe ff ff       	call   c0002bcd <put_fat>
c0002d8b:	85 c0                	test   eax,eax
c0002d8d:	75 05                	jne    c0002d94 <fill_last_frag+0x31>
c0002d8f:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d92:	eb d8                	jmp    c0002d6c <fill_last_frag+0x9>
c0002d94:	5b                   	pop    ebx
c0002d95:	5e                   	pop    esi
c0002d96:	5f                   	pop    edi
c0002d97:	c3                   	ret    

c0002d98 <fill_first_frag>:
c0002d98:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d9c:	75 2d                	jne    c0002dcb <fill_first_frag+0x33>
c0002d9e:	57                   	push   edi
c0002d9f:	56                   	push   esi
c0002da0:	53                   	push   ebx
c0002da1:	89 c3                	mov    ebx,eax
c0002da3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002da6:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002da9:	01 d7                	add    edi,edx
c0002dab:	39 fa                	cmp    edx,edi
c0002dad:	74 14                	je     c0002dc3 <fill_first_frag+0x2b>
c0002daf:	8d 72 01             	lea    esi,[edx+0x1]
c0002db2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002db4:	89 f1                	mov    ecx,esi
c0002db6:	e8 12 fe ff ff       	call   c0002bcd <put_fat>
c0002dbb:	89 f2                	mov    edx,esi
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	74 ea                	je     c0002dab <fill_first_frag+0x13>
c0002dc1:	eb 0b                	jmp    c0002dce <fill_first_frag+0x36>
c0002dc3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002dc7:	31 c0                	xor    eax,eax
c0002dc9:	eb 03                	jmp    c0002dce <fill_first_frag+0x36>
c0002dcb:	31 c0                	xor    eax,eax
c0002dcd:	c3                   	ret    
c0002dce:	5b                   	pop    ebx
c0002dcf:	5e                   	pop    esi
c0002dd0:	5f                   	pop    edi
c0002dd1:	c3                   	ret    

c0002dd2 <get_fat>:
c0002dd2:	83 fa 01             	cmp    edx,0x1
c0002dd5:	0f 86 db 01 00 00    	jbe    c0002fb6 <get_fat+0x1e4>
c0002ddb:	55                   	push   ebp
c0002ddc:	b9 01 00 00 00       	mov    ecx,0x1
c0002de1:	57                   	push   edi
c0002de2:	56                   	push   esi
c0002de3:	53                   	push   ebx
c0002de4:	83 ec 1c             	sub    esp,0x1c
c0002de7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002de9:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dec:	0f 86 cc 01 00 00    	jbe    c0002fbe <get_fat+0x1ec>
c0002df2:	89 c3                	mov    ebx,eax
c0002df4:	89 d6                	mov    esi,edx
c0002df6:	8a 07                	mov    al,BYTE PTR [edi]
c0002df8:	3c 02                	cmp    al,0x2
c0002dfa:	0f 84 99 00 00 00    	je     c0002e99 <get_fat+0xc7>
c0002e00:	77 09                	ja     c0002e0b <get_fat+0x39>
c0002e02:	fe c8                	dec    al
c0002e04:	74 1a                	je     c0002e20 <get_fat+0x4e>
c0002e06:	e9 b3 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e0b:	3c 03                	cmp    al,0x3
c0002e0d:	0f 84 b5 00 00 00    	je     c0002ec8 <get_fat+0xf6>
c0002e13:	3c 04                	cmp    al,0x4
c0002e15:	0f 84 e3 00 00 00    	je     c0002efe <get_fat+0x12c>
c0002e1b:	e9 9e 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e20:	89 d3                	mov    ebx,edx
c0002e22:	31 c9                	xor    ecx,ecx
c0002e24:	d1 eb                	shr    ebx,1
c0002e26:	89 f8                	mov    eax,edi
c0002e28:	01 d3                	add    ebx,edx
c0002e2a:	89 da                	mov    edx,ebx
c0002e2c:	c1 ea 09             	shr    edx,0x9
c0002e2f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e32:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e35:	e8 10 f4 ff ff       	call   c000224a <move_window>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <get_fat+0x74>
c0002e3e:	83 c9 ff             	or     ecx,0xffffffff
c0002e41:	e9 78 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e46:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e49:	31 c9                	xor    ecx,ecx
c0002e4b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e51:	89 ea                	mov    edx,ebp
c0002e53:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e57:	c1 ea 09             	shr    edx,0x9
c0002e5a:	89 f8                	mov    eax,edi
c0002e5c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e5f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e62:	e8 e3 f3 ff ff       	call   c000224a <move_window>
c0002e67:	85 c0                	test   eax,eax
c0002e69:	75 d3                	jne    c0002e3e <get_fat+0x6c>
c0002e6b:	0f b6 c3             	movzx  eax,bl
c0002e6e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e74:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e79:	c1 e3 08             	shl    ebx,0x8
c0002e7c:	09 c3                	or     ebx,eax
c0002e7e:	89 d9                	mov    ecx,ebx
c0002e80:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e86:	83 e6 01             	and    esi,0x1
c0002e89:	0f 84 2f 01 00 00    	je     c0002fbe <get_fat+0x1ec>
c0002e8f:	89 d9                	mov    ecx,ebx
c0002e91:	c1 e9 04             	shr    ecx,0x4
c0002e94:	e9 25 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e99:	31 c9                	xor    ecx,ecx
c0002e9b:	c1 ea 08             	shr    edx,0x8
c0002e9e:	89 f8                	mov    eax,edi
c0002ea0:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea3:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea6:	e8 9f f3 ff ff       	call   c000224a <move_window>
c0002eab:	85 c0                	test   eax,eax
c0002ead:	75 8f                	jne    c0002e3e <get_fat+0x6c>
c0002eaf:	01 f6                	add    esi,esi
c0002eb1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 ac eb ff ff       	call   c0001a6c <ld_word>
c0002ec0:	0f b7 c8             	movzx  ecx,ax
c0002ec3:	e9 f6 00 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002ec8:	31 c9                	xor    ecx,ecx
c0002eca:	c1 ea 07             	shr    edx,0x7
c0002ecd:	89 f8                	mov    eax,edi
c0002ecf:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ed2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ed5:	e8 70 f3 ff ff       	call   c000224a <move_window>
c0002eda:	85 c0                	test   eax,eax
c0002edc:	0f 85 5c ff ff ff    	jne    c0002e3e <get_fat+0x6c>
c0002ee2:	c1 e6 02             	shl    esi,0x2
c0002ee5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eeb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eef:	e8 85 eb ff ff       	call   c0001a79 <ld_dword>
c0002ef4:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ef9:	e9 b4 00 00 00       	jmp    c0002fb2 <get_fat+0x1e0>
c0002efe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002f01:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f04:	89 d1                	mov    ecx,edx
c0002f06:	09 c1                	or     ecx,eax
c0002f08:	74 06                	je     c0002f10 <get_fat+0x13e>
c0002f0a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002f0e:	75 0f                	jne    c0002f1f <get_fat+0x14d>
c0002f10:	b9 01 00 00 00       	mov    ecx,0x1
c0002f15:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f19:	0f 85 9f 00 00 00    	jne    c0002fbe <get_fat+0x1ec>
c0002f1f:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f23:	89 f5                	mov    ebp,esi
c0002f25:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f2a:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f2d:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f30:	80 f9 02             	cmp    cl,0x2
c0002f33:	75 35                	jne    c0002f6a <get_fat+0x198>
c0002f35:	83 c0 ff             	add    eax,0xffffffff
c0002f38:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f3d:	83 d2 ff             	adc    edx,0xffffffff
c0002f40:	31 db                	xor    ebx,ebx
c0002f42:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f46:	53                   	push   ebx
c0002f47:	c1 ea 09             	shr    edx,0x9
c0002f4a:	51                   	push   ecx
c0002f4b:	52                   	push   edx
c0002f4c:	50                   	push   eax
c0002f4d:	e8 aa c2 01 00       	call   c001f1fc <__udivdi3>
c0002f52:	83 c4 10             	add    esp,0x10
c0002f55:	b9 01 00 00 00       	mov    ecx,0x1
c0002f5a:	39 c5                	cmp    ebp,eax
c0002f5c:	77 60                	ja     c0002fbe <get_fat+0x1ec>
c0002f5e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f63:	74 59                	je     c0002fbe <get_fat+0x1ec>
c0002f65:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f68:	eb 54                	jmp    c0002fbe <get_fat+0x1ec>
c0002f6a:	80 f9 03             	cmp    cl,0x3
c0002f6d:	75 05                	jne    c0002f74 <get_fat+0x1a2>
c0002f6f:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f72:	77 f1                	ja     c0002f65 <get_fat+0x193>
c0002f74:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f79:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f7d:	75 3f                	jne    c0002fbe <get_fat+0x1ec>
c0002f7f:	31 c9                	xor    ecx,ecx
c0002f81:	89 f2                	mov    edx,esi
c0002f83:	89 f8                	mov    eax,edi
c0002f85:	c1 ea 07             	shr    edx,0x7
c0002f88:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8e:	e8 b7 f2 ff ff       	call   c000224a <move_window>
c0002f93:	85 c0                	test   eax,eax
c0002f95:	0f 85 a3 fe ff ff    	jne    c0002e3e <get_fat+0x6c>
c0002f9b:	c1 e6 02             	shl    esi,0x2
c0002f9e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fa4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa8:	e8 cc ea ff ff       	call   c0001a79 <ld_dword>
c0002fad:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002fb2:	89 c1                	mov    ecx,eax
c0002fb4:	eb 08                	jmp    c0002fbe <get_fat+0x1ec>
c0002fb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002fbb:	89 c8                	mov    eax,ecx
c0002fbd:	c3                   	ret    
c0002fbe:	83 c4 1c             	add    esp,0x1c
c0002fc1:	89 c8                	mov    eax,ecx
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	5d                   	pop    ebp
c0002fc7:	c3                   	ret    

c0002fc8 <dir_sdi>:
c0002fc8:	55                   	push   ebp
c0002fc9:	57                   	push   edi
c0002fca:	56                   	push   esi
c0002fcb:	53                   	push   ebx
c0002fcc:	89 c3                	mov    ebx,eax
c0002fce:	83 ec 1c             	sub    esp,0x1c
c0002fd1:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fd3:	31 c0                	xor    eax,eax
c0002fd5:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fd8:	0f 94 c0             	sete   al
c0002fdb:	48                   	dec    eax
c0002fdc:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fe1:	05 00 00 00 10       	add    eax,0x10000000
c0002fe6:	39 d0                	cmp    eax,edx
c0002fe8:	77 0a                	ja     c0002ff4 <dir_sdi+0x2c>
c0002fea:	b8 02 00 00 00       	mov    eax,0x2
c0002fef:	e9 c4 00 00 00       	jmp    c00030b8 <dir_sdi+0xf0>
c0002ff4:	89 d6                	mov    esi,edx
c0002ff6:	f6 c2 1f             	test   dl,0x1f
c0002ff9:	75 ef                	jne    c0002fea <dir_sdi+0x22>
c0002ffb:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002ffe:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003001:	85 c9                	test   ecx,ecx
c0003003:	75 2d                	jne    c0003032 <dir_sdi+0x6a>
c0003005:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003008:	77 1b                	ja     c0003025 <dir_sdi+0x5d>
c000300a:	89 f2                	mov    edx,esi
c000300c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003010:	c1 ea 05             	shr    edx,0x5
c0003013:	39 c2                	cmp    edx,eax
c0003015:	73 d3                	jae    c0002fea <dir_sdi+0x22>
c0003017:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000301a:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000301d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003020:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003023:	eb 4b                	jmp    c0003070 <dir_sdi+0xa8>
c0003025:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003028:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000302c:	85 c0                	test   eax,eax
c000302e:	74 da                	je     c000300a <dir_sdi+0x42>
c0003030:	89 c1                	mov    ecx,eax
c0003032:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003036:	c1 e5 09             	shl    ebp,0x9
c0003039:	89 ca                	mov    edx,ecx
c000303b:	39 ee                	cmp    esi,ebp
c000303d:	72 1c                	jb     c000305b <dir_sdi+0x93>
c000303f:	89 d8                	mov    eax,ebx
c0003041:	e8 8c fd ff ff       	call   c0002dd2 <get_fat>
c0003046:	89 c1                	mov    ecx,eax
c0003048:	83 f8 ff             	cmp    eax,0xffffffff
c000304b:	74 66                	je     c00030b3 <dir_sdi+0xeb>
c000304d:	83 f8 01             	cmp    eax,0x1
c0003050:	76 98                	jbe    c0002fea <dir_sdi+0x22>
c0003052:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003055:	76 93                	jbe    c0002fea <dir_sdi+0x22>
c0003057:	29 ee                	sub    esi,ebp
c0003059:	eb de                	jmp    c0003039 <dir_sdi+0x71>
c000305b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000305f:	89 f8                	mov    eax,edi
c0003061:	e8 9f ec ff ff       	call   c0001d05 <clst2sect>
c0003066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000306a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000306d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003070:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003073:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003076:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003079:	89 d1                	mov    ecx,edx
c000307b:	09 c1                	or     ecx,eax
c000307d:	0f 84 67 ff ff ff    	je     c0002fea <dir_sdi+0x22>
c0003083:	89 f1                	mov    ecx,esi
c0003085:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000308d:	c1 e9 09             	shr    ecx,0x9
c0003090:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003094:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003098:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000309c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000309f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00030a5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00030a8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ac:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00030af:	31 c0                	xor    eax,eax
c00030b1:	eb 05                	jmp    c00030b8 <dir_sdi+0xf0>
c00030b3:	b8 01 00 00 00       	mov    eax,0x1
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <create_chain>:
c00030c0:	55                   	push   ebp
c00030c1:	89 c5                	mov    ebp,eax
c00030c3:	57                   	push   edi
c00030c4:	56                   	push   esi
c00030c5:	53                   	push   ebx
c00030c6:	83 ec 1c             	sub    esp,0x1c
c00030c9:	85 d2                	test   edx,edx
c00030cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030cf:	8b 30                	mov    esi,DWORD PTR [eax]
c00030d1:	75 0e                	jne    c00030e1 <create_chain+0x21>
c00030d3:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030d6:	85 ff                	test   edi,edi
c00030d8:	74 39                	je     c0003113 <create_chain+0x53>
c00030da:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030dd:	77 39                	ja     c0003118 <create_chain+0x58>
c00030df:	eb 32                	jmp    c0003113 <create_chain+0x53>
c00030e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030e5:	e8 e8 fc ff ff       	call   c0002dd2 <get_fat>
c00030ea:	89 c3                	mov    ebx,eax
c00030ec:	83 f8 01             	cmp    eax,0x1
c00030ef:	77 0a                	ja     c00030fb <create_chain+0x3b>
c00030f1:	bb 01 00 00 00       	mov    ebx,0x1
c00030f6:	e9 ba 01 00 00       	jmp    c00032b5 <create_chain+0x1f5>
c00030fb:	83 f8 ff             	cmp    eax,0xffffffff
c00030fe:	0f 84 62 01 00 00    	je     c0003266 <create_chain+0x1a6>
c0003104:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003107:	0f 87 a8 01 00 00    	ja     c00032b5 <create_chain+0x1f5>
c000310d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003111:	eb 05                	jmp    c0003118 <create_chain+0x58>
c0003113:	bf 01 00 00 00       	mov    edi,0x1
c0003118:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000311c:	75 07                	jne    c0003125 <create_chain+0x65>
c000311e:	31 db                	xor    ebx,ebx
c0003120:	e9 90 01 00 00       	jmp    c00032b5 <create_chain+0x1f5>
c0003125:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003128:	75 74                	jne    c000319e <create_chain+0xde>
c000312a:	b9 01 00 00 00       	mov    ecx,0x1
c000312f:	89 fa                	mov    edx,edi
c0003131:	89 f0                	mov    eax,esi
c0003133:	e8 2d f9 ff ff       	call   c0002a65 <find_bitmap>
c0003138:	89 c3                	mov    ebx,eax
c000313a:	8d 40 ff             	lea    eax,[eax-0x1]
c000313d:	83 f8 fd             	cmp    eax,0xfffffffd
c0003140:	0f 87 6f 01 00 00    	ja     c00032b5 <create_chain+0x1f5>
c0003146:	83 ec 0c             	sub    esp,0xc
c0003149:	b9 01 00 00 00       	mov    ecx,0x1
c000314e:	6a 01                	push   0x1
c0003150:	89 da                	mov    edx,ebx
c0003152:	89 f0                	mov    eax,esi
c0003154:	e8 bf f9 ff ff       	call   c0002b18 <change_bitmap>
c0003159:	83 c4 10             	add    esp,0x10
c000315c:	83 f8 02             	cmp    eax,0x2
c000315f:	74 90                	je     c00030f1 <create_chain+0x31>
c0003161:	83 f8 01             	cmp    eax,0x1
c0003164:	0f 84 fc 00 00 00    	je     c0003266 <create_chain+0x1a6>
c000316a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000316f:	75 09                	jne    c000317a <create_chain+0xba>
c0003171:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003175:	e9 0c 01 00 00       	jmp    c0003286 <create_chain+0x1c6>
c000317a:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000317e:	0f 85 e7 00 00 00    	jne    c000326b <create_chain+0x1ab>
c0003184:	8d 57 01             	lea    edx,[edi+0x1]
c0003187:	39 da                	cmp    edx,ebx
c0003189:	0f 84 f7 00 00 00    	je     c0003286 <create_chain+0x1c6>
c000318f:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003192:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003196:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003199:	e9 cd 00 00 00       	jmp    c000326b <create_chain+0x1ab>
c000319e:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00031a2:	75 41                	jne    c00031e5 <create_chain+0x125>
c00031a4:	8d 5f 01             	lea    ebx,[edi+0x1]
c00031a7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031aa:	77 05                	ja     c00031b1 <create_chain+0xf1>
c00031ac:	bb 02 00 00 00       	mov    ebx,0x2
c00031b1:	89 da                	mov    edx,ebx
c00031b3:	89 e8                	mov    eax,ebp
c00031b5:	e8 18 fc ff ff       	call   c0002dd2 <get_fat>
c00031ba:	83 f8 01             	cmp    eax,0x1
c00031bd:	0f 84 2e ff ff ff    	je     c00030f1 <create_chain+0x31>
c00031c3:	83 f8 ff             	cmp    eax,0xffffffff
c00031c6:	0f 84 9a 00 00 00    	je     c0003266 <create_chain+0x1a6>
c00031cc:	85 c0                	test   eax,eax
c00031ce:	74 11                	je     c00031e1 <create_chain+0x121>
c00031d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	76 0d                	jbe    c00031e5 <create_chain+0x125>
c00031d8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031db:	76 08                	jbe    c00031e5 <create_chain+0x125>
c00031dd:	89 c7                	mov    edi,eax
c00031df:	eb 04                	jmp    c00031e5 <create_chain+0x125>
c00031e1:	85 db                	test   ebx,ebx
c00031e3:	75 38                	jne    c000321d <create_chain+0x15d>
c00031e5:	89 fb                	mov    ebx,edi
c00031e7:	43                   	inc    ebx
c00031e8:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031eb:	77 0e                	ja     c00031fb <create_chain+0x13b>
c00031ed:	83 ff 01             	cmp    edi,0x1
c00031f0:	0f 86 28 ff ff ff    	jbe    c000311e <create_chain+0x5e>
c00031f6:	bb 02 00 00 00       	mov    ebx,0x2
c00031fb:	89 da                	mov    edx,ebx
c00031fd:	89 e8                	mov    eax,ebp
c00031ff:	e8 ce fb ff ff       	call   c0002dd2 <get_fat>
c0003204:	85 c0                	test   eax,eax
c0003206:	74 15                	je     c000321d <create_chain+0x15d>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	0f 84 e0 fe ff ff    	je     c00030f1 <create_chain+0x31>
c0003211:	40                   	inc    eax
c0003212:	74 52                	je     c0003266 <create_chain+0x1a6>
c0003214:	39 fb                	cmp    ebx,edi
c0003216:	75 cf                	jne    c00031e7 <create_chain+0x127>
c0003218:	e9 01 ff ff ff       	jmp    c000311e <create_chain+0x5e>
c000321d:	83 c9 ff             	or     ecx,0xffffffff
c0003220:	89 da                	mov    edx,ebx
c0003222:	89 f0                	mov    eax,esi
c0003224:	e8 a4 f9 ff ff       	call   c0002bcd <put_fat>
c0003229:	85 c0                	test   eax,eax
c000322b:	75 32                	jne    c000325f <create_chain+0x19f>
c000322d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003232:	74 11                	je     c0003245 <create_chain+0x185>
c0003234:	89 d9                	mov    ecx,ebx
c0003236:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000323a:	89 f0                	mov    eax,esi
c000323c:	e8 8c f9 ff ff       	call   c0002bcd <put_fat>
c0003241:	85 c0                	test   eax,eax
c0003243:	75 1a                	jne    c000325f <create_chain+0x19f>
c0003245:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003248:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000324b:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000324e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003251:	39 d0                	cmp    eax,edx
c0003253:	77 04                	ja     c0003259 <create_chain+0x199>
c0003255:	48                   	dec    eax
c0003256:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003259:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000325d:	eb 56                	jmp    c00032b5 <create_chain+0x1f5>
c000325f:	48                   	dec    eax
c0003260:	0f 85 8b fe ff ff    	jne    c00030f1 <create_chain+0x31>
c0003266:	83 cb ff             	or     ebx,0xffffffff
c0003269:	eb 4a                	jmp    c00032b5 <create_chain+0x1f5>
c000326b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000326f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003272:	41                   	inc    ecx
c0003273:	39 d9                	cmp    ecx,ebx
c0003275:	75 19                	jne    c0003290 <create_chain+0x1d0>
c0003277:	b9 02 00 00 00       	mov    ecx,0x2
c000327c:	85 d2                	test   edx,edx
c000327e:	74 03                	je     c0003283 <create_chain+0x1c3>
c0003280:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003283:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003286:	85 c0                	test   eax,eax
c0003288:	0f 85 63 fe ff ff    	jne    c00030f1 <create_chain+0x31>
c000328e:	eb b5                	jmp    c0003245 <create_chain+0x185>
c0003290:	85 d2                	test   edx,edx
c0003292:	75 07                	jne    c000329b <create_chain+0x1db>
c0003294:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000329b:	89 d9                	mov    ecx,ebx
c000329d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a1:	89 e8                	mov    eax,ebp
c00032a3:	e8 bb fa ff ff       	call   c0002d63 <fill_last_frag>
c00032a8:	85 c0                	test   eax,eax
c00032aa:	75 b3                	jne    c000325f <create_chain+0x19f>
c00032ac:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032b3:	eb 90                	jmp    c0003245 <create_chain+0x185>
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	89 d8                	mov    eax,ebx
c00032ba:	5b                   	pop    ebx
c00032bb:	5e                   	pop    esi
c00032bc:	5f                   	pop    edi
c00032bd:	5d                   	pop    ebp
c00032be:	c3                   	ret    

c00032bf <remove_chain>:
c00032bf:	55                   	push   ebp
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	83 fa 01             	cmp    edx,0x1
c00032c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032cd:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032cf:	77 0a                	ja     c00032db <remove_chain+0x1c>
c00032d1:	b8 02 00 00 00       	mov    eax,0x2
c00032d6:	e9 24 01 00 00       	jmp    c00033ff <remove_chain+0x140>
c00032db:	89 d6                	mov    esi,edx
c00032dd:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032e0:	76 ef                	jbe    c00032d1 <remove_chain+0x12>
c00032e2:	89 c7                	mov    edi,eax
c00032e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e9:	75 06                	jne    c00032f1 <remove_chain+0x32>
c00032eb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032ef:	eb 54                	jmp    c0003345 <remove_chain+0x86>
c00032f1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f4:	75 06                	jne    c00032fc <remove_chain+0x3d>
c00032f6:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032fa:	74 ef                	je     c00032eb <remove_chain+0x2c>
c00032fc:	83 c9 ff             	or     ecx,0xffffffff
c00032ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003303:	89 d8                	mov    eax,ebx
c0003305:	e8 c3 f8 ff ff       	call   c0002bcd <put_fat>
c000330a:	85 c0                	test   eax,eax
c000330c:	74 dd                	je     c00032eb <remove_chain+0x2c>
c000330e:	e9 ec 00 00 00       	jmp    c00033ff <remove_chain+0x140>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	74 b9                	je     c00032d1 <remove_chain+0x12>
c0003318:	83 f8 ff             	cmp    eax,0xffffffff
c000331b:	74 6d                	je     c000338a <remove_chain+0xcb>
c000331d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003320:	75 6f                	jne    c0003391 <remove_chain+0xd2>
c0003322:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003325:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003328:	8d 51 fe             	lea    edx,[ecx-0x2]
c000332b:	39 d0                	cmp    eax,edx
c000332d:	73 08                	jae    c0003337 <remove_chain+0x78>
c000332f:	40                   	inc    eax
c0003330:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003334:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003337:	8d 4e 01             	lea    ecx,[esi+0x1]
c000333a:	39 e9                	cmp    ecx,ebp
c000333c:	75 64                	jne    c00033a2 <remove_chain+0xe3>
c000333e:	89 ee                	mov    esi,ebp
c0003340:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003343:	76 0f                	jbe    c0003354 <remove_chain+0x95>
c0003345:	89 f2                	mov    edx,esi
c0003347:	89 f8                	mov    eax,edi
c0003349:	e8 84 fa ff ff       	call   c0002dd2 <get_fat>
c000334e:	89 c5                	mov    ebp,eax
c0003350:	85 c0                	test   eax,eax
c0003352:	75 bf                	jne    c0003313 <remove_chain+0x54>
c0003354:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003357:	0f 85 a0 00 00 00    	jne    c00033fd <remove_chain+0x13e>
c000335d:	eb 6c                	jmp    c00033cb <remove_chain+0x10c>
c000335f:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003362:	84 c0                	test   al,al
c0003364:	75 7d                	jne    c00033e3 <remove_chain+0x124>
c0003366:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003369:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000336d:	0f 84 86 00 00 00    	je     c00033f9 <remove_chain+0x13a>
c0003373:	89 da                	mov    edx,ebx
c0003375:	89 f8                	mov    eax,edi
c0003377:	e8 56 fa ff ff       	call   c0002dd2 <get_fat>
c000337c:	83 f8 01             	cmp    eax,0x1
c000337f:	0f 86 4c ff ff ff    	jbe    c00032d1 <remove_chain+0x12>
c0003385:	83 f8 ff             	cmp    eax,0xffffffff
c0003388:	75 4e                	jne    c00033d8 <remove_chain+0x119>
c000338a:	b8 01 00 00 00       	mov    eax,0x1
c000338f:	eb 6e                	jmp    c00033ff <remove_chain+0x140>
c0003391:	31 c9                	xor    ecx,ecx
c0003393:	89 f2                	mov    edx,esi
c0003395:	89 d8                	mov    eax,ebx
c0003397:	e8 31 f8 ff ff       	call   c0002bcd <put_fat>
c000339c:	85 c0                	test   eax,eax
c000339e:	74 82                	je     c0003322 <remove_chain+0x63>
c00033a0:	eb 5d                	jmp    c00033ff <remove_chain+0x140>
c00033a2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033a5:	75 1b                	jne    c00033c2 <remove_chain+0x103>
c00033a7:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00033ab:	89 d8                	mov    eax,ebx
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	6a 00                	push   0x0
c00033b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033b6:	e8 5d f7 ff ff       	call   c0002b18 <change_bitmap>
c00033bb:	83 c4 10             	add    esp,0x10
c00033be:	85 c0                	test   eax,eax
c00033c0:	75 3d                	jne    c00033ff <remove_chain+0x140>
c00033c2:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033c6:	e9 73 ff ff ff       	jmp    c000333e <remove_chain+0x7f>
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 8d                	jne    c000335f <remove_chain+0xa0>
c00033d2:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033d6:	eb 25                	jmp    c00033fd <remove_chain+0x13e>
c00033d8:	8d 53 01             	lea    edx,[ebx+0x1]
c00033db:	89 c3                	mov    ebx,eax
c00033dd:	39 c2                	cmp    edx,eax
c00033df:	74 88                	je     c0003369 <remove_chain+0xaa>
c00033e1:	eb 1a                	jmp    c00033fd <remove_chain+0x13e>
c00033e3:	3c 03                	cmp    al,0x3
c00033e5:	75 16                	jne    c00033fd <remove_chain+0x13e>
c00033e7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033ea:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033ee:	77 0d                	ja     c00033fd <remove_chain+0x13e>
c00033f0:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033f3:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033f7:	72 04                	jb     c00033fd <remove_chain+0x13e>
c00033f9:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033fd:	31 c0                	xor    eax,eax
c00033ff:	83 c4 1c             	add    esp,0x1c
c0003402:	5b                   	pop    ebx
c0003403:	5e                   	pop    esi
c0003404:	5f                   	pop    edi
c0003405:	5d                   	pop    ebp
c0003406:	c3                   	ret    

c0003407 <dir_clear>:
c0003407:	55                   	push   ebp
c0003408:	57                   	push   edi
c0003409:	56                   	push   esi
c000340a:	89 c6                	mov    esi,eax
c000340c:	53                   	push   ebx
c000340d:	83 ec 1c             	sub    esp,0x1c
c0003410:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003414:	e8 9d ed ff ff       	call   c00021b6 <sync_window>
c0003419:	85 c0                	test   eax,eax
c000341b:	0f 85 de 00 00 00    	jne    c00034ff <dir_clear+0xf8>
c0003421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003425:	89 f0                	mov    eax,esi
c0003427:	8d 6e 54             	lea    ebp,[esi+0x54]
c000342a:	e8 d6 e8 ff ff       	call   c0001d05 <clst2sect>
c000342f:	b9 00 02 00 00       	mov    ecx,0x200
c0003434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000343c:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000343f:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003442:	89 e8                	mov    eax,ebp
c0003444:	31 d2                	xor    edx,edx
c0003446:	e8 b5 e6 ff ff       	call   c0001b00 <mem_set>
c000344b:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000344f:	c1 e3 09             	shl    ebx,0x9
c0003452:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003458:	76 1f                	jbe    c0003479 <dir_clear+0x72>
c000345a:	bb 00 80 00 00       	mov    ebx,0x8000
c000345f:	eb 18                	jmp    c0003479 <dir_clear+0x72>
c0003461:	83 ec 0c             	sub    esp,0xc
c0003464:	53                   	push   ebx
c0003465:	e8 35 4e 00 00       	call   c000829f <ff_memalloc>
c000346a:	83 c4 10             	add    esp,0x10
c000346d:	89 c7                	mov    edi,eax
c000346f:	85 c0                	test   eax,eax
c0003471:	0f 85 8f 00 00 00    	jne    c0003506 <dir_clear+0xff>
c0003477:	d1 eb                	shr    ebx,1
c0003479:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000347f:	77 e0                	ja     c0003461 <dir_clear+0x5a>
c0003481:	31 db                	xor    ebx,ebx
c0003483:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003487:	39 d8                	cmp    eax,ebx
c0003489:	76 66                	jbe    c00034f1 <dir_clear+0xea>
c000348b:	83 ec 0c             	sub    esp,0xc
c000348e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003492:	6a 01                	push   0x1
c0003494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000349c:	55                   	push   ebp
c000349d:	50                   	push   eax
c000349e:	e8 94 e5 ff ff       	call   c0001a37 <disk_write>
c00034a3:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00034a8:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00034ad:	83 c4 20             	add    esp,0x20
c00034b0:	85 c0                	test   eax,eax
c00034b2:	75 3d                	jne    c00034f1 <dir_clear+0xea>
c00034b4:	43                   	inc    ebx
c00034b5:	eb cc                	jmp    c0003483 <dir_clear+0x7c>
c00034b7:	83 ec 0c             	sub    esp,0xc
c00034ba:	31 d2                	xor    edx,edx
c00034bc:	55                   	push   ebp
c00034bd:	89 d8                	mov    eax,ebx
c00034bf:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034c3:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034c7:	52                   	push   edx
c00034c8:	50                   	push   eax
c00034c9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034cd:	57                   	push   edi
c00034ce:	50                   	push   eax
c00034cf:	e8 63 e5 ff ff       	call   c0001a37 <disk_write>
c00034d4:	83 c4 20             	add    esp,0x20
c00034d7:	85 c0                	test   eax,eax
c00034d9:	75 0a                	jne    c00034e5 <dir_clear+0xde>
c00034db:	01 eb                	add    ebx,ebp
c00034dd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e1:	39 d8                	cmp    eax,ebx
c00034e3:	77 d2                	ja     c00034b7 <dir_clear+0xb0>
c00034e5:	83 ec 0c             	sub    esp,0xc
c00034e8:	57                   	push   edi
c00034e9:	e8 c7 4d 00 00       	call   c00082b5 <ff_memfree>
c00034ee:	83 c4 10             	add    esp,0x10
c00034f1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034f5:	39 d8                	cmp    eax,ebx
c00034f7:	0f 95 c0             	setne  al
c00034fa:	0f b6 c0             	movzx  eax,al
c00034fd:	eb 19                	jmp    c0003518 <dir_clear+0x111>
c00034ff:	b8 01 00 00 00       	mov    eax,0x1
c0003504:	eb 12                	jmp    c0003518 <dir_clear+0x111>
c0003506:	89 d9                	mov    ecx,ebx
c0003508:	31 d2                	xor    edx,edx
c000350a:	c1 eb 09             	shr    ebx,0x9
c000350d:	e8 ee e5 ff ff       	call   c0001b00 <mem_set>
c0003512:	89 dd                	mov    ebp,ebx
c0003514:	31 db                	xor    ebx,ebx
c0003516:	eb c5                	jmp    c00034dd <dir_clear+0xd6>
c0003518:	83 c4 1c             	add    esp,0x1c
c000351b:	5b                   	pop    ebx
c000351c:	5e                   	pop    esi
c000351d:	5f                   	pop    edi
c000351e:	5d                   	pop    ebp
c000351f:	c3                   	ret    

c0003520 <dir_next>:
c0003520:	55                   	push   ebp
c0003521:	57                   	push   edi
c0003522:	56                   	push   esi
c0003523:	53                   	push   ebx
c0003524:	89 c3                	mov    ebx,eax
c0003526:	83 ec 1c             	sub    esp,0x1c
c0003529:	8b 28                	mov    ebp,DWORD PTR [eax]
c000352b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003532:	8d 78 20             	lea    edi,[eax+0x20]
c0003535:	31 c0                	xor    eax,eax
c0003537:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000353b:	0f 94 c0             	sete   al
c000353e:	48                   	dec    eax
c000353f:	25 00 00 20 f0       	and    eax,0xf0200000
c0003544:	05 00 00 00 10       	add    eax,0x10000000
c0003549:	39 f8                	cmp    eax,edi
c000354b:	77 0e                	ja     c000355b <dir_next+0x3b>
c000354d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003554:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000355b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000355e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003561:	b8 04 00 00 00       	mov    eax,0x4
c0003566:	89 ce                	mov    esi,ecx
c0003568:	09 d6                	or     esi,edx
c000356a:	0f 84 da 00 00 00    	je     c000364a <dir_next+0x12a>
c0003570:	89 f8                	mov    eax,edi
c0003572:	25 ff 01 00 00       	and    eax,0x1ff
c0003577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000357b:	0f 85 b9 00 00 00    	jne    c000363a <dir_next+0x11a>
c0003581:	83 c2 01             	add    edx,0x1
c0003584:	83 d1 00             	adc    ecx,0x0
c0003587:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000358a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000358d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003590:	85 d2                	test   edx,edx
c0003592:	75 29                	jne    c00035bd <dir_next+0x9d>
c0003594:	89 fa                	mov    edx,edi
c0003596:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000359a:	c1 ea 05             	shr    edx,0x5
c000359d:	39 c2                	cmp    edx,eax
c000359f:	0f 82 95 00 00 00    	jb     c000363a <dir_next+0x11a>
c00035a5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00035ac:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00035b3:	b8 04 00 00 00       	mov    eax,0x4
c00035b8:	e9 8d 00 00 00       	jmp    c000364a <dir_next+0x12a>
c00035bd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035c1:	89 f9                	mov    ecx,edi
c00035c3:	48                   	dec    eax
c00035c4:	c1 e9 09             	shr    ecx,0x9
c00035c7:	85 c8                	test   eax,ecx
c00035c9:	75 6f                	jne    c000363a <dir_next+0x11a>
c00035cb:	89 d8                	mov    eax,ebx
c00035cd:	e8 00 f8 ff ff       	call   c0002dd2 <get_fat>
c00035d2:	89 c6                	mov    esi,eax
c00035d4:	83 f8 01             	cmp    eax,0x1
c00035d7:	77 07                	ja     c00035e0 <dir_next+0xc0>
c00035d9:	b8 02 00 00 00       	mov    eax,0x2
c00035de:	eb 6a                	jmp    c000364a <dir_next+0x12a>
c00035e0:	83 f8 ff             	cmp    eax,0xffffffff
c00035e3:	75 07                	jne    c00035ec <dir_next+0xcc>
c00035e5:	b8 01 00 00 00       	mov    eax,0x1
c00035ea:	eb 5e                	jmp    c000364a <dir_next+0x12a>
c00035ec:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035ef:	77 37                	ja     c0003628 <dir_next+0x108>
c00035f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035f6:	74 ad                	je     c00035a5 <dir_next+0x85>
c00035f8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035fb:	89 d8                	mov    eax,ebx
c00035fd:	e8 be fa ff ff       	call   c00030c0 <create_chain>
c0003602:	89 c6                	mov    esi,eax
c0003604:	b8 07 00 00 00       	mov    eax,0x7
c0003609:	85 f6                	test   esi,esi
c000360b:	74 3d                	je     c000364a <dir_next+0x12a>
c000360d:	83 fe 01             	cmp    esi,0x1
c0003610:	74 c7                	je     c00035d9 <dir_next+0xb9>
c0003612:	83 fe ff             	cmp    esi,0xffffffff
c0003615:	74 ce                	je     c00035e5 <dir_next+0xc5>
c0003617:	89 f2                	mov    edx,esi
c0003619:	89 e8                	mov    eax,ebp
c000361b:	e8 e7 fd ff ff       	call   c0003407 <dir_clear>
c0003620:	85 c0                	test   eax,eax
c0003622:	75 c1                	jne    c00035e5 <dir_next+0xc5>
c0003624:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003628:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000362b:	89 f2                	mov    edx,esi
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 d1 e6 ff ff       	call   c0001d05 <clst2sect>
c0003634:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003637:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000363a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000363e:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003641:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003645:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003648:	31 c0                	xor    eax,eax
c000364a:	83 c4 1c             	add    esp,0x1c
c000364d:	5b                   	pop    ebx
c000364e:	5e                   	pop    esi
c000364f:	5f                   	pop    edi
c0003650:	5d                   	pop    ebp
c0003651:	c3                   	ret    

c0003652 <load_xdir>:
c0003652:	55                   	push   ebp
c0003653:	57                   	push   edi
c0003654:	56                   	push   esi
c0003655:	89 c6                	mov    esi,eax
c0003657:	53                   	push   ebx
c0003658:	83 ec 1c             	sub    esp,0x1c
c000365b:	8b 00                	mov    eax,DWORD PTR [eax]
c000365d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003660:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003663:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003666:	e8 df eb ff ff       	call   c000224a <move_window>
c000366b:	89 c3                	mov    ebx,eax
c000366d:	85 c0                	test   eax,eax
c000366f:	0f 85 0c 01 00 00    	jne    c0003781 <load_xdir+0x12f>
c0003675:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003678:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000367b:	0f 85 fb 00 00 00    	jne    c000377c <load_xdir+0x12a>
c0003681:	89 f8                	mov    eax,edi
c0003683:	b9 20 00 00 00       	mov    ecx,0x20
c0003688:	e8 5e e4 ff ff       	call   c0001aeb <mem_cpy>
c000368d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003691:	40                   	inc    eax
c0003692:	c1 e0 05             	shl    eax,0x5
c0003695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003699:	83 e8 60             	sub    eax,0x60
c000369c:	3d 00 02 00 00       	cmp    eax,0x200
c00036a1:	0f 87 d5 00 00 00    	ja     c000377c <load_xdir+0x12a>
c00036a7:	31 d2                	xor    edx,edx
c00036a9:	89 f0                	mov    eax,esi
c00036ab:	e8 70 fe ff ff       	call   c0003520 <dir_next>
c00036b0:	89 c3                	mov    ebx,eax
c00036b2:	83 f8 04             	cmp    eax,0x4
c00036b5:	0f 84 c1 00 00 00    	je     c000377c <load_xdir+0x12a>
c00036bb:	85 c0                	test   eax,eax
c00036bd:	0f 85 be 00 00 00    	jne    c0003781 <load_xdir+0x12f>
c00036c3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036c6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036cb:	e8 7a eb ff ff       	call   c000224a <move_window>
c00036d0:	89 c3                	mov    ebx,eax
c00036d2:	85 c0                	test   eax,eax
c00036d4:	0f 85 a7 00 00 00    	jne    c0003781 <load_xdir+0x12f>
c00036da:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036dd:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036e0:	0f 85 96 00 00 00    	jne    c000377c <load_xdir+0x12a>
c00036e6:	8d 47 20             	lea    eax,[edi+0x20]
c00036e9:	b9 20 00 00 00       	mov    ecx,0x20
c00036ee:	e8 f8 e3 ff ff       	call   c0001aeb <mem_cpy>
c00036f3:	31 d2                	xor    edx,edx
c00036f5:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036f9:	b9 0f 00 00 00       	mov    ecx,0xf
c00036fe:	83 c0 2c             	add    eax,0x2c
c0003701:	f7 f1                	div    ecx
c0003703:	c1 e0 05             	shl    eax,0x5
c0003706:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000370a:	77 70                	ja     c000377c <load_xdir+0x12a>
c000370c:	bd 40 00 00 00       	mov    ebp,0x40
c0003711:	31 d2                	xor    edx,edx
c0003713:	89 f0                	mov    eax,esi
c0003715:	e8 06 fe ff ff       	call   c0003520 <dir_next>
c000371a:	89 c3                	mov    ebx,eax
c000371c:	83 f8 04             	cmp    eax,0x4
c000371f:	74 5b                	je     c000377c <load_xdir+0x12a>
c0003721:	85 c0                	test   eax,eax
c0003723:	75 5c                	jne    c0003781 <load_xdir+0x12f>
c0003725:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003728:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000372b:	8b 06                	mov    eax,DWORD PTR [esi]
c000372d:	e8 18 eb ff ff       	call   c000224a <move_window>
c0003732:	89 c3                	mov    ebx,eax
c0003734:	85 c0                	test   eax,eax
c0003736:	75 49                	jne    c0003781 <load_xdir+0x12f>
c0003738:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000373b:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000373e:	75 3c                	jne    c000377c <load_xdir+0x12a>
c0003740:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003746:	77 0d                	ja     c0003755 <load_xdir+0x103>
c0003748:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000374b:	b9 20 00 00 00       	mov    ecx,0x20
c0003750:	e8 96 e3 ff ff       	call   c0001aeb <mem_cpy>
c0003755:	83 c5 20             	add    ebp,0x20
c0003758:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000375c:	77 b3                	ja     c0003711 <load_xdir+0xbf>
c000375e:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003764:	77 1b                	ja     c0003781 <load_xdir+0x12f>
c0003766:	89 f8                	mov    eax,edi
c0003768:	e8 cd e7 ff ff       	call   c0001f3a <xdir_sum>
c000376d:	89 c1                	mov    ecx,eax
c000376f:	8d 47 02             	lea    eax,[edi+0x2]
c0003772:	e8 f5 e2 ff ff       	call   c0001a6c <ld_word>
c0003777:	66 39 c1             	cmp    cx,ax
c000377a:	74 05                	je     c0003781 <load_xdir+0x12f>
c000377c:	bb 02 00 00 00       	mov    ebx,0x2
c0003781:	83 c4 1c             	add    esp,0x1c
c0003784:	89 d8                	mov    eax,ebx
c0003786:	5b                   	pop    ebx
c0003787:	5e                   	pop    esi
c0003788:	5f                   	pop    edi
c0003789:	5d                   	pop    ebp
c000378a:	c3                   	ret    

c000378b <load_obj_xdir>:
c000378b:	53                   	push   ebx
c000378c:	89 c3                	mov    ebx,eax
c000378e:	83 ec 08             	sub    esp,0x8
c0003791:	8b 02                	mov    eax,DWORD PTR [edx]
c0003793:	89 03                	mov    DWORD PTR [ebx],eax
c0003795:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003798:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000379b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000379e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00037a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00037a4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00037ab:	30 c0                	xor    al,al
c00037ad:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037b4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037b7:	89 d8                	mov    eax,ebx
c00037b9:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037bc:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037bf:	e8 04 f8 ff ff       	call   c0002fc8 <dir_sdi>
c00037c4:	85 c0                	test   eax,eax
c00037c6:	75 0b                	jne    c00037d3 <load_obj_xdir+0x48>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	83 c4 08             	add    esp,0x8
c00037cd:	5b                   	pop    ebx
c00037ce:	e9 7f fe ff ff       	jmp    c0003652 <load_xdir>
c00037d3:	83 c4 08             	add    esp,0x8
c00037d6:	5b                   	pop    ebx
c00037d7:	c3                   	ret    

c00037d8 <dir_read>:
c00037d8:	55                   	push   ebp
c00037d9:	bd 04 00 00 00       	mov    ebp,0x4
c00037de:	57                   	push   edi
c00037df:	56                   	push   esi
c00037e0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e5:	53                   	push   ebx
c00037e6:	89 c3                	mov    ebx,eax
c00037e8:	83 ec 1c             	sub    esp,0x1c
c00037eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037ef:	8b 38                	mov    edi,DWORD PTR [eax]
c00037f1:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037f6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037f9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037fc:	89 c8                	mov    eax,ecx
c00037fe:	09 d0                	or     eax,edx
c0003800:	0f 84 25 01 00 00    	je     c000392b <dir_read+0x153>
c0003806:	89 f8                	mov    eax,edi
c0003808:	e8 3d ea ff ff       	call   c000224a <move_window>
c000380d:	89 c5                	mov    ebp,eax
c000380f:	85 c0                	test   eax,eax
c0003811:	0f 85 23 01 00 00    	jne    c000393a <dir_read+0x162>
c0003817:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000381a:	8a 0a                	mov    cl,BYTE PTR [edx]
c000381c:	84 c9                	test   cl,cl
c000381e:	0f 84 11 01 00 00    	je     c0003935 <dir_read+0x15d>
c0003824:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003827:	75 48                	jne    c0003871 <dir_read+0x99>
c0003829:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000382e:	74 10                	je     c0003840 <dir_read+0x68>
c0003830:	80 f9 83             	cmp    cl,0x83
c0003833:	0f 85 dd 00 00 00    	jne    c0003916 <dir_read+0x13e>
c0003839:	31 ed                	xor    ebp,ebp
c000383b:	e9 08 01 00 00       	jmp    c0003948 <dir_read+0x170>
c0003840:	80 f9 85             	cmp    cl,0x85
c0003843:	0f 85 cd 00 00 00    	jne    c0003916 <dir_read+0x13e>
c0003849:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000384c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000384f:	89 d8                	mov    eax,ebx
c0003851:	e8 fc fd ff ff       	call   c0003652 <load_xdir>
c0003856:	89 c5                	mov    ebp,eax
c0003858:	85 c0                	test   eax,eax
c000385a:	0f 85 da 00 00 00    	jne    c000393a <dir_read+0x162>
c0003860:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003863:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003866:	83 e0 3f             	and    eax,0x3f
c0003869:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000386c:	e9 d7 00 00 00       	jmp    c0003948 <dir_read+0x170>
c0003871:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003874:	83 e0 3f             	and    eax,0x3f
c0003877:	80 f9 2e             	cmp    cl,0x2e
c000387a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000387e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003881:	0f 84 8a 00 00 00    	je     c0003911 <dir_read+0x139>
c0003887:	80 f9 e5             	cmp    cl,0xe5
c000388a:	0f 84 81 00 00 00    	je     c0003911 <dir_read+0x139>
c0003890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003894:	83 e0 1f             	and    eax,0x1f
c0003897:	83 f8 08             	cmp    eax,0x8
c000389a:	0f 94 c0             	sete   al
c000389d:	0f b6 c0             	movzx  eax,al
c00038a0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038a4:	75 6b                	jne    c0003911 <dir_read+0x139>
c00038a6:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00038ab:	75 44                	jne    c00038f1 <dir_read+0x119>
c00038ad:	f6 c1 40             	test   cl,0x40
c00038b0:	74 12                	je     c00038c4 <dir_read+0xec>
c00038b2:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038b5:	83 e1 bf             	and    ecx,0xffffffbf
c00038b8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038bc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038bf:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038c2:	eb 06                	jmp    c00038ca <dir_read+0xf2>
c00038c4:	89 f0                	mov    eax,esi
c00038c6:	38 c8                	cmp    al,cl
c00038c8:	75 47                	jne    c0003911 <dir_read+0x139>
c00038ca:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ce:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d3:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038d6:	75 3e                	jne    c0003916 <dir_read+0x13e>
c00038d8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038dc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038df:	e8 8a e4 ff ff       	call   c0001d6e <pick_lfn>
c00038e4:	85 c0                	test   eax,eax
c00038e6:	74 2e                	je     c0003916 <dir_read+0x13e>
c00038e8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ec:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038ef:	eb 25                	jmp    c0003916 <dir_read+0x13e>
c00038f1:	89 f0                	mov    eax,esi
c00038f3:	84 c0                	test   al,al
c00038f5:	75 11                	jne    c0003908 <dir_read+0x130>
c00038f7:	89 d0                	mov    eax,edx
c00038f9:	e8 2a e6 ff ff       	call   c0001f28 <sum_sfn>
c00038fe:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003902:	0f 84 31 ff ff ff    	je     c0003839 <dir_read+0x61>
c0003908:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000390f:	eb 37                	jmp    c0003948 <dir_read+0x170>
c0003911:	be ff ff ff ff       	mov    esi,0xffffffff
c0003916:	31 d2                	xor    edx,edx
c0003918:	89 d8                	mov    eax,ebx
c000391a:	e8 01 fc ff ff       	call   c0003520 <dir_next>
c000391f:	89 c5                	mov    ebp,eax
c0003921:	85 c0                	test   eax,eax
c0003923:	0f 84 cd fe ff ff    	je     c00037f6 <dir_read+0x1e>
c0003929:	eb 0f                	jmp    c000393a <dir_read+0x162>
c000392b:	85 ed                	test   ebp,ebp
c000392d:	0f 84 06 ff ff ff    	je     c0003839 <dir_read+0x61>
c0003933:	eb 05                	jmp    c000393a <dir_read+0x162>
c0003935:	bd 04 00 00 00       	mov    ebp,0x4
c000393a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003941:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003948:	83 c4 1c             	add    esp,0x1c
c000394b:	89 e8                	mov    eax,ebp
c000394d:	5b                   	pop    ebx
c000394e:	5e                   	pop    esi
c000394f:	5f                   	pop    edi
c0003950:	5d                   	pop    ebp
c0003951:	c3                   	ret    

c0003952 <dir_alloc>:
c0003952:	55                   	push   ebp
c0003953:	89 d5                	mov    ebp,edx
c0003955:	57                   	push   edi
c0003956:	31 d2                	xor    edx,edx
c0003958:	56                   	push   esi
c0003959:	53                   	push   ebx
c000395a:	89 c3                	mov    ebx,eax
c000395c:	83 ec 0c             	sub    esp,0xc
c000395f:	8b 38                	mov    edi,DWORD PTR [eax]
c0003961:	e8 62 f6 ff ff       	call   c0002fc8 <dir_sdi>
c0003966:	85 c0                	test   eax,eax
c0003968:	75 4e                	jne    c00039b8 <dir_alloc+0x66>
c000396a:	31 f6                	xor    esi,esi
c000396c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000396f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003972:	89 f8                	mov    eax,edi
c0003974:	e8 d1 e8 ff ff       	call   c000224a <move_window>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 3b                	jne    c00039b8 <dir_alloc+0x66>
c000397d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003980:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003983:	8a 12                	mov    dl,BYTE PTR [edx]
c0003985:	75 07                	jne    c000398e <dir_alloc+0x3c>
c0003987:	f7 d2                	not    edx
c0003989:	c0 ea 07             	shr    dl,0x7
c000398c:	eb 0d                	jmp    c000399b <dir_alloc+0x49>
c000398e:	84 d2                	test   dl,dl
c0003990:	0f 94 c1             	sete   cl
c0003993:	80 fa e5             	cmp    dl,0xe5
c0003996:	0f 94 c2             	sete   dl
c0003999:	09 ca                	or     edx,ecx
c000399b:	84 d2                	test   dl,dl
c000399d:	74 07                	je     c00039a6 <dir_alloc+0x54>
c000399f:	46                   	inc    esi
c00039a0:	39 ee                	cmp    esi,ebp
c00039a2:	75 04                	jne    c00039a8 <dir_alloc+0x56>
c00039a4:	eb 1c                	jmp    c00039c2 <dir_alloc+0x70>
c00039a6:	31 f6                	xor    esi,esi
c00039a8:	ba 01 00 00 00       	mov    edx,0x1
c00039ad:	89 d8                	mov    eax,ebx
c00039af:	e8 6c fb ff ff       	call   c0003520 <dir_next>
c00039b4:	85 c0                	test   eax,eax
c00039b6:	74 b4                	je     c000396c <dir_alloc+0x1a>
c00039b8:	83 f8 04             	cmp    eax,0x4
c00039bb:	75 05                	jne    c00039c2 <dir_alloc+0x70>
c00039bd:	b8 07 00 00 00       	mov    eax,0x7
c00039c2:	83 c4 0c             	add    esp,0xc
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <store_xdir>:
c00039ca:	55                   	push   ebp
c00039cb:	57                   	push   edi
c00039cc:	89 c7                	mov    edi,eax
c00039ce:	56                   	push   esi
c00039cf:	53                   	push   ebx
c00039d0:	83 ec 0c             	sub    esp,0xc
c00039d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00039d5:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039d8:	89 e8                	mov    eax,ebp
c00039da:	e8 5b e5 ff ff       	call   c0001f3a <xdir_sum>
c00039df:	0f b7 d0             	movzx  edx,ax
c00039e2:	8d 45 02             	lea    eax,[ebp+0x2]
c00039e5:	e8 f4 e0 ff ff       	call   c0001ade <st_word>
c00039ea:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039ee:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039f1:	89 f8                	mov    eax,edi
c00039f3:	e8 d0 f5 ff ff       	call   c0002fc8 <dir_sdi>
c00039f8:	89 c6                	mov    esi,eax
c00039fa:	85 f6                	test   esi,esi
c00039fc:	75 3d                	jne    c0003a3b <store_xdir+0x71>
c00039fe:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003a01:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003a04:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a06:	e8 3f e8 ff ff       	call   c000224a <move_window>
c0003a0b:	89 c6                	mov    esi,eax
c0003a0d:	85 c0                	test   eax,eax
c0003a0f:	75 2a                	jne    c0003a3b <store_xdir+0x71>
c0003a11:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a14:	b9 20 00 00 00       	mov    ecx,0x20
c0003a19:	89 ea                	mov    edx,ebp
c0003a1b:	e8 cb e0 ff ff       	call   c0001aeb <mem_cpy>
c0003a20:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a22:	85 db                	test   ebx,ebx
c0003a24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a28:	74 11                	je     c0003a3b <store_xdir+0x71>
c0003a2a:	31 d2                	xor    edx,edx
c0003a2c:	89 f8                	mov    eax,edi
c0003a2e:	83 c5 20             	add    ebp,0x20
c0003a31:	e8 ea fa ff ff       	call   c0003520 <dir_next>
c0003a36:	4b                   	dec    ebx
c0003a37:	89 c6                	mov    esi,eax
c0003a39:	eb bf                	jmp    c00039fa <store_xdir+0x30>
c0003a3b:	89 f0                	mov    eax,esi
c0003a3d:	83 fe 02             	cmp    esi,0x2
c0003a40:	76 05                	jbe    c0003a47 <store_xdir+0x7d>
c0003a42:	b8 02 00 00 00       	mov    eax,0x2
c0003a47:	83 c4 0c             	add    esp,0xc
c0003a4a:	5b                   	pop    ebx
c0003a4b:	5e                   	pop    esi
c0003a4c:	5f                   	pop    edi
c0003a4d:	5d                   	pop    ebp
c0003a4e:	c3                   	ret    

c0003a4f <dir_remove>:
c0003a4f:	57                   	push   edi
c0003a50:	56                   	push   esi
c0003a51:	53                   	push   ebx
c0003a52:	89 c3                	mov    ebx,eax
c0003a54:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a57:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a59:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a5c:	83 fa ff             	cmp    edx,0xffffffff
c0003a5f:	74 09                	je     c0003a6a <dir_remove+0x1b>
c0003a61:	e8 62 f5 ff ff       	call   c0002fc8 <dir_sdi>
c0003a66:	85 c0                	test   eax,eax
c0003a68:	75 41                	jne    c0003aab <dir_remove+0x5c>
c0003a6a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a70:	89 f0                	mov    eax,esi
c0003a72:	e8 d3 e7 ff ff       	call   c000224a <move_window>
c0003a77:	85 c0                	test   eax,eax
c0003a79:	75 26                	jne    c0003aa1 <dir_remove+0x52>
c0003a7b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a81:	75 05                	jne    c0003a88 <dir_remove+0x39>
c0003a83:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a86:	eb 03                	jmp    c0003a8b <dir_remove+0x3c>
c0003a88:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a8b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8f:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a92:	73 17                	jae    c0003aab <dir_remove+0x5c>
c0003a94:	31 d2                	xor    edx,edx
c0003a96:	89 d8                	mov    eax,ebx
c0003a98:	e8 83 fa ff ff       	call   c0003520 <dir_next>
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	74 c9                	je     c0003a6a <dir_remove+0x1b>
c0003aa1:	83 f8 04             	cmp    eax,0x4
c0003aa4:	75 05                	jne    c0003aab <dir_remove+0x5c>
c0003aa6:	b8 02 00 00 00       	mov    eax,0x2
c0003aab:	5b                   	pop    ebx
c0003aac:	5e                   	pop    esi
c0003aad:	5f                   	pop    edi
c0003aae:	c3                   	ret    

c0003aaf <create_name>:
c0003aaf:	55                   	push   ebp
c0003ab0:	89 d5                	mov    ebp,edx
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	31 f6                	xor    esi,esi
c0003ab8:	53                   	push   ebx
c0003ab9:	83 ec 3c             	sub    esp,0x3c
c0003abc:	8b 02                	mov    eax,DWORD PTR [edx]
c0003abe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ac2:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ac4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ac7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003acb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003acf:	e8 72 e0 ff ff       	call   c0001b46 <tchar2uni>
c0003ad4:	89 c3                	mov    ebx,eax
c0003ad6:	83 f8 ff             	cmp    eax,0xffffffff
c0003ad9:	75 0a                	jne    c0003ae5 <create_name+0x36>
c0003adb:	b8 06 00 00 00       	mov    eax,0x6
c0003ae0:	e9 9e 02 00 00       	jmp    c0003d83 <create_name+0x2d4>
c0003ae5:	3d ff ff 00 00       	cmp    eax,0xffff
c0003aea:	76 0c                	jbe    c0003af8 <create_name+0x49>
c0003aec:	c1 e8 10             	shr    eax,0x10
c0003aef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003af3:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003af7:	46                   	inc    esi
c0003af8:	66 83 fb 1f          	cmp    bx,0x1f
c0003afc:	76 4f                	jbe    c0003b4d <create_name+0x9e>
c0003afe:	66 83 fb 5c          	cmp    bx,0x5c
c0003b02:	74 35                	je     c0003b39 <create_name+0x8a>
c0003b04:	66 83 fb 2f          	cmp    bx,0x2f
c0003b08:	74 2f                	je     c0003b39 <create_name+0x8a>
c0003b0a:	66 83 fb 7f          	cmp    bx,0x7f
c0003b0e:	77 11                	ja     c0003b21 <create_name+0x72>
c0003b10:	0f b7 d3             	movzx  edx,bx
c0003b13:	b8 52 02 02 c0       	mov    eax,0xc0020252
c0003b18:	e8 11 e0 ff ff       	call   c0001b2e <chk_chr>
c0003b1d:	85 c0                	test   eax,eax
c0003b1f:	75 ba                	jne    c0003adb <create_name+0x2c>
c0003b21:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b27:	77 b2                	ja     c0003adb <create_name+0x2c>
c0003b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b31:	46                   	inc    esi
c0003b32:	eb 97                	jmp    c0003acb <create_name+0x1c>
c0003b34:	40                   	inc    eax
c0003b35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b3d:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b3f:	80 fa 2f             	cmp    dl,0x2f
c0003b42:	74 f0                	je     c0003b34 <create_name+0x85>
c0003b44:	80 fa 5c             	cmp    dl,0x5c
c0003b47:	74 eb                	je     c0003b34 <create_name+0x85>
c0003b49:	31 db                	xor    ebx,ebx
c0003b4b:	eb 02                	jmp    c0003b4f <create_name+0xa0>
c0003b4d:	b3 04                	mov    bl,0x4
c0003b4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b53:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b56:	85 f6                	test   esi,esi
c0003b58:	74 18                	je     c0003b72 <create_name+0xc3>
c0003b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5e:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b63:	66 83 f8 20          	cmp    ax,0x20
c0003b67:	74 06                	je     c0003b6f <create_name+0xc0>
c0003b69:	66 83 f8 2e          	cmp    ax,0x2e
c0003b6d:	75 03                	jne    c0003b72 <create_name+0xc3>
c0003b6f:	4e                   	dec    esi
c0003b70:	eb e4                	jmp    c0003b56 <create_name+0xa7>
c0003b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b76:	31 ed                	xor    ebp,ebp
c0003b78:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b7e:	85 f6                	test   esi,esi
c0003b80:	0f 84 55 ff ff ff    	je     c0003adb <create_name+0x2c>
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b8d:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b91:	66 83 f8 20          	cmp    ax,0x20
c0003b95:	75 04                	jne    c0003b9b <create_name+0xec>
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	eb eb                	jmp    c0003b86 <create_name+0xd7>
c0003b9b:	85 ed                	test   ebp,ebp
c0003b9d:	75 06                	jne    c0003ba5 <create_name+0xf6>
c0003b9f:	66 83 f8 2e          	cmp    ax,0x2e
c0003ba3:	75 08                	jne    c0003bad <create_name+0xfe>
c0003ba5:	83 cb 03             	or     ebx,0x3
c0003ba8:	eb 03                	jmp    c0003bad <create_name+0xfe>
c0003baa:	4e                   	dec    esi
c0003bab:	74 0c                	je     c0003bb9 <create_name+0x10a>
c0003bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb1:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003bb7:	75 f1                	jne    c0003baa <create_name+0xfb>
c0003bb9:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbe:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bc1:	ba 20 00 00 00       	mov    edx,0x20
c0003bc6:	e8 35 df ff ff       	call   c0001b00 <mem_set>
c0003bcb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bd3:	31 c9                	xor    ecx,ecx
c0003bd5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bdd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003be5:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003be9:	66 85 ed             	test   bp,bp
c0003bec:	0f 84 30 01 00 00    	je     c0003d22 <create_name+0x273>
c0003bf2:	66 83 fd 20          	cmp    bp,0x20
c0003bf6:	74 10                	je     c0003c08 <create_name+0x159>
c0003bf8:	66 83 fd 2e          	cmp    bp,0x2e
c0003bfc:	75 13                	jne    c0003c11 <create_name+0x162>
c0003bfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c02:	0f 84 6b 01 00 00    	je     c0003d73 <create_name+0x2c4>
c0003c08:	83 cb 03             	or     ebx,0x3
c0003c0b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003c0f:	eb c9                	jmp    c0003bda <create_name+0x12b>
c0003c11:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003c15:	73 0b                	jae    c0003c22 <create_name+0x173>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	75 47                	jne    c0003c64 <create_name+0x1b5>
c0003c1d:	e9 51 01 00 00       	jmp    c0003d73 <create_name+0x2c4>
c0003c22:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c27:	75 10                	jne    c0003c39 <create_name+0x18a>
c0003c29:	83 cb 03             	or     ebx,0x3
c0003c2c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c34:	e9 e9 00 00 00       	jmp    c0003d22 <create_name+0x273>
c0003c39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c3d:	74 0d                	je     c0003c4c <create_name+0x19d>
c0003c3f:	83 cb 03             	or     ebx,0x3
c0003c42:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c46:	0f 87 d6 00 00 00    	ja     c0003d22 <create_name+0x273>
c0003c4c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c55:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c5d:	b9 08 00 00 00       	mov    ecx,0x8
c0003c62:	eb a7                	jmp    c0003c0b <create_name+0x15c>
c0003c64:	66 83 fd 7f          	cmp    bp,0x7f
c0003c68:	76 68                	jbe    c0003cd2 <create_name+0x223>
c0003c6a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c6e:	88 da                	mov    dl,bl
c0003c70:	83 ca 02             	or     edx,0x2
c0003c73:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c77:	50                   	push   eax
c0003c78:	50                   	push   eax
c0003c79:	68 b5 01 00 00       	push   0x1b5
c0003c7e:	55                   	push   ebp
c0003c7f:	e8 48 46 00 00       	call   c00082cc <ff_uni2oem>
c0003c84:	83 c4 10             	add    esp,0x10
c0003c87:	89 c5                	mov    ebp,eax
c0003c89:	a8 80                	test   al,0x80
c0003c8b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c93:	74 0c                	je     c0003ca1 <create_name+0x1f2>
c0003c95:	83 e5 7f             	and    ebp,0x7f
c0003c98:	0f b6 ad a0 01 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfe60]
c0003c9f:	eb 2a                	jmp    c0003ccb <create_name+0x21c>
c0003ca1:	66 3d ff 00          	cmp    ax,0xff
c0003ca5:	76 24                	jbe    c0003ccb <create_name+0x21c>
c0003ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003cab:	48                   	dec    eax
c0003cac:	39 c8                	cmp    eax,ecx
c0003cae:	77 0c                	ja     c0003cbc <create_name+0x20d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003cb7:	e9 4f ff ff ff       	jmp    c0003c0b <create_name+0x15c>
c0003cbc:	89 e8                	mov    eax,ebp
c0003cbe:	88 d3                	mov    bl,dl
c0003cc0:	66 c1 e8 08          	shr    ax,0x8
c0003cc4:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc8:	41                   	inc    ecx
c0003cc9:	eb 4b                	jmp    c0003d16 <create_name+0x267>
c0003ccb:	88 d3                	mov    bl,dl
c0003ccd:	66 85 ed             	test   bp,bp
c0003cd0:	74 19                	je     c0003ceb <create_name+0x23c>
c0003cd2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cd6:	0f b7 d5             	movzx  edx,bp
c0003cd9:	b8 5b 02 02 c0       	mov    eax,0xc002025b
c0003cde:	e8 4b de ff ff       	call   c0001b2e <chk_chr>
c0003ce3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ce7:	85 c0                	test   eax,eax
c0003ce9:	74 0a                	je     c0003cf5 <create_name+0x246>
c0003ceb:	83 cb 03             	or     ebx,0x3
c0003cee:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cf3:	eb 21                	jmp    c0003d16 <create_name+0x267>
c0003cf5:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cf8:	66 83 f8 19          	cmp    ax,0x19
c0003cfc:	77 07                	ja     c0003d05 <create_name+0x256>
c0003cfe:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003d03:	eb 11                	jmp    c0003d16 <create_name+0x267>
c0003d05:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003d08:	66 83 f8 19          	cmp    ax,0x19
c0003d0c:	77 08                	ja     c0003d16 <create_name+0x267>
c0003d0e:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003d13:	83 ed 20             	sub    ebp,0x20
c0003d16:	89 e8                	mov    eax,ebp
c0003d18:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d1c:	41                   	inc    ecx
c0003d1d:	e9 e9 fe ff ff       	jmp    c0003c0b <create_name+0x15c>
c0003d22:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d26:	75 04                	jne    c0003d2c <create_name+0x27d>
c0003d28:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d2c:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d31:	75 05                	jne    c0003d38 <create_name+0x289>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d3c:	83 e0 0c             	and    eax,0xc
c0003d3f:	3c 0c                	cmp    al,0xc
c0003d41:	74 0b                	je     c0003d4e <create_name+0x29f>
c0003d43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d47:	83 e0 03             	and    eax,0x3
c0003d4a:	3c 03                	cmp    al,0x3
c0003d4c:	75 05                	jne    c0003d53 <create_name+0x2a4>
c0003d4e:	83 cb 02             	or     ebx,0x2
c0003d51:	eb 19                	jmp    c0003d6c <create_name+0x2bd>
c0003d53:	f6 c3 02             	test   bl,0x2
c0003d56:	75 14                	jne    c0003d6c <create_name+0x2bd>
c0003d58:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d5d:	74 03                	je     c0003d62 <create_name+0x2b3>
c0003d5f:	83 cb 10             	or     ebx,0x10
c0003d62:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d67:	74 03                	je     c0003d6c <create_name+0x2bd>
c0003d69:	83 cb 08             	or     ebx,0x8
c0003d6c:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d6f:	31 c0                	xor    eax,eax
c0003d71:	eb 10                	jmp    c0003d83 <create_name+0x2d4>
c0003d73:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d78:	0f 85 ce fe ff ff    	jne    c0003c4c <create_name+0x19d>
c0003d7e:	e9 a6 fe ff ff       	jmp    c0003c29 <create_name+0x17a>
c0003d83:	83 c4 3c             	add    esp,0x3c
c0003d86:	5b                   	pop    ebx
c0003d87:	5e                   	pop    esi
c0003d88:	5f                   	pop    edi
c0003d89:	5d                   	pop    ebp
c0003d8a:	c3                   	ret    

c0003d8b <xname_sum>:
c0003d8b:	56                   	push   esi
c0003d8c:	53                   	push   ebx
c0003d8d:	89 c6                	mov    esi,eax
c0003d8f:	51                   	push   ecx
c0003d90:	31 db                	xor    ebx,ebx
c0003d92:	83 c6 02             	add    esi,0x2
c0003d95:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d99:	66 85 c0             	test   ax,ax
c0003d9c:	74 1f                	je     c0003dbd <xname_sum+0x32>
c0003d9e:	83 ec 0c             	sub    esp,0xc
c0003da1:	66 d1 cb             	ror    bx,1
c0003da4:	50                   	push   eax
c0003da5:	e8 1e 46 00 00       	call   c00083c8 <ff_wtoupper>
c0003daa:	83 c4 10             	add    esp,0x10
c0003dad:	0f b6 d0             	movzx  edx,al
c0003db0:	66 c1 e8 08          	shr    ax,0x8
c0003db4:	01 d3                	add    ebx,edx
c0003db6:	66 d1 cb             	ror    bx,1
c0003db9:	01 c3                	add    ebx,eax
c0003dbb:	eb d5                	jmp    c0003d92 <xname_sum+0x7>
c0003dbd:	89 d8                	mov    eax,ebx
c0003dbf:	5a                   	pop    edx
c0003dc0:	5b                   	pop    ebx
c0003dc1:	5e                   	pop    esi
c0003dc2:	c3                   	ret    

c0003dc3 <create_xdir>:
c0003dc3:	55                   	push   ebp
c0003dc4:	b9 40 00 00 00       	mov    ecx,0x40
c0003dc9:	57                   	push   edi
c0003dca:	bd 01 00 00 00       	mov    ebp,0x1
c0003dcf:	56                   	push   esi
c0003dd0:	31 ff                	xor    edi,edi
c0003dd2:	53                   	push   ebx
c0003dd3:	be 40 00 00 00       	mov    esi,0x40
c0003dd8:	89 c3                	mov    ebx,eax
c0003dda:	83 ec 1c             	sub    esp,0x1c
c0003ddd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003de1:	31 d2                	xor    edx,edx
c0003de3:	e8 18 dd ff ff       	call   c0001b00 <mem_set>
c0003de8:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003deb:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003def:	31 c9                	xor    ecx,ecx
c0003df1:	8d 46 01             	lea    eax,[esi+0x1]
c0003df4:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003df8:	83 c6 02             	add    esi,0x2
c0003dfb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dff:	66 85 ed             	test   bp,bp
c0003e02:	74 12                	je     c0003e16 <create_xdir+0x53>
c0003e04:	0f b6 c1             	movzx  eax,cl
c0003e07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e0b:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003e0f:	66 83 fd 01          	cmp    bp,0x1
c0003e13:	80 d9 ff             	sbb    cl,0xff
c0003e16:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e19:	0f b7 d5             	movzx  edx,bp
c0003e1c:	83 c6 02             	add    esi,0x2
c0003e1f:	e8 ba dc ff ff       	call   c0001ade <st_word>
c0003e24:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e2a:	75 d3                	jne    c0003dff <create_xdir+0x3c>
c0003e2c:	8d 47 01             	lea    eax,[edi+0x1]
c0003e2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e37:	0f b6 c1             	movzx  eax,cl
c0003e3a:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e3f:	74 07                	je     c0003e48 <create_xdir+0x85>
c0003e41:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e46:	eb a9                	jmp    c0003df1 <create_xdir+0x2e>
c0003e48:	8d 47 02             	lea    eax,[edi+0x2]
c0003e4b:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e4e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e51:	89 d0                	mov    eax,edx
c0003e53:	e8 33 ff ff ff       	call   c0003d8b <xname_sum>
c0003e58:	83 c4 1c             	add    esp,0x1c
c0003e5b:	0f b7 d0             	movzx  edx,ax
c0003e5e:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e61:	5b                   	pop    ebx
c0003e62:	5e                   	pop    esi
c0003e63:	5f                   	pop    edi
c0003e64:	5d                   	pop    ebp
c0003e65:	e9 74 dc ff ff       	jmp    c0001ade <st_word>

c0003e6a <cmp_lfn>:
c0003e6a:	55                   	push   ebp
c0003e6b:	57                   	push   edi
c0003e6c:	89 d7                	mov    edi,edx
c0003e6e:	56                   	push   esi
c0003e6f:	53                   	push   ebx
c0003e70:	83 ec 1c             	sub    esp,0x1c
c0003e73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e77:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e7a:	e8 ed db ff ff       	call   c0001a6c <ld_word>
c0003e7f:	66 85 c0             	test   ax,ax
c0003e82:	74 07                	je     c0003e8b <cmp_lfn+0x21>
c0003e84:	31 c0                	xor    eax,eax
c0003e86:	e9 9a 00 00 00       	jmp    c0003f25 <cmp_lfn+0xbb>
c0003e8b:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e8d:	bd 01 00 00 00       	mov    ebp,0x1
c0003e92:	83 e3 3f             	and    ebx,0x3f
c0003e95:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e9d:	4b                   	dec    ebx
c0003e9e:	6b db 0d             	imul   ebx,ebx,0xd
c0003ea1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003ea5:	0f b6 80 20 02 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfde0]
c0003eac:	01 f8                	add    eax,edi
c0003eae:	e8 b9 db ff ff       	call   c0001a6c <ld_word>
c0003eb3:	66 85 ed             	test   bp,bp
c0003eb6:	89 c6                	mov    esi,eax
c0003eb8:	74 3c                	je     c0003ef6 <cmp_lfn+0x8c>
c0003eba:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ec0:	77 c2                	ja     c0003e84 <cmp_lfn+0x1a>
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	0f b7 c0             	movzx  eax,ax
c0003ec8:	50                   	push   eax
c0003ec9:	e8 fa 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003ece:	89 c5                	mov    ebp,eax
c0003ed0:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ed3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003edb:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee2:	e8 e1 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003ee7:	83 c4 10             	add    esp,0x10
c0003eea:	39 c5                	cmp    ebp,eax
c0003eec:	75 96                	jne    c0003e84 <cmp_lfn+0x1a>
c0003eee:	89 f5                	mov    ebp,esi
c0003ef0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ef4:	eb 04                	jmp    c0003efa <cmp_lfn+0x90>
c0003ef6:	66 46                	inc    si
c0003ef8:	75 8a                	jne    c0003e84 <cmp_lfn+0x1a>
c0003efa:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003efe:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003f03:	75 9c                	jne    c0003ea1 <cmp_lfn+0x37>
c0003f05:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003f08:	74 16                	je     c0003f20 <cmp_lfn+0xb6>
c0003f0a:	66 85 ed             	test   bp,bp
c0003f0d:	74 11                	je     c0003f20 <cmp_lfn+0xb6>
c0003f0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003f13:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f18:	0f 94 c0             	sete   al
c0003f1b:	0f b6 c0             	movzx  eax,al
c0003f1e:	eb 05                	jmp    c0003f25 <cmp_lfn+0xbb>
c0003f20:	b8 01 00 00 00       	mov    eax,0x1
c0003f25:	83 c4 1c             	add    esp,0x1c
c0003f28:	5b                   	pop    ebx
c0003f29:	5e                   	pop    esi
c0003f2a:	5f                   	pop    edi
c0003f2b:	5d                   	pop    ebp
c0003f2c:	c3                   	ret    

c0003f2d <dir_find>:
c0003f2d:	55                   	push   ebp
c0003f2e:	31 d2                	xor    edx,edx
c0003f30:	57                   	push   edi
c0003f31:	56                   	push   esi
c0003f32:	53                   	push   ebx
c0003f33:	89 c3                	mov    ebx,eax
c0003f35:	83 ec 1c             	sub    esp,0x1c
c0003f38:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f3a:	e8 89 f0 ff ff       	call   c0002fc8 <dir_sdi>
c0003f3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f42:	85 c0                	test   eax,eax
c0003f44:	0f 85 9e 01 00 00    	jne    c00040e8 <dir_find+0x1bb>
c0003f4a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f4d:	0f 85 8d 00 00 00    	jne    c0003fe0 <dir_find+0xb3>
c0003f53:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f56:	e8 30 fe ff ff       	call   c0003d8b <xname_sum>
c0003f5b:	89 c7                	mov    edi,eax
c0003f5d:	31 d2                	xor    edx,edx
c0003f5f:	89 d8                	mov    eax,ebx
c0003f61:	e8 72 f8 ff ff       	call   c00037d8 <dir_read>
c0003f66:	85 c0                	test   eax,eax
c0003f68:	0f 85 5e 01 00 00    	jne    c00040cc <dir_find+0x19f>
c0003f6e:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f71:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f74:	e8 f3 da ff ff       	call   c0001a6c <ld_word>
c0003f79:	66 39 f8             	cmp    ax,di
c0003f7c:	75 df                	jne    c0003f5d <dir_find+0x30>
c0003f7e:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f81:	31 ed                	xor    ebp,ebp
c0003f83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f87:	ba 40 00 00 00       	mov    edx,0x40
c0003f8c:	89 e9                	mov    ecx,ebp
c0003f8e:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f92:	0f 84 42 01 00 00    	je     c00040da <dir_find+0x1ad>
c0003f98:	f6 c2 1f             	test   dl,0x1f
c0003f9b:	75 03                	jne    c0003fa0 <dir_find+0x73>
c0003f9d:	83 c2 02             	add    edx,0x2
c0003fa0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003fa4:	89 d0                	mov    eax,edx
c0003fa6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003fa9:	e8 be da ff ff       	call   c0001a6c <ld_word>
c0003fae:	83 ec 0c             	sub    esp,0xc
c0003fb1:	0f b7 c0             	movzx  eax,ax
c0003fb4:	50                   	push   eax
c0003fb5:	e8 0e 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003fba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fbe:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fc1:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc8:	e8 fb 43 00 00       	call   c00083c8 <ff_wtoupper>
c0003fcd:	83 c4 10             	add    esp,0x10
c0003fd0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fd4:	75 87                	jne    c0003f5d <dir_find+0x30>
c0003fd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fda:	45                   	inc    ebp
c0003fdb:	83 c2 02             	add    edx,0x2
c0003fde:	eb ac                	jmp    c0003f8c <dir_find+0x5f>
c0003fe0:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fe7:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fec:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ff4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ff7:	89 f0                	mov    eax,esi
c0003ff9:	e8 4c e2 ff ff       	call   c000224a <move_window>
c0003ffe:	85 c0                	test   eax,eax
c0004000:	0f 85 c6 00 00 00    	jne    c00040cc <dir_find+0x19f>
c0004006:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004009:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000400c:	84 c9                	test   cl,cl
c000400e:	0f 84 bd 00 00 00    	je     c00040d1 <dir_find+0x1a4>
c0004014:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004017:	88 d0                	mov    al,dl
c0004019:	83 e0 3f             	and    eax,0x3f
c000401c:	80 f9 e5             	cmp    cl,0xe5
c000401f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004022:	0f 84 87 00 00 00    	je     c00040af <dir_find+0x182>
c0004028:	80 e2 08             	and    dl,0x8
c000402b:	74 06                	je     c0004033 <dir_find+0x106>
c000402d:	3c 0f                	cmp    al,0xf
c000402f:	75 7e                	jne    c00040af <dir_find+0x182>
c0004031:	eb 04                	jmp    c0004037 <dir_find+0x10a>
c0004033:	3c 0f                	cmp    al,0xf
c0004035:	75 4c                	jne    c0004083 <dir_find+0x156>
c0004037:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000403b:	75 7e                	jne    c00040bb <dir_find+0x18e>
c000403d:	f6 c1 40             	test   cl,0x40
c0004040:	74 12                	je     c0004054 <dir_find+0x127>
c0004042:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004045:	83 e1 bf             	and    ecx,0xffffffbf
c0004048:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000404c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000404f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004052:	eb 06                	jmp    c000405a <dir_find+0x12d>
c0004054:	89 f8                	mov    eax,edi
c0004056:	38 c8                	cmp    al,cl
c0004058:	75 5c                	jne    c00040b6 <dir_find+0x189>
c000405a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000405e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004063:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004066:	75 53                	jne    c00040bb <dir_find+0x18e>
c0004068:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000406c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000406f:	89 ea                	mov    edx,ebp
c0004071:	e8 f4 fd ff ff       	call   c0003e6a <cmp_lfn>
c0004076:	85 c0                	test   eax,eax
c0004078:	74 41                	je     c00040bb <dir_find+0x18e>
c000407a:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000407e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004081:	eb 38                	jmp    c00040bb <dir_find+0x18e>
c0004083:	89 f8                	mov    eax,edi
c0004085:	84 c0                	test   al,al
c0004087:	75 0d                	jne    c0004096 <dir_find+0x169>
c0004089:	89 e8                	mov    eax,ebp
c000408b:	e8 98 de ff ff       	call   c0001f28 <sum_sfn>
c0004090:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004094:	74 52                	je     c00040e8 <dir_find+0x1bb>
c0004096:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000409a:	75 13                	jne    c00040af <dir_find+0x182>
c000409c:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000409f:	b9 0b 00 00 00       	mov    ecx,0xb
c00040a4:	89 e8                	mov    eax,ebp
c00040a6:	e8 60 da ff ff       	call   c0001b0b <mem_cmp>
c00040ab:	85 c0                	test   eax,eax
c00040ad:	74 39                	je     c00040e8 <dir_find+0x1bb>
c00040af:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040bb:	31 d2                	xor    edx,edx
c00040bd:	89 d8                	mov    eax,ebx
c00040bf:	e8 5c f4 ff ff       	call   c0003520 <dir_next>
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 84 25 ff ff ff    	je     c0003ff1 <dir_find+0xc4>
c00040cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040cf:	eb 17                	jmp    c00040e8 <dir_find+0x1bb>
c00040d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040d8:	eb 0e                	jmp    c00040e8 <dir_find+0x1bb>
c00040da:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040dd:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040e2:	0f 85 75 fe ff ff    	jne    c0003f5d <dir_find+0x30>
c00040e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040eb:	83 c4 1c             	add    esp,0x1c
c00040ee:	5b                   	pop    ebx
c00040ef:	5e                   	pop    esi
c00040f0:	5f                   	pop    edi
c00040f1:	5d                   	pop    ebp
c00040f2:	c3                   	ret    

c00040f3 <dir_register>:
c00040f3:	55                   	push   ebp
c00040f4:	57                   	push   edi
c00040f5:	56                   	push   esi
c00040f6:	be 06 00 00 00       	mov    esi,0x6
c00040fb:	53                   	push   ebx
c00040fc:	83 ec 6c             	sub    esp,0x6c
c00040ff:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004103:	0f 85 62 02 00 00    	jne    c000436b <dir_register+0x278>
c0004109:	8b 28                	mov    ebp,DWORD PTR [eax]
c000410b:	31 ff                	xor    edi,edi
c000410d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004110:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004115:	74 03                	je     c000411a <dir_register+0x27>
c0004117:	47                   	inc    edi
c0004118:	eb f6                	jmp    c0004110 <dir_register+0x1d>
c000411a:	89 c3                	mov    ebx,eax
c000411c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004120:	0f 85 e1 00 00 00    	jne    c0004207 <dir_register+0x114>
c0004126:	83 c7 0e             	add    edi,0xe
c0004129:	b9 0f 00 00 00       	mov    ecx,0xf
c000412e:	89 f8                	mov    eax,edi
c0004130:	31 d2                	xor    edx,edx
c0004132:	f7 f1                	div    ecx
c0004134:	8d 50 02             	lea    edx,[eax+0x2]
c0004137:	89 c7                	mov    edi,eax
c0004139:	89 d8                	mov    eax,ebx
c000413b:	e8 12 f8 ff ff       	call   c0003952 <dir_alloc>
c0004140:	89 c6                	mov    esi,eax
c0004142:	85 c0                	test   eax,eax
c0004144:	0f 85 21 02 00 00    	jne    c000436b <dir_register+0x278>
c000414a:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004150:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004153:	c1 e7 05             	shl    edi,0x5
c0004156:	29 f8                	sub    eax,edi
c0004158:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000415b:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000415e:	a8 04                	test   al,0x4
c0004160:	0f 84 91 00 00 00    	je     c00041f7 <dir_register+0x104>
c0004166:	83 e0 fb             	and    eax,0xfffffffb
c0004169:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 25 ec ff ff       	call   c0002d98 <fill_first_frag>
c0004173:	85 c0                	test   eax,eax
c0004175:	0f 85 ee 01 00 00    	jne    c0004369 <dir_register+0x276>
c000417b:	83 c9 ff             	or     ecx,0xffffffff
c000417e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004181:	89 d8                	mov    eax,ebx
c0004183:	e8 db eb ff ff       	call   c0002d63 <fill_last_frag>
c0004188:	85 c0                	test   eax,eax
c000418a:	0f 85 d9 01 00 00    	jne    c0004369 <dir_register+0x276>
c0004190:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004194:	74 61                	je     c00041f7 <dir_register+0x104>
c0004196:	89 da                	mov    edx,ebx
c0004198:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419c:	e8 ea f5 ff ff       	call   c000378b <load_obj_xdir>
c00041a1:	85 c0                	test   eax,eax
c00041a3:	0f 85 c0 01 00 00    	jne    c0004369 <dir_register+0x276>
c00041a9:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00041ad:	31 c9                	xor    ecx,ecx
c00041af:	c1 e2 09             	shl    edx,0x9
c00041b2:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00041b5:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041bb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041c1:	83 c0 38             	add    eax,0x38
c00041c4:	e8 1c d9 ff ff       	call   c0001ae5 <st_qword>
c00041c9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041cf:	83 c0 28             	add    eax,0x28
c00041d2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041d5:	e8 0b d9 ff ff       	call   c0001ae5 <st_qword>
c00041da:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041dd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041e0:	83 c8 01             	or     eax,0x1
c00041e3:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ea:	e8 db f7 ff ff       	call   c00039ca <store_xdir>
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 72 01 00 00    	jne    c0004369 <dir_register+0x276>
c00041f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041fd:	e8 c1 fb ff ff       	call   c0003dc3 <create_xdir>
c0004202:	e9 64 01 00 00       	jmp    c000436b <dir_register+0x278>
c0004207:	8d 40 3c             	lea    eax,[eax+0x3c]
c000420a:	b9 0c 00 00 00       	mov    ecx,0xc
c000420f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004213:	89 c2                	mov    edx,eax
c0004215:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004219:	e8 cd d8 ff ff       	call   c0001aeb <mem_cpy>
c000421e:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004223:	74 58                	je     c000427d <dir_register+0x18a>
c0004225:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004229:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004231:	83 ec 0c             	sub    esp,0xc
c0004234:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000423b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000423f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004243:	e8 24 dc ff ff       	call   c0001e6c <gen_numname>
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 de fc ff ff       	call   c0003f2d <dir_find>
c000424f:	83 c4 10             	add    esp,0x10
c0004252:	89 c6                	mov    esi,eax
c0004254:	85 c0                	test   eax,eax
c0004256:	75 15                	jne    c000426d <dir_register+0x17a>
c0004258:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000425c:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004261:	75 ce                	jne    c0004231 <dir_register+0x13e>
c0004263:	be 07 00 00 00       	mov    esi,0x7
c0004268:	e9 fe 00 00 00       	jmp    c000436b <dir_register+0x278>
c000426d:	83 f8 04             	cmp    eax,0x4
c0004270:	0f 85 f5 00 00 00    	jne    c000436b <dir_register+0x278>
c0004276:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000427a:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000427d:	b9 01 00 00 00       	mov    ecx,0x1
c0004282:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004287:	74 0f                	je     c0004298 <dir_register+0x1a5>
c0004289:	b9 0d 00 00 00       	mov    ecx,0xd
c000428e:	8d 47 0c             	lea    eax,[edi+0xc]
c0004291:	31 d2                	xor    edx,edx
c0004293:	f7 f1                	div    ecx
c0004295:	8d 48 01             	lea    ecx,[eax+0x1]
c0004298:	89 ca                	mov    edx,ecx
c000429a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000429e:	89 d8                	mov    eax,ebx
c00042a0:	e8 ad f6 ff ff       	call   c0003952 <dir_alloc>
c00042a5:	89 c6                	mov    esi,eax
c00042a7:	85 c0                	test   eax,eax
c00042a9:	0f 85 bc 00 00 00    	jne    c000436b <dir_register+0x278>
c00042af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042b3:	49                   	dec    ecx
c00042b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042b8:	74 6a                	je     c0004324 <dir_register+0x231>
c00042ba:	89 c8                	mov    eax,ecx
c00042bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042bf:	c1 e0 05             	shl    eax,0x5
c00042c2:	29 c2                	sub    edx,eax
c00042c4:	89 d8                	mov    eax,ebx
c00042c6:	e8 fd ec ff ff       	call   c0002fc8 <dir_sdi>
c00042cb:	89 c6                	mov    esi,eax
c00042cd:	85 c0                	test   eax,eax
c00042cf:	0f 85 96 00 00 00    	jne    c000436b <dir_register+0x278>
c00042d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042d9:	e8 4a dc ff ff       	call   c0001f28 <sum_sfn>
c00042de:	0f b6 f8             	movzx  edi,al
c00042e1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042e4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042e7:	89 e8                	mov    eax,ebp
c00042e9:	e8 5c df ff ff       	call   c000224a <move_window>
c00042ee:	89 c6                	mov    esi,eax
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 77                	jne    c000436b <dir_register+0x278>
c00042f4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042f9:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042fc:	83 ec 0c             	sub    esp,0xc
c00042ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004302:	57                   	push   edi
c0004303:	e8 e0 da ff ff       	call   c0001de8 <put_lfn>
c0004308:	31 d2                	xor    edx,edx
c000430a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430e:	89 d8                	mov    eax,ebx
c0004310:	e8 0b f2 ff ff       	call   c0003520 <dir_next>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	89 c6                	mov    esi,eax
c000431a:	85 c0                	test   eax,eax
c000431c:	75 4d                	jne    c000436b <dir_register+0x278>
c000431e:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004322:	75 bd                	jne    c00042e1 <dir_register+0x1ee>
c0004324:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004327:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000432a:	89 e8                	mov    eax,ebp
c000432c:	e8 19 df ff ff       	call   c000224a <move_window>
c0004331:	89 c6                	mov    esi,eax
c0004333:	85 c0                	test   eax,eax
c0004335:	75 34                	jne    c000436b <dir_register+0x278>
c0004337:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000433a:	b9 20 00 00 00       	mov    ecx,0x20
c000433f:	31 d2                	xor    edx,edx
c0004341:	e8 ba d7 ff ff       	call   c0001b00 <mem_set>
c0004346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004349:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000434d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004352:	e8 94 d7 ff ff       	call   c0001aeb <mem_cpy>
c0004357:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000435a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000435d:	83 e0 18             	and    eax,0x18
c0004360:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004363:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004367:	eb 02                	jmp    c000436b <dir_register+0x278>
c0004369:	89 c6                	mov    esi,eax
c000436b:	83 c4 6c             	add    esp,0x6c
c000436e:	89 f0                	mov    eax,esi
c0004370:	5b                   	pop    ebx
c0004371:	5e                   	pop    esi
c0004372:	5f                   	pop    edi
c0004373:	5d                   	pop    ebp
c0004374:	c3                   	ret    

c0004375 <sync_fs>:
c0004375:	56                   	push   esi
c0004376:	53                   	push   ebx
c0004377:	53                   	push   ebx
c0004378:	89 c3                	mov    ebx,eax
c000437a:	e8 37 de ff ff       	call   c00021b6 <sync_window>
c000437f:	85 c0                	test   eax,eax
c0004381:	0f 85 b1 00 00 00    	jne    c0004438 <sync_fs+0xc3>
c0004387:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000438a:	0f 85 8e 00 00 00    	jne    c000441e <sync_fs+0xa9>
c0004390:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004394:	0f 85 84 00 00 00    	jne    c000441e <sync_fs+0xa9>
c000439a:	b9 00 02 00 00       	mov    ecx,0x200
c000439f:	8d 73 54             	lea    esi,[ebx+0x54]
c00043a2:	31 d2                	xor    edx,edx
c00043a4:	89 f0                	mov    eax,esi
c00043a6:	e8 55 d7 ff ff       	call   c0001b00 <mem_set>
c00043ab:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00043b1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00043b6:	e8 23 d7 ff ff       	call   c0001ade <st_word>
c00043bb:	ba 52 52 61 41       	mov    edx,0x41615252
c00043c0:	89 f0                	mov    eax,esi
c00043c2:	e8 1b d7 ff ff       	call   c0001ae2 <st_dword>
c00043c7:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043cd:	ba 72 72 41 61       	mov    edx,0x61417272
c00043d2:	e8 0b d7 ff ff       	call   c0001ae2 <st_dword>
c00043d7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043da:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043e0:	e8 fd d6 ff ff       	call   c0001ae2 <st_dword>
c00043e5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043e8:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043ee:	e8 ef d6 ff ff       	call   c0001ae2 <st_dword>
c00043f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043f6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043f9:	83 c0 01             	add    eax,0x1
c00043fc:	83 d2 00             	adc    edx,0x0
c00043ff:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004402:	83 ec 0c             	sub    esp,0xc
c0004405:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004408:	6a 01                	push   0x1
c000440a:	52                   	push   edx
c000440b:	50                   	push   eax
c000440c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004410:	56                   	push   esi
c0004411:	50                   	push   eax
c0004412:	e8 20 d6 ff ff       	call   c0001a37 <disk_write>
c0004417:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000441b:	83 c4 20             	add    esp,0x20
c000441e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004422:	51                   	push   ecx
c0004423:	6a 00                	push   0x0
c0004425:	6a 00                	push   0x0
c0004427:	50                   	push   eax
c0004428:	e8 20 d6 ff ff       	call   c0001a4d <disk_ioctl>
c000442d:	83 c4 10             	add    esp,0x10
c0004430:	85 c0                	test   eax,eax
c0004432:	0f 95 c0             	setne  al
c0004435:	0f b6 c0             	movzx  eax,al
c0004438:	5a                   	pop    edx
c0004439:	5b                   	pop    ebx
c000443a:	5e                   	pop    esi
c000443b:	c3                   	ret    

c000443c <create_partition>:
c000443c:	55                   	push   ebp
c000443d:	0f b6 c0             	movzx  eax,al
c0004440:	57                   	push   edi
c0004441:	56                   	push   esi
c0004442:	53                   	push   ebx
c0004443:	83 ec 60             	sub    esp,0x60
c0004446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000444a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000444e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004452:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004456:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000445a:	50                   	push   eax
c000445b:	6a 01                	push   0x1
c000445d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004461:	e8 e7 d5 ff ff       	call   c0001a4d <disk_ioctl>
c0004466:	83 c4 10             	add    esp,0x10
c0004469:	85 c0                	test   eax,eax
c000446b:	74 0a                	je     c0004477 <create_partition+0x3b>
c000446d:	b8 01 00 00 00       	mov    eax,0x1
c0004472:	e9 67 05 00 00       	jmp    c00049de <create_partition+0x5a2>
c0004477:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000447b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000447f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004483:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004487:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000448c:	0f 86 ed 03 00 00    	jbe    c000487f <create_partition+0x443>
c0004492:	83 c0 df             	add    eax,0xffffffdf
c0004495:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000449d:	83 d2 ff             	adc    edx,0xffffffff
c00044a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00044a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00044a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044b0:	83 c0 bd             	add    eax,0xffffffbd
c00044b3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044ba:	83 d2 ff             	adc    edx,0xffffffff
c00044bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044cd:	be 22 00 00 00       	mov    esi,0x22
c00044d2:	31 ff                	xor    edi,edi
c00044d4:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044dc:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044e4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ec:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044f6:	75 0e                	jne    c0004506 <create_partition+0xca>
c00044f8:	b9 00 02 00 00       	mov    ecx,0x200
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 fa d5 ff ff       	call   c0001b00 <mem_set>
c0004506:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000450a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000450e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004512:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004515:	0f 84 23 01 00 00    	je     c000463e <create_partition+0x202>
c000451b:	89 f0                	mov    eax,esi
c000451d:	89 fa                	mov    edx,edi
c000451f:	05 ff 07 00 00       	add    eax,0x7ff
c0004524:	83 d2 00             	adc    edx,0x0
c0004527:	89 c1                	mov    ecx,eax
c0004529:	89 d7                	mov    edi,edx
c000452b:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004531:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004535:	89 ce                	mov    esi,ecx
c0004537:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000453b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000453f:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004543:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004546:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000454a:	89 04 24             	mov    DWORD PTR [esp],eax
c000454d:	b8 64 00 00 00       	mov    eax,0x64
c0004552:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004555:	b8 00 00 00 00       	mov    eax,0x0
c000455a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000455e:	72 41                	jb     c00045a1 <create_partition+0x165>
c0004560:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004568:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000456c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004571:	01 c1                	add    ecx,eax
c0004573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004577:	f7 24 24             	mul    DWORD PTR [esp]
c000457a:	6a 00                	push   0x0
c000457c:	01 ca                	add    edx,ecx
c000457e:	6a 64                	push   0x64
c0004580:	52                   	push   edx
c0004581:	50                   	push   eax
c0004582:	e8 75 ac 01 00       	call   c001f1fc <__udivdi3>
c0004587:	83 c4 10             	add    esp,0x10
c000458a:	05 ff 07 00 00       	add    eax,0x7ff
c000458f:	83 d2 00             	adc    edx,0x0
c0004592:	89 c1                	mov    ecx,eax
c0004594:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004598:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000459e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00045a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00045a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00045a8:	01 f0                	add    eax,esi
c00045aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00045ae:	11 fa                	adc    edx,edi
c00045b0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00045b4:	19 d1                	sbb    ecx,edx
c00045b6:	73 2e                	jae    c00045e6 <create_partition+0x1aa>
c00045b8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045bc:	89 f8                	mov    eax,edi
c00045be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045c5:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045d1:	73 6b                	jae    c000463e <create_partition+0x202>
c00045d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045db:	29 f0                	sub    eax,esi
c00045dd:	19 fa                	sbb    edx,edi
c00045df:	89 04 24             	mov    DWORD PTR [esp],eax
c00045e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045ea:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045ed:	74 4f                	je     c000463e <create_partition+0x202>
c00045ef:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045f2:	b9 10 00 00 00       	mov    ecx,0x10
c00045f7:	ba 30 02 02 c0       	mov    edx,0xc0020230
c00045fc:	e8 ea d4 ff ff       	call   c0001aeb <mem_cpy>
c0004601:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004605:	b9 10 00 00 00       	mov    ecx,0x10
c000460a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000460e:	e8 2c db ff ff       	call   c000213f <make_rand>
c0004613:	89 f2                	mov    edx,esi
c0004615:	89 f9                	mov    ecx,edi
c0004617:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000461b:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000461f:	e8 c1 d4 ff ff       	call   c0001ae5 <st_qword>
c0004624:	03 34 24             	add    esi,DWORD PTR [esp]
c0004627:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000462b:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000462f:	89 f2                	mov    edx,esi
c0004631:	89 f9                	mov    ecx,edi
c0004633:	83 c2 ff             	add    edx,0xffffffff
c0004636:	83 d1 ff             	adc    ecx,0xffffffff
c0004639:	e8 a7 d4 ff ff       	call   c0001ae5 <st_qword>
c000463e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004642:	83 e8 80             	sub    eax,0xffffff80
c0004645:	89 c5                	mov    ebp,eax
c0004647:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000464b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004651:	75 6b                	jne    c00046be <create_partition+0x282>
c0004653:	45                   	inc    ebp
c0004654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004658:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000465d:	e8 39 da ff ff       	call   c000209b <crc32>
c0004662:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004668:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000466c:	75 e5                	jne    c0004653 <create_partition+0x217>
c000466e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004672:	31 d2                	xor    edx,edx
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	c1 ed 09             	shr    ebp,0x9
c000467a:	6a 01                	push   0x1
c000467c:	8d 45 02             	lea    eax,[ebp+0x2]
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	53                   	push   ebx
c0004682:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004686:	e8 ac d3 ff ff       	call   c0001a37 <disk_write>
c000468b:	83 c4 20             	add    esp,0x20
c000468e:	85 c0                	test   eax,eax
c0004690:	0f 85 d7 fd ff ff    	jne    c000446d <create_partition+0x31>
c0004696:	83 ec 0c             	sub    esp,0xc
c0004699:	31 d2                	xor    edx,edx
c000469b:	6a 01                	push   0x1
c000469d:	89 e8                	mov    eax,ebp
c000469f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00046a3:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00046a7:	52                   	push   edx
c00046a8:	50                   	push   eax
c00046a9:	53                   	push   ebx
c00046aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046ae:	e8 84 d3 ff ff       	call   c0001a37 <disk_write>
c00046b3:	83 c4 20             	add    esp,0x20
c00046b6:	85 c0                	test   eax,eax
c00046b8:	0f 85 af fd ff ff    	jne    c000446d <create_partition+0x31>
c00046be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046c6:	3d 00 40 00 00       	cmp    eax,0x4000
c00046cb:	74 0d                	je     c00046da <create_partition+0x29e>
c00046cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046d5:	e9 12 fe ff ff       	jmp    c00044ec <create_partition+0xb0>
c00046da:	31 d2                	xor    edx,edx
c00046dc:	b9 00 02 00 00       	mov    ecx,0x200
c00046e1:	89 d8                	mov    eax,ebx
c00046e3:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046e6:	e8 15 d4 ff ff       	call   c0001b00 <mem_set>
c00046eb:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046ee:	b9 10 00 00 00       	mov    ecx,0x10
c00046f3:	ba 20 01 02 c0       	mov    edx,0xc0020120
c00046f8:	89 d8                	mov    eax,ebx
c00046fa:	e8 ec d3 ff ff       	call   c0001aeb <mem_cpy>
c00046ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004703:	8d 43 58             	lea    eax,[ebx+0x58]
c0004706:	f7 d2                	not    edx
c0004708:	e8 d5 d3 ff ff       	call   c0001ae2 <st_dword>
c000470d:	8d 43 18             	lea    eax,[ebx+0x18]
c0004710:	31 c9                	xor    ecx,ecx
c0004712:	89 04 24             	mov    DWORD PTR [esp],eax
c0004715:	ba 01 00 00 00       	mov    edx,0x1
c000471a:	e8 c6 d3 ff ff       	call   c0001ae5 <st_qword>
c000471f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004723:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004727:	83 c2 ff             	add    edx,0xffffffff
c000472a:	89 e8                	mov    eax,ebp
c000472c:	83 d1 ff             	adc    ecx,0xffffffff
c000472f:	e8 b1 d3 ff ff       	call   c0001ae5 <st_qword>
c0004734:	31 c9                	xor    ecx,ecx
c0004736:	8d 43 28             	lea    eax,[ebx+0x28]
c0004739:	ba 22 00 00 00       	mov    edx,0x22
c000473e:	e8 a2 d3 ff ff       	call   c0001ae5 <st_qword>
c0004743:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004747:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000474b:	83 c2 de             	add    edx,0xffffffde
c000474e:	8d 43 30             	lea    eax,[ebx+0x30]
c0004751:	83 d1 ff             	adc    ecx,0xffffffff
c0004754:	31 f6                	xor    esi,esi
c0004756:	e8 8a d3 ff ff       	call   c0001ae5 <st_qword>
c000475b:	8d 43 54             	lea    eax,[ebx+0x54]
c000475e:	ba 80 00 00 00       	mov    edx,0x80
c0004763:	e8 7a d3 ff ff       	call   c0001ae2 <st_dword>
c0004768:	8d 43 50             	lea    eax,[ebx+0x50]
c000476b:	ba 80 00 00 00       	mov    edx,0x80
c0004770:	e8 6d d3 ff ff       	call   c0001ae2 <st_dword>
c0004775:	ba 02 00 00 00       	mov    edx,0x2
c000477a:	89 f8                	mov    eax,edi
c000477c:	e8 61 d3 ff ff       	call   c0001ae2 <st_dword>
c0004781:	8d 53 38             	lea    edx,[ebx+0x38]
c0004784:	b9 10 00 00 00       	mov    ecx,0x10
c0004789:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000478d:	e8 ad d9 ff ff       	call   c000213f <make_rand>
c0004792:	83 c8 ff             	or     eax,0xffffffff
c0004795:	46                   	inc    esi
c0004796:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000479b:	e8 fb d8 ff ff       	call   c000209b <crc32>
c00047a0:	83 fe 5c             	cmp    esi,0x5c
c00047a3:	75 f0                	jne    c0004795 <create_partition+0x359>
c00047a5:	f7 d0                	not    eax
c00047a7:	8d 73 10             	lea    esi,[ebx+0x10]
c00047aa:	89 c2                	mov    edx,eax
c00047ac:	89 f0                	mov    eax,esi
c00047ae:	e8 2f d3 ff ff       	call   c0001ae2 <st_dword>
c00047b3:	83 ec 0c             	sub    esp,0xc
c00047b6:	6a 01                	push   0x1
c00047b8:	6a 00                	push   0x0
c00047ba:	6a 01                	push   0x1
c00047bc:	53                   	push   ebx
c00047bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047c1:	e8 71 d2 ff ff       	call   c0001a37 <disk_write>
c00047c6:	83 c4 20             	add    esp,0x20
c00047c9:	85 c0                	test   eax,eax
c00047cb:	0f 85 9c fc ff ff    	jne    c000446d <create_partition+0x31>
c00047d1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047d5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047d9:	83 c2 ff             	add    edx,0xffffffff
c00047dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047df:	83 d1 ff             	adc    ecx,0xffffffff
c00047e2:	e8 fe d2 ff ff       	call   c0001ae5 <st_qword>
c00047e7:	ba 01 00 00 00       	mov    edx,0x1
c00047ec:	31 c9                	xor    ecx,ecx
c00047ee:	89 e8                	mov    eax,ebp
c00047f0:	e8 f0 d2 ff ff       	call   c0001ae5 <st_qword>
c00047f5:	89 f8                	mov    eax,edi
c00047f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ff:	31 ff                	xor    edi,edi
c0004801:	e8 df d2 ff ff       	call   c0001ae5 <st_qword>
c0004806:	89 f0                	mov    eax,esi
c0004808:	31 d2                	xor    edx,edx
c000480a:	e8 d3 d2 ff ff       	call   c0001ae2 <st_dword>
c000480f:	83 c8 ff             	or     eax,0xffffffff
c0004812:	47                   	inc    edi
c0004813:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004818:	e8 7e d8 ff ff       	call   c000209b <crc32>
c000481d:	83 ff 5c             	cmp    edi,0x5c
c0004820:	75 f0                	jne    c0004812 <create_partition+0x3d6>
c0004822:	f7 d0                	not    eax
c0004824:	89 c2                	mov    edx,eax
c0004826:	89 f0                	mov    eax,esi
c0004828:	e8 b5 d2 ff ff       	call   c0001ae2 <st_dword>
c000482d:	83 ec 0c             	sub    esp,0xc
c0004830:	6a 01                	push   0x1
c0004832:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004836:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000483a:	83 c0 ff             	add    eax,0xffffffff
c000483d:	83 d2 ff             	adc    edx,0xffffffff
c0004840:	52                   	push   edx
c0004841:	50                   	push   eax
c0004842:	53                   	push   ebx
c0004843:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004847:	e8 eb d1 ff ff       	call   c0001a37 <disk_write>
c000484c:	83 c4 20             	add    esp,0x20
c000484f:	85 c0                	test   eax,eax
c0004851:	0f 85 16 fc ff ff    	jne    c000446d <create_partition+0x31>
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	b9 00 02 00 00       	mov    ecx,0x200
c0004860:	e8 9b d2 ff ff       	call   c0001b00 <mem_set>
c0004865:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	ba 30 01 02 c0       	mov    edx,0xc0020130
c0004875:	e8 71 d2 ff ff       	call   c0001aeb <mem_cpy>
c000487a:	e9 21 01 00 00       	jmp    c00049a0 <create_partition+0x564>
c000487f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004883:	b9 05 00 00 00       	mov    ecx,0x5
c0004888:	89 04 24             	mov    DWORD PTR [esp],eax
c000488b:	bf 08 00 00 00       	mov    edi,0x8
c0004890:	89 f8                	mov    eax,edi
c0004892:	31 d2                	xor    edx,edx
c0004894:	0f b6 f0             	movzx  esi,al
c0004897:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489a:	f7 f6                	div    esi
c000489c:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00048a1:	76 0a                	jbe    c00048ad <create_partition+0x471>
c00048a3:	d1 e7                	shl    edi,1
c00048a5:	49                   	dec    ecx
c00048a6:	75 e8                	jne    c0004890 <create_partition+0x454>
c00048a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00048ad:	b9 00 02 00 00       	mov    ecx,0x200
c00048b2:	31 d2                	xor    edx,edx
c00048b4:	89 d8                	mov    eax,ebx
c00048b6:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048bc:	e8 3f d2 ff ff       	call   c0001b00 <mem_set>
c00048c1:	b9 64 00 00 00       	mov    ecx,0x64
c00048c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c9:	31 d2                	xor    edx,edx
c00048cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048d3:	f7 f1                	div    ecx
c00048d5:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048de:	89 f8                	mov    eax,edi
c00048e0:	0f b6 c0             	movzx  eax,al
c00048e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048e7:	e9 80 00 00 00       	jmp    c000496c <create_partition+0x530>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	29 cf                	sub    edi,ecx
c00048f1:	89 ca                	mov    edx,ecx
c00048f3:	89 f0                	mov    eax,esi
c00048f5:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048fa:	e8 e3 d1 ff ff       	call   c0001ae2 <st_dword>
c00048ff:	8d 46 04             	lea    eax,[esi+0x4]
c0004902:	89 fa                	mov    edx,edi
c0004904:	83 c6 10             	add    esi,0x10
c0004907:	e8 d6 d1 ff ff       	call   c0001ae2 <st_dword>
c000490c:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004910:	31 d2                	xor    edx,edx
c0004912:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004915:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004919:	89 c8                	mov    eax,ecx
c000491b:	01 f9                	add    ecx,edi
c000491d:	f7 f5                	div    ebp
c000491f:	89 d5                	mov    ebp,edx
c0004921:	31 d2                	xor    edx,edx
c0004923:	45                   	inc    ebp
c0004924:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004928:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000492b:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000492e:	89 c2                	mov    edx,eax
c0004930:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004933:	c1 ea 02             	shr    edx,0x2
c0004936:	83 e2 c0             	and    edx,0xffffffc0
c0004939:	09 ea                	or     edx,ebp
c000493b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004940:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004943:	31 d2                	xor    edx,edx
c0004945:	f7 f5                	div    ebp
c0004947:	89 d7                	mov    edi,edx
c0004949:	31 d2                	xor    edx,edx
c000494b:	47                   	inc    edi
c000494c:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004950:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004953:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004956:	89 c5                	mov    ebp,eax
c0004958:	c1 ed 02             	shr    ebp,0x2
c000495b:	83 e5 c0             	and    ebp,0xffffffc0
c000495e:	09 ef                	or     edi,ebp
c0004960:	89 fa                	mov    edx,edi
c0004962:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004965:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000496a:	74 34                	je     c00049a0 <create_partition+0x564>
c000496c:	85 c9                	test   ecx,ecx
c000496e:	74 30                	je     c00049a0 <create_partition+0x564>
c0004970:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004973:	76 2b                	jbe    c00049a0 <create_partition+0x564>
c0004975:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004979:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000497d:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004980:	83 ff 64             	cmp    edi,0x64
c0004983:	76 4b                	jbe    c00049d0 <create_partition+0x594>
c0004985:	89 f8                	mov    eax,edi
c0004987:	01 c8                	add    eax,ecx
c0004989:	0f 82 5d ff ff ff    	jb     c00048ec <create_partition+0x4b0>
c000498f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004992:	0f 87 54 ff ff ff    	ja     c00048ec <create_partition+0x4b0>
c0004998:	85 ff                	test   edi,edi
c000499a:	0f 85 51 ff ff ff    	jne    c00048f1 <create_partition+0x4b5>
c00049a0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00049a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00049ab:	e8 2e d1 ff ff       	call   c0001ade <st_word>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 00                	push   0x0
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 74 d0 ff ff       	call   c0001a37 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 95 c0             	setne  al
c00049cb:	0f b6 c0             	movzx  eax,al
c00049ce:	eb 0e                	jmp    c00049de <create_partition+0x5a2>
c00049d0:	74 07                	je     c00049d9 <create_partition+0x59d>
c00049d2:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049d7:	eb ac                	jmp    c0004985 <create_partition+0x549>
c00049d9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049dc:	eb a7                	jmp    c0004985 <create_partition+0x549>
c00049de:	83 c4 5c             	add    esp,0x5c
c00049e1:	5b                   	pop    ebx
c00049e2:	5e                   	pop    esi
c00049e3:	5f                   	pop    edi
c00049e4:	5d                   	pop    ebp
c00049e5:	c3                   	ret    

c00049e6 <get_fileinfo>:
c00049e6:	55                   	push   ebp
c00049e7:	57                   	push   edi
c00049e8:	56                   	push   esi
c00049e9:	53                   	push   ebx
c00049ea:	83 ec 1c             	sub    esp,0x1c
c00049ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ef:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049f7:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049fa:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049fd:	0f 84 dc 01 00 00    	je     c0004bdf <get_fileinfo+0x1f9>
c0004a03:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004a06:	75 0f                	jne    c0004a17 <get_fileinfo+0x31>
c0004a08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004a0b:	83 c4 1c             	add    esp,0x1c
c0004a0e:	5b                   	pop    ebx
c0004a0f:	5e                   	pop    esi
c0004a10:	5f                   	pop    edi
c0004a11:	5d                   	pop    ebp
c0004a12:	e9 58 d5 ff ff       	jmp    c0001f6f <get_xfileinfo>
c0004a17:	89 d3                	mov    ebx,edx
c0004a19:	89 c6                	mov    esi,eax
c0004a1b:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a1f:	74 6a                	je     c0004a8b <get_fileinfo+0xa5>
c0004a21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a29:	31 ed                	xor    ebp,ebp
c0004a2b:	31 ff                	xor    edi,edi
c0004a2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a3c:	66 85 d2             	test   dx,dx
c0004a3f:	74 3e                	je     c0004a7f <get_fileinfo+0x99>
c0004a41:	66 85 ed             	test   bp,bp
c0004a44:	75 0c                	jne    c0004a52 <get_fileinfo+0x6c>
c0004a46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a4c:	66 3d ff 07          	cmp    ax,0x7ff
c0004a50:	76 22                	jbe    c0004a74 <get_fileinfo+0x8e>
c0004a52:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a57:	89 e8                	mov    eax,ebp
c0004a59:	29 f9                	sub    ecx,edi
c0004a5b:	c1 e0 10             	shl    eax,0x10
c0004a5e:	09 d0                	or     eax,edx
c0004a60:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a64:	e8 a3 d1 ff ff       	call   c0001c0c <put_utf>
c0004a69:	84 c0                	test   al,al
c0004a6b:	74 10                	je     c0004a7d <get_fileinfo+0x97>
c0004a6d:	0f b6 c0             	movzx  eax,al
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	01 c7                	add    edi,eax
c0004a74:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a79:	89 d5                	mov    ebp,edx
c0004a7b:	eb b0                	jmp    c0004a2d <get_fileinfo+0x47>
c0004a7d:	31 ff                	xor    edi,edi
c0004a7f:	66 85 ed             	test   bp,bp
c0004a82:	74 02                	je     c0004a86 <get_fileinfo+0xa0>
c0004a84:	31 ff                	xor    edi,edi
c0004a86:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a8b:	31 ff                	xor    edi,edi
c0004a8d:	31 c9                	xor    ecx,ecx
c0004a8f:	83 f9 0a             	cmp    ecx,0xa
c0004a92:	0f 87 ad 00 00 00    	ja     c0004b45 <get_fileinfo+0x15f>
c0004a98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004aa2:	66 83 fa 20          	cmp    dx,0x20
c0004aa6:	0f 84 92 00 00 00    	je     c0004b3e <get_fileinfo+0x158>
c0004aac:	66 83 fa 05          	cmp    dx,0x5
c0004ab0:	75 05                	jne    c0004ab7 <get_fileinfo+0xd1>
c0004ab2:	ba e5 00 00 00       	mov    edx,0xe5
c0004ab7:	83 ff 0b             	cmp    edi,0xb
c0004aba:	77 0b                	ja     c0004ac7 <get_fileinfo+0xe1>
c0004abc:	83 fd 09             	cmp    ebp,0x9
c0004abf:	75 06                	jne    c0004ac7 <get_fileinfo+0xe1>
c0004ac1:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ac6:	47                   	inc    edi
c0004ac7:	0f b7 c2             	movzx  eax,dx
c0004aca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ace:	e8 6d d0 ff ff       	call   c0001b40 <dbc_1st>
c0004ad3:	85 c0                	test   eax,eax
c0004ad5:	74 2f                	je     c0004b06 <get_fileinfo+0x120>
c0004ad7:	83 fd 08             	cmp    ebp,0x8
c0004ada:	74 2a                	je     c0004b06 <get_fileinfo+0x120>
c0004adc:	83 fd 0b             	cmp    ebp,0xb
c0004adf:	74 25                	je     c0004b06 <get_fileinfo+0x120>
c0004ae1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ae8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aec:	e8 52 d0 ff ff       	call   c0001b43 <dbc_2nd>
c0004af1:	85 c0                	test   eax,eax
c0004af3:	74 11                	je     c0004b06 <get_fileinfo+0x120>
c0004af5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004af9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004afe:	c1 e2 08             	shl    edx,0x8
c0004b01:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004b04:	09 c2                	or     edx,eax
c0004b06:	0f b7 d2             	movzx  edx,dx
c0004b09:	50                   	push   eax
c0004b0a:	50                   	push   eax
c0004b0b:	68 b5 01 00 00       	push   0x1b5
c0004b10:	52                   	push   edx
c0004b11:	e8 46 38 00 00       	call   c000835c <ff_oem2uni>
c0004b16:	83 c4 10             	add    esp,0x10
c0004b19:	66 85 c0             	test   ax,ax
c0004b1c:	75 04                	jne    c0004b22 <get_fileinfo+0x13c>
c0004b1e:	31 ff                	xor    edi,edi
c0004b20:	eb 23                	jmp    c0004b45 <get_fileinfo+0x15f>
c0004b22:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b27:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b2b:	29 f9                	sub    ecx,edi
c0004b2d:	0f b7 c0             	movzx  eax,ax
c0004b30:	e8 d7 d0 ff ff       	call   c0001c0c <put_utf>
c0004b35:	84 c0                	test   al,al
c0004b37:	74 e5                	je     c0004b1e <get_fileinfo+0x138>
c0004b39:	0f b6 c0             	movzx  eax,al
c0004b3c:	01 c7                	add    edi,eax
c0004b3e:	89 e9                	mov    ecx,ebp
c0004b40:	e9 4a ff ff ff       	jmp    c0004a8f <get_fileinfo+0xa9>
c0004b45:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b4a:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b4e:	75 54                	jne    c0004ba4 <get_fileinfo+0x1be>
c0004b50:	85 ff                	test   edi,edi
c0004b52:	75 0b                	jne    c0004b5f <get_fileinfo+0x179>
c0004b54:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b58:	ba 01 00 00 00       	mov    edx,0x1
c0004b5d:	eb 33                	jmp    c0004b92 <get_fileinfo+0x1ac>
c0004b5f:	b1 08                	mov    cl,0x8
c0004b61:	31 d2                	xor    edx,edx
c0004b63:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b69:	84 c0                	test   al,al
c0004b6b:	74 25                	je     c0004b92 <get_fileinfo+0x1ac>
c0004b6d:	66 83 f8 2e          	cmp    ax,0x2e
c0004b71:	74 16                	je     c0004b89 <get_fileinfo+0x1a3>
c0004b73:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b76:	66 83 ff 19          	cmp    di,0x19
c0004b7a:	77 0f                	ja     c0004b8b <get_fileinfo+0x1a5>
c0004b7c:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b7f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b82:	74 07                	je     c0004b8b <get_fileinfo+0x1a5>
c0004b84:	83 c0 20             	add    eax,0x20
c0004b87:	eb 02                	jmp    c0004b8b <get_fileinfo+0x1a5>
c0004b89:	b1 10                	mov    cl,0x10
c0004b8b:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b8f:	42                   	inc    edx
c0004b90:	eb d1                	jmp    c0004b63 <get_fileinfo+0x17d>
c0004b92:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b9e:	75 04                	jne    c0004ba4 <get_fileinfo+0x1be>
c0004ba0:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ba4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004baa:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004bad:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb0:	83 c0 1c             	add    eax,0x1c
c0004bb3:	e8 c1 ce ff ff       	call   c0001a79 <ld_dword>
c0004bb8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004bbf:	89 03                	mov    DWORD PTR [ebx],eax
c0004bc1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bc4:	83 c0 16             	add    eax,0x16
c0004bc7:	e8 a0 ce ff ff       	call   c0001a6c <ld_word>
c0004bcc:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	83 c0 18             	add    eax,0x18
c0004bd6:	e8 91 ce ff ff       	call   c0001a6c <ld_word>
c0004bdb:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bdf:	83 c4 1c             	add    esp,0x1c
c0004be2:	5b                   	pop    ebx
c0004be3:	5e                   	pop    esi
c0004be4:	5f                   	pop    edi
c0004be5:	5d                   	pop    ebp
c0004be6:	c3                   	ret    

c0004be7 <ld_clust.isra.0>:
c0004be7:	56                   	push   esi
c0004be8:	89 c6                	mov    esi,eax
c0004bea:	53                   	push   ebx
c0004beb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bee:	89 d3                	mov    ebx,edx
c0004bf0:	e8 77 ce ff ff       	call   c0001a6c <ld_word>
c0004bf5:	0f b7 c8             	movzx  ecx,ax
c0004bf8:	89 f0                	mov    eax,esi
c0004bfa:	3c 03                	cmp    al,0x3
c0004bfc:	75 0d                	jne    c0004c0b <ld_clust.isra.0+0x24>
c0004bfe:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c01:	e8 66 ce ff ff       	call   c0001a6c <ld_word>
c0004c06:	c1 e0 10             	shl    eax,0x10
c0004c09:	09 c1                	or     ecx,eax
c0004c0b:	89 c8                	mov    eax,ecx
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	c3                   	ret    

c0004c10 <st_clust.isra.1>:
c0004c10:	56                   	push   esi
c0004c11:	89 c6                	mov    esi,eax
c0004c13:	53                   	push   ebx
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	0f b7 d1             	movzx  edx,cx
c0004c19:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c1c:	e8 bd ce ff ff       	call   c0001ade <st_word>
c0004c21:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c24:	75 0f                	jne    c0004c35 <st_clust.isra.1+0x25>
c0004c26:	c1 e9 10             	shr    ecx,0x10
c0004c29:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c2c:	89 ca                	mov    edx,ecx
c0004c2e:	5b                   	pop    ebx
c0004c2f:	5e                   	pop    esi
c0004c30:	e9 a9 ce ff ff       	jmp    c0001ade <st_word>
c0004c35:	5b                   	pop    ebx
c0004c36:	5e                   	pop    esi
c0004c37:	c3                   	ret    

c0004c38 <init_alloc_info.isra.2>:
c0004c38:	56                   	push   esi
c0004c39:	53                   	push   ebx
c0004c3a:	89 c6                	mov    esi,eax
c0004c3c:	89 d3                	mov    ebx,edx
c0004c3e:	51                   	push   ecx
c0004c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c41:	83 c0 34             	add    eax,0x34
c0004c44:	e8 30 ce ff ff       	call   c0001a79 <ld_dword>
c0004c49:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c4e:	83 c0 38             	add    eax,0x38
c0004c51:	e8 3b ce ff ff       	call   c0001a91 <ld_qword>
c0004c56:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c59:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c5e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c61:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c68:	83 e0 02             	and    eax,0x2
c0004c6b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c6e:	5b                   	pop    ebx
c0004c6f:	5b                   	pop    ebx
c0004c70:	5e                   	pop    esi
c0004c71:	c3                   	ret    

c0004c72 <follow_path>:
c0004c72:	56                   	push   esi
c0004c73:	53                   	push   ebx
c0004c74:	89 c3                	mov    ebx,eax
c0004c76:	83 ec 14             	sub    esp,0x14
c0004c79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c7d:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c83:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c85:	80 fa 5c             	cmp    dl,0x5c
c0004c88:	75 07                	jne    c0004c91 <follow_path+0x1f>
c0004c8a:	40                   	inc    eax
c0004c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c8f:	eb ee                	jmp    c0004c7f <follow_path+0xd>
c0004c91:	80 fa 2f             	cmp    dl,0x2f
c0004c94:	74 f4                	je     c0004c8a <follow_path+0x18>
c0004c96:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c9d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ca4:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ca7:	77 52                	ja     c0004cfb <follow_path+0x89>
c0004ca9:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004cad:	31 d2                	xor    edx,edx
c0004caf:	89 d8                	mov    eax,ebx
c0004cb1:	e8 12 e3 ff ff       	call   c0002fc8 <dir_sdi>
c0004cb6:	eb 7c                	jmp    c0004d34 <follow_path+0xc2>
c0004cb8:	89 d8                	mov    eax,ebx
c0004cba:	e8 6e f2 ff ff       	call   c0003f2d <dir_find>
c0004cbf:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 46                	jne    c0004d0c <follow_path+0x9a>
c0004cc6:	80 e2 04             	and    dl,0x4
c0004cc9:	75 69                	jne    c0004d34 <follow_path+0xc2>
c0004ccb:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ccf:	74 5e                	je     c0004d2f <follow_path+0xbd>
c0004cd1:	8a 06                	mov    al,BYTE PTR [esi]
c0004cd3:	3c 04                	cmp    al,0x4
c0004cd5:	75 41                	jne    c0004d18 <follow_path+0xa6>
c0004cd7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cda:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cde:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ce1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ce4:	30 c0                	xor    al,al
c0004ce6:	09 d0                	or     eax,edx
c0004ce8:	89 da                	mov    edx,ebx
c0004cea:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ced:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cf0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cf3:	8d 46 10             	lea    eax,[esi+0x10]
c0004cf6:	e8 3d ff ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0004cfb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cff:	89 d8                	mov    eax,ebx
c0004d01:	e8 a9 ed ff ff       	call   c0003aaf <create_name>
c0004d06:	85 c0                	test   eax,eax
c0004d08:	74 ae                	je     c0004cb8 <follow_path+0x46>
c0004d0a:	eb 28                	jmp    c0004d34 <follow_path+0xc2>
c0004d0c:	83 f8 04             	cmp    eax,0x4
c0004d0f:	75 23                	jne    c0004d34 <follow_path+0xc2>
c0004d11:	80 e2 04             	and    dl,0x4
c0004d14:	74 19                	je     c0004d2f <follow_path+0xbd>
c0004d16:	eb 1c                	jmp    c0004d34 <follow_path+0xc2>
c0004d18:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d1b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d21:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d25:	e8 bd fe ff ff       	call   c0004be7 <ld_clust.isra.0>
c0004d2a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d2d:	eb cc                	jmp    c0004cfb <follow_path+0x89>
c0004d2f:	b8 05 00 00 00       	mov    eax,0x5
c0004d34:	83 c4 14             	add    esp,0x14
c0004d37:	5b                   	pop    ebx
c0004d38:	5e                   	pop    esi
c0004d39:	c3                   	ret    

c0004d3a <f_mount>:
c0004d3a:	53                   	push   ebx
c0004d3b:	83 ec 18             	sub    esp,0x18
c0004d3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d42:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d4e:	e8 fb d2 ff ff       	call   c000204e <get_ldnumber>
c0004d53:	89 c2                	mov    edx,eax
c0004d55:	b8 0b 00 00 00       	mov    eax,0xb
c0004d5a:	85 d2                	test   edx,edx
c0004d5c:	78 39                	js     c0004d97 <f_mount+0x5d>
c0004d5e:	8b 04 95 60 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbca0]
c0004d65:	85 c0                	test   eax,eax
c0004d67:	74 03                	je     c0004d6c <f_mount+0x32>
c0004d69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d70:	85 c0                	test   eax,eax
c0004d72:	74 03                	je     c0004d77 <f_mount+0x3d>
c0004d74:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7b:	89 04 95 60 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbca0],eax
c0004d82:	31 c0                	xor    eax,eax
c0004d84:	84 db                	test   bl,bl
c0004d86:	74 0f                	je     c0004d97 <f_mount+0x5d>
c0004d88:	31 c9                	xor    ecx,ecx
c0004d8a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d92:	e8 65 d7 ff ff       	call   c00024fc <mount_volume>
c0004d97:	83 c4 18             	add    esp,0x18
c0004d9a:	5b                   	pop    ebx
c0004d9b:	c3                   	ret    

c0004d9c <f_open>:
c0004d9c:	55                   	push   ebp
c0004d9d:	bd 09 00 00 00       	mov    ebp,0x9
c0004da2:	57                   	push   edi
c0004da3:	56                   	push   esi
c0004da4:	53                   	push   ebx
c0004da5:	83 ec 7c             	sub    esp,0x7c
c0004da8:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004daf:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004db6:	85 db                	test   ebx,ebx
c0004db8:	0f 84 10 04 00 00    	je     c00051ce <f_open+0x432>
c0004dbe:	89 fe                	mov    esi,edi
c0004dc0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004dc4:	83 e6 3f             	and    esi,0x3f
c0004dc7:	89 f0                	mov    eax,esi
c0004dc9:	0f b6 c8             	movzx  ecx,al
c0004dcc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dd3:	e8 24 d7 ff ff       	call   c00024fc <mount_volume>
c0004dd8:	89 c5                	mov    ebp,eax
c0004dda:	85 c0                	test   eax,eax
c0004ddc:	0f 85 e6 03 00 00    	jne    c00051c8 <f_open+0x42c>
c0004de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de6:	bd 11 00 00 00       	mov    ebp,0x11
c0004deb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004def:	83 ec 0c             	sub    esp,0xc
c0004df2:	68 60 04 00 00       	push   0x460
c0004df7:	e8 a3 34 00 00       	call   c000829f <ff_memalloc>
c0004dfc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004e00:	83 c4 10             	add    esp,0x10
c0004e03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004e08:	0f 84 c0 03 00 00    	je     c00051ce <f_open+0x432>
c0004e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004e16:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e1c:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e1f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e22:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e29:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e2d:	e8 40 fe ff ff       	call   c0004c72 <follow_path>
c0004e32:	89 c5                	mov    ebp,eax
c0004e34:	85 c0                	test   eax,eax
c0004e36:	75 0c                	jne    c0004e44 <f_open+0xa8>
c0004e38:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e3d:	79 05                	jns    c0004e44 <f_open+0xa8>
c0004e3f:	bd 06 00 00 00       	mov    ebp,0x6
c0004e44:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e4a:	0f 84 84 01 00 00    	je     c0004fd4 <f_open+0x238>
c0004e50:	85 ed                	test   ebp,ebp
c0004e52:	74 20                	je     c0004e74 <f_open+0xd8>
c0004e54:	83 fd 04             	cmp    ebp,0x4
c0004e57:	0f 85 58 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e61:	83 ce 08             	or     esi,0x8
c0004e64:	e8 8a f2 ff ff       	call   c00040f3 <dir_register>
c0004e69:	89 c5                	mov    ebp,eax
c0004e6b:	85 c0                	test   eax,eax
c0004e6d:	74 2f                	je     c0004e9e <f_open+0x102>
c0004e6f:	e9 41 03 00 00       	jmp    c00051b5 <f_open+0x419>
c0004e74:	bd 07 00 00 00       	mov    ebp,0x7
c0004e79:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e7e:	0f 85 31 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e84:	bd 08 00 00 00       	mov    ebp,0x8
c0004e89:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e8f:	0f 85 20 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e95:	83 e7 08             	and    edi,0x8
c0004e98:	0f 84 65 01 00 00    	je     c0005003 <f_open+0x267>
c0004e9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ea2:	8a 02                	mov    al,BYTE PTR [edx]
c0004ea4:	3c 04                	cmp    al,0x4
c0004ea6:	0f 85 97 00 00 00    	jne    c0004f43 <f_open+0x1a7>
c0004eac:	8d 42 10             	lea    eax,[edx+0x10]
c0004eaf:	89 13                	mov    DWORD PTR [ebx],edx
c0004eb1:	89 da                	mov    edx,ebx
c0004eb3:	e8 80 fd ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0004eb8:	31 d2                	xor    edx,edx
c0004eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebe:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec6:	83 c0 02             	add    eax,0x2
c0004ec9:	e8 32 cc ff ff       	call   c0001b00 <mem_set>
c0004ece:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ed3:	31 d2                	xor    edx,edx
c0004ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004edc:	83 c0 26             	add    eax,0x26
c0004edf:	e8 1c cc ff ff       	call   c0001b00 <mem_set>
c0004ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eeb:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eef:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ef7:	83 c0 08             	add    eax,0x8
c0004efa:	e8 e3 cb ff ff       	call   c0001ae2 <st_dword>
c0004eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004f06:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004f0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f0e:	e8 b7 ea ff ff       	call   c00039ca <store_xdir>
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	85 c0                	test   eax,eax
c0004f17:	0f 85 98 02 00 00    	jne    c00051b5 <f_open+0x419>
c0004f1d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f20:	85 d2                	test   edx,edx
c0004f22:	0f 84 db 00 00 00    	je     c0005003 <f_open+0x267>
c0004f28:	31 c9                	xor    ecx,ecx
c0004f2a:	89 d8                	mov    eax,ebx
c0004f2c:	e8 8e e3 ff ff       	call   c00032bf <remove_chain>
c0004f31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f35:	89 c5                	mov    ebp,eax
c0004f37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f3a:	48                   	dec    eax
c0004f3b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f3e:	e9 b8 00 00 00       	jmp    c0004ffb <f_open+0x25f>
c0004f43:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f47:	89 ea                	mov    edx,ebp
c0004f49:	e8 99 fc ff ff       	call   c0004be7 <ld_clust.isra.0>
c0004f4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f53:	89 c7                	mov    edi,eax
c0004f55:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f58:	e8 85 cb ff ff       	call   c0001ae2 <st_dword>
c0004f5d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f61:	31 c9                	xor    ecx,ecx
c0004f63:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f6f:	e8 9c fc ff ff       	call   c0004c10 <st_clust.isra.1>
c0004f74:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f78:	31 d2                	xor    edx,edx
c0004f7a:	83 c0 1c             	add    eax,0x1c
c0004f7d:	e8 60 cb ff ff       	call   c0001ae2 <st_dword>
c0004f82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f86:	85 ff                	test   edi,edi
c0004f88:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f8c:	74 75                	je     c0005003 <f_open+0x267>
c0004f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f92:	31 c9                	xor    ecx,ecx
c0004f94:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f97:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fa2:	89 fa                	mov    edx,edi
c0004fa4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fa8:	e8 12 e3 ff ff       	call   c00032bf <remove_chain>
c0004fad:	89 c5                	mov    ebp,eax
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	0f 85 fe 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc3:	4f                   	dec    edi
c0004fc4:	e8 81 d2 ff ff       	call   c000224a <move_window>
c0004fc9:	89 c5                	mov    ebp,eax
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fd2:	eb 27                	jmp    c0004ffb <f_open+0x25f>
c0004fd4:	85 ed                	test   ebp,ebp
c0004fd6:	0f 85 d9 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fdc:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fe0:	bd 04 00 00 00       	mov    ebp,0x4
c0004fe5:	a8 10                	test   al,0x10
c0004fe7:	0f 85 c8 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fed:	83 e7 02             	and    edi,0x2
c0004ff0:	74 11                	je     c0005003 <f_open+0x267>
c0004ff2:	bd 07 00 00 00       	mov    ebp,0x7
c0004ff7:	a8 01                	test   al,0x1
c0004ff9:	eb 02                	jmp    c0004ffd <f_open+0x261>
c0004ffb:	85 ed                	test   ebp,ebp
c0004ffd:	0f 85 b2 01 00 00    	jne    c00051b5 <f_open+0x419>
c0005003:	f7 c6 08 00 00 00    	test   esi,0x8
c0005009:	74 03                	je     c000500e <f_open+0x272>
c000500b:	83 ce 40             	or     esi,0x40
c000500e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005012:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005015:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005018:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000501b:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000501e:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005022:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005025:	8a 02                	mov    al,BYTE PTR [edx]
c0005027:	3c 04                	cmp    al,0x4
c0005029:	75 2a                	jne    c0005055 <f_open+0x2b9>
c000502b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000502f:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005034:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000503b:	30 c0                	xor    al,al
c000503d:	09 c8                	or     eax,ecx
c000503f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005042:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005046:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005049:	8d 42 10             	lea    eax,[edx+0x10]
c000504c:	89 da                	mov    edx,ebx
c000504e:	e8 e5 fb ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0005053:	eb 1c                	jmp    c0005071 <f_open+0x2d5>
c0005055:	89 fa                	mov    edx,edi
c0005057:	e8 8b fb ff ff       	call   c0004be7 <ld_clust.isra.0>
c000505c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000505f:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005062:	e8 12 ca ff ff       	call   c0001a79 <ld_dword>
c0005067:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000506e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000507c:	89 03                	mov    DWORD PTR [ebx],eax
c000507e:	31 d2                	xor    edx,edx
c0005080:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005084:	b9 00 02 00 00       	mov    ecx,0x200
c0005089:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000508d:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005091:	89 f0                	mov    eax,esi
c0005093:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000509a:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000509d:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00050a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00050a7:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00050ae:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00050b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050b9:	e8 42 ca ff ff       	call   c0001b00 <mem_set>
c00050be:	83 e6 20             	and    esi,0x20
c00050c1:	75 07                	jne    c00050ca <f_open+0x32e>
c00050c3:	31 ed                	xor    ebp,ebp
c00050c5:	e9 eb 00 00 00       	jmp    c00051b5 <f_open+0x419>
c00050ca:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050cd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050dc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050e0:	74 e1                	je     c00050c3 <f_open+0x327>
c00050e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ea:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ed:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f7:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050fb:	31 ff                	xor    edi,edi
c00050fd:	c1 e5 09             	shl    ebp,0x9
c0005100:	89 ee                	mov    esi,ebp
c0005102:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005106:	89 f8                	mov    eax,edi
c0005108:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000510c:	73 22                	jae    c0005130 <f_open+0x394>
c000510e:	89 d8                	mov    eax,ebx
c0005110:	e8 bd dc ff ff       	call   c0002dd2 <get_fat>
c0005115:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005119:	89 c2                	mov    edx,eax
c000511b:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000511f:	83 f8 01             	cmp    eax,0x1
c0005122:	76 10                	jbe    c0005134 <f_open+0x398>
c0005124:	83 f8 ff             	cmp    eax,0xffffffff
c0005127:	75 d9                	jne    c0005102 <f_open+0x366>
c0005129:	bd 01 00 00 00       	mov    ebp,0x1
c000512e:	eb 09                	jmp    c0005139 <f_open+0x39d>
c0005130:	31 ed                	xor    ebp,ebp
c0005132:	eb 05                	jmp    c0005139 <f_open+0x39d>
c0005134:	bd 02 00 00 00       	mov    ebp,0x2
c0005139:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000513c:	85 ed                	test   ebp,ebp
c000513e:	75 75                	jne    c00051b5 <f_open+0x419>
c0005140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005144:	25 ff 01 00 00       	and    eax,0x1ff
c0005149:	0f 84 74 ff ff ff    	je     c00050c3 <f_open+0x327>
c000514f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005153:	bd 02 00 00 00       	mov    ebp,0x2
c0005158:	89 c8                	mov    eax,ecx
c000515a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000515e:	e8 a2 cb ff ff       	call   c0001d05 <clst2sect>
c0005163:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005167:	89 d7                	mov    edi,edx
c0005169:	09 c7                	or     edi,eax
c000516b:	74 48                	je     c00051b5 <f_open+0x419>
c000516d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005171:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005175:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000517d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005181:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005185:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005189:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000518c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005190:	83 ec 0c             	sub    esp,0xc
c0005193:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005196:	6a 01                	push   0x1
c0005198:	52                   	push   edx
c0005199:	50                   	push   eax
c000519a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000519e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051a2:	50                   	push   eax
c00051a3:	e8 79 c8 ff ff       	call   c0001a21 <disk_read>
c00051a8:	83 c4 20             	add    esp,0x20
c00051ab:	85 c0                	test   eax,eax
c00051ad:	0f 95 c0             	setne  al
c00051b0:	0f b6 c0             	movzx  eax,al
c00051b3:	89 c5                	mov    ebp,eax
c00051b5:	83 ec 0c             	sub    esp,0xc
c00051b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051bc:	e8 f4 30 00 00       	call   c00082b5 <ff_memfree>
c00051c1:	83 c4 10             	add    esp,0x10
c00051c4:	85 ed                	test   ebp,ebp
c00051c6:	74 06                	je     c00051ce <f_open+0x432>
c00051c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ce:	83 c4 7c             	add    esp,0x7c
c00051d1:	89 e8                	mov    eax,ebp
c00051d3:	5b                   	pop    ebx
c00051d4:	5e                   	pop    esi
c00051d5:	5f                   	pop    edi
c00051d6:	5d                   	pop    ebp
c00051d7:	c3                   	ret    

c00051d8 <f_read>:
c00051d8:	55                   	push   ebp
c00051d9:	57                   	push   edi
c00051da:	56                   	push   esi
c00051db:	53                   	push   ebx
c00051dc:	83 ec 2c             	sub    esp,0x2c
c00051df:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051f1:	89 d8                	mov    eax,ebx
c00051f3:	e8 77 cf ff ff       	call   c000216f <validate>
c00051f8:	89 c5                	mov    ebp,eax
c00051fa:	85 c0                	test   eax,eax
c00051fc:	0f 85 4c 02 00 00    	jne    c000544e <f_read+0x276>
c0005202:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005206:	85 ed                	test   ebp,ebp
c0005208:	0f 85 40 02 00 00    	jne    c000544e <f_read+0x276>
c000520e:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005212:	0f 84 31 02 00 00    	je     c0005449 <f_read+0x271>
c0005218:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000521b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000521e:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005221:	bf 00 00 00 00       	mov    edi,0x0
c0005226:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005229:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000522d:	89 d1                	mov    ecx,edx
c000522f:	19 f9                	sbb    ecx,edi
c0005231:	0f 83 cf 00 00 00    	jae    c0005306 <f_read+0x12e>
c0005237:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000523b:	e9 c6 00 00 00       	jmp    c0005306 <f_read+0x12e>
c0005240:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005243:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005246:	89 d0                	mov    eax,edx
c0005248:	25 ff 01 00 00       	and    eax,0x1ff
c000524d:	0f 85 c9 01 00 00    	jne    c000541c <f_read+0x244>
c0005253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005257:	89 d6                	mov    esi,edx
c0005259:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000525d:	89 cf                	mov    edi,ecx
c000525f:	48                   	dec    eax
c0005260:	0f ac fe 09          	shrd   esi,edi,0x9
c0005264:	21 f0                	and    eax,esi
c0005266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000526a:	0f 84 a6 00 00 00    	je     c0005316 <f_read+0x13e>
c0005270:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005274:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005277:	89 c8                	mov    eax,ecx
c0005279:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000527c:	e8 84 ca ff ff       	call   c0001d05 <clst2sect>
c0005281:	89 d7                	mov    edi,edx
c0005283:	09 c7                	or     edi,eax
c0005285:	0f 84 b4 00 00 00    	je     c000533f <f_read+0x167>
c000528b:	31 ff                	xor    edi,edi
c000528d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005291:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005294:	01 c6                	add    esi,eax
c0005296:	11 d7                	adc    edi,edx
c0005298:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00052a0:	0f 86 fd 00 00 00    	jbe    c00053a3 <f_read+0x1cb>
c00052a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052ae:	c1 e8 09             	shr    eax,0x9
c00052b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052b4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052b8:	03 14 24             	add    edx,DWORD PTR [esp]
c00052bb:	39 c2                	cmp    edx,eax
c00052bd:	76 07                	jbe    c00052c6 <f_read+0xee>
c00052bf:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00052c6:	83 ec 0c             	sub    esp,0xc
c00052c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052cd:	57                   	push   edi
c00052ce:	56                   	push   esi
c00052cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052d3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052d7:	50                   	push   eax
c00052d8:	e8 44 c7 ff ff       	call   c0001a21 <disk_read>
c00052dd:	83 c4 20             	add    esp,0x20
c00052e0:	85 c0                	test   eax,eax
c00052e2:	75 6e                	jne    c0005352 <f_read+0x17a>
c00052e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e8:	78 7e                	js     c0005368 <f_read+0x190>
c00052ea:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ed:	c1 e6 09             	shl    esi,0x9
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052fa:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052fe:	01 30                	add    DWORD PTR [eax],esi
c0005300:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005303:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005306:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000530b:	0f 85 2f ff ff ff    	jne    c0005240 <f_read+0x68>
c0005311:	e9 38 01 00 00       	jmp    c000544e <f_read+0x276>
c0005316:	89 c8                	mov    eax,ecx
c0005318:	09 d0                	or     eax,edx
c000531a:	75 05                	jne    c0005321 <f_read+0x149>
c000531c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000531f:	eb 19                	jmp    c000533a <f_read+0x162>
c0005321:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005325:	74 09                	je     c0005330 <f_read+0x158>
c0005327:	89 d8                	mov    eax,ebx
c0005329:	e8 f8 c9 ff ff       	call   c0001d26 <clmt_clust>
c000532e:	eb 0a                	jmp    c000533a <f_read+0x162>
c0005330:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005333:	89 d8                	mov    eax,ebx
c0005335:	e8 98 da ff ff       	call   c0002dd2 <get_fat>
c000533a:	83 f8 01             	cmp    eax,0x1
c000533d:	77 0e                	ja     c000534d <f_read+0x175>
c000533f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005343:	bd 02 00 00 00       	mov    ebp,0x2
c0005348:	e9 01 01 00 00       	jmp    c000544e <f_read+0x276>
c000534d:	83 f8 ff             	cmp    eax,0xffffffff
c0005350:	75 0e                	jne    c0005360 <f_read+0x188>
c0005352:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005356:	bd 01 00 00 00       	mov    ebp,0x1
c000535b:	e9 ee 00 00 00       	jmp    c000544e <f_read+0x276>
c0005360:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005363:	e9 08 ff ff ff       	jmp    c0005270 <f_read+0x98>
c0005368:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000536e:	29 f0                	sub    eax,esi
c0005370:	19 fa                	sbb    edx,edi
c0005372:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005375:	89 d7                	mov    edi,edx
c0005377:	ba 00 00 00 00       	mov    edx,0x0
c000537c:	89 f9                	mov    ecx,edi
c000537e:	19 d1                	sbb    ecx,edx
c0005380:	0f 83 64 ff ff ff    	jae    c00052ea <f_read+0x112>
c0005386:	89 c7                	mov    edi,eax
c0005388:	8d 53 50             	lea    edx,[ebx+0x50]
c000538b:	c1 e7 09             	shl    edi,0x9
c000538e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005392:	b9 00 02 00 00       	mov    ecx,0x200
c0005397:	01 f8                	add    eax,edi
c0005399:	e8 4d c7 ff ff       	call   c0001aeb <mem_cpy>
c000539e:	e9 47 ff ff ff       	jmp    c00052ea <f_read+0x112>
c00053a3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00053a6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00053a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00053b0:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00053b4:	75 05                	jne    c00053bb <f_read+0x1e3>
c00053b6:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053b9:	74 5b                	je     c0005416 <f_read+0x23e>
c00053bb:	8d 43 50             	lea    eax,[ebx+0x50]
c00053be:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053c6:	79 2a                	jns    c00053f2 <f_read+0x21a>
c00053c8:	83 ec 0c             	sub    esp,0xc
c00053cb:	6a 01                	push   0x1
c00053cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053dd:	50                   	push   eax
c00053de:	e8 54 c6 ff ff       	call   c0001a37 <disk_write>
c00053e3:	83 c4 20             	add    esp,0x20
c00053e6:	85 c0                	test   eax,eax
c00053e8:	0f 85 64 ff ff ff    	jne    c0005352 <f_read+0x17a>
c00053ee:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053f2:	83 ec 0c             	sub    esp,0xc
c00053f5:	6a 01                	push   0x1
c00053f7:	57                   	push   edi
c00053f8:	56                   	push   esi
c00053f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005401:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005405:	50                   	push   eax
c0005406:	e8 16 c6 ff ff       	call   c0001a21 <disk_read>
c000540b:	83 c4 20             	add    esp,0x20
c000540e:	85 c0                	test   eax,eax
c0005410:	0f 85 3c ff ff ff    	jne    c0005352 <f_read+0x17a>
c0005416:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005419:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000541c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000541f:	ba 00 02 00 00       	mov    edx,0x200
c0005424:	25 ff 01 00 00       	and    eax,0x1ff
c0005429:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000542d:	29 c2                	sub    edx,eax
c000542f:	39 d6                	cmp    esi,edx
c0005431:	76 02                	jbe    c0005435 <f_read+0x25d>
c0005433:	89 d6                	mov    esi,edx
c0005435:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005439:	89 f1                	mov    ecx,esi
c000543b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000543f:	e8 a7 c6 ff ff       	call   c0001aeb <mem_cpy>
c0005444:	e9 a7 fe ff ff       	jmp    c00052f0 <f_read+0x118>
c0005449:	bd 07 00 00 00       	mov    ebp,0x7
c000544e:	83 c4 2c             	add    esp,0x2c
c0005451:	89 e8                	mov    eax,ebp
c0005453:	5b                   	pop    ebx
c0005454:	5e                   	pop    esi
c0005455:	5f                   	pop    edi
c0005456:	5d                   	pop    ebp
c0005457:	c3                   	ret    

c0005458 <f_write>:
c0005458:	55                   	push   ebp
c0005459:	57                   	push   edi
c000545a:	56                   	push   esi
c000545b:	53                   	push   ebx
c000545c:	83 ec 2c             	sub    esp,0x2c
c000545f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005463:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000546d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005471:	89 d8                	mov    eax,ebx
c0005473:	e8 f7 cc ff ff       	call   c000216f <validate>
c0005478:	89 c5                	mov    ebp,eax
c000547a:	85 c0                	test   eax,eax
c000547c:	0f 85 86 02 00 00    	jne    c0005708 <f_write+0x2b0>
c0005482:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005486:	85 ed                	test   ebp,ebp
c0005488:	0f 85 7a 02 00 00    	jne    c0005708 <f_write+0x2b0>
c000548e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005492:	0f 84 6b 02 00 00    	je     c0005703 <f_write+0x2ab>
c0005498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000549c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000549f:	0f 84 43 01 00 00    	je     c00055e8 <f_write+0x190>
c00054a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00054a8:	89 c1                	mov    ecx,eax
c00054aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00054ae:	0f 83 34 01 00 00    	jae    c00055e8 <f_write+0x190>
c00054b4:	f7 d0                	not    eax
c00054b6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054ba:	e9 29 01 00 00       	jmp    c00055e8 <f_write+0x190>
c00054bf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054c2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054c5:	89 d0                	mov    eax,edx
c00054c7:	25 ff 01 00 00       	and    eax,0x1ff
c00054cc:	0f 85 00 02 00 00    	jne    c00056d2 <f_write+0x27a>
c00054d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054d6:	89 d6                	mov    esi,edx
c00054d8:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054dc:	89 cf                	mov    edi,ecx
c00054de:	48                   	dec    eax
c00054df:	0f ac fe 09          	shrd   esi,edi,0x9
c00054e3:	21 f0                	and    eax,esi
c00054e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054e9:	0f 84 06 01 00 00    	je     c00055f5 <f_write+0x19d>
c00054ef:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054f3:	0f 88 6e 01 00 00    	js     c0005667 <f_write+0x20f>
c00054f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054fd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005500:	89 c8                	mov    eax,ecx
c0005502:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005506:	e8 fa c7 ff ff       	call   c0001d05 <clst2sect>
c000550b:	89 d1                	mov    ecx,edx
c000550d:	09 c1                	or     ecx,eax
c000550f:	0f 84 1c 01 00 00    	je     c0005631 <f_write+0x1d9>
c0005515:	31 ff                	xor    edi,edi
c0005517:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000551b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000551f:	01 c6                	add    esi,eax
c0005521:	11 d7                	adc    edi,edx
c0005523:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000552b:	0f 86 63 01 00 00    	jbe    c0005694 <f_write+0x23c>
c0005531:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005535:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005539:	c1 e8 09             	shr    eax,0x9
c000553c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005540:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005544:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005548:	39 c2                	cmp    edx,eax
c000554a:	76 08                	jbe    c0005554 <f_write+0xfc>
c000554c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005550:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005554:	83 ec 0c             	sub    esp,0xc
c0005557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000555b:	57                   	push   edi
c000555c:	56                   	push   esi
c000555d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005561:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005565:	50                   	push   eax
c0005566:	e8 cc c4 ff ff       	call   c0001a37 <disk_write>
c000556b:	83 c4 20             	add    esp,0x20
c000556e:	85 c0                	test   eax,eax
c0005570:	0f 85 ce 00 00 00    	jne    c0005644 <f_write+0x1ec>
c0005576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005579:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000557c:	29 f0                	sub    eax,esi
c000557e:	19 fa                	sbb    edx,edi
c0005580:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005584:	89 d7                	mov    edi,edx
c0005586:	ba 00 00 00 00       	mov    edx,0x0
c000558b:	89 f9                	mov    ecx,edi
c000558d:	19 d1                	sbb    ecx,edx
c000558f:	73 1c                	jae    c00055ad <f_write+0x155>
c0005591:	89 c7                	mov    edi,eax
c0005593:	b9 00 02 00 00       	mov    ecx,0x200
c0005598:	c1 e7 09             	shl    edi,0x9
c000559b:	8d 43 50             	lea    eax,[ebx+0x50]
c000559e:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00055a2:	89 fa                	mov    edx,edi
c00055a4:	e8 42 c5 ff ff       	call   c0001aeb <mem_cpy>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00055b1:	c1 e6 09             	shl    esi,0x9
c00055b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055b8:	31 ff                	xor    edi,edi
c00055ba:	01 30                	add    DWORD PTR [eax],esi
c00055bc:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055c0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c7:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055cd:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055d0:	89 c1                	mov    ecx,eax
c00055d2:	39 f2                	cmp    edx,esi
c00055d4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055d7:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055da:	19 f9                	sbb    ecx,edi
c00055dc:	73 04                	jae    c00055e2 <f_write+0x18a>
c00055de:	89 f2                	mov    edx,esi
c00055e0:	89 f8                	mov    eax,edi
c00055e2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055e5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055e8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ed:	0f 85 cc fe ff ff    	jne    c00054bf <f_write+0x67>
c00055f3:	eb 2e                	jmp    c0005623 <f_write+0x1cb>
c00055f5:	89 c8                	mov    eax,ecx
c00055f7:	09 d0                	or     eax,edx
c00055f9:	75 0b                	jne    c0005606 <f_write+0x1ae>
c00055fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055fe:	31 d2                	xor    edx,edx
c0005600:	85 c0                	test   eax,eax
c0005602:	75 28                	jne    c000562c <f_write+0x1d4>
c0005604:	eb 12                	jmp    c0005618 <f_write+0x1c0>
c0005606:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000560a:	74 09                	je     c0005615 <f_write+0x1bd>
c000560c:	89 d8                	mov    eax,ebx
c000560e:	e8 13 c7 ff ff       	call   c0001d26 <clmt_clust>
c0005613:	eb 0a                	jmp    c000561f <f_write+0x1c7>
c0005615:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005618:	89 d8                	mov    eax,ebx
c000561a:	e8 a1 da ff ff       	call   c00030c0 <create_chain>
c000561f:	85 c0                	test   eax,eax
c0005621:	75 09                	jne    c000562c <f_write+0x1d4>
c0005623:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005627:	e9 dc 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c000562c:	83 f8 01             	cmp    eax,0x1
c000562f:	75 0e                	jne    c000563f <f_write+0x1e7>
c0005631:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005635:	bd 02 00 00 00       	mov    ebp,0x2
c000563a:	e9 c9 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c000563f:	83 f8 ff             	cmp    eax,0xffffffff
c0005642:	75 0e                	jne    c0005652 <f_write+0x1fa>
c0005644:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005648:	bd 01 00 00 00       	mov    ebp,0x1
c000564d:	e9 b6 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c0005652:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005655:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005659:	0f 85 90 fe ff ff    	jne    c00054ef <f_write+0x97>
c000565f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005662:	e9 88 fe ff ff       	jmp    c00054ef <f_write+0x97>
c0005667:	83 ec 0c             	sub    esp,0xc
c000566a:	8d 43 50             	lea    eax,[ebx+0x50]
c000566d:	6a 01                	push   0x1
c000566f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005672:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005675:	50                   	push   eax
c0005676:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000567a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000567e:	50                   	push   eax
c000567f:	e8 b3 c3 ff ff       	call   c0001a37 <disk_write>
c0005684:	83 c4 20             	add    esp,0x20
c0005687:	85 c0                	test   eax,eax
c0005689:	75 b9                	jne    c0005644 <f_write+0x1ec>
c000568b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000568f:	e9 65 fe ff ff       	jmp    c00054f9 <f_write+0xa1>
c0005694:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005697:	75 05                	jne    c000569e <f_write+0x246>
c0005699:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000569c:	74 2e                	je     c00056cc <f_write+0x274>
c000569e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00056a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056a4:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00056a7:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00056aa:	73 20                	jae    c00056cc <f_write+0x274>
c00056ac:	83 ec 0c             	sub    esp,0xc
c00056af:	8d 43 50             	lea    eax,[ebx+0x50]
c00056b2:	6a 01                	push   0x1
c00056b4:	57                   	push   edi
c00056b5:	56                   	push   esi
c00056b6:	50                   	push   eax
c00056b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056bb:	50                   	push   eax
c00056bc:	e8 60 c3 ff ff       	call   c0001a21 <disk_read>
c00056c1:	83 c4 20             	add    esp,0x20
c00056c4:	85 c0                	test   eax,eax
c00056c6:	0f 85 78 ff ff ff    	jne    c0005644 <f_write+0x1ec>
c00056cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056cf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056d2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056d5:	ba 00 02 00 00       	mov    edx,0x200
c00056da:	25 ff 01 00 00       	and    eax,0x1ff
c00056df:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056e3:	29 c2                	sub    edx,eax
c00056e5:	39 d6                	cmp    esi,edx
c00056e7:	76 02                	jbe    c00056eb <f_write+0x293>
c00056e9:	89 d6                	mov    esi,edx
c00056eb:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ef:	89 f1                	mov    ecx,esi
c00056f1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056f5:	e8 f1 c3 ff ff       	call   c0001aeb <mem_cpy>
c00056fa:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056fe:	e9 b1 fe ff ff       	jmp    c00055b4 <f_write+0x15c>
c0005703:	bd 07 00 00 00       	mov    ebp,0x7
c0005708:	83 c4 2c             	add    esp,0x2c
c000570b:	89 e8                	mov    eax,ebp
c000570d:	5b                   	pop    ebx
c000570e:	5e                   	pop    esi
c000570f:	5f                   	pop    edi
c0005710:	5d                   	pop    ebp
c0005711:	c3                   	ret    

c0005712 <f_sync>:
c0005712:	56                   	push   esi
c0005713:	53                   	push   ebx
c0005714:	83 ec 64             	sub    esp,0x64
c0005717:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000571b:	8d 54 24 10          	lea    edx,[esp+0x10]
c000571f:	89 d8                	mov    eax,ebx
c0005721:	e8 49 ca ff ff       	call   c000216f <validate>
c0005726:	85 c0                	test   eax,eax
c0005728:	0f 85 ba 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000572e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005731:	f6 c2 40             	test   dl,0x40
c0005734:	0f 84 ae 01 00 00    	je     c00058e8 <f_sync+0x1d6>
c000573a:	84 d2                	test   dl,dl
c000573c:	79 33                	jns    c0005771 <f_sync+0x5f>
c000573e:	83 ec 0c             	sub    esp,0xc
c0005741:	8d 43 50             	lea    eax,[ebx+0x50]
c0005744:	6a 01                	push   0x1
c0005746:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005749:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000574c:	50                   	push   eax
c000574d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005751:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005755:	50                   	push   eax
c0005756:	e8 dc c2 ff ff       	call   c0001a37 <disk_write>
c000575b:	83 c4 20             	add    esp,0x20
c000575e:	89 c2                	mov    edx,eax
c0005760:	b8 01 00 00 00       	mov    eax,0x1
c0005765:	85 d2                	test   edx,edx
c0005767:	0f 85 7b 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000576d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005775:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005778:	0f 85 11 01 00 00    	jne    c000588f <f_sync+0x17d>
c000577e:	89 d8                	mov    eax,ebx
c0005780:	e8 13 d6 ff ff       	call   c0002d98 <fill_first_frag>
c0005785:	85 c0                	test   eax,eax
c0005787:	0f 85 5b 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000578d:	83 c9 ff             	or     ecx,0xffffffff
c0005790:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005793:	89 d8                	mov    eax,ebx
c0005795:	e8 c9 d5 ff ff       	call   c0002d63 <fill_last_frag>
c000579a:	85 c0                	test   eax,eax
c000579c:	0f 85 46 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c00057a2:	83 ec 0c             	sub    esp,0xc
c00057a5:	68 60 04 00 00       	push   0x460
c00057aa:	e8 f0 2a 00 00       	call   c000829f <ff_memalloc>
c00057af:	83 c4 10             	add    esp,0x10
c00057b2:	89 c6                	mov    esi,eax
c00057b4:	b8 11 00 00 00       	mov    eax,0x11
c00057b9:	85 f6                	test   esi,esi
c00057bb:	0f 84 27 01 00 00    	je     c00058e8 <f_sync+0x1d6>
c00057c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057cb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057d1:	89 da                	mov    edx,ebx
c00057d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057d7:	e8 af df ff ff       	call   c000378b <load_obj_xdir>
c00057dc:	85 c0                	test   eax,eax
c00057de:	0f 85 95 00 00 00    	jne    c0005879 <f_sync+0x167>
c00057e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057eb:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ef:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057f2:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057f5:	83 ca 01             	or     edx,0x1
c00057f8:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057fb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005801:	83 c0 34             	add    eax,0x34
c0005804:	e8 d9 c2 ff ff       	call   c0001ae2 <st_dword>
c0005809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005816:	83 c0 38             	add    eax,0x38
c0005819:	e8 c7 c2 ff ff       	call   c0001ae5 <st_qword>
c000581e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005825:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582b:	83 c0 28             	add    eax,0x28
c000582e:	e8 b2 c2 ff ff       	call   c0001ae5 <st_qword>
c0005833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005837:	ba 00 00 21 50       	mov    edx,0x50210000
c000583c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000583f:	83 c0 0c             	add    eax,0xc
c0005842:	e8 9b c2 ff ff       	call   c0001ae2 <st_dword>
c0005847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000584e:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005852:	31 d2                	xor    edx,edx
c0005854:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005857:	83 c0 10             	add    eax,0x10
c000585a:	e8 83 c2 ff ff       	call   c0001ae2 <st_dword>
c000585f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005863:	e8 62 e1 ff ff       	call   c00039ca <store_xdir>
c0005868:	85 c0                	test   eax,eax
c000586a:	75 0d                	jne    c0005879 <f_sync+0x167>
c000586c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005870:	e8 00 eb ff ff       	call   c0004375 <sync_fs>
c0005875:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	56                   	push   esi
c0005881:	e8 2f 2a 00 00       	call   c00082b5 <ff_memfree>
c0005886:	83 c4 10             	add    esp,0x10
c0005889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000588d:	eb 59                	jmp    c00058e8 <f_sync+0x1d6>
c000588f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005892:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005895:	e8 b0 c9 ff ff       	call   c000224a <move_window>
c000589a:	85 c0                	test   eax,eax
c000589c:	75 4a                	jne    c00058e8 <f_sync+0x1d6>
c000589e:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00058a1:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00058a5:	89 f2                	mov    edx,esi
c00058a7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00058aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00058ac:	e8 5f f3 ff ff       	call   c0004c10 <st_clust.isra.1>
c00058b1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058b4:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058b7:	e8 26 c2 ff ff       	call   c0001ae2 <st_dword>
c00058bc:	8d 46 16             	lea    eax,[esi+0x16]
c00058bf:	ba 00 00 21 50       	mov    edx,0x50210000
c00058c4:	e8 19 c2 ff ff       	call   c0001ae2 <st_dword>
c00058c9:	8d 46 12             	lea    eax,[esi+0x12]
c00058cc:	31 d2                	xor    edx,edx
c00058ce:	e8 0b c2 ff ff       	call   c0001ade <st_word>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058df:	e8 91 ea ff ff       	call   c0004375 <sync_fs>
c00058e4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058e8:	83 c4 64             	add    esp,0x64
c00058eb:	5b                   	pop    ebx
c00058ec:	5e                   	pop    esi
c00058ed:	c3                   	ret    

c00058ee <f_close>:
c00058ee:	53                   	push   ebx
c00058ef:	83 ec 24             	sub    esp,0x24
c00058f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058f6:	53                   	push   ebx
c00058f7:	e8 16 fe ff ff       	call   c0005712 <f_sync>
c00058fc:	83 c4 10             	add    esp,0x10
c00058ff:	85 c0                	test   eax,eax
c0005901:	75 15                	jne    c0005918 <f_close+0x2a>
c0005903:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005907:	89 d8                	mov    eax,ebx
c0005909:	e8 61 c8 ff ff       	call   c000216f <validate>
c000590e:	85 c0                	test   eax,eax
c0005910:	75 06                	jne    c0005918 <f_close+0x2a>
c0005912:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005918:	83 c4 18             	add    esp,0x18
c000591b:	5b                   	pop    ebx
c000591c:	c3                   	ret    

c000591d <f_lseek>:
c000591d:	55                   	push   ebp
c000591e:	57                   	push   edi
c000591f:	56                   	push   esi
c0005920:	53                   	push   ebx
c0005921:	83 ec 3c             	sub    esp,0x3c
c0005924:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005928:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000592c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005930:	89 04 24             	mov    DWORD PTR [esp],eax
c0005933:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005937:	89 d8                	mov    eax,ebx
c0005939:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000593d:	e8 2d c8 ff ff       	call   c000216f <validate>
c0005942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005946:	85 c0                	test   eax,eax
c0005948:	0f 85 7a 04 00 00    	jne    c0005dc8 <f_lseek+0x4ab>
c000594e:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005952:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005956:	85 c0                	test   eax,eax
c0005958:	0f 85 6a 04 00 00    	jne    c0005dc8 <f_lseek+0x4ab>
c000595e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005962:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005965:	74 0c                	je     c0005973 <f_lseek+0x56>
c0005967:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000596a:	85 c0                	test   eax,eax
c000596c:	75 1f                	jne    c000598d <f_lseek+0x70>
c000596e:	e9 b5 01 00 00       	jmp    c0005b28 <f_lseek+0x20b>
c0005973:	83 c9 ff             	or     ecx,0xffffffff
c0005976:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005979:	89 d8                	mov    eax,ebx
c000597b:	e8 e3 d3 ff ff       	call   c0002d63 <fill_last_frag>
c0005980:	85 c0                	test   eax,eax
c0005982:	74 e3                	je     c0005967 <f_lseek+0x4a>
c0005984:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005988:	e9 3b 04 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c000598d:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005992:	0f 85 ac 00 00 00    	jne    c0005a44 <f_lseek+0x127>
c0005998:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000599c:	0f 85 a2 00 00 00    	jne    c0005a44 <f_lseek+0x127>
c00059a2:	8d 78 04             	lea    edi,[eax+0x4]
c00059a5:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00059a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00059aa:	be 02 00 00 00       	mov    esi,0x2
c00059af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059b3:	85 ed                	test   ebp,ebp
c00059b5:	74 73                	je     c0005a2a <f_lseek+0x10d>
c00059b7:	89 e9                	mov    ecx,ebp
c00059b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059c0:	ff 04 24             	inc    DWORD PTR [esp]
c00059c3:	89 ca                	mov    edx,ecx
c00059c5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059c9:	89 d8                	mov    eax,ebx
c00059cb:	e8 02 d4 ff ff       	call   c0002dd2 <get_fat>
c00059d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059d4:	83 f8 01             	cmp    eax,0x1
c00059d7:	77 11                	ja     c00059ea <f_lseek+0xcd>
c00059d9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059dd:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059e5:	e9 de 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c00059ea:	83 f8 ff             	cmp    eax,0xffffffff
c00059ed:	75 11                	jne    c0005a00 <f_lseek+0xe3>
c00059ef:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059f3:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059fb:	e9 c8 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c0005a00:	8d 51 01             	lea    edx,[ecx+0x1]
c0005a03:	89 c1                	mov    ecx,eax
c0005a05:	39 c2                	cmp    edx,eax
c0005a07:	74 b7                	je     c00059c0 <f_lseek+0xa3>
c0005a09:	83 c6 02             	add    esi,0x2
c0005a0c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005a10:	72 0b                	jb     c0005a1d <f_lseek+0x100>
c0005a12:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a15:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a18:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a1a:	83 c7 08             	add    edi,0x8
c0005a1d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a21:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a24:	76 04                	jbe    c0005a2a <f_lseek+0x10d>
c0005a26:	89 c5                	mov    ebp,eax
c0005a28:	eb 8d                	jmp    c00059b7 <f_lseek+0x9a>
c0005a2a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a2d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a31:	89 30                	mov    DWORD PTR [eax],esi
c0005a33:	0f 87 87 03 00 00    	ja     c0005dc0 <f_lseek+0x4a3>
c0005a39:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a3f:	e9 84 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c0005a44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a56:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a5d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a61:	73 0f                	jae    c0005a72 <f_lseek+0x155>
c0005a63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a7a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a7d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a84:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a88:	0f 84 3a 03 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005a8e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a92:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a96:	83 c6 ff             	add    esi,0xffffffff
c0005a99:	89 d8                	mov    eax,ebx
c0005a9b:	83 d7 ff             	adc    edi,0xffffffff
c0005a9e:	89 f2                	mov    edx,esi
c0005aa0:	89 f9                	mov    ecx,edi
c0005aa2:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005aa6:	89 34 24             	mov    DWORD PTR [esp],esi
c0005aa9:	e8 78 c2 ff ff       	call   c0001d26 <clmt_clust>
c0005aae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ab2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ab5:	89 c2                	mov    edx,eax
c0005ab7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005abb:	89 c8                	mov    eax,ecx
c0005abd:	e8 43 c2 ff ff       	call   c0001d05 <clst2sect>
c0005ac2:	89 d7                	mov    edi,edx
c0005ac4:	09 c7                	or     edi,eax
c0005ac6:	0f 84 0d ff ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005acc:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ad0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ad6:	0f 84 ec 02 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005adc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ae0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ae4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ae7:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005aeb:	0f ac fe 09          	shrd   esi,edi,0x9
c0005aef:	4d                   	dec    ebp
c0005af0:	31 ff                	xor    edi,edi
c0005af2:	21 ee                	and    esi,ebp
c0005af4:	01 c6                	add    esi,eax
c0005af6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005af9:	11 d7                	adc    edi,edx
c0005afb:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005afe:	39 fa                	cmp    edx,edi
c0005b00:	75 08                	jne    c0005b0a <f_lseek+0x1ed>
c0005b02:	39 f0                	cmp    eax,esi
c0005b04:	0f 84 be 02 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005b0a:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005b0d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005b11:	0f 89 80 02 00 00    	jns    c0005d97 <f_lseek+0x47a>
c0005b17:	83 ec 0c             	sub    esp,0xc
c0005b1a:	6a 01                	push   0x1
c0005b1c:	52                   	push   edx
c0005b1d:	50                   	push   eax
c0005b1e:	55                   	push   ebp
c0005b1f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b23:	e9 5a 02 00 00       	jmp    c0005d82 <f_lseek+0x465>
c0005b28:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b2c:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b2f:	74 16                	je     c0005b47 <f_lseek+0x22a>
c0005b31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b36:	76 0f                	jbe    c0005b47 <f_lseek+0x22a>
c0005b38:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b47:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b4d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b50:	89 c7                	mov    edi,eax
c0005b52:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b56:	73 0d                	jae    c0005b65 <f_lseek+0x248>
c0005b58:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b5c:	75 07                	jne    c0005b65 <f_lseek+0x248>
c0005b5e:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b68:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b6b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b6f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b76:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b7d:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b80:	75 09                	jne    c0005b8b <f_lseek+0x26e>
c0005b82:	31 f6                	xor    esi,esi
c0005b84:	31 ff                	xor    edi,edi
c0005b86:	e9 af 01 00 00       	jmp    c0005d3a <f_lseek+0x41d>
c0005b8b:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b8f:	89 d7                	mov    edi,edx
c0005b91:	c1 e1 09             	shl    ecx,0x9
c0005b94:	09 c7                	or     edi,eax
c0005b96:	89 cd                	mov    ebp,ecx
c0005b98:	74 6d                	je     c0005c07 <f_lseek+0x2ea>
c0005b9a:	83 c0 ff             	add    eax,0xffffffff
c0005b9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba1:	83 d2 ff             	adc    edx,0xffffffff
c0005ba4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bab:	83 c0 ff             	add    eax,0xffffffff
c0005bae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005bb2:	83 d2 ff             	adc    edx,0xffffffff
c0005bb5:	31 ff                	xor    edi,edi
c0005bb7:	57                   	push   edi
c0005bb8:	51                   	push   ecx
c0005bb9:	52                   	push   edx
c0005bba:	50                   	push   eax
c0005bbb:	e8 3c 96 01 00       	call   c001f1fc <__udivdi3>
c0005bc0:	83 c4 10             	add    esp,0x10
c0005bc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bcb:	57                   	push   edi
c0005bcc:	55                   	push   ebp
c0005bcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd5:	e8 22 96 01 00       	call   c001f1fc <__udivdi3>
c0005bda:	83 c4 10             	add    esp,0x10
c0005bdd:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005be1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005be5:	19 d1                	sbb    ecx,edx
c0005be7:	72 1e                	jb     c0005c07 <f_lseek+0x2ea>
c0005be9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bed:	89 e9                	mov    ecx,ebp
c0005bef:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bf2:	f7 d9                	neg    ecx
c0005bf4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bf7:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bfb:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bfe:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005c01:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005c05:	eb 28                	jmp    c0005c2f <f_lseek+0x312>
c0005c07:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005c0a:	85 c0                	test   eax,eax
c0005c0c:	75 1e                	jne    c0005c2c <f_lseek+0x30f>
c0005c0e:	31 d2                	xor    edx,edx
c0005c10:	89 d8                	mov    eax,ebx
c0005c12:	e8 a9 d4 ff ff       	call   c00030c0 <create_chain>
c0005c17:	83 f8 01             	cmp    eax,0x1
c0005c1a:	0f 84 b9 fd ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005c20:	83 f8 ff             	cmp    eax,0xffffffff
c0005c23:	0f 84 c6 fd ff ff    	je     c00059ef <f_lseek+0xd2>
c0005c29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c2c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c2f:	85 c0                	test   eax,eax
c0005c31:	0f 84 4b ff ff ff    	je     c0005b82 <f_lseek+0x265>
c0005c37:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c43:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c4a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c4d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c50:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c54:	0f 83 9d 00 00 00    	jae    c0005cf7 <f_lseek+0x3da>
c0005c5a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c5e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c62:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c65:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c69:	01 f2                	add    edx,esi
c0005c6b:	11 f9                	adc    ecx,edi
c0005c6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c75:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c78:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c7b:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c7e:	f6 c1 02             	test   cl,0x2
c0005c81:	74 35                	je     c0005cb8 <f_lseek+0x39b>
c0005c83:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c87:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c8a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c8d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c91:	73 16                	jae    c0005ca9 <f_lseek+0x38c>
c0005c93:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c97:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c9b:	88 ca                	mov    dl,cl
c0005c9d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005ca0:	83 ca 40             	or     edx,0x40
c0005ca3:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ca6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ca9:	89 c2                	mov    edx,eax
c0005cab:	89 d8                	mov    eax,ebx
c0005cad:	e8 0e d4 ff ff       	call   c00030c0 <create_chain>
c0005cb2:	85 c0                	test   eax,eax
c0005cb4:	75 0b                	jne    c0005cc1 <f_lseek+0x3a4>
c0005cb6:	eb 30                	jmp    c0005ce8 <f_lseek+0x3cb>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	89 d8                	mov    eax,ebx
c0005cbc:	e8 11 d1 ff ff       	call   c0002dd2 <get_fat>
c0005cc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005cc4:	0f 84 25 fd ff ff    	je     c00059ef <f_lseek+0xd2>
c0005cca:	83 f8 01             	cmp    eax,0x1
c0005ccd:	0f 86 06 fd ff ff    	jbe    c00059d9 <f_lseek+0xbc>
c0005cd3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cd7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cda:	0f 86 f9 fc ff ff    	jbe    c00059d9 <f_lseek+0xbc>
c0005ce0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ce3:	e9 5b ff ff ff       	jmp    c0005c43 <f_lseek+0x326>
c0005ce8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cf7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cfa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cfe:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005d01:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005d04:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005d07:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005d0d:	0f 84 6f fe ff ff    	je     c0005b82 <f_lseek+0x265>
c0005d13:	89 c2                	mov    edx,eax
c0005d15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d19:	e8 e7 bf ff ff       	call   c0001d05 <clst2sect>
c0005d1e:	89 d7                	mov    edi,edx
c0005d20:	09 c7                	or     edi,eax
c0005d22:	0f 84 b1 fc ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005d28:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d2f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d33:	c1 ef 09             	shr    edi,0x9
c0005d36:	01 c6                	add    esi,eax
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d40:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d43:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d46:	19 d1                	sbb    ecx,edx
c0005d48:	73 0a                	jae    c0005d54 <f_lseek+0x437>
c0005d4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d4d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d50:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d54:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d59:	74 6d                	je     c0005dc8 <f_lseek+0x4ab>
c0005d5b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d61:	39 fa                	cmp    edx,edi
c0005d63:	75 04                	jne    c0005d69 <f_lseek+0x44c>
c0005d65:	39 f0                	cmp    eax,esi
c0005d67:	74 5f                	je     c0005dc8 <f_lseek+0x4ab>
c0005d69:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d6c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d70:	79 25                	jns    c0005d97 <f_lseek+0x47a>
c0005d72:	83 ec 0c             	sub    esp,0xc
c0005d75:	6a 01                	push   0x1
c0005d77:	52                   	push   edx
c0005d78:	50                   	push   eax
c0005d79:	55                   	push   ebp
c0005d7a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d7e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d82:	50                   	push   eax
c0005d83:	e8 af bc ff ff       	call   c0001a37 <disk_write>
c0005d88:	83 c4 20             	add    esp,0x20
c0005d8b:	85 c0                	test   eax,eax
c0005d8d:	0f 85 5c fc ff ff    	jne    c00059ef <f_lseek+0xd2>
c0005d93:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d97:	83 ec 0c             	sub    esp,0xc
c0005d9a:	6a 01                	push   0x1
c0005d9c:	57                   	push   edi
c0005d9d:	56                   	push   esi
c0005d9e:	55                   	push   ebp
c0005d9f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005da3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005da7:	50                   	push   eax
c0005da8:	e8 74 bc ff ff       	call   c0001a21 <disk_read>
c0005dad:	83 c4 20             	add    esp,0x20
c0005db0:	85 c0                	test   eax,eax
c0005db2:	0f 85 37 fc ff ff    	jne    c00059ef <f_lseek+0xd2>
c0005db8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005dbb:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dbe:	eb 08                	jmp    c0005dc8 <f_lseek+0x4ab>
c0005dc0:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005dc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dcc:	83 c4 3c             	add    esp,0x3c
c0005dcf:	5b                   	pop    ebx
c0005dd0:	5e                   	pop    esi
c0005dd1:	5f                   	pop    edi
c0005dd2:	5d                   	pop    ebp
c0005dd3:	c3                   	ret    

c0005dd4 <f_opendir>:
c0005dd4:	56                   	push   esi
c0005dd5:	b8 09 00 00 00       	mov    eax,0x9
c0005dda:	53                   	push   ebx
c0005ddb:	83 ec 24             	sub    esp,0x24
c0005dde:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005de2:	85 db                	test   ebx,ebx
c0005de4:	0f 84 e6 00 00 00    	je     c0005ed0 <f_opendir+0xfc>
c0005dea:	31 c9                	xor    ecx,ecx
c0005dec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005df0:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005df4:	e8 03 c7 ff ff       	call   c00024fc <mount_volume>
c0005df9:	85 c0                	test   eax,eax
c0005dfb:	0f 85 c9 00 00 00    	jne    c0005eca <f_opendir+0xf6>
c0005e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e05:	83 ec 0c             	sub    esp,0xc
c0005e08:	89 03                	mov    DWORD PTR [ebx],eax
c0005e0a:	68 60 04 00 00       	push   0x460
c0005e0f:	e8 8b 24 00 00       	call   c000829f <ff_memalloc>
c0005e14:	83 c4 10             	add    esp,0x10
c0005e17:	89 c6                	mov    esi,eax
c0005e19:	b8 11 00 00 00       	mov    eax,0x11
c0005e1e:	85 f6                	test   esi,esi
c0005e20:	0f 84 aa 00 00 00    	je     c0005ed0 <f_opendir+0xfc>
c0005e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e30:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e33:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e3a:	89 d8                	mov    eax,ebx
c0005e3c:	e8 31 ee ff ff       	call   c0004c72 <follow_path>
c0005e41:	85 c0                	test   eax,eax
c0005e43:	75 61                	jne    c0005ea6 <f_opendir+0xd2>
c0005e45:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e49:	78 46                	js     c0005e91 <f_opendir+0xbd>
c0005e4b:	b8 05 00 00 00       	mov    eax,0x5
c0005e50:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e54:	74 50                	je     c0005ea6 <f_opendir+0xd2>
c0005e56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e5a:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e5c:	3c 04                	cmp    al,0x4
c0005e5e:	75 26                	jne    c0005e86 <f_opendir+0xb2>
c0005e60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e63:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e66:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e69:	30 d2                	xor    dl,dl
c0005e6b:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e6f:	09 c2                	or     edx,eax
c0005e71:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e74:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e77:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e7a:	89 da                	mov    edx,ebx
c0005e7c:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e7f:	e8 b4 ed ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0005e84:	eb 0b                	jmp    c0005e91 <f_opendir+0xbd>
c0005e86:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e89:	e8 59 ed ff ff       	call   c0004be7 <ld_clust.isra.0>
c0005e8e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e95:	31 d2                	xor    edx,edx
c0005e97:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e9b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e9f:	89 d8                	mov    eax,ebx
c0005ea1:	e8 22 d1 ff ff       	call   c0002fc8 <dir_sdi>
c0005ea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eaa:	83 ec 0c             	sub    esp,0xc
c0005ead:	56                   	push   esi
c0005eae:	e8 02 24 00 00       	call   c00082b5 <ff_memfree>
c0005eb3:	83 c4 10             	add    esp,0x10
c0005eb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eba:	83 f8 04             	cmp    eax,0x4
c0005ebd:	74 06                	je     c0005ec5 <f_opendir+0xf1>
c0005ebf:	85 c0                	test   eax,eax
c0005ec1:	74 0d                	je     c0005ed0 <f_opendir+0xfc>
c0005ec3:	eb 05                	jmp    c0005eca <f_opendir+0xf6>
c0005ec5:	b8 05 00 00 00       	mov    eax,0x5
c0005eca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed0:	83 c4 24             	add    esp,0x24
c0005ed3:	5b                   	pop    ebx
c0005ed4:	5e                   	pop    esi
c0005ed5:	c3                   	ret    

c0005ed6 <f_closedir>:
c0005ed6:	53                   	push   ebx
c0005ed7:	83 ec 18             	sub    esp,0x18
c0005eda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ede:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ee2:	89 d8                	mov    eax,ebx
c0005ee4:	e8 86 c2 ff ff       	call   c000216f <validate>
c0005ee9:	85 c0                	test   eax,eax
c0005eeb:	75 06                	jne    c0005ef3 <f_closedir+0x1d>
c0005eed:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ef3:	83 c4 18             	add    esp,0x18
c0005ef6:	5b                   	pop    ebx
c0005ef7:	c3                   	ret    

c0005ef8 <f_readdir>:
c0005ef8:	57                   	push   edi
c0005ef9:	56                   	push   esi
c0005efa:	53                   	push   ebx
c0005efb:	83 ec 20             	sub    esp,0x20
c0005efe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f02:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005f06:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005f0a:	89 d8                	mov    eax,ebx
c0005f0c:	e8 5e c2 ff ff       	call   c000216f <validate>
c0005f11:	85 c0                	test   eax,eax
c0005f13:	75 77                	jne    c0005f8c <f_readdir+0x94>
c0005f15:	85 ff                	test   edi,edi
c0005f17:	75 0b                	jne    c0005f24 <f_readdir+0x2c>
c0005f19:	31 d2                	xor    edx,edx
c0005f1b:	89 d8                	mov    eax,ebx
c0005f1d:	e8 a6 d0 ff ff       	call   c0002fc8 <dir_sdi>
c0005f22:	eb 68                	jmp    c0005f8c <f_readdir+0x94>
c0005f24:	83 ec 0c             	sub    esp,0xc
c0005f27:	68 60 04 00 00       	push   0x460
c0005f2c:	e8 6e 23 00 00       	call   c000829f <ff_memalloc>
c0005f31:	83 c4 10             	add    esp,0x10
c0005f34:	89 c6                	mov    esi,eax
c0005f36:	b8 11 00 00 00       	mov    eax,0x11
c0005f3b:	85 f6                	test   esi,esi
c0005f3d:	74 4d                	je     c0005f8c <f_readdir+0x94>
c0005f3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f43:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f4f:	31 d2                	xor    edx,edx
c0005f51:	89 d8                	mov    eax,ebx
c0005f53:	e8 80 d8 ff ff       	call   c00037d8 <dir_read>
c0005f58:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f5d:	75 19                	jne    c0005f78 <f_readdir+0x80>
c0005f5f:	89 fa                	mov    edx,edi
c0005f61:	89 d8                	mov    eax,ebx
c0005f63:	e8 7e ea ff ff       	call   c00049e6 <get_fileinfo>
c0005f68:	31 d2                	xor    edx,edx
c0005f6a:	89 d8                	mov    eax,ebx
c0005f6c:	e8 af d5 ff ff       	call   c0003520 <dir_next>
c0005f71:	83 f8 04             	cmp    eax,0x4
c0005f74:	75 02                	jne    c0005f78 <f_readdir+0x80>
c0005f76:	31 c0                	xor    eax,eax
c0005f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 30 23 00 00       	call   c00082b5 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f8c:	83 c4 20             	add    esp,0x20
c0005f8f:	5b                   	pop    ebx
c0005f90:	5e                   	pop    esi
c0005f91:	5f                   	pop    edi
c0005f92:	c3                   	ret    

c0005f93 <f_stat>:
c0005f93:	57                   	push   edi
c0005f94:	31 c9                	xor    ecx,ecx
c0005f96:	56                   	push   esi
c0005f97:	53                   	push   ebx
c0005f98:	83 ec 50             	sub    esp,0x50
c0005f9b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005fa7:	e8 50 c5 ff ff       	call   c00024fc <mount_volume>
c0005fac:	89 c3                	mov    ebx,eax
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	75 67                	jne    c0006019 <f_stat+0x86>
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	bb 11 00 00 00       	mov    ebx,0x11
c0005fba:	68 60 04 00 00       	push   0x460
c0005fbf:	e8 db 22 00 00       	call   c000829f <ff_memalloc>
c0005fc4:	83 c4 10             	add    esp,0x10
c0005fc7:	89 c6                	mov    esi,eax
c0005fc9:	85 c0                	test   eax,eax
c0005fcb:	74 4c                	je     c0006019 <f_stat+0x86>
c0005fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fd1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fd7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fdd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fe1:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe5:	e8 88 ec ff ff       	call   c0004c72 <follow_path>
c0005fea:	89 c3                	mov    ebx,eax
c0005fec:	85 c0                	test   eax,eax
c0005fee:	75 1d                	jne    c000600d <f_stat+0x7a>
c0005ff0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005ff5:	78 11                	js     c0006008 <f_stat+0x75>
c0005ff7:	85 ff                	test   edi,edi
c0005ff9:	74 12                	je     c000600d <f_stat+0x7a>
c0005ffb:	89 fa                	mov    edx,edi
c0005ffd:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006001:	e8 e0 e9 ff ff       	call   c00049e6 <get_fileinfo>
c0006006:	eb 05                	jmp    c000600d <f_stat+0x7a>
c0006008:	bb 06 00 00 00       	mov    ebx,0x6
c000600d:	83 ec 0c             	sub    esp,0xc
c0006010:	56                   	push   esi
c0006011:	e8 9f 22 00 00       	call   c00082b5 <ff_memfree>
c0006016:	83 c4 10             	add    esp,0x10
c0006019:	83 c4 50             	add    esp,0x50
c000601c:	89 d8                	mov    eax,ebx
c000601e:	5b                   	pop    ebx
c000601f:	5e                   	pop    esi
c0006020:	5f                   	pop    edi
c0006021:	c3                   	ret    

c0006022 <f_getfree>:
c0006022:	55                   	push   ebp
c0006023:	31 c9                	xor    ecx,ecx
c0006025:	57                   	push   edi
c0006026:	56                   	push   esi
c0006027:	53                   	push   ebx
c0006028:	83 ec 5c             	sub    esp,0x5c
c000602b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000602f:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006033:	e8 c4 c4 ff ff       	call   c00024fc <mount_volume>
c0006038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000603c:	85 c0                	test   eax,eax
c000603e:	0f 85 9d 01 00 00    	jne    c00061e1 <f_getfree+0x1bf>
c0006044:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006048:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000604c:	89 02                	mov    DWORD PTR [edx],eax
c000604e:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006051:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006054:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006057:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000605b:	39 f2                	cmp    edx,esi
c000605d:	77 0b                	ja     c000606a <f_getfree+0x48>
c000605f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006063:	89 10                	mov    DWORD PTR [eax],edx
c0006065:	e9 77 01 00 00       	jmp    c00061e1 <f_getfree+0x1bf>
c000606a:	8a 10                	mov    dl,BYTE PTR [eax]
c000606c:	80 fa 01             	cmp    dl,0x1
c000606f:	75 3a                	jne    c00060ab <f_getfree+0x89>
c0006071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006075:	be 02 00 00 00       	mov    esi,0x2
c000607a:	31 db                	xor    ebx,ebx
c000607c:	89 f2                	mov    edx,esi
c000607e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006082:	e8 4b cd ff ff       	call   c0002dd2 <get_fat>
c0006087:	83 f8 ff             	cmp    eax,0xffffffff
c000608a:	0f 84 28 01 00 00    	je     c00061b8 <f_getfree+0x196>
c0006090:	83 f8 01             	cmp    eax,0x1
c0006093:	0f 84 29 01 00 00    	je     c00061c2 <f_getfree+0x1a0>
c0006099:	83 d3 00             	adc    ebx,0x0
c000609c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a0:	46                   	inc    esi
c00060a1:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00060a4:	77 d6                	ja     c000607c <f_getfree+0x5a>
c00060a6:	e9 25 01 00 00       	jmp    c00061d0 <f_getfree+0x1ae>
c00060ab:	80 fa 04             	cmp    dl,0x4
c00060ae:	0f 85 88 00 00 00    	jne    c000613c <f_getfree+0x11a>
c00060b4:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00060b7:	31 ed                	xor    ebp,ebp
c00060b9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060c4:	31 db                	xor    ebx,ebx
c00060c6:	85 ed                	test   ebp,ebp
c00060c8:	75 3f                	jne    c0006109 <f_getfree+0xe7>
c00060ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060d2:	83 c0 01             	add    eax,0x1
c00060d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060d9:	83 d2 00             	adc    edx,0x0
c00060dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ec:	e8 59 c1 ff ff       	call   c000224a <move_window>
c00060f1:	85 c0                	test   eax,eax
c00060f3:	0f 85 d3 00 00 00    	jne    c00061cc <f_getfree+0x1aa>
c00060f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006101:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006105:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006109:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610d:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006110:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006114:	89 cf                	mov    edi,ecx
c0006116:	85 f6                	test   esi,esi
c0006118:	74 12                	je     c000612c <f_getfree+0x10a>
c000611a:	88 c1                	mov    cl,al
c000611c:	83 e1 01             	and    ecx,0x1
c000611f:	80 f9 01             	cmp    cl,0x1
c0006122:	83 d3 00             	adc    ebx,0x0
c0006125:	d0 e8                	shr    al,1
c0006127:	4e                   	dec    esi
c0006128:	39 fe                	cmp    esi,edi
c000612a:	75 ea                	jne    c0006116 <f_getfree+0xf4>
c000612c:	45                   	inc    ebp
c000612d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006133:	85 f6                	test   esi,esi
c0006135:	75 8f                	jne    c00060c6 <f_getfree+0xa4>
c0006137:	e9 94 00 00 00       	jmp    c00061d0 <f_getfree+0x1ae>
c000613c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000613f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006142:	31 f6                	xor    esi,esi
c0006144:	31 db                	xor    ebx,ebx
c0006146:	85 f6                	test   esi,esi
c0006148:	75 1b                	jne    c0006165 <f_getfree+0x143>
c000614a:	89 d7                	mov    edi,edx
c000614c:	89 cd                	mov    ebp,ecx
c000614e:	83 c7 01             	add    edi,0x1
c0006151:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006155:	83 d5 00             	adc    ebp,0x0
c0006158:	e8 ed c0 ff ff       	call   c000224a <move_window>
c000615d:	85 c0                	test   eax,eax
c000615f:	75 6b                	jne    c00061cc <f_getfree+0x1aa>
c0006161:	89 fa                	mov    edx,edi
c0006163:	89 e9                	mov    ecx,ebp
c0006165:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006169:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000616d:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006171:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006174:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006178:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000617c:	75 11                	jne    c000618f <f_getfree+0x16d>
c000617e:	e8 e9 b8 ff ff       	call   c0001a6c <ld_word>
c0006183:	66 83 f8 01          	cmp    ax,0x1
c0006187:	83 d3 00             	adc    ebx,0x0
c000618a:	83 c6 02             	add    esi,0x2
c000618d:	eb 13                	jmp    c00061a2 <f_getfree+0x180>
c000618f:	e8 e5 b8 ff ff       	call   c0001a79 <ld_dword>
c0006194:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006199:	83 f8 01             	cmp    eax,0x1
c000619c:	83 d3 00             	adc    ebx,0x0
c000619f:	83 c6 04             	add    esi,0x4
c00061a2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00061a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00061ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00061b0:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00061b4:	75 90                	jne    c0006146 <f_getfree+0x124>
c00061b6:	eb 18                	jmp    c00061d0 <f_getfree+0x1ae>
c00061b8:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061c0:	eb 0e                	jmp    c00061d0 <f_getfree+0x1ae>
c00061c2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061ca:	eb 04                	jmp    c00061d0 <f_getfree+0x1ae>
c00061cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061d0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061d4:	89 18                	mov    DWORD PTR [eax],ebx
c00061d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061da:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061dd:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061e5:	83 c4 5c             	add    esp,0x5c
c00061e8:	5b                   	pop    ebx
c00061e9:	5e                   	pop    esi
c00061ea:	5f                   	pop    edi
c00061eb:	5d                   	pop    ebp
c00061ec:	c3                   	ret    

c00061ed <f_truncate>:
c00061ed:	56                   	push   esi
c00061ee:	53                   	push   ebx
c00061ef:	83 ec 14             	sub    esp,0x14
c00061f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061f6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061fa:	89 d8                	mov    eax,ebx
c00061fc:	e8 6e bf ff ff       	call   c000216f <validate>
c0006201:	89 c6                	mov    esi,eax
c0006203:	85 c0                	test   eax,eax
c0006205:	0f 85 d2 00 00 00    	jne    c00062dd <f_truncate+0xf0>
c000620b:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000620f:	85 f6                	test   esi,esi
c0006211:	0f 85 c6 00 00 00    	jne    c00062dd <f_truncate+0xf0>
c0006217:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000621b:	0f 84 b7 00 00 00    	je     c00062d8 <f_truncate+0xeb>
c0006221:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006224:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006227:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000622a:	89 d1                	mov    ecx,edx
c000622c:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000622f:	0f 83 a8 00 00 00    	jae    c00062dd <f_truncate+0xf0>
c0006235:	09 c2                	or     edx,eax
c0006237:	75 15                	jne    c000624e <f_truncate+0x61>
c0006239:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000623c:	31 c9                	xor    ecx,ecx
c000623e:	89 d8                	mov    eax,ebx
c0006240:	e8 7a d0 ff ff       	call   c00032bf <remove_chain>
c0006245:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000624c:	eb 35                	jmp    c0006283 <f_truncate+0x96>
c000624e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006251:	89 d8                	mov    eax,ebx
c0006253:	e8 7a cb ff ff       	call   c0002dd2 <get_fat>
c0006258:	89 c2                	mov    edx,eax
c000625a:	b8 01 00 00 00       	mov    eax,0x1
c000625f:	83 fa ff             	cmp    edx,0xffffffff
c0006262:	74 1f                	je     c0006283 <f_truncate+0x96>
c0006264:	b8 02 00 00 00       	mov    eax,0x2
c0006269:	83 fa 01             	cmp    edx,0x1
c000626c:	74 15                	je     c0006283 <f_truncate+0x96>
c000626e:	31 c0                	xor    eax,eax
c0006270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006274:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006277:	76 0a                	jbe    c0006283 <f_truncate+0x96>
c0006279:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000627c:	89 d8                	mov    eax,ebx
c000627e:	e8 3c d0 ff ff       	call   c00032bf <remove_chain>
c0006283:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006286:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006289:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000628c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000628f:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006292:	83 ca 40             	or     edx,0x40
c0006295:	85 c0                	test   eax,eax
c0006297:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000629a:	75 35                	jne    c00062d1 <f_truncate+0xe4>
c000629c:	84 d2                	test   dl,dl
c000629e:	79 3d                	jns    c00062dd <f_truncate+0xf0>
c00062a0:	83 ec 0c             	sub    esp,0xc
c00062a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00062a6:	6a 01                	push   0x1
c00062a8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00062ab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00062ae:	50                   	push   eax
c00062af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00062b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00062b7:	50                   	push   eax
c00062b8:	e8 7a b7 ff ff       	call   c0001a37 <disk_write>
c00062bd:	83 c4 20             	add    esp,0x20
c00062c0:	85 c0                	test   eax,eax
c00062c2:	75 08                	jne    c00062cc <f_truncate+0xdf>
c00062c4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062c8:	31 f6                	xor    esi,esi
c00062ca:	eb 11                	jmp    c00062dd <f_truncate+0xf0>
c00062cc:	b8 01 00 00 00       	mov    eax,0x1
c00062d1:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062d4:	89 c6                	mov    esi,eax
c00062d6:	eb 05                	jmp    c00062dd <f_truncate+0xf0>
c00062d8:	be 07 00 00 00       	mov    esi,0x7
c00062dd:	89 f0                	mov    eax,esi
c00062df:	83 c4 14             	add    esp,0x14
c00062e2:	5b                   	pop    ebx
c00062e3:	5e                   	pop    esi
c00062e4:	c3                   	ret    

c00062e5 <f_unlink>:
c00062e5:	56                   	push   esi
c00062e6:	b9 02 00 00 00       	mov    ecx,0x2
c00062eb:	53                   	push   ebx
c00062ec:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062f6:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062fd:	e8 fa c1 ff ff       	call   c00024fc <mount_volume>
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 55 01 00 00    	jne    c000645f <f_unlink+0x17a>
c000630a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000630e:	83 ec 0c             	sub    esp,0xc
c0006311:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006315:	68 60 04 00 00       	push   0x460
c000631a:	e8 80 1f 00 00       	call   c000829f <ff_memalloc>
c000631f:	83 c4 10             	add    esp,0x10
c0006322:	89 c3                	mov    ebx,eax
c0006324:	b8 11 00 00 00       	mov    eax,0x11
c0006329:	85 db                	test   ebx,ebx
c000632b:	0f 84 2e 01 00 00    	je     c000645f <f_unlink+0x17a>
c0006331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006335:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000633b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000633e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006341:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006348:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634c:	e8 21 e9 ff ff       	call   c0004c72 <follow_path>
c0006351:	85 c0                	test   eax,eax
c0006353:	0f 85 f2 00 00 00    	jne    c000644b <f_unlink+0x166>
c0006359:	b8 06 00 00 00       	mov    eax,0x6
c000635e:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006366:	0f 88 df 00 00 00    	js     c000644b <f_unlink+0x166>
c000636c:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006371:	74 0a                	je     c000637d <f_unlink+0x98>
c0006373:	b8 07 00 00 00       	mov    eax,0x7
c0006378:	e9 ce 00 00 00       	jmp    c000644b <f_unlink+0x166>
c000637d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006381:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006385:	8a 02                	mov    al,BYTE PTR [edx]
c0006387:	3c 04                	cmp    al,0x4
c0006389:	75 12                	jne    c000639d <f_unlink+0xb8>
c000638b:	8d 42 10             	lea    eax,[edx+0x10]
c000638e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006392:	e8 a1 e8 ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0006397:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000639b:	eb 0e                	jmp    c00063ab <f_unlink+0xc6>
c000639d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00063a4:	e8 3e e8 ff ff       	call   c0004be7 <ld_clust.isra.0>
c00063a9:	89 c6                	mov    esi,eax
c00063ab:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00063b0:	75 12                	jne    c00063c4 <f_unlink+0xdf>
c00063b2:	8d 44 24 48          	lea    eax,[esp+0x48]
c00063b6:	e8 94 d6 ff ff       	call   c0003a4f <dir_remove>
c00063bb:	85 c0                	test   eax,eax
c00063bd:	74 6c                	je     c000642b <f_unlink+0x146>
c00063bf:	e9 87 00 00 00       	jmp    c000644b <f_unlink+0x166>
c00063c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063c8:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063cf:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063d6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063d9:	75 21                	jne    c00063fc <f_unlink+0x117>
c00063db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063e3:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063ea:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063f1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063f5:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063fc:	31 d2                	xor    edx,edx
c00063fe:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006405:	e8 be cb ff ff       	call   c0002fc8 <dir_sdi>
c000640a:	85 c0                	test   eax,eax
c000640c:	75 3d                	jne    c000644b <f_unlink+0x166>
c000640e:	31 d2                	xor    edx,edx
c0006410:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006417:	e8 bc d3 ff ff       	call   c00037d8 <dir_read>
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 84 4f ff ff ff    	je     c0006373 <f_unlink+0x8e>
c0006424:	83 f8 04             	cmp    eax,0x4
c0006427:	75 22                	jne    c000644b <f_unlink+0x166>
c0006429:	eb 87                	jmp    c00063b2 <f_unlink+0xcd>
c000642b:	85 f6                	test   esi,esi
c000642d:	75 0b                	jne    c000643a <f_unlink+0x155>
c000642f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006433:	e8 3d df ff ff       	call   c0004375 <sync_fs>
c0006438:	eb 11                	jmp    c000644b <f_unlink+0x166>
c000643a:	31 c9                	xor    ecx,ecx
c000643c:	89 f2                	mov    edx,esi
c000643e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006442:	e8 78 ce ff ff       	call   c00032bf <remove_chain>
c0006447:	85 c0                	test   eax,eax
c0006449:	74 e4                	je     c000642f <f_unlink+0x14a>
c000644b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000644f:	83 ec 0c             	sub    esp,0xc
c0006452:	53                   	push   ebx
c0006453:	e8 5d 1e 00 00       	call   c00082b5 <ff_memfree>
c0006458:	83 c4 10             	add    esp,0x10
c000645b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000645f:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006465:	5b                   	pop    ebx
c0006466:	5e                   	pop    esi
c0006467:	c3                   	ret    

c0006468 <f_mkdir>:
c0006468:	57                   	push   edi
c0006469:	b9 02 00 00 00       	mov    ecx,0x2
c000646e:	56                   	push   esi
c000646f:	53                   	push   ebx
c0006470:	83 c4 80             	add    esp,0xffffff80
c0006473:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006477:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000647e:	e8 79 c0 ff ff       	call   c00024fc <mount_volume>
c0006483:	89 c3                	mov    ebx,eax
c0006485:	85 c0                	test   eax,eax
c0006487:	0f 85 fe 01 00 00    	jne    c000668b <f_mkdir+0x223>
c000648d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006491:	bb 11 00 00 00       	mov    ebx,0x11
c0006496:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000649a:	83 ec 0c             	sub    esp,0xc
c000649d:	68 60 04 00 00       	push   0x460
c00064a2:	e8 f8 1d 00 00       	call   c000829f <ff_memalloc>
c00064a7:	83 c4 10             	add    esp,0x10
c00064aa:	89 c7                	mov    edi,eax
c00064ac:	85 c0                	test   eax,eax
c00064ae:	0f 84 d7 01 00 00    	je     c000668b <f_mkdir+0x223>
c00064b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b8:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064be:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064c4:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064cb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064cf:	e8 9e e7 ff ff       	call   c0004c72 <follow_path>
c00064d4:	89 c3                	mov    ebx,eax
c00064d6:	85 c0                	test   eax,eax
c00064d8:	74 3e                	je     c0006518 <f_mkdir+0xb0>
c00064da:	83 f8 04             	cmp    eax,0x4
c00064dd:	75 3e                	jne    c000651d <f_mkdir+0xb5>
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ed:	e8 ce cb ff ff       	call   c00030c0 <create_chain>
c00064f2:	89 c6                	mov    esi,eax
c00064f4:	85 c0                	test   eax,eax
c00064f6:	74 0c                	je     c0006504 <f_mkdir+0x9c>
c00064f8:	bb 02 00 00 00       	mov    ebx,0x2
c00064fd:	83 f8 01             	cmp    eax,0x1
c0006500:	74 07                	je     c0006509 <f_mkdir+0xa1>
c0006502:	eb 2a                	jmp    c000652e <f_mkdir+0xc6>
c0006504:	bb 07 00 00 00       	mov    ebx,0x7
c0006509:	31 c9                	xor    ecx,ecx
c000650b:	89 f2                	mov    edx,esi
c000650d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006511:	e8 a9 cd ff ff       	call   c00032bf <remove_chain>
c0006516:	eb 05                	jmp    c000651d <f_mkdir+0xb5>
c0006518:	bb 08 00 00 00       	mov    ebx,0x8
c000651d:	83 ec 0c             	sub    esp,0xc
c0006520:	57                   	push   edi
c0006521:	e8 8f 1d 00 00       	call   c00082b5 <ff_memfree>
c0006526:	83 c4 10             	add    esp,0x10
c0006529:	e9 5d 01 00 00       	jmp    c000668b <f_mkdir+0x223>
c000652e:	bb 01 00 00 00       	mov    ebx,0x1
c0006533:	83 f8 ff             	cmp    eax,0xffffffff
c0006536:	74 d1                	je     c0006509 <f_mkdir+0xa1>
c0006538:	89 f2                	mov    edx,esi
c000653a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653e:	e8 c4 ce ff ff       	call   c0003407 <dir_clear>
c0006543:	89 c3                	mov    ebx,eax
c0006545:	85 c0                	test   eax,eax
c0006547:	75 c0                	jne    c0006509 <f_mkdir+0xa1>
c0006549:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006550:	74 69                	je     c00065bb <f_mkdir+0x153>
c0006552:	b9 0b 00 00 00       	mov    ecx,0xb
c0006557:	83 c0 54             	add    eax,0x54
c000655a:	ba 20 00 00 00       	mov    edx,0x20
c000655f:	e8 9c b5 ff ff       	call   c0001b00 <mem_set>
c0006564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006568:	ba 00 00 21 50       	mov    edx,0x50210000
c000656d:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006571:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006575:	83 c0 6a             	add    eax,0x6a
c0006578:	e8 65 b5 ff ff       	call   c0001ae2 <st_dword>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	89 f1                	mov    ecx,esi
c0006583:	8d 50 54             	lea    edx,[eax+0x54]
c0006586:	e8 85 e6 ff ff       	call   c0004c10 <st_clust.isra.1>
c000658b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658f:	b9 20 00 00 00       	mov    ecx,0x20
c0006594:	8d 50 54             	lea    edx,[eax+0x54]
c0006597:	83 c0 74             	add    eax,0x74
c000659a:	e8 4c b5 ff ff       	call   c0001aeb <mem_cpy>
c000659f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00065a7:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00065ab:	8d 50 74             	lea    edx,[eax+0x74]
c00065ae:	e8 5d e6 ff ff       	call   c0004c10 <st_clust.isra.1>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065bb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065bf:	e8 2f db ff ff       	call   c00040f3 <dir_register>
c00065c4:	89 c3                	mov    ebx,eax
c00065c6:	85 c0                	test   eax,eax
c00065c8:	0f 85 3b ff ff ff    	jne    c0006509 <f_mkdir+0xa1>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d5:	75 74                	jne    c000664b <f_mkdir+0x1e3>
c00065d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065da:	ba 00 00 21 50       	mov    edx,0x50210000
c00065df:	83 c0 0c             	add    eax,0xc
c00065e2:	e8 fb b4 ff ff       	call   c0001ae2 <st_dword>
c00065e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065eb:	89 f2                	mov    edx,esi
c00065ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f0:	83 c0 34             	add    eax,0x34
c00065f3:	e8 ea b4 ff ff       	call   c0001ae2 <st_dword>
c00065f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fc:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006600:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006603:	c1 e2 09             	shl    edx,0x9
c0006606:	83 c0 38             	add    eax,0x38
c0006609:	e8 d4 b4 ff ff       	call   c0001ae2 <st_dword>
c000660e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006612:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006616:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006619:	c1 e2 09             	shl    edx,0x9
c000661c:	83 c0 28             	add    eax,0x28
c000661f:	e8 be b4 ff ff       	call   c0001ae2 <st_dword>
c0006624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006628:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000662b:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000662f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006632:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006636:	8d 44 24 34          	lea    eax,[esp+0x34]
c000663a:	e8 8b d3 ff ff       	call   c00039ca <store_xdir>
c000663f:	89 c3                	mov    ebx,eax
c0006641:	85 c0                	test   eax,eax
c0006643:	0f 85 d4 fe ff ff    	jne    c000651d <f_mkdir+0xb5>
c0006649:	eb 30                	jmp    c000667b <f_mkdir+0x213>
c000664b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	83 c0 16             	add    eax,0x16
c0006657:	e8 86 b4 ff ff       	call   c0001ae2 <st_dword>
c000665c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006660:	89 f1                	mov    ecx,esi
c0006662:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006666:	e8 a5 e5 ff ff       	call   c0004c10 <st_clust.isra.1>
c000666b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000666f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006677:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000667b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667f:	e8 f1 dc ff ff       	call   c0004375 <sync_fs>
c0006684:	89 c3                	mov    ebx,eax
c0006686:	e9 92 fe ff ff       	jmp    c000651d <f_mkdir+0xb5>
c000668b:	83 ec 80             	sub    esp,0xffffff80
c000668e:	89 d8                	mov    eax,ebx
c0006690:	5b                   	pop    ebx
c0006691:	5e                   	pop    esi
c0006692:	5f                   	pop    edi
c0006693:	c3                   	ret    

c0006694 <f_rename>:
c0006694:	55                   	push   ebp
c0006695:	57                   	push   edi
c0006696:	56                   	push   esi
c0006697:	53                   	push   ebx
c0006698:	81 ec fc 00 00 00    	sub    esp,0xfc
c000669e:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00066a5:	e8 a4 b9 ff ff       	call   c000204e <get_ldnumber>
c00066aa:	b9 02 00 00 00       	mov    ecx,0x2
c00066af:	8d 54 24 14          	lea    edx,[esp+0x14]
c00066b3:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066ba:	e8 3d be ff ff       	call   c00024fc <mount_volume>
c00066bf:	85 c0                	test   eax,eax
c00066c1:	0f 85 b5 02 00 00    	jne    c000697c <f_rename+0x2e8>
c00066c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066cb:	83 ec 0c             	sub    esp,0xc
c00066ce:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066d2:	68 60 04 00 00       	push   0x460
c00066d7:	e8 c3 1b 00 00       	call   c000829f <ff_memalloc>
c00066dc:	83 c4 10             	add    esp,0x10
c00066df:	89 c3                	mov    ebx,eax
c00066e1:	b8 11 00 00 00       	mov    eax,0x11
c00066e6:	85 db                	test   ebx,ebx
c00066e8:	0f 84 8e 02 00 00    	je     c000697c <f_rename+0x2e8>
c00066ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066f2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066f8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066fb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066fe:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006705:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006709:	e8 64 e5 ff ff       	call   c0004c72 <follow_path>
c000670e:	85 c0                	test   eax,eax
c0006710:	0f 85 52 02 00 00    	jne    c0006968 <f_rename+0x2d4>
c0006716:	b8 06 00 00 00       	mov    eax,0x6
c000671b:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006723:	0f 85 3f 02 00 00    	jne    c0006968 <f_rename+0x2d4>
c0006729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000672d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006730:	0f 85 05 01 00 00    	jne    c000683b <f_rename+0x1a7>
c0006736:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006739:	b9 40 00 00 00       	mov    ecx,0x40
c000673e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006742:	e8 a4 b3 ff ff       	call   c0001aeb <mem_cpy>
c0006747:	b9 4c 00 00 00       	mov    ecx,0x4c
c000674c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006750:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006757:	e8 8f b3 ff ff       	call   c0001aeb <mem_cpy>
c000675c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006763:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000676a:	e8 03 e5 ff ff       	call   c0004c72 <follow_path>
c000676f:	85 c0                	test   eax,eax
c0006771:	75 29                	jne    c000679c <f_rename+0x108>
c0006773:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006777:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000677e:	74 0a                	je     c000678a <f_rename+0xf6>
c0006780:	b8 08 00 00 00       	mov    eax,0x8
c0006785:	e9 de 01 00 00       	jmp    c0006968 <f_rename+0x2d4>
c000678a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006791:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006798:	75 e6                	jne    c0006780 <f_rename+0xec>
c000679a:	eb 09                	jmp    c00067a5 <f_rename+0x111>
c000679c:	83 f8 04             	cmp    eax,0x4
c000679f:	0f 85 c3 01 00 00    	jne    c0006968 <f_rename+0x2d4>
c00067a5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ac:	e8 42 d9 ff ff       	call   c00040f3 <dir_register>
c00067b1:	85 c0                	test   eax,eax
c00067b3:	0f 85 af 01 00 00    	jne    c0006968 <f_rename+0x2d4>
c00067b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067bd:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067c0:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067c3:	89 c5                	mov    ebp,eax
c00067c5:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067cc:	8d 46 24             	lea    eax,[esi+0x24]
c00067cf:	e8 98 b2 ff ff       	call   c0001a6c <ld_word>
c00067d4:	b9 40 00 00 00       	mov    ecx,0x40
c00067d9:	89 c7                	mov    edi,eax
c00067db:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067df:	89 f0                	mov    eax,esi
c00067e1:	e8 05 b3 ff ff       	call   c0001aeb <mem_cpy>
c00067e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ea:	89 e9                	mov    ecx,ebp
c00067ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ef:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067f2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067fd:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006800:	0f b7 d7             	movzx  edx,di
c0006803:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006806:	83 c0 24             	add    eax,0x24
c0006809:	e8 d0 b2 ff ff       	call   c0001ade <st_word>
c000680e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006812:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006815:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006818:	a8 10                	test   al,0x10
c000681a:	75 06                	jne    c0006822 <f_rename+0x18e>
c000681c:	83 c8 20             	or     eax,0x20
c000681f:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006822:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006829:	e8 9c d1 ff ff       	call   c00039ca <store_xdir>
c000682e:	85 c0                	test   eax,eax
c0006830:	0f 84 1c 01 00 00    	je     c0006952 <f_rename+0x2be>
c0006836:	e9 2d 01 00 00       	jmp    c0006968 <f_rename+0x2d4>
c000683b:	b9 20 00 00 00       	mov    ecx,0x20
c0006840:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006847:	8d 44 24 18          	lea    eax,[esp+0x18]
c000684b:	e8 9b b2 ff ff       	call   c0001aeb <mem_cpy>
c0006850:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006855:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006859:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006860:	e8 86 b2 ff ff       	call   c0001aeb <mem_cpy>
c0006865:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000686c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006873:	e8 fa e3 ff ff       	call   c0004c72 <follow_path>
c0006878:	85 c0                	test   eax,eax
c000687a:	75 27                	jne    c00068a3 <f_rename+0x20f>
c000687c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006880:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006887:	0f 85 f3 fe ff ff    	jne    c0006780 <f_rename+0xec>
c000688d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006894:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000689b:	0f 85 df fe ff ff    	jne    c0006780 <f_rename+0xec>
c00068a1:	eb 09                	jmp    c00068ac <f_rename+0x218>
c00068a3:	83 f8 04             	cmp    eax,0x4
c00068a6:	0f 85 bc 00 00 00    	jne    c0006968 <f_rename+0x2d4>
c00068ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068b3:	e8 3b d8 ff ff       	call   c00040f3 <dir_register>
c00068b8:	85 c0                	test   eax,eax
c00068ba:	0f 85 a8 00 00 00    	jne    c0006968 <f_rename+0x2d4>
c00068c0:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068c7:	b9 13 00 00 00       	mov    ecx,0x13
c00068cc:	8d 46 0d             	lea    eax,[esi+0xd]
c00068cf:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068d3:	e8 13 b2 ff ff       	call   c0001aeb <mem_cpy>
c00068d8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068dc:	a8 10                	test   al,0x10
c00068de:	75 03                	jne    c00068e3 <f_rename+0x24f>
c00068e0:	83 c8 20             	or     eax,0x20
c00068e3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ee:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068f2:	74 5e                	je     c0006952 <f_rename+0x2be>
c00068f4:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068fb:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068ff:	74 51                	je     c0006952 <f_rename+0x2be>
c0006901:	89 f2                	mov    edx,esi
c0006903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006907:	8a 07                	mov    al,BYTE PTR [edi]
c0006909:	e8 d9 e2 ff ff       	call   c0004be7 <ld_clust.isra.0>
c000690e:	89 c2                	mov    edx,eax
c0006910:	89 f8                	mov    eax,edi
c0006912:	e8 ee b3 ff ff       	call   c0001d05 <clst2sect>
c0006917:	89 c6                	mov    esi,eax
c0006919:	89 d1                	mov    ecx,edx
c000691b:	b8 02 00 00 00       	mov    eax,0x2
c0006920:	09 f2                	or     edx,esi
c0006922:	74 44                	je     c0006968 <f_rename+0x2d4>
c0006924:	89 f2                	mov    edx,esi
c0006926:	89 f8                	mov    eax,edi
c0006928:	e8 1d b9 ff ff       	call   c000224a <move_window>
c000692d:	85 c0                	test   eax,eax
c000692f:	75 37                	jne    c0006968 <f_rename+0x2d4>
c0006931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006935:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006939:	75 17                	jne    c0006952 <f_rename+0x2be>
c000693b:	8d 50 74             	lea    edx,[eax+0x74]
c000693e:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006945:	e8 c6 e2 ff ff       	call   c0004c10 <st_clust.isra.1>
c000694a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000694e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006952:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006956:	e8 f4 d0 ff ff       	call   c0003a4f <dir_remove>
c000695b:	85 c0                	test   eax,eax
c000695d:	75 09                	jne    c0006968 <f_rename+0x2d4>
c000695f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006963:	e8 0d da ff ff       	call   c0004375 <sync_fs>
c0006968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000696c:	83 ec 0c             	sub    esp,0xc
c000696f:	53                   	push   ebx
c0006970:	e8 40 19 00 00       	call   c00082b5 <ff_memfree>
c0006975:	83 c4 10             	add    esp,0x10
c0006978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000697c:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006982:	5b                   	pop    ebx
c0006983:	5e                   	pop    esi
c0006984:	5f                   	pop    edi
c0006985:	5d                   	pop    ebp
c0006986:	c3                   	ret    

c0006987 <f_chmod>:
c0006987:	57                   	push   edi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	56                   	push   esi
c000698e:	53                   	push   ebx
c000698f:	83 ec 60             	sub    esp,0x60
c0006992:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006996:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000699a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000699e:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069a2:	e8 55 bb ff ff       	call   c00024fc <mount_volume>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 af 00 00 00    	jne    c0006a5e <f_chmod+0xd7>
c00069af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b3:	83 ec 0c             	sub    esp,0xc
c00069b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069ba:	68 60 04 00 00       	push   0x460
c00069bf:	e8 db 18 00 00       	call   c000829f <ff_memalloc>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	89 c6                	mov    esi,eax
c00069c9:	b8 11 00 00 00       	mov    eax,0x11
c00069ce:	85 f6                	test   esi,esi
c00069d0:	0f 84 88 00 00 00    	je     c0006a5e <f_chmod+0xd7>
c00069d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069da:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ee:	e8 7f e2 ff ff       	call   c0004c72 <follow_path>
c00069f3:	85 c0                	test   eax,eax
c00069f5:	75 53                	jne    c0006a4a <f_chmod+0xc3>
c00069f7:	b8 06 00 00 00       	mov    eax,0x6
c00069fc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a01:	75 47                	jne    c0006a4a <f_chmod+0xc3>
c0006a03:	89 f9                	mov    ecx,edi
c0006a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a09:	83 e1 27             	and    ecx,0x27
c0006a0c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a0f:	75 1d                	jne    c0006a2e <f_chmod+0xa7>
c0006a11:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a14:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a17:	21 cb                	and    ebx,ecx
c0006a19:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a1c:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 a2 cf ff ff       	call   c00039ca <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1e                	jne    c0006a4a <f_chmod+0xc3>
c0006a2c:	eb 13                	jmp    c0006a41 <f_chmod+0xba>
c0006a2e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a32:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a35:	21 cb                	and    ebx,ecx
c0006a37:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a3a:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a45:	e8 2b d9 ff ff       	call   c0004375 <sync_fs>
c0006a4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4e:	83 ec 0c             	sub    esp,0xc
c0006a51:	56                   	push   esi
c0006a52:	e8 5e 18 00 00       	call   c00082b5 <ff_memfree>
c0006a57:	83 c4 10             	add    esp,0x10
c0006a5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5e:	83 c4 60             	add    esp,0x60
c0006a61:	5b                   	pop    ebx
c0006a62:	5e                   	pop    esi
c0006a63:	5f                   	pop    edi
c0006a64:	c3                   	ret    

c0006a65 <f_utime>:
c0006a65:	56                   	push   esi
c0006a66:	b9 02 00 00 00       	mov    ecx,0x2
c0006a6b:	53                   	push   ebx
c0006a6c:	83 ec 64             	sub    esp,0x64
c0006a6f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a73:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a77:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a7b:	e8 7c ba ff ff       	call   c00024fc <mount_volume>
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 b5 00 00 00    	jne    c0006b3d <f_utime+0xd8>
c0006a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8c:	83 ec 0c             	sub    esp,0xc
c0006a8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a93:	68 60 04 00 00       	push   0x460
c0006a98:	e8 02 18 00 00       	call   c000829f <ff_memalloc>
c0006a9d:	83 c4 10             	add    esp,0x10
c0006aa0:	89 c3                	mov    ebx,eax
c0006aa2:	b8 11 00 00 00       	mov    eax,0x11
c0006aa7:	85 db                	test   ebx,ebx
c0006aa9:	0f 84 8e 00 00 00    	je     c0006b3d <f_utime+0xd8>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ab9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006abc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006abf:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ac3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac7:	e8 a6 e1 ff ff       	call   c0004c72 <follow_path>
c0006acc:	85 c0                	test   eax,eax
c0006ace:	75 59                	jne    c0006b29 <f_utime+0xc4>
c0006ad0:	b8 06 00 00 00       	mov    eax,0x6
c0006ad5:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ada:	75 4d                	jne    c0006b29 <f_utime+0xc4>
c0006adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ae0:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ae4:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ae8:	c1 e2 10             	shl    edx,0x10
c0006aeb:	09 ca                	or     edx,ecx
c0006aed:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af0:	75 1a                	jne    c0006b0c <f_utime+0xa7>
c0006af2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006af5:	83 c0 0c             	add    eax,0xc
c0006af8:	e8 e5 af ff ff       	call   c0001ae2 <st_dword>
c0006afd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b01:	e8 c4 ce ff ff       	call   c00039ca <store_xdir>
c0006b06:	85 c0                	test   eax,eax
c0006b08:	75 1f                	jne    c0006b29 <f_utime+0xc4>
c0006b0a:	eb 14                	jmp    c0006b20 <f_utime+0xbb>
c0006b0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b10:	83 c0 16             	add    eax,0x16
c0006b13:	e8 ca af ff ff       	call   c0001ae2 <st_dword>
c0006b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b24:	e8 4c d8 ff ff       	call   c0004375 <sync_fs>
c0006b29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b2d:	83 ec 0c             	sub    esp,0xc
c0006b30:	53                   	push   ebx
c0006b31:	e8 7f 17 00 00       	call   c00082b5 <ff_memfree>
c0006b36:	83 c4 10             	add    esp,0x10
c0006b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b3d:	83 c4 64             	add    esp,0x64
c0006b40:	5b                   	pop    ebx
c0006b41:	5e                   	pop    esi
c0006b42:	c3                   	ret    

c0006b43 <f_getlabel>:
c0006b43:	55                   	push   ebp
c0006b44:	31 c9                	xor    ecx,ecx
c0006b46:	57                   	push   edi
c0006b47:	56                   	push   esi
c0006b48:	53                   	push   ebx
c0006b49:	83 ec 6c             	sub    esp,0x6c
c0006b4c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b50:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b57:	e8 a0 b9 ff ff       	call   c00024fc <mount_volume>
c0006b5c:	89 c6                	mov    esi,eax
c0006b5e:	85 c0                	test   eax,eax
c0006b60:	0f 85 c1 01 00 00    	jne    c0006d27 <f_getlabel+0x1e4>
c0006b66:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b6e:	0f 84 5f 01 00 00    	je     c0006cd3 <f_getlabel+0x190>
c0006b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b78:	31 d2                	xor    edx,edx
c0006b7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b7e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b8a:	e8 39 c4 ff ff       	call   c0002fc8 <dir_sdi>
c0006b8f:	85 c0                	test   eax,eax
c0006b91:	0f 85 2d 01 00 00    	jne    c0006cc4 <f_getlabel+0x181>
c0006b97:	ba 01 00 00 00       	mov    edx,0x1
c0006b9c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba0:	e8 33 cc ff ff       	call   c00037d8 <dir_read>
c0006ba5:	85 c0                	test   eax,eax
c0006ba7:	0f 85 17 01 00 00    	jne    c0006cc4 <f_getlabel+0x181>
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bb4:	74 09                	je     c0006bbf <f_getlabel+0x7c>
c0006bb6:	31 db                	xor    ebx,ebx
c0006bb8:	31 c9                	xor    ecx,ecx
c0006bba:	e9 c8 00 00 00       	jmp    c0006c87 <f_getlabel+0x144>
c0006bbf:	31 ed                	xor    ebp,ebp
c0006bc1:	31 db                	xor    ebx,ebx
c0006bc3:	31 ff                	xor    edi,edi
c0006bc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bc9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bcd:	39 fa                	cmp    edx,edi
c0006bcf:	76 4b                	jbe    c0006c1c <f_getlabel+0xd9>
c0006bd1:	47                   	inc    edi
c0006bd2:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bd5:	01 d0                	add    eax,edx
c0006bd7:	e8 90 ae ff ff       	call   c0001a6c <ld_word>
c0006bdc:	66 85 ed             	test   bp,bp
c0006bdf:	75 0d                	jne    c0006bee <f_getlabel+0xab>
c0006be1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006be7:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bec:	76 28                	jbe    c0006c16 <f_getlabel+0xd3>
c0006bee:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf5:	89 e9                	mov    ecx,ebp
c0006bf7:	01 da                	add    edx,ebx
c0006bf9:	c1 e1 10             	shl    ecx,0x10
c0006bfc:	0f b7 c0             	movzx  eax,ax
c0006bff:	09 c8                	or     eax,ecx
c0006c01:	b9 04 00 00 00       	mov    ecx,0x4
c0006c06:	e8 01 b0 ff ff       	call   c0001c0c <put_utf>
c0006c0b:	84 c0                	test   al,al
c0006c0d:	74 0b                	je     c0006c1a <f_getlabel+0xd7>
c0006c0f:	0f b6 c0             	movzx  eax,al
c0006c12:	01 c3                	add    ebx,eax
c0006c14:	31 c0                	xor    eax,eax
c0006c16:	89 c5                	mov    ebp,eax
c0006c18:	eb ab                	jmp    c0006bc5 <f_getlabel+0x82>
c0006c1a:	31 db                	xor    ebx,ebx
c0006c1c:	66 85 ed             	test   bp,bp
c0006c1f:	74 02                	je     c0006c23 <f_getlabel+0xe0>
c0006c21:	31 db                	xor    ebx,ebx
c0006c23:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c2a:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c2e:	e9 a0 00 00 00       	jmp    c0006cd3 <f_getlabel+0x190>
c0006c33:	83 ff 0b             	cmp    edi,0xb
c0006c36:	74 11                	je     c0006c49 <f_getlabel+0x106>
c0006c38:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c41:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c44:	c1 e0 08             	shl    eax,0x8
c0006c47:	09 c2                	or     edx,eax
c0006c49:	0f b7 d2             	movzx  edx,dx
c0006c4c:	50                   	push   eax
c0006c4d:	50                   	push   eax
c0006c4e:	68 b5 01 00 00       	push   0x1b5
c0006c53:	52                   	push   edx
c0006c54:	e8 03 17 00 00       	call   c000835c <ff_oem2uni>
c0006c59:	83 c4 10             	add    esp,0x10
c0006c5c:	66 85 c0             	test   ax,ax
c0006c5f:	74 46                	je     c0006ca7 <f_getlabel+0x164>
c0006c61:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c68:	0f b7 c0             	movzx  eax,ax
c0006c6b:	01 da                	add    edx,ebx
c0006c6d:	b9 04 00 00 00       	mov    ecx,0x4
c0006c72:	e8 95 af ff ff       	call   c0001c0c <put_utf>
c0006c77:	84 c0                	test   al,al
c0006c79:	74 2c                	je     c0006ca7 <f_getlabel+0x164>
c0006c7b:	0f b6 c0             	movzx  eax,al
c0006c7e:	01 c3                	add    ebx,eax
c0006c80:	83 ff 0b             	cmp    edi,0xb
c0006c83:	74 24                	je     c0006ca9 <f_getlabel+0x166>
c0006c85:	89 f9                	mov    ecx,edi
c0006c87:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c8b:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c8e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c93:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c9c:	e8 9f ae ff ff       	call   c0001b40 <dbc_1st>
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 a4                	je     c0006c49 <f_getlabel+0x106>
c0006ca5:	eb 8c                	jmp    c0006c33 <f_getlabel+0xf0>
c0006ca7:	31 db                	xor    ebx,ebx
c0006ca9:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006cb0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006cb3:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006cba:	74 17                	je     c0006cd3 <f_getlabel+0x190>
c0006cbc:	4b                   	dec    ebx
c0006cbd:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006cc0:	74 ee                	je     c0006cb0 <f_getlabel+0x16d>
c0006cc2:	eb 0f                	jmp    c0006cd3 <f_getlabel+0x190>
c0006cc4:	83 f8 04             	cmp    eax,0x4
c0006cc7:	75 5c                	jne    c0006d25 <f_getlabel+0x1e2>
c0006cc9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cd0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cd3:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cdb:	74 4a                	je     c0006d27 <f_getlabel+0x1e4>
c0006cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ce1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ce4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ce7:	e8 5e b5 ff ff       	call   c000224a <move_window>
c0006cec:	89 c6                	mov    esi,eax
c0006cee:	85 c0                	test   eax,eax
c0006cf0:	75 35                	jne    c0006d27 <f_getlabel+0x1e4>
c0006cf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cf6:	b8 43 00 00 00       	mov    eax,0x43
c0006cfb:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cfd:	80 f9 03             	cmp    cl,0x3
c0006d00:	74 0f                	je     c0006d11 <f_getlabel+0x1ce>
c0006d02:	31 c0                	xor    eax,eax
c0006d04:	80 f9 04             	cmp    cl,0x4
c0006d07:	0f 94 c0             	sete   al
c0006d0a:	48                   	dec    eax
c0006d0b:	83 e0 c3             	and    eax,0xffffffc3
c0006d0e:	83 c0 64             	add    eax,0x64
c0006d11:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006d15:	e8 5f ad ff ff       	call   c0001a79 <ld_dword>
c0006d1a:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d21:	89 07                	mov    DWORD PTR [edi],eax
c0006d23:	eb 02                	jmp    c0006d27 <f_getlabel+0x1e4>
c0006d25:	89 c6                	mov    esi,eax
c0006d27:	83 c4 6c             	add    esp,0x6c
c0006d2a:	89 f0                	mov    eax,esi
c0006d2c:	5b                   	pop    ebx
c0006d2d:	5e                   	pop    esi
c0006d2e:	5f                   	pop    edi
c0006d2f:	5d                   	pop    ebp
c0006d30:	c3                   	ret    

c0006d31 <f_setlabel>:
c0006d31:	56                   	push   esi
c0006d32:	b9 02 00 00 00       	mov    ecx,0x2
c0006d37:	53                   	push   ebx
c0006d38:	83 ec 74             	sub    esp,0x74
c0006d3b:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d46:	e8 b1 b7 ff ff       	call   c00024fc <mount_volume>
c0006d4b:	89 c6                	mov    esi,eax
c0006d4d:	85 c0                	test   eax,eax
c0006d4f:	0f 85 41 02 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d59:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d5c:	0f 85 8e 00 00 00    	jne    c0006df0 <f_setlabel+0xbf>
c0006d62:	b9 16 00 00 00       	mov    ecx,0x16
c0006d67:	31 d2                	xor    edx,edx
c0006d69:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d6d:	31 db                	xor    ebx,ebx
c0006d6f:	e8 8c ad ff ff       	call   c0001b00 <mem_set>
c0006d74:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d7b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d7e:	0f 86 0a 01 00 00    	jbe    c0006e8e <f_setlabel+0x15d>
c0006d84:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d8b:	e8 b6 ad ff ff       	call   c0001b46 <tchar2uni>
c0006d90:	89 c6                	mov    esi,eax
c0006d92:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d97:	76 2a                	jbe    c0006dc3 <f_setlabel+0x92>
c0006d99:	83 f8 ff             	cmp    eax,0xffffffff
c0006d9c:	74 05                	je     c0006da3 <f_setlabel+0x72>
c0006d9e:	83 fb 09             	cmp    ebx,0x9
c0006da1:	76 0a                	jbe    c0006dad <f_setlabel+0x7c>
c0006da3:	be 06 00 00 00       	mov    esi,0x6
c0006da8:	e9 e9 01 00 00       	jmp    c0006f96 <f_setlabel+0x265>
c0006dad:	89 c2                	mov    edx,eax
c0006daf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006db6:	c1 ea 10             	shr    edx,0x10
c0006db9:	01 c8                	add    eax,ecx
c0006dbb:	43                   	inc    ebx
c0006dbc:	e8 1d ad ff ff       	call   c0001ade <st_word>
c0006dc1:	eb 04                	jmp    c0006dc7 <f_setlabel+0x96>
c0006dc3:	85 c0                	test   eax,eax
c0006dc5:	74 dc                	je     c0006da3 <f_setlabel+0x72>
c0006dc7:	89 f2                	mov    edx,esi
c0006dc9:	b8 77 01 02 c0       	mov    eax,0xc0020177
c0006dce:	e8 5b ad ff ff       	call   c0001b2e <chk_chr>
c0006dd3:	85 c0                	test   eax,eax
c0006dd5:	75 cc                	jne    c0006da3 <f_setlabel+0x72>
c0006dd7:	83 fb 0a             	cmp    ebx,0xa
c0006dda:	77 c7                	ja     c0006da3 <f_setlabel+0x72>
c0006ddc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ddf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006de3:	0f b7 d6             	movzx  edx,si
c0006de6:	01 c8                	add    eax,ecx
c0006de8:	43                   	inc    ebx
c0006de9:	e8 f0 ac ff ff       	call   c0001ade <st_word>
c0006dee:	eb 84                	jmp    c0006d74 <f_setlabel+0x43>
c0006df0:	b9 0b 00 00 00       	mov    ecx,0xb
c0006df5:	ba 20 00 00 00       	mov    edx,0x20
c0006dfa:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dfe:	31 db                	xor    ebx,ebx
c0006e00:	e8 fb ac ff ff       	call   c0001b00 <mem_set>
c0006e05:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e0f:	76 60                	jbe    c0006e71 <f_setlabel+0x140>
c0006e11:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e18:	e8 29 ad ff ff       	call   c0001b46 <tchar2uni>
c0006e1d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e22:	0f 87 7b ff ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006e28:	83 ec 0c             	sub    esp,0xc
c0006e2b:	50                   	push   eax
c0006e2c:	e8 97 15 00 00       	call   c00083c8 <ff_wtoupper>
c0006e31:	5a                   	pop    edx
c0006e32:	59                   	pop    ecx
c0006e33:	68 b5 01 00 00       	push   0x1b5
c0006e38:	50                   	push   eax
c0006e39:	e8 8e 14 00 00       	call   c00082cc <ff_uni2oem>
c0006e3e:	83 c4 10             	add    esp,0x10
c0006e41:	89 c6                	mov    esi,eax
c0006e43:	66 85 c0             	test   ax,ax
c0006e46:	0f 84 57 ff ff ff    	je     c0006da3 <f_setlabel+0x72>
c0006e4c:	0f b7 d0             	movzx  edx,ax
c0006e4f:	b8 70 01 02 c0       	mov    eax,0xc0020170
c0006e54:	e8 d5 ac ff ff       	call   c0001b2e <chk_chr>
c0006e59:	85 c0                	test   eax,eax
c0006e5b:	0f 85 42 ff ff ff    	jne    c0006da3 <f_setlabel+0x72>
c0006e61:	66 81 fe ff 00       	cmp    si,0xff
c0006e66:	0f 87 14 01 00 00    	ja     c0006f80 <f_setlabel+0x24f>
c0006e6c:	e9 fa 00 00 00       	jmp    c0006f6b <f_setlabel+0x23a>
c0006e71:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e76:	0f 84 27 ff ff ff    	je     c0006da3 <f_setlabel+0x72>
c0006e7c:	85 db                	test   ebx,ebx
c0006e7e:	74 0e                	je     c0006e8e <f_setlabel+0x15d>
c0006e80:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e83:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e88:	75 04                	jne    c0006e8e <f_setlabel+0x15d>
c0006e8a:	89 c3                	mov    ebx,eax
c0006e8c:	eb ee                	jmp    c0006e7c <f_setlabel+0x14b>
c0006e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e92:	31 d2                	xor    edx,edx
c0006e94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006ea0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea4:	e8 1f c1 ff ff       	call   c0002fc8 <dir_sdi>
c0006ea9:	89 c6                	mov    esi,eax
c0006eab:	85 c0                	test   eax,eax
c0006ead:	0f 85 e3 00 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006eb3:	ba 01 00 00 00       	mov    edx,0x1
c0006eb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ebc:	e8 17 c9 ff ff       	call   c00037d8 <dir_read>
c0006ec1:	85 c0                	test   eax,eax
c0006ec3:	75 21                	jne    c0006ee6 <f_setlabel+0x1b5>
c0006ec5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecd:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ed0:	74 5d                	je     c0006f2f <f_setlabel+0x1fe>
c0006ed2:	85 db                	test   ebx,ebx
c0006ed4:	74 0b                	je     c0006ee1 <f_setlabel+0x1b0>
c0006ed6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edb:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edf:	eb 70                	jmp    c0006f51 <f_setlabel+0x220>
c0006ee1:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ee4:	eb 70                	jmp    c0006f56 <f_setlabel+0x225>
c0006ee6:	83 f8 04             	cmp    eax,0x4
c0006ee9:	75 7c                	jne    c0006f67 <f_setlabel+0x236>
c0006eeb:	85 db                	test   ebx,ebx
c0006eed:	0f 84 a3 00 00 00    	je     c0006f96 <f_setlabel+0x265>
c0006ef3:	ba 01 00 00 00       	mov    edx,0x1
c0006ef8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006efc:	e8 51 ca ff ff       	call   c0003952 <dir_alloc>
c0006f01:	89 c6                	mov    esi,eax
c0006f03:	85 c0                	test   eax,eax
c0006f05:	0f 85 8b 00 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006f0b:	31 d2                	xor    edx,edx
c0006f0d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f11:	b9 20 00 00 00       	mov    ecx,0x20
c0006f16:	e8 e5 ab ff ff       	call   c0001b00 <mem_set>
c0006f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f1f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f22:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f26:	75 18                	jne    c0006f40 <f_setlabel+0x20f>
c0006f28:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f32:	b9 16 00 00 00       	mov    ecx,0x16
c0006f37:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f3b:	83 c0 02             	add    eax,0x2
c0006f3e:	eb 9b                	jmp    c0006edb <f_setlabel+0x1aa>
c0006f40:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f44:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f49:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f51:	e8 95 ab ff ff       	call   c0001aeb <mem_cpy>
c0006f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f62:	e8 0e d4 ff ff       	call   c0004375 <sync_fs>
c0006f67:	89 c6                	mov    esi,eax
c0006f69:	eb 2b                	jmp    c0006f96 <f_setlabel+0x265>
c0006f6b:	83 fb 0a             	cmp    ebx,0xa
c0006f6e:	0f 87 2f fe ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f7a:	43                   	inc    ebx
c0006f7b:	e9 85 fe ff ff       	jmp    c0006e05 <f_setlabel+0xd4>
c0006f80:	83 fb 09             	cmp    ebx,0x9
c0006f83:	0f 87 1a fe ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006f89:	89 f0                	mov    eax,esi
c0006f8b:	66 c1 e8 08          	shr    ax,0x8
c0006f8f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f93:	43                   	inc    ebx
c0006f94:	eb de                	jmp    c0006f74 <f_setlabel+0x243>
c0006f96:	89 f0                	mov    eax,esi
c0006f98:	83 c4 74             	add    esp,0x74
c0006f9b:	5b                   	pop    ebx
c0006f9c:	5e                   	pop    esi
c0006f9d:	c3                   	ret    

c0006f9e <f_forward>:
c0006f9e:	55                   	push   ebp
c0006f9f:	57                   	push   edi
c0006fa0:	56                   	push   esi
c0006fa1:	53                   	push   ebx
c0006fa2:	83 ec 2c             	sub    esp,0x2c
c0006fa5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006fa9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006fad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006fb3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006fb7:	89 d8                	mov    eax,ebx
c0006fb9:	e8 b1 b1 ff ff       	call   c000216f <validate>
c0006fbe:	89 c5                	mov    ebp,eax
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	0f 85 aa 01 00 00    	jne    c0007172 <f_forward+0x1d4>
c0006fc8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fcc:	85 ed                	test   ebp,ebp
c0006fce:	0f 85 9e 01 00 00    	jne    c0007172 <f_forward+0x1d4>
c0006fd4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fd8:	0f 84 8f 01 00 00    	je     c000716d <f_forward+0x1cf>
c0006fde:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fe1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fe4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fe7:	bf 00 00 00 00       	mov    edi,0x0
c0006fec:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fef:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ff3:	89 d1                	mov    ecx,edx
c0006ff5:	19 f9                	sbb    ecx,edi
c0006ff7:	0f 83 cf 00 00 00    	jae    c00070cc <f_forward+0x12e>
c0006ffd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007001:	e9 c6 00 00 00       	jmp    c00070cc <f_forward+0x12e>
c0007006:	50                   	push   eax
c0007007:	50                   	push   eax
c0007008:	6a 00                	push   0x0
c000700a:	6a 00                	push   0x0
c000700c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007010:	83 c4 10             	add    esp,0x10
c0007013:	85 c0                	test   eax,eax
c0007015:	0f 84 57 01 00 00    	je     c0007172 <f_forward+0x1d4>
c000701b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007022:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007025:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007029:	89 d7                	mov    edi,edx
c000702b:	8d 4e ff             	lea    ecx,[esi-0x1]
c000702e:	89 c6                	mov    esi,eax
c0007030:	0f ac fe 09          	shrd   esi,edi,0x9
c0007034:	21 ce                	and    esi,ecx
c0007036:	89 c1                	mov    ecx,eax
c0007038:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000703e:	0f 84 98 00 00 00    	je     c00070dc <f_forward+0x13e>
c0007044:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007048:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000704b:	89 c8                	mov    eax,ecx
c000704d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007051:	e8 af ac ff ff       	call   c0001d05 <clst2sect>
c0007056:	89 d7                	mov    edi,edx
c0007058:	09 c7                	or     edi,eax
c000705a:	0f 84 9e 00 00 00    	je     c00070fe <f_forward+0x160>
c0007060:	31 ff                	xor    edi,edi
c0007062:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007065:	01 c6                	add    esi,eax
c0007067:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000706b:	11 d7                	adc    edi,edx
c000706d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007070:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007073:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007077:	39 fa                	cmp    edx,edi
c0007079:	0f 85 a2 00 00 00    	jne    c0007121 <f_forward+0x183>
c000707f:	39 f0                	cmp    eax,esi
c0007081:	0f 85 9a 00 00 00    	jne    c0007121 <f_forward+0x183>
c0007087:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000708a:	ba 00 02 00 00       	mov    edx,0x200
c000708f:	25 ff 01 00 00       	and    eax,0x1ff
c0007094:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007098:	29 c2                	sub    edx,eax
c000709a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000709d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00070a0:	39 d1                	cmp    ecx,edx
c00070a2:	76 02                	jbe    c00070a6 <f_forward+0x108>
c00070a4:	89 d1                	mov    ecx,edx
c00070a6:	8d 73 50             	lea    esi,[ebx+0x50]
c00070a9:	52                   	push   edx
c00070aa:	01 c6                	add    esi,eax
c00070ac:	52                   	push   edx
c00070ad:	51                   	push   ecx
c00070ae:	56                   	push   esi
c00070af:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00070b3:	83 c4 10             	add    esp,0x10
c00070b6:	85 c0                	test   eax,eax
c00070b8:	74 44                	je     c00070fe <f_forward+0x160>
c00070ba:	31 ff                	xor    edi,edi
c00070bc:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070bf:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070c2:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070c6:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070ca:	01 07                	add    DWORD PTR [edi],eax
c00070cc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070d1:	0f 85 2f ff ff ff    	jne    c0007006 <f_forward+0x68>
c00070d7:	e9 96 00 00 00       	jmp    c0007172 <f_forward+0x1d4>
c00070dc:	85 f6                	test   esi,esi
c00070de:	0f 85 60 ff ff ff    	jne    c0007044 <f_forward+0xa6>
c00070e4:	89 d7                	mov    edi,edx
c00070e6:	09 c7                	or     edi,eax
c00070e8:	75 05                	jne    c00070ef <f_forward+0x151>
c00070ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070ed:	eb 0a                	jmp    c00070f9 <f_forward+0x15b>
c00070ef:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070f2:	89 d8                	mov    eax,ebx
c00070f4:	e8 d9 bc ff ff       	call   c0002dd2 <get_fat>
c00070f9:	83 f8 01             	cmp    eax,0x1
c00070fc:	77 0b                	ja     c0007109 <f_forward+0x16b>
c00070fe:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007102:	bd 02 00 00 00       	mov    ebp,0x2
c0007107:	eb 69                	jmp    c0007172 <f_forward+0x1d4>
c0007109:	83 f8 ff             	cmp    eax,0xffffffff
c000710c:	75 0b                	jne    c0007119 <f_forward+0x17b>
c000710e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007112:	bd 01 00 00 00       	mov    ebp,0x1
c0007117:	eb 59                	jmp    c0007172 <f_forward+0x1d4>
c0007119:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000711c:	e9 23 ff ff ff       	jmp    c0007044 <f_forward+0xa6>
c0007121:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007125:	79 20                	jns    c0007147 <f_forward+0x1a9>
c0007127:	83 ec 0c             	sub    esp,0xc
c000712a:	6a 01                	push   0x1
c000712c:	52                   	push   edx
c000712d:	50                   	push   eax
c000712e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007132:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007136:	50                   	push   eax
c0007137:	e8 fb a8 ff ff       	call   c0001a37 <disk_write>
c000713c:	83 c4 20             	add    esp,0x20
c000713f:	85 c0                	test   eax,eax
c0007141:	75 cb                	jne    c000710e <f_forward+0x170>
c0007143:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007147:	83 ec 0c             	sub    esp,0xc
c000714a:	6a 01                	push   0x1
c000714c:	57                   	push   edi
c000714d:	56                   	push   esi
c000714e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007152:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007156:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000715a:	50                   	push   eax
c000715b:	e8 c1 a8 ff ff       	call   c0001a21 <disk_read>
c0007160:	83 c4 20             	add    esp,0x20
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 1c ff ff ff    	je     c0007087 <f_forward+0xe9>
c000716b:	eb a1                	jmp    c000710e <f_forward+0x170>
c000716d:	bd 07 00 00 00       	mov    ebp,0x7
c0007172:	83 c4 2c             	add    esp,0x2c
c0007175:	89 e8                	mov    eax,ebp
c0007177:	5b                   	pop    ebx
c0007178:	5e                   	pop    esi
c0007179:	5f                   	pop    edi
c000717a:	5d                   	pop    ebp
c000717b:	c3                   	ret    

c000717c <f_mkfs>:
c000717c:	55                   	push   ebp
c000717d:	57                   	push   edi
c000717e:	56                   	push   esi
c000717f:	53                   	push   ebx
c0007180:	bb 0b 00 00 00       	mov    ebx,0xb
c0007185:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000718b:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007192:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007199:	e8 b0 ae ff ff       	call   c000204e <get_ldnumber>
c000719e:	85 c0                	test   eax,eax
c00071a0:	0f 88 ec 10 00 00    	js     c0008292 <f_mkfs+0x1116>
c00071a6:	8b 14 85 60 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbca0]
c00071ad:	85 d2                	test   edx,edx
c00071af:	74 03                	je     c00071b4 <f_mkfs+0x38>
c00071b1:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00071b4:	85 f6                	test   esi,esi
c00071b6:	75 05                	jne    c00071bd <f_mkfs+0x41>
c00071b8:	be 60 01 02 c0       	mov    esi,0xc0020160
c00071bd:	83 ec 0c             	sub    esp,0xc
c00071c0:	0f b6 c0             	movzx  eax,al
c00071c3:	bb 03 00 00 00       	mov    ebx,0x3
c00071c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d0:	e8 49 a8 ff ff       	call   c0001a1e <disk_initialize>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	a8 01                	test   al,0x1
c00071da:	0f 85 b2 10 00 00    	jne    c0008292 <f_mkfs+0x1116>
c00071e0:	bb 0a 00 00 00       	mov    ebx,0xa
c00071e5:	a8 04                	test   al,0x4
c00071e7:	0f 85 a5 10 00 00    	jne    c0008292 <f_mkfs+0x1116>
c00071ed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071f0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071f4:	85 c0                	test   eax,eax
c00071f6:	75 20                	jne    c0007218 <f_mkfs+0x9c>
c00071f8:	51                   	push   ecx
c00071f9:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071fd:	50                   	push   eax
c00071fe:	6a 03                	push   0x3
c0007200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007204:	e8 44 a8 ff ff       	call   c0001a4d <disk_ioctl>
c0007209:	83 c4 10             	add    esp,0x10
c000720c:	85 c0                	test   eax,eax
c000720e:	74 08                	je     c0007218 <f_mkfs+0x9c>
c0007210:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007218:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000721c:	8d 42 ff             	lea    eax,[edx-0x1]
c000721f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007224:	77 04                	ja     c000722a <f_mkfs+0xae>
c0007226:	85 c2                	test   edx,eax
c0007228:	74 08                	je     c0007232 <f_mkfs+0xb6>
c000722a:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007232:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007235:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007239:	48                   	dec    eax
c000723a:	3c 01                	cmp    al,0x1
c000723c:	76 05                	jbe    c0007243 <f_mkfs+0xc7>
c000723e:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007243:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000724a:	48                   	dec    eax
c000724b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007250:	77 07                	ja     c0007259 <f_mkfs+0xdd>
c0007252:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007257:	74 08                	je     c0007261 <f_mkfs+0xe5>
c0007259:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007261:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007264:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000726a:	77 07                	ja     c0007273 <f_mkfs+0xf7>
c000726c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000726f:	85 d8                	test   eax,ebx
c0007271:	74 02                	je     c0007275 <f_mkfs+0xf9>
c0007273:	31 db                	xor    ebx,ebx
c0007275:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007280:	77 0a                	ja     c000728c <f_mkfs+0x110>
c0007282:	bb 11 00 00 00       	mov    ebx,0x11
c0007287:	e9 06 10 00 00       	jmp    c0008292 <f_mkfs+0x1116>
c000728c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007293:	8b 36                	mov    esi,DWORD PTR [esi]
c0007295:	85 ed                	test   ebp,ebp
c0007297:	75 1e                	jne    c00072b7 <f_mkfs+0x13b>
c0007299:	83 ec 0c             	sub    esp,0xc
c000729c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00072a3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00072a8:	50                   	push   eax
c00072a9:	e8 f1 0f 00 00       	call   c000829f <ff_memalloc>
c00072ae:	83 c4 10             	add    esp,0x10
c00072b1:	89 c5                	mov    ebp,eax
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 cb                	je     c0007282 <f_mkfs+0x106>
c00072b7:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072bf:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072c7:	52                   	push   edx
c00072c8:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072cc:	50                   	push   eax
c00072cd:	6a 01                	push   0x1
c00072cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072d3:	e8 75 a7 ff ff       	call   c0001a4d <disk_ioctl>
c00072d8:	83 c4 10             	add    esp,0x10
c00072db:	85 c0                	test   eax,eax
c00072dd:	0f 85 4a 0f 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00072e3:	89 f1                	mov    ecx,esi
c00072e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072ed:	83 e1 0f             	and    ecx,0xf
c00072f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072f8:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072fc:	83 e6 08             	and    esi,0x8
c00072ff:	75 56                	jne    c0007357 <f_mkfs+0x1db>
c0007301:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007305:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007309:	83 ff 00             	cmp    edi,0x0
c000730c:	76 20                	jbe    c000732e <f_mkfs+0x1b2>
c000730e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007313:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000731b:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007321:	83 d7 ff             	adc    edi,0xffffffff
c0007324:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007328:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732c:	eb 21                	jmp    c000734f <f_mkfs+0x1d3>
c000732e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007333:	39 f2                	cmp    edx,esi
c0007335:	19 f8                	sbb    eax,edi
c0007337:	73 1e                	jae    c0007357 <f_mkfs+0x1db>
c0007339:	83 c6 c1             	add    esi,0xffffffc1
c000733c:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007344:	83 d7 ff             	adc    edi,0xffffffff
c0007347:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000734b:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000734f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007357:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000735b:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000735f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007362:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007366:	31 c0                	xor    eax,eax
c0007368:	ba 7f 00 00 00       	mov    edx,0x7f
c000736d:	89 c7                	mov    edi,eax
c000736f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007372:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007376:	0f 83 c5 0a 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c000737c:	89 df                	mov    edi,ebx
c000737e:	c1 ef 09             	shr    edi,0x9
c0007381:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007385:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000738c:	c1 ef 09             	shr    edi,0x9
c000738f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007394:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007398:	74 29                	je     c00073c3 <f_mkfs+0x247>
c000739a:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a0:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00073a5:	0f 97 c2             	seta   dl
c00073a8:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00073ab:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073af:	0f 92 c0             	setb   al
c00073b2:	08 c2                	or     dl,al
c00073b4:	75 5b                	jne    c0007411 <f_mkfs+0x295>
c00073b6:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073ba:	83 e0 07             	and    eax,0x7
c00073bd:	3c 04                	cmp    al,0x4
c00073bf:	74 50                	je     c0007411 <f_mkfs+0x295>
c00073c1:	eb 1b                	jmp    c00073de <f_mkfs+0x262>
c00073c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073c8:	0f 87 73 0a 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c00073ce:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073d4:	76 08                	jbe    c00073de <f_mkfs+0x262>
c00073d6:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073de:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073e2:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073e6:	83 e0 01             	and    eax,0x1
c00073e9:	80 e1 02             	and    cl,0x2
c00073ec:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073f0:	74 0d                	je     c00073ff <f_mkfs+0x283>
c00073f2:	84 c0                	test   al,al
c00073f4:	0f 84 53 09 00 00    	je     c0007d4d <f_mkfs+0xbd1>
c00073fa:	e9 12 08 00 00       	jmp    c0007c11 <f_mkfs+0xa95>
c00073ff:	bb 13 00 00 00       	mov    ebx,0x13
c0007404:	84 c0                	test   al,al
c0007406:	0f 85 05 08 00 00    	jne    c0007c11 <f_mkfs+0xa95>
c000740c:	e9 39 0e 00 00       	jmp    c000824a <f_mkfs+0x10ce>
c0007411:	31 c0                	xor    eax,eax
c0007413:	ba ff 0f 00 00       	mov    edx,0xfff
c0007418:	89 c7                	mov    edi,eax
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007421:	0f 83 1a 0a 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c0007427:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000742d:	77 39                	ja     c0007468 <f_mkfs+0x2ec>
c000742f:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007434:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000743c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000743f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007443:	73 08                	jae    c000744d <f_mkfs+0x2d1>
c0007445:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000744d:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007452:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007455:	b8 00 00 00 00       	mov    eax,0x0
c000745a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000745e:	73 08                	jae    c0007468 <f_mkfs+0x2ec>
c0007460:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007470:	83 c0 20             	add    eax,0x20
c0007473:	83 d2 00             	adc    edx,0x0
c0007476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000747a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000747e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007482:	31 d2                	xor    edx,edx
c0007484:	31 ff                	xor    edi,edi
c0007486:	52                   	push   edx
c0007487:	89 fb                	mov    ebx,edi
c0007489:	50                   	push   eax
c000748a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000748e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007492:	e8 65 7d 01 00       	call   c001f1fc <__udivdi3>
c0007497:	83 c4 10             	add    esp,0x10
c000749a:	c1 e0 02             	shl    eax,0x2
c000749d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00074a1:	05 07 02 00 00       	add    eax,0x207
c00074a6:	89 f1                	mov    ecx,esi
c00074a8:	c1 e8 09             	shr    eax,0x9
c00074ab:	83 c1 ff             	add    ecx,0xffffffff
c00074ae:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00074b2:	83 d3 ff             	adc    ebx,0xffffffff
c00074b5:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074b9:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074bd:	31 d2                	xor    edx,edx
c00074bf:	01 c8                	add    eax,ecx
c00074c1:	11 da                	adc    edx,ebx
c00074c3:	89 c1                	mov    ecx,eax
c00074c5:	f7 de                	neg    esi
c00074c7:	89 d0                	mov    eax,edx
c00074c9:	83 d7 00             	adc    edi,0x0
c00074cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074d0:	f7 df                	neg    edi
c00074d2:	21 f1                	and    ecx,esi
c00074d4:	21 f8                	and    eax,edi
c00074d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074e6:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ed:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074f1:	0f ac d0 01          	shrd   eax,edx,0x1
c00074f5:	89 df                	mov    edi,ebx
c00074f7:	d1 ea                	shr    edx,1
c00074f9:	39 c1                	cmp    ecx,eax
c00074fb:	19 d7                	sbb    edi,edx
c00074fd:	0f 83 3e 09 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c0007503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007507:	31 d2                	xor    edx,edx
c0007509:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000750d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007511:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007515:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007518:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000751c:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007520:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007524:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007528:	83 f8 0f             	cmp    eax,0xf
c000752b:	0f 86 10 09 00 00    	jbe    c0007e41 <f_mkfs+0xcc5>
c0007531:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007539:	0f 87 02 09 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c000753f:	31 d2                	xor    edx,edx
c0007541:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007545:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000754d:	83 c0 07             	add    eax,0x7
c0007550:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007558:	c1 e8 03             	shr    eax,0x3
c000755b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007562:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000756a:	c1 e0 09             	shl    eax,0x9
c000756d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007571:	48                   	dec    eax
c0007572:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007576:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000757a:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000757e:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007582:	31 d2                	xor    edx,edx
c0007584:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007588:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000758f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007593:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007598:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000759c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00075a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00075a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00075a8:	31 ff                	xor    edi,edi
c00075aa:	31 f6                	xor    esi,esi
c00075ac:	31 db                	xor    ebx,ebx
c00075ae:	85 ff                	test   edi,edi
c00075b0:	74 05                	je     c00075b7 <f_mkfs+0x43b>
c00075b2:	4f                   	dec    edi
c00075b3:	74 44                	je     c00075f9 <f_mkfs+0x47d>
c00075b5:	eb 4f                	jmp    c0007606 <f_mkfs+0x48a>
c00075b7:	83 ec 0c             	sub    esp,0xc
c00075ba:	0f b7 c3             	movzx  eax,bx
c00075bd:	50                   	push   eax
c00075be:	e8 05 0e 00 00       	call   c00083c8 <ff_wtoupper>
c00075c3:	83 c4 10             	add    esp,0x10
c00075c6:	89 c1                	mov    ecx,eax
c00075c8:	8d 53 01             	lea    edx,[ebx+0x1]
c00075cb:	66 39 c3             	cmp    bx,ax
c00075ce:	75 3e                	jne    c000760e <f_mkfs+0x492>
c00075d0:	be 01 00 00 00       	mov    esi,0x1
c00075d5:	89 df                	mov    edi,ebx
c00075d7:	66 01 f7             	add    di,si
c00075da:	75 07                	jne    c00075e3 <f_mkfs+0x467>
c00075dc:	83 fe 7f             	cmp    esi,0x7f
c00075df:	77 31                	ja     c0007612 <f_mkfs+0x496>
c00075e1:	eb 16                	jmp    c00075f9 <f_mkfs+0x47d>
c00075e3:	83 ec 0c             	sub    esp,0xc
c00075e6:	0f b7 ff             	movzx  edi,di
c00075e9:	57                   	push   edi
c00075ea:	e8 d9 0d 00 00       	call   c00083c8 <ff_wtoupper>
c00075ef:	83 c4 10             	add    esp,0x10
c00075f2:	39 c7                	cmp    edi,eax
c00075f4:	75 e6                	jne    c00075dc <f_mkfs+0x460>
c00075f6:	46                   	inc    esi
c00075f7:	eb dc                	jmp    c00075d5 <f_mkfs+0x459>
c00075f9:	31 c0                	xor    eax,eax
c00075fb:	89 d9                	mov    ecx,ebx
c00075fd:	4e                   	dec    esi
c00075fe:	0f 95 c0             	setne  al
c0007601:	43                   	inc    ebx
c0007602:	89 c7                	mov    edi,eax
c0007604:	eb 14                	jmp    c000761a <f_mkfs+0x49e>
c0007606:	89 f1                	mov    ecx,esi
c0007608:	01 f3                	add    ebx,esi
c000760a:	31 ff                	xor    edi,edi
c000760c:	eb 0c                	jmp    c000761a <f_mkfs+0x49e>
c000760e:	89 d3                	mov    ebx,edx
c0007610:	eb 08                	jmp    c000761a <f_mkfs+0x49e>
c0007612:	bf 02 00 00 00       	mov    edi,0x2
c0007617:	83 c9 ff             	or     ecx,0xffffffff
c000761a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000761e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007621:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007625:	0f b6 c1             	movzx  eax,cl
c0007628:	e8 3a a9 ff ff       	call   c0001f67 <xsum32>
c000762d:	66 c1 e9 08          	shr    cx,0x8
c0007631:	89 c2                	mov    edx,eax
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000763a:	0f b7 c1             	movzx  eax,cx
c000763d:	e8 25 a9 ff ff       	call   c0001f67 <xsum32>
c0007642:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007647:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000764b:	66 85 db             	test   bx,bx
c000764e:	74 1f                	je     c000766f <f_mkfs+0x4f3>
c0007650:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007653:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000765a:	83 c0 02             	add    eax,0x2
c000765d:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007663:	39 c2                	cmp    edx,eax
c0007665:	74 08                	je     c000766f <f_mkfs+0x4f3>
c0007667:	89 04 24             	mov    DWORD PTR [esp],eax
c000766a:	e9 3f ff ff ff       	jmp    c00075ae <f_mkfs+0x432>
c000766f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007672:	83 ec 0c             	sub    esp,0xc
c0007675:	05 01 02 00 00       	add    eax,0x201
c000767a:	c1 e8 09             	shr    eax,0x9
c000767d:	50                   	push   eax
c000767e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007686:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000768a:	55                   	push   ebp
c000768b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000768f:	e8 a3 a3 ff ff       	call   c0001a37 <disk_write>
c0007694:	83 c4 20             	add    esp,0x20
c0007697:	85 c0                	test   eax,eax
c0007699:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000769c:	0f 85 8b 0b 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00076a2:	89 d0                	mov    eax,edx
c00076a4:	31 d2                	xor    edx,edx
c00076a6:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00076aa:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00076ae:	66 85 db             	test   bx,bx
c00076b1:	74 04                	je     c00076b7 <f_mkfs+0x53b>
c00076b3:	31 c0                	xor    eax,eax
c00076b5:	eb b0                	jmp    c0007667 <f_mkfs+0x4eb>
c00076b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076bb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076bf:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076c3:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076c9:	31 d2                	xor    edx,edx
c00076cb:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076d6:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076da:	c1 eb 09             	shr    ebx,0x9
c00076dd:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076e8:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076f0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076f4:	8d 70 01             	lea    esi,[eax+0x1]
c00076f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ff:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007706:	31 d2                	xor    edx,edx
c0007708:	25 00 fe ff ff       	and    eax,0xfffffe00
c000770d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007710:	89 c1                	mov    ecx,eax
c0007712:	89 e8                	mov    eax,ebp
c0007714:	e8 e7 a3 ff ff       	call   c0001b00 <mem_set>
c0007719:	31 c0                	xor    eax,eax
c000771b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771e:	76 10                	jbe    c0007730 <f_mkfs+0x5b4>
c0007720:	83 fe 07             	cmp    esi,0x7
c0007723:	76 0b                	jbe    c0007730 <f_mkfs+0x5b4>
c0007725:	40                   	inc    eax
c0007726:	83 ee 08             	sub    esi,0x8
c0007729:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000772e:	eb eb                	jmp    c000771b <f_mkfs+0x59f>
c0007730:	b2 01                	mov    dl,0x1
c0007732:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007736:	85 f6                	test   esi,esi
c0007738:	74 0c                	je     c0007746 <f_mkfs+0x5ca>
c000773a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000773d:	76 07                	jbe    c0007746 <f_mkfs+0x5ca>
c000773f:	08 11                	or     BYTE PTR [ecx],dl
c0007741:	4e                   	dec    esi
c0007742:	d1 e2                	shl    edx,1
c0007744:	eb f0                	jmp    c0007736 <f_mkfs+0x5ba>
c0007746:	89 df                	mov    edi,ebx
c0007748:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000774c:	76 04                	jbe    c0007752 <f_mkfs+0x5d6>
c000774e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007752:	83 ec 0c             	sub    esp,0xc
c0007755:	57                   	push   edi
c0007756:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000775a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000775e:	55                   	push   ebp
c000775f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007763:	e8 cf a2 ff ff       	call   c0001a37 <disk_write>
c0007768:	83 c4 20             	add    esp,0x20
c000776b:	85 c0                	test   eax,eax
c000776d:	0f 85 ba 0a 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007773:	31 d2                	xor    edx,edx
c0007775:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007779:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000777d:	29 fb                	sub    ebx,edi
c000777f:	0f 85 7a ff ff ff    	jne    c00076ff <f_mkfs+0x583>
c0007785:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007789:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007791:	31 f6                	xor    esi,esi
c0007793:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007797:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000779a:	31 d2                	xor    edx,edx
c000779c:	89 e8                	mov    eax,ebp
c000779e:	e8 5d a3 ff ff       	call   c0001b00 <mem_set>
c00077a3:	31 c9                	xor    ecx,ecx
c00077a5:	85 db                	test   ebx,ebx
c00077a7:	75 40                	jne    c00077e9 <f_mkfs+0x66d>
c00077a9:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00077ae:	89 e8                	mov    eax,ebp
c00077b0:	bb 02 00 00 00       	mov    ebx,0x2
c00077b5:	e8 28 a3 ff ff       	call   c0001ae2 <st_dword>
c00077ba:	8d 45 04             	lea    eax,[ebp+0x4]
c00077bd:	83 ca ff             	or     edx,0xffffffff
c00077c0:	e8 1d a3 ff ff       	call   c0001ae2 <st_dword>
c00077c5:	b9 08 00 00 00       	mov    ecx,0x8
c00077ca:	eb 1d                	jmp    c00077e9 <f_mkfs+0x66d>
c00077cc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077cf:	76 3b                	jbe    c000780c <f_mkfs+0x690>
c00077d1:	43                   	inc    ebx
c00077d2:	83 fe 01             	cmp    esi,0x1
c00077d5:	89 da                	mov    edx,ebx
c00077d7:	77 03                	ja     c00077dc <f_mkfs+0x660>
c00077d9:	83 ca ff             	or     edx,0xffffffff
c00077dc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077e0:	4e                   	dec    esi
c00077e1:	e8 fc a2 ff ff       	call   c0001ae2 <st_dword>
c00077e6:	83 c1 04             	add    ecx,0x4
c00077e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077ed:	85 f6                	test   esi,esi
c00077ef:	75 db                	jne    c00077cc <f_mkfs+0x650>
c00077f1:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077f6:	77 14                	ja     c000780c <f_mkfs+0x690>
c00077f8:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077fc:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007803:	85 f6                	test   esi,esi
c0007805:	74 05                	je     c000780c <f_mkfs+0x690>
c0007807:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000780a:	77 dd                	ja     c00077e9 <f_mkfs+0x66d>
c000780c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007810:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007814:	39 cf                	cmp    edi,ecx
c0007816:	76 02                	jbe    c000781a <f_mkfs+0x69e>
c0007818:	89 cf                	mov    edi,ecx
c000781a:	83 ec 0c             	sub    esp,0xc
c000781d:	57                   	push   edi
c000781e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007822:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007826:	55                   	push   ebp
c0007827:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000782b:	e8 07 a2 ff ff       	call   c0001a37 <disk_write>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	85 c0                	test   eax,eax
c0007835:	0f 85 f2 09 00 00    	jne    c000822d <f_mkfs+0x10b1>
c000783b:	31 d2                	xor    edx,edx
c000783d:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007841:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007845:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007849:	0f 85 48 ff ff ff    	jne    c0007797 <f_mkfs+0x61b>
c000784f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007852:	31 d2                	xor    edx,edx
c0007854:	89 e8                	mov    eax,ebp
c0007856:	31 ff                	xor    edi,edi
c0007858:	e8 a3 a2 ff ff       	call   c0001b00 <mem_set>
c000785d:	8d 45 34             	lea    eax,[ebp+0x34]
c0007860:	ba 02 00 00 00       	mov    edx,0x2
c0007865:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007869:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000786d:	e8 70 a2 ff ff       	call   c0001ae2 <st_dword>
c0007872:	8d 45 38             	lea    eax,[ebp+0x38]
c0007875:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007879:	e8 64 a2 ff ff       	call   c0001ae2 <st_dword>
c000787e:	8d 45 44             	lea    eax,[ebp+0x44]
c0007881:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007885:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007889:	e8 54 a2 ff ff       	call   c0001ae2 <st_dword>
c000788e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007891:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007895:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007899:	83 c2 02             	add    edx,0x2
c000789c:	e8 41 a2 ff ff       	call   c0001ae2 <st_dword>
c00078a1:	8d 45 58             	lea    eax,[ebp+0x58]
c00078a4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00078a8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00078ac:	e8 31 a2 ff ff       	call   c0001ae2 <st_dword>
c00078b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078ba:	89 c6                	mov    esi,eax
c00078bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c0:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078c7:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078cb:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078d2:	39 cb                	cmp    ebx,ecx
c00078d4:	76 02                	jbe    c00078d8 <f_mkfs+0x75c>
c00078d6:	89 cb                	mov    ebx,ecx
c00078d8:	83 ec 0c             	sub    esp,0xc
c00078db:	53                   	push   ebx
c00078dc:	57                   	push   edi
c00078dd:	56                   	push   esi
c00078de:	55                   	push   ebp
c00078df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078e3:	e8 4f a1 ff ff       	call   c0001a37 <disk_write>
c00078e8:	83 c4 20             	add    esp,0x20
c00078eb:	85 c0                	test   eax,eax
c00078ed:	0f 85 3a 09 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00078f3:	31 d2                	xor    edx,edx
c00078f5:	b9 00 02 00 00       	mov    ecx,0x200
c00078fa:	89 e8                	mov    eax,ebp
c00078fc:	e8 ff a1 ff ff       	call   c0001b00 <mem_set>
c0007901:	31 d2                	xor    edx,edx
c0007903:	01 de                	add    esi,ebx
c0007905:	11 d7                	adc    edi,edx
c0007907:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000790a:	75 bf                	jne    c00078cb <f_mkfs+0x74f>
c000790c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007910:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007914:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000791c:	b9 00 02 00 00       	mov    ecx,0x200
c0007921:	31 d2                	xor    edx,edx
c0007923:	89 e8                	mov    eax,ebp
c0007925:	e8 d6 a1 ff ff       	call   c0001b00 <mem_set>
c000792a:	b9 0b 00 00 00       	mov    ecx,0xb
c000792f:	ba 40 02 02 c0       	mov    edx,0xc0020240
c0007934:	89 e8                	mov    eax,ebp
c0007936:	e8 b0 a1 ff ff       	call   c0001aeb <mem_cpy>
c000793b:	8d 45 40             	lea    eax,[ebp+0x40]
c000793e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007942:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007946:	e8 9a a1 ff ff       	call   c0001ae5 <st_qword>
c000794b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000794f:	8d 45 48             	lea    eax,[ebp+0x48]
c0007952:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007956:	e8 8a a1 ff ff       	call   c0001ae5 <st_qword>
c000795b:	8d 45 50             	lea    eax,[ebp+0x50]
c000795e:	ba 20 00 00 00       	mov    edx,0x20
c0007963:	e8 7a a1 ff ff       	call   c0001ae2 <st_dword>
c0007968:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000796c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007970:	e8 6d a1 ff ff       	call   c0001ae2 <st_dword>
c0007975:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007979:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000797d:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007981:	e8 5c a1 ff ff       	call   c0001ae2 <st_dword>
c0007986:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007989:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000798d:	e8 50 a1 ff ff       	call   c0001ae2 <st_dword>
c0007992:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007996:	8d 50 02             	lea    edx,[eax+0x2]
c0007999:	8d 45 60             	lea    eax,[ebp+0x60]
c000799c:	e8 41 a1 ff ff       	call   c0001ae2 <st_dword>
c00079a1:	8d 45 64             	lea    eax,[ebp+0x64]
c00079a4:	ba 00 00 21 50       	mov    edx,0x50210000
c00079a9:	e8 34 a1 ff ff       	call   c0001ae2 <st_dword>
c00079ae:	8d 45 68             	lea    eax,[ebp+0x68]
c00079b1:	ba 00 01 00 00       	mov    edx,0x100
c00079b6:	e8 23 a1 ff ff       	call   c0001ade <st_word>
c00079bb:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079bf:	b8 0a 00 00 00       	mov    eax,0xa
c00079c4:	48                   	dec    eax
c00079c5:	74 05                	je     c00079cc <f_mkfs+0x850>
c00079c7:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079ca:	eb f8                	jmp    c00079c4 <f_mkfs+0x848>
c00079cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079d0:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079d8:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079dc:	74 05                	je     c00079e3 <f_mkfs+0x867>
c00079de:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079e1:	eb f5                	jmp    c00079d8 <f_mkfs+0x85c>
c00079e3:	8d 45 78             	lea    eax,[ebp+0x78]
c00079e6:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079eb:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079f1:	31 db                	xor    ebx,ebx
c00079f3:	e8 e6 a0 ff ff       	call   c0001ade <st_word>
c00079f8:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079fe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a06:	e8 d3 a0 ff ff       	call   c0001ade <st_word>
c0007a0b:	31 c9                	xor    ecx,ecx
c0007a0d:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007a10:	83 f8 01             	cmp    eax,0x1
c0007a13:	76 13                	jbe    c0007a28 <f_mkfs+0x8ac>
c0007a15:	83 f9 70             	cmp    ecx,0x70
c0007a18:	74 0e                	je     c0007a28 <f_mkfs+0x8ac>
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a21:	e8 41 a5 ff ff       	call   c0001f67 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	41                   	inc    ecx
c0007a29:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2f:	75 dc                	jne    c0007a0d <f_mkfs+0x891>
c0007a31:	89 f0                	mov    eax,esi
c0007a33:	89 fa                	mov    edx,edi
c0007a35:	83 c0 01             	add    eax,0x1
c0007a38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a3c:	83 d2 00             	adc    edx,0x0
c0007a3f:	83 ec 0c             	sub    esp,0xc
c0007a42:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a46:	6a 01                	push   0x1
c0007a48:	57                   	push   edi
c0007a49:	56                   	push   esi
c0007a4a:	55                   	push   ebp
c0007a4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a4f:	e8 e3 9f ff ff       	call   c0001a37 <disk_write>
c0007a54:	83 c4 20             	add    esp,0x20
c0007a57:	85 c0                	test   eax,eax
c0007a59:	0f 85 ce 07 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007a5f:	31 d2                	xor    edx,edx
c0007a61:	b9 00 02 00 00       	mov    ecx,0x200
c0007a66:	89 e8                	mov    eax,ebp
c0007a68:	e8 93 a0 ff ff       	call   c0001b00 <mem_set>
c0007a6d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	e8 64 a0 ff ff       	call   c0001ade <st_word>
c0007a7a:	89 f0                	mov    eax,esi
c0007a7c:	89 fa                	mov    edx,edi
c0007a7e:	83 c0 09             	add    eax,0x9
c0007a81:	83 d2 00             	adc    edx,0x0
c0007a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a8b:	31 c9                	xor    ecx,ecx
c0007a8d:	41                   	inc    ecx
c0007a8e:	89 da                	mov    edx,ebx
c0007a90:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a95:	e8 cd a4 ff ff       	call   c0001f67 <xsum32>
c0007a9a:	89 c3                	mov    ebx,eax
c0007a9c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007aa2:	75 e9                	jne    c0007a8d <f_mkfs+0x911>
c0007aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007aa8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007aac:	83 c0 01             	add    eax,0x1
c0007aaf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ab3:	83 d2 00             	adc    edx,0x0
c0007ab6:	83 ec 0c             	sub    esp,0xc
c0007ab9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007abd:	6a 01                	push   0x1
c0007abf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac7:	55                   	push   ebp
c0007ac8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007acc:	e8 66 9f ff ff       	call   c0001a37 <disk_write>
c0007ad1:	83 c4 20             	add    esp,0x20
c0007ad4:	85 c0                	test   eax,eax
c0007ad6:	0f 85 51 07 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ae0:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ae4:	75 09                	jne    c0007aef <f_mkfs+0x973>
c0007ae6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ae9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007aed:	74 12                	je     c0007b01 <f_mkfs+0x985>
c0007aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007af7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007afb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aff:	eb 8a                	jmp    c0007a8b <f_mkfs+0x90f>
c0007b01:	31 d2                	xor    edx,edx
c0007b03:	b9 00 02 00 00       	mov    ecx,0x200
c0007b08:	89 e8                	mov    eax,ebp
c0007b0a:	e8 f1 9f ff ff       	call   c0001b00 <mem_set>
c0007b0f:	83 c6 0b             	add    esi,0xb
c0007b12:	83 d7 00             	adc    edi,0x0
c0007b15:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b19:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b1d:	31 c9                	xor    ecx,ecx
c0007b1f:	41                   	inc    ecx
c0007b20:	89 da                	mov    edx,ebx
c0007b22:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b27:	e8 3b a4 ff ff       	call   c0001f67 <xsum32>
c0007b2c:	89 c3                	mov    ebx,eax
c0007b2e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b34:	75 e9                	jne    c0007b1f <f_mkfs+0x9a3>
c0007b36:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b39:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b3d:	83 c6 01             	add    esi,0x1
c0007b40:	83 d7 00             	adc    edi,0x0
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	6a 01                	push   0x1
c0007b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b50:	55                   	push   ebp
c0007b51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b55:	e8 dd 9e ff ff       	call   c0001a37 <disk_write>
c0007b5a:	83 c4 20             	add    esp,0x20
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	0f 85 c8 06 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007b65:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b69:	75 06                	jne    c0007b71 <f_mkfs+0x9f5>
c0007b6b:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b6f:	74 09                	je     c0007b7a <f_mkfs+0x9fe>
c0007b71:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b78:	eb a3                	jmp    c0007b1d <f_mkfs+0x9a1>
c0007b7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b7e:	89 da                	mov    edx,ebx
c0007b80:	01 e8                	add    eax,ebp
c0007b82:	e8 5b 9f ff ff       	call   c0001ae2 <st_dword>
c0007b87:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b8c:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b94:	75 e4                	jne    c0007b7a <f_mkfs+0x9fe>
c0007b96:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b99:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b9d:	83 c6 02             	add    esi,0x2
c0007ba0:	83 d7 00             	adc    edi,0x0
c0007ba3:	83 ec 0c             	sub    esp,0xc
c0007ba6:	6a 01                	push   0x1
c0007ba8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bb0:	55                   	push   ebp
c0007bb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007bb5:	e8 7d 9e ff ff       	call   c0001a37 <disk_write>
c0007bba:	83 c4 20             	add    esp,0x20
c0007bbd:	85 c0                	test   eax,eax
c0007bbf:	0f 85 68 06 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007bc5:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bca:	74 0d                	je     c0007bd9 <f_mkfs+0xa5d>
c0007bcc:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bd4:	e9 43 fd ff ff       	jmp    c000791c <f_mkfs+0x7a0>
c0007bd9:	b1 07                	mov    cl,0x7
c0007bdb:	e9 e3 05 00 00       	jmp    c00081c3 <f_mkfs+0x1047>
c0007be0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007be5:	0f 85 4f 02 00 00    	jne    c0007e3a <f_mkfs+0xcbe>
c0007beb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bf0:	0f 86 22 02 00 00    	jbe    c0007e18 <f_mkfs+0xc9c>
c0007bf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bfb:	0f 85 81 06 00 00    	jne    c0008282 <f_mkfs+0x1106>
c0007c01:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007c04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c08:	83 f8 40             	cmp    eax,0x40
c0007c0b:	0f 87 51 06 00 00    	ja     c0008262 <f_mkfs+0x10e6>
c0007c11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c15:	85 ff                	test   edi,edi
c0007c17:	75 1c                	jne    c0007c35 <f_mkfs+0xab9>
c0007c19:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c1c:	ba 40 01 02 c0       	mov    edx,0xc0020140
c0007c21:	c1 e9 0c             	shr    ecx,0xc
c0007c24:	bf 01 00 00 00       	mov    edi,0x1
c0007c29:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c2c:	66 85 c0             	test   ax,ax
c0007c2f:	0f 85 95 01 00 00    	jne    c0007dca <f_mkfs+0xc4e>
c0007c35:	31 d2                	xor    edx,edx
c0007c37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c3a:	f7 f7                	div    edi
c0007c3c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c41:	0f 86 95 01 00 00    	jbe    c0007ddc <f_mkfs+0xc60>
c0007c47:	83 c0 02             	add    eax,0x2
c0007c4a:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c4f:	01 c0                	add    eax,eax
c0007c51:	05 ff 01 00 00       	add    eax,0x1ff
c0007c56:	be 01 00 00 00       	mov    esi,0x1
c0007c5b:	c1 e8 09             	shr    eax,0x9
c0007c5e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c66:	c1 e0 05             	shl    eax,0x5
c0007c69:	c1 e8 09             	shr    eax,0x9
c0007c6c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c70:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c75:	31 d2                	xor    edx,edx
c0007c77:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c7b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c7f:	89 f0                	mov    eax,esi
c0007c81:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c85:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c95:	31 d2                	xor    edx,edx
c0007c97:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c9c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007ca0:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ca4:	31 db                	xor    ebx,ebx
c0007ca6:	01 c8                	add    eax,ecx
c0007ca8:	11 da                	adc    edx,ebx
c0007caa:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007cae:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007cb2:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007cb6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007cba:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007cbe:	f7 da                	neg    edx
c0007cc0:	21 d1                	and    ecx,edx
c0007cc2:	29 d9                	sub    ecx,ebx
c0007cc4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc9:	0f 85 20 01 00 00    	jne    c0007def <f_mkfs+0xc73>
c0007ccf:	31 db                	xor    ebx,ebx
c0007cd1:	01 ce                	add    esi,ecx
c0007cd3:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cd7:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cdb:	31 d2                	xor    edx,edx
c0007cdd:	89 f8                	mov    eax,edi
c0007cdf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ce3:	c1 e0 04             	shl    eax,0x4
c0007ce6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cea:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cee:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cf2:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cf6:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cf9:	19 d3                	sbb    ebx,edx
c0007cfb:	0f 82 40 01 00 00    	jb     c0007e41 <f_mkfs+0xcc5>
c0007d01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d04:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d08:	89 c8                	mov    eax,ecx
c0007d0a:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007d0f:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007d13:	29 f0                	sub    eax,esi
c0007d15:	29 d0                	sub    eax,edx
c0007d17:	31 d2                	xor    edx,edx
c0007d19:	f7 f7                	div    edi
c0007d1b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d20:	89 c3                	mov    ebx,eax
c0007d22:	0f 85 b8 fe ff ff    	jne    c0007be0 <f_mkfs+0xa64>
c0007d28:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d2d:	0f 87 1d 01 00 00    	ja     c0007e50 <f_mkfs+0xcd4>
c0007d33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d38:	0f 85 03 01 00 00    	jne    c0007e41 <f_mkfs+0xcc5>
c0007d3e:	83 ff 01             	cmp    edi,0x1
c0007d41:	0f 86 fa 00 00 00    	jbe    c0007e41 <f_mkfs+0xcc5>
c0007d47:	d1 ef                	shr    edi,1
c0007d49:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d4d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d54:	85 db                	test   ebx,ebx
c0007d56:	75 2d                	jne    c0007d85 <f_mkfs+0xc09>
c0007d58:	89 cb                	mov    ebx,ecx
c0007d5a:	ba 50 01 02 c0       	mov    edx,0xc0020150
c0007d5f:	c1 eb 11             	shr    ebx,0x11
c0007d62:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d6a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d6d:	66 85 c0             	test   ax,ax
c0007d70:	74 11                	je     c0007d83 <f_mkfs+0xc07>
c0007d72:	83 c2 02             	add    edx,0x2
c0007d75:	39 d8                	cmp    eax,ebx
c0007d77:	77 0a                	ja     c0007d83 <f_mkfs+0xc07>
c0007d79:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d7d:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d81:	eb e7                	jmp    c0007d6a <f_mkfs+0xbee>
c0007d83:	31 db                	xor    ebx,ebx
c0007d85:	31 d2                	xor    edx,edx
c0007d87:	89 c8                	mov    eax,ecx
c0007d89:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d8d:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d94:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d99:	c1 ea 09             	shr    edx,0x9
c0007d9c:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007da1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007da5:	0f 87 96 00 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c0007dab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007daf:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007db7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007dbb:	be 20 00 00 00       	mov    esi,0x20
c0007dc0:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007dc5:	e9 a6 fe ff ff       	jmp    c0007c70 <f_mkfs+0xaf4>
c0007dca:	83 c2 02             	add    edx,0x2
c0007dcd:	39 c8                	cmp    eax,ecx
c0007dcf:	0f 87 60 fe ff ff    	ja     c0007c35 <f_mkfs+0xab9>
c0007dd5:	01 ff                	add    edi,edi
c0007dd7:	e9 4d fe ff ff       	jmp    c0007c29 <f_mkfs+0xaad>
c0007ddc:	8d 04 40             	lea    eax,[eax+eax*2]
c0007ddf:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de4:	40                   	inc    eax
c0007de5:	d1 e8                	shr    eax,1
c0007de7:	83 c0 03             	add    eax,0x3
c0007dea:	e9 62 fe ff ff       	jmp    c0007c51 <f_mkfs+0xad5>
c0007def:	31 d2                	xor    edx,edx
c0007df1:	89 c8                	mov    eax,ecx
c0007df3:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007df7:	85 d2                	test   edx,edx
c0007df9:	74 0c                	je     c0007e07 <f_mkfs+0xc8b>
c0007dfb:	49                   	dec    ecx
c0007dfc:	46                   	inc    esi
c0007dfd:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007e02:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007e07:	89 c8                	mov    eax,ecx
c0007e09:	31 d2                	xor    edx,edx
c0007e0b:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007e0f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007e13:	e9 c3 fe ff ff       	jmp    c0007cdb <f_mkfs+0xb5f>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	77 31                	ja     c0007e50 <f_mkfs+0xcd4>
c0007e1f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e24:	75 1b                	jne    c0007e41 <f_mkfs+0xcc5>
c0007e26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e2d:	3d 80 00 00 00       	cmp    eax,0x80
c0007e32:	0f 86 d9 fd ff ff    	jbe    c0007c11 <f_mkfs+0xa95>
c0007e38:	eb 07                	jmp    c0007e41 <f_mkfs+0xcc5>
c0007e3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3f:	76 0a                	jbe    c0007e4b <f_mkfs+0xccf>
c0007e41:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e46:	e9 ff 03 00 00       	jmp    c000824a <f_mkfs+0x10ce>
c0007e4b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 a2 9c ff ff       	call   c0001b00 <mem_set>
c0007e5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e63:	ba 62 02 02 c0       	mov    edx,0xc0020262
c0007e68:	89 e8                	mov    eax,ebp
c0007e6a:	e8 7c 9c ff ff       	call   c0001aeb <mem_cpy>
c0007e6f:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e72:	ba 00 02 00 00       	mov    edx,0x200
c0007e77:	e8 62 9c ff ff       	call   c0001ade <st_word>
c0007e7c:	89 f8                	mov    eax,edi
c0007e7e:	0f b7 d6             	movzx  edx,si
c0007e81:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e84:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e87:	e8 52 9c ff ff       	call   c0001ade <st_word>
c0007e8c:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e90:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e95:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e98:	75 08                	jne    c0007ea2 <f_mkfs+0xd26>
c0007e9a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ea2:	8d 45 11             	lea    eax,[ebp+0x11]
c0007ea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ea9:	e8 30 9c ff ff       	call   c0001ade <st_word>
c0007eae:	b8 ff ff 00 00       	mov    eax,0xffff
c0007eb3:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007eb7:	39 d0                	cmp    eax,edx
c0007eb9:	b8 00 00 00 00       	mov    eax,0x0
c0007ebe:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ec2:	72 0a                	jb     c0007ece <f_mkfs+0xd52>
c0007ec4:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ec7:	e8 12 9c ff ff       	call   c0001ade <st_word>
c0007ecc:	eb 08                	jmp    c0007ed6 <f_mkfs+0xd5a>
c0007ece:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ed1:	e8 0c 9c ff ff       	call   c0001ae2 <st_dword>
c0007ed6:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ed9:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ede:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ee2:	e8 f7 9b ff ff       	call   c0001ade <st_word>
c0007ee7:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007eea:	ba ff 00 00 00       	mov    edx,0xff
c0007eef:	e8 ea 9b ff ff       	call   c0001ade <st_word>
c0007ef4:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ef7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007efb:	e8 e2 9b ff ff       	call   c0001ae2 <st_dword>
c0007f00:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f05:	75 57                	jne    c0007f5e <f_mkfs+0xde2>
c0007f07:	8d 45 43             	lea    eax,[ebp+0x43]
c0007f0a:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0f:	e8 ce 9b ff ff       	call   c0001ae2 <st_dword>
c0007f14:	8d 45 24             	lea    eax,[ebp+0x24]
c0007f17:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f1b:	e8 c2 9b ff ff       	call   c0001ae2 <st_dword>
c0007f20:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f23:	ba 02 00 00 00       	mov    edx,0x2
c0007f28:	e8 b5 9b ff ff       	call   c0001ae2 <st_dword>
c0007f2d:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f30:	ba 01 00 00 00       	mov    edx,0x1
c0007f35:	e8 a4 9b ff ff       	call   c0001ade <st_word>
c0007f3a:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f3d:	ba 06 00 00 00       	mov    edx,0x6
c0007f42:	e8 97 9b ff ff       	call   c0001ade <st_word>
c0007f47:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f4b:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f4f:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f52:	b9 13 00 00 00       	mov    ecx,0x13
c0007f57:	ba 6e 02 02 c0       	mov    edx,0xc002026e
c0007f5c:	eb 2f                	jmp    c0007f8d <f_mkfs+0xe11>
c0007f5e:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f61:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f66:	e8 77 9b ff ff       	call   c0001ae2 <st_dword>
c0007f6b:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f70:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f73:	e8 66 9b ff ff       	call   c0001ade <st_word>
c0007f78:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f7c:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f80:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f83:	b9 13 00 00 00       	mov    ecx,0x13
c0007f88:	ba 82 02 02 c0       	mov    edx,0xc0020282
c0007f8d:	e8 59 9b ff ff       	call   c0001aeb <mem_cpy>
c0007f92:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f98:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f9d:	89 f0                	mov    eax,esi
c0007f9f:	e8 3a 9b ff ff       	call   c0001ade <st_word>
c0007fa4:	83 ec 0c             	sub    esp,0xc
c0007fa7:	6a 01                	push   0x1
c0007fa9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fb1:	55                   	push   ebp
c0007fb2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fb6:	e8 7c 9a ff ff       	call   c0001a37 <disk_write>
c0007fbb:	83 c4 20             	add    esp,0x20
c0007fbe:	85 c0                	test   eax,eax
c0007fc0:	0f 85 67 02 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007fc6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fcb:	0f 85 b7 00 00 00    	jne    c0008088 <f_mkfs+0xf0c>
c0007fd1:	83 ec 0c             	sub    esp,0xc
c0007fd4:	6a 01                	push   0x1
c0007fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fde:	83 c0 06             	add    eax,0x6
c0007fe1:	83 d2 00             	adc    edx,0x0
c0007fe4:	52                   	push   edx
c0007fe5:	50                   	push   eax
c0007fe6:	55                   	push   ebp
c0007fe7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007feb:	e8 47 9a ff ff       	call   c0001a37 <disk_write>
c0007ff0:	83 c4 20             	add    esp,0x20
c0007ff3:	b9 00 02 00 00       	mov    ecx,0x200
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 e8                	mov    eax,ebp
c0007ffc:	e8 ff 9a ff ff       	call   c0001b00 <mem_set>
c0008001:	ba 52 52 61 41       	mov    edx,0x41615252
c0008006:	89 e8                	mov    eax,ebp
c0008008:	e8 d5 9a ff ff       	call   c0001ae2 <st_dword>
c000800d:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008013:	ba 72 72 41 61       	mov    edx,0x61417272
c0008018:	e8 c5 9a ff ff       	call   c0001ae2 <st_dword>
c000801d:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008020:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008026:	e8 b7 9a ff ff       	call   c0001ae2 <st_dword>
c000802b:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008031:	ba 02 00 00 00       	mov    edx,0x2
c0008036:	e8 a7 9a ff ff       	call   c0001ae2 <st_dword>
c000803b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008040:	89 f0                	mov    eax,esi
c0008042:	e8 97 9a ff ff       	call   c0001ade <st_word>
c0008047:	83 ec 0c             	sub    esp,0xc
c000804a:	6a 01                	push   0x1
c000804c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008050:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008054:	83 c0 07             	add    eax,0x7
c0008057:	83 d2 00             	adc    edx,0x0
c000805a:	52                   	push   edx
c000805b:	50                   	push   eax
c000805c:	55                   	push   ebp
c000805d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008061:	e8 d1 99 ff ff       	call   c0001a37 <disk_write>
c0008066:	83 c4 14             	add    esp,0x14
c0008069:	6a 01                	push   0x1
c000806b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000806f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008073:	83 c0 01             	add    eax,0x1
c0008076:	83 d2 00             	adc    edx,0x0
c0008079:	52                   	push   edx
c000807a:	50                   	push   eax
c000807b:	55                   	push   ebp
c000807c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008080:	e8 b2 99 ff ff       	call   c0001a37 <disk_write>
c0008085:	83 c4 20             	add    esp,0x20
c0008088:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000808f:	31 d2                	xor    edx,edx
c0008091:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008097:	31 db                	xor    ebx,ebx
c0008099:	89 e8                	mov    eax,ebp
c000809b:	e8 60 9a ff ff       	call   c0001b00 <mem_set>
c00080a0:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00080a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00080ac:	0f 94 c3             	sete   bl
c00080af:	4b                   	dec    ebx
c00080b0:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00080b6:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c1:	75 21                	jne    c00080e4 <f_mkfs+0xf68>
c00080c3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080c8:	89 e8                	mov    eax,ebp
c00080ca:	e8 13 9a ff ff       	call   c0001ae2 <st_dword>
c00080cf:	8d 45 04             	lea    eax,[ebp+0x4]
c00080d2:	83 ca ff             	or     edx,0xffffffff
c00080d5:	e8 08 9a ff ff       	call   c0001ae2 <st_dword>
c00080da:	8d 45 08             	lea    eax,[ebp+0x8]
c00080dd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080e2:	eb 04                	jmp    c00080e8 <f_mkfs+0xf6c>
c00080e4:	89 da                	mov    edx,ebx
c00080e6:	89 e8                	mov    eax,ebp
c00080e8:	e8 f5 99 ff ff       	call   c0001ae2 <st_dword>
c00080ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080f5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080f9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080fd:	39 ce                	cmp    esi,ecx
c00080ff:	76 02                	jbe    c0008103 <f_mkfs+0xf87>
c0008101:	89 ce                	mov    esi,ecx
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	56                   	push   esi
c0008107:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810f:	55                   	push   ebp
c0008110:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008114:	e8 1e 99 ff ff       	call   c0001a37 <disk_write>
c0008119:	83 c4 20             	add    esp,0x20
c000811c:	85 c0                	test   eax,eax
c000811e:	0f 85 09 01 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0008124:	31 d2                	xor    edx,edx
c0008126:	b9 00 02 00 00       	mov    ecx,0x200
c000812b:	89 e8                	mov    eax,ebp
c000812d:	e8 ce 99 ff ff       	call   c0001b00 <mem_set>
c0008132:	31 d2                	xor    edx,edx
c0008134:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008138:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813c:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008140:	75 b3                	jne    c00080f5 <f_mkfs+0xf79>
c0008142:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008145:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000814c:	40                   	inc    eax
c000814d:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008151:	0f 87 65 ff ff ff    	ja     c00080bc <f_mkfs+0xf40>
c0008157:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000815c:	74 04                	je     c0008162 <f_mkfs+0xfe6>
c000815e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008162:	89 fb                	mov    ebx,edi
c0008164:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008168:	76 04                	jbe    c000816e <f_mkfs+0xff2>
c000816a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000816e:	83 ec 0c             	sub    esp,0xc
c0008171:	53                   	push   ebx
c0008172:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008176:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000817a:	55                   	push   ebp
c000817b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000817f:	e8 b3 98 ff ff       	call   c0001a37 <disk_write>
c0008184:	83 c4 20             	add    esp,0x20
c0008187:	85 c0                	test   eax,eax
c0008189:	0f 85 9e 00 00 00    	jne    c000822d <f_mkfs+0x10b1>
c000818f:	31 d2                	xor    edx,edx
c0008191:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008195:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008199:	29 df                	sub    edi,ebx
c000819b:	75 c5                	jne    c0008162 <f_mkfs+0xfe6>
c000819d:	b1 0c                	mov    cl,0xc
c000819f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a4:	74 1d                	je     c00081c3 <f_mkfs+0x1047>
c00081a6:	b8 ff ff 00 00       	mov    eax,0xffff
c00081ab:	b1 06                	mov    cl,0x6
c00081ad:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00081b1:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00081b5:	72 0c                	jb     c00081c3 <f_mkfs+0x1047>
c00081b7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081bc:	0f 94 c1             	sete   cl
c00081bf:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081c3:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081c8:	75 4c                	jne    c0008216 <f_mkfs+0x109a>
c00081ca:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ce:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081d2:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081d9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081e0:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081eb:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081f6:	0f b6 c9             	movzx  ecx,cl
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008208:	e8 2f c2 ff ff       	call   c000443c <create_partition>
c000820d:	83 c4 10             	add    esp,0x10
c0008210:	89 c3                	mov    ebx,eax
c0008212:	85 c0                	test   eax,eax
c0008214:	75 34                	jne    c000824a <f_mkfs+0x10ce>
c0008216:	31 db                	xor    ebx,ebx
c0008218:	50                   	push   eax
c0008219:	6a 00                	push   0x0
c000821b:	6a 00                	push   0x0
c000821d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008221:	e8 27 98 ff ff       	call   c0001a4d <disk_ioctl>
c0008226:	83 c4 10             	add    esp,0x10
c0008229:	85 c0                	test   eax,eax
c000822b:	74 1d                	je     c000824a <f_mkfs+0x10ce>
c000822d:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008235:	75 0c                	jne    c0008243 <f_mkfs+0x10c7>
c0008237:	83 ec 0c             	sub    esp,0xc
c000823a:	55                   	push   ebp
c000823b:	e8 75 00 00 00       	call   c00082b5 <ff_memfree>
c0008240:	83 c4 10             	add    esp,0x10
c0008243:	bb 01 00 00 00       	mov    ebx,0x1
c0008248:	eb 48                	jmp    c0008292 <f_mkfs+0x1116>
c000824a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008252:	75 3e                	jne    c0008292 <f_mkfs+0x1116>
c0008254:	83 ec 0c             	sub    esp,0xc
c0008257:	55                   	push   ebp
c0008258:	e8 58 00 00 00       	call   c00082b5 <ff_memfree>
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	eb 30                	jmp    c0008292 <f_mkfs+0x1116>
c0008262:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008267:	0f 85 eb fa ff ff    	jne    c0007d58 <f_mkfs+0xbdc>
c000826d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008271:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008277:	0f 86 b8 f9 ff ff    	jbe    c0007c35 <f_mkfs+0xab9>
c000827d:	e9 bf fb ff ff       	jmp    c0007e41 <f_mkfs+0xcc5>
c0008282:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008287:	0f 85 c0 fa ff ff    	jne    c0007d4d <f_mkfs+0xbd1>
c000828d:	e9 af fb ff ff       	jmp    c0007e41 <f_mkfs+0xcc5>
c0008292:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008298:	89 d8                	mov    eax,ebx
c000829a:	5b                   	pop    ebx
c000829b:	5e                   	pop    esi
c000829c:	5f                   	pop    edi
c000829d:	5d                   	pop    ebp
c000829e:	c3                   	ret    

c000829f <ff_memalloc>:
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	83 ec 0c             	sub    esp,0xc
c00082a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082a9:	e8 9a 3d 00 00       	call   c000c048 <malloc>
c00082ae:	83 c4 10             	add    esp,0x10
c00082b1:	83 c4 0c             	add    esp,0xc
c00082b4:	c3                   	ret    

c00082b5 <ff_memfree>:
c00082b5:	83 ec 0c             	sub    esp,0xc
c00082b8:	83 ec 0c             	sub    esp,0xc
c00082bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082bf:	e8 94 3d 00 00       	call   c000c058 <free>
c00082c4:	83 c4 10             	add    esp,0x10
c00082c7:	90                   	nop
c00082c8:	83 c4 0c             	add    esp,0xc
c00082cb:	c3                   	ret    

c00082cc <ff_uni2oem>:
c00082cc:	83 ec 14             	sub    esp,0x14
c00082cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082d3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082d7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082de:	c7 44 24 0c a0 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205a0
c00082e6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082eb:	77 0b                	ja     c00082f8 <ff_uni2oem+0x2c>
c00082ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082f1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f6:	eb 5b                	jmp    c0008353 <ff_uni2oem+0x87>
c00082f8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008300:	77 51                	ja     c0008353 <ff_uni2oem+0x87>
c0008302:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008308:	75 49                	jne    c0008353 <ff_uni2oem+0x87>
c000830a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008311:	eb 0b                	jmp    c000831e <ff_uni2oem+0x52>
c0008313:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008318:	40                   	inc    eax
c0008319:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000831e:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008324:	77 1b                	ja     c0008341 <ff_uni2oem+0x75>
c0008326:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000832b:	01 c0                	add    eax,eax
c000832d:	89 c2                	mov    edx,eax
c000832f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008333:	01 d0                	add    eax,edx
c0008335:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008338:	0f b7 c0             	movzx  eax,ax
c000833b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000833f:	75 d2                	jne    c0008313 <ff_uni2oem+0x47>
c0008341:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008346:	83 e8 80             	sub    eax,0xffffff80
c0008349:	25 ff 00 00 00       	and    eax,0xff
c000834e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008353:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008358:	83 c4 14             	add    esp,0x14
c000835b:	c3                   	ret    

c000835c <ff_oem2uni>:
c000835c:	83 ec 18             	sub    esp,0x18
c000835f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008367:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000836c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008370:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008377:	c7 44 24 10 a0 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205a0
c000837f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008385:	77 0b                	ja     c0008392 <ff_oem2uni+0x36>
c0008387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008390:	eb 2d                	jmp    c00083bf <ff_oem2uni+0x63>
c0008392:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008398:	75 25                	jne    c00083bf <ff_oem2uni+0x63>
c000839a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00083a1:	77 1c                	ja     c00083bf <ff_oem2uni+0x63>
c00083a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00083a8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00083ad:	01 c0                	add    eax,eax
c00083af:	89 c2                	mov    edx,eax
c00083b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083b5:	01 d0                	add    eax,edx
c00083b7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ba:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083bf:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083c4:	83 c4 18             	add    esp,0x18
c00083c7:	c3                   	ret    

c00083c8 <ff_wtoupper>:
c00083c8:	83 ec 10             	sub    esp,0x10
c00083cb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083d3:	0f 87 3e 01 00 00    	ja     c0008517 <ff_wtoupper+0x14f>
c00083d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083dd:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083e2:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083e9:	77 07                	ja     c00083f2 <ff_wtoupper+0x2a>
c00083eb:	b8 a0 03 02 c0       	mov    eax,0xc00203a0
c00083f0:	eb 05                	jmp    c00083f7 <ff_wtoupper+0x2f>
c00083f2:	b8 e0 02 02 c0       	mov    eax,0xc00202e0
c00083f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ff:	8d 50 02             	lea    edx,[eax+0x2]
c0008402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008406:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008409:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000840e:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008414:	0f 84 f4 00 00 00    	je     c000850e <ff_wtoupper+0x146>
c000841a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000841f:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008424:	0f 82 e4 00 00 00    	jb     c000850e <ff_wtoupper+0x146>
c000842a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842e:	8d 50 02             	lea    edx,[eax+0x2]
c0008431:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008435:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008438:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000843d:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008442:	66 c1 e8 08          	shr    ax,0x8
c0008446:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000844b:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008452:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008457:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000845c:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008461:	01 ca                	add    edx,ecx
c0008463:	39 d0                	cmp    eax,edx
c0008465:	0f 8d 86 00 00 00    	jge    c00084f1 <ff_wtoupper+0x129>
c000846b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008470:	83 f8 08             	cmp    eax,0x8
c0008473:	0f 87 94 00 00 00    	ja     c000850d <ff_wtoupper+0x145>
c0008479:	8b 04 85 a0 02 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfd60]
c0008480:	ff e0                	jmp    eax
c0008482:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008487:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000848c:	29 c2                	sub    edx,eax
c000848e:	89 d0                	mov    eax,edx
c0008490:	01 c0                	add    eax,eax
c0008492:	89 c2                	mov    edx,eax
c0008494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008498:	01 d0                	add    eax,edx
c000849a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000849d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00084a2:	eb 4b                	jmp    c00084ef <ff_wtoupper+0x127>
c00084a4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084a9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00084ad:	83 e0 01             	and    eax,0x1
c00084b0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00084b5:	eb 38                	jmp    c00084ef <ff_wtoupper+0x127>
c00084b7:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084bd:	eb 30                	jmp    c00084ef <ff_wtoupper+0x127>
c00084bf:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084c5:	eb 28                	jmp    c00084ef <ff_wtoupper+0x127>
c00084c7:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084cd:	eb 20                	jmp    c00084ef <ff_wtoupper+0x127>
c00084cf:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084d5:	eb 18                	jmp    c00084ef <ff_wtoupper+0x127>
c00084d7:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084dd:	eb 10                	jmp    c00084ef <ff_wtoupper+0x127>
c00084df:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084e5:	eb 08                	jmp    c00084ef <ff_wtoupper+0x127>
c00084e7:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084ee:	90                   	nop
c00084ef:	eb 1c                	jmp    c000850d <ff_wtoupper+0x145>
c00084f1:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084f7:	0f 85 fe fe ff ff    	jne    c00083fb <ff_wtoupper+0x33>
c00084fd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008502:	01 c0                	add    eax,eax
c0008504:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008508:	e9 ee fe ff ff       	jmp    c00083fb <ff_wtoupper+0x33>
c000850d:	90                   	nop
c000850e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008513:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000851b:	83 c4 10             	add    esp,0x10
c000851e:	c3                   	ret    

c000851f <is_bad_src_ratio>:
c000851f:	83 ec 0c             	sub    esp,0xc
c0008522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008526:	89 04 24             	mov    DWORD PTR [esp],eax
c0008529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000852d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008531:	dd 04 24             	fld    QWORD PTR [esp]
c0008534:	dd 05 60 0b 02 c0    	fld    QWORD PTR ds:0xc0020b60
c000853a:	de d9                	fcompp 
c000853c:	df e0                	fnstsw ax
c000853e:	f6 c4 45             	test   ah,0x45
c0008541:	74 10                	je     c0008553 <is_bad_src_ratio+0x34>
c0008543:	dd 04 24             	fld    QWORD PTR [esp]
c0008546:	dc 1d 68 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b68
c000854c:	df e0                	fnstsw ax
c000854e:	f6 c4 45             	test   ah,0x45
c0008551:	75 07                	jne    c000855a <is_bad_src_ratio+0x3b>
c0008553:	b8 01 00 00 00       	mov    eax,0x1
c0008558:	eb 05                	jmp    c000855f <is_bad_src_ratio+0x40>
c000855a:	b8 00 00 00 00       	mov    eax,0x0
c000855f:	83 c4 0c             	add    esp,0xc
c0008562:	c3                   	ret    

c0008563 <psrc_set_converter>:
c0008563:	56                   	push   esi
c0008564:	89 d6                	mov    esi,edx
c0008566:	53                   	push   ebx
c0008567:	89 c3                	mov    ebx,eax
c0008569:	83 ec 0c             	sub    esp,0xc
c000856c:	52                   	push   edx
c000856d:	50                   	push   eax
c000856e:	e8 33 24 00 00       	call   c000a9a6 <sinc_set_converter>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	85 c0                	test   eax,eax
c0008578:	74 25                	je     c000859f <psrc_set_converter+0x3c>
c000857a:	50                   	push   eax
c000857b:	50                   	push   eax
c000857c:	56                   	push   esi
c000857d:	53                   	push   ebx
c000857e:	e8 32 28 00 00       	call   c000adb5 <zoh_set_converter>
c0008583:	83 c4 10             	add    esp,0x10
c0008586:	85 c0                	test   eax,eax
c0008588:	74 15                	je     c000859f <psrc_set_converter+0x3c>
c000858a:	51                   	push   ecx
c000858b:	51                   	push   ecx
c000858c:	56                   	push   esi
c000858d:	53                   	push   ebx
c000858e:	e8 10 0a 00 00       	call   c0008fa3 <linear_set_converter>
c0008593:	83 c4 10             	add    esp,0x10
c0008596:	ba 0a 00 00 00       	mov    edx,0xa
c000859b:	85 c0                	test   eax,eax
c000859d:	75 02                	jne    c00085a1 <psrc_set_converter+0x3e>
c000859f:	31 d2                	xor    edx,edx
c00085a1:	89 d0                	mov    eax,edx
c00085a3:	5a                   	pop    edx
c00085a4:	5b                   	pop    ebx
c00085a5:	5e                   	pop    esi
c00085a6:	c3                   	ret    

c00085a7 <src_delete>:
c00085a7:	53                   	push   ebx
c00085a8:	83 ec 08             	sub    esp,0x8
c00085ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085af:	85 db                	test   ebx,ebx
c00085b1:	74 29                	je     c00085dc <src_delete+0x35>
c00085b3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085b6:	85 c0                	test   eax,eax
c00085b8:	74 0c                	je     c00085c6 <src_delete+0x1f>
c00085ba:	83 ec 0c             	sub    esp,0xc
c00085bd:	50                   	push   eax
c00085be:	e8 95 3a 00 00       	call   c000c058 <free>
c00085c3:	83 c4 10             	add    esp,0x10
c00085c6:	50                   	push   eax
c00085c7:	6a 3c                	push   0x3c
c00085c9:	6a 00                	push   0x0
c00085cb:	53                   	push   ebx
c00085cc:	e8 15 81 ff ff       	call   c00006e6 <memset>
c00085d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085d4:	e8 7f 3a 00 00       	call   c000c058 <free>
c00085d9:	83 c4 10             	add    esp,0x10
c00085dc:	31 c0                	xor    eax,eax
c00085de:	83 c4 08             	add    esp,0x8
c00085e1:	5b                   	pop    ebx
c00085e2:	c3                   	ret    

c00085e3 <src_process>:
c00085e3:	56                   	push   esi
c00085e4:	53                   	push   ebx
c00085e5:	53                   	push   ebx
c00085e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085ee:	85 f6                	test   esi,esi
c00085f0:	0f 84 e2 00 00 00    	je     c00086d8 <src_process+0xf5>
c00085f6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085fa:	0f 84 df 00 00 00    	je     c00086df <src_process+0xfc>
c0008600:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008604:	0f 84 d5 00 00 00    	je     c00086df <src_process+0xfc>
c000860a:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008611:	0f 85 cf 00 00 00    	jne    c00086e6 <src_process+0x103>
c0008617:	85 db                	test   ebx,ebx
c0008619:	0f 84 ce 00 00 00    	je     c00086ed <src_process+0x10a>
c000861f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008622:	0f 84 cc 00 00 00    	je     c00086f4 <src_process+0x111>
c0008628:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000862c:	0f 84 c2 00 00 00    	je     c00086f4 <src_process+0x111>
c0008632:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008635:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008638:	e8 e2 fe ff ff       	call   c000851f <is_bad_src_ratio>
c000863d:	5a                   	pop    edx
c000863e:	85 c0                	test   eax,eax
c0008640:	59                   	pop    ecx
c0008641:	0f 85 b4 00 00 00    	jne    c00086fb <src_process+0x118>
c0008647:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000864b:	79 07                	jns    c0008654 <src_process+0x71>
c000864d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008654:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008658:	79 07                	jns    c0008661 <src_process+0x7e>
c000865a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008663:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008666:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008669:	39 ca                	cmp    edx,ecx
c000866b:	73 0b                	jae    c0008678 <src_process+0x95>
c000866d:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008671:	8d 04 82             	lea    eax,[edx+eax*4]
c0008674:	39 c1                	cmp    ecx,eax
c0008676:	eb 09                	jmp    c0008681 <src_process+0x9e>
c0008678:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000867c:	8d 04 81             	lea    eax,[ecx+eax*4]
c000867f:	39 c2                	cmp    edx,eax
c0008681:	72 7f                	jb     c0008702 <src_process+0x11f>
c0008683:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000868a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008691:	d9 05 80 0b 02 c0    	fld    DWORD PTR ds:0xc0020b80
c0008697:	dc 1e                	fcomp  QWORD PTR [esi]
c0008699:	df e0                	fnstsw ax
c000869b:	9e                   	sahf   
c000869c:	76 05                	jbe    c00086a3 <src_process+0xc0>
c000869e:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00086a1:	dd 1e                	fstp   QWORD PTR [esi]
c00086a3:	83 ec 10             	sub    esp,0x10
c00086a6:	dd 06                	fld    QWORD PTR [esi]
c00086a8:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00086ab:	dd 1c 24             	fstp   QWORD PTR [esp]
c00086ae:	e8 6d 6d 01 00       	call   c001f420 <fabs>
c00086b3:	83 c4 10             	add    esp,0x10
c00086b6:	dd 05 70 0b 02 c0    	fld    QWORD PTR ds:0xc0020b70
c00086bc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00086c0:	de d9                	fcompp 
c00086c2:	df e0                	fnstsw ax
c00086c4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00086c8:	9e                   	sahf   
c00086c9:	76 05                	jbe    c00086d0 <src_process+0xed>
c00086cb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086ce:	eb 03                	jmp    c00086d3 <src_process+0xf0>
c00086d0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086d3:	59                   	pop    ecx
c00086d4:	5b                   	pop    ebx
c00086d5:	5e                   	pop    esi
c00086d6:	ff e0                	jmp    eax
c00086d8:	b8 02 00 00 00       	mov    eax,0x2
c00086dd:	eb 28                	jmp    c0008707 <src_process+0x124>
c00086df:	b8 07 00 00 00       	mov    eax,0x7
c00086e4:	eb 21                	jmp    c0008707 <src_process+0x124>
c00086e6:	b8 12 00 00 00       	mov    eax,0x12
c00086eb:	eb 1a                	jmp    c0008707 <src_process+0x124>
c00086ed:	b8 03 00 00 00       	mov    eax,0x3
c00086f2:	eb 13                	jmp    c0008707 <src_process+0x124>
c00086f4:	b8 04 00 00 00       	mov    eax,0x4
c00086f9:	eb 0c                	jmp    c0008707 <src_process+0x124>
c00086fb:	b8 06 00 00 00       	mov    eax,0x6
c0008700:	eb 05                	jmp    c0008707 <src_process+0x124>
c0008702:	b8 10 00 00 00       	mov    eax,0x10
c0008707:	5a                   	pop    edx
c0008708:	5b                   	pop    ebx
c0008709:	5e                   	pop    esi
c000870a:	c3                   	ret    

c000870b <src_callback_read>:
c000870b:	55                   	push   ebp
c000870c:	57                   	push   edi
c000870d:	56                   	push   esi
c000870e:	53                   	push   ebx
c000870f:	83 ec 4c             	sub    esp,0x4c
c0008712:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008716:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000871a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000871e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008722:	85 ff                	test   edi,edi
c0008724:	0f 8e 36 01 00 00    	jle    c0008860 <src_callback_read+0x155>
c000872a:	85 db                	test   ebx,ebx
c000872c:	0f 84 2e 01 00 00    	je     c0008860 <src_callback_read+0x155>
c0008732:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008739:	74 0c                	je     c0008747 <src_callback_read+0x3c>
c000873b:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008742:	e9 19 01 00 00       	jmp    c0008860 <src_callback_read+0x155>
c0008747:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000874b:	75 0c                	jne    c0008759 <src_callback_read+0x4e>
c000874d:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008754:	e9 07 01 00 00       	jmp    c0008860 <src_callback_read+0x155>
c0008759:	51                   	push   ecx
c000875a:	6a 24                	push   0x24
c000875c:	6a 00                	push   0x0
c000875e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008762:	50                   	push   eax
c0008763:	e8 7e 7f ff ff       	call   c00006e6 <memset>
c0008768:	5e                   	pop    esi
c0008769:	5d                   	pop    ebp
c000876a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000876e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008772:	e8 a8 fd ff ff       	call   c000851f <is_bad_src_ratio>
c0008777:	83 c4 10             	add    esp,0x10
c000877a:	85 c0                	test   eax,eax
c000877c:	74 0c                	je     c000878a <src_callback_read+0x7f>
c000877e:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008785:	e9 d6 00 00 00       	jmp    c0008860 <src_callback_read+0x155>
c000878a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000878e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008792:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008796:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000879a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000879d:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00087a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00087a5:	31 f6                	xor    esi,esi
c00087a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087aa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087ae:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00087b3:	75 30                	jne    c00087e5 <src_callback_read+0xda>
c00087b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00087bd:	52                   	push   edx
c00087be:	52                   	push   edx
c00087bf:	8d 44 24 20          	lea    eax,[esp+0x20]
c00087c3:	50                   	push   eax
c00087c4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c7:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00087ce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00087d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00087d6:	83 c4 10             	add    esp,0x10
c00087d9:	85 c0                	test   eax,eax
c00087db:	75 08                	jne    c00087e5 <src_callback_read+0xda>
c00087dd:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087e5:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087ec:	50                   	push   eax
c00087ed:	50                   	push   eax
c00087ee:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087f2:	50                   	push   eax
c00087f3:	53                   	push   ebx
c00087f4:	e8 ea fd ff ff       	call   c00085e3 <src_process>
c00087f9:	83 c4 10             	add    esp,0x10
c00087fc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008803:	85 c0                	test   eax,eax
c0008805:	75 42                	jne    c0008849 <src_callback_read+0x13e>
c0008807:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000880b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000880e:	89 e9                	mov    ecx,ebp
c0008810:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008814:	0f af ca             	imul   ecx,edx
c0008817:	c1 e1 02             	shl    ecx,0x2
c000881a:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c000881e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008822:	0f af d1             	imul   edx,ecx
c0008825:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008829:	c1 e2 02             	shl    edx,0x2
c000882c:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008830:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008833:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008838:	75 04                	jne    c000883e <src_callback_read+0x133>
c000883a:	85 c9                	test   ecx,ecx
c000883c:	74 0b                	je     c0008849 <src_callback_read+0x13e>
c000883e:	39 d7                	cmp    edi,edx
c0008840:	7e 09                	jle    c000884b <src_callback_read+0x140>
c0008842:	89 d6                	mov    esi,edx
c0008844:	e9 65 ff ff ff       	jmp    c00087ae <src_callback_read+0xa3>
c0008849:	89 f2                	mov    edx,esi
c000884b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000884f:	85 c0                	test   eax,eax
c0008851:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008854:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008858:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000885b:	74 05                	je     c0008862 <src_callback_read+0x157>
c000885d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008860:	31 d2                	xor    edx,edx
c0008862:	83 c4 4c             	add    esp,0x4c
c0008865:	89 d0                	mov    eax,edx
c0008867:	5b                   	pop    ebx
c0008868:	5e                   	pop    esi
c0008869:	5f                   	pop    edi
c000886a:	5d                   	pop    ebp
c000886b:	c3                   	ret    

c000886c <src_set_ratio>:
c000886c:	53                   	push   ebx
c000886d:	b8 02 00 00 00       	mov    eax,0x2
c0008872:	83 ec 08             	sub    esp,0x8
c0008875:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008879:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000887d:	85 db                	test   ebx,ebx
c000887f:	74 33                	je     c00088b4 <src_set_ratio+0x48>
c0008881:	b8 07 00 00 00       	mov    eax,0x7
c0008886:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000888a:	74 2c                	je     c00088b8 <src_set_ratio+0x4c>
c000888c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008890:	74 2a                	je     c00088bc <src_set_ratio+0x50>
c0008892:	50                   	push   eax
c0008893:	50                   	push   eax
c0008894:	dd 14 24             	fst    QWORD PTR [esp]
c0008897:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000889b:	e8 7f fc ff ff       	call   c000851f <is_bad_src_ratio>
c00088a0:	5a                   	pop    edx
c00088a1:	85 c0                	test   eax,eax
c00088a3:	59                   	pop    ecx
c00088a4:	75 07                	jne    c00088ad <src_set_ratio+0x41>
c00088a6:	dd 04 24             	fld    QWORD PTR [esp]
c00088a9:	dd 1b                	fstp   QWORD PTR [ebx]
c00088ab:	eb 11                	jmp    c00088be <src_set_ratio+0x52>
c00088ad:	b8 06 00 00 00       	mov    eax,0x6
c00088b2:	eb 0a                	jmp    c00088be <src_set_ratio+0x52>
c00088b4:	dd d8                	fstp   st(0)
c00088b6:	eb 06                	jmp    c00088be <src_set_ratio+0x52>
c00088b8:	dd d8                	fstp   st(0)
c00088ba:	eb 02                	jmp    c00088be <src_set_ratio+0x52>
c00088bc:	dd d8                	fstp   st(0)
c00088be:	83 c4 08             	add    esp,0x8
c00088c1:	5b                   	pop    ebx
c00088c2:	c3                   	ret    

c00088c3 <src_get_channels>:
c00088c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088c7:	b8 02 00 00 00       	mov    eax,0x2
c00088cc:	85 d2                	test   edx,edx
c00088ce:	74 14                	je     c00088e4 <src_get_channels+0x21>
c00088d0:	b8 07 00 00 00       	mov    eax,0x7
c00088d5:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088d9:	74 09                	je     c00088e4 <src_get_channels+0x21>
c00088db:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088df:	74 03                	je     c00088e4 <src_get_channels+0x21>
c00088e1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088e4:	c3                   	ret    

c00088e5 <src_reset>:
c00088e5:	53                   	push   ebx
c00088e6:	b8 02 00 00 00       	mov    eax,0x2
c00088eb:	83 ec 08             	sub    esp,0x8
c00088ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088f2:	85 db                	test   ebx,ebx
c00088f4:	74 2e                	je     c0008924 <src_reset+0x3f>
c00088f6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088f9:	85 c0                	test   eax,eax
c00088fb:	74 09                	je     c0008906 <src_reset+0x21>
c00088fd:	83 ec 0c             	sub    esp,0xc
c0008900:	53                   	push   ebx
c0008901:	ff d0                	call   eax
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	d9 ee                	fldz   
c0008908:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000890f:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008912:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008919:	dd 1b                	fstp   QWORD PTR [ebx]
c000891b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008922:	31 c0                	xor    eax,eax
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	c3                   	ret    

c0008929 <src_new>:
c0008929:	57                   	push   edi
c000892a:	56                   	push   esi
c000892b:	53                   	push   ebx
c000892c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008930:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008934:	85 f6                	test   esi,esi
c0008936:	74 73                	je     c00089ab <src_new+0x82>
c0008938:	85 ff                	test   edi,edi
c000893a:	7f 08                	jg     c0008944 <src_new+0x1b>
c000893c:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008942:	eb 1e                	jmp    c0008962 <src_new+0x39>
c0008944:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000894a:	50                   	push   eax
c000894b:	50                   	push   eax
c000894c:	6a 3c                	push   0x3c
c000894e:	6a 01                	push   0x1
c0008950:	e8 23 37 00 00       	call   c000c078 <calloc>
c0008955:	83 c4 10             	add    esp,0x10
c0008958:	89 c3                	mov    ebx,eax
c000895a:	85 c0                	test   eax,eax
c000895c:	75 10                	jne    c000896e <src_new+0x45>
c000895e:	85 f6                	test   esi,esi
c0008960:	75 04                	jne    c0008966 <src_new+0x3d>
c0008962:	31 db                	xor    ebx,ebx
c0008964:	eb 4b                	jmp    c00089b1 <src_new+0x88>
c0008966:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000896c:	eb 43                	jmp    c00089b1 <src_new+0x88>
c000896e:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008971:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008978:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000897c:	e8 e2 fb ff ff       	call   c0008563 <psrc_set_converter>
c0008981:	85 c0                	test   eax,eax
c0008983:	74 18                	je     c000899d <src_new+0x74>
c0008985:	85 f6                	test   esi,esi
c0008987:	74 06                	je     c000898f <src_new+0x66>
c0008989:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c000898f:	83 ec 0c             	sub    esp,0xc
c0008992:	53                   	push   ebx
c0008993:	31 db                	xor    ebx,ebx
c0008995:	e8 be 36 00 00       	call   c000c058 <free>
c000899a:	83 c4 10             	add    esp,0x10
c000899d:	83 ec 0c             	sub    esp,0xc
c00089a0:	53                   	push   ebx
c00089a1:	e8 3f ff ff ff       	call   c00088e5 <src_reset>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	eb 06                	jmp    c00089b1 <src_new+0x88>
c00089ab:	85 ff                	test   edi,edi
c00089ad:	7f 9b                	jg     c000894a <src_new+0x21>
c00089af:	eb b1                	jmp    c0008962 <src_new+0x39>
c00089b1:	89 d8                	mov    eax,ebx
c00089b3:	5b                   	pop    ebx
c00089b4:	5e                   	pop    esi
c00089b5:	5f                   	pop    edi
c00089b6:	c3                   	ret    

c00089b7 <src_callback_new>:
c00089b7:	56                   	push   esi
c00089b8:	53                   	push   ebx
c00089b9:	53                   	push   ebx
c00089ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089c2:	85 f6                	test   esi,esi
c00089c4:	75 0e                	jne    c00089d4 <src_callback_new+0x1d>
c00089c6:	31 db                	xor    ebx,ebx
c00089c8:	85 c0                	test   eax,eax
c00089ca:	74 47                	je     c0008a13 <src_callback_new+0x5c>
c00089cc:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089d2:	eb 3f                	jmp    c0008a13 <src_callback_new+0x5c>
c00089d4:	85 c0                	test   eax,eax
c00089d6:	74 06                	je     c00089de <src_callback_new+0x27>
c00089d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089de:	51                   	push   ecx
c00089df:	50                   	push   eax
c00089e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089e8:	e8 3c ff ff ff       	call   c0008929 <src_new>
c00089ed:	83 c4 10             	add    esp,0x10
c00089f0:	89 c3                	mov    ebx,eax
c00089f2:	85 c0                	test   eax,eax
c00089f4:	74 1d                	je     c0008a13 <src_callback_new+0x5c>
c00089f6:	83 ec 0c             	sub    esp,0xc
c00089f9:	50                   	push   eax
c00089fa:	e8 e6 fe ff ff       	call   c00088e5 <src_reset>
c00089ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a03:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a0a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a0d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a10:	83 c4 10             	add    esp,0x10
c0008a13:	89 d8                	mov    eax,ebx
c0008a15:	5a                   	pop    edx
c0008a16:	5b                   	pop    ebx
c0008a17:	5e                   	pop    esi
c0008a18:	c3                   	ret    

c0008a19 <src_get_name>:
c0008a19:	53                   	push   ebx
c0008a1a:	83 ec 14             	sub    esp,0x14
c0008a1d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a21:	53                   	push   ebx
c0008a22:	e8 59 1f 00 00       	call   c000a980 <sinc_get_name>
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	85 c0                	test   eax,eax
c0008a2c:	75 1d                	jne    c0008a4b <src_get_name+0x32>
c0008a2e:	83 ec 0c             	sub    esp,0xc
c0008a31:	53                   	push   ebx
c0008a32:	e8 60 23 00 00       	call   c000ad97 <zoh_get_name>
c0008a37:	83 c4 10             	add    esp,0x10
c0008a3a:	85 c0                	test   eax,eax
c0008a3c:	75 0d                	jne    c0008a4b <src_get_name+0x32>
c0008a3e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a42:	83 c4 08             	add    esp,0x8
c0008a45:	5b                   	pop    ebx
c0008a46:	e9 3a 05 00 00       	jmp    c0008f85 <linear_get_name>
c0008a4b:	83 c4 08             	add    esp,0x8
c0008a4e:	5b                   	pop    ebx
c0008a4f:	c3                   	ret    

c0008a50 <src_get_description>:
c0008a50:	53                   	push   ebx
c0008a51:	83 ec 14             	sub    esp,0x14
c0008a54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a58:	53                   	push   ebx
c0008a59:	e8 35 1f 00 00       	call   c000a993 <sinc_get_description>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	85 c0                	test   eax,eax
c0008a63:	75 1d                	jne    c0008a82 <src_get_description+0x32>
c0008a65:	83 ec 0c             	sub    esp,0xc
c0008a68:	53                   	push   ebx
c0008a69:	e8 38 23 00 00       	call   c000ada6 <zoh_get_description>
c0008a6e:	83 c4 10             	add    esp,0x10
c0008a71:	85 c0                	test   eax,eax
c0008a73:	75 0d                	jne    c0008a82 <src_get_description+0x32>
c0008a75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a79:	83 c4 08             	add    esp,0x8
c0008a7c:	5b                   	pop    ebx
c0008a7d:	e9 12 05 00 00       	jmp    c0008f94 <linear_get_description>
c0008a82:	83 c4 08             	add    esp,0x8
c0008a85:	5b                   	pop    ebx
c0008a86:	c3                   	ret    

c0008a87 <src_get_version>:
c0008a87:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0008a8c:	c3                   	ret    

c0008a8d <src_is_valid_ratio>:
c0008a8d:	50                   	push   eax
c0008a8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a96:	e8 84 fa ff ff       	call   c000851f <is_bad_src_ratio>
c0008a9b:	85 c0                	test   eax,eax
c0008a9d:	0f 94 c0             	sete   al
c0008aa0:	83 c4 0c             	add    esp,0xc
c0008aa3:	0f b6 c0             	movzx  eax,al
c0008aa6:	c3                   	ret    

c0008aa7 <src_error>:
c0008aa7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aab:	31 c0                	xor    eax,eax
c0008aad:	85 d2                	test   edx,edx
c0008aaf:	74 03                	je     c0008ab4 <src_error+0xd>
c0008ab1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008ab4:	c3                   	ret    

c0008ab5 <src_strerror>:
c0008ab5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008ab9:	31 c0                	xor    eax,eax
c0008abb:	83 fa 17             	cmp    edx,0x17
c0008abe:	77 07                	ja     c0008ac7 <src_strerror+0x12>
c0008ac0:	8b 04 95 00 0b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf500]
c0008ac7:	c3                   	ret    

c0008ac8 <src_simple>:
c0008ac8:	56                   	push   esi
c0008ac9:	53                   	push   ebx
c0008aca:	83 ec 18             	sub    esp,0x18
c0008acd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ad1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008ad5:	50                   	push   eax
c0008ad6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ada:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ade:	e8 46 fe ff ff       	call   c0008929 <src_new>
c0008ae3:	83 c4 10             	add    esp,0x10
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	75 06                	jne    c0008af0 <src_simple+0x28>
c0008aea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aee:	eb 25                	jmp    c0008b15 <src_simple+0x4d>
c0008af0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008af7:	89 c3                	mov    ebx,eax
c0008af9:	50                   	push   eax
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	53                   	push   ebx
c0008afd:	e8 e1 fa ff ff       	call   c00085e3 <src_process>
c0008b02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b09:	e8 99 fa ff ff       	call   c00085a7 <src_delete>
c0008b0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b12:	83 c4 10             	add    esp,0x10
c0008b15:	83 c4 14             	add    esp,0x14
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	c3                   	ret    

c0008b1b <src_short_to_float_array>:
c0008b1b:	83 ec 0c             	sub    esp,0xc
c0008b1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	74 0f                	je     c0008b3d <src_short_to_float_array+0x22>
c0008b2e:	48                   	dec    eax
c0008b2f:	d9 05 84 0b 02 c0    	fld    DWORD PTR ds:0xc0020b84
c0008b35:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008b38:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b3b:	eb ed                	jmp    c0008b2a <src_short_to_float_array+0xf>
c0008b3d:	83 c4 0c             	add    esp,0xc
c0008b40:	c3                   	ret    

c0008b41 <src_float_to_short_array>:
c0008b41:	56                   	push   esi
c0008b42:	53                   	push   ebx
c0008b43:	52                   	push   edx
c0008b44:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b4c:	85 db                	test   ebx,ebx
c0008b4e:	74 51                	je     c0008ba1 <src_float_to_short_array+0x60>
c0008b50:	4b                   	dec    ebx
c0008b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b55:	d9 05 88 0b 02 c0    	fld    DWORD PTR ds:0xc0020b88
c0008b5b:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b5e:	dc 15 78 0b 02 c0    	fcom   QWORD PTR ds:0xc0020b78
c0008b64:	df e0                	fnstsw ax
c0008b66:	9e                   	sahf   
c0008b67:	72 0a                	jb     c0008b73 <src_float_to_short_array+0x32>
c0008b69:	dd d8                	fstp   st(0)
c0008b6b:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b71:	eb d9                	jmp    c0008b4c <src_float_to_short_array+0xb>
c0008b73:	d9 05 8c 0b 02 c0    	fld    DWORD PTR ds:0xc0020b8c
c0008b79:	d8 d9                	fcomp  st(1)
c0008b7b:	df e0                	fnstsw ax
c0008b7d:	9e                   	sahf   
c0008b7e:	72 0a                	jb     c0008b8a <src_float_to_short_array+0x49>
c0008b80:	dd d8                	fstp   st(0)
c0008b82:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b88:	eb c2                	jmp    c0008b4c <src_float_to_short_array+0xb>
c0008b8a:	83 ec 10             	sub    esp,0x10
c0008b8d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b90:	e8 ab 68 01 00       	call   c001f440 <lrint>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	c1 f8 10             	sar    eax,0x10
c0008b9b:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b9f:	eb ab                	jmp    c0008b4c <src_float_to_short_array+0xb>
c0008ba1:	58                   	pop    eax
c0008ba2:	5b                   	pop    ebx
c0008ba3:	5e                   	pop    esi
c0008ba4:	c3                   	ret    

c0008ba5 <src_int_to_float_array>:
c0008ba5:	83 ec 0c             	sub    esp,0xc
c0008ba8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008bb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008bb4:	85 c0                	test   eax,eax
c0008bb6:	74 0f                	je     c0008bc7 <src_int_to_float_array+0x22>
c0008bb8:	48                   	dec    eax
c0008bb9:	d9 05 90 0b 02 c0    	fld    DWORD PTR ds:0xc0020b90
c0008bbf:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008bc2:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008bc5:	eb ed                	jmp    c0008bb4 <src_int_to_float_array+0xf>
c0008bc7:	83 c4 0c             	add    esp,0xc
c0008bca:	c3                   	ret    

c0008bcb <src_float_to_int_array>:
c0008bcb:	56                   	push   esi
c0008bcc:	53                   	push   ebx
c0008bcd:	52                   	push   edx
c0008bce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008bd2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008bd6:	85 db                	test   ebx,ebx
c0008bd8:	74 4f                	je     c0008c29 <src_float_to_int_array+0x5e>
c0008bda:	4b                   	dec    ebx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	d9 05 88 0b 02 c0    	fld    DWORD PTR ds:0xc0020b88
c0008be5:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008be8:	dc 15 78 0b 02 c0    	fcom   QWORD PTR ds:0xc0020b78
c0008bee:	df e0                	fnstsw ax
c0008bf0:	9e                   	sahf   
c0008bf1:	72 0b                	jb     c0008bfe <src_float_to_int_array+0x33>
c0008bf3:	dd d8                	fstp   st(0)
c0008bf5:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bfc:	eb d8                	jmp    c0008bd6 <src_float_to_int_array+0xb>
c0008bfe:	d9 05 8c 0b 02 c0    	fld    DWORD PTR ds:0xc0020b8c
c0008c04:	d8 d9                	fcomp  st(1)
c0008c06:	df e0                	fnstsw ax
c0008c08:	9e                   	sahf   
c0008c09:	72 0b                	jb     c0008c16 <src_float_to_int_array+0x4b>
c0008c0b:	dd d8                	fstp   st(0)
c0008c0d:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008c14:	eb c0                	jmp    c0008bd6 <src_float_to_int_array+0xb>
c0008c16:	83 ec 10             	sub    esp,0x10
c0008c19:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c1c:	e8 1f 68 01 00       	call   c001f440 <lrint>
c0008c21:	83 c4 10             	add    esp,0x10
c0008c24:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008c27:	eb ad                	jmp    c0008bd6 <src_float_to_int_array+0xb>
c0008c29:	58                   	pop    eax
c0008c2a:	5b                   	pop    ebx
c0008c2b:	5e                   	pop    esi
c0008c2c:	c3                   	ret    

c0008c2d <is_bad_src_ratio>:
c0008c2d:	83 ec 0c             	sub    esp,0xc
c0008c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c34:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c3f:	dd 04 24             	fld    QWORD PTR [esp]
c0008c42:	dd 05 60 0b 02 c0    	fld    QWORD PTR ds:0xc0020b60
c0008c48:	de d9                	fcompp 
c0008c4a:	df e0                	fnstsw ax
c0008c4c:	f6 c4 45             	test   ah,0x45
c0008c4f:	74 10                	je     c0008c61 <is_bad_src_ratio+0x34>
c0008c51:	dd 04 24             	fld    QWORD PTR [esp]
c0008c54:	dc 1d 68 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b68
c0008c5a:	df e0                	fnstsw ax
c0008c5c:	f6 c4 45             	test   ah,0x45
c0008c5f:	75 07                	jne    c0008c68 <is_bad_src_ratio+0x3b>
c0008c61:	b8 01 00 00 00       	mov    eax,0x1
c0008c66:	eb 05                	jmp    c0008c6d <is_bad_src_ratio+0x40>
c0008c68:	b8 00 00 00 00       	mov    eax,0x0
c0008c6d:	83 c4 0c             	add    esp,0xc
c0008c70:	c3                   	ret    

c0008c71 <fmod_one>:
c0008c71:	83 ec 2c             	sub    esp,0x2c
c0008c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c84:	83 ec 08             	sub    esp,0x8
c0008c87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c8f:	e8 ac 67 01 00       	call   c001f440 <lrint>
c0008c94:	83 c4 10             	add    esp,0x10
c0008c97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c9b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c9f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca3:	de e1                	fsubrp st(1),st
c0008ca5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008ca9:	d9 ee                	fldz   
c0008cab:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008caf:	df e0                	fnstsw ax
c0008cb1:	f6 c4 45             	test   ah,0x45
c0008cb4:	75 0a                	jne    c0008cc0 <fmod_one+0x4f>
c0008cb6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008cba:	d9 e8                	fld1   
c0008cbc:	de c1                	faddp  st(1),st
c0008cbe:	eb 04                	jmp    c0008cc4 <fmod_one+0x53>
c0008cc0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008cc4:	83 c4 2c             	add    esp,0x2c
c0008cc7:	c3                   	ret    

c0008cc8 <linear_vari_process>:
c0008cc8:	55                   	push   ebp
c0008cc9:	57                   	push   edi
c0008cca:	56                   	push   esi
c0008ccb:	53                   	push   ebx
c0008ccc:	83 ec 2c             	sub    esp,0x2c
c0008ccf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008cd3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008cd7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cdf:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ce3:	0f 8e 5e 02 00 00    	jle    c0008f47 <linear_vari_process+0x27f>
c0008ce9:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cec:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cf4:	85 db                	test   ebx,ebx
c0008cf6:	0f 84 4b 02 00 00    	je     c0008f47 <linear_vari_process+0x27f>
c0008cfc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008d03:	74 19                	je     c0008d1e <linear_vari_process+0x56>
c0008d05:	31 d2                	xor    edx,edx
c0008d07:	39 c2                	cmp    edx,eax
c0008d09:	7d 0c                	jge    c0008d17 <linear_vari_process+0x4f>
c0008d0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008d0d:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008d10:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008d14:	42                   	inc    edx
c0008d15:	eb f0                	jmp    c0008d07 <linear_vari_process+0x3f>
c0008d17:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008d1e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008d21:	0f af d0             	imul   edx,eax
c0008d24:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008d27:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008d2b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008d32:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008d35:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d3c:	dd 07                	fld    QWORD PTR [edi]
c0008d3e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d41:	50                   	push   eax
c0008d42:	50                   	push   eax
c0008d43:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d46:	e8 e2 fe ff ff       	call   c0008c2d <is_bad_src_ratio>
c0008d4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d4f:	5a                   	pop    edx
c0008d50:	59                   	pop    ecx
c0008d51:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d56:	0f 85 e3 01 00 00    	jne    c0008f3f <linear_vari_process+0x277>
c0008d5c:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d5f:	d9 e8                	fld1   
c0008d61:	d8 d1                	fcom   st(1)
c0008d63:	df e0                	fnstsw ax
c0008d65:	9e                   	sahf   
c0008d66:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d6a:	0f 86 99 00 00 00    	jbe    c0008e09 <linear_vari_process+0x141>
c0008d70:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d73:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d76:	0f 8d 8d 00 00 00    	jge    c0008e09 <linear_vari_process+0x141>
c0008d7c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d80:	d8 c1                	fadd   st,st(1)
c0008d82:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d85:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d88:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d8b:	df e0                	fnstsw ax
c0008d8d:	9e                   	sahf   
c0008d8e:	73 79                	jae    c0008e09 <linear_vari_process+0x141>
c0008d90:	85 d2                	test   edx,edx
c0008d92:	7e 38                	jle    c0008dcc <linear_vari_process+0x104>
c0008d94:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d98:	83 ec 10             	sub    esp,0x10
c0008d9b:	dd 07                	fld    QWORD PTR [edi]
c0008d9d:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008da0:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da3:	e8 78 66 01 00       	call   c001f420 <fabs>
c0008da8:	83 c4 10             	add    esp,0x10
c0008dab:	dc 1d d8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bd8
c0008db1:	df e0                	fnstsw ax
c0008db3:	9e                   	sahf   
c0008db4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db8:	76 12                	jbe    c0008dcc <linear_vari_process+0x104>
c0008dba:	dd 07                	fld    QWORD PTR [edi]
c0008dbc:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbf:	d8 e1                	fsub   st,st(1)
c0008dc1:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc4:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc7:	de c1                	faddp  st(1),st
c0008dc9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dcc:	31 c0                	xor    eax,eax
c0008dce:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008dd1:	7e 1f                	jle    c0008df2 <linear_vari_process+0x12a>
c0008dd3:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008dd7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008dd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008ddc:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008de0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008de3:	d8 e1                	fsub   st,st(1)
c0008de5:	40                   	inc    eax
c0008de6:	d8 ca                	fmul   st,st(2)
c0008de8:	de c1                	faddp  st(1),st
c0008dea:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008ded:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008df0:	eb dc                	jmp    c0008dce <linear_vari_process+0x106>
c0008df2:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008df6:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008df9:	de c1                	faddp  st(1),st
c0008dfb:	e9 5f ff ff ff       	jmp    c0008d5f <linear_vari_process+0x97>
c0008e00:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008e04:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008e07:	de c1                	faddp  st(1),st
c0008e09:	83 ec 10             	sub    esp,0x10
c0008e0c:	dd 14 24             	fst    QWORD PTR [esp]
c0008e0f:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008e13:	e8 59 fe ff ff       	call   c0008c71 <fmod_one>
c0008e18:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008e1b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008e1f:	d8 e1                	fsub   st,st(1)
c0008e21:	d9 c9                	fxch   st(1)
c0008e23:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008e27:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e2a:	e8 11 66 01 00       	call   c001f440 <lrint>
c0008e2f:	83 c4 10             	add    esp,0x10
c0008e32:	0f af e8             	imul   ebp,eax
c0008e35:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e39:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008e3c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e3f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008e42:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e45:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e48:	0f 8d 97 00 00 00    	jge    c0008ee5 <linear_vari_process+0x21d>
c0008e4e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e52:	d9 c0                	fld    st(0)
c0008e54:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e57:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e5b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e5f:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e63:	de d9                	fcompp 
c0008e65:	df e0                	fnstsw ax
c0008e67:	9e                   	sahf   
c0008e68:	76 7b                	jbe    c0008ee5 <linear_vari_process+0x21d>
c0008e6a:	85 ed                	test   ebp,ebp
c0008e6c:	7e 38                	jle    c0008ea6 <linear_vari_process+0x1de>
c0008e6e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e72:	83 ec 10             	sub    esp,0x10
c0008e75:	dd 07                	fld    QWORD PTR [edi]
c0008e77:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e7a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e7d:	e8 9e 65 01 00       	call   c001f420 <fabs>
c0008e82:	83 c4 10             	add    esp,0x10
c0008e85:	dc 1d d8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bd8
c0008e8b:	df e0                	fnstsw ax
c0008e8d:	9e                   	sahf   
c0008e8e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e92:	76 12                	jbe    c0008ea6 <linear_vari_process+0x1de>
c0008e94:	dd 07                	fld    QWORD PTR [edi]
c0008e96:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e99:	d8 e1                	fsub   st,st(1)
c0008e9b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e9e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ea1:	de c1                	faddp  st(1),st
c0008ea3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ea6:	31 c0                	xor    eax,eax
c0008ea8:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008eab:	39 c2                	cmp    edx,eax
c0008ead:	0f 8e 4d ff ff ff    	jle    c0008e00 <linear_vari_process+0x138>
c0008eb3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008eb5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008eb8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008ebc:	89 e9                	mov    ecx,ebp
c0008ebe:	01 c5                	add    ebp,eax
c0008ec0:	29 d1                	sub    ecx,edx
c0008ec2:	89 ca                	mov    edx,ecx
c0008ec4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ec8:	01 c2                	add    edx,eax
c0008eca:	40                   	inc    eax
c0008ecb:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ece:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008ed1:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008ed4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008ed7:	d8 e1                	fsub   st,st(1)
c0008ed9:	d8 ca                	fmul   st,st(2)
c0008edb:	de c1                	faddp  st(1),st
c0008edd:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008ee0:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008ee3:	eb c3                	jmp    c0008ea8 <linear_vari_process+0x1e0>
c0008ee5:	39 d1                	cmp    ecx,edx
c0008ee7:	7d 13                	jge    c0008efc <linear_vari_process+0x234>
c0008ee9:	89 d0                	mov    eax,edx
c0008eeb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008eee:	29 c8                	sub    eax,ecx
c0008ef0:	99                   	cdq    
c0008ef1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ef4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef8:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008efc:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008f02:	85 c0                	test   eax,eax
c0008f04:	7f 1b                	jg     c0008f21 <linear_vari_process+0x259>
c0008f06:	dd 04 24             	fld    QWORD PTR [esp]
c0008f09:	dd 1f                	fstp   QWORD PTR [edi]
c0008f0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008f0e:	99                   	cdq    
c0008f0f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008f12:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008f15:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008f18:	99                   	cdq    
c0008f19:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008f1c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008f1f:	eb 26                	jmp    c0008f47 <linear_vari_process+0x27f>
c0008f21:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008f24:	31 d2                	xor    edx,edx
c0008f26:	29 c8                	sub    eax,ecx
c0008f28:	c1 e0 02             	shl    eax,0x2
c0008f2b:	39 d1                	cmp    ecx,edx
c0008f2d:	7e d7                	jle    c0008f06 <linear_vari_process+0x23e>
c0008f2f:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008f31:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008f35:	83 c0 04             	add    eax,0x4
c0008f38:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f3c:	42                   	inc    edx
c0008f3d:	eb ec                	jmp    c0008f2b <linear_vari_process+0x263>
c0008f3f:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f4b:	83 c4 2c             	add    esp,0x2c
c0008f4e:	5b                   	pop    ebx
c0008f4f:	5e                   	pop    esi
c0008f50:	5f                   	pop    edi
c0008f51:	5d                   	pop    ebp
c0008f52:	c3                   	ret    

c0008f53 <linear_reset>:
c0008f53:	83 ec 0c             	sub    esp,0xc
c0008f56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f5a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f5d:	85 c0                	test   eax,eax
c0008f5f:	74 20                	je     c0008f81 <linear_reset+0x2e>
c0008f61:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f64:	83 c0 1c             	add    eax,0x1c
c0008f67:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008f6a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008f71:	c1 e2 02             	shl    edx,0x2
c0008f74:	51                   	push   ecx
c0008f75:	52                   	push   edx
c0008f76:	6a 00                	push   0x0
c0008f78:	50                   	push   eax
c0008f79:	e8 68 77 ff ff       	call   c00006e6 <memset>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	83 c4 0c             	add    esp,0xc
c0008f84:	c3                   	ret    

c0008f85 <linear_get_name>:
c0008f85:	31 c0                	xor    eax,eax
c0008f87:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f8c:	75 05                	jne    c0008f93 <linear_get_name+0xe>
c0008f8e:	b8 94 0b 02 c0       	mov    eax,0xc0020b94
c0008f93:	c3                   	ret    

c0008f94 <linear_get_description>:
c0008f94:	31 c0                	xor    eax,eax
c0008f96:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f9b:	75 05                	jne    c0008fa2 <linear_get_description+0xe>
c0008f9d:	b8 a8 0b 02 c0       	mov    eax,0xc0020ba8
c0008fa2:	c3                   	ret    

c0008fa3 <linear_set_converter>:
c0008fa3:	53                   	push   ebx
c0008fa4:	b8 0a 00 00 00       	mov    eax,0xa
c0008fa9:	83 ec 08             	sub    esp,0x8
c0008fac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008fb0:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008fb5:	75 6e                	jne    c0009025 <linear_set_converter+0x82>
c0008fb7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	74 13                	je     c0008fd1 <linear_set_converter+0x2e>
c0008fbe:	83 ec 0c             	sub    esp,0xc
c0008fc1:	50                   	push   eax
c0008fc2:	e8 91 30 00 00       	call   c000c058 <free>
c0008fc7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	50                   	push   eax
c0008fd2:	50                   	push   eax
c0008fd3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fd6:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008fdd:	50                   	push   eax
c0008fde:	6a 01                	push   0x1
c0008fe0:	e8 93 30 00 00       	call   c000c078 <calloc>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	89 c2                	mov    edx,eax
c0008fea:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fed:	85 d2                	test   edx,edx
c0008fef:	b8 01 00 00 00       	mov    eax,0x1
c0008ff4:	74 2f                	je     c0009025 <linear_set_converter+0x82>
c0008ff6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ff9:	83 ec 0c             	sub    esp,0xc
c0008ffc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fff:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009005:	c7 43 24 c8 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008cc8
c000900c:	c7 43 20 c8 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008cc8
c0009013:	c7 43 28 53 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f53
c000901a:	53                   	push   ebx
c000901b:	e8 33 ff ff ff       	call   c0008f53 <linear_reset>
c0009020:	83 c4 10             	add    esp,0x10
c0009023:	31 c0                	xor    eax,eax
c0009025:	83 c4 08             	add    esp,0x8
c0009028:	5b                   	pop    ebx
c0009029:	c3                   	ret    

c000902a <is_bad_src_ratio>:
c000902a:	83 ec 0c             	sub    esp,0xc
c000902d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009031:	89 04 24             	mov    DWORD PTR [esp],eax
c0009034:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009038:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000903c:	dd 04 24             	fld    QWORD PTR [esp]
c000903f:	dd 05 60 0b 02 c0    	fld    QWORD PTR ds:0xc0020b60
c0009045:	de d9                	fcompp 
c0009047:	df e0                	fnstsw ax
c0009049:	f6 c4 45             	test   ah,0x45
c000904c:	74 10                	je     c000905e <is_bad_src_ratio+0x34>
c000904e:	dd 04 24             	fld    QWORD PTR [esp]
c0009051:	dc 1d 68 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b68
c0009057:	df e0                	fnstsw ax
c0009059:	f6 c4 45             	test   ah,0x45
c000905c:	75 07                	jne    c0009065 <is_bad_src_ratio+0x3b>
c000905e:	b8 01 00 00 00       	mov    eax,0x1
c0009063:	eb 05                	jmp    c000906a <is_bad_src_ratio+0x40>
c0009065:	b8 00 00 00 00       	mov    eax,0x0
c000906a:	83 c4 0c             	add    esp,0xc
c000906d:	c3                   	ret    

c000906e <int_to_fp>:
c000906e:	c1 e0 0c             	shl    eax,0xc
c0009071:	c3                   	ret    

c0009072 <fp_to_int>:
c0009072:	c1 f8 0c             	sar    eax,0xc
c0009075:	c3                   	ret    

c0009076 <fp_fraction_part>:
c0009076:	25 ff 0f 00 00       	and    eax,0xfff
c000907b:	c3                   	ret    

c000907c <fp_to_double>:
c000907c:	83 ec 0c             	sub    esp,0xc
c000907f:	e8 f2 ff ff ff       	call   c0009076 <fp_fraction_part>
c0009084:	d9 05 68 0d 02 c0    	fld    DWORD PTR ds:0xc0020d68
c000908a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000908e:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009092:	83 c4 0c             	add    esp,0xc
c0009095:	c3                   	ret    

c0009096 <calc_output_single>:
c0009096:	55                   	push   ebp
c0009097:	57                   	push   edi
c0009098:	89 c7                	mov    edi,eax
c000909a:	56                   	push   esi
c000909b:	53                   	push   ebx
c000909c:	89 d3                	mov    ebx,edx
c000909e:	83 ec 24             	sub    esp,0x24
c00090a1:	89 de                	mov    esi,ebx
c00090a3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090a6:	e8 c3 ff ff ff       	call   c000906e <int_to_fp>
c00090ab:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00090b9:	29 c8                	sub    eax,ecx
c00090bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00090c3:	99                   	cdq    
c00090c4:	f7 fb                	idiv   ebx
c00090c6:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090c9:	0f af f0             	imul   esi,eax
c00090cc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d0:	01 ce                	add    esi,ecx
c00090d2:	29 c2                	sub    edx,eax
c00090d4:	8d 14 97             	lea    edx,[edi+edx*4]
c00090d7:	89 f0                	mov    eax,esi
c00090d9:	e8 9e ff ff ff       	call   c000907c <fp_to_double>
c00090de:	89 f0                	mov    eax,esi
c00090e0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090e4:	e8 89 ff ff ff       	call   c0009072 <fp_to_int>
c00090e9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090ed:	83 c2 04             	add    edx,0x4
c00090f0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090f4:	d8 e1                	fsub   st,st(1)
c00090f6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090fa:	de c9                	fmulp  st(1),st
c00090fc:	de c1                	faddp  st(1),st
c00090fe:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009104:	29 de                	sub    esi,ebx
c0009106:	dc 04 24             	fadd   QWORD PTR [esp]
c0009109:	dd 1c 24             	fstp   QWORD PTR [esp]
c000910c:	79 c9                	jns    c00090d7 <calc_output_single+0x41>
c000910e:	89 d8                	mov    eax,ebx
c0009110:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009114:	29 c8                	sub    eax,ecx
c0009116:	d9 ee                	fldz   
c0009118:	89 c1                	mov    ecx,eax
c000911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000911e:	29 c8                	sub    eax,ecx
c0009120:	99                   	cdq    
c0009121:	f7 fb                	idiv   ebx
c0009123:	89 da                	mov    edx,ebx
c0009125:	0f af d0             	imul   edx,eax
c0009128:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000912c:	01 d1                	add    ecx,edx
c000912e:	8d 14 87             	lea    edx,[edi+eax*4]
c0009131:	89 c8                	mov    eax,ecx
c0009133:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009137:	e8 40 ff ff ff       	call   c000907c <fp_to_double>
c000913c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009140:	89 c8                	mov    eax,ecx
c0009142:	e8 2b ff ff ff       	call   c0009072 <fp_to_int>
c0009147:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000914b:	29 d9                	sub    ecx,ebx
c000914d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009151:	83 ea 04             	sub    edx,0x4
c0009154:	d8 e1                	fsub   st,st(1)
c0009156:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000915a:	de c9                	fmulp  st(1),st
c000915c:	de c1                	faddp  st(1),st
c000915e:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009164:	85 c9                	test   ecx,ecx
c0009166:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000916a:	de c1                	faddp  st(1),st
c000916c:	7f c3                	jg     c0009131 <calc_output_single+0x9b>
c000916e:	dd 04 24             	fld    QWORD PTR [esp]
c0009171:	83 c4 24             	add    esp,0x24
c0009174:	de c1                	faddp  st(1),st
c0009176:	5b                   	pop    ebx
c0009177:	5e                   	pop    esi
c0009178:	5f                   	pop    edi
c0009179:	5d                   	pop    ebp
c000917a:	c3                   	ret    

c000917b <calc_output_stereo>:
c000917b:	55                   	push   ebp
c000917c:	57                   	push   edi
c000917d:	89 c7                	mov    edi,eax
c000917f:	56                   	push   esi
c0009180:	53                   	push   ebx
c0009181:	89 d3                	mov    ebx,edx
c0009183:	83 ec 44             	sub    esp,0x44
c0009186:	89 de                	mov    esi,ebx
c0009188:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000918c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000918f:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009193:	e8 d6 fe ff ff       	call   c000906e <int_to_fp>
c0009198:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000919b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000919f:	d9 ee                	fldz   
c00091a1:	29 c8                	sub    eax,ecx
c00091a3:	dd 14 24             	fst    QWORD PTR [esp]
c00091a6:	99                   	cdq    
c00091a7:	f7 fb                	idiv   ebx
c00091a9:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00091ac:	0f af f0             	imul   esi,eax
c00091af:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00091b3:	01 ce                	add    esi,ecx
c00091b5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00091b8:	0f af c2             	imul   eax,edx
c00091bb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00091bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00091c3:	29 c2                	sub    edx,eax
c00091c5:	8d 14 97             	lea    edx,[edi+edx*4]
c00091c8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091cc:	89 f0                	mov    eax,esi
c00091ce:	e8 a9 fe ff ff       	call   c000907c <fp_to_double>
c00091d3:	89 f0                	mov    eax,esi
c00091d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00091d9:	e8 94 fe ff ff       	call   c0009072 <fp_to_int>
c00091de:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091e2:	83 c2 08             	add    edx,0x8
c00091e5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091e9:	d8 e1                	fsub   st,st(1)
c00091eb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091ef:	de c9                	fmulp  st(1),st
c00091f1:	de c1                	faddp  st(1),st
c00091f3:	d9 c0                	fld    st(0)
c00091f5:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091fb:	dc 04 24             	fadd   QWORD PTR [esp]
c00091fe:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009201:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009207:	29 de                	sub    esi,ebx
c0009209:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000920d:	de c1                	faddp  st(1),st
c000920f:	79 b7                	jns    c00091c8 <calc_output_stereo+0x4d>
c0009211:	89 d8                	mov    eax,ebx
c0009213:	d9 ee                	fldz   
c0009215:	d9 ee                	fldz   
c0009217:	29 c8                	sub    eax,ecx
c0009219:	89 c1                	mov    ecx,eax
c000921b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000921f:	29 c8                	sub    eax,ecx
c0009221:	99                   	cdq    
c0009222:	f7 fb                	idiv   ebx
c0009224:	89 da                	mov    edx,ebx
c0009226:	0f af d0             	imul   edx,eax
c0009229:	40                   	inc    eax
c000922a:	01 d1                	add    ecx,edx
c000922c:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009231:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009235:	8d 14 87             	lea    edx,[edi+eax*4]
c0009238:	eb 04                	jmp    c000923e <calc_output_stereo+0xc3>
c000923a:	d9 ca                	fxch   st(2)
c000923c:	d9 c9                	fxch   st(1)
c000923e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009242:	d9 c9                	fxch   st(1)
c0009244:	89 c8                	mov    eax,ecx
c0009246:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000924a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000924e:	e8 29 fe ff ff       	call   c000907c <fp_to_double>
c0009253:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009257:	89 c8                	mov    eax,ecx
c0009259:	e8 14 fe ff ff       	call   c0009072 <fp_to_int>
c000925e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009262:	29 d9                	sub    ecx,ebx
c0009264:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009268:	83 ea 08             	sub    edx,0x8
c000926b:	d8 e1                	fsub   st,st(1)
c000926d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009271:	de c9                	fmulp  st(1),st
c0009273:	de c1                	faddp  st(1),st
c0009275:	d9 c0                	fld    st(0)
c0009277:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000927d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009281:	de c1                	faddp  st(1),st
c0009283:	d9 c9                	fxch   st(1)
c0009285:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000928b:	85 c9                	test   ecx,ecx
c000928d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009291:	de c1                	faddp  st(1),st
c0009293:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009297:	7f a1                	jg     c000923a <calc_output_stereo+0xbf>
c0009299:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000929d:	dd 04 24             	fld    QWORD PTR [esp]
c00092a0:	de c3                	faddp  st(3),st
c00092a2:	d9 ca                	fxch   st(2)
c00092a4:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00092a8:	d9 18                	fstp   DWORD PTR [eax]
c00092aa:	de c1                	faddp  st(1),st
c00092ac:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00092b0:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00092b3:	83 c4 44             	add    esp,0x44
c00092b6:	5b                   	pop    ebx
c00092b7:	5e                   	pop    esi
c00092b8:	5f                   	pop    edi
c00092b9:	5d                   	pop    ebp
c00092ba:	c3                   	ret    

c00092bb <calc_output_quad>:
c00092bb:	55                   	push   ebp
c00092bc:	57                   	push   edi
c00092bd:	56                   	push   esi
c00092be:	89 c6                	mov    esi,eax
c00092c0:	53                   	push   ebx
c00092c1:	89 d3                	mov    ebx,edx
c00092c3:	83 ec 5c             	sub    esp,0x5c
c00092c6:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00092ca:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00092d0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00092d4:	e8 95 fd ff ff       	call   c000906e <int_to_fp>
c00092d9:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00092dc:	d9 ee                	fldz   
c00092de:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092e2:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092e6:	29 c8                	sub    eax,ecx
c00092e8:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092ec:	99                   	cdq    
c00092ed:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092f1:	f7 fb                	idiv   ebx
c00092f3:	89 da                	mov    edx,ebx
c00092f5:	0f af d0             	imul   edx,eax
c00092f8:	01 ca                	add    edx,ecx
c00092fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092fe:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009301:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009305:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009308:	0f af c2             	imul   eax,edx
c000930b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000930f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009313:	29 c2                	sub    edx,eax
c0009315:	8d 14 96             	lea    edx,[esi+edx*4]
c0009318:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000931c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009320:	e8 57 fd ff ff       	call   c000907c <fp_to_double>
c0009325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009329:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000932d:	e8 40 fd ff ff       	call   c0009072 <fp_to_int>
c0009332:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009336:	83 c2 10             	add    edx,0x10
c0009339:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000933d:	d8 e1                	fsub   st,st(1)
c000933f:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009343:	de c9                	fmulp  st(1),st
c0009345:	de c1                	faddp  st(1),st
c0009347:	d9 c0                	fld    st(0)
c0009349:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000934f:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009353:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009357:	d9 c0                	fld    st(0)
c0009359:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000935f:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009363:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009367:	d9 c0                	fld    st(0)
c0009369:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000936f:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009373:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009377:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000937d:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009381:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009385:	de c1                	faddp  st(1),st
c0009387:	79 8f                	jns    c0009318 <calc_output_quad+0x5d>
c0009389:	89 d8                	mov    eax,ebx
c000938b:	d9 ee                	fldz   
c000938d:	29 c8                	sub    eax,ecx
c000938f:	d9 ee                	fldz   
c0009391:	89 c1                	mov    ecx,eax
c0009393:	d9 ee                	fldz   
c0009395:	d9 ee                	fldz   
c0009397:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000939b:	29 c8                	sub    eax,ecx
c000939d:	99                   	cdq    
c000939e:	f7 fb                	idiv   ebx
c00093a0:	89 da                	mov    edx,ebx
c00093a2:	0f af d0             	imul   edx,eax
c00093a5:	40                   	inc    eax
c00093a6:	01 d1                	add    ecx,edx
c00093a8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00093ad:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00093b1:	8d 14 86             	lea    edx,[esi+eax*4]
c00093b4:	eb 0a                	jmp    c00093c0 <calc_output_quad+0x105>
c00093b6:	d9 cc                	fxch   st(4)
c00093b8:	d9 ca                	fxch   st(2)
c00093ba:	d9 c9                	fxch   st(1)
c00093bc:	d9 cb                	fxch   st(3)
c00093be:	d9 c9                	fxch   st(1)
c00093c0:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00093c4:	d9 c9                	fxch   st(1)
c00093c6:	89 c8                	mov    eax,ecx
c00093c8:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00093cc:	d9 c9                	fxch   st(1)
c00093ce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00093d2:	d9 c9                	fxch   st(1)
c00093d4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093d8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093dc:	e8 9b fc ff ff       	call   c000907c <fp_to_double>
c00093e1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093e5:	89 c8                	mov    eax,ecx
c00093e7:	e8 86 fc ff ff       	call   c0009072 <fp_to_int>
c00093ec:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093f0:	29 d9                	sub    ecx,ebx
c00093f2:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093f6:	83 ea 10             	sub    edx,0x10
c00093f9:	d8 e1                	fsub   st,st(1)
c00093fb:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093ff:	de c9                	fmulp  st(1),st
c0009401:	de c1                	faddp  st(1),st
c0009403:	d9 c0                	fld    st(0)
c0009405:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000940b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000940f:	de c1                	faddp  st(1),st
c0009411:	d9 c1                	fld    st(1)
c0009413:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009419:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000941d:	de c1                	faddp  st(1),st
c000941f:	d9 c2                	fld    st(2)
c0009421:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009427:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000942b:	de c1                	faddp  st(1),st
c000942d:	d9 cb                	fxch   st(3)
c000942f:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009435:	85 c9                	test   ecx,ecx
c0009437:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000943b:	de c1                	faddp  st(1),st
c000943d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009441:	0f 8f 6f ff ff ff    	jg     c00093b6 <calc_output_quad+0xfb>
c0009447:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000944b:	de c4                	faddp  st(4),st
c000944d:	d9 cb                	fxch   st(3)
c000944f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009452:	d9 1f                	fstp   DWORD PTR [edi]
c0009454:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009458:	de c2                	faddp  st(2),st
c000945a:	d9 c9                	fxch   st(1)
c000945c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000945f:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009462:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009466:	de c3                	faddp  st(3),st
c0009468:	d9 ca                	fxch   st(2)
c000946a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000946d:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009470:	de c1                	faddp  st(1),st
c0009472:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009475:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009478:	83 c4 5c             	add    esp,0x5c
c000947b:	5b                   	pop    ebx
c000947c:	5e                   	pop    esi
c000947d:	5f                   	pop    edi
c000947e:	5d                   	pop    ebp
c000947f:	c3                   	ret    

c0009480 <calc_output_hex>:
c0009480:	55                   	push   ebp
c0009481:	57                   	push   edi
c0009482:	89 c7                	mov    edi,eax
c0009484:	56                   	push   esi
c0009485:	53                   	push   ebx
c0009486:	89 d3                	mov    ebx,edx
c0009488:	83 ec 7c             	sub    esp,0x7c
c000948b:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009492:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009495:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009498:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000949f:	e8 ca fb ff ff       	call   c000906e <int_to_fp>
c00094a4:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00094a7:	d9 ee                	fldz   
c00094a9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00094ad:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00094b1:	29 c8                	sub    eax,ecx
c00094b3:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094b7:	99                   	cdq    
c00094b8:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094bc:	f7 fb                	idiv   ebx
c00094be:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094c2:	89 da                	mov    edx,ebx
c00094c4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00094c8:	0f af d0             	imul   edx,eax
c00094cb:	01 ca                	add    edx,ecx
c00094cd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00094d1:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00094d4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00094d8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00094db:	0f af c2             	imul   eax,edx
c00094de:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00094e2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00094e6:	29 c2                	sub    edx,eax
c00094e8:	8d 14 97             	lea    edx,[edi+edx*4]
c00094eb:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094f3:	e8 84 fb ff ff       	call   c000907c <fp_to_double>
c00094f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094fc:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009500:	e8 6d fb ff ff       	call   c0009072 <fp_to_int>
c0009505:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009509:	83 c2 18             	add    edx,0x18
c000950c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009510:	d8 e1                	fsub   st,st(1)
c0009512:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009516:	de c9                	fmulp  st(1),st
c0009518:	de c1                	faddp  st(1),st
c000951a:	d9 c0                	fld    st(0)
c000951c:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009522:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009526:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000952a:	d9 c0                	fld    st(0)
c000952c:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009532:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009536:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000953a:	d9 c0                	fld    st(0)
c000953c:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009542:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009546:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000954a:	d9 c0                	fld    st(0)
c000954c:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009552:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009556:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000955a:	d9 c0                	fld    st(0)
c000955c:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009562:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009566:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000956a:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009570:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009574:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009578:	de c1                	faddp  st(1),st
c000957a:	0f 89 6b ff ff ff    	jns    c00094eb <calc_output_hex+0x6b>
c0009580:	d9 ee                	fldz   
c0009582:	d9 ee                	fldz   
c0009584:	89 d8                	mov    eax,ebx
c0009586:	29 c8                	sub    eax,ecx
c0009588:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c000958c:	89 c1                	mov    ecx,eax
c000958e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009592:	29 c8                	sub    eax,ecx
c0009594:	99                   	cdq    
c0009595:	f7 fb                	idiv   ebx
c0009597:	89 da                	mov    edx,ebx
c0009599:	0f af d0             	imul   edx,eax
c000959c:	40                   	inc    eax
c000959d:	01 d1                	add    ecx,edx
c000959f:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00095a4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00095a8:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00095ac:	8d 14 87             	lea    edx,[edi+eax*4]
c00095af:	d9 ee                	fldz   
c00095b1:	d9 ee                	fldz   
c00095b3:	d9 ca                	fxch   st(2)
c00095b5:	eb 08                	jmp    c00095bf <calc_output_hex+0x13f>
c00095b7:	d9 cc                	fxch   st(4)
c00095b9:	d9 cb                	fxch   st(3)
c00095bb:	d9 ca                	fxch   st(2)
c00095bd:	d9 c9                	fxch   st(1)
c00095bf:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00095c3:	89 c8                	mov    eax,ecx
c00095c5:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00095c9:	d9 ca                	fxch   st(2)
c00095cb:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095cf:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095d3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095d7:	e8 a0 fa ff ff       	call   c000907c <fp_to_double>
c00095dc:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095e0:	89 c8                	mov    eax,ecx
c00095e2:	e8 8b fa ff ff       	call   c0009072 <fp_to_int>
c00095e7:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095eb:	29 d9                	sub    ecx,ebx
c00095ed:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095f1:	83 ea 18             	sub    edx,0x18
c00095f4:	d8 e1                	fsub   st,st(1)
c00095f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095fa:	de c9                	fmulp  st(1),st
c00095fc:	de c1                	faddp  st(1),st
c00095fe:	d9 c0                	fld    st(0)
c0009600:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009606:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000960a:	de c1                	faddp  st(1),st
c000960c:	d9 c1                	fld    st(1)
c000960e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009614:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009618:	de c1                	faddp  st(1),st
c000961a:	d9 c2                	fld    st(2)
c000961c:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009622:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009626:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000962a:	d9 c2                	fld    st(2)
c000962c:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009632:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009636:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000963a:	d9 c2                	fld    st(2)
c000963c:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009642:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009646:	de c1                	faddp  st(1),st
c0009648:	d9 cb                	fxch   st(3)
c000964a:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009650:	85 c9                	test   ecx,ecx
c0009652:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009656:	de c1                	faddp  st(1),st
c0009658:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000965c:	0f 8f 55 ff ff ff    	jg     c00095b7 <calc_output_hex+0x137>
c0009662:	d9 cb                	fxch   st(3)
c0009664:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009668:	dc 0c 24             	fmul   QWORD PTR [esp]
c000966b:	d9 1e                	fstp   DWORD PTR [esi]
c000966d:	d9 c9                	fxch   st(1)
c000966f:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009673:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009676:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009679:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000967d:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009681:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009684:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009687:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000968b:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000968f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009692:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009695:	d9 ca                	fxch   st(2)
c0009697:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000969b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000969e:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00096a1:	de c1                	faddp  st(1),st
c00096a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096a6:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00096a9:	83 c4 7c             	add    esp,0x7c
c00096ac:	5b                   	pop    ebx
c00096ad:	5e                   	pop    esi
c00096ae:	5f                   	pop    edi
c00096af:	5d                   	pop    ebp
c00096b0:	c3                   	ret    

c00096b1 <sinc_reset>:
c00096b1:	56                   	push   esi
c00096b2:	53                   	push   ebx
c00096b3:	51                   	push   ecx
c00096b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096b8:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00096bb:	85 db                	test   ebx,ebx
c00096bd:	74 51                	je     c0009710 <sinc_reset+0x5f>
c00096bf:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00096c6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00096cd:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096d4:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096da:	d9 ee                	fldz   
c00096dc:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00096df:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096e2:	52                   	push   edx
c00096e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096e6:	c1 e0 02             	shl    eax,0x2
c00096e9:	50                   	push   eax
c00096ea:	6a 00                	push   0x0
c00096ec:	56                   	push   esi
c00096ed:	e8 f4 6f ff ff       	call   c00006e6 <memset>
c00096f2:	83 c4 0c             	add    esp,0xc
c00096f5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096f8:	c1 e0 02             	shl    eax,0x2
c00096fb:	50                   	push   eax
c00096fc:	68 aa 00 00 00       	push   0xaa
c0009701:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009704:	8d 04 86             	lea    eax,[esi+eax*4]
c0009707:	50                   	push   eax
c0009708:	e8 d9 6f ff ff       	call   c00006e6 <memset>
c000970d:	83 c4 10             	add    esp,0x10
c0009710:	58                   	pop    eax
c0009711:	5b                   	pop    ebx
c0009712:	5e                   	pop    esi
c0009713:	c3                   	ret    

c0009714 <calc_output_multi>:
c0009714:	55                   	push   ebp
c0009715:	57                   	push   edi
c0009716:	8d 78 44             	lea    edi,[eax+0x44]
c0009719:	56                   	push   esi
c000971a:	89 c6                	mov    esi,eax
c000971c:	53                   	push   ebx
c000971d:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009723:	83 ec 4c             	sub    esp,0x4c
c0009726:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000972a:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000972e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009732:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009736:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000973a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000973e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009741:	e8 28 f9 ff ff       	call   c000906e <int_to_fp>
c0009746:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009749:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000974d:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009751:	99                   	cdq    
c0009752:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009756:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000975a:	0f af d0             	imul   edx,eax
c000975d:	0f af c3             	imul   eax,ebx
c0009760:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009764:	29 c5                	sub    ebp,eax
c0009766:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000976a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000976e:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009775:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009779:	52                   	push   edx
c000977a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000977e:	6a 00                	push   0x0
c0009780:	57                   	push   edi
c0009781:	e8 60 6f ff ff       	call   c00006e6 <memset>
c0009786:	83 c4 10             	add    esp,0x10
c0009789:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000978d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009795:	e8 e2 f8 ff ff       	call   c000907c <fp_to_double>
c000979a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000979e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097a2:	e8 cb f8 ff ff       	call   c0009072 <fp_to_int>
c00097a7:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00097aa:	89 d9                	mov    ecx,ebx
c00097ac:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00097af:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00097b3:	d8 e1                	fsub   st,st(1)
c00097b5:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00097b9:	de c9                	fmulp  st(1),st
c00097bb:	de c1                	faddp  st(1),st
c00097bd:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00097c1:	89 c8                	mov    eax,ecx
c00097c3:	bd 08 00 00 00       	mov    ebp,0x8
c00097c8:	99                   	cdq    
c00097c9:	f7 fd                	idiv   ebp
c00097cb:	4a                   	dec    edx
c00097cc:	83 fa 06             	cmp    edx,0x6
c00097cf:	77 07                	ja     c00097d8 <calc_output_multi+0xc4>
c00097d1:	ff 24 95 e0 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf420]
c00097d8:	49                   	dec    ecx
c00097d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097dd:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e7:	d9 c1                	fld    st(1)
c00097e9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097ed:	dc 00                	fadd   QWORD PTR [eax]
c00097ef:	dd 18                	fstp   QWORD PTR [eax]
c00097f1:	49                   	dec    ecx
c00097f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097f6:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097f9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009800:	d9 c1                	fld    st(1)
c0009802:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009806:	dc 00                	fadd   QWORD PTR [eax]
c0009808:	dd 18                	fstp   QWORD PTR [eax]
c000980a:	49                   	dec    ecx
c000980b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000980f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009812:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009819:	d9 c1                	fld    st(1)
c000981b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981f:	dc 00                	fadd   QWORD PTR [eax]
c0009821:	dd 18                	fstp   QWORD PTR [eax]
c0009823:	49                   	dec    ecx
c0009824:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009828:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000982b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009832:	d9 c1                	fld    st(1)
c0009834:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009838:	dc 00                	fadd   QWORD PTR [eax]
c000983a:	dd 18                	fstp   QWORD PTR [eax]
c000983c:	49                   	dec    ecx
c000983d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009841:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009844:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000984b:	d9 c1                	fld    st(1)
c000984d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009851:	dc 00                	fadd   QWORD PTR [eax]
c0009853:	dd 18                	fstp   QWORD PTR [eax]
c0009855:	49                   	dec    ecx
c0009856:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000985a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000985d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009864:	d9 c1                	fld    st(1)
c0009866:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000986a:	dc 00                	fadd   QWORD PTR [eax]
c000986c:	dd 18                	fstp   QWORD PTR [eax]
c000986e:	49                   	dec    ecx
c000986f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009873:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009876:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000987d:	d9 c1                	fld    st(1)
c000987f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009883:	dc 00                	fadd   QWORD PTR [eax]
c0009885:	dd 18                	fstp   QWORD PTR [eax]
c0009887:	49                   	dec    ecx
c0009888:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000988c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000988f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009896:	d9 c1                	fld    st(1)
c0009898:	85 c9                	test   ecx,ecx
c000989a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000989e:	dc 00                	fadd   QWORD PTR [eax]
c00098a0:	dd 18                	fstp   QWORD PTR [eax]
c00098a2:	0f 8f 19 ff ff ff    	jg     c00097c1 <calc_output_multi+0xad>
c00098a8:	dd d9                	fstp   st(1)
c00098aa:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00098ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00098b2:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00098b6:	0f 89 d1 fe ff ff    	jns    c000978d <calc_output_multi+0x79>
c00098bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00098c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00098c4:	89 d1                	mov    ecx,edx
c00098c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00098ca:	29 c8                	sub    eax,ecx
c00098cc:	99                   	cdq    
c00098cd:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00098d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00098d5:	0f af d0             	imul   edx,eax
c00098d8:	40                   	inc    eax
c00098d9:	01 d1                	add    ecx,edx
c00098db:	0f af c3             	imul   eax,ebx
c00098de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00098e2:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00098e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098e9:	50                   	push   eax
c00098ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ee:	6a 00                	push   0x0
c00098f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f4:	e8 ed 6d ff ff       	call   c00006e6 <memset>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009900:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009908:	e8 6f f7 ff ff       	call   c000907c <fp_to_double>
c000990d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009911:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009915:	e8 58 f7 ff ff       	call   c0009072 <fp_to_int>
c000991a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000991d:	89 d9                	mov    ecx,ebx
c000991f:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009922:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009926:	d8 e1                	fsub   st,st(1)
c0009928:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000992c:	de c9                	fmulp  st(1),st
c000992e:	de c1                	faddp  st(1),st
c0009930:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009934:	89 c8                	mov    eax,ecx
c0009936:	bd 08 00 00 00       	mov    ebp,0x8
c000993b:	99                   	cdq    
c000993c:	f7 fd                	idiv   ebp
c000993e:	4a                   	dec    edx
c000993f:	83 fa 06             	cmp    edx,0x6
c0009942:	77 07                	ja     c000994b <calc_output_multi+0x237>
c0009944:	ff 24 95 fc 0b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf404]
c000994b:	49                   	dec    ecx
c000994c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009950:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009954:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009957:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000995e:	d9 c1                	fld    st(1)
c0009960:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009964:	dc 00                	fadd   QWORD PTR [eax]
c0009966:	dd 18                	fstp   QWORD PTR [eax]
c0009968:	49                   	dec    ecx
c0009969:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000996d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009971:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009974:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000997b:	d9 c1                	fld    st(1)
c000997d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009981:	dc 00                	fadd   QWORD PTR [eax]
c0009983:	dd 18                	fstp   QWORD PTR [eax]
c0009985:	49                   	dec    ecx
c0009986:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000998a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000998e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009991:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009998:	d9 c1                	fld    st(1)
c000999a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000999e:	dc 00                	fadd   QWORD PTR [eax]
c00099a0:	dd 18                	fstp   QWORD PTR [eax]
c00099a2:	49                   	dec    ecx
c00099a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099ae:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099b5:	d9 c1                	fld    st(1)
c00099b7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099bb:	dc 00                	fadd   QWORD PTR [eax]
c00099bd:	dd 18                	fstp   QWORD PTR [eax]
c00099bf:	49                   	dec    ecx
c00099c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099c8:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099cb:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099d2:	d9 c1                	fld    st(1)
c00099d4:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d8:	dc 00                	fadd   QWORD PTR [eax]
c00099da:	dd 18                	fstp   QWORD PTR [eax]
c00099dc:	49                   	dec    ecx
c00099dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e5:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099e8:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ef:	d9 c1                	fld    st(1)
c00099f1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099f5:	dc 00                	fadd   QWORD PTR [eax]
c00099f7:	dd 18                	fstp   QWORD PTR [eax]
c00099f9:	49                   	dec    ecx
c00099fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a02:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009a05:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a0c:	d9 c1                	fld    st(1)
c0009a0e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a12:	dc 00                	fadd   QWORD PTR [eax]
c0009a14:	dd 18                	fstp   QWORD PTR [eax]
c0009a16:	49                   	dec    ecx
c0009a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a1f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009a22:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a29:	d9 c1                	fld    st(1)
c0009a2b:	85 c9                	test   ecx,ecx
c0009a2d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a31:	dc 00                	fadd   QWORD PTR [eax]
c0009a33:	dd 18                	fstp   QWORD PTR [eax]
c0009a35:	0f 8f f9 fe ff ff    	jg     c0009934 <calc_output_multi+0x220>
c0009a3b:	dd d9                	fstp   st(1)
c0009a3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a41:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009a45:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009a4e:	0f 8f ac fe ff ff    	jg     c0009900 <calc_output_multi+0x1ec>
c0009a54:	b9 08 00 00 00       	mov    ecx,0x8
c0009a59:	89 d8                	mov    eax,ebx
c0009a5b:	99                   	cdq    
c0009a5c:	f7 f9                	idiv   ecx
c0009a5e:	4a                   	dec    edx
c0009a5f:	83 fa 06             	cmp    edx,0x6
c0009a62:	77 07                	ja     c0009a6b <calc_output_multi+0x357>
c0009a64:	ff 24 95 18 0c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf3e8]
c0009a6b:	4b                   	dec    ebx
c0009a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a70:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a73:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a76:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a7a:	d8 c9                	fmul   st,st(1)
c0009a7c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7f:	4b                   	dec    ebx
c0009a80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a84:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a87:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a8a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8e:	d8 c9                	fmul   st,st(1)
c0009a90:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a93:	4b                   	dec    ebx
c0009a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a98:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa2:	d8 c9                	fmul   st,st(1)
c0009aa4:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa7:	4b                   	dec    ebx
c0009aa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009aac:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aaf:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab6:	d8 c9                	fmul   st,st(1)
c0009ab8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009abb:	4b                   	dec    ebx
c0009abc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ac0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ac3:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ac6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aca:	d8 c9                	fmul   st,st(1)
c0009acc:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009acf:	4b                   	dec    ebx
c0009ad0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad4:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ad7:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ada:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ade:	d8 c9                	fmul   st,st(1)
c0009ae0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ae3:	4b                   	dec    ebx
c0009ae4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ae8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aeb:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aee:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009af2:	d8 c9                	fmul   st,st(1)
c0009af4:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009af7:	4b                   	dec    ebx
c0009af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009afc:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aff:	85 db                	test   ebx,ebx
c0009b01:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009b04:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009b08:	d8 c9                	fmul   st,st(1)
c0009b0a:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009b0d:	0f 8f 46 ff ff ff    	jg     c0009a59 <calc_output_multi+0x345>
c0009b13:	dd d8                	fstp   st(0)
c0009b15:	83 c4 4c             	add    esp,0x4c
c0009b18:	5b                   	pop    ebx
c0009b19:	5e                   	pop    esi
c0009b1a:	5f                   	pop    edi
c0009b1b:	5d                   	pop    ebp
c0009b1c:	c3                   	ret    

c0009b1d <double_to_fp>:
c0009b1d:	d9 05 6c 0d 02 c0    	fld    DWORD PTR ds:0xc0020d6c
c0009b23:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009b27:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009b2b:	e9 10 59 01 00       	jmp    c001f440 <lrint>

c0009b30 <fmod_one>:
c0009b30:	83 ec 2c             	sub    esp,0x2c
c0009b33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b43:	83 ec 08             	sub    esp,0x8
c0009b46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4e:	e8 ed 58 01 00       	call   c001f440 <lrint>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b5a:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b5e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b62:	de e1                	fsubrp st(1),st
c0009b64:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b68:	d9 ee                	fldz   
c0009b6a:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b6e:	df e0                	fnstsw ax
c0009b70:	f6 c4 45             	test   ah,0x45
c0009b73:	75 0a                	jne    c0009b7f <fmod_one+0x4f>
c0009b75:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b79:	d9 e8                	fld1   
c0009b7b:	de c1                	faddp  st(1),st
c0009b7d:	eb 04                	jmp    c0009b83 <fmod_one+0x53>
c0009b7f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b83:	83 c4 2c             	add    esp,0x2c
c0009b86:	c3                   	ret    

c0009b87 <prepare_data>:
c0009b87:	55                   	push   ebp
c0009b88:	57                   	push   edi
c0009b89:	56                   	push   esi
c0009b8a:	53                   	push   ebx
c0009b8b:	83 ec 1c             	sub    esp,0x1c
c0009b8e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b92:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b96:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b9a:	0f 89 57 01 00 00    	jns    c0009cf7 <prepare_data+0x170>
c0009ba0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ba3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ba6:	85 d2                	test   edx,edx
c0009ba8:	75 0d                	jne    c0009bb7 <prepare_data+0x30>
c0009baa:	8d 14 36             	lea    edx,[esi+esi*1]
c0009bad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009bb0:	29 d0                	sub    eax,edx
c0009bb2:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bb5:	eb 44                	jmp    c0009bfb <prepare_data+0x74>
c0009bb7:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009bba:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009bbd:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009bc0:	39 c1                	cmp    ecx,eax
c0009bc2:	7d 04                	jge    c0009bc8 <prepare_data+0x41>
c0009bc4:	29 d0                	sub    eax,edx
c0009bc6:	eb 2d                	jmp    c0009bf5 <prepare_data+0x6e>
c0009bc8:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009bce:	29 d7                	sub    edi,edx
c0009bd0:	01 f7                	add    edi,esi
c0009bd2:	51                   	push   ecx
c0009bd3:	29 f2                	sub    edx,esi
c0009bd5:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009bdc:	8d 14 90             	lea    edx,[eax+edx*4]
c0009bdf:	51                   	push   ecx
c0009be0:	52                   	push   edx
c0009be1:	50                   	push   eax
c0009be2:	e8 91 6a ff ff       	call   c0000678 <memmove>
c0009be7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009bea:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bed:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bf0:	29 f0                	sub    eax,esi
c0009bf2:	83 c4 10             	add    esp,0x10
c0009bf5:	29 f0                	sub    eax,esi
c0009bf7:	79 02                	jns    c0009bfb <prepare_data+0x74>
c0009bf9:	31 c0                	xor    eax,eax
c0009bfb:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bfe:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009c01:	29 ef                	sub    edi,ebp
c0009c03:	39 c7                	cmp    edi,eax
c0009c05:	7e 02                	jle    c0009c09 <prepare_data+0x82>
c0009c07:	89 c7                	mov    edi,eax
c0009c09:	89 f8                	mov    eax,edi
c0009c0b:	99                   	cdq    
c0009c0c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009c0f:	b8 15 00 00 00       	mov    eax,0x15
c0009c14:	29 d7                	sub    edi,edx
c0009c16:	0f 88 dd 00 00 00    	js     c0009cf9 <prepare_data+0x172>
c0009c1c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009c1f:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009c22:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009c25:	0f 8f ce 00 00 00    	jg     c0009cf9 <prepare_data+0x172>
c0009c2b:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009c31:	50                   	push   eax
c0009c32:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c39:	50                   	push   eax
c0009c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c40:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009c43:	50                   	push   eax
c0009c44:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c47:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c4b:	50                   	push   eax
c0009c4c:	e8 5f 6a ff ff       	call   c00006b0 <memcpy>
c0009c51:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c54:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c57:	01 fd                	add    ebp,edi
c0009c59:	01 f9                	add    ecx,edi
c0009c5b:	83 c4 10             	add    esp,0x10
c0009c5e:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c61:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c64:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c6b:	0f 85 86 00 00 00    	jne    c0009cf7 <prepare_data+0x170>
c0009c71:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c74:	89 e8                	mov    eax,ebp
c0009c76:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c79:	29 c8                	sub    eax,ecx
c0009c7b:	39 f8                	cmp    eax,edi
c0009c7d:	7d 78                	jge    c0009cf7 <prepare_data+0x170>
c0009c7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c83:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c87:	74 6e                	je     c0009cf7 <prepare_data+0x170>
c0009c89:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c8c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c90:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c93:	29 ef                	sub    edi,ebp
c0009c95:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c99:	7c 29                	jl     c0009cc4 <prepare_data+0x13d>
c0009c9b:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c9e:	29 f1                	sub    ecx,esi
c0009ca0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ca7:	55                   	push   ebp
c0009ca8:	50                   	push   eax
c0009ca9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009cac:	50                   	push   eax
c0009cad:	52                   	push   edx
c0009cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009cb2:	e8 c1 69 ff ff       	call   c0000678 <memmove>
c0009cb7:	83 c4 10             	add    esp,0x10
c0009cba:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009cbd:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009cc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009cc4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009cc7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009cca:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009ccd:	83 c6 05             	add    esi,0x5
c0009cd0:	78 07                	js     c0009cd9 <prepare_data+0x152>
c0009cd2:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009cd5:	39 cf                	cmp    edi,ecx
c0009cd7:	7e 04                	jle    c0009cdd <prepare_data+0x156>
c0009cd9:	89 ce                	mov    esi,ecx
c0009cdb:	29 c6                	sub    esi,eax
c0009cdd:	8d 04 82             	lea    eax,[edx+eax*4]
c0009ce0:	51                   	push   ecx
c0009ce1:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009ce8:	51                   	push   ecx
c0009ce9:	6a 00                	push   0x0
c0009ceb:	50                   	push   eax
c0009cec:	e8 f5 69 ff ff       	call   c00006e6 <memset>
c0009cf1:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cf4:	83 c4 10             	add    esp,0x10
c0009cf7:	31 c0                	xor    eax,eax
c0009cf9:	83 c4 1c             	add    esp,0x1c
c0009cfc:	5b                   	pop    ebx
c0009cfd:	5e                   	pop    esi
c0009cfe:	5f                   	pop    edi
c0009cff:	5d                   	pop    ebp
c0009d00:	c3                   	ret    

c0009d01 <sinc_multichan_vari_process>:
c0009d01:	55                   	push   ebp
c0009d02:	b8 05 00 00 00       	mov    eax,0x5
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	53                   	push   ebx
c0009d0a:	83 ec 3c             	sub    esp,0x3c
c0009d0d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009d11:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009d15:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009d18:	85 db                	test   ebx,ebx
c0009d1a:	0f 84 5d 02 00 00    	je     c0009f7d <sinc_multichan_vari_process+0x27c>
c0009d20:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009d23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d26:	0f af d0             	imul   edx,eax
c0009d29:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009d2c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009d30:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009d37:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009d3a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009d41:	dd 06                	fld    QWORD PTR [esi]
c0009d43:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d47:	55                   	push   ebp
c0009d48:	55                   	push   ebp
c0009d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d4c:	e8 d9 f2 ff ff       	call   c000902a <is_bad_src_ratio>
c0009d51:	89 c2                	mov    edx,eax
c0009d53:	58                   	pop    eax
c0009d54:	85 d2                	test   edx,edx
c0009d56:	59                   	pop    ecx
c0009d57:	b8 16 00 00 00       	mov    eax,0x16
c0009d5c:	0f 85 1b 02 00 00    	jne    c0009f7d <sinc_multichan_vari_process+0x27c>
c0009d62:	d9 05 70 0d 02 c0    	fld    DWORD PTR ds:0xc0020d70
c0009d68:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d6b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d6e:	dd 06                	fld    QWORD PTR [esi]
c0009d70:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d73:	d8 d1                	fcom   st(1)
c0009d75:	df e0                	fnstsw ax
c0009d77:	9e                   	sahf   
c0009d78:	76 0f                	jbe    c0009d89 <sinc_multichan_vari_process+0x88>
c0009d7a:	dd d8                	fstp   st(0)
c0009d7c:	d9 e8                	fld1   
c0009d7e:	d8 d9                	fcomp  st(1)
c0009d80:	df e0                	fnstsw ax
c0009d82:	9e                   	sahf   
c0009d83:	77 0f                	ja     c0009d94 <sinc_multichan_vari_process+0x93>
c0009d85:	dd d8                	fstp   st(0)
c0009d87:	eb 11                	jmp    c0009d9a <sinc_multichan_vari_process+0x99>
c0009d89:	dd d9                	fstp   st(1)
c0009d8b:	d9 e8                	fld1   
c0009d8d:	d8 d9                	fcomp  st(1)
c0009d8f:	df e0                	fnstsw ax
c0009d91:	9e                   	sahf   
c0009d92:	76 04                	jbe    c0009d98 <sinc_multichan_vari_process+0x97>
c0009d94:	de f9                	fdivp  st(1),st
c0009d96:	eb 02                	jmp    c0009d9a <sinc_multichan_vari_process+0x99>
c0009d98:	dd d8                	fstp   st(0)
c0009d9a:	83 ec 10             	sub    esp,0x10
c0009d9d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009da0:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009da3:	e8 98 56 01 00       	call   c001f440 <lrint>
c0009da8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009dab:	40                   	inc    eax
c0009dac:	dd 14 24             	fst    QWORD PTR [esp]
c0009daf:	0f af c5             	imul   eax,ebp
c0009db2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009dba:	e8 71 fd ff ff       	call   c0009b30 <fmod_one>
c0009dbf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009dc2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009dc6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009dc9:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009dcd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009dd1:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009dd5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dd8:	e8 63 56 01 00       	call   c001f440 <lrint>
c0009ddd:	0f af e8             	imul   ebp,eax
c0009de0:	d9 e8                	fld1   
c0009de2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009de6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009dea:	01 e8                	add    eax,ebp
c0009dec:	dc 05 d8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bd8
c0009df2:	99                   	cdq    
c0009df3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009df7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009dfa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dfd:	83 c4 10             	add    esp,0x10
c0009e00:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009e03:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009e06:	7d 4b                	jge    c0009e53 <sinc_multichan_vari_process+0x152>
c0009e08:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e0b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e0e:	01 c8                	add    eax,ecx
c0009e10:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e13:	99                   	cdq    
c0009e14:	f7 f9                	idiv   ecx
c0009e16:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e1a:	7d 09                	jge    c0009e25 <sinc_multichan_vari_process+0x124>
c0009e1c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009e1f:	85 c0                	test   eax,eax
c0009e21:	79 57                	jns    c0009e7a <sinc_multichan_vari_process+0x179>
c0009e23:	eb 70                	jmp    c0009e95 <sinc_multichan_vari_process+0x194>
c0009e25:	51                   	push   ecx
c0009e26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009e2a:	57                   	push   edi
c0009e2b:	53                   	push   ebx
c0009e2c:	e8 56 fd ff ff       	call   c0009b87 <prepare_data>
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009e37:	85 c0                	test   eax,eax
c0009e39:	0f 85 3e 01 00 00    	jne    c0009f7d <sinc_multichan_vari_process+0x27c>
c0009e3f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e42:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e45:	01 c8                	add    eax,ecx
c0009e47:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e4a:	99                   	cdq    
c0009e4b:	f7 f9                	idiv   ecx
c0009e4d:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e51:	7c c9                	jl     c0009e1c <sinc_multichan_vari_process+0x11b>
c0009e53:	dd 04 24             	fld    QWORD PTR [esp]
c0009e56:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e59:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e5d:	dd 1e                	fstp   QWORD PTR [esi]
c0009e5f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e62:	99                   	cdq    
c0009e63:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e66:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e69:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e6c:	99                   	cdq    
c0009e6d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e70:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e73:	31 c0                	xor    eax,eax
c0009e75:	e9 03 01 00 00       	jmp    c0009f7d <sinc_multichan_vari_process+0x27c>
c0009e7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e7e:	dd 04 24             	fld    QWORD PTR [esp]
c0009e81:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e84:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e88:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e8c:	d9 c9                	fxch   st(1)
c0009e8e:	de d9                	fcompp 
c0009e90:	df e0                	fnstsw ax
c0009e92:	9e                   	sahf   
c0009e93:	73 be                	jae    c0009e53 <sinc_multichan_vari_process+0x152>
c0009e95:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e99:	7e 31                	jle    c0009ecc <sinc_multichan_vari_process+0x1cb>
c0009e9b:	83 ec 10             	sub    esp,0x10
c0009e9e:	dd 06                	fld    QWORD PTR [esi]
c0009ea0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009ea3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ea6:	e8 75 55 01 00       	call   c001f420 <fabs>
c0009eab:	83 c4 10             	add    esp,0x10
c0009eae:	dc 1d 60 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d60
c0009eb4:	df e0                	fnstsw ax
c0009eb6:	9e                   	sahf   
c0009eb7:	76 13                	jbe    c0009ecc <sinc_multichan_vari_process+0x1cb>
c0009eb9:	dd 06                	fld    QWORD PTR [esi]
c0009ebb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ebe:	d8 e1                	fsub   st,st(1)
c0009ec0:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009ec3:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009ec6:	de c1                	faddp  st(1),st
c0009ec8:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009ecc:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009ecf:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009ed3:	d9 e8                	fld1   
c0009ed5:	d8 d9                	fcomp  st(1)
c0009ed7:	df e0                	fnstsw ax
c0009ed9:	9e                   	sahf   
c0009eda:	77 04                	ja     c0009ee0 <sinc_multichan_vari_process+0x1df>
c0009edc:	dd d8                	fstp   st(0)
c0009ede:	d9 e8                	fld1   
c0009ee0:	de c9                	fmulp  st(1),st
c0009ee2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009ee6:	50                   	push   eax
c0009ee7:	50                   	push   eax
c0009ee8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009eec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ef0:	e8 28 fc ff ff       	call   c0009b1d <double_to_fp>
c0009ef5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ef9:	89 c5                	mov    ebp,eax
c0009efb:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eff:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f02:	e8 16 fc ff ff       	call   c0009b1d <double_to_fp>
c0009f07:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009f0a:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009f0d:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009f10:	89 c1                	mov    ecx,eax
c0009f12:	52                   	push   edx
c0009f13:	89 d8                	mov    eax,ebx
c0009f15:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009f19:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f1c:	52                   	push   edx
c0009f1d:	52                   	push   edx
c0009f1e:	89 ea                	mov    edx,ebp
c0009f20:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009f26:	e8 e9 f7 ff ff       	call   c0009714 <calc_output_multi>
c0009f2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009f2e:	d9 e8                	fld1   
c0009f30:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009f33:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009f37:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009f3b:	83 c4 10             	add    esp,0x10
c0009f3e:	dd 14 24             	fst    QWORD PTR [esp]
c0009f41:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009f45:	e8 e6 fb ff ff       	call   c0009b30 <fmod_one>
c0009f4a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f4d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f51:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f54:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f5c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f60:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f63:	e8 d8 54 01 00       	call   c001f440 <lrint>
c0009f68:	0f af e8             	imul   ebp,eax
c0009f6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6f:	01 e8                	add    eax,ebp
c0009f71:	99                   	cdq    
c0009f72:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f75:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f78:	e9 80 fe ff ff       	jmp    c0009dfd <sinc_multichan_vari_process+0xfc>
c0009f7d:	83 c4 3c             	add    esp,0x3c
c0009f80:	5b                   	pop    ebx
c0009f81:	5e                   	pop    esi
c0009f82:	5f                   	pop    edi
c0009f83:	5d                   	pop    ebp
c0009f84:	c3                   	ret    

c0009f85 <sinc_hex_vari_process>:
c0009f85:	55                   	push   ebp
c0009f86:	b8 05 00 00 00       	mov    eax,0x5
c0009f8b:	57                   	push   edi
c0009f8c:	56                   	push   esi
c0009f8d:	53                   	push   ebx
c0009f8e:	83 ec 3c             	sub    esp,0x3c
c0009f91:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f95:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f99:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f9c:	85 db                	test   ebx,ebx
c0009f9e:	0f 84 58 02 00 00    	je     c000a1fc <sinc_hex_vari_process+0x277>
c0009fa4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009fa7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009faa:	0f af d0             	imul   edx,eax
c0009fad:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009fb0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009fb4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009fbb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009fbe:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009fc5:	dd 06                	fld    QWORD PTR [esi]
c0009fc7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009fcb:	55                   	push   ebp
c0009fcc:	55                   	push   ebp
c0009fcd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd0:	e8 55 f0 ff ff       	call   c000902a <is_bad_src_ratio>
c0009fd5:	89 c2                	mov    edx,eax
c0009fd7:	58                   	pop    eax
c0009fd8:	85 d2                	test   edx,edx
c0009fda:	59                   	pop    ecx
c0009fdb:	b8 16 00 00 00       	mov    eax,0x16
c0009fe0:	0f 85 16 02 00 00    	jne    c000a1fc <sinc_hex_vari_process+0x277>
c0009fe6:	d9 05 70 0d 02 c0    	fld    DWORD PTR ds:0xc0020d70
c0009fec:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fef:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ff2:	dd 06                	fld    QWORD PTR [esi]
c0009ff4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ff7:	d8 d1                	fcom   st(1)
c0009ff9:	df e0                	fnstsw ax
c0009ffb:	9e                   	sahf   
c0009ffc:	76 0f                	jbe    c000a00d <sinc_hex_vari_process+0x88>
c0009ffe:	dd d8                	fstp   st(0)
c000a000:	d9 e8                	fld1   
c000a002:	d8 d9                	fcomp  st(1)
c000a004:	df e0                	fnstsw ax
c000a006:	9e                   	sahf   
c000a007:	77 0f                	ja     c000a018 <sinc_hex_vari_process+0x93>
c000a009:	dd d8                	fstp   st(0)
c000a00b:	eb 11                	jmp    c000a01e <sinc_hex_vari_process+0x99>
c000a00d:	dd d9                	fstp   st(1)
c000a00f:	d9 e8                	fld1   
c000a011:	d8 d9                	fcomp  st(1)
c000a013:	df e0                	fnstsw ax
c000a015:	9e                   	sahf   
c000a016:	76 04                	jbe    c000a01c <sinc_hex_vari_process+0x97>
c000a018:	de f9                	fdivp  st(1),st
c000a01a:	eb 02                	jmp    c000a01e <sinc_hex_vari_process+0x99>
c000a01c:	dd d8                	fstp   st(0)
c000a01e:	83 ec 10             	sub    esp,0x10
c000a021:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a024:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a027:	e8 14 54 01 00       	call   c001f440 <lrint>
c000a02c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a02f:	40                   	inc    eax
c000a030:	dd 14 24             	fst    QWORD PTR [esp]
c000a033:	0f af c5             	imul   eax,ebp
c000a036:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a03a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a03e:	e8 ed fa ff ff       	call   c0009b30 <fmod_one>
c000a043:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a046:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a04a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a04d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a055:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a059:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a05c:	e8 df 53 01 00       	call   c001f440 <lrint>
c000a061:	0f af e8             	imul   ebp,eax
c000a064:	d9 e8                	fld1   
c000a066:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a06a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a06e:	01 e8                	add    eax,ebp
c000a070:	dc 05 d8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bd8
c000a076:	99                   	cdq    
c000a077:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a07b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a07e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a081:	83 c4 10             	add    esp,0x10
c000a084:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a087:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a08a:	7d 4b                	jge    c000a0d7 <sinc_hex_vari_process+0x152>
c000a08c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a08f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a092:	01 c8                	add    eax,ecx
c000a094:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a097:	99                   	cdq    
c000a098:	f7 f9                	idiv   ecx
c000a09a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a09e:	7d 09                	jge    c000a0a9 <sinc_hex_vari_process+0x124>
c000a0a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a0a3:	85 c0                	test   eax,eax
c000a0a5:	79 57                	jns    c000a0fe <sinc_hex_vari_process+0x179>
c000a0a7:	eb 70                	jmp    c000a119 <sinc_hex_vari_process+0x194>
c000a0a9:	51                   	push   ecx
c000a0aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a0ae:	57                   	push   edi
c000a0af:	53                   	push   ebx
c000a0b0:	e8 d2 fa ff ff       	call   c0009b87 <prepare_data>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a0bb:	85 c0                	test   eax,eax
c000a0bd:	0f 85 39 01 00 00    	jne    c000a1fc <sinc_hex_vari_process+0x277>
c000a0c3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a0c6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a0c9:	01 c8                	add    eax,ecx
c000a0cb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a0ce:	99                   	cdq    
c000a0cf:	f7 f9                	idiv   ecx
c000a0d1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a0d5:	7c c9                	jl     c000a0a0 <sinc_hex_vari_process+0x11b>
c000a0d7:	dd 04 24             	fld    QWORD PTR [esp]
c000a0da:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a0dd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0e1:	dd 1e                	fstp   QWORD PTR [esi]
c000a0e3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0e6:	99                   	cdq    
c000a0e7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0ea:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0f0:	99                   	cdq    
c000a0f1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0f4:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0f7:	31 c0                	xor    eax,eax
c000a0f9:	e9 fe 00 00 00       	jmp    c000a1fc <sinc_hex_vari_process+0x277>
c000a0fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a102:	dd 04 24             	fld    QWORD PTR [esp]
c000a105:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a108:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a10c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a110:	d9 c9                	fxch   st(1)
c000a112:	de d9                	fcompp 
c000a114:	df e0                	fnstsw ax
c000a116:	9e                   	sahf   
c000a117:	73 be                	jae    c000a0d7 <sinc_hex_vari_process+0x152>
c000a119:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a11d:	7e 31                	jle    c000a150 <sinc_hex_vari_process+0x1cb>
c000a11f:	83 ec 10             	sub    esp,0x10
c000a122:	dd 06                	fld    QWORD PTR [esi]
c000a124:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a127:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a12a:	e8 f1 52 01 00       	call   c001f420 <fabs>
c000a12f:	83 c4 10             	add    esp,0x10
c000a132:	dc 1d 60 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d60
c000a138:	df e0                	fnstsw ax
c000a13a:	9e                   	sahf   
c000a13b:	76 13                	jbe    c000a150 <sinc_hex_vari_process+0x1cb>
c000a13d:	dd 06                	fld    QWORD PTR [esi]
c000a13f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a142:	d8 e1                	fsub   st,st(1)
c000a144:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a147:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a14a:	de c1                	faddp  st(1),st
c000a14c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a150:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a153:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a157:	d9 e8                	fld1   
c000a159:	d8 d9                	fcomp  st(1)
c000a15b:	df e0                	fnstsw ax
c000a15d:	9e                   	sahf   
c000a15e:	77 04                	ja     c000a164 <sinc_hex_vari_process+0x1df>
c000a160:	dd d8                	fstp   st(0)
c000a162:	d9 e8                	fld1   
c000a164:	de c9                	fmulp  st(1),st
c000a166:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a16a:	50                   	push   eax
c000a16b:	50                   	push   eax
c000a16c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a170:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a174:	e8 a4 f9 ff ff       	call   c0009b1d <double_to_fp>
c000a179:	89 c5                	mov    ebp,eax
c000a17b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a17f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a183:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a186:	e8 92 f9 ff ff       	call   c0009b1d <double_to_fp>
c000a18b:	83 c4 0c             	add    esp,0xc
c000a18e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a191:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a194:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a197:	89 c1                	mov    ecx,eax
c000a199:	52                   	push   edx
c000a19a:	89 d8                	mov    eax,ebx
c000a19c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a1a0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a1a3:	52                   	push   edx
c000a1a4:	52                   	push   edx
c000a1a5:	89 ea                	mov    edx,ebp
c000a1a7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1aa:	e8 d1 f2 ff ff       	call   c0009480 <calc_output_hex>
c000a1af:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a1b3:	d9 e8                	fld1   
c000a1b5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a1b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a1bd:	dd 14 24             	fst    QWORD PTR [esp]
c000a1c0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a1c4:	e8 67 f9 ff ff       	call   c0009b30 <fmod_one>
c000a1c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1cc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1d0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1d3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a1d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1db:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1df:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1e2:	e8 59 52 01 00       	call   c001f440 <lrint>
c000a1e7:	0f af e8             	imul   ebp,eax
c000a1ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1ee:	01 e8                	add    eax,ebp
c000a1f0:	99                   	cdq    
c000a1f1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1f7:	e9 85 fe ff ff       	jmp    c000a081 <sinc_hex_vari_process+0xfc>
c000a1fc:	83 c4 3c             	add    esp,0x3c
c000a1ff:	5b                   	pop    ebx
c000a200:	5e                   	pop    esi
c000a201:	5f                   	pop    edi
c000a202:	5d                   	pop    ebp
c000a203:	c3                   	ret    

c000a204 <sinc_quad_vari_process>:
c000a204:	55                   	push   ebp
c000a205:	b8 05 00 00 00       	mov    eax,0x5
c000a20a:	57                   	push   edi
c000a20b:	56                   	push   esi
c000a20c:	53                   	push   ebx
c000a20d:	83 ec 3c             	sub    esp,0x3c
c000a210:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a214:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a218:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a21b:	85 db                	test   ebx,ebx
c000a21d:	0f 84 58 02 00 00    	je     c000a47b <sinc_quad_vari_process+0x277>
c000a223:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a226:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a229:	0f af d0             	imul   edx,eax
c000a22c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a22f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a233:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a23a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a23d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a244:	dd 06                	fld    QWORD PTR [esi]
c000a246:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a24a:	55                   	push   ebp
c000a24b:	55                   	push   ebp
c000a24c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a24f:	e8 d6 ed ff ff       	call   c000902a <is_bad_src_ratio>
c000a254:	89 c2                	mov    edx,eax
c000a256:	58                   	pop    eax
c000a257:	85 d2                	test   edx,edx
c000a259:	59                   	pop    ecx
c000a25a:	b8 16 00 00 00       	mov    eax,0x16
c000a25f:	0f 85 16 02 00 00    	jne    c000a47b <sinc_quad_vari_process+0x277>
c000a265:	d9 05 70 0d 02 c0    	fld    DWORD PTR ds:0xc0020d70
c000a26b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a26e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a271:	dd 06                	fld    QWORD PTR [esi]
c000a273:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a276:	d8 d1                	fcom   st(1)
c000a278:	df e0                	fnstsw ax
c000a27a:	9e                   	sahf   
c000a27b:	76 0f                	jbe    c000a28c <sinc_quad_vari_process+0x88>
c000a27d:	dd d8                	fstp   st(0)
c000a27f:	d9 e8                	fld1   
c000a281:	d8 d9                	fcomp  st(1)
c000a283:	df e0                	fnstsw ax
c000a285:	9e                   	sahf   
c000a286:	77 0f                	ja     c000a297 <sinc_quad_vari_process+0x93>
c000a288:	dd d8                	fstp   st(0)
c000a28a:	eb 11                	jmp    c000a29d <sinc_quad_vari_process+0x99>
c000a28c:	dd d9                	fstp   st(1)
c000a28e:	d9 e8                	fld1   
c000a290:	d8 d9                	fcomp  st(1)
c000a292:	df e0                	fnstsw ax
c000a294:	9e                   	sahf   
c000a295:	76 04                	jbe    c000a29b <sinc_quad_vari_process+0x97>
c000a297:	de f9                	fdivp  st(1),st
c000a299:	eb 02                	jmp    c000a29d <sinc_quad_vari_process+0x99>
c000a29b:	dd d8                	fstp   st(0)
c000a29d:	83 ec 10             	sub    esp,0x10
c000a2a0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a2a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2a6:	e8 95 51 01 00       	call   c001f440 <lrint>
c000a2ab:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a2ae:	40                   	inc    eax
c000a2af:	dd 14 24             	fst    QWORD PTR [esp]
c000a2b2:	0f af c5             	imul   eax,ebp
c000a2b5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a2bd:	e8 6e f8 ff ff       	call   c0009b30 <fmod_one>
c000a2c2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a2c5:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a2c9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a2cc:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a2d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2d4:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a2d8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2db:	e8 60 51 01 00       	call   c001f440 <lrint>
c000a2e0:	0f af e8             	imul   ebp,eax
c000a2e3:	d9 e8                	fld1   
c000a2e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2e9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2ed:	01 e8                	add    eax,ebp
c000a2ef:	dc 05 d8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bd8
c000a2f5:	99                   	cdq    
c000a2f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2fa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2fd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a306:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a309:	7d 4b                	jge    c000a356 <sinc_quad_vari_process+0x152>
c000a30b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a30e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a311:	01 c8                	add    eax,ecx
c000a313:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a316:	99                   	cdq    
c000a317:	f7 f9                	idiv   ecx
c000a319:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a31d:	7d 09                	jge    c000a328 <sinc_quad_vari_process+0x124>
c000a31f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a322:	85 c0                	test   eax,eax
c000a324:	79 57                	jns    c000a37d <sinc_quad_vari_process+0x179>
c000a326:	eb 70                	jmp    c000a398 <sinc_quad_vari_process+0x194>
c000a328:	51                   	push   ecx
c000a329:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a32d:	57                   	push   edi
c000a32e:	53                   	push   ebx
c000a32f:	e8 53 f8 ff ff       	call   c0009b87 <prepare_data>
c000a334:	83 c4 10             	add    esp,0x10
c000a337:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a33a:	85 c0                	test   eax,eax
c000a33c:	0f 85 39 01 00 00    	jne    c000a47b <sinc_quad_vari_process+0x277>
c000a342:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a345:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a348:	01 c8                	add    eax,ecx
c000a34a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a34d:	99                   	cdq    
c000a34e:	f7 f9                	idiv   ecx
c000a350:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a354:	7c c9                	jl     c000a31f <sinc_quad_vari_process+0x11b>
c000a356:	dd 04 24             	fld    QWORD PTR [esp]
c000a359:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a35c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a360:	dd 1e                	fstp   QWORD PTR [esi]
c000a362:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a365:	99                   	cdq    
c000a366:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a369:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a36c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a36f:	99                   	cdq    
c000a370:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a373:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a376:	31 c0                	xor    eax,eax
c000a378:	e9 fe 00 00 00       	jmp    c000a47b <sinc_quad_vari_process+0x277>
c000a37d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a381:	dd 04 24             	fld    QWORD PTR [esp]
c000a384:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a387:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a38b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a38f:	d9 c9                	fxch   st(1)
c000a391:	de d9                	fcompp 
c000a393:	df e0                	fnstsw ax
c000a395:	9e                   	sahf   
c000a396:	73 be                	jae    c000a356 <sinc_quad_vari_process+0x152>
c000a398:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a39c:	7e 31                	jle    c000a3cf <sinc_quad_vari_process+0x1cb>
c000a39e:	83 ec 10             	sub    esp,0x10
c000a3a1:	dd 06                	fld    QWORD PTR [esi]
c000a3a3:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a3a6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3a9:	e8 72 50 01 00       	call   c001f420 <fabs>
c000a3ae:	83 c4 10             	add    esp,0x10
c000a3b1:	dc 1d 60 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d60
c000a3b7:	df e0                	fnstsw ax
c000a3b9:	9e                   	sahf   
c000a3ba:	76 13                	jbe    c000a3cf <sinc_quad_vari_process+0x1cb>
c000a3bc:	dd 06                	fld    QWORD PTR [esi]
c000a3be:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a3c1:	d8 e1                	fsub   st,st(1)
c000a3c3:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a3c6:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a3c9:	de c1                	faddp  st(1),st
c000a3cb:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a3cf:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a3d2:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a3d6:	d9 e8                	fld1   
c000a3d8:	d8 d9                	fcomp  st(1)
c000a3da:	df e0                	fnstsw ax
c000a3dc:	9e                   	sahf   
c000a3dd:	77 04                	ja     c000a3e3 <sinc_quad_vari_process+0x1df>
c000a3df:	dd d8                	fstp   st(0)
c000a3e1:	d9 e8                	fld1   
c000a3e3:	de c9                	fmulp  st(1),st
c000a3e5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3e9:	50                   	push   eax
c000a3ea:	50                   	push   eax
c000a3eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3f3:	e8 25 f7 ff ff       	call   c0009b1d <double_to_fp>
c000a3f8:	89 c5                	mov    ebp,eax
c000a3fa:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3fe:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a402:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a405:	e8 13 f7 ff ff       	call   c0009b1d <double_to_fp>
c000a40a:	83 c4 0c             	add    esp,0xc
c000a40d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a410:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a413:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a416:	89 c1                	mov    ecx,eax
c000a418:	52                   	push   edx
c000a419:	89 d8                	mov    eax,ebx
c000a41b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a41f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a422:	52                   	push   edx
c000a423:	52                   	push   edx
c000a424:	89 ea                	mov    edx,ebp
c000a426:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a429:	e8 8d ee ff ff       	call   c00092bb <calc_output_quad>
c000a42e:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a432:	d9 e8                	fld1   
c000a434:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a438:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a43c:	dd 14 24             	fst    QWORD PTR [esp]
c000a43f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a443:	e8 e8 f6 ff ff       	call   c0009b30 <fmod_one>
c000a448:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a44b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a44f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a452:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a456:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a45a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a45e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a461:	e8 da 4f 01 00       	call   c001f440 <lrint>
c000a466:	0f af e8             	imul   ebp,eax
c000a469:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a46d:	01 e8                	add    eax,ebp
c000a46f:	99                   	cdq    
c000a470:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a473:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a476:	e9 85 fe ff ff       	jmp    c000a300 <sinc_quad_vari_process+0xfc>
c000a47b:	83 c4 3c             	add    esp,0x3c
c000a47e:	5b                   	pop    ebx
c000a47f:	5e                   	pop    esi
c000a480:	5f                   	pop    edi
c000a481:	5d                   	pop    ebp
c000a482:	c3                   	ret    

c000a483 <sinc_stereo_vari_process>:
c000a483:	55                   	push   ebp
c000a484:	b8 05 00 00 00       	mov    eax,0x5
c000a489:	57                   	push   edi
c000a48a:	56                   	push   esi
c000a48b:	53                   	push   ebx
c000a48c:	83 ec 3c             	sub    esp,0x3c
c000a48f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a493:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a497:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a49a:	85 db                	test   ebx,ebx
c000a49c:	0f 84 58 02 00 00    	je     c000a6fa <sinc_stereo_vari_process+0x277>
c000a4a2:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a4a5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a4a8:	0f af d0             	imul   edx,eax
c000a4ab:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a4ae:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a4b2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a4b9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a4bc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a4c3:	dd 06                	fld    QWORD PTR [esi]
c000a4c5:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a4c9:	55                   	push   ebp
c000a4ca:	55                   	push   ebp
c000a4cb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4ce:	e8 57 eb ff ff       	call   c000902a <is_bad_src_ratio>
c000a4d3:	89 c2                	mov    edx,eax
c000a4d5:	58                   	pop    eax
c000a4d6:	85 d2                	test   edx,edx
c000a4d8:	59                   	pop    ecx
c000a4d9:	b8 16 00 00 00       	mov    eax,0x16
c000a4de:	0f 85 16 02 00 00    	jne    c000a6fa <sinc_stereo_vari_process+0x277>
c000a4e4:	d9 05 70 0d 02 c0    	fld    DWORD PTR ds:0xc0020d70
c000a4ea:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4ed:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4f0:	dd 06                	fld    QWORD PTR [esi]
c000a4f2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4f5:	d8 d1                	fcom   st(1)
c000a4f7:	df e0                	fnstsw ax
c000a4f9:	9e                   	sahf   
c000a4fa:	76 0f                	jbe    c000a50b <sinc_stereo_vari_process+0x88>
c000a4fc:	dd d8                	fstp   st(0)
c000a4fe:	d9 e8                	fld1   
c000a500:	d8 d9                	fcomp  st(1)
c000a502:	df e0                	fnstsw ax
c000a504:	9e                   	sahf   
c000a505:	77 0f                	ja     c000a516 <sinc_stereo_vari_process+0x93>
c000a507:	dd d8                	fstp   st(0)
c000a509:	eb 11                	jmp    c000a51c <sinc_stereo_vari_process+0x99>
c000a50b:	dd d9                	fstp   st(1)
c000a50d:	d9 e8                	fld1   
c000a50f:	d8 d9                	fcomp  st(1)
c000a511:	df e0                	fnstsw ax
c000a513:	9e                   	sahf   
c000a514:	76 04                	jbe    c000a51a <sinc_stereo_vari_process+0x97>
c000a516:	de f9                	fdivp  st(1),st
c000a518:	eb 02                	jmp    c000a51c <sinc_stereo_vari_process+0x99>
c000a51a:	dd d8                	fstp   st(0)
c000a51c:	83 ec 10             	sub    esp,0x10
c000a51f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a522:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a525:	e8 16 4f 01 00       	call   c001f440 <lrint>
c000a52a:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a52d:	40                   	inc    eax
c000a52e:	dd 14 24             	fst    QWORD PTR [esp]
c000a531:	0f af c5             	imul   eax,ebp
c000a534:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a538:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a53c:	e8 ef f5 ff ff       	call   c0009b30 <fmod_one>
c000a541:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a544:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a548:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a54b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a54f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a553:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a557:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a55a:	e8 e1 4e 01 00       	call   c001f440 <lrint>
c000a55f:	0f af e8             	imul   ebp,eax
c000a562:	d9 e8                	fld1   
c000a564:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a568:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a56c:	01 e8                	add    eax,ebp
c000a56e:	dc 05 d8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bd8
c000a574:	99                   	cdq    
c000a575:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a579:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a57c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a57f:	83 c4 10             	add    esp,0x10
c000a582:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a585:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a588:	7d 4b                	jge    c000a5d5 <sinc_stereo_vari_process+0x152>
c000a58a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a58d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a590:	01 c8                	add    eax,ecx
c000a592:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a595:	99                   	cdq    
c000a596:	f7 f9                	idiv   ecx
c000a598:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a59c:	7d 09                	jge    c000a5a7 <sinc_stereo_vari_process+0x124>
c000a59e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a5a1:	85 c0                	test   eax,eax
c000a5a3:	79 57                	jns    c000a5fc <sinc_stereo_vari_process+0x179>
c000a5a5:	eb 70                	jmp    c000a617 <sinc_stereo_vari_process+0x194>
c000a5a7:	51                   	push   ecx
c000a5a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a5ac:	57                   	push   edi
c000a5ad:	53                   	push   ebx
c000a5ae:	e8 d4 f5 ff ff       	call   c0009b87 <prepare_data>
c000a5b3:	83 c4 10             	add    esp,0x10
c000a5b6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a5b9:	85 c0                	test   eax,eax
c000a5bb:	0f 85 39 01 00 00    	jne    c000a6fa <sinc_stereo_vari_process+0x277>
c000a5c1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a5c4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a5c7:	01 c8                	add    eax,ecx
c000a5c9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a5cc:	99                   	cdq    
c000a5cd:	f7 f9                	idiv   ecx
c000a5cf:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a5d3:	7c c9                	jl     c000a59e <sinc_stereo_vari_process+0x11b>
c000a5d5:	dd 04 24             	fld    QWORD PTR [esp]
c000a5d8:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a5db:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5df:	dd 1e                	fstp   QWORD PTR [esi]
c000a5e1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5e4:	99                   	cdq    
c000a5e5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5e8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5eb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5ee:	99                   	cdq    
c000a5ef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5f2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5f5:	31 c0                	xor    eax,eax
c000a5f7:	e9 fe 00 00 00       	jmp    c000a6fa <sinc_stereo_vari_process+0x277>
c000a5fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a600:	dd 04 24             	fld    QWORD PTR [esp]
c000a603:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a606:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a60a:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a60e:	d9 c9                	fxch   st(1)
c000a610:	de d9                	fcompp 
c000a612:	df e0                	fnstsw ax
c000a614:	9e                   	sahf   
c000a615:	73 be                	jae    c000a5d5 <sinc_stereo_vari_process+0x152>
c000a617:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a61b:	7e 31                	jle    c000a64e <sinc_stereo_vari_process+0x1cb>
c000a61d:	83 ec 10             	sub    esp,0x10
c000a620:	dd 06                	fld    QWORD PTR [esi]
c000a622:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a625:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a628:	e8 f3 4d 01 00       	call   c001f420 <fabs>
c000a62d:	83 c4 10             	add    esp,0x10
c000a630:	dc 1d 60 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d60
c000a636:	df e0                	fnstsw ax
c000a638:	9e                   	sahf   
c000a639:	76 13                	jbe    c000a64e <sinc_stereo_vari_process+0x1cb>
c000a63b:	dd 06                	fld    QWORD PTR [esi]
c000a63d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a640:	d8 e1                	fsub   st,st(1)
c000a642:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a645:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a648:	de c1                	faddp  st(1),st
c000a64a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a64e:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a651:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a655:	d9 e8                	fld1   
c000a657:	d8 d9                	fcomp  st(1)
c000a659:	df e0                	fnstsw ax
c000a65b:	9e                   	sahf   
c000a65c:	77 04                	ja     c000a662 <sinc_stereo_vari_process+0x1df>
c000a65e:	dd d8                	fstp   st(0)
c000a660:	d9 e8                	fld1   
c000a662:	de c9                	fmulp  st(1),st
c000a664:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a668:	50                   	push   eax
c000a669:	50                   	push   eax
c000a66a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a672:	e8 a6 f4 ff ff       	call   c0009b1d <double_to_fp>
c000a677:	89 c5                	mov    ebp,eax
c000a679:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a67d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a681:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a684:	e8 94 f4 ff ff       	call   c0009b1d <double_to_fp>
c000a689:	83 c4 0c             	add    esp,0xc
c000a68c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a68f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a692:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a695:	89 c1                	mov    ecx,eax
c000a697:	52                   	push   edx
c000a698:	89 d8                	mov    eax,ebx
c000a69a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a69e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a6a1:	52                   	push   edx
c000a6a2:	52                   	push   edx
c000a6a3:	89 ea                	mov    edx,ebp
c000a6a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a8:	e8 ce ea ff ff       	call   c000917b <calc_output_stereo>
c000a6ad:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a6b1:	d9 e8                	fld1   
c000a6b3:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a6b7:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a6bb:	dd 14 24             	fst    QWORD PTR [esp]
c000a6be:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a6c2:	e8 69 f4 ff ff       	call   c0009b30 <fmod_one>
c000a6c7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6ca:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6ce:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6d1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a6d9:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6e0:	e8 5b 4d 01 00       	call   c001f440 <lrint>
c000a6e5:	0f af e8             	imul   ebp,eax
c000a6e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6ec:	01 e8                	add    eax,ebp
c000a6ee:	99                   	cdq    
c000a6ef:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6f5:	e9 85 fe ff ff       	jmp    c000a57f <sinc_stereo_vari_process+0xfc>
c000a6fa:	83 c4 3c             	add    esp,0x3c
c000a6fd:	5b                   	pop    ebx
c000a6fe:	5e                   	pop    esi
c000a6ff:	5f                   	pop    edi
c000a700:	5d                   	pop    ebp
c000a701:	c3                   	ret    

c000a702 <sinc_mono_vari_process>:
c000a702:	55                   	push   ebp
c000a703:	b8 05 00 00 00       	mov    eax,0x5
c000a708:	57                   	push   edi
c000a709:	56                   	push   esi
c000a70a:	53                   	push   ebx
c000a70b:	83 ec 3c             	sub    esp,0x3c
c000a70e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a712:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a716:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a719:	85 db                	test   ebx,ebx
c000a71b:	0f 84 57 02 00 00    	je     c000a978 <sinc_mono_vari_process+0x276>
c000a721:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a724:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a727:	0f af d0             	imul   edx,eax
c000a72a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a72d:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a731:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a738:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a73b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a742:	dd 06                	fld    QWORD PTR [esi]
c000a744:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a748:	51                   	push   ecx
c000a749:	51                   	push   ecx
c000a74a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a74d:	e8 d8 e8 ff ff       	call   c000902a <is_bad_src_ratio>
c000a752:	5d                   	pop    ebp
c000a753:	89 c2                	mov    edx,eax
c000a755:	58                   	pop    eax
c000a756:	85 d2                	test   edx,edx
c000a758:	b8 16 00 00 00       	mov    eax,0x16
c000a75d:	0f 85 15 02 00 00    	jne    c000a978 <sinc_mono_vari_process+0x276>
c000a763:	d9 05 70 0d 02 c0    	fld    DWORD PTR ds:0xc0020d70
c000a769:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a76c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a76f:	dd 06                	fld    QWORD PTR [esi]
c000a771:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a774:	d8 d1                	fcom   st(1)
c000a776:	df e0                	fnstsw ax
c000a778:	9e                   	sahf   
c000a779:	76 0f                	jbe    c000a78a <sinc_mono_vari_process+0x88>
c000a77b:	dd d8                	fstp   st(0)
c000a77d:	d9 e8                	fld1   
c000a77f:	d8 d9                	fcomp  st(1)
c000a781:	df e0                	fnstsw ax
c000a783:	9e                   	sahf   
c000a784:	77 0f                	ja     c000a795 <sinc_mono_vari_process+0x93>
c000a786:	dd d8                	fstp   st(0)
c000a788:	eb 11                	jmp    c000a79b <sinc_mono_vari_process+0x99>
c000a78a:	dd d9                	fstp   st(1)
c000a78c:	d9 e8                	fld1   
c000a78e:	d8 d9                	fcomp  st(1)
c000a790:	df e0                	fnstsw ax
c000a792:	9e                   	sahf   
c000a793:	76 04                	jbe    c000a799 <sinc_mono_vari_process+0x97>
c000a795:	de f9                	fdivp  st(1),st
c000a797:	eb 02                	jmp    c000a79b <sinc_mono_vari_process+0x99>
c000a799:	dd d8                	fstp   st(0)
c000a79b:	83 ec 10             	sub    esp,0x10
c000a79e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a7a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7a4:	e8 97 4c 01 00       	call   c001f440 <lrint>
c000a7a9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a7ac:	40                   	inc    eax
c000a7ad:	dd 14 24             	fst    QWORD PTR [esp]
c000a7b0:	0f af e8             	imul   ebp,eax
c000a7b3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7b7:	e8 74 f3 ff ff       	call   c0009b30 <fmod_one>
c000a7bc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a7bf:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a7c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a7c7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a7cb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a7ce:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a7d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7d9:	e8 62 4c 01 00       	call   c001f440 <lrint>
c000a7de:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a7e3:	d9 e8                	fld1   
c000a7e5:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7e9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7ed:	99                   	cdq    
c000a7ee:	dc 05 d8 0b 02 c0    	fadd   QWORD PTR ds:0xc0020bd8
c000a7f4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7fb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7fe:	83 c4 10             	add    esp,0x10
c000a801:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a804:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a807:	7d 44                	jge    c000a84d <sinc_mono_vari_process+0x14b>
c000a809:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a80c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a80f:	01 c8                	add    eax,ecx
c000a811:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a814:	99                   	cdq    
c000a815:	f7 f9                	idiv   ecx
c000a817:	39 d5                	cmp    ebp,edx
c000a819:	7d 09                	jge    c000a824 <sinc_mono_vari_process+0x122>
c000a81b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a81e:	85 c0                	test   eax,eax
c000a820:	79 52                	jns    c000a874 <sinc_mono_vari_process+0x172>
c000a822:	eb 6b                	jmp    c000a88f <sinc_mono_vari_process+0x18d>
c000a824:	52                   	push   edx
c000a825:	55                   	push   ebp
c000a826:	57                   	push   edi
c000a827:	53                   	push   ebx
c000a828:	e8 5a f3 ff ff       	call   c0009b87 <prepare_data>
c000a82d:	83 c4 10             	add    esp,0x10
c000a830:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a833:	85 c0                	test   eax,eax
c000a835:	0f 85 3d 01 00 00    	jne    c000a978 <sinc_mono_vari_process+0x276>
c000a83b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a83e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a841:	01 c8                	add    eax,ecx
c000a843:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a846:	99                   	cdq    
c000a847:	f7 f9                	idiv   ecx
c000a849:	39 d5                	cmp    ebp,edx
c000a84b:	7c ce                	jl     c000a81b <sinc_mono_vari_process+0x119>
c000a84d:	dd 04 24             	fld    QWORD PTR [esp]
c000a850:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a853:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a857:	dd 1e                	fstp   QWORD PTR [esi]
c000a859:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a85c:	99                   	cdq    
c000a85d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a860:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a863:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a866:	99                   	cdq    
c000a867:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a86a:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a86d:	31 c0                	xor    eax,eax
c000a86f:	e9 04 01 00 00       	jmp    c000a978 <sinc_mono_vari_process+0x276>
c000a874:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a878:	dd 04 24             	fld    QWORD PTR [esp]
c000a87b:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a87e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a882:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a886:	d9 c9                	fxch   st(1)
c000a888:	de d9                	fcompp 
c000a88a:	df e0                	fnstsw ax
c000a88c:	9e                   	sahf   
c000a88d:	77 be                	ja     c000a84d <sinc_mono_vari_process+0x14b>
c000a88f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a893:	7e 31                	jle    c000a8c6 <sinc_mono_vari_process+0x1c4>
c000a895:	83 ec 10             	sub    esp,0x10
c000a898:	dd 06                	fld    QWORD PTR [esi]
c000a89a:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a89d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a0:	e8 7b 4b 01 00       	call   c001f420 <fabs>
c000a8a5:	83 c4 10             	add    esp,0x10
c000a8a8:	dc 1d 60 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d60
c000a8ae:	df e0                	fnstsw ax
c000a8b0:	9e                   	sahf   
c000a8b1:	76 13                	jbe    c000a8c6 <sinc_mono_vari_process+0x1c4>
c000a8b3:	dd 06                	fld    QWORD PTR [esi]
c000a8b5:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a8b8:	d8 e1                	fsub   st,st(1)
c000a8ba:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a8bd:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a8c0:	de c1                	faddp  st(1),st
c000a8c2:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a8c6:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a8c9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a8cd:	d9 e8                	fld1   
c000a8cf:	d8 d9                	fcomp  st(1)
c000a8d1:	df e0                	fnstsw ax
c000a8d3:	9e                   	sahf   
c000a8d4:	77 04                	ja     c000a8da <sinc_mono_vari_process+0x1d8>
c000a8d6:	dd d8                	fstp   st(0)
c000a8d8:	d9 e8                	fld1   
c000a8da:	de c9                	fmulp  st(1),st
c000a8dc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8e0:	50                   	push   eax
c000a8e1:	50                   	push   eax
c000a8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ea:	e8 2e f2 ff ff       	call   c0009b1d <double_to_fp>
c000a8ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8f3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8f7:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8fb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8fe:	e8 1a f2 ff ff       	call   c0009b1d <double_to_fp>
c000a903:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a907:	89 c1                	mov    ecx,eax
c000a909:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a90d:	89 d8                	mov    eax,ebx
c000a90f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a912:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a916:	e8 7b e7 ff ff       	call   c0009096 <calc_output_single>
c000a91b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a91e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a921:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a925:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a928:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a92b:	d9 e8                	fld1   
c000a92d:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a931:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a935:	dd 14 24             	fst    QWORD PTR [esp]
c000a938:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a93c:	e8 ef f1 ff ff       	call   c0009b30 <fmod_one>
c000a941:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a944:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a94c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a950:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a953:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a957:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a95b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a95e:	e8 dd 4a 01 00       	call   c001f440 <lrint>
c000a963:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a968:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a96c:	99                   	cdq    
c000a96d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a970:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a973:	e9 86 fe ff ff       	jmp    c000a7fe <sinc_mono_vari_process+0xfc>
c000a978:	83 c4 3c             	add    esp,0x3c
c000a97b:	5b                   	pop    ebx
c000a97c:	5e                   	pop    esi
c000a97d:	5f                   	pop    edi
c000a97e:	5d                   	pop    ebp
c000a97f:	c3                   	ret    

c000a980 <sinc_get_name>:
c000a980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a984:	31 c0                	xor    eax,eax
c000a986:	83 fa 02             	cmp    edx,0x2
c000a989:	77 07                	ja     c000a992 <sinc_get_name+0x12>
c000a98b:	8b 04 95 40 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf3c0]
c000a992:	c3                   	ret    

c000a993 <sinc_get_description>:
c000a993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a997:	31 c0                	xor    eax,eax
c000a999:	83 fa 02             	cmp    edx,0x2
c000a99c:	77 07                	ja     c000a9a5 <sinc_get_description+0x12>
c000a99e:	8b 04 95 34 0c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf3cc]
c000a9a5:	c3                   	ret    

c000a9a6 <sinc_set_converter>:
c000a9a6:	53                   	push   ebx
c000a9a7:	81 ec 58 08 00 00    	sub    esp,0x858
c000a9ad:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a9b4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a9b7:	85 c0                	test   eax,eax
c000a9b9:	74 13                	je     c000a9ce <sinc_set_converter+0x28>
c000a9bb:	83 ec 0c             	sub    esp,0xc
c000a9be:	50                   	push   eax
c000a9bf:	e8 94 16 00 00       	call   c000c058 <free>
c000a9c4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a9cb:	83 c4 10             	add    esp,0x10
c000a9ce:	50                   	push   eax
c000a9cf:	68 44 08 00 00       	push   0x844
c000a9d4:	6a 00                	push   0x0
c000a9d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a9da:	50                   	push   eax
c000a9db:	e8 06 5d ff ff       	call   c00006e6 <memset>
c000a9e0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a9e3:	83 c4 10             	add    esp,0x10
c000a9e6:	b8 0b 00 00 00       	mov    eax,0xb
c000a9eb:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9f1:	7f 6e                	jg     c000aa61 <sinc_set_converter+0xbb>
c000a9f3:	83 fa 01             	cmp    edx,0x1
c000a9f6:	75 10                	jne    c000aa08 <sinc_set_converter+0x62>
c000a9f8:	c7 43 24 02 a7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a702
c000a9ff:	c7 43 20 02 a7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a702
c000aa06:	eb 4d                	jmp    c000aa55 <sinc_set_converter+0xaf>
c000aa08:	83 fa 02             	cmp    edx,0x2
c000aa0b:	75 10                	jne    c000aa1d <sinc_set_converter+0x77>
c000aa0d:	c7 43 24 83 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a483
c000aa14:	c7 43 20 83 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a483
c000aa1b:	eb 38                	jmp    c000aa55 <sinc_set_converter+0xaf>
c000aa1d:	83 fa 04             	cmp    edx,0x4
c000aa20:	75 10                	jne    c000aa32 <sinc_set_converter+0x8c>
c000aa22:	c7 43 24 04 a2 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a204
c000aa29:	c7 43 20 04 a2 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a204
c000aa30:	eb 23                	jmp    c000aa55 <sinc_set_converter+0xaf>
c000aa32:	83 fa 06             	cmp    edx,0x6
c000aa35:	75 10                	jne    c000aa47 <sinc_set_converter+0xa1>
c000aa37:	c7 43 24 85 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f85
c000aa3e:	c7 43 20 85 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f85
c000aa45:	eb 0e                	jmp    c000aa55 <sinc_set_converter+0xaf>
c000aa47:	c7 43 24 01 9d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009d01
c000aa4e:	c7 43 20 01 9d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009d01
c000aa55:	c7 43 28 b1 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00096b1
c000aa5c:	b8 0a 00 00 00       	mov    eax,0xa
c000aa61:	81 c4 58 08 00 00    	add    esp,0x858
c000aa67:	5b                   	pop    ebx
c000aa68:	c3                   	ret    

c000aa69 <is_bad_src_ratio>:
c000aa69:	83 ec 0c             	sub    esp,0xc
c000aa6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa70:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa7b:	dd 04 24             	fld    QWORD PTR [esp]
c000aa7e:	dd 05 60 0b 02 c0    	fld    QWORD PTR ds:0xc0020b60
c000aa84:	de d9                	fcompp 
c000aa86:	df e0                	fnstsw ax
c000aa88:	f6 c4 45             	test   ah,0x45
c000aa8b:	74 10                	je     c000aa9d <is_bad_src_ratio+0x34>
c000aa8d:	dd 04 24             	fld    QWORD PTR [esp]
c000aa90:	dc 1d 68 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020b68
c000aa96:	df e0                	fnstsw ax
c000aa98:	f6 c4 45             	test   ah,0x45
c000aa9b:	75 07                	jne    c000aaa4 <is_bad_src_ratio+0x3b>
c000aa9d:	b8 01 00 00 00       	mov    eax,0x1
c000aaa2:	eb 05                	jmp    c000aaa9 <is_bad_src_ratio+0x40>
c000aaa4:	b8 00 00 00 00       	mov    eax,0x0
c000aaa9:	83 c4 0c             	add    esp,0xc
c000aaac:	c3                   	ret    

c000aaad <fmod_one>:
c000aaad:	83 ec 2c             	sub    esp,0x2c
c000aab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aab8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aabc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aac0:	83 ec 08             	sub    esp,0x8
c000aac3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aacb:	e8 70 49 01 00       	call   c001f440 <lrint>
c000aad0:	83 c4 10             	add    esp,0x10
c000aad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aad7:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aadb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aadf:	de e1                	fsubrp st(1),st
c000aae1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aae5:	d9 ee                	fldz   
c000aae7:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aaeb:	df e0                	fnstsw ax
c000aaed:	f6 c4 45             	test   ah,0x45
c000aaf0:	75 0a                	jne    c000aafc <fmod_one+0x4f>
c000aaf2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaf6:	d9 e8                	fld1   
c000aaf8:	de c1                	faddp  st(1),st
c000aafa:	eb 04                	jmp    c000ab00 <fmod_one+0x53>
c000aafc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab00:	83 c4 2c             	add    esp,0x2c
c000ab03:	c3                   	ret    

c000ab04 <zoh_vari_process>:
c000ab04:	55                   	push   ebp
c000ab05:	57                   	push   edi
c000ab06:	56                   	push   esi
c000ab07:	53                   	push   ebx
c000ab08:	83 ec 2c             	sub    esp,0x2c
c000ab0b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ab0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ab13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ab1b:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ab1f:	0f 8e 34 02 00 00    	jle    c000ad59 <zoh_vari_process+0x255>
c000ab25:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ab28:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ab30:	85 db                	test   ebx,ebx
c000ab32:	0f 84 21 02 00 00    	je     c000ad59 <zoh_vari_process+0x255>
c000ab38:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab3b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ab3f:	74 19                	je     c000ab5a <zoh_vari_process+0x56>
c000ab41:	31 d2                	xor    edx,edx
c000ab43:	39 c2                	cmp    edx,eax
c000ab45:	7d 0c                	jge    c000ab53 <zoh_vari_process+0x4f>
c000ab47:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab49:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab4c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab50:	42                   	inc    edx
c000ab51:	eb f0                	jmp    c000ab43 <zoh_vari_process+0x3f>
c000ab53:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab5a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab5d:	0f af d0             	imul   edx,eax
c000ab60:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab63:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab67:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab6e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab71:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab78:	dd 07                	fld    QWORD PTR [edi]
c000ab7a:	dd 14 24             	fst    QWORD PTR [esp]
c000ab7d:	50                   	push   eax
c000ab7e:	50                   	push   eax
c000ab7f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab82:	e8 e2 fe ff ff       	call   c000aa69 <is_bad_src_ratio>
c000ab87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab8b:	5a                   	pop    edx
c000ab8c:	59                   	pop    ecx
c000ab8d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab92:	0f 85 b9 01 00 00    	jne    c000ad51 <zoh_vari_process+0x24d>
c000ab98:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab9b:	d9 e8                	fld1   
c000ab9d:	d8 d1                	fcom   st(1)
c000ab9f:	df e0                	fnstsw ax
c000aba1:	9e                   	sahf   
c000aba2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aba6:	0f 86 85 00 00 00    	jbe    c000ac31 <zoh_vari_process+0x12d>
c000abac:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000abaf:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000abb2:	7d 7d                	jge    c000ac31 <zoh_vari_process+0x12d>
c000abb4:	d9 c0                	fld    st(0)
c000abb6:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000abb9:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000abbc:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000abbf:	df e0                	fnstsw ax
c000abc1:	9e                   	sahf   
c000abc2:	73 6d                	jae    c000ac31 <zoh_vari_process+0x12d>
c000abc4:	85 d2                	test   edx,edx
c000abc6:	7e 38                	jle    c000ac00 <zoh_vari_process+0xfc>
c000abc8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abcc:	83 ec 10             	sub    esp,0x10
c000abcf:	dd 07                	fld    QWORD PTR [edi]
c000abd1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abd4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abd7:	e8 44 48 01 00       	call   c001f420 <fabs>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	dc 1d d8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bd8
c000abe5:	df e0                	fnstsw ax
c000abe7:	9e                   	sahf   
c000abe8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abec:	76 12                	jbe    c000ac00 <zoh_vari_process+0xfc>
c000abee:	dd 07                	fld    QWORD PTR [edi]
c000abf0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abf3:	d8 e1                	fsub   st,st(1)
c000abf5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abf8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abfb:	de c1                	faddp  st(1),st
c000abfd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac00:	31 c0                	xor    eax,eax
c000ac02:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ac05:	7e 13                	jle    c000ac1a <zoh_vari_process+0x116>
c000ac07:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ac0b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ac11:	40                   	inc    eax
c000ac12:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb e8                	jmp    c000ac02 <zoh_vari_process+0xfe>
c000ac1a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac1e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac21:	de c1                	faddp  st(1),st
c000ac23:	e9 73 ff ff ff       	jmp    c000ab9b <zoh_vari_process+0x97>
c000ac28:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ac2c:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ac2f:	de c1                	faddp  st(1),st
c000ac31:	83 ec 10             	sub    esp,0x10
c000ac34:	dd 14 24             	fst    QWORD PTR [esp]
c000ac37:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac3b:	e8 6d fe ff ff       	call   c000aaad <fmod_one>
c000ac40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac43:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ac47:	d8 e1                	fsub   st,st(1)
c000ac49:	d9 c9                	fxch   st(1)
c000ac4b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac4f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac52:	e8 e9 47 01 00       	call   c001f440 <lrint>
c000ac57:	83 c4 10             	add    esp,0x10
c000ac5a:	0f af e8             	imul   ebp,eax
c000ac5d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac60:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac63:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac67:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac6a:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac6d:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac70:	0f 8d 82 00 00 00    	jge    c000acf8 <zoh_vari_process+0x1f4>
c000ac76:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac7a:	d9 c0                	fld    st(0)
c000ac7c:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac7f:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac83:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac87:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac8b:	de d9                	fcompp 
c000ac8d:	df e0                	fnstsw ax
c000ac8f:	9e                   	sahf   
c000ac90:	72 66                	jb     c000acf8 <zoh_vari_process+0x1f4>
c000ac92:	85 d2                	test   edx,edx
c000ac94:	7e 38                	jle    c000acce <zoh_vari_process+0x1ca>
c000ac96:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac9a:	83 ec 10             	sub    esp,0x10
c000ac9d:	dd 07                	fld    QWORD PTR [edi]
c000ac9f:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aca2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aca5:	e8 76 47 01 00       	call   c001f420 <fabs>
c000acaa:	83 c4 10             	add    esp,0x10
c000acad:	dc 1d d8 0b 02 c0    	fcomp  QWORD PTR ds:0xc0020bd8
c000acb3:	df e0                	fnstsw ax
c000acb5:	9e                   	sahf   
c000acb6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000acba:	76 12                	jbe    c000acce <zoh_vari_process+0x1ca>
c000acbc:	dd 07                	fld    QWORD PTR [edi]
c000acbe:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000acc1:	d8 e1                	fsub   st,st(1)
c000acc3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000acc6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000acc9:	de c1                	faddp  st(1),st
c000accb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000acce:	31 d2                	xor    edx,edx
c000acd0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000acd3:	39 d0                	cmp    eax,edx
c000acd5:	0f 8e 4d ff ff ff    	jle    c000ac28 <zoh_vari_process+0x124>
c000acdb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000acde:	29 c1                	sub    ecx,eax
c000ace0:	89 c8                	mov    eax,ecx
c000ace2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace4:	01 d0                	add    eax,edx
c000ace6:	42                   	inc    edx
c000ace7:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000acea:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000aced:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000acf0:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000acf3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000acf6:	eb d8                	jmp    c000acd0 <zoh_vari_process+0x1cc>
c000acf8:	39 e9                	cmp    ecx,ebp
c000acfa:	7d 13                	jge    c000ad0f <zoh_vari_process+0x20b>
c000acfc:	89 e8                	mov    eax,ebp
c000acfe:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ad01:	29 c8                	sub    eax,ecx
c000ad03:	99                   	cdq    
c000ad04:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad0b:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ad0f:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ad12:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ad15:	85 c0                	test   eax,eax
c000ad17:	7f 1b                	jg     c000ad34 <zoh_vari_process+0x230>
c000ad19:	dd 04 24             	fld    QWORD PTR [esp]
c000ad1c:	dd 1f                	fstp   QWORD PTR [edi]
c000ad1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ad21:	99                   	cdq    
c000ad22:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad25:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ad28:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad2b:	99                   	cdq    
c000ad2c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ad2f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ad32:	eb 25                	jmp    c000ad59 <zoh_vari_process+0x255>
c000ad34:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ad37:	31 d2                	xor    edx,edx
c000ad39:	29 e8                	sub    eax,ebp
c000ad3b:	c1 e0 02             	shl    eax,0x2
c000ad3e:	39 d5                	cmp    ebp,edx
c000ad40:	7e d7                	jle    c000ad19 <zoh_vari_process+0x215>
c000ad42:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ad44:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ad47:	83 c0 04             	add    eax,0x4
c000ad4a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad4e:	42                   	inc    edx
c000ad4f:	eb ed                	jmp    c000ad3e <zoh_vari_process+0x23a>
c000ad51:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad5d:	83 c4 2c             	add    esp,0x2c
c000ad60:	5b                   	pop    ebx
c000ad61:	5e                   	pop    esi
c000ad62:	5f                   	pop    edi
c000ad63:	5d                   	pop    ebp
c000ad64:	c3                   	ret    

c000ad65 <zoh_reset>:
c000ad65:	83 ec 0c             	sub    esp,0xc
c000ad68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad6c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad6f:	85 c0                	test   eax,eax
c000ad71:	74 20                	je     c000ad93 <zoh_reset+0x2e>
c000ad73:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad76:	83 c0 1c             	add    eax,0x1c
c000ad79:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ad7c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000ad83:	c1 e2 02             	shl    edx,0x2
c000ad86:	51                   	push   ecx
c000ad87:	52                   	push   edx
c000ad88:	6a 00                	push   0x0
c000ad8a:	50                   	push   eax
c000ad8b:	e8 56 59 ff ff       	call   c00006e6 <memset>
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	83 c4 0c             	add    esp,0xc
c000ad96:	c3                   	ret    

c000ad97 <zoh_get_name>:
c000ad97:	31 c0                	xor    eax,eax
c000ad99:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad9e:	75 05                	jne    c000ada5 <zoh_get_name+0xe>
c000ada0:	b8 74 0d 02 c0       	mov    eax,0xc0020d74
c000ada5:	c3                   	ret    

c000ada6 <zoh_get_description>:
c000ada6:	31 c0                	xor    eax,eax
c000ada8:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000adad:	75 05                	jne    c000adb4 <zoh_get_description+0xe>
c000adaf:	b8 85 0d 02 c0       	mov    eax,0xc0020d85
c000adb4:	c3                   	ret    

c000adb5 <zoh_set_converter>:
c000adb5:	53                   	push   ebx
c000adb6:	b8 0a 00 00 00       	mov    eax,0xa
c000adbb:	83 ec 08             	sub    esp,0x8
c000adbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adc2:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000adc7:	75 6e                	jne    c000ae37 <zoh_set_converter+0x82>
c000adc9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000adcc:	85 c0                	test   eax,eax
c000adce:	74 13                	je     c000ade3 <zoh_set_converter+0x2e>
c000add0:	83 ec 0c             	sub    esp,0xc
c000add3:	50                   	push   eax
c000add4:	e8 7f 12 00 00       	call   c000c058 <free>
c000add9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ade0:	83 c4 10             	add    esp,0x10
c000ade3:	50                   	push   eax
c000ade4:	50                   	push   eax
c000ade5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ade8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000adef:	50                   	push   eax
c000adf0:	6a 01                	push   0x1
c000adf2:	e8 81 12 00 00       	call   c000c078 <calloc>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 c2                	mov    edx,eax
c000adfc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000adff:	85 d2                	test   edx,edx
c000ae01:	b8 01 00 00 00       	mov    eax,0x1
c000ae06:	74 2f                	je     c000ae37 <zoh_set_converter+0x82>
c000ae08:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae0b:	83 ec 0c             	sub    esp,0xc
c000ae0e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ae11:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ae17:	c7 43 24 04 ab 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ab04
c000ae1e:	c7 43 20 04 ab 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ab04
c000ae25:	c7 43 28 65 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad65
c000ae2c:	53                   	push   ebx
c000ae2d:	e8 33 ff ff ff       	call   c000ad65 <zoh_reset>
c000ae32:	83 c4 10             	add    esp,0x10
c000ae35:	31 c0                	xor    eax,eax
c000ae37:	83 c4 08             	add    esp,0x8
c000ae3a:	5b                   	pop    ebx
c000ae3b:	c3                   	ret    

c000ae3c <Computer::close(int, int, void*)>:
c000ae3c:	57                   	push   edi
c000ae3d:	56                   	push   esi
c000ae3e:	53                   	push   ebx
c000ae3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae47:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae4b:	83 ec 0c             	sub    esp,0xc
c000ae4e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ae54:	e8 61 58 00 00       	call   c00106ba <Device::closeAll()>
c000ae59:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae5f:	83 c4 10             	add    esp,0x10
c000ae62:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae64:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae68:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae70:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae78:	5b                   	pop    ebx
c000ae79:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae7c:	5e                   	pop    esi
c000ae7d:	5f                   	pop    edi
c000ae7e:	ff e0                	jmp    eax

c000ae80 <Computer::Computer()>:
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	83 ec 08             	sub    esp,0x8
c000ae8a:	68 bc 0d 02 c0       	push   0xc0020dbc
c000ae8f:	50                   	push   eax
c000ae90:	e8 9f 58 00 00       	call   c0010734 <Device::Device(char const*)>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	ba 84 0f 02 c0       	mov    edx,0xc0020f84
c000ae9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea1:	89 10                	mov    DWORD PTR [eax],edx
c000aea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000aeb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000aebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000aec9:	83 ca 04             	or     edx,0x4
c000aecc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aedc:	0f b6 d0             	movzx  edx,al
c000aedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee3:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aef4:	0f b6 d0             	movzx  edx,al
c000aef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000af00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af04:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af0a:	8d 50 01             	lea    edx,[eax+0x1]
c000af0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af11:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af17:	0f b6 d0             	movzx  edx,al
c000af1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af22:	83 e1 3f             	and    ecx,0x3f
c000af25:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af33:	0f b6 d0             	movzx  edx,al
c000af36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000af41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af45:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af4b:	0f b6 d0             	movzx  edx,al
c000af4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af52:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af61:	8d 50 01             	lea    edx,[eax+0x1]
c000af64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af68:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af6e:	0f b6 d0             	movzx  edx,al
c000af71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af79:	83 e1 3f             	and    ecx,0x3f
c000af7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af8a:	0f b6 d0             	movzx  edx,al
c000af8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af91:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000afa2:	0f b6 d0             	movzx  edx,al
c000afa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000afae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000afb8:	8d 50 01             	lea    edx,[eax+0x1]
c000afbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000afbf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000afc5:	0f b6 d0             	movzx  edx,al
c000afc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afcc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000afd0:	83 e1 3f             	and    ecx,0x3f
c000afd3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000afd7:	90                   	nop
c000afd8:	83 c4 0c             	add    esp,0xc
c000afdb:	c3                   	ret    

c000afdc <Computer::setBootMessage(char const*)>:
c000afdc:	c3                   	ret    
c000afdd:	90                   	nop

c000afde <Computer::start()>:
c000afde:	56                   	push   esi
c000afdf:	53                   	push   ebx
c000afe0:	50                   	push   eax
c000afe1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afe5:	e8 8a d8 00 00       	call   c0018874 <lockScheduler()>
c000afea:	e8 b9 db 00 00       	call   c0018ba8 <schedule()>
c000afef:	e8 82 d8 00 00       	call   c0018876 <unlockScheduler()>
c000aff4:	fb                   	sti    
c000aff5:	83 ec 0c             	sub    esp,0xc
c000aff8:	68 3b 07 00 00       	push   0x73b
c000affd:	e8 48 40 00 00       	call   c000f04a <operator new(unsigned long)>
c000b002:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b009:	89 c6                	mov    esi,eax
c000b00b:	ff 35 14 58 02 c0    	push   DWORD PTR ds:0xc0025814
c000b011:	68 c5 0d 02 c0       	push   0xc0020dc5
c000b016:	6a 01                	push   0x1
c000b018:	50                   	push   eax
c000b019:	e8 b6 d6 00 00       	call   c00186d4 <Process::Process(bool, char const*, Process*, char**)>
c000b01e:	83 c4 20             	add    esp,0x20
c000b021:	68 ff 00 00 00       	push   0xff
c000b026:	6a 00                	push   0x0
c000b028:	68 d5 b9 00 c0       	push   0xc000b9d5
c000b02d:	56                   	push   esi
c000b02e:	e8 6b d9 00 00       	call   c001899e <Process::createThread(void (*)(void*), void*, int)>
c000b033:	6a 7a                	push   0x7a
c000b035:	6a 00                	push   0x0
c000b037:	68 d7 91 01 c0       	push   0xc00191d7
c000b03c:	ff 35 14 58 02 c0    	push   DWORD PTR ds:0xc0025814
c000b042:	e8 57 d9 00 00       	call   c001899e <Process::createThread(void (*)(void*), void*, int)>
c000b047:	83 c4 20             	add    esp,0x20
c000b04a:	a3 c8 57 02 c0       	mov    ds:0xc00257c8,eax
c000b04f:	c6 05 cd 43 02 c0 01 	mov    BYTE PTR ds:0xc00243cd,0x1
c000b056:	e8 39 44 00 00       	call   c000f494 <initVFS()>
c000b05b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b061:	8b 10                	mov    edx,DWORD PTR [eax]
c000b063:	6a 00                	push   0x0
c000b065:	6a 00                	push   0x0
c000b067:	6a 00                	push   0x0
c000b069:	50                   	push   eax
c000b06a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b06d:	e8 5f c0 00 00       	call   c00170d1 <setupSystemCalls()>
c000b072:	e8 1b 4f 00 00       	call   c000ff92 <loadClockSettings()>
c000b077:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b07a:	e8 0f 56 00 00       	call   c001068e <Device::loadDriversForAll()>
c000b07f:	5a                   	pop    edx
c000b080:	8b 1d c8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c8
c000b086:	59                   	pop    ecx
c000b087:	6a 01                	push   0x1
c000b089:	68 d2 0d 02 c0       	push   0xc0020dd2
c000b08e:	e8 10 d2 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c000b093:	5e                   	pop    esi
c000b094:	5a                   	pop    edx
c000b095:	53                   	push   ebx
c000b096:	50                   	push   eax
c000b097:	e8 cd d3 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c000b09c:	c7 04 24 74 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f74
c000b0a3:	e8 91 40 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	6a 02                	push   0x2
c000b0b0:	e8 4d dc 00 00       	call   c0018d02 <blockTask(TaskState)>
c000b0b5:	83 c4 10             	add    esp,0x10
c000b0b8:	eb f1                	jmp    c000b0ab <Computer::start()+0xcd>

c000b0ba <firstTask()>:
c000b0ba:	83 ec 18             	sub    esp,0x18
c000b0bd:	ff 35 c8 43 02 c0    	push   DWORD PTR ds:0xc00243c8
c000b0c3:	e8 16 ff ff ff       	call   c000afde <Computer::start()>

c000b0c8 <Computer::detectFeatures()>:
c000b0c8:	55                   	push   ebp
c000b0c9:	57                   	push   edi
c000b0ca:	56                   	push   esi
c000b0cb:	53                   	push   ebx
c000b0cc:	83 ec 1c             	sub    esp,0x1c
c000b0cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0d3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b0dd:	e8 bb 52 ff ff       	call   c000039d <detectCPUID>
c000b0e2:	85 c0                	test   eax,eax
c000b0e4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ea:	0f 95 c2             	setne  dl
c000b0ed:	83 e0 fd             	and    eax,0xfffffffd
c000b0f0:	d1 e2                	shl    edx,1
c000b0f2:	09 d0                	or     eax,edx
c000b0f4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0fa:	a8 02                	test   al,0x2
c000b0fc:	75 46                	jne    c000b144 <Computer::detectFeatures()+0x7c>
c000b0fe:	f6 05 e1 43 02 c0 04 	test   BYTE PTR ds:0xc00243e1,0x4
c000b105:	74 07                	je     c000b10e <Computer::detectFeatures()+0x46>
c000b107:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b10e:	e8 b3 3d 01 00       	call   c001eec6 <x87Detect>
c000b113:	83 e0 01             	and    eax,0x1
c000b116:	c1 e0 04             	shl    eax,0x4
c000b119:	88 c2                	mov    dl,al
c000b11b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b121:	83 e0 ef             	and    eax,0xffffffef
c000b124:	09 d0                	or     eax,edx
c000b126:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b12c:	a8 10                	test   al,0x10
c000b12e:	0f 85 10 01 00 00    	jne    c000b244 <Computer::detectFeatures()+0x17c>
c000b134:	84 c0                	test   al,al
c000b136:	0f 88 2b 01 00 00    	js     c000b267 <Computer::detectFeatures()+0x19f>
c000b13c:	83 c4 1c             	add    esp,0x1c
c000b13f:	5b                   	pop    ebx
c000b140:	5e                   	pop    esi
c000b141:	5f                   	pop    edi
c000b142:	5d                   	pop    ebp
c000b143:	c3                   	ret    
c000b144:	83 ec 0c             	sub    esp,0xc
c000b147:	6a 20                	push   0x20
c000b149:	e8 9b 95 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b14e:	83 e0 01             	and    eax,0x1
c000b151:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b158:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b15e:	83 e0 f7             	and    eax,0xfffffff7
c000b161:	09 d0                	or     eax,edx
c000b163:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b169:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b170:	e8 74 95 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b175:	83 e0 01             	and    eax,0x1
c000b178:	88 c2                	mov    dl,al
c000b17a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b180:	83 e0 fe             	and    eax,0xfffffffe
c000b183:	09 d0                	or     eax,edx
c000b185:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b18b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b192:	e8 52 95 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b197:	c1 e0 07             	shl    eax,0x7
c000b19a:	88 c2                	mov    dl,al
c000b19c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1a2:	83 e0 7f             	and    eax,0x7f
c000b1a5:	09 d0                	or     eax,edx
c000b1a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1ad:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1b4:	e8 30 95 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	83 e0 01             	and    eax,0x1
c000b1bf:	c1 e0 05             	shl    eax,0x5
c000b1c2:	88 c2                	mov    dl,al
c000b1c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1ca:	83 e0 df             	and    eax,0xffffffdf
c000b1cd:	09 d0                	or     eax,edx
c000b1cf:	f7 05 e0 43 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00243e0,0x401
c000b1d9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1df:	0f 84 a8 00 00 00    	je     c000b28d <Computer::detectFeatures()+0x1c5>
c000b1e5:	83 ec 0c             	sub    esp,0xc
c000b1e8:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b1ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1f3:	50                   	push   eax
c000b1f4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1f8:	55                   	push   ebp
c000b1f9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1fd:	57                   	push   edi
c000b1fe:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b202:	56                   	push   esi
c000b203:	68 00 00 00 80       	push   0x80000000
c000b208:	e8 59 94 00 00       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b20d:	83 c4 20             	add    esp,0x20
c000b210:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b217:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b21b:	0f 86 dd fe ff ff    	jbe    c000b0fe <Computer::detectFeatures()+0x36>
c000b221:	83 ec 0c             	sub    esp,0xc
c000b224:	50                   	push   eax
c000b225:	55                   	push   ebp
c000b226:	57                   	push   edi
c000b227:	56                   	push   esi
c000b228:	68 01 00 00 80       	push   0x80000001
c000b22d:	e8 34 94 00 00       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b232:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b23c:	83 c4 20             	add    esp,0x20
c000b23f:	e9 ba fe ff ff       	jmp    c000b0fe <Computer::detectFeatures()+0x36>
c000b244:	e8 37 3c 01 00       	call   c001ee80 <sseDetect>
c000b249:	88 c2                	mov    dl,al
c000b24b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b251:	c1 e2 07             	shl    edx,0x7
c000b254:	83 e0 7f             	and    eax,0x7f
c000b257:	09 d0                	or     eax,edx
c000b259:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b25f:	84 c0                	test   al,al
c000b261:	0f 89 d5 fe ff ff    	jns    c000b13c <Computer::detectFeatures()+0x74>
c000b267:	e8 04 3c 01 00       	call   c001ee70 <avxDetect>
c000b26c:	83 e0 01             	and    eax,0x1
c000b26f:	c1 e0 05             	shl    eax,0x5
c000b272:	88 c2                	mov    dl,al
c000b274:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b27a:	83 e0 df             	and    eax,0xffffffdf
c000b27d:	09 d0                	or     eax,edx
c000b27f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b285:	83 c4 1c             	add    esp,0x1c
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	5d                   	pop    ebp
c000b28c:	c3                   	ret    
c000b28d:	83 ec 0c             	sub    esp,0xc
c000b290:	68 00 02 00 00       	push   0x200
c000b295:	e8 4f 94 00 00       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c000b29a:	83 c4 10             	add    esp,0x10
c000b29d:	e9 43 ff ff ff       	jmp    c000b1e5 <Computer::detectFeatures()+0x11d>

c000b2a2 <Computer::displayFeatures()>:
c000b2a2:	53                   	push   ebx
c000b2a3:	83 ec 14             	sub    esp,0x14
c000b2a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2aa:	68 f5 0d 02 c0       	push   0xc0020df5
c000b2af:	e8 85 3e 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2be:	0f 85 73 02 00 00    	jne    c000b537 <Computer::displayFeatures()+0x295>
c000b2c4:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b2c9:	83 ec 08             	sub    esp,0x8
c000b2cc:	50                   	push   eax
c000b2cd:	68 08 0e 02 c0       	push   0xc0020e08
c000b2d2:	e8 62 3e 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b2d7:	83 c4 10             	add    esp,0x10
c000b2da:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2e1:	0f 85 8c 02 00 00    	jne    c000b573 <Computer::displayFeatures()+0x2d1>
c000b2e7:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b2ec:	83 ec 08             	sub    esp,0x8
c000b2ef:	50                   	push   eax
c000b2f0:	68 19 0e 02 c0       	push   0xc0020e19
c000b2f5:	e8 3f 3e 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b2fa:	83 c4 10             	add    esp,0x10
c000b2fd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b304:	0f 85 5f 02 00 00    	jne    c000b569 <Computer::displayFeatures()+0x2c7>
c000b30a:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b30f:	83 ec 08             	sub    esp,0x8
c000b312:	50                   	push   eax
c000b313:	68 2a 0e 02 c0       	push   0xc0020e2a
c000b318:	e8 1c 3e 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b31d:	83 c4 10             	add    esp,0x10
c000b320:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b327:	0f 85 32 02 00 00    	jne    c000b55f <Computer::displayFeatures()+0x2bd>
c000b32d:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b332:	83 ec 08             	sub    esp,0x8
c000b335:	50                   	push   eax
c000b336:	68 3b 0e 02 c0       	push   0xc0020e3b
c000b33b:	e8 f9 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b34a:	0f 85 05 02 00 00    	jne    c000b555 <Computer::displayFeatures()+0x2b3>
c000b350:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b355:	83 ec 08             	sub    esp,0x8
c000b358:	50                   	push   eax
c000b359:	68 4c 0e 02 c0       	push   0xc0020e4c
c000b35e:	e8 d6 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b363:	83 c4 10             	add    esp,0x10
c000b366:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b36d:	0f 85 d8 01 00 00    	jne    c000b54b <Computer::displayFeatures()+0x2a9>
c000b373:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b378:	83 ec 08             	sub    esp,0x8
c000b37b:	50                   	push   eax
c000b37c:	68 5d 0e 02 c0       	push   0xc0020e5d
c000b381:	e8 b3 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b390:	0f 85 ab 01 00 00    	jne    c000b541 <Computer::displayFeatures()+0x29f>
c000b396:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b39b:	83 ec 08             	sub    esp,0x8
c000b39e:	50                   	push   eax
c000b39f:	68 6e 0e 02 c0       	push   0xc0020e6e
c000b3a4:	e8 90 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b3a9:	83 c4 10             	add    esp,0x10
c000b3ac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3b3:	0f 88 1b 02 00 00    	js     c000b5d4 <Computer::displayFeatures()+0x332>
c000b3b9:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b3be:	83 ec 08             	sub    esp,0x8
c000b3c1:	50                   	push   eax
c000b3c2:	68 7f 0e 02 c0       	push   0xc0020e7f
c000b3c7:	e8 6d 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b3cc:	83 c4 10             	add    esp,0x10
c000b3cf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3d6:	0f 85 a1 01 00 00    	jne    c000b57d <Computer::displayFeatures()+0x2db>
c000b3dc:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b3e1:	83 ec 08             	sub    esp,0x8
c000b3e4:	50                   	push   eax
c000b3e5:	68 90 0e 02 c0       	push   0xc0020e90
c000b3ea:	e8 4a 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b3ef:	83 c4 10             	add    esp,0x10
c000b3f2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3f9:	0f 85 cb 01 00 00    	jne    c000b5ca <Computer::displayFeatures()+0x328>
c000b3ff:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b404:	83 ec 08             	sub    esp,0x8
c000b407:	50                   	push   eax
c000b408:	68 a1 0e 02 c0       	push   0xc0020ea1
c000b40d:	e8 27 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b412:	83 c4 10             	add    esp,0x10
c000b415:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b41c:	0f 85 9e 01 00 00    	jne    c000b5c0 <Computer::displayFeatures()+0x31e>
c000b422:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b427:	83 ec 08             	sub    esp,0x8
c000b42a:	50                   	push   eax
c000b42b:	68 b2 0e 02 c0       	push   0xc0020eb2
c000b430:	e8 04 3d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b435:	83 c4 10             	add    esp,0x10
c000b438:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b43f:	0f 85 71 01 00 00    	jne    c000b5b6 <Computer::displayFeatures()+0x314>
c000b445:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	50                   	push   eax
c000b44e:	68 c3 0e 02 c0       	push   0xc0020ec3
c000b453:	e8 e1 3c 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b462:	0f 85 44 01 00 00    	jne    c000b5ac <Computer::displayFeatures()+0x30a>
c000b468:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b46d:	83 ec 08             	sub    esp,0x8
c000b470:	50                   	push   eax
c000b471:	68 d4 0e 02 c0       	push   0xc0020ed4
c000b476:	e8 be 3c 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b47b:	83 c4 10             	add    esp,0x10
c000b47e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b485:	0f 85 17 01 00 00    	jne    c000b5a2 <Computer::displayFeatures()+0x300>
c000b48b:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b490:	83 ec 08             	sub    esp,0x8
c000b493:	50                   	push   eax
c000b494:	68 e5 0e 02 c0       	push   0xc0020ee5
c000b499:	e8 9b 3c 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4a8:	0f 85 ea 00 00 00    	jne    c000b598 <Computer::displayFeatures()+0x2f6>
c000b4ae:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b4b3:	83 ec 08             	sub    esp,0x8
c000b4b6:	50                   	push   eax
c000b4b7:	68 f6 0e 02 c0       	push   0xc0020ef6
c000b4bc:	e8 78 3c 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b4c1:	83 c4 10             	add    esp,0x10
c000b4c4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4cb:	0f 88 0d 01 00 00    	js     c000b5de <Computer::displayFeatures()+0x33c>
c000b4d1:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b4d6:	83 ec 08             	sub    esp,0x8
c000b4d9:	50                   	push   eax
c000b4da:	68 07 0f 02 c0       	push   0xc0020f07
c000b4df:	e8 55 3c 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4ee:	0f 85 9a 00 00 00    	jne    c000b58e <Computer::displayFeatures()+0x2ec>
c000b4f4:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b4f9:	83 ec 08             	sub    esp,0x8
c000b4fc:	50                   	push   eax
c000b4fd:	68 18 0f 02 c0       	push   0xc0020f18
c000b502:	e8 32 3c 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b511:	75 74                	jne    c000b587 <Computer::displayFeatures()+0x2e5>
c000b513:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c000b518:	83 ec 08             	sub    esp,0x8
c000b51b:	50                   	push   eax
c000b51c:	68 29 0f 02 c0       	push   0xc0020f29
c000b521:	e8 13 3c 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b526:	c7 44 24 20 52 25 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022552
c000b52e:	83 c4 18             	add    esp,0x18
c000b531:	5b                   	pop    ebx
c000b532:	e9 02 3c 00 00       	jmp    c000f139 <Dbg::kprintf(char const*, ...)>
c000b537:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b53c:	e9 88 fd ff ff       	jmp    c000b2c9 <Computer::displayFeatures()+0x27>
c000b541:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b546:	e9 50 fe ff ff       	jmp    c000b39b <Computer::displayFeatures()+0xf9>
c000b54b:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b550:	e9 23 fe ff ff       	jmp    c000b378 <Computer::displayFeatures()+0xd6>
c000b555:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b55a:	e9 f6 fd ff ff       	jmp    c000b355 <Computer::displayFeatures()+0xb3>
c000b55f:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b564:	e9 c9 fd ff ff       	jmp    c000b332 <Computer::displayFeatures()+0x90>
c000b569:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b56e:	e9 9c fd ff ff       	jmp    c000b30f <Computer::displayFeatures()+0x6d>
c000b573:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b578:	e9 6f fd ff ff       	jmp    c000b2ec <Computer::displayFeatures()+0x4a>
c000b57d:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b582:	e9 5a fe ff ff       	jmp    c000b3e1 <Computer::displayFeatures()+0x13f>
c000b587:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b58c:	eb 8a                	jmp    c000b518 <Computer::displayFeatures()+0x276>
c000b58e:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b593:	e9 61 ff ff ff       	jmp    c000b4f9 <Computer::displayFeatures()+0x257>
c000b598:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b59d:	e9 11 ff ff ff       	jmp    c000b4b3 <Computer::displayFeatures()+0x211>
c000b5a2:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b5a7:	e9 e4 fe ff ff       	jmp    c000b490 <Computer::displayFeatures()+0x1ee>
c000b5ac:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b5b1:	e9 b7 fe ff ff       	jmp    c000b46d <Computer::displayFeatures()+0x1cb>
c000b5b6:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b5bb:	e9 8a fe ff ff       	jmp    c000b44a <Computer::displayFeatures()+0x1a8>
c000b5c0:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b5c5:	e9 5d fe ff ff       	jmp    c000b427 <Computer::displayFeatures()+0x185>
c000b5ca:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b5cf:	e9 30 fe ff ff       	jmp    c000b404 <Computer::displayFeatures()+0x162>
c000b5d4:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b5d9:	e9 e0 fd ff ff       	jmp    c000b3be <Computer::displayFeatures()+0x11c>
c000b5de:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c000b5e3:	e9 ee fe ff ff       	jmp    c000b4d6 <Computer::displayFeatures()+0x234>

c000b5e8 <Computer::rdmsr(unsigned int)>:
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5f6:	74 0a                	je     c000b602 <Computer::rdmsr(unsigned int)+0x1a>
c000b5f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5fc:	0f 32                	rdmsr  
c000b5fe:	83 c4 0c             	add    esp,0xc
c000b601:	c3                   	ret    
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	68 3a 0f 02 c0       	push   0xc0020f3a
c000b60a:	e8 11 a3 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	eb e4                	jmp    c000b5f8 <Computer::rdmsr(unsigned int)+0x10>

c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b614:	57                   	push   edi
c000b615:	56                   	push   esi
c000b616:	52                   	push   edx
c000b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b61f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b623:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b62a:	74 0e                	je     c000b63a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b62c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b630:	89 f0                	mov    eax,esi
c000b632:	89 fa                	mov    edx,edi
c000b634:	0f 30                	wrmsr  
c000b636:	58                   	pop    eax
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	c3                   	ret    
c000b63a:	83 ec 0c             	sub    esp,0xc
c000b63d:	68 40 0f 02 c0       	push   0xc0020f40
c000b642:	e8 d9 a2 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000b647:	83 c4 10             	add    esp,0x10
c000b64a:	eb e0                	jmp    c000b62c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b64c <Computer::nmiEnabled()>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b656:	c3                   	ret    
c000b657:	90                   	nop

c000b658 <Computer::readCMOS(unsigned char)>:
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b663:	19 c0                	sbb    eax,eax
c000b665:	83 e0 80             	and    eax,0xffffff80
c000b668:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b66c:	e6 70                	out    0x70,al
c000b66e:	e4 71                	in     al,0x71
c000b670:	c3                   	ret    
c000b671:	90                   	nop

c000b672 <Computer::enableNMI(bool)>:
c000b672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b680:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b688:	eb ce                	jmp    c000b658 <Computer::readCMOS(unsigned char)>

c000b68a <Computer::open(int, int, void*)>:
c000b68a:	56                   	push   esi
c000b68b:	53                   	push   ebx
c000b68c:	83 ec 10             	sub    esp,0x10
c000b68f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b693:	f6 05 e0 43 02 c0 04 	test   BYTE PTR ds:0xc00243e0,0x4
c000b69a:	68 68 22 00 00       	push   0x2268
c000b69f:	0f 94 05 00 38 02 c0 	sete   BYTE PTR ds:0xc0023800
c000b6a6:	e8 9f 39 00 00       	call   c000f04a <operator new(unsigned long)>
c000b6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6ae:	89 c6                	mov    esi,eax
c000b6b0:	e8 51 86 00 00       	call   c0013d06 <ACPI::ACPI()>
c000b6b5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b6bb:	58                   	pop    eax
c000b6bc:	5a                   	pop    edx
c000b6bd:	56                   	push   esi
c000b6be:	53                   	push   ebx
c000b6bf:	e8 80 4e 00 00       	call   c0010544 <Device::addChild(Device*)>
c000b6c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6c7:	e8 fc f9 ff ff       	call   c000b0c8 <Computer::detectFeatures()>
c000b6cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6cf:	e8 ce fb ff ff       	call   c000b2a2 <Computer::displayFeatures()>
c000b6d4:	59                   	pop    ecx
c000b6d5:	5e                   	pop    esi
c000b6d6:	6a 01                	push   0x1
c000b6d8:	53                   	push   ebx
c000b6d9:	e8 94 ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b6de:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6e5:	e8 60 39 00 00       	call   c000f04a <operator new(unsigned long)>
c000b6ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6ed:	89 c6                	mov    esi,eax
c000b6ef:	e8 c0 90 00 00       	call   c00147b4 <CPU::CPU()>
c000b6f4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6fa:	58                   	pop    eax
c000b6fb:	5a                   	pop    edx
c000b6fc:	56                   	push   esi
c000b6fd:	53                   	push   ebx
c000b6fe:	e8 41 4e 00 00       	call   c0010544 <Device::addChild(Device*)>
c000b703:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b709:	8b 10                	mov    edx,DWORD PTR [eax]
c000b70b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b70f:	6a 00                	push   0x0
c000b711:	6a 00                	push   0x0
c000b713:	50                   	push   eax
c000b714:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b717:	83 c4 20             	add    esp,0x20
c000b71a:	e8 8d 53 00 00       	call   c0010aac <setupFPU()>
c000b71f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b725:	85 c0                	test   eax,eax
c000b727:	74 1f                	je     c000b748 <Computer::open(int, int, void*)+0xbe>
c000b729:	83 ec 08             	sub    esp,0x8
c000b72c:	50                   	push   eax
c000b72d:	53                   	push   ebx
c000b72e:	e8 11 4e 00 00       	call   c0010544 <Device::addChild(Device*)>
c000b733:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b739:	8b 10                	mov    edx,DWORD PTR [eax]
c000b73b:	6a 00                	push   0x0
c000b73d:	6a 00                	push   0x0
c000b73f:	6a 00                	push   0x0
c000b741:	50                   	push   eax
c000b742:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b745:	83 c4 20             	add    esp,0x20
c000b748:	83 ec 0c             	sub    esp,0xc
c000b74b:	68 ba b0 00 c0       	push   0xc000b0ba
c000b750:	e8 49 d3 00 00       	call   c0018a9e <setupMultitasking(void (*)())>
c000b755:	83 c4 14             	add    esp,0x14
c000b758:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b75d:	5b                   	pop    ebx
c000b75e:	5e                   	pop    esi
c000b75f:	c3                   	ret    

c000b760 <Computer::disableNMI()>:
c000b760:	6a 00                	push   0x0
c000b762:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b766:	e8 07 ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b76b:	58                   	pop    eax
c000b76c:	5a                   	pop    edx
c000b76d:	c3                   	ret    

c000b76e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b779:	19 c0                	sbb    eax,eax
c000b77b:	83 e0 80             	and    eax,0xffffff80
c000b77e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b782:	e6 70                	out    0x70,al
c000b784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b788:	e6 71                	out    0x71,al
c000b78a:	c3                   	ret    
c000b78b:	90                   	nop

c000b78c <Computer::handleNMI()>:
c000b78c:	56                   	push   esi
c000b78d:	53                   	push   ebx
c000b78e:	83 ec 10             	sub    esp,0x10
c000b791:	e4 92                	in     al,0x92
c000b793:	89 c6                	mov    esi,eax
c000b795:	e4 61                	in     al,0x61
c000b797:	68 46 0f 02 c0       	push   0xc0020f46
c000b79c:	88 c3                	mov    bl,al
c000b79e:	e8 96 39 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b7a3:	83 c4 10             	add    esp,0x10
c000b7a6:	83 e6 10             	and    esi,0x10
c000b7a9:	75 0d                	jne    c000b7b8 <Computer::handleNMI()+0x2c>
c000b7ab:	f6 c3 40             	test   bl,0x40
c000b7ae:	75 1d                	jne    c000b7cd <Computer::handleNMI()+0x41>
c000b7b0:	84 db                	test   bl,bl
c000b7b2:	78 2d                	js     c000b7e1 <Computer::handleNMI()+0x55>
c000b7b4:	58                   	pop    eax
c000b7b5:	5b                   	pop    ebx
c000b7b6:	5e                   	pop    esi
c000b7b7:	c3                   	ret    
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	68 57 0f 02 c0       	push   0xc0020f57
c000b7c0:	e8 5b a1 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000b7c5:	83 c4 10             	add    esp,0x10
c000b7c8:	f6 c3 40             	test   bl,0x40
c000b7cb:	74 e3                	je     c000b7b0 <Computer::handleNMI()+0x24>
c000b7cd:	83 ec 0c             	sub    esp,0xc
c000b7d0:	68 64 0f 02 c0       	push   0xc0020f64
c000b7d5:	e8 46 a1 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000b7da:	83 c4 10             	add    esp,0x10
c000b7dd:	84 db                	test   bl,bl
c000b7df:	79 d3                	jns    c000b7b4 <Computer::handleNMI()+0x28>
c000b7e1:	c7 44 24 10 6e 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f6e
c000b7e9:	5a                   	pop    edx
c000b7ea:	5b                   	pop    ebx
c000b7eb:	5e                   	pop    esi
c000b7ec:	e9 2f a1 00 00       	jmp    c0015920 <Krnl::panic(char const*)>
c000b7f1:	90                   	nop

c000b7f2 <Computer::setDiskActivityLight(int, bool)>:
c000b7f2:	56                   	push   esi
c000b7f3:	53                   	push   ebx
c000b7f4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7f8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7fd:	77 1b                	ja     c000b81a <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7ff:	e4 92                	in     al,0x92
c000b801:	bb 40 00 00 00       	mov    ebx,0x40
c000b806:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b80a:	89 da                	mov    edx,ebx
c000b80c:	d3 e2                	shl    edx,cl
c000b80e:	89 f1                	mov    ecx,esi
c000b810:	f7 d2                	not    edx
c000b812:	d3 e3                	shl    ebx,cl
c000b814:	21 d0                	and    eax,edx
c000b816:	09 d8                	or     eax,ebx
c000b818:	e6 92                	out    0x92,al
c000b81a:	5b                   	pop    ebx
c000b81b:	5e                   	pop    esi
c000b81c:	c3                   	ret    
c000b81d:	90                   	nop

c000b81e <GDTEntry::setBase(unsigned int)>:
c000b81e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b822:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b826:	89 c1                	mov    ecx,eax
c000b828:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b82c:	c1 e9 10             	shr    ecx,0x10
c000b82f:	c1 e8 18             	shr    eax,0x18
c000b832:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b835:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b838:	c3                   	ret    
c000b839:	90                   	nop

c000b83a <GDTEntry::setLimit(unsigned int)>:
c000b83a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b83e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b842:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b845:	66 89 01             	mov    WORD PTR [ecx],ax
c000b848:	83 e2 f0             	and    edx,0xfffffff0
c000b84b:	c1 e8 10             	shr    eax,0x10
c000b84e:	83 e0 0f             	and    eax,0xf
c000b851:	09 d0                	or     eax,edx
c000b853:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <GDT::GDT()>:
c000b858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b86c:	90                   	nop
c000b86d:	c3                   	ret    

c000b86e <GDT::addEntry(GDTEntry)>:
c000b86e:	53                   	push   ebx
c000b86f:	83 ec 0c             	sub    esp,0xc
c000b872:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b876:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b878:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b87f:	52                   	push   edx
c000b880:	50                   	push   eax
c000b881:	68 a8 0f 02 c0       	push   0xc0020fa8
c000b886:	e8 ae 38 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000b88b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b88d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b891:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b895:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b899:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b89d:	8d 50 01             	lea    edx,[eax+0x1]
c000b8a0:	c1 e0 03             	shl    eax,0x3
c000b8a3:	89 13                	mov    DWORD PTR [ebx],edx
c000b8a5:	83 c4 18             	add    esp,0x18
c000b8a8:	5b                   	pop    ebx
c000b8a9:	c3                   	ret    

c000b8aa <GDT::getNumberOfEntries()>:
c000b8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000b8b0:	c3                   	ret    
c000b8b1:	90                   	nop

c000b8b2 <GDT::flush()>:
c000b8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8b8:	83 c0 04             	add    eax,0x4
c000b8bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b8c2:	a3 d2 43 02 c0       	mov    ds:0xc00243d2,eax
c000b8c7:	66 89 15 d0 43 02 c0 	mov    WORD PTR ds:0xc00243d0,dx
c000b8ce:	e9 3e 4b ff ff       	jmp    c0000411 <loadGDT>
c000b8d3:	90                   	nop

c000b8d4 <GDT::setup()>:
c000b8d4:	55                   	push   ebp
c000b8d5:	57                   	push   edi
c000b8d6:	56                   	push   esi
c000b8d7:	53                   	push   ebx
c000b8d8:	83 ec 3c             	sub    esp,0x3c
c000b8db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b8df:	6a 00                	push   0x0
c000b8e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 33 ff ff ff       	call   c000b81e <GDTEntry::setBase(unsigned int)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	53                   	push   ebx
c000b8ee:	e8 47 ff ff ff       	call   c000b83a <GDTEntry::setLimit(unsigned int)>
c000b8f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b8fb:	6a 00                	push   0x0
c000b8fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b901:	53                   	push   ebx
c000b902:	e8 17 ff ff ff       	call   c000b81e <GDTEntry::setBase(unsigned int)>
c000b907:	68 ff ff ff 00       	push   0xffffff
c000b90c:	53                   	push   ebx
c000b90d:	e8 28 ff ff ff       	call   c000b83a <GDTEntry::setLimit(unsigned int)>
c000b912:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b916:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b91b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b920:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b924:	83 c4 20             	add    esp,0x20
c000b927:	6a 00                	push   0x0
c000b929:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b92d:	53                   	push   ebx
c000b92e:	e8 eb fe ff ff       	call   c000b81e <GDTEntry::setBase(unsigned int)>
c000b933:	68 ff ff ff 00       	push   0xffffff
c000b938:	53                   	push   ebx
c000b939:	e8 fc fe ff ff       	call   c000b83a <GDTEntry::setLimit(unsigned int)>
c000b93e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b942:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b946:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b94a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b94e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b952:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b957:	0d 00 92 c0 00       	or     eax,0xc09200
c000b95c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b960:	89 d8                	mov    eax,ebx
c000b962:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b966:	80 cc 60             	or     ah,0x60
c000b969:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b96d:	83 c4 0c             	add    esp,0xc
c000b970:	89 f8                	mov    eax,edi
c000b972:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b976:	80 cc 60             	or     ah,0x60
c000b979:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b97d:	89 c7                	mov    edi,eax
c000b97f:	55                   	push   ebp
c000b980:	e8 e9 fe ff ff       	call   c000b86e <GDT::addEntry(GDTEntry)>
c000b985:	83 c4 0c             	add    esp,0xc
c000b988:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b98c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b990:	55                   	push   ebp
c000b991:	e8 d8 fe ff ff       	call   c000b86e <GDT::addEntry(GDTEntry)>
c000b996:	83 c4 0c             	add    esp,0xc
c000b999:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b99d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b9a1:	55                   	push   ebp
c000b9a2:	e8 c7 fe ff ff       	call   c000b86e <GDT::addEntry(GDTEntry)>
c000b9a7:	83 c4 0c             	add    esp,0xc
c000b9aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b9ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9b2:	53                   	push   ebx
c000b9b3:	51                   	push   ecx
c000b9b4:	55                   	push   ebp
c000b9b5:	e8 b4 fe ff ff       	call   c000b86e <GDT::addEntry(GDTEntry)>
c000b9ba:	83 c4 0c             	add    esp,0xc
c000b9bd:	57                   	push   edi
c000b9be:	56                   	push   esi
c000b9bf:	55                   	push   ebp
c000b9c0:	e8 a9 fe ff ff       	call   c000b86e <GDT::addEntry(GDTEntry)>
c000b9c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b9c8:	e8 e5 fe ff ff       	call   c000b8b2 <GDT::flush()>
c000b9cd:	83 c4 4c             	add    esp,0x4c
c000b9d0:	5b                   	pop    ebx
c000b9d1:	5e                   	pop    esi
c000b9d2:	5f                   	pop    edi
c000b9d3:	5d                   	pop    ebp
c000b9d4:	c3                   	ret    

c000b9d5 <idleFunction(void*)>:
c000b9d5:	53                   	push   ebx
c000b9d6:	83 ec 08             	sub    esp,0x8
c000b9d9:	e8 98 ce 00 00       	call   c0018876 <unlockScheduler()>
c000b9de:	e8 bd 8d 00 00       	call   c00147a0 <thisCPU()>
c000b9e3:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b9ea:	74 41                	je     c000ba2d <idleFunction(void*)+0x58>
c000b9ec:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c000b9f1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b9f8:	74 33                	je     c000ba2d <idleFunction(void*)+0x58>
c000b9fa:	31 db                	xor    ebx,ebx
c000b9fc:	52                   	push   edx
c000b9fd:	52                   	push   edx
c000b9fe:	68 e1 00 00 00       	push   0xe1
c000ba03:	50                   	push   eax
c000ba04:	e8 df fb ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c000ba09:	53                   	push   ebx
c000ba0a:	83 e0 02             	and    eax,0x2
c000ba0d:	50                   	push   eax
c000ba0e:	68 e1 00 00 00       	push   0xe1
c000ba13:	ff 35 c8 43 02 c0    	push   DWORD PTR ds:0xc00243c8
c000ba19:	e8 f6 fb ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ba1e:	83 c4 20             	add    esp,0x20
c000ba21:	e8 08 48 ff ff       	call   c000022e <doTPAUSE>
c000ba26:	e8 95 3a 01 00       	call   c001f4c0 <idleCommon()>
c000ba2b:	eb f4                	jmp    c000ba21 <idleFunction(void*)+0x4c>
c000ba2d:	fb                   	sti    
c000ba2e:	f4                   	hlt    
c000ba2f:	e8 8c 3a 01 00       	call   c001f4c0 <idleCommon()>
c000ba34:	eb f7                	jmp    c000ba2d <idleFunction(void*)+0x58>

c000ba36 <IDTEntry::IDTEntry(bool)>:
c000ba36:	83 ec 04             	sub    esp,0x4
c000ba39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba3d:	88 04 24             	mov    BYTE PTR [esp],al
c000ba40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba44:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ba4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba4e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ba52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba56:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba59:	83 e2 f0             	and    edx,0xfffffff0
c000ba5c:	83 ca 0e             	or     edx,0xe
c000ba5f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba66:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba69:	83 e2 ef             	and    edx,0xffffffef
c000ba6c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba6f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba73:	74 04                	je     c000ba79 <IDTEntry::IDTEntry(bool)+0x43>
c000ba75:	b2 03                	mov    dl,0x3
c000ba77:	eb 02                	jmp    c000ba7b <IDTEntry::IDTEntry(bool)+0x45>
c000ba79:	b2 00                	mov    dl,0x0
c000ba7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba7f:	83 e2 03             	and    edx,0x3
c000ba82:	88 d1                	mov    cl,dl
c000ba84:	c1 e1 05             	shl    ecx,0x5
c000ba87:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba8a:	83 e2 9f             	and    edx,0xffffff9f
c000ba8d:	09 ca                	or     edx,ecx
c000ba8f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba96:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba99:	83 ca 80             	or     edx,0xffffff80
c000ba9c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba9f:	90                   	nop
c000baa0:	83 c4 04             	add    esp,0x4
c000baa3:	c3                   	ret    

c000baa4 <IDTEntry::setOffset(unsigned int)>:
c000baa4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000baa8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000baac:	66 89 02             	mov    WORD PTR [edx],ax
c000baaf:	c1 e8 10             	shr    eax,0x10
c000bab2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000bab6:	c3                   	ret    
c000bab7:	90                   	nop

c000bab8 <IDT::IDT()>:
c000bab8:	90                   	nop
c000bab9:	c3                   	ret    

c000baba <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000baba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000babe:	83 c0 30             	add    eax,0x30
c000bac1:	c3                   	ret    

c000bac2 <IDT::addEntry(IDTEntry, int)>:
c000bac2:	53                   	push   ebx
c000bac3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bac7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bacb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bacf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bad3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000bad6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000bada:	5b                   	pop    ebx
c000badb:	c3                   	ret    

c000badc <IDT::addEntry(int, void (*)(), bool)>:
c000badc:	53                   	push   ebx
c000badd:	83 ec 10             	sub    esp,0x10
c000bae0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000bae5:	50                   	push   eax
c000bae6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000baea:	53                   	push   ebx
c000baeb:	e8 46 ff ff ff       	call   c000ba36 <IDTEntry::IDTEntry(bool)>
c000baf0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000baf4:	53                   	push   ebx
c000baf5:	e8 aa ff ff ff       	call   c000baa4 <IDTEntry::setOffset(unsigned int)>
c000bafa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bafe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb0a:	e8 b3 ff ff ff       	call   c000bac2 <IDT::addEntry(IDTEntry, int)>
c000bb0f:	83 c4 30             	add    esp,0x30
c000bb12:	5b                   	pop    ebx
c000bb13:	c3                   	ret    

c000bb14 <IDT::flush()>:
c000bb14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb18:	66 c7 05 d8 43 02 c0 ff 07 	mov    WORD PTR ds:0xc00243d8,0x7ff
c000bb21:	a3 da 43 02 c0       	mov    ds:0xc00243da,eax
c000bb26:	0f 01 1d d8 43 02 c0 	lidtd  ds:0xc00243d8
c000bb2d:	c3                   	ret    

c000bb2e <IDT::setup()>:
c000bb2e:	57                   	push   edi
c000bb2f:	56                   	push   esi
c000bb30:	53                   	push   ebx
c000bb31:	83 ec 10             	sub    esp,0x10
c000bb34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bb38:	6a 00                	push   0x0
c000bb3a:	68 31 04 00 c0       	push   0xc0000431
c000bb3f:	6a 00                	push   0x0
c000bb41:	53                   	push   ebx
c000bb42:	e8 95 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bb47:	6a 00                	push   0x0
c000bb49:	68 41 04 00 c0       	push   0xc0000441
c000bb4e:	6a 01                	push   0x1
c000bb50:	53                   	push   ebx
c000bb51:	e8 86 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bb56:	83 c4 20             	add    esp,0x20
c000bb59:	6a 00                	push   0x0
c000bb5b:	68 4b 04 00 c0       	push   0xc000044b
c000bb60:	6a 02                	push   0x2
c000bb62:	53                   	push   ebx
c000bb63:	e8 74 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bb68:	6a 00                	push   0x0
c000bb6a:	68 55 04 00 c0       	push   0xc0000455
c000bb6f:	6a 03                	push   0x3
c000bb71:	53                   	push   ebx
c000bb72:	e8 65 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bb77:	83 c4 20             	add    esp,0x20
c000bb7a:	6a 00                	push   0x0
c000bb7c:	68 5f 04 00 c0       	push   0xc000045f
c000bb81:	6a 04                	push   0x4
c000bb83:	53                   	push   ebx
c000bb84:	e8 53 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bb89:	6a 00                	push   0x0
c000bb8b:	68 69 04 00 c0       	push   0xc0000469
c000bb90:	6a 05                	push   0x5
c000bb92:	53                   	push   ebx
c000bb93:	e8 44 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bb98:	83 c4 20             	add    esp,0x20
c000bb9b:	6a 00                	push   0x0
c000bb9d:	68 73 04 00 c0       	push   0xc0000473
c000bba2:	6a 06                	push   0x6
c000bba4:	53                   	push   ebx
c000bba5:	e8 32 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bbaa:	6a 00                	push   0x0
c000bbac:	68 7d 04 00 c0       	push   0xc000047d
c000bbb1:	6a 07                	push   0x7
c000bbb3:	53                   	push   ebx
c000bbb4:	e8 23 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bbb9:	83 c4 20             	add    esp,0x20
c000bbbc:	6a 00                	push   0x0
c000bbbe:	68 87 04 00 c0       	push   0xc0000487
c000bbc3:	6a 08                	push   0x8
c000bbc5:	53                   	push   ebx
c000bbc6:	e8 11 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bbcb:	6a 00                	push   0x0
c000bbcd:	68 8f 04 00 c0       	push   0xc000048f
c000bbd2:	6a 09                	push   0x9
c000bbd4:	53                   	push   ebx
c000bbd5:	e8 02 ff ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bbda:	83 c4 20             	add    esp,0x20
c000bbdd:	6a 00                	push   0x0
c000bbdf:	68 99 04 00 c0       	push   0xc0000499
c000bbe4:	6a 0a                	push   0xa
c000bbe6:	53                   	push   ebx
c000bbe7:	e8 f0 fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bbec:	6a 00                	push   0x0
c000bbee:	68 a1 04 00 c0       	push   0xc00004a1
c000bbf3:	6a 0b                	push   0xb
c000bbf5:	53                   	push   ebx
c000bbf6:	e8 e1 fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bbfb:	83 c4 20             	add    esp,0x20
c000bbfe:	6a 00                	push   0x0
c000bc00:	68 a9 04 00 c0       	push   0xc00004a9
c000bc05:	6a 0c                	push   0xc
c000bc07:	53                   	push   ebx
c000bc08:	e8 cf fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc0d:	6a 00                	push   0x0
c000bc0f:	68 b1 04 00 c0       	push   0xc00004b1
c000bc14:	6a 0d                	push   0xd
c000bc16:	53                   	push   ebx
c000bc17:	e8 c0 fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc1c:	83 c4 20             	add    esp,0x20
c000bc1f:	6a 00                	push   0x0
c000bc21:	68 b9 04 00 c0       	push   0xc00004b9
c000bc26:	6a 0e                	push   0xe
c000bc28:	53                   	push   ebx
c000bc29:	e8 ae fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc2e:	6a 00                	push   0x0
c000bc30:	68 c1 04 00 c0       	push   0xc00004c1
c000bc35:	6a 0f                	push   0xf
c000bc37:	53                   	push   ebx
c000bc38:	e8 9f fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc3d:	83 c4 20             	add    esp,0x20
c000bc40:	6a 00                	push   0x0
c000bc42:	68 cb 04 00 c0       	push   0xc00004cb
c000bc47:	6a 10                	push   0x10
c000bc49:	53                   	push   ebx
c000bc4a:	e8 8d fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc4f:	6a 00                	push   0x0
c000bc51:	68 d5 04 00 c0       	push   0xc00004d5
c000bc56:	6a 11                	push   0x11
c000bc58:	53                   	push   ebx
c000bc59:	e8 7e fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc5e:	83 c4 20             	add    esp,0x20
c000bc61:	6a 00                	push   0x0
c000bc63:	68 df 04 00 c0       	push   0xc00004df
c000bc68:	6a 12                	push   0x12
c000bc6a:	53                   	push   ebx
c000bc6b:	e8 6c fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc70:	6a 01                	push   0x1
c000bc72:	68 e9 04 00 c0       	push   0xc00004e9
c000bc77:	6a 60                	push   0x60
c000bc79:	53                   	push   ebx
c000bc7a:	e8 5d fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc7f:	83 c4 20             	add    esp,0x20
c000bc82:	6a 00                	push   0x0
c000bc84:	68 f3 04 00 c0       	push   0xc00004f3
c000bc89:	6a 20                	push   0x20
c000bc8b:	53                   	push   ebx
c000bc8c:	e8 4b fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bc91:	6a 00                	push   0x0
c000bc93:	68 fd 04 00 c0       	push   0xc00004fd
c000bc98:	6a 21                	push   0x21
c000bc9a:	53                   	push   ebx
c000bc9b:	e8 3c fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bca0:	83 c4 20             	add    esp,0x20
c000bca3:	6a 00                	push   0x0
c000bca5:	68 07 05 00 c0       	push   0xc0000507
c000bcaa:	6a 22                	push   0x22
c000bcac:	53                   	push   ebx
c000bcad:	e8 2a fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bcb2:	6a 00                	push   0x0
c000bcb4:	68 11 05 00 c0       	push   0xc0000511
c000bcb9:	6a 23                	push   0x23
c000bcbb:	53                   	push   ebx
c000bcbc:	e8 1b fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bcc1:	83 c4 20             	add    esp,0x20
c000bcc4:	6a 00                	push   0x0
c000bcc6:	68 1b 05 00 c0       	push   0xc000051b
c000bccb:	6a 24                	push   0x24
c000bccd:	53                   	push   ebx
c000bcce:	e8 09 fe ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bcd3:	6a 00                	push   0x0
c000bcd5:	68 25 05 00 c0       	push   0xc0000525
c000bcda:	6a 25                	push   0x25
c000bcdc:	53                   	push   ebx
c000bcdd:	e8 fa fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bce2:	83 c4 20             	add    esp,0x20
c000bce5:	6a 00                	push   0x0
c000bce7:	68 2f 05 00 c0       	push   0xc000052f
c000bcec:	6a 26                	push   0x26
c000bcee:	53                   	push   ebx
c000bcef:	e8 e8 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bcf4:	6a 00                	push   0x0
c000bcf6:	68 39 05 00 c0       	push   0xc0000539
c000bcfb:	6a 27                	push   0x27
c000bcfd:	53                   	push   ebx
c000bcfe:	e8 d9 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd03:	83 c4 20             	add    esp,0x20
c000bd06:	6a 00                	push   0x0
c000bd08:	68 43 05 00 c0       	push   0xc0000543
c000bd0d:	6a 28                	push   0x28
c000bd0f:	53                   	push   ebx
c000bd10:	e8 c7 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd15:	6a 00                	push   0x0
c000bd17:	68 4d 05 00 c0       	push   0xc000054d
c000bd1c:	6a 29                	push   0x29
c000bd1e:	53                   	push   ebx
c000bd1f:	e8 b8 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd24:	83 c4 20             	add    esp,0x20
c000bd27:	6a 00                	push   0x0
c000bd29:	68 57 05 00 c0       	push   0xc0000557
c000bd2e:	6a 2a                	push   0x2a
c000bd30:	53                   	push   ebx
c000bd31:	e8 a6 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd36:	6a 00                	push   0x0
c000bd38:	68 61 05 00 c0       	push   0xc0000561
c000bd3d:	6a 2b                	push   0x2b
c000bd3f:	53                   	push   ebx
c000bd40:	e8 97 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd45:	83 c4 20             	add    esp,0x20
c000bd48:	6a 00                	push   0x0
c000bd4a:	68 6b 05 00 c0       	push   0xc000056b
c000bd4f:	6a 2c                	push   0x2c
c000bd51:	53                   	push   ebx
c000bd52:	e8 85 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd57:	6a 00                	push   0x0
c000bd59:	68 75 05 00 c0       	push   0xc0000575
c000bd5e:	6a 2d                	push   0x2d
c000bd60:	53                   	push   ebx
c000bd61:	e8 76 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd66:	83 c4 20             	add    esp,0x20
c000bd69:	6a 00                	push   0x0
c000bd6b:	68 7f 05 00 c0       	push   0xc000057f
c000bd70:	6a 2e                	push   0x2e
c000bd72:	53                   	push   ebx
c000bd73:	e8 64 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd78:	6a 00                	push   0x0
c000bd7a:	68 89 05 00 c0       	push   0xc0000589
c000bd7f:	6a 2f                	push   0x2f
c000bd81:	53                   	push   ebx
c000bd82:	e8 55 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd87:	83 c4 20             	add    esp,0x20
c000bd8a:	6a 00                	push   0x0
c000bd8c:	68 93 05 00 c0       	push   0xc0000593
c000bd91:	6a 30                	push   0x30
c000bd93:	53                   	push   ebx
c000bd94:	e8 43 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bd99:	6a 00                	push   0x0
c000bd9b:	68 9d 05 00 c0       	push   0xc000059d
c000bda0:	6a 31                	push   0x31
c000bda2:	53                   	push   ebx
c000bda3:	e8 34 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bda8:	83 c4 20             	add    esp,0x20
c000bdab:	6a 00                	push   0x0
c000bdad:	68 a7 05 00 c0       	push   0xc00005a7
c000bdb2:	6a 32                	push   0x32
c000bdb4:	53                   	push   ebx
c000bdb5:	e8 22 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bdba:	6a 00                	push   0x0
c000bdbc:	68 b1 05 00 c0       	push   0xc00005b1
c000bdc1:	6a 33                	push   0x33
c000bdc3:	53                   	push   ebx
c000bdc4:	e8 13 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bdc9:	83 c4 20             	add    esp,0x20
c000bdcc:	6a 00                	push   0x0
c000bdce:	68 bb 05 00 c0       	push   0xc00005bb
c000bdd3:	6a 34                	push   0x34
c000bdd5:	53                   	push   ebx
c000bdd6:	e8 01 fd ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bddb:	6a 00                	push   0x0
c000bddd:	68 c5 05 00 c0       	push   0xc00005c5
c000bde2:	6a 35                	push   0x35
c000bde4:	53                   	push   ebx
c000bde5:	e8 f2 fc ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bdea:	83 c4 20             	add    esp,0x20
c000bded:	6a 00                	push   0x0
c000bdef:	68 cf 05 00 c0       	push   0xc00005cf
c000bdf4:	6a 36                	push   0x36
c000bdf6:	53                   	push   ebx
c000bdf7:	e8 e0 fc ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000bdfc:	6a 00                	push   0x0
c000bdfe:	68 d9 05 00 c0       	push   0xc00005d9
c000be03:	6a 37                	push   0x37
c000be05:	53                   	push   ebx
c000be06:	e8 d1 fc ff ff       	call   c000badc <IDT::addEntry(int, void (*)(), bool)>
c000be0b:	83 c4 20             	add    esp,0x20
c000be0e:	e8 e4 24 00 00       	call   c000e2f7 <Virt::getAKernelVAS()>
c000be13:	52                   	push   edx
c000be14:	6a 03                	push   0x3
c000be16:	6a 02                	push   0x2
c000be18:	50                   	push   eax
c000be19:	e8 1c 2b 00 00       	call   c000e93a <VAS::allocatePages(int, int)>
c000be1e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000be25:	89 c6                	mov    esi,eax
c000be27:	e8 1e 32 00 00       	call   c000f04a <operator new(unsigned long)>
c000be2c:	81 c6 00 20 00 00    	add    esi,0x2000
c000be32:	89 04 24             	mov    DWORD PTR [esp],eax
c000be35:	89 c7                	mov    edi,eax
c000be37:	e8 c0 1c 00 00       	call   c000dafc <TSS::TSS()>
c000be3c:	83 c4 0c             	add    esp,0xc
c000be3f:	68 87 04 00 c0       	push   0xc0000487
c000be44:	56                   	push   esi
c000be45:	57                   	push   edi
c000be46:	e8 f1 1c 00 00       	call   c000db3c <TSS::setup(unsigned long, unsigned long)>
c000be4b:	59                   	pop    ecx
c000be4c:	89 c6                	mov    esi,eax
c000be4e:	5f                   	pop    edi
c000be4f:	6a 00                	push   0x0
c000be51:	8d 44 24 14          	lea    eax,[esp+0x14]
c000be55:	50                   	push   eax
c000be56:	e8 db fb ff ff       	call   c000ba36 <IDTEntry::IDTEntry(bool)>
c000be5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be5f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be64:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be6b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be75:	80 ce 05             	or     dh,0x5
c000be78:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be83:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be89:	e8 86 fc ff ff       	call   c000bb14 <IDT::flush()>
c000be8e:	83 c4 20             	add    esp,0x20
c000be91:	5b                   	pop    ebx
c000be92:	5e                   	pop    esi
c000be93:	5f                   	pop    edi
c000be94:	c3                   	ret    

c000be95 <sbrk>:
c000be95:	55                   	push   ebp
c000be96:	57                   	push   edi
c000be97:	56                   	push   esi
c000be98:	53                   	push   ebx
c000be99:	83 ec 1c             	sub    esp,0x1c
c000be9c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bea0:	85 db                	test   ebx,ebx
c000bea2:	74 37                	je     c000bedb <sbrk+0x46>
c000bea4:	78 3f                	js     c000bee5 <sbrk+0x50>
c000bea6:	e8 f5 88 00 00       	call   c00147a0 <thisCPU()>
c000beab:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000beb1:	83 e0 01             	and    eax,0x1
c000beb4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000beb8:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c000bebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec1:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bec7:	89 d8                	mov    eax,ebx
c000bec9:	78 35                	js     c000bf00 <sbrk+0x6b>
c000becb:	c1 f8 0c             	sar    eax,0xc
c000bece:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bed2:	89 c7                	mov    edi,eax
c000bed4:	be 00 00 00 00       	mov    esi,0x0
c000bed9:	eb 3c                	jmp    c000bf17 <sbrk+0x82>
c000bedb:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c000bee0:	e9 ad 00 00 00       	jmp    c000bf92 <sbrk+0xfd>
c000bee5:	83 ec 08             	sub    esp,0x8
c000bee8:	53                   	push   ebx
c000bee9:	68 c4 0f 02 c0       	push   0xc0020fc4
c000beee:	e8 46 32 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000bef3:	83 c4 10             	add    esp,0x10
c000bef6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000befb:	e9 92 00 00 00       	jmp    c000bf92 <sbrk+0xfd>
c000bf00:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bf06:	eb c3                	jmp    c000becb <sbrk+0x36>
c000bf08:	81 05 ec 37 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00237ec,0x1000
c000bf12:	46                   	inc    esi
c000bf13:	39 f7                	cmp    edi,esi
c000bf15:	74 34                	je     c000bf4b <sbrk+0xb6>
c000bf17:	e8 db 23 00 00       	call   c000e2f7 <Virt::getAKernelVAS()>
c000bf1c:	89 c3                	mov    ebx,eax
c000bf1e:	8b 2d ec 37 02 c0    	mov    ebp,DWORD PTR ds:0xc00237ec
c000bf24:	e8 c9 06 00 00       	call   c000c5f2 <Phys::allocatePage()>
c000bf29:	68 01 04 00 00       	push   0x401
c000bf2e:	55                   	push   ebp
c000bf2f:	50                   	push   eax
c000bf30:	53                   	push   ebx
c000bf31:	e8 04 29 00 00       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf36:	83 c4 10             	add    esp,0x10
c000bf39:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf3e:	74 c8                	je     c000bf08 <sbrk+0x73>
c000bf40:	8b 1d ec 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237ec
c000bf46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf49:	eb bd                	jmp    c000bf08 <sbrk+0x73>
c000bf4b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf50:	74 48                	je     c000bf9a <sbrk+0x105>
c000bf52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bf56:	89 d3                	mov    ebx,edx
c000bf58:	c1 eb 0a             	shr    ebx,0xa
c000bf5b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf61:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf6b:	c1 e0 0c             	shl    eax,0xc
c000bf6e:	01 d0                	add    eax,edx
c000bf70:	c1 e8 0a             	shr    eax,0xa
c000bf73:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf78:	2d 00 00 40 00       	sub    eax,0x400000
c000bf7d:	39 c3                	cmp    ebx,eax
c000bf7f:	77 0d                	ja     c000bf8e <sbrk+0xf9>
c000bf81:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf84:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf8a:	39 d8                	cmp    eax,ebx
c000bf8c:	73 f3                	jae    c000bf81 <sbrk+0xec>
c000bf8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf92:	83 c4 1c             	add    esp,0x1c
c000bf95:	5b                   	pop    ebx
c000bf96:	5e                   	pop    esi
c000bf97:	5f                   	pop    edi
c000bf98:	5d                   	pop    ebp
c000bf99:	c3                   	ret    
c000bf9a:	e8 36 35 01 00       	call   c001f4d5 <CPU::readCR3()>
c000bf9f:	83 ec 0c             	sub    esp,0xc
c000bfa2:	50                   	push   eax
c000bfa3:	e8 3f 35 01 00       	call   c001f4e7 <CPU::writeCR3(unsigned long)>
c000bfa8:	83 c4 10             	add    esp,0x10
c000bfab:	eb e1                	jmp    c000bf8e <sbrk+0xf9>

c000bfad <mmap>:
c000bfad:	83 ec 18             	sub    esp,0x18
c000bfb0:	68 f4 0f 02 c0       	push   0xc0020ff4
c000bfb5:	e8 66 99 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000bfba:	b8 00 00 00 00       	mov    eax,0x0
c000bfbf:	83 c4 1c             	add    esp,0x1c
c000bfc2:	c3                   	ret    

c000bfc3 <munmap>:
c000bfc3:	83 ec 18             	sub    esp,0x18
c000bfc6:	68 f9 0f 02 c0       	push   0xc0020ff9
c000bfcb:	e8 50 99 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000bfd0:	b8 00 00 00 00       	mov    eax,0x0
c000bfd5:	83 c4 1c             	add    esp,0x1c
c000bfd8:	c3                   	ret    

c000bfd9 <liballoc_lock()>:
c000bfd9:	83 ec 0c             	sub    esp,0xc
c000bfdc:	e8 93 c8 00 00       	call   c0018874 <lockScheduler()>
c000bfe1:	b8 00 00 00 00       	mov    eax,0x0
c000bfe6:	83 c4 0c             	add    esp,0xc
c000bfe9:	c3                   	ret    

c000bfea <liballoc_unlock()>:
c000bfea:	83 ec 0c             	sub    esp,0xc
c000bfed:	e8 84 c8 00 00       	call   c0018876 <unlockScheduler()>
c000bff2:	b8 00 00 00 00       	mov    eax,0x0
c000bff7:	83 c4 0c             	add    esp,0xc
c000bffa:	c3                   	ret    

c000bffb <liballoc_alloc(int)>:
c000bffb:	83 ec 0c             	sub    esp,0xc
c000bffe:	e8 f4 22 00 00       	call   c000e2f7 <Virt::getAKernelVAS()>
c000c003:	83 ec 04             	sub    esp,0x4
c000c006:	6a 01                	push   0x1
c000c008:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c00c:	50                   	push   eax
c000c00d:	e8 28 29 00 00       	call   c000e93a <VAS::allocatePages(int, int)>
c000c012:	83 c4 1c             	add    esp,0x1c
c000c015:	c3                   	ret    

c000c016 <liballoc_free(void*, int)>:
c000c016:	83 ec 0c             	sub    esp,0xc
c000c019:	e8 d9 22 00 00       	call   c000e2f7 <Virt::getAKernelVAS()>
c000c01e:	83 ec 08             	sub    esp,0x8
c000c021:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c025:	50                   	push   eax
c000c026:	e8 b9 25 00 00       	call   c000e5e4 <VAS::freeAllocatedPages(unsigned long)>
c000c02b:	b8 00 00 00 00       	mov    eax,0x0
c000c030:	83 c4 1c             	add    esp,0x1c
c000c033:	c3                   	ret    

c000c034 <realloc>:
c000c034:	83 ec 14             	sub    esp,0x14
c000c037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c03b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c03f:	e8 1b 54 ff ff       	call   c000145f <dlrealloc>
c000c044:	83 c4 1c             	add    esp,0x1c
c000c047:	c3                   	ret    

c000c048 <malloc>:
c000c048:	83 ec 18             	sub    esp,0x18
c000c04b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04f:	e8 ce 4e ff ff       	call   c0000f22 <dlmalloc>
c000c054:	83 c4 1c             	add    esp,0x1c
c000c057:	c3                   	ret    

c000c058 <free>:
c000c058:	83 ec 18             	sub    esp,0x18
c000c05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c05f:	e8 63 4b ff ff       	call   c0000bc7 <dlfree>
c000c064:	83 c4 1c             	add    esp,0x1c
c000c067:	c3                   	ret    

c000c068 <rfree>:
c000c068:	83 ec 18             	sub    esp,0x18
c000c06b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c06f:	e8 e4 ff ff ff       	call   c000c058 <free>
c000c074:	83 c4 1c             	add    esp,0x1c
c000c077:	c3                   	ret    

c000c078 <calloc>:
c000c078:	56                   	push   esi
c000c079:	53                   	push   ebx
c000c07a:	83 ec 10             	sub    esp,0x10
c000c07d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c081:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c086:	53                   	push   ebx
c000c087:	e8 bc ff ff ff       	call   c000c048 <malloc>
c000c08c:	89 c6                	mov    esi,eax
c000c08e:	83 c4 0c             	add    esp,0xc
c000c091:	53                   	push   ebx
c000c092:	6a 00                	push   0x0
c000c094:	50                   	push   eax
c000c095:	e8 4c 46 ff ff       	call   c00006e6 <memset>
c000c09a:	89 f0                	mov    eax,esi
c000c09c:	83 c4 14             	add    esp,0x14
c000c09f:	5b                   	pop    ebx
c000c0a0:	5e                   	pop    esi
c000c0a1:	c3                   	ret    

c000c0a2 <hwTextMode_loadInData(VgaText*)>:
c000c0a2:	57                   	push   edi
c000c0a3:	56                   	push   esi
c000c0a4:	53                   	push   ebx
c000c0a5:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c0a9:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c0af:	85 c0                	test   eax,eax
c000c0b1:	7e 30                	jle    c000c0e3 <hwTextMode_loadInData(VgaText*)+0x41>
c000c0b3:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c0b6:	31 f6                	xor    esi,esi
c000c0b8:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c0bb:	31 c0                	xor    eax,eax
c000c0bd:	c1 e1 05             	shl    ecx,0x5
c000c0c0:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c0c6:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c0ca:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c0ce:	40                   	inc    eax
c000c0cf:	83 f8 50             	cmp    eax,0x50
c000c0d2:	75 f2                	jne    c000c0c6 <hwTextMode_loadInData(VgaText*)+0x24>
c000c0d4:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c0da:	46                   	inc    esi
c000c0db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c0e1:	7f d5                	jg     c000c0b8 <hwTextMode_loadInData(VgaText*)+0x16>
c000c0e3:	5b                   	pop    ebx
c000c0e4:	5e                   	pop    esi
c000c0e5:	5f                   	pop    edi
c000c0e6:	c3                   	ret    

c000c0e7 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c0e7:	56                   	push   esi
c000c0e8:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c0ed:	53                   	push   ebx
c000c0ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c0f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0f6:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c0fc:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c102:	c1 e0 04             	shl    eax,0x4
c000c105:	83 e6 0f             	and    esi,0xf
c000c108:	0f b6 c0             	movzx  eax,al
c000c10b:	41                   	inc    ecx
c000c10c:	09 f0                	or     eax,esi
c000c10e:	83 c2 02             	add    edx,0x2
c000c111:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c115:	c1 e0 08             	shl    eax,0x8
c000c118:	09 f0                	or     eax,esi
c000c11a:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c11e:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c124:	75 d0                	jne    c000c0f6 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c126:	5b                   	pop    ebx
c000c127:	5e                   	pop    esi
c000c128:	c3                   	ret    

c000c129 <hwTextMode_showCursor(VgaText*, bool)>:
c000c129:	56                   	push   esi
c000c12a:	53                   	push   ebx
c000c12b:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c130:	74 38                	je     c000c16a <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c132:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c137:	b0 0a                	mov    al,0xa
c000c139:	89 da                	mov    edx,ebx
c000c13b:	ee                   	out    dx,al
c000c13c:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c141:	89 ca                	mov    edx,ecx
c000c143:	ec                   	in     al,dx
c000c144:	b2 0f                	mov    dl,0xf
c000c146:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c14a:	83 e0 c0             	and    eax,0xffffffc0
c000c14d:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c153:	09 d0                	or     eax,edx
c000c155:	89 ca                	mov    edx,ecx
c000c157:	ee                   	out    dx,al
c000c158:	b0 0b                	mov    al,0xb
c000c15a:	89 da                	mov    edx,ebx
c000c15c:	ee                   	out    dx,al
c000c15d:	89 ca                	mov    edx,ecx
c000c15f:	ec                   	in     al,dx
c000c160:	83 e0 e0             	and    eax,0xffffffe0
c000c163:	83 c8 0f             	or     eax,0xf
c000c166:	ee                   	out    dx,al
c000c167:	5b                   	pop    ebx
c000c168:	5e                   	pop    esi
c000c169:	c3                   	ret    
c000c16a:	b0 0a                	mov    al,0xa
c000c16c:	ba d4 03 00 00       	mov    edx,0x3d4
c000c171:	ee                   	out    dx,al
c000c172:	b0 20                	mov    al,0x20
c000c174:	ba d5 03 00 00       	mov    edx,0x3d5
c000c179:	ee                   	out    dx,al
c000c17a:	5b                   	pop    ebx
c000c17b:	5e                   	pop    esi
c000c17c:	c3                   	ret    

c000c17d <hwTextMode_update(VgaText*)>:
c000c17d:	c3                   	ret    

c000c17e <hwTextMode_updateCursor(VgaText*)>:
c000c17e:	56                   	push   esi
c000c17f:	b9 19 00 00 00       	mov    ecx,0x19
c000c184:	53                   	push   ebx
c000c185:	be d4 03 00 00       	mov    esi,0x3d4
c000c18a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c18e:	89 f2                	mov    edx,esi
c000c190:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000c196:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000c19c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c19f:	c1 e1 04             	shl    ecx,0x4
c000c1a2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000c1a8:	b0 0f                	mov    al,0xf
c000c1aa:	ee                   	out    dx,al
c000c1ab:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c1b0:	88 c8                	mov    al,cl
c000c1b2:	89 da                	mov    edx,ebx
c000c1b4:	ee                   	out    dx,al
c000c1b5:	b0 0e                	mov    al,0xe
c000c1b7:	89 f2                	mov    edx,esi
c000c1b9:	ee                   	out    dx,al
c000c1ba:	89 c8                	mov    eax,ecx
c000c1bc:	89 da                	mov    edx,ebx
c000c1be:	66 c1 e8 08          	shr    ax,0x8
c000c1c2:	ee                   	out    dx,al
c000c1c3:	5b                   	pop    ebx
c000c1c4:	5e                   	pop    esi
c000c1c5:	c3                   	ret    

c000c1c6 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c1c6:	ba da 03 00 00       	mov    edx,0x3da
c000c1cb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c1d0:	75 18                	jne    c000c1ea <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c1d2:	ec                   	in     al,dx
c000c1d3:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1d8:	b0 30                	mov    al,0x30
c000c1da:	89 ca                	mov    edx,ecx
c000c1dc:	ee                   	out    dx,al
c000c1dd:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1e2:	ec                   	in     al,dx
c000c1e3:	83 c8 08             	or     eax,0x8
c000c1e6:	89 ca                	mov    edx,ecx
c000c1e8:	ee                   	out    dx,al
c000c1e9:	c3                   	ret    
c000c1ea:	ec                   	in     al,dx
c000c1eb:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1f0:	b0 30                	mov    al,0x30
c000c1f2:	89 ca                	mov    edx,ecx
c000c1f4:	ee                   	out    dx,al
c000c1f5:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1fa:	ec                   	in     al,dx
c000c1fb:	83 e0 f7             	and    eax,0xfffffff7
c000c1fe:	89 ca                	mov    edx,ecx
c000c200:	ee                   	out    dx,al
c000c201:	c3                   	ret    

c000c202 <hwTextMode_scrollScreen(VgaText*)>:
c000c202:	55                   	push   ebp
c000c203:	bd 02 00 00 00       	mov    ebp,0x2
c000c208:	57                   	push   edi
c000c209:	56                   	push   esi
c000c20a:	53                   	push   ebx
c000c20b:	83 ec 1c             	sub    esp,0x1c
c000c20e:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c216:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c21a:	31 c0                	xor    eax,eax
c000c21c:	eb 0b                	jmp    c000c229 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c21e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c224:	74 57                	je     c000c27d <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000c226:	43                   	inc    ebx
c000c227:	89 f0                	mov    eax,esi
c000c229:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c22f:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c235:	88 13                	mov    BYTE PTR [ebx],dl
c000c237:	8d 70 01             	lea    esi,[eax+0x1]
c000c23a:	83 fd 18             	cmp    ebp,0x18
c000c23d:	75 df                	jne    c000c21e <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c23f:	a8 01                	test   al,0x1
c000c241:	75 13                	jne    c000c256 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c243:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c246:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c24c:	75 d8                	jne    c000c226 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c24e:	83 c4 1c             	add    esp,0x1c
c000c251:	5b                   	pop    ebx
c000c252:	5e                   	pop    esi
c000c253:	5f                   	pop    edi
c000c254:	5d                   	pop    ebp
c000c255:	c3                   	ret    
c000c256:	83 ec 08             	sub    esp,0x8
c000c259:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c25d:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000c264:	50                   	push   eax
c000c265:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c269:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000c270:	50                   	push   eax
c000c271:	e8 66 0b 00 00       	call   c000cddc <VgaText::combineColours(unsigned char, unsigned char)>
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	88 07                	mov    BYTE PTR [edi],al
c000c27b:	eb c9                	jmp    c000c246 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c27d:	45                   	inc    ebp
c000c27e:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000c286:	eb 8e                	jmp    c000c216 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c288 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c288:	56                   	push   esi
c000c289:	53                   	push   ebx
c000c28a:	83 ec 0c             	sub    esp,0xc
c000c28d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c291:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c295:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c29a:	50                   	push   eax
c000c29b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c2a0:	50                   	push   eax
c000c2a1:	e8 36 0b 00 00       	call   c000cddc <VgaText::combineColours(unsigned char, unsigned char)>
c000c2a6:	5a                   	pop    edx
c000c2a7:	0f b6 c0             	movzx  eax,al
c000c2aa:	59                   	pop    ecx
c000c2ab:	50                   	push   eax
c000c2ac:	89 f0                	mov    eax,esi
c000c2ae:	0f be f0             	movsx  esi,al
c000c2b1:	56                   	push   esi
c000c2b2:	e8 cb 0b 00 00       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000c2b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c2bb:	ba 19 00 00 00       	mov    edx,0x19
c000c2c0:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000c2c6:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c2c9:	8d 14 92             	lea    edx,[edx+edx*4]
c000c2cc:	c1 e1 04             	shl    ecx,0x4
c000c2cf:	c1 e2 04             	shl    edx,0x4
c000c2d2:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000c2d6:	01 ca                	add    edx,ecx
c000c2d8:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c2e0:	83 c4 14             	add    esp,0x14
c000c2e3:	5b                   	pop    ebx
c000c2e4:	5e                   	pop    esi
c000c2e5:	c3                   	ret    

c000c2e6 <setupTextMode()>:
c000c2e6:	c7 05 78 44 02 c0 c6 c1 00 c0 	mov    DWORD PTR ds:0xc0024478,0xc000c1c6
c000c2f0:	c7 05 64 44 02 c0 a2 c0 00 c0 	mov    DWORD PTR ds:0xc0024464,0xc000c0a2
c000c2fa:	c7 05 60 44 02 c0 e7 c0 00 c0 	mov    DWORD PTR ds:0xc0024460,0xc000c0e7
c000c304:	c7 05 6c 44 02 c0 02 c2 00 c0 	mov    DWORD PTR ds:0xc002446c,0xc000c202
c000c30e:	c7 05 74 44 02 c0 29 c1 00 c0 	mov    DWORD PTR ds:0xc0024474,0xc000c129
c000c318:	c7 05 68 44 02 c0 7d c1 00 c0 	mov    DWORD PTR ds:0xc0024468,0xc000c17d
c000c322:	c7 05 70 44 02 c0 7e c1 00 c0 	mov    DWORD PTR ds:0xc0024470,0xc000c17e
c000c32c:	c7 05 7c 44 02 c0 88 c2 00 c0 	mov    DWORD PTR ds:0xc002447c,0xc000c288
c000c336:	c3                   	ret    

c000c337 <kernel_main>:
c000c337:	57                   	push   edi
c000c338:	bf f9 03 00 00       	mov    edi,0x3f9
c000c33d:	56                   	push   esi
c000c33e:	31 f6                	xor    esi,esi
c000c340:	53                   	push   ebx
c000c341:	83 ec 10             	sub    esp,0x10
c000c344:	e8 ed 08 00 00       	call   c000cc36 <installVgaTextImplementation()>
c000c349:	e8 98 ff ff ff       	call   c000c2e6 <setupTextMode()>
c000c34e:	89 f0                	mov    eax,esi
c000c350:	89 fa                	mov    edx,edi
c000c352:	ee                   	out    dx,al
c000c353:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c358:	b0 80                	mov    al,0x80
c000c35a:	89 da                	mov    edx,ebx
c000c35c:	ee                   	out    dx,al
c000c35d:	b1 03                	mov    cl,0x3
c000c35f:	ba f8 03 00 00       	mov    edx,0x3f8
c000c364:	88 c8                	mov    al,cl
c000c366:	ee                   	out    dx,al
c000c367:	89 f0                	mov    eax,esi
c000c369:	89 fa                	mov    edx,edi
c000c36b:	ee                   	out    dx,al
c000c36c:	88 c8                	mov    al,cl
c000c36e:	89 da                	mov    edx,ebx
c000c370:	ee                   	out    dx,al
c000c371:	b0 c7                	mov    al,0xc7
c000c373:	ba fa 03 00 00       	mov    edx,0x3fa
c000c378:	ee                   	out    dx,al
c000c379:	b0 0b                	mov    al,0xb
c000c37b:	ba fc 03 00 00       	mov    edx,0x3fc
c000c380:	ee                   	out    dx,al
c000c381:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c386:	83 ec 0c             	sub    esp,0xc
c000c389:	05 ff 0f 00 00       	add    eax,0xfff
c000c38e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c393:	50                   	push   eax
c000c394:	e8 59 03 00 00       	call   c000c6f2 <Phys::physicalMemorySetup(unsigned int)>
c000c399:	e8 da 1e 00 00       	call   c000e278 <Virt::virtualMemorySetup()>
c000c39e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c3a4:	83 c4 10             	add    esp,0x10
c000c3a7:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c3ad:	75 0e                	jne    c000c3bd <kernel_main+0x86>
c000c3af:	89 d8                	mov    eax,ebx
c000c3b1:	25 48 03 00 00       	and    eax,0x348
c000c3b6:	3d 00 03 00 00       	cmp    eax,0x300
c000c3bb:	74 10                	je     c000c3cd <kernel_main+0x96>
c000c3bd:	83 ec 0c             	sub    esp,0xc
c000c3c0:	68 53 25 02 c0       	push   0xc0022553
c000c3c5:	e8 56 95 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000c3ca:	83 c4 10             	add    esp,0x10
c000c3cd:	83 ec 0c             	sub    esp,0xc
c000c3d0:	89 1d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,ebx
c000c3d6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c3da:	53                   	push   ebx
c000c3db:	e8 42 20 00 00       	call   c000e422 <VAS::VAS()>
c000c3e0:	89 1d 24 45 02 c0    	mov    DWORD PTR ds:0xc0024524,ebx
c000c3e6:	e8 35 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3eb:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3f2:	e8 53 2c 00 00       	call   c000f04a <operator new(unsigned long)>
c000c3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3fa:	89 c6                	mov    esi,eax
c000c3fc:	e8 7f ea ff ff       	call   c000ae80 <Computer::Computer()>
c000c401:	6a 00                	push   0x0
c000c403:	89 35 c8 43 02 c0    	mov    DWORD PTR ds:0xc00243c8,esi
c000c409:	6a 00                	push   0x0
c000c40b:	6a 00                	push   0x0
c000c40d:	56                   	push   esi
c000c40e:	e8 77 f2 ff ff       	call   c000b68a <Computer::open(int, int, void*)>
c000c413:	83 c4 14             	add    esp,0x14
c000c416:	53                   	push   ebx
c000c417:	e8 b2 22 00 00       	call   c000e6ce <VAS::~VAS()>
c000c41c:	c7 04 24 00 10 02 c0 	mov    DWORD PTR [esp],0xc0021000
c000c423:	e8 f8 94 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000c428:	83 c4 20             	add    esp,0x20
c000c42b:	5b                   	pop    ebx
c000c42c:	5e                   	pop    esi
c000c42d:	5f                   	pop    edi
c000c42e:	c3                   	ret    

c000c42f <Phys::allocateDMA(unsigned long)>:
c000c42f:	55                   	push   ebp
c000c430:	31 d2                	xor    edx,edx
c000c432:	57                   	push   edi
c000c433:	31 ed                	xor    ebp,ebp
c000c435:	56                   	push   esi
c000c436:	31 c9                	xor    ecx,ecx
c000c438:	53                   	push   ebx
c000c439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c43d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c443:	31 c0                	xor    eax,eax
c000c445:	c1 ee 0c             	shr    esi,0xc
c000c448:	eb 17                	jmp    c000c461 <Phys::allocateDMA(unsigned long)+0x32>
c000c44a:	85 c9                	test   ecx,ecx
c000c44c:	75 04                	jne    c000c452 <Phys::allocateDMA(unsigned long)+0x23>
c000c44e:	89 d5                	mov    ebp,edx
c000c450:	89 d0                	mov    eax,edx
c000c452:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c455:	39 de                	cmp    esi,ebx
c000c457:	74 20                	je     c000c479 <Phys::allocateDMA(unsigned long)+0x4a>
c000c459:	42                   	inc    edx
c000c45a:	89 d9                	mov    ecx,ebx
c000c45c:	83 fa 2f             	cmp    edx,0x2f
c000c45f:	7f 11                	jg     c000c472 <Phys::allocateDMA(unsigned long)+0x43>
c000c461:	80 ba 20 44 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdbbe0],0x0
c000c468:	74 e0                	je     c000c44a <Phys::allocateDMA(unsigned long)+0x1b>
c000c46a:	31 c9                	xor    ecx,ecx
c000c46c:	42                   	inc    edx
c000c46d:	83 fa 2f             	cmp    edx,0x2f
c000c470:	7e ef                	jle    c000c461 <Phys::allocateDMA(unsigned long)+0x32>
c000c472:	5b                   	pop    ebx
c000c473:	31 c0                	xor    eax,eax
c000c475:	5e                   	pop    esi
c000c476:	5f                   	pop    edi
c000c477:	5d                   	pop    ebp
c000c478:	c3                   	ret    
c000c479:	8d 14 30             	lea    edx,[eax+esi*1]
c000c47c:	89 d7                	mov    edi,edx
c000c47e:	4f                   	dec    edi
c000c47f:	79 03                	jns    c000c484 <Phys::allocateDMA(unsigned long)+0x55>
c000c481:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c484:	c1 ff 04             	sar    edi,0x4
c000c487:	89 c2                	mov    edx,eax
c000c489:	c1 fa 04             	sar    edx,0x4
c000c48c:	39 fa                	cmp    edx,edi
c000c48e:	75 2f                	jne    c000c4bf <Phys::allocateDMA(unsigned long)+0x90>
c000c490:	85 db                	test   ebx,ebx
c000c492:	74 1a                	je     c000c4ae <Phys::allocateDMA(unsigned long)+0x7f>
c000c494:	be 20 44 02 c0       	mov    esi,0xc0024420
c000c499:	8d 90 20 44 02 c0    	lea    edx,[eax-0x3ffdbbe0]
c000c49f:	f7 d6                	not    esi
c000c4a1:	29 c6                	sub    esi,eax
c000c4a3:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c4a6:	42                   	inc    edx
c000c4a7:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c4aa:	39 d9                	cmp    ecx,ebx
c000c4ac:	7f f5                	jg     c000c4a3 <Phys::allocateDMA(unsigned long)+0x74>
c000c4ae:	85 ff                	test   edi,edi
c000c4b0:	74 13                	je     c000c4c5 <Phys::allocateDMA(unsigned long)+0x96>
c000c4b2:	5b                   	pop    ebx
c000c4b3:	05 50 20 0c 00       	add    eax,0xc2050
c000c4b8:	5e                   	pop    esi
c000c4b9:	c1 e0 0c             	shl    eax,0xc
c000c4bc:	5f                   	pop    edi
c000c4bd:	5d                   	pop    ebp
c000c4be:	c3                   	ret    
c000c4bf:	89 ea                	mov    edx,ebp
c000c4c1:	31 c9                	xor    ecx,ecx
c000c4c3:	eb a7                	jmp    c000c46c <Phys::allocateDMA(unsigned long)+0x3d>
c000c4c5:	5b                   	pop    ebx
c000c4c6:	c1 e0 0c             	shl    eax,0xc
c000c4c9:	5e                   	pop    esi
c000c4ca:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c4cf:	5f                   	pop    edi
c000c4d0:	5d                   	pop    ebp
c000c4d1:	c3                   	ret    

c000c4d2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c4d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4da:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4e0:	c1 e9 0c             	shr    ecx,0xc
c000c4e3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4e8:	76 25                	jbe    c000c50f <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4ea:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4ef:	c1 e8 0c             	shr    eax,0xc
c000c4f2:	8d 50 10             	lea    edx,[eax+0x10]
c000c4f5:	85 c9                	test   ecx,ecx
c000c4f7:	74 15                	je     c000c50e <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4f9:	8d 82 20 44 02 c0    	lea    eax,[edx-0x3ffdbbe0]
c000c4ff:	8d 94 11 20 44 02 c0 	lea    edx,[ecx+edx*1-0x3ffdbbe0]
c000c506:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c509:	40                   	inc    eax
c000c50a:	39 d0                	cmp    eax,edx
c000c50c:	75 f8                	jne    c000c506 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c50e:	c3                   	ret    
c000c50f:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c515:	c1 ea 0c             	shr    edx,0xc
c000c518:	eb db                	jmp    c000c4f5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c51a <Phys::setPageState(unsigned long, bool)>:
c000c51a:	56                   	push   esi
c000c51b:	ba 01 00 00 00       	mov    edx,0x1
c000c520:	53                   	push   ebx
c000c521:	8b 35 f0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237f0
c000c527:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c52b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c52f:	89 c8                	mov    eax,ecx
c000c531:	83 e1 07             	and    ecx,0x7
c000c534:	c1 e8 03             	shr    eax,0x3
c000c537:	d3 e3                	shl    ebx,cl
c000c539:	01 c6                	add    esi,eax
c000c53b:	d3 e2                	shl    edx,cl
c000c53d:	f7 d2                	not    edx
c000c53f:	20 16                	and    BYTE PTR [esi],dl
c000c541:	03 05 f0 37 02 c0    	add    eax,DWORD PTR ds:0xc00237f0
c000c547:	08 18                	or     BYTE PTR [eax],bl
c000c549:	5b                   	pop    ebx
c000c54a:	5e                   	pop    esi
c000c54b:	c3                   	ret    

c000c54c <Phys::getPageState(unsigned long)>:
c000c54c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c550:	8b 15 f0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237f0
c000c556:	89 c8                	mov    eax,ecx
c000c558:	83 e1 07             	and    ecx,0x7
c000c55b:	c1 e8 03             	shr    eax,0x3
c000c55e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c562:	d3 f8                	sar    eax,cl
c000c564:	83 e0 01             	and    eax,0x1
c000c567:	c3                   	ret    

c000c568 <Phys::freePage(unsigned long)>:
c000c568:	53                   	push   ebx
c000c569:	83 ec 08             	sub    esp,0x8
c000c56c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c570:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c576:	76 57                	jbe    c000c5cf <Phys::freePage(unsigned long)+0x67>
c000c578:	c1 eb 0c             	shr    ebx,0xc
c000c57b:	53                   	push   ebx
c000c57c:	e8 cb ff ff ff       	call   c000c54c <Phys::getPageState(unsigned long)>
c000c581:	5a                   	pop    edx
c000c582:	84 c0                	test   al,al
c000c584:	74 5b                	je     c000c5e1 <Phys::freePage(unsigned long)+0x79>
c000c586:	a1 0c 44 02 c0       	mov    eax,ds:0xc002440c
c000c58b:	48                   	dec    eax
c000c58c:	a3 0c 44 02 c0       	mov    ds:0xc002440c,eax
c000c591:	8d 04 80             	lea    eax,[eax+eax*4]
c000c594:	8d 04 80             	lea    eax,[eax+eax*4]
c000c597:	c1 e0 02             	shl    eax,0x2
c000c59a:	99                   	cdq    
c000c59b:	f7 3d 10 44 02 c0    	idiv   DWORD PTR ds:0xc0024410
c000c5a1:	39 05 08 44 02 c0    	cmp    DWORD PTR ds:0xc0024408,eax
c000c5a7:	75 13                	jne    c000c5bc <Phys::freePage(unsigned long)+0x54>
c000c5a9:	83 ec 08             	sub    esp,0x8
c000c5ac:	6a 00                	push   0x0
c000c5ae:	53                   	push   ebx
c000c5af:	e8 66 ff ff ff       	call   c000c51a <Phys::setPageState(unsigned long, bool)>
c000c5b4:	83 c4 10             	add    esp,0x10
c000c5b7:	83 c4 08             	add    esp,0x8
c000c5ba:	5b                   	pop    ebx
c000c5bb:	c3                   	ret    
c000c5bc:	83 ec 0c             	sub    esp,0xc
c000c5bf:	a3 08 44 02 c0       	mov    ds:0xc0024408,eax
c000c5c4:	50                   	push   eax
c000c5c5:	e8 00 0a 00 00       	call   c000cfca <VgaText::updateRAMUsageDisplay(int)>
c000c5ca:	83 c4 10             	add    esp,0x10
c000c5cd:	eb da                	jmp    c000c5a9 <Phys::freePage(unsigned long)+0x41>
c000c5cf:	68 00 10 00 00       	push   0x1000
c000c5d4:	53                   	push   ebx
c000c5d5:	e8 f8 fe ff ff       	call   c000c4d2 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5da:	59                   	pop    ecx
c000c5db:	5b                   	pop    ebx
c000c5dc:	83 c4 08             	add    esp,0x8
c000c5df:	5b                   	pop    ebx
c000c5e0:	c3                   	ret    
c000c5e1:	c7 44 24 10 1b 10 02 c0 	mov    DWORD PTR [esp+0x10],0xc002101b
c000c5e9:	83 c4 08             	add    esp,0x8
c000c5ec:	5b                   	pop    ebx
c000c5ed:	e9 2e 93 00 00       	jmp    c0015920 <Krnl::panic(char const*)>

c000c5f2 <Phys::allocatePage()>:
c000c5f2:	56                   	push   esi
c000c5f3:	53                   	push   ebx
c000c5f4:	51                   	push   ecx
c000c5f5:	8b 35 00 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024400
c000c5fb:	89 f3                	mov    ebx,esi
c000c5fd:	eb 0a                	jmp    c000c609 <Phys::allocatePage()+0x17>
c000c5ff:	89 1d 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,ebx
c000c605:	39 de                	cmp    esi,ebx
c000c607:	74 24                	je     c000c62d <Phys::allocatePage()+0x3b>
c000c609:	53                   	push   ebx
c000c60a:	e8 3d ff ff ff       	call   c000c54c <Phys::getPageState(unsigned long)>
c000c60f:	5a                   	pop    edx
c000c610:	84 c0                	test   al,al
c000c612:	74 5a                	je     c000c66e <Phys::allocatePage()+0x7c>
c000c614:	43                   	inc    ebx
c000c615:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c61b:	75 e2                	jne    c000c5ff <Phys::allocatePage()+0xd>
c000c61d:	31 db                	xor    ebx,ebx
c000c61f:	c7 05 00 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024400,0x0
c000c629:	39 de                	cmp    esi,ebx
c000c62b:	75 dc                	jne    c000c609 <Phys::allocatePage()+0x17>
c000c62d:	83 ec 0c             	sub    esp,0xc
c000c630:	68 31 10 02 c0       	push   0xc0021031
c000c635:	e8 ff 2a 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000c63a:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c641:	e8 e9 fd ff ff       	call   c000c42f <Phys::allocateDMA(unsigned long)>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	85 c0                	test   eax,eax
c000c64b:	75 56                	jne    c000c6a3 <Phys::allocatePage()+0xb1>
c000c64d:	83 ec 0c             	sub    esp,0xc
c000c650:	68 42 10 02 c0       	push   0xc0021042
c000c655:	e8 c6 92 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000c65a:	83 c4 10             	add    esp,0x10
c000c65d:	8b 1d 00 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024400
c000c663:	53                   	push   ebx
c000c664:	e8 e3 fe ff ff       	call   c000c54c <Phys::getPageState(unsigned long)>
c000c669:	5a                   	pop    edx
c000c66a:	84 c0                	test   al,al
c000c66c:	75 a6                	jne    c000c614 <Phys::allocatePage()+0x22>
c000c66e:	6a 01                	push   0x1
c000c670:	53                   	push   ebx
c000c671:	e8 a4 fe ff ff       	call   c000c51a <Phys::setPageState(unsigned long, bool)>
c000c676:	a1 0c 44 02 c0       	mov    eax,ds:0xc002440c
c000c67b:	59                   	pop    ecx
c000c67c:	40                   	inc    eax
c000c67d:	5b                   	pop    ebx
c000c67e:	a3 0c 44 02 c0       	mov    ds:0xc002440c,eax
c000c683:	8d 04 80             	lea    eax,[eax+eax*4]
c000c686:	8d 04 80             	lea    eax,[eax+eax*4]
c000c689:	c1 e0 02             	shl    eax,0x2
c000c68c:	99                   	cdq    
c000c68d:	f7 3d 10 44 02 c0    	idiv   DWORD PTR ds:0xc0024410
c000c693:	39 05 08 44 02 c0    	cmp    DWORD PTR ds:0xc0024408,eax
c000c699:	75 0c                	jne    c000c6a7 <Phys::allocatePage()+0xb5>
c000c69b:	a1 00 44 02 c0       	mov    eax,ds:0xc0024400
c000c6a0:	c1 e0 0c             	shl    eax,0xc
c000c6a3:	5a                   	pop    edx
c000c6a4:	5b                   	pop    ebx
c000c6a5:	5e                   	pop    esi
c000c6a6:	c3                   	ret    
c000c6a7:	83 ec 0c             	sub    esp,0xc
c000c6aa:	a3 08 44 02 c0       	mov    ds:0xc0024408,eax
c000c6af:	50                   	push   eax
c000c6b0:	e8 15 09 00 00       	call   c000cfca <VgaText::updateRAMUsageDisplay(int)>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	eb e1                	jmp    c000c69b <Phys::allocatePage()+0xa9>

c000c6ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c6ba:	56                   	push   esi
c000c6bb:	53                   	push   ebx
c000c6bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c6c0:	39 1d 04 44 02 c0    	cmp    DWORD PTR ds:0xc0024404,ebx
c000c6c6:	73 06                	jae    c000c6ce <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c6c8:	89 1d 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,ebx
c000c6ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6d2:	c1 eb 0c             	shr    ebx,0xc
c000c6d5:	c1 e8 0c             	shr    eax,0xc
c000c6d8:	39 d8                	cmp    eax,ebx
c000c6da:	73 13                	jae    c000c6ef <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6dc:	6a 00                	push   0x0
c000c6de:	8d 70 01             	lea    esi,[eax+0x1]
c000c6e1:	50                   	push   eax
c000c6e2:	e8 33 fe ff ff       	call   c000c51a <Phys::setPageState(unsigned long, bool)>
c000c6e7:	5a                   	pop    edx
c000c6e8:	89 f0                	mov    eax,esi
c000c6ea:	59                   	pop    ecx
c000c6eb:	39 f3                	cmp    ebx,esi
c000c6ed:	75 ed                	jne    c000c6dc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6ef:	5b                   	pop    ebx
c000c6f0:	5e                   	pop    esi
c000c6f1:	c3                   	ret    

c000c6f2 <Phys::physicalMemorySetup(unsigned int)>:
c000c6f2:	55                   	push   ebp
c000c6f3:	57                   	push   edi
c000c6f4:	56                   	push   esi
c000c6f5:	53                   	push   ebx
c000c6f6:	31 db                	xor    ebx,ebx
c000c6f8:	83 ec 40             	sub    esp,0x40
c000c6fb:	6a 30                	push   0x30
c000c6fd:	6a 00                	push   0x0
c000c6ff:	68 20 44 02 c0       	push   0xc0024420
c000c704:	e8 dd 3f ff ff       	call   c00006e6 <memset>
c000c709:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c70d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c712:	05 00 10 00 00       	add    eax,0x1000
c000c717:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c71b:	83 c4 10             	add    esp,0x10
c000c71e:	83 ec 08             	sub    esp,0x8
c000c721:	6a 01                	push   0x1
c000c723:	53                   	push   ebx
c000c724:	43                   	inc    ebx
c000c725:	e8 f0 fd ff ff       	call   c000c51a <Phys::setPageState(unsigned long, bool)>
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c733:	75 e9                	jne    c000c71e <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c735:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c73c:	66 85 c0             	test   ax,ax
c000c73f:	0f 84 8e 01 00 00    	je     c000c8d3 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000c745:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c749:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c751:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c755:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c75a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c75e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c766:	eb 15                	jmp    c000c77d <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c768:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c76c:	83 c3 18             	add    ebx,0x18
c000c76f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c773:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c777:	0f 84 66 01 00 00    	je     c000c8e3 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c77d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c780:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c783:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c786:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c78a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c78e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c790:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c793:	01 f0                	add    eax,esi
c000c795:	55                   	push   ebp
c000c796:	11 fa                	adc    edx,edi
c000c798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c79c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c7a4:	56                   	push   esi
c000c7a5:	68 7c 10 02 c0       	push   0xc002107c
c000c7aa:	e8 8a 29 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000c7af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7b3:	83 c4 10             	add    esp,0x10
c000c7b6:	09 f8                	or     eax,edi
c000c7b8:	0f 85 25 01 00 00    	jne    c000c8e3 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c7be:	4d                   	dec    ebp
c000c7bf:	75 a7                	jne    c000c768 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c7c1:	ba 00 00 08 00       	mov    edx,0x80000
c000c7c6:	89 c1                	mov    ecx,eax
c000c7c8:	39 f2                	cmp    edx,esi
c000c7ca:	19 f9                	sbb    ecx,edi
c000c7cc:	0f 82 a7 00 00 00    	jb     c000c879 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c7d2:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c7d6:	89 c1                	mov    ecx,eax
c000c7d8:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c7dc:	0f 83 97 00 00 00    	jae    c000c879 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c7e2:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c7e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7eb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c7ef:	39 fa                	cmp    edx,edi
c000c7f1:	19 e8                	sbb    eax,ebp
c000c7f3:	0f 82 14 01 00 00    	jb     c000c90d <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000c7f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c7fd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c801:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000c807:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c80c:	83 d5 ff             	adc    ebp,0xffffffff
c000c80f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c813:	31 c0                	xor    eax,eax
c000c815:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c819:	39 fa                	cmp    edx,edi
c000c81b:	89 c1                	mov    ecx,eax
c000c81d:	19 e9                	sbb    ecx,ebp
c000c81f:	0f 83 43 ff ff ff    	jae    c000c768 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c825:	be 00 00 08 00       	mov    esi,0x80000
c000c82a:	50                   	push   eax
c000c82b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c82f:	57                   	push   edi
c000c830:	56                   	push   esi
c000c831:	68 a0 10 02 c0       	push   0xc00210a0
c000c836:	e8 fe 28 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000c83b:	5a                   	pop    edx
c000c83c:	59                   	pop    ecx
c000c83d:	57                   	push   edi
c000c83e:	56                   	push   esi
c000c83f:	e8 76 fe ff ff       	call   c000c6ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c844:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c848:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c84c:	83 c4 0c             	add    esp,0xc
c000c84f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c853:	03 05 10 44 02 c0    	add    eax,DWORD PTR ds:0xc0024410
c000c859:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c860:	a3 10 44 02 c0       	mov    ds:0xc0024410,eax
c000c865:	52                   	push   edx
c000c866:	50                   	push   eax
c000c867:	68 5e 10 02 c0       	push   0xc002105e
c000c86c:	e8 c8 28 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000c871:	83 c4 10             	add    esp,0x10
c000c874:	e9 ef fe ff ff       	jmp    c000c768 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c879:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c87d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c881:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c885:	39 ea                	cmp    edx,ebp
c000c887:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c88b:	0f 82 d7 fe ff ff    	jb     c000c768 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c891:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c896:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000c89a:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000c89e:	0f 83 c4 fe ff ff    	jae    c000c768 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c8a4:	39 ee                	cmp    esi,ebp
c000c8a6:	89 f8                	mov    eax,edi
c000c8a8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000c8ac:	0f 83 78 ff ff ff    	jae    c000c82a <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c8b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8ba:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c8be:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c8c2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000c8c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8ce:	e9 57 ff ff ff       	jmp    c000c82a <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c8d3:	83 ec 0c             	sub    esp,0xc
c000c8d6:	68 50 10 02 c0       	push   0xc0021050
c000c8db:	e8 40 90 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000c8e0:	83 c4 10             	add    esp,0x10
c000c8e3:	bb 40 01 00 00       	mov    ebx,0x140
c000c8e8:	83 ec 08             	sub    esp,0x8
c000c8eb:	6a 00                	push   0x0
c000c8ed:	53                   	push   ebx
c000c8ee:	43                   	inc    ebx
c000c8ef:	e8 26 fc ff ff       	call   c000c51a <Phys::setPageState(unsigned long, bool)>
c000c8f4:	ff 05 10 44 02 c0    	inc    DWORD PTR ds:0xc0024410
c000c8fa:	83 c4 10             	add    esp,0x10
c000c8fd:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c903:	75 e3                	jne    c000c8e8 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000c905:	83 c4 3c             	add    esp,0x3c
c000c908:	5b                   	pop    ebx
c000c909:	5e                   	pop    esi
c000c90a:	5f                   	pop    edi
c000c90b:	5d                   	pop    ebp
c000c90c:	c3                   	ret    
c000c90d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000c915:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c91d:	e9 d7 fe ff ff       	jmp    c000c7f9 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000c922 <Pipe::isAtty()>:
c000c922:	31 c0                	xor    eax,eax
c000c924:	c3                   	ret    
c000c925:	90                   	nop

c000c926 <Pipe::~Pipe()>:
c000c926:	83 ec 0c             	sub    esp,0xc
c000c929:	ba 0c 11 02 c0       	mov    edx,0xc002110c
c000c92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c932:	89 10                	mov    DWORD PTR [eax],edx
c000c934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c938:	83 ec 0c             	sub    esp,0xc
c000c93b:	50                   	push   eax
c000c93c:	e8 c5 15 00 00       	call   c000df06 <UnixFile::~UnixFile()>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	90                   	nop
c000c945:	83 c4 0c             	add    esp,0xc
c000c948:	c3                   	ret    
c000c949:	90                   	nop

c000c94a <Pipe::~Pipe()>:
c000c94a:	83 ec 0c             	sub    esp,0xc
c000c94d:	83 ec 0c             	sub    esp,0xc
c000c950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c954:	e8 cd ff ff ff       	call   c000c926 <Pipe::~Pipe()>
c000c959:	83 c4 10             	add    esp,0x10
c000c95c:	83 ec 08             	sub    esp,0x8
c000c95f:	6a 20                	push   0x20
c000c961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c965:	e8 ef 26 00 00       	call   c000f059 <operator delete(void*, unsigned long)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	83 c4 0c             	add    esp,0xc
c000c970:	c3                   	ret    
c000c971:	90                   	nop

c000c972 <Pipe::read(unsigned long long, void*, int*)>:
c000c972:	55                   	push   ebp
c000c973:	57                   	push   edi
c000c974:	56                   	push   esi
c000c975:	53                   	push   ebx
c000c976:	83 ec 1c             	sub    esp,0x1c
c000c979:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c97d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c981:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c985:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c988:	89 c8                	mov    eax,ecx
c000c98a:	99                   	cdq    
c000c98b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c98f:	74 19                	je     c000c9aa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c991:	39 f9                	cmp    ecx,edi
c000c993:	89 d1                	mov    ecx,edx
c000c995:	19 f1                	sbb    ecx,esi
c000c997:	73 11                	jae    c000c9aa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c999:	e8 d6 be 00 00       	call   c0018874 <lockScheduler()>
c000c99e:	e8 05 c2 00 00       	call   c0018ba8 <schedule()>
c000c9a3:	e8 ce be 00 00       	call   c0018876 <unlockScheduler()>
c000c9a8:	eb db                	jmp    c000c985 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c9aa:	39 f8                	cmp    eax,edi
c000c9ac:	89 d1                	mov    ecx,edx
c000c9ae:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c9b2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c9b6:	19 f1                	sbb    ecx,esi
c000c9b8:	73 08                	jae    c000c9c2 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c9ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9c5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9c8:	29 c6                	sub    esi,eax
c000c9ca:	89 f1                	mov    ecx,esi
c000c9cc:	c1 f9 1f             	sar    ecx,0x1f
c000c9cf:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9d3:	89 ca                	mov    edx,ecx
c000c9d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9d9:	19 d1                	sbb    ecx,edx
c000c9db:	73 04                	jae    c000c9e1 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9dd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9e5:	89 fd                	mov    ebp,edi
c000c9e7:	29 f5                	sub    ebp,esi
c000c9e9:	85 f6                	test   esi,esi
c000c9eb:	74 12                	je     c000c9ff <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9ed:	52                   	push   edx
c000c9ee:	56                   	push   esi
c000c9ef:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9f2:	50                   	push   eax
c000c9f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9f7:	e8 b4 3c ff ff       	call   c00006b0 <memcpy>
c000c9fc:	83 c4 10             	add    esp,0x10
c000c9ff:	85 ed                	test   ebp,ebp
c000ca01:	74 12                	je     c000ca15 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ca03:	50                   	push   eax
c000ca04:	55                   	push   ebp
c000ca05:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ca08:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ca0c:	56                   	push   esi
c000ca0d:	e8 9e 3c ff ff       	call   c00006b0 <memcpy>
c000ca12:	83 c4 10             	add    esp,0x10
c000ca15:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ca18:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca1b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ca1e:	99                   	cdq    
c000ca1f:	89 f7                	mov    edi,esi
c000ca21:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ca25:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ca29:	c1 ff 1f             	sar    edi,0x1f
c000ca2c:	57                   	push   edi
c000ca2d:	56                   	push   esi
c000ca2e:	52                   	push   edx
c000ca2f:	50                   	push   eax
c000ca30:	e8 c7 28 01 00       	call   c001f2fc <__umoddi3>
c000ca35:	83 c4 10             	add    esp,0x10
c000ca38:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca3b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca40:	75 10                	jne    c000ca52 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca42:	83 ec 0c             	sub    esp,0xc
c000ca45:	68 c9 10 02 c0       	push   0xc00210c9
c000ca4a:	e8 d1 8e 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000ca4f:	83 c4 10             	add    esp,0x10
c000ca52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca5a:	89 10                	mov    DWORD PTR [eax],edx
c000ca5c:	83 c4 1c             	add    esp,0x1c
c000ca5f:	31 c0                	xor    eax,eax
c000ca61:	5b                   	pop    ebx
c000ca62:	5e                   	pop    esi
c000ca63:	5f                   	pop    edi
c000ca64:	5d                   	pop    ebp
c000ca65:	c3                   	ret    

c000ca66 <Pipe::write(unsigned long long, void*, int*)>:
c000ca66:	55                   	push   ebp
c000ca67:	57                   	push   edi
c000ca68:	56                   	push   esi
c000ca69:	53                   	push   ebx
c000ca6a:	83 ec 1c             	sub    esp,0x1c
c000ca6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca71:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca75:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca79:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca7c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca7f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca82:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca86:	89 de                	mov    esi,ebx
c000ca88:	89 df                	mov    edi,ebx
c000ca8a:	c1 ff 1f             	sar    edi,0x1f
c000ca8d:	01 c6                	add    esi,eax
c000ca8f:	89 c8                	mov    eax,ecx
c000ca91:	11 d7                	adc    edi,edx
c000ca93:	99                   	cdq    
c000ca94:	39 f1                	cmp    ecx,esi
c000ca96:	89 d0                	mov    eax,edx
c000ca98:	19 f8                	sbb    eax,edi
c000ca9a:	b8 01 00 00 00       	mov    eax,0x1
c000ca9f:	0f 82 80 00 00 00    	jb     c000cb25 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000caa5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000caa8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000caab:	01 d8                	add    eax,ebx
c000caad:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000cab1:	99                   	cdq    
c000cab2:	f7 f9                	idiv   ecx
c000cab4:	29 d1                	sub    ecx,edx
c000cab6:	89 d7                	mov    edi,edx
c000cab8:	89 c8                	mov    eax,ecx
c000caba:	99                   	cdq    
c000cabb:	39 ce                	cmp    esi,ecx
c000cabd:	19 d3                	sbb    ebx,edx
c000cabf:	bb 00 00 00 00       	mov    ebx,0x0
c000cac4:	72 04                	jb     c000caca <Pipe::write(unsigned long long, void*, int*)+0x64>
c000cac6:	89 f3                	mov    ebx,esi
c000cac8:	29 cb                	sub    ebx,ecx
c000caca:	89 f1                	mov    ecx,esi
c000cacc:	29 d9                	sub    ecx,ebx
c000cace:	74 1a                	je     c000caea <Pipe::write(unsigned long long, void*, int*)+0x84>
c000cad0:	52                   	push   edx
c000cad1:	51                   	push   ecx
c000cad2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cad6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cada:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000cadd:	57                   	push   edi
c000cade:	e8 cd 3b ff ff       	call   c00006b0 <memcpy>
c000cae3:	83 c4 10             	add    esp,0x10
c000cae6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caea:	85 db                	test   ebx,ebx
c000caec:	74 12                	je     c000cb00 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000caee:	50                   	push   eax
c000caef:	53                   	push   ebx
c000caf0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000caf4:	51                   	push   ecx
c000caf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000caf8:	e8 b3 3b ff ff       	call   c00006b0 <memcpy>
c000cafd:	83 c4 10             	add    esp,0x10
c000cb00:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cb03:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cb08:	75 10                	jne    c000cb1a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cb0a:	83 ec 0c             	sub    esp,0xc
c000cb0d:	68 e5 10 02 c0       	push   0xc00210e5
c000cb12:	e8 09 8e 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000cb17:	83 c4 10             	add    esp,0x10
c000cb1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb1e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cb21:	89 38                	mov    DWORD PTR [eax],edi
c000cb23:	31 c0                	xor    eax,eax
c000cb25:	83 c4 1c             	add    esp,0x1c
c000cb28:	5b                   	pop    ebx
c000cb29:	5e                   	pop    esi
c000cb2a:	5f                   	pop    edi
c000cb2b:	5d                   	pop    ebp
c000cb2c:	c3                   	ret    
c000cb2d:	90                   	nop

c000cb2e <Pipe::Pipe(int)>:
c000cb2e:	83 ec 0c             	sub    esp,0xc
c000cb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb35:	83 ec 08             	sub    esp,0x8
c000cb38:	6a 00                	push   0x0
c000cb3a:	50                   	push   eax
c000cb3b:	e8 24 12 00 00       	call   c000dd64 <UnixFile::UnixFile(int)>
c000cb40:	83 c4 10             	add    esp,0x10
c000cb43:	ba 0c 11 02 c0       	mov    edx,0xc002110c
c000cb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4c:	89 10                	mov    DWORD PTR [eax],edx
c000cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb56:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb68:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb73:	83 ec 0c             	sub    esp,0xc
c000cb76:	50                   	push   eax
c000cb77:	e8 cc f4 ff ff       	call   c000c048 <malloc>
c000cb7c:	83 c4 10             	add    esp,0x10
c000cb7f:	89 c2                	mov    edx,eax
c000cb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb8c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb90:	90                   	nop
c000cb91:	83 c4 0c             	add    esp,0xc
c000cb94:	c3                   	ret    
c000cb95:	90                   	nop

c000cb96 <VgaText::isAtty()>:
c000cb96:	b0 01                	mov    al,0x1
c000cb98:	c3                   	ret    
c000cb99:	90                   	nop

c000cb9a <VgaText::~VgaText()>:
c000cb9a:	83 ec 0c             	sub    esp,0xc
c000cb9d:	ba c8 11 02 c0       	mov    edx,0xc00211c8
c000cba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cba6:	89 10                	mov    DWORD PTR [eax],edx
c000cba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbac:	83 ec 0c             	sub    esp,0xc
c000cbaf:	50                   	push   eax
c000cbb0:	e8 51 13 00 00       	call   c000df06 <UnixFile::~UnixFile()>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	90                   	nop
c000cbb9:	83 c4 0c             	add    esp,0xc
c000cbbc:	c3                   	ret    
c000cbbd:	90                   	nop

c000cbbe <VgaText::~VgaText()>:
c000cbbe:	83 ec 0c             	sub    esp,0xc
c000cbc1:	83 ec 0c             	sub    esp,0xc
c000cbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc8:	e8 cd ff ff ff       	call   c000cb9a <VgaText::~VgaText()>
c000cbcd:	83 c4 10             	add    esp,0x10
c000cbd0:	83 ec 08             	sub    esp,0x8
c000cbd3:	68 60 12 00 00       	push   0x1260
c000cbd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbdc:	e8 78 24 00 00       	call   c000f059 <operator delete(void*, unsigned long)>
c000cbe1:	83 c4 10             	add    esp,0x10
c000cbe4:	83 c4 0c             	add    esp,0xc
c000cbe7:	c3                   	ret    

c000cbe8 <VgaText::read(unsigned long long, void*, int*)>:
c000cbe8:	83 ec 10             	sub    esp,0x10
c000cbeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf7:	e8 38 57 00 00       	call   c0012334 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbfc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cc00:	89 02                	mov    DWORD PTR [edx],eax
c000cc02:	31 c0                	xor    eax,eax
c000cc04:	83 c4 1c             	add    esp,0x1c
c000cc07:	c3                   	ret    

c000cc08 <setTerminalScrollLock(bool)>:
c000cc08:	c3                   	ret    

c000cc09 <addToTerminalCycle(VgaText*)>:
c000cc09:	8b 15 80 44 02 c0    	mov    edx,DWORD PTR ds:0xc0024480
c000cc0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc13:	85 d2                	test   edx,edx
c000cc15:	75 0c                	jne    c000cc23 <addToTerminalCycle(VgaText*)+0x1a>
c000cc17:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cc1d:	a3 80 44 02 c0       	mov    ds:0xc0024480,eax
c000cc22:	c3                   	ret    
c000cc23:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cc29:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cc2f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc35:	c3                   	ret    

c000cc36 <installVgaTextImplementation()>:
c000cc36:	83 ec 10             	sub    esp,0x10
c000cc39:	6a 20                	push   0x20
c000cc3b:	6a 00                	push   0x0
c000cc3d:	68 60 44 02 c0       	push   0xc0024460
c000cc42:	e8 9f 3a ff ff       	call   c00006e6 <memset>
c000cc47:	83 c4 1c             	add    esp,0x1c
c000cc4a:	c3                   	ret    

c000cc4b <scrollTerminalScrollLock(int)>:
c000cc4b:	c3                   	ret    

c000cc4c <VgaText::load()>:
c000cc4c:	53                   	push   ebx
c000cc4d:	31 c0                	xor    eax,eax
c000cc4f:	83 ec 58             	sub    esp,0x58
c000cc52:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc56:	89 e2                	mov    edx,esp
c000cc58:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc5c:	40                   	inc    eax
c000cc5d:	83 f8 50             	cmp    eax,0x50
c000cc60:	75 f6                	jne    c000cc58 <VgaText::load()+0xc>
c000cc62:	31 c0                	xor    eax,eax
c000cc64:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc6b:	84 c9                	test   cl,cl
c000cc6d:	74 06                	je     c000cc75 <VgaText::load()+0x29>
c000cc6f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc72:	40                   	inc    eax
c000cc73:	eb ef                	jmp    c000cc64 <VgaText::load()+0x18>
c000cc75:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc7b:	85 c0                	test   eax,eax
c000cc7d:	74 09                	je     c000cc88 <VgaText::load()+0x3c>
c000cc7f:	51                   	push   ecx
c000cc80:	51                   	push   ecx
c000cc81:	52                   	push   edx
c000cc82:	53                   	push   ebx
c000cc83:	ff d0                	call   eax
c000cc85:	83 c4 10             	add    esp,0x10
c000cc88:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc8e:	85 c0                	test   eax,eax
c000cc90:	74 09                	je     c000cc9b <VgaText::load()+0x4f>
c000cc92:	83 ec 0c             	sub    esp,0xc
c000cc95:	53                   	push   ebx
c000cc96:	ff d0                	call   eax
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	83 c4 58             	add    esp,0x58
c000cc9e:	5b                   	pop    ebx
c000cc9f:	c3                   	ret    

c000cca0 <VgaText::updateCursor()>:
c000cca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca4:	39 05 84 44 02 c0    	cmp    DWORD PTR ds:0xc0024484,eax
c000ccaa:	75 0c                	jne    c000ccb8 <VgaText::updateCursor()+0x18>
c000ccac:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000ccb2:	85 c0                	test   eax,eax
c000ccb4:	74 02                	je     c000ccb8 <VgaText::updateCursor()+0x18>
c000ccb6:	ff e0                	jmp    eax
c000ccb8:	c3                   	ret    
c000ccb9:	90                   	nop

c000ccba <VgaText::showCursor(bool)>:
c000ccba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccc2:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ccc8:	c3                   	ret    
c000ccc9:	90                   	nop

c000ccca <VgaText::disableBlink(bool)>:
c000ccca:	56                   	push   esi
c000cccb:	53                   	push   ebx
c000cccc:	51                   	push   ecx
c000cccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccd5:	39 1d 84 44 02 c0    	cmp    DWORD PTR ds:0xc0024484,ebx
c000ccdb:	75 18                	jne    c000ccf5 <VgaText::disableBlink(bool)+0x2b>
c000ccdd:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cce3:	85 c0                	test   eax,eax
c000cce5:	74 0e                	je     c000ccf5 <VgaText::disableBlink(bool)+0x2b>
c000cce7:	89 f1                	mov    ecx,esi
c000cce9:	52                   	push   edx
c000ccea:	52                   	push   edx
c000cceb:	0f b6 d1             	movzx  edx,cl
c000ccee:	52                   	push   edx
c000ccef:	53                   	push   ebx
c000ccf0:	ff d0                	call   eax
c000ccf2:	83 c4 10             	add    esp,0x10
c000ccf5:	89 f0                	mov    eax,esi
c000ccf7:	83 f0 01             	xor    eax,0x1
c000ccfa:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000cd00:	58                   	pop    eax
c000cd01:	5b                   	pop    ebx
c000cd02:	5e                   	pop    esi
c000cd03:	c3                   	ret    

c000cd04 <VgaText::doANSI_SGR(int)>:
c000cd04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd0c:	85 d2                	test   edx,edx
c000cd0e:	75 14                	jne    c000cd24 <VgaText::doANSI_SGR(int)+0x20>
c000cd10:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cd16:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd1c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cd22:	eb 65                	jmp    c000cd89 <VgaText::doANSI_SGR(int)+0x85>
c000cd24:	83 fa 07             	cmp    edx,0x7
c000cd27:	75 14                	jne    c000cd3d <VgaText::doANSI_SGR(int)+0x39>
c000cd29:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd2f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cd35:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd3b:	eb 4c                	jmp    c000cd89 <VgaText::doANSI_SGR(int)+0x85>
c000cd3d:	83 fa 1b             	cmp    edx,0x1b
c000cd40:	74 ce                	je     c000cd10 <VgaText::doANSI_SGR(int)+0xc>
c000cd42:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd45:	83 f9 07             	cmp    ecx,0x7
c000cd48:	77 09                	ja     c000cd53 <VgaText::doANSI_SGR(int)+0x4f>
c000cd4a:	8b 14 8d 20 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7e0]
c000cd51:	eb 20                	jmp    c000cd73 <VgaText::doANSI_SGR(int)+0x6f>
c000cd53:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd56:	83 f9 07             	cmp    ecx,0x7
c000cd59:	77 09                	ja     c000cd64 <VgaText::doANSI_SGR(int)+0x60>
c000cd5b:	8b 14 8d 20 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc7e0]
c000cd62:	eb 25                	jmp    c000cd89 <VgaText::doANSI_SGR(int)+0x85>
c000cd64:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd67:	83 f9 07             	cmp    ecx,0x7
c000cd6a:	77 0e                	ja     c000cd7a <VgaText::doANSI_SGR(int)+0x76>
c000cd6c:	8b 14 95 d8 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc928]
c000cd73:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd79:	c3                   	ret    
c000cd7a:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd7d:	83 f9 07             	cmp    ecx,0x7
c000cd80:	77 0d                	ja     c000cd8f <VgaText::doANSI_SGR(int)+0x8b>
c000cd82:	8b 14 95 b0 36 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc950]
c000cd89:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd8f:	c3                   	ret    

c000cd90 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd98:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd9e:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cda4:	c3                   	ret    
c000cda5:	90                   	nop

c000cda6 <VgaText::setDefaultFgColour(VgaColour)>:
c000cda6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdae:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cdb4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cdba:	c3                   	ret    
c000cdbb:	90                   	nop

c000cdbc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cdbc:	53                   	push   ebx
c000cdbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cdc1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cdc5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdc9:	51                   	push   ecx
c000cdca:	e8 c1 ff ff ff       	call   c000cd90 <VgaText::setDefaultBgColour(VgaColour)>
c000cdcf:	58                   	pop    eax
c000cdd0:	5a                   	pop    edx
c000cdd1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cdd5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cdd9:	5b                   	pop    ebx
c000cdda:	eb ca                	jmp    c000cda6 <VgaText::setDefaultFgColour(VgaColour)>

c000cddc <VgaText::combineColours(unsigned char, unsigned char)>:
c000cddc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cde0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cde5:	83 e0 0f             	and    eax,0xf
c000cde8:	c1 e2 04             	shl    edx,0x4
c000cdeb:	09 d0                	or     eax,edx
c000cded:	c3                   	ret    

c000cdee <VgaText::scrollScreen()>:
c000cdee:	57                   	push   edi
c000cdef:	56                   	push   esi
c000cdf0:	be 01 00 00 00       	mov    esi,0x1
c000cdf5:	53                   	push   ebx
c000cdf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdfa:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ce00:	31 ff                	xor    edi,edi
c000ce02:	01 d9                	add    ecx,ebx
c000ce04:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ce07:	83 fe 17             	cmp    esi,0x17
c000ce0a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ce10:	75 28                	jne    c000ce3a <VgaText::scrollScreen()+0x4c>
c000ce12:	f7 c7 01 00 00 00    	test   edi,0x1
c000ce18:	74 1c                	je     c000ce36 <VgaText::scrollScreen()+0x48>
c000ce1a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ce21:	50                   	push   eax
c000ce22:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ce29:	50                   	push   eax
c000ce2a:	e8 ad ff ff ff       	call   c000cddc <VgaText::combineColours(unsigned char, unsigned char)>
c000ce2f:	5a                   	pop    edx
c000ce30:	5a                   	pop    edx
c000ce31:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce34:	eb 04                	jmp    c000ce3a <VgaText::scrollScreen()+0x4c>
c000ce36:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce3a:	47                   	inc    edi
c000ce3b:	41                   	inc    ecx
c000ce3c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce42:	75 c0                	jne    c000ce04 <VgaText::scrollScreen()+0x16>
c000ce44:	46                   	inc    esi
c000ce45:	83 fe 18             	cmp    esi,0x18
c000ce48:	75 b0                	jne    c000cdfa <VgaText::scrollScreen()+0xc>
c000ce4a:	39 1d 84 44 02 c0    	cmp    DWORD PTR ds:0xc0024484,ebx
c000ce50:	75 24                	jne    c000ce76 <VgaText::scrollScreen()+0x88>
c000ce52:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce59:	74 08                	je     c000ce63 <VgaText::scrollScreen()+0x75>
c000ce5b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce61:	eb 13                	jmp    c000ce76 <VgaText::scrollScreen()+0x88>
c000ce63:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce69:	85 c0                	test   eax,eax
c000ce6b:	74 09                	je     c000ce76 <VgaText::scrollScreen()+0x88>
c000ce6d:	83 ec 0c             	sub    esp,0xc
c000ce70:	53                   	push   ebx
c000ce71:	ff d0                	call   eax
c000ce73:	83 c4 10             	add    esp,0x10
c000ce76:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce7a:	5b                   	pop    ebx
c000ce7b:	5e                   	pop    esi
c000ce7c:	5f                   	pop    edi
c000ce7d:	e9 1e fe ff ff       	jmp    c000cca0 <VgaText::updateCursor()>

c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce82:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce87:	c1 e0 08             	shl    eax,0x8
c000ce8a:	89 c2                	mov    edx,eax
c000ce8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce91:	09 d0                	or     eax,edx
c000ce93:	c3                   	ret    

c000ce94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce94:	53                   	push   ebx
c000ce95:	83 ec 08             	sub    esp,0x8
c000ce98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce9c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cea1:	50                   	push   eax
c000cea2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cea7:	50                   	push   eax
c000cea8:	e8 2f ff ff ff       	call   c000cddc <VgaText::combineColours(unsigned char, unsigned char)>
c000cead:	5a                   	pop    edx
c000ceae:	0f b6 c0             	movzx  eax,al
c000ceb1:	5b                   	pop    ebx
c000ceb2:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ceb7:	50                   	push   eax
c000ceb8:	53                   	push   ebx
c000ceb9:	e8 c4 ff ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000cebe:	5a                   	pop    edx
c000cebf:	5a                   	pop    edx
c000cec0:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000cec6:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ceca:	0f b7 d2             	movzx  edx,dx
c000cecd:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ced2:	39 0d 84 44 02 c0    	cmp    DWORD PTR ds:0xc0024484,ecx
c000ced8:	75 14                	jne    c000ceee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceda:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cee0:	85 c0                	test   eax,eax
c000cee2:	74 0a                	je     c000ceee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cee4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cee8:	83 c4 08             	add    esp,0x8
c000ceeb:	5b                   	pop    ebx
c000ceec:	ff e0                	jmp    eax
c000ceee:	83 c4 08             	add    esp,0x8
c000cef1:	5b                   	pop    ebx
c000cef2:	c3                   	ret    
c000cef3:	90                   	nop

c000cef4 <VgaText::getCursorX()>:
c000cef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cef8:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cefe:	c3                   	ret    
c000ceff:	90                   	nop

c000cf00 <VgaText::getCursorY()>:
c000cf00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf04:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cf0a:	c3                   	ret    
c000cf0b:	90                   	nop

c000cf0c <VgaText::setCursor(int, int)>:
c000cf0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf14:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cf1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf1e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cf24:	e9 77 fd ff ff       	jmp    c000cca0 <VgaText::updateCursor()>
c000cf29:	90                   	nop

c000cf2a <VgaText::setCursorX(int)>:
c000cf2a:	83 ec 10             	sub    esp,0x10
c000cf2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf31:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3b:	50                   	push   eax
c000cf3c:	e8 cb ff ff ff       	call   c000cf0c <VgaText::setCursor(int, int)>
c000cf41:	83 c4 1c             	add    esp,0x1c
c000cf44:	c3                   	ret    
c000cf45:	90                   	nop

c000cf46 <VgaText::setCursorY(int)>:
c000cf46:	83 ec 10             	sub    esp,0x10
c000cf49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf51:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf57:	50                   	push   eax
c000cf58:	e8 af ff ff ff       	call   c000cf0c <VgaText::setCursor(int, int)>
c000cf5d:	83 c4 1c             	add    esp,0x1c
c000cf60:	c3                   	ret    
c000cf61:	90                   	nop

c000cf62 <VgaText::incrementCursor(bool)>:
c000cf62:	56                   	push   esi
c000cf63:	53                   	push   ebx
c000cf64:	51                   	push   ecx
c000cf65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf69:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf6d:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf73:	40                   	inc    eax
c000cf74:	83 f8 50             	cmp    eax,0x50
c000cf77:	74 08                	je     c000cf81 <VgaText::incrementCursor(bool)+0x1f>
c000cf79:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf7f:	eb 33                	jmp    c000cfb4 <VgaText::incrementCursor(bool)+0x52>
c000cf81:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf87:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf91:	8d 50 01             	lea    edx,[eax+0x1]
c000cf94:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf9a:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cfa0:	75 12                	jne    c000cfb4 <VgaText::incrementCursor(bool)+0x52>
c000cfa2:	83 ec 0c             	sub    esp,0xc
c000cfa5:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cfab:	53                   	push   ebx
c000cfac:	e8 3d fe ff ff       	call   c000cdee <VgaText::scrollScreen()>
c000cfb1:	83 c4 10             	add    esp,0x10
c000cfb4:	89 f0                	mov    eax,esi
c000cfb6:	84 c0                	test   al,al
c000cfb8:	74 0c                	je     c000cfc6 <VgaText::incrementCursor(bool)+0x64>
c000cfba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cfbe:	5a                   	pop    edx
c000cfbf:	5b                   	pop    ebx
c000cfc0:	5e                   	pop    esi
c000cfc1:	e9 da fc ff ff       	jmp    c000cca0 <VgaText::updateCursor()>
c000cfc6:	58                   	pop    eax
c000cfc7:	5b                   	pop    ebx
c000cfc8:	5e                   	pop    esi
c000cfc9:	c3                   	ret    

c000cfca <VgaText::updateRAMUsageDisplay(int)>:
c000cfca:	53                   	push   ebx
c000cfcb:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfd0:	6a 0f                	push   0xf
c000cfd2:	6a 00                	push   0x0
c000cfd4:	e8 03 fe ff ff       	call   c000cddc <VgaText::combineColours(unsigned char, unsigned char)>
c000cfd9:	5a                   	pop    edx
c000cfda:	59                   	pop    ecx
c000cfdb:	0f b6 c8             	movzx  ecx,al
c000cfde:	51                   	push   ecx
c000cfdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfe3:	99                   	cdq    
c000cfe4:	f7 fb                	idiv   ebx
c000cfe6:	89 d3                	mov    ebx,edx
c000cfe8:	83 c0 30             	add    eax,0x30
c000cfeb:	83 c3 30             	add    ebx,0x30
c000cfee:	0f be c0             	movsx  eax,al
c000cff1:	0f b6 db             	movzx  ebx,bl
c000cff4:	50                   	push   eax
c000cff5:	e8 88 fe ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000cffa:	5a                   	pop    edx
c000cffb:	5a                   	pop    edx
c000cffc:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000d002:	51                   	push   ecx
c000d003:	53                   	push   ebx
c000d004:	e8 79 fe ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d009:	5b                   	pop    ebx
c000d00a:	5a                   	pop    edx
c000d00b:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000d011:	51                   	push   ecx
c000d012:	6a 25                	push   0x25
c000d014:	e8 69 fe ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d019:	59                   	pop    ecx
c000d01a:	5b                   	pop    ebx
c000d01b:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000d021:	5b                   	pop    ebx
c000d022:	c3                   	ret    
c000d023:	90                   	nop

c000d024 <VgaText::updateDiskUsage()>:
c000d024:	55                   	push   ebp
c000d025:	bd 10 27 00 00       	mov    ebp,0x2710
c000d02a:	57                   	push   edi
c000d02b:	56                   	push   esi
c000d02c:	53                   	push   ebx
c000d02d:	6a 0f                	push   0xf
c000d02f:	6a 00                	push   0x0
c000d031:	e8 a6 fd ff ff       	call   c000cddc <VgaText::combineColours(unsigned char, unsigned char)>
c000d036:	5a                   	pop    edx
c000d037:	0f b6 d8             	movzx  ebx,al
c000d03a:	59                   	pop    ecx
c000d03b:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d040:	53                   	push   ebx
c000d041:	b9 0a 00 00 00       	mov    ecx,0xa
c000d046:	99                   	cdq    
c000d047:	f7 fd                	idiv   ebp
c000d049:	99                   	cdq    
c000d04a:	f7 f9                	idiv   ecx
c000d04c:	8d 42 30             	lea    eax,[edx+0x30]
c000d04f:	0f b6 c0             	movzx  eax,al
c000d052:	50                   	push   eax
c000d053:	e8 2a fe ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d058:	5e                   	pop    esi
c000d059:	5f                   	pop    edi
c000d05a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d060:	bf e8 03 00 00       	mov    edi,0x3e8
c000d065:	53                   	push   ebx
c000d066:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d06b:	99                   	cdq    
c000d06c:	f7 ff                	idiv   edi
c000d06e:	99                   	cdq    
c000d06f:	f7 f9                	idiv   ecx
c000d071:	8d 42 30             	lea    eax,[edx+0x30]
c000d074:	0f b6 c0             	movzx  eax,al
c000d077:	50                   	push   eax
c000d078:	e8 05 fe ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d07d:	5a                   	pop    edx
c000d07e:	5e                   	pop    esi
c000d07f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d085:	be 64 00 00 00       	mov    esi,0x64
c000d08a:	53                   	push   ebx
c000d08b:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d090:	99                   	cdq    
c000d091:	f7 fe                	idiv   esi
c000d093:	99                   	cdq    
c000d094:	f7 f9                	idiv   ecx
c000d096:	8d 42 30             	lea    eax,[edx+0x30]
c000d099:	0f b6 c0             	movzx  eax,al
c000d09c:	50                   	push   eax
c000d09d:	e8 e0 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0a2:	5a                   	pop    edx
c000d0a3:	5a                   	pop    edx
c000d0a4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d0aa:	53                   	push   ebx
c000d0ab:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d0b0:	99                   	cdq    
c000d0b1:	f7 f9                	idiv   ecx
c000d0b3:	99                   	cdq    
c000d0b4:	f7 f9                	idiv   ecx
c000d0b6:	8d 42 30             	lea    eax,[edx+0x30]
c000d0b9:	0f b6 c0             	movzx  eax,al
c000d0bc:	50                   	push   eax
c000d0bd:	e8 c0 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0c2:	5a                   	pop    edx
c000d0c3:	5a                   	pop    edx
c000d0c4:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d0ca:	53                   	push   ebx
c000d0cb:	a1 64 61 02 c0       	mov    eax,ds:0xc0026164
c000d0d0:	99                   	cdq    
c000d0d1:	f7 f9                	idiv   ecx
c000d0d3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0d6:	0f b6 c0             	movzx  eax,al
c000d0d9:	50                   	push   eax
c000d0da:	e8 a3 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0df:	5a                   	pop    edx
c000d0e0:	5a                   	pop    edx
c000d0e1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0e7:	53                   	push   ebx
c000d0e8:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000d0ed:	99                   	cdq    
c000d0ee:	f7 fd                	idiv   ebp
c000d0f0:	99                   	cdq    
c000d0f1:	f7 f9                	idiv   ecx
c000d0f3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0f6:	0f b6 c0             	movzx  eax,al
c000d0f9:	50                   	push   eax
c000d0fa:	e8 83 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0ff:	5d                   	pop    ebp
c000d100:	5a                   	pop    edx
c000d101:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d107:	53                   	push   ebx
c000d108:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000d10d:	99                   	cdq    
c000d10e:	f7 ff                	idiv   edi
c000d110:	99                   	cdq    
c000d111:	f7 f9                	idiv   ecx
c000d113:	8d 42 30             	lea    eax,[edx+0x30]
c000d116:	0f b6 c0             	movzx  eax,al
c000d119:	50                   	push   eax
c000d11a:	e8 63 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d11f:	5f                   	pop    edi
c000d120:	5d                   	pop    ebp
c000d121:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d127:	53                   	push   ebx
c000d128:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000d12d:	99                   	cdq    
c000d12e:	f7 fe                	idiv   esi
c000d130:	99                   	cdq    
c000d131:	f7 f9                	idiv   ecx
c000d133:	8d 42 30             	lea    eax,[edx+0x30]
c000d136:	0f b6 c0             	movzx  eax,al
c000d139:	50                   	push   eax
c000d13a:	e8 43 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d13f:	5a                   	pop    edx
c000d140:	5e                   	pop    esi
c000d141:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d147:	53                   	push   ebx
c000d148:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000d14d:	99                   	cdq    
c000d14e:	f7 f9                	idiv   ecx
c000d150:	99                   	cdq    
c000d151:	f7 f9                	idiv   ecx
c000d153:	8d 42 30             	lea    eax,[edx+0x30]
c000d156:	0f b6 c0             	movzx  eax,al
c000d159:	50                   	push   eax
c000d15a:	e8 23 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d15f:	5f                   	pop    edi
c000d160:	5d                   	pop    ebp
c000d161:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d167:	53                   	push   ebx
c000d168:	a1 60 61 02 c0       	mov    eax,ds:0xc0026160
c000d16d:	99                   	cdq    
c000d16e:	f7 f9                	idiv   ecx
c000d170:	83 c2 30             	add    edx,0x30
c000d173:	0f b6 d2             	movzx  edx,dl
c000d176:	52                   	push   edx
c000d177:	e8 06 fd ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d17c:	5a                   	pop    edx
c000d17d:	59                   	pop    ecx
c000d17e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d184:	5b                   	pop    ebx
c000d185:	5e                   	pop    esi
c000d186:	5f                   	pop    edi
c000d187:	5d                   	pop    ebp
c000d188:	c3                   	ret    
c000d189:	90                   	nop

c000d18a <VgaText::updateTitle()>:
c000d18a:	53                   	push   ebx
c000d18b:	31 c0                	xor    eax,eax
c000d18d:	83 ec 58             	sub    esp,0x58
c000d190:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d194:	89 e1                	mov    ecx,esp
c000d196:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d19a:	40                   	inc    eax
c000d19b:	83 f8 50             	cmp    eax,0x50
c000d19e:	75 f6                	jne    c000d196 <VgaText::updateTitle()+0xc>
c000d1a0:	31 c0                	xor    eax,eax
c000d1a2:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d1a9:	84 db                	test   bl,bl
c000d1ab:	74 06                	je     c000d1b3 <VgaText::updateTitle()+0x29>
c000d1ad:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d1b0:	40                   	inc    eax
c000d1b1:	eb ef                	jmp    c000d1a2 <VgaText::updateTitle()+0x18>
c000d1b3:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d1b9:	85 c0                	test   eax,eax
c000d1bb:	74 09                	je     c000d1c6 <VgaText::updateTitle()+0x3c>
c000d1bd:	53                   	push   ebx
c000d1be:	53                   	push   ebx
c000d1bf:	51                   	push   ecx
c000d1c0:	52                   	push   edx
c000d1c1:	ff d0                	call   eax
c000d1c3:	83 c4 10             	add    esp,0x10
c000d1c6:	e8 59 fe ff ff       	call   c000d024 <VgaText::updateDiskUsage()>
c000d1cb:	83 c4 58             	add    esp,0x58
c000d1ce:	5b                   	pop    ebx
c000d1cf:	c3                   	ret    

c000d1d0 <VgaText::setTitleTextColour(VgaColour)>:
c000d1d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1d8:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1de:	eb aa                	jmp    c000d18a <VgaText::updateTitle()>

c000d1e0 <VgaText::setTitleColour(VgaColour)>:
c000d1e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1e8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1ee:	eb 9a                	jmp    c000d18a <VgaText::updateTitle()>

c000d1f0 <VgaText::setTitle(char*)>:
c000d1f0:	53                   	push   ebx
c000d1f1:	83 ec 10             	sub    esp,0x10
c000d1f4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1fc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d202:	50                   	push   eax
c000d203:	e8 7d 35 ff ff       	call   c0000785 <strcpy>
c000d208:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	5b                   	pop    ebx
c000d210:	e9 75 ff ff ff       	jmp    c000d18a <VgaText::updateTitle()>
c000d215:	90                   	nop

c000d216 <VgaText::decrementCursor(bool)>:
c000d216:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d21a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d21e:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d224:	85 c0                	test   eax,eax
c000d226:	74 07                	je     c000d22f <VgaText::decrementCursor(bool)+0x19>
c000d228:	48                   	dec    eax
c000d229:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d22f:	84 c9                	test   cl,cl
c000d231:	74 09                	je     c000d23c <VgaText::decrementCursor(bool)+0x26>
c000d233:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d237:	e9 64 fa ff ff       	jmp    c000cca0 <VgaText::updateCursor()>
c000d23c:	c3                   	ret    
c000d23d:	90                   	nop

c000d23e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d23e:	53                   	push   ebx
c000d23f:	83 ec 08             	sub    esp,0x8
c000d242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d246:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d24a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d24e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d252:	3c 07                	cmp    al,0x7
c000d254:	75 2a                	jne    c000d280 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d256:	a1 2c 45 02 c0       	mov    eax,ds:0xc002452c
c000d25b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d263:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d26b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d277:	83 c4 08             	add    esp,0x8
c000d27a:	5b                   	pop    ebx
c000d27b:	e9 a4 2c 00 00       	jmp    c000ff24 <Buzzer::beep(int, int, bool)>
c000d280:	3c 0d                	cmp    al,0xd
c000d282:	75 0c                	jne    c000d290 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d284:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d28e:	eb 3b                	jmp    c000d2cb <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d290:	3c 0a                	cmp    al,0xa
c000d292:	75 40                	jne    c000d2d4 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d294:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d29a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d2a4:	8d 50 01             	lea    edx,[eax+0x1]
c000d2a7:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d2ad:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d2b3:	75 12                	jne    c000d2c7 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d2be:	53                   	push   ebx
c000d2bf:	e8 2a fb ff ff       	call   c000cdee <VgaText::scrollScreen()>
c000d2c4:	83 c4 10             	add    esp,0x10
c000d2c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2cb:	83 c4 08             	add    esp,0x8
c000d2ce:	5b                   	pop    ebx
c000d2cf:	e9 cc f9 ff ff       	jmp    c000cca0 <VgaText::updateCursor()>
c000d2d4:	3c 08                	cmp    al,0x8
c000d2d6:	75 31                	jne    c000d309 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2d8:	50                   	push   eax
c000d2d9:	50                   	push   eax
c000d2da:	6a 01                	push   0x1
c000d2dc:	53                   	push   ebx
c000d2dd:	e8 34 ff ff ff       	call   c000d216 <VgaText::decrementCursor(bool)>
c000d2e2:	5a                   	pop    edx
c000d2e3:	59                   	pop    ecx
c000d2e4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ea:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2f0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2f6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2fc:	6a 20                	push   0x20
c000d2fe:	53                   	push   ebx
c000d2ff:	e8 90 fb ff ff       	call   c000ce94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d304:	83 c4 28             	add    esp,0x28
c000d307:	5b                   	pop    ebx
c000d308:	c3                   	ret    
c000d309:	83 ec 08             	sub    esp,0x8
c000d30c:	0f be c0             	movsx  eax,al
c000d30f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d315:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d31b:	51                   	push   ecx
c000d31c:	52                   	push   edx
c000d31d:	50                   	push   eax
c000d31e:	53                   	push   ebx
c000d31f:	e8 70 fb ff ff       	call   c000ce94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d324:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d328:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d330:	83 c4 28             	add    esp,0x28
c000d333:	5b                   	pop    ebx
c000d334:	e9 29 fc ff ff       	jmp    c000cf62 <VgaText::incrementCursor(bool)>
c000d339:	90                   	nop

c000d33a <VgaText::isShowingCursor()>:
c000d33a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d33e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d344:	c3                   	ret    
c000d345:	90                   	nop

c000d346 <VgaText::isBlinkDisabled()>:
c000d346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d34a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d350:	83 f0 01             	xor    eax,0x1
c000d353:	c3                   	ret    

c000d354 <VgaText::setCursorHeight(int)>:
c000d354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d358:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d35c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d362:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d369:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d36d:	e9 48 f9 ff ff       	jmp    c000ccba <VgaText::showCursor(bool)>

c000d372 <VgaText::getCursorHeight()>:
c000d372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d376:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d37c:	c3                   	ret    

c000d37d <setActiveTerminal(VgaText*)>:
c000d37d:	53                   	push   ebx
c000d37e:	83 ec 08             	sub    esp,0x8
c000d381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d385:	85 db                	test   ebx,ebx
c000d387:	75 11                	jne    c000d39a <setActiveTerminal(VgaText*)+0x1d>
c000d389:	c7 44 24 10 20 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021120
c000d391:	83 c4 08             	add    esp,0x8
c000d394:	5b                   	pop    ebx
c000d395:	e9 86 85 00 00       	jmp    c0015920 <Krnl::panic(char const*)>
c000d39a:	50                   	push   eax
c000d39b:	50                   	push   eax
c000d39c:	53                   	push   ebx
c000d39d:	68 2e 11 02 c0       	push   0xc002112e
c000d3a2:	e8 92 1d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000d3a7:	a1 84 44 02 c0       	mov    eax,ds:0xc0024484
c000d3ac:	83 c4 10             	add    esp,0x10
c000d3af:	85 c0                	test   eax,eax
c000d3b1:	74 0c                	je     c000d3bf <setActiveTerminal(VgaText*)+0x42>
c000d3b3:	83 ec 0c             	sub    esp,0xc
c000d3b6:	50                   	push   eax
c000d3b7:	e8 e4 f8 ff ff       	call   c000cca0 <VgaText::updateCursor()>
c000d3bc:	83 c4 10             	add    esp,0x10
c000d3bf:	89 1d 84 44 02 c0    	mov    DWORD PTR ds:0xc0024484,ebx
c000d3c5:	51                   	push   ecx
c000d3c6:	51                   	push   ecx
c000d3c7:	53                   	push   ebx
c000d3c8:	68 46 11 02 c0       	push   0xc0021146
c000d3cd:	e8 67 1d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000d3d2:	83 c4 0c             	add    esp,0xc
c000d3d5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3db:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3e1:	53                   	push   ebx
c000d3e2:	e8 25 fb ff ff       	call   c000cf0c <VgaText::setCursor(int, int)>
c000d3e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ea:	e8 57 ff ff ff       	call   c000d346 <VgaText::isBlinkDisabled()>
c000d3ef:	5a                   	pop    edx
c000d3f0:	0f b6 c0             	movzx  eax,al
c000d3f3:	59                   	pop    ecx
c000d3f4:	50                   	push   eax
c000d3f5:	53                   	push   ebx
c000d3f6:	e8 cf f8 ff ff       	call   c000ccca <VgaText::disableBlink(bool)>
c000d3fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3fe:	e8 6f ff ff ff       	call   c000d372 <VgaText::getCursorHeight()>
c000d403:	5a                   	pop    edx
c000d404:	59                   	pop    ecx
c000d405:	50                   	push   eax
c000d406:	53                   	push   ebx
c000d407:	e8 48 ff ff ff       	call   c000d354 <VgaText::setCursorHeight(int)>
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d416:	75 0a                	jne    c000d422 <setActiveTerminal(VgaText*)+0xa5>
c000d418:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d422:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d426:	83 c4 08             	add    esp,0x8
c000d429:	5b                   	pop    ebx
c000d42a:	e9 1d f8 ff ff       	jmp    c000cc4c <VgaText::load()>

c000d42f <doTerminalCycle()>:
c000d42f:	83 ec 18             	sub    esp,0x18
c000d432:	a1 80 44 02 c0       	mov    eax,ds:0xc0024480
c000d437:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d43d:	50                   	push   eax
c000d43e:	a3 80 44 02 c0       	mov    ds:0xc0024480,eax
c000d443:	e8 35 ff ff ff       	call   c000d37d <setActiveTerminal(VgaText*)>
c000d448:	83 c4 1c             	add    esp,0x1c
c000d44b:	c3                   	ret    

c000d44c <VgaText::doUpdate()>:
c000d44c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d450:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d456:	85 c0                	test   eax,eax
c000d458:	74 02                	je     c000d45c <VgaText::doUpdate()+0x10>
c000d45a:	ff e0                	jmp    eax
c000d45c:	c3                   	ret    
c000d45d:	90                   	nop

c000d45e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d45e:	55                   	push   ebp
c000d45f:	57                   	push   edi
c000d460:	56                   	push   esi
c000d461:	53                   	push   ebx
c000d462:	83 ec 1c             	sub    esp,0x1c
c000d465:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d469:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d46e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d475:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d478:	50                   	push   eax
c000d479:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d47e:	50                   	push   eax
c000d47f:	e8 58 f9 ff ff       	call   c000cddc <VgaText::combineColours(unsigned char, unsigned char)>
c000d484:	59                   	pop    ecx
c000d485:	0f b6 c0             	movzx  eax,al
c000d488:	5b                   	pop    ebx
c000d489:	31 c9                	xor    ecx,ecx
c000d48b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d493:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d497:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d49d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4a1:	0f b7 db             	movzx  ebx,bx
c000d4a4:	01 db                	add    ebx,ebx
c000d4a6:	01 fb                	add    ebx,edi
c000d4a8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d4ab:	84 c0                	test   al,al
c000d4ad:	0f 84 38 01 00 00    	je     c000d5eb <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d4b3:	3c 0d                	cmp    al,0xd
c000d4b5:	75 0f                	jne    c000d4c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d4b7:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4c1:	e9 1f 01 00 00       	jmp    c000d5e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d4c6:	3c 0a                	cmp    al,0xa
c000d4c8:	75 5b                	jne    c000d525 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d4ca:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d4d0:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4da:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4dd:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4e3:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4e9:	75 12                	jne    c000d4fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4f4:	55                   	push   ebp
c000d4f5:	e8 f4 f8 ff ff       	call   c000cdee <VgaText::scrollScreen()>
c000d4fa:	83 c4 10             	add    esp,0x10
c000d4fd:	83 ec 0c             	sub    esp,0xc
c000d500:	55                   	push   ebp
c000d501:	e8 9a f7 ff ff       	call   c000cca0 <VgaText::updateCursor()>
c000d506:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d50e:	83 c4 10             	add    esp,0x10
c000d511:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d517:	31 c9                	xor    ecx,ecx
c000d519:	0f b7 db             	movzx  ebx,bx
c000d51c:	01 db                	add    ebx,ebx
c000d51e:	01 fb                	add    ebx,edi
c000d520:	e9 c0 00 00 00       	jmp    c000d5e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d525:	3c 08                	cmp    al,0x8
c000d527:	75 4e                	jne    c000d577 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d529:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d52d:	53                   	push   ebx
c000d52e:	53                   	push   ebx
c000d52f:	6a 01                	push   0x1
c000d531:	55                   	push   ebp
c000d532:	e8 df fc ff ff       	call   c000d216 <VgaText::decrementCursor(bool)>
c000d537:	58                   	pop    eax
c000d538:	5a                   	pop    edx
c000d539:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d53f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d545:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d54b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d551:	6a 20                	push   0x20
c000d553:	55                   	push   ebp
c000d554:	e8 3b f9 ff ff       	call   c000ce94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d559:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d561:	83 c4 20             	add    esp,0x20
c000d564:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d56a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d56e:	0f b7 db             	movzx  ebx,bx
c000d571:	01 db                	add    ebx,ebx
c000d573:	01 fb                	add    ebx,edi
c000d575:	eb 6e                	jmp    c000d5e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d577:	51                   	push   ecx
c000d578:	51                   	push   ecx
c000d579:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d57d:	50                   	push   eax
c000d57e:	e8 ff f8 ff ff       	call   c000ce82 <VgaText::combineCharAndColour(char, unsigned char)>
c000d583:	83 c4 10             	add    esp,0x10
c000d586:	66 89 03             	mov    WORD PTR [ebx],ax
c000d589:	39 2d 84 44 02 c0    	cmp    DWORD PTR ds:0xc0024484,ebp
c000d58f:	75 2a                	jne    c000d5bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d591:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d597:	85 c0                	test   eax,eax
c000d599:	74 20                	je     c000d5bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d59b:	52                   	push   edx
c000d59c:	52                   	push   edx
c000d59d:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d5a3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d5a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5b1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d5b4:	51                   	push   ecx
c000d5b5:	55                   	push   ebp
c000d5b6:	ff d0                	call   eax
c000d5b8:	83 c4 20             	add    esp,0x20
c000d5bb:	83 c3 02             	add    ebx,0x2
c000d5be:	50                   	push   eax
c000d5bf:	50                   	push   eax
c000d5c0:	6a 00                	push   0x0
c000d5c2:	55                   	push   ebp
c000d5c3:	e8 9a f9 ff ff       	call   c000cf62 <VgaText::incrementCursor(bool)>
c000d5c8:	83 c4 10             	add    esp,0x10
c000d5cb:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5d2:	75 0f                	jne    c000d5e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d5d4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5dc:	0f b7 db             	movzx  ebx,bx
c000d5df:	01 db                	add    ebx,ebx
c000d5e1:	01 fb                	add    ebx,edi
c000d5e3:	b1 01                	mov    cl,0x1
c000d5e5:	46                   	inc    esi
c000d5e6:	e9 bd fe ff ff       	jmp    c000d4a8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d5eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d5ef:	83 ec 0c             	sub    esp,0xc
c000d5f2:	55                   	push   ebp
c000d5f3:	e8 a8 f6 ff ff       	call   c000cca0 <VgaText::updateCursor()>
c000d5f8:	83 c4 10             	add    esp,0x10
c000d5fb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d5ff:	84 c9                	test   cl,cl
c000d601:	74 0c                	je     c000d60f <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d603:	83 ec 0c             	sub    esp,0xc
c000d606:	55                   	push   ebp
c000d607:	e8 40 fe ff ff       	call   c000d44c <VgaText::doUpdate()>
c000d60c:	83 c4 10             	add    esp,0x10
c000d60f:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d616:	83 c4 1c             	add    esp,0x1c
c000d619:	5b                   	pop    ebx
c000d61a:	5e                   	pop    esi
c000d61b:	5f                   	pop    edi
c000d61c:	5d                   	pop    ebp
c000d61d:	c3                   	ret    

c000d61e <VgaText::clearScreen()>:
c000d61e:	57                   	push   edi
c000d61f:	56                   	push   esi
c000d620:	31 f6                	xor    esi,esi
c000d622:	53                   	push   ebx
c000d623:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d627:	52                   	push   edx
c000d628:	6a 00                	push   0x0
c000d62a:	6a 00                	push   0x0
c000d62c:	53                   	push   ebx
c000d62d:	e8 da f8 ff ff       	call   c000cf0c <VgaText::setCursor(int, int)>
c000d632:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d642:	7e 26                	jle    c000d66a <VgaText::clearScreen()+0x4c>
c000d644:	31 ff                	xor    edi,edi
c000d646:	50                   	push   eax
c000d647:	50                   	push   eax
c000d648:	56                   	push   esi
c000d649:	57                   	push   edi
c000d64a:	47                   	inc    edi
c000d64b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d651:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d657:	6a 20                	push   0x20
c000d659:	53                   	push   ebx
c000d65a:	e8 35 f8 ff ff       	call   c000ce94 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d65f:	83 c4 20             	add    esp,0x20
c000d662:	83 ff 50             	cmp    edi,0x50
c000d665:	75 df                	jne    c000d646 <VgaText::clearScreen()+0x28>
c000d667:	46                   	inc    esi
c000d668:	eb d2                	jmp    c000d63c <VgaText::clearScreen()+0x1e>
c000d66a:	83 ec 0c             	sub    esp,0xc
c000d66d:	53                   	push   ebx
c000d66e:	e8 d9 fd ff ff       	call   c000d44c <VgaText::doUpdate()>
c000d673:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d67a:	83 c4 10             	add    esp,0x10
c000d67d:	5b                   	pop    ebx
c000d67e:	5e                   	pop    esi
c000d67f:	5f                   	pop    edi
c000d680:	c3                   	ret    
c000d681:	90                   	nop

c000d682 <VgaText::putchar(char)>:
c000d682:	56                   	push   esi
c000d683:	53                   	push   ebx
c000d684:	83 ec 14             	sub    esp,0x14
c000d687:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d68b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d68f:	3c 5b                	cmp    al,0x5b
c000d691:	75 21                	jne    c000d6b4 <VgaText::putchar(char)+0x32>
c000d693:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d69a:	74 28                	je     c000d6c4 <VgaText::putchar(char)+0x42>
c000d69c:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d6a5:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d6af:	e9 e2 00 00 00       	jmp    c000d796 <VgaText::putchar(char)+0x114>
c000d6b4:	3c 1b                	cmp    al,0x1b
c000d6b6:	75 0c                	jne    c000d6c4 <VgaText::putchar(char)+0x42>
c000d6b8:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d6bf:	e9 d2 00 00 00       	jmp    c000d796 <VgaText::putchar(char)+0x114>
c000d6c4:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d6ca:	84 c9                	test   cl,cl
c000d6cc:	0f 84 ab 00 00 00    	je     c000d77d <VgaText::putchar(char)+0xfb>
c000d6d2:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6d5:	80 fa 3e             	cmp    dl,0x3e
c000d6d8:	0f 87 82 00 00 00    	ja     c000d760 <VgaText::putchar(char)+0xde>
c000d6de:	3c 6d                	cmp    al,0x6d
c000d6e0:	75 4d                	jne    c000d72f <VgaText::putchar(char)+0xad>
c000d6e2:	31 f6                	xor    esi,esi
c000d6e4:	31 d2                	xor    edx,edx
c000d6e6:	31 c0                	xor    eax,eax
c000d6e8:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6ee:	7e 30                	jle    c000d720 <VgaText::putchar(char)+0x9e>
c000d6f0:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6f8:	80 fa 3b             	cmp    dl,0x3b
c000d6fb:	75 17                	jne    c000d714 <VgaText::putchar(char)+0x92>
c000d6fd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d701:	50                   	push   eax
c000d702:	53                   	push   ebx
c000d703:	e8 fc f5 ff ff       	call   c000cd04 <VgaText::doANSI_SGR(int)>
c000d708:	59                   	pop    ecx
c000d709:	31 d2                	xor    edx,edx
c000d70b:	58                   	pop    eax
c000d70c:	31 c0                	xor    eax,eax
c000d70e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d712:	eb 09                	jmp    c000d71d <VgaText::putchar(char)+0x9b>
c000d714:	6b c0 0a             	imul   eax,eax,0xa
c000d717:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d71b:	88 ca                	mov    dl,cl
c000d71d:	46                   	inc    esi
c000d71e:	eb c8                	jmp    c000d6e8 <VgaText::putchar(char)+0x66>
c000d720:	84 d2                	test   dl,dl
c000d722:	74 31                	je     c000d755 <VgaText::putchar(char)+0xd3>
c000d724:	50                   	push   eax
c000d725:	53                   	push   ebx
c000d726:	e8 d9 f5 ff ff       	call   c000cd04 <VgaText::doANSI_SGR(int)>
c000d72b:	58                   	pop    eax
c000d72c:	5a                   	pop    edx
c000d72d:	eb 26                	jmp    c000d755 <VgaText::putchar(char)+0xd3>
c000d72f:	3c 4a                	cmp    al,0x4a
c000d731:	75 22                	jne    c000d755 <VgaText::putchar(char)+0xd3>
c000d733:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d73a:	75 19                	jne    c000d755 <VgaText::putchar(char)+0xd3>
c000d73c:	83 ec 0c             	sub    esp,0xc
c000d73f:	53                   	push   ebx
c000d740:	e8 d9 fe ff ff       	call   c000d61e <VgaText::clearScreen()>
c000d745:	83 c4 0c             	add    esp,0xc
c000d748:	6a 00                	push   0x0
c000d74a:	6a 00                	push   0x0
c000d74c:	53                   	push   ebx
c000d74d:	e8 ba f7 ff ff       	call   c000cf0c <VgaText::setCursor(int, int)>
c000d752:	83 c4 10             	add    esp,0x10
c000d755:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d75e:	eb 36                	jmp    c000d796 <VgaText::putchar(char)+0x114>
c000d760:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d766:	83 fa 0e             	cmp    edx,0xe
c000d769:	7f 2b                	jg     c000d796 <VgaText::putchar(char)+0x114>
c000d76b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d76e:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d774:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d77b:	eb 19                	jmp    c000d796 <VgaText::putchar(char)+0x114>
c000d77d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d783:	0f be c0             	movsx  eax,al
c000d786:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d78c:	50                   	push   eax
c000d78d:	53                   	push   ebx
c000d78e:	e8 ab fa ff ff       	call   c000d23e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	83 c4 14             	add    esp,0x14
c000d799:	5b                   	pop    ebx
c000d79a:	5e                   	pop    esi
c000d79b:	c3                   	ret    

c000d79c <VgaText::puts(char const*)>:
c000d79c:	53                   	push   ebx
c000d79d:	83 ec 08             	sub    esp,0x8
c000d7a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d7a4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d7a7:	84 c0                	test   al,al
c000d7a9:	74 12                	je     c000d7bd <VgaText::puts(char const*)+0x21>
c000d7ab:	43                   	inc    ebx
c000d7ac:	51                   	push   ecx
c000d7ad:	51                   	push   ecx
c000d7ae:	50                   	push   eax
c000d7af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b3:	e8 ca fe ff ff       	call   c000d682 <VgaText::putchar(char)>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	eb e7                	jmp    c000d7a4 <VgaText::puts(char const*)+0x8>
c000d7bd:	83 c4 08             	add    esp,0x8
c000d7c0:	5b                   	pop    ebx
c000d7c1:	c3                   	ret    

c000d7c2 <VgaText::putx(unsigned int)>:
c000d7c2:	57                   	push   edi
c000d7c3:	b9 11 00 00 00       	mov    ecx,0x11
c000d7c8:	56                   	push   esi
c000d7c9:	be 62 11 02 c0       	mov    esi,0xc0021162
c000d7ce:	53                   	push   ebx
c000d7cf:	83 ec 20             	sub    esp,0x20
c000d7d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7d6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7da:	fc                   	cld    
c000d7db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7dd:	be 08 00 00 00       	mov    esi,0x8
c000d7e2:	50                   	push   eax
c000d7e3:	50                   	push   eax
c000d7e4:	89 d8                	mov    eax,ebx
c000d7e6:	c1 e3 04             	shl    ebx,0x4
c000d7e9:	c1 e8 1c             	shr    eax,0x1c
c000d7ec:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7f1:	50                   	push   eax
c000d7f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7f6:	e8 87 fe ff ff       	call   c000d682 <VgaText::putchar(char)>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	4e                   	dec    esi
c000d7ff:	75 e1                	jne    c000d7e2 <VgaText::putx(unsigned int)+0x20>
c000d801:	83 c4 20             	add    esp,0x20
c000d804:	5b                   	pop    ebx
c000d805:	5e                   	pop    esi
c000d806:	5f                   	pop    edi
c000d807:	c3                   	ret    

c000d808 <VgaText::VgaText(char const*)>:
c000d808:	57                   	push   edi
c000d809:	56                   	push   esi
c000d80a:	53                   	push   ebx
c000d80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80f:	83 ec 08             	sub    esp,0x8
c000d812:	6a 00                	push   0x0
c000d814:	50                   	push   eax
c000d815:	e8 4a 05 00 00       	call   c000dd64 <UnixFile::UnixFile(int)>
c000d81a:	83 c4 10             	add    esp,0x10
c000d81d:	ba c8 11 02 c0       	mov    edx,0xc00211c8
c000d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d826:	89 10                	mov    DWORD PTR [eax],edx
c000d828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82c:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83a:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d848:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d84f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d853:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85e:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86c:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d87a:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d885:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d890:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d896:	bb 60 44 02 c0       	mov    ebx,0xc0024460
c000d89b:	b8 08 00 00 00       	mov    eax,0x8
c000d8a0:	fc                   	cld    
c000d8a1:	89 d7                	mov    edi,edx
c000d8a3:	89 de                	mov    esi,ebx
c000d8a5:	89 c1                	mov    ecx,eax
c000d8a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ad:	05 1e 10 00 00       	add    eax,0x101e
c000d8b2:	83 ec 08             	sub    esp,0x8
c000d8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b9:	50                   	push   eax
c000d8ba:	e8 c6 2e ff ff       	call   c0000785 <strcpy>
c000d8bf:	83 c4 10             	add    esp,0x10
c000d8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c6:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8d4:	83 c0 0c             	add    eax,0xc
c000d8d7:	83 ec 04             	sub    esp,0x4
c000d8da:	68 00 0f 00 00       	push   0xf00
c000d8df:	6a 00                	push   0x0
c000d8e1:	50                   	push   eax
c000d8e2:	e8 ff 2d ff ff       	call   c00006e6 <memset>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	83 ec 04             	sub    esp,0x4
c000d8ed:	6a 00                	push   0x0
c000d8ef:	6a 07                	push   0x7
c000d8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f5:	e8 c2 f4 ff ff       	call   c000cdbc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	83 ec 08             	sub    esp,0x8
c000d900:	6a 02                	push   0x2
c000d902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d906:	e8 49 fa ff ff       	call   c000d354 <VgaText::setCursorHeight(int)>
c000d90b:	83 c4 10             	add    esp,0x10
c000d90e:	83 ec 04             	sub    esp,0x4
c000d911:	6a 00                	push   0x0
c000d913:	6a 00                	push   0x0
c000d915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d919:	e8 ee f5 ff ff       	call   c000cf0c <VgaText::setCursor(int, int)>
c000d91e:	83 c4 10             	add    esp,0x10
c000d921:	83 ec 08             	sub    esp,0x8
c000d924:	6a 01                	push   0x1
c000d926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d92a:	e8 8b f3 ff ff       	call   c000ccba <VgaText::showCursor(bool)>
c000d92f:	83 c4 10             	add    esp,0x10
c000d932:	83 ec 08             	sub    esp,0x8
c000d935:	6a 01                	push   0x1
c000d937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93b:	e8 8a f3 ff ff       	call   c000ccca <VgaText::disableBlink(bool)>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	83 ec 0c             	sub    esp,0xc
c000d946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d94a:	e8 cf fc ff ff       	call   c000d61e <VgaText::clearScreen()>
c000d94f:	83 c4 10             	add    esp,0x10
c000d952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d956:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d961:	05 9e 10 00 00       	add    eax,0x109e
c000d966:	83 ec 04             	sub    esp,0x4
c000d969:	68 96 00 00 00       	push   0x96
c000d96e:	6a 00                	push   0x0
c000d970:	50                   	push   eax
c000d971:	e8 70 2d ff ff       	call   c00006e6 <memset>
c000d976:	83 c4 10             	add    esp,0x10
c000d979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d97d:	05 34 11 00 00       	add    eax,0x1134
c000d982:	83 ec 04             	sub    esp,0x4
c000d985:	68 2c 01 00 00       	push   0x12c
c000d98a:	6a 00                	push   0x0
c000d98c:	50                   	push   eax
c000d98d:	e8 54 2d ff ff       	call   c00006e6 <memset>
c000d992:	83 c4 10             	add    esp,0x10
c000d995:	90                   	nop
c000d996:	5b                   	pop    ebx
c000d997:	5e                   	pop    esi
c000d998:	5f                   	pop    edi
c000d999:	c3                   	ret    

c000d99a <VgaText::receiveKey(unsigned char)>:
c000d99a:	55                   	push   ebp
c000d99b:	57                   	push   edi
c000d99c:	56                   	push   esi
c000d99d:	53                   	push   ebx
c000d99e:	83 ec 1c             	sub    esp,0x1c
c000d9a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d9a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d9a9:	84 db                	test   bl,bl
c000d9ab:	0f 84 c9 00 00 00    	je     c000da7a <VgaText::receiveKey(unsigned char)+0xe0>
c000d9b1:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d9b7:	80 fb 08             	cmp    bl,0x8
c000d9ba:	75 2c                	jne    c000d9e8 <VgaText::receiveKey(unsigned char)+0x4e>
c000d9bc:	83 ec 0c             	sub    esp,0xc
c000d9bf:	57                   	push   edi
c000d9c0:	e8 3e 2d ff ff       	call   c0000703 <strlen>
c000d9c5:	83 c4 10             	add    esp,0x10
c000d9c8:	85 c0                	test   eax,eax
c000d9ca:	74 41                	je     c000da0d <VgaText::receiveKey(unsigned char)+0x73>
c000d9cc:	50                   	push   eax
c000d9cd:	50                   	push   eax
c000d9ce:	6a 08                	push   0x8
c000d9d0:	56                   	push   esi
c000d9d1:	e8 ac fc ff ff       	call   c000d682 <VgaText::putchar(char)>
c000d9d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9d9:	e8 25 2d ff ff       	call   c0000703 <strlen>
c000d9de:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9e6:	eb 22                	jmp    c000da0a <VgaText::receiveKey(unsigned char)+0x70>
c000d9e8:	0f be c3             	movsx  eax,bl
c000d9eb:	52                   	push   edx
c000d9ec:	52                   	push   edx
c000d9ed:	50                   	push   eax
c000d9ee:	56                   	push   esi
c000d9ef:	e8 8e fc ff ff       	call   c000d682 <VgaText::putchar(char)>
c000d9f4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9fd:	59                   	pop    ecx
c000d9fe:	5d                   	pop    ebp
c000d9ff:	8d 44 24 16          	lea    eax,[esp+0x16]
c000da03:	50                   	push   eax
c000da04:	57                   	push   edi
c000da05:	e8 32 2e ff ff       	call   c000083c <strcat>
c000da0a:	83 c4 10             	add    esp,0x10
c000da0d:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000da14:	75 05                	jne    c000da1b <VgaText::receiveKey(unsigned char)+0x81>
c000da16:	80 fb 0a             	cmp    bl,0xa
c000da19:	75 53                	jne    c000da6e <VgaText::receiveKey(unsigned char)+0xd4>
c000da1b:	83 ec 0c             	sub    esp,0xc
c000da1e:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000da24:	53                   	push   ebx
c000da25:	e8 d9 2c ff ff       	call   c0000703 <strlen>
c000da2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da2d:	89 c5                	mov    ebp,eax
c000da2f:	e8 cf 2c ff ff       	call   c0000703 <strlen>
c000da34:	83 c4 10             	add    esp,0x10
c000da37:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da3b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da40:	76 10                	jbe    c000da52 <VgaText::receiveKey(unsigned char)+0xb8>
c000da42:	83 ec 0c             	sub    esp,0xc
c000da45:	68 73 11 02 c0       	push   0xc0021173
c000da4a:	e8 d1 7e 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	50                   	push   eax
c000da53:	50                   	push   eax
c000da54:	57                   	push   edi
c000da55:	53                   	push   ebx
c000da56:	e8 e1 2d ff ff       	call   c000083c <strcat>
c000da5b:	83 c4 0c             	add    esp,0xc
c000da5e:	68 96 00 00 00       	push   0x96
c000da63:	6a 00                	push   0x0
c000da65:	57                   	push   edi
c000da66:	e8 7b 2c ff ff       	call   c00006e6 <memset>
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	83 ec 0c             	sub    esp,0xc
c000da71:	56                   	push   esi
c000da72:	e8 d5 f9 ff ff       	call   c000d44c <VgaText::doUpdate()>
c000da77:	83 c4 10             	add    esp,0x10
c000da7a:	83 c4 1c             	add    esp,0x1c
c000da7d:	5b                   	pop    ebx
c000da7e:	5e                   	pop    esi
c000da7f:	5f                   	pop    edi
c000da80:	5d                   	pop    ebp
c000da81:	c3                   	ret    

c000da82 <VgaText::write(unsigned long long, void*, int*)>:
c000da82:	55                   	push   ebp
c000da83:	57                   	push   edi
c000da84:	56                   	push   esi
c000da85:	53                   	push   ebx
c000da86:	83 ec 0c             	sub    esp,0xc
c000da89:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da8d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da91:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da95:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da9c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da9f:	39 eb                	cmp    ebx,ebp
c000daa1:	74 13                	je     c000dab6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000daa3:	43                   	inc    ebx
c000daa4:	50                   	push   eax
c000daa5:	50                   	push   eax
c000daa6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000daaa:	50                   	push   eax
c000daab:	56                   	push   esi
c000daac:	e8 d1 fb ff ff       	call   c000d682 <VgaText::putchar(char)>
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	eb e9                	jmp    c000da9f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000dab6:	83 ec 0c             	sub    esp,0xc
c000dab9:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000dac0:	56                   	push   esi
c000dac1:	e8 86 f9 ff ff       	call   c000d44c <VgaText::doUpdate()>
c000dac6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000daca:	89 38                	mov    DWORD PTR [eax],edi
c000dacc:	83 c4 1c             	add    esp,0x1c
c000dacf:	31 c0                	xor    eax,eax
c000dad1:	5b                   	pop    ebx
c000dad2:	5e                   	pop    esi
c000dad3:	5f                   	pop    edi
c000dad4:	5d                   	pop    ebp
c000dad5:	c3                   	ret    

c000dad6 <newTerminal(char*)>:
c000dad6:	83 ec 28             	sub    esp,0x28
c000dad9:	68 60 12 00 00       	push   0x1260
c000dade:	e8 67 15 00 00       	call   c000f04a <operator new(unsigned long)>
c000dae3:	5a                   	pop    edx
c000dae4:	59                   	pop    ecx
c000dae5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dae9:	50                   	push   eax
c000daea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000daee:	e8 15 fd ff ff       	call   c000d808 <VgaText::VgaText(char const*)>
c000daf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000daf7:	83 c4 2c             	add    esp,0x2c
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <TSS::TSS()>:
c000dafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db07:	90                   	nop
c000db08:	c3                   	ret    
c000db09:	90                   	nop

c000db0a <TSS::setESP(unsigned long)>:
c000db0a:	55                   	push   ebp
c000db0b:	89 e5                	mov    ebp,esp
c000db0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db19:	90                   	nop
c000db1a:	5d                   	pop    ebp
c000db1b:	c3                   	ret    

c000db1c <TSS::flush()>:
c000db1c:	55                   	push   ebp
c000db1d:	89 e5                	mov    ebp,esp
c000db1f:	83 ec 10             	sub    esp,0x10
c000db22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db25:	8b 00                	mov    eax,DWORD PTR [eax]
c000db27:	83 c8 03             	or     eax,0x3
c000db2a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db2e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db32:	66 89 d0             	mov    ax,dx
c000db35:	0f 00 d8             	ltr    ax
c000db38:	90                   	nop
c000db39:	c9                   	leave  
c000db3a:	c3                   	ret    
c000db3b:	90                   	nop

c000db3c <TSS::setup(unsigned long, unsigned long)>:
c000db3c:	55                   	push   ebp
c000db3d:	89 e5                	mov    ebp,esp
c000db3f:	53                   	push   ebx
c000db40:	83 ec 14             	sub    esp,0x14
c000db43:	83 ec 0c             	sub    esp,0xc
c000db46:	6a 68                	push   0x68
c000db48:	e8 fb e4 ff ff       	call   c000c048 <malloc>
c000db4d:	83 c4 10             	add    esp,0x10
c000db50:	89 c2                	mov    edx,eax
c000db52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	83 ec 04             	sub    esp,0x4
c000db61:	6a 68                	push   0x68
c000db63:	6a 00                	push   0x0
c000db65:	50                   	push   eax
c000db66:	e8 7b 2b ff ff       	call   c00006e6 <memset>
c000db6b:	83 c4 10             	add    esp,0x10
c000db6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db74:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db80:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db98:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba4:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000dbaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb0:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000dbb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbbc:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dbc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dbcb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dbce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbd4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dbd7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbe0:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbea:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbed:	e8 e3 18 01 00       	call   c001f4d5 <CPU::readCR3()>
c000dbf2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbfb:	83 ec 08             	sub    esp,0x8
c000dbfe:	50                   	push   eax
c000dbff:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dc02:	50                   	push   eax
c000dc03:	e8 16 dc ff ff       	call   c000b81e <GDTEntry::setBase(unsigned int)>
c000dc08:	83 c4 10             	add    esp,0x10
c000dc0b:	83 ec 08             	sub    esp,0x8
c000dc0e:	6a 68                	push   0x68
c000dc10:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dc13:	50                   	push   eax
c000dc14:	e8 21 dc ff ff       	call   c000b83a <GDTEntry::setLimit(unsigned int)>
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dc20:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc23:	83 e0 0f             	and    eax,0xf
c000dc26:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc29:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc2c:	83 c8 40             	or     eax,0x40
c000dc2f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc32:	e8 69 6b 00 00       	call   c00147a0 <thisCPU()>
c000dc37:	05 78 01 00 00       	add    eax,0x178
c000dc3c:	83 ec 04             	sub    esp,0x4
c000dc3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc42:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc45:	50                   	push   eax
c000dc46:	e8 23 dc ff ff       	call   c000b86e <GDT::addEntry(GDTEntry)>
c000dc4b:	83 c4 10             	add    esp,0x10
c000dc4e:	89 c2                	mov    edx,eax
c000dc50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc53:	89 10                	mov    DWORD PTR [eax],edx
c000dc55:	e8 46 6b 00 00       	call   c00147a0 <thisCPU()>
c000dc5a:	05 78 01 00 00       	add    eax,0x178
c000dc5f:	83 ec 0c             	sub    esp,0xc
c000dc62:	50                   	push   eax
c000dc63:	e8 4a dc ff ff       	call   c000b8b2 <GDT::flush()>
c000dc68:	83 c4 10             	add    esp,0x10
c000dc6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc6e:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc70:	83 ec 08             	sub    esp,0x8
c000dc73:	50                   	push   eax
c000dc74:	68 dc 11 02 c0       	push   0xc00211dc
c000dc79:	e8 bb 14 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc84:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc86:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc89:	c9                   	leave  
c000dc8a:	c3                   	ret    
c000dc8b:	90                   	nop

c000dc8c <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc97:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc9c:	75 08                	jne    c000dca6 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc9e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dca4:	eb 38                	jmp    c000dcde <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dca6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dcab:	75 17                	jne    c000dcc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dcad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcb5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcbb:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcc1:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dcc4:	89 c1                	mov    ecx,eax
c000dcc6:	83 e1 fd             	and    ecx,0xfffffffd
c000dcc9:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dccf:	74 cd                	je     c000dc9e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcd1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcd6:	83 e0 ef             	and    eax,0xffffffef
c000dcd9:	83 f8 08             	cmp    eax,0x8
c000dcdc:	76 c0                	jbe    c000dc9e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcde:	31 c0                	xor    eax,eax
c000dce0:	c3                   	ret    
c000dce1:	90                   	nop

c000dce2 <ReservedFilename::isAtty()>:
c000dce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dce6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dce9:	31 c0                	xor    eax,eax
c000dceb:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcf1:	74 09                	je     c000dcfc <ReservedFilename::isAtty()+0x1a>
c000dcf3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dcf9:	0f 94 c0             	sete   al
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd02:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dd06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dd0d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd12:	75 08                	jne    c000dd1c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dd14:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dd1a:	eb 3d                	jmp    c000dd59 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd21:	75 17                	jne    c000dd3a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dd23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd2b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd31:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd37:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dd3a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd3f:	75 04                	jne    c000dd45 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dd41:	89 0a                	mov    DWORD PTR [edx],ecx
c000dd43:	eb 14                	jmp    c000dd59 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd45:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd4a:	74 c8                	je     c000dd14 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd4c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd51:	83 e0 ef             	and    eax,0xffffffef
c000dd54:	83 f8 08             	cmp    eax,0x8
c000dd57:	76 bb                	jbe    c000dd14 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd59:	31 c0                	xor    eax,eax
c000dd5b:	c3                   	ret    

c000dd5c <UnixFile::getFileDescriptor()>:
c000dd5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd63:	c3                   	ret    

c000dd64 <UnixFile::UnixFile(int)>:
c000dd64:	53                   	push   ebx
c000dd65:	83 ec 18             	sub    esp,0x18
c000dd68:	ba c8 12 02 c0       	mov    edx,0xc00212c8
c000dd6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd71:	89 10                	mov    DWORD PTR [eax],edx
c000dd73:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd7b:	0f 8f 4d 01 00 00    	jg     c000dece <UnixFile::UnixFile(int)+0x16a>
c000dd81:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c000dd86:	8d 50 01             	lea    edx,[eax+0x1]
c000dd89:	89 15 60 38 02 c0    	mov    DWORD PTR ds:0xc0023860,edx
c000dd8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd93:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd96:	83 ec 08             	sub    esp,0x8
c000dd99:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd9d:	68 18 45 02 c0       	push   0xc0024518
c000dda2:	e8 a3 17 01 00       	call   c001f54a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dda7:	83 c4 10             	add    esp,0x10
c000ddaa:	a0 14 45 02 c0       	mov    al,ds:0xc0024514
c000ddaf:	83 f0 01             	xor    eax,0x1
c000ddb2:	84 c0                	test   al,al
c000ddb4:	0f 84 15 01 00 00    	je     c000decf <UnixFile::UnixFile(int)+0x16b>
c000ddba:	c6 05 14 45 02 c0 01 	mov    BYTE PTR ds:0xc0024514,0x1
c000ddc1:	83 ec 0c             	sub    esp,0xc
c000ddc4:	6a 0c                	push   0xc
c000ddc6:	e8 7f 12 00 00       	call   c000f04a <operator new(unsigned long)>
c000ddcb:	83 c4 10             	add    esp,0x10
c000ddce:	89 c3                	mov    ebx,eax
c000ddd0:	83 ec 08             	sub    esp,0x8
c000ddd3:	68 03 ff ff 0f       	push   0xfffff03
c000ddd8:	53                   	push   ebx
c000ddd9:	e8 f6 00 00 00       	call   c000ded4 <ReservedFilename::ReservedFilename(int)>
c000ddde:	83 c4 10             	add    esp,0x10
c000dde1:	89 1d 0c 45 02 c0    	mov    DWORD PTR ds:0xc002450c,ebx
c000dde7:	83 ec 0c             	sub    esp,0xc
c000ddea:	6a 0c                	push   0xc
c000ddec:	e8 59 12 00 00       	call   c000f04a <operator new(unsigned long)>
c000ddf1:	83 c4 10             	add    esp,0x10
c000ddf4:	89 c3                	mov    ebx,eax
c000ddf6:	83 ec 08             	sub    esp,0x8
c000ddf9:	68 01 ff ff 0f       	push   0xfffff01
c000ddfe:	53                   	push   ebx
c000ddff:	e8 d0 00 00 00       	call   c000ded4 <ReservedFilename::ReservedFilename(int)>
c000de04:	83 c4 10             	add    esp,0x10
c000de07:	89 1d 10 45 02 c0    	mov    DWORD PTR ds:0xc0024510,ebx
c000de0d:	83 ec 0c             	sub    esp,0xc
c000de10:	6a 0c                	push   0xc
c000de12:	e8 33 12 00 00       	call   c000f04a <operator new(unsigned long)>
c000de17:	83 c4 10             	add    esp,0x10
c000de1a:	89 c3                	mov    ebx,eax
c000de1c:	83 ec 08             	sub    esp,0x8
c000de1f:	68 00 ff ff 0f       	push   0xfffff00
c000de24:	53                   	push   ebx
c000de25:	e8 aa 00 00 00       	call   c000ded4 <ReservedFilename::ReservedFilename(int)>
c000de2a:	83 c4 10             	add    esp,0x10
c000de2d:	89 1d 04 45 02 c0    	mov    DWORD PTR ds:0xc0024504,ebx
c000de33:	83 ec 0c             	sub    esp,0xc
c000de36:	6a 0c                	push   0xc
c000de38:	e8 0d 12 00 00       	call   c000f04a <operator new(unsigned long)>
c000de3d:	83 c4 10             	add    esp,0x10
c000de40:	89 c3                	mov    ebx,eax
c000de42:	83 ec 08             	sub    esp,0x8
c000de45:	68 02 ff ff 0f       	push   0xfffff02
c000de4a:	53                   	push   ebx
c000de4b:	e8 84 00 00 00       	call   c000ded4 <ReservedFilename::ReservedFilename(int)>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 1d 08 45 02 c0    	mov    DWORD PTR ds:0xc0024508,ebx
c000de59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de61:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de66:	7f 67                	jg     c000decf <UnixFile::UnixFile(int)+0x16b>
c000de68:	83 ec 0c             	sub    esp,0xc
c000de6b:	6a 0c                	push   0xc
c000de6d:	e8 d8 11 00 00       	call   c000f04a <operator new(unsigned long)>
c000de72:	83 c4 10             	add    esp,0x10
c000de75:	89 c3                	mov    ebx,eax
c000de77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de7b:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de80:	83 ec 08             	sub    esp,0x8
c000de83:	50                   	push   eax
c000de84:	53                   	push   ebx
c000de85:	e8 4a 00 00 00       	call   c000ded4 <ReservedFilename::ReservedFilename(int)>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de91:	89 1c 85 e0 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb20],ebx
c000de98:	83 ec 0c             	sub    esp,0xc
c000de9b:	6a 0c                	push   0xc
c000de9d:	e8 a8 11 00 00       	call   c000f04a <operator new(unsigned long)>
c000dea2:	83 c4 10             	add    esp,0x10
c000dea5:	89 c3                	mov    ebx,eax
c000dea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deab:	05 20 ff ff 0f       	add    eax,0xfffff20
c000deb0:	83 ec 08             	sub    esp,0x8
c000deb3:	50                   	push   eax
c000deb4:	53                   	push   ebx
c000deb5:	e8 1a 00 00 00       	call   c000ded4 <ReservedFilename::ReservedFilename(int)>
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dec1:	89 1c 85 a0 44 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbb60],ebx
c000dec8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000decc:	eb 93                	jmp    c000de61 <UnixFile::UnixFile(int)+0xfd>
c000dece:	90                   	nop
c000decf:	83 c4 18             	add    esp,0x18
c000ded2:	5b                   	pop    ebx
c000ded3:	c3                   	ret    

c000ded4 <ReservedFilename::ReservedFilename(int)>:
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedb:	83 ec 08             	sub    esp,0x8
c000dede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee2:	50                   	push   eax
c000dee3:	e8 7c fe ff ff       	call   c000dd64 <UnixFile::UnixFile(int)>
c000dee8:	83 c4 10             	add    esp,0x10
c000deeb:	ba e4 12 02 c0       	mov    edx,0xc00212e4
c000def0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def4:	89 10                	mov    DWORD PTR [eax],edx
c000def6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000defe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df01:	90                   	nop
c000df02:	83 c4 0c             	add    esp,0xc
c000df05:	c3                   	ret    

c000df06 <UnixFile::~UnixFile()>:
c000df06:	83 ec 1c             	sub    esp,0x1c
c000df09:	ba c8 12 02 c0       	mov    edx,0xc00212c8
c000df0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df12:	89 10                	mov    DWORD PTR [eax],edx
c000df14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df1b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df20:	7f 73                	jg     c000df95 <UnixFile::~UnixFile()+0x8f>
c000df22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df2a:	83 ec 0c             	sub    esp,0xc
c000df2d:	68 18 45 02 c0       	push   0xc0024518
c000df32:	e8 e7 16 01 00       	call   c001f61e <LinkedList<UnixFile>::getFirstElement()>
c000df37:	83 c4 10             	add    esp,0x10
c000df3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df3e:	83 ec 0c             	sub    esp,0xc
c000df41:	68 18 45 02 c0       	push   0xc0024518
c000df46:	e8 db 16 01 00       	call   c001f626 <LinkedList<UnixFile>::removeFirst()>
c000df4b:	83 c4 10             	add    esp,0x10
c000df4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df52:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df56:	74 40                	je     c000df98 <UnixFile::~UnixFile()+0x92>
c000df58:	83 ec 08             	sub    esp,0x8
c000df5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df5f:	68 18 45 02 c0       	push   0xc0024518
c000df64:	e8 e1 15 01 00       	call   c001f54a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df70:	8d 50 01             	lea    edx,[eax+0x1]
c000df73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df77:	3d 88 13 00 00       	cmp    eax,0x1388
c000df7c:	0f 94 c0             	sete   al
c000df7f:	84 c0                	test   al,al
c000df81:	74 a7                	je     c000df2a <UnixFile::~UnixFile()+0x24>
c000df83:	83 ec 0c             	sub    esp,0xc
c000df86:	68 a0 12 02 c0       	push   0xc00212a0
c000df8b:	e8 90 79 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000df90:	83 c4 10             	add    esp,0x10
c000df93:	eb 95                	jmp    c000df2a <UnixFile::~UnixFile()+0x24>
c000df95:	90                   	nop
c000df96:	eb 01                	jmp    c000df99 <UnixFile::~UnixFile()+0x93>
c000df98:	90                   	nop
c000df99:	90                   	nop
c000df9a:	83 c4 1c             	add    esp,0x1c
c000df9d:	c3                   	ret    

c000df9e <UnixFile::~UnixFile()>:
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	83 ec 0c             	sub    esp,0xc
c000dfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa8:	e8 59 ff ff ff       	call   c000df06 <UnixFile::~UnixFile()>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	83 ec 08             	sub    esp,0x8
c000dfb3:	6a 0c                	push   0xc
c000dfb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb9:	e8 9b 10 00 00       	call   c000f059 <operator delete(void*, unsigned long)>
c000dfbe:	83 c4 10             	add    esp,0x10
c000dfc1:	83 c4 0c             	add    esp,0xc
c000dfc4:	c3                   	ret    
c000dfc5:	90                   	nop

c000dfc6 <ReservedFilename::~ReservedFilename()>:
c000dfc6:	83 ec 0c             	sub    esp,0xc
c000dfc9:	ba e4 12 02 c0       	mov    edx,0xc00212e4
c000dfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd2:	89 10                	mov    DWORD PTR [eax],edx
c000dfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd8:	83 ec 0c             	sub    esp,0xc
c000dfdb:	50                   	push   eax
c000dfdc:	e8 25 ff ff ff       	call   c000df06 <UnixFile::~UnixFile()>
c000dfe1:	83 c4 10             	add    esp,0x10
c000dfe4:	90                   	nop
c000dfe5:	83 c4 0c             	add    esp,0xc
c000dfe8:	c3                   	ret    
c000dfe9:	90                   	nop

c000dfea <ReservedFilename::~ReservedFilename()>:
c000dfea:	83 ec 0c             	sub    esp,0xc
c000dfed:	83 ec 0c             	sub    esp,0xc
c000dff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff4:	e8 cd ff ff ff       	call   c000dfc6 <ReservedFilename::~ReservedFilename()>
c000dff9:	83 c4 10             	add    esp,0x10
c000dffc:	83 ec 08             	sub    esp,0x8
c000dfff:	6a 0c                	push   0xc
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 4f 10 00 00       	call   c000f059 <operator delete(void*, unsigned long)>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	83 c4 0c             	add    esp,0xc
c000e010:	c3                   	ret    

c000e011 <getFromFileDescriptor(int)>:
c000e011:	53                   	push   ebx
c000e012:	83 ec 08             	sub    esp,0x8
c000e015:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e019:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e01f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e025:	7f 2c                	jg     c000e053 <getFromFileDescriptor(int)+0x42>
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	68 18 45 02 c0       	push   0xc0024518
c000e02f:	e8 ea 15 01 00       	call   c001f61e <LinkedList<UnixFile>::getFirstElement()>
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	85 c0                	test   eax,eax
c000e039:	75 04                	jne    c000e03f <getFromFileDescriptor(int)+0x2e>
c000e03b:	31 c0                	xor    eax,eax
c000e03d:	eb 6e                	jmp    c000e0ad <getFromFileDescriptor(int)+0x9c>
c000e03f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e042:	74 69                	je     c000e0ad <getFromFileDescriptor(int)+0x9c>
c000e044:	52                   	push   edx
c000e045:	52                   	push   edx
c000e046:	50                   	push   eax
c000e047:	68 18 45 02 c0       	push   0xc0024518
c000e04c:	e8 77 16 01 00       	call   c001f6c8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e051:	eb e1                	jmp    c000e034 <getFromFileDescriptor(int)+0x23>
c000e053:	a1 0c 45 02 c0       	mov    eax,ds:0xc002450c
c000e058:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e05e:	74 4d                	je     c000e0ad <getFromFileDescriptor(int)+0x9c>
c000e060:	a1 10 45 02 c0       	mov    eax,ds:0xc0024510
c000e065:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e06b:	74 40                	je     c000e0ad <getFromFileDescriptor(int)+0x9c>
c000e06d:	a1 08 45 02 c0       	mov    eax,ds:0xc0024508
c000e072:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e078:	74 33                	je     c000e0ad <getFromFileDescriptor(int)+0x9c>
c000e07a:	a1 04 45 02 c0       	mov    eax,ds:0xc0024504
c000e07f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e085:	74 26                	je     c000e0ad <getFromFileDescriptor(int)+0x9c>
c000e087:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e08d:	83 f8 08             	cmp    eax,0x8
c000e090:	77 09                	ja     c000e09b <getFromFileDescriptor(int)+0x8a>
c000e092:	8b 04 85 e0 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbb20]
c000e099:	eb 12                	jmp    c000e0ad <getFromFileDescriptor(int)+0x9c>
c000e09b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e0a1:	83 fb 08             	cmp    ebx,0x8
c000e0a4:	77 95                	ja     c000e03b <getFromFileDescriptor(int)+0x2a>
c000e0a6:	8b 04 9d a0 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbb60]
c000e0ad:	83 c4 08             	add    esp,0x8
c000e0b0:	5b                   	pop    ebx
c000e0b1:	c3                   	ret    

c000e0b2 <__static_initialization_and_destruction_0(int, int)>:
c000e0b2:	83 ec 0c             	sub    esp,0xc
c000e0b5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e0ba:	75 34                	jne    c000e0f0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e0c4:	75 2a                	jne    c000e0f0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e0c6:	83 ec 0c             	sub    esp,0xc
c000e0c9:	68 18 45 02 c0       	push   0xc0024518
c000e0ce:	e8 1f 14 01 00       	call   c001f4f2 <LinkedList<UnixFile>::LinkedList()>
c000e0d3:	83 c4 10             	add    esp,0x10
c000e0d6:	83 ec 04             	sub    esp,0x4
c000e0d9:	68 e8 37 02 c0       	push   0xc00237e8
c000e0de:	68 18 45 02 c0       	push   0xc0024518
c000e0e3:	68 f0 f4 01 c0       	push   0xc001f4f0
c000e0e8:	e8 e8 0e 00 00       	call   c000efd5 <__cxa_atexit>
c000e0ed:	83 c4 10             	add    esp,0x10
c000e0f0:	90                   	nop
c000e0f1:	83 c4 0c             	add    esp,0xc
c000e0f4:	c3                   	ret    

c000e0f5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0f5:	83 ec 0c             	sub    esp,0xc
c000e0f8:	83 ec 08             	sub    esp,0x8
c000e0fb:	68 ff ff 00 00       	push   0xffff
c000e100:	6a 01                	push   0x1
c000e102:	e8 ab ff ff ff       	call   c000e0b2 <__static_initialization_and_destruction_0(int, int)>
c000e107:	83 c4 10             	add    esp,0x10
c000e10a:	83 c4 0c             	add    esp,0xc
c000e10d:	c3                   	ret    

c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e10e:	53                   	push   ebx
c000e10f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e113:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e117:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e11d:	89 c8                	mov    eax,ecx
c000e11f:	d1 e8                	shr    eax,1
c000e121:	03 05 68 38 02 c0    	add    eax,DWORD PTR ds:0xc0023868
c000e127:	83 e1 01             	and    ecx,0x1
c000e12a:	8a 10                	mov    dl,BYTE PTR [eax]
c000e12c:	75 09                	jne    c000e137 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000e12e:	83 e2 f0             	and    edx,0xfffffff0
c000e131:	09 da                	or     edx,ebx
c000e133:	88 10                	mov    BYTE PTR [eax],dl
c000e135:	5b                   	pop    ebx
c000e136:	c3                   	ret    
c000e137:	c1 e3 04             	shl    ebx,0x4
c000e13a:	83 e2 0f             	and    edx,0xf
c000e13d:	09 da                	or     edx,ebx
c000e13f:	88 10                	mov    BYTE PTR [eax],dl
c000e141:	5b                   	pop    ebx
c000e142:	c3                   	ret    

c000e143 <Virt::getPageState(unsigned long)>:
c000e143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e147:	8b 0d 68 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023868
c000e14d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e153:	89 d0                	mov    eax,edx
c000e155:	d1 e8                	shr    eax,1
c000e157:	83 e2 01             	and    edx,0x1
c000e15a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000e15d:	75 04                	jne    c000e163 <Virt::getPageState(unsigned long)+0x20>
c000e15f:	83 e0 0f             	and    eax,0xf
c000e162:	c3                   	ret    
c000e163:	c0 e8 04             	shr    al,0x4
c000e166:	c3                   	ret    

c000e167 <Virt::allocateKernelVirtualPages(int)>:
c000e167:	55                   	push   ebp
c000e168:	31 ed                	xor    ebp,ebp
c000e16a:	57                   	push   edi
c000e16b:	56                   	push   esi
c000e16c:	53                   	push   ebx
c000e16d:	31 db                	xor    ebx,ebx
c000e16f:	83 ec 1c             	sub    esp,0x1c
c000e172:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e176:	8b 3d 64 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023864
c000e17c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e181:	57                   	push   edi
c000e182:	e8 bc ff ff ff       	call   c000e143 <Virt::getPageState(unsigned long)>
c000e187:	5a                   	pop    edx
c000e188:	84 c0                	test   al,al
c000e18a:	75 3a                	jne    c000e1c6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e18c:	85 db                	test   ebx,ebx
c000e18e:	75 02                	jne    c000e192 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e190:	89 fd                	mov    ebp,edi
c000e192:	43                   	inc    ebx
c000e193:	39 f3                	cmp    ebx,esi
c000e195:	74 5a                	je     c000e1f1 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e197:	47                   	inc    edi
c000e198:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e19e:	76 31                	jbe    c000e1d1 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e1a0:	c7 05 64 38 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023864,0xc8000
c000e1aa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e1af:	75 28                	jne    c000e1d9 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e1b1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e1b6:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e1bb:	57                   	push   edi
c000e1bc:	e8 82 ff ff ff       	call   c000e143 <Virt::getPageState(unsigned long)>
c000e1c1:	5a                   	pop    edx
c000e1c2:	84 c0                	test   al,al
c000e1c4:	74 c6                	je     c000e18c <Virt::allocateKernelVirtualPages(int)+0x25>
c000e1c6:	31 db                	xor    ebx,ebx
c000e1c8:	47                   	inc    edi
c000e1c9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1cf:	77 cf                	ja     c000e1a0 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1d1:	89 3d 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,edi
c000e1d7:	eb a8                	jmp    c000e181 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1d9:	83 ec 0c             	sub    esp,0xc
c000e1dc:	68 f8 12 02 c0       	push   0xc00212f8
c000e1e1:	e8 3a 77 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000e1e6:	8b 3d 64 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023864
c000e1ec:	83 c4 10             	add    esp,0x10
c000e1ef:	eb 90                	jmp    c000e181 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1f1:	89 2d 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,ebp
c000e1f7:	4b                   	dec    ebx
c000e1f8:	74 5f                	je     c000e259 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1fa:	85 f6                	test   esi,esi
c000e1fc:	74 3d                	je     c000e23b <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1fe:	89 e8                	mov    eax,ebp
c000e200:	31 db                	xor    ebx,ebx
c000e202:	8d 7e ff             	lea    edi,[esi-0x1]
c000e205:	eb 14                	jmp    c000e21b <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e207:	6a 01                	push   0x1
c000e209:	43                   	inc    ebx
c000e20a:	50                   	push   eax
c000e20b:	e8 fe fe ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e210:	58                   	pop    eax
c000e211:	39 f3                	cmp    ebx,esi
c000e213:	5a                   	pop    edx
c000e214:	74 25                	je     c000e23b <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e216:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c000e21b:	8d 50 01             	lea    edx,[eax+0x1]
c000e21e:	85 db                	test   ebx,ebx
c000e220:	89 15 64 38 02 c0    	mov    DWORD PTR ds:0xc0023864,edx
c000e226:	74 20                	je     c000e248 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e228:	39 df                	cmp    edi,ebx
c000e22a:	75 db                	jne    c000e207 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e22c:	6a 03                	push   0x3
c000e22e:	43                   	inc    ebx
c000e22f:	50                   	push   eax
c000e230:	e8 d9 fe ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e235:	59                   	pop    ecx
c000e236:	39 f3                	cmp    ebx,esi
c000e238:	58                   	pop    eax
c000e239:	75 db                	jne    c000e216 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e23b:	83 c4 1c             	add    esp,0x1c
c000e23e:	89 e8                	mov    eax,ebp
c000e240:	5b                   	pop    ebx
c000e241:	c1 e0 0c             	shl    eax,0xc
c000e244:	5e                   	pop    esi
c000e245:	5f                   	pop    edi
c000e246:	5d                   	pop    ebp
c000e247:	c3                   	ret    
c000e248:	6a 02                	push   0x2
c000e24a:	bb 01 00 00 00       	mov    ebx,0x1
c000e24f:	50                   	push   eax
c000e250:	e8 b9 fe ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e255:	58                   	pop    eax
c000e256:	5a                   	pop    edx
c000e257:	eb bd                	jmp    c000e216 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e259:	6a 04                	push   0x4
c000e25b:	8d 45 01             	lea    eax,[ebp+0x1]
c000e25e:	55                   	push   ebp
c000e25f:	a3 64 38 02 c0       	mov    ds:0xc0023864,eax
c000e264:	e8 a5 fe ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e269:	59                   	pop    ecx
c000e26a:	89 e8                	mov    eax,ebp
c000e26c:	5b                   	pop    ebx
c000e26d:	c1 e0 0c             	shl    eax,0xc
c000e270:	83 c4 1c             	add    esp,0x1c
c000e273:	5b                   	pop    ebx
c000e274:	5e                   	pop    esi
c000e275:	5f                   	pop    edi
c000e276:	5d                   	pop    ebp
c000e277:	c3                   	ret    

c000e278 <Virt::virtualMemorySetup()>:
c000e278:	53                   	push   ebx
c000e279:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e27e:	83 ec 08             	sub    esp,0x8
c000e281:	6a 0f                	push   0xf
c000e283:	53                   	push   ebx
c000e284:	43                   	inc    ebx
c000e285:	e8 84 fe ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e28a:	59                   	pop    ecx
c000e28b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e291:	58                   	pop    eax
c000e292:	75 ed                	jne    c000e281 <Virt::virtualMemorySetup()+0x9>
c000e294:	83 ec 08             	sub    esp,0x8
c000e297:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e29c:	68 00 00 00 c8       	push   0xc8000000
c000e2a1:	68 7f 14 02 c0       	push   0xc002147f
c000e2a6:	e8 8e 0e 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000e2ab:	58                   	pop    eax
c000e2ac:	5a                   	pop    edx
c000e2ad:	68 00 f0 ff ef       	push   0xeffff000
c000e2b2:	68 93 14 02 c0       	push   0xc0021493
c000e2b7:	e8 7d 0e 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000e2bc:	83 c4 10             	add    esp,0x10
c000e2bf:	83 ec 08             	sub    esp,0x8
c000e2c2:	6a 00                	push   0x0
c000e2c4:	53                   	push   ebx
c000e2c5:	43                   	inc    ebx
c000e2c6:	e8 43 fe ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2cb:	83 c4 10             	add    esp,0x10
c000e2ce:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2d4:	75 e9                	jne    c000e2bf <Virt::virtualMemorySetup()+0x47>
c000e2d6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2db:	83 ec 08             	sub    esp,0x8
c000e2de:	6a 0f                	push   0xf
c000e2e0:	53                   	push   ebx
c000e2e1:	43                   	inc    ebx
c000e2e2:	e8 27 fe ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2e7:	83 c4 10             	add    esp,0x10
c000e2ea:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2f0:	75 e9                	jne    c000e2db <Virt::virtualMemorySetup()+0x63>
c000e2f2:	83 c4 08             	add    esp,0x8
c000e2f5:	5b                   	pop    ebx
c000e2f6:	c3                   	ret    

c000e2f7 <Virt::getAKernelVAS()>:
c000e2f7:	a1 24 45 02 c0       	mov    eax,ds:0xc0024524
c000e2fc:	c3                   	ret    

c000e2fd <Virt::setupPageSwapping(int)>:
c000e2fd:	57                   	push   edi
c000e2fe:	56                   	push   esi
c000e2ff:	53                   	push   ebx
c000e300:	83 ec 1c             	sub    esp,0x1c
c000e303:	68 14 01 00 00       	push   0x114
c000e308:	e8 3d 0d 00 00       	call   c000f04a <operator new(unsigned long)>
c000e30d:	83 c4 0c             	add    esp,0xc
c000e310:	89 c6                	mov    esi,eax
c000e312:	ff 35 14 58 02 c0    	push   DWORD PTR ds:0xc0025814
c000e318:	68 a7 14 02 c0       	push   0xc00214a7
c000e31d:	50                   	push   eax
c000e31e:	e8 45 13 00 00       	call   c000f668 <File::File(char const*, Process*)>
c000e323:	89 34 24             	mov    DWORD PTR [esp],esi
c000e326:	e8 19 15 00 00       	call   c000f844 <File::unlink()>
c000e32b:	58                   	pop    eax
c000e32c:	5a                   	pop    edx
c000e32d:	6a 12                	push   0x12
c000e32f:	56                   	push   esi
c000e330:	e8 97 13 00 00       	call   c000f6cc <File::open(FileOpenMode)>
c000e335:	83 c4 10             	add    esp,0x10
c000e338:	85 c0                	test   eax,eax
c000e33a:	0f 85 bf 00 00 00    	jne    c000e3ff <Virt::setupPageSwapping(int)+0x102>
c000e340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e344:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e34c:	c1 e3 08             	shl    ebx,0x8
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	68 00 00 01 00       	push   0x10000
c000e357:	e8 ec dc ff ff       	call   c000c048 <malloc>
c000e35c:	83 c4 0c             	add    esp,0xc
c000e35f:	89 c7                	mov    edi,eax
c000e361:	68 00 00 01 00       	push   0x10000
c000e366:	6a 00                	push   0x0
c000e368:	50                   	push   eax
c000e369:	e8 78 23 ff ff       	call   c00006e6 <memset>
c000e36e:	83 c4 10             	add    esp,0x10
c000e371:	85 db                	test   ebx,ebx
c000e373:	79 03                	jns    c000e378 <Virt::setupPageSwapping(int)+0x7b>
c000e375:	83 c3 0f             	add    ebx,0xf
c000e378:	c1 fb 04             	sar    ebx,0x4
c000e37b:	4b                   	dec    ebx
c000e37c:	83 fb ff             	cmp    ebx,0xffffffff
c000e37f:	74 4b                	je     c000e3cc <Virt::setupPageSwapping(int)+0xcf>
c000e381:	83 ec 0c             	sub    esp,0xc
c000e384:	8b 06                	mov    eax,DWORD PTR [esi]
c000e386:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e38a:	52                   	push   edx
c000e38b:	57                   	push   edi
c000e38c:	6a 00                	push   0x0
c000e38e:	68 00 00 01 00       	push   0x10000
c000e393:	56                   	push   esi
c000e394:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e397:	83 c4 20             	add    esp,0x20
c000e39a:	85 c0                	test   eax,eax
c000e39c:	75 4e                	jne    c000e3ec <Virt::setupPageSwapping(int)+0xef>
c000e39e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3a2:	3d 00 00 01 00       	cmp    eax,0x10000
c000e3a7:	74 d2                	je     c000e37b <Virt::setupPageSwapping(int)+0x7e>
c000e3a9:	83 ec 08             	sub    esp,0x8
c000e3ac:	4b                   	dec    ebx
c000e3ad:	50                   	push   eax
c000e3ae:	68 fa 14 02 c0       	push   0xc00214fa
c000e3b3:	e8 81 0d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000e3b8:	c7 04 24 03 15 02 c0 	mov    DWORD PTR [esp],0xc0021503
c000e3bf:	e8 5c 75 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000e3c4:	83 c4 10             	add    esp,0x10
c000e3c7:	83 fb ff             	cmp    ebx,0xffffffff
c000e3ca:	75 b5                	jne    c000e381 <Virt::setupPageSwapping(int)+0x84>
c000e3cc:	83 ec 0c             	sub    esp,0xc
c000e3cf:	56                   	push   esi
c000e3d0:	e8 55 13 00 00       	call   c000f72a <File::close()>
c000e3d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3d8:	e8 8b dc ff ff       	call   c000c068 <rfree>
c000e3dd:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3e0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3e5:	83 c4 20             	add    esp,0x20
c000e3e8:	5b                   	pop    ebx
c000e3e9:	5e                   	pop    esi
c000e3ea:	5f                   	pop    edi
c000e3eb:	c3                   	ret    
c000e3ec:	83 ec 08             	sub    esp,0x8
c000e3ef:	50                   	push   eax
c000e3f0:	68 e2 14 02 c0       	push   0xc00214e2
c000e3f5:	e8 3f 0d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000e3fa:	83 c4 10             	add    esp,0x10
c000e3fd:	eb 9f                	jmp    c000e39e <Virt::setupPageSwapping(int)+0xa1>
c000e3ff:	83 ec 08             	sub    esp,0x8
c000e402:	50                   	push   eax
c000e403:	68 be 14 02 c0       	push   0xc00214be
c000e408:	e8 2c 0d 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000e40d:	c7 04 24 c7 14 02 c0 	mov    DWORD PTR [esp],0xc00214c7
c000e414:	e8 07 75 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000e419:	83 c4 10             	add    esp,0x10
c000e41c:	e9 1f ff ff ff       	jmp    c000e340 <Virt::setupPageSwapping(int)+0x43>
c000e421:	90                   	nop

c000e422 <VAS::VAS()>:
c000e422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e426:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e42d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e431:	a3 24 45 02 c0       	mov    ds:0xc0024524,eax
c000e436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43a:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e442:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e445:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e449:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e450:	90                   	nop
c000e451:	c3                   	ret    

c000e452 <VAS::VAS(VAS*)>:
c000e452:	83 ec 0c             	sub    esp,0xc
c000e455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e459:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e460:	83 ec 0c             	sub    esp,0xc
c000e463:	68 18 13 02 c0       	push   0xc0021318
c000e468:	e8 b3 74 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000e46d:	83 c4 10             	add    esp,0x10
c000e470:	90                   	nop
c000e471:	83 c4 0c             	add    esp,0xc
c000e474:	c3                   	ret    
c000e475:	90                   	nop

c000e476 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e476:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e47a:	89 c2                	mov    edx,eax
c000e47c:	c1 e8 0a             	shr    eax,0xa
c000e47f:	c1 ea 16             	shr    edx,0x16
c000e482:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e487:	19 c9                	sbb    ecx,ecx
c000e489:	c1 e2 0c             	shl    edx,0xc
c000e48c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e492:	25 fc 0f 00 00       	and    eax,0xffc
c000e497:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e49e:	01 d0                	add    eax,edx
c000e4a0:	c3                   	ret    
c000e4a1:	90                   	nop

c000e4a2 <VAS::getPageTableEntry(unsigned long)>:
c000e4a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e4a6:	89 ca                	mov    edx,ecx
c000e4a8:	c1 e9 0a             	shr    ecx,0xa
c000e4ab:	c1 ea 16             	shr    edx,0x16
c000e4ae:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e4b4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e4ba:	c1 e0 0c             	shl    eax,0xc
c000e4bd:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e4c0:	c3                   	ret    

c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e4c1:	57                   	push   edi
c000e4c2:	56                   	push   esi
c000e4c3:	be 01 00 00 00       	mov    esi,0x1
c000e4c8:	53                   	push   ebx
c000e4c9:	83 ec 10             	sub    esp,0x10
c000e4cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e4d0:	c1 eb 0c             	shr    ebx,0xc
c000e4d3:	eb 3f                	jmp    c000e514 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e4d5:	e8 1d fe ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c000e4da:	83 ec 08             	sub    esp,0x8
c000e4dd:	57                   	push   edi
c000e4de:	50                   	push   eax
c000e4df:	e8 be ff ff ff       	call   c000e4a2 <VAS::getPageTableEntry(unsigned long)>
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4e9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4ed:	f6 c4 04             	test   ah,0x4
c000e4f0:	75 5f                	jne    c000e551 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e4f2:	80 fa 04             	cmp    dl,0x4
c000e4f5:	74 78                	je     c000e56f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e4f7:	80 fa 02             	cmp    dl,0x2
c000e4fa:	0f 84 88 00 00 00    	je     c000e588 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e500:	80 fa 03             	cmp    dl,0x3
c000e503:	0f 84 ad 00 00 00    	je     c000e5b6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e509:	fe ca                	dec    dl
c000e50b:	0f 84 92 00 00 00    	je     c000e5a3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e511:	43                   	inc    ebx
c000e512:	31 f6                	xor    esi,esi
c000e514:	53                   	push   ebx
c000e515:	e8 29 fc ff ff       	call   c000e143 <Virt::getPageState(unsigned long)>
c000e51a:	5f                   	pop    edi
c000e51b:	89 df                	mov    edi,ebx
c000e51d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e521:	c1 e7 0c             	shl    edi,0xc
c000e524:	84 c0                	test   al,al
c000e526:	75 ad                	jne    c000e4d5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e528:	83 ec 0c             	sub    esp,0xc
c000e52b:	68 09 15 02 c0       	push   0xc0021509
c000e530:	e8 eb 73 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000e535:	e8 bd fd ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c000e53a:	5a                   	pop    edx
c000e53b:	59                   	pop    ecx
c000e53c:	57                   	push   edi
c000e53d:	50                   	push   eax
c000e53e:	e8 5f ff ff ff       	call   c000e4a2 <VAS::getPageTableEntry(unsigned long)>
c000e543:	83 c4 10             	add    esp,0x10
c000e546:	8b 00                	mov    eax,DWORD PTR [eax]
c000e548:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e54c:	f6 c4 04             	test   ah,0x4
c000e54f:	74 c0                	je     c000e511 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e551:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e555:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e55a:	83 ec 0c             	sub    esp,0xc
c000e55d:	50                   	push   eax
c000e55e:	e8 05 e0 ff ff       	call   c000c568 <Phys::freePage(unsigned long)>
c000e563:	83 c4 10             	add    esp,0x10
c000e566:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e56a:	80 fa 04             	cmp    dl,0x4
c000e56d:	75 88                	jne    c000e4f7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e56f:	89 f0                	mov    eax,esi
c000e571:	84 c0                	test   al,al
c000e573:	75 47                	jne    c000e5bc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e575:	c7 44 24 20 3c 13 02 c0 	mov    DWORD PTR [esp+0x20],0xc002133c
c000e57d:	83 c4 10             	add    esp,0x10
c000e580:	5b                   	pop    ebx
c000e581:	5e                   	pop    esi
c000e582:	5f                   	pop    edi
c000e583:	e9 98 73 00 00       	jmp    c0015920 <Krnl::panic(char const*)>
c000e588:	89 f0                	mov    eax,esi
c000e58a:	84 c0                	test   al,al
c000e58c:	75 15                	jne    c000e5a3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e58e:	83 ec 0c             	sub    esp,0xc
c000e591:	68 25 15 02 c0       	push   0xc0021525
c000e596:	e8 85 73 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000e59b:	83 c4 10             	add    esp,0x10
c000e59e:	e9 6e ff ff ff       	jmp    c000e511 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e5a3:	83 ec 08             	sub    esp,0x8
c000e5a6:	6a 00                	push   0x0
c000e5a8:	53                   	push   ebx
c000e5a9:	e8 60 fb ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e5ae:	83 c4 10             	add    esp,0x10
c000e5b1:	e9 5b ff ff ff       	jmp    c000e511 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e5b6:	89 f0                	mov    eax,esi
c000e5b8:	84 c0                	test   al,al
c000e5ba:	75 15                	jne    c000e5d1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e5bc:	83 ec 08             	sub    esp,0x8
c000e5bf:	6a 00                	push   0x0
c000e5c1:	53                   	push   ebx
c000e5c2:	e8 47 fb ff ff       	call   c000e10e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e5c7:	83 c4 10             	add    esp,0x10
c000e5ca:	83 c4 10             	add    esp,0x10
c000e5cd:	5b                   	pop    ebx
c000e5ce:	5e                   	pop    esi
c000e5cf:	5f                   	pop    edi
c000e5d0:	c3                   	ret    
c000e5d1:	c7 44 24 20 41 15 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021541
c000e5d9:	83 c4 10             	add    esp,0x10
c000e5dc:	5b                   	pop    ebx
c000e5dd:	5e                   	pop    esi
c000e5de:	5f                   	pop    edi
c000e5df:	e9 3c 73 00 00       	jmp    c0015920 <Krnl::panic(char const*)>

c000e5e4 <VAS::freeAllocatedPages(unsigned long)>:
c000e5e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5ec:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5f0:	74 09                	je     c000e5fb <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5f6:	e9 c6 fe ff ff       	jmp    c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e5fb:	c7 44 24 04 60 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021360
c000e603:	e9 31 0b 00 00       	jmp    c000f139 <Dbg::kprintf(char const*, ...)>

c000e608 <VAS::virtualToPhysical(unsigned long)>:
c000e608:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e60c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e610:	e8 8d fe ff ff       	call   c000e4a2 <VAS::getPageTableEntry(unsigned long)>
c000e615:	5a                   	pop    edx
c000e616:	8b 00                	mov    eax,DWORD PTR [eax]
c000e618:	59                   	pop    ecx
c000e619:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e61e:	c3                   	ret    
c000e61f:	90                   	nop

c000e620 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e620:	55                   	push   ebp
c000e621:	57                   	push   edi
c000e622:	56                   	push   esi
c000e623:	53                   	push   ebx
c000e624:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e628:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e62c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e630:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e634:	85 db                	test   ebx,ebx
c000e636:	7e 22                	jle    c000e65a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000e638:	c1 e3 0c             	shl    ebx,0xc
c000e63b:	01 f3                	add    ebx,esi
c000e63d:	56                   	push   esi
c000e63e:	81 c6 00 10 00 00    	add    esi,0x1000
c000e644:	55                   	push   ebp
c000e645:	e8 58 fe ff ff       	call   c000e4a2 <VAS::getPageTableEntry(unsigned long)>
c000e64a:	5a                   	pop    edx
c000e64b:	59                   	pop    ecx
c000e64c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e64e:	21 f9                	and    ecx,edi
c000e650:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000e654:	39 f3                	cmp    ebx,esi
c000e656:	89 08                	mov    DWORD PTR [eax],ecx
c000e658:	75 e3                	jne    c000e63d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000e65a:	5b                   	pop    ebx
c000e65b:	5e                   	pop    esi
c000e65c:	5f                   	pop    edi
c000e65d:	5d                   	pop    ebp
c000e65e:	c3                   	ret    
c000e65f:	90                   	nop

c000e660 <VAS::setToWriteCombining(unsigned long, int)>:
c000e660:	83 ec 0c             	sub    esp,0xc
c000e663:	e8 38 61 00 00       	call   c00147a0 <thisCPU()>
c000e668:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e66f:	75 04                	jne    c000e675 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e671:	83 c4 0c             	add    esp,0xc
c000e674:	c3                   	ret    
c000e675:	83 ec 0c             	sub    esp,0xc
c000e678:	68 80 00 00 00       	push   0x80
c000e67d:	6a ff                	push   0xffffffff
c000e67f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e683:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e687:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e68b:	e8 90 ff ff ff       	call   c000e620 <VAS::reflagRange(unsigned long, int, int, int)>
c000e690:	83 c4 20             	add    esp,0x20
c000e693:	83 c4 0c             	add    esp,0xc
c000e696:	c3                   	ret    
c000e697:	90                   	nop

c000e698 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e698:	83 ec 0c             	sub    esp,0xc
c000e69b:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e6a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6a4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ab:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e6ae:	19 c0                	sbb    eax,eax
c000e6b0:	83 ca 03             	or     edx,0x3
c000e6b3:	83 e0 fc             	and    eax,0xfffffffc
c000e6b6:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e6bd:	e8 13 0e 01 00       	call   c001f4d5 <CPU::readCR3()>
c000e6c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6c6:	83 c4 0c             	add    esp,0xc
c000e6c9:	e9 19 0e 01 00       	jmp    c001f4e7 <CPU::writeCR3(unsigned long)>

c000e6ce <VAS::~VAS()>:
c000e6ce:	83 ec 2c             	sub    esp,0x2c
c000e6d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6d9:	e8 96 a1 00 00       	call   c0018874 <lockScheduler()>
c000e6de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6e8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6ee:	83 ec 04             	sub    esp,0x4
c000e6f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6f5:	6a 01                	push   0x1
c000e6f7:	50                   	push   eax
c000e6f8:	e8 9b ff ff ff       	call   c000e698 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6fd:	83 c4 10             	add    esp,0x10
c000e700:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e708:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e710:	0f 8f d7 00 00 00    	jg     c000e7ed <VAS::~VAS()+0x11f>
c000e716:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e71a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e71d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e721:	c1 e2 02             	shl    edx,0x2
c000e724:	01 d0                	add    eax,edx
c000e726:	8b 00                	mov    eax,DWORD PTR [eax]
c000e728:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e730:	83 e0 01             	and    eax,0x1
c000e733:	0f 84 ab 00 00 00    	je     c000e7e4 <VAS::~VAS()+0x116>
c000e739:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e741:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e749:	7f 75                	jg     c000e7c0 <VAS::~VAS()+0xf2>
c000e74b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e74f:	c1 e0 0a             	shl    eax,0xa
c000e752:	89 c2                	mov    edx,eax
c000e754:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e758:	01 d0                	add    eax,edx
c000e75a:	c1 e0 0c             	shl    eax,0xc
c000e75d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e761:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e766:	8b 00                	mov    eax,DWORD PTR [eax]
c000e768:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e76b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e771:	83 ec 04             	sub    esp,0x4
c000e774:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e778:	6a 01                	push   0x1
c000e77a:	50                   	push   eax
c000e77b:	e8 f6 fc ff ff       	call   c000e476 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e780:	83 c4 10             	add    esp,0x10
c000e783:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e787:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e78b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e78d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e795:	25 01 04 00 00       	and    eax,0x401
c000e79a:	3d 01 04 00 00       	cmp    eax,0x401
c000e79f:	75 19                	jne    c000e7ba <VAS::~VAS()+0xec>
c000e7a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7aa:	83 ec 0c             	sub    esp,0xc
c000e7ad:	50                   	push   eax
c000e7ae:	e8 b5 dd ff ff       	call   c000c568 <Phys::freePage(unsigned long)>
c000e7b3:	83 c4 10             	add    esp,0x10
c000e7b6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7ba:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e7be:	eb 81                	jmp    c000e741 <VAS::~VAS()+0x73>
c000e7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c4:	25 00 04 00 00       	and    eax,0x400
c000e7c9:	74 19                	je     c000e7e4 <VAS::~VAS()+0x116>
c000e7cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7d4:	83 ec 0c             	sub    esp,0xc
c000e7d7:	50                   	push   eax
c000e7d8:	e8 8b dd ff ff       	call   c000c568 <Phys::freePage(unsigned long)>
c000e7dd:	83 c4 10             	add    esp,0x10
c000e7e0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7e4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7e8:	e9 1b ff ff ff       	jmp    c000e708 <VAS::~VAS()+0x3a>
c000e7ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7f4:	83 ec 0c             	sub    esp,0xc
c000e7f7:	50                   	push   eax
c000e7f8:	e8 c4 fc ff ff       	call   c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e804:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e807:	83 ec 0c             	sub    esp,0xc
c000e80a:	50                   	push   eax
c000e80b:	e8 58 dd ff ff       	call   c000c568 <Phys::freePage(unsigned long)>
c000e810:	83 c4 10             	add    esp,0x10
c000e813:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e817:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e81b:	c1 e0 02             	shl    eax,0x2
c000e81e:	83 ec 08             	sub    esp,0x8
c000e821:	50                   	push   eax
c000e822:	68 84 13 02 c0       	push   0xc0021384
c000e827:	e8 0d 09 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000e82c:	83 c4 10             	add    esp,0x10
c000e82f:	e8 42 a0 00 00       	call   c0018876 <unlockScheduler()>
c000e834:	90                   	nop
c000e835:	83 c4 2c             	add    esp,0x2c
c000e838:	c3                   	ret    
c000e839:	90                   	nop

c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e83a:	55                   	push   ebp
c000e83b:	57                   	push   edi
c000e83c:	56                   	push   esi
c000e83d:	53                   	push   ebx
c000e83e:	83 ec 1c             	sub    esp,0x1c
c000e841:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e845:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e849:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e84f:	77 08                	ja     c000e859 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e851:	0f 20 d8             	mov    eax,cr3
c000e854:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e857:	75 47                	jne    c000e8a0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e859:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e85d:	09 d8                	or     eax,ebx
c000e85f:	a9 ff 0f 00 00       	test   eax,0xfff
c000e864:	75 57                	jne    c000e8bd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e866:	89 de                	mov    esi,ebx
c000e868:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e86b:	c1 ee 16             	shr    esi,0x16
c000e86e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e875:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e879:	74 54                	je     c000e8cf <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e87b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e87f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e885:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e889:	c1 e6 0c             	shl    esi,0xc
c000e88c:	c1 eb 0a             	shr    ebx,0xa
c000e88f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e895:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e898:	83 c4 1c             	add    esp,0x1c
c000e89b:	5b                   	pop    ebx
c000e89c:	5e                   	pop    esi
c000e89d:	5f                   	pop    edi
c000e89e:	5d                   	pop    ebp
c000e89f:	c3                   	ret    
c000e8a0:	83 ec 0c             	sub    esp,0xc
c000e8a3:	68 a4 13 02 c0       	push   0xc00213a4
c000e8a8:	e8 8c 08 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000e8ad:	83 c4 10             	add    esp,0x10
c000e8b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8b4:	09 d8                	or     eax,ebx
c000e8b6:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8bb:	74 a9                	je     c000e866 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8bd:	83 ec 0c             	sub    esp,0xc
c000e8c0:	68 0c 14 02 c0       	push   0xc002140c
c000e8c5:	e8 56 70 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000e8ca:	83 c4 10             	add    esp,0x10
c000e8cd:	eb 97                	jmp    c000e866 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8d3:	e8 1a dd ff ff       	call   c000c5f2 <Phys::allocatePage()>
c000e8d8:	89 c5                	mov    ebp,eax
c000e8da:	e8 18 fa ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c000e8df:	83 ec 0c             	sub    esp,0xc
c000e8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8e6:	6a 01                	push   0x1
c000e8e8:	e8 7a f8 ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c000e8ed:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8f4:	6a 01                	push   0x1
c000e8f6:	50                   	push   eax
c000e8f7:	55                   	push   ebp
c000e8f8:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8fe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e902:	51                   	push   ecx
c000e903:	e8 1e 02 00 00       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e908:	83 c4 1c             	add    esp,0x1c
c000e90b:	68 00 10 00 00       	push   0x1000
c000e910:	6a 00                	push   0x0
c000e912:	50                   	push   eax
c000e913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e917:	e8 ca 1d ff ff       	call   c00006e6 <memset>
c000e91c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e920:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e923:	e8 99 fb ff ff       	call   c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e928:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e92c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e92f:	83 c4 10             	add    esp,0x10
c000e932:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e935:	e9 41 ff ff ff       	jmp    c000e87b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e93a <VAS::allocatePages(int, int)>:
c000e93a:	55                   	push   ebp
c000e93b:	57                   	push   edi
c000e93c:	56                   	push   esi
c000e93d:	53                   	push   ebx
c000e93e:	83 ec 1c             	sub    esp,0x1c
c000e941:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e945:	e8 56 5e 00 00       	call   c00147a0 <thisCPU()>
c000e94a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e950:	83 e0 01             	and    eax,0x1
c000e953:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e957:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e95b:	0f 85 d7 00 00 00    	jne    c000ea38 <VAS::allocatePages(int, int)+0xfe>
c000e961:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e968:	85 c0                	test   eax,eax
c000e96a:	0f 84 ac 00 00 00    	je     c000ea1c <VAS::allocatePages(int, int)+0xe2>
c000e970:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e974:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e978:	c1 e6 0c             	shl    esi,0xc
c000e97b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e97f:	85 c0                	test   eax,eax
c000e981:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e984:	7e 33                	jle    c000e9b9 <VAS::allocatePages(int, int)+0x7f>
c000e986:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e98a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e98e:	81 cd 00 04 00 00    	or     ebp,0x400
c000e994:	e8 59 dc ff ff       	call   c000c5f2 <Phys::allocatePage()>
c000e999:	55                   	push   ebp
c000e99a:	53                   	push   ebx
c000e99b:	50                   	push   eax
c000e99c:	57                   	push   edi
c000e99d:	e8 98 fe ff ff       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e9a2:	83 c4 10             	add    esp,0x10
c000e9a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e9aa:	74 03                	je     c000e9af <VAS::allocatePages(int, int)+0x75>
c000e9ac:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9af:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9b5:	39 de                	cmp    esi,ebx
c000e9b7:	75 db                	jne    c000e994 <VAS::allocatePages(int, int)+0x5a>
c000e9b9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e9be:	74 3f                	je     c000e9ff <VAS::allocatePages(int, int)+0xc5>
c000e9c0:	c1 ee 0a             	shr    esi,0xa
c000e9c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e9c7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9cd:	c1 eb 0a             	shr    ebx,0xa
c000e9d0:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9d6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9dc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9e2:	39 f3                	cmp    ebx,esi
c000e9e4:	77 0d                	ja     c000e9f3 <VAS::allocatePages(int, int)+0xb9>
c000e9e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9ef:	39 de                	cmp    esi,ebx
c000e9f1:	73 f3                	jae    c000e9e6 <VAS::allocatePages(int, int)+0xac>
c000e9f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9f7:	83 c4 1c             	add    esp,0x1c
c000e9fa:	5b                   	pop    ebx
c000e9fb:	5e                   	pop    esi
c000e9fc:	5f                   	pop    edi
c000e9fd:	5d                   	pop    ebp
c000e9fe:	c3                   	ret    
c000e9ff:	e8 d1 0a 01 00       	call   c001f4d5 <CPU::readCR3()>
c000ea04:	83 ec 0c             	sub    esp,0xc
c000ea07:	50                   	push   eax
c000ea08:	e8 da 0a 01 00       	call   c001f4e7 <CPU::writeCR3(unsigned long)>
c000ea0d:	83 c4 10             	add    esp,0x10
c000ea10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea14:	83 c4 1c             	add    esp,0x1c
c000ea17:	5b                   	pop    ebx
c000ea18:	5e                   	pop    esi
c000ea19:	5f                   	pop    edi
c000ea1a:	5d                   	pop    ebp
c000ea1b:	c3                   	ret    
c000ea1c:	83 ec 0c             	sub    esp,0xc
c000ea1f:	68 30 14 02 c0       	push   0xc0021430
c000ea24:	e8 f7 6e 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000ea29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ea2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea30:	83 c4 10             	add    esp,0x10
c000ea33:	e9 38 ff ff ff       	jmp    c000e970 <VAS::allocatePages(int, int)+0x36>
c000ea38:	83 ec 0c             	sub    esp,0xc
c000ea3b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea3f:	e8 23 f7 ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c000ea44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea48:	83 c4 10             	add    esp,0x10
c000ea4b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea50:	0f 87 94 00 00 00    	ja     c000eaea <VAS::allocatePages(int, int)+0x1b0>
c000ea56:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea5a:	85 d2                	test   edx,edx
c000ea5c:	7e 3c                	jle    c000ea9a <VAS::allocatePages(int, int)+0x160>
c000ea5e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea62:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea66:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea6a:	c1 e5 0c             	shl    ebp,0xc
c000ea6d:	81 ce 00 04 00 00    	or     esi,0x400
c000ea73:	01 dd                	add    ebp,ebx
c000ea75:	e8 78 db ff ff       	call   c000c5f2 <Phys::allocatePage()>
c000ea7a:	56                   	push   esi
c000ea7b:	53                   	push   ebx
c000ea7c:	50                   	push   eax
c000ea7d:	57                   	push   edi
c000ea7e:	e8 b7 fd ff ff       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea83:	83 c4 10             	add    esp,0x10
c000ea86:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea8b:	74 03                	je     c000ea90 <VAS::allocatePages(int, int)+0x156>
c000ea8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea90:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea96:	39 dd                	cmp    ebp,ebx
c000ea98:	75 db                	jne    c000ea75 <VAS::allocatePages(int, int)+0x13b>
c000ea9a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea9f:	0f 84 5a ff ff ff    	je     c000e9ff <VAS::allocatePages(int, int)+0xc5>
c000eaa5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eaa9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eaad:	89 d3                	mov    ebx,edx
c000eaaf:	c1 e0 0c             	shl    eax,0xc
c000eab2:	c1 eb 0a             	shr    ebx,0xa
c000eab5:	01 d0                	add    eax,edx
c000eab7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eabd:	c1 e8 0a             	shr    eax,0xa
c000eac0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eac6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eacb:	2d 00 00 40 00       	sub    eax,0x400000
c000ead0:	39 c3                	cmp    ebx,eax
c000ead2:	0f 87 1b ff ff ff    	ja     c000e9f3 <VAS::allocatePages(int, int)+0xb9>
c000ead8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eadb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eae1:	39 d8                	cmp    eax,ebx
c000eae3:	73 f3                	jae    c000ead8 <VAS::allocatePages(int, int)+0x19e>
c000eae5:	e9 09 ff ff ff       	jmp    c000e9f3 <VAS::allocatePages(int, int)+0xb9>
c000eaea:	e8 b1 5c 00 00       	call   c00147a0 <thisCPU()>
c000eaef:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eaf6:	0f 84 5a ff ff ff    	je     c000ea56 <VAS::allocatePages(int, int)+0x11c>
c000eafc:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000eb04:	e9 4d ff ff ff       	jmp    c000ea56 <VAS::allocatePages(int, int)+0x11c>
c000eb09:	90                   	nop

c000eb0a <VAS::setCPUSpecific(unsigned long)>:
c000eb0a:	83 ec 0c             	sub    esp,0xc
c000eb0d:	6a 05                	push   0x5
c000eb0f:	68 00 00 40 c2       	push   0xc2400000
c000eb14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb1c:	e8 19 fd ff ff       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb21:	83 c4 1c             	add    esp,0x1c
c000eb24:	c3                   	ret    
c000eb25:	90                   	nop

c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eb26:	55                   	push   ebp
c000eb27:	57                   	push   edi
c000eb28:	56                   	push   esi
c000eb29:	53                   	push   ebx
c000eb2a:	83 ec 1c             	sub    esp,0x1c
c000eb2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb31:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb35:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb39:	e8 62 5c 00 00       	call   c00147a0 <thisCPU()>
c000eb3e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb44:	83 e0 01             	and    eax,0x1
c000eb47:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb4f:	85 c0                	test   eax,eax
c000eb51:	7e 39                	jle    c000eb8c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb57:	89 f3                	mov    ebx,esi
c000eb59:	c1 e0 0c             	shl    eax,0xc
c000eb5c:	01 f0                	add    eax,esi
c000eb5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb62:	55                   	push   ebp
c000eb63:	53                   	push   ebx
c000eb64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb68:	29 f0                	sub    eax,esi
c000eb6a:	01 d8                	add    eax,ebx
c000eb6c:	50                   	push   eax
c000eb6d:	57                   	push   edi
c000eb6e:	e8 c7 fc ff ff       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb7b:	74 03                	je     c000eb80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb7d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb80:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb86:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb8a:	75 d6                	jne    c000eb62 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb8c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb91:	74 42                	je     c000ebd5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb93:	89 f3                	mov    ebx,esi
c000eb95:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb99:	c1 eb 0a             	shr    ebx,0xa
c000eb9c:	c1 e0 0c             	shl    eax,0xc
c000eb9f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eba5:	01 f0                	add    eax,esi
c000eba7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ebad:	c1 e8 0a             	shr    eax,0xa
c000ebb0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ebb5:	2d 00 00 40 00       	sub    eax,0x400000
c000ebba:	39 c3                	cmp    ebx,eax
c000ebbc:	77 0d                	ja     c000ebcb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ebbe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ebc1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ebc7:	39 d8                	cmp    eax,ebx
c000ebc9:	73 f3                	jae    c000ebbe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ebcb:	83 c4 1c             	add    esp,0x1c
c000ebce:	89 f0                	mov    eax,esi
c000ebd0:	5b                   	pop    ebx
c000ebd1:	5e                   	pop    esi
c000ebd2:	5f                   	pop    edi
c000ebd3:	5d                   	pop    ebp
c000ebd4:	c3                   	ret    
c000ebd5:	e8 fb 08 01 00       	call   c001f4d5 <CPU::readCR3()>
c000ebda:	83 ec 0c             	sub    esp,0xc
c000ebdd:	50                   	push   eax
c000ebde:	e8 04 09 01 00       	call   c001f4e7 <CPU::writeCR3(unsigned long)>
c000ebe3:	89 f0                	mov    eax,esi
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	83 c4 1c             	add    esp,0x1c
c000ebeb:	5b                   	pop    ebx
c000ebec:	5e                   	pop    esi
c000ebed:	5f                   	pop    edi
c000ebee:	5d                   	pop    ebp
c000ebef:	c3                   	ret    

c000ebf0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebf0:	55                   	push   ebp
c000ebf1:	57                   	push   edi
c000ebf2:	56                   	push   esi
c000ebf3:	53                   	push   ebx
c000ebf4:	83 ec 1c             	sub    esp,0x1c
c000ebf7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebfb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebff:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000ec03:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec07:	a9 ff 0f 00 00       	test   eax,0xfff
c000ec0c:	75 4a                	jne    c000ec58 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000ec0e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec12:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ec15:	c1 eb 16             	shr    ebx,0x16
c000ec18:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ec1f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ec23:	74 4d                	je     c000ec72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ec25:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec29:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec2d:	c1 e8 0a             	shr    eax,0xa
c000ec30:	80 fa 01             	cmp    dl,0x1
c000ec33:	19 d2                	sbb    edx,edx
c000ec35:	c1 e3 0c             	shl    ebx,0xc
c000ec38:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000ec3c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec42:	25 fc 0f 00 00       	and    eax,0xffc
c000ec47:	01 d8                	add    eax,ebx
c000ec49:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec50:	83 c4 1c             	add    esp,0x1c
c000ec53:	5b                   	pop    ebx
c000ec54:	5e                   	pop    esi
c000ec55:	5f                   	pop    edi
c000ec56:	5d                   	pop    ebp
c000ec57:	c3                   	ret    
c000ec58:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	68 5c 14 02 c0       	push   0xc002145c
c000ec64:	e8 b7 6c 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000ec69:	83 c4 10             	add    esp,0x10
c000ec6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec70:	eb 9c                	jmp    c000ec0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000ec72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec76:	e8 77 d9 ff ff       	call   c000c5f2 <Phys::allocatePage()>
c000ec7b:	89 c5                	mov    ebp,eax
c000ec7d:	e8 75 f6 ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c000ec82:	83 ec 0c             	sub    esp,0xc
c000ec85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec89:	6a 01                	push   0x1
c000ec8b:	e8 d7 f4 ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c000ec90:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec97:	6a 01                	push   0x1
c000ec99:	50                   	push   eax
c000ec9a:	55                   	push   ebp
c000ec9b:	81 cd 07 04 00 00    	or     ebp,0x407
c000eca1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000eca5:	51                   	push   ecx
c000eca6:	e8 7b fe ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ecab:	83 c4 1c             	add    esp,0x1c
c000ecae:	68 00 10 00 00       	push   0x1000
c000ecb3:	6a 00                	push   0x0
c000ecb5:	50                   	push   eax
c000ecb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ecba:	e8 27 1a ff ff       	call   c00006e6 <memset>
c000ecbf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ecc3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ecc6:	e8 f6 f7 ff ff       	call   c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>
c000eccb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ecce:	83 c4 10             	add    esp,0x10
c000ecd1:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecd8:	e9 48 ff ff ff       	jmp    c000ec25 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ecdd:	90                   	nop

c000ecde <VAS::VAS(bool)>:
c000ecde:	53                   	push   ebx
c000ecdf:	83 ec 28             	sub    esp,0x28
c000ece2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ece6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ecf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecf9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecfd:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed00:	e8 ed d8 ff ff       	call   c000c5f2 <Phys::allocatePage()>
c000ed05:	89 c2                	mov    edx,eax
c000ed07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ed0e:	e8 e4 f5 ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c000ed13:	89 c3                	mov    ebx,eax
c000ed15:	83 ec 0c             	sub    esp,0xc
c000ed18:	6a 01                	push   0x1
c000ed1a:	e8 48 f4 ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c000ed1f:	83 c4 10             	add    esp,0x10
c000ed22:	89 c2                	mov    edx,eax
c000ed24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed2b:	83 ec 0c             	sub    esp,0xc
c000ed2e:	6a 03                	push   0x3
c000ed30:	6a 01                	push   0x1
c000ed32:	52                   	push   edx
c000ed33:	50                   	push   eax
c000ed34:	53                   	push   ebx
c000ed35:	e8 ec fd ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed3a:	83 c4 20             	add    esp,0x20
c000ed3d:	89 c2                	mov    edx,eax
c000ed3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed43:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed46:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed4e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed56:	7f 1c                	jg     c000ed74 <VAS::VAS(bool)+0x96>
c000ed58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed63:	c1 e2 02             	shl    edx,0x2
c000ed66:	01 d0                	add    eax,edx
c000ed68:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed6e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed72:	eb da                	jmp    c000ed4e <VAS::VAS(bool)+0x70>
c000ed74:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed7c:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed84:	7f 71                	jg     c000edf7 <VAS::VAS(bool)+0x119>
c000ed86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed8a:	2d 00 02 00 00       	sub    eax,0x200
c000ed8f:	c1 e0 0c             	shl    eax,0xc
c000ed92:	83 c8 03             	or     eax,0x3
c000ed95:	89 c3                	mov    ebx,eax
c000ed97:	e8 04 5a 00 00       	call   c00147a0 <thisCPU()>
c000ed9c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eda2:	83 e0 10             	and    eax,0x10
c000eda5:	84 c0                	test   al,al
c000eda7:	74 07                	je     c000edb0 <VAS::VAS(bool)+0xd2>
c000eda9:	b8 00 01 00 00       	mov    eax,0x100
c000edae:	eb 05                	jmp    c000edb5 <VAS::VAS(bool)+0xd7>
c000edb0:	b8 00 00 00 00       	mov    eax,0x0
c000edb5:	09 d8                	or     eax,ebx
c000edb7:	89 c1                	mov    ecx,eax
c000edb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edbd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc4:	c1 e2 02             	shl    edx,0x2
c000edc7:	01 d0                	add    eax,edx
c000edc9:	89 ca                	mov    edx,ecx
c000edcb:	89 10                	mov    DWORD PTR [eax],edx
c000edcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd1:	2d 40 03 00 00       	sub    eax,0x340
c000edd6:	83 f8 7f             	cmp    eax,0x7f
c000edd9:	77 16                	ja     c000edf1 <VAS::VAS(bool)+0x113>
c000eddb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eddf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ede2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ede6:	c1 e2 02             	shl    edx,0x2
c000ede9:	01 d0                	add    eax,edx
c000edeb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edf1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edf5:	eb 85                	jmp    c000ed7c <VAS::VAS(bool)+0x9e>
c000edf7:	e8 a4 59 00 00       	call   c00147a0 <thisCPU()>
c000edfc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee02:	83 e0 10             	and    eax,0x10
c000ee05:	84 c0                	test   al,al
c000ee07:	74 07                	je     c000ee10 <VAS::VAS(bool)+0x132>
c000ee09:	b8 03 41 00 00       	mov    eax,0x4103
c000ee0e:	eb 05                	jmp    c000ee15 <VAS::VAS(bool)+0x137>
c000ee10:	b8 03 40 00 00       	mov    eax,0x4003
c000ee15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee19:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ee1c:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ee22:	89 02                	mov    DWORD PTR [edx],eax
c000ee24:	e8 77 59 00 00       	call   c00147a0 <thisCPU()>
c000ee29:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee2f:	83 ec 08             	sub    esp,0x8
c000ee32:	50                   	push   eax
c000ee33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee37:	e8 ce fc ff ff       	call   c000eb0a <VAS::setCPUSpecific(unsigned long)>
c000ee3c:	83 c4 10             	add    esp,0x10
c000ee3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee43:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee46:	e8 55 59 00 00       	call   c00147a0 <thisCPU()>
c000ee4b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee51:	83 e0 10             	and    eax,0x10
c000ee54:	84 c0                	test   al,al
c000ee56:	74 07                	je     c000ee5f <VAS::VAS(bool)+0x181>
c000ee58:	b8 00 01 00 00       	mov    eax,0x100
c000ee5d:	eb 05                	jmp    c000ee64 <VAS::VAS(bool)+0x186>
c000ee5f:	b8 00 00 00 00       	mov    eax,0x0
c000ee64:	09 d8                	or     eax,ebx
c000ee66:	89 c2                	mov    edx,eax
c000ee68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee6f:	05 fc 0f 00 00       	add    eax,0xffc
c000ee74:	83 ca 03             	or     edx,0x3
c000ee77:	89 10                	mov    DWORD PTR [eax],edx
c000ee79:	e8 22 59 00 00       	call   c00147a0 <thisCPU()>
c000ee7e:	83 ec 0c             	sub    esp,0xc
c000ee81:	50                   	push   eax
c000ee82:	e8 9f 19 00 00       	call   c0010826 <Device::getName()>
c000ee87:	83 c4 10             	add    esp,0x10
c000ee8a:	83 ec 08             	sub    esp,0x8
c000ee8d:	68 5b 15 02 c0       	push   0xc002155b
c000ee92:	50                   	push   eax
c000ee93:	e8 3e 19 ff ff       	call   c00007d6 <strcmp>
c000ee98:	83 c4 10             	add    esp,0x10
c000ee9b:	85 c0                	test   eax,eax
c000ee9d:	0f 94 c0             	sete   al
c000eea0:	84 c0                	test   al,al
c000eea2:	74 64                	je     c000ef08 <VAS::VAS(bool)+0x22a>
c000eea4:	e8 ae 99 00 00       	call   c0018857 <disableIRQs()>
c000eea9:	e8 f2 58 00 00       	call   c00147a0 <thisCPU()>
c000eeae:	05 7c 09 00 00       	add    eax,0x97c
c000eeb3:	83 ec 0c             	sub    esp,0xc
c000eeb6:	50                   	push   eax
c000eeb7:	e8 fe cb ff ff       	call   c000baba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eebc:	83 c4 10             	add    esp,0x10
c000eebf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eec4:	89 c3                	mov    ebx,eax
c000eec6:	e8 d5 58 00 00       	call   c00147a0 <thisCPU()>
c000eecb:	05 7c 09 00 00       	add    eax,0x97c
c000eed0:	83 ec 0c             	sub    esp,0xc
c000eed3:	50                   	push   eax
c000eed4:	e8 e1 cb ff ff       	call   c000baba <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eed9:	83 c4 10             	add    esp,0x10
c000eedc:	83 ec 08             	sub    esp,0x8
c000eedf:	50                   	push   eax
c000eee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eee4:	e8 b9 f5 ff ff       	call   c000e4a2 <VAS::getPageTableEntry(unsigned long)>
c000eee9:	83 c4 10             	add    esp,0x10
c000eeec:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeee:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eef3:	6a 11                	push   0x11
c000eef5:	53                   	push   ebx
c000eef6:	50                   	push   eax
c000eef7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eefb:	e8 3a f9 ff ff       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef00:	83 c4 10             	add    esp,0x10
c000ef03:	e8 5d 99 00 00       	call   c0018865 <enableIRQs()>
c000ef08:	90                   	nop
c000ef09:	83 c4 28             	add    esp,0x28
c000ef0c:	5b                   	pop    ebx
c000ef0d:	c3                   	ret    

c000ef0e <mapVASFirstTime>:
c000ef0e:	55                   	push   ebp
c000ef0f:	57                   	push   edi
c000ef10:	56                   	push   esi
c000ef11:	53                   	push   ebx
c000ef12:	83 ec 0c             	sub    esp,0xc
c000ef15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef1a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ef1d:	4a                   	dec    edx
c000ef1e:	0f 84 99 00 00 00    	je     c000efbd <mapVASFirstTime+0xaf>
c000ef24:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef27:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef2a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef2f:	c1 e5 15             	shl    ebp,0x15
c000ef32:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef37:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef3d:	29 eb                	sub    ebx,ebp
c000ef3f:	29 ee                	sub    esi,ebp
c000ef41:	e8 ac d6 ff ff       	call   c000c5f2 <Phys::allocatePage()>
c000ef46:	83 ec 0c             	sub    esp,0xc
c000ef49:	68 03 04 00 00       	push   0x403
c000ef4e:	6a 01                	push   0x1
c000ef50:	53                   	push   ebx
c000ef51:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef57:	50                   	push   eax
c000ef58:	57                   	push   edi
c000ef59:	e8 c8 fb ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef5e:	83 c4 20             	add    esp,0x20
c000ef61:	39 f3                	cmp    ebx,esi
c000ef63:	75 dc                	jne    c000ef41 <mapVASFirstTime+0x33>
c000ef65:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef6a:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef6f:	29 ee                	sub    esi,ebp
c000ef71:	29 e8                	sub    eax,ebp
c000ef73:	89 c5                	mov    ebp,eax
c000ef75:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef79:	19 db                	sbb    ebx,ebx
c000ef7b:	e8 72 d6 ff ff       	call   c000c5f2 <Phys::allocatePage()>
c000ef80:	83 e3 04             	and    ebx,0x4
c000ef83:	83 ec 0c             	sub    esp,0xc
c000ef86:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef8c:	53                   	push   ebx
c000ef8d:	6a 01                	push   0x1
c000ef8f:	56                   	push   esi
c000ef90:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef96:	50                   	push   eax
c000ef97:	57                   	push   edi
c000ef98:	e8 89 fb ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef9d:	83 c4 20             	add    esp,0x20
c000efa0:	39 f5                	cmp    ebp,esi
c000efa2:	75 d1                	jne    c000ef75 <mapVASFirstTime+0x67>
c000efa4:	e8 2c 05 01 00       	call   c001f4d5 <CPU::readCR3()>
c000efa9:	83 ec 0c             	sub    esp,0xc
c000efac:	50                   	push   eax
c000efad:	e8 35 05 01 00       	call   c001f4e7 <CPU::writeCR3(unsigned long)>
c000efb2:	83 c4 10             	add    esp,0x10
c000efb5:	83 c4 0c             	add    esp,0xc
c000efb8:	5b                   	pop    ebx
c000efb9:	5e                   	pop    esi
c000efba:	5f                   	pop    edi
c000efbb:	5d                   	pop    ebp
c000efbc:	c3                   	ret    
c000efbd:	83 ec 0c             	sub    esp,0xc
c000efc0:	68 69 15 02 c0       	push   0xc0021569
c000efc5:	e8 6f 01 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000efca:	83 c4 10             	add    esp,0x10
c000efcd:	83 c4 0c             	add    esp,0xc
c000efd0:	5b                   	pop    ebx
c000efd1:	5e                   	pop    esi
c000efd2:	5f                   	pop    edi
c000efd3:	5d                   	pop    ebp
c000efd4:	c3                   	ret    

c000efd5 <__cxa_atexit>:
c000efd5:	31 c0                	xor    eax,eax
c000efd7:	c3                   	ret    

c000efd8 <__cxa_finalize>:
c000efd8:	c3                   	ret    

c000efd9 <__stack_chk_fail>:
c000efd9:	55                   	push   ebp
c000efda:	89 e5                	mov    ebp,esp
c000efdc:	83 ec 10             	sub    esp,0x10
c000efdf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efe2:	68 82 15 02 c0       	push   0xc0021582
c000efe7:	e8 4d 01 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000efec:	58                   	pop    eax
c000efed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eff0:	5a                   	pop    edx
c000eff1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eff4:	68 82 15 02 c0       	push   0xc0021582
c000eff9:	e8 3b 01 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000effe:	59                   	pop    ecx
c000efff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f002:	5a                   	pop    edx
c000f003:	8b 00                	mov    eax,DWORD PTR [eax]
c000f005:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f008:	68 82 15 02 c0       	push   0xc0021582
c000f00d:	e8 27 01 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000f012:	59                   	pop    ecx
c000f013:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f016:	5a                   	pop    edx
c000f017:	8b 00                	mov    eax,DWORD PTR [eax]
c000f019:	8b 00                	mov    eax,DWORD PTR [eax]
c000f01b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f01e:	68 82 15 02 c0       	push   0xc0021582
c000f023:	e8 11 01 00 00       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c000f028:	c7 04 24 8a 15 02 c0 	mov    DWORD PTR [esp],0xc002158a
c000f02f:	e8 ec 68 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000f034:	83 c4 10             	add    esp,0x10
c000f037:	c9                   	leave  
c000f038:	c3                   	ret    

c000f039 <__cxa_pure_virtual>:
c000f039:	83 ec 18             	sub    esp,0x18
c000f03c:	68 a2 15 02 c0       	push   0xc00215a2
c000f041:	e8 da 68 00 00       	call   c0015920 <Krnl::panic(char const*)>
c000f046:	83 c4 1c             	add    esp,0x1c
c000f049:	c3                   	ret    

c000f04a <operator new(unsigned long)>:
c000f04a:	e9 f9 cf ff ff       	jmp    c000c048 <malloc>

c000f04f <operator new[](unsigned long)>:
c000f04f:	e9 f4 cf ff ff       	jmp    c000c048 <malloc>

c000f054 <operator delete(void*)>:
c000f054:	e9 0f d0 ff ff       	jmp    c000c068 <rfree>

c000f059 <operator delete(void*, unsigned long)>:
c000f059:	e9 0a d0 ff ff       	jmp    c000c068 <rfree>

c000f05e <operator delete[](void*)>:
c000f05e:	e9 05 d0 ff ff       	jmp    c000c068 <rfree>

c000f063 <operator delete[](void*, unsigned long)>:
c000f063:	e9 00 d0 ff ff       	jmp    c000c068 <rfree>

c000f068 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f068:	57                   	push   edi
c000f069:	b9 3f 00 00 00       	mov    ecx,0x3f
c000f06e:	56                   	push   esi
c000f06f:	be b8 15 02 c0       	mov    esi,0xc00215b8
c000f074:	53                   	push   ebx
c000f075:	83 ec 40             	sub    esp,0x40
c000f078:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f07c:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000f080:	fc                   	cld    
c000f081:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f083:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f087:	83 f9 3e             	cmp    ecx,0x3e
c000f08a:	7e 05                	jle    c000f091 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000f08c:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f091:	89 df                	mov    edi,ebx
c000f093:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f097:	eb 02                	jmp    c000f09b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000f099:	89 c7                	mov    edi,eax
c000f09b:	31 d2                	xor    edx,edx
c000f09d:	46                   	inc    esi
c000f09e:	89 f8                	mov    eax,edi
c000f0a0:	f7 f1                	div    ecx
c000f0a2:	39 cf                	cmp    edi,ecx
c000f0a4:	73 f3                	jae    c000f099 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000f0a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f0a9:	eb 02                	jmp    c000f0ad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000f0ab:	89 c3                	mov    ebx,eax
c000f0ad:	31 d2                	xor    edx,edx
c000f0af:	4e                   	dec    esi
c000f0b0:	89 d8                	mov    eax,ebx
c000f0b2:	f7 f1                	div    ecx
c000f0b4:	39 cb                	cmp    ebx,ecx
c000f0b6:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0ba:	88 16                	mov    BYTE PTR [esi],dl
c000f0bc:	73 ed                	jae    c000f0ab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000f0be:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0c2:	83 c4 40             	add    esp,0x40
c000f0c5:	5b                   	pop    ebx
c000f0c6:	5e                   	pop    esi
c000f0c7:	5f                   	pop    edi
c000f0c8:	c3                   	ret    

c000f0c9 <Dbg::logc(char)>:
c000f0c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0cd:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0d2:	ec                   	in     al,dx
c000f0d3:	a8 20                	test   al,0x20
c000f0d5:	74 fb                	je     c000f0d2 <Dbg::logc(char)+0x9>
c000f0d7:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0dc:	88 c8                	mov    al,cl
c000f0de:	ee                   	out    dx,al
c000f0df:	c3                   	ret    

c000f0e0 <Dbg::logs(char*)>:
c000f0e0:	53                   	push   ebx
c000f0e1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f0e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0e8:	84 c0                	test   al,al
c000f0ea:	74 0f                	je     c000f0fb <Dbg::logs(char*)+0x1b>
c000f0ec:	50                   	push   eax
c000f0ed:	43                   	inc    ebx
c000f0ee:	e8 d6 ff ff ff       	call   c000f0c9 <Dbg::logc(char)>
c000f0f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f0f6:	5a                   	pop    edx
c000f0f7:	84 c0                	test   al,al
c000f0f9:	75 f1                	jne    c000f0ec <Dbg::logs(char*)+0xc>
c000f0fb:	5b                   	pop    ebx
c000f0fc:	c3                   	ret    

c000f0fd <Dbg::logWriteInt(unsigned int)>:
c000f0fd:	83 ec 10             	sub    esp,0x10
c000f100:	6a 0a                	push   0xa
c000f102:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f106:	50                   	push   eax
c000f107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f10b:	e8 58 ff ff ff       	call   c000f068 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f110:	50                   	push   eax
c000f111:	e8 ca ff ff ff       	call   c000f0e0 <Dbg::logs(char*)>
c000f116:	83 c4 20             	add    esp,0x20
c000f119:	c3                   	ret    

c000f11a <Dbg::logWriteIntBase(unsigned int, int)>:
c000f11a:	83 ec 10             	sub    esp,0x10
c000f11d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f121:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f125:	50                   	push   eax
c000f126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f12a:	e8 39 ff ff ff       	call   c000f068 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f12f:	50                   	push   eax
c000f130:	e8 ab ff ff ff       	call   c000f0e0 <Dbg::logs(char*)>
c000f135:	83 c4 20             	add    esp,0x20
c000f138:	c3                   	ret    

c000f139 <Dbg::kprintf(char const*, ...)>:
c000f139:	55                   	push   ebp
c000f13a:	57                   	push   edi
c000f13b:	56                   	push   esi
c000f13c:	53                   	push   ebx
c000f13d:	83 ec 0c             	sub    esp,0xc
c000f140:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f144:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f148:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f14c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f14f:	84 c0                	test   al,al
c000f151:	74 4a                	je     c000f19d <Dbg::kprintf(char const*, ...)+0x64>
c000f153:	31 db                	xor    ebx,ebx
c000f155:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f158:	3c 25                	cmp    al,0x25
c000f15a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f15d:	0f 85 e4 00 00 00    	jne    c000f247 <Dbg::kprintf(char const*, ...)+0x10e>
c000f163:	83 c3 02             	add    ebx,0x2
c000f166:	8a 07                	mov    al,BYTE PTR [edi]
c000f168:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f16b:	83 e8 25             	sub    eax,0x25
c000f16e:	3c 53                	cmp    al,0x53
c000f170:	0f 87 ba 00 00 00    	ja     c000f230 <Dbg::kprintf(char const*, ...)+0xf7>
c000f176:	0f b6 c0             	movzx  eax,al
c000f179:	ff 24 85 f8 15 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdea08]
c000f180:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f184:	89 c8                	mov    eax,ecx
c000f186:	83 c1 04             	add    ecx,0x4
c000f189:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f18d:	ff 30                	push   DWORD PTR [eax]
c000f18f:	e8 4c ff ff ff       	call   c000f0e0 <Dbg::logs(char*)>
c000f194:	58                   	pop    eax
c000f195:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f199:	84 c0                	test   al,al
c000f19b:	75 b8                	jne    c000f155 <Dbg::kprintf(char const*, ...)+0x1c>
c000f19d:	83 c4 0c             	add    esp,0xc
c000f1a0:	5b                   	pop    ebx
c000f1a1:	5e                   	pop    esi
c000f1a2:	5f                   	pop    edi
c000f1a3:	5d                   	pop    ebp
c000f1a4:	c3                   	ret    
c000f1a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1a9:	89 d0                	mov    eax,edx
c000f1ab:	83 c2 04             	add    edx,0x4
c000f1ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1b2:	ff 30                	push   DWORD PTR [eax]
c000f1b4:	e8 44 ff ff ff       	call   c000f0fd <Dbg::logWriteInt(unsigned int)>
c000f1b9:	58                   	pop    eax
c000f1ba:	eb d9                	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1c0:	89 d0                	mov    eax,edx
c000f1c2:	83 c2 04             	add    edx,0x4
c000f1c5:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1cc:	50                   	push   eax
c000f1cd:	e8 f7 fe ff ff       	call   c000f0c9 <Dbg::logc(char)>
c000f1d2:	58                   	pop    eax
c000f1d3:	eb c0                	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1d9:	89 c8                	mov    eax,ecx
c000f1db:	83 c1 04             	add    ecx,0x4
c000f1de:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1e2:	ff 30                	push   DWORD PTR [eax]
c000f1e4:	e8 14 ff ff ff       	call   c000f0fd <Dbg::logWriteInt(unsigned int)>
c000f1e9:	5f                   	pop    edi
c000f1ea:	eb a9                	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f1ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1f0:	89 c8                	mov    eax,ecx
c000f1f2:	83 c1 04             	add    ecx,0x4
c000f1f5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1f9:	6a 10                	push   0x10
c000f1fb:	ff 30                	push   DWORD PTR [eax]
c000f1fd:	e8 18 ff ff ff       	call   c000f11a <Dbg::logWriteIntBase(unsigned int, int)>
c000f202:	59                   	pop    ecx
c000f203:	5f                   	pop    edi
c000f204:	eb 8f                	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f206:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f20a:	89 d0                	mov    eax,edx
c000f20c:	83 c2 08             	add    edx,0x8
c000f20f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f213:	6a 10                	push   0x10
c000f215:	ff 30                	push   DWORD PTR [eax]
c000f217:	e8 fe fe ff ff       	call   c000f11a <Dbg::logWriteIntBase(unsigned int, int)>
c000f21c:	58                   	pop    eax
c000f21d:	5a                   	pop    edx
c000f21e:	e9 72 ff ff ff       	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f223:	6a 25                	push   0x25
c000f225:	e8 9f fe ff ff       	call   c000f0c9 <Dbg::logc(char)>
c000f22a:	58                   	pop    eax
c000f22b:	e9 65 ff ff ff       	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f230:	6a 25                	push   0x25
c000f232:	e8 92 fe ff ff       	call   c000f0c9 <Dbg::logc(char)>
c000f237:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f23a:	50                   	push   eax
c000f23b:	e8 89 fe ff ff       	call   c000f0c9 <Dbg::logc(char)>
c000f240:	5a                   	pop    edx
c000f241:	59                   	pop    ecx
c000f242:	e9 4e ff ff ff       	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f247:	50                   	push   eax
c000f248:	89 eb                	mov    ebx,ebp
c000f24a:	e8 7a fe ff ff       	call   c000f0c9 <Dbg::logc(char)>
c000f24f:	89 fd                	mov    ebp,edi
c000f251:	58                   	pop    eax
c000f252:	e9 3e ff ff ff       	jmp    c000f195 <Dbg::kprintf(char const*, ...)+0x5c>
c000f257:	90                   	nop

c000f258 <File::read(unsigned long long, void*, int*)>:
c000f258:	53                   	push   ebx
c000f259:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f25d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f261:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f268:	3c 19                	cmp    al,0x19
c000f26a:	77 35                	ja     c000f2a1 <File::read(unsigned long long, void*, int*)+0x49>
c000f26c:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c000f273:	85 c0                	test   eax,eax
c000f275:	74 2a                	je     c000f2a1 <File::read(unsigned long long, void*, int*)+0x49>
c000f277:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f27d:	85 c0                	test   eax,eax
c000f27f:	74 20                	je     c000f2a1 <File::read(unsigned long long, void*, int*)+0x49>
c000f281:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f285:	74 21                	je     c000f2a8 <File::read(unsigned long long, void*, int*)+0x50>
c000f287:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f289:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f28d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f297:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f29b:	5b                   	pop    ebx
c000f29c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f29f:	ff e0                	jmp    eax
c000f2a1:	b8 0b 00 00 00       	mov    eax,0xb
c000f2a6:	eb 05                	jmp    c000f2ad <File::read(unsigned long long, void*, int*)+0x55>
c000f2a8:	b8 05 00 00 00       	mov    eax,0x5
c000f2ad:	5b                   	pop    ebx
c000f2ae:	c3                   	ret    
c000f2af:	90                   	nop

c000f2b0 <File::write(unsigned long long, void*, int*)>:
c000f2b0:	53                   	push   ebx
c000f2b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2b9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2c0:	3c 19                	cmp    al,0x19
c000f2c2:	77 35                	ja     c000f2f9 <File::write(unsigned long long, void*, int*)+0x49>
c000f2c4:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c000f2cb:	85 c0                	test   eax,eax
c000f2cd:	74 2a                	je     c000f2f9 <File::write(unsigned long long, void*, int*)+0x49>
c000f2cf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2d5:	85 c0                	test   eax,eax
c000f2d7:	74 20                	je     c000f2f9 <File::write(unsigned long long, void*, int*)+0x49>
c000f2d9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2dd:	74 21                	je     c000f300 <File::write(unsigned long long, void*, int*)+0x50>
c000f2df:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2e1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2e5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2f3:	5b                   	pop    ebx
c000f2f4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f2f7:	ff e0                	jmp    eax
c000f2f9:	b8 0b 00 00 00       	mov    eax,0xb
c000f2fe:	eb 05                	jmp    c000f305 <File::write(unsigned long long, void*, int*)+0x55>
c000f300:	b8 05 00 00 00       	mov    eax,0x5
c000f305:	5b                   	pop    ebx
c000f306:	c3                   	ret    
c000f307:	90                   	nop

c000f308 <Directory::read(unsigned long long, void*, int*)>:
c000f308:	53                   	push   ebx
c000f309:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f30d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f311:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f318:	3c 19                	cmp    al,0x19
c000f31a:	77 35                	ja     c000f351 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f31c:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c000f323:	85 c0                	test   eax,eax
c000f325:	74 2a                	je     c000f351 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f327:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f32d:	85 c0                	test   eax,eax
c000f32f:	74 20                	je     c000f351 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f331:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f335:	74 21                	je     c000f358 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f337:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f339:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f33d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f347:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f34b:	5b                   	pop    ebx
c000f34c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f34f:	ff e0                	jmp    eax
c000f351:	b8 0b 00 00 00       	mov    eax,0xb
c000f356:	eb 05                	jmp    c000f35d <Directory::read(unsigned long long, void*, int*)+0x55>
c000f358:	b8 05 00 00 00       	mov    eax,0x5
c000f35d:	5b                   	pop    ebx
c000f35e:	c3                   	ret    
c000f35f:	90                   	nop

c000f360 <Directory::write(unsigned long long, void*, int*)>:
c000f360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f364:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f36b:	b8 0b 00 00 00       	mov    eax,0xb
c000f370:	80 fa 19             	cmp    dl,0x19
c000f373:	77 18                	ja     c000f38d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f375:	8b 14 95 c0 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb640]
c000f37c:	85 d2                	test   edx,edx
c000f37e:	74 0d                	je     c000f38d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f380:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f387:	19 c0                	sbb    eax,eax
c000f389:	83 e0 0a             	and    eax,0xa
c000f38c:	40                   	inc    eax
c000f38d:	c3                   	ret    

c000f38e <File::isAtty()>:
c000f38e:	31 c0                	xor    eax,eax
c000f390:	c3                   	ret    
c000f391:	90                   	nop

c000f392 <Directory::isAtty()>:
c000f392:	31 c0                	xor    eax,eax
c000f394:	c3                   	ret    
c000f395:	90                   	nop

c000f396 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f396:	b8 0a 00 00 00       	mov    eax,0xa
c000f39b:	c3                   	ret    

c000f39c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f39c:	b8 0a 00 00 00       	mov    eax,0xa
c000f3a1:	c3                   	ret    

c000f3a2 <File::~File()>:
c000f3a2:	83 ec 0c             	sub    esp,0xc
c000f3a5:	ba b4 17 02 c0       	mov    edx,0xc00217b4
c000f3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ae:	89 10                	mov    DWORD PTR [eax],edx
c000f3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b4:	83 ec 0c             	sub    esp,0xc
c000f3b7:	50                   	push   eax
c000f3b8:	e8 49 eb ff ff       	call   c000df06 <UnixFile::~UnixFile()>
c000f3bd:	83 c4 10             	add    esp,0x10
c000f3c0:	90                   	nop
c000f3c1:	83 c4 0c             	add    esp,0xc
c000f3c4:	c3                   	ret    
c000f3c5:	90                   	nop

c000f3c6 <File::~File()>:
c000f3c6:	83 ec 0c             	sub    esp,0xc
c000f3c9:	83 ec 0c             	sub    esp,0xc
c000f3cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3d0:	e8 cd ff ff ff       	call   c000f3a2 <File::~File()>
c000f3d5:	83 c4 10             	add    esp,0x10
c000f3d8:	83 ec 08             	sub    esp,0x8
c000f3db:	68 14 01 00 00       	push   0x114
c000f3e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3e4:	e8 70 fc ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	83 c4 0c             	add    esp,0xc
c000f3ef:	c3                   	ret    

c000f3f0 <Directory::~Directory()>:
c000f3f0:	83 ec 0c             	sub    esp,0xc
c000f3f3:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c000f3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3fc:	89 10                	mov    DWORD PTR [eax],edx
c000f3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f402:	83 ec 0c             	sub    esp,0xc
c000f405:	50                   	push   eax
c000f406:	e8 fb ea ff ff       	call   c000df06 <UnixFile::~UnixFile()>
c000f40b:	83 c4 10             	add    esp,0x10
c000f40e:	90                   	nop
c000f40f:	83 c4 0c             	add    esp,0xc
c000f412:	c3                   	ret    
c000f413:	90                   	nop

c000f414 <Directory::~Directory()>:
c000f414:	83 ec 0c             	sub    esp,0xc
c000f417:	83 ec 0c             	sub    esp,0xc
c000f41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f41e:	e8 cd ff ff ff       	call   c000f3f0 <Directory::~Directory()>
c000f423:	83 c4 10             	add    esp,0x10
c000f426:	83 ec 08             	sub    esp,0x8
c000f429:	68 14 01 00 00       	push   0x114
c000f42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f432:	e8 22 fc ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c000f437:	83 c4 10             	add    esp,0x10
c000f43a:	83 c4 0c             	add    esp,0xc
c000f43d:	c3                   	ret    

c000f43e <Filesystem::Filesystem()>:
c000f43e:	ba 50 17 02 c0       	mov    edx,0xc0021750
c000f443:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f447:	89 10                	mov    DWORD PTR [eax],edx
c000f449:	8b 15 28 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024528
c000f44f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f453:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f45a:	a3 28 45 02 c0       	mov    ds:0xc0024528,eax
c000f45f:	90                   	nop
c000f460:	c3                   	ret    
c000f461:	90                   	nop

c000f462 <Filesystem::~Filesystem()>:
c000f462:	ba 50 17 02 c0       	mov    edx,0xc0021750
c000f467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f46b:	89 10                	mov    DWORD PTR [eax],edx
c000f46d:	90                   	nop
c000f46e:	c3                   	ret    
c000f46f:	90                   	nop

c000f470 <Filesystem::~Filesystem()>:
c000f470:	83 ec 0c             	sub    esp,0xc
c000f473:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f477:	e8 e6 ff ff ff       	call   c000f462 <Filesystem::~Filesystem()>
c000f47c:	83 c4 04             	add    esp,0x4
c000f47f:	83 ec 08             	sub    esp,0x8
c000f482:	6a 08                	push   0x8
c000f484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f488:	e8 cc fb ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c000f48d:	83 c4 10             	add    esp,0x10
c000f490:	83 c4 0c             	add    esp,0xc
c000f493:	c3                   	ret    

c000f494 <initVFS()>:
c000f494:	83 ec 18             	sub    esp,0x18
c000f497:	6a 08                	push   0x8
c000f499:	e8 ac fb ff ff       	call   c000f04a <operator new(unsigned long)>
c000f49e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4a1:	e8 b0 b2 00 00       	call   c001a756 <FAT::FAT()>
c000f4a6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4ad:	e8 98 fb ff ff       	call   c000f04a <operator new(unsigned long)>
c000f4b2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4b5:	e8 12 c5 00 00       	call   c001b9cc <ISO9660::ISO9660()>
c000f4ba:	83 c4 1c             	add    esp,0x1c
c000f4bd:	c3                   	ret    

c000f4be <standardiseFiles(char*, char const*, char const*)>:
c000f4be:	55                   	push   ebp
c000f4bf:	57                   	push   edi
c000f4c0:	56                   	push   esi
c000f4c1:	53                   	push   ebx
c000f4c2:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4c8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4cf:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4d6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4dd:	68 00 04 00 00       	push   0x400
c000f4e2:	6a 00                	push   0x0
c000f4e4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4e8:	56                   	push   esi
c000f4e9:	e8 f8 11 ff ff       	call   c00006e6 <memset>
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f4f5:	75 0b                	jne    c000f502 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f4f7:	50                   	push   eax
c000f4f8:	50                   	push   eax
c000f4f9:	57                   	push   edi
c000f4fa:	56                   	push   esi
c000f4fb:	e8 85 12 ff ff       	call   c0000785 <strcpy>
c000f500:	eb 41                	jmp    c000f543 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f502:	8a 07                	mov    al,BYTE PTR [edi]
c000f504:	3c 5c                	cmp    al,0x5c
c000f506:	74 04                	je     c000f50c <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f508:	3c 2f                	cmp    al,0x2f
c000f50a:	75 18                	jne    c000f524 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f50c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f50f:	3c 60                	cmp    al,0x60
c000f511:	7e 03                	jle    c000f516 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f513:	83 e8 20             	sub    eax,0x20
c000f516:	88 04 24             	mov    BYTE PTR [esp],al
c000f519:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f520:	50                   	push   eax
c000f521:	50                   	push   eax
c000f522:	eb 18                	jmp    c000f53c <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f524:	50                   	push   eax
c000f525:	50                   	push   eax
c000f526:	55                   	push   ebp
c000f527:	56                   	push   esi
c000f528:	e8 58 12 ff ff       	call   c0000785 <strcpy>
c000f52d:	5a                   	pop    edx
c000f52e:	59                   	pop    ecx
c000f52f:	68 a0 2a 02 c0       	push   0xc0022aa0
c000f534:	56                   	push   esi
c000f535:	e8 02 13 ff ff       	call   c000083c <strcat>
c000f53a:	5d                   	pop    ebp
c000f53b:	58                   	pop    eax
c000f53c:	57                   	push   edi
c000f53d:	56                   	push   esi
c000f53e:	e8 f9 12 ff ff       	call   c000083c <strcat>
c000f543:	83 c4 10             	add    esp,0x10
c000f546:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f549:	3c 60                	cmp    al,0x60
c000f54b:	7e 03                	jle    c000f550 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f54d:	83 e8 20             	sub    eax,0x20
c000f550:	88 04 24             	mov    BYTE PTR [esp],al
c000f553:	88 03                	mov    BYTE PTR [ebx],al
c000f555:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f55c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f562:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f566:	bf 03 00 00 00       	mov    edi,0x3
c000f56b:	b8 03 00 00 00       	mov    eax,0x3
c000f570:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f573:	84 d2                	test   dl,dl
c000f575:	0f 84 91 00 00 00    	je     c000f60c <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f57b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f57e:	80 fa 5c             	cmp    dl,0x5c
c000f581:	74 05                	je     c000f588 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f583:	80 fa 2f             	cmp    dl,0x2f
c000f586:	75 12                	jne    c000f59a <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f588:	89 c5                	mov    ebp,eax
c000f58a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f58f:	74 09                	je     c000f59a <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f591:	40                   	inc    eax
c000f592:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f596:	89 cf                	mov    edi,ecx
c000f598:	eb d6                	jmp    c000f570 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f59a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f59f:	75 5b                	jne    c000f5fc <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5a1:	80 fa 2e             	cmp    dl,0x2e
c000f5a4:	75 56                	jne    c000f5fc <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5a6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5aa:	74 19                	je     c000f5c5 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5ac:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5b1:	74 53                	je     c000f606 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5b3:	89 f9                	mov    ecx,edi
c000f5b5:	41                   	inc    ecx
c000f5b6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5b9:	80 fa 2f             	cmp    dl,0x2f
c000f5bc:	74 f7                	je     c000f5b5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5be:	80 fa 5c             	cmp    dl,0x5c
c000f5c1:	74 f2                	je     c000f5b5 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5c3:	eb d1                	jmp    c000f596 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5c5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5ca:	74 3a                	je     c000f606 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5cc:	83 f8 03             	cmp    eax,0x3
c000f5cf:	74 c5                	je     c000f596 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5d1:	41                   	inc    ecx
c000f5d2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5d5:	80 fa 2f             	cmp    dl,0x2f
c000f5d8:	74 f7                	je     c000f5d1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5da:	80 fa 5c             	cmp    dl,0x5c
c000f5dd:	74 f2                	je     c000f5d1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5df:	48                   	dec    eax
c000f5e0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5e4:	75 06                	jne    c000f5ec <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5e6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5ea:	eb f3                	jmp    c000f5df <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5ec:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5f0:	74 07                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f5f2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5f6:	48                   	dec    eax
c000f5f7:	eb f3                	jmp    c000f5ec <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5f9:	40                   	inc    eax
c000f5fa:	eb 9a                	jmp    c000f596 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5fc:	80 fa 2f             	cmp    dl,0x2f
c000f5ff:	74 95                	je     c000f596 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f601:	80 fa 5c             	cmp    dl,0x5c
c000f604:	74 90                	je     c000f596 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f606:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f609:	40                   	inc    eax
c000f60a:	eb 8a                	jmp    c000f596 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f60c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f610:	83 ec 0c             	sub    esp,0xc
c000f613:	53                   	push   ebx
c000f614:	e8 ea 10 ff ff       	call   c0000703 <strlen>
c000f619:	83 c4 10             	add    esp,0x10
c000f61c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f621:	75 26                	jne    c000f649 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f623:	83 ec 0c             	sub    esp,0xc
c000f626:	53                   	push   ebx
c000f627:	e8 d7 10 ff ff       	call   c0000703 <strlen>
c000f62c:	83 c4 10             	add    esp,0x10
c000f62f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f634:	74 26                	je     c000f65c <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f636:	83 ec 0c             	sub    esp,0xc
c000f639:	53                   	push   ebx
c000f63a:	e8 c4 10 ff ff       	call   c0000703 <strlen>
c000f63f:	83 c4 10             	add    esp,0x10
c000f642:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f647:	eb c7                	jmp    c000f610 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f649:	83 ec 0c             	sub    esp,0xc
c000f64c:	53                   	push   ebx
c000f64d:	e8 b1 10 ff ff       	call   c0000703 <strlen>
c000f652:	83 c4 10             	add    esp,0x10
c000f655:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f65a:	74 c7                	je     c000f623 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f65c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f662:	5b                   	pop    ebx
c000f663:	5e                   	pop    esi
c000f664:	5f                   	pop    edi
c000f665:	5d                   	pop    ebp
c000f666:	c3                   	ret    
c000f667:	90                   	nop

c000f668 <File::File(char const*, Process*)>:
c000f668:	83 ec 0c             	sub    esp,0xc
c000f66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f66f:	83 ec 08             	sub    esp,0x8
c000f672:	6a 00                	push   0x0
c000f674:	50                   	push   eax
c000f675:	e8 ea e6 ff ff       	call   c000dd64 <UnixFile::UnixFile(int)>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	ba b4 17 02 c0       	mov    edx,0xc00217b4
c000f682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f686:	89 10                	mov    DWORD PTR [eax],edx
c000f688:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f68c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f696:	83 c0 0d             	add    eax,0xd
c000f699:	83 ec 04             	sub    esp,0x4
c000f69c:	52                   	push   edx
c000f69d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a1:	50                   	push   eax
c000f6a2:	e8 17 fe ff ff       	call   c000f4be <standardiseFiles(char*, char const*, char const*)>
c000f6a7:	83 c4 10             	add    esp,0x10
c000f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ae:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6b1:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6b8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6c2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6c6:	90                   	nop
c000f6c7:	83 c4 0c             	add    esp,0xc
c000f6ca:	c3                   	ret    
c000f6cb:	90                   	nop

c000f6cc <File::open(FileOpenMode)>:
c000f6cc:	53                   	push   ebx
c000f6cd:	b8 0b 00 00 00       	mov    eax,0xb
c000f6d2:	83 ec 08             	sub    esp,0x8
c000f6d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6d9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6e0:	80 fa 19             	cmp    dl,0x19
c000f6e3:	77 40                	ja     c000f725 <File::open(FileOpenMode)+0x59>
c000f6e5:	8b 14 95 c0 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb640]
c000f6ec:	85 d2                	test   edx,edx
c000f6ee:	74 35                	je     c000f725 <File::open(FileOpenMode)+0x59>
c000f6f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6f6:	85 d2                	test   edx,edx
c000f6f8:	74 2b                	je     c000f725 <File::open(FileOpenMode)+0x59>
c000f6fa:	b8 06 00 00 00       	mov    eax,0x6
c000f6ff:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f703:	75 20                	jne    c000f725 <File::open(FileOpenMode)+0x59>
c000f705:	8b 02                	mov    eax,DWORD PTR [edx]
c000f707:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f70d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f711:	51                   	push   ecx
c000f712:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f715:	51                   	push   ecx
c000f716:	52                   	push   edx
c000f717:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f71a:	83 c4 10             	add    esp,0x10
c000f71d:	85 c0                	test   eax,eax
c000f71f:	75 04                	jne    c000f725 <File::open(FileOpenMode)+0x59>
c000f721:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f725:	83 c4 08             	add    esp,0x8
c000f728:	5b                   	pop    ebx
c000f729:	c3                   	ret    

c000f72a <File::close()>:
c000f72a:	53                   	push   ebx
c000f72b:	b8 0b 00 00 00       	mov    eax,0xb
c000f730:	83 ec 08             	sub    esp,0x8
c000f733:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f737:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f73e:	80 fa 19             	cmp    dl,0x19
c000f741:	77 41                	ja     c000f784 <File::close()+0x5a>
c000f743:	8b 1c 95 c0 49 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb640]
c000f74a:	85 db                	test   ebx,ebx
c000f74c:	74 36                	je     c000f784 <File::close()+0x5a>
c000f74e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f755:	74 2d                	je     c000f784 <File::close()+0x5a>
c000f757:	b8 05 00 00 00       	mov    eax,0x5
c000f75c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f760:	74 22                	je     c000f784 <File::close()+0x5a>
c000f762:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f766:	8b 04 95 c0 49 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb640]
c000f76d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f773:	53                   	push   ebx
c000f774:	53                   	push   ebx
c000f775:	8b 10                	mov    edx,DWORD PTR [eax]
c000f777:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f77d:	50                   	push   eax
c000f77e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f781:	83 c4 10             	add    esp,0x10
c000f784:	83 c4 08             	add    esp,0x8
c000f787:	5b                   	pop    ebx
c000f788:	c3                   	ret    
c000f789:	90                   	nop

c000f78a <File::seek(unsigned long long)>:
c000f78a:	56                   	push   esi
c000f78b:	53                   	push   ebx
c000f78c:	b8 0b 00 00 00       	mov    eax,0xb
c000f791:	51                   	push   ecx
c000f792:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f796:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f79a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7a5:	80 fa 19             	cmp    dl,0x19
c000f7a8:	77 31                	ja     c000f7db <File::seek(unsigned long long)+0x51>
c000f7aa:	8b 14 95 c0 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb640]
c000f7b1:	85 d2                	test   edx,edx
c000f7b3:	74 26                	je     c000f7db <File::seek(unsigned long long)+0x51>
c000f7b5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7bb:	85 d2                	test   edx,edx
c000f7bd:	74 1c                	je     c000f7db <File::seek(unsigned long long)+0x51>
c000f7bf:	b8 05 00 00 00       	mov    eax,0x5
c000f7c4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7c8:	74 11                	je     c000f7db <File::seek(unsigned long long)+0x51>
c000f7ca:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7cc:	53                   	push   ebx
c000f7cd:	51                   	push   ecx
c000f7ce:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7d4:	52                   	push   edx
c000f7d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7d8:	83 c4 10             	add    esp,0x10
c000f7db:	5a                   	pop    edx
c000f7dc:	5b                   	pop    ebx
c000f7dd:	5e                   	pop    esi
c000f7de:	c3                   	ret    
c000f7df:	90                   	nop

c000f7e0 <File::tell(unsigned long long*)>:
c000f7e0:	83 ec 0c             	sub    esp,0xc
c000f7e3:	b8 0b 00 00 00       	mov    eax,0xb
c000f7e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7ec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f7f3:	80 fa 19             	cmp    dl,0x19
c000f7f6:	77 34                	ja     c000f82c <File::tell(unsigned long long*)+0x4c>
c000f7f8:	8b 14 95 c0 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb640]
c000f7ff:	85 d2                	test   edx,edx
c000f801:	74 29                	je     c000f82c <File::tell(unsigned long long*)+0x4c>
c000f803:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f809:	85 d2                	test   edx,edx
c000f80b:	74 1f                	je     c000f82c <File::tell(unsigned long long*)+0x4c>
c000f80d:	b8 05 00 00 00       	mov    eax,0x5
c000f812:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f816:	74 14                	je     c000f82c <File::tell(unsigned long long*)+0x4c>
c000f818:	50                   	push   eax
c000f819:	8b 02                	mov    eax,DWORD PTR [edx]
c000f81b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f825:	52                   	push   edx
c000f826:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f829:	83 c4 10             	add    esp,0x10
c000f82c:	83 c4 0c             	add    esp,0xc
c000f82f:	c3                   	ret    

c000f830 <File::rewind()>:
c000f830:	83 ec 10             	sub    esp,0x10
c000f833:	6a 00                	push   0x0
c000f835:	6a 00                	push   0x0
c000f837:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83b:	e8 4a ff ff ff       	call   c000f78a <File::seek(unsigned long long)>
c000f840:	83 c4 1c             	add    esp,0x1c
c000f843:	c3                   	ret    

c000f844 <File::unlink()>:
c000f844:	83 ec 0c             	sub    esp,0xc
c000f847:	b8 0b 00 00 00       	mov    eax,0xb
c000f84c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f850:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f857:	80 f9 19             	cmp    cl,0x19
c000f85a:	77 2f                	ja     c000f88b <File::unlink()+0x47>
c000f85c:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000f863:	85 c9                	test   ecx,ecx
c000f865:	74 24                	je     c000f88b <File::unlink()+0x47>
c000f867:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f86d:	85 c9                	test   ecx,ecx
c000f86f:	74 1a                	je     c000f88b <File::unlink()+0x47>
c000f871:	b8 06 00 00 00       	mov    eax,0x6
c000f876:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f87a:	75 0f                	jne    c000f88b <File::unlink()+0x47>
c000f87c:	83 c2 0d             	add    edx,0xd
c000f87f:	50                   	push   eax
c000f880:	50                   	push   eax
c000f881:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f883:	52                   	push   edx
c000f884:	51                   	push   ecx
c000f885:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	83 c4 0c             	add    esp,0xc
c000f88e:	c3                   	ret    
c000f88f:	90                   	nop

c000f890 <File::rename(char const*)>:
c000f890:	83 ec 0c             	sub    esp,0xc
c000f893:	b8 0b 00 00 00       	mov    eax,0xb
c000f898:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f89c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8a3:	80 f9 19             	cmp    cl,0x19
c000f8a6:	77 32                	ja     c000f8da <File::rename(char const*)+0x4a>
c000f8a8:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000f8af:	85 c9                	test   ecx,ecx
c000f8b1:	74 27                	je     c000f8da <File::rename(char const*)+0x4a>
c000f8b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8b9:	85 c9                	test   ecx,ecx
c000f8bb:	74 1d                	je     c000f8da <File::rename(char const*)+0x4a>
c000f8bd:	b8 06 00 00 00       	mov    eax,0x6
c000f8c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8c6:	75 12                	jne    c000f8da <File::rename(char const*)+0x4a>
c000f8c8:	83 c2 0d             	add    edx,0xd
c000f8cb:	50                   	push   eax
c000f8cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8d2:	52                   	push   edx
c000f8d3:	51                   	push   ecx
c000f8d4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8d7:	83 c4 10             	add    esp,0x10
c000f8da:	83 c4 0c             	add    esp,0xc
c000f8dd:	c3                   	ret    

c000f8de <File::chfatattr(unsigned char, unsigned char)>:
c000f8de:	57                   	push   edi
c000f8df:	b8 0b 00 00 00       	mov    eax,0xb
c000f8e4:	56                   	push   esi
c000f8e5:	53                   	push   ebx
c000f8e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8f9:	80 f9 19             	cmp    cl,0x19
c000f8fc:	77 37                	ja     c000f935 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8fe:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000f905:	85 c9                	test   ecx,ecx
c000f907:	74 2c                	je     c000f935 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f909:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f90f:	85 c9                	test   ecx,ecx
c000f911:	74 22                	je     c000f935 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f913:	b8 06 00 00 00       	mov    eax,0x6
c000f918:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f91c:	75 17                	jne    c000f935 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f91e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f920:	89 f0                	mov    eax,esi
c000f922:	83 c2 0d             	add    edx,0xd
c000f925:	0f b6 f0             	movzx  esi,al
c000f928:	0f b6 db             	movzx  ebx,bl
c000f92b:	56                   	push   esi
c000f92c:	53                   	push   ebx
c000f92d:	52                   	push   edx
c000f92e:	51                   	push   ecx
c000f92f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	5b                   	pop    ebx
c000f936:	5e                   	pop    esi
c000f937:	5f                   	pop    edi
c000f938:	c3                   	ret    
c000f939:	90                   	nop

c000f93a <File::exists()>:
c000f93a:	83 ec 0c             	sub    esp,0xc
c000f93d:	31 c0                	xor    eax,eax
c000f93f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f943:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f94a:	80 f9 19             	cmp    cl,0x19
c000f94d:	77 24                	ja     c000f973 <File::exists()+0x39>
c000f94f:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000f956:	85 c9                	test   ecx,ecx
c000f958:	74 19                	je     c000f973 <File::exists()+0x39>
c000f95a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f960:	85 c9                	test   ecx,ecx
c000f962:	74 0f                	je     c000f973 <File::exists()+0x39>
c000f964:	83 c2 0d             	add    edx,0xd
c000f967:	50                   	push   eax
c000f968:	50                   	push   eax
c000f969:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f96b:	52                   	push   edx
c000f96c:	51                   	push   ecx
c000f96d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f970:	83 c4 10             	add    esp,0x10
c000f973:	83 c4 0c             	add    esp,0xc
c000f976:	c3                   	ret    
c000f977:	90                   	nop

c000f978 <File::stat(unsigned long long*, bool*)>:
c000f978:	56                   	push   esi
c000f979:	53                   	push   ebx
c000f97a:	50                   	push   eax
c000f97b:	b8 0b 00 00 00       	mov    eax,0xb
c000f980:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f984:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f988:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f98f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f993:	80 f9 19             	cmp    cl,0x19
c000f996:	77 3d                	ja     c000f9d5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f998:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000f99f:	85 c9                	test   ecx,ecx
c000f9a1:	74 32                	je     c000f9d5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f9a3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9a9:	85 c9                	test   ecx,ecx
c000f9ab:	74 28                	je     c000f9d5 <File::stat(unsigned long long*, bool*)+0x5d>
c000f9ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9b3:	74 13                	je     c000f9c8 <File::stat(unsigned long long*, bool*)+0x50>
c000f9b5:	83 ec 04             	sub    esp,0x4
c000f9b8:	56                   	push   esi
c000f9b9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9bf:	51                   	push   ecx
c000f9c0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9c3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9c6:	eb 0a                	jmp    c000f9d2 <File::stat(unsigned long long*, bool*)+0x5a>
c000f9c8:	53                   	push   ebx
c000f9c9:	83 c2 0d             	add    edx,0xd
c000f9cc:	56                   	push   esi
c000f9cd:	52                   	push   edx
c000f9ce:	51                   	push   ecx
c000f9cf:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9d2:	83 c4 10             	add    esp,0x10
c000f9d5:	5a                   	pop    edx
c000f9d6:	5b                   	pop    ebx
c000f9d7:	5e                   	pop    esi
c000f9d8:	c3                   	ret    

c000f9d9 <getcwd(Process*, char*, int)>:
c000f9d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9dd:	31 c0                	xor    eax,eax
c000f9df:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9e2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9e6:	7d 15                	jge    c000f9fd <getcwd(Process*, char*, int)+0x24>
c000f9e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9ec:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f9f3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f9f6:	84 c9                	test   cl,cl
c000f9f8:	74 06                	je     c000fa00 <getcwd(Process*, char*, int)+0x27>
c000f9fa:	40                   	inc    eax
c000f9fb:	eb e2                	jmp    c000f9df <getcwd(Process*, char*, int)+0x6>
c000f9fd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa00:	31 c0                	xor    eax,eax
c000fa02:	c3                   	ret    

c000fa03 <setcwd(Process*, char*)>:
c000fa03:	55                   	push   ebp
c000fa04:	57                   	push   edi
c000fa05:	56                   	push   esi
c000fa06:	53                   	push   ebx
c000fa07:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa0d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa14:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa1a:	57                   	push   edi
c000fa1b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa22:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa26:	56                   	push   esi
c000fa27:	e8 92 fa ff ff       	call   c000f4be <standardiseFiles(char*, char const*, char const*)>
c000fa2c:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa2f:	e8 cf 0c ff ff       	call   c0000703 <strlen>
c000fa34:	83 c4 10             	add    esp,0x10
c000fa37:	83 f8 02             	cmp    eax,0x2
c000fa3a:	77 17                	ja     c000fa53 <setcwd(Process*, char*)+0x50>
c000fa3c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa41:	83 e8 41             	sub    eax,0x41
c000fa44:	83 f8 19             	cmp    eax,0x19
c000fa47:	76 24                	jbe    c000fa6d <setcwd(Process*, char*)+0x6a>
c000fa49:	b8 03 00 00 00       	mov    eax,0x3
c000fa4e:	e9 cb 00 00 00       	jmp    c000fb1e <setcwd(Process*, char*)+0x11b>
c000fa53:	83 ec 0c             	sub    esp,0xc
c000fa56:	56                   	push   esi
c000fa57:	e8 a7 0c ff ff       	call   c0000703 <strlen>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	83 f8 03             	cmp    eax,0x3
c000fa62:	75 33                	jne    c000fa97 <setcwd(Process*, char*)+0x94>
c000fa64:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa69:	75 2c                	jne    c000fa97 <setcwd(Process*, char*)+0x94>
c000fa6b:	eb cf                	jmp    c000fa3c <setcwd(Process*, char*)+0x39>
c000fa6d:	8b 14 85 c0 49 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb640]
c000fa74:	b8 05 00 00 00       	mov    eax,0x5
c000fa79:	85 d2                	test   edx,edx
c000fa7b:	0f 84 9d 00 00 00    	je     c000fb1e <setcwd(Process*, char*)+0x11b>
c000fa81:	b8 06 00 00 00       	mov    eax,0x6
c000fa86:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa8d:	0f 84 8b 00 00 00    	je     c000fb1e <setcwd(Process*, char*)+0x11b>
c000fa93:	51                   	push   ecx
c000fa94:	51                   	push   ecx
c000fa95:	eb 7b                	jmp    c000fb12 <setcwd(Process*, char*)+0x10f>
c000fa97:	83 ec 0c             	sub    esp,0xc
c000fa9a:	68 14 01 00 00       	push   0x114
c000fa9f:	e8 a6 f5 ff ff       	call   c000f04a <operator new(unsigned long)>
c000faa4:	83 c4 0c             	add    esp,0xc
c000faa7:	89 c3                	mov    ebx,eax
c000faa9:	55                   	push   ebp
c000faaa:	56                   	push   esi
c000faab:	50                   	push   eax
c000faac:	e8 b7 fb ff ff       	call   c000f668 <File::File(char const*, Process*)>
c000fab1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fab6:	83 c4 0c             	add    esp,0xc
c000fab9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fabd:	50                   	push   eax
c000fabe:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fac2:	50                   	push   eax
c000fac3:	53                   	push   ebx
c000fac4:	e8 af fe ff ff       	call   c000f978 <File::stat(unsigned long long*, bool*)>
c000fac9:	83 c4 10             	add    esp,0x10
c000facc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000face:	83 f8 02             	cmp    eax,0x2
c000fad1:	75 09                	jne    c000fadc <setcwd(Process*, char*)+0xd9>
c000fad3:	83 ec 0c             	sub    esp,0xc
c000fad6:	53                   	push   ebx
c000fad7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fada:	eb 0d                	jmp    c000fae9 <setcwd(Process*, char*)+0xe6>
c000fadc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fadf:	85 c0                	test   eax,eax
c000fae1:	74 10                	je     c000faf3 <setcwd(Process*, char*)+0xf0>
c000fae3:	83 ec 0c             	sub    esp,0xc
c000fae6:	53                   	push   ebx
c000fae7:	ff d2                	call   edx
c000fae9:	83 c4 10             	add    esp,0x10
c000faec:	b8 01 00 00 00       	mov    eax,0x1
c000faf1:	eb 2b                	jmp    c000fb1e <setcwd(Process*, char*)+0x11b>
c000faf3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000faf8:	75 10                	jne    c000fb0a <setcwd(Process*, char*)+0x107>
c000fafa:	83 ec 0c             	sub    esp,0xc
c000fafd:	53                   	push   ebx
c000fafe:	ff d2                	call   edx
c000fb00:	83 c4 10             	add    esp,0x10
c000fb03:	b8 02 00 00 00       	mov    eax,0x2
c000fb08:	eb 14                	jmp    c000fb1e <setcwd(Process*, char*)+0x11b>
c000fb0a:	83 ec 0c             	sub    esp,0xc
c000fb0d:	53                   	push   ebx
c000fb0e:	ff d2                	call   edx
c000fb10:	58                   	pop    eax
c000fb11:	5a                   	pop    edx
c000fb12:	56                   	push   esi
c000fb13:	57                   	push   edi
c000fb14:	e8 6c 0c ff ff       	call   c0000785 <strcpy>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	31 c0                	xor    eax,eax
c000fb1e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb24:	5b                   	pop    ebx
c000fb25:	5e                   	pop    esi
c000fb26:	5f                   	pop    edi
c000fb27:	5d                   	pop    ebp
c000fb28:	c3                   	ret    
c000fb29:	90                   	nop

c000fb2a <Directory::Directory(char const*, Process*)>:
c000fb2a:	83 ec 0c             	sub    esp,0xc
c000fb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb31:	83 ec 08             	sub    esp,0x8
c000fb34:	6a 00                	push   0x0
c000fb36:	50                   	push   eax
c000fb37:	e8 28 e2 ff ff       	call   c000dd64 <UnixFile::UnixFile(int)>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c000fb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb48:	89 10                	mov    DWORD PTR [eax],edx
c000fb4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb4e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb58:	83 c0 0d             	add    eax,0xd
c000fb5b:	83 ec 04             	sub    esp,0x4
c000fb5e:	52                   	push   edx
c000fb5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb63:	50                   	push   eax
c000fb64:	e8 55 f9 ff ff       	call   c000f4be <standardiseFiles(char*, char const*, char const*)>
c000fb69:	83 c4 10             	add    esp,0x10
c000fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb70:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb73:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb7a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb84:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb88:	90                   	nop
c000fb89:	83 c4 0c             	add    esp,0xc
c000fb8c:	c3                   	ret    
c000fb8d:	90                   	nop

c000fb8e <Directory::open()>:
c000fb8e:	53                   	push   ebx
c000fb8f:	b8 0b 00 00 00       	mov    eax,0xb
c000fb94:	83 ec 08             	sub    esp,0x8
c000fb97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb9b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fba2:	80 fa 19             	cmp    dl,0x19
c000fba5:	77 3d                	ja     c000fbe4 <Directory::open()+0x56>
c000fba7:	8b 14 95 c0 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb640]
c000fbae:	85 d2                	test   edx,edx
c000fbb0:	74 32                	je     c000fbe4 <Directory::open()+0x56>
c000fbb2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbb8:	85 d2                	test   edx,edx
c000fbba:	74 28                	je     c000fbe4 <Directory::open()+0x56>
c000fbbc:	b8 06 00 00 00       	mov    eax,0x6
c000fbc1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbc5:	75 1d                	jne    c000fbe4 <Directory::open()+0x56>
c000fbc7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbcd:	50                   	push   eax
c000fbce:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbd0:	51                   	push   ecx
c000fbd1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbd4:	51                   	push   ecx
c000fbd5:	52                   	push   edx
c000fbd6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fbd9:	83 c4 10             	add    esp,0x10
c000fbdc:	85 c0                	test   eax,eax
c000fbde:	75 04                	jne    c000fbe4 <Directory::open()+0x56>
c000fbe0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbe4:	83 c4 08             	add    esp,0x8
c000fbe7:	5b                   	pop    ebx
c000fbe8:	c3                   	ret    
c000fbe9:	90                   	nop

c000fbea <Directory::close()>:
c000fbea:	53                   	push   ebx
c000fbeb:	b8 0b 00 00 00       	mov    eax,0xb
c000fbf0:	83 ec 08             	sub    esp,0x8
c000fbf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbf7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbfe:	80 fa 19             	cmp    dl,0x19
c000fc01:	77 41                	ja     c000fc44 <Directory::close()+0x5a>
c000fc03:	8b 1c 95 c0 49 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb640]
c000fc0a:	85 db                	test   ebx,ebx
c000fc0c:	74 36                	je     c000fc44 <Directory::close()+0x5a>
c000fc0e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc15:	74 2d                	je     c000fc44 <Directory::close()+0x5a>
c000fc17:	b8 05 00 00 00       	mov    eax,0x5
c000fc1c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc20:	74 22                	je     c000fc44 <Directory::close()+0x5a>
c000fc22:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc26:	8b 04 95 c0 49 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb640]
c000fc2d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc33:	53                   	push   ebx
c000fc34:	53                   	push   ebx
c000fc35:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc37:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc3d:	50                   	push   eax
c000fc3e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc41:	83 c4 10             	add    esp,0x10
c000fc44:	83 c4 08             	add    esp,0x8
c000fc47:	5b                   	pop    ebx
c000fc48:	c3                   	ret    
c000fc49:	90                   	nop

c000fc4a <Directory::unlink()>:
c000fc4a:	83 ec 0c             	sub    esp,0xc
c000fc4d:	b8 0b 00 00 00       	mov    eax,0xb
c000fc52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc5d:	80 f9 19             	cmp    cl,0x19
c000fc60:	77 2f                	ja     c000fc91 <Directory::unlink()+0x47>
c000fc62:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000fc69:	85 c9                	test   ecx,ecx
c000fc6b:	74 24                	je     c000fc91 <Directory::unlink()+0x47>
c000fc6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc73:	85 c9                	test   ecx,ecx
c000fc75:	74 1a                	je     c000fc91 <Directory::unlink()+0x47>
c000fc77:	b8 06 00 00 00       	mov    eax,0x6
c000fc7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc80:	75 0f                	jne    c000fc91 <Directory::unlink()+0x47>
c000fc82:	83 c2 0d             	add    edx,0xd
c000fc85:	50                   	push   eax
c000fc86:	50                   	push   eax
c000fc87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc89:	52                   	push   edx
c000fc8a:	51                   	push   ecx
c000fc8b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc8e:	83 c4 10             	add    esp,0x10
c000fc91:	83 c4 0c             	add    esp,0xc
c000fc94:	c3                   	ret    
c000fc95:	90                   	nop

c000fc96 <Directory::rename(char const*)>:
c000fc96:	83 ec 0c             	sub    esp,0xc
c000fc99:	b8 0b 00 00 00       	mov    eax,0xb
c000fc9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fca2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fca9:	80 f9 19             	cmp    cl,0x19
c000fcac:	77 32                	ja     c000fce0 <Directory::rename(char const*)+0x4a>
c000fcae:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000fcb5:	85 c9                	test   ecx,ecx
c000fcb7:	74 27                	je     c000fce0 <Directory::rename(char const*)+0x4a>
c000fcb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcbf:	85 c9                	test   ecx,ecx
c000fcc1:	74 1d                	je     c000fce0 <Directory::rename(char const*)+0x4a>
c000fcc3:	b8 06 00 00 00       	mov    eax,0x6
c000fcc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fccc:	75 12                	jne    c000fce0 <Directory::rename(char const*)+0x4a>
c000fcce:	83 c2 0d             	add    edx,0xd
c000fcd1:	50                   	push   eax
c000fcd2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fcd8:	52                   	push   edx
c000fcd9:	51                   	push   ecx
c000fcda:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	83 c4 0c             	add    esp,0xc
c000fce3:	c3                   	ret    

c000fce4 <Directory::exists()>:
c000fce4:	83 ec 0c             	sub    esp,0xc
c000fce7:	31 c0                	xor    eax,eax
c000fce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fced:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcf4:	80 f9 19             	cmp    cl,0x19
c000fcf7:	77 24                	ja     c000fd1d <Directory::exists()+0x39>
c000fcf9:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000fd00:	85 c9                	test   ecx,ecx
c000fd02:	74 19                	je     c000fd1d <Directory::exists()+0x39>
c000fd04:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd0a:	85 c9                	test   ecx,ecx
c000fd0c:	74 0f                	je     c000fd1d <Directory::exists()+0x39>
c000fd0e:	83 c2 0d             	add    edx,0xd
c000fd11:	50                   	push   eax
c000fd12:	50                   	push   eax
c000fd13:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd15:	52                   	push   edx
c000fd16:	51                   	push   ecx
c000fd17:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd1a:	83 c4 10             	add    esp,0x10
c000fd1d:	83 c4 0c             	add    esp,0xc
c000fd20:	c3                   	ret    
c000fd21:	90                   	nop

c000fd22 <Directory::read(dirent*)>:
c000fd22:	83 ec 1c             	sub    esp,0x1c
c000fd25:	b8 0b 00 00 00       	mov    eax,0xb
c000fd2a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd2e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd35:	80 fa 19             	cmp    dl,0x19
c000fd38:	77 30                	ja     c000fd6a <Directory::read(dirent*)+0x48>
c000fd3a:	8b 14 95 c0 49 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb640]
c000fd41:	85 d2                	test   edx,edx
c000fd43:	74 25                	je     c000fd6a <Directory::read(dirent*)+0x48>
c000fd45:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd4c:	74 1c                	je     c000fd6a <Directory::read(dirent*)+0x48>
c000fd4e:	83 ec 0c             	sub    esp,0xc
c000fd51:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd53:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd57:	52                   	push   edx
c000fd58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd5c:	6a 00                	push   0x0
c000fd5e:	68 10 01 00 00       	push   0x110
c000fd63:	51                   	push   ecx
c000fd64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd67:	83 c4 20             	add    esp,0x20
c000fd6a:	83 c4 1c             	add    esp,0x1c
c000fd6d:	c3                   	ret    

c000fd6e <Directory::create()>:
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	b8 0b 00 00 00       	mov    eax,0xb
c000fd76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd81:	80 f9 19             	cmp    cl,0x19
c000fd84:	77 2f                	ja     c000fdb5 <Directory::create()+0x47>
c000fd86:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c000fd8d:	85 c9                	test   ecx,ecx
c000fd8f:	74 24                	je     c000fdb5 <Directory::create()+0x47>
c000fd91:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd97:	85 c9                	test   ecx,ecx
c000fd99:	74 1a                	je     c000fdb5 <Directory::create()+0x47>
c000fd9b:	b8 06 00 00 00       	mov    eax,0x6
c000fda0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fda4:	75 0f                	jne    c000fdb5 <Directory::create()+0x47>
c000fda6:	83 c2 0d             	add    edx,0xd
c000fda9:	50                   	push   eax
c000fdaa:	50                   	push   eax
c000fdab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdad:	52                   	push   edx
c000fdae:	51                   	push   ecx
c000fdaf:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdb2:	83 c4 10             	add    esp,0x10
c000fdb5:	83 c4 0c             	add    esp,0xc
c000fdb8:	c3                   	ret    
c000fdb9:	90                   	nop

c000fdba <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fdba:	b8 0a 00 00 00       	mov    eax,0xa
c000fdbf:	c3                   	ret    

c000fdc0 <Bus::Bus(char const*)>:
c000fdc0:	83 ec 0c             	sub    esp,0xc
c000fdc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdc7:	83 ec 08             	sub    esp,0x8
c000fdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdce:	50                   	push   eax
c000fdcf:	e8 60 09 00 00       	call   c0010734 <Device::Device(char const*)>
c000fdd4:	83 c4 10             	add    esp,0x10
c000fdd7:	ba ec 17 02 c0       	mov    edx,0xc00217ec
c000fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde0:	89 10                	mov    DWORD PTR [eax],edx
c000fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fdf0:	90                   	nop
c000fdf1:	83 c4 0c             	add    esp,0xc
c000fdf4:	c3                   	ret    
c000fdf5:	90                   	nop

c000fdf6 <Bus::~Bus()>:
c000fdf6:	83 ec 0c             	sub    esp,0xc
c000fdf9:	ba ec 17 02 c0       	mov    edx,0xc00217ec
c000fdfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe02:	89 10                	mov    DWORD PTR [eax],edx
c000fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe08:	83 ec 0c             	sub    esp,0xc
c000fe0b:	50                   	push   eax
c000fe0c:	e8 d5 05 00 00       	call   c00103e6 <Device::~Device()>
c000fe11:	83 c4 10             	add    esp,0x10
c000fe14:	90                   	nop
c000fe15:	83 c4 0c             	add    esp,0xc
c000fe18:	c3                   	ret    
c000fe19:	90                   	nop

c000fe1a <Bus::~Bus()>:
c000fe1a:	83 ec 0c             	sub    esp,0xc
c000fe1d:	83 ec 0c             	sub    esp,0xc
c000fe20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe24:	e8 cd ff ff ff       	call   c000fdf6 <Bus::~Bus()>
c000fe29:	83 c4 10             	add    esp,0x10
c000fe2c:	83 ec 08             	sub    esp,0x8
c000fe2f:	68 58 01 00 00       	push   0x158
c000fe34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe38:	e8 1c f2 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c000fe3d:	83 c4 10             	add    esp,0x10
c000fe40:	83 c4 0c             	add    esp,0xc
c000fe43:	c3                   	ret    

c000fe44 <Buzzer::Buzzer(char const*)>:
c000fe44:	83 ec 0c             	sub    esp,0xc
c000fe47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4b:	83 ec 08             	sub    esp,0x8
c000fe4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe52:	50                   	push   eax
c000fe53:	e8 dc 08 00 00       	call   c0010734 <Device::Device(char const*)>
c000fe58:	83 c4 10             	add    esp,0x10
c000fe5b:	ba 18 18 02 c0       	mov    edx,0xc0021818
c000fe60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe64:	89 10                	mov    DWORD PTR [eax],edx
c000fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe78:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe82:	90                   	nop
c000fe83:	83 c4 0c             	add    esp,0xc
c000fe86:	c3                   	ret    
c000fe87:	90                   	nop

c000fe88 <Buzzer::~Buzzer()>:
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	ba 18 18 02 c0       	mov    edx,0xc0021818
c000fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe94:	89 10                	mov    DWORD PTR [eax],edx
c000fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9a:	83 ec 0c             	sub    esp,0xc
c000fe9d:	50                   	push   eax
c000fe9e:	e8 43 05 00 00       	call   c00103e6 <Device::~Device()>
c000fea3:	83 c4 10             	add    esp,0x10
c000fea6:	90                   	nop
c000fea7:	83 c4 0c             	add    esp,0xc
c000feaa:	c3                   	ret    
c000feab:	90                   	nop

c000feac <Buzzer::~Buzzer()>:
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb6:	e8 cd ff ff ff       	call   c000fe88 <Buzzer::~Buzzer()>
c000febb:	83 c4 10             	add    esp,0x10
c000febe:	83 ec 08             	sub    esp,0x8
c000fec1:	68 5c 01 00 00       	push   0x15c
c000fec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feca:	e8 8a f1 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c000fecf:	83 c4 10             	add    esp,0x10
c000fed2:	83 c4 0c             	add    esp,0xc
c000fed5:	c3                   	ret    

c000fed6 <Buzzer::stop()>:
c000fed6:	83 ec 14             	sub    esp,0x14
c000fed9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fedd:	8b 10                	mov    edx,DWORD PTR [eax]
c000fedf:	6a 00                	push   0x0
c000fee1:	50                   	push   eax
c000fee2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fee5:	83 c4 1c             	add    esp,0x1c
c000fee8:	c3                   	ret    

c000fee9 <beepThread(void*)>:
c000fee9:	53                   	push   ebx
c000feea:	83 ec 08             	sub    esp,0x8
c000feed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fef1:	e8 80 89 00 00       	call   c0018876 <unlockScheduler()>
c000fef6:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fefb:	52                   	push   edx
c000fefc:	52                   	push   edx
c000fefd:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff03:	52                   	push   edx
c000ff04:	50                   	push   eax
c000ff05:	e8 b2 8e 00 00       	call   c0018dbc <nanoSleep(unsigned long long)>
c000ff0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff0d:	e8 c4 ff ff ff       	call   c000fed6 <Buzzer::stop()>
c000ff12:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff1a:	83 c4 18             	add    esp,0x18
c000ff1d:	5b                   	pop    ebx
c000ff1e:	e9 df 8d 00 00       	jmp    c0018d02 <blockTask(TaskState)>
c000ff23:	90                   	nop

c000ff24 <Buzzer::beep(int, int, bool)>:
c000ff24:	57                   	push   edi
c000ff25:	56                   	push   esi
c000ff26:	53                   	push   ebx
c000ff27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff33:	52                   	push   edx
c000ff34:	52                   	push   edx
c000ff35:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff3b:	56                   	push   esi
c000ff3c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff3f:	83 c4 10             	add    esp,0x10
c000ff42:	89 f8                	mov    eax,edi
c000ff44:	84 c0                	test   al,al
c000ff46:	74 1f                	je     c000ff67 <Buzzer::beep(int, int, bool)+0x43>
c000ff48:	50                   	push   eax
c000ff49:	50                   	push   eax
c000ff4a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff50:	99                   	cdq    
c000ff51:	52                   	push   edx
c000ff52:	50                   	push   eax
c000ff53:	e8 64 8e 00 00       	call   c0018dbc <nanoSleep(unsigned long long)>
c000ff58:	83 c4 10             	add    esp,0x10
c000ff5b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff5f:	5b                   	pop    ebx
c000ff60:	5e                   	pop    esi
c000ff61:	5f                   	pop    edi
c000ff62:	e9 6f ff ff ff       	jmp    c000fed6 <Buzzer::stop()>
c000ff67:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff6d:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c000ff72:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff7a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff7e:	c7 44 24 14 e9 fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fee9
c000ff86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff8a:	5b                   	pop    ebx
c000ff8b:	5e                   	pop    esi
c000ff8c:	5f                   	pop    edi
c000ff8d:	e9 0c 8a 00 00       	jmp    c001899e <Process::createThread(void (*)(void*), void*, int)>

c000ff92 <loadClockSettings()>:
c000ff92:	c7 05 34 45 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024534,0xa
c000ff9c:	c6 05 31 45 02 c0 00 	mov    BYTE PTR ds:0xc0024531,0x0
c000ffa3:	c6 05 30 45 02 c0 01 	mov    BYTE PTR ds:0xc0024530,0x1
c000ffaa:	c3                   	ret    
c000ffab:	90                   	nop

c000ffac <Clock::Clock(char const*)>:
c000ffac:	83 ec 0c             	sub    esp,0xc
c000ffaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb3:	83 ec 08             	sub    esp,0x8
c000ffb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffba:	50                   	push   eax
c000ffbb:	e8 74 07 00 00       	call   c0010734 <Device::Device(char const*)>
c000ffc0:	83 c4 10             	add    esp,0x10
c000ffc3:	ba 48 18 02 c0       	mov    edx,0xc0021848
c000ffc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcc:	89 10                	mov    DWORD PTR [eax],edx
c000ffce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ffdc:	90                   	nop
c000ffdd:	83 c4 0c             	add    esp,0xc
c000ffe0:	c3                   	ret    
c000ffe1:	90                   	nop

c000ffe2 <Clock::~Clock()>:
c000ffe2:	83 ec 0c             	sub    esp,0xc
c000ffe5:	ba 48 18 02 c0       	mov    edx,0xc0021848
c000ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffee:	89 10                	mov    DWORD PTR [eax],edx
c000fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	50                   	push   eax
c000fff8:	e8 e9 03 00 00       	call   c00103e6 <Device::~Device()>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	90                   	nop
c0010001:	83 c4 0c             	add    esp,0xc
c0010004:	c3                   	ret    
c0010005:	90                   	nop

c0010006 <Clock::~Clock()>:
c0010006:	83 ec 0c             	sub    esp,0xc
c0010009:	83 ec 0c             	sub    esp,0xc
c001000c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010010:	e8 cd ff ff ff       	call   c000ffe2 <Clock::~Clock()>
c0010015:	83 c4 10             	add    esp,0x10
c0010018:	83 ec 08             	sub    esp,0x8
c001001b:	68 58 01 00 00       	push   0x158
c0010020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010024:	e8 30 f0 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0010029:	83 c4 10             	add    esp,0x10
c001002c:	83 c4 0c             	add    esp,0xc
c001002f:	c3                   	ret    

c0010030 <Clock::timeInSecondsLocal()>:
c0010030:	53                   	push   ebx
c0010031:	83 ec 14             	sub    esp,0x14
c0010034:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010038:	8b 10                	mov    edx,DWORD PTR [eax]
c001003a:	50                   	push   eax
c001003b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001003e:	0f b6 0d 30 45 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024530
c0010045:	03 0d 34 45 02 c0    	add    ecx,DWORD PTR ds:0xc0024534
c001004b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010051:	89 cb                	mov    ebx,ecx
c0010053:	c1 fb 1f             	sar    ebx,0x1f
c0010056:	01 c8                	add    eax,ecx
c0010058:	11 da                	adc    edx,ebx
c001005a:	83 c4 10             	add    esp,0x10
c001005d:	31 c9                	xor    ecx,ecx
c001005f:	80 3d 31 45 02 c0 00 	cmp    BYTE PTR ds:0xc0024531,0x0
c0010066:	74 05                	je     c001006d <Clock::timeInSecondsLocal()+0x3d>
c0010068:	b9 08 07 00 00       	mov    ecx,0x708
c001006d:	31 db                	xor    ebx,ebx
c001006f:	01 c8                	add    eax,ecx
c0010071:	11 da                	adc    edx,ebx
c0010073:	83 c4 08             	add    esp,0x8
c0010076:	5b                   	pop    ebx
c0010077:	c3                   	ret    

c0010078 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010078:	57                   	push   edi
c0010079:	56                   	push   esi
c001007a:	53                   	push   ebx
c001007b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001007f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010083:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010085:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010089:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001008c:	0f b6 05 30 45 02 c0 	movzx  eax,BYTE PTR ds:0xc0024530
c0010093:	03 05 34 45 02 c0    	add    eax,DWORD PTR ds:0xc0024534
c0010099:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001009f:	99                   	cdq    
c00100a0:	29 c6                	sub    esi,eax
c00100a2:	19 d7                	sbb    edi,edx
c00100a4:	89 f0                	mov    eax,esi
c00100a6:	89 fa                	mov    edx,edi
c00100a8:	31 f6                	xor    esi,esi
c00100aa:	80 3d 31 45 02 c0 00 	cmp    BYTE PTR ds:0xc0024531,0x0
c00100b1:	74 05                	je     c00100b8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100b3:	be 08 07 00 00       	mov    esi,0x708
c00100b8:	31 ff                	xor    edi,edi
c00100ba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100be:	29 f0                	sub    eax,esi
c00100c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100c4:	19 fa                	sbb    edx,edi
c00100c6:	89 d8                	mov    eax,ebx
c00100c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100cc:	5b                   	pop    ebx
c00100cd:	5e                   	pop    esi
c00100ce:	5f                   	pop    edi
c00100cf:	ff e0                	jmp    eax

c00100d1 <datetimeToSeconds(datetime_t)>:
c00100d1:	55                   	push   ebp
c00100d2:	57                   	push   edi
c00100d3:	56                   	push   esi
c00100d4:	53                   	push   ebx
c00100d5:	83 ec 14             	sub    esp,0x14
c00100d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100dc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100e0:	89 d3                	mov    ebx,edx
c00100e2:	0f b6 c6             	movzx  eax,dh
c00100e5:	c1 eb 10             	shr    ebx,0x10
c00100e8:	48                   	dec    eax
c00100e9:	66 81 eb 6c 07       	sub    bx,0x76c
c00100ee:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00100f2:	0f b6 f5             	movzx  esi,ch
c00100f5:	89 cf                	mov    edi,ecx
c00100f7:	6b f6 3c             	imul   esi,esi,0x3c
c00100fa:	c1 ef 10             	shr    edi,0x10
c00100fd:	0f b6 c9             	movzx  ecx,cl
c0010100:	89 f8                	mov    eax,edi
c0010102:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010108:	0f b6 f8             	movzx  edi,al
c001010b:	0f b6 d2             	movzx  edx,dl
c001010e:	01 fe                	add    esi,edi
c0010110:	01 f1                	add    ecx,esi
c0010112:	0f b7 f3             	movzx  esi,bx
c0010115:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010119:	c1 f9 1f             	sar    ecx,0x1f
c001011c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010121:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010125:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001012a:	8b 0c 8d 80 18 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde780]
c0010131:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010135:	76 29                	jbe    c0010160 <datetimeToSeconds(datetime_t)+0x8f>
c0010137:	f6 c3 03             	test   bl,0x3
c001013a:	75 24                	jne    c0010160 <datetimeToSeconds(datetime_t)+0x8f>
c001013c:	31 d2                	xor    edx,edx
c001013e:	bf 64 00 00 00       	mov    edi,0x64
c0010143:	89 d8                	mov    eax,ebx
c0010145:	66 f7 f7             	div    di
c0010148:	66 85 d2             	test   dx,dx
c001014b:	75 12                	jne    c001015f <datetimeToSeconds(datetime_t)+0x8e>
c001014d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010153:	bf 90 01 00 00       	mov    edi,0x190
c0010158:	99                   	cdq    
c0010159:	f7 ff                	idiv   edi
c001015b:	85 d2                	test   edx,edx
c001015d:	75 01                	jne    c0010160 <datetimeToSeconds(datetime_t)+0x8f>
c001015f:	41                   	inc    ecx
c0010160:	66 83 fb 46          	cmp    bx,0x46
c0010164:	76 45                	jbe    c00101ab <datetimeToSeconds(datetime_t)+0xda>
c0010166:	bb 46 00 00 00       	mov    ebx,0x46
c001016b:	bf 64 00 00 00       	mov    edi,0x64
c0010170:	bd 90 01 00 00       	mov    ebp,0x190
c0010175:	b8 6d 01 00 00       	mov    eax,0x16d
c001017a:	f6 c3 03             	test   bl,0x3
c001017d:	75 23                	jne    c00101a2 <datetimeToSeconds(datetime_t)+0xd1>
c001017f:	89 d8                	mov    eax,ebx
c0010181:	99                   	cdq    
c0010182:	f7 ff                	idiv   edi
c0010184:	b8 6e 01 00 00       	mov    eax,0x16e
c0010189:	85 d2                	test   edx,edx
c001018b:	75 15                	jne    c00101a2 <datetimeToSeconds(datetime_t)+0xd1>
c001018d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010193:	99                   	cdq    
c0010194:	f7 fd                	idiv   ebp
c0010196:	83 fa 01             	cmp    edx,0x1
c0010199:	19 c0                	sbb    eax,eax
c001019b:	f7 d0                	not    eax
c001019d:	05 6e 01 00 00       	add    eax,0x16e
c00101a2:	01 c1                	add    ecx,eax
c00101a4:	43                   	inc    ebx
c00101a5:	39 f3                	cmp    ebx,esi
c00101a7:	7c cc                	jl     c0010175 <datetimeToSeconds(datetime_t)+0xa4>
c00101a9:	eb 35                	jmp    c00101e0 <datetimeToSeconds(datetime_t)+0x10f>
c00101ab:	74 33                	je     c00101e0 <datetimeToSeconds(datetime_t)+0x10f>
c00101ad:	b8 45 00 00 00       	mov    eax,0x45
c00101b2:	89 c2                	mov    edx,eax
c00101b4:	83 e2 03             	and    edx,0x3
c00101b7:	39 f0                	cmp    eax,esi
c00101b9:	7e 0f                	jle    c00101ca <datetimeToSeconds(datetime_t)+0xf9>
c00101bb:	83 fa 01             	cmp    edx,0x1
c00101be:	19 d2                	sbb    edx,edx
c00101c0:	48                   	dec    eax
c00101c1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00101c8:	eb e8                	jmp    c00101b2 <datetimeToSeconds(datetime_t)+0xe1>
c00101ca:	b8 6d 01 00 00       	mov    eax,0x16d
c00101cf:	85 d2                	test   edx,edx
c00101d1:	75 0b                	jne    c00101de <datetimeToSeconds(datetime_t)+0x10d>
c00101d3:	66 83 fb 01          	cmp    bx,0x1
c00101d7:	19 c0                	sbb    eax,eax
c00101d9:	05 6e 01 00 00       	add    eax,0x16e
c00101de:	29 c1                	sub    ecx,eax
c00101e0:	b8 80 51 01 00       	mov    eax,0x15180
c00101e5:	f7 e9                	imul   ecx
c00101e7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00101eb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00101ef:	83 c4 14             	add    esp,0x14
c00101f2:	5b                   	pop    ebx
c00101f3:	5e                   	pop    esi
c00101f4:	5f                   	pop    edi
c00101f5:	5d                   	pop    ebp
c00101f6:	c3                   	ret    
c00101f7:	90                   	nop

c00101f8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00101f8:	57                   	push   edi
c00101f9:	56                   	push   esi
c00101fa:	53                   	push   ebx
c00101fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0010201:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010204:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010208:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001020c:	e8 c0 fe ff ff       	call   c00100d1 <datetimeToSeconds(datetime_t)>
c0010211:	59                   	pop    ecx
c0010212:	0f b6 0d 30 45 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024530
c0010219:	5b                   	pop    ebx
c001021a:	03 0d 34 45 02 c0    	add    ecx,DWORD PTR ds:0xc0024534
c0010220:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010226:	89 cb                	mov    ebx,ecx
c0010228:	c1 fb 1f             	sar    ebx,0x1f
c001022b:	29 c8                	sub    eax,ecx
c001022d:	19 da                	sbb    edx,ebx
c001022f:	31 c9                	xor    ecx,ecx
c0010231:	80 3d 31 45 02 c0 00 	cmp    BYTE PTR ds:0xc0024531,0x0
c0010238:	74 05                	je     c001023f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001023a:	b9 08 07 00 00       	mov    ecx,0x708
c001023f:	31 db                	xor    ebx,ebx
c0010241:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010245:	29 c8                	sub    eax,ecx
c0010247:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001024b:	19 da                	sbb    edx,ebx
c001024d:	89 f8                	mov    eax,edi
c001024f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010253:	5b                   	pop    ebx
c0010254:	5e                   	pop    esi
c0010255:	5f                   	pop    edi
c0010256:	ff e0                	jmp    eax

c0010258 <secondsToDatetime(unsigned long long)>:
c0010258:	55                   	push   ebp
c0010259:	57                   	push   edi
c001025a:	56                   	push   esi
c001025b:	53                   	push   ebx
c001025c:	83 ec 1c             	sub    esp,0x1c
c001025f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010263:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010267:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001026b:	6a 00                	push   0x0
c001026d:	68 80 51 01 00       	push   0x15180
c0010272:	55                   	push   ebp
c0010273:	57                   	push   edi
c0010274:	e8 83 ef 00 00       	call   c001f1fc <__udivdi3>
c0010279:	83 c4 10             	add    esp,0x10
c001027c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010282:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010286:	6a 00                	push   0x0
c0010288:	68 80 51 01 00       	push   0x15180
c001028d:	55                   	push   ebp
c001028e:	57                   	push   edi
c001028f:	bf 10 0e 00 00       	mov    edi,0xe10
c0010294:	e8 63 f0 00 00       	call   c001f2fc <__umoddi3>
c0010299:	83 c4 10             	add    esp,0x10
c001029c:	99                   	cdq    
c001029d:	f7 ff                	idiv   edi
c001029f:	bf 3c 00 00 00       	mov    edi,0x3c
c00102a4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102a7:	89 d0                	mov    eax,edx
c00102a9:	99                   	cdq    
c00102aa:	f7 ff                	idiv   edi
c00102ac:	85 db                	test   ebx,ebx
c00102ae:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102b1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102b4:	79 11                	jns    c00102c7 <secondsToDatetime(unsigned long long)+0x6f>
c00102b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102ba:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102c0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102c5:	eb 07                	jmp    c00102ce <secondsToDatetime(unsigned long long)+0x76>
c00102c7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102cc:	89 d8                	mov    eax,ebx
c00102ce:	bf b4 05 00 00       	mov    edi,0x5b4
c00102d3:	99                   	cdq    
c00102d4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00102d9:	f7 f9                	idiv   ecx
c00102db:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102e4:	31 d2                	xor    edx,edx
c00102e6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102ee:	01 c3                	add    ebx,eax
c00102f0:	89 d8                	mov    eax,ebx
c00102f2:	f7 f1                	div    ecx
c00102f4:	31 d2                	xor    edx,edx
c00102f6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00102f9:	89 d8                	mov    eax,ebx
c00102fb:	f7 f7                	div    edi
c00102fd:	31 d2                	xor    edx,edx
c00102ff:	29 c1                	sub    ecx,eax
c0010301:	89 d8                	mov    eax,ebx
c0010303:	f7 f5                	div    ebp
c0010305:	bd 6d 01 00 00       	mov    ebp,0x16d
c001030a:	29 c1                	sub    ecx,eax
c001030c:	31 d2                	xor    edx,edx
c001030e:	89 c8                	mov    eax,ecx
c0010310:	f7 f5                	div    ebp
c0010312:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010317:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001031b:	31 d2                	xor    edx,edx
c001031d:	89 c8                	mov    eax,ecx
c001031f:	f7 f5                	div    ebp
c0010321:	31 d2                	xor    edx,edx
c0010323:	01 c3                	add    ebx,eax
c0010325:	89 c8                	mov    eax,ecx
c0010327:	f7 f7                	div    edi
c0010329:	bf 99 00 00 00       	mov    edi,0x99
c001032e:	29 c3                	sub    ebx,eax
c0010330:	31 d2                	xor    edx,edx
c0010332:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001033a:	29 c3                	sub    ebx,eax
c001033c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001033f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010342:	bb 05 00 00 00       	mov    ebx,0x5
c0010347:	83 c1 02             	add    ecx,0x2
c001034a:	89 c8                	mov    eax,ecx
c001034c:	f7 f7                	div    edi
c001034e:	31 d2                	xor    edx,edx
c0010350:	89 c7                	mov    edi,eax
c0010352:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010358:	83 c0 02             	add    eax,0x2
c001035b:	f7 f3                	div    ebx
c001035d:	89 eb                	mov    ebx,ebp
c001035f:	29 c3                	sub    ebx,eax
c0010361:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010367:	88 1e                	mov    BYTE PTR [esi],bl
c0010369:	19 c0                	sbb    eax,eax
c001036b:	31 d2                	xor    edx,edx
c001036d:	83 e0 0c             	and    eax,0xc
c0010370:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010374:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001037c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010380:	83 f9 01             	cmp    ecx,0x1
c0010383:	0f 96 c2             	setbe  dl
c0010386:	41                   	inc    ecx
c0010387:	01 d0                	add    eax,edx
c0010389:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001038c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010390:	83 c4 1c             	add    esp,0x1c
c0010393:	89 f0                	mov    eax,esi
c0010395:	5b                   	pop    ebx
c0010396:	5e                   	pop    esi
c0010397:	5f                   	pop    edi
c0010398:	5d                   	pop    ebp
c0010399:	c2 04 00             	ret    0x4

c001039c <Clock::timeInDatetimeLocal()>:
c001039c:	53                   	push   ebx
c001039d:	83 ec 14             	sub    esp,0x14
c00103a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103a8:	e8 83 fc ff ff       	call   c0010030 <Clock::timeInSecondsLocal()>
c00103ad:	83 c4 0c             	add    esp,0xc
c00103b0:	52                   	push   edx
c00103b1:	50                   	push   eax
c00103b2:	53                   	push   ebx
c00103b3:	e8 a0 fe ff ff       	call   c0010258 <secondsToDatetime(unsigned long long)>
c00103b8:	89 d8                	mov    eax,ebx
c00103ba:	83 c4 14             	add    esp,0x14
c00103bd:	5b                   	pop    ebx
c00103be:	c2 04 00             	ret    0x4
c00103c1:	90                   	nop

c00103c2 <Device::hibernate()>:
c00103c2:	c3                   	ret    
c00103c3:	90                   	nop

c00103c4 <Device::wake()>:
c00103c4:	c3                   	ret    
c00103c5:	90                   	nop

c00103c6 <Device::detect()>:
c00103c6:	c3                   	ret    
c00103c7:	90                   	nop

c00103c8 <Device::disableLegacy()>:
c00103c8:	c3                   	ret    
c00103c9:	90                   	nop

c00103ca <Device::powerSaving(PowerSavingLevel)>:
c00103ca:	c3                   	ret    
c00103cb:	90                   	nop

c00103cc <DriverlessDevice::close(int, int, void*)>:
c00103cc:	31 c0                	xor    eax,eax
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <DriverlessDevice::detect()>:
c00103d0:	c3                   	ret    
c00103d1:	90                   	nop

c00103d2 <DriverlessDevice::open(int, int, void*)>:
c00103d2:	83 ec 18             	sub    esp,0x18
c00103d5:	68 b0 18 02 c0       	push   0xc00218b0
c00103da:	e8 41 55 00 00       	call   c0015920 <Krnl::panic(char const*)>
c00103df:	83 c8 ff             	or     eax,0xffffffff
c00103e2:	83 c4 1c             	add    esp,0x1c
c00103e5:	c3                   	ret    

c00103e6 <Device::~Device()>:
c00103e6:	ba d8 18 02 c0       	mov    edx,0xc00218d8
c00103eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ef:	89 10                	mov    DWORD PTR [eax],edx
c00103f1:	90                   	nop
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <Device::~Device()>:
c00103f4:	83 ec 0c             	sub    esp,0xc
c00103f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103fb:	e8 e6 ff ff ff       	call   c00103e6 <Device::~Device()>
c0010400:	83 c4 04             	add    esp,0x4
c0010403:	83 ec 08             	sub    esp,0x8
c0010406:	68 58 01 00 00       	push   0x158
c001040b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001040f:	e8 45 ec ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0010414:	83 c4 10             	add    esp,0x10
c0010417:	83 c4 0c             	add    esp,0xc
c001041a:	c3                   	ret    
c001041b:	90                   	nop

c001041c <Device::findAndLoadDriver()>:
c001041c:	c3                   	ret    
c001041d:	90                   	nop

c001041e <Device::preOpenPCI(PCIDeviceInfo)>:
c001041e:	57                   	push   edi
c001041f:	b9 09 00 00 00       	mov    ecx,0x9
c0010424:	56                   	push   esi
c0010425:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010429:	8d 74 24 10          	lea    esi,[esp+0x10]
c001042d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0010437:	81 c7 18 01 00 00    	add    edi,0x118
c001043d:	fc                   	cld    
c001043e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010440:	5e                   	pop    esi
c0010441:	5f                   	pop    edi
c0010442:	c3                   	ret    
c0010443:	90                   	nop

c0010444 <Device::preOpenACPI(void*, char*, char*)>:
c0010444:	56                   	push   esi
c0010445:	53                   	push   ebx
c0010446:	83 ec 08             	sub    esp,0x8
c0010449:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001044d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010451:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001045b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001045f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010465:	6a 1e                	push   0x1e
c0010467:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001046d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010471:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010477:	50                   	push   eax
c0010478:	e8 33 02 ff ff       	call   c00006b0 <memcpy>
c001047d:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010481:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010485:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001048d:	83 c4 14             	add    esp,0x14
c0010490:	5b                   	pop    ebx
c0010491:	5e                   	pop    esi
c0010492:	e9 19 02 ff ff       	jmp    c00006b0 <memcpy>
c0010497:	90                   	nop

c0010498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010498:	55                   	push   ebp
c0010499:	57                   	push   edi
c001049a:	56                   	push   esi
c001049b:	53                   	push   ebx
c001049c:	83 ec 0c             	sub    esp,0xc
c001049f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104a3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104a7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104af:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104b4:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104bb:	75 0b                	jne    c00104c8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00104bf:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104c3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104c6:	eb 24                	jmp    c00104ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104c8:	e8 d3 42 00 00       	call   c00147a0 <thisCPU()>
c00104cd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00104d5:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104d9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104dd:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104e1:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104e9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104ec:	83 c4 0c             	add    esp,0xc
c00104ef:	5b                   	pop    ebx
c00104f0:	5e                   	pop    esi
c00104f1:	5f                   	pop    edi
c00104f2:	5d                   	pop    ebp
c00104f3:	ff e0                	jmp    eax
c00104f5:	90                   	nop

c00104f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00104f6:	57                   	push   edi
c00104f7:	56                   	push   esi
c00104f8:	53                   	push   ebx
c00104f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010501:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010505:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001050a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010511:	75 0b                	jne    c001051e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010513:	8b 00                	mov    eax,DWORD PTR [eax]
c0010515:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010519:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001051c:	eb 20                	jmp    c001053e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001051e:	e8 7d 42 00 00       	call   c00147a0 <thisCPU()>
c0010523:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010529:	8b 10                	mov    edx,DWORD PTR [eax]
c001052b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001052f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010533:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010537:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001053b:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001053e:	5b                   	pop    ebx
c001053f:	5e                   	pop    esi
c0010540:	5f                   	pop    edi
c0010541:	ff e0                	jmp    eax
c0010543:	90                   	nop

c0010544 <Device::addChild(Device*)>:
c0010544:	53                   	push   ebx
c0010545:	83 ec 08             	sub    esp,0x8
c0010548:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001054c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010550:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010556:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001055c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001055e:	85 d2                	test   edx,edx
c0010560:	74 04                	je     c0010566 <Device::addChild(Device*)+0x22>
c0010562:	89 d3                	mov    ebx,edx
c0010564:	eb f6                	jmp    c001055c <Device::addChild(Device*)+0x18>
c0010566:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010569:	83 ec 0c             	sub    esp,0xc
c001056c:	6a 08                	push   0x8
c001056e:	e8 d7 ea ff ff       	call   c000f04a <operator new(unsigned long)>
c0010573:	89 03                	mov    DWORD PTR [ebx],eax
c0010575:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001057b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010582:	83 c4 18             	add    esp,0x18
c0010585:	5b                   	pop    ebx
c0010586:	c3                   	ret    
c0010587:	90                   	nop

c0010588 <Device::removeAllChildren()>:
c0010588:	56                   	push   esi
c0010589:	53                   	push   ebx
c001058a:	52                   	push   edx
c001058b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001058f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010595:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010598:	74 17                	je     c00105b1 <Device::removeAllChildren()+0x29>
c001059a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001059d:	85 c0                	test   eax,eax
c001059f:	74 0c                	je     c00105ad <Device::removeAllChildren()+0x25>
c00105a1:	83 ec 0c             	sub    esp,0xc
c00105a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00105a6:	50                   	push   eax
c00105a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105aa:	83 c4 10             	add    esp,0x10
c00105ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105af:	eb e4                	jmp    c0010595 <Device::removeAllChildren()+0xd>
c00105b1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105bd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105ca:	58                   	pop    eax
c00105cb:	5b                   	pop    ebx
c00105cc:	5e                   	pop    esi
c00105cd:	c3                   	ret    

c00105ce <Device::hibernateAll()>:
c00105ce:	53                   	push   ebx
c00105cf:	83 ec 14             	sub    esp,0x14
c00105d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105d8:	53                   	push   ebx
c00105d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105e2:	83 c4 10             	add    esp,0x10
c00105e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105e8:	74 0f                	je     c00105f9 <Device::hibernateAll()+0x2b>
c00105ea:	83 ec 0c             	sub    esp,0xc
c00105ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105f0:	e8 d9 ff ff ff       	call   c00105ce <Device::hibernateAll()>
c00105f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105f7:	eb e9                	jmp    c00105e2 <Device::hibernateAll()+0x14>
c00105f9:	83 c4 08             	add    esp,0x8
c00105fc:	5b                   	pop    ebx
c00105fd:	c3                   	ret    

c00105fe <Device::wakeAll()>:
c00105fe:	53                   	push   ebx
c00105ff:	83 ec 14             	sub    esp,0x14
c0010602:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010606:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010608:	53                   	push   ebx
c0010609:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001060c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010618:	74 0f                	je     c0010629 <Device::wakeAll()+0x2b>
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010620:	e8 d9 ff ff ff       	call   c00105fe <Device::wakeAll()>
c0010625:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010627:	eb e9                	jmp    c0010612 <Device::wakeAll()+0x14>
c0010629:	83 c4 08             	add    esp,0x8
c001062c:	5b                   	pop    ebx
c001062d:	c3                   	ret    

c001062e <Device::detectAll()>:
c001062e:	53                   	push   ebx
c001062f:	83 ec 14             	sub    esp,0x14
c0010632:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010636:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010638:	53                   	push   ebx
c0010639:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001063c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010642:	83 c4 10             	add    esp,0x10
c0010645:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010648:	74 0f                	je     c0010659 <Device::detectAll()+0x2b>
c001064a:	83 ec 0c             	sub    esp,0xc
c001064d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010650:	e8 d9 ff ff ff       	call   c001062e <Device::detectAll()>
c0010655:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010657:	eb e9                	jmp    c0010642 <Device::detectAll()+0x14>
c0010659:	83 c4 08             	add    esp,0x8
c001065c:	5b                   	pop    ebx
c001065d:	c3                   	ret    

c001065e <Device::disableLegacyAll()>:
c001065e:	53                   	push   ebx
c001065f:	83 ec 14             	sub    esp,0x14
c0010662:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010666:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010668:	53                   	push   ebx
c0010669:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001066c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010672:	83 c4 10             	add    esp,0x10
c0010675:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010678:	74 0f                	je     c0010689 <Device::disableLegacyAll()+0x2b>
c001067a:	83 ec 0c             	sub    esp,0xc
c001067d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010680:	e8 d9 ff ff ff       	call   c001065e <Device::disableLegacyAll()>
c0010685:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010687:	eb e9                	jmp    c0010672 <Device::disableLegacyAll()+0x14>
c0010689:	83 c4 08             	add    esp,0x8
c001068c:	5b                   	pop    ebx
c001068d:	c3                   	ret    

c001068e <Device::loadDriversForAll()>:
c001068e:	53                   	push   ebx
c001068f:	83 ec 08             	sub    esp,0x8
c0010692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010696:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001069c:	8b 18                	mov    ebx,DWORD PTR [eax]
c001069e:	85 db                	test   ebx,ebx
c00106a0:	74 12                	je     c00106b4 <Device::loadDriversForAll()+0x26>
c00106a2:	83 ec 0c             	sub    esp,0xc
c00106a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106a8:	e8 e1 ff ff ff       	call   c001068e <Device::loadDriversForAll()>
c00106ad:	83 c4 10             	add    esp,0x10
c00106b0:	89 d8                	mov    eax,ebx
c00106b2:	eb e8                	jmp    c001069c <Device::loadDriversForAll()+0xe>
c00106b4:	83 c4 08             	add    esp,0x8
c00106b7:	5b                   	pop    ebx
c00106b8:	c3                   	ret    
c00106b9:	90                   	nop

c00106ba <Device::closeAll()>:
c00106ba:	53                   	push   ebx
c00106bb:	83 ec 08             	sub    esp,0x8
c00106be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106c4:	6a 00                	push   0x0
c00106c6:	6a 00                	push   0x0
c00106c8:	6a 00                	push   0x0
c00106ca:	53                   	push   ebx
c00106cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106d4:	83 c4 10             	add    esp,0x10
c00106d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106da:	74 0f                	je     c00106eb <Device::closeAll()+0x31>
c00106dc:	83 ec 0c             	sub    esp,0xc
c00106df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106e2:	e8 d3 ff ff ff       	call   c00106ba <Device::closeAll()>
c00106e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106e9:	eb e9                	jmp    c00106d4 <Device::closeAll()+0x1a>
c00106eb:	83 c4 08             	add    esp,0x8
c00106ee:	5b                   	pop    ebx
c00106ef:	c3                   	ret    

c00106f0 <Device::powerSavingAll(PowerSavingLevel)>:
c00106f0:	56                   	push   esi
c00106f1:	53                   	push   ebx
c00106f2:	83 ec 0c             	sub    esp,0xc
c00106f5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106f9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00106fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ff:	56                   	push   esi
c0010700:	53                   	push   ebx
c0010701:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0010704:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010710:	74 0f                	je     c0010721 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010712:	52                   	push   edx
c0010713:	52                   	push   edx
c0010714:	56                   	push   esi
c0010715:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010718:	e8 d3 ff ff ff       	call   c00106f0 <Device::powerSavingAll(PowerSavingLevel)>
c001071d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001071f:	eb e9                	jmp    c001070a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010721:	58                   	pop    eax
c0010722:	5b                   	pop    ebx
c0010723:	5e                   	pop    esi
c0010724:	c3                   	ret    
c0010725:	90                   	nop

c0010726 <Device::setName(char const*)>:
c0010726:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001072e:	e9 52 00 ff ff       	jmp    c0000785 <strcpy>
c0010733:	90                   	nop

c0010734 <Device::Device(char const*)>:
c0010734:	83 ec 0c             	sub    esp,0xc
c0010737:	ba d8 18 02 c0       	mov    edx,0xc00218d8
c001073c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010740:	89 10                	mov    DWORD PTR [eax],edx
c0010742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010746:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010754:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001075e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010762:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001076c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010770:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001077a:	83 ec 08             	sub    esp,0x8
c001077d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010785:	e8 9c ff ff ff       	call   c0010726 <Device::setName(char const*)>
c001078a:	83 c4 10             	add    esp,0x10
c001078d:	83 ec 0c             	sub    esp,0xc
c0010790:	6a 08                	push   0x8
c0010792:	e8 b3 e8 ff ff       	call   c000f04a <operator new(unsigned long)>
c0010797:	83 c4 10             	add    esp,0x10
c001079a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107ab:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ec:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010808:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010820:	90                   	nop
c0010821:	83 c4 0c             	add    esp,0xc
c0010824:	c3                   	ret    
c0010825:	90                   	nop

c0010826 <Device::getName()>:
c0010826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001082a:	05 d0 00 00 00       	add    eax,0xd0
c001082f:	c3                   	ret    

c0010830 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010830:	83 ec 0c             	sub    esp,0xc
c0010833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010837:	83 ec 08             	sub    esp,0x8
c001083a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001083e:	50                   	push   eax
c001083f:	e8 f0 fe ff ff       	call   c0010734 <Device::Device(char const*)>
c0010844:	83 c4 10             	add    esp,0x10
c0010847:	ba 04 19 02 c0       	mov    edx,0xc0021904
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	89 10                	mov    DWORD PTR [eax],edx
c0010852:	90                   	nop
c0010853:	83 c4 0c             	add    esp,0xc
c0010856:	c3                   	ret    
c0010857:	90                   	nop

c0010858 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010858:	57                   	push   edi
c0010859:	56                   	push   esi
c001085a:	53                   	push   ebx
c001085b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001085f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010863:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010867:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001086d:	75 0c                	jne    c001087b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001086f:	52                   	push   edx
c0010870:	52                   	push   edx
c0010871:	53                   	push   ebx
c0010872:	56                   	push   esi
c0010873:	e8 9c ee 00 00       	call   c001f714 <LinkedList<Device>::addElement(Device*)>
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010881:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010884:	74 12                	je     c0010898 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010886:	50                   	push   eax
c0010887:	57                   	push   edi
c0010888:	56                   	push   esi
c0010889:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001088c:	e8 c7 ff ff ff       	call   c0010858 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010891:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010893:	83 c4 10             	add    esp,0x10
c0010896:	eb e9                	jmp    c0010881 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010898:	5b                   	pop    ebx
c0010899:	5e                   	pop    esi
c001089a:	5f                   	pop    edi
c001089b:	c3                   	ret    

c001089c <getDevicesOfType(DeviceType)>:
c001089c:	53                   	push   ebx
c001089d:	83 ec 14             	sub    esp,0x14
c00108a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108a4:	53                   	push   ebx
c00108a5:	e8 46 ef 00 00       	call   c001f7f0 <LinkedList<Device>::LinkedList()>
c00108aa:	83 c4 0c             	add    esp,0xc
c00108ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b1:	53                   	push   ebx
c00108b2:	ff 35 c8 43 02 c0    	push   DWORD PTR ds:0xc00243c8
c00108b8:	e8 9b ff ff ff       	call   c0010858 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108bd:	89 d8                	mov    eax,ebx
c00108bf:	83 c4 18             	add    esp,0x18
c00108c2:	5b                   	pop    ebx
c00108c3:	c2 04 00             	ret    0x4

c00108c6 <HardDiskController::HardDiskController(char const*)>:
c00108c6:	83 ec 0c             	sub    esp,0xc
c00108c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cd:	83 ec 08             	sub    esp,0x8
c00108d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d4:	50                   	push   eax
c00108d5:	e8 5a fe ff ff       	call   c0010734 <Device::Device(char const*)>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	ba 30 19 02 c0       	mov    edx,0xc0021930
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	89 10                	mov    DWORD PTR [eax],edx
c00108e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ec:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00108f6:	90                   	nop
c00108f7:	83 c4 0c             	add    esp,0xc
c00108fa:	c3                   	ret    
c00108fb:	90                   	nop

c00108fc <HardDiskController::~HardDiskController()>:
c00108fc:	83 ec 0c             	sub    esp,0xc
c00108ff:	ba 30 19 02 c0       	mov    edx,0xc0021930
c0010904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010908:	89 10                	mov    DWORD PTR [eax],edx
c001090a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090e:	83 ec 0c             	sub    esp,0xc
c0010911:	50                   	push   eax
c0010912:	e8 cf fa ff ff       	call   c00103e6 <Device::~Device()>
c0010917:	83 c4 10             	add    esp,0x10
c001091a:	90                   	nop
c001091b:	83 c4 0c             	add    esp,0xc
c001091e:	c3                   	ret    
c001091f:	90                   	nop

c0010920 <HardDiskController::~HardDiskController()>:
c0010920:	83 ec 0c             	sub    esp,0xc
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001092a:	e8 cd ff ff ff       	call   c00108fc <HardDiskController::~HardDiskController()>
c001092f:	83 c4 10             	add    esp,0x10
c0010932:	83 ec 08             	sub    esp,0x8
c0010935:	68 58 01 00 00       	push   0x158
c001093a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093e:	e8 16 e7 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0010943:	83 c4 10             	add    esp,0x10
c0010946:	83 c4 0c             	add    esp,0xc
c0010949:	c3                   	ret    

c001094a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010951:	83 ec 08             	sub    esp,0x8
c0010954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010958:	50                   	push   eax
c0010959:	e8 d6 fd ff ff       	call   c0010734 <Device::Device(char const*)>
c001095e:	83 c4 10             	add    esp,0x10
c0010961:	ba 5c 19 02 c0       	mov    edx,0xc002195c
c0010966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096a:	89 10                	mov    DWORD PTR [eax],edx
c001096c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010970:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010986:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010998:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109ac:	90                   	nop
c00109ad:	83 c4 0c             	add    esp,0xc
c00109b0:	c3                   	ret    
c00109b1:	90                   	nop

c00109b2 <PhysicalDisk::startCache()>:
c00109b2:	56                   	push   esi
c00109b3:	53                   	push   ebx
c00109b4:	83 ec 10             	sub    esp,0x10
c00109b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109bb:	6a 30                	push   0x30
c00109bd:	e8 88 e6 ff ff       	call   c000f04a <operator new(unsigned long)>
c00109c2:	89 c6                	mov    esi,eax
c00109c4:	58                   	pop    eax
c00109c5:	5a                   	pop    edx
c00109c6:	53                   	push   ebx
c00109c7:	56                   	push   esi
c00109c8:	e8 45 25 00 00       	call   c0012f12 <VCache::VCache(PhysicalDisk*)>
c00109cd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109d3:	83 c4 14             	add    esp,0x14
c00109d6:	5b                   	pop    ebx
c00109d7:	5e                   	pop    esi
c00109d8:	c3                   	ret    
c00109d9:	90                   	nop

c00109da <PhysicalDisk::~PhysicalDisk()>:
c00109da:	83 ec 0c             	sub    esp,0xc
c00109dd:	ba 5c 19 02 c0       	mov    edx,0xc002195c
c00109e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e6:	89 10                	mov    DWORD PTR [eax],edx
c00109e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	50                   	push   eax
c00109f0:	e8 f1 f9 ff ff       	call   c00103e6 <Device::~Device()>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	90                   	nop
c00109f9:	83 c4 0c             	add    esp,0xc
c00109fc:	c3                   	ret    
c00109fd:	90                   	nop

c00109fe <PhysicalDisk::~PhysicalDisk()>:
c00109fe:	83 ec 0c             	sub    esp,0xc
c0010a01:	83 ec 0c             	sub    esp,0xc
c0010a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a08:	e8 cd ff ff ff       	call   c00109da <PhysicalDisk::~PhysicalDisk()>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	83 ec 08             	sub    esp,0x8
c0010a13:	68 6c 01 00 00       	push   0x16c
c0010a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1c:	e8 38 e6 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0010a21:	83 c4 10             	add    esp,0x10
c0010a24:	83 c4 0c             	add    esp,0xc
c0010a27:	c3                   	ret    

c0010a28 <FPU::FPU(char const*)>:
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a2f:	83 ec 08             	sub    esp,0x8
c0010a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a36:	50                   	push   eax
c0010a37:	e8 f8 fc ff ff       	call   c0010734 <Device::Device(char const*)>
c0010a3c:	83 c4 10             	add    esp,0x10
c0010a3f:	ba 9c 19 02 c0       	mov    edx,0xc002199c
c0010a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a48:	89 10                	mov    DWORD PTR [eax],edx
c0010a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a58:	90                   	nop
c0010a59:	83 c4 0c             	add    esp,0xc
c0010a5c:	c3                   	ret    
c0010a5d:	90                   	nop

c0010a5e <FPU::~FPU()>:
c0010a5e:	83 ec 0c             	sub    esp,0xc
c0010a61:	ba 9c 19 02 c0       	mov    edx,0xc002199c
c0010a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6a:	89 10                	mov    DWORD PTR [eax],edx
c0010a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	50                   	push   eax
c0010a74:	e8 6d f9 ff ff       	call   c00103e6 <Device::~Device()>
c0010a79:	83 c4 10             	add    esp,0x10
c0010a7c:	90                   	nop
c0010a7d:	83 c4 0c             	add    esp,0xc
c0010a80:	c3                   	ret    
c0010a81:	90                   	nop

c0010a82 <FPU::~FPU()>:
c0010a82:	83 ec 0c             	sub    esp,0xc
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a8c:	e8 cd ff ff ff       	call   c0010a5e <FPU::~FPU()>
c0010a91:	83 c4 10             	add    esp,0x10
c0010a94:	83 ec 08             	sub    esp,0x8
c0010a97:	68 58 01 00 00       	push   0x158
c0010a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aa0:	e8 b4 e5 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0010aa5:	83 c4 10             	add    esp,0x10
c0010aa8:	83 c4 0c             	add    esp,0xc
c0010aab:	c3                   	ret    

c0010aac <setupFPU()>:
c0010aac:	53                   	push   ebx
c0010aad:	83 ec 08             	sub    esp,0x8
c0010ab0:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0010ab5:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010abc:	74 19                	je     c0010ad7 <setupFPU()+0x2b>
c0010abe:	83 ec 0c             	sub    esp,0xc
c0010ac1:	68 58 01 00 00       	push   0x158
c0010ac6:	e8 7f e5 ff ff       	call   c000f04a <operator new(unsigned long)>
c0010acb:	89 c3                	mov    ebx,eax
c0010acd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ad0:	e8 ef d3 00 00       	call   c001dec4 <AVX::AVX()>
c0010ad5:	eb 5b                	jmp    c0010b32 <setupFPU()+0x86>
c0010ad7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010add:	84 c0                	test   al,al
c0010adf:	79 19                	jns    c0010afa <setupFPU()+0x4e>
c0010ae1:	83 ec 0c             	sub    esp,0xc
c0010ae4:	68 58 01 00 00       	push   0x158
c0010ae9:	e8 5c e5 ff ff       	call   c000f04a <operator new(unsigned long)>
c0010aee:	89 c3                	mov    ebx,eax
c0010af0:	89 04 24             	mov    DWORD PTR [esp],eax
c0010af3:	e8 f2 d4 00 00       	call   c001dfea <SSE::SSE()>
c0010af8:	eb 38                	jmp    c0010b32 <setupFPU()+0x86>
c0010afa:	a8 20                	test   al,0x20
c0010afc:	74 19                	je     c0010b17 <setupFPU()+0x6b>
c0010afe:	83 ec 0c             	sub    esp,0xc
c0010b01:	68 58 01 00 00       	push   0x158
c0010b06:	e8 3f e5 ff ff       	call   c000f04a <operator new(unsigned long)>
c0010b0b:	89 c3                	mov    ebx,eax
c0010b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b10:	e8 3f d4 00 00       	call   c001df54 <MMX::MMX()>
c0010b15:	eb 1b                	jmp    c0010b32 <setupFPU()+0x86>
c0010b17:	a8 10                	test   al,0x10
c0010b19:	74 1c                	je     c0010b37 <setupFPU()+0x8b>
c0010b1b:	83 ec 0c             	sub    esp,0xc
c0010b1e:	68 58 01 00 00       	push   0x158
c0010b23:	e8 22 e5 ff ff       	call   c000f04a <operator new(unsigned long)>
c0010b28:	89 c3                	mov    ebx,eax
c0010b2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b2d:	e8 46 d5 00 00       	call   c001e078 <x87::x87()>
c0010b32:	83 c4 10             	add    esp,0x10
c0010b35:	eb 2c                	jmp    c0010b63 <setupFPU()+0xb7>
c0010b37:	83 ec 0c             	sub    esp,0xc
c0010b3a:	31 db                	xor    ebx,ebx
c0010b3c:	68 88 19 02 c0       	push   0xc0021988
c0010b41:	e8 f3 e5 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010b46:	e8 55 3c 00 00       	call   c00147a0 <thisCPU()>
c0010b4b:	e8 50 3c 00 00       	call   c00147a0 <thisCPU()>
c0010b50:	e8 f3 ec 00 00       	call   c001f848 <CPU::readCR0()>
c0010b55:	83 c8 04             	or     eax,0x4
c0010b58:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b5b:	e8 fa ec 00 00       	call   c001f85a <CPU::writeCR0(unsigned long)>
c0010b60:	83 c4 10             	add    esp,0x10
c0010b63:	89 d8                	mov    eax,ebx
c0010b65:	83 c4 08             	add    esp,0x8
c0010b68:	5b                   	pop    ebx
c0010b69:	c3                   	ret    

c0010b6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b72:	c1 e0 04             	shl    eax,0x4
c0010b75:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b79:	8d 50 10             	lea    edx,[eax+0x10]
c0010b7c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b82:	74 08                	je     c0010b8c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b84:	83 c0 04             	add    eax,0x4
c0010b87:	39 d0                	cmp    eax,edx
c0010b89:	75 f1                	jne    c0010b7c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010b8b:	c3                   	ret    
c0010b8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b96:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010ba0:	eb e2                	jmp    c0010b84 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010ba2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010ba2:	57                   	push   edi
c0010ba3:	31 c0                	xor    eax,eax
c0010ba5:	56                   	push   esi
c0010ba6:	53                   	push   ebx
c0010ba7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010baf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010bb3:	89 da                	mov    edx,ebx
c0010bb5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010bb9:	c1 e2 04             	shl    edx,0x4
c0010bbc:	01 ca                	add    edx,ecx
c0010bbe:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bc6:	74 16                	je     c0010bde <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bc8:	40                   	inc    eax
c0010bc9:	83 f8 04             	cmp    eax,0x4
c0010bcc:	75 f0                	jne    c0010bbe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bce:	c7 44 24 10 cc 19 02 c0 	mov    DWORD PTR [esp+0x10],0xc00219cc
c0010bd6:	5b                   	pop    ebx
c0010bd7:	5e                   	pop    esi
c0010bd8:	5f                   	pop    edi
c0010bd9:	e9 42 4d 00 00       	jmp    c0015920 <Krnl::panic(char const*)>
c0010bde:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010be1:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010be4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010bea:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010bf0:	5b                   	pop    ebx
c0010bf1:	5e                   	pop    esi
c0010bf2:	5f                   	pop    edi
c0010bf3:	c3                   	ret    

c0010bf4 <doubleFault(regs*, void*)>:
c0010bf4:	55                   	push   ebp
c0010bf5:	89 e5                	mov    ebp,esp
c0010bf7:	83 ec 08             	sub    esp,0x8
c0010bfa:	83 ec 0c             	sub    esp,0xc
c0010bfd:	68 07 1a 02 c0       	push   0xc0021a07
c0010c02:	e8 19 4d 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0010c07:	83 c4 10             	add    esp,0x10
c0010c0a:	90                   	nop
c0010c0b:	c9                   	leave  
c0010c0c:	c3                   	ret    
c0010c0d:	90                   	nop

c0010c0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c0e:	56                   	push   esi
c0010c0f:	53                   	push   ebx
c0010c10:	50                   	push   eax
c0010c11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c19:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c1e:	75 35                	jne    c0010c55 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010c20:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c23:	31 d2                	xor    edx,edx
c0010c25:	89 c1                	mov    ecx,eax
c0010c27:	c1 e1 04             	shl    ecx,0x4
c0010c2a:	01 f1                	add    ecx,esi
c0010c2c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c34:	74 3e                	je     c0010c74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c36:	42                   	inc    edx
c0010c37:	83 fa 04             	cmp    edx,0x4
c0010c3a:	75 f0                	jne    c0010c2c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	68 4c 1a 02 c0       	push   0xc0021a4c
c0010c44:	e8 d7 4c 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c51:	5a                   	pop    edx
c0010c52:	5b                   	pop    ebx
c0010c53:	5e                   	pop    esi
c0010c54:	c3                   	ret    
c0010c55:	83 ec 0c             	sub    esp,0xc
c0010c58:	56                   	push   esi
c0010c59:	e8 c8 fb ff ff       	call   c0010826 <Device::getName()>
c0010c5e:	83 c4 10             	add    esp,0x10
c0010c61:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c64:	75 ba                	jne    c0010c20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c66:	83 fb 0f             	cmp    ebx,0xf
c0010c69:	7f 29                	jg     c0010c94 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c6b:	0f b6 9b 20 3b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc4e0]
c0010c72:	eb ac                	jmp    c0010c20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c74:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c7b:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c7e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c88:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010c8e:	89 d8                	mov    eax,ebx
c0010c90:	5a                   	pop    edx
c0010c91:	5b                   	pop    ebx
c0010c92:	5e                   	pop    esi
c0010c93:	c3                   	ret    
c0010c94:	83 ec 0c             	sub    esp,0xc
c0010c97:	68 14 1a 02 c0       	push   0xc0021a14
c0010c9c:	e8 7f 4c 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	e9 77 ff ff ff       	jmp    c0010c20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010ca9:	90                   	nop

c0010caa <InterruptController::clearAllHandlers(int, bool)>:
c0010caa:	56                   	push   esi
c0010cab:	53                   	push   ebx
c0010cac:	52                   	push   edx
c0010cad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cb1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010cb5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010cba:	75 61                	jne    c0010d1d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010cbc:	8d 46 20             	lea    eax,[esi+0x20]
c0010cbf:	c1 e6 04             	shl    esi,0x4
c0010cc2:	c1 e0 04             	shl    eax,0x4
c0010cc5:	01 de                	add    esi,ebx
c0010cc7:	01 d8                	add    eax,ebx
c0010cc9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010cd3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cdd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010ce7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010cf1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010cfb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d05:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d0f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d19:	58                   	pop    eax
c0010d1a:	5b                   	pop    ebx
c0010d1b:	5e                   	pop    esi
c0010d1c:	c3                   	ret    
c0010d1d:	83 ec 0c             	sub    esp,0xc
c0010d20:	53                   	push   ebx
c0010d21:	e8 00 fb ff ff       	call   c0010826 <Device::getName()>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d2c:	75 8e                	jne    c0010cbc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d2e:	83 fe 0f             	cmp    esi,0xf
c0010d31:	7f 09                	jg     c0010d3c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d33:	0f b6 b6 20 3b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc4e0]
c0010d3a:	eb 80                	jmp    c0010cbc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d3c:	83 ec 0c             	sub    esp,0xc
c0010d3f:	68 88 1a 02 c0       	push   0xc0021a88
c0010d44:	e8 d7 4b 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	e9 6b ff ff ff       	jmp    c0010cbc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d51:	90                   	nop

c0010d52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d52:	56                   	push   esi
c0010d53:	53                   	push   ebx
c0010d54:	52                   	push   edx
c0010d55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d5d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d62:	75 3a                	jne    c0010d9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d68:	8d 50 20             	lea    edx,[eax+0x20]
c0010d6b:	c1 e2 04             	shl    edx,0x4
c0010d6e:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d71:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d75:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d7b:	74 0b                	je     c0010d88 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d7d:	83 c0 04             	add    eax,0x4
c0010d80:	39 d0                	cmp    eax,edx
c0010d82:	75 f1                	jne    c0010d75 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d84:	58                   	pop    eax
c0010d85:	5b                   	pop    ebx
c0010d86:	5e                   	pop    esi
c0010d87:	c3                   	ret    
c0010d88:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010d92:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010d9c:	eb df                	jmp    c0010d7d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010d9e:	83 ec 0c             	sub    esp,0xc
c0010da1:	56                   	push   esi
c0010da2:	e8 7f fa ff ff       	call   c0010826 <Device::getName()>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010dad:	75 b5                	jne    c0010d64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010daf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010db4:	7f 11                	jg     c0010dc7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010db6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010dba:	0f b6 80 20 3b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc4e0]
c0010dc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010dc5:	eb 9d                	jmp    c0010d64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dc7:	83 ec 0c             	sub    esp,0xc
c0010dca:	68 88 1a 02 c0       	push   0xc0021a88
c0010dcf:	e8 4c 4b 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0010dd4:	83 c4 10             	add    esp,0x10
c0010dd7:	eb 8b                	jmp    c0010d64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010dd9 <nmiHandler(regs*, void*)>:
c0010dd9:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0010dde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010de2:	e9 a5 a9 ff ff       	jmp    c000b78c <Computer::handleNMI()>

c0010de7 <int_handler>:
c0010de7:	55                   	push   ebp
c0010de8:	57                   	push   edi
c0010de9:	56                   	push   esi
c0010dea:	53                   	push   ebx
c0010deb:	83 ec 0c             	sub    esp,0xc
c0010dee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010df2:	80 3d 14 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024e14,0x0
c0010df9:	74 0b                	je     c0010e06 <int_handler+0x1f>
c0010dfb:	fa                   	cli    
c0010dfc:	f4                   	hlt    
c0010dfd:	80 3d 14 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024e14,0x0
c0010e04:	75 f5                	jne    c0010dfb <int_handler+0x14>
c0010e06:	e8 95 39 00 00       	call   c00147a0 <thisCPU()>
c0010e0b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e0e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e14:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e17:	83 f8 17             	cmp    eax,0x17
c0010e1a:	77 13                	ja     c0010e2f <int_handler+0x48>
c0010e1c:	83 ec 08             	sub    esp,0x8
c0010e1f:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e21:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e24:	0f b6 c0             	movzx  eax,al
c0010e27:	50                   	push   eax
c0010e28:	57                   	push   edi
c0010e29:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e2c:	83 c4 10             	add    esp,0x10
c0010e2f:	83 c3 15             	add    ebx,0x15
c0010e32:	c1 e3 04             	shl    ebx,0x4
c0010e35:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e39:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e40:	31 db                	xor    ebx,ebx
c0010e42:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e46:	85 c0                	test   eax,eax
c0010e48:	74 13                	je     c0010e5d <int_handler+0x76>
c0010e4a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e4d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e51:	74 1c                	je     c0010e6f <int_handler+0x88>
c0010e53:	83 ec 08             	sub    esp,0x8
c0010e56:	52                   	push   edx
c0010e57:	56                   	push   esi
c0010e58:	ff d0                	call   eax
c0010e5a:	83 c4 10             	add    esp,0x10
c0010e5d:	43                   	inc    ebx
c0010e5e:	83 fb 04             	cmp    ebx,0x4
c0010e61:	75 df                	jne    c0010e42 <int_handler+0x5b>
c0010e63:	83 c4 0c             	add    esp,0xc
c0010e66:	31 c0                	xor    eax,eax
c0010e68:	5b                   	pop    ebx
c0010e69:	31 d2                	xor    edx,edx
c0010e6b:	5e                   	pop    esi
c0010e6c:	5f                   	pop    edi
c0010e6d:	5d                   	pop    ebp
c0010e6e:	c3                   	ret    
c0010e6f:	83 ec 08             	sub    esp,0x8
c0010e72:	52                   	push   edx
c0010e73:	56                   	push   esi
c0010e74:	ff d0                	call   eax
c0010e76:	83 c4 10             	add    esp,0x10
c0010e79:	83 c4 0c             	add    esp,0xc
c0010e7c:	5b                   	pop    ebx
c0010e7d:	5e                   	pop    esi
c0010e7e:	5f                   	pop    edi
c0010e7f:	5d                   	pop    ebp
c0010e80:	c3                   	ret    
c0010e81:	90                   	nop

c0010e82 <InterruptController::InterruptController(char const*)>:
c0010e82:	83 ec 1c             	sub    esp,0x1c
c0010e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e89:	83 ec 08             	sub    esp,0x8
c0010e8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e90:	50                   	push   eax
c0010e91:	e8 9e f8 ff ff       	call   c0010734 <Device::Device(char const*)>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	ba c4 1c 02 c0       	mov    edx,0xc0021cc4
c0010e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea2:	89 10                	mov    DWORD PTR [eax],edx
c0010ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010eb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010eba:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010ec2:	7f 5e                	jg     c0010f22 <InterruptController::InterruptController(char const*)+0xa0>
c0010ec4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ecc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ed1:	7f 49                	jg     c0010f1c <InterruptController::InterruptController(char const*)+0x9a>
c0010ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010edb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ee2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ee6:	01 ca                	add    edx,ecx
c0010ee8:	83 c2 54             	add    edx,0x54
c0010eeb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ef7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010efb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f06:	01 ca                	add    edx,ecx
c0010f08:	81 c2 54 04 00 00    	add    edx,0x454
c0010f0e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f16:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f1a:	eb b0                	jmp    c0010ecc <InterruptController::InterruptController(char const*)+0x4a>
c0010f1c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f20:	eb 98                	jmp    c0010eba <InterruptController::InterruptController(char const*)+0x38>
c0010f22:	90                   	nop
c0010f23:	83 c4 1c             	add    esp,0x1c
c0010f26:	c3                   	ret    
c0010f27:	90                   	nop

c0010f28 <InterruptController::~InterruptController()>:
c0010f28:	83 ec 0c             	sub    esp,0xc
c0010f2b:	ba c4 1c 02 c0       	mov    edx,0xc0021cc4
c0010f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f34:	89 10                	mov    DWORD PTR [eax],edx
c0010f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	50                   	push   eax
c0010f3e:	e8 a3 f4 ff ff       	call   c00103e6 <Device::~Device()>
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	90                   	nop
c0010f47:	83 c4 0c             	add    esp,0xc
c0010f4a:	c3                   	ret    
c0010f4b:	90                   	nop

c0010f4c <InterruptController::~InterruptController()>:
c0010f4c:	83 ec 0c             	sub    esp,0xc
c0010f4f:	83 ec 0c             	sub    esp,0xc
c0010f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f56:	e8 cd ff ff ff       	call   c0010f28 <InterruptController::~InterruptController()>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	83 ec 08             	sub    esp,0x8
c0010f61:	68 58 21 00 00       	push   0x2158
c0010f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f6a:	e8 ea e0 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0010f6f:	83 c4 10             	add    esp,0x10
c0010f72:	83 c4 0c             	add    esp,0xc
c0010f75:	c3                   	ret    

c0010f76 <displayDebugInfo(regs*)>:
c0010f76:	55                   	push   ebp
c0010f77:	57                   	push   edi
c0010f78:	56                   	push   esi
c0010f79:	53                   	push   ebx
c0010f7a:	83 ec 24             	sub    esp,0x24
c0010f7d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f81:	0f 20 c2             	mov    edx,cr0
c0010f84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f88:	0f 20 d7             	mov    edi,cr2
c0010f8b:	0f 20 de             	mov    esi,cr3
c0010f8e:	0f 20 e5             	mov    ebp,cr4
c0010f91:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010f94:	68 c2 1a 02 c0       	push   0xc0021ac2
c0010f99:	e8 9b e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010f9e:	58                   	pop    eax
c0010f9f:	5a                   	pop    edx
c0010fa0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010fa3:	68 cd 1a 02 c0       	push   0xc0021acd
c0010fa8:	e8 8c e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010fad:	59                   	pop    ecx
c0010fae:	58                   	pop    eax
c0010faf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010fb2:	68 d8 1a 02 c0       	push   0xc0021ad8
c0010fb7:	e8 7d e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010fbc:	58                   	pop    eax
c0010fbd:	5a                   	pop    edx
c0010fbe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010fc1:	68 e3 1a 02 c0       	push   0xc0021ae3
c0010fc6:	e8 6e e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010fcb:	59                   	pop    ecx
c0010fcc:	58                   	pop    eax
c0010fcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010fd0:	68 ee 1a 02 c0       	push   0xc0021aee
c0010fd5:	e8 5f e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010fda:	58                   	pop    eax
c0010fdb:	5a                   	pop    edx
c0010fdc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010fdf:	68 f9 1a 02 c0       	push   0xc0021af9
c0010fe4:	e8 50 e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010fe9:	59                   	pop    ecx
c0010fea:	58                   	pop    eax
c0010feb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010fee:	68 04 1b 02 c0       	push   0xc0021b04
c0010ff3:	e8 41 e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0010ff8:	58                   	pop    eax
c0010ff9:	5a                   	pop    edx
c0010ffa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ffd:	68 0f 1b 02 c0       	push   0xc0021b0f
c0011002:	e8 32 e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011007:	59                   	pop    ecx
c0011008:	58                   	pop    eax
c0011009:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001100c:	68 1a 1b 02 c0       	push   0xc0021b1a
c0011011:	e8 23 e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011016:	58                   	pop    eax
c0011017:	5a                   	pop    edx
c0011018:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001101b:	68 29 1b 02 c0       	push   0xc0021b29
c0011020:	e8 14 e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011025:	59                   	pop    ecx
c0011026:	58                   	pop    eax
c0011027:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001102a:	68 34 1b 02 c0       	push   0xc0021b34
c001102f:	e8 05 e1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011034:	58                   	pop    eax
c0011035:	5a                   	pop    edx
c0011036:	57                   	push   edi
c0011037:	68 3f 1b 02 c0       	push   0xc0021b3f
c001103c:	e8 f8 e0 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011041:	59                   	pop    ecx
c0011042:	58                   	pop    eax
c0011043:	56                   	push   esi
c0011044:	68 4a 1b 02 c0       	push   0xc0021b4a
c0011049:	e8 eb e0 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001104e:	58                   	pop    eax
c001104f:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011054:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001105a:	e8 1e c3 ff ff       	call   c000d37d <setActiveTerminal(VgaText*)>
c001105f:	58                   	pop    eax
c0011060:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011063:	5a                   	pop    edx
c0011064:	c1 e0 05             	shl    eax,0x5
c0011067:	05 80 38 02 c0       	add    eax,0xc0023880
c001106c:	50                   	push   eax
c001106d:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011072:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011078:	e8 1f c7 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c001107d:	59                   	pop    ecx
c001107e:	58                   	pop    eax
c001107f:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011084:	68 55 1b 02 c0       	push   0xc0021b55
c0011089:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001108f:	e8 08 c7 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0011094:	58                   	pop    eax
c0011095:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001109a:	5a                   	pop    edx
c001109b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001109e:	83 c0 0c             	add    eax,0xc
c00110a1:	50                   	push   eax
c00110a2:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00110a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ad:	e8 ea c6 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00110b2:	59                   	pop    ecx
c00110b3:	58                   	pop    eax
c00110b4:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00110b9:	68 5e 1b 02 c0       	push   0xc0021b5e
c00110be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c4:	e8 d3 c6 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00110c9:	58                   	pop    eax
c00110ca:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00110cf:	5a                   	pop    edx
c00110d0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d9:	e8 e4 c6 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c00110de:	59                   	pop    ecx
c00110df:	58                   	pop    eax
c00110e0:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00110e5:	68 66 1b 02 c0       	push   0xc0021b66
c00110ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110f0:	e8 a7 c6 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00110f5:	58                   	pop    eax
c00110f6:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00110fb:	5a                   	pop    edx
c00110fc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011105:	e8 b8 c6 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c001110a:	59                   	pop    ecx
c001110b:	58                   	pop    eax
c001110c:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011111:	68 6e 1b 02 c0       	push   0xc0021b6e
c0011116:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111c:	e8 7b c6 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0011121:	58                   	pop    eax
c0011122:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011127:	5a                   	pop    edx
c0011128:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001112b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011131:	e8 8c c6 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011136:	59                   	pop    ecx
c0011137:	58                   	pop    eax
c0011138:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c001113d:	68 76 1b 02 c0       	push   0xc0021b76
c0011142:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011148:	e8 4f c6 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c001114d:	58                   	pop    eax
c001114e:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011153:	5a                   	pop    edx
c0011154:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011157:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115d:	e8 60 c6 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011162:	59                   	pop    ecx
c0011163:	58                   	pop    eax
c0011164:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011169:	68 7e 1b 02 c0       	push   0xc0021b7e
c001116e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011174:	e8 23 c6 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0011179:	58                   	pop    eax
c001117a:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c001117f:	5a                   	pop    edx
c0011180:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011189:	e8 34 c6 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c001118e:	59                   	pop    ecx
c001118f:	58                   	pop    eax
c0011190:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011195:	68 86 1b 02 c0       	push   0xc0021b86
c001119a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a0:	e8 f7 c5 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00111a5:	58                   	pop    eax
c00111a6:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00111ab:	5a                   	pop    edx
c00111ac:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00111af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b5:	e8 08 c6 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c00111ba:	59                   	pop    ecx
c00111bb:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00111c0:	5b                   	pop    ebx
c00111c1:	68 8e 1b 02 c0       	push   0xc0021b8e
c00111c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111cc:	e8 cb c5 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00111d1:	58                   	pop    eax
c00111d2:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00111d7:	5a                   	pop    edx
c00111d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00111dc:	52                   	push   edx
c00111dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e3:	e8 da c5 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c00111e8:	59                   	pop    ecx
c00111e9:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00111ee:	5b                   	pop    ebx
c00111ef:	68 97 1b 02 c0       	push   0xc0021b97
c00111f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111fa:	e8 9d c5 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00111ff:	58                   	pop    eax
c0011200:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011205:	5a                   	pop    edx
c0011206:	57                   	push   edi
c0011207:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120d:	e8 b0 c5 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011212:	59                   	pop    ecx
c0011213:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011218:	5b                   	pop    ebx
c0011219:	68 9f 1b 02 c0       	push   0xc0021b9f
c001121e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011224:	e8 73 c5 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0011229:	5f                   	pop    edi
c001122a:	58                   	pop    eax
c001122b:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011230:	56                   	push   esi
c0011231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011237:	e8 86 c5 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c001123c:	58                   	pop    eax
c001123d:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011242:	5a                   	pop    edx
c0011243:	68 a7 1b 02 c0       	push   0xc0021ba7
c0011248:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124e:	e8 49 c5 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0011253:	59                   	pop    ecx
c0011254:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011259:	5b                   	pop    ebx
c001125a:	55                   	push   ebp
c001125b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011261:	e8 5c c5 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011266:	5e                   	pop    esi
c0011267:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c001126c:	5f                   	pop    edi
c001126d:	68 af 1b 02 c0       	push   0xc0021baf
c0011272:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011278:	e8 1f c5 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c001127d:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011282:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011288:	e8 d6 e5 00 00       	call   c001f863 <CPU::readDR0()>
c001128d:	5d                   	pop    ebp
c001128e:	5a                   	pop    edx
c001128f:	50                   	push   eax
c0011290:	53                   	push   ebx
c0011291:	e8 2c c5 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011296:	59                   	pop    ecx
c0011297:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c001129c:	5b                   	pop    ebx
c001129d:	68 b8 1b 02 c0       	push   0xc0021bb8
c00112a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a8:	e8 ef c4 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00112ad:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00112b2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112b8:	e8 b8 e5 00 00       	call   c001f875 <CPU::readDR1()>
c00112bd:	5e                   	pop    esi
c00112be:	5f                   	pop    edi
c00112bf:	50                   	push   eax
c00112c0:	53                   	push   ebx
c00112c1:	e8 fc c4 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c00112c6:	5d                   	pop    ebp
c00112c7:	58                   	pop    eax
c00112c8:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00112cd:	68 c0 1b 02 c0       	push   0xc0021bc0
c00112d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112d8:	e8 bf c4 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00112dd:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00112e2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112e8:	e8 9a e5 00 00       	call   c001f887 <CPU::readDR2()>
c00112ed:	5a                   	pop    edx
c00112ee:	59                   	pop    ecx
c00112ef:	50                   	push   eax
c00112f0:	53                   	push   ebx
c00112f1:	e8 cc c4 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c00112f6:	5b                   	pop    ebx
c00112f7:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00112fc:	5e                   	pop    esi
c00112fd:	68 c8 1b 02 c0       	push   0xc0021bc8
c0011302:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011308:	e8 8f c4 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c001130d:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011312:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011318:	e8 7c e5 00 00       	call   c001f899 <CPU::readDR3()>
c001131d:	5f                   	pop    edi
c001131e:	5d                   	pop    ebp
c001131f:	50                   	push   eax
c0011320:	53                   	push   ebx
c0011321:	e8 9c c4 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011326:	58                   	pop    eax
c0011327:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c001132c:	5a                   	pop    edx
c001132d:	68 d0 1b 02 c0       	push   0xc0021bd0
c0011332:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011338:	e8 5f c4 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c001133d:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011342:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011348:	e8 5e e5 00 00       	call   c001f8ab <CPU::readDR6()>
c001134d:	59                   	pop    ecx
c001134e:	5e                   	pop    esi
c001134f:	50                   	push   eax
c0011350:	53                   	push   ebx
c0011351:	e8 6c c4 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011356:	5f                   	pop    edi
c0011357:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c001135c:	5d                   	pop    ebp
c001135d:	68 d8 1b 02 c0       	push   0xc0021bd8
c0011362:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011368:	e8 2f c4 ff ff       	call   c000d79c <VgaText::puts(char const*)>
c001136d:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0011372:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011378:	e8 40 e5 00 00       	call   c001f8bd <CPU::readDR7()>
c001137d:	5a                   	pop    edx
c001137e:	59                   	pop    ecx
c001137f:	50                   	push   eax
c0011380:	53                   	push   ebx
c0011381:	e8 3c c4 ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0011386:	fa                   	cli    
c0011387:	f4                   	hlt    
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	eb fe                	jmp    c001138b <displayDebugInfo(regs*)+0x415>

c001138d <x87EmulHandler(regs*, void*)>:
c001138d:	53                   	push   ebx
c001138e:	83 ec 08             	sub    esp,0x8
c0011391:	a1 54 45 02 c0       	mov    eax,ds:0xc0024554
c0011396:	85 c0                	test   eax,eax
c0011398:	74 15                	je     c00113af <x87EmulHandler(regs*, void*)+0x22>
c001139a:	83 ec 0c             	sub    esp,0xc
c001139d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113a1:	ff d0                	call   eax
c00113a3:	83 c4 10             	add    esp,0x10
c00113a6:	84 c0                	test   al,al
c00113a8:	74 2f                	je     c00113d9 <x87EmulHandler(regs*, void*)+0x4c>
c00113aa:	83 c4 08             	add    esp,0x8
c00113ad:	5b                   	pop    ebx
c00113ae:	c3                   	ret    
c00113af:	83 ec 08             	sub    esp,0x8
c00113b2:	8b 1d c8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c8
c00113b8:	6a 01                	push   0x1
c00113ba:	68 e0 1b 02 c0       	push   0xc0021be0
c00113bf:	e8 df 6e 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c00113c4:	5a                   	pop    edx
c00113c5:	59                   	pop    ecx
c00113c6:	53                   	push   ebx
c00113c7:	50                   	push   eax
c00113c8:	e8 9c 70 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c00113cd:	a1 54 45 02 c0       	mov    eax,ds:0xc0024554
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	85 c0                	test   eax,eax
c00113d7:	75 c1                	jne    c001139a <x87EmulHandler(regs*, void*)+0xd>
c00113d9:	83 ec 0c             	sub    esp,0xc
c00113dc:	68 fd 1b 02 c0       	push   0xc0021bfd
c00113e1:	e8 53 dd ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00113e6:	58                   	pop    eax
c00113e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113eb:	e8 86 fb ff ff       	call   c0010f76 <displayDebugInfo(regs*)>

c00113f0 <gpFault(regs*, void*)>:
c00113f0:	53                   	push   ebx
c00113f1:	83 ec 14             	sub    esp,0x14
c00113f4:	c7 05 50 45 02 c0 e7 96 01 c0 	mov    DWORD PTR ds:0xc0024550,0xc00196e7
c00113fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011402:	53                   	push   ebx
c0011403:	e8 df 82 00 00       	call   c00196e7 <Vm::faultHandler(regs*)>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	84 c0                	test   al,al
c001140d:	74 05                	je     c0011414 <gpFault(regs*, void*)+0x24>
c001140f:	83 c4 08             	add    esp,0x8
c0011412:	5b                   	pop    ebx
c0011413:	c3                   	ret    
c0011414:	83 ec 0c             	sub    esp,0xc
c0011417:	68 fd 1b 02 c0       	push   0xc0021bfd
c001141c:	e8 18 dd ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011421:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011424:	e8 4d fb ff ff       	call   c0010f76 <displayDebugInfo(regs*)>

c0011429 <pgFault(regs*, void*)>:
c0011429:	83 ec 18             	sub    esp,0x18
c001142c:	68 18 1c 02 c0       	push   0xc0021c18
c0011431:	e8 03 dd ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011436:	58                   	pop    eax
c0011437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001143b:	e8 36 fb ff ff       	call   c0010f76 <displayDebugInfo(regs*)>

c0011440 <otherISRHandler(regs*, void*)>:
c0011440:	53                   	push   ebx
c0011441:	83 ec 0c             	sub    esp,0xc
c0011444:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011448:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001144b:	50                   	push   eax
c001144c:	50                   	push   eax
c001144d:	68 25 1c 02 c0       	push   0xc0021c25
c0011452:	e8 e2 dc ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011457:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001145a:	e8 17 fb ff ff       	call   c0010f76 <displayDebugInfo(regs*)>

c001145f <opcodeFault(regs*, void*)>:
c001145f:	55                   	push   ebp
c0011460:	89 e5                	mov    ebp,esp
c0011462:	56                   	push   esi
c0011463:	53                   	push   ebx
c0011464:	83 ec 40             	sub    esp,0x40
c0011467:	e8 34 33 00 00       	call   c00147a0 <thisCPU()>
c001146c:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011472:	84 c0                	test   al,al
c0011474:	74 24                	je     c001149a <opcodeFault(regs*, void*)+0x3b>
c0011476:	83 ec 0c             	sub    esp,0xc
c0011479:	68 44 1c 02 c0       	push   0xc0021c44
c001147e:	e8 b6 dc ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011489:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001148c:	8d 50 19             	lea    edx,[eax+0x19]
c001148f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011492:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011495:	e9 77 05 00 00       	jmp    c0011a11 <opcodeFault(regs*, void*)+0x5b2>
c001149a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114a3:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00114a7:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114b1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00114b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114b7:	8a 00                	mov    al,BYTE PTR [eax]
c00114b9:	3c f0                	cmp    al,0xf0
c00114bb:	75 17                	jne    c00114d4 <opcodeFault(regs*, void*)+0x75>
c00114bd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114c6:	8d 50 01             	lea    edx,[eax+0x1]
c00114c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114cf:	e9 da 00 00 00       	jmp    c00115ae <opcodeFault(regs*, void*)+0x14f>
c00114d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114d7:	8a 00                	mov    al,BYTE PTR [eax]
c00114d9:	3c f2                	cmp    al,0xf2
c00114db:	74 09                	je     c00114e6 <opcodeFault(regs*, void*)+0x87>
c00114dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114e0:	8a 00                	mov    al,BYTE PTR [eax]
c00114e2:	3c f3                	cmp    al,0xf3
c00114e4:	75 1b                	jne    c0011501 <opcodeFault(regs*, void*)+0xa2>
c00114e6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00114ea:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114f3:	8d 50 01             	lea    edx,[eax+0x1]
c00114f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114fc:	e9 ad 00 00 00       	jmp    c00115ae <opcodeFault(regs*, void*)+0x14f>
c0011501:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011504:	8a 00                	mov    al,BYTE PTR [eax]
c0011506:	3c 66                	cmp    al,0x66
c0011508:	75 1f                	jne    c0011529 <opcodeFault(regs*, void*)+0xca>
c001150a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001150e:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0011512:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011518:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001151b:	8d 50 01             	lea    edx,[eax+0x1]
c001151e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011521:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011524:	e9 85 00 00 00       	jmp    c00115ae <opcodeFault(regs*, void*)+0x14f>
c0011529:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001152c:	8a 00                	mov    al,BYTE PTR [eax]
c001152e:	3c 67                	cmp    al,0x67
c0011530:	75 18                	jne    c001154a <opcodeFault(regs*, void*)+0xeb>
c0011532:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011536:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001153f:	8d 50 01             	lea    edx,[eax+0x1]
c0011542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011545:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011548:	eb 64                	jmp    c00115ae <opcodeFault(regs*, void*)+0x14f>
c001154a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001154d:	8a 00                	mov    al,BYTE PTR [eax]
c001154f:	3c 2e                	cmp    al,0x2e
c0011551:	74 09                	je     c001155c <opcodeFault(regs*, void*)+0xfd>
c0011553:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011556:	8a 00                	mov    al,BYTE PTR [eax]
c0011558:	3c 3e                	cmp    al,0x3e
c001155a:	75 18                	jne    c0011574 <opcodeFault(regs*, void*)+0x115>
c001155c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011560:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011566:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011569:	8d 50 01             	lea    edx,[eax+0x1]
c001156c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011572:	eb 3a                	jmp    c00115ae <opcodeFault(regs*, void*)+0x14f>
c0011574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011577:	8a 00                	mov    al,BYTE PTR [eax]
c0011579:	3c 36                	cmp    al,0x36
c001157b:	74 1b                	je     c0011598 <opcodeFault(regs*, void*)+0x139>
c001157d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011580:	8a 00                	mov    al,BYTE PTR [eax]
c0011582:	3c 26                	cmp    al,0x26
c0011584:	74 12                	je     c0011598 <opcodeFault(regs*, void*)+0x139>
c0011586:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011589:	8a 00                	mov    al,BYTE PTR [eax]
c001158b:	3c 64                	cmp    al,0x64
c001158d:	74 09                	je     c0011598 <opcodeFault(regs*, void*)+0x139>
c001158f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011592:	8a 00                	mov    al,BYTE PTR [eax]
c0011594:	3c 65                	cmp    al,0x65
c0011596:	75 16                	jne    c00115ae <opcodeFault(regs*, void*)+0x14f>
c0011598:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001159c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115a5:	8d 50 01             	lea    edx,[eax+0x1]
c00115a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b1:	8a 00                	mov    al,BYTE PTR [eax]
c00115b3:	3c 0f                	cmp    al,0xf
c00115b5:	0f 85 ad 00 00 00    	jne    c0011668 <opcodeFault(regs*, void*)+0x209>
c00115bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115be:	40                   	inc    eax
c00115bf:	8a 00                	mov    al,BYTE PTR [eax]
c00115c1:	3c c2                	cmp    al,0xc2
c00115c3:	74 0e                	je     c00115d3 <opcodeFault(regs*, void*)+0x174>
c00115c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c8:	40                   	inc    eax
c00115c9:	8a 00                	mov    al,BYTE PTR [eax]
c00115cb:	3c c3                	cmp    al,0xc3
c00115cd:	0f 85 95 00 00 00    	jne    c0011668 <opcodeFault(regs*, void*)+0x209>
c00115d3:	83 ec 0c             	sub    esp,0xc
c00115d6:	68 67 1c 02 c0       	push   0xc0021c67
c00115db:	e8 59 db ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115e9:	8d 50 01             	lea    edx,[eax+0x1]
c00115ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115f2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115f8:	8a 00                	mov    al,BYTE PTR [eax]
c00115fa:	8d 50 fe             	lea    edx,[eax-0x2]
c00115fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011600:	88 10                	mov    BYTE PTR [eax],dl
c0011602:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0011605:	50                   	push   eax
c0011606:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0011609:	50                   	push   eax
c001160a:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001160d:	50                   	push   eax
c001160e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011611:	e8 12 41 00 00       	call   c0015728 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011616:	83 c4 10             	add    esp,0x10
c0011619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001161f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011622:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011625:	01 d0                	add    eax,edx
c0011627:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001162a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011630:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011633:	48                   	dec    eax
c0011634:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001163a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001163d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011643:	83 ec 04             	sub    esp,0x4
c0011646:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011649:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001164c:	50                   	push   eax
c001164d:	e8 17 eb fe ff       	call   c0000169 <voodooXADD>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011658:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001165b:	01 c2                	add    edx,eax
c001165d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011660:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011663:	e9 a9 03 00 00       	jmp    c0011a11 <opcodeFault(regs*, void*)+0x5b2>
c0011668:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001166b:	8a 00                	mov    al,BYTE PTR [eax]
c001166d:	3c 0f                	cmp    al,0xf
c001166f:	0f 85 8b 01 00 00    	jne    c0011800 <opcodeFault(regs*, void*)+0x3a1>
c0011675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011678:	40                   	inc    eax
c0011679:	8a 00                	mov    al,BYTE PTR [eax]
c001167b:	3c c7                	cmp    al,0xc7
c001167d:	0f 86 7d 01 00 00    	jbe    c0011800 <opcodeFault(regs*, void*)+0x3a1>
c0011683:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011686:	40                   	inc    eax
c0011687:	8a 00                	mov    al,BYTE PTR [eax]
c0011689:	3c cf                	cmp    al,0xcf
c001168b:	0f 87 6f 01 00 00    	ja     c0011800 <opcodeFault(regs*, void*)+0x3a1>
c0011691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011694:	40                   	inc    eax
c0011695:	8a 00                	mov    al,BYTE PTR [eax]
c0011697:	83 c0 38             	add    eax,0x38
c001169a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001169d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00116a1:	75 0b                	jne    c00116ae <opcodeFault(regs*, void*)+0x24f>
c00116a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116a6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00116a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116ac:	eb 75                	jmp    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c00116ae:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00116b2:	75 0b                	jne    c00116bf <opcodeFault(regs*, void*)+0x260>
c00116b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00116ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116bd:	eb 64                	jmp    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c00116bf:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00116c3:	75 0b                	jne    c00116d0 <opcodeFault(regs*, void*)+0x271>
c00116c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00116cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116ce:	eb 53                	jmp    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c00116d0:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00116d4:	75 0b                	jne    c00116e1 <opcodeFault(regs*, void*)+0x282>
c00116d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116df:	eb 42                	jmp    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c00116e1:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00116e5:	75 0b                	jne    c00116f2 <opcodeFault(regs*, void*)+0x293>
c00116e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ea:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00116ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116f0:	eb 31                	jmp    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c00116f2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00116f6:	75 0b                	jne    c0011703 <opcodeFault(regs*, void*)+0x2a4>
c00116f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116fb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00116fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011701:	eb 20                	jmp    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c0011703:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0011707:	75 0b                	jne    c0011714 <opcodeFault(regs*, void*)+0x2b5>
c0011709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001170c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001170f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011712:	eb 0f                	jmp    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c0011714:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011718:	75 09                	jne    c0011723 <opcodeFault(regs*, void*)+0x2c4>
c001171a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011720:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011723:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011727:	74 10                	je     c0011739 <opcodeFault(regs*, void*)+0x2da>
c0011729:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011730:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011737:	eb 2d                	jmp    c0011766 <opcodeFault(regs*, void*)+0x307>
c0011739:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001173c:	c1 e0 18             	shl    eax,0x18
c001173f:	89 c2                	mov    edx,eax
c0011741:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011744:	c1 e0 08             	shl    eax,0x8
c0011747:	25 00 00 ff 00       	and    eax,0xff0000
c001174c:	09 c2                	or     edx,eax
c001174e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011751:	c1 e8 08             	shr    eax,0x8
c0011754:	25 00 ff 00 00       	and    eax,0xff00
c0011759:	09 c2                	or     edx,eax
c001175b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001175e:	c1 e8 18             	shr    eax,0x18
c0011761:	09 d0                	or     eax,edx
c0011763:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011766:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001176a:	75 0b                	jne    c0011777 <opcodeFault(regs*, void*)+0x318>
c001176c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001176f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011772:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011775:	eb 75                	jmp    c00117ec <opcodeFault(regs*, void*)+0x38d>
c0011777:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001177b:	75 0b                	jne    c0011788 <opcodeFault(regs*, void*)+0x329>
c001177d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011780:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011783:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011786:	eb 64                	jmp    c00117ec <opcodeFault(regs*, void*)+0x38d>
c0011788:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001178c:	75 0b                	jne    c0011799 <opcodeFault(regs*, void*)+0x33a>
c001178e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011791:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011794:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011797:	eb 53                	jmp    c00117ec <opcodeFault(regs*, void*)+0x38d>
c0011799:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001179d:	75 0b                	jne    c00117aa <opcodeFault(regs*, void*)+0x34b>
c001179f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117a5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00117a8:	eb 42                	jmp    c00117ec <opcodeFault(regs*, void*)+0x38d>
c00117aa:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117ae:	75 0b                	jne    c00117bb <opcodeFault(regs*, void*)+0x35c>
c00117b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117b6:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00117b9:	eb 31                	jmp    c00117ec <opcodeFault(regs*, void*)+0x38d>
c00117bb:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117bf:	75 0b                	jne    c00117cc <opcodeFault(regs*, void*)+0x36d>
c00117c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117ca:	eb 20                	jmp    c00117ec <opcodeFault(regs*, void*)+0x38d>
c00117cc:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117d0:	75 0b                	jne    c00117dd <opcodeFault(regs*, void*)+0x37e>
c00117d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117d8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00117db:	eb 0f                	jmp    c00117ec <opcodeFault(regs*, void*)+0x38d>
c00117dd:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117e1:	75 09                	jne    c00117ec <opcodeFault(regs*, void*)+0x38d>
c00117e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117e9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00117ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00117f2:	8d 50 02             	lea    edx,[eax+0x2]
c00117f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00117fb:	e9 11 02 00 00       	jmp    c0011a11 <opcodeFault(regs*, void*)+0x5b2>
c0011800:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011803:	8a 00                	mov    al,BYTE PTR [eax]
c0011805:	3c 0f                	cmp    al,0xf
c0011807:	0f 85 76 01 00 00    	jne    c0011983 <opcodeFault(regs*, void*)+0x524>
c001180d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011810:	40                   	inc    eax
c0011811:	8a 00                	mov    al,BYTE PTR [eax]
c0011813:	3c c7                	cmp    al,0xc7
c0011815:	0f 85 68 01 00 00    	jne    c0011983 <opcodeFault(regs*, void*)+0x524>
c001181b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001181e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011821:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011824:	8d 50 01             	lea    edx,[eax+0x1]
c0011827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001182a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001182d:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011830:	50                   	push   eax
c0011831:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011834:	50                   	push   eax
c0011835:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011838:	50                   	push   eax
c0011839:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001183c:	e8 e7 3e 00 00       	call   c0015728 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011847:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001184a:	83 f0 01             	xor    eax,0x1
c001184d:	84 c0                	test   al,al
c001184f:	0f 84 2e 01 00 00    	je     c0011983 <opcodeFault(regs*, void*)+0x524>
c0011855:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011858:	3c 01                	cmp    al,0x1
c001185a:	0f 85 23 01 00 00    	jne    c0011983 <opcodeFault(regs*, void*)+0x524>
c0011860:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011863:	83 f0 01             	xor    eax,0x1
c0011866:	84 c0                	test   al,al
c0011868:	0f 84 15 01 00 00    	je     c0011983 <opcodeFault(regs*, void*)+0x524>
c001186e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011871:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011874:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011877:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001187e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011881:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011884:	89 c2                	mov    edx,eax
c0011886:	b8 00 00 00 00       	mov    eax,0x0
c001188b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001188e:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011894:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011897:	ba 00 00 00 00       	mov    edx,0x0
c001189c:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001189f:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00118a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00118a8:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118ab:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00118b2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118b5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118b8:	89 c2                	mov    edx,eax
c00118ba:	b8 00 00 00 00       	mov    eax,0x0
c00118bf:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118c2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00118c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118cb:	ba 00 00 00 00       	mov    edx,0x0
c00118d0:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00118d3:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00118d6:	e8 99 6f 00 00       	call   c0018874 <lockScheduler()>
c00118db:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00118de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00118e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00118e3:	89 c1                	mov    ecx,eax
c00118e5:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00118e8:	89 cb                	mov    ebx,ecx
c00118ea:	89 d0                	mov    eax,edx
c00118ec:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00118ef:	89 c6                	mov    esi,eax
c00118f1:	89 f0                	mov    eax,esi
c00118f3:	09 d8                	or     eax,ebx
c00118f5:	85 c0                	test   eax,eax
c00118f7:	75 21                	jne    c001191a <opcodeFault(regs*, void*)+0x4bb>
c00118f9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00118fc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118ff:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0011902:	89 01                	mov    DWORD PTR [ecx],eax
c0011904:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001190d:	83 c8 40             	or     eax,0x40
c0011910:	89 c2                	mov    edx,eax
c0011912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011915:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011918:	eb 3e                	jmp    c0011958 <opcodeFault(regs*, void*)+0x4f9>
c001191a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001191d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011920:	8b 00                	mov    eax,DWORD PTR [eax]
c0011922:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011925:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011928:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001192b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011931:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011934:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011937:	89 d0                	mov    eax,edx
c0011939:	31 d2                	xor    edx,edx
c001193b:	89 c3                	mov    ebx,eax
c001193d:	89 d6                	mov    esi,edx
c001193f:	89 da                	mov    edx,ebx
c0011941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011944:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001194d:	83 e0 bf             	and    eax,0xffffffbf
c0011950:	89 c2                	mov    edx,eax
c0011952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011955:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011958:	e8 19 6f 00 00       	call   c0018876 <unlockScheduler()>
c001195d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011960:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011963:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011966:	01 c2                	add    edx,eax
c0011968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	68 76 1c 02 c0       	push   0xc0021c76
c0011976:	e8 be d7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	e9 8e 00 00 00       	jmp    c0011a11 <opcodeFault(regs*, void*)+0x5b2>
c0011983:	83 ec 0c             	sub    esp,0xc
c0011986:	68 89 1c 02 c0       	push   0xc0021c89
c001198b:	e8 a9 d7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011990:	83 c4 10             	add    esp,0x10
c0011993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011996:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001199f:	c1 e0 04             	shl    eax,0x4
c00119a2:	01 d0                	add    eax,edx
c00119a4:	83 c0 03             	add    eax,0x3
c00119a7:	8a 00                	mov    al,BYTE PTR [eax]
c00119a9:	0f b6 d8             	movzx  ebx,al
c00119ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119af:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b8:	c1 e0 04             	shl    eax,0x4
c00119bb:	01 d0                	add    eax,edx
c00119bd:	83 c0 02             	add    eax,0x2
c00119c0:	8a 00                	mov    al,BYTE PTR [eax]
c00119c2:	0f b6 c8             	movzx  ecx,al
c00119c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d1:	c1 e0 04             	shl    eax,0x4
c00119d4:	01 d0                	add    eax,edx
c00119d6:	40                   	inc    eax
c00119d7:	8a 00                	mov    al,BYTE PTR [eax]
c00119d9:	0f b6 d0             	movzx  edx,al
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00119e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e8:	c1 e0 04             	shl    eax,0x4
c00119eb:	01 f0                	add    eax,esi
c00119ed:	8a 00                	mov    al,BYTE PTR [eax]
c00119ef:	0f b6 c0             	movzx  eax,al
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	53                   	push   ebx
c00119f6:	51                   	push   ecx
c00119f7:	52                   	push   edx
c00119f8:	50                   	push   eax
c00119f9:	68 9c 1c 02 c0       	push   0xc0021c9c
c00119fe:	e8 36 d7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011a03:	83 c4 20             	add    esp,0x20
c0011a06:	83 ec 0c             	sub    esp,0xc
c0011a09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011a0c:	e8 65 f5 ff ff       	call   c0010f76 <displayDebugInfo(regs*)>
c0011a11:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011a14:	5b                   	pop    ebx
c0011a15:	5e                   	pop    esi
c0011a16:	5d                   	pop    ebp
c0011a17:	c3                   	ret    

c0011a18 <displayProgramFault(char const*)>:
c0011a18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a20:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011a26:	85 c0                	test   eax,eax
c0011a28:	74 15                	je     c0011a3f <displayProgramFault(char const*)+0x27>
c0011a2a:	83 ec 0c             	sub    esp,0xc
c0011a2d:	6a 04                	push   0x4
c0011a2f:	6a 0f                	push   0xf
c0011a31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a35:	50                   	push   eax
c0011a36:	e8 23 ba ff ff       	call   c000d45e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a3b:	83 c4 1c             	add    esp,0x1c
c0011a3e:	c3                   	ret    
c0011a3f:	c3                   	ret    

c0011a40 <setupInterruptController()>:
c0011a40:	55                   	push   ebp
c0011a41:	89 e5                	mov    ebp,esp
c0011a43:	53                   	push   ebx
c0011a44:	83 ec 14             	sub    esp,0x14
c0011a47:	e8 51 2d 00 00       	call   c001479d <getCPUNumber()>
c0011a4c:	85 c0                	test   eax,eax
c0011a4e:	0f 95 c0             	setne  al
c0011a51:	84 c0                	test   al,al
c0011a53:	74 56                	je     c0011aab <setupInterruptController()+0x6b>
c0011a55:	83 ec 0c             	sub    esp,0xc
c0011a58:	68 58 21 00 00       	push   0x2158
c0011a5d:	e8 e8 d5 ff ff       	call   c000f04a <operator new(unsigned long)>
c0011a62:	83 c4 10             	add    esp,0x10
c0011a65:	89 c3                	mov    ebx,eax
c0011a67:	83 ec 0c             	sub    esp,0xc
c0011a6a:	53                   	push   ebx
c0011a6b:	e8 b2 c7 00 00       	call   c001e222 <APIC::APIC()>
c0011a70:	83 c4 10             	add    esp,0x10
c0011a73:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011a76:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011a79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011a7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a7e:	83 c0 08             	add    eax,0x8
c0011a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a83:	6a 00                	push   0x0
c0011a85:	6a 00                	push   0x0
c0011a87:	6a 00                	push   0x0
c0011a89:	52                   	push   edx
c0011a8a:	ff d0                	call   eax
c0011a8c:	83 c4 10             	add    esp,0x10
c0011a8f:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0011a94:	83 ec 08             	sub    esp,0x8
c0011a97:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011a9a:	50                   	push   eax
c0011a9b:	e8 a4 ea ff ff       	call   c0010544 <Device::addChild(Device*)>
c0011aa0:	83 c4 10             	add    esp,0x10
c0011aa3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011aa6:	e9 48 03 00 00       	jmp    c0011df3 <setupInterruptController()+0x3b3>
c0011aab:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0011ab0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ab6:	83 e0 01             	and    eax,0x1
c0011ab9:	84 c0                	test   al,al
c0011abb:	0f 95 c0             	setne  al
c0011abe:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011ac1:	83 ec 0c             	sub    esp,0xc
c0011ac4:	68 58 21 00 00       	push   0x2158
c0011ac9:	e8 7c d5 ff ff       	call   c000f04a <operator new(unsigned long)>
c0011ace:	83 c4 10             	add    esp,0x10
c0011ad1:	89 c3                	mov    ebx,eax
c0011ad3:	83 ec 0c             	sub    esp,0xc
c0011ad6:	53                   	push   ebx
c0011ad7:	e8 08 cc 00 00       	call   c001e6e4 <PIC::PIC()>
c0011adc:	83 c4 10             	add    esp,0x10
c0011adf:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011ae2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011ae5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ae8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aea:	83 c0 08             	add    eax,0x8
c0011aed:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aef:	6a 00                	push   0x0
c0011af1:	6a 00                	push   0x0
c0011af3:	6a 00                	push   0x0
c0011af5:	52                   	push   edx
c0011af6:	ff d0                	call   eax
c0011af8:	83 c4 10             	add    esp,0x10
c0011afb:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011aff:	74 6e                	je     c0011b6f <setupInterruptController()+0x12f>
c0011b01:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b09:	83 c0 0c             	add    eax,0xc
c0011b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b0e:	6a 00                	push   0x0
c0011b10:	6a 00                	push   0x0
c0011b12:	6a 00                	push   0x0
c0011b14:	52                   	push   edx
c0011b15:	ff d0                	call   eax
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011b1e:	74 15                	je     c0011b35 <setupInterruptController()+0xf5>
c0011b20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b25:	83 c0 04             	add    eax,0x4
c0011b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b2a:	83 ec 0c             	sub    esp,0xc
c0011b2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b30:	ff d0                	call   eax
c0011b32:	83 c4 10             	add    esp,0x10
c0011b35:	83 ec 0c             	sub    esp,0xc
c0011b38:	68 58 21 00 00       	push   0x2158
c0011b3d:	e8 08 d5 ff ff       	call   c000f04a <operator new(unsigned long)>
c0011b42:	83 c4 10             	add    esp,0x10
c0011b45:	89 c3                	mov    ebx,eax
c0011b47:	83 ec 0c             	sub    esp,0xc
c0011b4a:	53                   	push   ebx
c0011b4b:	e8 d2 c6 00 00       	call   c001e222 <APIC::APIC()>
c0011b50:	83 c4 10             	add    esp,0x10
c0011b53:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b56:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b5e:	83 c0 08             	add    eax,0x8
c0011b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b63:	6a 00                	push   0x0
c0011b65:	6a 00                	push   0x0
c0011b67:	6a 00                	push   0x0
c0011b69:	52                   	push   edx
c0011b6a:	ff d0                	call   eax
c0011b6c:	83 c4 10             	add    esp,0x10
c0011b6f:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0011b74:	83 ec 08             	sub    esp,0x8
c0011b77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b7a:	50                   	push   eax
c0011b7b:	e8 c4 e9 ff ff       	call   c0010544 <Device::addChild(Device*)>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b88:	83 c0 24             	add    eax,0x24
c0011b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b8d:	6a 00                	push   0x0
c0011b8f:	68 40 14 01 c0       	push   0xc0011440
c0011b94:	6a 00                	push   0x0
c0011b96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b99:	ff d0                	call   eax
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba3:	83 c0 24             	add    eax,0x24
c0011ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba8:	6a 00                	push   0x0
c0011baa:	68 40 14 01 c0       	push   0xc0011440
c0011baf:	6a 01                	push   0x1
c0011bb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bb4:	ff d0                	call   eax
c0011bb6:	83 c4 10             	add    esp,0x10
c0011bb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bbe:	83 c0 24             	add    eax,0x24
c0011bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bc3:	6a 00                	push   0x0
c0011bc5:	68 d9 0d 01 c0       	push   0xc0010dd9
c0011bca:	6a 02                	push   0x2
c0011bcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bcf:	ff d0                	call   eax
c0011bd1:	83 c4 10             	add    esp,0x10
c0011bd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd9:	83 c0 24             	add    eax,0x24
c0011bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bde:	6a 00                	push   0x0
c0011be0:	68 40 14 01 c0       	push   0xc0011440
c0011be5:	6a 03                	push   0x3
c0011be7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bea:	ff d0                	call   eax
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf4:	83 c0 24             	add    eax,0x24
c0011bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf9:	6a 00                	push   0x0
c0011bfb:	68 40 14 01 c0       	push   0xc0011440
c0011c00:	6a 04                	push   0x4
c0011c02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c05:	ff d0                	call   eax
c0011c07:	83 c4 10             	add    esp,0x10
c0011c0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0f:	83 c0 24             	add    eax,0x24
c0011c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c14:	6a 00                	push   0x0
c0011c16:	68 40 14 01 c0       	push   0xc0011440
c0011c1b:	6a 05                	push   0x5
c0011c1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c20:	ff d0                	call   eax
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c2a:	83 c0 24             	add    eax,0x24
c0011c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c2f:	6a 00                	push   0x0
c0011c31:	68 5f 14 01 c0       	push   0xc001145f
c0011c36:	6a 06                	push   0x6
c0011c38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c3b:	ff d0                	call   eax
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c45:	83 c0 24             	add    eax,0x24
c0011c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4a:	6a 00                	push   0x0
c0011c4c:	68 8d 13 01 c0       	push   0xc001138d
c0011c51:	6a 07                	push   0x7
c0011c53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c56:	ff d0                	call   eax
c0011c58:	83 c4 10             	add    esp,0x10
c0011c5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c60:	83 c0 24             	add    eax,0x24
c0011c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c65:	6a 00                	push   0x0
c0011c67:	68 f4 0b 01 c0       	push   0xc0010bf4
c0011c6c:	6a 08                	push   0x8
c0011c6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c71:	ff d0                	call   eax
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7b:	83 c0 24             	add    eax,0x24
c0011c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c80:	6a 00                	push   0x0
c0011c82:	68 40 14 01 c0       	push   0xc0011440
c0011c87:	6a 09                	push   0x9
c0011c89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c8c:	ff d0                	call   eax
c0011c8e:	83 c4 10             	add    esp,0x10
c0011c91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c96:	83 c0 24             	add    eax,0x24
c0011c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9b:	6a 00                	push   0x0
c0011c9d:	68 40 14 01 c0       	push   0xc0011440
c0011ca2:	6a 0a                	push   0xa
c0011ca4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ca7:	ff d0                	call   eax
c0011ca9:	83 c4 10             	add    esp,0x10
c0011cac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011caf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb1:	83 c0 24             	add    eax,0x24
c0011cb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb6:	6a 00                	push   0x0
c0011cb8:	68 40 14 01 c0       	push   0xc0011440
c0011cbd:	6a 0b                	push   0xb
c0011cbf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cc2:	ff d0                	call   eax
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccc:	83 c0 24             	add    eax,0x24
c0011ccf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd1:	6a 00                	push   0x0
c0011cd3:	68 40 14 01 c0       	push   0xc0011440
c0011cd8:	6a 0c                	push   0xc
c0011cda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cdd:	ff d0                	call   eax
c0011cdf:	83 c4 10             	add    esp,0x10
c0011ce2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce7:	83 c0 24             	add    eax,0x24
c0011cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cec:	6a 00                	push   0x0
c0011cee:	68 f0 13 01 c0       	push   0xc00113f0
c0011cf3:	6a 0d                	push   0xd
c0011cf5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cf8:	ff d0                	call   eax
c0011cfa:	83 c4 10             	add    esp,0x10
c0011cfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d02:	83 c0 24             	add    eax,0x24
c0011d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d07:	6a 00                	push   0x0
c0011d09:	68 29 14 01 c0       	push   0xc0011429
c0011d0e:	6a 0e                	push   0xe
c0011d10:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d13:	ff d0                	call   eax
c0011d15:	83 c4 10             	add    esp,0x10
c0011d18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1d:	83 c0 24             	add    eax,0x24
c0011d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d22:	6a 00                	push   0x0
c0011d24:	68 40 14 01 c0       	push   0xc0011440
c0011d29:	6a 0f                	push   0xf
c0011d2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d2e:	ff d0                	call   eax
c0011d30:	83 c4 10             	add    esp,0x10
c0011d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d38:	83 c0 24             	add    eax,0x24
c0011d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d3d:	6a 00                	push   0x0
c0011d3f:	68 40 14 01 c0       	push   0xc0011440
c0011d44:	6a 10                	push   0x10
c0011d46:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d49:	ff d0                	call   eax
c0011d4b:	83 c4 10             	add    esp,0x10
c0011d4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d51:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d53:	83 c0 24             	add    eax,0x24
c0011d56:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d58:	6a 00                	push   0x0
c0011d5a:	68 40 14 01 c0       	push   0xc0011440
c0011d5f:	6a 11                	push   0x11
c0011d61:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d64:	ff d0                	call   eax
c0011d66:	83 c4 10             	add    esp,0x10
c0011d69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6e:	83 c0 24             	add    eax,0x24
c0011d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d73:	6a 00                	push   0x0
c0011d75:	68 40 14 01 c0       	push   0xc0011440
c0011d7a:	6a 12                	push   0x12
c0011d7c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d7f:	ff d0                	call   eax
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d89:	83 c0 24             	add    eax,0x24
c0011d8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8e:	6a 00                	push   0x0
c0011d90:	68 40 14 01 c0       	push   0xc0011440
c0011d95:	6a 13                	push   0x13
c0011d97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d9a:	ff d0                	call   eax
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011da2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da4:	83 c0 24             	add    eax,0x24
c0011da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da9:	6a 00                	push   0x0
c0011dab:	68 40 14 01 c0       	push   0xc0011440
c0011db0:	6a 14                	push   0x14
c0011db2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011db5:	ff d0                	call   eax
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbf:	83 c0 24             	add    eax,0x24
c0011dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc4:	6a 00                	push   0x0
c0011dc6:	68 40 14 01 c0       	push   0xc0011440
c0011dcb:	6a 1e                	push   0x1e
c0011dcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dd0:	ff d0                	call   eax
c0011dd2:	83 c4 10             	add    esp,0x10
c0011dd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dda:	83 c0 24             	add    eax,0x24
c0011ddd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ddf:	6a 00                	push   0x0
c0011de1:	68 8a 72 01 c0       	push   0xc001728a
c0011de6:	6a 60                	push   0x60
c0011de8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011deb:	ff d0                	call   eax
c0011ded:	83 c4 10             	add    esp,0x10
c0011df0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011df3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011df6:	c9                   	leave  
c0011df7:	c3                   	ret    

c0011df8 <InterruptController::convertLegacyIRQNumber(int)>:
c0011df8:	55                   	push   ebp
c0011df9:	89 e5                	mov    ebp,esp
c0011dfb:	83 ec 08             	sub    esp,0x8
c0011dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e01:	83 ec 0c             	sub    esp,0xc
c0011e04:	50                   	push   eax
c0011e05:	e8 1c ea ff ff       	call   c0010826 <Device::getName()>
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	8a 00                	mov    al,BYTE PTR [eax]
c0011e0f:	3c 41                	cmp    al,0x41
c0011e11:	0f 94 c0             	sete   al
c0011e14:	84 c0                	test   al,al
c0011e16:	74 28                	je     c0011e40 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e18:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011e1c:	7f 12                	jg     c0011e30 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011e1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e21:	05 20 3b 02 c0       	add    eax,0xc0023b20
c0011e26:	8a 00                	mov    al,BYTE PTR [eax]
c0011e28:	0f b6 c0             	movzx  eax,al
c0011e2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e2e:	eb 10                	jmp    c0011e40 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e30:	83 ec 0c             	sub    esp,0xc
c0011e33:	68 14 1a 02 c0       	push   0xc0021a14
c0011e38:	e8 e3 3a 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0011e3d:	83 c4 10             	add    esp,0x10
c0011e40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e43:	c9                   	leave  
c0011e44:	c3                   	ret    
c0011e45:	90                   	nop

c0011e46 <startGUI(void*)>:
c0011e46:	55                   	push   ebp
c0011e47:	89 e5                	mov    ebp,esp
c0011e49:	53                   	push   ebx
c0011e4a:	83 ec 04             	sub    esp,0x4
c0011e4d:	e8 24 6a 00 00       	call   c0018876 <unlockScheduler()>
c0011e52:	e8 08 6a 00 00       	call   c001885f <getIRQNestingLevel()>
c0011e57:	83 ec 08             	sub    esp,0x8
c0011e5a:	50                   	push   eax
c0011e5b:	68 04 1d 02 c0       	push   0xc0021d04
c0011e60:	e8 d4 d2 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0011e65:	83 c4 10             	add    esp,0x10
c0011e68:	8b 1d c8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c8
c0011e6e:	83 ec 08             	sub    esp,0x8
c0011e71:	6a 01                	push   0x1
c0011e73:	68 1e 1d 02 c0       	push   0xc0021d1e
c0011e78:	e8 26 64 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c0011e7d:	83 c4 10             	add    esp,0x10
c0011e80:	83 ec 08             	sub    esp,0x8
c0011e83:	53                   	push   ebx
c0011e84:	50                   	push   eax
c0011e85:	e8 df 65 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c0011e8a:	83 c4 10             	add    esp,0x10
c0011e8d:	8b 1d c8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c8
c0011e93:	83 ec 08             	sub    esp,0x8
c0011e96:	6a 01                	push   0x1
c0011e98:	68 38 1d 02 c0       	push   0xc0021d38
c0011e9d:	e8 01 64 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c0011ea2:	83 c4 10             	add    esp,0x10
c0011ea5:	83 ec 08             	sub    esp,0x8
c0011ea8:	53                   	push   ebx
c0011ea9:	50                   	push   eax
c0011eaa:	e8 ba 65 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	90                   	nop
c0011eb3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011eb6:	c9                   	leave  
c0011eb7:	c3                   	ret    

c0011eb8 <sendKeyToTerminal(unsigned char)>:
c0011eb8:	55                   	push   ebp
c0011eb9:	89 e5                	mov    ebp,esp
c0011ebb:	83 ec 28             	sub    esp,0x28
c0011ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ec1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011ec4:	a1 84 44 02 c0       	mov    eax,ds:0xc0024484
c0011ec9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011ecd:	83 ec 08             	sub    esp,0x8
c0011ed0:	52                   	push   edx
c0011ed1:	50                   	push   eax
c0011ed2:	e8 c3 ba ff ff       	call   c000d99a <VgaText::receiveKey(unsigned char)>
c0011ed7:	83 c4 10             	add    esp,0x10
c0011eda:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011ede:	75 41                	jne    c0011f21 <sendKeyToTerminal(unsigned char)+0x69>
c0011ee0:	e8 b6 69 00 00       	call   c001889b <lockStuff()>
c0011ee5:	a1 60 45 02 c0       	mov    eax,ds:0xc0024560
c0011eea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011eed:	c7 05 60 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024560,0x0
c0011ef7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011efb:	74 1f                	je     c0011f1c <sendKeyToTerminal(unsigned char)+0x64>
c0011efd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011f00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011f03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011f06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f09:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f0c:	83 ec 0c             	sub    esp,0xc
c0011f0f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011f12:	e8 6d 6f 00 00       	call   c0018e84 <unblockTask(ThreadControlBlock*)>
c0011f17:	83 c4 10             	add    esp,0x10
c0011f1a:	eb db                	jmp    c0011ef7 <sendKeyToTerminal(unsigned char)+0x3f>
c0011f1c:	e8 0c 6d 00 00       	call   c0018c2d <unlockStuff()>
c0011f21:	90                   	nop
c0011f22:	c9                   	leave  
c0011f23:	c3                   	ret    

c0011f24 <sendKeyboardToken(KeyboardToken)>:
c0011f24:	55                   	push   ebp
c0011f25:	89 e5                	mov    ebp,esp
c0011f27:	83 ec 18             	sub    esp,0x18
c0011f2a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f30:	0f b7 c0             	movzx  eax,ax
c0011f33:	83 f2 01             	xor    edx,0x1
c0011f36:	88 90 80 45 02 c0    	mov    BYTE PTR [eax-0x3ffdba80],dl
c0011f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f3f:	66 3d 03 02          	cmp    ax,0x203
c0011f43:	75 07                	jne    c0011f4c <sendKeyboardToken(KeyboardToken)+0x28>
c0011f45:	a0 80 46 02 c0       	mov    al,ds:0xc0024680
c0011f4a:	84 c0                	test   al,al
c0011f4c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f50:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f53:	a0 88 49 02 c0       	mov    al,ds:0xc0024988
c0011f58:	38 c2                	cmp    dl,al
c0011f5a:	74 1c                	je     c0011f78 <sendKeyboardToken(KeyboardToken)+0x54>
c0011f5c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f5f:	a2 88 49 02 c0       	mov    ds:0xc0024988,al
c0011f64:	a0 88 49 02 c0       	mov    al,ds:0xc0024988
c0011f69:	0f b6 c0             	movzx  eax,al
c0011f6c:	83 ec 0c             	sub    esp,0xc
c0011f6f:	50                   	push   eax
c0011f70:	e8 93 ac ff ff       	call   c000cc08 <setTerminalScrollLock(bool)>
c0011f75:	83 c4 10             	add    esp,0x10
c0011f78:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011f7b:	84 c0                	test   al,al
c0011f7d:	0f 84 ae 00 00 00    	je     c0012031 <sendKeyboardToken(KeyboardToken)+0x10d>
c0011f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f86:	66 3d 10 03          	cmp    ax,0x310
c0011f8a:	75 06                	jne    c0011f92 <sendKeyboardToken(KeyboardToken)+0x6e>
c0011f8c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f95:	66 3d 11 03          	cmp    ax,0x311
c0011f99:	75 06                	jne    c0011fa1 <sendKeyboardToken(KeyboardToken)+0x7d>
c0011f9b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa4:	66 3d 12 03          	cmp    ax,0x312
c0011fa8:	75 06                	jne    c0011fb0 <sendKeyboardToken(KeyboardToken)+0x8c>
c0011faa:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb3:	66 3d 13 03          	cmp    ax,0x313
c0011fb7:	75 06                	jne    c0011fbf <sendKeyboardToken(KeyboardToken)+0x9b>
c0011fb9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fc2:	66 3d 14 03          	cmp    ax,0x314
c0011fc6:	75 06                	jne    c0011fce <sendKeyboardToken(KeyboardToken)+0xaa>
c0011fc8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fd1:	66 3d 15 03          	cmp    ax,0x315
c0011fd5:	75 06                	jne    c0011fdd <sendKeyboardToken(KeyboardToken)+0xb9>
c0011fd7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fe0:	66 3d 16 03          	cmp    ax,0x316
c0011fe4:	75 06                	jne    c0011fec <sendKeyboardToken(KeyboardToken)+0xc8>
c0011fe6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fef:	66 3d 17 03          	cmp    ax,0x317
c0011ff3:	75 06                	jne    c0011ffb <sendKeyboardToken(KeyboardToken)+0xd7>
c0011ff5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ffe:	66 3d 18 03          	cmp    ax,0x318
c0012002:	75 06                	jne    c001200a <sendKeyboardToken(KeyboardToken)+0xe6>
c0012004:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001200a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001200d:	66 3d 19 03          	cmp    ax,0x319
c0012011:	75 06                	jne    c0012019 <sendKeyboardToken(KeyboardToken)+0xf5>
c0012013:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001201c:	66 3d 1a 03          	cmp    ax,0x31a
c0012020:	0f 85 c9 00 00 00    	jne    c00120ef <sendKeyboardToken(KeyboardToken)+0x1cb>
c0012026:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001202c:	e9 be 00 00 00       	jmp    c00120ef <sendKeyboardToken(KeyboardToken)+0x1cb>
c0012031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012034:	66 3d 10 03          	cmp    ax,0x310
c0012038:	75 0a                	jne    c0012044 <sendKeyboardToken(KeyboardToken)+0x120>
c001203a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012040:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012047:	66 3d 11 03          	cmp    ax,0x311
c001204b:	75 0a                	jne    c0012057 <sendKeyboardToken(KeyboardToken)+0x133>
c001204d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012053:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001205a:	66 3d 12 03          	cmp    ax,0x312
c001205e:	75 0a                	jne    c001206a <sendKeyboardToken(KeyboardToken)+0x146>
c0012060:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012066:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001206a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001206d:	66 3d 13 03          	cmp    ax,0x313
c0012071:	75 0a                	jne    c001207d <sendKeyboardToken(KeyboardToken)+0x159>
c0012073:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012079:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001207d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012080:	66 3d 14 03          	cmp    ax,0x314
c0012084:	75 0a                	jne    c0012090 <sendKeyboardToken(KeyboardToken)+0x16c>
c0012086:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001208c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012093:	66 3d 15 03          	cmp    ax,0x315
c0012097:	75 0a                	jne    c00120a3 <sendKeyboardToken(KeyboardToken)+0x17f>
c0012099:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001209f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a6:	66 3d 16 03          	cmp    ax,0x316
c00120aa:	75 0a                	jne    c00120b6 <sendKeyboardToken(KeyboardToken)+0x192>
c00120ac:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00120b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b9:	66 3d 17 03          	cmp    ax,0x317
c00120bd:	75 0a                	jne    c00120c9 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00120bf:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00120c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120cc:	66 3d 18 03          	cmp    ax,0x318
c00120d0:	75 0a                	jne    c00120dc <sendKeyboardToken(KeyboardToken)+0x1b8>
c00120d2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00120d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120df:	66 3d 19 03          	cmp    ax,0x319
c00120e3:	75 0a                	jne    c00120ef <sendKeyboardToken(KeyboardToken)+0x1cb>
c00120e5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00120eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f2:	66 3d 00 02          	cmp    ax,0x200
c00120f6:	75 2a                	jne    c0012122 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00120f8:	a0 80 49 02 c0       	mov    al,ds:0xc0024980
c00120fd:	83 f0 01             	xor    eax,0x1
c0012100:	84 c0                	test   al,al
c0012102:	74 1e                	je     c0012122 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0012104:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0012109:	6a 01                	push   0x1
c001210b:	6a 00                	push   0x0
c001210d:	68 46 1e 01 c0       	push   0xc0011e46
c0012112:	50                   	push   eax
c0012113:	e8 86 68 00 00       	call   c001899e <Process::createThread(void (*)(void*), void*, int)>
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	c6 05 80 49 02 c0 01 	mov    BYTE PTR ds:0xc0024980,0x1
c0012122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012125:	66 3d 1d 03          	cmp    ax,0x31d
c0012129:	75 06                	jne    c0012131 <sendKeyboardToken(KeyboardToken)+0x20d>
c001212b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012134:	66 3d 1c 03          	cmp    ax,0x31c
c0012138:	75 06                	jne    c0012140 <sendKeyboardToken(KeyboardToken)+0x21c>
c001213a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012143:	66 3d 1b 03          	cmp    ax,0x31b
c0012147:	75 06                	jne    c001214f <sendKeyboardToken(KeyboardToken)+0x22b>
c0012149:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001214f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012152:	66 3d 1e 03          	cmp    ax,0x31e
c0012156:	75 06                	jne    c001215e <sendKeyboardToken(KeyboardToken)+0x23a>
c0012158:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001215e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012161:	66 3d 1f 03          	cmp    ax,0x31f
c0012165:	75 06                	jne    c001216d <sendKeyboardToken(KeyboardToken)+0x249>
c0012167:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001216d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012170:	66 3d 1a 03          	cmp    ax,0x31a
c0012174:	75 06                	jne    c001217c <sendKeyboardToken(KeyboardToken)+0x258>
c0012176:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001217c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0012180:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012183:	83 f0 01             	xor    eax,0x1
c0012186:	84 c0                	test   al,al
c0012188:	74 77                	je     c0012201 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001218a:	a0 81 46 02 c0       	mov    al,ds:0xc0024681
c001218f:	84 c0                	test   al,al
c0012191:	74 41                	je     c00121d4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0012193:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012197:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001219b:	74 2b                	je     c00121c8 <sendKeyboardToken(KeyboardToken)+0x2a4>
c001219d:	8b 15 84 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024984
c00121a3:	89 d0                	mov    eax,edx
c00121a5:	c1 e0 02             	shl    eax,0x2
c00121a8:	01 d0                	add    eax,edx
c00121aa:	01 c0                	add    eax,eax
c00121ac:	a3 84 49 02 c0       	mov    ds:0xc0024984,eax
c00121b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b4:	0f b7 c0             	movzx  eax,ax
c00121b7:	8d 50 d0             	lea    edx,[eax-0x30]
c00121ba:	a1 84 49 02 c0       	mov    eax,ds:0xc0024984
c00121bf:	01 d0                	add    eax,edx
c00121c1:	a3 84 49 02 c0       	mov    ds:0xc0024984,eax
c00121c6:	eb 6d                	jmp    c0012235 <sendKeyboardToken(KeyboardToken)+0x311>
c00121c8:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00121d2:	eb 61                	jmp    c0012235 <sendKeyboardToken(KeyboardToken)+0x311>
c00121d4:	a1 84 49 02 c0       	mov    eax,ds:0xc0024984
c00121d9:	85 c0                	test   eax,eax
c00121db:	74 18                	je     c00121f5 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00121dd:	a1 84 49 02 c0       	mov    eax,ds:0xc0024984
c00121e2:	0f b6 c0             	movzx  eax,al
c00121e5:	83 ec 0c             	sub    esp,0xc
c00121e8:	50                   	push   eax
c00121e9:	e8 ca fc ff ff       	call   c0011eb8 <sendKeyToTerminal(unsigned char)>
c00121ee:	83 c4 10             	add    esp,0x10
c00121f1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121f5:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00121ff:	eb 34                	jmp    c0012235 <sendKeyboardToken(KeyboardToken)+0x311>
c0012201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012204:	66 3d 01 01          	cmp    ax,0x101
c0012208:	75 2b                	jne    c0012235 <sendKeyboardToken(KeyboardToken)+0x311>
c001220a:	a1 84 49 02 c0       	mov    eax,ds:0xc0024984
c001220f:	85 c0                	test   eax,eax
c0012211:	74 18                	je     c001222b <sendKeyboardToken(KeyboardToken)+0x307>
c0012213:	a1 84 49 02 c0       	mov    eax,ds:0xc0024984
c0012218:	0f b6 c0             	movzx  eax,al
c001221b:	83 ec 0c             	sub    esp,0xc
c001221e:	50                   	push   eax
c001221f:	e8 94 fc ff ff       	call   c0011eb8 <sendKeyToTerminal(unsigned char)>
c0012224:	83 c4 10             	add    esp,0x10
c0012227:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001222b:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0012235:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012238:	83 f0 01             	xor    eax,0x1
c001223b:	84 c0                	test   al,al
c001223d:	74 4c                	je     c001228b <sendKeyboardToken(KeyboardToken)+0x367>
c001223f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012242:	83 f0 01             	xor    eax,0x1
c0012245:	84 c0                	test   al,al
c0012247:	74 42                	je     c001228b <sendKeyboardToken(KeyboardToken)+0x367>
c0012249:	a0 80 46 02 c0       	mov    al,ds:0xc0024680
c001224e:	83 f0 01             	xor    eax,0x1
c0012251:	84 c0                	test   al,al
c0012253:	74 36                	je     c001228b <sendKeyboardToken(KeyboardToken)+0x367>
c0012255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012258:	66 83 f8 1f          	cmp    ax,0x1f
c001225c:	76 09                	jbe    c0012267 <sendKeyboardToken(KeyboardToken)+0x343>
c001225e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012261:	66 83 f8 7e          	cmp    ax,0x7e
c0012265:	76 12                	jbe    c0012279 <sendKeyboardToken(KeyboardToken)+0x355>
c0012267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001226a:	66 83 f8 0a          	cmp    ax,0xa
c001226e:	74 09                	je     c0012279 <sendKeyboardToken(KeyboardToken)+0x355>
c0012270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012273:	66 83 f8 08          	cmp    ax,0x8
c0012277:	75 12                	jne    c001228b <sendKeyboardToken(KeyboardToken)+0x367>
c0012279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001227c:	0f b6 c0             	movzx  eax,al
c001227f:	83 ec 0c             	sub    esp,0xc
c0012282:	50                   	push   eax
c0012283:	e8 30 fc ff ff       	call   c0011eb8 <sendKeyToTerminal(unsigned char)>
c0012288:	83 c4 10             	add    esp,0x10
c001228b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001228e:	83 f0 01             	xor    eax,0x1
c0012291:	84 c0                	test   al,al
c0012293:	74 4f                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0012295:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012298:	83 f0 01             	xor    eax,0x1
c001229b:	84 c0                	test   al,al
c001229d:	74 45                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001229f:	a0 80 46 02 c0       	mov    al,ds:0xc0024680
c00122a4:	84 c0                	test   al,al
c00122a6:	74 3c                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00122a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ab:	66 83 f8 3f          	cmp    ax,0x3f
c00122af:	76 33                	jbe    c00122e4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00122b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122b4:	66 83 f8 7f          	cmp    ax,0x7f
c00122b8:	77 2a                	ja     c00122e4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00122ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122bd:	88 c2                	mov    dl,al
c00122bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122c2:	66 83 f8 5f          	cmp    ax,0x5f
c00122c6:	76 04                	jbe    c00122cc <sendKeyboardToken(KeyboardToken)+0x3a8>
c00122c8:	b0 20                	mov    al,0x20
c00122ca:	eb 02                	jmp    c00122ce <sendKeyboardToken(KeyboardToken)+0x3aa>
c00122cc:	b0 00                	mov    al,0x0
c00122ce:	29 c2                	sub    edx,eax
c00122d0:	88 d0                	mov    al,dl
c00122d2:	83 e8 40             	sub    eax,0x40
c00122d5:	0f b6 c0             	movzx  eax,al
c00122d8:	83 ec 0c             	sub    esp,0xc
c00122db:	50                   	push   eax
c00122dc:	e8 d7 fb ff ff       	call   c0011eb8 <sendKeyToTerminal(unsigned char)>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122e7:	66 3d 00 03          	cmp    ax,0x300
c00122eb:	75 0f                	jne    c00122fc <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122ed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122f0:	83 f0 01             	xor    eax,0x1
c00122f3:	84 c0                	test   al,al
c00122f5:	74 05                	je     c00122fc <sendKeyboardToken(KeyboardToken)+0x3d8>
c00122f7:	e8 33 b1 ff ff       	call   c000d42f <doTerminalCycle()>
c00122fc:	90                   	nop
c00122fd:	c9                   	leave  
c00122fe:	c3                   	ret    

c00122ff <clearInternalKeybuffer(VgaText*)>:
c00122ff:	55                   	push   ebp
c0012300:	89 e5                	mov    ebp,esp
c0012302:	83 ec 08             	sub    esp,0x8
c0012305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012308:	05 34 11 00 00       	add    eax,0x1134
c001230d:	83 ec 0c             	sub    esp,0xc
c0012310:	50                   	push   eax
c0012311:	e8 ed e3 fe ff       	call   c0000703 <strlen>
c0012316:	83 c4 10             	add    esp,0x10
c0012319:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001231c:	81 c2 34 11 00 00    	add    edx,0x1134
c0012322:	83 ec 04             	sub    esp,0x4
c0012325:	50                   	push   eax
c0012326:	6a 00                	push   0x0
c0012328:	52                   	push   edx
c0012329:	e8 b8 e3 fe ff       	call   c00006e6 <memset>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	90                   	nop
c0012332:	c9                   	leave  
c0012333:	c3                   	ret    

c0012334 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012334:	55                   	push   ebp
c0012335:	89 e5                	mov    ebp,esp
c0012337:	83 ec 18             	sub    esp,0x18
c001233a:	fb                   	sti    
c001233b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012342:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012346:	0f 84 91 00 00 00    	je     c00123dd <readKeyboard(VgaText*, char*, unsigned long)+0xa9>
c001234c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001234f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012355:	84 c0                	test   al,al
c0012357:	75 18                	jne    c0012371 <readKeyboard(VgaText*, char*, unsigned long)+0x3d>
c0012359:	e8 01 65 00 00       	call   c001885f <getIRQNestingLevel()>
c001235e:	83 ec 08             	sub    esp,0x8
c0012361:	50                   	push   eax
c0012362:	68 54 1d 02 c0       	push   0xc0021d54
c0012367:	e8 cd cd ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	eb db                	jmp    c001234c <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0012371:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012374:	8d 50 01             	lea    edx,[eax+0x1]
c0012377:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001237a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001237d:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012383:	88 10                	mov    BYTE PTR [eax],dl
c0012385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012388:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001238e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0012391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012394:	05 34 11 00 00       	add    eax,0x1134
c0012399:	83 ec 0c             	sub    esp,0xc
c001239c:	50                   	push   eax
c001239d:	e8 61 e3 fe ff       	call   c0000703 <strlen>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123a8:	81 c2 34 11 00 00    	add    edx,0x1134
c00123ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c00123b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123b4:	81 c2 34 11 00 00    	add    edx,0x1134
c00123ba:	83 ec 04             	sub    esp,0x4
c00123bd:	50                   	push   eax
c00123be:	51                   	push   ecx
c00123bf:	52                   	push   edx
c00123c0:	e8 b3 e2 fe ff       	call   c0000678 <memmove>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00123cb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00123ce:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00123d2:	0f 85 6a ff ff ff    	jne    c0012342 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00123d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123db:	eb 03                	jmp    c00123e0 <readKeyboard(VgaText*, char*, unsigned long)+0xac>
c00123dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123e0:	c9                   	leave  
c00123e1:	c3                   	ret    

c00123e2 <Keyboard::Keyboard(char const*)>:
c00123e2:	83 ec 0c             	sub    esp,0xc
c00123e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e9:	83 ec 08             	sub    esp,0x8
c00123ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123f0:	50                   	push   eax
c00123f1:	e8 3e e3 ff ff       	call   c0010734 <Device::Device(char const*)>
c00123f6:	83 c4 10             	add    esp,0x10
c00123f9:	ba 88 1d 02 c0       	mov    edx,0xc0021d88
c00123fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012402:	89 10                	mov    DWORD PTR [eax],edx
c0012404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012408:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0012412:	c6 05 64 45 02 c0 01 	mov    BYTE PTR ds:0xc0024564,0x1
c0012419:	90                   	nop
c001241a:	83 c4 0c             	add    esp,0xc
c001241d:	c3                   	ret    

c001241e <Keyboard::~Keyboard()>:
c001241e:	83 ec 0c             	sub    esp,0xc
c0012421:	ba 88 1d 02 c0       	mov    edx,0xc0021d88
c0012426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001242a:	89 10                	mov    DWORD PTR [eax],edx
c001242c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012430:	83 ec 0c             	sub    esp,0xc
c0012433:	50                   	push   eax
c0012434:	e8 ad df ff ff       	call   c00103e6 <Device::~Device()>
c0012439:	83 c4 10             	add    esp,0x10
c001243c:	90                   	nop
c001243d:	83 c4 0c             	add    esp,0xc
c0012440:	c3                   	ret    
c0012441:	90                   	nop

c0012442 <Keyboard::~Keyboard()>:
c0012442:	83 ec 0c             	sub    esp,0xc
c0012445:	83 ec 0c             	sub    esp,0xc
c0012448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001244c:	e8 cd ff ff ff       	call   c001241e <Keyboard::~Keyboard()>
c0012451:	83 c4 10             	add    esp,0x10
c0012454:	83 ec 08             	sub    esp,0x8
c0012457:	68 5c 01 00 00       	push   0x15c
c001245c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012460:	e8 f4 cb ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	83 c4 0c             	add    esp,0xc
c001246b:	c3                   	ret    

c001246c <LogicalDisk::close(int, int, void*)>:
c001246c:	83 c8 ff             	or     eax,0xffffffff
c001246f:	c3                   	ret    

c0012470 <LogicalDisk::~LogicalDisk()>:
c0012470:	83 ec 0c             	sub    esp,0xc
c0012473:	ba 38 1e 02 c0       	mov    edx,0xc0021e38
c0012478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001247c:	89 10                	mov    DWORD PTR [eax],edx
c001247e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012482:	83 ec 0c             	sub    esp,0xc
c0012485:	50                   	push   eax
c0012486:	e8 5b df ff ff       	call   c00103e6 <Device::~Device()>
c001248b:	83 c4 10             	add    esp,0x10
c001248e:	90                   	nop
c001248f:	83 c4 0c             	add    esp,0xc
c0012492:	c3                   	ret    
c0012493:	90                   	nop

c0012494 <LogicalDisk::~LogicalDisk()>:
c0012494:	83 ec 0c             	sub    esp,0xc
c0012497:	83 ec 0c             	sub    esp,0xc
c001249a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001249e:	e8 cd ff ff ff       	call   c0012470 <LogicalDisk::~LogicalDisk()>
c00124a3:	83 c4 10             	add    esp,0x10
c00124a6:	83 ec 08             	sub    esp,0x8
c00124a9:	68 74 01 00 00       	push   0x174
c00124ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124b2:	e8 a2 cb ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	83 c4 0c             	add    esp,0xc
c00124bd:	c3                   	ret    

c00124be <LogicalDisk::open(int, int, void*)>:
c00124be:	83 ec 18             	sub    esp,0x18
c00124c1:	68 b4 1d 02 c0       	push   0xc0021db4
c00124c6:	e8 55 34 00 00       	call   c0015920 <Krnl::panic(char const*)>
c00124cb:	83 c8 ff             	or     eax,0xffffffff
c00124ce:	83 c4 1c             	add    esp,0x1c
c00124d1:	c3                   	ret    

c00124d2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00124d2:	53                   	push   ebx
c00124d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124df:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00124e5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00124eb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00124f1:	77 10                	ja     c0012503 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00124f3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00124f9:	89 d3                	mov    ebx,edx
c00124fb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0012501:	72 05                	jb     c0012508 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0012503:	83 c8 ff             	or     eax,0xffffffff
c0012506:	89 c2                	mov    edx,eax
c0012508:	5b                   	pop    ebx
c0012509:	c3                   	ret    

c001250a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001250a:	56                   	push   esi
c001250b:	83 c8 ff             	or     eax,0xffffffff
c001250e:	53                   	push   ebx
c001250f:	89 c2                	mov    edx,eax
c0012511:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012515:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012519:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001251d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012523:	77 27                	ja     c001254c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012525:	89 d8                	mov    eax,ebx
c0012527:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001252d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012533:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012538:	89 c2                	mov    edx,eax
c001253a:	73 10                	jae    c001254c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001253c:	89 c8                	mov    eax,ecx
c001253e:	89 da                	mov    edx,ebx
c0012540:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012546:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001254c:	5b                   	pop    ebx
c001254d:	5e                   	pop    esi
c001254e:	c3                   	ret    
c001254f:	90                   	nop

c0012550 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012550:	83 ec 1c             	sub    esp,0x1c
c0012553:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012557:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001255b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001255f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012567:	89 04 24             	mov    DWORD PTR [esp],eax
c001256a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001256e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012576:	83 ec 08             	sub    esp,0x8
c0012579:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001257d:	50                   	push   eax
c001257e:	e8 b1 e1 ff ff       	call   c0010734 <Device::Device(char const*)>
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	ba 38 1e 02 c0       	mov    edx,0xc0021e38
c001258b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001258f:	89 10                	mov    DWORD PTR [eax],edx
c0012591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012595:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001259c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125ab:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00125b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125c1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00125c7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00125cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00125d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125d8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00125de:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00125e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00125ec:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00125f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125f6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012600:	90                   	nop
c0012601:	83 c4 1c             	add    esp,0x1c
c0012604:	c3                   	ret    
c0012605:	90                   	nop

c0012606 <LogicalDisk::assignDriveLetter()>:
c0012606:	55                   	push   ebp
c0012607:	57                   	push   edi
c0012608:	56                   	push   esi
c0012609:	53                   	push   ebx
c001260a:	83 ec 14             	sub    esp,0x14
c001260d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012611:	8b 3d a0 49 02 c0    	mov    edi,DWORD PTR ds:0xc00249a0
c0012617:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001261d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0012621:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012627:	8b 3d a4 49 02 c0    	mov    edi,DWORD PTR ds:0xc00249a4
c001262d:	3c 01                	cmp    al,0x1
c001262f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012633:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012637:	19 c0                	sbb    eax,eax
c0012639:	83 e0 02             	and    eax,0x2
c001263c:	83 c0 41             	add    eax,0x41
c001263f:	0f be e8             	movsx  ebp,al
c0012642:	3c 43                	cmp    al,0x43
c0012644:	75 10                	jne    c0012656 <LogicalDisk::assignDriveLetter()+0x50>
c0012646:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001264d:	75 5d                	jne    c00126ac <LogicalDisk::assignDriveLetter()+0xa6>
c001264f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012654:	75 56                	jne    c00126ac <LogicalDisk::assignDriveLetter()+0xa6>
c0012656:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012659:	ba 01 00 00 00       	mov    edx,0x1
c001265e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012662:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012666:	d3 e2                	shl    edx,cl
c0012668:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001266c:	89 d7                	mov    edi,edx
c001266e:	89 d6                	mov    esi,edx
c0012670:	c1 ff 1f             	sar    edi,0x1f
c0012673:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012677:	21 f9                	and    ecx,edi
c0012679:	09 d1                	or     ecx,edx
c001267b:	75 2f                	jne    c00126ac <LogicalDisk::assignDriveLetter()+0xa6>
c001267d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012681:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012685:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001268b:	09 f2                	or     edx,esi
c001268d:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012693:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012697:	09 fa                	or     edx,edi
c0012699:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001269d:	89 15 a4 49 02 c0    	mov    DWORD PTR ds:0xc00249a4,edx
c00126a3:	89 1c bd c0 49 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb640],ebx
c00126aa:	eb 08                	jmp    c00126b4 <LogicalDisk::assignDriveLetter()+0xae>
c00126ac:	45                   	inc    ebp
c00126ad:	40                   	inc    eax
c00126ae:	3c 5b                	cmp    al,0x5b
c00126b0:	75 90                	jne    c0012642 <LogicalDisk::assignDriveLetter()+0x3c>
c00126b2:	31 c0                	xor    eax,eax
c00126b4:	83 c4 14             	add    esp,0x14
c00126b7:	5b                   	pop    ebx
c00126b8:	5e                   	pop    esi
c00126b9:	5f                   	pop    edi
c00126ba:	5d                   	pop    ebp
c00126bb:	c3                   	ret    

c00126bc <LogicalDisk::mount()>:
c00126bc:	56                   	push   esi
c00126bd:	53                   	push   ebx
c00126be:	51                   	push   ecx
c00126bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126c3:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c00126c9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00126d3:	85 db                	test   ebx,ebx
c00126d5:	74 50                	je     c0012727 <LogicalDisk::mount()+0x6b>
c00126d7:	e8 83 61 00 00       	call   c001885f <getIRQNestingLevel()>
c00126dc:	52                   	push   edx
c00126dd:	52                   	push   edx
c00126de:	50                   	push   eax
c00126df:	68 d8 1d 02 c0       	push   0xc0021dd8
c00126e4:	e8 50 ca ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00126e9:	83 c4 0c             	add    esp,0xc
c00126ec:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00126f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00126f5:	83 e8 41             	sub    eax,0x41
c00126f8:	50                   	push   eax
c00126f9:	56                   	push   esi
c00126fa:	53                   	push   ebx
c00126fb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126fe:	83 c4 10             	add    esp,0x10
c0012701:	84 c0                	test   al,al
c0012703:	74 08                	je     c001270d <LogicalDisk::mount()+0x51>
c0012705:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001270b:	eb 1c                	jmp    c0012729 <LogicalDisk::mount()+0x6d>
c001270d:	e8 4d 61 00 00       	call   c001885f <getIRQNestingLevel()>
c0012712:	51                   	push   ecx
c0012713:	51                   	push   ecx
c0012714:	50                   	push   eax
c0012715:	68 f3 1d 02 c0       	push   0xc0021df3
c001271a:	e8 1a ca ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001271f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012722:	83 c4 10             	add    esp,0x10
c0012725:	eb ac                	jmp    c00126d3 <LogicalDisk::mount()+0x17>
c0012727:	31 c0                	xor    eax,eax
c0012729:	5a                   	pop    edx
c001272a:	5b                   	pop    ebx
c001272b:	5e                   	pop    esi
c001272c:	c3                   	ret    
c001272d:	90                   	nop

c001272e <LogicalDisk::unmount()>:
c001272e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012732:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001273c:	c3                   	ret    
c001273d:	90                   	nop

c001273e <LogicalDisk::unassignDriveLetter()>:
c001273e:	57                   	push   edi
c001273f:	56                   	push   esi
c0012740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012744:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001274b:	84 c9                	test   cl,cl
c001274d:	75 0f                	jne    c001275e <LogicalDisk::unassignDriveLetter()+0x20>
c001274f:	c7 44 24 0c 0e 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e0e
c0012757:	5e                   	pop    esi
c0012758:	5f                   	pop    edi
c0012759:	e9 c2 31 00 00       	jmp    c0015920 <Krnl::panic(char const*)>
c001275e:	83 e9 41             	sub    ecx,0x41
c0012761:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012768:	b8 01 00 00 00       	mov    eax,0x1
c001276d:	c7 04 8d c0 49 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb640],0x0
c0012778:	d3 e0                	shl    eax,cl
c001277a:	89 c7                	mov    edi,eax
c001277c:	f7 d0                	not    eax
c001277e:	c1 ff 1f             	sar    edi,0x1f
c0012781:	21 05 a0 49 02 c0    	and    DWORD PTR ds:0xc00249a0,eax
c0012787:	89 fe                	mov    esi,edi
c0012789:	f7 d6                	not    esi
c001278b:	21 35 a4 49 02 c0    	and    DWORD PTR ds:0xc00249a4,esi
c0012791:	5e                   	pop    esi
c0012792:	5f                   	pop    edi
c0012793:	c3                   	ret    

c0012794 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012794:	57                   	push   edi
c0012795:	56                   	push   esi
c0012796:	53                   	push   ebx
c0012797:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001279b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001279f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127a7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127ad:	77 41                	ja     c00127f0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00127af:	99                   	cdq    
c00127b0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127b6:	01 c8                	add    eax,ecx
c00127b8:	11 da                	adc    edx,ebx
c00127ba:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127c0:	19 d7                	sbb    edi,edx
c00127c2:	72 33                	jb     c00127f7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00127c4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00127ca:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127d0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127d4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127d8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00127de:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00127e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00127e8:	5b                   	pop    ebx
c00127e9:	5e                   	pop    esi
c00127ea:	5f                   	pop    edi
c00127eb:	e9 9a 09 00 00       	jmp    c001318a <VCache::read(unsigned long long, int, void*)>
c00127f0:	b8 05 00 00 00       	mov    eax,0x5
c00127f5:	eb 05                	jmp    c00127fc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00127f7:	b8 07 00 00 00       	mov    eax,0x7
c00127fc:	5b                   	pop    ebx
c00127fd:	5e                   	pop    esi
c00127fe:	5f                   	pop    edi
c00127ff:	c3                   	ret    

c0012800 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012800:	57                   	push   edi
c0012801:	56                   	push   esi
c0012802:	53                   	push   ebx
c0012803:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012807:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001280b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001280f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012813:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012819:	77 41                	ja     c001285c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001281b:	99                   	cdq    
c001281c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012822:	01 c8                	add    eax,ecx
c0012824:	11 da                	adc    edx,ebx
c0012826:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001282c:	19 d7                	sbb    edi,edx
c001282e:	72 33                	jb     c0012863 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012830:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012836:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001283c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012840:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012844:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001284a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012850:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012854:	5b                   	pop    ebx
c0012855:	5e                   	pop    esi
c0012856:	5f                   	pop    edi
c0012857:	e9 4a 08 00 00       	jmp    c00130a6 <VCache::write(unsigned long long, int, void*)>
c001285c:	b8 05 00 00 00       	mov    eax,0x5
c0012861:	eb 05                	jmp    c0012868 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012863:	b8 07 00 00 00       	mov    eax,0x7
c0012868:	5b                   	pop    ebx
c0012869:	5e                   	pop    esi
c001286a:	5f                   	pop    edi
c001286b:	c3                   	ret    

c001286c <Mouse::Mouse(char const*)>:
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012873:	83 ec 08             	sub    esp,0x8
c0012876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001287a:	50                   	push   eax
c001287b:	e8 b4 de ff ff       	call   c0010734 <Device::Device(char const*)>
c0012880:	83 c4 10             	add    esp,0x10
c0012883:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c0012888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001288c:	89 10                	mov    DWORD PTR [eax],edx
c001288e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012892:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001289c:	90                   	nop
c001289d:	83 c4 0c             	add    esp,0xc
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <Mouse::~Mouse()>:
c00128a2:	83 ec 0c             	sub    esp,0xc
c00128a5:	ba 64 1e 02 c0       	mov    edx,0xc0021e64
c00128aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ae:	89 10                	mov    DWORD PTR [eax],edx
c00128b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	50                   	push   eax
c00128b8:	e8 29 db ff ff       	call   c00103e6 <Device::~Device()>
c00128bd:	83 c4 10             	add    esp,0x10
c00128c0:	90                   	nop
c00128c1:	83 c4 0c             	add    esp,0xc
c00128c4:	c3                   	ret    
c00128c5:	90                   	nop

c00128c6 <Mouse::~Mouse()>:
c00128c6:	83 ec 0c             	sub    esp,0xc
c00128c9:	83 ec 0c             	sub    esp,0xc
c00128cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d0:	e8 cd ff ff ff       	call   c00128a2 <Mouse::~Mouse()>
c00128d5:	83 c4 10             	add    esp,0x10
c00128d8:	83 ec 08             	sub    esp,0x8
c00128db:	68 58 01 00 00       	push   0x158
c00128e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e4:	e8 70 c7 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c00128e9:	83 c4 10             	add    esp,0x10
c00128ec:	83 c4 0c             	add    esp,0xc
c00128ef:	c3                   	ret    

c00128f0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00128f0:	55                   	push   ebp
c00128f1:	57                   	push   edi
c00128f2:	56                   	push   esi
c00128f3:	53                   	push   ebx
c00128f4:	81 ec 28 01 00 00    	sub    esp,0x128
c00128fa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012901:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012908:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001290f:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012916:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001291a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001291e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012925:	e8 fc de ff ff       	call   c0010826 <Device::getName()>
c001292a:	5a                   	pop    edx
c001292b:	59                   	pop    ecx
c001292c:	50                   	push   eax
c001292d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012931:	55                   	push   ebp
c0012932:	e8 4e de fe ff       	call   c0000785 <strcpy>
c0012937:	5b                   	pop    ebx
c0012938:	58                   	pop    eax
c0012939:	68 88 1e 02 c0       	push   0xc0021e88
c001293e:	55                   	push   ebp
c001293f:	e8 f8 de fe ff       	call   c000083c <strcat>
c0012944:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001294b:	e8 fa c6 ff ff       	call   c000f04a <operator new(unsigned long)>
c0012950:	83 c4 0c             	add    esp,0xc
c0012953:	89 c3                	mov    ebx,eax
c0012955:	57                   	push   edi
c0012956:	56                   	push   esi
c0012957:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001295b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001295f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012966:	55                   	push   ebp
c0012967:	50                   	push   eax
c0012968:	e8 e3 fb ff ff       	call   c0012550 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001296d:	83 c4 14             	add    esp,0x14
c0012970:	53                   	push   ebx
c0012971:	e8 90 fc ff ff       	call   c0012606 <LogicalDisk::assignDriveLetter()>
c0012976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012979:	e8 3e fd ff ff       	call   c00126bc <LogicalDisk::mount()>
c001297e:	58                   	pop    eax
c001297f:	5a                   	pop    edx
c0012980:	53                   	push   ebx
c0012981:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012988:	e8 b7 db ff ff       	call   c0010544 <Device::addChild(Device*)>
c001298d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012993:	5b                   	pop    ebx
c0012994:	5e                   	pop    esi
c0012995:	5f                   	pop    edi
c0012996:	5d                   	pop    ebp
c0012997:	c3                   	ret    

c0012998 <createPartitionsForDisk(PhysicalDisk*)>:
c0012998:	55                   	push   ebp
c0012999:	57                   	push   edi
c001299a:	56                   	push   esi
c001299b:	53                   	push   ebx
c001299c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00129a2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00129a9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00129af:	3d 00 02 00 00       	cmp    eax,0x200
c00129b4:	74 27                	je     c00129dd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00129b6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00129bc:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00129c2:	83 ec 10             	sub    esp,0x10
c00129c5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00129c9:	99                   	cdq    
c00129ca:	c1 e6 0a             	shl    esi,0xa
c00129cd:	52                   	push   edx
c00129ce:	89 fd                	mov    ebp,edi
c00129d0:	50                   	push   eax
c00129d1:	55                   	push   ebp
c00129d2:	56                   	push   esi
c00129d3:	e8 24 c8 00 00       	call   c001f1fc <__udivdi3>
c00129d8:	e9 b1 00 00 00       	jmp    c0012a8e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129e2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00129e6:	56                   	push   esi
c00129e7:	6a 01                	push   0x1
c00129e9:	6a 00                	push   0x0
c00129eb:	6a 00                	push   0x0
c00129ed:	53                   	push   ebx
c00129ee:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129f1:	83 c4 20             	add    esp,0x20
c00129f4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00129fc:	75 0a                	jne    c0012a08 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00129fe:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012a06:	74 2c                	je     c0012a34 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012a08:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a0e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a14:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a1a:	83 ec 10             	sub    esp,0x10
c0012a1d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a21:	89 f7                	mov    edi,esi
c0012a23:	c1 e0 0a             	shl    eax,0xa
c0012a26:	c1 ff 1f             	sar    edi,0x1f
c0012a29:	57                   	push   edi
c0012a2a:	56                   	push   esi
c0012a2b:	52                   	push   edx
c0012a2c:	50                   	push   eax
c0012a2d:	e8 ca c7 00 00       	call   c001f1fc <__udivdi3>
c0012a32:	eb 5a                	jmp    c0012a8e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a34:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012a3b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012a42:	83 e1 7f             	and    ecx,0x7f
c0012a45:	83 e0 7f             	and    eax,0x7f
c0012a48:	01 c1                	add    ecx,eax
c0012a4a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a51:	83 e0 7f             	and    eax,0x7f
c0012a54:	01 c1                	add    ecx,eax
c0012a56:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a5d:	83 e0 7f             	and    eax,0x7f
c0012a60:	00 c1                	add    cl,al
c0012a62:	74 41                	je     c0012aa5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a64:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a6a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a70:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a76:	83 ec 10             	sub    esp,0x10
c0012a79:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a7d:	89 f7                	mov    edi,esi
c0012a7f:	c1 e0 0a             	shl    eax,0xa
c0012a82:	c1 ff 1f             	sar    edi,0x1f
c0012a85:	57                   	push   edi
c0012a86:	56                   	push   esi
c0012a87:	52                   	push   edx
c0012a88:	50                   	push   eax
c0012a89:	e8 6e c7 00 00       	call   c001f1fc <__udivdi3>
c0012a8e:	83 c4 14             	add    esp,0x14
c0012a91:	52                   	push   edx
c0012a92:	50                   	push   eax
c0012a93:	6a 00                	push   0x0
c0012a95:	6a 00                	push   0x0
c0012a97:	53                   	push   ebx
c0012a98:	e8 53 fe ff ff       	call   c00128f0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a9d:	83 c4 20             	add    esp,0x20
c0012aa0:	e9 79 01 00 00       	jmp    c0012c1e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012aa5:	89 f0                	mov    eax,esi
c0012aa7:	31 f6                	xor    esi,esi
c0012aa9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012ab0:	75 02                	jne    c0012ab4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012ab2:	89 f1                	mov    ecx,esi
c0012ab4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012abb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012ac2:	c1 e2 08             	shl    edx,0x8
c0012ac5:	c1 e7 10             	shl    edi,0x10
c0012ac8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012ad0:	09 fa                	or     edx,edi
c0012ad2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012ada:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0012ae1:	83 c0 10             	add    eax,0x10
c0012ae4:	09 fa                	or     edx,edi
c0012ae6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012aed:	c1 e7 18             	shl    edi,0x18
c0012af0:	09 fa                	or     edx,edi
c0012af2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012af9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012afd:	c1 e7 10             	shl    edi,0x10
c0012b00:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012b07:	c1 e2 08             	shl    edx,0x8
c0012b0a:	09 fa                	or     edx,edi
c0012b0c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012b13:	09 fa                	or     edx,edi
c0012b15:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012b1c:	c1 e7 18             	shl    edi,0x18
c0012b1f:	09 fa                	or     edx,edi
c0012b21:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012b25:	46                   	inc    esi
c0012b26:	83 fe 04             	cmp    esi,0x4
c0012b29:	0f 85 7a ff ff ff    	jne    c0012aa9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b33:	83 f0 01             	xor    eax,0x1
c0012b36:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012b3a:	75 57                	jne    c0012b93 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b40:	83 f0 01             	xor    eax,0x1
c0012b43:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012b47:	75 4a                	jne    c0012b93 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b49:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b4d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b55:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b5d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b63:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b69:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b6f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b73:	89 f7                	mov    edi,esi
c0012b75:	c1 e0 0a             	shl    eax,0xa
c0012b78:	c1 ff 1f             	sar    edi,0x1f
c0012b7b:	57                   	push   edi
c0012b7c:	56                   	push   esi
c0012b7d:	52                   	push   edx
c0012b7e:	50                   	push   eax
c0012b7f:	e8 78 c6 00 00       	call   c001f1fc <__udivdi3>
c0012b84:	83 c4 10             	add    esp,0x10
c0012b87:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b8b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012b8f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012b93:	84 c9                	test   cl,cl
c0012b95:	74 53                	je     c0012bea <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012b97:	0f b6 c9             	movzx  ecx,cl
c0012b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012ba2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012ba6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012baa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bb2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012bb6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bca:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012bce:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012bd2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012bd6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012bda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bde:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012be2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012be6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012bea:	31 ed                	xor    ebp,ebp
c0012bec:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012bf0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012bf4:	89 f8                	mov    eax,edi
c0012bf6:	09 f0                	or     eax,esi
c0012bf8:	74 1e                	je     c0012c18 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012bfa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012bfe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012c02:	89 d1                	mov    ecx,edx
c0012c04:	09 c1                	or     ecx,eax
c0012c06:	74 10                	je     c0012c18 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c08:	83 ec 0c             	sub    esp,0xc
c0012c0b:	57                   	push   edi
c0012c0c:	56                   	push   esi
c0012c0d:	52                   	push   edx
c0012c0e:	50                   	push   eax
c0012c0f:	53                   	push   ebx
c0012c10:	e8 db fc ff ff       	call   c00128f0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012c15:	83 c4 20             	add    esp,0x20
c0012c18:	45                   	inc    ebp
c0012c19:	83 fd 04             	cmp    ebp,0x4
c0012c1c:	75 ce                	jne    c0012bec <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012c1e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012c24:	5b                   	pop    ebx
c0012c25:	5e                   	pop    esi
c0012c26:	5f                   	pop    edi
c0012c27:	5d                   	pop    ebp
c0012c28:	c3                   	ret    
c0012c29:	90                   	nop

c0012c2a <Timer::Timer(char const*)>:
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c31:	83 ec 08             	sub    esp,0x8
c0012c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c38:	50                   	push   eax
c0012c39:	e8 f6 da ff ff       	call   c0010734 <Device::Device(char const*)>
c0012c3e:	83 c4 10             	add    esp,0x10
c0012c41:	ba 9c 1e 02 c0       	mov    edx,0xc0021e9c
c0012c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4a:	89 10                	mov    DWORD PTR [eax],edx
c0012c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c50:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c5a:	90                   	nop
c0012c5b:	83 c4 0c             	add    esp,0xc
c0012c5e:	c3                   	ret    
c0012c5f:	90                   	nop

c0012c60 <Timer::~Timer()>:
c0012c60:	83 ec 0c             	sub    esp,0xc
c0012c63:	ba 9c 1e 02 c0       	mov    edx,0xc0021e9c
c0012c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6c:	89 10                	mov    DWORD PTR [eax],edx
c0012c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c72:	83 ec 0c             	sub    esp,0xc
c0012c75:	50                   	push   eax
c0012c76:	e8 6b d7 ff ff       	call   c00103e6 <Device::~Device()>
c0012c7b:	83 c4 10             	add    esp,0x10
c0012c7e:	90                   	nop
c0012c7f:	83 c4 0c             	add    esp,0xc
c0012c82:	c3                   	ret    
c0012c83:	90                   	nop

c0012c84 <Timer::~Timer()>:
c0012c84:	83 ec 0c             	sub    esp,0xc
c0012c87:	83 ec 0c             	sub    esp,0xc
c0012c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c8e:	e8 cd ff ff ff       	call   c0012c60 <Timer::~Timer()>
c0012c93:	83 c4 10             	add    esp,0x10
c0012c96:	83 ec 08             	sub    esp,0x8
c0012c99:	68 5c 01 00 00       	push   0x15c
c0012c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca2:	e8 b2 c3 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0012ca7:	83 c4 10             	add    esp,0x10
c0012caa:	83 c4 0c             	add    esp,0xc
c0012cad:	c3                   	ret    

c0012cae <Timer::read()>:
c0012cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cb2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012cb8:	c3                   	ret    

c0012cb9 <timerHandler(unsigned long long)>:
c0012cb9:	55                   	push   ebp
c0012cba:	57                   	push   edi
c0012cbb:	56                   	push   esi
c0012cbc:	53                   	push   ebx
c0012cbd:	83 ec 0c             	sub    esp,0xc
c0012cc0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012cc4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012cc8:	01 35 30 4a 02 c0    	add    DWORD PTR ds:0xc0024a30,esi
c0012cce:	11 3d 34 4a 02 c0    	adc    DWORD PTR ds:0xc0024a34,edi
c0012cd4:	80 3d cd 43 02 c0 00 	cmp    BYTE PTR ds:0xc00243cd,0x0
c0012cdb:	0f 84 07 01 00 00    	je     c0012de8 <timerHandler(unsigned long long)+0x12f>
c0012ce1:	e8 b5 5b 00 00       	call   c001889b <lockStuff()>
c0012ce6:	83 ec 0c             	sub    esp,0xc
c0012ce9:	68 fc 57 02 c0       	push   0xc00257fc
c0012cee:	e8 dd cb 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012cf3:	c7 04 24 fc 57 02 c0 	mov    DWORD PTR [esp],0xc00257fc
c0012cfa:	89 c3                	mov    ebx,eax
c0012cfc:	e8 d7 cb 00 00       	call   c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d01:	83 c4 10             	add    esp,0x10
c0012d04:	84 c0                	test   al,al
c0012d06:	74 60                	je     c0012d68 <timerHandler(unsigned long long)+0xaf>
c0012d08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d0e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012d11:	85 c0                	test   eax,eax
c0012d13:	0f 85 91 00 00 00    	jne    c0012daa <timerHandler(unsigned long long)+0xf1>
c0012d19:	e9 be 00 00 00       	jmp    c0012ddc <timerHandler(unsigned long long)+0x123>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	55                   	push   ebp
c0012d22:	e8 5d 61 00 00       	call   c0018e84 <unblockTask(ThreadControlBlock*)>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	39 eb                	cmp    ebx,ebp
c0012d2c:	75 12                	jne    c0012d40 <timerHandler(unsigned long long)+0x87>
c0012d2e:	83 ec 0c             	sub    esp,0xc
c0012d31:	68 fc 57 02 c0       	push   0xc00257fc
c0012d36:	e8 95 cb 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d3b:	89 c3                	mov    ebx,eax
c0012d3d:	83 c4 10             	add    esp,0x10
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	68 fc 57 02 c0       	push   0xc00257fc
c0012d48:	e8 8b cb 00 00       	call   c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	84 c0                	test   al,al
c0012d52:	75 b4                	jne    c0012d08 <timerHandler(unsigned long long)+0x4f>
c0012d54:	83 ec 0c             	sub    esp,0xc
c0012d57:	68 fc 57 02 c0       	push   0xc00257fc
c0012d5c:	e8 6f cb 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d61:	83 c4 10             	add    esp,0x10
c0012d64:	39 d8                	cmp    eax,ebx
c0012d66:	74 a0                	je     c0012d08 <timerHandler(unsigned long long)+0x4f>
c0012d68:	83 ec 0c             	sub    esp,0xc
c0012d6b:	68 fc 57 02 c0       	push   0xc00257fc
c0012d70:	e8 5b cb 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d75:	c7 04 24 fc 57 02 c0 	mov    DWORD PTR [esp],0xc00257fc
c0012d7c:	89 c5                	mov    ebp,eax
c0012d7e:	e8 71 cb 00 00       	call   c001f8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012d83:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012d86:	83 c4 10             	add    esp,0x10
c0012d89:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012d8c:	39 15 30 4a 02 c0    	cmp    DWORD PTR ds:0xc0024a30,edx
c0012d92:	a1 34 4a 02 c0       	mov    eax,ds:0xc0024a34
c0012d97:	19 c8                	sbb    eax,ecx
c0012d99:	73 83                	jae    c0012d1e <timerHandler(unsigned long long)+0x65>
c0012d9b:	50                   	push   eax
c0012d9c:	50                   	push   eax
c0012d9d:	55                   	push   ebp
c0012d9e:	68 fc 57 02 c0       	push   0xc00257fc
c0012da3:	e8 fa cb 00 00       	call   c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012da8:	eb 93                	jmp    c0012d3d <timerHandler(unsigned long long)+0x84>
c0012daa:	80 3d cc 43 02 c0 00 	cmp    BYTE PTR ds:0xc00243cc,0x0
c0012db1:	74 29                	je     c0012ddc <timerHandler(unsigned long long)+0x123>
c0012db3:	39 c6                	cmp    esi,eax
c0012db5:	bb 00 00 00 00       	mov    ebx,0x0
c0012dba:	19 df                	sbb    edi,ebx
c0012dbc:	72 19                	jb     c0012dd7 <timerHandler(unsigned long long)+0x11e>
c0012dbe:	e8 b1 5a 00 00       	call   c0018874 <lockScheduler()>
c0012dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dc8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012dcb:	e8 d8 5d 00 00       	call   c0018ba8 <schedule()>
c0012dd0:	e8 a1 5a 00 00       	call   c0018876 <unlockScheduler()>
c0012dd5:	eb 05                	jmp    c0012ddc <timerHandler(unsigned long long)+0x123>
c0012dd7:	29 f0                	sub    eax,esi
c0012dd9:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012ddc:	83 c4 0c             	add    esp,0xc
c0012ddf:	5b                   	pop    ebx
c0012de0:	5e                   	pop    esi
c0012de1:	5f                   	pop    edi
c0012de2:	5d                   	pop    ebp
c0012de3:	e9 45 5e 00 00       	jmp    c0018c2d <unlockStuff()>
c0012de8:	83 c4 0c             	add    esp,0xc
c0012deb:	5b                   	pop    ebx
c0012dec:	5e                   	pop    esi
c0012ded:	5f                   	pop    edi
c0012dee:	5d                   	pop    ebp
c0012def:	c3                   	ret    

c0012df0 <setupTimer(int)>:
c0012df0:	57                   	push   edi
c0012df1:	56                   	push   esi
c0012df2:	53                   	push   ebx
c0012df3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012df7:	e8 a1 19 00 00       	call   c001479d <getCPUNumber()>
c0012dfc:	85 c0                	test   eax,eax
c0012dfe:	74 32                	je     c0012e32 <setupTimer(int)+0x42>
c0012e00:	83 ec 0c             	sub    esp,0xc
c0012e03:	68 60 01 00 00       	push   0x160
c0012e08:	e8 3d c2 ff ff       	call   c000f04a <operator new(unsigned long)>
c0012e0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e10:	89 c3                	mov    ebx,eax
c0012e12:	e8 7b be 00 00       	call   c001ec92 <APICTimer::APICTimer()>
c0012e17:	6a 00                	push   0x0
c0012e19:	6a 00                	push   0x0
c0012e1b:	56                   	push   esi
c0012e1c:	53                   	push   ebx
c0012e1d:	e8 78 bd 00 00       	call   c001eb9a <APICTimer::open(int, int, void*)>
c0012e22:	83 c4 20             	add    esp,0x20
c0012e25:	e8 76 19 00 00       	call   c00147a0 <thisCPU()>
c0012e2a:	56                   	push   esi
c0012e2b:	56                   	push   esi
c0012e2c:	53                   	push   ebx
c0012e2d:	e9 96 00 00 00       	jmp    c0012ec8 <setupTimer(int)+0xd8>
c0012e32:	e8 69 19 00 00       	call   c00147a0 <thisCPU()>
c0012e37:	83 ec 0c             	sub    esp,0xc
c0012e3a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e40:	e8 e1 d9 ff ff       	call   c0010826 <Device::getName()>
c0012e45:	83 c4 10             	add    esp,0x10
c0012e48:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e4b:	0f 85 87 00 00 00    	jne    c0012ed8 <setupTimer(int)+0xe8>
c0012e51:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0012e56:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e5d:	74 79                	je     c0012ed8 <setupTimer(int)+0xe8>
c0012e5f:	83 ec 0c             	sub    esp,0xc
c0012e62:	68 5c 01 00 00       	push   0x15c
c0012e67:	e8 de c1 ff ff       	call   c000f04a <operator new(unsigned long)>
c0012e6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e6f:	89 c3                	mov    ebx,eax
c0012e71:	e8 6c bf 00 00       	call   c001ede2 <PIT::PIT()>
c0012e76:	59                   	pop    ecx
c0012e77:	5f                   	pop    edi
c0012e78:	53                   	push   ebx
c0012e79:	ff 35 c8 43 02 c0    	push   DWORD PTR ds:0xc00243c8
c0012e7f:	e8 c0 d6 ff ff       	call   c0010544 <Device::addChild(Device*)>
c0012e84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e86:	6a 00                	push   0x0
c0012e88:	6a 00                	push   0x0
c0012e8a:	56                   	push   esi
c0012e8b:	53                   	push   ebx
c0012e8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e8f:	83 c4 14             	add    esp,0x14
c0012e92:	68 60 01 00 00       	push   0x160
c0012e97:	e8 ae c1 ff ff       	call   c000f04a <operator new(unsigned long)>
c0012e9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e9f:	89 c7                	mov    edi,eax
c0012ea1:	e8 ec bd 00 00       	call   c001ec92 <APICTimer::APICTimer()>
c0012ea6:	6a 00                	push   0x0
c0012ea8:	6a 00                	push   0x0
c0012eaa:	56                   	push   esi
c0012eab:	57                   	push   edi
c0012eac:	e8 e9 bc 00 00       	call   c001eb9a <APICTimer::open(int, int, void*)>
c0012eb1:	83 c4 20             	add    esp,0x20
c0012eb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eb6:	6a 00                	push   0x0
c0012eb8:	6a 00                	push   0x0
c0012eba:	6a 00                	push   0x0
c0012ebc:	53                   	push   ebx
c0012ebd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ec0:	e8 db 18 00 00       	call   c00147a0 <thisCPU()>
c0012ec5:	5a                   	pop    edx
c0012ec6:	59                   	pop    ecx
c0012ec7:	57                   	push   edi
c0012ec8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012ece:	e8 71 d6 ff ff       	call   c0010544 <Device::addChild(Device*)>
c0012ed3:	83 c4 10             	add    esp,0x10
c0012ed6:	eb 33                	jmp    c0012f0b <setupTimer(int)+0x11b>
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	68 5c 01 00 00       	push   0x15c
c0012ee0:	e8 65 c1 ff ff       	call   c000f04a <operator new(unsigned long)>
c0012ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ee8:	89 c3                	mov    ebx,eax
c0012eea:	e8 f3 be 00 00       	call   c001ede2 <PIT::PIT()>
c0012eef:	58                   	pop    eax
c0012ef0:	5a                   	pop    edx
c0012ef1:	53                   	push   ebx
c0012ef2:	ff 35 c8 43 02 c0    	push   DWORD PTR ds:0xc00243c8
c0012ef8:	e8 47 d6 ff ff       	call   c0010544 <Device::addChild(Device*)>
c0012efd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012eff:	6a 00                	push   0x0
c0012f01:	6a 00                	push   0x0
c0012f03:	56                   	push   esi
c0012f04:	53                   	push   ebx
c0012f05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f08:	83 c4 20             	add    esp,0x20
c0012f0b:	89 d8                	mov    eax,ebx
c0012f0d:	5b                   	pop    ebx
c0012f0e:	5e                   	pop    esi
c0012f0f:	5f                   	pop    edi
c0012f10:	c3                   	ret    
c0012f11:	90                   	nop

c0012f12 <VCache::VCache(PhysicalDisk*)>:
c0012f12:	53                   	push   ebx
c0012f13:	83 ec 08             	sub    esp,0x8
c0012f16:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c0012f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1f:	89 10                	mov    DWORD PTR [eax],edx
c0012f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f25:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f30:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012f42:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f4d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f54:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f6e:	83 ec 0c             	sub    esp,0xc
c0012f71:	6a 10                	push   0x10
c0012f73:	e8 d2 c0 ff ff       	call   c000f04a <operator new(unsigned long)>
c0012f78:	83 c4 10             	add    esp,0x10
c0012f7b:	89 c3                	mov    ebx,eax
c0012f7d:	83 ec 0c             	sub    esp,0xc
c0012f80:	53                   	push   ebx
c0012f81:	e8 06 5a 00 00       	call   c001898c <Mutex::Mutex()>
c0012f86:	83 c4 10             	add    esp,0x10
c0012f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f98:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9f:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012fa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012faa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fbb:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012fc1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012fc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fcb:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012fce:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd5:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012fd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fdd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012fe3:	c1 e0 06             	shl    eax,0x6
c0012fe6:	83 ec 0c             	sub    esp,0xc
c0012fe9:	50                   	push   eax
c0012fea:	e8 59 90 ff ff       	call   c000c048 <malloc>
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	89 c2                	mov    edx,eax
c0012ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012ffb:	90                   	nop
c0012ffc:	83 c4 08             	add    esp,0x8
c0012fff:	5b                   	pop    ebx
c0013000:	c3                   	ret    
c0013001:	90                   	nop

c0013002 <VCache::writeWriteBuffer()>:
c0013002:	53                   	push   ebx
c0013003:	83 ec 14             	sub    esp,0x14
c0013006:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001300a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001300d:	8b 10                	mov    edx,DWORD PTR [eax]
c001300f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013012:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013015:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013018:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001301b:	50                   	push   eax
c001301c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001301f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013026:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001302d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013031:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013038:	83 c4 28             	add    esp,0x28
c001303b:	5b                   	pop    ebx
c001303c:	c3                   	ret    
c001303d:	90                   	nop

c001303e <VCache::~VCache()>:
c001303e:	83 ec 0c             	sub    esp,0xc
c0013041:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c0013046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304a:	89 10                	mov    DWORD PTR [eax],edx
c001304c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013050:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013053:	84 c0                	test   al,al
c0013055:	74 0f                	je     c0013066 <VCache::~VCache()+0x28>
c0013057:	83 ec 0c             	sub    esp,0xc
c001305a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001305e:	e8 9f ff ff ff       	call   c0013002 <VCache::writeWriteBuffer()>
c0013063:	83 c4 10             	add    esp,0x10
c0013066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001306d:	83 ec 0c             	sub    esp,0xc
c0013070:	50                   	push   eax
c0013071:	e8 e2 8f ff ff       	call   c000c058 <free>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	90                   	nop
c001307a:	83 c4 0c             	add    esp,0xc
c001307d:	c3                   	ret    

c001307e <VCache::~VCache()>:
c001307e:	83 ec 0c             	sub    esp,0xc
c0013081:	83 ec 0c             	sub    esp,0xc
c0013084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013088:	e8 b1 ff ff ff       	call   c001303e <VCache::~VCache()>
c001308d:	83 c4 10             	add    esp,0x10
c0013090:	83 ec 08             	sub    esp,0x8
c0013093:	6a 30                	push   0x30
c0013095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013099:	e8 bb bf ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	83 c4 0c             	add    esp,0xc
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop

c00130a6 <VCache::write(unsigned long long, int, void*)>:
c00130a6:	55                   	push   ebp
c00130a7:	57                   	push   edi
c00130a8:	56                   	push   esi
c00130a9:	53                   	push   ebx
c00130aa:	83 ec 28             	sub    esp,0x28
c00130ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00130b1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00130b5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00130b9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00130bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00130c0:	e8 29 5d 00 00       	call   c0018dee <Semaphore::acquire()>
c00130c5:	83 c4 10             	add    esp,0x10
c00130c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00130cc:	74 66                	je     c0013134 <VCache::write(unsigned long long, int, void*)+0x8e>
c00130ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130d1:	99                   	cdq    
c00130d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00130d6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00130d9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00130dc:	89 c1                	mov    ecx,eax
c00130de:	89 d0                	mov    eax,edx
c00130e0:	31 f1                	xor    ecx,esi
c00130e2:	31 f8                	xor    eax,edi
c00130e4:	89 ca                	mov    edx,ecx
c00130e6:	09 c2                	or     edx,eax
c00130e8:	75 3e                	jne    c0013128 <VCache::write(unsigned long long, int, void*)+0x82>
c00130ea:	83 fd 01             	cmp    ebp,0x1
c00130ed:	75 39                	jne    c0013128 <VCache::write(unsigned long long, int, void*)+0x82>
c00130ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130f8:	51                   	push   ecx
c00130f9:	50                   	push   eax
c00130fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00130fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013102:	0f af c8             	imul   ecx,eax
c0013105:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0013108:	51                   	push   ecx
c0013109:	e8 a2 d5 fe ff       	call   c00006b0 <memcpy>
c001310e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013111:	83 c4 10             	add    esp,0x10
c0013114:	40                   	inc    eax
c0013115:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013118:	83 f8 40             	cmp    eax,0x40
c001311b:	75 57                	jne    c0013174 <VCache::write(unsigned long long, int, void*)+0xce>
c001311d:	83 ec 0c             	sub    esp,0xc
c0013120:	53                   	push   ebx
c0013121:	e8 dc fe ff ff       	call   c0013002 <VCache::writeWriteBuffer()>
c0013126:	eb 34                	jmp    c001315c <VCache::write(unsigned long long, int, void*)+0xb6>
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	53                   	push   ebx
c001312c:	e8 d1 fe ff ff       	call   c0013002 <VCache::writeWriteBuffer()>
c0013131:	83 c4 10             	add    esp,0x10
c0013134:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013137:	83 fd 3f             	cmp    ebp,0x3f
c001313a:	7f 25                	jg     c0013161 <VCache::write(unsigned long long, int, void*)+0xbb>
c001313c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001313f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013142:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013145:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013149:	52                   	push   edx
c001314a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013150:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013154:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013157:	e8 54 d5 fe ff       	call   c00006b0 <memcpy>
c001315c:	83 c4 10             	add    esp,0x10
c001315f:	eb 13                	jmp    c0013174 <VCache::write(unsigned long long, int, void*)+0xce>
c0013161:	83 ec 0c             	sub    esp,0xc
c0013164:	8b 10                	mov    edx,DWORD PTR [eax]
c0013166:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001316a:	55                   	push   ebp
c001316b:	57                   	push   edi
c001316c:	56                   	push   esi
c001316d:	50                   	push   eax
c001316e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013171:	83 c4 20             	add    esp,0x20
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001317a:	e8 f7 61 00 00       	call   c0019376 <Semaphore::release()>
c001317f:	83 c4 2c             	add    esp,0x2c
c0013182:	31 c0                	xor    eax,eax
c0013184:	5b                   	pop    ebx
c0013185:	5e                   	pop    esi
c0013186:	5f                   	pop    edi
c0013187:	5d                   	pop    ebp
c0013188:	c3                   	ret    
c0013189:	90                   	nop

c001318a <VCache::read(unsigned long long, int, void*)>:
c001318a:	57                   	push   edi
c001318b:	56                   	push   esi
c001318c:	53                   	push   ebx
c001318d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013191:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013195:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013199:	83 ec 0c             	sub    esp,0xc
c001319c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001319f:	e8 4a 5c 00 00       	call   c0018dee <Semaphore::acquire()>
c00131a4:	83 c4 10             	add    esp,0x10
c00131a7:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131ab:	74 0c                	je     c00131b9 <VCache::read(unsigned long long, int, void*)+0x2f>
c00131ad:	83 ec 0c             	sub    esp,0xc
c00131b0:	53                   	push   ebx
c00131b1:	e8 4c fe ff ff       	call   c0013002 <VCache::writeWriteBuffer()>
c00131b6:	83 c4 10             	add    esp,0x10
c00131b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131bc:	83 ec 0c             	sub    esp,0xc
c00131bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00131c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131c9:	57                   	push   edi
c00131ca:	56                   	push   esi
c00131cb:	50                   	push   eax
c00131cc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131cf:	83 c4 14             	add    esp,0x14
c00131d2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131d5:	e8 9c 61 00 00       	call   c0019376 <Semaphore::release()>
c00131da:	83 c4 10             	add    esp,0x10
c00131dd:	31 c0                	xor    eax,eax
c00131df:	5b                   	pop    ebx
c00131e0:	5e                   	pop    esi
c00131e1:	5f                   	pop    edi
c00131e2:	c3                   	ret    
c00131e3:	90                   	nop

c00131e4 <Video::putrect(int, int, int, int, unsigned int)>:
c00131e4:	55                   	push   ebp
c00131e5:	57                   	push   edi
c00131e6:	56                   	push   esi
c00131e7:	53                   	push   ebx
c00131e8:	83 ec 1c             	sub    esp,0x1c
c00131eb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00131ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00131f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00131f7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00131fb:	01 e8                	add    eax,ebp
c00131fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013201:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013205:	01 df                	add    edi,ebx
c0013207:	39 fb                	cmp    ebx,edi
c0013209:	7d 1b                	jge    c0013226 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c001320b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001320f:	7d 12                	jge    c0013223 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0013211:	8b 16                	mov    edx,DWORD PTR [esi]
c0013213:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013217:	53                   	push   ebx
c0013218:	55                   	push   ebp
c0013219:	45                   	inc    ebp
c001321a:	56                   	push   esi
c001321b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001321e:	83 c4 10             	add    esp,0x10
c0013221:	eb e8                	jmp    c001320b <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0013223:	43                   	inc    ebx
c0013224:	eb e1                	jmp    c0013207 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013226:	83 c4 1c             	add    esp,0x1c
c0013229:	5b                   	pop    ebx
c001322a:	5e                   	pop    esi
c001322b:	5f                   	pop    edi
c001322c:	5d                   	pop    ebp
c001322d:	c3                   	ret    

c001322e <Video::blit(unsigned int*, int, int, int, int)>:
c001322e:	55                   	push   ebp
c001322f:	57                   	push   edi
c0013230:	56                   	push   esi
c0013231:	53                   	push   ebx
c0013232:	83 ec 1c             	sub    esp,0x1c
c0013235:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013239:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001323d:	85 c0                	test   eax,eax
c001323f:	79 02                	jns    c0013243 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013241:	31 c0                	xor    eax,eax
c0013243:	c1 e0 02             	shl    eax,0x2
c0013246:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001324a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001324e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013252:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013256:	39 d8                	cmp    eax,ebx
c0013258:	7e 49                	jle    c00132a3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001325a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013260:	7c 41                	jl     c00132a3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013262:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013266:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001326a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001326e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013272:	39 f9                	cmp    ecx,edi
c0013274:	7e 22                	jle    c0013298 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013276:	83 c5 04             	add    ebp,0x4
c0013279:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001327f:	7c 14                	jl     c0013295 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013281:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013283:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013286:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001328a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001328e:	56                   	push   esi
c001328f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	47                   	inc    edi
c0013296:	eb d2                	jmp    c001326a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001329c:	43                   	inc    ebx
c001329d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00132a1:	eb ab                	jmp    c001324e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00132a3:	83 c4 1c             	add    esp,0x1c
c00132a6:	5b                   	pop    ebx
c00132a7:	5e                   	pop    esi
c00132a8:	5f                   	pop    edi
c00132a9:	5d                   	pop    ebp
c00132aa:	c3                   	ret    
c00132ab:	90                   	nop

c00132ac <Video::clearScreen(unsigned int)>:
c00132ac:	57                   	push   edi
c00132ad:	56                   	push   esi
c00132ae:	53                   	push   ebx
c00132af:	31 db                	xor    ebx,ebx
c00132b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132b5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00132bb:	7e 1f                	jle    c00132dc <Video::clearScreen(unsigned int)+0x30>
c00132bd:	31 ff                	xor    edi,edi
c00132bf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00132c5:	7e 12                	jle    c00132d9 <Video::clearScreen(unsigned int)+0x2d>
c00132c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00132c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132cd:	53                   	push   ebx
c00132ce:	57                   	push   edi
c00132cf:	47                   	inc    edi
c00132d0:	56                   	push   esi
c00132d1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	eb e6                	jmp    c00132bf <Video::clearScreen(unsigned int)+0x13>
c00132d9:	43                   	inc    ebx
c00132da:	eb d9                	jmp    c00132b5 <Video::clearScreen(unsigned int)+0x9>
c00132dc:	5b                   	pop    ebx
c00132dd:	5e                   	pop    esi
c00132de:	5f                   	pop    edi
c00132df:	c3                   	ret    

c00132e0 <Video::putpixel(int, int, unsigned int)>:
c00132e0:	c7 44 24 04 d4 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ed4
c00132e8:	e9 4c be ff ff       	jmp    c000f139 <Dbg::kprintf(char const*, ...)>
c00132ed:	90                   	nop

c00132ee <Video::Video(char const*)>:
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f5:	83 ec 08             	sub    esp,0x8
c00132f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132fc:	50                   	push   eax
c00132fd:	e8 32 d4 ff ff       	call   c0010734 <Device::Device(char const*)>
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c001330a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001330e:	89 10                	mov    DWORD PTR [eax],edx
c0013310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013314:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001331e:	90                   	nop
c001331f:	83 c4 0c             	add    esp,0xc
c0013322:	c3                   	ret    
c0013323:	90                   	nop

c0013324 <Video::~Video()>:
c0013324:	83 ec 0c             	sub    esp,0xc
c0013327:	ba ec 1e 02 c0       	mov    edx,0xc0021eec
c001332c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013330:	89 10                	mov    DWORD PTR [eax],edx
c0013332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013336:	83 ec 0c             	sub    esp,0xc
c0013339:	50                   	push   eax
c001333a:	e8 a7 d0 ff ff       	call   c00103e6 <Device::~Device()>
c001333f:	83 c4 10             	add    esp,0x10
c0013342:	90                   	nop
c0013343:	83 c4 0c             	add    esp,0xc
c0013346:	c3                   	ret    
c0013347:	90                   	nop

c0013348 <Video::~Video()>:
c0013348:	83 ec 0c             	sub    esp,0xc
c001334b:	83 ec 0c             	sub    esp,0xc
c001334e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013352:	e8 cd ff ff ff       	call   c0013324 <Video::~Video()>
c0013357:	83 c4 10             	add    esp,0x10
c001335a:	83 ec 08             	sub    esp,0x8
c001335d:	68 64 01 00 00       	push   0x164
c0013362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013366:	e8 ee bc ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001336b:	83 c4 10             	add    esp,0x10
c001336e:	83 c4 0c             	add    esp,0xc
c0013371:	c3                   	ret    

c0013372 <Video::isMonochrome()>:
c0013372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013376:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001337c:	c3                   	ret    
c001337d:	90                   	nop

c001337e <Video::getWidth()>:
c001337e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013382:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013388:	c3                   	ret    
c0013389:	90                   	nop

c001338a <Video::getHeight()>:
c001338a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001338e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013396:	55                   	push   ebp
c0013397:	57                   	push   edi
c0013398:	56                   	push   esi
c0013399:	53                   	push   ebx
c001339a:	83 ec 2c             	sub    esp,0x2c
c001339d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00133a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00133a5:	83 f8 01             	cmp    eax,0x1
c00133a8:	19 c9                	sbb    ecx,ecx
c00133aa:	31 db                	xor    ebx,ebx
c00133ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00133b0:	89 cd                	mov    ebp,ecx
c00133b2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00133ba:	f7 d5                	not    ebp
c00133bc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00133c2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00133c6:	01 d8                	add    eax,ebx
c00133c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00133cc:	56                   	push   esi
c00133cd:	e8 b8 ff ff ff       	call   c001338a <Video::getHeight()>
c00133d2:	59                   	pop    ecx
c00133d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00133d7:	7e 70                	jle    c0013449 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00133d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133dd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00133e1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00133e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133ec:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00133f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133f7:	89 f8                	mov    eax,edi
c00133f9:	83 c0 20             	add    eax,0x20
c00133fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013400:	56                   	push   esi
c0013401:	e8 78 ff ff ff       	call   c001337e <Video::getWidth()>
c0013406:	5a                   	pop    edx
c0013407:	39 c7                	cmp    edi,eax
c0013409:	7d 34                	jge    c001343f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001340b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0013410:	74 05                	je     c0013417 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0013412:	8b 06                	mov    eax,DWORD PTR [esi]
c0013414:	55                   	push   ebp
c0013415:	eb 0d                	jmp    c0013424 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0013417:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001341c:	74 12                	je     c0013430 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001341e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013420:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013424:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013428:	57                   	push   edi
c0013429:	56                   	push   esi
c001342a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013434:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013438:	47                   	inc    edi
c0013439:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001343d:	75 c1                	jne    c0013400 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001343f:	43                   	inc    ebx
c0013440:	83 fb 20             	cmp    ebx,0x20
c0013443:	0f 85 79 ff ff ff    	jne    c00133c2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013449:	83 c4 2c             	add    esp,0x2c
c001344c:	5b                   	pop    ebx
c001344d:	5e                   	pop    esi
c001344e:	5f                   	pop    edi
c001344f:	5d                   	pop    ebp
c0013450:	c3                   	ret    
c0013451:	90                   	nop

c0013452 <ACPI::close(int, int, void*)>:
c0013452:	83 ec 1c             	sub    esp,0x1c
c0013455:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001345d:	74 0a                	je     c0013469 <ACPI::close(int, int, void*)+0x17>
c001345f:	b8 00 00 00 00       	mov    eax,0x0
c0013464:	e9 9a 00 00 00       	jmp    c0013503 <ACPI::close(int, int, void*)+0xb1>
c0013469:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001346e:	75 37                	jne    c00134a7 <ACPI::close(int, int, void*)+0x55>
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	68 24 1f 02 c0       	push   0xc0021f24
c0013478:	e8 bc bc ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001347d:	83 c4 10             	add    esp,0x10
c0013480:	a1 48 4a 02 c0       	mov    eax,ds:0xc0024a48
c0013485:	85 c0                	test   eax,eax
c0013487:	74 07                	je     c0013490 <ACPI::close(int, int, void*)+0x3e>
c0013489:	a1 48 4a 02 c0       	mov    eax,ds:0xc0024a48
c001348e:	ff d0                	call   eax
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	68 f8 1f 02 c0       	push   0xc0021ff8
c0013498:	e8 83 24 00 00       	call   c0015920 <Krnl::panic(char const*)>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134a5:	eb 5c                	jmp    c0013503 <ACPI::close(int, int, void*)+0xb1>
c00134a7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00134ac:	75 50                	jne    c00134fe <ACPI::close(int, int, void*)+0xac>
c00134ae:	a1 44 4a 02 c0       	mov    eax,ds:0xc0024a44
c00134b3:	85 c0                	test   eax,eax
c00134b5:	74 07                	je     c00134be <ACPI::close(int, int, void*)+0x6c>
c00134b7:	a1 44 4a 02 c0       	mov    eax,ds:0xc0024a44
c00134bc:	ff d0                	call   eax
c00134be:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00134c3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00134c8:	83 e0 02             	and    eax,0x2
c00134cb:	74 1c                	je     c00134e9 <ACPI::close(int, int, void*)+0x97>
c00134cd:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00134d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134d8:	89 c2                	mov    edx,eax
c00134da:	ec                   	in     al,dx
c00134db:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00134df:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00134e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134e7:	eb da                	jmp    c00134c3 <ACPI::close(int, int, void*)+0x71>
c00134e9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00134f0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00134f5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00134f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00134fd:	ee                   	out    dx,al
c00134fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013503:	83 c4 1c             	add    esp,0x1c
c0013506:	c3                   	ret    

c0013507 <findRSDP()>:
c0013507:	83 ec 1c             	sub    esp,0x1c
c001350a:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001350f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013515:	83 e0 04             	and    eax,0x4
c0013518:	84 c0                	test   al,al
c001351a:	75 07                	jne    c0013523 <findRSDP()+0x1c>
c001351c:	b8 00 00 00 00       	mov    eax,0x0
c0013521:	eb 6a                	jmp    c001358d <findRSDP()+0x86>
c0013523:	a1 10 44 02 c0       	mov    eax,ds:0xc0024410
c0013528:	3d ff 07 00 00       	cmp    eax,0x7ff
c001352d:	7f 1b                	jg     c001354a <findRSDP()+0x43>
c001352f:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0013534:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001353a:	83 e2 fb             	and    edx,0xfffffffb
c001353d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013543:	b8 00 00 00 00       	mov    eax,0x0
c0013548:	eb 43                	jmp    c001358d <findRSDP()+0x86>
c001354a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013552:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001355a:	77 2c                	ja     c0013588 <findRSDP()+0x81>
c001355c:	83 ec 04             	sub    esp,0x4
c001355f:	6a 08                	push   0x8
c0013561:	68 31 1f 02 c0       	push   0xc0021f31
c0013566:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001356a:	e8 de d0 fe ff       	call   c000064d <memcmp>
c001356f:	83 c4 10             	add    esp,0x10
c0013572:	85 c0                	test   eax,eax
c0013574:	0f 94 c0             	sete   al
c0013577:	84 c0                	test   al,al
c0013579:	74 06                	je     c0013581 <findRSDP()+0x7a>
c001357b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001357f:	eb 0c                	jmp    c001358d <findRSDP()+0x86>
c0013581:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013586:	eb ca                	jmp    c0013552 <findRSDP()+0x4b>
c0013588:	b8 00 00 00 00       	mov    eax,0x0
c001358d:	83 c4 1c             	add    esp,0x1c
c0013590:	c3                   	ret    

c0013591 <loadACPITables(unsigned char*)>:
c0013591:	56                   	push   esi
c0013592:	53                   	push   ebx
c0013593:	83 ec 44             	sub    esp,0x44
c0013596:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001359b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135a1:	83 e0 04             	and    eax,0x4
c00135a4:	84 c0                	test   al,al
c00135a6:	0f 84 05 02 00 00    	je     c00137b1 <loadACPITables(unsigned char*)+0x220>
c00135ac:	a0 60 4c 02 c0       	mov    al,ds:0xc0024c60
c00135b1:	84 c0                	test   al,al
c00135b3:	74 75                	je     c001362a <loadACPITables(unsigned char*)+0x99>
c00135b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00135bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135c4:	83 e8 24             	sub    eax,0x24
c00135c7:	c1 e8 03             	shr    eax,0x3
c00135ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00135ce:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00135d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135da:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00135de:	0f 8d b2 00 00 00    	jge    c0013696 <loadACPITables(unsigned char*)+0x105>
c00135e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135e8:	83 c0 24             	add    eax,0x24
c00135eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00135ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00135f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135fb:	c1 e0 03             	shl    eax,0x3
c00135fe:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0013602:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013606:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013609:	8b 00                	mov    eax,DWORD PTR [eax]
c001360b:	89 c1                	mov    ecx,eax
c001360d:	a1 4c 4a 02 c0       	mov    eax,ds:0xc0024a4c
c0013612:	8d 50 01             	lea    edx,[eax+0x1]
c0013615:	89 15 4c 4a 02 c0    	mov    DWORD PTR ds:0xc0024a4c,edx
c001361b:	89 ca                	mov    edx,ecx
c001361d:	89 14 c5 64 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb59c],edx
c0013624:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013628:	eb ac                	jmp    c00135d6 <loadACPITables(unsigned char*)+0x45>
c001362a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001362e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013636:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013639:	83 e8 24             	sub    eax,0x24
c001363c:	c1 e8 02             	shr    eax,0x2
c001363f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013643:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001364b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001364f:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013653:	7d 41                	jge    c0013696 <loadACPITables(unsigned char*)+0x105>
c0013655:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013659:	83 c0 24             	add    eax,0x24
c001365c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013664:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013668:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001366c:	c1 e0 02             	shl    eax,0x2
c001366f:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013677:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013679:	a1 4c 4a 02 c0       	mov    eax,ds:0xc0024a4c
c001367e:	8d 50 01             	lea    edx,[eax+0x1]
c0013681:	89 15 4c 4a 02 c0    	mov    DWORD PTR ds:0xc0024a4c,edx
c0013687:	89 ca                	mov    edx,ecx
c0013689:	89 14 c5 64 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb59c],edx
c0013690:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013694:	eb b5                	jmp    c001364b <loadACPITables(unsigned char*)+0xba>
c0013696:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001369e:	a1 4c 4a 02 c0       	mov    eax,ds:0xc0024a4c
c00136a3:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00136a7:	0f 8d 05 01 00 00    	jge    c00137b2 <loadACPITables(unsigned char*)+0x221>
c00136ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136b1:	8b 04 c5 64 4a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb59c]
c00136b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c8:	25 ff 0f 00 00       	and    eax,0xfff
c00136cd:	89 c6                	mov    esi,eax
c00136cf:	e8 23 ac ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c00136d4:	89 c3                	mov    ebx,eax
c00136d6:	83 ec 0c             	sub    esp,0xc
c00136d9:	6a 01                	push   0x1
c00136db:	e8 87 aa ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136e7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	6a 01                	push   0x1
c00136f2:	6a 01                	push   0x1
c00136f4:	50                   	push   eax
c00136f5:	52                   	push   edx
c00136f6:	53                   	push   ebx
c00136f7:	e8 2a b4 ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00136fc:	83 c4 20             	add    esp,0x20
c00136ff:	09 f0                	or     eax,esi
c0013701:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013705:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013709:	c1 e0 03             	shl    eax,0x3
c001370c:	05 60 4a 02 c0       	add    eax,0xc0024a60
c0013711:	83 ec 04             	sub    esp,0x4
c0013714:	6a 04                	push   0x4
c0013716:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001371a:	50                   	push   eax
c001371b:	e8 90 cf fe ff       	call   c00006b0 <memcpy>
c0013720:	83 c4 10             	add    esp,0x10
c0013723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013727:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001372a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001372e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013732:	05 00 10 00 00       	add    eax,0x1000
c0013737:	c1 e8 0c             	shr    eax,0xc
c001373a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001373e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013742:	89 04 24             	mov    DWORD PTR [esp],eax
c0013745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013749:	25 ff 0f 00 00       	and    eax,0xfff
c001374e:	89 c6                	mov    esi,eax
c0013750:	e8 a2 ab ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c0013755:	89 c3                	mov    ebx,eax
c0013757:	83 ec 0c             	sub    esp,0xc
c001375a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001375e:	e8 04 aa ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c0013763:	83 c4 10             	add    esp,0x10
c0013766:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001376a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013770:	83 ec 0c             	sub    esp,0xc
c0013773:	6a 01                	push   0x1
c0013775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013779:	50                   	push   eax
c001377a:	52                   	push   edx
c001377b:	53                   	push   ebx
c001377c:	e8 a5 b3 ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013781:	83 c4 20             	add    esp,0x20
c0013784:	09 f0                	or     eax,esi
c0013786:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001378a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001378d:	83 ec 0c             	sub    esp,0xc
c0013790:	50                   	push   eax
c0013791:	e8 2b ad ff ff       	call   c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013796:	83 c4 10             	add    esp,0x10
c0013799:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001379d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a1:	89 14 c5 64 4a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb59c],edx
c00137a8:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00137ac:	e9 ed fe ff ff       	jmp    c001369e <loadACPITables(unsigned char*)+0x10d>
c00137b1:	90                   	nop
c00137b2:	83 c4 44             	add    esp,0x44
c00137b5:	5b                   	pop    ebx
c00137b6:	5e                   	pop    esi
c00137b7:	c3                   	ret    

c00137b8 <findRSDT(unsigned char*)>:
c00137b8:	56                   	push   esi
c00137b9:	53                   	push   ebx
c00137ba:	83 ec 44             	sub    esp,0x44
c00137bd:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c00137c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00137c8:	83 e0 04             	and    eax,0x4
c00137cb:	84 c0                	test   al,al
c00137cd:	75 0a                	jne    c00137d9 <findRSDT(unsigned char*)+0x21>
c00137cf:	b8 00 00 00 00       	mov    eax,0x0
c00137d4:	e9 f7 00 00 00       	jmp    c00138d0 <findRSDT(unsigned char*)+0x118>
c00137d9:	83 ec 04             	sub    esp,0x4
c00137dc:	6a 24                	push   0x24
c00137de:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00137e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00137e6:	50                   	push   eax
c00137e7:	e8 c4 ce fe ff       	call   c00006b0 <memcpy>
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00137f3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137f7:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00137ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013803:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013807:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001380b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001380f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013813:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013817:	25 ff 0f 00 00       	and    eax,0xfff
c001381c:	89 c6                	mov    esi,eax
c001381e:	e8 d4 aa ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c0013823:	89 c3                	mov    ebx,eax
c0013825:	83 ec 0c             	sub    esp,0xc
c0013828:	6a 02                	push   0x2
c001382a:	e8 38 a9 ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c001382f:	83 c4 10             	add    esp,0x10
c0013832:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013836:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001383c:	83 ec 0c             	sub    esp,0xc
c001383f:	6a 01                	push   0x1
c0013841:	6a 02                	push   0x2
c0013843:	50                   	push   eax
c0013844:	52                   	push   edx
c0013845:	53                   	push   ebx
c0013846:	e8 db b2 ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001384b:	83 c4 20             	add    esp,0x20
c001384e:	09 f0                	or     eax,esi
c0013850:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013854:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013858:	25 ff 0f 00 00       	and    eax,0xfff
c001385d:	89 c6                	mov    esi,eax
c001385f:	e8 93 aa ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c0013864:	89 c3                	mov    ebx,eax
c0013866:	83 ec 0c             	sub    esp,0xc
c0013869:	6a 02                	push   0x2
c001386b:	e8 f7 a8 ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c0013870:	83 c4 10             	add    esp,0x10
c0013873:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013877:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001387d:	83 ec 0c             	sub    esp,0xc
c0013880:	6a 01                	push   0x1
c0013882:	6a 02                	push   0x2
c0013884:	50                   	push   eax
c0013885:	52                   	push   edx
c0013886:	53                   	push   ebx
c0013887:	e8 9a b2 ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001388c:	83 c4 20             	add    esp,0x20
c001388f:	09 f0                	or     eax,esi
c0013891:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013895:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001389a:	75 11                	jne    c00138ad <findRSDT(unsigned char*)+0xf5>
c001389c:	c6 05 60 4c 02 c0 00 	mov    BYTE PTR ds:0xc0024c60,0x0
c00138a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138a7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138ab:	eb 1f                	jmp    c00138cc <findRSDT(unsigned char*)+0x114>
c00138ad:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00138b2:	75 11                	jne    c00138c5 <findRSDT(unsigned char*)+0x10d>
c00138b4:	c6 05 60 4c 02 c0 01 	mov    BYTE PTR ds:0xc0024c60,0x1
c00138bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138c3:	eb 07                	jmp    c00138cc <findRSDT(unsigned char*)+0x114>
c00138c5:	b8 00 00 00 00       	mov    eax,0x0
c00138ca:	eb 04                	jmp    c00138d0 <findRSDT(unsigned char*)+0x118>
c00138cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00138d0:	83 c4 44             	add    esp,0x44
c00138d3:	5b                   	pop    ebx
c00138d4:	5e                   	pop    esi
c00138d5:	c3                   	ret    

c00138d6 <findDataTable(unsigned char*, char*)>:
c00138d6:	83 ec 1c             	sub    esp,0x1c
c00138d9:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c00138de:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138e4:	83 e0 04             	and    eax,0x4
c00138e7:	84 c0                	test   al,al
c00138e9:	75 07                	jne    c00138f2 <findDataTable(unsigned char*, char*)+0x1c>
c00138eb:	b8 00 00 00 00       	mov    eax,0x0
c00138f0:	eb 7c                	jmp    c001396e <findDataTable(unsigned char*, char*)+0x98>
c00138f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00138fa:	a1 4c 4a 02 c0       	mov    eax,ds:0xc0024a4c
c00138ff:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013903:	7d 3a                	jge    c001393f <findDataTable(unsigned char*, char*)+0x69>
c0013905:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013909:	c1 e0 03             	shl    eax,0x3
c001390c:	05 60 4a 02 c0       	add    eax,0xc0024a60
c0013911:	83 ec 04             	sub    esp,0x4
c0013914:	6a 04                	push   0x4
c0013916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001391a:	50                   	push   eax
c001391b:	e8 2d cd fe ff       	call   c000064d <memcmp>
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	85 c0                	test   eax,eax
c0013925:	0f 94 c0             	sete   al
c0013928:	84 c0                	test   al,al
c001392a:	74 0d                	je     c0013939 <findDataTable(unsigned char*, char*)+0x63>
c001392c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013930:	8b 04 c5 64 4a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb59c]
c0013937:	eb 35                	jmp    c001396e <findDataTable(unsigned char*, char*)+0x98>
c0013939:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001393d:	eb bb                	jmp    c00138fa <findDataTable(unsigned char*, char*)+0x24>
c001393f:	a0 60 4c 02 c0       	mov    al,ds:0xc0024c60
c0013944:	84 c0                	test   al,al
c0013946:	74 07                	je     c001394f <findDataTable(unsigned char*, char*)+0x79>
c0013948:	b8 58 00 00 00       	mov    eax,0x58
c001394d:	eb 05                	jmp    c0013954 <findDataTable(unsigned char*, char*)+0x7e>
c001394f:	b8 52 00 00 00       	mov    eax,0x52
c0013954:	83 ec 04             	sub    esp,0x4
c0013957:	50                   	push   eax
c0013958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001395c:	68 1c 20 02 c0       	push   0xc002201c
c0013961:	e8 d3 b7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0013966:	83 c4 10             	add    esp,0x10
c0013969:	b8 00 00 00 00       	mov    eax,0x0
c001396e:	83 c4 1c             	add    esp,0x1c
c0013971:	c3                   	ret    

c0013972 <scanMADT()>:
c0013972:	83 ec 2c             	sub    esp,0x2c
c0013975:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001397a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013980:	83 e0 04             	and    eax,0x4
c0013983:	84 c0                	test   al,al
c0013985:	0f 84 73 03 00 00    	je     c0013cfe <scanMADT()+0x38c>
c001398b:	e8 77 fb ff ff       	call   c0013507 <findRSDP()>
c0013990:	a3 6c 4c 02 c0       	mov    ds:0xc0024c6c,eax
c0013995:	a1 6c 4c 02 c0       	mov    eax,ds:0xc0024c6c
c001399a:	85 c0                	test   eax,eax
c001399c:	75 19                	jne    c00139b7 <scanMADT()+0x45>
c001399e:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c00139a3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139a9:	83 e2 fb             	and    edx,0xfffffffb
c00139ac:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139b2:	e9 4b 03 00 00       	jmp    c0013d02 <scanMADT()+0x390>
c00139b7:	a1 6c 4c 02 c0       	mov    eax,ds:0xc0024c6c
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	50                   	push   eax
c00139c0:	e8 f3 fd ff ff       	call   c00137b8 <findRSDT(unsigned char*)>
c00139c5:	83 c4 10             	add    esp,0x10
c00139c8:	a3 68 4c 02 c0       	mov    ds:0xc0024c68,eax
c00139cd:	a1 68 4c 02 c0       	mov    eax,ds:0xc0024c68
c00139d2:	85 c0                	test   eax,eax
c00139d4:	75 19                	jne    c00139ef <scanMADT()+0x7d>
c00139d6:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c00139db:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139e1:	83 e2 fb             	and    edx,0xfffffffb
c00139e4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139ea:	e9 13 03 00 00       	jmp    c0013d02 <scanMADT()+0x390>
c00139ef:	a1 68 4c 02 c0       	mov    eax,ds:0xc0024c68
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	50                   	push   eax
c00139f8:	e8 94 fb ff ff       	call   c0013591 <loadACPITables(unsigned char*)>
c00139fd:	83 c4 10             	add    esp,0x10
c0013a00:	a1 68 4c 02 c0       	mov    eax,ds:0xc0024c68
c0013a05:	83 ec 08             	sub    esp,0x8
c0013a08:	68 3a 1f 02 c0       	push   0xc0021f3a
c0013a0d:	50                   	push   eax
c0013a0e:	e8 c3 fe ff ff       	call   c00138d6 <findDataTable(unsigned char*, char*)>
c0013a13:	83 c4 10             	add    esp,0x10
c0013a16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a1a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013a1f:	75 19                	jne    c0013a3a <scanMADT()+0xc8>
c0013a21:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0013a26:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a2c:	83 e2 fe             	and    edx,0xfffffffe
c0013a2f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a35:	e9 c8 02 00 00       	jmp    c0013d02 <scanMADT()+0x390>
c0013a3a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a49:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a4d:	0f 87 af 02 00 00    	ja     c0013d02 <scanMADT()+0x390>
c0013a53:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a5b:	0f 87 a1 02 00 00    	ja     c0013d02 <scanMADT()+0x390>
c0013a61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a6d:	8d 50 01             	lea    edx,[eax+0x1]
c0013a70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a78:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a7c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013a80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a84:	8d 50 01             	lea    edx,[eax+0x1]
c0013a87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a8f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013a93:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013a97:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013a9c:	0f 86 5f 02 00 00    	jbe    c0013d01 <scanMADT()+0x38f>
c0013aa2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013aa7:	75 57                	jne    c0013b00 <scanMADT()+0x18e>
c0013aa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aad:	8d 50 01             	lea    edx,[eax+0x1]
c0013ab0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ab4:	8a 15 a0 4d 02 c0    	mov    dl,BYTE PTR ds:0xc0024da0
c0013aba:	0f b6 d2             	movzx  edx,dl
c0013abd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ac1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ac5:	88 82 e0 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb220],al
c0013acb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013acf:	8d 50 01             	lea    edx,[eax+0x1]
c0013ad2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ad6:	8a 15 a0 4d 02 c0    	mov    dl,BYTE PTR ds:0xc0024da0
c0013adc:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013adf:	88 0d a0 4d 02 c0    	mov    BYTE PTR ds:0xc0024da0,cl
c0013ae5:	0f b6 d2             	movzx  edx,dl
c0013ae8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013aec:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013af0:	88 82 c0 4d 02 c0    	mov    BYTE PTR [edx-0x3ffdb240],al
c0013af6:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013afb:	e9 ea 01 00 00       	jmp    c0013cea <scanMADT()+0x378>
c0013b00:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013b05:	0f 85 14 01 00 00    	jne    c0013c1f <scanMADT()+0x2ad>
c0013b0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b0f:	8d 50 01             	lea    edx,[eax+0x1]
c0013b12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b16:	8a 15 70 4c 02 c0    	mov    dl,BYTE PTR ds:0xc0024c70
c0013b1c:	0f b6 d2             	movzx  edx,dl
c0013b1f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b23:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b27:	88 82 80 4c 02 c0    	mov    BYTE PTR [edx-0x3ffdb380],al
c0013b2d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013b31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b39:	01 d0                	add    eax,edx
c0013b3b:	83 c0 2c             	add    eax,0x2c
c0013b3e:	8a 00                	mov    al,BYTE PTR [eax]
c0013b40:	0f b6 d0             	movzx  edx,al
c0013b43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b47:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b4e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b52:	0f b6 c0             	movzx  eax,al
c0013b55:	c1 e0 08             	shl    eax,0x8
c0013b58:	89 d1                	mov    ecx,edx
c0013b5a:	09 c1                	or     ecx,eax
c0013b5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b60:	8d 50 02             	lea    edx,[eax+0x2]
c0013b63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b67:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b6b:	0f b6 c0             	movzx  eax,al
c0013b6e:	c1 e0 10             	shl    eax,0x10
c0013b71:	09 c1                	or     ecx,eax
c0013b73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b77:	8d 50 03             	lea    edx,[eax+0x3]
c0013b7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b7e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b82:	0f b6 c0             	movzx  eax,al
c0013b85:	c1 e0 18             	shl    eax,0x18
c0013b88:	09 c1                	or     ecx,eax
c0013b8a:	89 ca                	mov    edx,ecx
c0013b8c:	a0 70 4c 02 c0       	mov    al,ds:0xc0024c70
c0013b91:	0f b6 c0             	movzx  eax,al
c0013b94:	89 14 85 a0 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb360],edx
c0013b9b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ba8:	01 d0                	add    eax,edx
c0013baa:	83 c0 2c             	add    eax,0x2c
c0013bad:	8a 00                	mov    al,BYTE PTR [eax]
c0013baf:	0f b6 d0             	movzx  edx,al
c0013bb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bb6:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bbd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013bc1:	0f b6 c0             	movzx  eax,al
c0013bc4:	c1 e0 08             	shl    eax,0x8
c0013bc7:	89 d1                	mov    ecx,edx
c0013bc9:	09 c1                	or     ecx,eax
c0013bcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bcf:	8d 50 02             	lea    edx,[eax+0x2]
c0013bd2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bd6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bda:	0f b6 c0             	movzx  eax,al
c0013bdd:	c1 e0 10             	shl    eax,0x10
c0013be0:	09 c1                	or     ecx,eax
c0013be2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013be6:	8d 50 03             	lea    edx,[eax+0x3]
c0013be9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bf1:	0f b6 c0             	movzx  eax,al
c0013bf4:	c1 e0 18             	shl    eax,0x18
c0013bf7:	09 c1                	or     ecx,eax
c0013bf9:	89 ca                	mov    edx,ecx
c0013bfb:	a0 70 4c 02 c0       	mov    al,ds:0xc0024c70
c0013c00:	0f b6 c0             	movzx  eax,al
c0013c03:	89 14 85 20 4d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb2e0],edx
c0013c0a:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c0f:	a0 70 4c 02 c0       	mov    al,ds:0xc0024c70
c0013c14:	40                   	inc    eax
c0013c15:	a2 70 4c 02 c0       	mov    ds:0xc0024c70,al
c0013c1a:	e9 cb 00 00 00       	jmp    c0013cea <scanMADT()+0x378>
c0013c1f:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013c24:	0f 85 a6 00 00 00    	jne    c0013cd0 <scanMADT()+0x35e>
c0013c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c2e:	8d 50 01             	lea    edx,[eax+0x1]
c0013c31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c39:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c3d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013c41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c45:	8d 50 01             	lea    edx,[eax+0x1]
c0013c48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c50:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c54:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c60:	01 d0                	add    eax,edx
c0013c62:	83 c0 2c             	add    eax,0x2c
c0013c65:	8a 00                	mov    al,BYTE PTR [eax]
c0013c67:	0f b6 d0             	movzx  edx,al
c0013c6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c6e:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c75:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c79:	0f b6 c0             	movzx  eax,al
c0013c7c:	c1 e0 08             	shl    eax,0x8
c0013c7f:	89 d1                	mov    ecx,edx
c0013c81:	09 c1                	or     ecx,eax
c0013c83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c87:	8d 50 02             	lea    edx,[eax+0x2]
c0013c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c8e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c92:	0f b6 c0             	movzx  eax,al
c0013c95:	c1 e0 10             	shl    eax,0x10
c0013c98:	09 c1                	or     ecx,eax
c0013c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c9e:	8d 50 03             	lea    edx,[eax+0x3]
c0013ca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ca5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ca9:	0f b6 c0             	movzx  eax,al
c0013cac:	c1 e0 18             	shl    eax,0x18
c0013caf:	09 c8                	or     eax,ecx
c0013cb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cb5:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cba:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013cbf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013cc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cc8:	88 90 20 3b 02 c0    	mov    BYTE PTR [eax-0x3ffdc4e0],dl
c0013cce:	eb 1a                	jmp    c0013cea <scanMADT()+0x378>
c0013cd0:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013cd5:	75 07                	jne    c0013cde <scanMADT()+0x36c>
c0013cd7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cdc:	eb 0c                	jmp    c0013cea <scanMADT()+0x378>
c0013cde:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013ce3:	75 05                	jne    c0013cea <scanMADT()+0x378>
c0013ce5:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013cea:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013cef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cf3:	01 d0                	add    eax,edx
c0013cf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cf9:	e9 44 fd ff ff       	jmp    c0013a42 <scanMADT()+0xd0>
c0013cfe:	90                   	nop
c0013cff:	eb 01                	jmp    c0013d02 <scanMADT()+0x390>
c0013d01:	90                   	nop
c0013d02:	83 c4 2c             	add    esp,0x2c
c0013d05:	c3                   	ret    

c0013d06 <ACPI::ACPI()>:
c0013d06:	83 ec 0c             	sub    esp,0xc
c0013d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d0d:	83 ec 08             	sub    esp,0x8
c0013d10:	68 3f 1f 02 c0       	push   0xc0021f3f
c0013d15:	50                   	push   eax
c0013d16:	e8 19 ca ff ff       	call   c0010734 <Device::Device(char const*)>
c0013d1b:	83 c4 10             	add    esp,0x10
c0013d1e:	ba e8 20 02 c0       	mov    edx,0xc00220e8
c0013d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d27:	89 10                	mov    DWORD PTR [eax],edx
c0013d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d38:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d46:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d54:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013d5b:	e8 12 fc ff ff       	call   c0013972 <scanMADT()>
c0013d60:	90                   	nop
c0013d61:	83 c4 0c             	add    esp,0xc
c0013d64:	c3                   	ret    
c0013d65:	90                   	nop

c0013d66 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013d66:	83 ec 2c             	sub    esp,0x2c
c0013d69:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013d6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d71:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013d75:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d79:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013d7e:	88 d0                	mov    al,dl
c0013d80:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013d89:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013d91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d95:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013d9b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013d9f:	0f 8d 97 00 00 00    	jge    c0013e3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013da5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013da9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dad:	83 c2 2a             	add    edx,0x2a
c0013db0:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013db4:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013db9:	75 78                	jne    c0013e33 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013dbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013dbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013dc3:	83 c2 2a             	add    edx,0x2a
c0013dc6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013dca:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013dce:	75 63                	jne    c0013e33 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013dd0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013dd5:	74 3a                	je     c0013e11 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013dd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ddb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ddf:	83 c2 2a             	add    edx,0x2a
c0013de2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013de6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ded:	39 c2                	cmp    edx,eax
c0013def:	74 10                	je     c0013e01 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013df1:	83 ec 0c             	sub    esp,0xc
c0013df4:	68 4c 20 02 c0       	push   0xc002204c
c0013df9:	e8 22 1b 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	83 ec 0c             	sub    esp,0xc
c0013e04:	68 44 1f 02 c0       	push   0xc0021f44
c0013e09:	e8 12 1b 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0013e0e:	83 c4 10             	add    esp,0x10
c0013e11:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e15:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e1d:	83 c2 2a             	add    edx,0x2a
c0013e20:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013e24:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e26:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013e29:	89 01                	mov    DWORD PTR [ecx],eax
c0013e2b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013e2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013e33:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013e37:	e9 55 ff ff ff       	jmp    c0013d91 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013e3c:	90                   	nop
c0013e3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e41:	83 c4 2c             	add    esp,0x2c
c0013e44:	c2 04 00             	ret    0x4
c0013e47:	90                   	nop

c0013e48 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013e48:	56                   	push   esi
c0013e49:	53                   	push   ebx
c0013e4a:	83 ec 14             	sub    esp,0x14
c0013e4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e51:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013e59:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013e5e:	88 c8                	mov    al,cl
c0013e60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e64:	88 d0                	mov    al,dl
c0013e66:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e6e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e78:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013e7e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e83:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e88:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013e8d:	83 ec 04             	sub    esp,0x4
c0013e90:	56                   	push   esi
c0013e91:	53                   	push   ebx
c0013e92:	51                   	push   ecx
c0013e93:	52                   	push   edx
c0013e94:	50                   	push   eax
c0013e95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e99:	68 7c 20 02 c0       	push   0xc002207c
c0013e9e:	e8 96 b2 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0013ea3:	83 c4 20             	add    esp,0x20
c0013ea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eaa:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eb4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013eb7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013ebb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013ec9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ecd:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ed4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013edd:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ee3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013ee7:	8d 48 01             	lea    ecx,[eax+0x1]
c0013eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eee:	83 c2 2a             	add    edx,0x2a
c0013ef1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f03:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013f06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f0a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f12:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f18:	8d 50 01             	lea    edx,[eax+0x1]
c0013f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f29:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f2f:	3d 00 08 00 00       	cmp    eax,0x800
c0013f34:	75 10                	jne    c0013f46 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013f36:	83 ec 0c             	sub    esp,0xc
c0013f39:	68 53 1f 02 c0       	push   0xc0021f53
c0013f3e:	e8 dd 19 00 00       	call   c0015920 <Krnl::panic(char const*)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	90                   	nop
c0013f47:	83 c4 14             	add    esp,0x14
c0013f4a:	5b                   	pop    ebx
c0013f4b:	5e                   	pop    esi
c0013f4c:	c3                   	ret    
c0013f4d:	90                   	nop

c0013f4e <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013f4e:	b8 00 00 00 00       	mov    eax,0x0
c0013f53:	c3                   	ret    

c0013f54 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013f54:	83 ec 1c             	sub    esp,0x1c
c0013f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f5b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013f5e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013f62:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0013f67:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f6c:	83 ec 08             	sub    esp,0x8
c0013f6f:	52                   	push   edx
c0013f70:	50                   	push   eax
c0013f71:	e8 e2 76 ff ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013f7d:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0013f82:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013f87:	83 ec 04             	sub    esp,0x4
c0013f8a:	6a 01                	push   0x1
c0013f8c:	52                   	push   edx
c0013f8d:	50                   	push   eax
c0013f8e:	e8 db 77 ff ff       	call   c000b76e <Computer::writeCMOS(unsigned char, unsigned char)>
c0013f93:	83 c4 10             	add    esp,0x10
c0013f96:	90                   	nop
c0013f97:	83 c4 1c             	add    esp,0x1c
c0013f9a:	c3                   	ret    
c0013f9b:	90                   	nop

c0013f9c <ACPI::open(int, int, void*)>:
c0013f9c:	53                   	push   ebx
c0013f9d:	83 ec 18             	sub    esp,0x18
c0013fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa4:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013faf:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013fb5:	84 c0                	test   al,al
c0013fb7:	74 60                	je     c0014019 <ACPI::open(int, int, void*)+0x7d>
c0013fb9:	83 ec 0c             	sub    esp,0xc
c0013fbc:	68 58 01 00 00       	push   0x158
c0013fc1:	e8 84 b0 ff ff       	call   c000f04a <operator new(unsigned long)>
c0013fc6:	83 c4 10             	add    esp,0x10
c0013fc9:	89 c3                	mov    ebx,eax
c0013fcb:	83 ec 0c             	sub    esp,0xc
c0013fce:	53                   	push   ebx
c0013fcf:	e8 90 7f 00 00       	call   c001bf64 <PCI::PCI()>
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdf:	83 ec 08             	sub    esp,0x8
c0013fe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fe6:	50                   	push   eax
c0013fe7:	e8 58 c5 ff ff       	call   c0010544 <Device::addChild(Device*)>
c0013fec:	83 c4 10             	add    esp,0x10
c0013fef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ff5:	83 c0 08             	add    eax,0x8
c0013ff8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ffa:	6a 00                	push   0x0
c0013ffc:	6a 00                	push   0x0
c0013ffe:	6a 00                	push   0x0
c0014000:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014004:	ff d0                	call   eax
c0014006:	83 c4 10             	add    esp,0x10
c0014009:	83 ec 0c             	sub    esp,0xc
c001400c:	68 70 1f 02 c0       	push   0xc0021f70
c0014011:	e8 23 b1 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014016:	83 c4 10             	add    esp,0x10
c0014019:	83 ec 0c             	sub    esp,0xc
c001401c:	68 7b 1f 02 c0       	push   0xc0021f7b
c0014021:	e8 9b 37 00 00       	call   c00177c1 <Thr::loadKernelSymbolTable(char const*)>
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	8b 1d c8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c8
c001402f:	83 ec 08             	sub    esp,0x8
c0014032:	6a 01                	push   0x1
c0014034:	68 99 1f 02 c0       	push   0xc0021f99
c0014039:	e8 65 42 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c001403e:	83 c4 10             	add    esp,0x10
c0014041:	83 ec 08             	sub    esp,0x8
c0014044:	53                   	push   ebx
c0014045:	50                   	push   eax
c0014046:	e8 1e 44 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	8b 1d c8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c8
c0014054:	83 ec 08             	sub    esp,0x8
c0014057:	6a 01                	push   0x1
c0014059:	68 b6 1f 02 c0       	push   0xc0021fb6
c001405e:	e8 40 42 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c0014063:	83 c4 10             	add    esp,0x10
c0014066:	83 ec 08             	sub    esp,0x8
c0014069:	53                   	push   ebx
c001406a:	50                   	push   eax
c001406b:	e8 f9 43 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c0014070:	83 c4 10             	add    esp,0x10
c0014073:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0014078:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001407e:	83 e0 04             	and    eax,0x4
c0014081:	84 c0                	test   al,al
c0014083:	0f 84 cf 00 00 00    	je     c0014158 <ACPI::open(int, int, void*)+0x1bc>
c0014089:	83 ec 0c             	sub    esp,0xc
c001408c:	68 14 01 00 00       	push   0x114
c0014091:	e8 b4 af ff ff       	call   c000f04a <operator new(unsigned long)>
c0014096:	83 c4 10             	add    esp,0x10
c0014099:	89 c3                	mov    ebx,eax
c001409b:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00140a0:	83 ec 04             	sub    esp,0x4
c00140a3:	50                   	push   eax
c00140a4:	68 d3 1f 02 c0       	push   0xc0021fd3
c00140a9:	53                   	push   ebx
c00140aa:	e8 b9 b5 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c00140af:	83 c4 10             	add    esp,0x10
c00140b2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00140b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00140bb:	74 17                	je     c00140d4 <ACPI::open(int, int, void*)+0x138>
c00140bd:	83 ec 0c             	sub    esp,0xc
c00140c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140c4:	e8 71 b8 ff ff       	call   c000f93a <File::exists()>
c00140c9:	83 c4 10             	add    esp,0x10
c00140cc:	84 c0                	test   al,al
c00140ce:	74 04                	je     c00140d4 <ACPI::open(int, int, void*)+0x138>
c00140d0:	b0 01                	mov    al,0x1
c00140d2:	eb 02                	jmp    c00140d6 <ACPI::open(int, int, void*)+0x13a>
c00140d4:	b0 00                	mov    al,0x0
c00140d6:	84 c0                	test   al,al
c00140d8:	74 25                	je     c00140ff <ACPI::open(int, int, void*)+0x163>
c00140da:	8b 1d c8 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243c8
c00140e0:	83 ec 08             	sub    esp,0x8
c00140e3:	6a 01                	push   0x1
c00140e5:	68 d3 1f 02 c0       	push   0xc0021fd3
c00140ea:	e8 b4 41 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	83 ec 08             	sub    esp,0x8
c00140f5:	53                   	push   ebx
c00140f6:	50                   	push   eax
c00140f7:	e8 6d 43 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c00140fc:	83 c4 10             	add    esp,0x10
c00140ff:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014104:	74 1e                	je     c0014124 <ACPI::open(int, int, void*)+0x188>
c0014106:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001410b:	74 17                	je     c0014124 <ACPI::open(int, int, void*)+0x188>
c001410d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014111:	8b 00                	mov    eax,DWORD PTR [eax]
c0014113:	83 c0 08             	add    eax,0x8
c0014116:	8b 00                	mov    eax,DWORD PTR [eax]
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001411f:	ff d0                	call   eax
c0014121:	83 c4 10             	add    esp,0x10
c0014124:	a1 68 4c 02 c0       	mov    eax,ds:0xc0024c68
c0014129:	83 ec 08             	sub    esp,0x8
c001412c:	68 f0 1f 02 c0       	push   0xc0021ff0
c0014131:	50                   	push   eax
c0014132:	e8 9f f7 ff ff       	call   c00138d6 <findDataTable(unsigned char*, char*)>
c0014137:	83 c4 10             	add    esp,0x10
c001413a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001413e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0014143:	74 13                	je     c0014158 <ACPI::open(int, int, void*)+0x1bc>
c0014145:	83 ec 08             	sub    esp,0x8
c0014148:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001414c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014150:	e8 ff fd ff ff       	call   c0013f54 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0014155:	83 c4 10             	add    esp,0x10
c0014158:	b8 00 00 00 00       	mov    eax,0x0
c001415d:	83 c4 18             	add    esp,0x18
c0014160:	5b                   	pop    ebx
c0014161:	c3                   	ret    

c0014162 <ACPI::sleep()>:
c0014162:	83 ec 0c             	sub    esp,0xc
c0014165:	a1 40 4a 02 c0       	mov    eax,ds:0xc0024a40
c001416a:	85 c0                	test   eax,eax
c001416c:	74 07                	je     c0014175 <ACPI::sleep()+0x13>
c001416e:	a1 40 4a 02 c0       	mov    eax,ds:0xc0024a40
c0014173:	ff d0                	call   eax
c0014175:	90                   	nop
c0014176:	83 c4 0c             	add    esp,0xc
c0014179:	c3                   	ret    

c001417a <CPU::close(int, int, void*)>:
c001417a:	31 c0                	xor    eax,eax
c001417c:	c3                   	ret    

c001417d <lookupAMDCPUName(unsigned char, unsigned char)>:
c001417d:	55                   	push   ebp
c001417e:	57                   	push   edi
c001417f:	56                   	push   esi
c0014180:	53                   	push   ebx
c0014181:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0014185:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014189:	89 ce                	mov    esi,ecx
c001418b:	89 d5                	mov    ebp,edx
c001418d:	80 f9 04             	cmp    cl,0x4
c0014190:	75 28                	jne    c00141ba <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0014192:	8d 42 f9             	lea    eax,[edx-0x7]
c0014195:	3c 03                	cmp    al,0x3
c0014197:	0f 86 63 01 00 00    	jbe    c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001419d:	80 fa 03             	cmp    dl,0x3
c00141a0:	0f 84 5a 01 00 00    	je     c0014300 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00141a6:	8d 7a f2             	lea    edi,[edx-0xe]
c00141a9:	b8 f0 3c 02 c0       	mov    eax,0xc0023cf0
c00141ae:	89 fb                	mov    ebx,edi
c00141b0:	80 fb 01             	cmp    bl,0x1
c00141b3:	77 4e                	ja     c0014203 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00141b5:	e9 52 01 00 00       	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141ba:	80 f9 05             	cmp    cl,0x5
c00141bd:	75 4d                	jne    c001420c <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00141bf:	b8 00 3d 02 c0       	mov    eax,0xc0023d00
c00141c4:	80 fa 03             	cmp    dl,0x3
c00141c7:	0f 86 3f 01 00 00    	jbe    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141cd:	8d 7a fa             	lea    edi,[edx-0x6]
c00141d0:	b8 10 3d 02 c0       	mov    eax,0xc0023d10
c00141d5:	89 fb                	mov    ebx,edi
c00141d7:	80 fb 01             	cmp    bl,0x1
c00141da:	0f 86 2c 01 00 00    	jbe    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141e0:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c00141e5:	80 fa 08             	cmp    dl,0x8
c00141e8:	0f 84 1e 01 00 00    	je     c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00141ee:	89 d7                	mov    edi,edx
c00141f0:	b8 30 3d 02 c0       	mov    eax,0xc0023d30
c00141f5:	83 e7 fb             	and    edi,0xfffffffb
c00141f8:	89 fb                	mov    ebx,edi
c00141fa:	80 fb 09             	cmp    bl,0x9
c00141fd:	0f 84 09 01 00 00    	je     c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014203:	31 c0                	xor    eax,eax
c0014205:	89 eb                	mov    ebx,ebp
c0014207:	0f b6 fb             	movzx  edi,bl
c001420a:	eb 30                	jmp    c001423c <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c001420c:	31 c0                	xor    eax,eax
c001420e:	80 f9 06             	cmp    cl,0x6
c0014211:	75 f2                	jne    c0014205 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0014213:	80 fa 0a             	cmp    dl,0xa
c0014216:	77 ed                	ja     c0014205 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0014218:	bf de 05 00 00       	mov    edi,0x5de
c001421d:	0f a3 d7             	bt     edi,edx
c0014220:	73 e3                	jae    c0014205 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0014222:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c0014227:	e9 e0 00 00 00       	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001422c:	39 c7                	cmp    edi,eax
c001422e:	0f 84 d3 00 00 00    	je     c0014307 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0014234:	40                   	inc    eax
c0014235:	3d d0 00 00 00       	cmp    eax,0xd0
c001423a:	74 09                	je     c0014245 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c001423c:	89 f3                	mov    ebx,esi
c001423e:	80 fb 0f             	cmp    bl,0xf
c0014241:	75 f1                	jne    c0014234 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0014243:	eb e7                	jmp    c001422c <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0014245:	80 f9 10             	cmp    cl,0x10
c0014248:	75 14                	jne    c001425e <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c001424a:	8d 42 fc             	lea    eax,[edx-0x4]
c001424d:	83 e0 fb             	and    eax,0xfffffffb
c0014250:	3c 02                	cmp    al,0x2
c0014252:	76 34                	jbe    c0014288 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0014254:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c0014259:	80 fa 02             	cmp    dl,0x2
c001425c:	eb 24                	jmp    c0014282 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c001425e:	80 f9 11             	cmp    cl,0x11
c0014261:	75 13                	jne    c0014276 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0014263:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c0014268:	80 fa 03             	cmp    dl,0x3
c001426b:	0f 85 9b 00 00 00    	jne    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014271:	e9 91 00 00 00       	jmp    c0014307 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0014276:	80 f9 12             	cmp    cl,0x12
c0014279:	75 14                	jne    c001428f <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c001427b:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c0014280:	fe ca                	dec    dl
c0014282:	0f 85 84 00 00 00    	jne    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014288:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c001428d:	eb 7d                	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001428f:	80 f9 14             	cmp    cl,0x14
c0014292:	75 12                	jne    c00142a6 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0014294:	4a                   	dec    edx
c0014295:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c001429a:	80 fa 01             	cmp    dl,0x1
c001429d:	77 6d                	ja     c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001429f:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00142a4:	eb 66                	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142a6:	80 f9 15             	cmp    cl,0x15
c00142a9:	75 31                	jne    c00142dc <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c00142ab:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c00142b0:	80 fa 01             	cmp    dl,0x1
c00142b3:	74 57                	je     c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142b5:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c00142ba:	80 fa 13             	cmp    dl,0x13
c00142bd:	76 0c                	jbe    c00142cb <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c00142bf:	80 fa 30             	cmp    dl,0x30
c00142c2:	75 48                	jne    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142c4:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c00142c9:	eb 41                	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142cb:	b9 04 00 09 00       	mov    ecx,0x90004
c00142d0:	0f a3 d1             	bt     ecx,edx
c00142d3:	73 37                	jae    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142d5:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c00142da:	eb 30                	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142dc:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c00142e1:	80 f9 16             	cmp    cl,0x16
c00142e4:	75 26                	jne    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142e6:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c00142eb:	84 d2                	test   dl,dl
c00142ed:	74 1d                	je     c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142ef:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c00142f4:	80 fa 30             	cmp    dl,0x30
c00142f7:	75 13                	jne    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00142f9:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c00142fe:	eb 0c                	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014300:	b8 e0 3c 02 c0       	mov    eax,0xc0023ce0
c0014305:	eb 05                	jmp    c001430c <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0014307:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c001430c:	5b                   	pop    ebx
c001430d:	5e                   	pop    esi
c001430e:	5f                   	pop    edi
c001430f:	5d                   	pop    ebp
c0014310:	c3                   	ret    

c0014311 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014311:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014315:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014319:	80 f9 04             	cmp    cl,0x4
c001431c:	75 6b                	jne    c0014389 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001431e:	b8 40 3b 02 c0       	mov    eax,0xc0023b40
c0014323:	80 fa 01             	cmp    dl,0x1
c0014326:	0f 86 92 02 00 00    	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001432c:	b8 50 3b 02 c0       	mov    eax,0xc0023b50
c0014331:	80 fa 02             	cmp    dl,0x2
c0014334:	0f 84 84 02 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001433a:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c001433f:	80 fa 03             	cmp    dl,0x3
c0014342:	0f 84 76 02 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014348:	b8 70 3b 02 c0       	mov    eax,0xc0023b70
c001434d:	80 fa 04             	cmp    dl,0x4
c0014350:	0f 84 68 02 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014356:	b8 80 3b 02 c0       	mov    eax,0xc0023b80
c001435b:	80 fa 05             	cmp    dl,0x5
c001435e:	0f 84 5a 02 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014364:	b8 60 3b 02 c0       	mov    eax,0xc0023b60
c0014369:	80 fa 07             	cmp    dl,0x7
c001436c:	0f 84 4c 02 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014372:	83 ea 08             	sub    edx,0x8
c0014375:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c001437a:	80 fa 01             	cmp    dl,0x1
c001437d:	0f 87 3b 02 00 00    	ja     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014383:	b8 90 3b 02 c0       	mov    eax,0xc0023b90
c0014388:	c3                   	ret    
c0014389:	80 f9 05             	cmp    cl,0x5
c001438c:	75 45                	jne    c00143d3 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c001438e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0014391:	b8 a0 3b 02 c0       	mov    eax,0xc0023ba0
c0014396:	80 f9 02             	cmp    cl,0x2
c0014399:	0f 86 1f 02 00 00    	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001439f:	80 fa 04             	cmp    dl,0x4
c00143a2:	0f 84 f3 01 00 00    	je     c001459b <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c00143a8:	80 fa 07             	cmp    dl,0x7
c00143ab:	0f 84 0d 02 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143b1:	b8 b0 3b 02 c0       	mov    eax,0xc0023bb0
c00143b6:	80 fa 08             	cmp    dl,0x8
c00143b9:	0f 84 ff 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143bf:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c00143c4:	80 fa 09             	cmp    dl,0x9
c00143c7:	0f 85 f1 01 00 00    	jne    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143cd:	b8 c0 3b 02 c0       	mov    eax,0xc0023bc0
c00143d2:	c3                   	ret    
c00143d3:	80 f9 06             	cmp    cl,0x6
c00143d6:	0f 85 85 01 00 00    	jne    c0014561 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c00143dc:	b8 d0 3b 02 c0       	mov    eax,0xc0023bd0
c00143e1:	80 fa 01             	cmp    dl,0x1
c00143e4:	0f 84 d4 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00143ea:	8d 42 fb             	lea    eax,[edx-0x5]
c00143ed:	3c 01                	cmp    al,0x1
c00143ef:	0f 86 ac 01 00 00    	jbe    c00145a1 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00143f5:	80 fa 03             	cmp    dl,0x3
c00143f8:	0f 84 a3 01 00 00    	je     c00145a1 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00143fe:	8d 4a f9             	lea    ecx,[edx-0x7]
c0014401:	b8 f0 3b 02 c0       	mov    eax,0xc0023bf0
c0014406:	80 f9 01             	cmp    cl,0x1
c0014409:	0f 86 af 01 00 00    	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001440f:	80 fa 09             	cmp    dl,0x9
c0014412:	0f 84 8f 01 00 00    	je     c00145a7 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014418:	8d 4a f6             	lea    ecx,[edx-0xa]
c001441b:	80 f9 01             	cmp    cl,0x1
c001441e:	0f 86 9a 01 00 00    	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014424:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0014429:	80 fa 0d             	cmp    dl,0xd
c001442c:	0f 84 8c 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014432:	b8 10 3c 02 c0       	mov    eax,0xc0023c10
c0014437:	80 fa 0e             	cmp    dl,0xe
c001443a:	0f 84 7e 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014440:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c0014445:	80 fa 0f             	cmp    dl,0xf
c0014448:	0f 84 70 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001444e:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c0014453:	80 fa 15             	cmp    dl,0x15
c0014456:	0f 84 62 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001445c:	8d 4a ea             	lea    ecx,[edx-0x16]
c001445f:	b8 20 3c 02 c0       	mov    eax,0xc0023c20
c0014464:	80 f9 01             	cmp    cl,0x1
c0014467:	0f 86 51 01 00 00    	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001446d:	80 fa 1a             	cmp    dl,0x1a
c0014470:	0f 84 37 01 00 00    	je     c00145ad <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0014476:	80 fa 1c             	cmp    dl,0x1c
c0014479:	0f 84 34 01 00 00    	je     c00145b3 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c001447f:	80 fa 1d             	cmp    dl,0x1d
c0014482:	0f 84 36 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014488:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c001448d:	80 fa 25             	cmp    dl,0x25
c0014490:	0f 84 28 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014496:	8d 4a da             	lea    ecx,[edx-0x26]
c0014499:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c001449e:	80 f9 01             	cmp    cl,0x1
c00144a1:	0f 86 17 01 00 00    	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144a7:	b8 60 3c 02 c0       	mov    eax,0xc0023c60
c00144ac:	80 fa 2a             	cmp    dl,0x2a
c00144af:	0f 84 09 01 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144b5:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c00144ba:	80 fa 2c             	cmp    dl,0x2c
c00144bd:	0f 84 fb 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144c3:	b8 60 3c 02 c0       	mov    eax,0xc0023c60
c00144c8:	80 fa 2d             	cmp    dl,0x2d
c00144cb:	0f 84 ed 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144d1:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c00144d6:	80 fa 2e             	cmp    dl,0x2e
c00144d9:	0f 84 df 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144df:	b8 50 3c 02 c0       	mov    eax,0xc0023c50
c00144e4:	80 fa 2f             	cmp    dl,0x2f
c00144e7:	0f 84 d1 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144ed:	8d 4a cb             	lea    ecx,[edx-0x35]
c00144f0:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c00144f5:	80 f9 01             	cmp    cl,0x1
c00144f8:	0f 86 c0 00 00 00    	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00144fe:	b8 70 3c 02 c0       	mov    eax,0xc0023c70
c0014503:	80 fa 37             	cmp    dl,0x37
c0014506:	0f 84 b2 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001450c:	b8 80 3c 02 c0       	mov    eax,0xc0023c80
c0014511:	80 fa 3a             	cmp    dl,0x3a
c0014514:	0f 84 a4 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001451a:	b8 90 3c 02 c0       	mov    eax,0xc0023c90
c001451f:	80 fa 3c             	cmp    dl,0x3c
c0014522:	0f 84 96 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014528:	b8 a0 3c 02 c0       	mov    eax,0xc0023ca0
c001452d:	80 fa 3d             	cmp    dl,0x3d
c0014530:	0f 84 88 00 00 00    	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014536:	b8 80 3c 02 c0       	mov    eax,0xc0023c80
c001453b:	80 fa 3e             	cmp    dl,0x3e
c001453e:	74 7e                	je     c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014540:	8d 42 bb             	lea    eax,[edx-0x45]
c0014543:	3c 01                	cmp    al,0x1
c0014545:	76 72                	jbe    c00145b9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0014547:	80 fa 3f             	cmp    dl,0x3f
c001454a:	74 6d                	je     c00145b9 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c001454c:	80 fa 4a             	cmp    dl,0x4a
c001454f:	74 0a                	je     c001455b <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0014551:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c0014556:	80 fa 4d             	cmp    dl,0x4d
c0014559:	75 63                	jne    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001455b:	b8 70 3c 02 c0       	mov    eax,0xc0023c70
c0014560:	c3                   	ret    
c0014561:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c0014566:	80 f9 0b             	cmp    cl,0xb
c0014569:	75 0a                	jne    c0014575 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c001456b:	fe ca                	dec    dl
c001456d:	75 4f                	jne    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001456f:	b8 b0 3c 02 c0       	mov    eax,0xc0023cb0
c0014574:	c3                   	ret    
c0014575:	80 f9 0f             	cmp    cl,0xf
c0014578:	75 44                	jne    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001457a:	b8 c0 3c 02 c0       	mov    eax,0xc0023cc0
c001457f:	80 fa 02             	cmp    dl,0x2
c0014582:	76 3a                	jbe    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014584:	8d 42 fd             	lea    eax,[edx-0x3]
c0014587:	3c 01                	cmp    al,0x1
c0014589:	76 0a                	jbe    c0014595 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c001458b:	b8 fe 23 02 c0       	mov    eax,0xc00223fe
c0014590:	80 fa 06             	cmp    dl,0x6
c0014593:	75 29                	jne    c00145be <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0014595:	b8 d0 3c 02 c0       	mov    eax,0xc0023cd0
c001459a:	c3                   	ret    
c001459b:	b8 b0 3b 02 c0       	mov    eax,0xc0023bb0
c00145a0:	c3                   	ret    
c00145a1:	b8 e0 3b 02 c0       	mov    eax,0xc0023be0
c00145a6:	c3                   	ret    
c00145a7:	b8 00 3c 02 c0       	mov    eax,0xc0023c00
c00145ac:	c3                   	ret    
c00145ad:	b8 30 3c 02 c0       	mov    eax,0xc0023c30
c00145b2:	c3                   	ret    
c00145b3:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c00145b8:	c3                   	ret    
c00145b9:	b8 90 3c 02 c0       	mov    eax,0xc0023c90
c00145be:	c3                   	ret    

c00145bf <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00145bf:	60                   	pusha  
c00145c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145cc:	9c                   	pushf  
c00145cd:	fa                   	cli    
c00145ce:	0f 09                	wbinvd 
c00145d0:	0f 30                	wrmsr  
c00145d2:	9d                   	popf   
c00145d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00145d7:	89 02                	mov    DWORD PTR [edx],eax
c00145d9:	61                   	popa   
c00145da:	c3                   	ret    

c00145db <AMD_K6_read_msr(unsigned int, REGS*)>:
c00145db:	60                   	pusha  
c00145dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145e0:	9c                   	pushf  
c00145e1:	fa                   	cli    
c00145e2:	0f 09                	wbinvd 
c00145e4:	31 c0                	xor    eax,eax
c00145e6:	31 d2                	xor    edx,edx
c00145e8:	0f 32                	rdmsr  
c00145ea:	9d                   	popf   
c00145eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145ef:	89 02                	mov    DWORD PTR [edx],eax
c00145f1:	61                   	popa   
c00145f2:	c3                   	ret    

c00145f3 <AMD_K6_writeback(int, int, int)>:
c00145f3:	56                   	push   esi
c00145f4:	53                   	push   ebx
c00145f5:	83 ec 10             	sub    esp,0x10
c00145f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145fc:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014601:	75 5d                	jne    c0014660 <AMD_K6_writeback(int, int, int)+0x6d>
c0014603:	83 f8 08             	cmp    eax,0x8
c0014606:	75 09                	jne    c0014611 <AMD_K6_writeback(int, int, int)+0x1e>
c0014608:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001460d:	7e 13                	jle    c0014622 <AMD_K6_writeback(int, int, int)+0x2f>
c001460f:	eb 30                	jmp    c0014641 <AMD_K6_writeback(int, int, int)+0x4e>
c0014611:	83 f8 06             	cmp    eax,0x6
c0014614:	7c 4a                	jl     c0014660 <AMD_K6_writeback(int, int, int)+0x6d>
c0014616:	83 f8 07             	cmp    eax,0x7
c0014619:	7e 07                	jle    c0014622 <AMD_K6_writeback(int, int, int)+0x2f>
c001461b:	83 f8 09             	cmp    eax,0x9
c001461e:	74 21                	je     c0014641 <AMD_K6_writeback(int, int, int)+0x4e>
c0014620:	eb 3e                	jmp    c0014660 <AMD_K6_writeback(int, int, int)+0x6d>
c0014622:	89 e6                	mov    esi,esp
c0014624:	8b 1d 04 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024404
c001462a:	56                   	push   esi
c001462b:	c1 eb 15             	shr    ebx,0x15
c001462e:	68 82 00 00 c0       	push   0xc0000082
c0014633:	83 e3 7e             	and    ebx,0x7e
c0014636:	e8 a0 ff ff ff       	call   c00145db <AMD_K6_read_msr(unsigned int, REGS*)>
c001463b:	56                   	push   esi
c001463c:	6a 00                	push   0x0
c001463e:	53                   	push   ebx
c001463f:	eb 12                	jmp    c0014653 <AMD_K6_writeback(int, int, int)+0x60>
c0014641:	89 e3                	mov    ebx,esp
c0014643:	53                   	push   ebx
c0014644:	68 82 00 00 c0       	push   0xc0000082
c0014649:	e8 8d ff ff ff       	call   c00145db <AMD_K6_read_msr(unsigned int, REGS*)>
c001464e:	53                   	push   ebx
c001464f:	6a 00                	push   0x0
c0014651:	6a 00                	push   0x0
c0014653:	68 82 00 00 c0       	push   0xc0000082
c0014658:	e8 62 ff ff ff       	call   c00145bf <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001465d:	83 c4 18             	add    esp,0x18
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	5b                   	pop    ebx
c0014664:	5e                   	pop    esi
c0014665:	c3                   	ret    

c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0014666:	55                   	push   ebp
c0014667:	57                   	push   edi
c0014668:	56                   	push   esi
c0014669:	53                   	push   ebx
c001466a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001466e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014672:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014676:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001467a:	39 05 e0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023de0,eax
c0014680:	75 23                	jne    c00146a5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0014682:	a1 0c 4e 02 c0       	mov    eax,ds:0xc0024e0c
c0014687:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001468b:	89 06                	mov    DWORD PTR [esi],eax
c001468d:	a1 08 4e 02 c0       	mov    eax,ds:0xc0024e08
c0014692:	89 07                	mov    DWORD PTR [edi],eax
c0014694:	a1 04 4e 02 c0       	mov    eax,ds:0xc0024e04
c0014699:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001469c:	a1 00 4e 02 c0       	mov    eax,ds:0xc0024e00
c00146a1:	89 02                	mov    DWORD PTR [edx],eax
c00146a3:	eb 3f                	jmp    c00146e4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00146a5:	31 c9                	xor    ecx,ecx
c00146a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146ab:	0f a2                	cpuid  
c00146ad:	89 06                	mov    DWORD PTR [esi],eax
c00146af:	89 1f                	mov    DWORD PTR [edi],ebx
c00146b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146b5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00146b8:	89 10                	mov    DWORD PTR [eax],edx
c00146ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146be:	a3 e0 3d 02 c0       	mov    ds:0xc0023de0,eax
c00146c3:	8b 06                	mov    eax,DWORD PTR [esi]
c00146c5:	a3 0c 4e 02 c0       	mov    ds:0xc0024e0c,eax
c00146ca:	8b 07                	mov    eax,DWORD PTR [edi]
c00146cc:	a3 08 4e 02 c0       	mov    ds:0xc0024e08,eax
c00146d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146d4:	a3 04 4e 02 c0       	mov    ds:0xc0024e04,eax
c00146d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00146df:	a3 00 4e 02 c0       	mov    ds:0xc0024e00,eax
c00146e4:	5b                   	pop    ebx
c00146e5:	5e                   	pop    esi
c00146e6:	5f                   	pop    edi
c00146e7:	5d                   	pop    ebp
c00146e8:	c3                   	ret    

c00146e9 <cpuidCheckEDX(unsigned int)>:
c00146e9:	83 ec 10             	sub    esp,0x10
c00146ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f0:	50                   	push   eax
c00146f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146f5:	50                   	push   eax
c00146f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146fa:	50                   	push   eax
c00146fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00146ff:	50                   	push   eax
c0014700:	6a 01                	push   0x1
c0014702:	e8 5f ff ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001470b:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001470f:	0f 95 c0             	setne  al
c0014712:	83 c4 24             	add    esp,0x24
c0014715:	c3                   	ret    

c0014716 <cpuidCheckECX(unsigned int)>:
c0014716:	83 ec 10             	sub    esp,0x10
c0014719:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001471d:	50                   	push   eax
c001471e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014722:	50                   	push   eax
c0014723:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014727:	50                   	push   eax
c0014728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001472c:	50                   	push   eax
c001472d:	6a 01                	push   0x1
c001472f:	e8 32 ff ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014734:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014738:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001473c:	0f 95 c0             	setne  al
c001473f:	83 c4 24             	add    esp,0x24
c0014742:	c3                   	ret    

c0014743 <cpuidCheckExtendedEBX(unsigned int)>:
c0014743:	83 ec 10             	sub    esp,0x10
c0014746:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001474a:	50                   	push   eax
c001474b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001474f:	50                   	push   eax
c0014750:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014754:	50                   	push   eax
c0014755:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014759:	50                   	push   eax
c001475a:	6a 07                	push   0x7
c001475c:	e8 05 ff ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014761:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014765:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014769:	0f 95 c0             	setne  al
c001476c:	83 c4 24             	add    esp,0x24
c001476f:	c3                   	ret    

c0014770 <cpuidCheckExtendedECX(unsigned int)>:
c0014770:	83 ec 10             	sub    esp,0x10
c0014773:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014777:	50                   	push   eax
c0014778:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001477c:	50                   	push   eax
c001477d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014781:	50                   	push   eax
c0014782:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014786:	50                   	push   eax
c0014787:	6a 07                	push   0x7
c0014789:	e8 d8 fe ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001478e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014792:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014796:	0f 95 c0             	setne  al
c0014799:	83 c4 24             	add    esp,0x24
c001479c:	c3                   	ret    

c001479d <getCPUNumber()>:
c001479d:	31 c0                	xor    eax,eax
c001479f:	c3                   	ret    

c00147a0 <thisCPU()>:
c00147a0:	e8 f8 ff ff ff       	call   c001479d <getCPUNumber()>
c00147a5:	8b 15 c8 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243c8
c00147ab:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00147b2:	c3                   	ret    
c00147b3:	90                   	nop

c00147b4 <CPU::CPU()>:
c00147b4:	83 ec 0c             	sub    esp,0xc
c00147b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bb:	83 ec 08             	sub    esp,0x8
c00147be:	68 fe 23 02 c0       	push   0xc00223fe
c00147c3:	50                   	push   eax
c00147c4:	e8 6b bf ff ff       	call   c0010734 <Device::Device(char const*)>
c00147c9:	83 c4 10             	add    esp,0x10
c00147cc:	ba d8 24 02 c0       	mov    edx,0xc00224d8
c00147d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d5:	89 10                	mov    DWORD PTR [eax],edx
c00147d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147db:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00147e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e9:	05 78 01 00 00       	add    eax,0x178
c00147ee:	83 ec 0c             	sub    esp,0xc
c00147f1:	50                   	push   eax
c00147f2:	e8 61 70 ff ff       	call   c000b858 <GDT::GDT()>
c00147f7:	83 c4 10             	add    esp,0x10
c00147fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fe:	05 7c 09 00 00       	add    eax,0x97c
c0014803:	83 ec 0c             	sub    esp,0xc
c0014806:	50                   	push   eax
c0014807:	e8 ac 72 ff ff       	call   c000bab8 <IDT::IDT()>
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014813:	05 7c 11 00 00       	add    eax,0x117c
c0014818:	83 ec 0c             	sub    esp,0xc
c001481b:	50                   	push   eax
c001481c:	e8 db 92 ff ff       	call   c000dafc <TSS::TSS()>
c0014821:	83 c4 10             	add    esp,0x10
c0014824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014828:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001482f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014833:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001483d:	90                   	nop
c001483e:	83 c4 0c             	add    esp,0xc
c0014841:	c3                   	ret    

c0014842 <CPU::displayFeatures()>:
c0014842:	53                   	push   ebx
c0014843:	83 ec 10             	sub    esp,0x10
c0014846:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001484a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014850:	68 0c 21 02 c0       	push   0xc002210c
c0014855:	e8 df a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001485a:	59                   	pop    ecx
c001485b:	58                   	pop    eax
c001485c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014862:	50                   	push   eax
c0014863:	68 1d 21 02 c0       	push   0xc002211d
c0014868:	e8 cc a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001486d:	58                   	pop    eax
c001486e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014874:	5a                   	pop    edx
c0014875:	c1 e8 0e             	shr    eax,0xe
c0014878:	0f b6 c0             	movzx  eax,al
c001487b:	50                   	push   eax
c001487c:	68 2e 21 02 c0       	push   0xc002212e
c0014881:	e8 b3 a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014886:	59                   	pop    ecx
c0014887:	58                   	pop    eax
c0014888:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001488e:	66 c1 e8 06          	shr    ax,0x6
c0014892:	0f b6 c0             	movzx  eax,al
c0014895:	50                   	push   eax
c0014896:	68 3f 21 02 c0       	push   0xc002213f
c001489b:	e8 99 a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00148a0:	c7 04 24 52 25 02 c0 	mov    DWORD PTR [esp],0xc0022552
c00148a7:	e8 8d a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00148ac:	83 c4 10             	add    esp,0x10
c00148af:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c00148b4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00148bb:	74 05                	je     c00148c2 <CPU::displayFeatures()+0x80>
c00148bd:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c00148c2:	52                   	push   edx
c00148c3:	52                   	push   edx
c00148c4:	50                   	push   eax
c00148c5:	68 50 21 02 c0       	push   0xc0022150
c00148ca:	e8 6a a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00148cf:	83 c4 10             	add    esp,0x10
c00148d2:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c00148d7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00148de:	78 05                	js     c00148e5 <CPU::displayFeatures()+0xa3>
c00148e0:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c00148e5:	51                   	push   ecx
c00148e6:	51                   	push   ecx
c00148e7:	50                   	push   eax
c00148e8:	68 67 21 02 c0       	push   0xc0022167
c00148ed:	e8 47 a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00148f2:	83 c4 10             	add    esp,0x10
c00148f5:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c00148fa:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014901:	75 05                	jne    c0014908 <CPU::displayFeatures()+0xc6>
c0014903:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014908:	52                   	push   edx
c0014909:	52                   	push   edx
c001490a:	50                   	push   eax
c001490b:	68 7e 21 02 c0       	push   0xc002217e
c0014910:	e8 24 a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014915:	83 c4 10             	add    esp,0x10
c0014918:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c001491d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014924:	75 05                	jne    c001492b <CPU::displayFeatures()+0xe9>
c0014926:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c001492b:	51                   	push   ecx
c001492c:	51                   	push   ecx
c001492d:	50                   	push   eax
c001492e:	68 95 21 02 c0       	push   0xc0022195
c0014933:	e8 01 a8 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014938:	83 c4 10             	add    esp,0x10
c001493b:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014940:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014947:	75 05                	jne    c001494e <CPU::displayFeatures()+0x10c>
c0014949:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c001494e:	52                   	push   edx
c001494f:	52                   	push   edx
c0014950:	50                   	push   eax
c0014951:	68 ac 21 02 c0       	push   0xc00221ac
c0014956:	e8 de a7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001495b:	83 c4 10             	add    esp,0x10
c001495e:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014963:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001496a:	75 05                	jne    c0014971 <CPU::displayFeatures()+0x12f>
c001496c:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014971:	51                   	push   ecx
c0014972:	51                   	push   ecx
c0014973:	50                   	push   eax
c0014974:	68 c3 21 02 c0       	push   0xc00221c3
c0014979:	e8 bb a7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001497e:	83 c4 10             	add    esp,0x10
c0014981:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014986:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001498d:	75 05                	jne    c0014994 <CPU::displayFeatures()+0x152>
c001498f:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014994:	52                   	push   edx
c0014995:	52                   	push   edx
c0014996:	50                   	push   eax
c0014997:	68 da 21 02 c0       	push   0xc00221da
c001499c:	e8 98 a7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00149a1:	83 c4 10             	add    esp,0x10
c00149a4:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c00149a9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00149b0:	75 05                	jne    c00149b7 <CPU::displayFeatures()+0x175>
c00149b2:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c00149b7:	51                   	push   ecx
c00149b8:	51                   	push   ecx
c00149b9:	50                   	push   eax
c00149ba:	68 f1 21 02 c0       	push   0xc00221f1
c00149bf:	e8 75 a7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c00149cc:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00149d3:	75 05                	jne    c00149da <CPU::displayFeatures()+0x198>
c00149d5:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c00149da:	52                   	push   edx
c00149db:	52                   	push   edx
c00149dc:	50                   	push   eax
c00149dd:	68 08 22 02 c0       	push   0xc0022208
c00149e2:	e8 52 a7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00149e7:	83 c4 10             	add    esp,0x10
c00149ea:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c00149ef:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00149f6:	75 05                	jne    c00149fd <CPU::displayFeatures()+0x1bb>
c00149f8:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c00149fd:	51                   	push   ecx
c00149fe:	51                   	push   ecx
c00149ff:	50                   	push   eax
c0014a00:	68 1f 22 02 c0       	push   0xc002221f
c0014a05:	e8 2f a7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014a0a:	83 c4 10             	add    esp,0x10
c0014a0d:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014a12:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014a19:	75 05                	jne    c0014a20 <CPU::displayFeatures()+0x1de>
c0014a1b:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014a20:	52                   	push   edx
c0014a21:	52                   	push   edx
c0014a22:	50                   	push   eax
c0014a23:	68 36 22 02 c0       	push   0xc0022236
c0014a28:	e8 0c a7 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014a2d:	83 c4 10             	add    esp,0x10
c0014a30:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014a35:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014a3c:	75 05                	jne    c0014a43 <CPU::displayFeatures()+0x201>
c0014a3e:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014a43:	51                   	push   ecx
c0014a44:	51                   	push   ecx
c0014a45:	50                   	push   eax
c0014a46:	68 4d 22 02 c0       	push   0xc002224d
c0014a4b:	e8 e9 a6 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014a50:	83 c4 10             	add    esp,0x10
c0014a53:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014a58:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014a5f:	75 05                	jne    c0014a66 <CPU::displayFeatures()+0x224>
c0014a61:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014a66:	52                   	push   edx
c0014a67:	52                   	push   edx
c0014a68:	50                   	push   eax
c0014a69:	68 64 22 02 c0       	push   0xc0022264
c0014a6e:	e8 c6 a6 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014a7b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014a82:	78 05                	js     c0014a89 <CPU::displayFeatures()+0x247>
c0014a84:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014a89:	51                   	push   ecx
c0014a8a:	51                   	push   ecx
c0014a8b:	50                   	push   eax
c0014a8c:	68 7b 22 02 c0       	push   0xc002227b
c0014a91:	e8 a3 a6 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	b8 ee 0d 02 c0       	mov    eax,0xc0020dee
c0014a9e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014aa5:	75 05                	jne    c0014aac <CPU::displayFeatures()+0x26a>
c0014aa7:	b8 f2 0d 02 c0       	mov    eax,0xc0020df2
c0014aac:	52                   	push   edx
c0014aad:	52                   	push   edx
c0014aae:	50                   	push   eax
c0014aaf:	68 92 22 02 c0       	push   0xc0022292
c0014ab4:	e8 80 a6 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0014ab9:	83 c4 18             	add    esp,0x18
c0014abc:	5b                   	pop    ebx
c0014abd:	c3                   	ret    

c0014abe <CPU::detectFeatures()>:
c0014abe:	55                   	push   ebp
c0014abf:	57                   	push   edi
c0014ac0:	56                   	push   esi
c0014ac1:	53                   	push   ebx
c0014ac2:	83 ec 50             	sub    esp,0x50
c0014ac5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014ac9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014ad3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014ada:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014ae0:	6a 0d                	push   0xd
c0014ae2:	6a 00                	push   0x0
c0014ae4:	57                   	push   edi
c0014ae5:	e8 fc bb fe ff       	call   c00006e6 <memset>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0014af2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014af9:	0f 84 20 09 00 00    	je     c001541f <CPU::detectFeatures()+0x961>
c0014aff:	83 ec 0c             	sub    esp,0xc
c0014b02:	6a 10                	push   0x10
c0014b04:	e8 e0 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b09:	83 e0 01             	and    eax,0x1
c0014b0c:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b0f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b15:	83 e0 fd             	and    eax,0xfffffffd
c0014b18:	09 d0                	or     eax,edx
c0014b1a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b20:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014b27:	e8 bd fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b2c:	83 e0 01             	and    eax,0x1
c0014b2f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014b36:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b3c:	83 e0 fb             	and    eax,0xfffffffb
c0014b3f:	09 d0                	or     eax,edx
c0014b41:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b47:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014b4e:	e8 96 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b53:	83 e0 01             	and    eax,0x1
c0014b56:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014b5d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b63:	83 e0 f7             	and    eax,0xfffffff7
c0014b66:	09 d0                	or     eax,edx
c0014b68:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b6e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014b75:	e8 6f fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b7a:	83 e0 01             	and    eax,0x1
c0014b7d:	c1 e0 04             	shl    eax,0x4
c0014b80:	88 c2                	mov    dl,al
c0014b82:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b88:	83 e0 ef             	and    eax,0xffffffef
c0014b8b:	09 d0                	or     eax,edx
c0014b8d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b93:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014b9a:	e8 4a fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014b9f:	83 e0 01             	and    eax,0x1
c0014ba2:	c1 e0 05             	shl    eax,0x5
c0014ba5:	88 c2                	mov    dl,al
c0014ba7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bad:	83 e0 df             	and    eax,0xffffffdf
c0014bb0:	09 d0                	or     eax,edx
c0014bb2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bb8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014bbf:	e8 25 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014bc4:	83 e0 01             	and    eax,0x1
c0014bc7:	8d 14 00             	lea    edx,[eax+eax*1]
c0014bca:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014bd0:	83 e0 fd             	and    eax,0xfffffffd
c0014bd3:	09 d0                	or     eax,edx
c0014bd5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014bdb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014be2:	e8 02 fb ff ff       	call   c00146e9 <cpuidCheckEDX(unsigned int)>
c0014be7:	83 e0 01             	and    eax,0x1
c0014bea:	c1 e0 06             	shl    eax,0x6
c0014bed:	88 c2                	mov    dl,al
c0014bef:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014bf5:	83 e0 bf             	and    eax,0xffffffbf
c0014bf8:	09 d0                	or     eax,edx
c0014bfa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014c00:	58                   	pop    eax
c0014c01:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014c05:	56                   	push   esi
c0014c06:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014c0a:	55                   	push   ebp
c0014c0b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014c0f:	50                   	push   eax
c0014c10:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014c14:	52                   	push   edx
c0014c15:	6a 00                	push   0x0
c0014c17:	e8 4a fa ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014c1c:	83 c4 1c             	add    esp,0x1c
c0014c1f:	6a 04                	push   0x4
c0014c21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014c25:	50                   	push   eax
c0014c26:	57                   	push   edi
c0014c27:	e8 84 ba fe ff       	call   c00006b0 <memcpy>
c0014c2c:	83 c4 0c             	add    esp,0xc
c0014c2f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014c35:	6a 04                	push   0x4
c0014c37:	56                   	push   esi
c0014c38:	50                   	push   eax
c0014c39:	e8 72 ba fe ff       	call   c00006b0 <memcpy>
c0014c3e:	83 c4 0c             	add    esp,0xc
c0014c41:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014c47:	6a 04                	push   0x4
c0014c49:	55                   	push   ebp
c0014c4a:	50                   	push   eax
c0014c4b:	e8 60 ba fe ff       	call   c00006b0 <memcpy>
c0014c50:	58                   	pop    eax
c0014c51:	5a                   	pop    edx
c0014c52:	68 a9 22 02 c0       	push   0xc00222a9
c0014c57:	57                   	push   edi
c0014c58:	e8 79 bb fe ff       	call   c00007d6 <strcmp>
c0014c5d:	83 c4 10             	add    esp,0x10
c0014c60:	85 c0                	test   eax,eax
c0014c62:	75 0f                	jne    c0014c73 <CPU::detectFeatures()+0x1b5>
c0014c64:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014c6e:	e9 22 02 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014c73:	50                   	push   eax
c0014c74:	50                   	push   eax
c0014c75:	68 b6 22 02 c0       	push   0xc00222b6
c0014c7a:	57                   	push   edi
c0014c7b:	e8 56 bb fe ff       	call   c00007d6 <strcmp>
c0014c80:	83 c4 10             	add    esp,0x10
c0014c83:	85 c0                	test   eax,eax
c0014c85:	74 dd                	je     c0014c64 <CPU::detectFeatures()+0x1a6>
c0014c87:	51                   	push   ecx
c0014c88:	51                   	push   ecx
c0014c89:	68 c3 22 02 c0       	push   0xc00222c3
c0014c8e:	57                   	push   edi
c0014c8f:	e8 42 bb fe ff       	call   c00007d6 <strcmp>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	85 c0                	test   eax,eax
c0014c99:	74 2a                	je     c0014cc5 <CPU::detectFeatures()+0x207>
c0014c9b:	52                   	push   edx
c0014c9c:	52                   	push   edx
c0014c9d:	68 d0 22 02 c0       	push   0xc00222d0
c0014ca2:	57                   	push   edi
c0014ca3:	e8 2e bb fe ff       	call   c00007d6 <strcmp>
c0014ca8:	83 c4 10             	add    esp,0x10
c0014cab:	85 c0                	test   eax,eax
c0014cad:	74 16                	je     c0014cc5 <CPU::detectFeatures()+0x207>
c0014caf:	50                   	push   eax
c0014cb0:	50                   	push   eax
c0014cb1:	68 dd 22 02 c0       	push   0xc00222dd
c0014cb6:	57                   	push   edi
c0014cb7:	e8 1a bb fe ff       	call   c00007d6 <strcmp>
c0014cbc:	83 c4 10             	add    esp,0x10
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 48                	je     c0014d0b <CPU::detectFeatures()+0x24d>
c0014cc3:	eb 0f                	jmp    c0014cd4 <CPU::detectFeatures()+0x216>
c0014cc5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014ccf:	e9 c1 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014cd4:	50                   	push   eax
c0014cd5:	50                   	push   eax
c0014cd6:	68 ea 22 02 c0       	push   0xc00222ea
c0014cdb:	57                   	push   edi
c0014cdc:	e8 f5 ba fe ff       	call   c00007d6 <strcmp>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	85 c0                	test   eax,eax
c0014ce6:	74 23                	je     c0014d0b <CPU::detectFeatures()+0x24d>
c0014ce8:	50                   	push   eax
c0014ce9:	50                   	push   eax
c0014cea:	68 f7 22 02 c0       	push   0xc00222f7
c0014cef:	57                   	push   edi
c0014cf0:	e8 e1 ba fe ff       	call   c00007d6 <strcmp>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	85 c0                	test   eax,eax
c0014cfa:	75 1e                	jne    c0014d1a <CPU::detectFeatures()+0x25c>
c0014cfc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014d06:	e9 8a 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d0b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014d15:	e9 7b 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d1a:	50                   	push   eax
c0014d1b:	50                   	push   eax
c0014d1c:	68 04 23 02 c0       	push   0xc0022304
c0014d21:	57                   	push   edi
c0014d22:	e8 af ba fe ff       	call   c00007d6 <strcmp>
c0014d27:	83 c4 10             	add    esp,0x10
c0014d2a:	85 c0                	test   eax,eax
c0014d2c:	75 0f                	jne    c0014d3d <CPU::detectFeatures()+0x27f>
c0014d2e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014d38:	e9 58 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d3d:	50                   	push   eax
c0014d3e:	50                   	push   eax
c0014d3f:	68 c3 22 02 c0       	push   0xc00222c3
c0014d44:	57                   	push   edi
c0014d45:	e8 8c ba fe ff       	call   c00007d6 <strcmp>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	85 c0                	test   eax,eax
c0014d4f:	75 0f                	jne    c0014d60 <CPU::detectFeatures()+0x2a2>
c0014d51:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014d5b:	e9 35 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d60:	50                   	push   eax
c0014d61:	50                   	push   eax
c0014d62:	68 11 23 02 c0       	push   0xc0022311
c0014d67:	57                   	push   edi
c0014d68:	e8 69 ba fe ff       	call   c00007d6 <strcmp>
c0014d6d:	83 c4 10             	add    esp,0x10
c0014d70:	85 c0                	test   eax,eax
c0014d72:	75 0f                	jne    c0014d83 <CPU::detectFeatures()+0x2c5>
c0014d74:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014d7e:	e9 12 01 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014d83:	51                   	push   ecx
c0014d84:	51                   	push   ecx
c0014d85:	68 1e 23 02 c0       	push   0xc002231e
c0014d8a:	57                   	push   edi
c0014d8b:	e8 46 ba fe ff       	call   c00007d6 <strcmp>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	85 c0                	test   eax,eax
c0014d95:	75 0f                	jne    c0014da6 <CPU::detectFeatures()+0x2e8>
c0014d97:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014da1:	e9 ef 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014da6:	52                   	push   edx
c0014da7:	52                   	push   edx
c0014da8:	68 2b 23 02 c0       	push   0xc002232b
c0014dad:	57                   	push   edi
c0014dae:	e8 23 ba fe ff       	call   c00007d6 <strcmp>
c0014db3:	83 c4 10             	add    esp,0x10
c0014db6:	85 c0                	test   eax,eax
c0014db8:	75 0f                	jne    c0014dc9 <CPU::detectFeatures()+0x30b>
c0014dba:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014dc4:	e9 cc 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014dc9:	50                   	push   eax
c0014dca:	50                   	push   eax
c0014dcb:	68 38 23 02 c0       	push   0xc0022338
c0014dd0:	57                   	push   edi
c0014dd1:	e8 00 ba fe ff       	call   c00007d6 <strcmp>
c0014dd6:	83 c4 10             	add    esp,0x10
c0014dd9:	85 c0                	test   eax,eax
c0014ddb:	75 0f                	jne    c0014dec <CPU::detectFeatures()+0x32e>
c0014ddd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014de7:	e9 a9 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014dec:	50                   	push   eax
c0014ded:	50                   	push   eax
c0014dee:	68 45 23 02 c0       	push   0xc0022345
c0014df3:	57                   	push   edi
c0014df4:	e8 dd b9 fe ff       	call   c00007d6 <strcmp>
c0014df9:	83 c4 10             	add    esp,0x10
c0014dfc:	85 c0                	test   eax,eax
c0014dfe:	75 0f                	jne    c0014e0f <CPU::detectFeatures()+0x351>
c0014e00:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014e0a:	e9 86 00 00 00       	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014e0f:	50                   	push   eax
c0014e10:	50                   	push   eax
c0014e11:	68 52 23 02 c0       	push   0xc0022352
c0014e16:	57                   	push   edi
c0014e17:	e8 ba b9 fe ff       	call   c00007d6 <strcmp>
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	85 c0                	test   eax,eax
c0014e21:	75 0c                	jne    c0014e2f <CPU::detectFeatures()+0x371>
c0014e23:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014e2d:	eb 66                	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014e2f:	50                   	push   eax
c0014e30:	50                   	push   eax
c0014e31:	68 5f 23 02 c0       	push   0xc002235f
c0014e36:	57                   	push   edi
c0014e37:	e8 9a b9 fe ff       	call   c00007d6 <strcmp>
c0014e3c:	83 c4 10             	add    esp,0x10
c0014e3f:	85 c0                	test   eax,eax
c0014e41:	75 0c                	jne    c0014e4f <CPU::detectFeatures()+0x391>
c0014e43:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014e4d:	eb 46                	jmp    c0014e95 <CPU::detectFeatures()+0x3d7>
c0014e4f:	50                   	push   eax
c0014e50:	50                   	push   eax
c0014e51:	68 6c 23 02 c0       	push   0xc002236c
c0014e56:	57                   	push   edi
c0014e57:	e8 7a b9 fe ff       	call   c00007d6 <strcmp>
c0014e5c:	83 c4 10             	add    esp,0x10
c0014e5f:	85 c0                	test   eax,eax
c0014e61:	74 e0                	je     c0014e43 <CPU::detectFeatures()+0x385>
c0014e63:	50                   	push   eax
c0014e64:	50                   	push   eax
c0014e65:	68 79 23 02 c0       	push   0xc0022379
c0014e6a:	57                   	push   edi
c0014e6b:	e8 66 b9 fe ff       	call   c00007d6 <strcmp>
c0014e70:	83 c4 10             	add    esp,0x10
c0014e73:	85 c0                	test   eax,eax
c0014e75:	74 cc                	je     c0014e43 <CPU::detectFeatures()+0x385>
c0014e77:	51                   	push   ecx
c0014e78:	51                   	push   ecx
c0014e79:	68 86 23 02 c0       	push   0xc0022386
c0014e7e:	57                   	push   edi
c0014e7f:	e8 52 b9 fe ff       	call   c00007d6 <strcmp>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	85 c0                	test   eax,eax
c0014e89:	74 b8                	je     c0014e43 <CPU::detectFeatures()+0x385>
c0014e8b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014e95:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014e9a:	0f 86 be 00 00 00    	jbe    c0014f5e <CPU::detectFeatures()+0x4a0>
c0014ea0:	83 ec 0c             	sub    esp,0xc
c0014ea3:	68 80 00 00 00       	push   0x80
c0014ea8:	e8 96 f8 ff ff       	call   c0014743 <cpuidCheckExtendedEBX(unsigned int)>
c0014ead:	83 e0 01             	and    eax,0x1
c0014eb0:	c1 e0 06             	shl    eax,0x6
c0014eb3:	88 c2                	mov    dl,al
c0014eb5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ebb:	83 e0 bf             	and    eax,0xffffffbf
c0014ebe:	09 d0                	or     eax,edx
c0014ec0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ec6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014ecd:	e8 71 f8 ff ff       	call   c0014743 <cpuidCheckExtendedEBX(unsigned int)>
c0014ed2:	83 e0 01             	and    eax,0x1
c0014ed5:	c1 e0 04             	shl    eax,0x4
c0014ed8:	88 c2                	mov    dl,al
c0014eda:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014ee0:	83 e0 ef             	and    eax,0xffffffef
c0014ee3:	09 d0                	or     eax,edx
c0014ee5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014eeb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014ef2:	e8 4c f8 ff ff       	call   c0014743 <cpuidCheckExtendedEBX(unsigned int)>
c0014ef7:	c1 e0 07             	shl    eax,0x7
c0014efa:	88 c2                	mov    dl,al
c0014efc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f02:	83 e0 7f             	and    eax,0x7f
c0014f05:	09 d0                	or     eax,edx
c0014f07:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f0d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f14:	e8 57 f8 ff ff       	call   c0014770 <cpuidCheckExtendedECX(unsigned int)>
c0014f19:	83 e0 01             	and    eax,0x1
c0014f1c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014f23:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f29:	83 e0 f7             	and    eax,0xfffffff7
c0014f2c:	09 d0                	or     eax,edx
c0014f2e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f34:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014f3b:	e8 30 f8 ff ff       	call   c0014770 <cpuidCheckExtendedECX(unsigned int)>
c0014f40:	83 c4 10             	add    esp,0x10
c0014f43:	83 e0 01             	and    eax,0x1
c0014f46:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014f4d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014f53:	83 e0 fb             	and    eax,0xfffffffb
c0014f56:	09 d0                	or     eax,edx
c0014f58:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014f5e:	83 ec 0c             	sub    esp,0xc
c0014f61:	56                   	push   esi
c0014f62:	55                   	push   ebp
c0014f63:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014f67:	57                   	push   edi
c0014f68:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014f6c:	50                   	push   eax
c0014f6d:	6a 01                	push   0x1
c0014f6f:	e8 f2 f6 ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014f74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f78:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014f7e:	88 ca                	mov    dl,cl
c0014f80:	83 e0 f0             	and    eax,0xfffffff0
c0014f83:	83 e2 0f             	and    edx,0xf
c0014f86:	09 d0                	or     eax,edx
c0014f88:	88 ca                	mov    dl,cl
c0014f8a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014f90:	c0 ea 04             	shr    dl,0x4
c0014f93:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014f97:	0f b6 c2             	movzx  eax,dl
c0014f9a:	83 c4 20             	add    esp,0x20
c0014f9d:	c1 e0 06             	shl    eax,0x6
c0014fa0:	89 c5                	mov    ebp,eax
c0014fa2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014fa8:	66 25 3f c0          	and    ax,0xc03f
c0014fac:	09 e8                	or     eax,ebp
c0014fae:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014fb5:	89 c8                	mov    eax,ecx
c0014fb7:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014fbd:	c1 e8 08             	shr    eax,0x8
c0014fc0:	83 e2 3f             	and    edx,0x3f
c0014fc3:	83 e0 0f             	and    eax,0xf
c0014fc6:	89 c5                	mov    ebp,eax
c0014fc8:	c1 e5 06             	shl    ebp,0x6
c0014fcb:	09 d5                	or     ebp,edx
c0014fcd:	89 ea                	mov    edx,ebp
c0014fcf:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014fd5:	88 c2                	mov    dl,al
c0014fd7:	c0 ea 02             	shr    dl,0x2
c0014fda:	89 d5                	mov    ebp,edx
c0014fdc:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014fe2:	83 e2 c0             	and    edx,0xffffffc0
c0014fe5:	09 d5                	or     ebp,edx
c0014fe7:	89 ea                	mov    edx,ebp
c0014fe9:	89 cd                	mov    ebp,ecx
c0014feb:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014ff1:	c1 ed 0c             	shr    ebp,0xc
c0014ff4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014ffa:	83 e5 03             	and    ebp,0x3
c0014ffd:	83 e2 cf             	and    edx,0xffffffcf
c0015000:	c1 e5 04             	shl    ebp,0x4
c0015003:	09 d5                	or     ebp,edx
c0015005:	3c 06                	cmp    al,0x6
c0015007:	89 ea                	mov    edx,ebp
c0015009:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001500f:	74 04                	je     c0015015 <CPU::detectFeatures()+0x557>
c0015011:	3c 0f                	cmp    al,0xf
c0015013:	75 5c                	jne    c0015071 <CPU::detectFeatures()+0x5b3>
c0015015:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015019:	89 cd                	mov    ebp,ecx
c001501b:	c1 ed 10             	shr    ebp,0x10
c001501e:	c1 e5 04             	shl    ebp,0x4
c0015021:	09 ea                	or     edx,ebp
c0015023:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015029:	0f b6 d2             	movzx  edx,dl
c001502c:	66 81 e5 3f c0       	and    bp,0xc03f
c0015031:	c1 e2 06             	shl    edx,0x6
c0015034:	09 ea                	or     edx,ebp
c0015036:	3c 0f                	cmp    al,0xf
c0015038:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001503f:	75 30                	jne    c0015071 <CPU::detectFeatures()+0x5b3>
c0015041:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0015047:	c1 e9 14             	shr    ecx,0x14
c001504a:	83 e0 3f             	and    eax,0x3f
c001504d:	83 c1 0f             	add    ecx,0xf
c0015050:	88 ca                	mov    dl,cl
c0015052:	c0 e9 02             	shr    cl,0x2
c0015055:	c1 e2 06             	shl    edx,0x6
c0015058:	09 d0                	or     eax,edx
c001505a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0015060:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0015066:	83 e0 c0             	and    eax,0xffffffc0
c0015069:	09 c1                	or     ecx,eax
c001506b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015071:	83 ec 0c             	sub    esp,0xc
c0015074:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001507b:	56                   	push   esi
c001507c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015080:	50                   	push   eax
c0015081:	57                   	push   edi
c0015082:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0015086:	55                   	push   ebp
c0015087:	68 00 00 00 80       	push   0x80000000
c001508c:	e8 d5 f5 ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015091:	83 c4 20             	add    esp,0x20
c0015094:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001509c:	8d 44 24 18          	lea    eax,[esp+0x18]
c00150a0:	76 1e                	jbe    c00150c0 <CPU::detectFeatures()+0x602>
c00150a2:	83 ec 0c             	sub    esp,0xc
c00150a5:	56                   	push   esi
c00150a6:	50                   	push   eax
c00150a7:	57                   	push   edi
c00150a8:	55                   	push   ebp
c00150a9:	68 01 00 00 80       	push   0x80000001
c00150ae:	e8 b3 f5 ff ff       	call   c0014666 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150b3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00150bd:	83 c4 20             	add    esp,0x20
c00150c0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00150c6:	83 f8 01             	cmp    eax,0x1
c00150c9:	75 6f                	jne    c001513a <CPU::detectFeatures()+0x67c>
c00150cb:	51                   	push   ecx
c00150cc:	51                   	push   ecx
c00150cd:	68 92 23 02 c0       	push   0xc0022392
c00150d2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00150d6:	56                   	push   esi
c00150d7:	e8 a9 b6 fe ff       	call   c0000785 <strcpy>
c00150dc:	5f                   	pop    edi
c00150dd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150e3:	5d                   	pop    ebp
c00150e4:	66 c1 e8 06          	shr    ax,0x6
c00150e8:	0f b6 c0             	movzx  eax,al
c00150eb:	50                   	push   eax
c00150ec:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00150f2:	c1 e8 0e             	shr    eax,0xe
c00150f5:	0f b6 c0             	movzx  eax,al
c00150f8:	50                   	push   eax
c00150f9:	e8 13 f2 ff ff       	call   c0014311 <lookupIntelCPUName(unsigned char, unsigned char)>
c00150fe:	5a                   	pop    edx
c00150ff:	59                   	pop    ecx
c0015100:	50                   	push   eax
c0015101:	56                   	push   esi
c0015102:	e8 35 b7 fe ff       	call   c000083c <strcat>
c0015107:	5f                   	pop    edi
c0015108:	5d                   	pop    ebp
c0015109:	56                   	push   esi
c001510a:	53                   	push   ebx
c001510b:	e8 16 b6 ff ff       	call   c0010726 <Device::setName(char const*)>
c0015110:	58                   	pop    eax
c0015111:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015117:	5a                   	pop    edx
c0015118:	68 99 23 02 c0       	push   0xc0022399
c001511d:	50                   	push   eax
c001511e:	e8 b3 b6 fe ff       	call   c00007d6 <strcmp>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	85 c0                	test   eax,eax
c0015128:	0f 85 73 03 00 00    	jne    c00154a1 <CPU::detectFeatures()+0x9e3>
c001512e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0015135:	e9 67 03 00 00       	jmp    c00154a1 <CPU::detectFeatures()+0x9e3>
c001513a:	83 f8 02             	cmp    eax,0x2
c001513d:	0f 85 b5 00 00 00    	jne    c00151f8 <CPU::detectFeatures()+0x73a>
c0015143:	57                   	push   edi
c0015144:	57                   	push   edi
c0015145:	68 ab 23 02 c0       	push   0xc00223ab
c001514a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001514e:	56                   	push   esi
c001514f:	e8 31 b6 fe ff       	call   c0000785 <strcpy>
c0015154:	5d                   	pop    ebp
c0015155:	58                   	pop    eax
c0015156:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001515c:	66 c1 e8 06          	shr    ax,0x6
c0015160:	0f b6 c0             	movzx  eax,al
c0015163:	50                   	push   eax
c0015164:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001516a:	c1 e8 0e             	shr    eax,0xe
c001516d:	0f b6 c0             	movzx  eax,al
c0015170:	50                   	push   eax
c0015171:	e8 07 f0 ff ff       	call   c001417d <lookupAMDCPUName(unsigned char, unsigned char)>
c0015176:	5a                   	pop    edx
c0015177:	59                   	pop    ecx
c0015178:	50                   	push   eax
c0015179:	56                   	push   esi
c001517a:	e8 bd b6 fe ff       	call   c000083c <strcat>
c001517f:	5f                   	pop    edi
c0015180:	5d                   	pop    ebp
c0015181:	56                   	push   esi
c0015182:	53                   	push   ebx
c0015183:	e8 9e b5 ff ff       	call   c0010726 <Device::setName(char const*)>
c0015188:	58                   	pop    eax
c0015189:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001518f:	5a                   	pop    edx
c0015190:	68 b0 23 02 c0       	push   0xc00223b0
c0015195:	50                   	push   eax
c0015196:	e8 3b b6 fe ff       	call   c00007d6 <strcmp>
c001519b:	83 c4 10             	add    esp,0x10
c001519e:	85 c0                	test   eax,eax
c00151a0:	75 20                	jne    c00151c2 <CPU::detectFeatures()+0x704>
c00151a2:	8b 15 c8 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243c8
c00151a8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00151ae:	a8 01                	test   al,0x1
c00151b0:	74 10                	je     c00151c2 <CPU::detectFeatures()+0x704>
c00151b2:	83 e0 fe             	and    eax,0xfffffffe
c00151b5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00151bb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00151c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151c8:	c1 e8 0e             	shr    eax,0xe
c00151cb:	3c 05                	cmp    al,0x5
c00151cd:	0f 85 ce 02 00 00    	jne    c00154a1 <CPU::detectFeatures()+0x9e3>
c00151d3:	56                   	push   esi
c00151d4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00151da:	83 e0 0f             	and    eax,0xf
c00151dd:	50                   	push   eax
c00151de:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151e4:	66 c1 e8 06          	shr    ax,0x6
c00151e8:	0f b6 c0             	movzx  eax,al
c00151eb:	50                   	push   eax
c00151ec:	6a 05                	push   0x5
c00151ee:	e8 00 f4 ff ff       	call   c00145f3 <AMD_K6_writeback(int, int, int)>
c00151f3:	e9 1f 02 00 00       	jmp    c0015417 <CPU::detectFeatures()+0x959>
c00151f8:	8d 50 fd             	lea    edx,[eax-0x3]
c00151fb:	83 fa 01             	cmp    edx,0x1
c00151fe:	76 09                	jbe    c0015209 <CPU::detectFeatures()+0x74b>
c0015200:	83 f8 06             	cmp    eax,0x6
c0015203:	0f 85 91 01 00 00    	jne    c001539a <CPU::detectFeatures()+0x8dc>
c0015209:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001520f:	c1 ea 0e             	shr    edx,0xe
c0015212:	80 fa 05             	cmp    dl,0x5
c0015215:	75 7b                	jne    c0015292 <CPU::detectFeatures()+0x7d4>
c0015217:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001521d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0015222:	66 81 fa 00 01       	cmp    dx,0x100
c0015227:	75 0c                	jne    c0015235 <CPU::detectFeatures()+0x777>
c0015229:	51                   	push   ecx
c001522a:	51                   	push   ecx
c001522b:	68 b7 23 02 c0       	push   0xc00223b7
c0015230:	e9 dc 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c0015235:	66 81 fa 00 02       	cmp    dx,0x200
c001523a:	75 0c                	jne    c0015248 <CPU::detectFeatures()+0x78a>
c001523c:	52                   	push   edx
c001523d:	52                   	push   edx
c001523e:	68 ca 23 02 c0       	push   0xc00223ca
c0015243:	e9 c9 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c0015248:	66 81 fa 40 02       	cmp    dx,0x240
c001524d:	75 0c                	jne    c001525b <CPU::detectFeatures()+0x79d>
c001524f:	50                   	push   eax
c0015250:	50                   	push   eax
c0015251:	68 dc 23 02 c0       	push   0xc00223dc
c0015256:	e9 b6 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c001525b:	83 f8 06             	cmp    eax,0x6
c001525e:	75 0c                	jne    c001526c <CPU::detectFeatures()+0x7ae>
c0015260:	50                   	push   eax
c0015261:	50                   	push   eax
c0015262:	68 ee 23 02 c0       	push   0xc00223ee
c0015267:	e9 a5 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c001526c:	83 f8 04             	cmp    eax,0x4
c001526f:	75 0c                	jne    c001527d <CPU::detectFeatures()+0x7bf>
c0015271:	50                   	push   eax
c0015272:	50                   	push   eax
c0015273:	68 fa 23 02 c0       	push   0xc00223fa
c0015278:	e9 94 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c001527d:	83 f8 03             	cmp    eax,0x3
c0015280:	0f 85 1b 02 00 00    	jne    c00154a1 <CPU::detectFeatures()+0x9e3>
c0015286:	50                   	push   eax
c0015287:	50                   	push   eax
c0015288:	68 02 24 02 c0       	push   0xc0022402
c001528d:	e9 7f 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c0015292:	80 fa 06             	cmp    dl,0x6
c0015295:	0f 85 db 00 00 00    	jne    c0015376 <CPU::detectFeatures()+0x8b8>
c001529b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00152a1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00152a6:	66 81 fa 80 01       	cmp    dx,0x180
c00152ab:	75 0c                	jne    c00152b9 <CPU::detectFeatures()+0x7fb>
c00152ad:	50                   	push   eax
c00152ae:	50                   	push   eax
c00152af:	68 0d 24 02 c0       	push   0xc002240d
c00152b4:	e9 58 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00152b9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00152bf:	66 f7 c1 80 ff       	test   cx,0xff80
c00152c4:	75 0c                	jne    c00152d2 <CPU::detectFeatures()+0x814>
c00152c6:	50                   	push   eax
c00152c7:	50                   	push   eax
c00152c8:	68 1d 24 02 c0       	push   0xc002241d
c00152cd:	e9 3f 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00152d2:	66 81 fa 40 02       	cmp    dx,0x240
c00152d7:	75 0c                	jne    c00152e5 <CPU::detectFeatures()+0x827>
c00152d9:	55                   	push   ebp
c00152da:	55                   	push   ebp
c00152db:	68 24 24 02 c0       	push   0xc0022424
c00152e0:	e9 2c 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00152e5:	66 81 fa 80 02       	cmp    dx,0x280
c00152ea:	75 0c                	jne    c00152f8 <CPU::detectFeatures()+0x83a>
c00152ec:	57                   	push   edi
c00152ed:	57                   	push   edi
c00152ee:	68 2d 24 02 c0       	push   0xc002242d
c00152f3:	e9 19 01 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00152f8:	66 81 fa 40 03       	cmp    dx,0x340
c00152fd:	74 ed                	je     c00152ec <CPU::detectFeatures()+0x82e>
c00152ff:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015304:	75 0c                	jne    c0015312 <CPU::detectFeatures()+0x854>
c0015306:	56                   	push   esi
c0015307:	56                   	push   esi
c0015308:	68 34 24 02 c0       	push   0xc0022434
c001530d:	e9 ff 00 00 00       	jmp    c0015411 <CPU::detectFeatures()+0x953>
c0015312:	83 f8 06             	cmp    eax,0x6
c0015315:	0f 84 45 ff ff ff    	je     c0015260 <CPU::detectFeatures()+0x7a2>
c001531b:	83 f8 04             	cmp    eax,0x4
c001531e:	0f 84 4d ff ff ff    	je     c0015271 <CPU::detectFeatures()+0x7b3>
c0015324:	83 f8 03             	cmp    eax,0x3
c0015327:	0f 85 74 01 00 00    	jne    c00154a1 <CPU::detectFeatures()+0x9e3>
c001532d:	51                   	push   ecx
c001532e:	51                   	push   ecx
c001532f:	68 3d 24 02 c0       	push   0xc002243d
c0015334:	53                   	push   ebx
c0015335:	e8 ec b3 ff ff       	call   c0010726 <Device::setName(char const*)>
c001533a:	b1 c1                	mov    cl,0xc1
c001533c:	88 c8                	mov    al,cl
c001533e:	e6 22                	out    0x22,al
c0015340:	e4 23                	in     al,0x23
c0015342:	88 c2                	mov    dl,al
c0015344:	88 c8                	mov    al,cl
c0015346:	e6 22                	out    0x22,al
c0015348:	88 d0                	mov    al,dl
c001534a:	83 c8 10             	or     eax,0x10
c001534d:	e6 23                	out    0x23,al
c001534f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015356:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0015359:	89 d0                	mov    eax,edx
c001535b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015361:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015365:	40                   	inc    eax
c0015366:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001536c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015371:	e9 a1 00 00 00       	jmp    c0015417 <CPU::detectFeatures()+0x959>
c0015376:	83 f8 06             	cmp    eax,0x6
c0015379:	0f 84 e1 fe ff ff    	je     c0015260 <CPU::detectFeatures()+0x7a2>
c001537f:	83 f8 04             	cmp    eax,0x4
c0015382:	0f 84 e9 fe ff ff    	je     c0015271 <CPU::detectFeatures()+0x7b3>
c0015388:	83 f8 03             	cmp    eax,0x3
c001538b:	0f 85 10 01 00 00    	jne    c00154a1 <CPU::detectFeatures()+0x9e3>
c0015391:	52                   	push   edx
c0015392:	52                   	push   edx
c0015393:	68 48 24 02 c0       	push   0xc0022448
c0015398:	eb 77                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c001539a:	83 f8 07             	cmp    eax,0x7
c001539d:	75 09                	jne    c00153a8 <CPU::detectFeatures()+0x8ea>
c001539f:	50                   	push   eax
c00153a0:	50                   	push   eax
c00153a1:	68 52 24 02 c0       	push   0xc0022452
c00153a6:	eb 69                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00153a8:	83 f8 0a             	cmp    eax,0xa
c00153ab:	75 09                	jne    c00153b6 <CPU::detectFeatures()+0x8f8>
c00153ad:	50                   	push   eax
c00153ae:	50                   	push   eax
c00153af:	68 5d 24 02 c0       	push   0xc002245d
c00153b4:	eb 5b                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00153b6:	83 f8 0b             	cmp    eax,0xb
c00153b9:	75 09                	jne    c00153c4 <CPU::detectFeatures()+0x906>
c00153bb:	50                   	push   eax
c00153bc:	50                   	push   eax
c00153bd:	68 65 24 02 c0       	push   0xc0022465
c00153c2:	eb 4d                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00153c4:	83 f8 08             	cmp    eax,0x8
c00153c7:	75 09                	jne    c00153d2 <CPU::detectFeatures()+0x914>
c00153c9:	50                   	push   eax
c00153ca:	50                   	push   eax
c00153cb:	68 6e 24 02 c0       	push   0xc002246e
c00153d0:	eb 3f                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00153d2:	83 f8 09             	cmp    eax,0x9
c00153d5:	75 09                	jne    c00153e0 <CPU::detectFeatures()+0x922>
c00153d7:	50                   	push   eax
c00153d8:	50                   	push   eax
c00153d9:	68 76 24 02 c0       	push   0xc0022476
c00153de:	eb 31                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00153e0:	83 f8 05             	cmp    eax,0x5
c00153e3:	75 09                	jne    c00153ee <CPU::detectFeatures()+0x930>
c00153e5:	50                   	push   eax
c00153e6:	50                   	push   eax
c00153e7:	68 7e 24 02 c0       	push   0xc002247e
c00153ec:	eb 23                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00153ee:	83 f8 0c             	cmp    eax,0xc
c00153f1:	75 09                	jne    c00153fc <CPU::detectFeatures()+0x93e>
c00153f3:	55                   	push   ebp
c00153f4:	55                   	push   ebp
c00153f5:	68 8c 24 02 c0       	push   0xc002248c
c00153fa:	eb 15                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c00153fc:	83 f8 0d             	cmp    eax,0xd
c00153ff:	75 09                	jne    c001540a <CPU::detectFeatures()+0x94c>
c0015401:	57                   	push   edi
c0015402:	57                   	push   edi
c0015403:	68 97 24 02 c0       	push   0xc0022497
c0015408:	eb 07                	jmp    c0015411 <CPU::detectFeatures()+0x953>
c001540a:	56                   	push   esi
c001540b:	56                   	push   esi
c001540c:	68 ab 24 02 c0       	push   0xc00224ab
c0015411:	53                   	push   ebx
c0015412:	e8 0f b3 ff ff       	call   c0010726 <Device::setName(char const*)>
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	e9 82 00 00 00       	jmp    c00154a1 <CPU::detectFeatures()+0x9e3>
c001541f:	51                   	push   ecx
c0015420:	51                   	push   ecx
c0015421:	68 f7 22 02 c0       	push   0xc00222f7
c0015426:	57                   	push   edi
c0015427:	e8 59 b3 fe ff       	call   c0000785 <strcpy>
c001542c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015436:	e8 22 ae fe ff       	call   c000025d <is486>
c001543b:	83 c4 10             	add    esp,0x10
c001543e:	85 c0                	test   eax,eax
c0015440:	74 2d                	je     c001546f <CPU::detectFeatures()+0x9b1>
c0015442:	52                   	push   edx
c0015443:	52                   	push   edx
c0015444:	68 b7 24 02 c0       	push   0xc00224b7
c0015449:	53                   	push   ebx
c001544a:	e8 d7 b2 ff ff       	call   c0010726 <Device::setName(char const*)>
c001544f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015456:	e8 ed a3 00 00       	call   c001f848 <CPU::readCR0()>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	83 e0 14             	and    eax,0x14
c0015461:	83 f8 04             	cmp    eax,0x4
c0015464:	75 1f                	jne    c0015485 <CPU::detectFeatures()+0x9c7>
c0015466:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001546d:	eb 32                	jmp    c00154a1 <CPU::detectFeatures()+0x9e3>
c001546f:	50                   	push   eax
c0015470:	50                   	push   eax
c0015471:	68 c2 24 02 c0       	push   0xc00224c2
c0015476:	53                   	push   ebx
c0015477:	e8 aa b2 ff ff       	call   c0010726 <Device::setName(char const*)>
c001547c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0015483:	eb d1                	jmp    c0015456 <CPU::detectFeatures()+0x998>
c0015485:	e8 ae ad fe ff       	call   c0000238 <hasLegacyFPU>
c001548a:	83 e0 01             	and    eax,0x1
c001548d:	8d 14 00             	lea    edx,[eax+eax*1]
c0015490:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015496:	83 e0 fd             	and    eax,0xfffffffd
c0015499:	09 d0                	or     eax,edx
c001549b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00154a1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00154a8:	83 c4 4c             	add    esp,0x4c
c00154ab:	5b                   	pop    ebx
c00154ac:	5e                   	pop    esi
c00154ad:	5f                   	pop    edi
c00154ae:	5d                   	pop    ebp
c00154af:	c3                   	ret    

c00154b0 <CPU::setupSMEP()>:
c00154b0:	83 ec 0c             	sub    esp,0xc
c00154b3:	e8 5a a6 00 00       	call   c001fb12 <CPU::readCR4()>
c00154b8:	0d 00 00 10 00       	or     eax,0x100000
c00154bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154c1:	83 c4 0c             	add    esp,0xc
c00154c4:	e9 64 a6 00 00       	jmp    c001fb2d <CPU::writeCR4(unsigned long)>
c00154c9:	90                   	nop

c00154ca <CPU::setupUMIP()>:
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	e8 40 a6 00 00       	call   c001fb12 <CPU::readCR4()>
c00154d2:	80 cc 08             	or     ah,0x8
c00154d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154d9:	83 c4 0c             	add    esp,0xc
c00154dc:	e9 4c a6 00 00       	jmp    c001fb2d <CPU::writeCR4(unsigned long)>
c00154e1:	90                   	nop

c00154e2 <CPU::setupTSC()>:
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	e8 28 a6 00 00       	call   c001fb12 <CPU::readCR4()>
c00154ea:	83 c8 04             	or     eax,0x4
c00154ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00154f1:	83 c4 0c             	add    esp,0xc
c00154f4:	e9 34 a6 00 00       	jmp    c001fb2d <CPU::writeCR4(unsigned long)>
c00154f9:	90                   	nop

c00154fa <CPU::setupLargePages()>:
c00154fa:	83 ec 0c             	sub    esp,0xc
c00154fd:	e8 10 a6 00 00       	call   c001fb12 <CPU::readCR4()>
c0015502:	83 c8 10             	or     eax,0x10
c0015505:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015509:	83 c4 0c             	add    esp,0xc
c001550c:	e9 1c a6 00 00       	jmp    c001fb2d <CPU::writeCR4(unsigned long)>
c0015511:	90                   	nop

c0015512 <CPU::setupPAT()>:
c0015512:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0015517:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001551e:	74 2c                	je     c001554c <CPU::setupPAT()+0x3a>
c0015520:	53                   	push   ebx
c0015521:	83 ec 10             	sub    esp,0x10
c0015524:	68 77 02 00 00       	push   0x277
c0015529:	50                   	push   eax
c001552a:	e8 b9 60 ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c001552f:	83 e2 f8             	and    edx,0xfffffff8
c0015532:	83 ca 01             	or     edx,0x1
c0015535:	52                   	push   edx
c0015536:	50                   	push   eax
c0015537:	68 77 02 00 00       	push   0x277
c001553c:	ff 35 c8 43 02 c0    	push   DWORD PTR ds:0xc00243c8
c0015542:	e8 cd 60 ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c0015547:	83 c4 28             	add    esp,0x28
c001554a:	5b                   	pop    ebx
c001554b:	c3                   	ret    
c001554c:	c3                   	ret    
c001554d:	90                   	nop

c001554e <CPU::setupMTRR()>:
c001554e:	c3                   	ret    
c001554f:	90                   	nop

c0015550 <CPU::setupGlobalPages()>:
c0015550:	83 ec 0c             	sub    esp,0xc
c0015553:	e8 ba a5 00 00       	call   c001fb12 <CPU::readCR4()>
c0015558:	0c 80                	or     al,0x80
c001555a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001555e:	83 c4 0c             	add    esp,0xc
c0015561:	e9 c7 a5 00 00       	jmp    c001fb2d <CPU::writeCR4(unsigned long)>

c0015566 <CPU::allowUsermodeDataAccess()>:
c0015566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001556a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015571:	74 03                	je     c0015576 <CPU::allowUsermodeDataAccess()+0x10>
c0015573:	0f 01 cb             	stac   
c0015576:	c3                   	ret    
c0015577:	90                   	nop

c0015578 <CPU::prohibitUsermodeDataAccess()>:
c0015578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001557c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015583:	74 03                	je     c0015588 <CPU::prohibitUsermodeDataAccess()+0x10>
c0015585:	0f 01 ca             	clac   
c0015588:	c3                   	ret    
c0015589:	90                   	nop

c001558a <CPU::setupSMAP()>:
c001558a:	53                   	push   ebx
c001558b:	83 ec 08             	sub    esp,0x8
c001558e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015592:	e8 7b a5 00 00       	call   c001fb12 <CPU::readCR4()>
c0015597:	83 ec 0c             	sub    esp,0xc
c001559a:	0d 00 00 20 00       	or     eax,0x200000
c001559f:	50                   	push   eax
c00155a0:	e8 88 a5 00 00       	call   c001fb2d <CPU::writeCR4(unsigned long)>
c00155a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00155a9:	83 c4 18             	add    esp,0x18
c00155ac:	5b                   	pop    ebx
c00155ad:	eb c9                	jmp    c0015578 <CPU::prohibitUsermodeDataAccess()>
c00155af:	90                   	nop

c00155b0 <CPU::setupFeatures()>:
c00155b0:	53                   	push   ebx
c00155b1:	83 ec 08             	sub    esp,0x8
c00155b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155b8:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00155bf:	74 0c                	je     c00155cd <CPU::setupFeatures()+0x1d>
c00155c1:	83 ec 0c             	sub    esp,0xc
c00155c4:	53                   	push   ebx
c00155c5:	e8 e6 fe ff ff       	call   c00154b0 <CPU::setupSMEP()>
c00155ca:	83 c4 10             	add    esp,0x10
c00155cd:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00155d4:	74 0c                	je     c00155e2 <CPU::setupFeatures()+0x32>
c00155d6:	83 ec 0c             	sub    esp,0xc
c00155d9:	53                   	push   ebx
c00155da:	e8 ab ff ff ff       	call   c001558a <CPU::setupSMAP()>
c00155df:	83 c4 10             	add    esp,0x10
c00155e2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00155e9:	74 0c                	je     c00155f7 <CPU::setupFeatures()+0x47>
c00155eb:	83 ec 0c             	sub    esp,0xc
c00155ee:	53                   	push   ebx
c00155ef:	e8 d6 fe ff ff       	call   c00154ca <CPU::setupUMIP()>
c00155f4:	83 c4 10             	add    esp,0x10
c00155f7:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00155fe:	74 0c                	je     c001560c <CPU::setupFeatures()+0x5c>
c0015600:	83 ec 0c             	sub    esp,0xc
c0015603:	53                   	push   ebx
c0015604:	e8 d9 fe ff ff       	call   c00154e2 <CPU::setupTSC()>
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015613:	74 0c                	je     c0015621 <CPU::setupFeatures()+0x71>
c0015615:	83 ec 0c             	sub    esp,0xc
c0015618:	53                   	push   ebx
c0015619:	e8 dc fe ff ff       	call   c00154fa <CPU::setupLargePages()>
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015628:	74 0c                	je     c0015636 <CPU::setupFeatures()+0x86>
c001562a:	83 ec 0c             	sub    esp,0xc
c001562d:	53                   	push   ebx
c001562e:	e8 1d ff ff ff       	call   c0015550 <CPU::setupGlobalPages()>
c0015633:	83 c4 10             	add    esp,0x10
c0015636:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001563d:	74 0d                	je     c001564c <CPU::setupFeatures()+0x9c>
c001563f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015643:	83 c4 08             	add    esp,0x8
c0015646:	5b                   	pop    ebx
c0015647:	e9 c6 fe ff ff       	jmp    c0015512 <CPU::setupPAT()>
c001564c:	83 c4 08             	add    esp,0x8
c001564f:	5b                   	pop    ebx
c0015650:	c3                   	ret    
c0015651:	90                   	nop

c0015652 <CPU::open(int, int, void*)>:
c0015652:	57                   	push   edi
c0015653:	56                   	push   esi
c0015654:	53                   	push   ebx
c0015655:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015659:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001565d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015663:	83 ec 0c             	sub    esp,0xc
c0015666:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001566c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015672:	50                   	push   eax
c0015673:	e8 5c 62 ff ff       	call   c000b8d4 <GDT::setup()>
c0015678:	83 c4 0c             	add    esp,0xc
c001567b:	6a 00                	push   0x0
c001567d:	68 ef be ad de       	push   0xdeadbeef
c0015682:	57                   	push   edi
c0015683:	e8 b4 84 ff ff       	call   c000db3c <TSS::setup(unsigned long, unsigned long)>
c0015688:	89 3c 24             	mov    DWORD PTR [esp],edi
c001568b:	e8 8c 84 ff ff       	call   c000db1c <TSS::flush()>
c0015690:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0015696:	89 04 24             	mov    DWORD PTR [esp],eax
c0015699:	e8 90 64 ff ff       	call   c000bb2e <IDT::setup()>
c001569e:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00156a5:	e8 7a a4 00 00       	call   c001fb24 <CPU::writeDR7(unsigned long)>
c00156aa:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00156b4:	e8 39 6f ff ff       	call   c000c5f2 <Phys::allocatePage()>
c00156b9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00156bf:	89 30                	mov    DWORD PTR [eax],esi
c00156c1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00156c7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00156ca:	58                   	pop    eax
c00156cb:	5a                   	pop    edx
c00156cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00156d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156d6:	e8 2f 94 ff ff       	call   c000eb0a <VAS::setCPUSpecific(unsigned long)>
c00156db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156de:	e8 db f3 ff ff       	call   c0014abe <CPU::detectFeatures()>
c00156e3:	e8 58 c3 ff ff       	call   c0011a40 <setupInterruptController()>
c00156e8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00156ee:	a1 e0 43 02 c0       	mov    eax,ds:0xc00243e0
c00156f3:	83 e0 10             	and    eax,0x10
c00156f6:	83 f8 01             	cmp    eax,0x1
c00156f9:	19 c0                	sbb    eax,eax
c00156fb:	83 e0 46             	and    eax,0x46
c00156fe:	83 c0 1e             	add    eax,0x1e
c0015701:	89 04 24             	mov    DWORD PTR [esp],eax
c0015704:	e8 e7 d6 ff ff       	call   c0012df0 <setupTimer(int)>
c0015709:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001570f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015712:	e8 99 fe ff ff       	call   c00155b0 <CPU::setupFeatures()>
c0015717:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001571a:	e8 23 f1 ff ff       	call   c0014842 <CPU::displayFeatures()>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	31 c0                	xor    eax,eax
c0015724:	5b                   	pop    ebx
c0015725:	5e                   	pop    esi
c0015726:	5f                   	pop    edi
c0015727:	c3                   	ret    

c0015728 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015728:	57                   	push   edi
c0015729:	56                   	push   esi
c001572a:	53                   	push   ebx
c001572b:	51                   	push   ecx
c001572c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015730:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0015733:	0f 02 c0             	lar    eax,ax
c0015736:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0015739:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001573d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0015740:	88 ca                	mov    dl,cl
c0015742:	c0 ea 06             	shr    dl,0x6
c0015745:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0015749:	89 ca                	mov    edx,ecx
c001574b:	66 c1 ea 03          	shr    dx,0x3
c001574f:	83 e2 07             	and    edx,0x7
c0015752:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015757:	88 17                	mov    BYTE PTR [edi],dl
c0015759:	0f 84 a3 01 00 00    	je     c0015902 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001575f:	83 e1 07             	and    ecx,0x7
c0015762:	80 f9 04             	cmp    cl,0x4
c0015765:	0f 84 98 00 00 00    	je     c0015803 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001576b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0015770:	0f 95 c0             	setne  al
c0015773:	80 f9 05             	cmp    cl,0x5
c0015776:	0f 95 c2             	setne  dl
c0015779:	08 c2                	or     dl,al
c001577b:	74 79                	je     c00157f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001577d:	84 c9                	test   cl,cl
c001577f:	75 05                	jne    c0015786 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0015781:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0015784:	eb 3c                	jmp    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0015786:	80 f9 01             	cmp    cl,0x1
c0015789:	75 05                	jne    c0015790 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001578b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001578e:	eb 32                	jmp    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0015790:	80 f9 02             	cmp    cl,0x2
c0015793:	75 05                	jne    c001579a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0015795:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015798:	eb 28                	jmp    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001579a:	31 c0                	xor    eax,eax
c001579c:	80 f9 03             	cmp    cl,0x3
c001579f:	75 05                	jne    c00157a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00157a1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00157a4:	eb 1c                	jmp    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00157a6:	80 f9 05             	cmp    cl,0x5
c00157a9:	75 05                	jne    c00157b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00157ab:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00157ae:	eb 12                	jmp    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00157b0:	80 f9 06             	cmp    cl,0x6
c00157b3:	75 05                	jne    c00157ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00157b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00157b8:	eb 08                	jmp    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00157ba:	80 f9 07             	cmp    cl,0x7
c00157bd:	75 03                	jne    c00157c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00157bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00157c2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00157c7:	75 10                	jne    c00157d9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00157c9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00157cd:	b9 03 00 00 00       	mov    ecx,0x3
c00157d2:	01 d0                	add    eax,edx
c00157d4:	e9 34 01 00 00       	jmp    c001590d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00157d9:	b9 02 00 00 00       	mov    ecx,0x2
c00157de:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00157e3:	0f 85 24 01 00 00    	jne    c001590d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00157e9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00157ec:	b9 06 00 00 00       	mov    ecx,0x6
c00157f1:	e9 17 01 00 00       	jmp    c001590d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00157f6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00157f9:	b9 06 00 00 00       	mov    ecx,0x6
c00157fe:	e9 0c 01 00 00       	jmp    c001590f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015803:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0015806:	88 ca                	mov    dl,cl
c0015808:	c0 ea 06             	shr    dl,0x6
c001580b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001580f:	89 ca                	mov    edx,ecx
c0015811:	66 c1 ea 03          	shr    dx,0x3
c0015815:	83 e2 07             	and    edx,0x7
c0015818:	80 e1 07             	and    cl,0x7
c001581b:	75 05                	jne    c0015822 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001581d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0015820:	eb 49                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015822:	80 f9 01             	cmp    cl,0x1
c0015825:	75 05                	jne    c001582c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0015827:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001582a:	eb 3f                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001582c:	80 f9 02             	cmp    cl,0x2
c001582f:	75 05                	jne    c0015836 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0015831:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015834:	eb 35                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015836:	80 f9 03             	cmp    cl,0x3
c0015839:	75 05                	jne    c0015840 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001583b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001583e:	eb 2b                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015840:	80 f9 04             	cmp    cl,0x4
c0015843:	75 0f                	jne    c0015854 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12c>
c0015845:	f6 c4 60             	test   ah,0x60
c0015848:	75 05                	jne    c001584f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x127>
c001584a:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c001584d:	eb 1c                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001584f:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0015852:	eb 17                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015854:	80 f9 05             	cmp    cl,0x5
c0015857:	75 05                	jne    c001585e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x136>
c0015859:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001585c:	eb 0d                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001585e:	80 f9 06             	cmp    cl,0x6
c0015861:	75 05                	jne    c0015868 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x140>
c0015863:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0015866:	eb 03                	jmp    c001586b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0015868:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001586b:	84 d2                	test   dl,dl
c001586d:	75 05                	jne    c0015874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14c>
c001586f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0015872:	eb 3c                	jmp    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015874:	80 fa 01             	cmp    dl,0x1
c0015877:	75 05                	jne    c001587e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x156>
c0015879:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001587c:	eb 32                	jmp    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001587e:	80 fa 02             	cmp    dl,0x2
c0015881:	75 05                	jne    c0015888 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x160>
c0015883:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015886:	eb 28                	jmp    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015888:	80 fa 03             	cmp    dl,0x3
c001588b:	75 05                	jne    c0015892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16a>
c001588d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015890:	eb 1e                	jmp    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015892:	31 c0                	xor    eax,eax
c0015894:	80 fa 04             	cmp    dl,0x4
c0015897:	74 17                	je     c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0015899:	80 fa 05             	cmp    dl,0x5
c001589c:	75 05                	jne    c00158a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17b>
c001589e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00158a1:	eb 0d                	jmp    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00158a3:	80 fa 06             	cmp    dl,0x6
c00158a6:	75 05                	jne    c00158ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x185>
c00158a8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00158ab:	eb 03                	jmp    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00158ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00158b0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00158b5:	0f 94 c2             	sete   dl
c00158b8:	80 f9 05             	cmp    cl,0x5
c00158bb:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00158bf:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00158c4:	d3 e0                	shl    eax,cl
c00158c6:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00158ca:	74 0a                	je     c00158d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ae>
c00158cc:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158cf:	b9 07 00 00 00       	mov    ecx,0x7
c00158d4:	eb 37                	jmp    c001590d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00158d6:	01 f8                	add    eax,edi
c00158d8:	b9 03 00 00 00       	mov    ecx,0x3
c00158dd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00158e2:	74 2b                	je     c001590f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00158e4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00158e9:	75 0d                	jne    c00158f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00158eb:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00158ef:	01 c8                	add    eax,ecx
c00158f1:	b9 04 00 00 00       	mov    ecx,0x4
c00158f6:	eb 17                	jmp    c001590f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00158f8:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00158fb:	b9 07 00 00 00       	mov    ecx,0x7
c0015900:	eb 0d                	jmp    c001590f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015902:	b9 02 00 00 00       	mov    ecx,0x2
c0015907:	b2 01                	mov    dl,0x1
c0015909:	31 c0                	xor    eax,eax
c001590b:	eb 02                	jmp    c001590f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c001590d:	31 d2                	xor    edx,edx
c001590f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015913:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015915:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015919:	88 11                	mov    BYTE PTR [ecx],dl
c001591b:	5a                   	pop    edx
c001591c:	5b                   	pop    ebx
c001591d:	5e                   	pop    esi
c001591e:	5f                   	pop    edi
c001591f:	c3                   	ret    

c0015920 <Krnl::panic(char const*)>:
c0015920:	55                   	push   ebp
c0015921:	89 e5                	mov    ebp,esp
c0015923:	53                   	push   ebx
c0015924:	50                   	push   eax
c0015925:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001592a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001592d:	85 c0                	test   eax,eax
c001592f:	74 02                	je     c0015933 <Krnl::panic(char const*)+0x13>
c0015931:	ff d0                	call   eax
c0015933:	fa                   	cli    
c0015934:	c6 05 14 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024e14,0x1
c001593b:	83 ec 08             	sub    esp,0x8
c001593e:	c6 05 00 38 02 c0 00 	mov    BYTE PTR ds:0xc0023800,0x0
c0015945:	53                   	push   ebx
c0015946:	68 fc 24 02 c0       	push   0xc00224fc
c001594b:	e8 e9 97 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0015950:	58                   	pop    eax
c0015951:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001595c:	e8 1c 7a ff ff       	call   c000d37d <setActiveTerminal(VgaText*)>
c0015961:	83 c4 0c             	add    esp,0xc
c0015964:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015969:	6a 01                	push   0x1
c001596b:	6a 0f                	push   0xf
c001596d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015973:	e8 44 74 ff ff       	call   c000cdbc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015978:	5a                   	pop    edx
c0015979:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c001597e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015984:	e8 95 7c ff ff       	call   c000d61e <VgaText::clearScreen()>
c0015989:	59                   	pop    ecx
c001598a:	58                   	pop    eax
c001598b:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015990:	68 15 25 02 c0       	push   0xc0022515
c0015995:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001599b:	e8 fc 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00159a0:	58                   	pop    eax
c00159a1:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00159a6:	5a                   	pop    edx
c00159a7:	68 bc 25 02 c0       	push   0xc00225bc
c00159ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159b2:	e8 e5 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00159b7:	59                   	pop    ecx
c00159b8:	58                   	pop    eax
c00159b9:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00159be:	68 31 25 02 c0       	push   0xc0022531
c00159c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159c9:	e8 ce 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00159ce:	58                   	pop    eax
c00159cf:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00159d4:	5a                   	pop    edx
c00159d5:	53                   	push   ebx
c00159d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159dc:	e8 bb 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00159e1:	59                   	pop    ecx
c00159e2:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00159e7:	5b                   	pop    ebx
c00159e8:	68 51 25 02 c0       	push   0xc0022551
c00159ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00159f3:	e8 a4 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c00159f8:	58                   	pop    eax
c00159f9:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c00159fe:	5a                   	pop    edx
c00159ff:	68 f8 25 02 c0       	push   0xc00225f8
c0015a04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a0a:	e8 8d 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015a0f:	59                   	pop    ecx
c0015a10:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015a15:	5b                   	pop    ebx
c0015a16:	68 31 25 02 c0       	push   0xc0022531
c0015a1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a21:	e8 76 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015a26:	58                   	pop    eax
c0015a27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a2c:	5a                   	pop    edx
c0015a2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a30:	83 c0 0c             	add    eax,0xc
c0015a33:	50                   	push   eax
c0015a34:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015a39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a3f:	e8 58 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015a44:	59                   	pop    ecx
c0015a45:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015a4a:	5b                   	pop    ebx
c0015a4b:	68 50 25 02 c0       	push   0xc0022550
c0015a50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a56:	e8 41 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015a5b:	58                   	pop    eax
c0015a5c:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015a61:	5a                   	pop    edx
c0015a62:	68 24 26 02 c0       	push   0xc0022624
c0015a67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a6d:	e8 2a 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015a72:	59                   	pop    ecx
c0015a73:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015a78:	5b                   	pop    ebx
c0015a79:	68 64 26 02 c0       	push   0xc0022664
c0015a7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a84:	e8 13 7d ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015a89:	58                   	pop    eax
c0015a8a:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015a8f:	5a                   	pop    edx
c0015a90:	68 3c 25 02 c0       	push   0xc002253c
c0015a95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015a9b:	e8 fc 7c ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015aa0:	59                   	pop    ecx
c0015aa1:	5b                   	pop    ebx
c0015aa2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015aa5:	68 54 25 02 c0       	push   0xc0022554
c0015aaa:	e8 8a 96 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0015aaf:	58                   	pop    eax
c0015ab0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015ab3:	5a                   	pop    edx
c0015ab4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015ab7:	68 5d 25 02 c0       	push   0xc002255d
c0015abc:	e8 78 96 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0015ac1:	59                   	pop    ecx
c0015ac2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015ac5:	5b                   	pop    ebx
c0015ac6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0015acb:	68 66 25 02 c0       	push   0xc0022566
c0015ad0:	e8 64 96 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0015ad5:	58                   	pop    eax
c0015ad6:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015adb:	5a                   	pop    edx
c0015adc:	68 a8 26 02 c0       	push   0xc00226a8
c0015ae1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015ae7:	e8 b0 7c ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015aec:	59                   	pop    ecx
c0015aed:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015af2:	5b                   	pop    ebx
c0015af3:	68 6f 25 02 c0       	push   0xc002256f
c0015af8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015afe:	e8 99 7c ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015b03:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015b08:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b0e:	e8 35 9d 00 00       	call   c001f848 <CPU::readCR0()>
c0015b13:	5a                   	pop    edx
c0015b14:	59                   	pop    ecx
c0015b15:	50                   	push   eax
c0015b16:	53                   	push   ebx
c0015b17:	e8 a6 7c ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0015b1c:	5b                   	pop    ebx
c0015b1d:	58                   	pop    eax
c0015b1e:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015b23:	68 79 25 02 c0       	push   0xc0022579
c0015b28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b2e:	e8 69 7c ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015b33:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015b38:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b3e:	e8 f3 9f 00 00       	call   c001fb36 <CPU::readCR2()>
c0015b43:	5a                   	pop    edx
c0015b44:	59                   	pop    ecx
c0015b45:	50                   	push   eax
c0015b46:	53                   	push   ebx
c0015b47:	e8 76 7c ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0015b4c:	5b                   	pop    ebx
c0015b4d:	58                   	pop    eax
c0015b4e:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015b53:	68 83 25 02 c0       	push   0xc0022583
c0015b58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b5e:	e8 39 7c ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015b63:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015b68:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b6e:	e8 62 99 00 00       	call   c001f4d5 <CPU::readCR3()>
c0015b73:	5a                   	pop    edx
c0015b74:	59                   	pop    ecx
c0015b75:	50                   	push   eax
c0015b76:	53                   	push   ebx
c0015b77:	e8 46 7c ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0015b7c:	5b                   	pop    ebx
c0015b7d:	58                   	pop    eax
c0015b7e:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015b83:	68 96 25 02 c0       	push   0xc0022596
c0015b88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015b8e:	e8 09 7c ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015b93:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015b98:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b9e:	e8 6f 9f 00 00       	call   c001fb12 <CPU::readCR4()>
c0015ba3:	5a                   	pop    edx
c0015ba4:	59                   	pop    ecx
c0015ba5:	50                   	push   eax
c0015ba6:	53                   	push   ebx
c0015ba7:	e8 16 7c ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0015bac:	5b                   	pop    ebx
c0015bad:	58                   	pop    eax
c0015bae:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015bb3:	68 a0 25 02 c0       	push   0xc00225a0
c0015bb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015bbe:	e8 d9 7b ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015bc3:	5a                   	pop    edx
c0015bc4:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015bc9:	59                   	pop    ecx
c0015bca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bd0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0015bd3:	50                   	push   eax
c0015bd4:	e8 e9 7b ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0015bd9:	5b                   	pop    ebx
c0015bda:	58                   	pop    eax
c0015bdb:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015be0:	68 b7 25 02 c0       	push   0xc00225b7
c0015be5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015beb:	e8 ac 7b ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015bf0:	5a                   	pop    edx
c0015bf1:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015bf6:	59                   	pop    ecx
c0015bf7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bfd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c00:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015c03:	50                   	push   eax
c0015c04:	e8 b9 7b ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0015c09:	5b                   	pop    ebx
c0015c0a:	58                   	pop    eax
c0015c0b:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015c10:	68 b7 25 02 c0       	push   0xc00225b7
c0015c15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015c1b:	e8 7c 7b ff ff       	call   c000d79c <VgaText::puts(char const*)>
c0015c20:	59                   	pop    ecx
c0015c21:	a1 14 58 02 c0       	mov    eax,ds:0xc0025814
c0015c26:	5b                   	pop    ebx
c0015c27:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c2d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c30:	8b 12                	mov    edx,DWORD PTR [edx]
c0015c32:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0015c35:	50                   	push   eax
c0015c36:	e8 87 7b ff ff       	call   c000d7c2 <VgaText::putx(unsigned int)>
c0015c3b:	83 c4 10             	add    esp,0x10
c0015c3e:	b2 fe                	mov    dl,0xfe
c0015c40:	e4 60                	in     al,0x60
c0015c42:	3c 1c                	cmp    al,0x1c
c0015c44:	74 04                	je     c0015c4a <Krnl::panic(char const*)+0x32a>
c0015c46:	3c 5a                	cmp    al,0x5a
c0015c48:	75 f6                	jne    c0015c40 <Krnl::panic(char const*)+0x320>
c0015c4a:	e4 64                	in     al,0x64
c0015c4c:	a8 02                	test   al,0x2
c0015c4e:	75 fa                	jne    c0015c4a <Krnl::panic(char const*)+0x32a>
c0015c50:	88 d0                	mov    al,dl
c0015c52:	e6 64                	out    0x64,al
c0015c54:	fa                   	cli    
c0015c55:	f4                   	hlt    
c0015c56:	eb e8                	jmp    c0015c40 <Krnl::panic(char const*)+0x320>

c0015c58 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015c58:	55                   	push   ebp
c0015c59:	57                   	push   edi
c0015c5a:	56                   	push   esi
c0015c5b:	53                   	push   ebx
c0015c5c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015c62:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015c69:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015c6b:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015c6e:	80 fb 40             	cmp    bl,0x40
c0015c71:	75 1b                	jne    c0015c8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015c73:	8a 16                	mov    dl,BYTE PTR [esi]
c0015c75:	84 d2                	test   dl,dl
c0015c77:	0f 84 f1 00 00 00    	je     c0015d6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015c7d:	8d 46 01             	lea    eax,[esi+0x1]
c0015c80:	80 fa 3a             	cmp    dl,0x3a
c0015c83:	74 04                	je     c0015c89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015c85:	89 c6                	mov    esi,eax
c0015c87:	eb ea                	jmp    c0015c73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015c89:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015c8c:	89 c6                	mov    esi,eax
c0015c8e:	50                   	push   eax
c0015c8f:	6a 40                	push   0x40
c0015c91:	6a 00                	push   0x0
c0015c93:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015c97:	50                   	push   eax
c0015c98:	e8 49 aa fe ff       	call   c00006e6 <memset>
c0015c9d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015ca4:	31 c0                	xor    eax,eax
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015cab:	84 c9                	test   cl,cl
c0015cad:	0f 84 bb 00 00 00    	je     c0015d6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cb3:	3d c7 00 00 00       	cmp    eax,0xc7
c0015cb8:	0f 8f b0 00 00 00    	jg     c0015d6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015cbe:	80 f9 0a             	cmp    cl,0xa
c0015cc1:	0f 85 98 00 00 00    	jne    c0015d5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015cc7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015ccc:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015cd0:	a8 df                	test   al,0xdf
c0015cd2:	0f 94 c1             	sete   cl
c0015cd5:	3c 23                	cmp    al,0x23
c0015cd7:	0f 94 c2             	sete   dl
c0015cda:	08 d1                	or     cl,dl
c0015cdc:	75 4a                	jne    c0015d28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cde:	8d 50 f7             	lea    edx,[eax-0x9]
c0015ce1:	80 fa 01             	cmp    dl,0x1
c0015ce4:	76 42                	jbe    c0015d28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015ce6:	3c 5b                	cmp    al,0x5b
c0015ce8:	75 42                	jne    c0015d2c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015cea:	80 fb 40             	cmp    bl,0x40
c0015ced:	75 39                	jne    c0015d28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015cef:	83 ec 0c             	sub    esp,0xc
c0015cf2:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015cf6:	52                   	push   edx
c0015cf7:	e8 07 aa fe ff       	call   c0000703 <strlen>
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	83 f8 3f             	cmp    eax,0x3f
c0015d02:	77 6a                	ja     c0015d6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d04:	50                   	push   eax
c0015d05:	50                   	push   eax
c0015d06:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015d0a:	52                   	push   edx
c0015d0b:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d0f:	52                   	push   edx
c0015d10:	e8 70 aa fe ff       	call   c0000785 <strcpy>
c0015d15:	58                   	pop    eax
c0015d16:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015d1a:	52                   	push   edx
c0015d1b:	e8 e3 a9 fe ff       	call   c0000703 <strlen>
c0015d20:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015d25:	83 c4 10             	add    esp,0x10
c0015d28:	31 d2                	xor    edx,edx
c0015d2a:	eb 3a                	jmp    c0015d66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015d2c:	80 fb 40             	cmp    bl,0x40
c0015d2f:	74 06                	je     c0015d37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015d31:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015d35:	eb 20                	jmp    c0015d57 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015d37:	50                   	push   eax
c0015d38:	50                   	push   eax
c0015d39:	55                   	push   ebp
c0015d3a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d3e:	50                   	push   eax
c0015d3f:	e8 92 aa fe ff       	call   c00007d6 <strcmp>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	85 c0                	test   eax,eax
c0015d49:	75 dd                	jne    c0015d28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d4b:	eb e4                	jmp    c0015d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015d4d:	8d 50 01             	lea    edx,[eax+0x1]
c0015d50:	80 f9 3d             	cmp    cl,0x3d
c0015d53:	74 1d                	je     c0015d72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015d55:	89 d0                	mov    eax,edx
c0015d57:	8a 08                	mov    cl,BYTE PTR [eax]
c0015d59:	84 c9                	test   cl,cl
c0015d5b:	75 f0                	jne    c0015d4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015d5d:	eb 0f                	jmp    c0015d6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d5f:	8d 50 01             	lea    edx,[eax+0x1]
c0015d62:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015d66:	47                   	inc    edi
c0015d67:	89 d0                	mov    eax,edx
c0015d69:	e9 3b ff ff ff       	jmp    c0015ca9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015d6e:	31 c0                	xor    eax,eax
c0015d70:	eb 33                	jmp    c0015da5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015d72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015d76:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015d79:	50                   	push   eax
c0015d7a:	50                   	push   eax
c0015d7b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015d7f:	50                   	push   eax
c0015d80:	56                   	push   esi
c0015d81:	e8 50 aa fe ff       	call   c00007d6 <strcmp>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	85 c0                	test   eax,eax
c0015d8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d8f:	75 97                	jne    c0015d28 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d91:	51                   	push   ecx
c0015d92:	51                   	push   ecx
c0015d93:	52                   	push   edx
c0015d94:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015d9b:	e8 e5 a9 fe ff       	call   c0000785 <strcpy>
c0015da0:	83 c4 10             	add    esp,0x10
c0015da3:	b0 01                	mov    al,0x1
c0015da5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015dab:	5b                   	pop    ebx
c0015dac:	5e                   	pop    esi
c0015dad:	5f                   	pop    edi
c0015dae:	5d                   	pop    ebp
c0015daf:	c3                   	ret    

c0015db0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015db0:	57                   	push   edi
c0015db1:	56                   	push   esi
c0015db2:	53                   	push   ebx
c0015db3:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015db9:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015dc0:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015dc7:	53                   	push   ebx
c0015dc8:	e8 36 a9 fe ff       	call   c0000703 <strlen>
c0015dcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0015dd0:	89 c7                	mov    edi,eax
c0015dd2:	e8 2c a9 fe ff       	call   c0000703 <strlen>
c0015dd7:	83 c4 10             	add    esp,0x10
c0015dda:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015dde:	31 ff                	xor    edi,edi
c0015de0:	3d ff 00 00 00       	cmp    eax,0xff
c0015de5:	0f 87 18 01 00 00    	ja     c0015f03 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015deb:	51                   	push   ecx
c0015dec:	51                   	push   ecx
c0015ded:	56                   	push   esi
c0015dee:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015df2:	56                   	push   esi
c0015df3:	e8 8d a9 fe ff       	call   c0000785 <strcpy>
c0015df8:	58                   	pop    eax
c0015df9:	5a                   	pop    edx
c0015dfa:	68 a0 2a 02 c0       	push   0xc0022aa0
c0015dff:	56                   	push   esi
c0015e00:	e8 37 aa fe ff       	call   c000083c <strcat>
c0015e05:	59                   	pop    ecx
c0015e06:	58                   	pop    eax
c0015e07:	53                   	push   ebx
c0015e08:	56                   	push   esi
c0015e09:	e8 2e aa fe ff       	call   c000083c <strcat>
c0015e0e:	58                   	pop    eax
c0015e0f:	5a                   	pop    edx
c0015e10:	68 ce 26 02 c0       	push   0xc00226ce
c0015e15:	56                   	push   esi
c0015e16:	e8 21 aa fe ff       	call   c000083c <strcat>
c0015e1b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e22:	e8 23 92 ff ff       	call   c000f04a <operator new(unsigned long)>
c0015e27:	83 c4 0c             	add    esp,0xc
c0015e2a:	89 c3                	mov    ebx,eax
c0015e2c:	ff 35 14 58 02 c0    	push   DWORD PTR ds:0xc0025814
c0015e32:	56                   	push   esi
c0015e33:	50                   	push   eax
c0015e34:	e8 2f 98 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c0015e39:	59                   	pop    ecx
c0015e3a:	5e                   	pop    esi
c0015e3b:	6a 01                	push   0x1
c0015e3d:	53                   	push   ebx
c0015e3e:	e8 89 98 ff ff       	call   c000f6cc <File::open(FileOpenMode)>
c0015e43:	83 c4 10             	add    esp,0x10
c0015e46:	85 c0                	test   eax,eax
c0015e48:	74 08                	je     c0015e52 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015e4a:	83 ec 0c             	sub    esp,0xc
c0015e4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e4f:	53                   	push   ebx
c0015e50:	eb 2e                	jmp    c0015e80 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015e52:	52                   	push   edx
c0015e53:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015e57:	50                   	push   eax
c0015e58:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015e5c:	50                   	push   eax
c0015e5d:	53                   	push   ebx
c0015e5e:	e8 15 9b ff ff       	call   c000f978 <File::stat(unsigned long long*, bool*)>
c0015e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e67:	83 c4 10             	add    esp,0x10
c0015e6a:	89 c1                	mov    ecx,eax
c0015e6c:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015e70:	75 13                	jne    c0015e85 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015e72:	83 ec 0c             	sub    esp,0xc
c0015e75:	53                   	push   ebx
c0015e76:	e8 af 98 ff ff       	call   c000f72a <File::close()>
c0015e7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e83:	eb 7b                	jmp    c0015f00 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015e85:	83 ec 0c             	sub    esp,0xc
c0015e88:	50                   	push   eax
c0015e89:	e8 ba 61 ff ff       	call   c000c048 <malloc>
c0015e8e:	89 c6                	mov    esi,eax
c0015e90:	58                   	pop    eax
c0015e91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e93:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015e97:	52                   	push   edx
c0015e98:	56                   	push   esi
c0015e99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ea1:	53                   	push   ebx
c0015ea2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ea5:	83 c4 20             	add    esp,0x20
c0015ea8:	85 c0                	test   eax,eax
c0015eaa:	75 0a                	jne    c0015eb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eb0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015eb4:	74 18                	je     c0015ece <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015eb6:	83 ec 0c             	sub    esp,0xc
c0015eb9:	31 ff                	xor    edi,edi
c0015ebb:	53                   	push   ebx
c0015ebc:	e8 69 98 ff ff       	call   c000f72a <File::close()>
c0015ec1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ec6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ec9:	83 c4 10             	add    esp,0x10
c0015ecc:	eb 35                	jmp    c0015f03 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015ece:	83 ec 0c             	sub    esp,0xc
c0015ed1:	53                   	push   ebx
c0015ed2:	e8 53 98 ff ff       	call   c000f72a <File::close()>
c0015ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ed9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015edc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015edf:	83 c4 0c             	add    esp,0xc
c0015ee2:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015ee9:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015ef0:	56                   	push   esi
c0015ef1:	e8 62 fd ff ff       	call   c0015c58 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015ef6:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ef9:	89 c7                	mov    edi,eax
c0015efb:	e8 58 61 ff ff       	call   c000c058 <free>
c0015f00:	83 c4 10             	add    esp,0x10
c0015f03:	81 c4 10 01 00 00    	add    esp,0x110
c0015f09:	89 f8                	mov    eax,edi
c0015f0b:	5b                   	pop    ebx
c0015f0c:	5e                   	pop    esi
c0015f0d:	5f                   	pop    edi
c0015f0e:	c3                   	ret    

c0015f0f <Reg::getLine(char*, char*, char*)>:
c0015f0f:	57                   	push   edi
c0015f10:	56                   	push   esi
c0015f11:	53                   	push   ebx
c0015f12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f16:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015f1a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f1e:	57                   	push   edi
c0015f1f:	56                   	push   esi
c0015f20:	53                   	push   ebx
c0015f21:	68 d3 26 02 c0       	push   0xc00226d3
c0015f26:	e8 85 fe ff ff       	call   c0015db0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f2b:	83 c4 10             	add    esp,0x10
c0015f2e:	84 c0                	test   al,al
c0015f30:	75 10                	jne    c0015f42 <Reg::getLine(char*, char*, char*)+0x33>
c0015f32:	57                   	push   edi
c0015f33:	56                   	push   esi
c0015f34:	53                   	push   ebx
c0015f35:	68 f8 26 02 c0       	push   0xc00226f8
c0015f3a:	e8 71 fe ff ff       	call   c0015db0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015f3f:	83 c4 10             	add    esp,0x10
c0015f42:	5b                   	pop    ebx
c0015f43:	5e                   	pop    esi
c0015f44:	5f                   	pop    edi
c0015f45:	c3                   	ret    

c0015f46 <Reg::readInt(char*, char*, int*)>:
c0015f46:	55                   	push   ebp
c0015f47:	57                   	push   edi
c0015f48:	56                   	push   esi
c0015f49:	53                   	push   ebx
c0015f4a:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015f50:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015f54:	57                   	push   edi
c0015f55:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f5c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015f63:	e8 a7 ff ff ff       	call   c0015f0f <Reg::getLine(char*, char*, char*)>
c0015f68:	83 c4 10             	add    esp,0x10
c0015f6b:	84 c0                	test   al,al
c0015f6d:	0f 84 b3 00 00 00    	je     c0016026 <Reg::readInt(char*, char*, int*)+0xe0>
c0015f73:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015f77:	80 fa 2b             	cmp    dl,0x2b
c0015f7a:	74 0c                	je     c0015f88 <Reg::readInt(char*, char*, int*)+0x42>
c0015f7c:	80 fa 2d             	cmp    dl,0x2d
c0015f7f:	75 0e                	jne    c0015f8f <Reg::readInt(char*, char*, int*)+0x49>
c0015f81:	ba 01 00 00 00       	mov    edx,0x1
c0015f86:	eb 0b                	jmp    c0015f93 <Reg::readInt(char*, char*, int*)+0x4d>
c0015f88:	ba 01 00 00 00       	mov    edx,0x1
c0015f8d:	eb 02                	jmp    c0015f91 <Reg::readInt(char*, char*, int*)+0x4b>
c0015f8f:	31 d2                	xor    edx,edx
c0015f91:	31 c0                	xor    eax,eax
c0015f93:	be 0a 00 00 00       	mov    esi,0xa
c0015f98:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015f9d:	75 20                	jne    c0015fbf <Reg::readInt(char*, char*, int*)+0x79>
c0015f9f:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015fa3:	80 f9 78             	cmp    cl,0x78
c0015fa6:	75 0a                	jne    c0015fb2 <Reg::readInt(char*, char*, int*)+0x6c>
c0015fa8:	83 c2 02             	add    edx,0x2
c0015fab:	be 10 00 00 00       	mov    esi,0x10
c0015fb0:	eb 0d                	jmp    c0015fbf <Reg::readInt(char*, char*, int*)+0x79>
c0015fb2:	80 f9 62             	cmp    cl,0x62
c0015fb5:	75 08                	jne    c0015fbf <Reg::readInt(char*, char*, int*)+0x79>
c0015fb7:	83 c2 02             	add    edx,0x2
c0015fba:	be 02 00 00 00       	mov    esi,0x2
c0015fbf:	01 d7                	add    edi,edx
c0015fc1:	31 d2                	xor    edx,edx
c0015fc3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015fc5:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015fc9:	80 fb 0d             	cmp    bl,0xd
c0015fcc:	0f 94 c3             	sete   bl
c0015fcf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015fd4:	0f 94 c1             	sete   cl
c0015fd7:	08 cb                	or     bl,cl
c0015fd9:	75 3a                	jne    c0016015 <Reg::readInt(char*, char*, int*)+0xcf>
c0015fdb:	0f af d6             	imul   edx,esi
c0015fde:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015fe3:	83 fe 10             	cmp    esi,0x10
c0015fe6:	75 26                	jne    c001600e <Reg::readInt(char*, char*, int*)+0xc8>
c0015fe8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015fec:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015fef:	89 e9                	mov    ecx,ebp
c0015ff1:	80 f9 05             	cmp    cl,0x5
c0015ff4:	77 06                	ja     c0015ffc <Reg::readInt(char*, char*, int*)+0xb6>
c0015ff6:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015ffa:	eb 16                	jmp    c0016012 <Reg::readInt(char*, char*, int*)+0xcc>
c0015ffc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016000:	83 e9 61             	sub    ecx,0x61
c0016003:	80 f9 05             	cmp    cl,0x5
c0016006:	77 06                	ja     c001600e <Reg::readInt(char*, char*, int*)+0xc8>
c0016008:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001600c:	eb 04                	jmp    c0016012 <Reg::readInt(char*, char*, int*)+0xcc>
c001600e:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0016012:	47                   	inc    edi
c0016013:	eb ae                	jmp    c0015fc3 <Reg::readInt(char*, char*, int*)+0x7d>
c0016015:	84 c0                	test   al,al
c0016017:	74 02                	je     c001601b <Reg::readInt(char*, char*, int*)+0xd5>
c0016019:	f7 da                	neg    edx
c001601b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0016022:	89 10                	mov    DWORD PTR [eax],edx
c0016024:	88 d8                	mov    al,bl
c0016026:	81 c4 ec 00 00 00    	add    esp,0xec
c001602c:	5b                   	pop    ebx
c001602d:	5e                   	pop    esi
c001602e:	5f                   	pop    edi
c001602f:	5d                   	pop    ebp
c0016030:	c3                   	ret    

c0016031 <Reg::readString(char*, char*, char*, int)>:
c0016031:	57                   	push   edi
c0016032:	56                   	push   esi
c0016033:	53                   	push   ebx
c0016034:	81 ec d4 00 00 00    	sub    esp,0xd4
c001603a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0016041:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016045:	57                   	push   edi
c0016046:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001604d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016054:	e8 b6 fe ff ff       	call   c0015f0f <Reg::getLine(char*, char*, char*)>
c0016059:	83 c4 10             	add    esp,0x10
c001605c:	89 c6                	mov    esi,eax
c001605e:	84 c0                	test   al,al
c0016060:	74 44                	je     c00160a6 <Reg::readString(char*, char*, char*, int)+0x75>
c0016062:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0016069:	31 c0                	xor    eax,eax
c001606b:	4a                   	dec    edx
c001606c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001606f:	84 c9                	test   cl,cl
c0016071:	74 0f                	je     c0016082 <Reg::readString(char*, char*, char*, int)+0x51>
c0016073:	39 c2                	cmp    edx,eax
c0016075:	7e 0b                	jle    c0016082 <Reg::readString(char*, char*, char*, int)+0x51>
c0016077:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001607a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001607f:	40                   	inc    eax
c0016080:	eb ea                	jmp    c001606c <Reg::readString(char*, char*, char*, int)+0x3b>
c0016082:	83 ec 0c             	sub    esp,0xc
c0016085:	53                   	push   ebx
c0016086:	e8 78 a6 fe ff       	call   c0000703 <strlen>
c001608b:	83 c4 10             	add    esp,0x10
c001608e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0016093:	75 11                	jne    c00160a6 <Reg::readString(char*, char*, char*, int)+0x75>
c0016095:	83 ec 0c             	sub    esp,0xc
c0016098:	53                   	push   ebx
c0016099:	e8 65 a6 fe ff       	call   c0000703 <strlen>
c001609e:	83 c4 10             	add    esp,0x10
c00160a1:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00160a6:	81 c4 d0 00 00 00    	add    esp,0xd0
c00160ac:	89 f0                	mov    eax,esi
c00160ae:	5b                   	pop    ebx
c00160af:	5e                   	pop    esi
c00160b0:	5f                   	pop    edi
c00160b1:	c3                   	ret    

c00160b2 <Reg::readBool(char*, char*, bool*)>:
c00160b2:	83 ec 20             	sub    esp,0x20
c00160b5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00160b9:	50                   	push   eax
c00160ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160c2:	e8 7f fe ff ff       	call   c0015f46 <Reg::readInt(char*, char*, int*)>
c00160c7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00160cc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00160d0:	0f 95 02             	setne  BYTE PTR [edx]
c00160d3:	83 c4 2c             	add    esp,0x2c
c00160d6:	c3                   	ret    

c00160d7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00160d7:	53                   	push   ebx
c00160d8:	83 ec 1c             	sub    esp,0x1c
c00160db:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00160df:	8d 44 24 13          	lea    eax,[esp+0x13]
c00160e3:	50                   	push   eax
c00160e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160ec:	e8 c1 ff ff ff       	call   c00160b2 <Reg::readBool(char*, char*, bool*)>
c00160f1:	83 c4 10             	add    esp,0x10
c00160f4:	84 c0                	test   al,al
c00160f6:	74 04                	je     c00160fc <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00160f8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00160fc:	88 d8                	mov    al,bl
c00160fe:	83 c4 18             	add    esp,0x18
c0016101:	5b                   	pop    ebx
c0016102:	c3                   	ret    

c0016103 <Reg::readIntWithDefault(char*, char*, int)>:
c0016103:	53                   	push   ebx
c0016104:	83 ec 1c             	sub    esp,0x1c
c0016107:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001610b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001610f:	50                   	push   eax
c0016110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016118:	e8 29 fe ff ff       	call   c0015f46 <Reg::readInt(char*, char*, int*)>
c001611d:	83 c4 10             	add    esp,0x10
c0016120:	84 c0                	test   al,al
c0016122:	74 04                	je     c0016128 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016124:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016128:	89 d8                	mov    eax,ebx
c001612a:	83 c4 18             	add    esp,0x18
c001612d:	5b                   	pop    ebx
c001612e:	c3                   	ret    

c001612f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001612f:	56                   	push   esi
c0016130:	53                   	push   ebx
c0016131:	51                   	push   ecx
c0016132:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016136:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001613a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001613e:	56                   	push   esi
c001613f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016147:	e8 e5 fe ff ff       	call   c0016031 <Reg::readString(char*, char*, char*, int)>
c001614c:	83 c4 10             	add    esp,0x10
c001614f:	84 c0                	test   al,al
c0016151:	74 02                	je     c0016155 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0016153:	89 f3                	mov    ebx,esi
c0016155:	89 d8                	mov    eax,ebx
c0016157:	5a                   	pop    edx
c0016158:	5b                   	pop    ebx
c0016159:	5e                   	pop    esi
c001615a:	c3                   	ret    

c001615b <Sys::exit(regs*)>:
c001615b:	83 ec 18             	sub    esp,0x18
c001615e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016162:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016165:	e8 20 31 00 00       	call   c001928a <terminateTask(int)>
c001616a:	83 c8 ff             	or     eax,0xffffffff
c001616d:	83 c4 1c             	add    esp,0x1c
c0016170:	89 c2                	mov    edx,eax
c0016172:	c3                   	ret    

c0016173 <Sys::loadDLL(regs*)>:
c0016173:	56                   	push   esi
c0016174:	53                   	push   ebx
c0016175:	31 d2                	xor    edx,edx
c0016177:	51                   	push   ecx
c0016178:	b8 01 00 00 00       	mov    eax,0x1
c001617d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016181:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0016185:	74 7d                	je     c0016204 <Sys::loadDLL(regs*)+0x91>
c0016187:	83 ec 0c             	sub    esp,0xc
c001618a:	68 14 01 00 00       	push   0x114
c001618f:	e8 b6 8e ff ff       	call   c000f04a <operator new(unsigned long)>
c0016194:	83 c4 0c             	add    esp,0xc
c0016197:	89 c3                	mov    ebx,eax
c0016199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001619e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00161a1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00161a4:	53                   	push   ebx
c00161a5:	e8 be 94 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c00161aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161ad:	e8 88 97 ff ff       	call   c000f93a <File::exists()>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	84 c0                	test   al,al
c00161b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161b9:	75 11                	jne    c00161cc <Sys::loadDLL(regs*)+0x59>
c00161bb:	83 ec 0c             	sub    esp,0xc
c00161be:	53                   	push   ebx
c00161bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161c2:	83 c4 10             	add    esp,0x10
c00161c5:	b8 03 00 00 00       	mov    eax,0x3
c00161ca:	eb 36                	jmp    c0016202 <Sys::loadDLL(regs*)+0x8f>
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	53                   	push   ebx
c00161d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161d3:	58                   	pop    eax
c00161d4:	5a                   	pop    edx
c00161d5:	6a 00                	push   0x0
c00161d7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00161da:	e8 c4 20 00 00       	call   c00182a3 <Thr::loadDLL(char const*, bool)>
c00161df:	83 c4 10             	add    esp,0x10
c00161e2:	89 c1                	mov    ecx,eax
c00161e4:	31 d2                	xor    edx,edx
c00161e6:	b8 04 00 00 00       	mov    eax,0x4
c00161eb:	85 c9                	test   ecx,ecx
c00161ed:	74 15                	je     c0016204 <Sys::loadDLL(regs*)+0x91>
c00161ef:	53                   	push   ebx
c00161f0:	53                   	push   ebx
c00161f1:	ff 35 c8 43 02 c0    	push   DWORD PTR ds:0xc00243c8
c00161f7:	51                   	push   ecx
c00161f8:	e8 6c 22 00 00       	call   c0018469 <Thr::executeDLL(unsigned long, void*)>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	31 c0                	xor    eax,eax
c0016202:	31 d2                	xor    edx,edx
c0016204:	59                   	pop    ecx
c0016205:	5b                   	pop    ebx
c0016206:	5e                   	pop    esi
c0016207:	c3                   	ret    

c0016208 <Sys::read(regs*)>:
c0016208:	57                   	push   edi
c0016209:	56                   	push   esi
c001620a:	53                   	push   ebx
c001620b:	83 ec 10             	sub    esp,0x10
c001620e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016212:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016215:	83 f8 02             	cmp    eax,0x2
c0016218:	77 10                	ja     c001622a <Sys::read(regs*)+0x22>
c001621a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001621f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016222:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016228:	eb 0e                	jmp    c0016238 <Sys::read(regs*)+0x30>
c001622a:	83 ec 0c             	sub    esp,0xc
c001622d:	50                   	push   eax
c001622e:	e8 de 7d ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c0016233:	83 c4 10             	add    esp,0x10
c0016236:	89 c1                	mov    ecx,eax
c0016238:	83 c8 ff             	or     eax,0xffffffff
c001623b:	85 c9                	test   ecx,ecx
c001623d:	89 c2                	mov    edx,eax
c001623f:	74 28                	je     c0016269 <Sys::read(regs*)+0x61>
c0016241:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016249:	31 ff                	xor    edi,edi
c001624b:	83 ec 0c             	sub    esp,0xc
c001624e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016250:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016254:	52                   	push   edx
c0016255:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016258:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001625b:	57                   	push   edi
c001625c:	56                   	push   esi
c001625d:	51                   	push   ecx
c001625e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016261:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016265:	83 c4 20             	add    esp,0x20
c0016268:	99                   	cdq    
c0016269:	83 c4 10             	add    esp,0x10
c001626c:	5b                   	pop    ebx
c001626d:	5e                   	pop    esi
c001626e:	5f                   	pop    edi
c001626f:	c3                   	ret    

c0016270 <Sys::sbrk(regs*)>:
c0016270:	56                   	push   esi
c0016271:	53                   	push   ebx
c0016272:	50                   	push   eax
c0016273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016278:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001627c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001627f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016282:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0016288:	85 db                	test   ebx,ebx
c001628a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001628d:	74 02                	je     c0016291 <Sys::sbrk(regs*)+0x21>
c001628f:	79 06                	jns    c0016297 <Sys::sbrk(regs*)+0x27>
c0016291:	89 f0                	mov    eax,esi
c0016293:	31 d2                	xor    edx,edx
c0016295:	eb 2a                	jmp    c00162c1 <Sys::sbrk(regs*)+0x51>
c0016297:	83 c8 ff             	or     eax,0xffffffff
c001629a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00162a0:	89 c2                	mov    edx,eax
c00162a2:	77 1d                	ja     c00162c1 <Sys::sbrk(regs*)+0x51>
c00162a4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00162aa:	50                   	push   eax
c00162ab:	c1 ea 0c             	shr    edx,0xc
c00162ae:	68 07 04 00 00       	push   0x407
c00162b3:	52                   	push   edx
c00162b4:	51                   	push   ecx
c00162b5:	e8 80 86 ff ff       	call   c000e93a <VAS::allocatePages(int, int)>
c00162ba:	89 f0                	mov    eax,esi
c00162bc:	31 d2                	xor    edx,edx
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	59                   	pop    ecx
c00162c2:	5b                   	pop    ebx
c00162c3:	5e                   	pop    esi
c00162c4:	c3                   	ret    

c00162c5 <Sys::write(regs*)>:
c00162c5:	57                   	push   edi
c00162c6:	56                   	push   esi
c00162c7:	53                   	push   ebx
c00162c8:	83 ec 10             	sub    esp,0x10
c00162cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00162cf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162d2:	83 f8 02             	cmp    eax,0x2
c00162d5:	77 10                	ja     c00162e7 <Sys::write(regs*)+0x22>
c00162d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162df:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00162e5:	eb 0e                	jmp    c00162f5 <Sys::write(regs*)+0x30>
c00162e7:	83 ec 0c             	sub    esp,0xc
c00162ea:	50                   	push   eax
c00162eb:	e8 21 7d ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c00162f0:	83 c4 10             	add    esp,0x10
c00162f3:	89 c1                	mov    ecx,eax
c00162f5:	83 c8 ff             	or     eax,0xffffffff
c00162f8:	85 c9                	test   ecx,ecx
c00162fa:	89 c2                	mov    edx,eax
c00162fc:	74 28                	je     c0016326 <Sys::write(regs*)+0x61>
c00162fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016306:	31 ff                	xor    edi,edi
c0016308:	83 ec 0c             	sub    esp,0xc
c001630b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001630d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016311:	52                   	push   edx
c0016312:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016315:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0016318:	57                   	push   edi
c0016319:	56                   	push   esi
c001631a:	51                   	push   ecx
c001631b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001631e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016322:	83 c4 20             	add    esp,0x20
c0016325:	99                   	cdq    
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	5b                   	pop    ebx
c001632a:	5e                   	pop    esi
c001632b:	5f                   	pop    edi
c001632c:	c3                   	ret    

c001632d <Sys::yield(regs*)>:
c001632d:	83 ec 0c             	sub    esp,0xc
c0016330:	e8 3f 25 00 00       	call   c0018874 <lockScheduler()>
c0016335:	e8 6e 28 00 00       	call   c0018ba8 <schedule()>
c001633a:	e8 37 25 00 00       	call   c0018876 <unlockScheduler()>
c001633f:	31 c0                	xor    eax,eax
c0016341:	31 d2                	xor    edx,edx
c0016343:	83 c4 0c             	add    esp,0xc
c0016346:	c3                   	ret    

c0016347 <sysCallGetPID(regs*)>:
c0016347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001634f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016351:	99                   	cdq    
c0016352:	c3                   	ret    

c0016353 <sysCallSeekDir(regs*)>:
c0016353:	31 c0                	xor    eax,eax
c0016355:	31 d2                	xor    edx,edx
c0016357:	c3                   	ret    

c0016358 <sysCallTellDir(regs*)>:
c0016358:	31 c0                	xor    eax,eax
c001635a:	31 d2                	xor    edx,edx
c001635c:	c3                   	ret    

c001635d <sysCallVerify(regs*)>:
c001635d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016361:	31 d2                	xor    edx,edx
c0016363:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016366:	c3                   	ret    

c0016367 <sysCallFork(regs*)>:
c0016367:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001636c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016371:	c3                   	ret    

c0016372 <sysCallExecve(regs*)>:
c0016372:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016377:	ba ff ff ff ff       	mov    edx,0xffffffff
c001637c:	c3                   	ret    

c001637d <sysCallGetArgc(regs*)>:
c001637d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016382:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016385:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001638b:	99                   	cdq    
c001638c:	c3                   	ret    

c001638d <sysFormatDisk(regs*)>:
c001638d:	56                   	push   esi
c001638e:	53                   	push   ebx
c001638f:	53                   	push   ebx
c0016390:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016394:	8b 1d 28 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024528
c001639a:	eb 25                	jmp    c00163c1 <sysFormatDisk(regs*)+0x34>
c001639c:	83 ec 0c             	sub    esp,0xc
c001639f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00163a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163a4:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00163a7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00163aa:	50                   	push   eax
c00163ab:	ff 34 85 c0 49 02 c0 	push   DWORD PTR [eax*4-0x3ffdb640]
c00163b2:	53                   	push   ebx
c00163b3:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00163b6:	83 c4 20             	add    esp,0x20
c00163b9:	83 f8 08             	cmp    eax,0x8
c00163bc:	75 12                	jne    c00163d0 <sysFormatDisk(regs*)+0x43>
c00163be:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00163c1:	85 db                	test   ebx,ebx
c00163c3:	75 d7                	jne    c001639c <sysFormatDisk(regs*)+0xf>
c00163c5:	59                   	pop    ecx
c00163c6:	b8 03 00 00 00       	mov    eax,0x3
c00163cb:	31 d2                	xor    edx,edx
c00163cd:	5b                   	pop    ebx
c00163ce:	5e                   	pop    esi
c00163cf:	c3                   	ret    
c00163d0:	85 c0                	test   eax,eax
c00163d2:	74 1b                	je     c00163ef <sysFormatDisk(regs*)+0x62>
c00163d4:	83 f8 09             	cmp    eax,0x9
c00163d7:	74 0b                	je     c00163e4 <sysFormatDisk(regs*)+0x57>
c00163d9:	59                   	pop    ecx
c00163da:	b8 02 00 00 00       	mov    eax,0x2
c00163df:	31 d2                	xor    edx,edx
c00163e1:	5b                   	pop    ebx
c00163e2:	5e                   	pop    esi
c00163e3:	c3                   	ret    
c00163e4:	59                   	pop    ecx
c00163e5:	b8 01 00 00 00       	mov    eax,0x1
c00163ea:	31 d2                	xor    edx,edx
c00163ec:	5b                   	pop    ebx
c00163ed:	5e                   	pop    esi
c00163ee:	c3                   	ret    
c00163ef:	59                   	pop    ecx
c00163f0:	31 c0                	xor    eax,eax
c00163f2:	31 d2                	xor    edx,edx
c00163f4:	5b                   	pop    ebx
c00163f5:	5e                   	pop    esi
c00163f6:	c3                   	ret    

c00163f7 <sysSetDiskVolumeLabel(regs*)>:
c00163f7:	56                   	push   esi
c00163f8:	53                   	push   ebx
c00163f9:	53                   	push   ebx
c00163fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163fe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016401:	83 f8 19             	cmp    eax,0x19
c0016404:	77 29                	ja     c001642f <sysSetDiskVolumeLabel(regs*)+0x38>
c0016406:	8b 0c 85 c0 49 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb640]
c001640d:	85 c9                	test   ecx,ecx
c001640f:	74 1e                	je     c001642f <sysSetDiskVolumeLabel(regs*)+0x38>
c0016411:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016414:	85 d2                	test   edx,edx
c0016416:	74 17                	je     c001642f <sysSetDiskVolumeLabel(regs*)+0x38>
c0016418:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001641e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016420:	52                   	push   edx
c0016421:	50                   	push   eax
c0016422:	51                   	push   ecx
c0016423:	53                   	push   ebx
c0016424:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	99                   	cdq    
c001642b:	59                   	pop    ecx
c001642c:	5b                   	pop    ebx
c001642d:	5e                   	pop    esi
c001642e:	c3                   	ret    
c001642f:	59                   	pop    ecx
c0016430:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016435:	ba ff ff ff ff       	mov    edx,0xffffffff
c001643a:	5b                   	pop    ebx
c001643b:	5e                   	pop    esi
c001643c:	c3                   	ret    

c001643d <sysGetDiskVolumeLabel(regs*)>:
c001643d:	57                   	push   edi
c001643e:	56                   	push   esi
c001643f:	53                   	push   ebx
c0016440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016444:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016447:	83 fa 19             	cmp    edx,0x19
c001644a:	77 34                	ja     c0016480 <sysGetDiskVolumeLabel(regs*)+0x43>
c001644c:	8b 0c 95 c0 49 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb640]
c0016453:	85 c9                	test   ecx,ecx
c0016455:	74 29                	je     c0016480 <sysGetDiskVolumeLabel(regs*)+0x43>
c0016457:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001645a:	85 db                	test   ebx,ebx
c001645c:	74 22                	je     c0016480 <sysGetDiskVolumeLabel(regs*)+0x43>
c001645e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016461:	85 c0                	test   eax,eax
c0016463:	74 1b                	je     c0016480 <sysGetDiskVolumeLabel(regs*)+0x43>
c0016465:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001646b:	83 ec 0c             	sub    esp,0xc
c001646e:	8b 3e                	mov    edi,DWORD PTR [esi]
c0016470:	50                   	push   eax
c0016471:	53                   	push   ebx
c0016472:	52                   	push   edx
c0016473:	51                   	push   ecx
c0016474:	56                   	push   esi
c0016475:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016478:	83 c4 20             	add    esp,0x20
c001647b:	99                   	cdq    
c001647c:	5b                   	pop    ebx
c001647d:	5e                   	pop    esi
c001647e:	5f                   	pop    edi
c001647f:	c3                   	ret    
c0016480:	5b                   	pop    ebx
c0016481:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016486:	ba ff ff ff ff       	mov    edx,0xffffffff
c001648b:	5e                   	pop    esi
c001648c:	5f                   	pop    edi
c001648d:	c3                   	ret    

c001648e <sysShutdown(regs*)>:
c001648e:	83 ec 0c             	sub    esp,0xc
c0016491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016495:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016498:	85 c0                	test   eax,eax
c001649a:	74 18                	je     c00164b4 <sysShutdown(regs*)+0x26>
c001649c:	83 f8 01             	cmp    eax,0x1
c001649f:	74 38                	je     c00164d9 <sysShutdown(regs*)+0x4b>
c00164a1:	83 f8 02             	cmp    eax,0x2
c00164a4:	74 24                	je     c00164ca <sysShutdown(regs*)+0x3c>
c00164a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00164b0:	83 c4 0c             	add    esp,0xc
c00164b3:	c3                   	ret    
c00164b4:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c00164b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00164bb:	6a 00                	push   0x0
c00164bd:	6a 00                	push   0x0
c00164bf:	6a 00                	push   0x0
c00164c1:	50                   	push   eax
c00164c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	eb dc                	jmp    c00164a6 <sysShutdown(regs*)+0x18>
c00164ca:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c00164cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00164d1:	6a 00                	push   0x0
c00164d3:	6a 00                	push   0x0
c00164d5:	6a 01                	push   0x1
c00164d7:	eb e8                	jmp    c00164c1 <sysShutdown(regs*)+0x33>
c00164d9:	a1 40 4a 02 c0       	mov    eax,ds:0xc0024a40
c00164de:	85 c0                	test   eax,eax
c00164e0:	74 02                	je     c00164e4 <sysShutdown(regs*)+0x56>
c00164e2:	ff d0                	call   eax
c00164e4:	31 c0                	xor    eax,eax
c00164e6:	31 d2                	xor    edx,edx
c00164e8:	83 c4 0c             	add    esp,0xc
c00164eb:	c3                   	ret    

c00164ec <sysCallGetCwd(regs*)>:
c00164ec:	83 ec 10             	sub    esp,0x10
c00164ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00164f3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00164f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00164f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164fe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016501:	e8 d3 94 ff ff       	call   c000f9d9 <getcwd(Process*, char*, int)>
c0016506:	83 c4 1c             	add    esp,0x1c
c0016509:	99                   	cdq    
c001650a:	c3                   	ret    

c001650b <sysCallSetCwd(regs*)>:
c001650b:	83 ec 14             	sub    esp,0x14
c001650e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016512:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016515:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001651a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001651d:	e8 e1 94 ff ff       	call   c000fa03 <setcwd(Process*, char*)>
c0016522:	83 c4 1c             	add    esp,0x1c
c0016525:	99                   	cdq    
c0016526:	c3                   	ret    

c0016527 <sysCallRealpath(regs*)>:
c0016527:	83 ec 0c             	sub    esp,0xc
c001652a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016531:	85 d2                	test   edx,edx
c0016533:	74 07                	je     c001653c <sysCallRealpath(regs*)+0x15>
c0016535:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016538:	85 c0                	test   eax,eax
c001653a:	75 0b                	jne    c0016547 <sysCallRealpath(regs*)+0x20>
c001653c:	b8 01 00 00 00       	mov    eax,0x1
c0016541:	31 d2                	xor    edx,edx
c0016543:	83 c4 0c             	add    esp,0xc
c0016546:	c3                   	ret    
c0016547:	51                   	push   ecx
c0016548:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001654e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016551:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0016557:	51                   	push   ecx
c0016558:	52                   	push   edx
c0016559:	50                   	push   eax
c001655a:	e8 5f 8f ff ff       	call   c000f4be <standardiseFiles(char*, char const*, char const*)>
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	31 c0                	xor    eax,eax
c0016564:	31 d2                	xor    edx,edx
c0016566:	83 c4 0c             	add    esp,0xc
c0016569:	c3                   	ret    

c001656a <sysCallReadDir(regs*)>:
c001656a:	53                   	push   ebx
c001656b:	83 ec 18             	sub    esp,0x18
c001656e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016572:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016575:	83 f8 02             	cmp    eax,0x2
c0016578:	76 53                	jbe    c00165cd <sysCallReadDir(regs*)+0x63>
c001657a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001657d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016583:	77 4f                	ja     c00165d4 <sysCallReadDir(regs*)+0x6a>
c0016585:	83 ec 0c             	sub    esp,0xc
c0016588:	50                   	push   eax
c0016589:	e8 83 7a ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c001658e:	83 c4 10             	add    esp,0x10
c0016591:	85 c0                	test   eax,eax
c0016593:	74 50                	je     c00165e5 <sysCallReadDir(regs*)+0x7b>
c0016595:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001659d:	83 ec 0c             	sub    esp,0xc
c00165a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00165a2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00165a6:	51                   	push   ecx
c00165a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00165aa:	6a 00                	push   0x0
c00165ac:	68 10 01 00 00       	push   0x110
c00165b1:	50                   	push   eax
c00165b2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00165b5:	83 c4 20             	add    esp,0x20
c00165b8:	85 c0                	test   eax,eax
c00165ba:	74 38                	je     c00165f4 <sysCallReadDir(regs*)+0x8a>
c00165bc:	83 f8 07             	cmp    eax,0x7
c00165bf:	74 0c                	je     c00165cd <sysCallReadDir(regs*)+0x63>
c00165c1:	b8 02 00 00 00       	mov    eax,0x2
c00165c6:	31 d2                	xor    edx,edx
c00165c8:	83 c4 18             	add    esp,0x18
c00165cb:	5b                   	pop    ebx
c00165cc:	c3                   	ret    
c00165cd:	b8 01 00 00 00       	mov    eax,0x1
c00165d2:	eb f2                	jmp    c00165c6 <sysCallReadDir(regs*)+0x5c>
c00165d4:	83 ec 08             	sub    esp,0x8
c00165d7:	52                   	push   edx
c00165d8:	68 14 27 02 c0       	push   0xc0022714
c00165dd:	e8 57 8b ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00165e2:	83 c4 10             	add    esp,0x10
c00165e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165ea:	ba ff ff ff ff       	mov    edx,0xffffffff
c00165ef:	83 c4 18             	add    esp,0x18
c00165f2:	5b                   	pop    ebx
c00165f3:	c3                   	ret    
c00165f4:	31 c0                	xor    eax,eax
c00165f6:	eb ce                	jmp    c00165c6 <sysCallReadDir(regs*)+0x5c>

c00165f8 <sysCallIsATTY(regs*)>:
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016602:	83 f8 02             	cmp    eax,0x2
c0016605:	76 07                	jbe    c001660e <sysCallIsATTY(regs*)+0x16>
c0016607:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001660c:	75 26                	jne    c0016634 <sysCallIsATTY(regs*)+0x3c>
c001660e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016613:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016616:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001661c:	85 c0                	test   eax,eax
c001661e:	74 24                	je     c0016644 <sysCallIsATTY(regs*)+0x4c>
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	8b 10                	mov    edx,DWORD PTR [eax]
c0016625:	50                   	push   eax
c0016626:	ff 12                	call   DWORD PTR [edx]
c0016628:	31 d2                	xor    edx,edx
c001662a:	0f b6 c0             	movzx  eax,al
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	83 c4 0c             	add    esp,0xc
c0016633:	c3                   	ret    
c0016634:	83 ec 0c             	sub    esp,0xc
c0016637:	50                   	push   eax
c0016638:	e8 d4 79 ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c001663d:	83 c4 10             	add    esp,0x10
c0016640:	85 c0                	test   eax,eax
c0016642:	75 dc                	jne    c0016620 <sysCallIsATTY(regs*)+0x28>
c0016644:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016649:	ba ff ff ff ff       	mov    edx,0xffffffff
c001664e:	83 c4 0c             	add    esp,0xc
c0016651:	c3                   	ret    

c0016652 <sysCallSeek(regs*)>:
c0016652:	53                   	push   ebx
c0016653:	83 ec 08             	sub    esp,0x8
c0016656:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001665a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001665d:	83 f8 02             	cmp    eax,0x2
c0016660:	76 4a                	jbe    c00166ac <sysCallSeek(regs*)+0x5a>
c0016662:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016667:	77 32                	ja     c001669b <sysCallSeek(regs*)+0x49>
c0016669:	83 ec 0c             	sub    esp,0xc
c001666c:	50                   	push   eax
c001666d:	e8 9f 79 ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c0016672:	83 c4 0c             	add    esp,0xc
c0016675:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016678:	31 db                	xor    ebx,ebx
c001667a:	53                   	push   ebx
c001667b:	51                   	push   ecx
c001667c:	50                   	push   eax
c001667d:	e8 08 91 ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0016682:	83 c4 10             	add    esp,0x10
c0016685:	85 c0                	test   eax,eax
c0016687:	0f 95 c0             	setne  al
c001668a:	31 d2                	xor    edx,edx
c001668c:	0f b6 c0             	movzx  eax,al
c001668f:	f7 d8                	neg    eax
c0016691:	83 d2 00             	adc    edx,0x0
c0016694:	83 c4 08             	add    esp,0x8
c0016697:	f7 da                	neg    edx
c0016699:	5b                   	pop    ebx
c001669a:	c3                   	ret    
c001669b:	83 ec 08             	sub    esp,0x8
c001669e:	50                   	push   eax
c001669f:	68 d0 27 02 c0       	push   0xc00227d0
c00166a4:	e8 90 8a ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00166b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00166b6:	83 c4 08             	add    esp,0x8
c00166b9:	5b                   	pop    ebx
c00166ba:	c3                   	ret    

c00166bb <sysCallTell(regs*)>:
c00166bb:	53                   	push   ebx
c00166bc:	83 ec 08             	sub    esp,0x8
c00166bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166c6:	83 f8 02             	cmp    eax,0x2
c00166c9:	76 5e                	jbe    c0016729 <sysCallTell(regs*)+0x6e>
c00166cb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00166d0:	77 2d                	ja     c00166ff <sysCallTell(regs*)+0x44>
c00166d2:	83 ec 0c             	sub    esp,0xc
c00166d5:	50                   	push   eax
c00166d6:	e8 36 79 ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c00166db:	5a                   	pop    edx
c00166dc:	59                   	pop    ecx
c00166dd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166e0:	50                   	push   eax
c00166e1:	e8 fa 90 ff ff       	call   c000f7e0 <File::tell(unsigned long long*)>
c00166e6:	83 c4 10             	add    esp,0x10
c00166e9:	85 c0                	test   eax,eax
c00166eb:	0f 95 c0             	setne  al
c00166ee:	31 d2                	xor    edx,edx
c00166f0:	0f b6 c0             	movzx  eax,al
c00166f3:	f7 d8                	neg    eax
c00166f5:	83 d2 00             	adc    edx,0x0
c00166f8:	83 c4 08             	add    esp,0x8
c00166fb:	f7 da                	neg    edx
c00166fd:	5b                   	pop    ebx
c00166fe:	c3                   	ret    
c00166ff:	83 ec 08             	sub    esp,0x8
c0016702:	50                   	push   eax
c0016703:	68 ea 27 02 c0       	push   0xc00227ea
c0016708:	e8 2c 8a ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001670d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016710:	83 c4 10             	add    esp,0x10
c0016713:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016719:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016720:	31 d2                	xor    edx,edx
c0016722:	31 c0                	xor    eax,eax
c0016724:	83 c4 08             	add    esp,0x8
c0016727:	5b                   	pop    ebx
c0016728:	c3                   	ret    
c0016729:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001672e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016733:	83 c4 08             	add    esp,0x8
c0016736:	5b                   	pop    ebx
c0016737:	c3                   	ret    

c0016738 <sysCallSizeFromFilename(regs*)>:
c0016738:	57                   	push   edi
c0016739:	56                   	push   esi
c001673a:	53                   	push   ebx
c001673b:	83 ec 10             	sub    esp,0x10
c001673e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016742:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016745:	83 fb 02             	cmp    ebx,0x2
c0016748:	0f 86 8a 00 00 00    	jbe    c00167d8 <sysCallSizeFromFilename(regs*)+0xa0>
c001674e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016754:	77 56                	ja     c00167ac <sysCallSizeFromFilename(regs*)+0x74>
c0016756:	83 ec 0c             	sub    esp,0xc
c0016759:	68 14 01 00 00       	push   0x114
c001675e:	e8 e7 88 ff ff       	call   c000f04a <operator new(unsigned long)>
c0016763:	83 c4 0c             	add    esp,0xc
c0016766:	89 c7                	mov    edi,eax
c0016768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001676d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016770:	53                   	push   ebx
c0016771:	57                   	push   edi
c0016772:	e8 f1 8e ff ff       	call   c000f668 <File::File(char const*, Process*)>
c0016777:	83 c4 0c             	add    esp,0xc
c001677a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001677e:	50                   	push   eax
c001677f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016782:	57                   	push   edi
c0016783:	e8 f0 91 ff ff       	call   c000f978 <File::stat(unsigned long long*, bool*)>
c0016788:	89 3c 24             	mov    DWORD PTR [esp],edi
c001678b:	89 c3                	mov    ebx,eax
c001678d:	8b 07                	mov    eax,DWORD PTR [edi]
c001678f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	31 c0                	xor    eax,eax
c0016797:	85 db                	test   ebx,ebx
c0016799:	0f 95 c0             	setne  al
c001679c:	31 d2                	xor    edx,edx
c001679e:	f7 d8                	neg    eax
c00167a0:	83 d2 00             	adc    edx,0x0
c00167a3:	83 c4 10             	add    esp,0x10
c00167a6:	f7 da                	neg    edx
c00167a8:	5b                   	pop    ebx
c00167a9:	5e                   	pop    esi
c00167aa:	5f                   	pop    edi
c00167ab:	c3                   	ret    
c00167ac:	83 ec 08             	sub    esp,0x8
c00167af:	53                   	push   ebx
c00167b0:	68 04 28 02 c0       	push   0xc0022804
c00167b5:	e8 7f 89 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00167ba:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00167bd:	83 c4 10             	add    esp,0x10
c00167c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00167c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167cd:	31 d2                	xor    edx,edx
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	31 c0                	xor    eax,eax
c00167d4:	5b                   	pop    ebx
c00167d5:	5e                   	pop    esi
c00167d6:	5f                   	pop    edi
c00167d7:	c3                   	ret    
c00167d8:	83 c4 10             	add    esp,0x10
c00167db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167e0:	5b                   	pop    ebx
c00167e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167e6:	5e                   	pop    esi
c00167e7:	5f                   	pop    edi
c00167e8:	c3                   	ret    

c00167e9 <sysCallSize(regs*)>:
c00167e9:	53                   	push   ebx
c00167ea:	83 ec 18             	sub    esp,0x18
c00167ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00167f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167f4:	83 f8 02             	cmp    eax,0x2
c00167f7:	76 64                	jbe    c001685d <sysCallSize(regs*)+0x74>
c00167f9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00167fe:	77 33                	ja     c0016833 <sysCallSize(regs*)+0x4a>
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	50                   	push   eax
c0016804:	e8 08 78 ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c0016809:	83 c4 0c             	add    esp,0xc
c001680c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016810:	52                   	push   edx
c0016811:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016814:	50                   	push   eax
c0016815:	e8 5e 91 ff ff       	call   c000f978 <File::stat(unsigned long long*, bool*)>
c001681a:	83 c4 10             	add    esp,0x10
c001681d:	85 c0                	test   eax,eax
c001681f:	0f 95 c0             	setne  al
c0016822:	31 d2                	xor    edx,edx
c0016824:	0f b6 c0             	movzx  eax,al
c0016827:	f7 d8                	neg    eax
c0016829:	83 d2 00             	adc    edx,0x0
c001682c:	83 c4 18             	add    esp,0x18
c001682f:	f7 da                	neg    edx
c0016831:	5b                   	pop    ebx
c0016832:	c3                   	ret    
c0016833:	83 ec 08             	sub    esp,0x8
c0016836:	50                   	push   eax
c0016837:	68 04 28 02 c0       	push   0xc0022804
c001683c:	e8 f8 88 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0016841:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016844:	83 c4 10             	add    esp,0x10
c0016847:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001684d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016854:	31 d2                	xor    edx,edx
c0016856:	31 c0                	xor    eax,eax
c0016858:	83 c4 18             	add    esp,0x18
c001685b:	5b                   	pop    ebx
c001685c:	c3                   	ret    
c001685d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016862:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016867:	83 c4 18             	add    esp,0x18
c001686a:	5b                   	pop    ebx
c001686b:	c3                   	ret    

c001686c <sysCallClose(regs*)>:
c001686c:	53                   	push   ebx
c001686d:	83 ec 08             	sub    esp,0x8
c0016870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016874:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016877:	83 f8 02             	cmp    eax,0x2
c001687a:	76 50                	jbe    c00168cc <sysCallClose(regs*)+0x60>
c001687c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016881:	74 58                	je     c00168db <sysCallClose(regs*)+0x6f>
c0016883:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016888:	74 60                	je     c00168ea <sysCallClose(regs*)+0x7e>
c001688a:	77 2f                	ja     c00168bb <sysCallClose(regs*)+0x4f>
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	50                   	push   eax
c0016890:	e8 7c 77 ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c0016895:	89 c3                	mov    ebx,eax
c0016897:	89 04 24             	mov    DWORD PTR [esp],eax
c001689a:	e8 8b 8e ff ff       	call   c000f72a <File::close()>
c001689f:	83 c4 10             	add    esp,0x10
c00168a2:	85 db                	test   ebx,ebx
c00168a4:	74 0c                	je     c00168b2 <sysCallClose(regs*)+0x46>
c00168a6:	83 ec 0c             	sub    esp,0xc
c00168a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168ab:	53                   	push   ebx
c00168ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168af:	83 c4 10             	add    esp,0x10
c00168b2:	31 c0                	xor    eax,eax
c00168b4:	31 d2                	xor    edx,edx
c00168b6:	83 c4 08             	add    esp,0x8
c00168b9:	5b                   	pop    ebx
c00168ba:	c3                   	ret    
c00168bb:	83 ec 08             	sub    esp,0x8
c00168be:	50                   	push   eax
c00168bf:	68 38 27 02 c0       	push   0xc0022738
c00168c4:	e8 70 88 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00168c9:	83 c4 10             	add    esp,0x10
c00168cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168d6:	83 c4 08             	add    esp,0x8
c00168d9:	5b                   	pop    ebx
c00168da:	c3                   	ret    
c00168db:	83 ec 0c             	sub    esp,0xc
c00168de:	68 1f 28 02 c0       	push   0xc002281f
c00168e3:	e8 51 88 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00168e8:	eb c5                	jmp    c00168af <sysCallClose(regs*)+0x43>
c00168ea:	83 ec 0c             	sub    esp,0xc
c00168ed:	68 2d 28 02 c0       	push   0xc002282d
c00168f2:	eb ef                	jmp    c00168e3 <sysCallClose(regs*)+0x77>

c00168f4 <sysCallOpenDir(regs*)>:
c00168f4:	56                   	push   esi
c00168f5:	53                   	push   ebx
c00168f6:	53                   	push   ebx
c00168f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168fb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00168fe:	85 f6                	test   esi,esi
c0016900:	74 51                	je     c0016953 <sysCallOpenDir(regs*)+0x5f>
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	68 14 01 00 00       	push   0x114
c001690a:	e8 3b 87 ff ff       	call   c000f04a <operator new(unsigned long)>
c001690f:	83 c4 0c             	add    esp,0xc
c0016912:	89 c6                	mov    esi,eax
c0016914:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016919:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001691c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001691f:	56                   	push   esi
c0016920:	e8 05 92 ff ff       	call   c000fb2a <Directory::Directory(char const*, Process*)>
c0016925:	89 34 24             	mov    DWORD PTR [esp],esi
c0016928:	e8 61 92 ff ff       	call   c000fb8e <Directory::open()>
c001692d:	83 c4 10             	add    esp,0x10
c0016930:	85 c0                	test   eax,eax
c0016932:	75 1f                	jne    c0016953 <sysCallOpenDir(regs*)+0x5f>
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	56                   	push   esi
c0016938:	e8 1f 74 ff ff       	call   c000dd5c <UnixFile::getFileDescriptor()>
c001693d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016940:	83 c4 10             	add    esp,0x10
c0016943:	89 02                	mov    DWORD PTR [edx],eax
c0016945:	c1 f8 1f             	sar    eax,0x1f
c0016948:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001694b:	31 c0                	xor    eax,eax
c001694d:	59                   	pop    ecx
c001694e:	31 d2                	xor    edx,edx
c0016950:	5b                   	pop    ebx
c0016951:	5e                   	pop    esi
c0016952:	c3                   	ret    
c0016953:	59                   	pop    ecx
c0016954:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016959:	ba ff ff ff ff       	mov    edx,0xffffffff
c001695e:	5b                   	pop    ebx
c001695f:	5e                   	pop    esi
c0016960:	c3                   	ret    

c0016961 <sysCallMakeDir(regs*)>:
c0016961:	56                   	push   esi
c0016962:	53                   	push   ebx
c0016963:	83 ec 10             	sub    esp,0x10
c0016966:	68 14 01 00 00       	push   0x114
c001696b:	e8 da 86 ff ff       	call   c000f04a <operator new(unsigned long)>
c0016970:	83 c4 0c             	add    esp,0xc
c0016973:	89 c3                	mov    ebx,eax
c0016975:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001697a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001697d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016981:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016984:	53                   	push   ebx
c0016985:	e8 a0 91 ff ff       	call   c000fb2a <Directory::Directory(char const*, Process*)>
c001698a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001698d:	e8 dc 93 ff ff       	call   c000fd6e <Directory::create()>
c0016992:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016995:	89 c6                	mov    esi,eax
c0016997:	e8 4e 92 ff ff       	call   c000fbea <Directory::close()>
c001699c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001699e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169a4:	31 c0                	xor    eax,eax
c00169a6:	85 f6                	test   esi,esi
c00169a8:	0f 95 c0             	setne  al
c00169ab:	31 d2                	xor    edx,edx
c00169ad:	f7 d8                	neg    eax
c00169af:	83 d2 00             	adc    edx,0x0
c00169b2:	83 c4 14             	add    esp,0x14
c00169b5:	f7 da                	neg    edx
c00169b7:	5b                   	pop    ebx
c00169b8:	5e                   	pop    esi
c00169b9:	c3                   	ret    

c00169ba <sysCallCloseDir(regs*)>:
c00169ba:	53                   	push   ebx
c00169bb:	83 ec 08             	sub    esp,0x8
c00169be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00169c5:	83 f8 02             	cmp    eax,0x2
c00169c8:	76 47                	jbe    c0016a11 <sysCallCloseDir(regs*)+0x57>
c00169ca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169cf:	77 2f                	ja     c0016a00 <sysCallCloseDir(regs*)+0x46>
c00169d1:	83 ec 0c             	sub    esp,0xc
c00169d4:	50                   	push   eax
c00169d5:	e8 37 76 ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c00169da:	89 c3                	mov    ebx,eax
c00169dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00169df:	e8 06 92 ff ff       	call   c000fbea <Directory::close()>
c00169e4:	83 c4 10             	add    esp,0x10
c00169e7:	85 db                	test   ebx,ebx
c00169e9:	74 0c                	je     c00169f7 <sysCallCloseDir(regs*)+0x3d>
c00169eb:	83 ec 0c             	sub    esp,0xc
c00169ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169f0:	53                   	push   ebx
c00169f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169f4:	83 c4 10             	add    esp,0x10
c00169f7:	31 c0                	xor    eax,eax
c00169f9:	31 d2                	xor    edx,edx
c00169fb:	83 c4 08             	add    esp,0x8
c00169fe:	5b                   	pop    ebx
c00169ff:	c3                   	ret    
c0016a00:	83 ec 08             	sub    esp,0x8
c0016a03:	50                   	push   eax
c0016a04:	68 60 27 02 c0       	push   0xc0022760
c0016a09:	e8 2b 87 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0016a0e:	83 c4 10             	add    esp,0x10
c0016a11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a1b:	83 c4 08             	add    esp,0x8
c0016a1e:	5b                   	pop    ebx
c0016a1f:	c3                   	ret    

c0016a20 <sysCallWait(regs*)>:
c0016a20:	83 ec 10             	sub    esp,0x10
c0016a23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a27:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016a2a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016a2d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016a30:	e8 ee 22 00 00       	call   c0018d23 <waitTask(int, int*, int)>
c0016a35:	83 c4 1c             	add    esp,0x1c
c0016a38:	99                   	cdq    
c0016a39:	c3                   	ret    

c0016a3a <sysCallRmdir(regs*)>:
c0016a3a:	56                   	push   esi
c0016a3b:	53                   	push   ebx
c0016a3c:	83 ec 10             	sub    esp,0x10
c0016a3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a43:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a46:	68 14 01 00 00       	push   0x114
c0016a4b:	e8 fa 85 ff ff       	call   c000f04a <operator new(unsigned long)>
c0016a50:	83 c4 0c             	add    esp,0xc
c0016a53:	89 c3                	mov    ebx,eax
c0016a55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a5a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016a5d:	56                   	push   esi
c0016a5e:	53                   	push   ebx
c0016a5f:	e8 04 8c ff ff       	call   c000f668 <File::File(char const*, Process*)>
c0016a64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a67:	e8 d8 8d ff ff       	call   c000f844 <File::unlink()>
c0016a6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a6f:	89 c6                	mov    esi,eax
c0016a71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a76:	31 c0                	xor    eax,eax
c0016a78:	85 f6                	test   esi,esi
c0016a7a:	0f 95 c0             	setne  al
c0016a7d:	31 d2                	xor    edx,edx
c0016a7f:	f7 d8                	neg    eax
c0016a81:	83 d2 00             	adc    edx,0x0
c0016a84:	83 c4 14             	add    esp,0x14
c0016a87:	f7 da                	neg    edx
c0016a89:	5b                   	pop    ebx
c0016a8a:	5e                   	pop    esi
c0016a8b:	c3                   	ret    

c0016a8c <sysCallUnlink(regs*)>:
c0016a8c:	56                   	push   esi
c0016a8d:	53                   	push   ebx
c0016a8e:	83 ec 10             	sub    esp,0x10
c0016a91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a95:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016a98:	68 14 01 00 00       	push   0x114
c0016a9d:	e8 a8 85 ff ff       	call   c000f04a <operator new(unsigned long)>
c0016aa2:	83 c4 0c             	add    esp,0xc
c0016aa5:	89 c3                	mov    ebx,eax
c0016aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016aaf:	56                   	push   esi
c0016ab0:	53                   	push   ebx
c0016ab1:	e8 b2 8b ff ff       	call   c000f668 <File::File(char const*, Process*)>
c0016ab6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ab9:	e8 86 8d ff ff       	call   c000f844 <File::unlink()>
c0016abe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ac1:	89 c6                	mov    esi,eax
c0016ac3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ac5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ac8:	31 c0                	xor    eax,eax
c0016aca:	85 f6                	test   esi,esi
c0016acc:	0f 95 c0             	setne  al
c0016acf:	31 d2                	xor    edx,edx
c0016ad1:	f7 d8                	neg    eax
c0016ad3:	83 d2 00             	adc    edx,0x0
c0016ad6:	83 c4 14             	add    esp,0x14
c0016ad9:	f7 da                	neg    edx
c0016adb:	5b                   	pop    ebx
c0016adc:	5e                   	pop    esi
c0016add:	c3                   	ret    

c0016ade <sysCallGetArgv(regs*)>:
c0016ade:	83 ec 0c             	sub    esp,0xc
c0016ae1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ae5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016ae8:	85 c0                	test   eax,eax
c0016aea:	78 2b                	js     c0016b17 <sysCallGetArgv(regs*)+0x39>
c0016aec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016af2:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016af5:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016afb:	7d 1a                	jge    c0016b17 <sysCallGetArgv(regs*)+0x39>
c0016afd:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016b04:	85 c0                	test   eax,eax
c0016b06:	74 17                	je     c0016b1f <sysCallGetArgv(regs*)+0x41>
c0016b08:	83 ec 08             	sub    esp,0x8
c0016b0b:	50                   	push   eax
c0016b0c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016b0f:	e8 71 9c fe ff       	call   c0000785 <strcpy>
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	31 c0                	xor    eax,eax
c0016b19:	31 d2                	xor    edx,edx
c0016b1b:	83 c4 0c             	add    esp,0xc
c0016b1e:	c3                   	ret    
c0016b1f:	b8 01 00 00 00       	mov    eax,0x1
c0016b24:	31 d2                	xor    edx,edx
c0016b26:	83 c4 0c             	add    esp,0xc
c0016b29:	c3                   	ret    

c0016b2a <sysCallTTYName(regs*)>:
c0016b2a:	56                   	push   esi
c0016b2b:	53                   	push   ebx
c0016b2c:	53                   	push   ebx
c0016b2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b31:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016b34:	85 c0                	test   eax,eax
c0016b36:	74 5f                	je     c0016b97 <sysCallTTYName(regs*)+0x6d>
c0016b38:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016b3b:	83 f8 02             	cmp    eax,0x2
c0016b3e:	77 3e                	ja     c0016b7e <sysCallTTYName(regs*)+0x54>
c0016b40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b48:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016b4e:	85 db                	test   ebx,ebx
c0016b50:	74 45                	je     c0016b97 <sysCallTTYName(regs*)+0x6d>
c0016b52:	83 ec 0c             	sub    esp,0xc
c0016b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b57:	53                   	push   ebx
c0016b58:	ff 10                	call   DWORD PTR [eax]
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	84 c0                	test   al,al
c0016b5f:	74 41                	je     c0016ba2 <sysCallTTYName(regs*)+0x78>
c0016b61:	83 ec 08             	sub    esp,0x8
c0016b64:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016b6a:	53                   	push   ebx
c0016b6b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016b6e:	e8 12 9c fe ff       	call   c0000785 <strcpy>
c0016b73:	83 c4 10             	add    esp,0x10
c0016b76:	31 c0                	xor    eax,eax
c0016b78:	59                   	pop    ecx
c0016b79:	31 d2                	xor    edx,edx
c0016b7b:	5b                   	pop    ebx
c0016b7c:	5e                   	pop    esi
c0016b7d:	c3                   	ret    
c0016b7e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016b83:	74 bb                	je     c0016b40 <sysCallTTYName(regs*)+0x16>
c0016b85:	83 ec 0c             	sub    esp,0xc
c0016b88:	50                   	push   eax
c0016b89:	e8 83 74 ff ff       	call   c000e011 <getFromFileDescriptor(int)>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	89 c3                	mov    ebx,eax
c0016b93:	85 db                	test   ebx,ebx
c0016b95:	75 bb                	jne    c0016b52 <sysCallTTYName(regs*)+0x28>
c0016b97:	59                   	pop    ecx
c0016b98:	b8 01 00 00 00       	mov    eax,0x1
c0016b9d:	31 d2                	xor    edx,edx
c0016b9f:	5b                   	pop    ebx
c0016ba0:	5e                   	pop    esi
c0016ba1:	c3                   	ret    
c0016ba2:	59                   	pop    ecx
c0016ba3:	b8 02 00 00 00       	mov    eax,0x2
c0016ba8:	31 d2                	xor    edx,edx
c0016baa:	5b                   	pop    ebx
c0016bab:	5e                   	pop    esi
c0016bac:	c3                   	ret    

c0016bad <sysCallGetEnv(regs*)>:
c0016bad:	83 ec 0c             	sub    esp,0xc
c0016bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0016bb7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016bba:	85 c9                	test   ecx,ecx
c0016bbc:	75 22                	jne    c0016be0 <sysCallGetEnv(regs*)+0x33>
c0016bbe:	85 d2                	test   edx,edx
c0016bc0:	74 08                	je     c0016bca <sysCallGetEnv(regs*)+0x1d>
c0016bc2:	31 c0                	xor    eax,eax
c0016bc4:	31 d2                	xor    edx,edx
c0016bc6:	83 c4 0c             	add    esp,0xc
c0016bc9:	c3                   	ret    
c0016bca:	83 ec 0c             	sub    esp,0xc
c0016bcd:	68 84 27 02 c0       	push   0xc0022784
c0016bd2:	e8 2c 9b fe ff       	call   c0000703 <strlen>
c0016bd7:	83 c4 10             	add    esp,0x10
c0016bda:	31 d2                	xor    edx,edx
c0016bdc:	83 c4 0c             	add    esp,0xc
c0016bdf:	c3                   	ret    
c0016be0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016be3:	85 d2                	test   edx,edx
c0016be5:	74 05                	je     c0016bec <sysCallGetEnv(regs*)+0x3f>
c0016be7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016bea:	eb d6                	jmp    c0016bc2 <sysCallGetEnv(regs*)+0x15>
c0016bec:	83 ec 08             	sub    esp,0x8
c0016bef:	68 84 27 02 c0       	push   0xc0022784
c0016bf4:	50                   	push   eax
c0016bf5:	e8 8b 9b fe ff       	call   c0000785 <strcpy>
c0016bfa:	83 c4 10             	add    esp,0x10
c0016bfd:	eb c3                	jmp    c0016bc2 <sysCallGetEnv(regs*)+0x15>

c0016bff <sysCallUSleep(regs*)>:
c0016bff:	83 ec 14             	sub    esp,0x14
c0016c02:	b8 e8 03 00 00       	mov    eax,0x3e8
c0016c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c0b:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0016c12:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0016c15:	01 ca                	add    edx,ecx
c0016c17:	52                   	push   edx
c0016c18:	50                   	push   eax
c0016c19:	e8 9e 21 00 00       	call   c0018dbc <nanoSleep(unsigned long long)>
c0016c1e:	31 c0                	xor    eax,eax
c0016c20:	31 d2                	xor    edx,edx
c0016c22:	83 c4 1c             	add    esp,0x1c
c0016c25:	c3                   	ret    

c0016c26 <sysCallSpawn(regs*)>:
c0016c26:	56                   	push   esi
c0016c27:	53                   	push   ebx
c0016c28:	53                   	push   ebx
c0016c29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c2d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016c30:	85 f6                	test   esi,esi
c0016c32:	75 08                	jne    c0016c3c <sysCallSpawn(regs*)+0x16>
c0016c34:	59                   	pop    ecx
c0016c35:	31 c0                	xor    eax,eax
c0016c37:	31 d2                	xor    edx,edx
c0016c39:	5b                   	pop    ebx
c0016c3a:	5e                   	pop    esi
c0016c3b:	c3                   	ret    
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	68 3b 07 00 00       	push   0x73b
c0016c44:	e8 01 84 ff ff       	call   c000f04a <operator new(unsigned long)>
c0016c49:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c4c:	89 c6                	mov    esi,eax
c0016c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c53:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016c56:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c59:	56                   	push   esi
c0016c5a:	e8 bd 18 00 00       	call   c001851c <Process::Process(char const*, Process*, char**)>
c0016c5f:	83 c4 20             	add    esp,0x20
c0016c62:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016c69:	75 c9                	jne    c0016c34 <sysCallSpawn(regs*)+0xe>
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	56                   	push   esi
c0016c6f:	e8 0e 1e 00 00       	call   c0018a82 <Process::createUserThread()>
c0016c74:	8b 06                	mov    eax,DWORD PTR [esi]
c0016c76:	83 c4 10             	add    esp,0x10
c0016c79:	99                   	cdq    
c0016c7a:	59                   	pop    ecx
c0016c7b:	5b                   	pop    ebx
c0016c7c:	5e                   	pop    esi
c0016c7d:	c3                   	ret    

c0016c7e <sysAppSettings(regs*)>:
c0016c7e:	53                   	push   ebx
c0016c7f:	83 ec 08             	sub    esp,0x8
c0016c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c86:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016c89:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0016c8f:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016c94:	66 3d c0 09          	cmp    ax,0x9c0
c0016c98:	75 2f                	jne    c0016cc9 <sysAppSettings(regs*)+0x4b>
c0016c9a:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016ca0:	83 e0 1f             	and    eax,0x1f
c0016ca3:	3c 01                	cmp    al,0x1
c0016ca5:	74 2e                	je     c0016cd5 <sysAppSettings(regs*)+0x57>
c0016ca7:	3c 07                	cmp    al,0x7
c0016ca9:	0f 84 bd 00 00 00    	je     c0016d6c <sysAppSettings(regs*)+0xee>
c0016caf:	84 c0                	test   al,al
c0016cb1:	0f 84 dc 00 00 00    	je     c0016d93 <sysAppSettings(regs*)+0x115>
c0016cb7:	3c 08                	cmp    al,0x8
c0016cb9:	74 6d                	je     c0016d28 <sysAppSettings(regs*)+0xaa>
c0016cbb:	0f b6 c0             	movzx  eax,al
c0016cbe:	83 c4 08             	add    esp,0x8
c0016cc1:	05 e8 03 00 00       	add    eax,0x3e8
c0016cc6:	5b                   	pop    ebx
c0016cc7:	99                   	cdq    
c0016cc8:	c3                   	ret    
c0016cc9:	b8 01 00 00 00       	mov    eax,0x1
c0016cce:	31 d2                	xor    edx,edx
c0016cd0:	83 c4 08             	add    esp,0x8
c0016cd3:	5b                   	pop    ebx
c0016cd4:	c3                   	ret    
c0016cd5:	51                   	push   ecx
c0016cd6:	68 00 01 00 00       	push   0x100
c0016cdb:	6a 00                	push   0x0
c0016cdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ce5:	83 c0 0c             	add    eax,0xc
c0016ce8:	50                   	push   eax
c0016ce9:	e8 f8 99 fe ff       	call   c00006e6 <memset>
c0016cee:	83 c4 0c             	add    esp,0xc
c0016cf1:	68 ff 00 00 00       	push   0xff
c0016cf6:	53                   	push   ebx
c0016cf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cfc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cff:	83 c0 0c             	add    eax,0xc
c0016d02:	50                   	push   eax
c0016d03:	e8 a8 99 fe ff       	call   c00006b0 <memcpy>
c0016d08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d0d:	5b                   	pop    ebx
c0016d0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d11:	5a                   	pop    edx
c0016d12:	8d 50 0c             	lea    edx,[eax+0xc]
c0016d15:	52                   	push   edx
c0016d16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016d1c:	e8 cf 64 ff ff       	call   c000d1f0 <VgaText::setTitle(char*)>
c0016d21:	83 c4 10             	add    esp,0x10
c0016d24:	31 c0                	xor    eax,eax
c0016d26:	eb a6                	jmp    c0016cce <sysAppSettings(regs*)+0x50>
c0016d28:	83 ec 08             	sub    esp,0x8
c0016d2b:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016d31:	83 e0 0f             	and    eax,0xf
c0016d34:	50                   	push   eax
c0016d35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016d43:	e8 98 64 ff ff       	call   c000d1e0 <VgaText::setTitleColour(VgaColour)>
c0016d48:	58                   	pop    eax
c0016d49:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016d4f:	5a                   	pop    edx
c0016d50:	c1 e8 04             	shr    eax,0x4
c0016d53:	83 e0 0f             	and    eax,0xf
c0016d56:	50                   	push   eax
c0016d57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0016d65:	e8 66 64 ff ff       	call   c000d1d0 <VgaText::setTitleTextColour(VgaColour)>
c0016d6a:	eb b5                	jmp    c0016d21 <sysAppSettings(regs*)+0xa3>
c0016d6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d74:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016d7a:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016d80:	c0 e8 06             	shr    al,0x6
c0016d83:	83 e0 01             	and    eax,0x1
c0016d86:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016d8c:	31 c0                	xor    eax,eax
c0016d8e:	e9 3b ff ff ff       	jmp    c0016cce <sysAppSettings(regs*)+0x50>
c0016d93:	b8 02 00 00 00       	mov    eax,0x2
c0016d98:	e9 31 ff ff ff       	jmp    c0016cce <sysAppSettings(regs*)+0x50>

c0016d9d <sysSetFatAttrib(regs*)>:
c0016d9d:	57                   	push   edi
c0016d9e:	56                   	push   esi
c0016d9f:	53                   	push   ebx
c0016da0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016da4:	83 ec 0c             	sub    esp,0xc
c0016da7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016daa:	68 14 01 00 00       	push   0x114
c0016daf:	e8 96 82 ff ff       	call   c000f04a <operator new(unsigned long)>
c0016db4:	83 c4 0c             	add    esp,0xc
c0016db7:	89 c3                	mov    ebx,eax
c0016db9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dbe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016dc1:	57                   	push   edi
c0016dc2:	53                   	push   ebx
c0016dc3:	e8 a0 88 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c0016dc8:	83 c4 0c             	add    esp,0xc
c0016dcb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016dce:	0f b6 d4             	movzx  edx,ah
c0016dd1:	0f b6 c0             	movzx  eax,al
c0016dd4:	52                   	push   edx
c0016dd5:	50                   	push   eax
c0016dd6:	53                   	push   ebx
c0016dd7:	e8 02 8b ff ff       	call   c000f8de <File::chfatattr(unsigned char, unsigned char)>
c0016ddc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ddf:	89 c6                	mov    esi,eax
c0016de1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016de3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016de6:	83 c4 10             	add    esp,0x10
c0016de9:	31 c0                	xor    eax,eax
c0016deb:	5b                   	pop    ebx
c0016dec:	85 f6                	test   esi,esi
c0016dee:	5e                   	pop    esi
c0016def:	0f 95 c0             	setne  al
c0016df2:	5f                   	pop    edi
c0016df3:	31 d2                	xor    edx,edx
c0016df5:	f7 d8                	neg    eax
c0016df7:	83 d2 00             	adc    edx,0x0
c0016dfa:	f7 da                	neg    edx
c0016dfc:	c3                   	ret    

c0016dfd <sysPanic(regs*)>:
c0016dfd:	83 ec 18             	sub    esp,0x18
c0016e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e04:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016e07:	e8 14 eb ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0016e0c:	c7 04 24 3b 28 02 c0 	mov    DWORD PTR [esp],0xc002283b
c0016e13:	e8 08 eb ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0016e18:	b8 01 00 00 00       	mov    eax,0x1
c0016e1d:	31 d2                	xor    edx,edx
c0016e1f:	83 c4 1c             	add    esp,0x1c
c0016e22:	c3                   	ret    

c0016e23 <sysPipe(regs*)>:
c0016e23:	57                   	push   edi
c0016e24:	56                   	push   esi
c0016e25:	53                   	push   ebx
c0016e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2a:	83 ec 0c             	sub    esp,0xc
c0016e2d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016e30:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016e33:	6a 20                	push   0x20
c0016e35:	e8 10 82 ff ff       	call   c000f04a <operator new(unsigned long)>
c0016e3a:	89 c3                	mov    ebx,eax
c0016e3c:	58                   	pop    eax
c0016e3d:	5a                   	pop    edx
c0016e3e:	68 00 50 00 00       	push   0x5000
c0016e43:	53                   	push   ebx
c0016e44:	e8 e5 5c ff ff       	call   c000cb2e <Pipe::Pipe(int)>
c0016e49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e4c:	e8 0b 6f ff ff       	call   c000dd5c <UnixFile::getFileDescriptor()>
c0016e51:	89 07                	mov    DWORD PTR [edi],eax
c0016e53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e56:	e8 01 6f ff ff       	call   c000dd5c <UnixFile::getFileDescriptor()>
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	89 06                	mov    DWORD PTR [esi],eax
c0016e60:	31 d2                	xor    edx,edx
c0016e62:	5b                   	pop    ebx
c0016e63:	31 c0                	xor    eax,eax
c0016e65:	5e                   	pop    esi
c0016e66:	5f                   	pop    edi
c0016e67:	c3                   	ret    

c0016e68 <sysGetUnixTime(regs*)>:
c0016e68:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c0016e6d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e77:	e9 b4 91 ff ff       	jmp    c0010030 <Clock::timeInSecondsLocal()>

c0016e7c <string_ends_with(char const*, char const*)>:
c0016e7c:	57                   	push   edi
c0016e7d:	56                   	push   esi
c0016e7e:	53                   	push   ebx
c0016e7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e83:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e87:	83 ec 0c             	sub    esp,0xc
c0016e8a:	53                   	push   ebx
c0016e8b:	e8 73 98 fe ff       	call   c0000703 <strlen>
c0016e90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e93:	89 c6                	mov    esi,eax
c0016e95:	e8 69 98 fe ff       	call   c0000703 <strlen>
c0016e9a:	83 c4 10             	add    esp,0x10
c0016e9d:	39 c6                	cmp    esi,eax
c0016e9f:	7d 06                	jge    c0016ea7 <string_ends_with(char const*, char const*)+0x2b>
c0016ea1:	5b                   	pop    ebx
c0016ea2:	31 c0                	xor    eax,eax
c0016ea4:	5e                   	pop    esi
c0016ea5:	5f                   	pop    edi
c0016ea6:	c3                   	ret    
c0016ea7:	83 ec 08             	sub    esp,0x8
c0016eaa:	29 c6                	sub    esi,eax
c0016eac:	57                   	push   edi
c0016ead:	01 f3                	add    ebx,esi
c0016eaf:	53                   	push   ebx
c0016eb0:	e8 21 99 fe ff       	call   c00007d6 <strcmp>
c0016eb5:	83 c4 10             	add    esp,0x10
c0016eb8:	85 c0                	test   eax,eax
c0016eba:	5b                   	pop    ebx
c0016ebb:	0f 94 c0             	sete   al
c0016ebe:	5e                   	pop    esi
c0016ebf:	0f b6 c0             	movzx  eax,al
c0016ec2:	5f                   	pop    edi
c0016ec3:	c3                   	ret    

c0016ec4 <sysCallOpen(regs*)>:
c0016ec4:	56                   	push   esi
c0016ec5:	53                   	push   ebx
c0016ec6:	81 ec 04 01 00 00    	sub    esp,0x104
c0016ecc:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016ed3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016ed6:	85 c9                	test   ecx,ecx
c0016ed8:	0f 84 b3 00 00 00    	je     c0016f91 <sysCallOpen(regs*)+0xcd>
c0016ede:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ee1:	85 c0                	test   eax,eax
c0016ee3:	0f 84 a8 00 00 00    	je     c0016f91 <sysCallOpen(regs*)+0xcd>
c0016ee9:	52                   	push   edx
c0016eea:	68 4a 28 02 c0       	push   0xc002284a
c0016eef:	50                   	push   eax
c0016ef0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016ef4:	56                   	push   esi
c0016ef5:	e8 c4 85 ff ff       	call   c000f4be <standardiseFiles(char*, char const*, char const*)>
c0016efa:	89 34 24             	mov    DWORD PTR [esp],esi
c0016efd:	e8 01 98 fe ff       	call   c0000703 <strlen>
c0016f02:	83 c4 10             	add    esp,0x10
c0016f05:	48                   	dec    eax
c0016f06:	74 1d                	je     c0016f25 <sysCallOpen(regs*)+0x61>
c0016f08:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016f0b:	eb 0f                	jmp    c0016f1c <sysCallOpen(regs*)+0x58>
c0016f0d:	80 fa 3a             	cmp    dl,0x3a
c0016f10:	74 0f                	je     c0016f21 <sysCallOpen(regs*)+0x5d>
c0016f12:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016f16:	48                   	dec    eax
c0016f17:	74 0c                	je     c0016f25 <sysCallOpen(regs*)+0x61>
c0016f19:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016f1c:	80 fa 2e             	cmp    dl,0x2e
c0016f1f:	75 ec                	jne    c0016f0d <sysCallOpen(regs*)+0x49>
c0016f21:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016f25:	83 ec 08             	sub    esp,0x8
c0016f28:	68 4e 28 02 c0       	push   0xc002284e
c0016f2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f30:	e8 47 ff ff ff       	call   c0016e7c <string_ends_with(char const*, char const*)>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	85 c0                	test   eax,eax
c0016f3a:	75 17                	jne    c0016f53 <sysCallOpen(regs*)+0x8f>
c0016f3c:	83 ec 08             	sub    esp,0x8
c0016f3f:	68 6f 28 02 c0       	push   0xc002286f
c0016f44:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f47:	e8 30 ff ff ff       	call   c0016e7c <string_ends_with(char const*, char const*)>
c0016f4c:	83 c4 10             	add    esp,0x10
c0016f4f:	85 c0                	test   eax,eax
c0016f51:	74 51                	je     c0016fa4 <sysCallOpen(regs*)+0xe0>
c0016f53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f56:	83 ec 08             	sub    esp,0x8
c0016f59:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016f5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016f66:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f69:	ff 30                	push   DWORD PTR [eax]
c0016f6b:	68 53 28 02 c0       	push   0xc0022853
c0016f70:	e8 c4 81 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0016f75:	c7 04 24 62 28 02 c0 	mov    DWORD PTR [esp],0xc0022862
c0016f7c:	e8 b8 81 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0016f81:	83 c4 10             	add    esp,0x10
c0016f84:	81 c4 04 01 00 00    	add    esp,0x104
c0016f8a:	31 c0                	xor    eax,eax
c0016f8c:	31 d2                	xor    edx,edx
c0016f8e:	5b                   	pop    ebx
c0016f8f:	5e                   	pop    esi
c0016f90:	c3                   	ret    
c0016f91:	81 c4 04 01 00 00    	add    esp,0x104
c0016f97:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f9c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016fa1:	5b                   	pop    ebx
c0016fa2:	5e                   	pop    esi
c0016fa3:	c3                   	ret    
c0016fa4:	83 ec 08             	sub    esp,0x8
c0016fa7:	68 4f 28 02 c0       	push   0xc002284f
c0016fac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016faf:	e8 22 98 fe ff       	call   c00007d6 <strcmp>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	85 c0                	test   eax,eax
c0016fb9:	74 98                	je     c0016f53 <sysCallOpen(regs*)+0x8f>
c0016fbb:	83 ec 08             	sub    esp,0x8
c0016fbe:	68 4e 28 02 c0       	push   0xc002284e
c0016fc3:	56                   	push   esi
c0016fc4:	e8 b3 fe ff ff       	call   c0016e7c <string_ends_with(char const*, char const*)>
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	85 c0                	test   eax,eax
c0016fce:	75 83                	jne    c0016f53 <sysCallOpen(regs*)+0x8f>
c0016fd0:	83 ec 08             	sub    esp,0x8
c0016fd3:	68 74 28 02 c0       	push   0xc0022874
c0016fd8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016fdb:	e8 9c fe ff ff       	call   c0016e7c <string_ends_with(char const*, char const*)>
c0016fe0:	83 c4 10             	add    esp,0x10
c0016fe3:	85 c0                	test   eax,eax
c0016fe5:	0f 85 d1 00 00 00    	jne    c00170bc <sysCallOpen(regs*)+0x1f8>
c0016feb:	83 ec 08             	sub    esp,0x8
c0016fee:	68 79 28 02 c0       	push   0xc0022879
c0016ff3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ff6:	e8 81 fe ff ff       	call   c0016e7c <string_ends_with(char const*, char const*)>
c0016ffb:	83 c4 10             	add    esp,0x10
c0016ffe:	85 c0                	test   eax,eax
c0017000:	0f 85 b6 00 00 00    	jne    c00170bc <sysCallOpen(regs*)+0x1f8>
c0017006:	83 ec 08             	sub    esp,0x8
c0017009:	68 75 28 02 c0       	push   0xc0022875
c001700e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017011:	e8 c0 97 fe ff       	call   c00007d6 <strcmp>
c0017016:	83 c4 10             	add    esp,0x10
c0017019:	85 c0                	test   eax,eax
c001701b:	0f 84 9b 00 00 00    	je     c00170bc <sysCallOpen(regs*)+0x1f8>
c0017021:	83 ec 08             	sub    esp,0x8
c0017024:	68 74 28 02 c0       	push   0xc0022874
c0017029:	56                   	push   esi
c001702a:	e8 4d fe ff ff       	call   c0016e7c <string_ends_with(char const*, char const*)>
c001702f:	83 c4 10             	add    esp,0x10
c0017032:	85 c0                	test   eax,eax
c0017034:	0f 85 82 00 00 00    	jne    c00170bc <sysCallOpen(regs*)+0x1f8>
c001703a:	83 ec 0c             	sub    esp,0xc
c001703d:	68 14 01 00 00       	push   0x114
c0017042:	e8 03 80 ff ff       	call   c000f04a <operator new(unsigned long)>
c0017047:	83 c4 0c             	add    esp,0xc
c001704a:	89 c6                	mov    esi,eax
c001704c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017051:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0017054:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017057:	56                   	push   esi
c0017058:	e8 0b 86 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c001705d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017060:	83 c4 10             	add    esp,0x10
c0017063:	0f b6 c2             	movzx  eax,dl
c0017066:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017069:	89 d0                	mov    eax,edx
c001706b:	83 e0 01             	and    eax,0x1
c001706e:	f6 c2 02             	test   dl,0x2
c0017071:	74 03                	je     c0017076 <sysCallOpen(regs*)+0x1b2>
c0017073:	83 c8 02             	or     eax,0x2
c0017076:	f6 c2 04             	test   dl,0x4
c0017079:	74 03                	je     c001707e <sysCallOpen(regs*)+0x1ba>
c001707b:	83 c8 04             	or     eax,0x4
c001707e:	f6 c2 08             	test   dl,0x8
c0017081:	74 03                	je     c0017086 <sysCallOpen(regs*)+0x1c2>
c0017083:	83 c8 0a             	or     eax,0xa
c0017086:	83 e2 10             	and    edx,0x10
c0017089:	74 03                	je     c001708e <sysCallOpen(regs*)+0x1ca>
c001708b:	83 c8 12             	or     eax,0x12
c001708e:	83 ec 08             	sub    esp,0x8
c0017091:	50                   	push   eax
c0017092:	56                   	push   esi
c0017093:	e8 34 86 ff ff       	call   c000f6cc <File::open(FileOpenMode)>
c0017098:	83 c4 10             	add    esp,0x10
c001709b:	85 c0                	test   eax,eax
c001709d:	0f 85 ee fe ff ff    	jne    c0016f91 <sysCallOpen(regs*)+0xcd>
c00170a3:	83 ec 0c             	sub    esp,0xc
c00170a6:	56                   	push   esi
c00170a7:	e8 b0 6c ff ff       	call   c000dd5c <UnixFile::getFileDescriptor()>
c00170ac:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00170af:	89 02                	mov    DWORD PTR [edx],eax
c00170b1:	c1 f8 1f             	sar    eax,0x1f
c00170b4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00170b7:	e9 c5 fe ff ff       	jmp    c0016f81 <sysCallOpen(regs*)+0xbd>
c00170bc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00170bf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00170c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00170cc:	e9 b3 fe ff ff       	jmp    c0016f84 <sysCallOpen(regs*)+0xc0>

c00170d1 <setupSystemCalls()>:
c00170d1:	c7 05 20 4e 02 c0 2d 63 01 c0 	mov    DWORD PTR ds:0xc0024e20,0xc001632d
c00170db:	c7 05 24 4e 02 c0 5b 61 01 c0 	mov    DWORD PTR ds:0xc0024e24,0xc001615b
c00170e5:	c7 05 28 4e 02 c0 70 62 01 c0 	mov    DWORD PTR ds:0xc0024e28,0xc0016270
c00170ef:	c7 05 2c 4e 02 c0 c5 62 01 c0 	mov    DWORD PTR ds:0xc0024e2c,0xc00162c5
c00170f9:	c7 05 30 4e 02 c0 08 62 01 c0 	mov    DWORD PTR ds:0xc0024e30,0xc0016208
c0017103:	c7 05 34 4e 02 c0 47 63 01 c0 	mov    DWORD PTR ds:0xc0024e34,0xc0016347
c001710d:	c7 05 38 4e 02 c0 ec 64 01 c0 	mov    DWORD PTR ds:0xc0024e38,0xc00164ec
c0017117:	c7 05 3c 4e 02 c0 0b 65 01 c0 	mov    DWORD PTR ds:0xc0024e3c,0xc001650b
c0017121:	c7 05 44 4e 02 c0 6c 68 01 c0 	mov    DWORD PTR ds:0xc0024e44,0xc001686c
c001712b:	c7 05 40 4e 02 c0 c4 6e 01 c0 	mov    DWORD PTR ds:0xc0024e40,0xc0016ec4
c0017135:	c7 05 48 4e 02 c0 f4 68 01 c0 	mov    DWORD PTR ds:0xc0024e48,0xc00168f4
c001713f:	c7 05 4c 4e 02 c0 6a 65 01 c0 	mov    DWORD PTR ds:0xc0024e4c,0xc001656a
c0017149:	c7 05 50 4e 02 c0 53 63 01 c0 	mov    DWORD PTR ds:0xc0024e50,0xc0016353
c0017153:	c7 05 54 4e 02 c0 58 63 01 c0 	mov    DWORD PTR ds:0xc0024e54,0xc0016358
c001715d:	c7 05 58 4e 02 c0 61 69 01 c0 	mov    DWORD PTR ds:0xc0024e58,0xc0016961
c0017167:	c7 05 5c 4e 02 c0 ba 69 01 c0 	mov    DWORD PTR ds:0xc0024e5c,0xc00169ba
c0017171:	c7 05 60 4e 02 c0 52 66 01 c0 	mov    DWORD PTR ds:0xc0024e60,0xc0016652
c001717b:	c7 05 64 4e 02 c0 bb 66 01 c0 	mov    DWORD PTR ds:0xc0024e64,0xc00166bb
c0017185:	c7 05 68 4e 02 c0 e9 67 01 c0 	mov    DWORD PTR ds:0xc0024e68,0xc00167e9
c001718f:	c7 05 6c 4e 02 c0 5d 63 01 c0 	mov    DWORD PTR ds:0xc0024e6c,0xc001635d
c0017199:	c7 05 70 4e 02 c0 20 6a 01 c0 	mov    DWORD PTR ds:0xc0024e70,0xc0016a20
c00171a3:	c7 05 74 4e 02 c0 67 63 01 c0 	mov    DWORD PTR ds:0xc0024e74,0xc0016367
c00171ad:	c7 05 78 4e 02 c0 72 63 01 c0 	mov    DWORD PTR ds:0xc0024e78,0xc0016372
c00171b7:	c7 05 7c 4e 02 c0 3a 6a 01 c0 	mov    DWORD PTR ds:0xc0024e7c,0xc0016a3a
c00171c1:	c7 05 80 4e 02 c0 8c 6a 01 c0 	mov    DWORD PTR ds:0xc0024e80,0xc0016a8c
c00171cb:	c7 05 84 4e 02 c0 7d 63 01 c0 	mov    DWORD PTR ds:0xc0024e84,0xc001637d
c00171d5:	c7 05 88 4e 02 c0 de 6a 01 c0 	mov    DWORD PTR ds:0xc0024e88,0xc0016ade
c00171df:	c7 05 8c 4e 02 c0 27 65 01 c0 	mov    DWORD PTR ds:0xc0024e8c,0xc0016527
c00171e9:	c7 05 90 4e 02 c0 2a 6b 01 c0 	mov    DWORD PTR ds:0xc0024e90,0xc0016b2a
c00171f3:	c7 05 94 4e 02 c0 f8 65 01 c0 	mov    DWORD PTR ds:0xc0024e94,0xc00165f8
c00171fd:	c7 05 98 4e 02 c0 ff 6b 01 c0 	mov    DWORD PTR ds:0xc0024e98,0xc0016bff
c0017207:	c7 05 9c 4e 02 c0 38 67 01 c0 	mov    DWORD PTR ds:0xc0024e9c,0xc0016738
c0017211:	c7 05 a0 4e 02 c0 26 6c 01 c0 	mov    DWORD PTR ds:0xc0024ea0,0xc0016c26
c001721b:	c7 05 a4 4e 02 c0 ad 6b 01 c0 	mov    DWORD PTR ds:0xc0024ea4,0xc0016bad
c0017225:	c7 05 a8 4e 02 c0 7e 6c 01 c0 	mov    DWORD PTR ds:0xc0024ea8,0xc0016c7e
c001722f:	c7 05 ac 4e 02 c0 8d 63 01 c0 	mov    DWORD PTR ds:0xc0024eac,0xc001638d
c0017239:	c7 05 b0 4e 02 c0 f7 63 01 c0 	mov    DWORD PTR ds:0xc0024eb0,0xc00163f7
c0017243:	c7 05 b4 4e 02 c0 3d 64 01 c0 	mov    DWORD PTR ds:0xc0024eb4,0xc001643d
c001724d:	c7 05 b8 4e 02 c0 9d 6d 01 c0 	mov    DWORD PTR ds:0xc0024eb8,0xc0016d9d
c0017257:	c7 05 bc 4e 02 c0 fd 6d 01 c0 	mov    DWORD PTR ds:0xc0024ebc,0xc0016dfd
c0017261:	c7 05 c0 4e 02 c0 8e 64 01 c0 	mov    DWORD PTR ds:0xc0024ec0,0xc001648e
c001726b:	c7 05 c4 4e 02 c0 23 6e 01 c0 	mov    DWORD PTR ds:0xc0024ec4,0xc0016e23
c0017275:	c7 05 c8 4e 02 c0 68 6e 01 c0 	mov    DWORD PTR ds:0xc0024ec8,0xc0016e68
c001727f:	c7 05 cc 4e 02 c0 73 61 01 c0 	mov    DWORD PTR ds:0xc0024ecc,0xc0016173
c0017289:	c3                   	ret    

c001728a <systemCall(regs*, void*)>:
c001728a:	53                   	push   ebx
c001728b:	83 ec 08             	sub    esp,0x8
c001728e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017292:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017295:	83 f8 7f             	cmp    eax,0x7f
c0017298:	77 16                	ja     c00172b0 <systemCall(regs*, void*)+0x26>
c001729a:	8b 14 85 20 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb1e0]
c00172a1:	85 d2                	test   edx,edx
c00172a3:	74 0b                	je     c00172b0 <systemCall(regs*, void*)+0x26>
c00172a5:	83 ec 0c             	sub    esp,0xc
c00172a8:	53                   	push   ebx
c00172a9:	ff d2                	call   edx
c00172ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172ae:	eb 0d                	jmp    c00172bd <systemCall(regs*, void*)+0x33>
c00172b0:	52                   	push   edx
c00172b1:	52                   	push   edx
c00172b2:	50                   	push   eax
c00172b3:	68 7e 28 02 c0       	push   0xc002287e
c00172b8:	e8 7c 7e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00172bd:	83 c4 10             	add    esp,0x10
c00172c0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00172c5:	31 d2                	xor    edx,edx
c00172c7:	83 c4 08             	add    esp,0x8
c00172ca:	5b                   	pop    ebx
c00172cb:	c3                   	ret    

c00172cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00172cc:	55                   	push   ebp
c00172cd:	89 e5                	mov    ebp,esp
c00172cf:	57                   	push   edi
c00172d0:	56                   	push   esi
c00172d1:	53                   	push   ebx
c00172d2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00172d8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00172db:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00172de:	85 c0                	test   eax,eax
c00172e0:	0f 95 c1             	setne  cl
c00172e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00172e7:	0f 94 c2             	sete   dl
c00172ea:	84 d1                	test   cl,dl
c00172ec:	74 26                	je     c0017314 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00172ee:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00172f5:	74 1d                	je     c0017314 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00172f7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00172fa:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0017300:	89 d6                	mov    esi,edx
c0017302:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017308:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001730e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0017311:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0017314:	83 ec 0c             	sub    esp,0xc
c0017317:	05 ff 0f 00 00       	add    eax,0xfff
c001731c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001731f:	6a 01                	push   0x1
c0017321:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0017327:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001732d:	e8 35 6e ff ff       	call   c000e167 <Virt::allocateKernelVirtualPages(int)>
c0017332:	83 c4 10             	add    esp,0x10
c0017335:	89 c6                	mov    esi,eax
c0017337:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001733d:	0f 86 21 01 00 00    	jbe    c0017464 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0017343:	c1 eb 0c             	shr    ebx,0xc
c0017346:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017350:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017356:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017359:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001735c:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017362:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017365:	29 d8                	sub    eax,ebx
c0017367:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001736d:	0f 83 f4 00 00 00    	jae    c0017467 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001737c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001737f:	3d 00 10 00 00       	cmp    eax,0x1000
c0017384:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017386:	52                   	push   edx
c0017387:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001738d:	52                   	push   edx
c001738e:	76 05                	jbe    c0017395 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0017390:	b8 00 10 00 00       	mov    eax,0x1000
c0017395:	31 d2                	xor    edx,edx
c0017397:	52                   	push   edx
c0017398:	50                   	push   eax
c0017399:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001739c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001739f:	83 c4 20             	add    esp,0x20
c00173a2:	85 c0                	test   eax,eax
c00173a4:	74 1f                	je     c00173c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00173a6:	51                   	push   ecx
c00173a7:	51                   	push   ecx
c00173a8:	50                   	push   eax
c00173a9:	68 92 28 02 c0       	push   0xc0022892
c00173ae:	e8 86 7d ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00173b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00173b6:	e8 06 71 ff ff       	call   c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	31 c0                	xor    eax,eax
c00173c0:	e9 7c 01 00 00       	jmp    c0017541 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00173c5:	e8 aa 14 00 00       	call   c0018874 <lockScheduler()>
c00173ca:	e8 23 52 ff ff       	call   c000c5f2 <Phys::allocatePage()>
c00173cf:	6a 07                	push   0x7
c00173d1:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00173d7:	56                   	push   esi
c00173d8:	50                   	push   eax
c00173d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173df:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00173e2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00173e8:	e8 4d 74 ff ff       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c00173ed:	83 c4 0c             	add    esp,0xc
c00173f0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00173f6:	6a 00                	push   0x0
c00173f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173fe:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017401:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0017407:	e8 8c 72 ff ff       	call   c000e698 <VAS::mapOtherVASIn(bool, VAS*)>
c001740c:	58                   	pop    eax
c001740d:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0017413:	5a                   	pop    edx
c0017414:	68 07 04 00 00       	push   0x407
c0017419:	53                   	push   ebx
c001741a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017420:	50                   	push   eax
c0017421:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017427:	6a 00                	push   0x0
c0017429:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001742e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017431:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017437:	e8 b4 77 ff ff       	call   c000ebf0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001743c:	83 c4 1c             	add    esp,0x1c
c001743f:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017445:	68 00 10 00 00       	push   0x1000
c001744a:	50                   	push   eax
c001744b:	56                   	push   esi
c001744c:	e8 5f 92 fe ff       	call   c00006b0 <memcpy>
c0017451:	e8 20 14 00 00       	call   c0018876 <unlockScheduler()>
c0017456:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001745c:	83 c4 10             	add    esp,0x10
c001745f:	e9 f5 fe ff ff       	jmp    c0017359 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c0017464:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017467:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017471:	0f 86 bc 00 00 00    	jbe    c0017533 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c0017477:	e8 f8 13 00 00       	call   c0018874 <lockScheduler()>
c001747c:	51                   	push   ecx
c001747d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017483:	6a 00                	push   0x0
c0017485:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001748a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001748d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017493:	e8 00 72 ff ff       	call   c000e698 <VAS::mapOtherVASIn(bool, VAS*)>
c0017498:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001749e:	83 c4 10             	add    esp,0x10
c00174a1:	c1 e8 0c             	shr    eax,0xc
c00174a4:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00174ae:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c00174b4:	e8 39 51 ff ff       	call   c000c5f2 <Phys::allocatePage()>
c00174b9:	6a 07                	push   0x7
c00174bb:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c00174c1:	56                   	push   esi
c00174c2:	50                   	push   eax
c00174c3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174c9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00174cc:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00174d2:	e8 63 73 ff ff       	call   c000e83a <VAS::mapPage(unsigned long, unsigned long, int)>
c00174d7:	58                   	pop    eax
c00174d8:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00174de:	5a                   	pop    edx
c00174df:	68 07 04 00 00       	push   0x407
c00174e4:	53                   	push   ebx
c00174e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00174eb:	50                   	push   eax
c00174ec:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174f2:	6a 00                	push   0x0
c00174f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00174fc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017502:	e8 e9 76 ff ff       	call   c000ebf0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017507:	83 c4 1c             	add    esp,0x1c
c001750a:	68 00 10 00 00       	push   0x1000
c001750f:	6a 00                	push   0x0
c0017511:	56                   	push   esi
c0017512:	e8 cf 91 fe ff       	call   c00006e6 <memset>
c0017517:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0017526:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001752c:	77 86                	ja     c00174b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001752e:	e8 43 13 00 00       	call   c0018876 <unlockScheduler()>
c0017533:	83 ec 0c             	sub    esp,0xc
c0017536:	56                   	push   esi
c0017537:	e8 85 6f ff ff       	call   c000e4c1 <Virt::freeKernelVirtualPages(unsigned long)>
c001753c:	83 c4 10             	add    esp,0x10
c001753f:	b0 01                	mov    al,0x1
c0017541:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017544:	5b                   	pop    ebx
c0017545:	5e                   	pop    esi
c0017546:	5f                   	pop    edi
c0017547:	5d                   	pop    ebp
c0017548:	c3                   	ret    

c0017549 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017549:	55                   	push   ebp
c001754a:	57                   	push   edi
c001754b:	56                   	push   esi
c001754c:	53                   	push   ebx
c001754d:	83 ec 48             	sub    esp,0x48
c0017550:	68 14 01 00 00       	push   0x114
c0017555:	e8 f0 7a ff ff       	call   c000f04a <operator new(unsigned long)>
c001755a:	83 c4 0c             	add    esp,0xc
c001755d:	89 c6                	mov    esi,eax
c001755f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017563:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017567:	50                   	push   eax
c0017568:	e8 fb 80 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c001756d:	58                   	pop    eax
c001756e:	5a                   	pop    edx
c001756f:	6a 01                	push   0x1
c0017571:	56                   	push   esi
c0017572:	e8 55 81 ff ff       	call   c000f6cc <File::open(FileOpenMode)>
c0017577:	83 c4 10             	add    esp,0x10
c001757a:	85 c0                	test   eax,eax
c001757c:	0f 85 47 01 00 00    	jne    c00176c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017582:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001758a:	83 ec 0c             	sub    esp,0xc
c001758d:	6a 34                	push   0x34
c001758f:	e8 b4 4a ff ff       	call   c000c048 <malloc>
c0017594:	89 c3                	mov    ebx,eax
c0017596:	58                   	pop    eax
c0017597:	8b 06                	mov    eax,DWORD PTR [esi]
c0017599:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001759d:	57                   	push   edi
c001759e:	53                   	push   ebx
c001759f:	6a 00                	push   0x0
c00175a1:	6a 34                	push   0x34
c00175a3:	56                   	push   esi
c00175a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00175a7:	83 c4 20             	add    esp,0x20
c00175aa:	85 c0                	test   eax,eax
c00175ac:	0f 85 17 01 00 00    	jne    c00176c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175b2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00175b8:	0f 85 0b 01 00 00    	jne    c00176c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00175c1:	85 c0                	test   eax,eax
c00175c3:	0f 84 00 01 00 00    	je     c00176c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175c9:	31 d2                	xor    edx,edx
c00175cb:	55                   	push   ebp
c00175cc:	52                   	push   edx
c00175cd:	50                   	push   eax
c00175ce:	56                   	push   esi
c00175cf:	e8 b6 81 ff ff       	call   c000f78a <File::seek(unsigned long long)>
c00175d4:	83 c4 10             	add    esp,0x10
c00175d7:	85 c0                	test   eax,eax
c00175d9:	0f 85 ea 00 00 00    	jne    c00176c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00175df:	83 ec 0c             	sub    esp,0xc
c00175e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00175e5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00175e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175ed:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00175f1:	0f af c2             	imul   eax,edx
c00175f4:	50                   	push   eax
c00175f5:	e8 4e 4a ff ff       	call   c000c048 <malloc>
c00175fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017601:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017603:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017607:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001760b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001760f:	0f af c2             	imul   eax,edx
c0017612:	99                   	cdq    
c0017613:	52                   	push   edx
c0017614:	50                   	push   eax
c0017615:	56                   	push   esi
c0017616:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017619:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001761c:	83 c4 20             	add    esp,0x20
c001761f:	85 c0                	test   eax,eax
c0017621:	0f 84 a2 00 00 00    	je     c00176c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017627:	31 d2                	xor    edx,edx
c0017629:	51                   	push   ecx
c001762a:	52                   	push   edx
c001762b:	50                   	push   eax
c001762c:	56                   	push   esi
c001762d:	e8 58 81 ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017632:	83 c4 10             	add    esp,0x10
c0017635:	85 c0                	test   eax,eax
c0017637:	0f 85 8c 00 00 00    	jne    c00176c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001763d:	83 ec 0c             	sub    esp,0xc
c0017640:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017644:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017648:	31 ed                	xor    ebp,ebp
c001764a:	0f af c2             	imul   eax,edx
c001764d:	50                   	push   eax
c001764e:	e8 f5 49 ff ff       	call   c000c048 <malloc>
c0017653:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017656:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001765a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001765c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017660:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017664:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017668:	0f af c2             	imul   eax,edx
c001766b:	99                   	cdq    
c001766c:	52                   	push   edx
c001766d:	50                   	push   eax
c001766e:	56                   	push   esi
c001766f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017672:	83 c4 20             	add    esp,0x20
c0017675:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001767d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017681:	0f 86 80 00 00 00    	jbe    c0017707 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017687:	0f b7 fd             	movzx  edi,bp
c001768a:	c1 e7 05             	shl    edi,0x5
c001768d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017691:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017694:	75 6b                	jne    c0017701 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017696:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017699:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001769d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00176a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00176a4:	52                   	push   edx
c00176a5:	31 d2                	xor    edx,edx
c00176a7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00176aa:	52                   	push   edx
c00176ab:	50                   	push   eax
c00176ac:	56                   	push   esi
c00176ad:	e8 d8 80 ff ff       	call   c000f78a <File::seek(unsigned long long)>
c00176b2:	83 c4 10             	add    esp,0x10
c00176b5:	85 c0                	test   eax,eax
c00176b7:	74 17                	je     c00176d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00176b9:	83 ec 0c             	sub    esp,0xc
c00176bc:	68 bd 28 02 c0       	push   0xc00228bd
c00176c1:	e8 73 7a ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00176c6:	83 c4 10             	add    esp,0x10
c00176c9:	31 c0                	xor    eax,eax
c00176cb:	e9 87 00 00 00       	jmp    c0017757 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00176d0:	83 ec 0c             	sub    esp,0xc
c00176d3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00176d6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00176d9:	50                   	push   eax
c00176da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00176de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176e2:	56                   	push   esi
c00176e3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00176e7:	e8 e0 fb ff ff       	call   c00172cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00176ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176f0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00176f4:	83 c4 20             	add    esp,0x20
c00176f7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00176fb:	73 04                	jae    c0017701 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00176fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017701:	45                   	inc    ebp
c0017702:	e9 76 ff ff ff       	jmp    c001767d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017707:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001770b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001770f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017713:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0017719:	83 ec 0c             	sub    esp,0xc
c001771c:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0017722:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017727:	05 00 10 00 00       	add    eax,0x1000
c001772c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001772f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017733:	e8 20 49 ff ff       	call   c000c058 <free>
c0017738:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001773b:	e8 18 49 ff ff       	call   c000c058 <free>
c0017740:	58                   	pop    eax
c0017741:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017745:	e8 0e 49 ff ff       	call   c000c058 <free>
c001774a:	89 34 24             	mov    DWORD PTR [esp],esi
c001774d:	e8 d8 7f ff ff       	call   c000f72a <File::close()>
c0017752:	83 c4 10             	add    esp,0x10
c0017755:	b0 01                	mov    al,0x1
c0017757:	83 c4 3c             	add    esp,0x3c
c001775a:	5b                   	pop    ebx
c001775b:	5e                   	pop    esi
c001775c:	5f                   	pop    edi
c001775d:	5d                   	pop    ebp
c001775e:	c3                   	ret    

c001775f <Thr::runtimeReferenceHelper()>:
c001775f:	83 ec 18             	sub    esp,0x18
c0017762:	68 c5 28 02 c0       	push   0xc00228c5
c0017767:	e8 cd 79 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001776c:	fa                   	cli    
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	eb fe                	jmp    c0017770 <Thr::runtimeReferenceHelper()+0x11>

c0017772 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017772:	57                   	push   edi
c0017773:	56                   	push   esi
c0017774:	53                   	push   ebx
c0017775:	31 db                	xor    ebx,ebx
c0017777:	39 1d c0 57 02 c0    	cmp    DWORD PTR ds:0xc00257c0,ebx
c001777d:	7e 3c                	jle    c00177bb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001777f:	8b 34 9d 40 57 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda8c0]
c0017786:	31 ff                	xor    edi,edi
c0017788:	39 3c 9d 40 56 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda9c0],edi
c001778f:	7e 27                	jle    c00177b8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017791:	50                   	push   eax
c0017792:	50                   	push   eax
c0017793:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017797:	8b 06                	mov    eax,DWORD PTR [esi]
c0017799:	03 04 9d c0 56 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda940]
c00177a0:	50                   	push   eax
c00177a1:	e8 30 90 fe ff       	call   c00007d6 <strcmp>
c00177a6:	83 c4 10             	add    esp,0x10
c00177a9:	85 c0                	test   eax,eax
c00177ab:	75 05                	jne    c00177b2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00177ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00177b0:	eb 0b                	jmp    c00177bd <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00177b2:	83 c6 10             	add    esi,0x10
c00177b5:	47                   	inc    edi
c00177b6:	eb d0                	jmp    c0017788 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00177b8:	43                   	inc    ebx
c00177b9:	eb bc                	jmp    c0017777 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00177bb:	31 c0                	xor    eax,eax
c00177bd:	5b                   	pop    ebx
c00177be:	5e                   	pop    esi
c00177bf:	5f                   	pop    edi
c00177c0:	c3                   	ret    

c00177c1 <Thr::loadKernelSymbolTable(char const*)>:
c00177c1:	55                   	push   ebp
c00177c2:	57                   	push   edi
c00177c3:	56                   	push   esi
c00177c4:	53                   	push   ebx
c00177c5:	83 ec 68             	sub    esp,0x68
c00177c8:	8b 35 14 58 02 c0    	mov    esi,DWORD PTR ds:0xc0025814
c00177ce:	68 14 01 00 00       	push   0x114
c00177d3:	e8 72 78 ff ff       	call   c000f04a <operator new(unsigned long)>
c00177d8:	83 c4 0c             	add    esp,0xc
c00177db:	89 c3                	mov    ebx,eax
c00177dd:	56                   	push   esi
c00177de:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00177e2:	50                   	push   eax
c00177e3:	e8 80 7e ff ff       	call   c000f668 <File::File(char const*, Process*)>
c00177e8:	5e                   	pop    esi
c00177e9:	5f                   	pop    edi
c00177ea:	6a 01                	push   0x1
c00177ec:	53                   	push   ebx
c00177ed:	e8 da 7e ff ff       	call   c000f6cc <File::open(FileOpenMode)>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	31 d2                	xor    edx,edx
c00177f7:	85 c0                	test   eax,eax
c00177f9:	0f 85 79 02 00 00    	jne    c0017a78 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00177ff:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017807:	83 ec 0c             	sub    esp,0xc
c001780a:	6a 34                	push   0x34
c001780c:	e8 37 48 ff ff       	call   c000c048 <malloc>
c0017811:	59                   	pop    ecx
c0017812:	89 c7                	mov    edi,eax
c0017814:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017818:	8b 03                	mov    eax,DWORD PTR [ebx]
c001781a:	56                   	push   esi
c001781b:	57                   	push   edi
c001781c:	6a 00                	push   0x0
c001781e:	6a 34                	push   0x34
c0017820:	53                   	push   ebx
c0017821:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017824:	83 c4 20             	add    esp,0x20
c0017827:	85 c0                	test   eax,eax
c0017829:	74 17                	je     c0017842 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	68 e7 28 02 c0       	push   0xc00228e7
c0017833:	e8 e8 e0 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	31 d2                	xor    edx,edx
c001783d:	e9 36 02 00 00       	jmp    c0017a78 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017842:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017848:	75 e1                	jne    c001782b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001784a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001784d:	85 c0                	test   eax,eax
c001784f:	74 da                	je     c001782b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017851:	52                   	push   edx
c0017852:	31 d2                	xor    edx,edx
c0017854:	52                   	push   edx
c0017855:	50                   	push   eax
c0017856:	53                   	push   ebx
c0017857:	e8 2e 7f ff ff       	call   c000f78a <File::seek(unsigned long long)>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	85 c0                	test   eax,eax
c0017861:	75 c8                	jne    c001782b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017863:	83 ec 0c             	sub    esp,0xc
c0017866:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001786a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001786e:	31 ed                	xor    ebp,ebp
c0017870:	0f af c2             	imul   eax,edx
c0017873:	50                   	push   eax
c0017874:	e8 cf 47 ff ff       	call   c000c048 <malloc>
c0017879:	89 34 24             	mov    DWORD PTR [esp],esi
c001787c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017880:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017882:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017886:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001788a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001788e:	0f af c2             	imul   eax,edx
c0017891:	99                   	cdq    
c0017892:	52                   	push   edx
c0017893:	50                   	push   eax
c0017894:	53                   	push   ebx
c0017895:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017898:	83 c4 20             	add    esp,0x20
c001789b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00178a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00178ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00178b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00178bb:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00178bf:	0f 86 aa 00 00 00    	jbe    c001796f <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c00178c5:	0f b7 f5             	movzx  esi,bp
c00178c8:	6b f6 28             	imul   esi,esi,0x28
c00178cb:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c00178cf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00178d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178d6:	50                   	push   eax
c00178d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00178db:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00178df:	8b 16                	mov    edx,DWORD PTR [esi]
c00178e1:	6b c0 28             	imul   eax,eax,0x28
c00178e4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00178e8:	89 d0                	mov    eax,edx
c00178ea:	31 d2                	xor    edx,edx
c00178ec:	52                   	push   edx
c00178ed:	50                   	push   eax
c00178ee:	53                   	push   ebx
c00178ef:	e8 96 7e ff ff       	call   c000f78a <File::seek(unsigned long long)>
c00178f4:	83 c4 0c             	add    esp,0xc
c00178f7:	6a 20                	push   0x20
c00178f9:	6a 00                	push   0x0
c00178fb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00178ff:	52                   	push   edx
c0017900:	e8 e1 8d fe ff       	call   c00006e6 <memset>
c0017905:	58                   	pop    eax
c0017906:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017908:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001790c:	51                   	push   ecx
c001790d:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017911:	52                   	push   edx
c0017912:	6a 00                	push   0x0
c0017914:	6a 1f                	push   0x1f
c0017916:	53                   	push   ebx
c0017917:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001791a:	83 c4 18             	add    esp,0x18
c001791d:	68 fe 28 02 c0       	push   0xc00228fe
c0017922:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017926:	52                   	push   edx
c0017927:	e8 aa 8e fe ff       	call   c00007d6 <strcmp>
c001792c:	83 c4 10             	add    esp,0x10
c001792f:	85 c0                	test   eax,eax
c0017931:	75 0f                	jne    c0017942 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017933:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017936:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001793a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001793e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017942:	50                   	push   eax
c0017943:	50                   	push   eax
c0017944:	68 06 29 02 c0       	push   0xc0022906
c0017949:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001794d:	50                   	push   eax
c001794e:	e8 83 8e fe ff       	call   c00007d6 <strcmp>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	85 c0                	test   eax,eax
c0017958:	75 0f                	jne    c0017969 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001795a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001795d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017965:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017969:	45                   	inc    ebp
c001796a:	e9 4c ff ff ff       	jmp    c00178bb <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001796f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017974:	75 10                	jne    c0017986 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017976:	83 ec 0c             	sub    esp,0xc
c0017979:	68 0e 29 02 c0       	push   0xc002290e
c001797e:	e8 9d df ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0017983:	83 c4 10             	add    esp,0x10
c0017986:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001798b:	75 10                	jne    c001799d <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001798d:	83 ec 0c             	sub    esp,0xc
c0017990:	68 0e 29 02 c0       	push   0xc002290e
c0017995:	e8 86 df ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	31 d2                	xor    edx,edx
c001799f:	50                   	push   eax
c00179a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179a4:	52                   	push   edx
c00179a5:	50                   	push   eax
c00179a6:	53                   	push   ebx
c00179a7:	e8 de 7d ff ff       	call   c000f78a <File::seek(unsigned long long)>
c00179ac:	5a                   	pop    edx
c00179ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179b1:	e8 92 46 ff ff       	call   c000c048 <malloc>
c00179b6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00179be:	89 c1                	mov    ecx,eax
c00179c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179c8:	5e                   	pop    esi
c00179c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179cb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00179cf:	55                   	push   ebp
c00179d0:	51                   	push   ecx
c00179d1:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00179d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179dd:	53                   	push   ebx
c00179de:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179e1:	83 c4 14             	add    esp,0x14
c00179e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179e8:	e8 5b 46 ff ff       	call   c000c048 <malloc>
c00179ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00179f0:	89 c6                	mov    esi,eax
c00179f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179f4:	56                   	push   esi
c00179f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179f9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179fd:	53                   	push   ebx
c00179fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a05:	8b 15 c0 57 02 c0    	mov    edx,DWORD PTR ds:0xc00257c0
c0017a0b:	83 c4 1c             	add    esp,0x1c
c0017a0e:	c1 e8 04             	shr    eax,0x4
c0017a11:	89 04 95 40 56 02 c0 	mov    DWORD PTR [edx*4-0x3ffda9c0],eax
c0017a18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a1c:	31 d2                	xor    edx,edx
c0017a1e:	52                   	push   edx
c0017a1f:	50                   	push   eax
c0017a20:	53                   	push   ebx
c0017a21:	e8 64 7d ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017a26:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a29:	31 d2                	xor    edx,edx
c0017a2b:	56                   	push   esi
c0017a2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a30:	52                   	push   edx
c0017a31:	50                   	push   eax
c0017a32:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017a34:	53                   	push   ebx
c0017a35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a38:	83 c4 14             	add    esp,0x14
c0017a3b:	53                   	push   ebx
c0017a3c:	e8 e9 7c ff ff       	call   c000f72a <File::close()>
c0017a41:	5d                   	pop    ebp
c0017a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a46:	e8 0d 46 ff ff       	call   c000c058 <free>
c0017a4b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017a4e:	e8 05 46 ff ff       	call   c000c058 <free>
c0017a53:	a1 c0 57 02 c0       	mov    eax,ds:0xc00257c0
c0017a58:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a5c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a5f:	89 0c 85 40 57 02 c0 	mov    DWORD PTR [eax*4-0x3ffda8c0],ecx
c0017a66:	89 15 c0 57 02 c0    	mov    DWORD PTR ds:0xc00257c0,edx
c0017a6c:	89 34 85 c0 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda940],esi
c0017a73:	83 c4 10             	add    esp,0x10
c0017a76:	b2 01                	mov    dl,0x1
c0017a78:	83 c4 5c             	add    esp,0x5c
c0017a7b:	88 d0                	mov    al,dl
c0017a7d:	5b                   	pop    ebx
c0017a7e:	5e                   	pop    esi
c0017a7f:	5f                   	pop    edi
c0017a80:	5d                   	pop    ebp
c0017a81:	c3                   	ret    

c0017a82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017a82:	55                   	push   ebp
c0017a83:	57                   	push   edi
c0017a84:	56                   	push   esi
c0017a85:	53                   	push   ebx
c0017a86:	81 ec 68 03 00 00    	sub    esp,0x368
c0017a8c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017a93:	8b 1d 14 58 02 c0    	mov    ebx,DWORD PTR ds:0xc0025814
c0017a99:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017a9d:	68 14 01 00 00       	push   0x114
c0017aa2:	e8 a3 75 ff ff       	call   c000f04a <operator new(unsigned long)>
c0017aa7:	83 c4 0c             	add    esp,0xc
c0017aaa:	89 c7                	mov    edi,eax
c0017aac:	53                   	push   ebx
c0017aad:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017ab4:	50                   	push   eax
c0017ab5:	e8 ae 7b ff ff       	call   c000f668 <File::File(char const*, Process*)>
c0017aba:	5e                   	pop    esi
c0017abb:	5d                   	pop    ebp
c0017abc:	6a 01                	push   0x1
c0017abe:	57                   	push   edi
c0017abf:	e8 08 7c ff ff       	call   c000f6cc <File::open(FileOpenMode)>
c0017ac4:	83 c4 10             	add    esp,0x10
c0017ac7:	85 c0                	test   eax,eax
c0017ac9:	0f 85 10 07 00 00    	jne    c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017acf:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ad7:	83 ec 0c             	sub    esp,0xc
c0017ada:	6a 34                	push   0x34
c0017adc:	e8 67 45 ff ff       	call   c000c048 <malloc>
c0017ae1:	5b                   	pop    ebx
c0017ae2:	89 c5                	mov    ebp,eax
c0017ae4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ae8:	8b 07                	mov    eax,DWORD PTR [edi]
c0017aea:	53                   	push   ebx
c0017aeb:	55                   	push   ebp
c0017aec:	6a 00                	push   0x0
c0017aee:	6a 34                	push   0x34
c0017af0:	57                   	push   edi
c0017af1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017af4:	83 c4 20             	add    esp,0x20
c0017af7:	85 c0                	test   eax,eax
c0017af9:	0f 85 e0 06 00 00    	jne    c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017aff:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017b06:	0f 85 d3 06 00 00    	jne    c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b0c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017b0f:	85 c0                	test   eax,eax
c0017b11:	0f 84 c8 06 00 00    	je     c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b17:	31 d2                	xor    edx,edx
c0017b19:	51                   	push   ecx
c0017b1a:	52                   	push   edx
c0017b1b:	50                   	push   eax
c0017b1c:	57                   	push   edi
c0017b1d:	e8 68 7c ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	85 c0                	test   eax,eax
c0017b27:	0f 85 b2 06 00 00    	jne    c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b2d:	83 ec 0c             	sub    esp,0xc
c0017b30:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017b33:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017b37:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017b3b:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b3f:	0f af c2             	imul   eax,edx
c0017b42:	50                   	push   eax
c0017b43:	e8 00 45 ff ff       	call   c000c048 <malloc>
c0017b48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017b4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b4f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017b51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b55:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017b59:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017b5d:	0f af c2             	imul   eax,edx
c0017b60:	99                   	cdq    
c0017b61:	52                   	push   edx
c0017b62:	50                   	push   eax
c0017b63:	57                   	push   edi
c0017b64:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017b67:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017b6a:	83 c4 20             	add    esp,0x20
c0017b6d:	85 c0                	test   eax,eax
c0017b6f:	0f 84 6a 06 00 00    	je     c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b75:	52                   	push   edx
c0017b76:	31 d2                	xor    edx,edx
c0017b78:	52                   	push   edx
c0017b79:	50                   	push   eax
c0017b7a:	57                   	push   edi
c0017b7b:	e8 0a 7c ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	85 c0                	test   eax,eax
c0017b85:	0f 85 54 06 00 00    	jne    c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017b8b:	83 ec 0c             	sub    esp,0xc
c0017b8e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017b92:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017b96:	31 f6                	xor    esi,esi
c0017b98:	0f af c2             	imul   eax,edx
c0017b9b:	50                   	push   eax
c0017b9c:	e8 a7 44 ff ff       	call   c000c048 <malloc>
c0017ba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ba4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017ba8:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017baa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bae:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017bb2:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017bb6:	0f af c2             	imul   eax,edx
c0017bb9:	99                   	cdq    
c0017bba:	52                   	push   edx
c0017bbb:	50                   	push   eax
c0017bbc:	57                   	push   edi
c0017bbd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017bc0:	83 c4 20             	add    esp,0x20
c0017bc3:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017bc7:	0f 86 af 00 00 00    	jbe    c0017c7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017bcd:	0f b7 de             	movzx  ebx,si
c0017bd0:	c1 e3 05             	shl    ebx,0x5
c0017bd3:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017bd7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017bda:	0f 85 96 00 00 00    	jne    c0017c76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017be0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017be3:	31 d2                	xor    edx,edx
c0017be5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017be9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017bec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bf0:	50                   	push   eax
c0017bf1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017bf4:	52                   	push   edx
c0017bf5:	50                   	push   eax
c0017bf6:	57                   	push   edi
c0017bf7:	e8 8e 7b ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017bfc:	83 c4 10             	add    esp,0x10
c0017bff:	85 c0                	test   eax,eax
c0017c01:	0f 85 d8 05 00 00    	jne    c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c07:	52                   	push   edx
c0017c08:	52                   	push   edx
c0017c09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c0d:	68 28 29 02 c0       	push   0xc0022928
c0017c12:	e8 22 75 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0017c17:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017c1e:	31 d2                	xor    edx,edx
c0017c20:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017c24:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017c28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c2c:	59                   	pop    ecx
c0017c2d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c2f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017c36:	50                   	push   eax
c0017c37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c3f:	52                   	push   edx
c0017c40:	50                   	push   eax
c0017c41:	57                   	push   edi
c0017c42:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c45:	83 c4 18             	add    esp,0x18
c0017c48:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c4b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c4e:	50                   	push   eax
c0017c4f:	68 4c 29 02 c0       	push   0xc002294c
c0017c54:	e8 e0 74 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0017c59:	83 c4 0c             	add    esp,0xc
c0017c5c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017c5f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017c62:	50                   	push   eax
c0017c63:	6a 00                	push   0x0
c0017c65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c69:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017c6d:	50                   	push   eax
c0017c6e:	e8 73 8a fe ff       	call   c00006e6 <memset>
c0017c73:	83 c4 10             	add    esp,0x10
c0017c76:	46                   	inc    esi
c0017c77:	e9 47 ff ff ff       	jmp    c0017bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017c7c:	31 db                	xor    ebx,ebx
c0017c7e:	50                   	push   eax
c0017c7f:	68 00 01 00 00       	push   0x100
c0017c84:	6a 00                	push   0x0
c0017c86:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017c8a:	50                   	push   eax
c0017c8b:	e8 56 8a fe ff       	call   c00006e6 <memset>
c0017c90:	83 c4 0c             	add    esp,0xc
c0017c93:	68 00 01 00 00       	push   0x100
c0017c98:	6a 00                	push   0x0
c0017c9a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017ca1:	50                   	push   eax
c0017ca2:	e8 3f 8a fe ff       	call   c00006e6 <memset>
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017cb2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017cba:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017cc2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017cca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cd2:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017cd6:	0f 86 2f 01 00 00    	jbe    c0017e0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017cdc:	0f b7 f3             	movzx  esi,bx
c0017cdf:	6b f6 28             	imul   esi,esi,0x28
c0017ce2:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017ce6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ced:	50                   	push   eax
c0017cee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017cf2:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017cf6:	8b 06                	mov    eax,DWORD PTR [esi]
c0017cf8:	6b d2 28             	imul   edx,edx,0x28
c0017cfb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017cff:	31 d2                	xor    edx,edx
c0017d01:	52                   	push   edx
c0017d02:	50                   	push   eax
c0017d03:	57                   	push   edi
c0017d04:	e8 81 7a ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017d09:	83 c4 0c             	add    esp,0xc
c0017d0c:	6a 20                	push   0x20
c0017d0e:	6a 00                	push   0x0
c0017d10:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017d17:	51                   	push   ecx
c0017d18:	e8 c9 89 fe ff       	call   c00006e6 <memset>
c0017d1d:	58                   	pop    eax
c0017d1e:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d20:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017d24:	52                   	push   edx
c0017d25:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017d2c:	51                   	push   ecx
c0017d2d:	6a 00                	push   0x0
c0017d2f:	6a 1f                	push   0x1f
c0017d31:	57                   	push   edi
c0017d32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d35:	83 c4 1c             	add    esp,0x1c
c0017d38:	6a 09                	push   0x9
c0017d3a:	68 69 29 02 c0       	push   0xc0022969
c0017d3f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017d46:	51                   	push   ecx
c0017d47:	e8 01 89 fe ff       	call   c000064d <memcmp>
c0017d4c:	83 c4 10             	add    esp,0x10
c0017d4f:	85 c0                	test   eax,eax
c0017d51:	75 21                	jne    c0017d74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017d53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d57:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d5f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017d63:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017d66:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017d6d:	89 c8                	mov    eax,ecx
c0017d6f:	40                   	inc    eax
c0017d70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d74:	50                   	push   eax
c0017d75:	6a 09                	push   0x9
c0017d77:	68 73 29 02 c0       	push   0xc0022973
c0017d7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d83:	50                   	push   eax
c0017d84:	e8 c4 88 fe ff       	call   c000064d <memcmp>
c0017d89:	83 c4 10             	add    esp,0x10
c0017d8c:	85 c0                	test   eax,eax
c0017d8e:	75 21                	jne    c0017db1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d94:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d9c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017da0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017da3:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017daa:	89 c8                	mov    eax,ecx
c0017dac:	40                   	inc    eax
c0017dad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017db1:	50                   	push   eax
c0017db2:	50                   	push   eax
c0017db3:	68 fe 28 02 c0       	push   0xc00228fe
c0017db8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017dbf:	50                   	push   eax
c0017dc0:	e8 11 8a fe ff       	call   c00007d6 <strcmp>
c0017dc5:	83 c4 10             	add    esp,0x10
c0017dc8:	85 c0                	test   eax,eax
c0017dca:	75 0f                	jne    c0017ddb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017dcc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017dcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017dd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ddb:	50                   	push   eax
c0017ddc:	50                   	push   eax
c0017ddd:	68 06 29 02 c0       	push   0xc0022906
c0017de2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017de9:	50                   	push   eax
c0017dea:	e8 e7 89 fe ff       	call   c00007d6 <strcmp>
c0017def:	83 c4 10             	add    esp,0x10
c0017df2:	85 c0                	test   eax,eax
c0017df4:	75 0f                	jne    c0017e05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017df6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017df9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e01:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e05:	43                   	inc    ebx
c0017e06:	e9 c7 fe ff ff       	jmp    c0017cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017e0b:	31 d2                	xor    edx,edx
c0017e0d:	50                   	push   eax
c0017e0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e12:	52                   	push   edx
c0017e13:	50                   	push   eax
c0017e14:	57                   	push   edi
c0017e15:	e8 70 79 ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017e1a:	5a                   	pop    edx
c0017e1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e1f:	e8 24 42 ff ff       	call   c000c048 <malloc>
c0017e24:	31 d2                	xor    edx,edx
c0017e26:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017e2a:	59                   	pop    ecx
c0017e2b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e2d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017e31:	53                   	push   ebx
c0017e32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017e36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e3a:	52                   	push   edx
c0017e3b:	50                   	push   eax
c0017e3c:	57                   	push   edi
c0017e3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e40:	83 c4 14             	add    esp,0x14
c0017e43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e47:	e8 fc 41 ff ff       	call   c000c048 <malloc>
c0017e4c:	31 d2                	xor    edx,edx
c0017e4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e52:	83 c4 0c             	add    esp,0xc
c0017e55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e59:	52                   	push   edx
c0017e5a:	50                   	push   eax
c0017e5b:	57                   	push   edi
c0017e5c:	e8 29 79 ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017e61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e64:	31 d2                	xor    edx,edx
c0017e66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e6a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e70:	52                   	push   edx
c0017e71:	50                   	push   eax
c0017e72:	57                   	push   edi
c0017e73:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e76:	83 c4 20             	add    esp,0x20
c0017e79:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e85:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017e89:	0f 84 54 03 00 00    	je     c00181e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017e8f:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017e96:	31 d2                	xor    edx,edx
c0017e98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e9c:	c1 e8 03             	shr    eax,0x3
c0017e9f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ea3:	50                   	push   eax
c0017ea4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ea8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017eac:	52                   	push   edx
c0017ead:	50                   	push   eax
c0017eae:	57                   	push   edi
c0017eaf:	e8 d6 78 ff ff       	call   c000f78a <File::seek(unsigned long long)>
c0017eb4:	58                   	pop    eax
c0017eb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017ec0:	e8 83 41 ff ff       	call   c000c048 <malloc>
c0017ec5:	31 d2                	xor    edx,edx
c0017ec7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ecb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ecd:	58                   	pop    eax
c0017ece:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017ed2:	50                   	push   eax
c0017ed3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ed7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017edb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017ee2:	52                   	push   edx
c0017ee3:	50                   	push   eax
c0017ee4:	57                   	push   edi
c0017ee5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ee8:	83 c4 20             	add    esp,0x20
c0017eeb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017ef3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017ef7:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017efb:	0f 8d c6 02 00 00    	jge    c00181c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017f01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f09:	31 db                	xor    ebx,ebx
c0017f0b:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017f0e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f16:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017f1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f1e:	c1 e8 08             	shr    eax,0x8
c0017f21:	89 c6                	mov    esi,eax
c0017f23:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017f27:	c1 e6 04             	shl    esi,0x4
c0017f2a:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017f2e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017f31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f35:	85 c0                	test   eax,eax
c0017f37:	0f 85 17 01 00 00    	jne    c0018054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017f3d:	83 ec 0c             	sub    esp,0xc
c0017f40:	b3 01                	mov    bl,0x1
c0017f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f46:	03 06                	add    eax,DWORD PTR [esi]
c0017f48:	50                   	push   eax
c0017f49:	e8 24 f8 ff ff       	call   c0017772 <Thr::getAddressOfKernelSymbol(char const*)>
c0017f4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017f5a:	0f 85 f4 00 00 00    	jne    c0018054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017f60:	50                   	push   eax
c0017f61:	50                   	push   eax
c0017f62:	68 7d 29 02 c0       	push   0xc002297d
c0017f67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f6b:	03 06                	add    eax,DWORD PTR [esi]
c0017f6d:	50                   	push   eax
c0017f6e:	e8 63 88 fe ff       	call   c00007d6 <strcmp>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	85 c0                	test   eax,eax
c0017f78:	75 0a                	jne    c0017f84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017f7a:	b8 fc f1 01 c0       	mov    eax,0xc001f1fc
c0017f7f:	e9 ca 00 00 00       	jmp    c001804e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017f84:	50                   	push   eax
c0017f85:	50                   	push   eax
c0017f86:	68 87 29 02 c0       	push   0xc0022987
c0017f8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f8f:	03 06                	add    eax,DWORD PTR [esi]
c0017f91:	50                   	push   eax
c0017f92:	e8 3f 88 fe ff       	call   c00007d6 <strcmp>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	85 c0                	test   eax,eax
c0017f9c:	75 0a                	jne    c0017fa8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017f9e:	b8 30 ef 01 c0       	mov    eax,0xc001ef30
c0017fa3:	e9 a6 00 00 00       	jmp    c001804e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017fa8:	53                   	push   ebx
c0017fa9:	53                   	push   ebx
c0017faa:	68 90 29 02 c0       	push   0xc0022990
c0017faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fb3:	03 06                	add    eax,DWORD PTR [esi]
c0017fb5:	50                   	push   eax
c0017fb6:	e8 1b 88 fe ff       	call   c00007d6 <strcmp>
c0017fbb:	83 c4 10             	add    esp,0x10
c0017fbe:	85 c0                	test   eax,eax
c0017fc0:	75 0a                	jne    c0017fcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017fc2:	b8 fc f2 01 c0       	mov    eax,0xc001f2fc
c0017fc7:	e9 82 00 00 00       	jmp    c001804e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017fcc:	51                   	push   ecx
c0017fcd:	51                   	push   ecx
c0017fce:	68 9a 29 02 c0       	push   0xc002299a
c0017fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fd7:	03 06                	add    eax,DWORD PTR [esi]
c0017fd9:	50                   	push   eax
c0017fda:	e8 f7 87 fe ff       	call   c00007d6 <strcmp>
c0017fdf:	83 c4 10             	add    esp,0x10
c0017fe2:	85 c0                	test   eax,eax
c0017fe4:	74 63                	je     c0018049 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0017fe6:	50                   	push   eax
c0017fe7:	50                   	push   eax
c0017fe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fec:	03 06                	add    eax,DWORD PTR [esi]
c0017fee:	50                   	push   eax
c0017fef:	68 a3 29 02 c0       	push   0xc00229a3
c0017ff4:	e8 40 71 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0017ff9:	58                   	pop    eax
c0017ffa:	5a                   	pop    edx
c0017ffb:	68 bd 29 02 c0       	push   0xc00229bd
c0018000:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0018007:	53                   	push   ebx
c0018008:	e8 78 87 fe ff       	call   c0000785 <strcpy>
c001800d:	59                   	pop    ecx
c001800e:	58                   	pop    eax
c001800f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018013:	03 06                	add    eax,DWORD PTR [esi]
c0018015:	50                   	push   eax
c0018016:	53                   	push   ebx
c0018017:	e8 20 88 fe ff       	call   c000083c <strcat>
c001801c:	58                   	pop    eax
c001801d:	5a                   	pop    edx
c001801e:	68 53 2a 02 c0       	push   0xc0022a53
c0018023:	53                   	push   ebx
c0018024:	e8 13 88 fe ff       	call   c000083c <strcat>
c0018029:	83 c4 10             	add    esp,0x10
c001802c:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018031:	0f 84 4b 01 00 00    	je     c0018182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018037:	83 ec 0c             	sub    esp,0xc
c001803a:	53                   	push   ebx
c001803b:	e8 e0 d8 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018047:	eb 0b                	jmp    c0018054 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018049:	b8 7c f0 01 c0       	mov    eax,0xc001f07c
c001804e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018052:	b3 01                	mov    bl,0x1
c0018054:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018059:	0f 85 80 00 00 00    	jne    c00180df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001805f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018066:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001806a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001806e:	01 ce                	add    esi,ecx
c0018070:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018078:	8b 06                	mov    eax,DWORD PTR [esi]
c001807a:	0f 94 c2             	sete   dl
c001807d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018085:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001808a:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001808e:	84 db                	test   bl,bl
c0018090:	74 31                	je     c00180c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018092:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018096:	01 c3                	add    ebx,eax
c0018098:	84 d2                	test   dl,dl
c001809a:	75 0a                	jne    c00180a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001809c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00180a0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00180a4:	76 32                	jbe    c00180d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00180a6:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00180ab:	0f 84 d1 00 00 00    	je     c0018182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00180b1:	83 ec 0c             	sub    esp,0xc
c00180b4:	68 d4 29 02 c0       	push   0xc00229d4
c00180b9:	e8 62 d8 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c00180be:	83 c4 10             	add    esp,0x10
c00180c1:	eb 15                	jmp    c00180d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00180c3:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00180c6:	84 d2                	test   dl,dl
c00180c8:	75 0e                	jne    c00180d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00180ca:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00180ce:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00180d2:	77 04                	ja     c00180d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00180d4:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00180d8:	89 1e                	mov    DWORD PTR [esi],ebx
c00180da:	e9 df 00 00 00       	jmp    c00181be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00180df:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00180e4:	75 6e                	jne    c0018154 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00180e6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00180ed:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00180f1:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00180f5:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00180fd:	74 17                	je     c0018116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00180ff:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018107:	74 0d                	je     c0018116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0018109:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001810d:	83 e8 04             	sub    eax,0x4
c0018110:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018114:	76 17                	jbe    c001812d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0018116:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001811b:	74 65                	je     c0018182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001811d:	83 ec 0c             	sub    esp,0xc
c0018120:	68 f0 29 02 c0       	push   0xc00229f0
c0018125:	e8 f6 d7 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001812a:	83 c4 10             	add    esp,0x10
c001812d:	8b 16                	mov    edx,DWORD PTR [esi]
c001812f:	84 db                	test   bl,bl
c0018131:	74 13                	je     c0018146 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0018133:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018137:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001813e:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018142:	01 d0                	add    eax,edx
c0018144:	eb 06                	jmp    c001814c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018146:	89 d0                	mov    eax,edx
c0018148:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001814c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018150:	89 06                	mov    DWORD PTR [esi],eax
c0018152:	eb 6a                	jmp    c00181be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018154:	50                   	push   eax
c0018155:	50                   	push   eax
c0018156:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001815b:	50                   	push   eax
c001815c:	68 0c 2a 02 c0       	push   0xc0022a0c
c0018161:	e8 d3 6f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001816e:	74 12                	je     c0018182 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018170:	83 ec 0c             	sub    esp,0xc
c0018173:	68 17 2a 02 c0       	push   0xc0022a17
c0018178:	e8 a3 d7 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001817d:	83 c4 10             	add    esp,0x10
c0018180:	eb 3c                	jmp    c00181be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018182:	83 ec 0c             	sub    esp,0xc
c0018185:	57                   	push   edi
c0018186:	e8 9f 75 ff ff       	call   c000f72a <File::close()>
c001818b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001818e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018190:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018193:	59                   	pop    ecx
c0018194:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018198:	e8 bb 3e ff ff       	call   c000c058 <free>
c001819d:	5b                   	pop    ebx
c001819e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181a2:	e8 b1 3e ff ff       	call   c000c058 <free>
c00181a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00181aa:	e8 a9 3e ff ff       	call   c000c058 <free>
c00181af:	5e                   	pop    esi
c00181b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00181b4:	e8 9f 3e ff ff       	call   c000c058 <free>
c00181b9:	83 c4 10             	add    esp,0x10
c00181bc:	eb 21                	jmp    c00181df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00181be:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00181c2:	e9 2c fd ff ff       	jmp    c0017ef3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c00181c7:	83 ec 0c             	sub    esp,0xc
c00181ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00181ce:	e8 85 3e ff ff       	call   c000c058 <free>
c00181d3:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00181d7:	83 c4 10             	add    esp,0x10
c00181da:	e9 a2 fc ff ff       	jmp    c0017e81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00181df:	31 c0                	xor    eax,eax
c00181e1:	eb 32                	jmp    c0018215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00181e3:	83 ec 0c             	sub    esp,0xc
c00181e6:	57                   	push   edi
c00181e7:	e8 3e 75 ff ff       	call   c000f72a <File::close()>
c00181ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00181ef:	8b 07                	mov    eax,DWORD PTR [edi]
c00181f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00181f4:	58                   	pop    eax
c00181f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181f9:	e8 5a 3e ff ff       	call   c000c058 <free>
c00181fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018201:	e8 52 3e ff ff       	call   c000c058 <free>
c0018206:	5a                   	pop    edx
c0018207:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001820b:	e8 48 3e ff ff       	call   c000c058 <free>
c0018210:	83 c4 10             	add    esp,0x10
c0018213:	b0 01                	mov    al,0x1
c0018215:	81 c4 5c 03 00 00    	add    esp,0x35c
c001821b:	5b                   	pop    ebx
c001821c:	5e                   	pop    esi
c001821d:	5f                   	pop    edi
c001821e:	5d                   	pop    ebp
c001821f:	c3                   	ret    

c0018220 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0018220:	56                   	push   esi
c0018221:	31 d2                	xor    edx,edx
c0018223:	53                   	push   ebx
c0018224:	8b 1d 20 50 02 c0    	mov    ebx,DWORD PTR ds:0xc0025020
c001822a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001822e:	39 d3                	cmp    ebx,edx
c0018230:	7e 1b                	jle    c001824d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0018232:	8b 04 95 40 52 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdadc0]
c0018239:	39 c8                	cmp    eax,ecx
c001823b:	77 0d                	ja     c001824a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001823d:	8b 34 95 40 50 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdafc0]
c0018244:	01 c6                	add    esi,eax
c0018246:	39 ce                	cmp    esi,ecx
c0018248:	77 05                	ja     c001824f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001824a:	42                   	inc    edx
c001824b:	eb e1                	jmp    c001822e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001824d:	31 c0                	xor    eax,eax
c001824f:	5b                   	pop    ebx
c0018250:	5e                   	pop    esi
c0018251:	c3                   	ret    

c0018252 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018252:	53                   	push   ebx
c0018253:	31 c0                	xor    eax,eax
c0018255:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018259:	8b 1d 20 50 02 c0    	mov    ebx,DWORD PTR ds:0xc0025020
c001825f:	39 c3                	cmp    ebx,eax
c0018261:	7e 22                	jle    c0018285 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018263:	8b 14 85 40 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdadc0]
c001826a:	39 ca                	cmp    edx,ecx
c001826c:	77 14                	ja     c0018282 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001826e:	03 14 85 40 50 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdafc0]
c0018275:	39 ca                	cmp    edx,ecx
c0018277:	76 09                	jbe    c0018282 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018279:	8b 04 85 40 54 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdabc0]
c0018280:	eb 05                	jmp    c0018287 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018282:	40                   	inc    eax
c0018283:	eb da                	jmp    c001825f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018285:	31 c0                	xor    eax,eax
c0018287:	5b                   	pop    ebx
c0018288:	c3                   	ret    

c0018289 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018289:	53                   	push   ebx
c001828a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001828e:	53                   	push   ebx
c001828f:	e8 8c ff ff ff       	call   c0018220 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018294:	5a                   	pop    edx
c0018295:	31 d2                	xor    edx,edx
c0018297:	85 c0                	test   eax,eax
c0018299:	74 04                	je     c001829f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001829b:	89 da                	mov    edx,ebx
c001829d:	29 c2                	sub    edx,eax
c001829f:	89 d0                	mov    eax,edx
c00182a1:	5b                   	pop    ebx
c00182a2:	c3                   	ret    

c00182a3 <Thr::loadDLL(char const*, bool)>:
c00182a3:	55                   	push   ebp
c00182a4:	57                   	push   edi
c00182a5:	56                   	push   esi
c00182a6:	53                   	push   ebx
c00182a7:	81 ec 34 01 00 00    	sub    esp,0x134
c00182ad:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00182b4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00182bb:	56                   	push   esi
c00182bc:	68 2f 2a 02 c0       	push   0xc0022a2f
c00182c1:	e8 73 6e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00182c6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00182cd:	e8 78 6d ff ff       	call   c000f04a <operator new(unsigned long)>
c00182d2:	83 c4 0c             	add    esp,0xc
c00182d5:	89 c3                	mov    ebx,eax
c00182d7:	ff 35 14 58 02 c0    	push   DWORD PTR ds:0xc0025814
c00182dd:	56                   	push   esi
c00182de:	50                   	push   eax
c00182df:	e8 84 73 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c00182e4:	83 c4 0c             	add    esp,0xc
c00182e7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00182eb:	50                   	push   eax
c00182ec:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182f0:	50                   	push   eax
c00182f1:	53                   	push   ebx
c00182f2:	e8 81 76 ff ff       	call   c000f978 <File::stat(unsigned long long*, bool*)>
c00182f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00182fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182ff:	83 c4 10             	add    esp,0x10
c0018302:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0018307:	75 0a                	jne    c0018313 <Thr::loadDLL(char const*, bool)+0x70>
c0018309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001830d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0018311:	75 3c                	jne    c001834f <Thr::loadDLL(char const*, bool)+0xac>
c0018313:	89 e8                	mov    eax,ebp
c0018315:	84 c0                	test   al,al
c0018317:	0f 84 3d 01 00 00    	je     c001845a <Thr::loadDLL(char const*, bool)+0x1b7>
c001831d:	50                   	push   eax
c001831e:	50                   	push   eax
c001831f:	68 40 2a 02 c0       	push   0xc0022a40
c0018324:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0018328:	53                   	push   ebx
c0018329:	e8 57 84 fe ff       	call   c0000785 <strcpy>
c001832e:	58                   	pop    eax
c001832f:	5a                   	pop    edx
c0018330:	56                   	push   esi
c0018331:	53                   	push   ebx
c0018332:	e8 05 85 fe ff       	call   c000083c <strcat>
c0018337:	59                   	pop    ecx
c0018338:	5f                   	pop    edi
c0018339:	68 53 2a 02 c0       	push   0xc0022a53
c001833e:	53                   	push   ebx
c001833f:	e8 f8 84 fe ff       	call   c000083c <strcat>
c0018344:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018347:	e8 d4 d5 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001834c:	83 c4 10             	add    esp,0x10
c001834f:	e8 a3 5f ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c0018354:	51                   	push   ecx
c0018355:	6a 03                	push   0x3
c0018357:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001835b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001835f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018365:	83 d3 00             	adc    ebx,0x0
c0018368:	89 ca                	mov    edx,ecx
c001836a:	89 d1                	mov    ecx,edx
c001836c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018370:	51                   	push   ecx
c0018371:	50                   	push   eax
c0018372:	e8 c3 65 ff ff       	call   c000e93a <VAS::allocatePages(int, int)>
c0018377:	89 34 24             	mov    DWORD PTR [esp],esi
c001837a:	89 c3                	mov    ebx,eax
c001837c:	e8 82 83 fe ff       	call   c0000703 <strlen>
c0018381:	8b 3d 20 50 02 c0    	mov    edi,DWORD PTR ds:0xc0025020
c0018387:	40                   	inc    eax
c0018388:	89 04 24             	mov    DWORD PTR [esp],eax
c001838b:	e8 b8 3c ff ff       	call   c000c048 <malloc>
c0018390:	89 04 bd 40 54 02 c0 	mov    DWORD PTR [edi*4-0x3ffdabc0],eax
c0018397:	5f                   	pop    edi
c0018398:	58                   	pop    eax
c0018399:	a1 20 50 02 c0       	mov    eax,ds:0xc0025020
c001839e:	56                   	push   esi
c001839f:	ff 34 85 40 54 02 c0 	push   DWORD PTR [eax*4-0x3ffdabc0]
c00183a6:	e8 da 83 fe ff       	call   c0000785 <strcpy>
c00183ab:	a1 20 50 02 c0       	mov    eax,ds:0xc0025020
c00183b0:	8d 50 01             	lea    edx,[eax+0x1]
c00183b3:	89 1c 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],ebx
c00183ba:	89 15 20 50 02 c0    	mov    DWORD PTR ds:0xc0025020,edx
c00183c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183c4:	83 c4 0c             	add    esp,0xc
c00183c7:	89 14 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],edx
c00183ce:	6a 01                	push   0x1
c00183d0:	53                   	push   ebx
c00183d1:	56                   	push   esi
c00183d2:	e8 ab f6 ff ff       	call   c0017a82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	89 c7                	mov    edi,eax
c00183dc:	fe c8                	dec    al
c00183de:	74 16                	je     c00183f6 <Thr::loadDLL(char const*, bool)+0x153>
c00183e0:	89 e8                	mov    eax,ebp
c00183e2:	84 c0                	test   al,al
c00183e4:	74 10                	je     c00183f6 <Thr::loadDLL(char const*, bool)+0x153>
c00183e6:	83 ec 0c             	sub    esp,0xc
c00183e9:	68 55 2a 02 c0       	push   0xc0022a55
c00183ee:	e8 2d d5 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	31 f6                	xor    esi,esi
c00183f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018400:	05 ff 0f 00 00       	add    eax,0xfff
c0018405:	83 d2 00             	adc    edx,0x0
c0018408:	0f ac d0 0c          	shrd   eax,edx,0xc
c001840c:	c1 ea 0c             	shr    edx,0xc
c001840f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018413:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018417:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001841b:	ba 00 00 00 00       	mov    edx,0x0
c0018420:	89 d0                	mov    eax,edx
c0018422:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0018426:	73 2c                	jae    c0018454 <Thr::loadDLL(char const*, bool)+0x1b1>
c0018428:	e8 ca 5e ff ff       	call   c000e2f7 <Virt::getAKernelVAS()>
c001842d:	89 f5                	mov    ebp,esi
c001842f:	c1 e5 0c             	shl    ebp,0xc
c0018432:	52                   	push   edx
c0018433:	01 dd                	add    ebp,ebx
c0018435:	52                   	push   edx
c0018436:	55                   	push   ebp
c0018437:	50                   	push   eax
c0018438:	e8 65 60 ff ff       	call   c000e4a2 <VAS::getPageTableEntry(unsigned long)>
c001843d:	83 c4 10             	add    esp,0x10
c0018440:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018443:	75 0c                	jne    c0018451 <Thr::loadDLL(char const*, bool)+0x1ae>
c0018445:	83 ec 0c             	sub    esp,0xc
c0018448:	55                   	push   ebp
c0018449:	e8 1a 41 ff ff       	call   c000c568 <Phys::freePage(unsigned long)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	46                   	inc    esi
c0018452:	eb a4                	jmp    c00183f8 <Thr::loadDLL(char const*, bool)+0x155>
c0018454:	89 f8                	mov    eax,edi
c0018456:	84 c0                	test   al,al
c0018458:	75 02                	jne    c001845c <Thr::loadDLL(char const*, bool)+0x1b9>
c001845a:	31 db                	xor    ebx,ebx
c001845c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018462:	89 d8                	mov    eax,ebx
c0018464:	5b                   	pop    ebx
c0018465:	5e                   	pop    esi
c0018466:	5f                   	pop    edi
c0018467:	5d                   	pop    ebp
c0018468:	c3                   	ret    

c0018469 <Thr::executeDLL(unsigned long, void*)>:
c0018469:	56                   	push   esi
c001846a:	53                   	push   ebx
c001846b:	51                   	push   ecx
c001846c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018470:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018474:	85 db                	test   ebx,ebx
c0018476:	75 10                	jne    c0018488 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018478:	83 ec 0c             	sub    esp,0xc
c001847b:	68 74 2a 02 c0       	push   0xc0022a74
c0018480:	e8 9b d4 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0018485:	83 c4 10             	add    esp,0x10
c0018488:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001848c:	89 d8                	mov    eax,ebx
c001848e:	5a                   	pop    edx
c001848f:	5b                   	pop    ebx
c0018490:	5e                   	pop    esi
c0018491:	ff e0                	jmp    eax
c0018493:	90                   	nop

c0018494 <changeTSS>:
c0018494:	83 ec 0c             	sub    esp,0xc
c0018497:	e8 04 c3 ff ff       	call   c00147a0 <thisCPU()>
c001849c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00184a2:	83 ec 08             	sub    esp,0x8
c00184a5:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00184a8:	05 7c 11 00 00       	add    eax,0x117c
c00184ad:	c1 e1 15             	shl    ecx,0x15
c00184b0:	ba 00 00 e8 01       	mov    edx,0x1e80000
c00184b5:	29 ca                	sub    edx,ecx
c00184b7:	52                   	push   edx
c00184b8:	50                   	push   eax
c00184b9:	e8 4c 56 ff ff       	call   c000db0a <TSS::setESP(unsigned long)>
c00184be:	83 c4 1c             	add    esp,0x1c
c00184c1:	c3                   	ret    

c00184c2 <Process::addArgs(char**)>:
c00184c2:	57                   	push   edi
c00184c3:	56                   	push   esi
c00184c4:	53                   	push   ebx
c00184c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184cd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00184d7:	85 ff                	test   edi,edi
c00184d9:	74 3d                	je     c0018518 <Process::addArgs(char**)+0x56>
c00184db:	8b 07                	mov    eax,DWORD PTR [edi]
c00184dd:	85 c0                	test   eax,eax
c00184df:	74 37                	je     c0018518 <Process::addArgs(char**)+0x56>
c00184e1:	31 db                	xor    ebx,ebx
c00184e3:	83 ec 0c             	sub    esp,0xc
c00184e6:	50                   	push   eax
c00184e7:	e8 17 82 fe ff       	call   c0000703 <strlen>
c00184ec:	40                   	inc    eax
c00184ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00184f0:	e8 53 3b ff ff       	call   c000c048 <malloc>
c00184f5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00184fc:	5a                   	pop    edx
c00184fd:	59                   	pop    ecx
c00184fe:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0018501:	43                   	inc    ebx
c0018502:	50                   	push   eax
c0018503:	e8 7d 82 fe ff       	call   c0000785 <strcpy>
c0018508:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018514:	85 c0                	test   eax,eax
c0018516:	75 cb                	jne    c00184e3 <Process::addArgs(char**)+0x21>
c0018518:	5b                   	pop    ebx
c0018519:	5e                   	pop    esi
c001851a:	5f                   	pop    edi
c001851b:	c3                   	ret    

c001851c <Process::Process(char const*, Process*, char**)>:
c001851c:	56                   	push   esi
c001851d:	53                   	push   ebx
c001851e:	83 ec 14             	sub    esp,0x14
c0018521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018525:	05 0c 02 00 00       	add    eax,0x20c
c001852a:	bb 07 00 00 00       	mov    ebx,0x7
c001852f:	89 c6                	mov    esi,eax
c0018531:	85 db                	test   ebx,ebx
c0018533:	78 12                	js     c0018547 <Process::Process(char const*, Process*, char**)+0x2b>
c0018535:	83 ec 0c             	sub    esp,0xc
c0018538:	56                   	push   esi
c0018539:	e8 0c 76 00 00       	call   c001fb4a <ThreadControlBlock::ThreadControlBlock()>
c001853e:	83 c4 10             	add    esp,0x10
c0018541:	83 c6 63             	add    esi,0x63
c0018544:	4b                   	dec    ebx
c0018545:	eb ea                	jmp    c0018531 <Process::Process(char const*, Process*, char**)+0x15>
c0018547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001854b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018556:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001855f:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0018564:	8d 50 01             	lea    edx,[eax+0x1]
c0018567:	89 15 e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,edx
c001856d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018571:	89 02                	mov    DWORD PTR [edx],eax
c0018573:	83 ec 0c             	sub    esp,0xc
c0018576:	6a 10                	push   0x10
c0018578:	e8 cd 6a ff ff       	call   c000f04a <operator new(unsigned long)>
c001857d:	83 c4 10             	add    esp,0x10
c0018580:	89 c3                	mov    ebx,eax
c0018582:	83 ec 08             	sub    esp,0x8
c0018585:	6a 00                	push   0x0
c0018587:	53                   	push   ebx
c0018588:	e8 51 67 ff ff       	call   c000ecde <VAS::VAS(bool)>
c001858d:	83 c4 10             	add    esp,0x10
c0018590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018594:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001859a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001859e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00185a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185b0:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00185b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185ba:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185c0:	85 c0                	test   eax,eax
c00185c2:	74 42                	je     c0018606 <Process::Process(char const*, Process*, char**)+0xea>
c00185c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185c8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185ce:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00185d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185d8:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00185de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185e2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00185e8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00185ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185f2:	05 0c 01 00 00       	add    eax,0x10c
c00185f7:	83 ec 08             	sub    esp,0x8
c00185fa:	52                   	push   edx
c00185fb:	50                   	push   eax
c00185fc:	e8 84 81 fe ff       	call   c0000785 <strcpy>
c0018601:	83 c4 10             	add    esp,0x10
c0018604:	eb 5c                	jmp    c0018662 <Process::Process(char const*, Process*, char**)+0x146>
c0018606:	83 ec 0c             	sub    esp,0xc
c0018609:	68 60 12 00 00       	push   0x1260
c001860e:	e8 37 6a ff ff       	call   c000f04a <operator new(unsigned long)>
c0018613:	83 c4 10             	add    esp,0x10
c0018616:	89 c3                	mov    ebx,eax
c0018618:	83 ec 08             	sub    esp,0x8
c001861b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001861f:	53                   	push   ebx
c0018620:	e8 e3 51 ff ff       	call   c000d808 <VgaText::VgaText(char const*)>
c0018625:	83 c4 10             	add    esp,0x10
c0018628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001862c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018636:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001863c:	83 ec 0c             	sub    esp,0xc
c001863f:	50                   	push   eax
c0018640:	e8 c4 45 ff ff       	call   c000cc09 <addToTerminalCycle(VgaText*)>
c0018645:	83 c4 10             	add    esp,0x10
c0018648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001864c:	05 0c 01 00 00       	add    eax,0x10c
c0018651:	83 ec 08             	sub    esp,0x8
c0018654:	68 9e 2a 02 c0       	push   0xc0022a9e
c0018659:	50                   	push   eax
c001865a:	e8 26 81 fe ff       	call   c0000785 <strcpy>
c001865f:	83 c4 10             	add    esp,0x10
c0018662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018666:	83 c0 0c             	add    eax,0xc
c0018669:	83 ec 08             	sub    esp,0x8
c001866c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018670:	50                   	push   eax
c0018671:	e8 0f 81 fe ff       	call   c0000785 <strcpy>
c0018676:	83 c4 10             	add    esp,0x10
c0018679:	83 ec 08             	sub    esp,0x8
c001867c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018680:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018684:	e8 39 fe ff ff       	call   c00184c2 <Process::addArgs(char**)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	83 ec 08             	sub    esp,0x8
c001868f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018693:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018697:	e8 ad ee ff ff       	call   c0017549 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00186a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00186a7:	83 f0 01             	xor    eax,0x1
c00186aa:	88 c2                	mov    dl,al
c00186ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b0:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c00186b6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00186bb:	83 ec 08             	sub    esp,0x8
c00186be:	50                   	push   eax
c00186bf:	68 9c 2b 02 c0       	push   0xc0022b9c
c00186c4:	e8 70 6a ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00186c9:	83 c4 10             	add    esp,0x10
c00186cc:	90                   	nop
c00186cd:	83 c4 14             	add    esp,0x14
c00186d0:	5b                   	pop    ebx
c00186d1:	5e                   	pop    esi
c00186d2:	c3                   	ret    
c00186d3:	90                   	nop

c00186d4 <Process::Process(bool, char const*, Process*, char**)>:
c00186d4:	56                   	push   esi
c00186d5:	53                   	push   ebx
c00186d6:	83 ec 14             	sub    esp,0x14
c00186d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00186dd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00186e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e5:	05 0c 02 00 00       	add    eax,0x20c
c00186ea:	bb 07 00 00 00       	mov    ebx,0x7
c00186ef:	89 c6                	mov    esi,eax
c00186f1:	85 db                	test   ebx,ebx
c00186f3:	78 12                	js     c0018707 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00186f5:	83 ec 0c             	sub    esp,0xc
c00186f8:	56                   	push   esi
c00186f9:	e8 4c 74 00 00       	call   c001fb4a <ThreadControlBlock::ThreadControlBlock()>
c00186fe:	83 c4 10             	add    esp,0x10
c0018701:	83 c6 63             	add    esi,0x63
c0018704:	4b                   	dec    ebx
c0018705:	eb ea                	jmp    c00186f1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0018707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001870b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018716:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001871f:	a1 e4 3d 02 c0       	mov    eax,ds:0xc0023de4
c0018724:	8d 50 01             	lea    edx,[eax+0x1]
c0018727:	89 15 e4 3d 02 c0    	mov    DWORD PTR ds:0xc0023de4,edx
c001872d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018731:	89 02                	mov    DWORD PTR [edx],eax
c0018733:	83 ec 0c             	sub    esp,0xc
c0018736:	6a 10                	push   0x10
c0018738:	e8 0d 69 ff ff       	call   c000f04a <operator new(unsigned long)>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	89 c3                	mov    ebx,eax
c0018742:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018747:	83 ec 08             	sub    esp,0x8
c001874a:	50                   	push   eax
c001874b:	53                   	push   ebx
c001874c:	e8 8d 65 ff ff       	call   c000ecde <VAS::VAS(bool)>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018758:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001875e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018762:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001876c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018770:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018774:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001877a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001877e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018784:	85 c0                	test   eax,eax
c0018786:	74 42                	je     c00187ca <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0018788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001878c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018792:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018798:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001879c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187ac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b6:	05 0c 01 00 00       	add    eax,0x10c
c00187bb:	83 ec 08             	sub    esp,0x8
c00187be:	52                   	push   edx
c00187bf:	50                   	push   eax
c00187c0:	e8 c0 7f fe ff       	call   c0000785 <strcpy>
c00187c5:	83 c4 10             	add    esp,0x10
c00187c8:	eb 5c                	jmp    c0018826 <Process::Process(bool, char const*, Process*, char**)+0x152>
c00187ca:	83 ec 0c             	sub    esp,0xc
c00187cd:	68 60 12 00 00       	push   0x1260
c00187d2:	e8 73 68 ff ff       	call   c000f04a <operator new(unsigned long)>
c00187d7:	83 c4 10             	add    esp,0x10
c00187da:	89 c3                	mov    ebx,eax
c00187dc:	83 ec 08             	sub    esp,0x8
c00187df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187e3:	53                   	push   ebx
c00187e4:	e8 1f 50 ff ff       	call   c000d808 <VgaText::VgaText(char const*)>
c00187e9:	83 c4 10             	add    esp,0x10
c00187ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018800:	83 ec 0c             	sub    esp,0xc
c0018803:	50                   	push   eax
c0018804:	e8 00 44 ff ff       	call   c000cc09 <addToTerminalCycle(VgaText*)>
c0018809:	83 c4 10             	add    esp,0x10
c001880c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018810:	05 0c 01 00 00       	add    eax,0x10c
c0018815:	83 ec 08             	sub    esp,0x8
c0018818:	68 9e 2a 02 c0       	push   0xc0022a9e
c001881d:	50                   	push   eax
c001881e:	e8 62 7f fe ff       	call   c0000785 <strcpy>
c0018823:	83 c4 10             	add    esp,0x10
c0018826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001882a:	83 c0 0c             	add    eax,0xc
c001882d:	83 ec 08             	sub    esp,0x8
c0018830:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018834:	50                   	push   eax
c0018835:	e8 4b 7f fe ff       	call   c0000785 <strcpy>
c001883a:	83 c4 10             	add    esp,0x10
c001883d:	83 ec 08             	sub    esp,0x8
c0018840:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018844:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018848:	e8 75 fc ff ff       	call   c00184c2 <Process::addArgs(char**)>
c001884d:	83 c4 10             	add    esp,0x10
c0018850:	90                   	nop
c0018851:	83 c4 14             	add    esp,0x14
c0018854:	5b                   	pop    ebx
c0018855:	5e                   	pop    esi
c0018856:	c3                   	ret    

c0018857 <disableIRQs()>:
c0018857:	fa                   	cli    
c0018858:	ff 05 ec 57 02 c0    	inc    DWORD PTR ds:0xc00257ec
c001885e:	c3                   	ret    

c001885f <getIRQNestingLevel()>:
c001885f:	a1 ec 57 02 c0       	mov    eax,ds:0xc00257ec
c0018864:	c3                   	ret    

c0018865 <enableIRQs()>:
c0018865:	a1 ec 57 02 c0       	mov    eax,ds:0xc00257ec
c001886a:	48                   	dec    eax
c001886b:	a3 ec 57 02 c0       	mov    ds:0xc00257ec,eax
c0018870:	75 01                	jne    c0018873 <enableIRQs()+0xe>
c0018872:	fb                   	sti    
c0018873:	c3                   	ret    

c0018874 <lockScheduler()>:
c0018874:	eb e1                	jmp    c0018857 <disableIRQs()>

c0018876 <unlockScheduler()>:
c0018876:	eb ed                	jmp    c0018865 <enableIRQs()>

c0018878 <userModeEntryPoint(void*)>:
c0018878:	83 ec 0c             	sub    esp,0xc
c001887b:	e8 f6 ff ff ff       	call   c0018876 <unlockScheduler()>
c0018880:	fb                   	sti    
c0018881:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018886:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018889:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018893:	83 c4 0c             	add    esp,0xc
c0018896:	e9 29 7a fe ff       	jmp    c00002c4 <goToUsermode>

c001889b <lockStuff()>:
c001889b:	e8 b7 ff ff ff       	call   c0018857 <disableIRQs()>
c00188a0:	ff 05 e8 57 02 c0    	inc    DWORD PTR ds:0xc00257e8
c00188a6:	c3                   	ret    

c00188a7 <taskStartupFunction>:
c00188a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188ac:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00188af:	c3                   	ret    

c00188b0 <updateTimeUsed()>:
c00188b0:	57                   	push   edi
c00188b1:	56                   	push   esi
c00188b2:	53                   	push   ebx
c00188b3:	e8 e8 be ff ff       	call   c00147a0 <thisCPU()>
c00188b8:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00188bf:	74 49                	je     c001890a <updateTimeUsed()+0x5a>
c00188c1:	0f 31                	rdtsc  
c00188c3:	89 c1                	mov    ecx,eax
c00188c5:	a3 28 58 02 c0       	mov    ds:0xc0025828,eax
c00188ca:	2b 0d 18 58 02 c0    	sub    ecx,DWORD PTR ds:0xc0025818
c00188d0:	89 d3                	mov    ebx,edx
c00188d2:	89 0d 20 58 02 c0    	mov    DWORD PTR ds:0xc0025820,ecx
c00188d8:	1b 1d 1c 58 02 c0    	sbb    ebx,DWORD PTR ds:0xc002581c
c00188de:	a3 18 58 02 c0       	mov    ds:0xc0025818,eax
c00188e3:	89 1d 24 58 02 c0    	mov    DWORD PTR ds:0xc0025824,ebx
c00188e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188ee:	89 15 2c 58 02 c0    	mov    DWORD PTR ds:0xc002582c,edx
c00188f4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00188f7:	89 15 1c 58 02 c0    	mov    DWORD PTR ds:0xc002581c,edx
c00188fd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018900:	01 f1                	add    ecx,esi
c0018902:	11 fb                	adc    ebx,edi
c0018904:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018907:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001890a:	5b                   	pop    ebx
c001890b:	5e                   	pop    esi
c001890c:	5f                   	pop    edi
c001890d:	c3                   	ret    

c001890e <switchToThread(ThreadControlBlock*)>:
c001890e:	53                   	push   ebx
c001890f:	83 ec 08             	sub    esp,0x8
c0018912:	a1 e8 57 02 c0       	mov    eax,ds:0xc00257e8
c0018917:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001891b:	85 c0                	test   eax,eax
c001891d:	75 30                	jne    c001894f <switchToThread(ThreadControlBlock*)+0x41>
c001891f:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0018922:	3c ff                	cmp    al,0xff
c0018924:	74 25                	je     c001894b <switchToThread(ThreadControlBlock*)+0x3d>
c0018926:	0f b6 d0             	movzx  edx,al
c0018929:	b8 84 03 00 00       	mov    eax,0x384
c001892e:	29 d0                	sub    eax,edx
c0018930:	c1 e0 10             	shl    eax,0x10
c0018933:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0018936:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018939:	e8 72 ff ff ff       	call   c00188b0 <updateTimeUsed()>
c001893e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018942:	83 c4 08             	add    esp,0x8
c0018945:	5b                   	pop    ebx
c0018946:	e9 b2 79 fe ff       	jmp    c00002fd <switchToThreadASM>
c001894b:	31 c0                	xor    eax,eax
c001894d:	eb e7                	jmp    c0018936 <switchToThread(ThreadControlBlock*)+0x28>
c001894f:	c7 05 e4 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00257e4,0x1
c0018959:	83 c4 08             	add    esp,0x8
c001895c:	5b                   	pop    ebx
c001895d:	c3                   	ret    

c001895e <Semaphore::Semaphore(int)>:
c001895e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018966:	89 10                	mov    DWORD PTR [eax],edx
c0018968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001896c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018977:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001897e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018982:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018989:	90                   	nop
c001898a:	c3                   	ret    
c001898b:	90                   	nop

c001898c <Mutex::Mutex()>:
c001898c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018990:	6a 01                	push   0x1
c0018992:	50                   	push   eax
c0018993:	e8 c6 ff ff ff       	call   c001895e <Semaphore::Semaphore(int)>
c0018998:	83 c4 08             	add    esp,0x8
c001899b:	90                   	nop
c001899c:	c3                   	ret    
c001899d:	90                   	nop

c001899e <Process::createThread(void (*)(void*), void*, int)>:
c001899e:	55                   	push   ebp
c001899f:	31 c9                	xor    ecx,ecx
c00189a1:	57                   	push   edi
c00189a2:	56                   	push   esi
c00189a3:	53                   	push   ebx
c00189a4:	83 ec 1c             	sub    esp,0x1c
c00189a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00189ab:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c00189b2:	89 f2                	mov    edx,esi
c00189b4:	0f b7 c2             	movzx  eax,dx
c00189b7:	83 e2 01             	and    edx,0x1
c00189ba:	74 14                	je     c00189d0 <Process::createThread(void (*)(void*), void*, int)+0x32>
c00189bc:	d1 f8                	sar    eax,1
c00189be:	41                   	inc    ecx
c00189bf:	89 c2                	mov    edx,eax
c00189c1:	83 f9 10             	cmp    ecx,0x10
c00189c4:	75 ee                	jne    c00189b4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c00189c6:	83 c4 1c             	add    esp,0x1c
c00189c9:	31 c0                	xor    eax,eax
c00189cb:	5b                   	pop    ebx
c00189cc:	5e                   	pop    esi
c00189cd:	5f                   	pop    edi
c00189ce:	5d                   	pop    ebp
c00189cf:	c3                   	ret    
c00189d0:	83 ec 08             	sub    esp,0x8
c00189d3:	b8 01 00 00 00       	mov    eax,0x1
c00189d8:	d3 e0                	shl    eax,cl
c00189da:	09 c6                	or     esi,eax
c00189dc:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00189e2:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c00189e9:	8d 34 09             	lea    esi,[ecx+ecx*1]
c00189ec:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00189ef:	01 ce                	add    esi,ecx
c00189f1:	89 f0                	mov    eax,esi
c00189f3:	c1 e0 05             	shl    eax,0x5
c00189f6:	01 c6                	add    esi,eax
c00189f8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00189fb:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018a01:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018a07:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018a0b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018a11:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018a17:	89 ca                	mov    edx,ecx
c0018a19:	f7 da                	neg    edx
c0018a1b:	c1 e2 15             	shl    edx,0x15
c0018a1e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018a24:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018a2a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018a2e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018a38:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018a3e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018a42:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018a48:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018a52:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018a5c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018a63:	50                   	push   eax
c0018a64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a68:	68 08 58 02 c0       	push   0xc0025808
c0018a6d:	e8 30 6f 00 00       	call   c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018a72:	83 c4 10             	add    esp,0x10
c0018a75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a79:	83 c4 1c             	add    esp,0x1c
c0018a7c:	5b                   	pop    ebx
c0018a7d:	5e                   	pop    esi
c0018a7e:	5f                   	pop    edi
c0018a7f:	5d                   	pop    ebp
c0018a80:	c3                   	ret    
c0018a81:	90                   	nop

c0018a82 <Process::createUserThread()>:
c0018a82:	83 ec 0c             	sub    esp,0xc
c0018a85:	68 80 00 00 00       	push   0x80
c0018a8a:	6a 00                	push   0x0
c0018a8c:	68 78 88 01 c0       	push   0xc0018878
c0018a91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a95:	e8 04 ff ff ff       	call   c001899e <Process::createThread(void (*)(void*), void*, int)>
c0018a9a:	83 c4 1c             	add    esp,0x1c
c0018a9d:	c3                   	ret    

c0018a9e <setupMultitasking(void (*)())>:
c0018a9e:	56                   	push   esi
c0018a9f:	53                   	push   ebx
c0018aa0:	53                   	push   ebx
c0018aa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018aa5:	eb 10                	jmp    c0018ab7 <setupMultitasking(void (*)())+0x19>
c0018aa7:	83 ec 0c             	sub    esp,0xc
c0018aaa:	68 08 58 02 c0       	push   0xc0025808
c0018aaf:	e8 40 6e 00 00       	call   c001f8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ab4:	83 c4 10             	add    esp,0x10
c0018ab7:	83 ec 0c             	sub    esp,0xc
c0018aba:	68 08 58 02 c0       	push   0xc0025808
c0018abf:	e8 14 6e 00 00       	call   c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ac4:	83 c4 10             	add    esp,0x10
c0018ac7:	84 c0                	test   al,al
c0018ac9:	74 dc                	je     c0018aa7 <setupMultitasking(void (*)())+0x9>
c0018acb:	83 ec 0c             	sub    esp,0xc
c0018ace:	68 3b 07 00 00       	push   0x73b
c0018ad3:	e8 72 65 ff ff       	call   c000f04a <operator new(unsigned long)>
c0018ad8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018adf:	89 c3                	mov    ebx,eax
c0018ae1:	6a 00                	push   0x0
c0018ae3:	68 a2 2a 02 c0       	push   0xc0022aa2
c0018ae8:	6a 01                	push   0x1
c0018aea:	50                   	push   eax
c0018aeb:	e8 e4 fb ff ff       	call   c00186d4 <Process::Process(bool, char const*, Process*, char**)>
c0018af0:	83 c4 18             	add    esp,0x18
c0018af3:	89 1d 14 58 02 c0    	mov    DWORD PTR ds:0xc0025814,ebx
c0018af9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018aff:	68 c4 2b 02 c0       	push   0xc0022bc4
c0018b04:	e8 30 66 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018b09:	58                   	pop    eax
c0018b0a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0018b10:	e8 68 48 ff ff       	call   c000d37d <setActiveTerminal(VgaText*)>
c0018b15:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0018b1d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018b23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b26:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018b30:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018b36:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018b3c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018b46:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018b50:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018b5a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018b60:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018b66:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018b70:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018b76:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018b80:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018b86:	5a                   	pop    edx
c0018b87:	59                   	pop    ecx
c0018b88:	68 9e 2a 02 c0       	push   0xc0022a9e
c0018b8d:	50                   	push   eax
c0018b8e:	e8 f2 7b fe ff       	call   c0000785 <strcpy>
c0018b93:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018b9a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018b9e:	83 c4 14             	add    esp,0x14
c0018ba1:	5b                   	pop    ebx
c0018ba2:	5e                   	pop    esi
c0018ba3:	e9 47 77 fe ff       	jmp    c00002ef <switchToThreadASMFirstTime>

c0018ba8 <schedule()>:
c0018ba8:	a1 e8 57 02 c0       	mov    eax,ds:0xc00257e8
c0018bad:	85 c0                	test   eax,eax
c0018baf:	74 0b                	je     c0018bbc <schedule()+0x14>
c0018bb1:	c7 05 e4 57 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00257e4,0x1
c0018bbb:	c3                   	ret    
c0018bbc:	53                   	push   ebx
c0018bbd:	83 ec 14             	sub    esp,0x14
c0018bc0:	68 08 58 02 c0       	push   0xc0025808
c0018bc5:	e8 0e 6d 00 00       	call   c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	84 c0                	test   al,al
c0018bcf:	75 38                	jne    c0018c09 <schedule()+0x61>
c0018bd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018bd9:	4a                   	dec    edx
c0018bda:	74 32                	je     c0018c0e <schedule()+0x66>
c0018bdc:	83 ec 0c             	sub    esp,0xc
c0018bdf:	68 08 58 02 c0       	push   0xc0025808
c0018be4:	e8 e7 6c 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018be9:	c7 04 24 08 58 02 c0 	mov    DWORD PTR [esp],0xc0025808
c0018bf0:	89 c3                	mov    ebx,eax
c0018bf2:	e8 fd 6c 00 00       	call   c001f8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018bf7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018bfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c01:	e8 08 fd ff ff       	call   c001890e <switchToThread(ThreadControlBlock*)>
c0018c06:	83 c4 10             	add    esp,0x10
c0018c09:	83 c4 08             	add    esp,0x8
c0018c0c:	5b                   	pop    ebx
c0018c0d:	c3                   	ret    
c0018c0e:	83 ec 08             	sub    esp,0x8
c0018c11:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018c18:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018c1e:	68 08 58 02 c0       	push   0xc0025808
c0018c23:	e8 7a 6d 00 00       	call   c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c28:	83 c4 10             	add    esp,0x10
c0018c2b:	eb af                	jmp    c0018bdc <schedule()+0x34>

c0018c2d <unlockStuff()>:
c0018c2d:	a1 e8 57 02 c0       	mov    eax,ds:0xc00257e8
c0018c32:	48                   	dec    eax
c0018c33:	a3 e8 57 02 c0       	mov    ds:0xc00257e8,eax
c0018c38:	75 09                	jne    c0018c43 <unlockStuff()+0x16>
c0018c3a:	a1 e4 57 02 c0       	mov    eax,ds:0xc00257e4
c0018c3f:	85 c0                	test   eax,eax
c0018c41:	75 05                	jne    c0018c48 <unlockStuff()+0x1b>
c0018c43:	e9 1d fc ff ff       	jmp    c0018865 <enableIRQs()>
c0018c48:	83 ec 0c             	sub    esp,0xc
c0018c4b:	c7 05 e4 57 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00257e4,0x0
c0018c55:	e8 4e ff ff ff       	call   c0018ba8 <schedule()>
c0018c5a:	83 c4 0c             	add    esp,0xc
c0018c5d:	e9 03 fc ff ff       	jmp    c0018865 <enableIRQs()>

c0018c62 <Semaphore::tryAcquire()>:
c0018c62:	83 ec 0c             	sub    esp,0xc
c0018c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c69:	e8 2d fc ff ff       	call   c001889b <lockStuff()>
c0018c6e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018c71:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018c73:	7c 0b                	jl     c0018c80 <Semaphore::tryAcquire()+0x1e>
c0018c75:	e8 b3 ff ff ff       	call   c0018c2d <unlockStuff()>
c0018c7a:	31 c0                	xor    eax,eax
c0018c7c:	83 c4 0c             	add    esp,0xc
c0018c7f:	c3                   	ret    
c0018c80:	42                   	inc    edx
c0018c81:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018c84:	e8 a4 ff ff ff       	call   c0018c2d <unlockStuff()>
c0018c89:	b0 01                	mov    al,0x1
c0018c8b:	83 c4 0c             	add    esp,0xc
c0018c8e:	c3                   	ret    
c0018c8f:	90                   	nop

c0018c90 <Semaphore::assertLocked(char const*)>:
c0018c90:	83 ec 0c             	sub    esp,0xc
c0018c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c9b:	e8 fb fb ff ff       	call   c001889b <lockStuff()>
c0018ca0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018ca2:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0018ca5:	7c 05                	jl     c0018cac <Semaphore::assertLocked(char const*)+0x1c>
c0018ca7:	83 c4 0c             	add    esp,0xc
c0018caa:	eb 81                	jmp    c0018c2d <unlockStuff()>
c0018cac:	83 ec 0c             	sub    esp,0xc
c0018caf:	52                   	push   edx
c0018cb0:	e8 6b cc ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0018cb5:	83 c4 10             	add    esp,0x10
c0018cb8:	83 c4 0c             	add    esp,0xc
c0018cbb:	e9 6d ff ff ff       	jmp    c0018c2d <unlockStuff()>

c0018cc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018cc0:	83 ec 0c             	sub    esp,0xc
c0018cc3:	e8 97 fb ff ff       	call   c001885f <getIRQNestingLevel()>
c0018cc8:	83 ec 08             	sub    esp,0x8
c0018ccb:	50                   	push   eax
c0018ccc:	68 f8 2b 02 c0       	push   0xc0022bf8
c0018cd1:	e8 63 64 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018cd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018cda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cdf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ce2:	e8 c1 fe ff ff       	call   c0018ba8 <schedule()>
c0018ce7:	e8 8a fb ff ff       	call   c0018876 <unlockScheduler()>
c0018cec:	e8 6e fb ff ff       	call   c001885f <getIRQNestingLevel()>
c0018cf1:	5a                   	pop    edx
c0018cf2:	59                   	pop    ecx
c0018cf3:	50                   	push   eax
c0018cf4:	68 2c 2c 02 c0       	push   0xc0022c2c
c0018cf9:	e8 3b 64 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018cfe:	83 c4 1c             	add    esp,0x1c
c0018d01:	c3                   	ret    

c0018d02 <blockTask(TaskState)>:
c0018d02:	83 ec 0c             	sub    esp,0xc
c0018d05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d09:	e8 66 fb ff ff       	call   c0018874 <lockScheduler()>
c0018d0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d13:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018d16:	e8 8d fe ff ff       	call   c0018ba8 <schedule()>
c0018d1b:	83 c4 0c             	add    esp,0xc
c0018d1e:	e9 53 fb ff ff       	jmp    c0018876 <unlockScheduler()>

c0018d23 <waitTask(int, int*, int)>:
c0018d23:	83 ec 18             	sub    esp,0x18
c0018d26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d2f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018d32:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d3b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018d3e:	6a 07                	push   0x7
c0018d40:	e8 bd ff ff ff       	call   c0018d02 <blockTask(TaskState)>
c0018d45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d4a:	83 c4 10             	add    esp,0x10
c0018d4d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018d50:	85 d2                	test   edx,edx
c0018d52:	74 0a                	je     c0018d5e <waitTask(int, int*, int)+0x3b>
c0018d54:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018d57:	89 02                	mov    DWORD PTR [edx],eax
c0018d59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d5e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018d61:	83 c4 0c             	add    esp,0xc
c0018d64:	c3                   	ret    

c0018d65 <nanoSleepUntil(unsigned long long)>:
c0018d65:	83 ec 0c             	sub    esp,0xc
c0018d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018d70:	3b 05 30 4a 02 c0    	cmp    eax,DWORD PTR ds:0xc0024a30
c0018d76:	89 d1                	mov    ecx,edx
c0018d78:	1b 0d 34 4a 02 c0    	sbb    ecx,DWORD PTR ds:0xc0024a34
c0018d7e:	73 04                	jae    c0018d84 <nanoSleepUntil(unsigned long long)+0x1f>
c0018d80:	83 c4 0c             	add    esp,0xc
c0018d83:	c3                   	ret    
c0018d84:	e8 12 fb ff ff       	call   c001889b <lockStuff()>
c0018d89:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018d8f:	83 ec 08             	sub    esp,0x8
c0018d92:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0018d95:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018d98:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018d9e:	68 fc 57 02 c0       	push   0xc00257fc
c0018da3:	e8 fa 6b 00 00       	call   c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018da8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018daf:	e8 4e ff ff ff       	call   c0018d02 <blockTask(TaskState)>
c0018db4:	83 c4 1c             	add    esp,0x1c
c0018db7:	e9 71 fe ff ff       	jmp    c0018c2d <unlockStuff()>

c0018dbc <nanoSleep(unsigned long long)>:
c0018dbc:	a1 30 4a 02 c0       	mov    eax,ds:0xc0024a30
c0018dc1:	8b 15 34 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024a34
c0018dc7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018dcb:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018dcf:	eb 94                	jmp    c0018d65 <nanoSleepUntil(unsigned long long)>

c0018dd1 <sleep(unsigned long long)>:
c0018dd1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018dd9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018dde:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018de2:	01 ca                	add    edx,ecx
c0018de4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018de8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018dec:	eb ce                	jmp    c0018dbc <nanoSleep(unsigned long long)>

c0018dee <Semaphore::acquire()>:
c0018dee:	83 ec 0c             	sub    esp,0xc
c0018df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df5:	e8 a1 fa ff ff       	call   c001889b <lockStuff()>
c0018dfa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018dfd:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018dff:	7d 0c                	jge    c0018e0d <Semaphore::acquire()+0x1f>
c0018e01:	42                   	inc    edx
c0018e02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018e05:	83 c4 0c             	add    esp,0xc
c0018e08:	e9 20 fe ff ff       	jmp    c0018c2d <unlockStuff()>
c0018e0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e13:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0018e1a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018e1d:	85 d2                	test   edx,edx
c0018e1f:	74 2a                	je     c0018e4b <Semaphore::acquire()+0x5d>
c0018e21:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0018e24:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018e2a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0018e2d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e33:	83 ec 0c             	sub    esp,0xc
c0018e36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0018e39:	6a 05                	push   0x5
c0018e3b:	e8 c2 fe ff ff       	call   c0018d02 <blockTask(TaskState)>
c0018e40:	83 c4 10             	add    esp,0x10
c0018e43:	83 c4 0c             	add    esp,0xc
c0018e46:	e9 e2 fd ff ff       	jmp    c0018c2d <unlockStuff()>
c0018e4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018e51:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018e54:	eb d7                	jmp    c0018e2d <Semaphore::acquire()+0x3f>

c0018e56 <taskReturned>:
c0018e56:	83 ec 18             	sub    esp,0x18
c0018e59:	68 60 2c 02 c0       	push   0xc0022c60
c0018e5e:	e8 bd ca ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0018e63:	83 c4 10             	add    esp,0x10
c0018e66:	83 ec 0c             	sub    esp,0xc
c0018e69:	6a 02                	push   0x2
c0018e6b:	e8 92 fe ff ff       	call   c0018d02 <blockTask(TaskState)>
c0018e70:	e8 ff f9 ff ff       	call   c0018874 <lockScheduler()>
c0018e75:	e8 2e fd ff ff       	call   c0018ba8 <schedule()>
c0018e7a:	e8 f7 f9 ff ff       	call   c0018876 <unlockScheduler()>
c0018e7f:	83 c4 10             	add    esp,0x10
c0018e82:	eb e2                	jmp    c0018e66 <taskReturned+0x10>

c0018e84 <unblockTask(ThreadControlBlock*)>:
c0018e84:	53                   	push   ebx
c0018e85:	83 ec 08             	sub    esp,0x8
c0018e88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018e8c:	e8 e3 f9 ff ff       	call   c0018874 <lockScheduler()>
c0018e91:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018e94:	85 c0                	test   eax,eax
c0018e96:	74 5c                	je     c0018ef4 <unblockTask(ThreadControlBlock*)+0x70>
c0018e98:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018e9b:	48                   	dec    eax
c0018e9c:	74 31                	je     c0018ecf <unblockTask(ThreadControlBlock*)+0x4b>
c0018e9e:	83 ec 0c             	sub    esp,0xc
c0018ea1:	68 08 58 02 c0       	push   0xc0025808
c0018ea6:	e8 25 6a 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	85 c0                	test   eax,eax
c0018eb0:	75 17                	jne    c0018ec9 <unblockTask(ThreadControlBlock*)+0x45>
c0018eb2:	eb 65                	jmp    c0018f19 <unblockTask(ThreadControlBlock*)+0x95>
c0018eb4:	83 ec 08             	sub    esp,0x8
c0018eb7:	50                   	push   eax
c0018eb8:	68 08 58 02 c0       	push   0xc0025808
c0018ebd:	e8 1e 6d 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018ec2:	83 c4 10             	add    esp,0x10
c0018ec5:	85 c0                	test   eax,eax
c0018ec7:	74 50                	je     c0018f19 <unblockTask(ThreadControlBlock*)+0x95>
c0018ec9:	39 c3                	cmp    ebx,eax
c0018ecb:	75 e7                	jne    c0018eb4 <unblockTask(ThreadControlBlock*)+0x30>
c0018ecd:	eb 1c                	jmp    c0018eeb <unblockTask(ThreadControlBlock*)+0x67>
c0018ecf:	83 ec 0c             	sub    esp,0xc
c0018ed2:	68 50 2d 02 c0       	push   0xc0022d50
c0018ed7:	e8 5d 62 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018edc:	c7 04 24 dc 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cdc
c0018ee3:	e8 51 62 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018ee8:	83 c4 10             	add    esp,0x10
c0018eeb:	83 c4 08             	add    esp,0x8
c0018eee:	5b                   	pop    ebx
c0018eef:	e9 82 f9 ff ff       	jmp    c0018876 <unlockScheduler()>
c0018ef4:	83 ec 0c             	sub    esp,0xc
c0018ef7:	68 94 2c 02 c0       	push   0xc0022c94
c0018efc:	e8 38 62 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018f01:	c7 04 24 dc 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cdc
c0018f08:	e8 2c 62 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	83 c4 08             	add    esp,0x8
c0018f13:	5b                   	pop    ebx
c0018f14:	e9 5d f9 ff ff       	jmp    c0018876 <unlockScheduler()>
c0018f19:	83 ec 08             	sub    esp,0x8
c0018f1c:	53                   	push   ebx
c0018f1d:	68 08 58 02 c0       	push   0xc0025808
c0018f22:	e8 7b 6a 00 00       	call   c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f27:	83 c4 10             	add    esp,0x10
c0018f2a:	83 c4 08             	add    esp,0x8
c0018f2d:	5b                   	pop    ebx
c0018f2e:	e9 43 f9 ff ff       	jmp    c0018876 <unlockScheduler()>

c0018f33 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018f33:	55                   	push   ebp
c0018f34:	57                   	push   edi
c0018f35:	56                   	push   esi
c0018f36:	53                   	push   ebx
c0018f37:	83 ec 1c             	sub    esp,0x1c
c0018f3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018f3e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018f41:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018f47:	85 c9                	test   ecx,ecx
c0018f49:	7e 20                	jle    c0018f6b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0018f4b:	31 f6                	xor    esi,esi
c0018f4d:	83 ec 0c             	sub    esp,0xc
c0018f50:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018f57:	46                   	inc    esi
c0018f58:	e8 fb 30 ff ff       	call   c000c058 <free>
c0018f5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018f60:	83 c4 10             	add    esp,0x10
c0018f63:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018f69:	7f e2                	jg     c0018f4d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018f6b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018f75:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018f7a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018f7d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018f80:	d3 c0                	rol    eax,cl
c0018f82:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0018f89:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018f8c:	89 f7                	mov    edi,esi
c0018f8e:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018f96:	0f 85 4f 01 00 00    	jne    c00190eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018f9c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018fa2:	85 c0                	test   eax,eax
c0018fa4:	0f 84 aa 00 00 00    	je     c0019054 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018faa:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018fad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018fb1:	31 c9                	xor    ecx,ecx
c0018fb3:	eb 10                	jmp    c0018fc5 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018fb5:	41                   	inc    ecx
c0018fb6:	83 f9 10             	cmp    ecx,0x10
c0018fb9:	0f 84 95 00 00 00    	je     c0019054 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018fbf:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018fc5:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018fcc:	d3 fa                	sar    edx,cl
c0018fce:	83 e2 01             	and    edx,0x1
c0018fd1:	74 e2                	je     c0018fb5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018fd3:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018fd6:	01 ca                	add    edx,ecx
c0018fd8:	89 d5                	mov    ebp,edx
c0018fda:	c1 e5 05             	shl    ebp,0x5
c0018fdd:	01 ea                	add    edx,ebp
c0018fdf:	01 d0                	add    eax,edx
c0018fe1:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018fe7:	83 fd 07             	cmp    ebp,0x7
c0018fea:	75 c9                	jne    c0018fb5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018fec:	05 40 02 00 00       	add    eax,0x240
c0018ff1:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018ff4:	83 fd ff             	cmp    ebp,0xffffffff
c0018ff7:	0f 8c 08 01 00 00    	jl     c0019105 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c0018ffd:	0f 84 b9 01 00 00    	je     c00191bc <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0019003:	85 ed                	test   ebp,ebp
c0019005:	0f 84 a0 01 00 00    	je     c00191ab <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001900b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001900d:	75 a6                	jne    c0018fb5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001900f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019015:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019019:	01 d0                	add    eax,edx
c001901b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001901f:	83 ec 0c             	sub    esp,0xc
c0019022:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019028:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001902b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019031:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019038:	50                   	push   eax
c0019039:	e8 46 fe ff ff       	call   c0018e84 <unblockTask(ThreadControlBlock*)>
c001903e:	83 c4 10             	add    esp,0x10
c0019041:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019044:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019048:	89 f7                	mov    edi,esi
c001904a:	41                   	inc    ecx
c001904b:	83 f9 10             	cmp    ecx,0x10
c001904e:	0f 85 6b ff ff ff    	jne    c0018fbf <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019054:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001905a:	85 c0                	test   eax,eax
c001905c:	74 5d                	je     c00190bb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001905e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019064:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001906a:	74 4f                	je     c00190bb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001906c:	83 ec 0c             	sub    esp,0xc
c001906f:	68 08 58 02 c0       	push   0xc0025808
c0019074:	e8 57 68 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019079:	c7 04 24 08 58 02 c0 	mov    DWORD PTR [esp],0xc0025808
c0019080:	89 c7                	mov    edi,eax
c0019082:	e8 51 68 00 00       	call   c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019087:	83 c4 10             	add    esp,0x10
c001908a:	84 c0                	test   al,al
c001908c:	0f 84 e4 00 00 00    	je     c0019176 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c0019092:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019095:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001909b:	85 d2                	test   edx,edx
c001909d:	74 0f                	je     c00190ae <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001909f:	83 ec 0c             	sub    esp,0xc
c00190a2:	8b 02                	mov    eax,DWORD PTR [edx]
c00190a4:	52                   	push   edx
c00190a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00190a8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00190b8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00190bb:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00190c1:	85 db                	test   ebx,ebx
c00190c3:	74 16                	je     c00190db <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00190c5:	83 ec 0c             	sub    esp,0xc
c00190c8:	53                   	push   ebx
c00190c9:	e8 00 56 ff ff       	call   c000e6ce <VAS::~VAS()>
c00190ce:	58                   	pop    eax
c00190cf:	5a                   	pop    edx
c00190d0:	6a 10                	push   0x10
c00190d2:	53                   	push   ebx
c00190d3:	e8 81 5f ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c00190d8:	83 c4 10             	add    esp,0x10
c00190db:	83 ec 0c             	sub    esp,0xc
c00190de:	68 a9 2a 02 c0       	push   0xc0022aa9
c00190e3:	e8 51 60 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00190e8:	83 c4 10             	add    esp,0x10
c00190eb:	83 ec 08             	sub    esp,0x8
c00190ee:	68 3b 07 00 00       	push   0x73b
c00190f3:	68 b7 2a 02 c0       	push   0xc0022ab7
c00190f8:	e8 3c 60 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00190fd:	83 c4 2c             	add    esp,0x2c
c0019100:	5b                   	pop    ebx
c0019101:	5e                   	pop    esi
c0019102:	5f                   	pop    edi
c0019103:	5d                   	pop    ebp
c0019104:	c3                   	ret    
c0019105:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019109:	83 ec 0c             	sub    esp,0xc
c001910c:	68 94 2d 02 c0       	push   0xc0022d94
c0019111:	e8 0a c8 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0019116:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019119:	83 c4 10             	add    esp,0x10
c001911c:	89 f7                	mov    edi,esi
c001911e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019122:	e9 8e fe ff ff       	jmp    c0018fb5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0019127:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001912d:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019133:	75 1c                	jne    c0019151 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019135:	83 ec 0c             	sub    esp,0xc
c0019138:	68 fc 2d 02 c0       	push   0xc0022dfc
c001913d:	e8 f7 5f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0019142:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019149:	e8 b4 fb ff ff       	call   c0018d02 <blockTask(TaskState)>
c001914e:	83 c4 10             	add    esp,0x10
c0019151:	83 ec 08             	sub    esp,0x8
c0019154:	56                   	push   esi
c0019155:	68 08 58 02 c0       	push   0xc0025808
c001915a:	e8 43 68 00 00       	call   c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001915f:	c7 04 24 08 58 02 c0 	mov    DWORD PTR [esp],0xc0025808
c0019166:	e8 65 67 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	39 f8                	cmp    eax,edi
c0019170:	0f 84 1c ff ff ff    	je     c0019092 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0019176:	83 ec 0c             	sub    esp,0xc
c0019179:	68 08 58 02 c0       	push   0xc0025808
c001917e:	e8 4d 67 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019183:	c7 04 24 08 58 02 c0 	mov    DWORD PTR [esp],0xc0025808
c001918a:	89 c6                	mov    esi,eax
c001918c:	e8 63 67 00 00       	call   c001f8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019191:	83 c4 10             	add    esp,0x10
c0019194:	39 f3                	cmp    ebx,esi
c0019196:	74 b9                	je     c0019151 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0019198:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001919b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001919e:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00191a4:	75 ab                	jne    c0019151 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00191a6:	e9 7c ff ff ff       	jmp    c0019127 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00191ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191af:	83 ec 0c             	sub    esp,0xc
c00191b2:	68 c8 2d 02 c0       	push   0xc0022dc8
c00191b7:	e9 55 ff ff ff       	jmp    c0019111 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c00191bc:	8b 36                	mov    esi,DWORD PTR [esi]
c00191be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00191c2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00191c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00191c8:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00191ce:	01 d7                	add    edi,edx
c00191d0:	89 f8                	mov    eax,edi
c00191d2:	e9 44 fe ff ff       	jmp    c001901b <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c00191d7 <cleanerTaskFunction(void*)>:
c00191d7:	53                   	push   ebx
c00191d8:	83 ec 08             	sub    esp,0x8
c00191db:	e8 96 f6 ff ff       	call   c0018876 <unlockScheduler()>
c00191e0:	e8 8f f6 ff ff       	call   c0018874 <lockScheduler()>
c00191e5:	80 3d cc 57 02 c0 00 	cmp    BYTE PTR ds:0xc00257cc,0x0
c00191ec:	0f 85 8e 00 00 00    	jne    c0019280 <cleanerTaskFunction(void*)+0xa9>
c00191f2:	83 ec 0c             	sub    esp,0xc
c00191f5:	6a 02                	push   0x2
c00191f7:	e8 c4 fa ff ff       	call   c0018cc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00191fc:	83 c4 10             	add    esp,0x10
c00191ff:	c6 05 cc 57 02 c0 00 	mov    BYTE PTR ds:0xc00257cc,0x0
c0019206:	e8 90 f6 ff ff       	call   c001889b <lockStuff()>
c001920b:	e8 64 f6 ff ff       	call   c0018874 <lockScheduler()>
c0019210:	83 ec 0c             	sub    esp,0xc
c0019213:	68 f0 57 02 c0       	push   0xc00257f0
c0019218:	e8 bb 66 00 00       	call   c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001921d:	83 c4 10             	add    esp,0x10
c0019220:	84 c0                	test   al,al
c0019222:	75 40                	jne    c0019264 <cleanerTaskFunction(void*)+0x8d>
c0019224:	83 ec 0c             	sub    esp,0xc
c0019227:	68 f0 57 02 c0       	push   0xc00257f0
c001922c:	e8 9f 66 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019231:	c7 04 24 f0 57 02 c0 	mov    DWORD PTR [esp],0xc00257f0
c0019238:	89 c3                	mov    ebx,eax
c001923a:	e8 b5 66 00 00       	call   c001f8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001923f:	c7 04 24 cd 2a 02 c0 	mov    DWORD PTR [esp],0xc0022acd
c0019246:	e8 ee 5e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001924b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001924e:	e8 e0 fc ff ff       	call   c0018f33 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019253:	c7 04 24 e6 2a 02 c0 	mov    DWORD PTR [esp],0xc0022ae6
c001925a:	e8 da 5e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001925f:	83 c4 10             	add    esp,0x10
c0019262:	eb ac                	jmp    c0019210 <cleanerTaskFunction(void*)+0x39>
c0019264:	e8 0d f6 ff ff       	call   c0018876 <unlockScheduler()>
c0019269:	e8 bf f9 ff ff       	call   c0018c2d <unlockStuff()>
c001926e:	e8 01 f6 ff ff       	call   c0018874 <lockScheduler()>
c0019273:	80 3d cc 57 02 c0 00 	cmp    BYTE PTR ds:0xc00257cc,0x0
c001927a:	0f 84 72 ff ff ff    	je     c00191f2 <cleanerTaskFunction(void*)+0x1b>
c0019280:	e8 f1 f5 ff ff       	call   c0018876 <unlockScheduler()>
c0019285:	e9 75 ff ff ff       	jmp    c00191ff <cleanerTaskFunction(void*)+0x28>

c001928a <terminateTask(int)>:
c001928a:	83 ec 14             	sub    esp,0x14
c001928d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019292:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019295:	83 c0 0c             	add    eax,0xc
c0019298:	50                   	push   eax
c0019299:	68 24 2e 02 c0       	push   0xc0022e24
c001929e:	e8 96 5e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00192a3:	e8 f3 f5 ff ff       	call   c001889b <lockStuff()>
c00192a8:	e8 c7 f5 ff ff       	call   c0018874 <lockScheduler()>
c00192ad:	c7 04 24 f9 2a 02 c0 	mov    DWORD PTR [esp],0xc0022af9
c00192b4:	e8 80 5e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00192b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00192bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192c2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00192c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00192cd:	5a                   	pop    edx
c00192ce:	59                   	pop    ecx
c00192cf:	50                   	push   eax
c00192d0:	68 f0 57 02 c0       	push   0xc00257f0
c00192d5:	e8 c8 66 00 00       	call   c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00192da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192df:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00192e6:	c7 04 24 13 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b13
c00192ed:	e8 47 5e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c00192f2:	83 c4 10             	add    esp,0x10
c00192f5:	a1 c8 57 02 c0       	mov    eax,ds:0xc00257c8
c00192fa:	85 c0                	test   eax,eax
c00192fc:	74 5a                	je     c0019358 <terminateTask(int)+0xce>
c00192fe:	83 ec 0c             	sub    esp,0xc
c0019301:	68 2d 2b 02 c0       	push   0xc0022b2d
c0019306:	e8 2e 5e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001930b:	58                   	pop    eax
c001930c:	c6 05 cc 57 02 c0 01 	mov    BYTE PTR ds:0xc00257cc,0x1
c0019313:	ff 35 c8 57 02 c0    	push   DWORD PTR ds:0xc00257c8
c0019319:	e8 66 fb ff ff       	call   c0018e84 <unblockTask(ThreadControlBlock*)>
c001931e:	c7 04 24 47 2b 02 c0 	mov    DWORD PTR [esp],0xc0022b47
c0019325:	e8 0f 5e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	e8 44 f5 ff ff       	call   c0018876 <unlockScheduler()>
c0019332:	e8 f6 f8 ff ff       	call   c0018c2d <unlockStuff()>
c0019337:	83 ec 0c             	sub    esp,0xc
c001933a:	68 7f 2b 02 c0       	push   0xc0022b7f
c001933f:	e8 f5 5d ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0019344:	83 c4 10             	add    esp,0x10
c0019347:	e8 28 f5 ff ff       	call   c0018874 <lockScheduler()>
c001934c:	e8 57 f8 ff ff       	call   c0018ba8 <schedule()>
c0019351:	e8 20 f5 ff ff       	call   c0018876 <unlockScheduler()>
c0019356:	eb ef                	jmp    c0019347 <terminateTask(int)+0xbd>
c0019358:	83 ec 0c             	sub    esp,0xc
c001935b:	68 61 2b 02 c0       	push   0xc0022b61
c0019360:	e8 d4 5d ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	eb c3                	jmp    c001932d <terminateTask(int)+0xa3>

c001936a <Thr::terminateFromIRQ(int)>:
c001936a:	83 ec 18             	sub    esp,0x18
c001936d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019371:	e8 14 ff ff ff       	call   c001928a <terminateTask(int)>

c0019376 <Semaphore::release()>:
c0019376:	83 ec 0c             	sub    esp,0xc
c0019379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001937d:	e8 19 f5 ff ff       	call   c001889b <lockStuff()>
c0019382:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019385:	85 d2                	test   edx,edx
c0019387:	74 1a                	je     c00193a3 <Semaphore::release()+0x2d>
c0019389:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019392:	52                   	push   edx
c0019393:	e8 ec fa ff ff       	call   c0018e84 <unblockTask(ThreadControlBlock*)>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	83 c4 0c             	add    esp,0xc
c001939e:	e9 8a f8 ff ff       	jmp    c0018c2d <unlockStuff()>
c00193a3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c00193a6:	83 c4 0c             	add    esp,0xc
c00193a9:	e9 7f f8 ff ff       	jmp    c0018c2d <unlockStuff()>

c00193ae <__static_initialization_and_destruction_0(int, int)>:
c00193ae:	83 ec 0c             	sub    esp,0xc
c00193b1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00193b6:	0f 85 88 00 00 00    	jne    c0019444 <__static_initialization_and_destruction_0(int, int)+0x96>
c00193bc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00193c4:	75 7e                	jne    c0019444 <__static_initialization_and_destruction_0(int, int)+0x96>
c00193c6:	83 ec 0c             	sub    esp,0xc
c00193c9:	68 08 58 02 c0       	push   0xc0025808
c00193ce:	e8 b5 67 00 00       	call   c001fb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	83 ec 04             	sub    esp,0x4
c00193d9:	68 e8 37 02 c0       	push   0xc00237e8
c00193de:	68 08 58 02 c0       	push   0xc0025808
c00193e3:	68 48 fb 01 c0       	push   0xc001fb48
c00193e8:	e8 e8 5b ff ff       	call   c000efd5 <__cxa_atexit>
c00193ed:	83 c4 10             	add    esp,0x10
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	68 fc 57 02 c0       	push   0xc00257fc
c00193f8:	e8 8b 67 00 00       	call   c001fb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	83 ec 04             	sub    esp,0x4
c0019403:	68 e8 37 02 c0       	push   0xc00237e8
c0019408:	68 fc 57 02 c0       	push   0xc00257fc
c001940d:	68 48 fb 01 c0       	push   0xc001fb48
c0019412:	e8 be 5b ff ff       	call   c000efd5 <__cxa_atexit>
c0019417:	83 c4 10             	add    esp,0x10
c001941a:	83 ec 0c             	sub    esp,0xc
c001941d:	68 f0 57 02 c0       	push   0xc00257f0
c0019422:	e8 61 67 00 00       	call   c001fb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	83 ec 04             	sub    esp,0x4
c001942d:	68 e8 37 02 c0       	push   0xc00237e8
c0019432:	68 f0 57 02 c0       	push   0xc00257f0
c0019437:	68 48 fb 01 c0       	push   0xc001fb48
c001943c:	e8 94 5b ff ff       	call   c000efd5 <__cxa_atexit>
c0019441:	83 c4 10             	add    esp,0x10
c0019444:	90                   	nop
c0019445:	83 c4 0c             	add    esp,0xc
c0019448:	c3                   	ret    

c0019449 <_GLOBAL__sub_I_kernelProcess>:
c0019449:	83 ec 0c             	sub    esp,0xc
c001944c:	83 ec 08             	sub    esp,0x8
c001944f:	68 ff ff 00 00       	push   0xffff
c0019454:	6a 01                	push   0x1
c0019456:	e8 53 ff ff ff       	call   c00193ae <__static_initialization_and_destruction_0(int, int)>
c001945b:	83 c4 10             	add    esp,0x10
c001945e:	83 c4 0c             	add    esp,0xc
c0019461:	c3                   	ret    

c0019462 <Vm::vm8086EntryPoint(void*)>:
c0019462:	83 ec 0c             	sub    esp,0xc
c0019465:	e8 0c f4 ff ff       	call   c0018876 <unlockScheduler()>
c001946a:	fb                   	sti    
c001946b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019470:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019474:	52                   	push   edx
c0019475:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019479:	52                   	push   edx
c001947a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001947e:	52                   	push   edx
c001947f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019483:	50                   	push   eax
c0019484:	e8 0a 6e fe ff       	call   c0000293 <goToVM86>
c0019489:	83 c4 1c             	add    esp,0x1c
c001948c:	c3                   	ret    

c001948d <Vm::inbv(unsigned short)>:
c001948d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019491:	ec                   	in     al,dx
c0019492:	c3                   	ret    

c0019493 <Vm::outbv(unsigned short, unsigned char)>:
c0019493:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001949b:	ee                   	out    dx,al
c001949c:	c3                   	ret    

c001949d <Vm::realToLinear(unsigned short, unsigned short)>:
c001949d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00194a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00194a7:	c1 e0 04             	shl    eax,0x4
c00194aa:	01 d0                	add    eax,edx
c00194ac:	c3                   	ret    

c00194ad <Vm::getSegment(unsigned int)>:
c00194ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194b1:	c1 e8 10             	shr    eax,0x10
c00194b4:	c3                   	ret    

c00194b5 <Vm::getOffset(unsigned int)>:
c00194b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194b9:	c3                   	ret    

c00194ba <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00194ba:	55                   	push   ebp
c00194bb:	57                   	push   edi
c00194bc:	56                   	push   esi
c00194bd:	53                   	push   ebx
c00194be:	83 ec 2c             	sub    esp,0x2c
c00194c1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00194c5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00194c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00194cd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00194d1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00194d5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00194d9:	e8 96 f3 ff ff       	call   c0018874 <lockScheduler()>
c00194de:	68 80 00 00 00       	push   0x80
c00194e3:	6a 00                	push   0x0
c00194e5:	68 62 94 01 c0       	push   0xc0019462
c00194ea:	55                   	push   ebp
c00194eb:	e8 ae f4 ff ff       	call   c001899e <Process::createThread(void (*)(void*), void*, int)>
c00194f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194f4:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00194f8:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00194fc:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0019500:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0019504:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0019508:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001950f:	e8 36 5b ff ff       	call   c000f04a <operator new(unsigned long)>
c0019514:	83 c4 0c             	add    esp,0xc
c0019517:	89 c3                	mov    ebx,eax
c0019519:	55                   	push   ebp
c001951a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001951e:	50                   	push   eax
c001951f:	e8 44 61 ff ff       	call   c000f668 <File::File(char const*, Process*)>
c0019524:	83 c4 0c             	add    esp,0xc
c0019527:	8d 44 24 17          	lea    eax,[esp+0x17]
c001952b:	50                   	push   eax
c001952c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019530:	50                   	push   eax
c0019531:	53                   	push   ebx
c0019532:	e8 41 64 ff ff       	call   c000f978 <File::stat(unsigned long long*, bool*)>
c0019537:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	84 d2                	test   dl,dl
c0019540:	74 1c                	je     c001955e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019542:	83 ec 0c             	sub    esp,0xc
c0019545:	68 43 2e 02 c0       	push   0xc0022e43
c001954a:	e8 d1 c3 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001954f:	e8 22 f3 ff ff       	call   c0018876 <unlockScheduler()>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	31 d2                	xor    edx,edx
c0019559:	e9 81 00 00 00       	jmp    c00195df <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001955e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019562:	51                   	push   ecx
c0019563:	51                   	push   ecx
c0019564:	6a 01                	push   0x1
c0019566:	53                   	push   ebx
c0019567:	e8 60 61 ff ff       	call   c000f6cc <File::open(FileOpenMode)>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	85 c0                	test   eax,eax
c0019571:	74 1b                	je     c001958e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019573:	83 ec 0c             	sub    esp,0xc
c0019576:	68 5c 2e 02 c0       	push   0xc0022e5c
c001957b:	e8 a0 c3 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c0019580:	e8 f1 f2 ff ff       	call   c0018876 <unlockScheduler()>
c0019585:	83 c4 10             	add    esp,0x10
c0019588:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001958c:	eb 51                	jmp    c00195df <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001958e:	83 ec 0c             	sub    esp,0xc
c0019591:	0f b7 ff             	movzx  edi,di
c0019594:	6a 07                	push   0x7
c0019596:	0f b7 f6             	movzx  esi,si
c0019599:	68 00 01 00 00       	push   0x100
c001959e:	6a 00                	push   0x0
c00195a0:	6a 00                	push   0x0
c00195a2:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00195a8:	e8 79 55 ff ff       	call   c000eb26 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00195ad:	83 c4 18             	add    esp,0x18
c00195b0:	57                   	push   edi
c00195b1:	56                   	push   esi
c00195b2:	e8 e6 fe ff ff       	call   c001949d <Vm::realToLinear(unsigned short, unsigned short)>
c00195b7:	5a                   	pop    edx
c00195b8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00195ba:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00195be:	51                   	push   ecx
c00195bf:	50                   	push   eax
c00195c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195c8:	53                   	push   ebx
c00195c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00195cc:	83 c4 14             	add    esp,0x14
c00195cf:	53                   	push   ebx
c00195d0:	e8 55 61 ff ff       	call   c000f72a <File::close()>
c00195d5:	e8 9c f2 ff ff       	call   c0018876 <unlockScheduler()>
c00195da:	83 c4 10             	add    esp,0x10
c00195dd:	b2 01                	mov    dl,0x1
c00195df:	83 c4 2c             	add    esp,0x2c
c00195e2:	88 d0                	mov    al,dl
c00195e4:	5b                   	pop    ebx
c00195e5:	5e                   	pop    esi
c00195e6:	5f                   	pop    edi
c00195e7:	5d                   	pop    ebp
c00195e8:	c3                   	ret    

c00195e9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00195e9:	57                   	push   edi
c00195ea:	56                   	push   esi
c00195eb:	53                   	push   ebx
c00195ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00195f8:	83 e8 06             	sub    eax,0x6
c00195fb:	0f b7 c0             	movzx  eax,ax
c00195fe:	50                   	push   eax
c00195ff:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019604:	50                   	push   eax
c0019605:	e8 93 fe ff ff       	call   c001949d <Vm::realToLinear(unsigned short, unsigned short)>
c001960a:	5a                   	pop    edx
c001960b:	5e                   	pop    esi
c001960c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001960f:	8d 56 fa             	lea    edx,[esi-0x6]
c0019612:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019618:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001961b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001961e:	83 c2 02             	add    edx,0x2
c0019621:	66 89 10             	mov    WORD PTR [eax],dx
c0019624:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019627:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001962b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001962e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019632:	89 d6                	mov    esi,edx
c0019634:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001963a:	66 81 e6 ff fd       	and    si,0xfdff
c001963f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019643:	74 07                	je     c001964c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019645:	89 d6                	mov    esi,edx
c0019647:	66 81 ce 00 02       	or     si,0x200
c001964c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019650:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019655:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019659:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019661:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019664:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001966c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001966f:	5b                   	pop    ebx
c0019670:	5e                   	pop    esi
c0019671:	5f                   	pop    edi
c0019672:	c3                   	ret    

c0019673 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019673:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019678:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001967d:	c1 e0 04             	shl    eax,0x4
c0019680:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019683:	c3                   	ret    

c0019684 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019684:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019689:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001968e:	c1 e0 04             	shl    eax,0x4
c0019691:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019695:	c3                   	ret    

c0019696 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019696:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001969b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196a0:	c1 e0 04             	shl    eax,0x4
c00196a3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00196a6:	c3                   	ret    

c00196a7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00196a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196b1:	c1 e0 04             	shl    eax,0x4
c00196b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196b8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00196bb:	c3                   	ret    

c00196bc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00196bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196c1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196c6:	c1 e0 04             	shl    eax,0x4
c00196c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196cd:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00196d1:	c3                   	ret    

c00196d2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00196d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196dc:	c1 e0 04             	shl    eax,0x4
c00196df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196e3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00196e6:	c3                   	ret    

c00196e7 <Vm::faultHandler(regs*)>:
c00196e7:	55                   	push   ebp
c00196e8:	57                   	push   edi
c00196e9:	56                   	push   esi
c00196ea:	53                   	push   ebx
c00196eb:	83 ec 1c             	sub    esp,0x1c
c00196ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00196f2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196f5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00196f9:	0f b7 f0             	movzx  esi,ax
c00196fc:	52                   	push   edx
c00196fd:	0f b7 c0             	movzx  eax,ax
c0019700:	50                   	push   eax
c0019701:	e8 97 fd ff ff       	call   c001949d <Vm::realToLinear(unsigned short, unsigned short)>
c0019706:	5a                   	pop    edx
c0019707:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001970a:	59                   	pop    ecx
c001970b:	89 c7                	mov    edi,eax
c001970d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019710:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019714:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019719:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001971d:	0f b7 c5             	movzx  eax,bp
c0019720:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019724:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019728:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001972c:	e8 6c fd ff ff       	call   c001949d <Vm::realToLinear(unsigned short, unsigned short)>
c0019731:	5a                   	pop    edx
c0019732:	59                   	pop    ecx
c0019733:	b1 06                	mov    cl,0x6
c0019735:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001973a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001973f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019742:	80 fa 9d             	cmp    dl,0x9d
c0019745:	0f 84 1d 02 00 00    	je     c0019968 <Vm::faultHandler(regs*)+0x281>
c001974b:	0f 87 8e 00 00 00    	ja     c00197df <Vm::faultHandler(regs*)+0xf8>
c0019751:	80 fa 66             	cmp    dl,0x66
c0019754:	0f 84 89 01 00 00    	je     c00198e3 <Vm::faultHandler(regs*)+0x1fc>
c001975a:	77 44                	ja     c00197a0 <Vm::faultHandler(regs*)+0xb9>
c001975c:	80 fa 36             	cmp    dl,0x36
c001975f:	0f 84 74 01 00 00    	je     c00198d9 <Vm::faultHandler(regs*)+0x1f2>
c0019765:	77 1a                	ja     c0019781 <Vm::faultHandler(regs*)+0x9a>
c0019767:	80 fa 26             	cmp    dl,0x26
c001976a:	0f 84 4b 01 00 00    	je     c00198bb <Vm::faultHandler(regs*)+0x1d4>
c0019770:	80 fa 2e             	cmp    dl,0x2e
c0019773:	0f 85 4a 05 00 00    	jne    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c0019779:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001977c:	31 c9                	xor    ecx,ecx
c001977e:	47                   	inc    edi
c001977f:	eb be                	jmp    c001973f <Vm::faultHandler(regs*)+0x58>
c0019781:	80 fa 64             	cmp    dl,0x64
c0019784:	0f 84 3b 01 00 00    	je     c00198c5 <Vm::faultHandler(regs*)+0x1de>
c001978a:	0f 87 3f 01 00 00    	ja     c00198cf <Vm::faultHandler(regs*)+0x1e8>
c0019790:	80 fa 3e             	cmp    dl,0x3e
c0019793:	0f 85 2a 05 00 00    	jne    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c0019799:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001979c:	b1 01                	mov    cl,0x1
c001979e:	eb de                	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00197a0:	80 fa 6d             	cmp    dl,0x6d
c00197a3:	0f 84 bf 02 00 00    	je     c0019a68 <Vm::faultHandler(regs*)+0x381>
c00197a9:	77 17                	ja     c00197c2 <Vm::faultHandler(regs*)+0xdb>
c00197ab:	80 fa 67             	cmp    dl,0x67
c00197ae:	0f 84 3c 01 00 00    	je     c00198f0 <Vm::faultHandler(regs*)+0x209>
c00197b4:	80 fa 6c             	cmp    dl,0x6c
c00197b7:	0f 84 5d 02 00 00    	je     c0019a1a <Vm::faultHandler(regs*)+0x333>
c00197bd:	e9 01 05 00 00       	jmp    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c00197c2:	80 fa 6f             	cmp    dl,0x6f
c00197c5:	0f 84 8b 03 00 00    	je     c0019b56 <Vm::faultHandler(regs*)+0x46f>
c00197cb:	0f 82 0f 03 00 00    	jb     c0019ae0 <Vm::faultHandler(regs*)+0x3f9>
c00197d1:	80 fa 9c             	cmp    dl,0x9c
c00197d4:	0f 84 23 01 00 00    	je     c00198fd <Vm::faultHandler(regs*)+0x216>
c00197da:	e9 e4 04 00 00       	jmp    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c00197df:	80 fa ec             	cmp    dl,0xec
c00197e2:	0f 84 7f 04 00 00    	je     c0019c67 <Vm::faultHandler(regs*)+0x580>
c00197e8:	77 7b                	ja     c0019865 <Vm::faultHandler(regs*)+0x17e>
c00197ea:	80 fa e4             	cmp    dl,0xe4
c00197ed:	0f 84 fe 03 00 00    	je     c0019bf1 <Vm::faultHandler(regs*)+0x50a>
c00197f3:	77 53                	ja     c0019848 <Vm::faultHandler(regs*)+0x161>
c00197f5:	80 fa cd             	cmp    dl,0xcd
c00197f8:	0f 84 cd 01 00 00    	je     c00199cb <Vm::faultHandler(regs*)+0x2e4>
c00197fe:	80 fa cf             	cmp    dl,0xcf
c0019801:	0f 85 bc 04 00 00    	jne    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c0019807:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001980a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001980d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019811:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019814:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019818:	81 ca 00 02 02 00    	or     edx,0x20200
c001981e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019821:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019825:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001982b:	66 c1 e8 09          	shr    ax,0x9
c001982f:	83 e0 01             	and    eax,0x1
c0019832:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019835:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019838:	83 c0 06             	add    eax,0x6
c001983b:	25 ff ff 00 00       	and    eax,0xffff
c0019840:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019843:	e9 77 04 00 00       	jmp    c0019cbf <Vm::faultHandler(regs*)+0x5d8>
c0019848:	80 fa e6             	cmp    dl,0xe6
c001984b:	0f 84 ea 03 00 00    	je     c0019c3b <Vm::faultHandler(regs*)+0x554>
c0019851:	0f 82 b6 03 00 00    	jb     c0019c0d <Vm::faultHandler(regs*)+0x526>
c0019857:	80 fa e7             	cmp    dl,0xe7
c001985a:	0f 84 f2 03 00 00    	je     c0019c52 <Vm::faultHandler(regs*)+0x56b>
c0019860:	e9 5e 04 00 00       	jmp    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c0019865:	80 fa ef             	cmp    dl,0xef
c0019868:	0f 84 3c 04 00 00    	je     c0019caa <Vm::faultHandler(regs*)+0x5c3>
c001986e:	77 28                	ja     c0019898 <Vm::faultHandler(regs*)+0x1b1>
c0019870:	80 fa ed             	cmp    dl,0xed
c0019873:	0f 84 0a 04 00 00    	je     c0019c83 <Vm::faultHandler(regs*)+0x59c>
c0019879:	80 fa ee             	cmp    dl,0xee
c001987c:	0f 85 41 04 00 00    	jne    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c0019882:	50                   	push   eax
c0019883:	50                   	push   eax
c0019884:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019888:	50                   	push   eax
c0019889:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001988d:	50                   	push   eax
c001988e:	e8 00 fc ff ff       	call   c0019493 <Vm::outbv(unsigned short, unsigned char)>
c0019893:	e9 0a 04 00 00       	jmp    c0019ca2 <Vm::faultHandler(regs*)+0x5bb>
c0019898:	80 fa fa             	cmp    dl,0xfa
c001989b:	0f 84 5d 01 00 00    	je     c00199fe <Vm::faultHandler(regs*)+0x317>
c00198a1:	80 fa fb             	cmp    dl,0xfb
c00198a4:	0f 84 62 01 00 00    	je     c0019a0c <Vm::faultHandler(regs*)+0x325>
c00198aa:	80 fa f3             	cmp    dl,0xf3
c00198ad:	0f 85 10 04 00 00    	jne    c0019cc3 <Vm::faultHandler(regs*)+0x5dc>
c00198b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198b6:	e9 c3 fe ff ff       	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00198bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198be:	b1 02                	mov    cl,0x2
c00198c0:	e9 b9 fe ff ff       	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00198c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198c8:	b1 03                	mov    cl,0x3
c00198ca:	e9 af fe ff ff       	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00198cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198d2:	b1 04                	mov    cl,0x4
c00198d4:	e9 a5 fe ff ff       	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00198d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198dc:	b1 05                	mov    cl,0x5
c00198de:	e9 9b fe ff ff       	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00198e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198e6:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00198eb:	e9 8e fe ff ff       	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00198f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198f3:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00198f8:	e9 81 fe ff ff       	jmp    c001977e <Vm::faultHandler(regs*)+0x97>
c00198fd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019900:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019904:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019909:	74 30                	je     c001993b <Vm::faultHandler(regs*)+0x254>
c001990b:	83 e9 04             	sub    ecx,0x4
c001990e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019914:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001991a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001991d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019920:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019926:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001992a:	0f 84 8c 03 00 00    	je     c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019930:	80 ce 02             	or     dh,0x2
c0019933:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019936:	e9 81 03 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c001993b:	83 e9 02             	sub    ecx,0x2
c001993e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019944:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019947:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001994b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019951:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019955:	74 05                	je     c001995c <Vm::faultHandler(regs*)+0x275>
c0019957:	80 ce 02             	or     dh,0x2
c001995a:	eb 03                	jmp    c001995f <Vm::faultHandler(regs*)+0x278>
c001995c:	80 e6 fd             	and    dh,0xfd
c001995f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019963:	e9 54 03 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019968:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001996d:	74 2a                	je     c0019999 <Vm::faultHandler(regs*)+0x2b2>
c001996f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019971:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019977:	81 ca 00 02 02 00    	or     edx,0x20200
c001997d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019980:	8b 00                	mov    eax,DWORD PTR [eax]
c0019982:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019988:	c1 e8 09             	shr    eax,0x9
c001998b:	83 e0 01             	and    eax,0x1
c001998e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019991:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019994:	83 c0 04             	add    eax,0x4
c0019997:	eb 25                	jmp    c00199be <Vm::faultHandler(regs*)+0x2d7>
c0019999:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001999c:	81 ca 00 02 02 00    	or     edx,0x20200
c00199a2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00199a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00199a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00199ae:	66 c1 e8 09          	shr    ax,0x9
c00199b2:	83 e0 01             	and    eax,0x1
c00199b5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00199b8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00199bb:	83 c0 02             	add    eax,0x2
c00199be:	25 ff ff 00 00       	and    eax,0xffff
c00199c3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00199c6:	e9 f1 02 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c00199cb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00199cf:	3c ff                	cmp    al,0xff
c00199d1:	75 10                	jne    c00199e3 <Vm::faultHandler(regs*)+0x2fc>
c00199d3:	83 ec 0c             	sub    esp,0xc
c00199d6:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00199d9:	e8 8c f9 ff ff       	call   c001936a <Thr::terminateFromIRQ(int)>
c00199de:	e9 c2 02 00 00       	jmp    c0019ca5 <Vm::faultHandler(regs*)+0x5be>
c00199e3:	83 ec 0c             	sub    esp,0xc
c00199e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00199ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199ee:	57                   	push   edi
c00199ef:	50                   	push   eax
c00199f0:	53                   	push   ebx
c00199f1:	e8 f3 fb ff ff       	call   c00195e9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00199f6:	83 c4 20             	add    esp,0x20
c00199f9:	e9 c1 02 00 00       	jmp    c0019cbf <Vm::faultHandler(regs*)+0x5d8>
c00199fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a03:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019a07:	e9 b0 02 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019a0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a11:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019a15:	e9 a2 02 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019a1a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a1f:	74 0d                	je     c0019a2e <Vm::faultHandler(regs*)+0x347>
c0019a21:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019a28:	0f 87 e9 02 00 00    	ja     c0019d17 <Vm::faultHandler(regs*)+0x630>
c0019a2e:	83 ec 0c             	sub    esp,0xc
c0019a31:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019a34:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a38:	50                   	push   eax
c0019a39:	e8 4f fa ff ff       	call   c001948d <Vm::inbv(unsigned short)>
c0019a3e:	83 c4 0c             	add    esp,0xc
c0019a41:	0f b6 c0             	movzx  eax,al
c0019a44:	0f b7 c9             	movzx  ecx,cx
c0019a47:	50                   	push   eax
c0019a48:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019a4c:	50                   	push   eax
c0019a4d:	51                   	push   ecx
c0019a4e:	e8 54 fc ff ff       	call   c00196a7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019a53:	83 c4 10             	add    esp,0x10
c0019a56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a59:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a5d:	74 03                	je     c0019a62 <Vm::faultHandler(regs*)+0x37b>
c0019a5f:	48                   	dec    eax
c0019a60:	eb 01                	jmp    c0019a63 <Vm::faultHandler(regs*)+0x37c>
c0019a62:	40                   	inc    eax
c0019a63:	0f b7 c0             	movzx  eax,ax
c0019a66:	eb 70                	jmp    c0019ad8 <Vm::faultHandler(regs*)+0x3f1>
c0019a68:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a6b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019a6e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a73:	74 0c                	je     c0019a81 <Vm::faultHandler(regs*)+0x39a>
c0019a75:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019a7b:	0f 87 96 02 00 00    	ja     c0019d17 <Vm::faultHandler(regs*)+0x630>
c0019a81:	0f b7 c9             	movzx  ecx,cx
c0019a84:	0f b7 f6             	movzx  esi,si
c0019a87:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a8f:	74 20                	je     c0019ab1 <Vm::faultHandler(regs*)+0x3ca>
c0019a91:	ed                   	in     eax,dx
c0019a92:	55                   	push   ebp
c0019a93:	50                   	push   eax
c0019a94:	51                   	push   ecx
c0019a95:	56                   	push   esi
c0019a96:	e8 37 fc ff ff       	call   c00196d2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019a9b:	83 c4 10             	add    esp,0x10
c0019a9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019aa1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019aa5:	74 05                	je     c0019aac <Vm::faultHandler(regs*)+0x3c5>
c0019aa7:	83 e8 04             	sub    eax,0x4
c0019aaa:	eb 27                	jmp    c0019ad3 <Vm::faultHandler(regs*)+0x3ec>
c0019aac:	83 c0 04             	add    eax,0x4
c0019aaf:	eb 22                	jmp    c0019ad3 <Vm::faultHandler(regs*)+0x3ec>
c0019ab1:	66 ed                	in     ax,dx
c0019ab3:	0f b7 c0             	movzx  eax,ax
c0019ab6:	57                   	push   edi
c0019ab7:	50                   	push   eax
c0019ab8:	51                   	push   ecx
c0019ab9:	56                   	push   esi
c0019aba:	e8 fd fb ff ff       	call   c00196bc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019abf:	83 c4 10             	add    esp,0x10
c0019ac2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ac5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ac9:	74 05                	je     c0019ad0 <Vm::faultHandler(regs*)+0x3e9>
c0019acb:	83 e8 02             	sub    eax,0x2
c0019ace:	eb 03                	jmp    c0019ad3 <Vm::faultHandler(regs*)+0x3ec>
c0019ad0:	83 c0 02             	add    eax,0x2
c0019ad3:	25 ff ff 00 00       	and    eax,0xffff
c0019ad8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019adb:	e9 dc 01 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019ae0:	49                   	dec    ecx
c0019ae1:	80 f9 05             	cmp    cl,0x5
c0019ae4:	77 24                	ja     c0019b0a <Vm::faultHandler(regs*)+0x423>
c0019ae6:	0f b6 c9             	movzx  ecx,cl
c0019ae9:	ff 24 8d a4 2e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd15c]
c0019af0:	0f b7 f5             	movzx  esi,bp
c0019af3:	eb 15                	jmp    c0019b0a <Vm::faultHandler(regs*)+0x423>
c0019af5:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019af9:	eb 0f                	jmp    c0019b0a <Vm::faultHandler(regs*)+0x423>
c0019afb:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019aff:	eb 09                	jmp    c0019b0a <Vm::faultHandler(regs*)+0x423>
c0019b01:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019b05:	eb 03                	jmp    c0019b0a <Vm::faultHandler(regs*)+0x423>
c0019b07:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019b0a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b0d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b12:	74 0b                	je     c0019b1f <Vm::faultHandler(regs*)+0x438>
c0019b14:	3d ff ff 00 00       	cmp    eax,0xffff
c0019b19:	0f 87 f8 01 00 00    	ja     c0019d17 <Vm::faultHandler(regs*)+0x630>
c0019b1f:	0f b7 c0             	movzx  eax,ax
c0019b22:	52                   	push   edx
c0019b23:	52                   	push   edx
c0019b24:	50                   	push   eax
c0019b25:	56                   	push   esi
c0019b26:	e8 48 fb ff ff       	call   c0019673 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019b2b:	59                   	pop    ecx
c0019b2c:	0f b6 c0             	movzx  eax,al
c0019b2f:	5e                   	pop    esi
c0019b30:	50                   	push   eax
c0019b31:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b35:	50                   	push   eax
c0019b36:	e8 58 f9 ff ff       	call   c0019493 <Vm::outbv(unsigned short, unsigned char)>
c0019b3b:	83 c4 10             	add    esp,0x10
c0019b3e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b41:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b45:	74 03                	je     c0019b4a <Vm::faultHandler(regs*)+0x463>
c0019b47:	48                   	dec    eax
c0019b48:	eb 01                	jmp    c0019b4b <Vm::faultHandler(regs*)+0x464>
c0019b4a:	40                   	inc    eax
c0019b4b:	0f b7 c0             	movzx  eax,ax
c0019b4e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b51:	e9 66 01 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019b56:	49                   	dec    ecx
c0019b57:	80 f9 05             	cmp    cl,0x5
c0019b5a:	77 1f                	ja     c0019b7b <Vm::faultHandler(regs*)+0x494>
c0019b5c:	0f b6 c9             	movzx  ecx,cl
c0019b5f:	ff 24 8d bc 2e 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd144]
c0019b66:	89 ee                	mov    esi,ebp
c0019b68:	eb 11                	jmp    c0019b7b <Vm::faultHandler(regs*)+0x494>
c0019b6a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019b6d:	eb 0c                	jmp    c0019b7b <Vm::faultHandler(regs*)+0x494>
c0019b6f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b72:	eb 07                	jmp    c0019b7b <Vm::faultHandler(regs*)+0x494>
c0019b74:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019b77:	eb 02                	jmp    c0019b7b <Vm::faultHandler(regs*)+0x494>
c0019b79:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019b7b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019b7e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b83:	74 0c                	je     c0019b91 <Vm::faultHandler(regs*)+0x4aa>
c0019b85:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b8b:	0f 87 86 01 00 00    	ja     c0019d17 <Vm::faultHandler(regs*)+0x630>
c0019b91:	0f b7 d6             	movzx  edx,si
c0019b94:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019b97:	0f b7 c1             	movzx  eax,cx
c0019b9a:	81 e7 00 04 00 00    	and    edi,0x400
c0019ba0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019ba3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ba8:	74 1d                	je     c0019bc7 <Vm::faultHandler(regs*)+0x4e0>
c0019baa:	55                   	push   ebp
c0019bab:	55                   	push   ebp
c0019bac:	50                   	push   eax
c0019bad:	52                   	push   edx
c0019bae:	e8 e3 fa ff ff       	call   c0019696 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019bb3:	83 c4 10             	add    esp,0x10
c0019bb6:	89 f2                	mov    edx,esi
c0019bb8:	ef                   	out    dx,eax
c0019bb9:	85 ff                	test   edi,edi
c0019bbb:	74 05                	je     c0019bc2 <Vm::faultHandler(regs*)+0x4db>
c0019bbd:	83 e9 04             	sub    ecx,0x4
c0019bc0:	eb 21                	jmp    c0019be3 <Vm::faultHandler(regs*)+0x4fc>
c0019bc2:	83 c1 04             	add    ecx,0x4
c0019bc5:	eb 1c                	jmp    c0019be3 <Vm::faultHandler(regs*)+0x4fc>
c0019bc7:	55                   	push   ebp
c0019bc8:	55                   	push   ebp
c0019bc9:	50                   	push   eax
c0019bca:	52                   	push   edx
c0019bcb:	e8 b4 fa ff ff       	call   c0019684 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019bd0:	83 c4 10             	add    esp,0x10
c0019bd3:	89 f2                	mov    edx,esi
c0019bd5:	66 ef                	out    dx,ax
c0019bd7:	85 ff                	test   edi,edi
c0019bd9:	74 05                	je     c0019be0 <Vm::faultHandler(regs*)+0x4f9>
c0019bdb:	83 e9 02             	sub    ecx,0x2
c0019bde:	eb 03                	jmp    c0019be3 <Vm::faultHandler(regs*)+0x4fc>
c0019be0:	83 c1 02             	add    ecx,0x2
c0019be3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019be9:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019bec:	e9 cb 00 00 00       	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019bf1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019bf8:	83 ec 0c             	sub    esp,0xc
c0019bfb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bff:	50                   	push   eax
c0019c00:	e8 88 f8 ff ff       	call   c001948d <Vm::inbv(unsigned short)>
c0019c05:	0f b6 c0             	movzx  eax,al
c0019c08:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c0b:	eb 3f                	jmp    c0019c4c <Vm::faultHandler(regs*)+0x565>
c0019c0d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c12:	74 07                	je     c0019c1b <Vm::faultHandler(regs*)+0x534>
c0019c14:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019c18:	ed                   	in     eax,dx
c0019c19:	eb 14                	jmp    c0019c2f <Vm::faultHandler(regs*)+0x548>
c0019c1b:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019c1e:	66 31 c9             	xor    cx,cx
c0019c21:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019c24:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019c28:	66 ed                	in     ax,dx
c0019c2a:	0f b7 c0             	movzx  eax,ax
c0019c2d:	09 c8                	or     eax,ecx
c0019c2f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c32:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c36:	e9 84 00 00 00       	jmp    c0019cbf <Vm::faultHandler(regs*)+0x5d8>
c0019c3b:	52                   	push   edx
c0019c3c:	52                   	push   edx
c0019c3d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019c41:	50                   	push   eax
c0019c42:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019c46:	50                   	push   eax
c0019c47:	e8 47 f8 ff ff       	call   c0019493 <Vm::outbv(unsigned short, unsigned char)>
c0019c4c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c50:	eb 53                	jmp    c0019ca5 <Vm::faultHandler(regs*)+0x5be>
c0019c52:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c55:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019c59:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c5e:	74 03                	je     c0019c63 <Vm::faultHandler(regs*)+0x57c>
c0019c60:	ef                   	out    dx,eax
c0019c61:	eb cf                	jmp    c0019c32 <Vm::faultHandler(regs*)+0x54b>
c0019c63:	66 ef                	out    dx,ax
c0019c65:	eb cb                	jmp    c0019c32 <Vm::faultHandler(regs*)+0x54b>
c0019c67:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c6e:	83 ec 0c             	sub    esp,0xc
c0019c71:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c75:	50                   	push   eax
c0019c76:	e8 12 f8 ff ff       	call   c001948d <Vm::inbv(unsigned short)>
c0019c7b:	0f b6 c0             	movzx  eax,al
c0019c7e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c81:	eb 1f                	jmp    c0019ca2 <Vm::faultHandler(regs*)+0x5bb>
c0019c83:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c86:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c8b:	74 03                	je     c0019c90 <Vm::faultHandler(regs*)+0x5a9>
c0019c8d:	ed                   	in     eax,dx
c0019c8e:	eb 0d                	jmp    c0019c9d <Vm::faultHandler(regs*)+0x5b6>
c0019c90:	66 ed                	in     ax,dx
c0019c92:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019c95:	0f b7 c0             	movzx  eax,ax
c0019c98:	66 31 d2             	xor    dx,dx
c0019c9b:	09 d0                	or     eax,edx
c0019c9d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019ca0:	eb 1a                	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019ca2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ca5:	83 c4 10             	add    esp,0x10
c0019ca8:	eb 15                	jmp    c0019cbf <Vm::faultHandler(regs*)+0x5d8>
c0019caa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019cad:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019cb0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cb5:	74 03                	je     c0019cba <Vm::faultHandler(regs*)+0x5d3>
c0019cb7:	ef                   	out    dx,eax
c0019cb8:	eb 02                	jmp    c0019cbc <Vm::faultHandler(regs*)+0x5d5>
c0019cba:	66 ef                	out    dx,ax
c0019cbc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019cbf:	b0 01                	mov    al,0x1
c0019cc1:	eb 56                	jmp    c0019d19 <Vm::faultHandler(regs*)+0x632>
c0019cc3:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019cc7:	50                   	push   eax
c0019cc8:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ccc:	50                   	push   eax
c0019ccd:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019cd1:	50                   	push   eax
c0019cd2:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019cd6:	50                   	push   eax
c0019cd7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019cdb:	50                   	push   eax
c0019cdc:	52                   	push   edx
c0019cdd:	52                   	push   edx
c0019cde:	68 75 2e 02 c0       	push   0xc0022e75
c0019ce3:	e8 51 54 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c0019ce8:	83 c4 20             	add    esp,0x20
c0019ceb:	83 ec 0c             	sub    esp,0xc
c0019cee:	6a 60                	push   0x60
c0019cf0:	e8 98 f7 ff ff       	call   c001948d <Vm::inbv(unsigned short)>
c0019cf5:	83 c4 10             	add    esp,0x10
c0019cf8:	3c 1c                	cmp    al,0x1c
c0019cfa:	74 04                	je     c0019d00 <Vm::faultHandler(regs*)+0x619>
c0019cfc:	3c 5a                	cmp    al,0x5a
c0019cfe:	75 eb                	jne    c0019ceb <Vm::faultHandler(regs*)+0x604>
c0019d00:	3c 5a                	cmp    al,0x5a
c0019d02:	74 04                	je     c0019d08 <Vm::faultHandler(regs*)+0x621>
c0019d04:	3c 1c                	cmp    al,0x1c
c0019d06:	75 0f                	jne    c0019d17 <Vm::faultHandler(regs*)+0x630>
c0019d08:	83 ec 0c             	sub    esp,0xc
c0019d0b:	6a 60                	push   0x60
c0019d0d:	e8 7b f7 ff ff       	call   c001948d <Vm::inbv(unsigned short)>
c0019d12:	83 c4 10             	add    esp,0x10
c0019d15:	eb e9                	jmp    c0019d00 <Vm::faultHandler(regs*)+0x619>
c0019d17:	31 c0                	xor    eax,eax
c0019d19:	83 c4 1c             	add    esp,0x1c
c0019d1c:	5b                   	pop    ebx
c0019d1d:	5e                   	pop    esi
c0019d1e:	5f                   	pop    edi
c0019d1f:	5d                   	pop    ebp
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop

c0019d22 <FAT::getName()>:
c0019d22:	b8 d4 2e 02 c0       	mov    eax,0xc0022ed4
c0019d27:	c3                   	ret    

c0019d28 <FAT::tell(void*, unsigned long long*)>:
c0019d28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019d2d:	75 06                	jne    c0019d35 <FAT::tell(void*, unsigned long long*)+0xd>
c0019d2f:	b8 04 00 00 00       	mov    eax,0x4
c0019d34:	c3                   	ret    
c0019d35:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019d3a:	75 06                	jne    c0019d42 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019d3c:	b8 04 00 00 00       	mov    eax,0x4
c0019d41:	c3                   	ret    
c0019d42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d46:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019d49:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019d4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d50:	89 01                	mov    DWORD PTR [ecx],eax
c0019d52:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d55:	b8 00 00 00 00       	mov    eax,0x0
c0019d5a:	c3                   	ret    
c0019d5b:	90                   	nop

c0019d5c <FAT::stat(void*, unsigned long long*)>:
c0019d5c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019d61:	75 06                	jne    c0019d69 <FAT::stat(void*, unsigned long long*)+0xd>
c0019d63:	b8 04 00 00 00       	mov    eax,0x4
c0019d68:	c3                   	ret    
c0019d69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019d6e:	75 06                	jne    c0019d76 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019d70:	b8 04 00 00 00       	mov    eax,0x4
c0019d75:	c3                   	ret    
c0019d76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d7a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019d7d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d84:	89 01                	mov    DWORD PTR [ecx],eax
c0019d86:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019d89:	b8 00 00 00 00       	mov    eax,0x0
c0019d8e:	c3                   	ret    
c0019d8f:	90                   	nop

c0019d90 <FAT::~FAT()>:
c0019d90:	83 ec 0c             	sub    esp,0xc
c0019d93:	ba 58 2f 02 c0       	mov    edx,0xc0022f58
c0019d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d9c:	89 10                	mov    DWORD PTR [eax],edx
c0019d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019da2:	83 ec 0c             	sub    esp,0xc
c0019da5:	50                   	push   eax
c0019da6:	e8 b7 56 ff ff       	call   c000f462 <Filesystem::~Filesystem()>
c0019dab:	83 c4 10             	add    esp,0x10
c0019dae:	90                   	nop
c0019daf:	83 c4 0c             	add    esp,0xc
c0019db2:	c3                   	ret    
c0019db3:	90                   	nop

c0019db4 <FAT::~FAT()>:
c0019db4:	83 ec 0c             	sub    esp,0xc
c0019db7:	83 ec 0c             	sub    esp,0xc
c0019dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dbe:	e8 cd ff ff ff       	call   c0019d90 <FAT::~FAT()>
c0019dc3:	83 c4 10             	add    esp,0x10
c0019dc6:	83 ec 08             	sub    esp,0x8
c0019dc9:	6a 08                	push   0x8
c0019dcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dcf:	e8 85 52 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c0019dd4:	83 c4 10             	add    esp,0x10
c0019dd7:	83 c4 0c             	add    esp,0xc
c0019dda:	c3                   	ret    
c0019ddb:	90                   	nop

c0019ddc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019ddc:	83 ec 1c             	sub    esp,0x1c
c0019ddf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019de6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019deb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019def:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c0019df6:	83 f8 ff             	cmp    eax,0xffffffff
c0019df9:	75 34                	jne    c0019e2f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019dfb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019dff:	88 c2                	mov    dl,al
c0019e01:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c0019e06:	01 d0                	add    eax,edx
c0019e08:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019e0c:	8b 15 40 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025840
c0019e12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e16:	89 14 85 60 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7a0],edx
c0019e1d:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c0019e22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019e26:	89 14 85 e0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda720],edx
c0019e2d:	eb 17                	jmp    c0019e46 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019e2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019e33:	88 c2                	mov    dl,al
c0019e35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e39:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c0019e40:	01 d0                	add    eax,edx
c0019e42:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019e46:	83 ec 04             	sub    esp,0x4
c0019e49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e51:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019e55:	50                   	push   eax
c0019e56:	e8 e8 cc fe ff       	call   c0006b43 <f_getlabel>
c0019e5b:	83 c4 10             	add    esp,0x10
c0019e5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e62:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e67:	75 07                	jne    c0019e70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019e69:	b8 00 00 00 00       	mov    eax,0x0
c0019e6e:	eb 05                	jmp    c0019e75 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019e70:	b8 01 00 00 00       	mov    eax,0x1
c0019e75:	83 c4 1c             	add    esp,0x1c
c0019e78:	c3                   	ret    
c0019e79:	90                   	nop

c0019e7a <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019e7a:	57                   	push   edi
c0019e7b:	83 ec 58             	sub    esp,0x58
c0019e7e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019e86:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e8a:	b9 0f 00 00 00       	mov    ecx,0xf
c0019e8f:	b8 00 00 00 00       	mov    eax,0x0
c0019e94:	fc                   	cld    
c0019e95:	89 d7                	mov    edi,edx
c0019e97:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019e99:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019e9d:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c0019ea4:	83 f8 ff             	cmp    eax,0xffffffff
c0019ea7:	75 34                	jne    c0019edd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019ea9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ead:	88 c2                	mov    dl,al
c0019eaf:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c0019eb4:	01 d0                	add    eax,edx
c0019eb6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019eba:	8b 15 40 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025840
c0019ec0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ec4:	89 14 85 60 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7a0],edx
c0019ecb:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c0019ed0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019ed4:	89 14 85 e0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda720],edx
c0019edb:	eb 17                	jmp    c0019ef4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019edd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019ee1:	88 c2                	mov    dl,al
c0019ee3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019ee7:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c0019eee:	01 d0                	add    eax,edx
c0019ef0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ef4:	83 ec 08             	sub    esp,0x8
c0019ef7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019efb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019eff:	50                   	push   eax
c0019f00:	e8 37 69 fe ff       	call   c000083c <strcat>
c0019f05:	83 c4 10             	add    esp,0x10
c0019f08:	83 ec 0c             	sub    esp,0xc
c0019f0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f0f:	50                   	push   eax
c0019f10:	e8 1c ce fe ff       	call   c0006d31 <f_setlabel>
c0019f15:	83 c4 10             	add    esp,0x10
c0019f18:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019f1c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019f21:	75 07                	jne    c0019f2a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019f23:	b8 00 00 00 00       	mov    eax,0x0
c0019f28:	eb 05                	jmp    c0019f2f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019f2a:	b8 01 00 00 00       	mov    eax,0x1
c0019f2f:	83 c4 58             	add    esp,0x58
c0019f32:	5f                   	pop    edi
c0019f33:	c3                   	ret    

c0019f34 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019f34:	83 ec 2c             	sub    esp,0x2c
c0019f37:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019f3f:	83 ec 08             	sub    esp,0x8
c0019f42:	68 f8 2e 02 c0       	push   0xc0022ef8
c0019f47:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f4b:	e8 86 68 fe ff       	call   c00007d6 <strcmp>
c0019f50:	83 c4 10             	add    esp,0x10
c0019f53:	85 c0                	test   eax,eax
c0019f55:	0f 94 c0             	sete   al
c0019f58:	84 c0                	test   al,al
c0019f5a:	74 0d                	je     c0019f69 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019f5c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f64:	e9 a6 00 00 00       	jmp    c001a00f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f69:	83 ec 08             	sub    esp,0x8
c0019f6c:	68 ea 2e 02 c0       	push   0xc0022eea
c0019f71:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f75:	e8 5c 68 fe ff       	call   c00007d6 <strcmp>
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	85 c0                	test   eax,eax
c0019f7f:	0f 94 c0             	sete   al
c0019f82:	84 c0                	test   al,al
c0019f84:	74 0a                	je     c0019f90 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019f86:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019f8e:	eb 7f                	jmp    c001a00f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019f90:	83 ec 08             	sub    esp,0x8
c0019f93:	68 f0 2e 02 c0       	push   0xc0022ef0
c0019f98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019f9c:	e8 35 68 fe ff       	call   c00007d6 <strcmp>
c0019fa1:	83 c4 10             	add    esp,0x10
c0019fa4:	85 c0                	test   eax,eax
c0019fa6:	0f 94 c0             	sete   al
c0019fa9:	84 c0                	test   al,al
c0019fab:	74 0a                	je     c0019fb7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019fad:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019fb5:	eb 58                	jmp    c001a00f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019fb7:	83 ec 08             	sub    esp,0x8
c0019fba:	68 4c 02 02 c0       	push   0xc002024c
c0019fbf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fc3:	e8 0e 68 fe ff       	call   c00007d6 <strcmp>
c0019fc8:	83 c4 10             	add    esp,0x10
c0019fcb:	85 c0                	test   eax,eax
c0019fcd:	0f 94 c0             	sete   al
c0019fd0:	84 c0                	test   al,al
c0019fd2:	74 0a                	je     c0019fde <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019fd4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019fdc:	eb 31                	jmp    c001a00f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019fde:	83 ec 08             	sub    esp,0x8
c0019fe1:	68 f6 2e 02 c0       	push   0xc0022ef6
c0019fe6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019fea:	e8 e7 67 fe ff       	call   c00007d6 <strcmp>
c0019fef:	83 c4 10             	add    esp,0x10
c0019ff2:	85 c0                	test   eax,eax
c0019ff4:	0f 94 c0             	sete   al
c0019ff7:	84 c0                	test   al,al
c0019ff9:	74 0a                	je     c001a005 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019ffb:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a003:	eb 0a                	jmp    c001a00f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a005:	b8 08 00 00 00       	mov    eax,0x8
c001a00a:	e9 04 01 00 00       	jmp    c001a113 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a00f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a016:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a01b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a01f:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c001a026:	83 f8 ff             	cmp    eax,0xffffffff
c001a029:	75 34                	jne    c001a05f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a02b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a02f:	88 c2                	mov    dl,al
c001a031:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c001a036:	01 d0                	add    eax,edx
c001a038:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a03c:	8b 15 40 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025840
c001a042:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a046:	89 14 85 60 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7a0],edx
c001a04d:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c001a052:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a056:	89 14 85 e0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda720],edx
c001a05d:	eb 17                	jmp    c001a076 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a05f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a063:	88 c2                	mov    dl,al
c001a065:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a069:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c001a070:	01 d0                	add    eax,edx
c001a072:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a076:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a07a:	88 04 24             	mov    BYTE PTR [esp],al
c001a07d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a081:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a085:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a08d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a092:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a09a:	83 ec 0c             	sub    esp,0xc
c001a09d:	68 00 20 00 00       	push   0x2000
c001a0a2:	e8 a1 1f ff ff       	call   c000c048 <malloc>
c001a0a7:	83 c4 10             	add    esp,0x10
c001a0aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0ae:	68 00 20 00 00       	push   0x2000
c001a0b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0bb:	50                   	push   eax
c001a0bc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a0c0:	50                   	push   eax
c001a0c1:	e8 b6 d0 fe ff       	call   c000717c <f_mkfs>
c001a0c6:	83 c4 10             	add    esp,0x10
c001a0c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a0cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0d2:	75 07                	jne    c001a0db <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a0d4:	b8 00 00 00 00       	mov    eax,0x0
c001a0d9:	eb 38                	jmp    c001a113 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0db:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a0e0:	75 17                	jne    c001a0f9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	68 28 2f 02 c0       	push   0xc0022f28
c001a0ea:	e8 4a 50 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	b8 09 00 00 00       	mov    eax,0x9
c001a0f7:	eb 1a                	jmp    c001a113 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a0f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0fd:	83 ec 08             	sub    esp,0x8
c001a100:	50                   	push   eax
c001a101:	68 fc 2e 02 c0       	push   0xc0022efc
c001a106:	e8 2e 50 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	b8 01 00 00 00       	mov    eax,0x1
c001a113:	83 c4 2c             	add    esp,0x2c
c001a116:	c3                   	ret    
c001a117:	90                   	nop

c001a118 <FAT::tryMount(LogicalDisk*, int)>:
c001a118:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a11e:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c001a123:	83 f8 14             	cmp    eax,0x14
c001a126:	75 17                	jne    c001a13f <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	68 0e 2f 02 c0       	push   0xc0022f0e
c001a130:	e8 eb b7 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001a135:	83 c4 10             	add    esp,0x10
c001a138:	b0 00                	mov    al,0x0
c001a13a:	e9 d7 01 00 00       	jmp    c001a316 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a13f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a146:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a14c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a152:	3d 00 02 00 00       	cmp    eax,0x200
c001a157:	74 07                	je     c001a160 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a159:	b0 00                	mov    al,0x0
c001a15b:	e9 b6 01 00 00       	jmp    c001a316 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a160:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a168:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a16f:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c001a176:	83 f8 ff             	cmp    eax,0xffffffff
c001a179:	74 07                	je     c001a182 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a17b:	b0 01                	mov    al,0x1
c001a17d:	e9 94 01 00 00       	jmp    c001a316 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a182:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a18c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a194:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a19b:	88 c2                	mov    dl,al
c001a19d:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c001a1a2:	01 d0                	add    eax,edx
c001a1a4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a1ab:	8b 15 40 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025840
c001a1b1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a1b8:	89 14 85 60 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda7a0],edx
c001a1bf:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c001a1c4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a1cb:	89 14 85 e0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda720],edx
c001a1d2:	83 ec 0c             	sub    esp,0xc
c001a1d5:	68 54 02 00 00       	push   0x254
c001a1da:	e8 69 1e ff ff       	call   c000c048 <malloc>
c001a1df:	83 c4 10             	add    esp,0x10
c001a1e2:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a1e9:	83 ec 04             	sub    esp,0x4
c001a1ec:	6a 00                	push   0x0
c001a1ee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a1f5:	50                   	push   eax
c001a1f6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a1fd:	e8 38 ab fe ff       	call   c0004d3a <f_mount>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a20c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a214:	74 19                	je     c001a22f <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a216:	83 ec 0c             	sub    esp,0xc
c001a219:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a220:	e8 43 1e ff ff       	call   c000c068 <rfree>
c001a225:	83 c4 10             	add    esp,0x10
c001a228:	b0 00                	mov    al,0x0
c001a22a:	e9 e7 00 00 00       	jmp    c001a316 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a22f:	83 ec 04             	sub    esp,0x4
c001a232:	68 00 01 00 00       	push   0x100
c001a237:	6a 00                	push   0x0
c001a239:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a240:	50                   	push   eax
c001a241:	e8 a0 64 fe ff       	call   c00006e6 <memset>
c001a246:	83 c4 10             	add    esp,0x10
c001a249:	83 ec 08             	sub    esp,0x8
c001a24c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a253:	50                   	push   eax
c001a254:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a25b:	50                   	push   eax
c001a25c:	e8 db 65 fe ff       	call   c000083c <strcat>
c001a261:	83 c4 10             	add    esp,0x10
c001a264:	83 ec 08             	sub    esp,0x8
c001a267:	68 1c 2f 02 c0       	push   0xc0022f1c
c001a26c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a273:	50                   	push   eax
c001a274:	e8 c3 65 fe ff       	call   c000083c <strcat>
c001a279:	83 c4 10             	add    esp,0x10
c001a27c:	83 ec 04             	sub    esp,0x4
c001a27f:	6a 01                	push   0x1
c001a281:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a288:	50                   	push   eax
c001a289:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a28d:	50                   	push   eax
c001a28e:	e8 09 ab fe ff       	call   c0004d9c <f_open>
c001a293:	83 c4 10             	add    esp,0x10
c001a296:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a29d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a2a4:	85 c0                	test   eax,eax
c001a2a6:	74 0a                	je     c001a2b2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a2a8:	78 2d                	js     c001a2d7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a2aa:	83 e8 04             	sub    eax,0x4
c001a2ad:	83 f8 01             	cmp    eax,0x1
c001a2b0:	77 25                	ja     c001a2d7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a2b2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a2ba:	83 ec 0c             	sub    esp,0xc
c001a2bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2c1:	50                   	push   eax
c001a2c2:	e8 27 b6 fe ff       	call   c00058ee <f_close>
c001a2c7:	83 c4 10             	add    esp,0x10
c001a2ca:	90                   	nop
c001a2cb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a2d3:	74 3a                	je     c001a30f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a2d5:	eb 2d                	jmp    c001a304 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a2d7:	83 ec 0c             	sub    esp,0xc
c001a2da:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a2e1:	e8 82 1d ff ff       	call   c000c068 <rfree>
c001a2e6:	83 c4 10             	add    esp,0x10
c001a2e9:	83 ec 04             	sub    esp,0x4
c001a2ec:	6a 00                	push   0x0
c001a2ee:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a2f5:	50                   	push   eax
c001a2f6:	6a 00                	push   0x0
c001a2f8:	e8 3d aa fe ff       	call   c0004d3a <f_mount>
c001a2fd:	83 c4 10             	add    esp,0x10
c001a300:	b0 00                	mov    al,0x0
c001a302:	eb 12                	jmp    c001a316 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a304:	a1 40 58 02 c0       	mov    eax,ds:0xc0025840
c001a309:	40                   	inc    eax
c001a30a:	a3 40 58 02 c0       	mov    ds:0xc0025840,eax
c001a30f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a316:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a31c:	c3                   	ret    
c001a31d:	90                   	nop

c001a31e <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a31e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a324:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a32c:	74 0a                	je     c001a338 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a32e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a336:	75 0a                	jne    c001a342 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a338:	b8 04 00 00 00       	mov    eax,0x4
c001a33d:	e9 db 00 00 00       	jmp    c001a41d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a342:	83 ec 08             	sub    esp,0x8
c001a345:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a34c:	50                   	push   eax
c001a34d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a354:	e8 9f bb fe ff       	call   c0005ef8 <f_readdir>
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a363:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a369:	83 ec 0c             	sub    esp,0xc
c001a36c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a373:	83 c0 1a             	add    eax,0x1a
c001a376:	50                   	push   eax
c001a377:	e8 87 63 fe ff       	call   c0000703 <strlen>
c001a37c:	83 c4 10             	add    esp,0x10
c001a37f:	ba 00 00 00 00       	mov    edx,0x0
c001a384:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a388:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a38c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a393:	0f b6 c0             	movzx  eax,al
c001a396:	83 e0 10             	and    eax,0x10
c001a399:	74 07                	je     c001a3a2 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001a39b:	b8 02 00 00 00       	mov    eax,0x2
c001a3a0:	eb 05                	jmp    c001a3a7 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001a3a2:	b8 01 00 00 00       	mov    eax,0x1
c001a3a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3ab:	83 ec 08             	sub    esp,0x8
c001a3ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a3b5:	83 c0 1a             	add    eax,0x1a
c001a3b8:	50                   	push   eax
c001a3b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3bd:	83 c0 10             	add    eax,0x10
c001a3c0:	50                   	push   eax
c001a3c1:	e8 bf 63 fe ff       	call   c0000785 <strcpy>
c001a3c6:	83 c4 10             	add    esp,0x10
c001a3c9:	83 ec 04             	sub    esp,0x4
c001a3cc:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a3d3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a3d7:	50                   	push   eax
c001a3d8:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a3df:	e8 cc 62 fe ff       	call   c00006b0 <memcpy>
c001a3e4:	83 c4 10             	add    esp,0x10
c001a3e7:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a3ee:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a3f4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a3fb:	84 c0                	test   al,al
c001a3fd:	75 07                	jne    c001a406 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001a3ff:	b8 07 00 00 00       	mov    eax,0x7
c001a404:	eb 17                	jmp    c001a41d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a406:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a40d:	85 c0                	test   eax,eax
c001a40f:	75 07                	jne    c001a418 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001a411:	b8 00 00 00 00       	mov    eax,0x0
c001a416:	eb 05                	jmp    c001a41d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001a418:	b8 01 00 00 00       	mov    eax,0x1
c001a41d:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a423:	c3                   	ret    

c001a424 <FAT::read(void*, unsigned long, void*, int*)>:
c001a424:	83 ec 1c             	sub    esp,0x1c
c001a427:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a42c:	74 07                	je     c001a435 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a42e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a433:	75 07                	jne    c001a43c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a435:	b8 04 00 00 00       	mov    eax,0x4
c001a43a:	eb 3d                	jmp    c001a479 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a43c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a440:	50                   	push   eax
c001a441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a445:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a449:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a44d:	e8 86 ad fe ff       	call   c00051d8 <f_read>
c001a452:	83 c4 10             	add    esp,0x10
c001a455:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a45d:	89 c2                	mov    edx,eax
c001a45f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a463:	89 10                	mov    DWORD PTR [eax],edx
c001a465:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a469:	85 c0                	test   eax,eax
c001a46b:	75 07                	jne    c001a474 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a46d:	b8 00 00 00 00       	mov    eax,0x0
c001a472:	eb 05                	jmp    c001a479 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a474:	b8 01 00 00 00       	mov    eax,0x1
c001a479:	83 c4 1c             	add    esp,0x1c
c001a47c:	c3                   	ret    
c001a47d:	90                   	nop

c001a47e <FAT::write(void*, unsigned long, void*, int*)>:
c001a47e:	83 ec 1c             	sub    esp,0x1c
c001a481:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a486:	74 07                	je     c001a48f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a488:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a48d:	75 07                	jne    c001a496 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a48f:	b8 04 00 00 00       	mov    eax,0x4
c001a494:	eb 3d                	jmp    c001a4d3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a496:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a49a:	50                   	push   eax
c001a49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a49f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a4a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4a7:	e8 ac af fe ff       	call   c0005458 <f_write>
c001a4ac:	83 c4 10             	add    esp,0x10
c001a4af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4b7:	89 c2                	mov    edx,eax
c001a4b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4bd:	89 10                	mov    DWORD PTR [eax],edx
c001a4bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4c3:	85 c0                	test   eax,eax
c001a4c5:	75 07                	jne    c001a4ce <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a4c7:	b8 00 00 00 00       	mov    eax,0x0
c001a4cc:	eb 05                	jmp    c001a4d3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a4ce:	b8 01 00 00 00       	mov    eax,0x1
c001a4d3:	83 c4 1c             	add    esp,0x1c
c001a4d6:	c3                   	ret    
c001a4d7:	90                   	nop

c001a4d8 <FAT::close(void*)>:
c001a4d8:	83 ec 1c             	sub    esp,0x1c
c001a4db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a4e0:	75 07                	jne    c001a4e9 <FAT::close(void*)+0x11>
c001a4e2:	b8 04 00 00 00       	mov    eax,0x4
c001a4e7:	eb 36                	jmp    c001a51f <FAT::close(void*)+0x47>
c001a4e9:	83 ec 0c             	sub    esp,0xc
c001a4ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4f0:	e8 f9 b3 fe ff       	call   c00058ee <f_close>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a503:	e8 50 1b ff ff       	call   c000c058 <free>
c001a508:	83 c4 10             	add    esp,0x10
c001a50b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a50f:	85 c0                	test   eax,eax
c001a511:	75 07                	jne    c001a51a <FAT::close(void*)+0x42>
c001a513:	b8 00 00 00 00       	mov    eax,0x0
c001a518:	eb 05                	jmp    c001a51f <FAT::close(void*)+0x47>
c001a51a:	b8 01 00 00 00       	mov    eax,0x1
c001a51f:	83 c4 1c             	add    esp,0x1c
c001a522:	c3                   	ret    
c001a523:	90                   	nop

c001a524 <FAT::closeDir(void*)>:
c001a524:	83 ec 1c             	sub    esp,0x1c
c001a527:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a52c:	75 07                	jne    c001a535 <FAT::closeDir(void*)+0x11>
c001a52e:	b8 04 00 00 00       	mov    eax,0x4
c001a533:	eb 36                	jmp    c001a56b <FAT::closeDir(void*)+0x47>
c001a535:	83 ec 0c             	sub    esp,0xc
c001a538:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a53c:	e8 95 b9 fe ff       	call   c0005ed6 <f_closedir>
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a548:	83 ec 0c             	sub    esp,0xc
c001a54b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a54f:	e8 04 1b ff ff       	call   c000c058 <free>
c001a554:	83 c4 10             	add    esp,0x10
c001a557:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a55b:	85 c0                	test   eax,eax
c001a55d:	75 07                	jne    c001a566 <FAT::closeDir(void*)+0x42>
c001a55f:	b8 00 00 00 00       	mov    eax,0x0
c001a564:	eb 05                	jmp    c001a56b <FAT::closeDir(void*)+0x47>
c001a566:	b8 01 00 00 00       	mov    eax,0x1
c001a56b:	83 c4 1c             	add    esp,0x1c
c001a56e:	c3                   	ret    
c001a56f:	90                   	nop

c001a570 <FAT::seek(void*, unsigned long long)>:
c001a570:	83 ec 2c             	sub    esp,0x2c
c001a573:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a57b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a57f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a583:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a588:	75 07                	jne    c001a591 <FAT::seek(void*, unsigned long long)+0x21>
c001a58a:	b8 04 00 00 00       	mov    eax,0x4
c001a58f:	eb 2f                	jmp    c001a5c0 <FAT::seek(void*, unsigned long long)+0x50>
c001a591:	83 ec 04             	sub    esp,0x4
c001a594:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a598:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a59c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a5a0:	e8 78 b3 fe ff       	call   c000591d <f_lseek>
c001a5a5:	83 c4 10             	add    esp,0x10
c001a5a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5b0:	85 c0                	test   eax,eax
c001a5b2:	75 07                	jne    c001a5bb <FAT::seek(void*, unsigned long long)+0x4b>
c001a5b4:	b8 00 00 00 00       	mov    eax,0x0
c001a5b9:	eb 05                	jmp    c001a5c0 <FAT::seek(void*, unsigned long long)+0x50>
c001a5bb:	b8 01 00 00 00       	mov    eax,0x1
c001a5c0:	83 c4 2c             	add    esp,0x2c
c001a5c3:	c3                   	ret    

c001a5c4 <fatWrapperReadDisk>:
c001a5c4:	83 ec 1c             	sub    esp,0x1c
c001a5c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5e3:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c001a5ea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a5ee:	83 ec 0c             	sub    esp,0xc
c001a5f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5f5:	52                   	push   edx
c001a5f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5fe:	50                   	push   eax
c001a5ff:	e8 90 81 ff ff       	call   c0012794 <LogicalDisk::read(unsigned long long, int, void*)>
c001a604:	83 c4 20             	add    esp,0x20
c001a607:	83 c4 1c             	add    esp,0x1c
c001a60a:	c3                   	ret    

c001a60b <fatWrapperWriteDisk>:
c001a60b:	83 ec 1c             	sub    esp,0x1c
c001a60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a612:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a616:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a61a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a61d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a621:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a625:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a62a:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c001a631:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a635:	83 ec 0c             	sub    esp,0xc
c001a638:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a63c:	52                   	push   edx
c001a63d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a641:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a645:	50                   	push   eax
c001a646:	e8 b5 81 ff ff       	call   c0012800 <LogicalDisk::write(unsigned long long, int, void*)>
c001a64b:	83 c4 20             	add    esp,0x20
c001a64e:	83 c4 1c             	add    esp,0x1c
c001a651:	c3                   	ret    

c001a652 <fatWrapperIoctl>:
c001a652:	53                   	push   ebx
c001a653:	83 ec 28             	sub    esp,0x28
c001a656:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a65a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a65e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a662:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a666:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a66b:	75 31                	jne    c001a69e <fatWrapperIoctl+0x4c>
c001a66d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a671:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a675:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a67a:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c001a681:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a687:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a68d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a691:	66 89 02             	mov    WORD PTR [edx],ax
c001a694:	b8 00 00 00 00       	mov    eax,0x0
c001a699:	e9 b2 00 00 00       	jmp    c001a750 <fatWrapperIoctl+0xfe>
c001a69e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a6a3:	75 6a                	jne    c001a70f <fatWrapperIoctl+0xbd>
c001a6a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6ad:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a6b2:	8b 04 85 c0 49 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb640]
c001a6b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a6bf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a6c5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a6cb:	89 c8                	mov    eax,ecx
c001a6cd:	89 da                	mov    edx,ebx
c001a6cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a6d3:	c1 e0 0a             	shl    eax,0xa
c001a6d6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a6db:	8b 0c 8d c0 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb640]
c001a6e2:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a6e8:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a6ee:	89 cb                	mov    ebx,ecx
c001a6f0:	c1 fb 1f             	sar    ebx,0x1f
c001a6f3:	53                   	push   ebx
c001a6f4:	51                   	push   ecx
c001a6f5:	52                   	push   edx
c001a6f6:	50                   	push   eax
c001a6f7:	e8 00 4b 00 00       	call   c001f1fc <__udivdi3>
c001a6fc:	83 c4 10             	add    esp,0x10
c001a6ff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a703:	89 01                	mov    DWORD PTR [ecx],eax
c001a705:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a708:	b8 00 00 00 00       	mov    eax,0x0
c001a70d:	eb 41                	jmp    c001a750 <fatWrapperIoctl+0xfe>
c001a70f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a714:	75 07                	jne    c001a71d <fatWrapperIoctl+0xcb>
c001a716:	b8 00 00 00 00       	mov    eax,0x0
c001a71b:	eb 33                	jmp    c001a750 <fatWrapperIoctl+0xfe>
c001a71d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a722:	75 19                	jne    c001a73d <fatWrapperIoctl+0xeb>
c001a724:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a728:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a72c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a730:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a736:	b8 00 00 00 00       	mov    eax,0x0
c001a73b:	eb 13                	jmp    c001a750 <fatWrapperIoctl+0xfe>
c001a73d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a742:	75 07                	jne    c001a74b <fatWrapperIoctl+0xf9>
c001a744:	b8 00 00 00 00       	mov    eax,0x0
c001a749:	eb 05                	jmp    c001a750 <fatWrapperIoctl+0xfe>
c001a74b:	b8 04 00 00 00       	mov    eax,0x4
c001a750:	83 c4 28             	add    esp,0x28
c001a753:	5b                   	pop    ebx
c001a754:	c3                   	ret    
c001a755:	90                   	nop

c001a756 <FAT::FAT()>:
c001a756:	83 ec 1c             	sub    esp,0x1c
c001a759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a75d:	83 ec 0c             	sub    esp,0xc
c001a760:	50                   	push   eax
c001a761:	e8 d8 4c ff ff       	call   c000f43e <Filesystem::Filesystem()>
c001a766:	83 c4 10             	add    esp,0x10
c001a769:	ba 58 2f 02 c0       	mov    edx,0xc0022f58
c001a76e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a772:	89 10                	mov    DWORD PTR [eax],edx
c001a774:	c7 05 40 58 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025840,0x0
c001a77e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a786:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a78b:	7f 15                	jg     c001a7a2 <FAT::FAT()+0x4c>
c001a78d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a791:	c7 04 85 60 58 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda7a0],0xffffffff
c001a79c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a7a0:	eb e4                	jmp    c001a786 <FAT::FAT()+0x30>
c001a7a2:	90                   	nop
c001a7a3:	83 c4 1c             	add    esp,0x1c
c001a7a6:	c3                   	ret    
c001a7a7:	90                   	nop

c001a7a8 <FAT::fixFilepath(char*)>:
c001a7a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7ac:	8a 00                	mov    al,BYTE PTR [eax]
c001a7ae:	3c 40                	cmp    al,0x40
c001a7b0:	7e 2c                	jle    c001a7de <FAT::fixFilepath(char*)+0x36>
c001a7b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7b6:	8a 00                	mov    al,BYTE PTR [eax]
c001a7b8:	83 e8 41             	sub    eax,0x41
c001a7bb:	88 c2                	mov    dl,al
c001a7bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7c1:	88 10                	mov    BYTE PTR [eax],dl
c001a7c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7c7:	8a 00                	mov    al,BYTE PTR [eax]
c001a7c9:	0f be c0             	movsx  eax,al
c001a7cc:	8b 04 85 60 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7a0]
c001a7d3:	83 c0 30             	add    eax,0x30
c001a7d6:	88 c2                	mov    dl,al
c001a7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7dc:	88 10                	mov    BYTE PTR [eax],dl
c001a7de:	90                   	nop
c001a7df:	c3                   	ret    

c001a7e0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a7e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7ee:	74 0a                	je     c001a7fa <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a7f0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a7f8:	75 0a                	jne    c001a804 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a7fa:	b8 04 00 00 00       	mov    eax,0x4
c001a7ff:	e9 fd 00 00 00       	jmp    c001a901 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a804:	83 ec 08             	sub    esp,0x8
c001a807:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a80e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a812:	50                   	push   eax
c001a813:	e8 6d 5f fe ff       	call   c0000785 <strcpy>
c001a818:	83 c4 10             	add    esp,0x10
c001a81b:	83 ec 08             	sub    esp,0x8
c001a81e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a822:	50                   	push   eax
c001a823:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a82a:	e8 79 ff ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001a82f:	83 c4 10             	add    esp,0x10
c001a832:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a83a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a841:	83 e0 01             	and    eax,0x1
c001a844:	74 08                	je     c001a84e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a846:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a84e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a855:	83 e0 04             	and    eax,0x4
c001a858:	74 10                	je     c001a86a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a85a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a862:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a86a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a871:	83 e0 02             	and    eax,0x2
c001a874:	74 08                	je     c001a87e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a876:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a87e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a885:	83 e0 08             	and    eax,0x8
c001a888:	74 08                	je     c001a892 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a88a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a892:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a899:	83 e0 10             	and    eax,0x10
c001a89c:	74 08                	je     c001a8a6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a89e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a8a6:	83 ec 0c             	sub    esp,0xc
c001a8a9:	68 50 02 00 00       	push   0x250
c001a8ae:	e8 95 17 ff ff       	call   c000c048 <malloc>
c001a8b3:	83 c4 10             	add    esp,0x10
c001a8b6:	89 c2                	mov    edx,eax
c001a8b8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8bf:	89 10                	mov    DWORD PTR [eax],edx
c001a8c1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a8c9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8d2:	83 ec 04             	sub    esp,0x4
c001a8d5:	52                   	push   edx
c001a8d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a8da:	52                   	push   edx
c001a8db:	50                   	push   eax
c001a8dc:	e8 bb a4 fe ff       	call   c0004d9c <f_open>
c001a8e1:	83 c4 10             	add    esp,0x10
c001a8e4:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a8eb:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a8f3:	74 07                	je     c001a8fc <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001a8f5:	b8 01 00 00 00       	mov    eax,0x1
c001a8fa:	eb 05                	jmp    c001a901 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001a8fc:	b8 00 00 00 00       	mov    eax,0x0
c001a901:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a907:	c3                   	ret    

c001a908 <FAT::openDir(char const*, void**)>:
c001a908:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a90e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a916:	74 0a                	je     c001a922 <FAT::openDir(char const*, void**)+0x1a>
c001a918:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a920:	75 07                	jne    c001a929 <FAT::openDir(char const*, void**)+0x21>
c001a922:	b8 04 00 00 00       	mov    eax,0x4
c001a927:	eb 7d                	jmp    c001a9a6 <FAT::openDir(char const*, void**)+0x9e>
c001a929:	83 ec 08             	sub    esp,0x8
c001a92c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a933:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a937:	50                   	push   eax
c001a938:	e8 48 5e fe ff       	call   c0000785 <strcpy>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	83 ec 08             	sub    esp,0x8
c001a943:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a947:	50                   	push   eax
c001a948:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a94f:	e8 54 fe ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	83 ec 0c             	sub    esp,0xc
c001a95a:	6a 4c                	push   0x4c
c001a95c:	e8 e7 16 ff ff       	call   c000c048 <malloc>
c001a961:	83 c4 10             	add    esp,0x10
c001a964:	89 c2                	mov    edx,eax
c001a966:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a96d:	89 10                	mov    DWORD PTR [eax],edx
c001a96f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a976:	8b 00                	mov    eax,DWORD PTR [eax]
c001a978:	83 ec 08             	sub    esp,0x8
c001a97b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a97f:	52                   	push   edx
c001a980:	50                   	push   eax
c001a981:	e8 4e b4 fe ff       	call   c0005dd4 <f_opendir>
c001a986:	83 c4 10             	add    esp,0x10
c001a989:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a990:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a998:	74 07                	je     c001a9a1 <FAT::openDir(char const*, void**)+0x99>
c001a99a:	b8 01 00 00 00       	mov    eax,0x1
c001a99f:	eb 05                	jmp    c001a9a6 <FAT::openDir(char const*, void**)+0x9e>
c001a9a1:	b8 00 00 00 00       	mov    eax,0x0
c001a9a6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9ac:	c3                   	ret    
c001a9ad:	90                   	nop

c001a9ae <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a9ae:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a9b4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a9bc:	75 0a                	jne    c001a9c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a9be:	b8 04 00 00 00       	mov    eax,0x4
c001a9c3:	e9 c9 00 00 00       	jmp    c001aa91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9c8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a9d0:	75 0a                	jne    c001a9dc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a9d2:	b8 04 00 00 00       	mov    eax,0x4
c001a9d7:	e9 b5 00 00 00       	jmp    c001aa91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9dc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a9e4:	75 0a                	jne    c001a9f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a9e6:	b8 04 00 00 00       	mov    eax,0x4
c001a9eb:	e9 a1 00 00 00       	jmp    c001aa91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001a9f0:	83 ec 08             	sub    esp,0x8
c001a9f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9fa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aa01:	50                   	push   eax
c001aa02:	e8 7e 5d fe ff       	call   c0000785 <strcpy>
c001aa07:	83 c4 10             	add    esp,0x10
c001aa0a:	83 ec 08             	sub    esp,0x8
c001aa0d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001aa14:	50                   	push   eax
c001aa15:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa1c:	e8 87 fd ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001aa21:	83 c4 10             	add    esp,0x10
c001aa24:	83 ec 08             	sub    esp,0x8
c001aa27:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa2b:	50                   	push   eax
c001aa2c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aa33:	50                   	push   eax
c001aa34:	e8 5a b5 fe ff       	call   c0005f93 <f_stat>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aa43:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aa4a:	85 c0                	test   eax,eax
c001aa4c:	74 07                	je     c001aa55 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001aa4e:	83 f8 04             	cmp    eax,0x4
c001aa51:	74 32                	je     c001aa85 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001aa53:	eb 37                	jmp    c001aa8c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001aa55:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aa59:	0f b6 c0             	movzx  eax,al
c001aa5c:	83 e0 10             	and    eax,0x10
c001aa5f:	0f 95 c2             	setne  dl
c001aa62:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001aa69:	88 10                	mov    BYTE PTR [eax],dl
c001aa6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa72:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001aa79:	89 01                	mov    DWORD PTR [ecx],eax
c001aa7b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa7e:	b8 00 00 00 00       	mov    eax,0x0
c001aa83:	eb 0c                	jmp    c001aa91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001aa85:	b8 02 00 00 00       	mov    eax,0x2
c001aa8a:	eb 05                	jmp    c001aa91 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001aa8c:	b8 01 00 00 00       	mov    eax,0x1
c001aa91:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aa97:	c3                   	ret    

c001aa98 <FAT::unlink(char const*)>:
c001aa98:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa9e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aaa6:	75 07                	jne    c001aaaf <FAT::unlink(char const*)+0x17>
c001aaa8:	b8 04 00 00 00       	mov    eax,0x4
c001aaad:	eb 5c                	jmp    c001ab0b <FAT::unlink(char const*)+0x73>
c001aaaf:	83 ec 08             	sub    esp,0x8
c001aab2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aab9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aabd:	50                   	push   eax
c001aabe:	e8 c2 5c fe ff       	call   c0000785 <strcpy>
c001aac3:	83 c4 10             	add    esp,0x10
c001aac6:	83 ec 08             	sub    esp,0x8
c001aac9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aacd:	50                   	push   eax
c001aace:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aad5:	e8 ce fc ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	83 ec 0c             	sub    esp,0xc
c001aae0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aae4:	50                   	push   eax
c001aae5:	e8 fb b7 fe ff       	call   c00062e5 <f_unlink>
c001aaea:	83 c4 10             	add    esp,0x10
c001aaed:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aaf4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aafb:	85 c0                	test   eax,eax
c001aafd:	75 07                	jne    c001ab06 <FAT::unlink(char const*)+0x6e>
c001aaff:	b8 00 00 00 00       	mov    eax,0x0
c001ab04:	eb 05                	jmp    c001ab0b <FAT::unlink(char const*)+0x73>
c001ab06:	b8 01 00 00 00       	mov    eax,0x1
c001ab0b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab11:	c3                   	ret    

c001ab12 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab12:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ab18:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ab1f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ab26:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ab2a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ab2e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ab36:	75 0a                	jne    c001ab42 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ab38:	b8 04 00 00 00       	mov    eax,0x4
c001ab3d:	e9 1c 01 00 00       	jmp    c001ac5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ab42:	83 ec 08             	sub    esp,0x8
c001ab45:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab50:	50                   	push   eax
c001ab51:	e8 2f 5c fe ff       	call   c0000785 <strcpy>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	83 ec 08             	sub    esp,0x8
c001ab5c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab60:	50                   	push   eax
c001ab61:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab68:	e8 3b fc ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001ab6d:	83 c4 10             	add    esp,0x10
c001ab70:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ab78:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ab80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab85:	83 e0 01             	and    eax,0x1
c001ab88:	74 08                	je     c001ab92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001ab8a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ab92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab97:	83 e0 02             	and    eax,0x2
c001ab9a:	74 08                	je     c001aba4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001ab9c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001aba4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aba9:	83 e0 04             	and    eax,0x4
c001abac:	74 08                	je     c001abb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001abae:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001abb6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abbb:	83 e0 08             	and    eax,0x8
c001abbe:	74 08                	je     c001abc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001abc0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001abc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abcd:	83 e0 01             	and    eax,0x1
c001abd0:	74 08                	je     c001abda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001abd2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001abda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abdf:	83 e0 02             	and    eax,0x2
c001abe2:	74 08                	je     c001abec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001abe4:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001abec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001abf1:	83 e0 04             	and    eax,0x4
c001abf4:	74 08                	je     c001abfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001abf6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001abfe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac03:	83 e0 08             	and    eax,0x8
c001ac06:	74 08                	je     c001ac10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ac08:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ac10:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ac17:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ac1e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ac26:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ac2e:	83 ec 04             	sub    esp,0x4
c001ac31:	52                   	push   edx
c001ac32:	50                   	push   eax
c001ac33:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac37:	50                   	push   eax
c001ac38:	e8 4a bd fe ff       	call   c0006987 <f_chmod>
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ac47:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ac4e:	85 c0                	test   eax,eax
c001ac50:	75 07                	jne    c001ac59 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ac52:	b8 00 00 00 00       	mov    eax,0x0
c001ac57:	eb 05                	jmp    c001ac5e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ac59:	b8 01 00 00 00       	mov    eax,0x1
c001ac5e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ac64:	c3                   	ret    
c001ac65:	90                   	nop

c001ac66 <FAT::rename(char const*, char const*)>:
c001ac66:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ac6c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ac74:	74 0a                	je     c001ac80 <FAT::rename(char const*, char const*)+0x1a>
c001ac76:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ac7e:	75 0a                	jne    c001ac8a <FAT::rename(char const*, char const*)+0x24>
c001ac80:	b8 04 00 00 00       	mov    eax,0x4
c001ac85:	e9 98 00 00 00       	jmp    c001ad22 <FAT::rename(char const*, char const*)+0xbc>
c001ac8a:	83 ec 08             	sub    esp,0x8
c001ac8d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ac94:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ac9b:	50                   	push   eax
c001ac9c:	e8 e4 5a fe ff       	call   c0000785 <strcpy>
c001aca1:	83 c4 10             	add    esp,0x10
c001aca4:	83 ec 08             	sub    esp,0x8
c001aca7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001acae:	50                   	push   eax
c001acaf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001acb6:	e8 ed fa ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001acbb:	83 c4 10             	add    esp,0x10
c001acbe:	83 ec 08             	sub    esp,0x8
c001acc1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001acc8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001accc:	50                   	push   eax
c001accd:	e8 b3 5a fe ff       	call   c0000785 <strcpy>
c001acd2:	83 c4 10             	add    esp,0x10
c001acd5:	83 ec 08             	sub    esp,0x8
c001acd8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acdc:	50                   	push   eax
c001acdd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ace4:	e8 bf fa ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001ace9:	83 c4 10             	add    esp,0x10
c001acec:	83 ec 08             	sub    esp,0x8
c001acef:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acf3:	50                   	push   eax
c001acf4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001acfb:	50                   	push   eax
c001acfc:	e8 93 b9 fe ff       	call   c0006694 <f_rename>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ad0b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ad12:	85 c0                	test   eax,eax
c001ad14:	75 07                	jne    c001ad1d <FAT::rename(char const*, char const*)+0xb7>
c001ad16:	b8 00 00 00 00       	mov    eax,0x0
c001ad1b:	eb 05                	jmp    c001ad22 <FAT::rename(char const*, char const*)+0xbc>
c001ad1d:	b8 01 00 00 00       	mov    eax,0x1
c001ad22:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ad28:	c3                   	ret    
c001ad29:	90                   	nop

c001ad2a <FAT::mkdir(char const*)>:
c001ad2a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ad30:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ad38:	75 07                	jne    c001ad41 <FAT::mkdir(char const*)+0x17>
c001ad3a:	b8 04 00 00 00       	mov    eax,0x4
c001ad3f:	eb 5c                	jmp    c001ad9d <FAT::mkdir(char const*)+0x73>
c001ad41:	83 ec 08             	sub    esp,0x8
c001ad44:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad4f:	50                   	push   eax
c001ad50:	e8 30 5a fe ff       	call   c0000785 <strcpy>
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	83 ec 08             	sub    esp,0x8
c001ad5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad5f:	50                   	push   eax
c001ad60:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ad67:	e8 3c fa ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001ad6c:	83 c4 10             	add    esp,0x10
c001ad6f:	83 ec 0c             	sub    esp,0xc
c001ad72:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad76:	50                   	push   eax
c001ad77:	e8 ec b6 fe ff       	call   c0006468 <f_mkdir>
c001ad7c:	83 c4 10             	add    esp,0x10
c001ad7f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad86:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad8d:	85 c0                	test   eax,eax
c001ad8f:	75 07                	jne    c001ad98 <FAT::mkdir(char const*)+0x6e>
c001ad91:	b8 00 00 00 00       	mov    eax,0x0
c001ad96:	eb 05                	jmp    c001ad9d <FAT::mkdir(char const*)+0x73>
c001ad98:	b8 01 00 00 00       	mov    eax,0x1
c001ad9d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ada3:	c3                   	ret    

c001ada4 <FAT::exists(char const*)>:
c001ada4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001adaa:	83 ec 08             	sub    esp,0x8
c001adad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001adb4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001adb8:	50                   	push   eax
c001adb9:	e8 c7 59 fe ff       	call   c0000785 <strcpy>
c001adbe:	83 c4 10             	add    esp,0x10
c001adc1:	83 ec 08             	sub    esp,0x8
c001adc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001adc8:	50                   	push   eax
c001adc9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001add0:	e8 d3 f9 ff ff       	call   c001a7a8 <FAT::fixFilepath(char*)>
c001add5:	83 c4 10             	add    esp,0x10
c001add8:	83 ec 08             	sub    esp,0x8
c001addb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ade2:	50                   	push   eax
c001ade3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ade7:	50                   	push   eax
c001ade8:	e8 a6 b1 fe ff       	call   c0005f93 <f_stat>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001adf7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001adfe:	85 c0                	test   eax,eax
c001ae00:	75 04                	jne    c001ae06 <FAT::exists(char const*)+0x62>
c001ae02:	b0 01                	mov    al,0x1
c001ae04:	eb 02                	jmp    c001ae08 <FAT::exists(char const*)+0x64>
c001ae06:	b0 00                	mov    al,0x0
c001ae08:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ae0e:	c3                   	ret    
c001ae0f:	90                   	nop

c001ae10 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ae10:	b8 08 00 00 00       	mov    eax,0x8
c001ae15:	c3                   	ret    

c001ae16 <ISO9660::seek(void*, unsigned long long)>:
c001ae16:	53                   	push   ebx
c001ae17:	b8 04 00 00 00       	mov    eax,0x4
c001ae1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae28:	85 d2                	test   edx,edx
c001ae2a:	74 17                	je     c001ae43 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ae2c:	89 c8                	mov    eax,ecx
c001ae2e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ae31:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ae34:	b8 01 00 00 00       	mov    eax,0x1
c001ae39:	73 08                	jae    c001ae43 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ae3b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ae3e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ae41:	31 c0                	xor    eax,eax
c001ae43:	5b                   	pop    ebx
c001ae44:	c3                   	ret    
c001ae45:	90                   	nop

c001ae46 <ISO9660::tell(void*, unsigned long long*)>:
c001ae46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae4e:	85 d2                	test   edx,edx
c001ae50:	74 12                	je     c001ae64 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ae52:	85 c0                	test   eax,eax
c001ae54:	74 0e                	je     c001ae64 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ae56:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae59:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ae5c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ae5f:	89 10                	mov    DWORD PTR [eax],edx
c001ae61:	31 c0                	xor    eax,eax
c001ae63:	c3                   	ret    
c001ae64:	b8 04 00 00 00       	mov    eax,0x4
c001ae69:	c3                   	ret    

c001ae6a <ISO9660::getName()>:
c001ae6a:	b8 b4 2f 02 c0       	mov    eax,0xc0022fb4
c001ae6f:	c3                   	ret    

c001ae70 <ISO9660::stat(void*, unsigned long long*)>:
c001ae70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae78:	85 d2                	test   edx,edx
c001ae7a:	74 12                	je     c001ae8e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ae7c:	85 c0                	test   eax,eax
c001ae7e:	74 0e                	je     c001ae8e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ae80:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ae83:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ae86:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ae89:	89 10                	mov    DWORD PTR [eax],edx
c001ae8b:	31 c0                	xor    eax,eax
c001ae8d:	c3                   	ret    
c001ae8e:	b8 04 00 00 00       	mov    eax,0x4
c001ae93:	c3                   	ret    

c001ae94 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae94:	b8 01 00 00 00       	mov    eax,0x1
c001ae99:	c3                   	ret    

c001ae9a <ISO9660::unlink(char const*)>:
c001ae9a:	b8 01 00 00 00       	mov    eax,0x1
c001ae9f:	c3                   	ret    

c001aea0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001aea0:	b8 01 00 00 00       	mov    eax,0x1
c001aea5:	c3                   	ret    

c001aea6 <ISO9660::rename(char const*, char const*)>:
c001aea6:	b8 01 00 00 00       	mov    eax,0x1
c001aeab:	c3                   	ret    

c001aeac <ISO9660::mkdir(char const*)>:
c001aeac:	b8 01 00 00 00       	mov    eax,0x1
c001aeb1:	c3                   	ret    

c001aeb2 <ISO9660::close(void*)>:
c001aeb2:	83 ec 0c             	sub    esp,0xc
c001aeb5:	b8 04 00 00 00       	mov    eax,0x4
c001aeba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aebe:	85 d2                	test   edx,edx
c001aec0:	74 0e                	je     c001aed0 <ISO9660::close(void*)+0x1e>
c001aec2:	83 ec 0c             	sub    esp,0xc
c001aec5:	52                   	push   edx
c001aec6:	e8 8d 11 ff ff       	call   c000c058 <free>
c001aecb:	83 c4 10             	add    esp,0x10
c001aece:	31 c0                	xor    eax,eax
c001aed0:	83 c4 0c             	add    esp,0xc
c001aed3:	c3                   	ret    

c001aed4 <ISO9660::closeDir(void*)>:
c001aed4:	83 ec 0c             	sub    esp,0xc
c001aed7:	b8 04 00 00 00       	mov    eax,0x4
c001aedc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aee0:	85 d2                	test   edx,edx
c001aee2:	74 0e                	je     c001aef2 <ISO9660::closeDir(void*)+0x1e>
c001aee4:	83 ec 0c             	sub    esp,0xc
c001aee7:	52                   	push   edx
c001aee8:	e8 6b 11 ff ff       	call   c000c058 <free>
c001aeed:	83 c4 10             	add    esp,0x10
c001aef0:	31 c0                	xor    eax,eax
c001aef2:	83 c4 0c             	add    esp,0xc
c001aef5:	c3                   	ret    

c001aef6 <ISO9660::~ISO9660()>:
c001aef6:	83 ec 0c             	sub    esp,0xc
c001aef9:	ba 08 30 02 c0       	mov    edx,0xc0023008
c001aefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af02:	89 10                	mov    DWORD PTR [eax],edx
c001af04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	50                   	push   eax
c001af0c:	e8 51 45 ff ff       	call   c000f462 <Filesystem::~Filesystem()>
c001af11:	83 c4 10             	add    esp,0x10
c001af14:	90                   	nop
c001af15:	83 c4 0c             	add    esp,0xc
c001af18:	c3                   	ret    
c001af19:	90                   	nop

c001af1a <ISO9660::~ISO9660()>:
c001af1a:	83 ec 0c             	sub    esp,0xc
c001af1d:	83 ec 0c             	sub    esp,0xc
c001af20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af24:	e8 cd ff ff ff       	call   c001aef6 <ISO9660::~ISO9660()>
c001af29:	83 c4 10             	add    esp,0x10
c001af2c:	83 ec 08             	sub    esp,0x8
c001af2f:	6a 08                	push   0x8
c001af31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af35:	e8 1f 41 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001af3a:	83 c4 10             	add    esp,0x10
c001af3d:	83 c4 0c             	add    esp,0xc
c001af40:	c3                   	ret    

c001af41 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001af41:	55                   	push   ebp
c001af42:	31 c9                	xor    ecx,ecx
c001af44:	57                   	push   edi
c001af45:	56                   	push   esi
c001af46:	53                   	push   ebx
c001af47:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001af4b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001af4f:	89 eb                	mov    ebx,ebp
c001af51:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001af55:	39 ce                	cmp    esi,ecx
c001af57:	7e 17                	jle    c001af70 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001af59:	31 d2                	xor    edx,edx
c001af5b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001af5f:	7d 13                	jge    c001af74 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001af61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af65:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001af68:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001af6b:	75 0d                	jne    c001af7a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001af6d:	42                   	inc    edx
c001af6e:	eb eb                	jmp    c001af5b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001af70:	31 c0                	xor    eax,eax
c001af72:	eb 0a                	jmp    c001af7e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001af74:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001af78:	eb 04                	jmp    c001af7e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001af7a:	41                   	inc    ecx
c001af7b:	43                   	inc    ebx
c001af7c:	eb d7                	jmp    c001af55 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001af7e:	5b                   	pop    ebx
c001af7f:	5e                   	pop    esi
c001af80:	5f                   	pop    edi
c001af81:	5d                   	pop    ebp
c001af82:	c3                   	ret    

c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001af83:	56                   	push   esi
c001af84:	53                   	push   ebx
c001af85:	52                   	push   edx
c001af86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af8a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af92:	39 0d 40 59 02 c0    	cmp    DWORD PTR ds:0xc0025940,ecx
c001af98:	75 08                	jne    c001afa2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001af9a:	38 05 e8 3d 02 c0    	cmp    BYTE PTR ds:0xc0023de8,al
c001afa0:	74 2b                	je     c001afcd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001afa2:	83 ec 0c             	sub    esp,0xc
c001afa5:	a2 e8 3d 02 c0       	mov    ds:0xc0023de8,al
c001afaa:	68 60 59 02 c0       	push   0xc0025960
c001afaf:	0f be c0             	movsx  eax,al
c001afb2:	6a 01                	push   0x1
c001afb4:	89 0d 40 59 02 c0    	mov    DWORD PTR ds:0xc0025940,ecx
c001afba:	31 db                	xor    ebx,ebx
c001afbc:	53                   	push   ebx
c001afbd:	51                   	push   ecx
c001afbe:	ff 34 85 bc 48 02 c0 	push   DWORD PTR [eax*4-0x3ffdb744]
c001afc5:	e8 ca 77 ff ff       	call   c0012794 <LogicalDisk::read(unsigned long long, int, void*)>
c001afca:	83 c4 20             	add    esp,0x20
c001afcd:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001afd5:	c7 44 24 14 60 59 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025960
c001afdd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001afe1:	58                   	pop    eax
c001afe2:	5b                   	pop    ebx
c001afe3:	5e                   	pop    esi
c001afe4:	e9 c7 56 fe ff       	jmp    c00006b0 <memcpy>
c001afe9:	90                   	nop

c001afea <ISO9660::tryMount(LogicalDisk*, int)>:
c001afea:	81 ec 10 08 00 00    	sub    esp,0x810
c001aff0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001aff7:	83 c0 41             	add    eax,0x41
c001affa:	0f be c0             	movsx  eax,al
c001affd:	50                   	push   eax
c001affe:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b002:	50                   	push   eax
c001b003:	6a 10                	push   0x10
c001b005:	e8 79 ff ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b00a:	83 c4 10             	add    esp,0x10
c001b00d:	31 c0                	xor    eax,eax
c001b00f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b014:	75 1d                	jne    c001b033 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b016:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b01b:	75 16                	jne    c001b033 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b01d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b022:	75 0f                	jne    c001b033 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b024:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b029:	75 08                	jne    c001b033 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b02b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b030:	0f 94 c0             	sete   al
c001b033:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b039:	c3                   	ret    

c001b03a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b03a:	55                   	push   ebp
c001b03b:	57                   	push   edi
c001b03c:	56                   	push   esi
c001b03d:	53                   	push   ebx
c001b03e:	81 ec 34 08 00 00    	sub    esp,0x834
c001b044:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b04b:	55                   	push   ebp
c001b04c:	68 cf 2f 02 c0       	push   0xc0022fcf
c001b051:	e8 e3 40 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001b056:	83 c4 10             	add    esp,0x10
c001b059:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b061:	0f 84 06 02 00 00    	je     c001b26d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b067:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b06f:	0f 84 f8 01 00 00    	je     c001b26d <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b075:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b07c:	b8 01 00 00 00       	mov    eax,0x1
c001b081:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b085:	0f 85 e7 01 00 00    	jne    c001b272 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b08b:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b08e:	31 d2                	xor    edx,edx
c001b090:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b093:	89 e9                	mov    ecx,ebp
c001b095:	89 d3                	mov    ebx,edx
c001b097:	01 f1                	add    ecx,esi
c001b099:	11 fb                	adc    ebx,edi
c001b09b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b09f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b0a3:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b0aa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b0ad:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b0b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b0b4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b0b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0c0:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b0c4:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b0c8:	72 19                	jb     c001b0e3 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b0ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b0e1:	eb 13                	jmp    c001b0f6 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b0e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0eb:	29 f0                	sub    eax,esi
c001b0ed:	19 fa                	sbb    edx,edi
c001b0ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b0f6:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b0fd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b100:	8b 00                	mov    eax,DWORD PTR [eax]
c001b102:	53                   	push   ebx
c001b103:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b107:	c1 e0 0b             	shl    eax,0xb
c001b10a:	01 c6                	add    esi,eax
c001b10c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b113:	11 d7                	adc    edi,edx
c001b115:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b119:	89 fa                	mov    edx,edi
c001b11b:	50                   	push   eax
c001b11c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b120:	50                   	push   eax
c001b121:	89 f0                	mov    eax,esi
c001b123:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b127:	50                   	push   eax
c001b128:	e8 56 fe ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b12d:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b134:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b138:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b13b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b13f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	b8 00 08 00 00       	mov    eax,0x800
c001b14d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b151:	29 d0                	sub    eax,edx
c001b153:	39 c1                	cmp    ecx,eax
c001b155:	83 db 00             	sbb    ebx,0x0
c001b158:	7d 19                	jge    c001b173 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b15a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b15f:	75 16                	jne    c001b177 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b161:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b16e:	e9 f6 00 00 00       	jmp    c001b269 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b173:	89 c5                	mov    ebp,eax
c001b175:	eb 03                	jmp    c001b17a <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b177:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b17a:	51                   	push   ecx
c001b17b:	55                   	push   ebp
c001b17c:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b180:	50                   	push   eax
c001b181:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b188:	e8 23 55 fe ff       	call   c00006b0 <memcpy>
c001b18d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b191:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b195:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b19c:	01 e8                	add    eax,ebp
c001b19e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b1a2:	89 e8                	mov    eax,ebp
c001b1a4:	99                   	cdq    
c001b1a5:	01 ee                	add    esi,ebp
c001b1a7:	11 d7                	adc    edi,edx
c001b1a9:	29 e9                	sub    ecx,ebp
c001b1ab:	19 d3                	sbb    ebx,edx
c001b1ad:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1b1:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b1b5:	83 c4 10             	add    esp,0x10
c001b1b8:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b1bd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b1c0:	b8 00 00 00 00       	mov    eax,0x0
c001b1c5:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b1c9:	7d 3f                	jge    c001b20a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b1cb:	52                   	push   edx
c001b1cc:	89 fa                	mov    edx,edi
c001b1ce:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b1d5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b1d9:	50                   	push   eax
c001b1da:	89 f0                	mov    eax,esi
c001b1dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b1e0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b1e4:	50                   	push   eax
c001b1e5:	e8 99 fd ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b1ea:	81 c6 00 08 00 00    	add    esi,0x800
c001b1f0:	83 d7 00             	adc    edi,0x0
c001b1f3:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b1fb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b203:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b208:	eb ab                	jmp    c001b1b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b20e:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b211:	74 34                	je     c001b247 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b213:	89 fa                	mov    edx,edi
c001b215:	50                   	push   eax
c001b216:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b21d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b221:	50                   	push   eax
c001b222:	89 f0                	mov    eax,esi
c001b224:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b228:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b22c:	55                   	push   ebp
c001b22d:	50                   	push   eax
c001b22e:	e8 50 fd ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b233:	83 c4 0c             	add    esp,0xc
c001b236:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b23a:	55                   	push   ebp
c001b23b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b23f:	e8 6c 54 fe ff       	call   c00006b0 <memcpy>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b24e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b252:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b256:	89 38                	mov    DWORD PTR [eax],edi
c001b258:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b25f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b263:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b266:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b269:	31 c0                	xor    eax,eax
c001b26b:	eb 05                	jmp    c001b272 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b26d:	b8 04 00 00 00       	mov    eax,0x4
c001b272:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b278:	5b                   	pop    ebx
c001b279:	5e                   	pop    esi
c001b27a:	5f                   	pop    edi
c001b27b:	5d                   	pop    ebp
c001b27c:	c3                   	ret    
c001b27d:	90                   	nop

c001b27e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b27e:	55                   	push   ebp
c001b27f:	57                   	push   edi
c001b280:	56                   	push   esi
c001b281:	53                   	push   ebx
c001b282:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b288:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b28f:	85 f6                	test   esi,esi
c001b291:	0f 84 64 02 00 00    	je     c001b4fb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b297:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b29f:	0f 84 56 02 00 00    	je     c001b4fb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001b2a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b2a8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b2ab:	75 0a                	jne    c001b2b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b2ad:	b8 07 00 00 00       	mov    eax,0x7
c001b2b2:	e9 49 02 00 00       	jmp    c001b500 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b2b7:	50                   	push   eax
c001b2b8:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b2bc:	50                   	push   eax
c001b2bd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b2c4:	53                   	push   ebx
c001b2c5:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2c7:	c1 e0 0b             	shl    eax,0xb
c001b2ca:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b2cd:	c1 e8 0b             	shr    eax,0xb
c001b2d0:	50                   	push   eax
c001b2d1:	e8 ad fc ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b2d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b2d9:	83 c4 10             	add    esp,0x10
c001b2dc:	89 c1                	mov    ecx,eax
c001b2de:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b2e1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b2e7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b2ea:	84 db                	test   bl,bl
c001b2ec:	0f 85 90 00 00 00    	jne    c001b382 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b2f2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b2f8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b2fe:	29 c7                	sub    edi,eax
c001b300:	89 fb                	mov    ebx,edi
c001b302:	c1 fb 1f             	sar    ebx,0x1f
c001b305:	01 f8                	add    eax,edi
c001b307:	11 da                	adc    edx,ebx
c001b309:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b30d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b311:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b314:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b317:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b31a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b31d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b320:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b324:	89 d8                	mov    eax,ebx
c001b326:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b329:	ba 00 00 00 00       	mov    edx,0x0
c001b32e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b332:	b8 00 00 00 00       	mov    eax,0x0
c001b337:	73 0b                	jae    c001b344 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b339:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b33c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b340:	29 f8                	sub    eax,edi
c001b342:	19 da                	sbb    edx,ebx
c001b344:	89 d3                	mov    ebx,edx
c001b346:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b349:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b34c:	09 c3                	or     ebx,eax
c001b34e:	0f 84 59 ff ff ff    	je     c001b2ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b354:	55                   	push   ebp
c001b355:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b359:	50                   	push   eax
c001b35a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b361:	53                   	push   ebx
c001b362:	8b 06                	mov    eax,DWORD PTR [esi]
c001b364:	c1 e0 0b             	shl    eax,0xb
c001b367:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b36b:	c1 e8 0b             	shr    eax,0xb
c001b36e:	50                   	push   eax
c001b36f:	e8 0f fc ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b374:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b377:	83 c4 10             	add    esp,0x10
c001b37a:	25 ff 07 00 00       	and    eax,0x7ff
c001b37f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b382:	57                   	push   edi
c001b383:	6a 28                	push   0x28
c001b385:	6a 00                	push   0x0
c001b387:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b38b:	50                   	push   eax
c001b38c:	e8 55 53 fe ff       	call   c00006e6 <memset>
c001b391:	31 d2                	xor    edx,edx
c001b393:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b396:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b39c:	89 f8                	mov    eax,edi
c001b39e:	83 c0 21             	add    eax,0x21
c001b3a1:	83 d2 00             	adc    edx,0x0
c001b3a4:	89 c7                	mov    edi,eax
c001b3a6:	89 d5                	mov    ebp,edx
c001b3a8:	83 c4 10             	add    esp,0x10
c001b3ab:	31 c9                	xor    ecx,ecx
c001b3ad:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b3b4:	83 f9 28             	cmp    ecx,0x28
c001b3b7:	88 04 24             	mov    BYTE PTR [esp],al
c001b3ba:	0f 94 c2             	sete   dl
c001b3bd:	88 d0                	mov    al,dl
c001b3bf:	ba ff 07 00 00       	mov    edx,0x7ff
c001b3c4:	39 fa                	cmp    edx,edi
c001b3c6:	ba 00 00 00 00       	mov    edx,0x0
c001b3cb:	19 ea                	sbb    edx,ebp
c001b3cd:	0f 92 c2             	setb   dl
c001b3d0:	09 c2                	or     edx,eax
c001b3d2:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b3d6:	0f 94 c0             	sete   al
c001b3d9:	08 d0                	or     al,dl
c001b3db:	75 16                	jne    c001b3f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b3dd:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b3e1:	74 10                	je     c001b3f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b3e3:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b3e6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b3ea:	41                   	inc    ecx
c001b3eb:	83 c7 01             	add    edi,0x1
c001b3ee:	83 d5 00             	adc    ebp,0x0
c001b3f1:	eb ba                	jmp    c001b3ad <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b3f3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b3fa:	83 ec 0c             	sub    esp,0xc
c001b3fd:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b401:	57                   	push   edi
c001b402:	e8 fc 52 fe ff       	call   c0000703 <strlen>
c001b407:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b40f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b413:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b41a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b41d:	5a                   	pop    edx
c001b41e:	25 ff 07 00 00       	and    eax,0x7ff
c001b423:	01 c8                	add    eax,ecx
c001b425:	59                   	pop    ecx
c001b426:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001b42c:	83 e0 02             	and    eax,0x2
c001b42f:	3c 01                	cmp    al,0x1
c001b431:	19 c0                	sbb    eax,eax
c001b433:	83 c0 02             	add    eax,0x2
c001b436:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b43a:	57                   	push   edi
c001b43b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b43f:	50                   	push   eax
c001b440:	e8 40 53 fe ff       	call   c0000785 <strcpy>
c001b445:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b449:	83 c4 10             	add    esp,0x10
c001b44c:	84 c0                	test   al,al
c001b44e:	75 21                	jne    c001b471 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001b450:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b458:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b460:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b468:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b46f:	eb 28                	jmp    c001b499 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b471:	fe c8                	dec    al
c001b473:	75 24                	jne    c001b499 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001b475:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b47d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b485:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b48d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b494:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b499:	0f b6 fb             	movzx  edi,bl
c001b49c:	31 db                	xor    ebx,ebx
c001b49e:	50                   	push   eax
c001b49f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b4a6:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b4aa:	50                   	push   eax
c001b4ab:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b4b2:	e8 f9 51 fe ff       	call   c00006b0 <memcpy>
c001b4b7:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b4be:	89 f9                	mov    ecx,edi
c001b4c0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b4c6:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b4c9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b4cc:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b4cf:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b4d2:	83 c4 10             	add    esp,0x10
c001b4d5:	39 c7                	cmp    edi,eax
c001b4d7:	89 df                	mov    edi,ebx
c001b4d9:	19 d7                	sbb    edi,edx
c001b4db:	72 10                	jb     c001b4ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001b4dd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b4e4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b4eb:	eb 0a                	jmp    c001b4f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001b4ed:	29 c8                	sub    eax,ecx
c001b4ef:	19 da                	sbb    edx,ebx
c001b4f1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b4f4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b4f7:	31 c0                	xor    eax,eax
c001b4f9:	eb 05                	jmp    c001b500 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001b4fb:	b8 04 00 00 00       	mov    eax,0x4
c001b500:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b506:	5b                   	pop    ebx
c001b507:	5e                   	pop    esi
c001b508:	5f                   	pop    edi
c001b509:	5d                   	pop    ebp
c001b50a:	c3                   	ret    

c001b50b <readRoot(unsigned int*, unsigned int*, char)>:
c001b50b:	81 ec 40 08 00 00    	sub    esp,0x840
c001b511:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b519:	50                   	push   eax
c001b51a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b51e:	50                   	push   eax
c001b51f:	6a 10                	push   0x10
c001b521:	e8 5d fa ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b526:	83 c4 0c             	add    esp,0xc
c001b529:	6a 22                	push   0x22
c001b52b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b532:	50                   	push   eax
c001b533:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b537:	50                   	push   eax
c001b538:	e8 73 51 fe ff       	call   c00006b0 <memcpy>
c001b53d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b544:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b548:	89 10                	mov    DWORD PTR [eax],edx
c001b54a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b551:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b555:	89 10                	mov    DWORD PTR [eax],edx
c001b557:	b0 01                	mov    al,0x1
c001b559:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b55f:	c3                   	ret    

c001b560 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b560:	55                   	push   ebp
c001b561:	57                   	push   edi
c001b562:	56                   	push   esi
c001b563:	53                   	push   ebx
c001b564:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b56a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b571:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b578:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b57c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b580:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b584:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b588:	75 03                	jne    c001b58d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b58a:	83 c3 02             	add    ebx,0x2
c001b58d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b590:	75 03                	jne    c001b595 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b592:	43                   	inc    ebx
c001b593:	eb f8                	jmp    c001b58d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b595:	51                   	push   ecx
c001b596:	68 00 01 00 00       	push   0x100
c001b59b:	6a 00                	push   0x0
c001b59d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b5a1:	50                   	push   eax
c001b5a2:	e8 3f 51 fe ff       	call   c00006e6 <memset>
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	31 d2                	xor    edx,edx
c001b5ac:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b5af:	84 c0                	test   al,al
c001b5b1:	74 21                	je     c001b5d4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b5b3:	3c 2f                	cmp    al,0x2f
c001b5b5:	75 0b                	jne    c001b5c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b5b7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b5bb:	bd 01 00 00 00       	mov    ebp,0x1
c001b5c0:	eb 14                	jmp    c001b5d6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b5c2:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b5c5:	80 f9 19             	cmp    cl,0x19
c001b5c8:	77 03                	ja     c001b5cd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b5ca:	83 e8 20             	sub    eax,0x20
c001b5cd:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b5d1:	42                   	inc    edx
c001b5d2:	eb d8                	jmp    c001b5ac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b5d4:	31 ed                	xor    ebp,ebp
c001b5d6:	83 ec 0c             	sub    esp,0xc
c001b5d9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b5e0:	e8 63 0a ff ff       	call   c000c048 <malloc>
c001b5e5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b5ec:	89 c6                	mov    esi,eax
c001b5ee:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b5f4:	c1 ef 0b             	shr    edi,0xb
c001b5f7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b5fe:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b602:	83 c4 10             	add    esp,0x10
c001b605:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b60a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b60e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b615:	74 28                	je     c001b63f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b617:	52                   	push   edx
c001b618:	57                   	push   edi
c001b619:	50                   	push   eax
c001b61a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b61e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b625:	e8 59 f9 ff ff       	call   c001af83 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b62a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b62e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b635:	05 00 08 00 00       	add    eax,0x800
c001b63a:	83 c4 10             	add    esp,0x10
c001b63d:	eb cb                	jmp    c001b60a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b63f:	83 ec 0c             	sub    esp,0xc
c001b642:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b646:	57                   	push   edi
c001b647:	e8 b7 50 fe ff       	call   c0000703 <strlen>
c001b64c:	50                   	push   eax
c001b64d:	57                   	push   edi
c001b64e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b655:	56                   	push   esi
c001b656:	e8 e6 f8 ff ff       	call   c001af41 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b65b:	83 c4 20             	add    esp,0x20
c001b65e:	85 c0                	test   eax,eax
c001b660:	75 13                	jne    c001b675 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b662:	83 ec 0c             	sub    esp,0xc
c001b665:	56                   	push   esi
c001b666:	e8 ed 09 ff ff       	call   c000c058 <free>
c001b66b:	83 c4 10             	add    esp,0x10
c001b66e:	31 c0                	xor    eax,eax
c001b670:	e9 b3 00 00 00       	jmp    c001b728 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b675:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b679:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b67d:	c1 e7 08             	shl    edi,0x8
c001b680:	c1 e2 10             	shl    edx,0x10
c001b683:	09 d7                	or     edi,edx
c001b685:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b689:	09 d7                	or     edi,edx
c001b68b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b68f:	c1 e2 18             	shl    edx,0x18
c001b692:	09 d7                	or     edi,edx
c001b694:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b698:	89 d1                	mov    ecx,edx
c001b69a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b69e:	c1 e1 08             	shl    ecx,0x8
c001b6a1:	c1 e2 10             	shl    edx,0x10
c001b6a4:	09 ca                	or     edx,ecx
c001b6a6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b6aa:	09 ca                	or     edx,ecx
c001b6ac:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b6b0:	c1 e1 18             	shl    ecx,0x18
c001b6b3:	09 ca                	or     edx,ecx
c001b6b5:	89 e9                	mov    ecx,ebp
c001b6b7:	84 c9                	test   cl,cl
c001b6b9:	74 3c                	je     c001b6f7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b6bb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b6bf:	83 ec 0c             	sub    esp,0xc
c001b6c2:	56                   	push   esi
c001b6c3:	e8 90 09 ff ff       	call   c000c058 <free>
c001b6c8:	83 c4 0c             	add    esp,0xc
c001b6cb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b6d2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b6d7:	50                   	push   eax
c001b6d8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b6df:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b6e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6ea:	52                   	push   edx
c001b6eb:	57                   	push   edi
c001b6ec:	53                   	push   ebx
c001b6ed:	e8 6e fe ff ff       	call   c001b560 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b6f2:	83 c4 20             	add    esp,0x20
c001b6f5:	eb 31                	jmp    c001b728 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b6f7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b6fa:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b701:	d0 e8                	shr    al,1
c001b703:	89 3b                	mov    DWORD PTR [ebx],edi
c001b705:	83 e0 01             	and    eax,0x1
c001b708:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b70f:	83 ec 0c             	sub    esp,0xc
c001b712:	89 13                	mov    DWORD PTR [ebx],edx
c001b714:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b71b:	89 03                	mov    DWORD PTR [ebx],eax
c001b71d:	56                   	push   esi
c001b71e:	e8 35 09 ff ff       	call   c000c058 <free>
c001b723:	83 c4 10             	add    esp,0x10
c001b726:	b0 01                	mov    al,0x1
c001b728:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b72e:	5b                   	pop    ebx
c001b72f:	5e                   	pop    esi
c001b730:	5f                   	pop    edi
c001b731:	5d                   	pop    ebp
c001b732:	c3                   	ret    

c001b733 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b733:	55                   	push   ebp
c001b734:	57                   	push   edi
c001b735:	56                   	push   esi
c001b736:	53                   	push   ebx
c001b737:	83 ec 20             	sub    esp,0x20
c001b73a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b73e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b742:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b746:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b74e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b756:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b75b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b761:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b767:	57                   	push   edi
c001b768:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b76c:	50                   	push   eax
c001b76d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b771:	50                   	push   eax
c001b772:	e8 94 fd ff ff       	call   c001b50b <readRoot(unsigned int*, unsigned int*, char)>
c001b777:	5a                   	pop    edx
c001b778:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b77c:	e8 82 4f fe ff       	call   c0000703 <strlen>
c001b781:	83 c4 10             	add    esp,0x10
c001b784:	83 f8 03             	cmp    eax,0x3
c001b787:	77 17                	ja     c001b7a0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b78d:	89 03                	mov    DWORD PTR [ebx],eax
c001b78f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b793:	89 06                	mov    DWORD PTR [esi],eax
c001b795:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b79c:	b0 01                	mov    al,0x1
c001b79e:	eb 19                	jmp    c001b7b9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b7a0:	50                   	push   eax
c001b7a1:	55                   	push   ebp
c001b7a2:	57                   	push   edi
c001b7a3:	56                   	push   esi
c001b7a4:	53                   	push   ebx
c001b7a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b7a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b7ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b7b1:	e8 aa fd ff ff       	call   c001b560 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b7b6:	83 c4 20             	add    esp,0x20
c001b7b9:	83 c4 1c             	add    esp,0x1c
c001b7bc:	5b                   	pop    ebx
c001b7bd:	5e                   	pop    esi
c001b7be:	5f                   	pop    edi
c001b7bf:	5d                   	pop    ebp
c001b7c0:	c3                   	ret    
c001b7c1:	90                   	nop

c001b7c2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b7c2:	57                   	push   edi
c001b7c3:	56                   	push   esi
c001b7c4:	53                   	push   ebx
c001b7c5:	83 ec 10             	sub    esp,0x10
c001b7c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b7cc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b7d0:	85 ff                	test   edi,edi
c001b7d2:	74 7b                	je     c001b84f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b7d4:	85 f6                	test   esi,esi
c001b7d6:	74 77                	je     c001b84f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b7d8:	83 ec 0c             	sub    esp,0xc
c001b7db:	6a 1c                	push   0x1c
c001b7dd:	e8 66 08 ff ff       	call   c000c048 <malloc>
c001b7e2:	89 07                	mov    DWORD PTR [edi],eax
c001b7e4:	89 c3                	mov    ebx,eax
c001b7e6:	58                   	pop    eax
c001b7e7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7eb:	50                   	push   eax
c001b7ec:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b7ef:	50                   	push   eax
c001b7f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7f4:	50                   	push   eax
c001b7f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7f9:	50                   	push   eax
c001b7fa:	56                   	push   esi
c001b7fb:	e8 33 ff ff ff       	call   c001b733 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b800:	83 c4 20             	add    esp,0x20
c001b803:	84 c0                	test   al,al
c001b805:	74 07                	je     c001b80e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b80c:	74 0b                	je     c001b819 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b80e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b812:	b8 01 00 00 00       	mov    eax,0x1
c001b817:	eb 3b                	jmp    c001b854 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b81d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b821:	89 03                	mov    DWORD PTR [ebx],eax
c001b823:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b82a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b82e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b835:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b83c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b83f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b846:	8a 06                	mov    al,BYTE PTR [esi]
c001b848:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b84b:	31 c0                	xor    eax,eax
c001b84d:	eb 05                	jmp    c001b854 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b84f:	b8 04 00 00 00       	mov    eax,0x4
c001b854:	83 c4 10             	add    esp,0x10
c001b857:	5b                   	pop    ebx
c001b858:	5e                   	pop    esi
c001b859:	5f                   	pop    edi
c001b85a:	c3                   	ret    
c001b85b:	90                   	nop

c001b85c <ISO9660::exists(char const*)>:
c001b85c:	83 ec 28             	sub    esp,0x28
c001b85f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b863:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b867:	52                   	push   edx
c001b868:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b86b:	52                   	push   edx
c001b86c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b870:	52                   	push   edx
c001b871:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b875:	52                   	push   edx
c001b876:	50                   	push   eax
c001b877:	e8 b7 fe ff ff       	call   c001b733 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b87c:	83 c4 3c             	add    esp,0x3c
c001b87f:	c3                   	ret    

c001b880 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b880:	56                   	push   esi
c001b881:	53                   	push   ebx
c001b882:	83 ec 14             	sub    esp,0x14
c001b885:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b889:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b88d:	85 db                	test   ebx,ebx
c001b88f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b893:	0f 94 c2             	sete   dl
c001b896:	85 f6                	test   esi,esi
c001b898:	0f 94 c0             	sete   al
c001b89b:	08 c2                	or     dl,al
c001b89d:	75 68                	jne    c001b907 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b89f:	85 c9                	test   ecx,ecx
c001b8a1:	74 64                	je     c001b907 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b8a3:	83 ec 0c             	sub    esp,0xc
c001b8a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8ad:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b8b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8ba:	50                   	push   eax
c001b8bb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b8be:	50                   	push   eax
c001b8bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b8c3:	50                   	push   eax
c001b8c4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b8c8:	50                   	push   eax
c001b8c9:	51                   	push   ecx
c001b8ca:	e8 64 fe ff ff       	call   c001b733 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b8cf:	83 c4 20             	add    esp,0x20
c001b8d2:	ba 01 00 00 00       	mov    edx,0x1
c001b8d7:	84 c0                	test   al,al
c001b8d9:	74 31                	je     c001b90c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b8db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8df:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8e6:	89 03                	mov    DWORD PTR [ebx],eax
c001b8e8:	ba 00 00 00 00       	mov    edx,0x0
c001b8ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f1:	85 c0                	test   eax,eax
c001b8f3:	0f 95 06             	setne  BYTE PTR [esi]
c001b8f6:	74 14                	je     c001b90c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b8f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b8fe:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b905:	eb 05                	jmp    c001b90c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b907:	ba 04 00 00 00       	mov    edx,0x4
c001b90c:	83 c4 14             	add    esp,0x14
c001b90f:	89 d0                	mov    eax,edx
c001b911:	5b                   	pop    ebx
c001b912:	5e                   	pop    esi
c001b913:	c3                   	ret    

c001b914 <ISO9660::openDir(char const*, void**)>:
c001b914:	57                   	push   edi
c001b915:	56                   	push   esi
c001b916:	53                   	push   ebx
c001b917:	83 ec 10             	sub    esp,0x10
c001b91a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b91e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b922:	85 ff                	test   edi,edi
c001b924:	0f 84 95 00 00 00    	je     c001b9bf <ISO9660::openDir(char const*, void**)+0xab>
c001b92a:	85 f6                	test   esi,esi
c001b92c:	0f 84 8d 00 00 00    	je     c001b9bf <ISO9660::openDir(char const*, void**)+0xab>
c001b932:	83 ec 0c             	sub    esp,0xc
c001b935:	6a 1c                	push   0x1c
c001b937:	e8 0c 07 ff ff       	call   c000c048 <malloc>
c001b93c:	89 07                	mov    DWORD PTR [edi],eax
c001b93e:	89 c3                	mov    ebx,eax
c001b940:	59                   	pop    ecx
c001b941:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b945:	50                   	push   eax
c001b946:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b949:	50                   	push   eax
c001b94a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b94e:	50                   	push   eax
c001b94f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b953:	50                   	push   eax
c001b954:	56                   	push   esi
c001b955:	e8 d9 fd ff ff       	call   c001b733 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b95a:	83 c4 20             	add    esp,0x20
c001b95d:	84 c0                	test   al,al
c001b95f:	74 07                	je     c001b968 <ISO9660::openDir(char const*, void**)+0x54>
c001b961:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b966:	75 21                	jne    c001b989 <ISO9660::openDir(char const*, void**)+0x75>
c001b968:	0f b6 c0             	movzx  eax,al
c001b96b:	52                   	push   edx
c001b96c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b970:	50                   	push   eax
c001b971:	68 e2 2f 02 c0       	push   0xc0022fe2
c001b976:	e8 be 37 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001b97b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b97f:	83 c4 10             	add    esp,0x10
c001b982:	b8 01 00 00 00       	mov    eax,0x1
c001b987:	eb 3b                	jmp    c001b9c4 <ISO9660::openDir(char const*, void**)+0xb0>
c001b989:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b98d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b991:	89 03                	mov    DWORD PTR [ebx],eax
c001b993:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b99a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b99e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b9a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b9ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b9af:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b9b6:	8a 06                	mov    al,BYTE PTR [esi]
c001b9b8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b9bb:	31 c0                	xor    eax,eax
c001b9bd:	eb 05                	jmp    c001b9c4 <ISO9660::openDir(char const*, void**)+0xb0>
c001b9bf:	b8 04 00 00 00       	mov    eax,0x4
c001b9c4:	83 c4 10             	add    esp,0x10
c001b9c7:	5b                   	pop    ebx
c001b9c8:	5e                   	pop    esi
c001b9c9:	5f                   	pop    edi
c001b9ca:	c3                   	ret    
c001b9cb:	90                   	nop

c001b9cc <ISO9660::ISO9660()>:
c001b9cc:	83 ec 0c             	sub    esp,0xc
c001b9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d3:	83 ec 0c             	sub    esp,0xc
c001b9d6:	50                   	push   eax
c001b9d7:	e8 62 3a ff ff       	call   c000f43e <Filesystem::Filesystem()>
c001b9dc:	83 c4 10             	add    esp,0x10
c001b9df:	ba 08 30 02 c0       	mov    edx,0xc0023008
c001b9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e8:	89 10                	mov    DWORD PTR [eax],edx
c001b9ea:	90                   	nop
c001b9eb:	83 c4 0c             	add    esp,0xc
c001b9ee:	c3                   	ret    
c001b9ef:	90                   	nop

c001b9f0 <SoundChannel::~SoundChannel()>:
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b9fa:	83 ec 0c             	sub    esp,0xc
c001b9fd:	50                   	push   eax
c001b9fe:	e8 55 06 ff ff       	call   c000c058 <free>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	90                   	nop
c001ba07:	83 c4 0c             	add    esp,0xc
c001ba0a:	c3                   	ret    
c001ba0b:	90                   	nop

c001ba0c <SoundChannel::setSpeed(float)>:
c001ba0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba10:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001ba14:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001ba17:	c3                   	ret    

c001ba18 <SoundChannel::getSpeed()>:
c001ba18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba1c:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001ba1f:	c3                   	ret    

c001ba20 <SoundChannel::setVolume(int)>:
c001ba20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba24:	83 f8 64             	cmp    eax,0x64
c001ba27:	7e 05                	jle    c001ba2e <SoundChannel::setVolume(int)+0xe>
c001ba29:	b8 64 00 00 00       	mov    eax,0x64
c001ba2e:	85 c0                	test   eax,eax
c001ba30:	79 02                	jns    c001ba34 <SoundChannel::setVolume(int)+0x14>
c001ba32:	31 c0                	xor    eax,eax
c001ba34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba38:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001ba3b:	c3                   	ret    

c001ba3c <SoundChannel::getVolume()>:
c001ba3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba40:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ba43:	c3                   	ret    

c001ba44 <SoundChannel::pause()>:
c001ba44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba48:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001ba4c:	c3                   	ret    
c001ba4d:	90                   	nop

c001ba4e <SoundChannel::SoundChannel(int, int, int, int)>:
c001ba4e:	83 ec 1c             	sub    esp,0x1c
c001ba51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba55:	e8 ea ff ff ff       	call   c001ba44 <SoundChannel::pause()>
c001ba5a:	83 c4 04             	add    esp,0x4
c001ba5d:	6a 50                	push   0x50
c001ba5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba63:	e8 b8 ff ff ff       	call   c001ba20 <SoundChannel::setVolume(int)>
c001ba68:	83 c4 08             	add    esp,0x8
c001ba6b:	d9 e8                	fld1   
c001ba6d:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001ba71:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ba74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ba78:	e8 8f ff ff ff       	call   c001ba0c <SoundChannel::setSpeed(float)>
c001ba7d:	83 c4 08             	add    esp,0x8
c001ba80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba84:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ba88:	89 10                	mov    DWORD PTR [eax],edx
c001ba8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba92:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ba95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba9d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001baa0:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001baa5:	75 23                	jne    c001baca <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001baa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baab:	8b 10                	mov    edx,DWORD PTR [eax]
c001baad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bab1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bab4:	0f af c2             	imul   eax,edx
c001bab7:	85 c0                	test   eax,eax
c001bab9:	79 03                	jns    c001babe <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001babb:	83 c0 03             	add    eax,0x3
c001babe:	c1 f8 02             	sar    eax,0x2
c001bac1:	05 a0 0f 00 00       	add    eax,0xfa0
c001bac6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001baca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bace:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bad2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bad9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bae4:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001baeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baef:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001baf2:	c1 e0 02             	shl    eax,0x2
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	50                   	push   eax
c001baf9:	e8 4a 05 ff ff       	call   c000c048 <malloc>
c001bafe:	83 c4 10             	add    esp,0x10
c001bb01:	89 c2                	mov    edx,eax
c001bb03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb07:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bb0a:	83 ec 04             	sub    esp,0x4
c001bb0d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bb11:	50                   	push   eax
c001bb12:	6a 01                	push   0x1
c001bb14:	6a 04                	push   0x4
c001bb16:	e8 0e ce fe ff       	call   c0008929 <src_new>
c001bb1b:	83 c4 10             	add    esp,0x10
c001bb1e:	89 c2                	mov    edx,eax
c001bb20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb24:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bb27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb2b:	85 c0                	test   eax,eax
c001bb2d:	74 10                	je     c001bb3f <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001bb2f:	83 ec 0c             	sub    esp,0xc
c001bb32:	68 64 30 02 c0       	push   0xc0023064
c001bb37:	e8 e4 9d ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001bb3c:	83 c4 10             	add    esp,0x10
c001bb3f:	90                   	nop
c001bb40:	83 c4 1c             	add    esp,0x1c
c001bb43:	c3                   	ret    

c001bb44 <SoundChannel::play()>:
c001bb44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb48:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bb4c:	c3                   	ret    
c001bb4d:	90                   	nop

c001bb4e <SoundChannel::paused()>:
c001bb4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb52:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bb55:	c3                   	ret    

c001bb56 <SoundChannel::getSampleRate()>:
c001bb56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb5c:	c3                   	ret    
c001bb5d:	90                   	nop

c001bb5e <SoundChannel::getBits()>:
c001bb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bb65:	c3                   	ret    

c001bb66 <SoundChannel::getBufferUsed()>:
c001bb66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb6a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bb6d:	c3                   	ret    

c001bb6e <SoundChannel::getBufferSize()>:
c001bb6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb72:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bb75:	c3                   	ret    

c001bb76 <SoundChannel::unbuffer(float*, int, int)>:
c001bb76:	53                   	push   ebx
c001bb77:	83 ec 40             	sub    esp,0x40
c001bb7a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bb7e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bb86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bb89:	db 03                	fild   DWORD PTR [ebx]
c001bb8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb8f:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bb93:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bb96:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bb99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb9d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bba1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bba5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bba9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bbad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbb1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bbb5:	50                   	push   eax
c001bbb6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bbb9:	e8 25 ca fe ff       	call   c00085e3 <src_process>
c001bbbe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bbc2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bbc5:	83 c4 0c             	add    esp,0xc
c001bbc8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bbcb:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bbce:	29 d0                	sub    eax,edx
c001bbd0:	c1 e0 02             	shl    eax,0x2
c001bbd3:	50                   	push   eax
c001bbd4:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bbd7:	50                   	push   eax
c001bbd8:	51                   	push   ecx
c001bbd9:	e8 9a 4a fe ff       	call   c0000678 <memmove>
c001bbde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bbe2:	83 c4 48             	add    esp,0x48
c001bbe5:	5b                   	pop    ebx
c001bbe6:	c3                   	ret    
c001bbe7:	90                   	nop

c001bbe8 <SoundChannel::buffer8(unsigned char*, int)>:
c001bbe8:	53                   	push   ebx
c001bbe9:	31 c0                	xor    eax,eax
c001bbeb:	83 ec 08             	sub    esp,0x8
c001bbee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbf2:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bbf5:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bbf8:	74 35                	je     c001bc2f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bbfa:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bbfe:	7d 2f                	jge    c001bc2f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bc00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bc04:	d9 05 80 30 02 c0    	fld    DWORD PTR ds:0xc0023080
c001bc0a:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bc0e:	40                   	inc    eax
c001bc0f:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bc14:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bc17:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bc1b:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bc1e:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bc21:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bc24:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bc27:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bc2a:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bc2d:	eb c9                	jmp    c001bbf8 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bc2f:	83 c4 08             	add    esp,0x8
c001bc32:	5b                   	pop    ebx
c001bc33:	c3                   	ret    

c001bc34 <SoundDevice::SoundDevice(char const*)>:
c001bc34:	83 ec 1c             	sub    esp,0x1c
c001bc37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc3b:	83 ec 08             	sub    esp,0x8
c001bc3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc42:	50                   	push   eax
c001bc43:	e8 ec 4a ff ff       	call   c0010734 <Device::Device(char const*)>
c001bc48:	83 c4 10             	add    esp,0x10
c001bc4b:	ba 8c 30 02 c0       	mov    edx,0xc002308c
c001bc50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc54:	89 10                	mov    DWORD PTR [eax],edx
c001bc56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc5a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bc64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc68:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bc72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc7a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bc7f:	7f 19                	jg     c001bc9a <SoundDevice::SoundDevice(char const*)+0x66>
c001bc81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc89:	83 c2 54             	add    edx,0x54
c001bc8c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bc94:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bc98:	eb e0                	jmp    c001bc7a <SoundDevice::SoundDevice(char const*)+0x46>
c001bc9a:	90                   	nop
c001bc9b:	83 c4 1c             	add    esp,0x1c
c001bc9e:	c3                   	ret    
c001bc9f:	90                   	nop

c001bca0 <SoundDevice::~SoundDevice()>:
c001bca0:	53                   	push   ebx
c001bca1:	83 ec 18             	sub    esp,0x18
c001bca4:	ba 8c 30 02 c0       	mov    edx,0xc002308c
c001bca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcad:	89 10                	mov    DWORD PTR [eax],edx
c001bcaf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bcb7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bcbc:	7f 46                	jg     c001bd04 <SoundDevice::~SoundDevice()+0x64>
c001bcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcc6:	83 c2 54             	add    edx,0x54
c001bcc9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bccd:	85 c0                	test   eax,eax
c001bccf:	74 2d                	je     c001bcfe <SoundDevice::~SoundDevice()+0x5e>
c001bcd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcd9:	83 c2 54             	add    edx,0x54
c001bcdc:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bce0:	85 db                	test   ebx,ebx
c001bce2:	74 1a                	je     c001bcfe <SoundDevice::~SoundDevice()+0x5e>
c001bce4:	83 ec 0c             	sub    esp,0xc
c001bce7:	53                   	push   ebx
c001bce8:	e8 03 fd ff ff       	call   c001b9f0 <SoundChannel::~SoundChannel()>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	83 ec 08             	sub    esp,0x8
c001bcf3:	6a 2c                	push   0x2c
c001bcf5:	53                   	push   ebx
c001bcf6:	e8 5e 33 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001bcfb:	83 c4 10             	add    esp,0x10
c001bcfe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bd02:	eb b3                	jmp    c001bcb7 <SoundDevice::~SoundDevice()+0x17>
c001bd04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd08:	83 ec 0c             	sub    esp,0xc
c001bd0b:	50                   	push   eax
c001bd0c:	e8 d5 46 ff ff       	call   c00103e6 <Device::~Device()>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	90                   	nop
c001bd15:	83 c4 18             	add    esp,0x18
c001bd18:	5b                   	pop    ebx
c001bd19:	c3                   	ret    

c001bd1a <SoundDevice::~SoundDevice()>:
c001bd1a:	83 ec 0c             	sub    esp,0xc
c001bd1d:	83 ec 0c             	sub    esp,0xc
c001bd20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd24:	e8 77 ff ff ff       	call   c001bca0 <SoundDevice::~SoundDevice()>
c001bd29:	83 c4 10             	add    esp,0x10
c001bd2c:	83 ec 08             	sub    esp,0x8
c001bd2f:	68 e4 01 00 00       	push   0x1e4
c001bd34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bd38:	e8 1c 33 ff ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001bd3d:	83 c4 10             	add    esp,0x10
c001bd40:	83 c4 0c             	add    esp,0xc
c001bd43:	c3                   	ret    

c001bd44 <SoundDevice::getFreeChannelNum()>:
c001bd44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd48:	31 c0                	xor    eax,eax
c001bd4a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bd52:	74 09                	je     c001bd5d <SoundDevice::getFreeChannelNum()+0x19>
c001bd54:	40                   	inc    eax
c001bd55:	83 f8 20             	cmp    eax,0x20
c001bd58:	75 f0                	jne    c001bd4a <SoundDevice::getFreeChannelNum()+0x6>
c001bd5a:	83 c8 ff             	or     eax,0xffffffff
c001bd5d:	c3                   	ret    

c001bd5e <SoundDevice::addChannel(SoundChannel*)>:
c001bd5e:	56                   	push   esi
c001bd5f:	53                   	push   ebx
c001bd60:	51                   	push   ecx
c001bd61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd69:	53                   	push   ebx
c001bd6a:	e8 d5 ff ff ff       	call   c001bd44 <SoundDevice::getFreeChannelNum()>
c001bd6f:	5a                   	pop    edx
c001bd70:	83 f8 ff             	cmp    eax,0xffffffff
c001bd73:	74 51                	je     c001bdc6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bd75:	85 f6                	test   esi,esi
c001bd77:	74 4d                	je     c001bdc6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bd79:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bd80:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bd87:	75 30                	jne    c001bdb9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bd89:	83 ec 0c             	sub    esp,0xc
c001bd8c:	56                   	push   esi
c001bd8d:	e8 c4 fd ff ff       	call   c001bb56 <SoundChannel::getSampleRate()>
c001bd92:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bd98:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd9b:	e8 be fd ff ff       	call   c001bb5e <SoundChannel::getBits()>
c001bda0:	83 c4 0c             	add    esp,0xc
c001bda3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bda9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdab:	50                   	push   eax
c001bdac:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bdb2:	53                   	push   ebx
c001bdb3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bdb6:	83 c4 10             	add    esp,0x10
c001bdb9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bdbf:	b8 01 00 00 00       	mov    eax,0x1
c001bdc4:	eb 03                	jmp    c001bdc9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bdc6:	83 c8 ff             	or     eax,0xffffffff
c001bdc9:	5a                   	pop    edx
c001bdca:	5b                   	pop    ebx
c001bdcb:	5e                   	pop    esi
c001bdcc:	c3                   	ret    
c001bdcd:	90                   	nop

c001bdce <SoundDevice::removeChannel(int)>:
c001bdce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdd6:	83 fa 1f             	cmp    edx,0x1f
c001bdd9:	77 23                	ja     c001bdfe <SoundDevice::removeChannel(int)+0x30>
c001bddb:	8d 14 90             	lea    edx,[eax+edx*4]
c001bdde:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bde5:	74 17                	je     c001bdfe <SoundDevice::removeChannel(int)+0x30>
c001bde7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bdf1:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bdf7:	75 05                	jne    c001bdfe <SoundDevice::removeChannel(int)+0x30>
c001bdf9:	8b 00                	mov    eax,DWORD PTR [eax]
c001bdfb:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bdfe:	c3                   	ret    
c001bdff:	90                   	nop

c001be00 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001be00:	56                   	push   esi
c001be01:	53                   	push   ebx
c001be02:	31 db                	xor    ebx,ebx
c001be04:	83 ec 14             	sub    esp,0x14
c001be07:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001be0b:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001be0f:	7d 55                	jge    c001be66 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001be11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be15:	d9 e8                	fld1   
c001be17:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001be1a:	d8 0d bc 30 02 c0    	fmul   DWORD PTR ds:0xc00230bc
c001be20:	d8 0d c0 30 02 c0    	fmul   DWORD PTR ds:0xc00230c0
c001be26:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001be2a:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001be2e:	d8 15 c4 30 02 c0    	fcom   DWORD PTR ds:0xc00230c4
c001be34:	df e0                	fnstsw ax
c001be36:	9e                   	sahf   
c001be37:	72 08                	jb     c001be41 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001be39:	dd d8                	fstp   st(0)
c001be3b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001be3f:	eb 22                	jmp    c001be63 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001be41:	d9 ee                	fldz   
c001be43:	d8 d9                	fcomp  st(1)
c001be45:	df e0                	fnstsw ax
c001be47:	9e                   	sahf   
c001be48:	72 08                	jb     c001be52 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001be4a:	dd d8                	fstp   st(0)
c001be4c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001be50:	eb 11                	jmp    c001be63 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001be52:	83 ec 10             	sub    esp,0x10
c001be55:	d9 1c 24             	fstp   DWORD PTR [esp]
c001be58:	e8 ef 35 00 00       	call   c001f44c <lrintf>
c001be5d:	83 c4 10             	add    esp,0x10
c001be60:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001be63:	43                   	inc    ebx
c001be64:	eb a5                	jmp    c001be0b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001be66:	83 c4 14             	add    esp,0x14
c001be69:	5b                   	pop    ebx
c001be6a:	5e                   	pop    esi
c001be6b:	c3                   	ret    

c001be6c <SoundDevice::getAudio(int, float*, float*)>:
c001be6c:	55                   	push   ebp
c001be6d:	57                   	push   edi
c001be6e:	56                   	push   esi
c001be6f:	53                   	push   ebx
c001be70:	31 db                	xor    ebx,ebx
c001be72:	83 ec 20             	sub    esp,0x20
c001be75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be79:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001be7d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001be81:	c1 e0 02             	shl    eax,0x2
c001be84:	50                   	push   eax
c001be85:	6a 00                	push   0x0
c001be87:	55                   	push   ebp
c001be88:	e8 59 48 fe ff       	call   c00006e6 <memset>
c001be8d:	83 c4 10             	add    esp,0x10
c001be90:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001be94:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001be9b:	85 c0                	test   eax,eax
c001be9d:	0f 84 94 00 00 00    	je     c001bf37 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001bea3:	83 ec 0c             	sub    esp,0xc
c001bea6:	50                   	push   eax
c001bea7:	e8 a2 fc ff ff       	call   c001bb4e <SoundChannel::paused()>
c001beac:	83 c4 10             	add    esp,0x10
c001beaf:	84 c0                	test   al,al
c001beb1:	0f 85 80 00 00 00    	jne    c001bf37 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001beb7:	83 ec 0c             	sub    esp,0xc
c001beba:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bec1:	e8 76 fb ff ff       	call   c001ba3c <SoundChannel::getVolume()>
c001bec6:	83 c4 10             	add    esp,0x10
c001bec9:	85 c0                	test   eax,eax
c001becb:	74 6a                	je     c001bf37 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001becd:	83 ec 0c             	sub    esp,0xc
c001bed0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bed7:	e8 60 fb ff ff       	call   c001ba3c <SoundChannel::getVolume()>
c001bedc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bee0:	d9 05 c8 30 02 c0    	fld    DWORD PTR ds:0xc00230c8
c001bee6:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001beea:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001beee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001bef2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001bef8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001befc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bf03:	e8 6e fc ff ff       	call   c001bb76 <SoundChannel::unbuffer(float*, int, int)>
c001bf08:	83 c4 20             	add    esp,0x20
c001bf0b:	31 d2                	xor    edx,edx
c001bf0d:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bf11:	39 c2                	cmp    edx,eax
c001bf13:	7d 1a                	jge    c001bf2f <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bf15:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001bf19:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001bf1c:	d8 c9                	fmul   st,st(1)
c001bf1e:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001bf24:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001bf28:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001bf2c:	42                   	inc    edx
c001bf2d:	eb e2                	jmp    c001bf11 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001bf2f:	dd d8                	fstp   st(0)
c001bf31:	39 c7                	cmp    edi,eax
c001bf33:	7e 02                	jle    c001bf37 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001bf35:	89 c7                	mov    edi,eax
c001bf37:	43                   	inc    ebx
c001bf38:	83 fb 20             	cmp    ebx,0x20
c001bf3b:	0f 85 53 ff ff ff    	jne    c001be94 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001bf41:	83 c4 1c             	add    esp,0x1c
c001bf44:	89 f8                	mov    eax,edi
c001bf46:	5b                   	pop    ebx
c001bf47:	5e                   	pop    esi
c001bf48:	5f                   	pop    edi
c001bf49:	5d                   	pop    ebp
c001bf4a:	c3                   	ret    
c001bf4b:	90                   	nop

c001bf4c <PCI::open(int, int, void*)>:
c001bf4c:	83 ec 18             	sub    esp,0x18
c001bf4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf53:	8b 10                	mov    edx,DWORD PTR [eax]
c001bf55:	50                   	push   eax
c001bf56:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bf59:	31 c0                	xor    eax,eax
c001bf5b:	83 c4 1c             	add    esp,0x1c
c001bf5e:	c3                   	ret    
c001bf5f:	90                   	nop

c001bf60 <PCI::close(int, int, void*)>:
c001bf60:	31 c0                	xor    eax,eax
c001bf62:	c3                   	ret    
c001bf63:	90                   	nop

c001bf64 <PCI::PCI()>:
c001bf64:	83 ec 0c             	sub    esp,0xc
c001bf67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf6b:	83 ec 08             	sub    esp,0x8
c001bf6e:	68 cc 30 02 c0       	push   0xc00230cc
c001bf73:	50                   	push   eax
c001bf74:	e8 47 3e ff ff       	call   c000fdc0 <Bus::Bus(char const*)>
c001bf79:	83 c4 10             	add    esp,0x10
c001bf7c:	ba 58 31 02 c0       	mov    edx,0xc0023158
c001bf81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf85:	89 10                	mov    DWORD PTR [eax],edx
c001bf87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bf91:	0f b6 d0             	movzx  edx,al
c001bf94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf98:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bf9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bfa9:	0f b6 d0             	movzx  edx,al
c001bfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb0:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bfbf:	8d 50 01             	lea    edx,[eax+0x1]
c001bfc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bfc6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bfcc:	0f b6 d0             	movzx  edx,al
c001bfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bfd7:	83 c9 c0             	or     ecx,0xffffffc0
c001bfda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bfde:	90                   	nop
c001bfdf:	83 c4 0c             	add    esp,0xc
c001bfe2:	c3                   	ret    
c001bfe3:	90                   	nop

c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bfe4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bfe8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfed:	89 ca                	mov    edx,ecx
c001bfef:	c1 e0 10             	shl    eax,0x10
c001bff2:	81 e2 fc 00 00 00    	and    edx,0xfc
c001bff8:	09 d0                	or     eax,edx
c001bffa:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001bfff:	c1 e2 08             	shl    edx,0x8
c001c002:	09 d0                	or     eax,edx
c001c004:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c009:	c1 e2 0b             	shl    edx,0xb
c001c00c:	09 d0                	or     eax,edx
c001c00e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c013:	0d 00 00 00 80       	or     eax,0x80000000
c001c018:	ef                   	out    dx,eax
c001c019:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c01e:	ed                   	in     eax,dx
c001c01f:	83 e1 02             	and    ecx,0x2
c001c022:	0f b6 c9             	movzx  ecx,cl
c001c025:	c1 e1 03             	shl    ecx,0x3
c001c028:	d3 e8                	shr    eax,cl
c001c02a:	c3                   	ret    
c001c02b:	90                   	nop

c001c02c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c02c:	6a 00                	push   0x0
c001c02e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c033:	50                   	push   eax
c001c034:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c039:	50                   	push   eax
c001c03a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c03f:	50                   	push   eax
c001c040:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c044:	e8 9b ff ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c049:	83 c4 14             	add    esp,0x14
c001c04c:	c3                   	ret    
c001c04d:	90                   	nop

c001c04e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c04e:	6a 0e                	push   0xe
c001c050:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c055:	50                   	push   eax
c001c056:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c05b:	50                   	push   eax
c001c05c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c061:	50                   	push   eax
c001c062:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c066:	e8 79 ff ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c06b:	83 c4 14             	add    esp,0x14
c001c06e:	0f b6 c0             	movzx  eax,al
c001c071:	c3                   	ret    

c001c072 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c072:	55                   	push   ebp
c001c073:	57                   	push   edi
c001c074:	56                   	push   esi
c001c075:	53                   	push   ebx
c001c076:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c07b:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c080:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c085:	6a 0a                	push   0xa
c001c087:	56                   	push   esi
c001c088:	55                   	push   ebp
c001c089:	57                   	push   edi
c001c08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c08e:	e8 51 ff ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c093:	6a 0a                	push   0xa
c001c095:	89 c3                	mov    ebx,eax
c001c097:	56                   	push   esi
c001c098:	0f b6 db             	movzx  ebx,bl
c001c09b:	55                   	push   ebp
c001c09c:	57                   	push   edi
c001c09d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c0a1:	e8 3e ff ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0a6:	83 c4 28             	add    esp,0x28
c001c0a9:	25 00 ff 00 00       	and    eax,0xff00
c001c0ae:	09 d8                	or     eax,ebx
c001c0b0:	5b                   	pop    ebx
c001c0b1:	5e                   	pop    esi
c001c0b2:	5f                   	pop    edi
c001c0b3:	5d                   	pop    ebp
c001c0b4:	c3                   	ret    
c001c0b5:	90                   	nop

c001c0b6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c0b6:	6a 08                	push   0x8
c001c0b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0bd:	50                   	push   eax
c001c0be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0c3:	50                   	push   eax
c001c0c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0c9:	50                   	push   eax
c001c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0ce:	e8 11 ff ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0d3:	83 c4 14             	add    esp,0x14
c001c0d6:	0f b6 c4             	movzx  eax,ah
c001c0d9:	c3                   	ret    

c001c0da <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c0da:	6a 08                	push   0x8
c001c0dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0e1:	50                   	push   eax
c001c0e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0e7:	50                   	push   eax
c001c0e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c0ed:	50                   	push   eax
c001c0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c0f2:	e8 ed fe ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0f7:	83 c4 14             	add    esp,0x14
c001c0fa:	c3                   	ret    
c001c0fb:	90                   	nop

c001c0fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c0fc:	6a 3c                	push   0x3c
c001c0fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c103:	50                   	push   eax
c001c104:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c109:	50                   	push   eax
c001c10a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c10f:	50                   	push   eax
c001c110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c114:	e8 cb fe ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c119:	83 c4 14             	add    esp,0x14
c001c11c:	c3                   	ret    
c001c11d:	90                   	nop

c001c11e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c11e:	6a 18                	push   0x18
c001c120:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c125:	50                   	push   eax
c001c126:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c12b:	50                   	push   eax
c001c12c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c131:	50                   	push   eax
c001c132:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c136:	e8 a9 fe ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c13b:	83 c4 14             	add    esp,0x14
c001c13e:	0f b6 c4             	movzx  eax,ah
c001c141:	c3                   	ret    

c001c142 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c142:	55                   	push   ebp
c001c143:	57                   	push   edi
c001c144:	56                   	push   esi
c001c145:	53                   	push   ebx
c001c146:	50                   	push   eax
c001c147:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c14b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c150:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c155:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c15a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c161:	8d 43 12             	lea    eax,[ebx+0x12]
c001c164:	83 c3 10             	add    ebx,0x10
c001c167:	0f b6 c0             	movzx  eax,al
c001c16a:	0f b6 db             	movzx  ebx,bl
c001c16d:	50                   	push   eax
c001c16e:	51                   	push   ecx
c001c16f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c173:	57                   	push   edi
c001c174:	55                   	push   ebp
c001c175:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c179:	e8 66 fe ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c17e:	53                   	push   ebx
c001c17f:	89 c6                	mov    esi,eax
c001c181:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c185:	c1 e6 10             	shl    esi,0x10
c001c188:	51                   	push   ecx
c001c189:	57                   	push   edi
c001c18a:	55                   	push   ebp
c001c18b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c18f:	e8 50 fe ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c194:	83 c4 2c             	add    esp,0x2c
c001c197:	0f b7 c0             	movzx  eax,ax
c001c19a:	5b                   	pop    ebx
c001c19b:	09 f0                	or     eax,esi
c001c19d:	5e                   	pop    esi
c001c19e:	5f                   	pop    edi
c001c19f:	5d                   	pop    ebp
c001c1a0:	c3                   	ret    
c001c1a1:	90                   	nop

c001c1a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c1a2:	53                   	push   ebx
c001c1a3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c1a8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c1ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1b1:	c1 e1 10             	shl    ecx,0x10
c001c1b4:	25 fc 00 00 00       	and    eax,0xfc
c001c1b9:	09 c1                	or     ecx,eax
c001c1bb:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1c0:	c1 e0 08             	shl    eax,0x8
c001c1c3:	09 c1                	or     ecx,eax
c001c1c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c1ca:	c1 e0 0b             	shl    eax,0xb
c001c1cd:	09 c1                	or     ecx,eax
c001c1cf:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c1d5:	89 c8                	mov    eax,ecx
c001c1d7:	ef                   	out    dx,eax
c001c1d8:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1dd:	ed                   	in     eax,dx
c001c1de:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c1e3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c1e8:	74 0a                	je     c001c1f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c1ea:	0f b7 d8             	movzx  ebx,ax
c001c1ed:	89 d0                	mov    eax,edx
c001c1ef:	c1 e0 10             	shl    eax,0x10
c001c1f2:	eb 05                	jmp    c001c1f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c1f4:	66 31 c0             	xor    ax,ax
c001c1f7:	89 d3                	mov    ebx,edx
c001c1f9:	09 c3                	or     ebx,eax
c001c1fb:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c200:	89 c8                	mov    eax,ecx
c001c202:	ef                   	out    dx,eax
c001c203:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c208:	89 d8                	mov    eax,ebx
c001c20a:	ef                   	out    dx,eax
c001c20b:	5b                   	pop    ebx
c001c20c:	c3                   	ret    
c001c20d:	90                   	nop

c001c20e <PCI::checkBus(unsigned char)>:
c001c20e:	56                   	push   esi
c001c20f:	53                   	push   ebx
c001c210:	31 db                	xor    ebx,ebx
c001c212:	51                   	push   ecx
c001c213:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c218:	52                   	push   edx
c001c219:	53                   	push   ebx
c001c21a:	43                   	inc    ebx
c001c21b:	56                   	push   esi
c001c21c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c220:	e8 29 03 00 00       	call   c001c54e <PCI::checkDevice(unsigned char, unsigned char)>
c001c225:	83 c4 10             	add    esp,0x10
c001c228:	83 fb 20             	cmp    ebx,0x20
c001c22b:	75 eb                	jne    c001c218 <PCI::checkBus(unsigned char)+0xa>
c001c22d:	58                   	pop    eax
c001c22e:	5b                   	pop    ebx
c001c22f:	5e                   	pop    esi
c001c230:	c3                   	ret    
c001c231:	90                   	nop

c001c232 <PCI::foundDevice(PCIDeviceInfo)>:
c001c232:	55                   	push   ebp
c001c233:	57                   	push   edi
c001c234:	56                   	push   esi
c001c235:	53                   	push   ebx
c001c236:	83 ec 1c             	sub    esp,0x1c
c001c239:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c23d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c243:	0f 84 51 01 00 00    	je     c001c39a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c249:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c24d:	66 81 f9 06 04       	cmp    cx,0x406
c001c252:	75 2c                	jne    c001c280 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c254:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c259:	50                   	push   eax
c001c25a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c25f:	50                   	push   eax
c001c260:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c265:	50                   	push   eax
c001c266:	56                   	push   esi
c001c267:	e8 b2 fe ff ff       	call   c001c11e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c26c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c270:	0f b6 c0             	movzx  eax,al
c001c273:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c277:	83 c4 2c             	add    esp,0x2c
c001c27a:	5b                   	pop    ebx
c001c27b:	5e                   	pop    esi
c001c27c:	5f                   	pop    edi
c001c27d:	5d                   	pop    ebp
c001c27e:	eb 8e                	jmp    c001c20e <PCI::checkBus(unsigned char)>
c001c280:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c284:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c28a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c28e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c292:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c296:	88 d3                	mov    bl,dl
c001c298:	85 c0                	test   eax,eax
c001c29a:	74 33                	je     c001c2cf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c29c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c29f:	85 d2                	test   edx,edx
c001c2a1:	74 28                	je     c001c2cb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c2a3:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c2a9:	31 ef                	xor    edi,ebp
c001c2ab:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c2b1:	75 18                	jne    c001c2cb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c2b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c2b7:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c2bd:	75 0c                	jne    c001c2cb <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c2bf:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c2c5:	0f 84 cf 00 00 00    	je     c001c39a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c2cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2cd:	eb c9                	jmp    c001c298 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c2cf:	66 81 f9 01 06       	cmp    cx,0x601
c001c2d4:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c2d8:	75 18                	jne    c001c2f2 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c2da:	83 ec 0c             	sub    esp,0xc
c001c2dd:	68 58 01 00 00       	push   0x158
c001c2e2:	e8 63 2d ff ff       	call   c000f04a <operator new(unsigned long)>
c001c2e7:	59                   	pop    ecx
c001c2e8:	89 c5                	mov    ebp,eax
c001c2ea:	5f                   	pop    edi
c001c2eb:	68 d4 30 02 c0       	push   0xc00230d4
c001c2f0:	eb 7d                	jmp    c001c36f <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c2f2:	66 81 f9 01 01       	cmp    cx,0x101
c001c2f7:	75 60                	jne    c001c359 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c2f9:	83 ec 0c             	sub    esp,0xc
c001c2fc:	68 70 02 00 00       	push   0x270
c001c301:	e8 44 2d ff ff       	call   c000f04a <operator new(unsigned long)>
c001c306:	89 04 24             	mov    DWORD PTR [esp],eax
c001c309:	89 c5                	mov    ebp,eax
c001c30b:	e8 02 03 00 00       	call   c001c612 <IDE::IDE()>
c001c310:	58                   	pop    eax
c001c311:	5a                   	pop    edx
c001c312:	55                   	push   ebp
c001c313:	56                   	push   esi
c001c314:	e8 2b 42 ff ff       	call   c0010544 <Device::addChild(Device*)>
c001c319:	83 ec 1c             	sub    esp,0x1c
c001c31c:	b9 09 00 00 00       	mov    ecx,0x9
c001c321:	fc                   	cld    
c001c322:	89 e7                	mov    edi,esp
c001c324:	89 de                	mov    esi,ebx
c001c326:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c328:	55                   	push   ebp
c001c329:	e8 f0 40 ff ff       	call   c001041e <Device::preOpenPCI(PCIDeviceInfo)>
c001c32e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c331:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c335:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c33d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c345:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c34d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c350:	83 c4 4c             	add    esp,0x4c
c001c353:	5b                   	pop    ebx
c001c354:	5e                   	pop    esi
c001c355:	5f                   	pop    edi
c001c356:	5d                   	pop    ebp
c001c357:	ff e0                	jmp    eax
c001c359:	83 ec 0c             	sub    esp,0xc
c001c35c:	68 58 01 00 00       	push   0x158
c001c361:	e8 e4 2c ff ff       	call   c000f04a <operator new(unsigned long)>
c001c366:	59                   	pop    ecx
c001c367:	89 c5                	mov    ebp,eax
c001c369:	5f                   	pop    edi
c001c36a:	68 f3 30 02 c0       	push   0xc00230f3
c001c36f:	55                   	push   ebp
c001c370:	e8 bb 44 ff ff       	call   c0010830 <DriverlessDevice::DriverlessDevice(char const*)>
c001c375:	58                   	pop    eax
c001c376:	5a                   	pop    edx
c001c377:	55                   	push   ebp
c001c378:	56                   	push   esi
c001c379:	e8 c6 41 ff ff       	call   c0010544 <Device::addChild(Device*)>
c001c37e:	b9 09 00 00 00       	mov    ecx,0x9
c001c383:	fc                   	cld    
c001c384:	89 df                	mov    edi,ebx
c001c386:	89 de                	mov    esi,ebx
c001c388:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c38a:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c38e:	83 c4 2c             	add    esp,0x2c
c001c391:	5b                   	pop    ebx
c001c392:	5e                   	pop    esi
c001c393:	5f                   	pop    edi
c001c394:	5d                   	pop    ebp
c001c395:	e9 84 40 ff ff       	jmp    c001041e <Device::preOpenPCI(PCIDeviceInfo)>
c001c39a:	83 c4 1c             	add    esp,0x1c
c001c39d:	5b                   	pop    ebx
c001c39e:	5e                   	pop    esi
c001c39f:	5f                   	pop    edi
c001c3a0:	5d                   	pop    ebp
c001c3a1:	c3                   	ret    

c001c3a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c3a2:	55                   	push   ebp
c001c3a3:	57                   	push   edi
c001c3a4:	56                   	push   esi
c001c3a5:	53                   	push   ebx
c001c3a6:	83 ec 5c             	sub    esp,0x5c
c001c3a9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c3ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c3b1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c3b5:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c3ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c3be:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c3c2:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c3c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c3cb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c3d0:	6a 0c                	push   0xc
c001c3d2:	55                   	push   ebp
c001c3d3:	53                   	push   ebx
c001c3d4:	57                   	push   edi
c001c3d5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c3dc:	e8 03 fc ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3e1:	55                   	push   ebp
c001c3e2:	53                   	push   ebx
c001c3e3:	57                   	push   edi
c001c3e4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c3eb:	e8 82 fc ff ff       	call   c001c072 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c3f0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c3f5:	83 c4 24             	add    esp,0x24
c001c3f8:	55                   	push   ebp
c001c3f9:	53                   	push   ebx
c001c3fa:	57                   	push   edi
c001c3fb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c3ff:	e8 f8 fc ff ff       	call   c001c0fc <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c404:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c408:	6a 3c                	push   0x3c
c001c40a:	55                   	push   ebp
c001c40b:	53                   	push   ebx
c001c40c:	57                   	push   edi
c001c40d:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c414:	e8 cb fb ff ff       	call   c001bfe4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c419:	0f b6 c4             	movzx  eax,ah
c001c41c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c420:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c424:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c428:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001c42d:	83 c4 24             	add    esp,0x24
c001c430:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c436:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c43d:	74 6c                	je     c001c4ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c43f:	31 f6                	xor    esi,esi
c001c441:	8b 15 c8 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243c8
c001c447:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c44d:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c453:	7e 56                	jle    c001c4ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c455:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c458:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c45f:	39 cb                	cmp    ebx,ecx
c001c461:	75 45                	jne    c001c4a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c463:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c46a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c46e:	75 38                	jne    c001c4a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c470:	83 ec 0c             	sub    esp,0xc
c001c473:	68 0d 31 02 c0       	push   0xc002310d
c001c478:	e8 bc 2c ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001c47d:	8b 15 c8 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243c8
c001c483:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c489:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c491:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c495:	52                   	push   edx
c001c496:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c49a:	53                   	push   ebx
c001c49b:	68 32 31 02 c0       	push   0xc0023132
c001c4a0:	e8 94 2c ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001c4a5:	83 c4 20             	add    esp,0x20
c001c4a8:	46                   	inc    esi
c001c4a9:	eb 96                	jmp    c001c441 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c4ab:	31 d2                	xor    edx,edx
c001c4ad:	83 ec 0c             	sub    esp,0xc
c001c4b0:	55                   	push   ebp
c001c4b1:	53                   	push   ebx
c001c4b2:	57                   	push   edi
c001c4b3:	52                   	push   edx
c001c4b4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c4b8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c4bf:	e8 7e fc ff ff       	call   c001c142 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c4c4:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c4c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c4cc:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c4d0:	42                   	inc    edx
c001c4d1:	83 c4 20             	add    esp,0x20
c001c4d4:	83 fa 06             	cmp    edx,0x6
c001c4d7:	75 d4                	jne    c001c4ad <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c4d9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c4dd:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c4e1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c4e5:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c4e9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c4ed:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c4f1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c4f6:	86 e0                	xchg   al,ah
c001c4f8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c4fd:	55                   	push   ebp
c001c4fe:	53                   	push   ebx
c001c4ff:	57                   	push   edi
c001c500:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c504:	e8 ad fb ff ff       	call   c001c0b6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c509:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c50d:	55                   	push   ebp
c001c50e:	53                   	push   ebx
c001c50f:	57                   	push   edi
c001c510:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c517:	e8 10 fb ff ff       	call   c001c02c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c524:	b9 09 00 00 00       	mov    ecx,0x9
c001c529:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c52d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c531:	fc                   	cld    
c001c532:	89 e7                	mov    edi,esp
c001c534:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c536:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c53d:	e8 f0 fc ff ff       	call   c001c232 <PCI::foundDevice(PCIDeviceInfo)>
c001c542:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c548:	5b                   	pop    ebx
c001c549:	5e                   	pop    esi
c001c54a:	5f                   	pop    edi
c001c54b:	5d                   	pop    ebp
c001c54c:	c3                   	ret    
c001c54d:	90                   	nop

c001c54e <PCI::checkDevice(unsigned char, unsigned char)>:
c001c54e:	55                   	push   ebp
c001c54f:	57                   	push   edi
c001c550:	56                   	push   esi
c001c551:	53                   	push   ebx
c001c552:	83 ec 0c             	sub    esp,0xc
c001c555:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c559:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c55e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c563:	6a 00                	push   0x0
c001c565:	56                   	push   esi
c001c566:	57                   	push   edi
c001c567:	55                   	push   ebp
c001c568:	e8 bf fa ff ff       	call   c001c02c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c56d:	6a 00                	push   0x0
c001c56f:	56                   	push   esi
c001c570:	57                   	push   edi
c001c571:	55                   	push   ebp
c001c572:	e8 2b fe ff ff       	call   c001c3a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c577:	83 c4 20             	add    esp,0x20
c001c57a:	6a 00                	push   0x0
c001c57c:	56                   	push   esi
c001c57d:	57                   	push   edi
c001c57e:	55                   	push   ebp
c001c57f:	e8 ca fa ff ff       	call   c001c04e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c584:	83 c4 10             	add    esp,0x10
c001c587:	84 c0                	test   al,al
c001c589:	79 27                	jns    c001c5b2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c58b:	bb 01 00 00 00       	mov    ebx,0x1
c001c590:	53                   	push   ebx
c001c591:	56                   	push   esi
c001c592:	57                   	push   edi
c001c593:	55                   	push   ebp
c001c594:	e8 93 fa ff ff       	call   c001c02c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c599:	83 c4 10             	add    esp,0x10
c001c59c:	66 40                	inc    ax
c001c59e:	74 0c                	je     c001c5ac <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c5a0:	53                   	push   ebx
c001c5a1:	56                   	push   esi
c001c5a2:	57                   	push   edi
c001c5a3:	55                   	push   ebp
c001c5a4:	e8 f9 fd ff ff       	call   c001c3a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	43                   	inc    ebx
c001c5ad:	83 fb 08             	cmp    ebx,0x8
c001c5b0:	75 de                	jne    c001c590 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c5b2:	83 c4 0c             	add    esp,0xc
c001c5b5:	5b                   	pop    ebx
c001c5b6:	5e                   	pop    esi
c001c5b7:	5f                   	pop    edi
c001c5b8:	5d                   	pop    ebp
c001c5b9:	c3                   	ret    

c001c5ba <PCI::detect()>:
c001c5ba:	56                   	push   esi
c001c5bb:	53                   	push   ebx
c001c5bc:	53                   	push   ebx
c001c5bd:	31 db                	xor    ebx,ebx
c001c5bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c5c3:	6a 00                	push   0x0
c001c5c5:	6a 00                	push   0x0
c001c5c7:	6a 00                	push   0x0
c001c5c9:	56                   	push   esi
c001c5ca:	e8 7f fa ff ff       	call   c001c04e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c5cf:	83 c4 10             	add    esp,0x10
c001c5d2:	a8 80                	test   al,0x80
c001c5d4:	75 21                	jne    c001c5f7 <PCI::detect()+0x3d>
c001c5d6:	51                   	push   ecx
c001c5d7:	51                   	push   ecx
c001c5d8:	6a 00                	push   0x0
c001c5da:	56                   	push   esi
c001c5db:	e8 2e fc ff ff       	call   c001c20e <PCI::checkBus(unsigned char)>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	eb 24                	jmp    c001c609 <PCI::detect()+0x4f>
c001c5e5:	52                   	push   edx
c001c5e6:	52                   	push   edx
c001c5e7:	53                   	push   ebx
c001c5e8:	43                   	inc    ebx
c001c5e9:	56                   	push   esi
c001c5ea:	e8 1f fc ff ff       	call   c001c20e <PCI::checkBus(unsigned char)>
c001c5ef:	83 c4 10             	add    esp,0x10
c001c5f2:	83 fb 08             	cmp    ebx,0x8
c001c5f5:	74 12                	je     c001c609 <PCI::detect()+0x4f>
c001c5f7:	53                   	push   ebx
c001c5f8:	6a 00                	push   0x0
c001c5fa:	6a 00                	push   0x0
c001c5fc:	56                   	push   esi
c001c5fd:	e8 2a fa ff ff       	call   c001c02c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c602:	83 c4 10             	add    esp,0x10
c001c605:	66 40                	inc    ax
c001c607:	74 dc                	je     c001c5e5 <PCI::detect()+0x2b>
c001c609:	58                   	pop    eax
c001c60a:	5b                   	pop    ebx
c001c60b:	5e                   	pop    esi
c001c60c:	c3                   	ret    
c001c60d:	90                   	nop

c001c60e <IDE::close(int, int, void*)>:
c001c60e:	83 c8 ff             	or     eax,0xffffffff
c001c611:	c3                   	ret    

c001c612 <IDE::IDE()>:
c001c612:	83 ec 0c             	sub    esp,0xc
c001c615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c619:	83 ec 08             	sub    esp,0x8
c001c61c:	68 7c 31 02 c0       	push   0xc002317c
c001c621:	50                   	push   eax
c001c622:	e8 9f 42 ff ff       	call   c00108c6 <HardDiskController::HardDiskController(char const*)>
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001c62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c633:	89 10                	mov    DWORD PTR [eax],edx
c001c635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c639:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c640:	90                   	nop
c001c641:	83 c4 0c             	add    esp,0xc
c001c644:	c3                   	ret    
c001c645:	90                   	nop

c001c646 <IDE::prepareInterrupt(unsigned char)>:
c001c646:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c64b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c64f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c657:	c3                   	ret    

c001c658 <selectDrive(unsigned char, unsigned char)>:
c001c658:	c3                   	ret    
c001c659:	90                   	nop

c001c65a <IDE::getBase(unsigned char)>:
c001c65a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c65f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c663:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c66b:	c3                   	ret    

c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c66c:	55                   	push   ebp
c001c66d:	57                   	push   edi
c001c66e:	56                   	push   esi
c001c66f:	53                   	push   ebx
c001c670:	83 ec 1c             	sub    esp,0x1c
c001c673:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c677:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c67b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c67e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c682:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c686:	80 f9 03             	cmp    cl,0x3
c001c689:	77 51                	ja     c001c6dc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c68b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c68f:	0f b6 f2             	movzx  esi,dl
c001c692:	0f b6 db             	movzx  ebx,bl
c001c695:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c698:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c69c:	83 ca 80             	or     edx,0xffffff80
c001c69f:	0f b6 d2             	movzx  edx,dl
c001c6a2:	52                   	push   edx
c001c6a3:	6a 0c                	push   0xc
c001c6a5:	56                   	push   esi
c001c6a6:	57                   	push   edi
c001c6a7:	e8 c0 ff ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ac:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c6b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6b5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c6b9:	ee                   	out    dx,al
c001c6ba:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c6bf:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c6c3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c6cb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c6d3:	83 c4 2c             	add    esp,0x2c
c001c6d6:	5b                   	pop    ebx
c001c6d7:	5e                   	pop    esi
c001c6d8:	5f                   	pop    edi
c001c6d9:	5d                   	pop    ebp
c001c6da:	eb 90                	jmp    c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6dc:	80 fb 07             	cmp    bl,0x7
c001c6df:	77 12                	ja     c001c6f3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c6e1:	0f b6 d2             	movzx  edx,dl
c001c6e4:	0f b6 db             	movzx  ebx,bl
c001c6e7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c6ef:	89 da                	mov    edx,ebx
c001c6f1:	eb 2f                	jmp    c001c722 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c6f3:	80 fb 0d             	cmp    bl,0xd
c001c6f6:	77 13                	ja     c001c70b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c6f8:	0f b6 d2             	movzx  edx,dl
c001c6fb:	0f b6 db             	movzx  ebx,bl
c001c6fe:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c705:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c709:	eb 17                	jmp    c001c722 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c70b:	80 fb 15             	cmp    bl,0x15
c001c70e:	77 13                	ja     c001c723 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c710:	0f b6 d2             	movzx  edx,dl
c001c713:	0f b6 db             	movzx  ebx,bl
c001c716:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c71e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c722:	ee                   	out    dx,al
c001c723:	83 c4 1c             	add    esp,0x1c
c001c726:	5b                   	pop    ebx
c001c727:	5e                   	pop    esi
c001c728:	5f                   	pop    edi
c001c729:	5d                   	pop    ebp
c001c72a:	c3                   	ret    
c001c72b:	90                   	nop

c001c72c <IDE::read(unsigned char, unsigned char)>:
c001c72c:	55                   	push   ebp
c001c72d:	57                   	push   edi
c001c72e:	56                   	push   esi
c001c72f:	53                   	push   ebx
c001c730:	83 ec 1c             	sub    esp,0x1c
c001c733:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c737:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c73b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c73e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c742:	3c 03                	cmp    al,0x3
c001c744:	77 43                	ja     c001c789 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c746:	0f b6 f2             	movzx  esi,dl
c001c749:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c74c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c750:	83 c8 80             	or     eax,0xffffff80
c001c753:	0f b6 c0             	movzx  eax,al
c001c756:	50                   	push   eax
c001c757:	6a 0c                	push   0xc
c001c759:	56                   	push   esi
c001c75a:	57                   	push   edi
c001c75b:	e8 0c ff ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c760:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c765:	0f b6 c3             	movzx  eax,bl
c001c768:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c76c:	ec                   	in     al,dx
c001c76d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c771:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c776:	52                   	push   edx
c001c777:	6a 0c                	push   0xc
c001c779:	56                   	push   esi
c001c77a:	57                   	push   edi
c001c77b:	e8 ec fe ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c780:	83 c4 20             	add    esp,0x20
c001c783:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c787:	eb 49                	jmp    c001c7d2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c789:	80 fb 07             	cmp    bl,0x7
c001c78c:	77 12                	ja     c001c7a0 <IDE::read(unsigned char, unsigned char)+0x74>
c001c78e:	0f b6 d2             	movzx  edx,dl
c001c791:	0f b6 c3             	movzx  eax,bl
c001c794:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c79c:	89 c2                	mov    edx,eax
c001c79e:	eb 31                	jmp    c001c7d1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c7a0:	80 fb 0d             	cmp    bl,0xd
c001c7a3:	77 13                	ja     c001c7b8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c7a5:	0f b6 d2             	movzx  edx,dl
c001c7a8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c7af:	0f b6 d3             	movzx  edx,bl
c001c7b2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c7b6:	eb 19                	jmp    c001c7d1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c7b8:	31 c0                	xor    eax,eax
c001c7ba:	80 fb 15             	cmp    bl,0x15
c001c7bd:	77 13                	ja     c001c7d2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c7bf:	0f b6 d2             	movzx  edx,dl
c001c7c2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c7ca:	0f b6 d3             	movzx  edx,bl
c001c7cd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c7d1:	ec                   	in     al,dx
c001c7d2:	83 c4 1c             	add    esp,0x1c
c001c7d5:	5b                   	pop    ebx
c001c7d6:	5e                   	pop    esi
c001c7d7:	5f                   	pop    edi
c001c7d8:	5d                   	pop    ebp
c001c7d9:	c3                   	ret    

c001c7da <IDE::waitInterrupt(unsigned char)>:
c001c7da:	55                   	push   ebp
c001c7db:	57                   	push   edi
c001c7dc:	56                   	push   esi
c001c7dd:	53                   	push   ebx
c001c7de:	31 db                	xor    ebx,ebx
c001c7e0:	83 ec 0c             	sub    esp,0xc
c001c7e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c7e7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c7ec:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c7f4:	89 e8                	mov    eax,ebp
c001c7f6:	84 c0                	test   al,al
c001c7f8:	75 34                	jne    c001c82e <IDE::waitInterrupt(unsigned char)+0x54>
c001c7fa:	52                   	push   edx
c001c7fb:	6a 0c                	push   0xc
c001c7fd:	56                   	push   esi
c001c7fe:	57                   	push   edi
c001c7ff:	e8 28 ff ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	a8 01                	test   al,0x1
c001c809:	75 2b                	jne    c001c836 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c80b:	f6 c3 04             	test   bl,0x4
c001c80e:	75 16                	jne    c001c826 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c810:	83 fb 32             	cmp    ebx,0x32
c001c813:	7e 11                	jle    c001c826 <IDE::waitInterrupt(unsigned char)+0x4c>
c001c815:	50                   	push   eax
c001c816:	50                   	push   eax
c001c817:	6a 00                	push   0x0
c001c819:	68 80 96 98 00       	push   0x989680
c001c81e:	e8 99 c5 ff ff       	call   c0018dbc <nanoSleep(unsigned long long)>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	83 fb 3c             	cmp    ebx,0x3c
c001c829:	74 0b                	je     c001c836 <IDE::waitInterrupt(unsigned char)+0x5c>
c001c82b:	43                   	inc    ebx
c001c82c:	eb be                	jmp    c001c7ec <IDE::waitInterrupt(unsigned char)+0x12>
c001c82e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c836:	83 c4 0c             	add    esp,0xc
c001c839:	89 e8                	mov    eax,ebp
c001c83b:	5b                   	pop    ebx
c001c83c:	5e                   	pop    esi
c001c83d:	5f                   	pop    edi
c001c83e:	5d                   	pop    ebp
c001c83f:	c3                   	ret    

c001c840 <ideChannel0IRQHandler(regs*, void*)>:
c001c840:	83 ec 10             	sub    esp,0x10
c001c843:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c847:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c84e:	6a 07                	push   0x7
c001c850:	6a 00                	push   0x0
c001c852:	50                   	push   eax
c001c853:	e8 d4 fe ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001c858:	83 c4 1c             	add    esp,0x1c
c001c85b:	c3                   	ret    

c001c85c <ideChannel1IRQHandler(regs*, void*)>:
c001c85c:	83 ec 10             	sub    esp,0x10
c001c85f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c863:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c86a:	6a 07                	push   0x7
c001c86c:	6a 01                	push   0x1
c001c86e:	50                   	push   eax
c001c86f:	e8 b8 fe ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001c874:	83 c4 1c             	add    esp,0x1c
c001c877:	c3                   	ret    

c001c878 <IDE::enableIRQs(unsigned char, bool)>:
c001c878:	57                   	push   edi
c001c879:	56                   	push   esi
c001c87a:	be 04 00 00 00       	mov    esi,0x4
c001c87f:	53                   	push   ebx
c001c880:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c889:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c88e:	0f 94 c0             	sete   al
c001c891:	d1 e0                	shl    eax,1
c001c893:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c89a:	0f b6 c0             	movzx  eax,al
c001c89d:	50                   	push   eax
c001c89e:	6a 0c                	push   0xc
c001c8a0:	57                   	push   edi
c001c8a1:	53                   	push   ebx
c001c8a2:	e8 c5 fd ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	50                   	push   eax
c001c8ab:	6a 0c                	push   0xc
c001c8ad:	57                   	push   edi
c001c8ae:	53                   	push   ebx
c001c8af:	e8 78 fe ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001c8b4:	83 c4 10             	add    esp,0x10
c001c8b7:	4e                   	dec    esi
c001c8b8:	75 f0                	jne    c001c8aa <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c8ba:	5b                   	pop    ebx
c001c8bb:	5e                   	pop    esi
c001c8bc:	5f                   	pop    edi
c001c8bd:	c3                   	ret    

c001c8be <IDE::open(int, int, void*)>:
c001c8be:	55                   	push   ebp
c001c8bf:	57                   	push   edi
c001c8c0:	56                   	push   esi
c001c8c1:	53                   	push   ebx
c001c8c2:	83 ec 1c             	sub    esp,0x1c
c001c8c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c8c9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c8d2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c8db:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c8e2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c8e9:	0f 85 b0 02 00 00    	jne    c001cb9f <IDE::open(int, int, void*)+0x2e1>
c001c8ef:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c8f5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001c8f9:	83 e0 7f             	and    eax,0x7f
c001c8fc:	3c 05                	cmp    al,0x5
c001c8fe:	74 04                	je     c001c904 <IDE::open(int, int, void*)+0x46>
c001c900:	3c 0f                	cmp    al,0xf
c001c902:	75 32                	jne    c001c936 <IDE::open(int, int, void*)+0x78>
c001c904:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c90a:	83 e0 fc             	and    eax,0xfffffffc
c001c90d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c914:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c91a:	83 e0 fc             	and    eax,0xfffffffc
c001c91d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c924:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c92a:	83 e0 fc             	and    eax,0xfffffffc
c001c92d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c934:	eb 14                	jmp    c001c94a <IDE::open(int, int, void*)+0x8c>
c001c936:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c940:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c94a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c951:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c958:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c95c:	89 c6                	mov    esi,eax
c001c95e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c963:	c1 e6 10             	shl    esi,0x10
c001c966:	89 e8                	mov    eax,ebp
c001c968:	89 fa                	mov    edx,edi
c001c96a:	c1 e0 0b             	shl    eax,0xb
c001c96d:	09 f0                	or     eax,esi
c001c96f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c976:	c1 e6 08             	shl    esi,0x8
c001c979:	09 c6                	or     esi,eax
c001c97b:	89 f0                	mov    eax,esi
c001c97d:	0d 08 00 00 80       	or     eax,0x80000008
c001c982:	ef                   	out    dx,eax
c001c983:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c988:	89 ca                	mov    edx,ecx
c001c98a:	ed                   	in     eax,dx
c001c98b:	c1 e8 10             	shr    eax,0x10
c001c98e:	3d ff ff 00 00       	cmp    eax,0xffff
c001c993:	0f 84 f5 00 00 00    	je     c001ca8e <IDE::open(int, int, void*)+0x1d0>
c001c999:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c99f:	89 fa                	mov    edx,edi
c001c9a1:	89 f0                	mov    eax,esi
c001c9a3:	ef                   	out    dx,eax
c001c9a4:	b0 fe                	mov    al,0xfe
c001c9a6:	89 ca                	mov    edx,ecx
c001c9a8:	ee                   	out    dx,al
c001c9a9:	89 f0                	mov    eax,esi
c001c9ab:	89 fa                	mov    edx,edi
c001c9ad:	ef                   	out    dx,eax
c001c9ae:	89 ca                	mov    edx,ecx
c001c9b0:	ed                   	in     eax,dx
c001c9b1:	3c fe                	cmp    al,0xfe
c001c9b3:	0f 85 a9 00 00 00    	jne    c001ca62 <IDE::open(int, int, void*)+0x1a4>
c001c9b9:	8b 15 c8 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243c8
c001c9bf:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c9c6:	74 33                	je     c001c9fb <IDE::open(int, int, void*)+0x13d>
c001c9c8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c9ce:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c9d2:	40                   	inc    eax
c001c9d3:	83 ec 0c             	sub    esp,0xc
c001c9d6:	0f b6 c0             	movzx  eax,al
c001c9d9:	50                   	push   eax
c001c9da:	55                   	push   ebp
c001c9db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9df:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c9e5:	51                   	push   ecx
c001c9e6:	e8 7b 73 ff ff       	call   c0013d66 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c9eb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c9f0:	83 c4 1c             	add    esp,0x1c
c001c9f3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c9f9:	eb 0a                	jmp    c001ca05 <IDE::open(int, int, void*)+0x147>
c001c9fb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ca05:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ca0c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ca13:	c1 e1 10             	shl    ecx,0x10
c001ca16:	c1 e0 08             	shl    eax,0x8
c001ca19:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ca1e:	09 c1                	or     ecx,eax
c001ca20:	89 fa                	mov    edx,edi
c001ca22:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ca29:	c1 e0 0b             	shl    eax,0xb
c001ca2c:	09 c1                	or     ecx,eax
c001ca2e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ca34:	89 c8                	mov    eax,ecx
c001ca36:	ef                   	out    dx,eax
c001ca37:	be fc 0c 00 00       	mov    esi,0xcfc
c001ca3c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ca42:	89 f2                	mov    edx,esi
c001ca44:	ee                   	out    dx,al
c001ca45:	89 c8                	mov    eax,ecx
c001ca47:	89 fa                	mov    edx,edi
c001ca49:	ef                   	out    dx,eax
c001ca4a:	89 f2                	mov    edx,esi
c001ca4c:	ed                   	in     eax,dx
c001ca4d:	0f b6 c0             	movzx  eax,al
c001ca50:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ca56:	74 46                	je     c001ca9e <IDE::open(int, int, void*)+0x1e0>
c001ca58:	83 ec 0c             	sub    esp,0xc
c001ca5b:	68 94 31 02 c0       	push   0xc0023194
c001ca60:	eb 34                	jmp    c001ca96 <IDE::open(int, int, void*)+0x1d8>
c001ca62:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca6b:	75 17                	jne    c001ca84 <IDE::open(int, int, void*)+0x1c6>
c001ca6d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001ca72:	74 07                	je     c001ca7b <IDE::open(int, int, void*)+0x1bd>
c001ca74:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001ca79:	75 09                	jne    c001ca84 <IDE::open(int, int, void*)+0x1c6>
c001ca7b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca82:	eb 1a                	jmp    c001ca9e <IDE::open(int, int, void*)+0x1e0>
c001ca84:	83 ec 0c             	sub    esp,0xc
c001ca87:	68 9c 31 02 c0       	push   0xc002319c
c001ca8c:	eb 08                	jmp    c001ca96 <IDE::open(int, int, void*)+0x1d8>
c001ca8e:	83 ec 0c             	sub    esp,0xc
c001ca91:	68 cd 31 02 c0       	push   0xc00231cd
c001ca96:	e8 85 8e ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001caa5:	79 1a                	jns    c001cac1 <IDE::open(int, int, void*)+0x203>
c001caa7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001caad:	83 e0 fc             	and    eax,0xfffffffc
c001cab0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cab7:	83 c0 08             	add    eax,0x8
c001caba:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cac1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cac7:	89 c2                	mov    edx,eax
c001cac9:	83 e2 0f             	and    edx,0xf
c001cacc:	66 83 fa 08          	cmp    dx,0x8
c001cad0:	75 0a                	jne    c001cadc <IDE::open(int, int, void*)+0x21e>
c001cad2:	83 e8 02             	sub    eax,0x2
c001cad5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cadc:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cae2:	89 c2                	mov    edx,eax
c001cae4:	83 e2 0f             	and    edx,0xf
c001cae7:	66 83 fa 08          	cmp    dx,0x8
c001caeb:	75 0a                	jne    c001caf7 <IDE::open(int, int, void*)+0x239>
c001caed:	83 e8 02             	sub    eax,0x2
c001caf0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001caf7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cafe:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cb05:	89 d0                	mov    eax,edx
c001cb07:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb0a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb0e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cb12:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cb15:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb1a:	0f b6 c9             	movzx  ecx,cl
c001cb1d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cb24:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb27:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb2b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cb2f:	8d 50 02             	lea    edx,[eax+0x2]
c001cb32:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cb37:	0f b6 d2             	movzx  edx,dl
c001cb3a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cb40:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb43:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb47:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cb4b:	8d 48 03             	lea    ecx,[eax+0x3]
c001cb4e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb53:	0f b6 c9             	movzx  ecx,cl
c001cb56:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cb5c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb5f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb63:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cb67:	8d 50 04             	lea    edx,[eax+0x4]
c001cb6a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cb70:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cb75:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cb7c:	66 85 f6             	test   si,si
c001cb7f:	74 3e                	je     c001cbbf <IDE::open(int, int, void*)+0x301>
c001cb81:	0f b6 d2             	movzx  edx,dl
c001cb84:	83 c0 05             	add    eax,0x5
c001cb87:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb8a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb8e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cb92:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cb98:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cb9d:	eb 20                	jmp    c001cbbf <IDE::open(int, int, void*)+0x301>
c001cb9f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cba9:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbb3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cbba:	e9 02 ff ff ff       	jmp    c001cac1 <IDE::open(int, int, void*)+0x203>
c001cbbf:	52                   	push   edx
c001cbc0:	52                   	push   edx
c001cbc1:	6a 00                	push   0x0
c001cbc3:	53                   	push   ebx
c001cbc4:	e8 7d fa ff ff       	call   c001c646 <IDE::prepareInterrupt(unsigned char)>
c001cbc9:	59                   	pop    ecx
c001cbca:	5e                   	pop    esi
c001cbcb:	6a 01                	push   0x1
c001cbcd:	53                   	push   ebx
c001cbce:	e8 73 fa ff ff       	call   c001c646 <IDE::prepareInterrupt(unsigned char)>
c001cbd3:	83 c4 0c             	add    esp,0xc
c001cbd6:	6a 00                	push   0x0
c001cbd8:	6a 00                	push   0x0
c001cbda:	53                   	push   ebx
c001cbdb:	e8 98 fc ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001cbe0:	83 c4 0c             	add    esp,0xc
c001cbe3:	6a 00                	push   0x0
c001cbe5:	6a 01                	push   0x1
c001cbe7:	53                   	push   ebx
c001cbe8:	e8 8b fc ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cbf7:	74 40                	je     c001cc39 <IDE::open(int, int, void*)+0x37b>
c001cbf9:	83 ec 0c             	sub    esp,0xc
c001cbfc:	68 f7 31 02 c0       	push   0xc00231f7
c001cc01:	e8 33 25 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001cc06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc09:	6a 01                	push   0x1
c001cc0b:	68 40 c8 01 c0       	push   0xc001c840
c001cc10:	6a 0e                	push   0xe
c001cc12:	53                   	push   ebx
c001cc13:	e8 80 38 ff ff       	call   c0010498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc18:	83 c4 14             	add    esp,0x14
c001cc1b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc21:	53                   	push   ebx
c001cc22:	6a 01                	push   0x1
c001cc24:	68 5c c8 01 c0       	push   0xc001c85c
c001cc29:	6a 0f                	push   0xf
c001cc2b:	53                   	push   ebx
c001cc2c:	e8 67 38 ff ff       	call   c0010498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc31:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cc37:	eb 4a                	jmp    c001cc83 <IDE::open(int, int, void*)+0x3c5>
c001cc39:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cc43:	50                   	push   eax
c001cc44:	6a 0f                	push   0xf
c001cc46:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc4c:	68 13 32 02 c0       	push   0xc0023213
c001cc51:	e8 e3 24 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001cc56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc59:	6a 00                	push   0x0
c001cc5b:	68 40 c8 01 c0       	push   0xc001c840
c001cc60:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc66:	53                   	push   ebx
c001cc67:	e8 2c 38 ff ff       	call   c0010498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc6c:	83 c4 14             	add    esp,0x14
c001cc6f:	53                   	push   ebx
c001cc70:	6a 00                	push   0x0
c001cc72:	68 5c c8 01 c0       	push   0xc001c85c
c001cc77:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cc7d:	53                   	push   ebx
c001cc7e:	e8 15 38 ff ff       	call   c0010498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc83:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc85:	83 c4 20             	add    esp,0x20
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	53                   	push   ebx
c001cc8c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cc8f:	83 c4 0c             	add    esp,0xc
c001cc92:	6a 07                	push   0x7
c001cc94:	6a 00                	push   0x0
c001cc96:	53                   	push   ebx
c001cc97:	e8 90 fa ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001cc9c:	83 c4 0c             	add    esp,0xc
c001cc9f:	6a 07                	push   0x7
c001cca1:	6a 01                	push   0x1
c001cca3:	53                   	push   ebx
c001cca4:	e8 83 fa ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001cca9:	83 c4 0c             	add    esp,0xc
c001ccac:	6a 01                	push   0x1
c001ccae:	6a 00                	push   0x0
c001ccb0:	53                   	push   ebx
c001ccb1:	e8 c2 fb ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001ccb6:	83 c4 0c             	add    esp,0xc
c001ccb9:	6a 01                	push   0x1
c001ccbb:	6a 01                	push   0x1
c001ccbd:	53                   	push   ebx
c001ccbe:	e8 b5 fb ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001ccc3:	83 c4 2c             	add    esp,0x2c
c001ccc6:	31 c0                	xor    eax,eax
c001ccc8:	5b                   	pop    ebx
c001ccc9:	5e                   	pop    esi
c001ccca:	5f                   	pop    edi
c001cccb:	5d                   	pop    ebp
c001cccc:	c3                   	ret    
c001cccd:	90                   	nop

c001ccce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ccce:	55                   	push   ebp
c001cccf:	57                   	push   edi
c001ccd0:	56                   	push   esi
c001ccd1:	53                   	push   ebx
c001ccd2:	83 ec 1c             	sub    esp,0x1c
c001ccd5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ccd9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ccdd:	8d 50 f8             	lea    edx,[eax-0x8]
c001cce0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cce4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cce8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ccec:	80 fa 03             	cmp    dl,0x3
c001ccef:	77 5d                	ja     c001cd4e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ccf1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ccf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccf9:	0f b6 db             	movzx  ebx,bl
c001ccfc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ccff:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cd03:	83 ca 80             	or     edx,0xffffff80
c001cd06:	0f b6 d2             	movzx  edx,dl
c001cd09:	52                   	push   edx
c001cd0a:	6a 0c                	push   0xc
c001cd0c:	53                   	push   ebx
c001cd0d:	56                   	push   esi
c001cd0e:	e8 59 f9 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd13:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cd18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd20:	0f b6 c0             	movzx  eax,al
c001cd23:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cd27:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd29:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cd2e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cd32:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cd36:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cd3a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cd42:	83 c4 2c             	add    esp,0x2c
c001cd45:	5b                   	pop    ebx
c001cd46:	5e                   	pop    esi
c001cd47:	5f                   	pop    edi
c001cd48:	5d                   	pop    ebp
c001cd49:	e9 1e f9 ff ff       	jmp    c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd4e:	3c 07                	cmp    al,0x7
c001cd50:	77 10                	ja     c001cd62 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cd52:	0f b6 db             	movzx  ebx,bl
c001cd55:	0f b6 d0             	movzx  edx,al
c001cd58:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cd60:	eb 2d                	jmp    c001cd8f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cd62:	3c 0d                	cmp    al,0xd
c001cd64:	77 13                	ja     c001cd79 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cd66:	0f b6 db             	movzx  ebx,bl
c001cd69:	0f b6 c0             	movzx  eax,al
c001cd6c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cd73:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cd77:	eb 16                	jmp    c001cd8f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cd79:	3c 15                	cmp    al,0x15
c001cd7b:	77 14                	ja     c001cd91 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cd7d:	0f b6 db             	movzx  ebx,bl
c001cd80:	0f b6 c0             	movzx  eax,al
c001cd83:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cd8b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cd8f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd91:	83 c4 1c             	add    esp,0x1c
c001cd94:	5b                   	pop    ebx
c001cd95:	5e                   	pop    esi
c001cd96:	5f                   	pop    edi
c001cd97:	5d                   	pop    ebp
c001cd98:	c3                   	ret    
c001cd99:	90                   	nop

c001cd9a <IDE::detect()>:
c001cd9a:	55                   	push   ebp
c001cd9b:	57                   	push   edi
c001cd9c:	56                   	push   esi
c001cd9d:	53                   	push   ebx
c001cd9e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cda4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cdab:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cdb2:	0f 85 be 02 00 00    	jne    c001d076 <IDE::detect()+0x2dc>
c001cdb8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cdbf:	31 f6                	xor    esi,esi
c001cdc1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdc9:	31 ed                	xor    ebp,ebp
c001cdcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdcf:	c1 e0 06             	shl    eax,0x6
c001cdd2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cdda:	89 e8                	mov    eax,ebp
c001cddc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cde0:	c1 e0 04             	shl    eax,0x4
c001cde3:	83 c8 a0             	or     eax,0xffffffa0
c001cde6:	0f b6 c0             	movzx  eax,al
c001cde9:	50                   	push   eax
c001cdea:	6a 06                	push   0x6
c001cdec:	56                   	push   esi
c001cded:	53                   	push   ebx
c001cdee:	e8 79 f8 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdf3:	83 c4 0c             	add    esp,0xc
c001cdf6:	6a 0c                	push   0xc
c001cdf8:	56                   	push   esi
c001cdf9:	53                   	push   ebx
c001cdfa:	e8 2d f9 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001cdff:	83 c4 0c             	add    esp,0xc
c001ce02:	6a 0c                	push   0xc
c001ce04:	56                   	push   esi
c001ce05:	53                   	push   ebx
c001ce06:	e8 21 f9 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce0b:	83 c4 0c             	add    esp,0xc
c001ce0e:	6a 0c                	push   0xc
c001ce10:	56                   	push   esi
c001ce11:	53                   	push   ebx
c001ce12:	e8 15 f9 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce17:	83 c4 0c             	add    esp,0xc
c001ce1a:	6a 0c                	push   0xc
c001ce1c:	56                   	push   esi
c001ce1d:	53                   	push   ebx
c001ce1e:	e8 09 f9 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce23:	68 ec 00 00 00       	push   0xec
c001ce28:	6a 07                	push   0x7
c001ce2a:	56                   	push   esi
c001ce2b:	53                   	push   ebx
c001ce2c:	e8 3b f8 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce31:	83 c4 1c             	add    esp,0x1c
c001ce34:	6a 0c                	push   0xc
c001ce36:	56                   	push   esi
c001ce37:	53                   	push   ebx
c001ce38:	e8 ef f8 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce3d:	83 c4 0c             	add    esp,0xc
c001ce40:	6a 0c                	push   0xc
c001ce42:	56                   	push   esi
c001ce43:	53                   	push   ebx
c001ce44:	e8 e3 f8 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce49:	83 c4 0c             	add    esp,0xc
c001ce4c:	6a 0c                	push   0xc
c001ce4e:	56                   	push   esi
c001ce4f:	53                   	push   ebx
c001ce50:	e8 d7 f8 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce55:	83 c4 0c             	add    esp,0xc
c001ce58:	6a 0c                	push   0xc
c001ce5a:	56                   	push   esi
c001ce5b:	53                   	push   ebx
c001ce5c:	e8 cb f8 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce61:	83 c4 0c             	add    esp,0xc
c001ce64:	6a 0c                	push   0xc
c001ce66:	56                   	push   esi
c001ce67:	53                   	push   ebx
c001ce68:	e8 bf f8 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce6d:	83 c4 10             	add    esp,0x10
c001ce70:	84 c0                	test   al,al
c001ce72:	0f 84 8b 01 00 00    	je     c001d003 <IDE::detect()+0x269>
c001ce78:	31 ff                	xor    edi,edi
c001ce7a:	50                   	push   eax
c001ce7b:	6a 0c                	push   0xc
c001ce7d:	56                   	push   esi
c001ce7e:	53                   	push   ebx
c001ce7f:	e8 a8 f8 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001ce84:	83 c4 10             	add    esp,0x10
c001ce87:	a8 01                	test   al,0x1
c001ce89:	0f 85 8e 01 00 00    	jne    c001d01d <IDE::detect()+0x283>
c001ce8f:	84 c0                	test   al,al
c001ce91:	78 04                	js     c001ce97 <IDE::detect()+0xfd>
c001ce93:	a8 08                	test   al,0x8
c001ce95:	75 27                	jne    c001cebe <IDE::detect()+0x124>
c001ce97:	47                   	inc    edi
c001ce98:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ce9e:	7e da                	jle    c001ce7a <IDE::detect()+0xe0>
c001cea0:	50                   	push   eax
c001cea1:	50                   	push   eax
c001cea2:	6a 00                	push   0x0
c001cea4:	68 40 4b 4c 00       	push   0x4c4b40
c001cea9:	e8 0e bf ff ff       	call   c0018dbc <nanoSleep(unsigned long long)>
c001ceae:	83 c4 10             	add    esp,0x10
c001ceb1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ceb7:	75 c1                	jne    c001ce7a <IDE::detect()+0xe0>
c001ceb9:	e9 5f 01 00 00       	jmp    c001d01d <IDE::detect()+0x283>
c001cebe:	31 c9                	xor    ecx,ecx
c001cec0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001cec4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001cec8:	83 ec 0c             	sub    esp,0xc
c001cecb:	68 80 00 00 00       	push   0x80
c001ced0:	57                   	push   edi
c001ced1:	6a 00                	push   0x0
c001ced3:	56                   	push   esi
c001ced4:	53                   	push   ebx
c001ced5:	e8 f4 fd ff ff       	call   c001ccce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ceda:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001cedf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cee3:	89 d1                	mov    ecx,edx
c001cee5:	c1 e0 06             	shl    eax,0x6
c001cee8:	01 d8                	add    eax,ebx
c001ceea:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001cef1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001cef8:	89 f2                	mov    edx,esi
c001cefa:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001cf00:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001cf04:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001cf0a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf0e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001cf15:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001cf1d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001cf24:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001cf2c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001cf32:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001cf39:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001cf3f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cf43:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001cf47:	83 c4 20             	add    esp,0x20
c001cf4a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001cf4d:	83 c0 02             	add    eax,0x2
c001cf50:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001cf56:	83 c7 02             	add    edi,0x2
c001cf59:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001cf5c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001cf62:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001cf66:	75 e2                	jne    c001cf4a <IDE::detect()+0x1b0>
c001cf68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf6c:	c1 e0 06             	shl    eax,0x6
c001cf6f:	01 d8                	add    eax,ebx
c001cf71:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001cf77:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001cf7e:	66 c1 ea 09          	shr    dx,0x9
c001cf82:	83 e2 01             	and    edx,0x1
c001cf85:	84 c9                	test   cl,cl
c001cf87:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001cf8d:	75 2f                	jne    c001cfbe <IDE::detect()+0x224>
c001cf8f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001cf95:	85 c0                	test   eax,eax
c001cf97:	74 66                	je     c001cfff <IDE::detect()+0x265>
c001cf99:	50                   	push   eax
c001cf9a:	55                   	push   ebp
c001cf9b:	56                   	push   esi
c001cf9c:	68 2f 32 02 c0       	push   0xc002322f
c001cfa1:	e8 93 21 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001cfa6:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cfad:	e8 98 20 ff ff       	call   c000f04a <operator new(unsigned long)>
c001cfb2:	89 c7                	mov    edi,eax
c001cfb4:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfb7:	e8 e8 02 00 00       	call   c001d2a4 <ATA::ATA()>
c001cfbc:	eb 28                	jmp    c001cfe6 <IDE::detect()+0x24c>
c001cfbe:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001cfc4:	55                   	push   ebp
c001cfc5:	56                   	push   esi
c001cfc6:	68 5e 32 02 c0       	push   0xc002325e
c001cfcb:	e8 69 21 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001cfd0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001cfd7:	e8 6e 20 ff ff       	call   c000f04a <operator new(unsigned long)>
c001cfdc:	89 c7                	mov    edi,eax
c001cfde:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfe1:	e8 ee 08 00 00       	call   c001d8d4 <ATAPI::ATAPI()>
c001cfe6:	5a                   	pop    edx
c001cfe7:	59                   	pop    ecx
c001cfe8:	57                   	push   edi
c001cfe9:	53                   	push   ebx
c001cfea:	e8 55 35 ff ff       	call   c0010544 <Device::addChild(Device*)>
c001cfef:	8b 07                	mov    eax,DWORD PTR [edi]
c001cff1:	53                   	push   ebx
c001cff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cff6:	6a 00                	push   0x0
c001cff8:	57                   	push   edi
c001cff9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cffc:	83 c4 20             	add    esp,0x20
c001cfff:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d003:	4d                   	dec    ebp
c001d004:	74 0a                	je     c001d010 <IDE::detect()+0x276>
c001d006:	bd 01 00 00 00       	mov    ebp,0x1
c001d00b:	e9 bb fd ff ff       	jmp    c001cdcb <IDE::detect()+0x31>
c001d010:	4e                   	dec    esi
c001d011:	74 63                	je     c001d076 <IDE::detect()+0x2dc>
c001d013:	be 01 00 00 00       	mov    esi,0x1
c001d018:	e9 ac fd ff ff       	jmp    c001cdc9 <IDE::detect()+0x2f>
c001d01d:	50                   	push   eax
c001d01e:	6a 04                	push   0x4
c001d020:	56                   	push   esi
c001d021:	53                   	push   ebx
c001d022:	e8 05 f7 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001d027:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d02b:	83 c4 0c             	add    esp,0xc
c001d02e:	6a 05                	push   0x5
c001d030:	56                   	push   esi
c001d031:	53                   	push   ebx
c001d032:	e8 f5 f6 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d03e:	80 fa 14             	cmp    dl,0x14
c001d041:	75 04                	jne    c001d047 <IDE::detect()+0x2ad>
c001d043:	3c eb                	cmp    al,0xeb
c001d045:	eb 07                	jmp    c001d04e <IDE::detect()+0x2b4>
c001d047:	3c 96                	cmp    al,0x96
c001d049:	75 b8                	jne    c001d003 <IDE::detect()+0x269>
c001d04b:	80 fa 69             	cmp    dl,0x69
c001d04e:	75 b3                	jne    c001d003 <IDE::detect()+0x269>
c001d050:	68 a1 00 00 00       	push   0xa1
c001d055:	6a 07                	push   0x7
c001d057:	56                   	push   esi
c001d058:	53                   	push   ebx
c001d059:	e8 0e f6 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d05e:	5f                   	pop    edi
c001d05f:	58                   	pop    eax
c001d060:	6a 00                	push   0x0
c001d062:	68 40 42 0f 00       	push   0xf4240
c001d067:	e8 50 bd ff ff       	call   c0018dbc <nanoSleep(unsigned long long)>
c001d06c:	83 c4 10             	add    esp,0x10
c001d06f:	b1 01                	mov    cl,0x1
c001d071:	e9 4a fe ff ff       	jmp    c001cec0 <IDE::detect()+0x126>
c001d076:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d07c:	5b                   	pop    ebx
c001d07d:	5e                   	pop    esi
c001d07e:	5f                   	pop    edi
c001d07f:	5d                   	pop    ebp
c001d080:	c3                   	ret    
c001d081:	90                   	nop

c001d082 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d082:	55                   	push   ebp
c001d083:	57                   	push   edi
c001d084:	56                   	push   esi
c001d085:	53                   	push   ebx
c001d086:	83 ec 1c             	sub    esp,0x1c
c001d089:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d08d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d091:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d095:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d099:	88 c3                	mov    bl,al
c001d09b:	84 c0                	test   al,al
c001d09d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0a1:	0f 84 67 01 00 00    	je     c001d20e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d0a7:	83 ec 0c             	sub    esp,0xc
c001d0aa:	68 8f 32 02 c0       	push   0xc002328f
c001d0af:	e8 85 20 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d0b4:	83 c4 10             	add    esp,0x10
c001d0b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0bb:	3c 01                	cmp    al,0x1
c001d0bd:	75 17                	jne    c001d0d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d0bf:	83 ec 0c             	sub    esp,0xc
c001d0c2:	b3 13                	mov    bl,0x13
c001d0c4:	68 9b 32 02 c0       	push   0xc002329b
c001d0c9:	e8 6b 20 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d0ce:	83 c4 10             	add    esp,0x10
c001d0d1:	e9 25 01 00 00       	jmp    c001d1fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d0d6:	3c 02                	cmp    al,0x2
c001d0d8:	0f 85 ef 00 00 00    	jne    c001d1cd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d0de:	d1 e6                	shl    esi,1
c001d0e0:	09 ee                	or     esi,ebp
c001d0e2:	52                   	push   edx
c001d0e3:	89 f0                	mov    eax,esi
c001d0e5:	6a 01                	push   0x1
c001d0e7:	0f b6 f0             	movzx  esi,al
c001d0ea:	c1 e6 06             	shl    esi,0x6
c001d0ed:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d0f5:	50                   	push   eax
c001d0f6:	57                   	push   edi
c001d0f7:	e8 30 f6 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001d0fc:	83 c4 10             	add    esp,0x10
c001d0ff:	89 c6                	mov    esi,eax
c001d101:	a8 01                	test   al,0x1
c001d103:	74 12                	je     c001d117 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d105:	83 ec 0c             	sub    esp,0xc
c001d108:	b3 07                	mov    bl,0x7
c001d10a:	68 b0 32 02 c0       	push   0xc00232b0
c001d10f:	e8 25 20 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d114:	83 c4 10             	add    esp,0x10
c001d117:	f7 c6 02 00 00 00    	test   esi,0x2
c001d11d:	74 12                	je     c001d131 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d11f:	83 ec 0c             	sub    esp,0xc
c001d122:	b3 03                	mov    bl,0x3
c001d124:	68 ce 32 02 c0       	push   0xc00232ce
c001d129:	e8 0b 20 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d12e:	83 c4 10             	add    esp,0x10
c001d131:	f7 c6 04 00 00 00    	test   esi,0x4
c001d137:	74 12                	je     c001d14b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d139:	83 ec 0c             	sub    esp,0xc
c001d13c:	b3 14                	mov    bl,0x14
c001d13e:	68 ee 32 02 c0       	push   0xc00232ee
c001d143:	e8 f1 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	f7 c6 08 00 00 00    	test   esi,0x8
c001d151:	74 12                	je     c001d165 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d153:	83 ec 0c             	sub    esp,0xc
c001d156:	b3 03                	mov    bl,0x3
c001d158:	68 ce 32 02 c0       	push   0xc00232ce
c001d15d:	e8 d7 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d162:	83 c4 10             	add    esp,0x10
c001d165:	f7 c6 10 00 00 00    	test   esi,0x10
c001d16b:	74 12                	je     c001d17f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d16d:	83 ec 0c             	sub    esp,0xc
c001d170:	b3 15                	mov    bl,0x15
c001d172:	68 06 33 02 c0       	push   0xc0023306
c001d177:	e8 bd 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	f7 c6 20 00 00 00    	test   esi,0x20
c001d185:	74 12                	je     c001d199 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d187:	83 ec 0c             	sub    esp,0xc
c001d18a:	b3 03                	mov    bl,0x3
c001d18c:	68 ce 32 02 c0       	push   0xc00232ce
c001d191:	e8 a3 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	f7 c6 40 00 00 00    	test   esi,0x40
c001d19f:	74 12                	je     c001d1b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d1a1:	83 ec 0c             	sub    esp,0xc
c001d1a4:	b3 16                	mov    bl,0x16
c001d1a6:	68 20 33 02 c0       	push   0xc0023320
c001d1ab:	e8 89 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d1b0:	83 c4 10             	add    esp,0x10
c001d1b3:	89 f0                	mov    eax,esi
c001d1b5:	84 c0                	test   al,al
c001d1b7:	79 42                	jns    c001d1fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1b9:	83 ec 0c             	sub    esp,0xc
c001d1bc:	b3 0d                	mov    bl,0xd
c001d1be:	68 41 33 02 c0       	push   0xc0023341
c001d1c3:	e8 71 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d1c8:	83 c4 10             	add    esp,0x10
c001d1cb:	eb 2e                	jmp    c001d1fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1cd:	3c 03                	cmp    al,0x3
c001d1cf:	75 14                	jne    c001d1e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d1d1:	83 ec 0c             	sub    esp,0xc
c001d1d4:	b3 17                	mov    bl,0x17
c001d1d6:	68 55 33 02 c0       	push   0xc0023355
c001d1db:	e8 59 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	eb 16                	jmp    c001d1fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1e5:	3c 04                	cmp    al,0x4
c001d1e7:	75 12                	jne    c001d1fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d1e9:	83 ec 0c             	sub    esp,0xc
c001d1ec:	b3 08                	mov    bl,0x8
c001d1ee:	68 6b 33 02 c0       	push   0xc002336b
c001d1f3:	e8 41 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d1f8:	83 c4 10             	add    esp,0x10
c001d1fb:	50                   	push   eax
c001d1fc:	50                   	push   eax
c001d1fd:	0f b6 c3             	movzx  eax,bl
c001d200:	50                   	push   eax
c001d201:	68 83 33 02 c0       	push   0xc0023383
c001d206:	e8 2e 1f ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d20b:	83 c4 10             	add    esp,0x10
c001d20e:	83 c4 1c             	add    esp,0x1c
c001d211:	88 d8                	mov    al,bl
c001d213:	5b                   	pop    ebx
c001d214:	5e                   	pop    esi
c001d215:	5f                   	pop    edi
c001d216:	5d                   	pop    ebp
c001d217:	c3                   	ret    

c001d218 <IDE::polling(unsigned char, unsigned int)>:
c001d218:	57                   	push   edi
c001d219:	56                   	push   esi
c001d21a:	53                   	push   ebx
c001d21b:	bb 04 00 00 00       	mov    ebx,0x4
c001d220:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d224:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d229:	52                   	push   edx
c001d22a:	6a 0c                	push   0xc
c001d22c:	56                   	push   esi
c001d22d:	57                   	push   edi
c001d22e:	e8 f9 f4 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001d233:	83 c4 10             	add    esp,0x10
c001d236:	4b                   	dec    ebx
c001d237:	75 f0                	jne    c001d229 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d239:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d23e:	50                   	push   eax
c001d23f:	6a 0c                	push   0xc
c001d241:	56                   	push   esi
c001d242:	57                   	push   edi
c001d243:	e8 e4 f4 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001d248:	83 c4 10             	add    esp,0x10
c001d24b:	a8 01                	test   al,0x1
c001d24d:	74 12                	je     c001d261 <IDE::polling(unsigned char, unsigned int)+0x49>
c001d24f:	83 ec 0c             	sub    esp,0xc
c001d252:	68 9d 33 02 c0       	push   0xc002339d
c001d257:	e8 dd 1e ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001d25c:	83 c4 10             	add    esp,0x10
c001d25f:	eb 17                	jmp    c001d278 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d261:	a8 20                	test   al,0x20
c001d263:	75 0f                	jne    c001d274 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001d265:	4b                   	dec    ebx
c001d266:	74 10                	je     c001d278 <IDE::polling(unsigned char, unsigned int)+0x60>
c001d268:	84 c0                	test   al,al
c001d26a:	78 d2                	js     c001d23e <IDE::polling(unsigned char, unsigned int)+0x26>
c001d26c:	a8 08                	test   al,0x8
c001d26e:	74 ce                	je     c001d23e <IDE::polling(unsigned char, unsigned int)+0x26>
c001d270:	31 c0                	xor    eax,eax
c001d272:	eb 06                	jmp    c001d27a <IDE::polling(unsigned char, unsigned int)+0x62>
c001d274:	b0 01                	mov    al,0x1
c001d276:	eb 02                	jmp    c001d27a <IDE::polling(unsigned char, unsigned int)+0x62>
c001d278:	b0 02                	mov    al,0x2
c001d27a:	5b                   	pop    ebx
c001d27b:	5e                   	pop    esi
c001d27c:	5f                   	pop    edi
c001d27d:	c3                   	ret    

c001d27e <ATA::close(int, int, void*)>:
c001d27e:	83 ec 0c             	sub    esp,0xc
c001d281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d285:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d28b:	85 c0                	test   eax,eax
c001d28d:	74 0c                	je     c001d29b <ATA::close(int, int, void*)+0x1d>
c001d28f:	83 ec 0c             	sub    esp,0xc
c001d292:	8b 10                	mov    edx,DWORD PTR [eax]
c001d294:	50                   	push   eax
c001d295:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d298:	83 c4 10             	add    esp,0x10
c001d29b:	31 c0                	xor    eax,eax
c001d29d:	83 c4 0c             	add    esp,0xc
c001d2a0:	c3                   	ret    
c001d2a1:	90                   	nop

c001d2a2 <ATA::powerSaving(PowerSavingLevel)>:
c001d2a2:	c3                   	ret    
c001d2a3:	90                   	nop

c001d2a4 <ATA::ATA()>:
c001d2a4:	83 ec 0c             	sub    esp,0xc
c001d2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ab:	83 ec 04             	sub    esp,0x4
c001d2ae:	68 00 02 00 00       	push   0x200
c001d2b3:	68 e0 33 02 c0       	push   0xc00233e0
c001d2b8:	50                   	push   eax
c001d2b9:	e8 8c 36 ff ff       	call   c001094a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d2be:	83 c4 10             	add    esp,0x10
c001d2c1:	ba 0c 34 02 c0       	mov    edx,0xc002340c
c001d2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ca:	89 10                	mov    DWORD PTR [eax],edx
c001d2cc:	90                   	nop
c001d2cd:	83 c4 0c             	add    esp,0xc
c001d2d0:	c3                   	ret    
c001d2d1:	90                   	nop

c001d2d2 <ATA::flush(bool)>:
c001d2d2:	53                   	push   ebx
c001d2d3:	83 ec 08             	sub    esp,0x8
c001d2d6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d2db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2df:	19 c0                	sbb    eax,eax
c001d2e1:	83 e0 fd             	and    eax,0xfffffffd
c001d2e4:	05 ea 00 00 00       	add    eax,0xea
c001d2e9:	50                   	push   eax
c001d2ea:	6a 07                	push   0x7
c001d2ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2f3:	50                   	push   eax
c001d2f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2fa:	e8 6d f3 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ff:	83 c4 0c             	add    esp,0xc
c001d302:	6a 00                	push   0x0
c001d304:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d30b:	50                   	push   eax
c001d30c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d312:	e8 01 ff ff ff       	call   c001d218 <IDE::polling(unsigned char, unsigned int)>
c001d317:	83 c4 18             	add    esp,0x18
c001d31a:	5b                   	pop    ebx
c001d31b:	c3                   	ret    

c001d31c <ATA::readyForCommand()>:
c001d31c:	56                   	push   esi
c001d31d:	53                   	push   ebx
c001d31e:	31 db                	xor    ebx,ebx
c001d320:	50                   	push   eax
c001d321:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d325:	50                   	push   eax
c001d326:	6a 0c                	push   0xc
c001d328:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d32f:	50                   	push   eax
c001d330:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d336:	e8 f1 f3 ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001d33b:	83 c4 10             	add    esp,0x10
c001d33e:	a8 88                	test   al,0x88
c001d340:	74 23                	je     c001d365 <ATA::readyForCommand()+0x49>
c001d342:	43                   	inc    ebx
c001d343:	83 fb 63             	cmp    ebx,0x63
c001d346:	7e dd                	jle    c001d325 <ATA::readyForCommand()+0x9>
c001d348:	51                   	push   ecx
c001d349:	51                   	push   ecx
c001d34a:	6a 00                	push   0x0
c001d34c:	68 40 42 0f 00       	push   0xf4240
c001d351:	e8 66 ba ff ff       	call   c0018dbc <nanoSleep(unsigned long long)>
c001d356:	83 c4 10             	add    esp,0x10
c001d359:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d35f:	75 c4                	jne    c001d325 <ATA::readyForCommand()+0x9>
c001d361:	31 c0                	xor    eax,eax
c001d363:	eb 02                	jmp    c001d367 <ATA::readyForCommand()+0x4b>
c001d365:	b0 01                	mov    al,0x1
c001d367:	5a                   	pop    edx
c001d368:	5b                   	pop    ebx
c001d369:	5e                   	pop    esi
c001d36a:	c3                   	ret    
c001d36b:	90                   	nop

c001d36c <ATA::access(unsigned long long, int, void*, bool)>:
c001d36c:	55                   	push   ebp
c001d36d:	57                   	push   edi
c001d36e:	56                   	push   esi
c001d36f:	53                   	push   ebx
c001d370:	83 ec 2c             	sub    esp,0x2c
c001d373:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d377:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d37b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d37f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d383:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d387:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d38b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d38f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d395:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d399:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d39f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d3a3:	c1 e0 06             	shl    eax,0x6
c001d3a6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d3ae:	74 5d                	je     c001d40d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d3b0:	89 fa                	mov    edx,edi
c001d3b2:	89 f0                	mov    eax,esi
c001d3b4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d3b8:	c1 ea 1c             	shr    edx,0x1c
c001d3bb:	89 d1                	mov    ecx,edx
c001d3bd:	09 c1                	or     ecx,eax
c001d3bf:	74 25                	je     c001d3e6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d3c1:	31 ed                	xor    ebp,ebp
c001d3c3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d3ca:	89 fa                	mov    edx,edi
c001d3cc:	89 f0                	mov    eax,esi
c001d3ce:	0f ad d0             	shrd   eax,edx,cl
c001d3d1:	d3 ea                	shr    edx,cl
c001d3d3:	f6 c1 20             	test   cl,0x20
c001d3d6:	74 02                	je     c001d3da <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d3d8:	89 d0                	mov    eax,edx
c001d3da:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d3de:	45                   	inc    ebp
c001d3df:	83 fd 06             	cmp    ebp,0x6
c001d3e2:	75 df                	jne    c001d3c3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d3e4:	eb 76                	jmp    c001d45c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d3e6:	89 f0                	mov    eax,esi
c001d3e8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d3ed:	89 fa                	mov    edx,edi
c001d3ef:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d3f6:	0f ac d0 10          	shrd   eax,edx,0x10
c001d3fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d3ff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d403:	c1 ee 18             	shr    esi,0x18
c001d406:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d40b:	eb 56                	jmp    c001d463 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d40d:	6a 00                	push   0x0
c001d40f:	6a 3f                	push   0x3f
c001d411:	57                   	push   edi
c001d412:	56                   	push   esi
c001d413:	e8 e4 1e 00 00       	call   c001f2fc <__umoddi3>
c001d418:	83 c4 10             	add    esp,0x10
c001d41b:	40                   	inc    eax
c001d41c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d420:	6a 00                	push   0x0
c001d422:	68 f0 03 00 00       	push   0x3f0
c001d427:	57                   	push   edi
c001d428:	56                   	push   esi
c001d429:	e8 ce 1d 00 00       	call   c001f1fc <__udivdi3>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d436:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d43d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d442:	6a 00                	push   0x0
c001d444:	6a 3f                	push   0x3f
c001d446:	57                   	push   edi
c001d447:	56                   	push   esi
c001d448:	e8 af 1d 00 00       	call   c001f1fc <__udivdi3>
c001d44d:	83 c4 10             	add    esp,0x10
c001d450:	89 c6                	mov    esi,eax
c001d452:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d457:	83 e6 0f             	and    esi,0xf
c001d45a:	eb 07                	jmp    c001d463 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d45c:	31 f6                	xor    esi,esi
c001d45e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d463:	bf 01 00 00 00       	mov    edi,0x1
c001d468:	50                   	push   eax
c001d469:	6a 00                	push   0x0
c001d46b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d472:	50                   	push   eax
c001d473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d477:	e8 fc f3 ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001d47c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d47f:	e8 98 fe ff ff       	call   c001d31c <ATA::readyForCommand()>
c001d484:	83 c4 10             	add    esp,0x10
c001d487:	84 c0                	test   al,al
c001d489:	0f 84 50 02 00 00    	je     c001d6df <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d48f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d495:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d49b:	c1 e0 04             	shl    eax,0x4
c001d49e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d4a5:	09 c6                	or     esi,eax
c001d4a7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d4ac:	75 05                	jne    c001d4b3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d4ae:	83 ce a0             	or     esi,0xffffffa0
c001d4b1:	eb 03                	jmp    c001d4b6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001d4b3:	83 ce e0             	or     esi,0xffffffe0
c001d4b6:	89 f0                	mov    eax,esi
c001d4b8:	0f b6 f0             	movzx  esi,al
c001d4bb:	56                   	push   esi
c001d4bc:	6a 06                	push   0x6
c001d4be:	51                   	push   ecx
c001d4bf:	52                   	push   edx
c001d4c0:	e8 a7 f1 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4c5:	83 c4 10             	add    esp,0x10
c001d4c8:	6a 00                	push   0x0
c001d4ca:	6a 01                	push   0x1
c001d4cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4d3:	50                   	push   eax
c001d4d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4da:	e8 8d f1 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d4e7:	75 6e                	jne    c001d557 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001d4e9:	6a 00                	push   0x0
c001d4eb:	6a 08                	push   0x8
c001d4ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4f4:	50                   	push   eax
c001d4f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4fb:	e8 6c f1 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d500:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d505:	50                   	push   eax
c001d506:	6a 09                	push   0x9
c001d508:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d50f:	50                   	push   eax
c001d510:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d516:	e8 51 f1 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d51b:	83 c4 20             	add    esp,0x20
c001d51e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d523:	50                   	push   eax
c001d524:	6a 0a                	push   0xa
c001d526:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d52d:	50                   	push   eax
c001d52e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d534:	e8 33 f1 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d539:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d53e:	50                   	push   eax
c001d53f:	6a 0b                	push   0xb
c001d541:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d548:	50                   	push   eax
c001d549:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d54f:	e8 18 f1 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d554:	83 c4 20             	add    esp,0x20
c001d557:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d55c:	50                   	push   eax
c001d55d:	6a 02                	push   0x2
c001d55f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d566:	50                   	push   eax
c001d567:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d56d:	e8 fa f0 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d572:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d577:	50                   	push   eax
c001d578:	6a 03                	push   0x3
c001d57a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d581:	50                   	push   eax
c001d582:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d588:	e8 df f0 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d58d:	83 c4 20             	add    esp,0x20
c001d590:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d595:	50                   	push   eax
c001d596:	6a 04                	push   0x4
c001d598:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d59f:	50                   	push   eax
c001d5a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5a6:	e8 c1 f0 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5b0:	50                   	push   eax
c001d5b1:	6a 05                	push   0x5
c001d5b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5ba:	50                   	push   eax
c001d5bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5c1:	e8 a6 f0 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5c6:	83 c4 20             	add    esp,0x20
c001d5c9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001d5ce:	0f 94 c0             	sete   al
c001d5d1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d5d6:	74 09                	je     c001d5e1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001d5d8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001d5df:	eb 07                	jmp    c001d5e8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d5e1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001d5e8:	0f b6 c0             	movzx  eax,al
c001d5eb:	50                   	push   eax
c001d5ec:	6a 07                	push   0x7
c001d5ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5f5:	50                   	push   eax
c001d5f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d5fc:	e8 6b f0 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d601:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d605:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d609:	83 c4 10             	add    esp,0x10
c001d60c:	85 f6                	test   esi,esi
c001d60e:	0f 84 ac 00 00 00    	je     c001d6c0 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001d614:	50                   	push   eax
c001d615:	6a 01                	push   0x1
c001d617:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d61e:	50                   	push   eax
c001d61f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d625:	e8 ee fb ff ff       	call   c001d218 <IDE::polling(unsigned char, unsigned int)>
c001d62a:	83 c4 10             	add    esp,0x10
c001d62d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d633:	84 c0                	test   al,al
c001d635:	74 20                	je     c001d657 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001d637:	0f b6 f8             	movzx  edi,al
c001d63a:	0f b6 d2             	movzx  edx,dl
c001d63d:	57                   	push   edi
c001d63e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d645:	50                   	push   eax
c001d646:	52                   	push   edx
c001d647:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d64d:	e8 30 fa ff ff       	call   c001d082 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d652:	e9 85 00 00 00       	jmp    c001d6dc <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001d657:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d65c:	74 41                	je     c001d69f <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001d65e:	31 c9                	xor    ecx,ecx
c001d660:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d664:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d668:	50                   	push   eax
c001d669:	50                   	push   eax
c001d66a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d671:	50                   	push   eax
c001d672:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d678:	e8 dd ef ff ff       	call   c001c65a <IDE::getBase(unsigned char)>
c001d67d:	89 c2                	mov    edx,eax
c001d67f:	89 e8                	mov    eax,ebp
c001d681:	66 ef                	out    dx,ax
c001d683:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d687:	83 c4 10             	add    esp,0x10
c001d68a:	41                   	inc    ecx
c001d68b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d691:	75 cd                	jne    c001d660 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001d693:	4e                   	dec    esi
c001d694:	81 c7 00 02 00 00    	add    edi,0x200
c001d69a:	e9 6d ff ff ff       	jmp    c001d60c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001d69f:	0f b6 d2             	movzx  edx,dl
c001d6a2:	51                   	push   ecx
c001d6a3:	51                   	push   ecx
c001d6a4:	52                   	push   edx
c001d6a5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6ab:	e8 aa ef ff ff       	call   c001c65a <IDE::getBase(unsigned char)>
c001d6b0:	b9 00 01 00 00       	mov    ecx,0x100
c001d6b5:	89 c2                	mov    edx,eax
c001d6b7:	fc                   	cld    
c001d6b8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d6bb:	83 c4 10             	add    esp,0x10
c001d6be:	eb d3                	jmp    c001d693 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001d6c0:	31 ff                	xor    edi,edi
c001d6c2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d6c7:	74 16                	je     c001d6df <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001d6c9:	50                   	push   eax
c001d6ca:	50                   	push   eax
c001d6cb:	31 c0                	xor    eax,eax
c001d6cd:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001d6d2:	0f 94 c0             	sete   al
c001d6d5:	50                   	push   eax
c001d6d6:	53                   	push   ebx
c001d6d7:	e8 f6 fb ff ff       	call   c001d2d2 <ATA::flush(bool)>
c001d6dc:	83 c4 10             	add    esp,0x10
c001d6df:	83 c4 2c             	add    esp,0x2c
c001d6e2:	89 f8                	mov    eax,edi
c001d6e4:	5b                   	pop    ebx
c001d6e5:	5e                   	pop    esi
c001d6e6:	5f                   	pop    edi
c001d6e7:	5d                   	pop    ebp
c001d6e8:	c3                   	ret    
c001d6e9:	90                   	nop

c001d6ea <ATA::read(unsigned long long, int, void*)>:
c001d6ea:	57                   	push   edi
c001d6eb:	b8 04 00 00 00       	mov    eax,0x4
c001d6f0:	56                   	push   esi
c001d6f1:	53                   	push   ebx
c001d6f2:	83 ec 10             	sub    esp,0x10
c001d6f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d6f9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d6fd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d700:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d704:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d708:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d70e:	77 3b                	ja     c001d74b <ATA::read(unsigned long long, int, void*)+0x61>
c001d710:	b8 06 00 00 00       	mov    eax,0x6
c001d715:	85 d2                	test   edx,edx
c001d717:	74 32                	je     c001d74b <ATA::read(unsigned long long, int, void*)+0x61>
c001d719:	50                   	push   eax
c001d71a:	50                   	push   eax
c001d71b:	6a 00                	push   0x0
c001d71d:	52                   	push   edx
c001d71e:	53                   	push   ebx
c001d71f:	57                   	push   edi
c001d720:	56                   	push   esi
c001d721:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d725:	e8 42 fc ff ff       	call   c001d36c <ATA::access(unsigned long long, int, void*, bool)>
c001d72a:	83 c4 20             	add    esp,0x20
c001d72d:	85 c0                	test   eax,eax
c001d72f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d733:	75 11                	jne    c001d746 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d735:	01 1d 64 61 02 c0    	add    DWORD PTR ds:0xc0026164,ebx
c001d73b:	e8 e4 f8 fe ff       	call   c000d024 <VgaText::updateDiskUsage()>
c001d740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d744:	eb 05                	jmp    c001d74b <ATA::read(unsigned long long, int, void*)+0x61>
c001d746:	b8 01 00 00 00       	mov    eax,0x1
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	5b                   	pop    ebx
c001d74f:	5e                   	pop    esi
c001d750:	5f                   	pop    edi
c001d751:	c3                   	ret    

c001d752 <ATA::write(unsigned long long, int, void*)>:
c001d752:	57                   	push   edi
c001d753:	b8 04 00 00 00       	mov    eax,0x4
c001d758:	56                   	push   esi
c001d759:	53                   	push   ebx
c001d75a:	83 ec 10             	sub    esp,0x10
c001d75d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d761:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d765:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d768:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d76c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d770:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d776:	77 3b                	ja     c001d7b3 <ATA::write(unsigned long long, int, void*)+0x61>
c001d778:	b8 06 00 00 00       	mov    eax,0x6
c001d77d:	85 d2                	test   edx,edx
c001d77f:	74 32                	je     c001d7b3 <ATA::write(unsigned long long, int, void*)+0x61>
c001d781:	50                   	push   eax
c001d782:	50                   	push   eax
c001d783:	6a 01                	push   0x1
c001d785:	52                   	push   edx
c001d786:	53                   	push   ebx
c001d787:	57                   	push   edi
c001d788:	56                   	push   esi
c001d789:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d78d:	e8 da fb ff ff       	call   c001d36c <ATA::access(unsigned long long, int, void*, bool)>
c001d792:	83 c4 20             	add    esp,0x20
c001d795:	85 c0                	test   eax,eax
c001d797:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d79b:	75 11                	jne    c001d7ae <ATA::write(unsigned long long, int, void*)+0x5c>
c001d79d:	01 1d 60 61 02 c0    	add    DWORD PTR ds:0xc0026160,ebx
c001d7a3:	e8 7c f8 fe ff       	call   c000d024 <VgaText::updateDiskUsage()>
c001d7a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7ac:	eb 05                	jmp    c001d7b3 <ATA::write(unsigned long long, int, void*)+0x61>
c001d7ae:	b8 01 00 00 00       	mov    eax,0x1
c001d7b3:	83 c4 10             	add    esp,0x10
c001d7b6:	5b                   	pop    ebx
c001d7b7:	5e                   	pop    esi
c001d7b8:	5f                   	pop    edi
c001d7b9:	c3                   	ret    

c001d7ba <ATA::detectCHS()>:
c001d7ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d7be:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d7c4:	c1 e0 06             	shl    eax,0x6
c001d7c7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d7cd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d7d7:	c7 44 24 04 ef 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233ef
c001d7df:	e9 3c 81 ff ff       	jmp    c0015920 <Krnl::panic(char const*)>

c001d7e4 <ATA::open(int, int, void*)>:
c001d7e4:	53                   	push   ebx
c001d7e5:	83 ec 08             	sub    esp,0x8
c001d7e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7f4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d7fa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d800:	c1 e0 06             	shl    eax,0x6
c001d803:	01 d0                	add    eax,edx
c001d805:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d80c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d812:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d819:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d823:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d829:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d830:	75 0c                	jne    c001d83e <ATA::open(int, int, void*)+0x5a>
c001d832:	83 ec 0c             	sub    esp,0xc
c001d835:	53                   	push   ebx
c001d836:	e8 7f ff ff ff       	call   c001d7ba <ATA::detectCHS()>
c001d83b:	83 c4 10             	add    esp,0x10
c001d83e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d844:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d84a:	c1 e0 06             	shl    eax,0x6
c001d84d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d854:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d85e:	d1 e8                	shr    eax,1
c001d860:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d866:	6a 04                	push   0x4
c001d868:	6a 0c                	push   0xc
c001d86a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d871:	50                   	push   eax
c001d872:	52                   	push   edx
c001d873:	e8 f4 ed ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d878:	90                   	nop
c001d879:	90                   	nop
c001d87a:	6a 00                	push   0x0
c001d87c:	6a 0c                	push   0xc
c001d87e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d885:	50                   	push   eax
c001d886:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d88c:	e8 db ed ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d891:	83 c4 14             	add    esp,0x14
c001d894:	53                   	push   ebx
c001d895:	e8 18 31 ff ff       	call   c00109b2 <PhysicalDisk::startCache()>
c001d89a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d89d:	e8 f6 50 ff ff       	call   c0012998 <createPartitionsForDisk(PhysicalDisk*)>
c001d8a2:	31 c0                	xor    eax,eax
c001d8a4:	83 c4 18             	add    esp,0x18
c001d8a7:	5b                   	pop    ebx
c001d8a8:	c3                   	ret    
c001d8a9:	90                   	nop

c001d8aa <ATAPI::write(unsigned long long, int, void*)>:
c001d8aa:	b8 03 00 00 00       	mov    eax,0x3
c001d8af:	c3                   	ret    

c001d8b0 <ATAPI::close(int, int, void*)>:
c001d8b0:	83 ec 0c             	sub    esp,0xc
c001d8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8bd:	85 c0                	test   eax,eax
c001d8bf:	74 0c                	je     c001d8cd <ATAPI::close(int, int, void*)+0x1d>
c001d8c1:	83 ec 0c             	sub    esp,0xc
c001d8c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d8c6:	50                   	push   eax
c001d8c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d8ca:	83 c4 10             	add    esp,0x10
c001d8cd:	31 c0                	xor    eax,eax
c001d8cf:	83 c4 0c             	add    esp,0xc
c001d8d2:	c3                   	ret    
c001d8d3:	90                   	nop

c001d8d4 <ATAPI::ATAPI()>:
c001d8d4:	83 ec 0c             	sub    esp,0xc
c001d8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8db:	83 ec 04             	sub    esp,0x4
c001d8de:	68 00 08 00 00       	push   0x800
c001d8e3:	68 38 34 02 c0       	push   0xc0023438
c001d8e8:	50                   	push   eax
c001d8e9:	e8 5c 30 ff ff       	call   c001094a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d8ee:	83 c4 10             	add    esp,0x10
c001d8f1:	ba 78 34 02 c0       	mov    edx,0xc0023478
c001d8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8fa:	89 10                	mov    DWORD PTR [eax],edx
c001d8fc:	90                   	nop
c001d8fd:	83 c4 0c             	add    esp,0xc
c001d900:	c3                   	ret    
c001d901:	90                   	nop

c001d902 <ATAPI::readyForCommand()>:
c001d902:	56                   	push   esi
c001d903:	53                   	push   ebx
c001d904:	31 db                	xor    ebx,ebx
c001d906:	50                   	push   eax
c001d907:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d90b:	50                   	push   eax
c001d90c:	6a 0c                	push   0xc
c001d90e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d915:	50                   	push   eax
c001d916:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d91c:	e8 0b ee ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001d921:	83 c4 10             	add    esp,0x10
c001d924:	a8 88                	test   al,0x88
c001d926:	74 23                	je     c001d94b <ATAPI::readyForCommand()+0x49>
c001d928:	43                   	inc    ebx
c001d929:	83 fb 63             	cmp    ebx,0x63
c001d92c:	7e dd                	jle    c001d90b <ATAPI::readyForCommand()+0x9>
c001d92e:	51                   	push   ecx
c001d92f:	51                   	push   ecx
c001d930:	6a 00                	push   0x0
c001d932:	68 40 42 0f 00       	push   0xf4240
c001d937:	e8 80 b4 ff ff       	call   c0018dbc <nanoSleep(unsigned long long)>
c001d93c:	83 c4 10             	add    esp,0x10
c001d93f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d945:	75 c4                	jne    c001d90b <ATAPI::readyForCommand()+0x9>
c001d947:	31 c0                	xor    eax,eax
c001d949:	eb 02                	jmp    c001d94d <ATAPI::readyForCommand()+0x4b>
c001d94b:	b0 01                	mov    al,0x1
c001d94d:	5a                   	pop    edx
c001d94e:	5b                   	pop    ebx
c001d94f:	5e                   	pop    esi
c001d950:	c3                   	ret    
c001d951:	90                   	nop

c001d952 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d952:	55                   	push   ebp
c001d953:	57                   	push   edi
c001d954:	56                   	push   esi
c001d955:	53                   	push   ebx
c001d956:	83 ec 20             	sub    esp,0x20
c001d959:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d95d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d961:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d965:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d969:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d96d:	6a 01                	push   0x1
c001d96f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d976:	50                   	push   eax
c001d977:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d97d:	e8 f6 ee ff ff       	call   c001c878 <IDE::enableIRQs(unsigned char, bool)>
c001d982:	5e                   	pop    esi
c001d983:	58                   	pop    eax
c001d984:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d98b:	50                   	push   eax
c001d98c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d992:	e8 af ec ff ff       	call   c001c646 <IDE::prepareInterrupt(unsigned char)>
c001d997:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d99a:	e8 63 ff ff ff       	call   c001d902 <ATAPI::readyForCommand()>
c001d99f:	83 c4 10             	add    esp,0x10
c001d9a2:	84 c0                	test   al,al
c001d9a4:	75 0a                	jne    c001d9b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d9a6:	bb 01 00 00 00       	mov    ebx,0x1
c001d9ab:	e9 57 02 00 00       	jmp    c001dc07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d9b0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d9b6:	c1 e0 04             	shl    eax,0x4
c001d9b9:	0f b6 c0             	movzx  eax,al
c001d9bc:	50                   	push   eax
c001d9bd:	6a 06                	push   0x6
c001d9bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9c6:	50                   	push   eax
c001d9c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9cd:	e8 9a ec ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d2:	6a 00                	push   0x0
c001d9d4:	6a 01                	push   0x1
c001d9d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9dd:	50                   	push   eax
c001d9de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d9e4:	e8 83 ec ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9e9:	83 c4 20             	add    esp,0x20
c001d9ec:	0f b6 c3             	movzx  eax,bl
c001d9ef:	0f b6 df             	movzx  ebx,bh
c001d9f2:	50                   	push   eax
c001d9f3:	6a 04                	push   0x4
c001d9f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d9fc:	50                   	push   eax
c001d9fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da03:	e8 64 ec ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da08:	53                   	push   ebx
c001da09:	6a 05                	push   0x5
c001da0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da12:	50                   	push   eax
c001da13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da19:	e8 4e ec ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da1e:	83 c4 20             	add    esp,0x20
c001da21:	68 a0 00 00 00       	push   0xa0
c001da26:	6a 07                	push   0x7
c001da28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da2f:	50                   	push   eax
c001da30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da36:	e8 31 ec ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da3b:	83 c4 0c             	add    esp,0xc
c001da3e:	6a 01                	push   0x1
c001da40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001da47:	50                   	push   eax
c001da48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da4e:	e8 c5 f7 ff ff       	call   c001d218 <IDE::polling(unsigned char, unsigned int)>
c001da53:	83 c4 10             	add    esp,0x10
c001da56:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001da5c:	84 c0                	test   al,al
c001da5e:	74 23                	je     c001da83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001da60:	0f b6 d8             	movzx  ebx,al
c001da63:	0f b6 d2             	movzx  edx,dl
c001da66:	53                   	push   ebx
c001da67:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001da6e:	50                   	push   eax
c001da6f:	52                   	push   edx
c001da70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da76:	e8 07 f6 ff ff       	call   c001d082 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	e9 84 01 00 00       	jmp    c001dc07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001da83:	0f b6 d2             	movzx  edx,dl
c001da86:	53                   	push   ebx
c001da87:	53                   	push   ebx
c001da88:	52                   	push   edx
c001da89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001da8f:	e8 c6 eb ff ff       	call   c001c65a <IDE::getBase(unsigned char)>
c001da94:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001da98:	b9 06 00 00 00       	mov    ecx,0x6
c001da9d:	89 c2                	mov    edx,eax
c001da9f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001daa2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001daa6:	83 c4 10             	add    esp,0x10
c001daa9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001daaf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dab6:	85 db                	test   ebx,ebx
c001dab8:	0f 84 ec 00 00 00    	je     c001dbaa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dabe:	51                   	push   ecx
c001dabf:	51                   	push   ecx
c001dac0:	52                   	push   edx
c001dac1:	50                   	push   eax
c001dac2:	e8 13 ed ff ff       	call   c001c7da <IDE::waitInterrupt(unsigned char)>
c001dac7:	83 c4 10             	add    esp,0x10
c001daca:	84 c0                	test   al,al
c001dacc:	0f 84 d4 fe ff ff    	je     c001d9a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dad2:	56                   	push   esi
c001dad3:	56                   	push   esi
c001dad4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dadb:	50                   	push   eax
c001dadc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dae2:	e8 5f eb ff ff       	call   c001c646 <IDE::prepareInterrupt(unsigned char)>
c001dae7:	83 c4 0c             	add    esp,0xc
c001daea:	6a 04                	push   0x4
c001daec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001daf3:	50                   	push   eax
c001daf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dafa:	e8 2d ec ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001daff:	83 c4 0c             	add    esp,0xc
c001db02:	89 c6                	mov    esi,eax
c001db04:	6a 05                	push   0x5
c001db06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db0d:	50                   	push   eax
c001db0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db14:	e8 13 ec ff ff       	call   c001c72c <IDE::read(unsigned char, unsigned char)>
c001db19:	89 f1                	mov    ecx,esi
c001db1b:	0f b6 c0             	movzx  eax,al
c001db1e:	0f b6 f1             	movzx  esi,cl
c001db21:	c1 e0 08             	shl    eax,0x8
c001db24:	09 c6                	or     esi,eax
c001db26:	d1 fe                	sar    esi,1
c001db28:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001db2c:	83 c4 10             	add    esp,0x10
c001db2f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001db34:	74 41                	je     c001db77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001db36:	31 c9                	xor    ecx,ecx
c001db38:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001db3e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001db45:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001db49:	75 0a                	jne    c001db55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001db4b:	01 c9                	add    ecx,ecx
c001db4d:	01 cd                	add    ebp,ecx
c001db4f:	4b                   	dec    ebx
c001db50:	e9 54 ff ff ff       	jmp    c001daa9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001db55:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001db5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001db5e:	51                   	push   ecx
c001db5f:	51                   	push   ecx
c001db60:	52                   	push   edx
c001db61:	50                   	push   eax
c001db62:	e8 f3 ea ff ff       	call   c001c65a <IDE::getBase(unsigned char)>
c001db67:	89 c2                	mov    edx,eax
c001db69:	89 f0                	mov    eax,esi
c001db6b:	66 ef                	out    dx,ax
c001db6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db71:	83 c4 10             	add    esp,0x10
c001db74:	41                   	inc    ecx
c001db75:	eb c1                	jmp    c001db38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001db77:	31 f6                	xor    esi,esi
c001db79:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001db7f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001db86:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001db8a:	75 06                	jne    c001db92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001db8c:	01 f6                	add    esi,esi
c001db8e:	01 f5                	add    ebp,esi
c001db90:	eb bd                	jmp    c001db4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001db92:	51                   	push   ecx
c001db93:	51                   	push   ecx
c001db94:	52                   	push   edx
c001db95:	50                   	push   eax
c001db96:	e8 bf ea ff ff       	call   c001c65a <IDE::getBase(unsigned char)>
c001db9b:	89 c2                	mov    edx,eax
c001db9d:	66 ed                	in     ax,dx
c001db9f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001dba4:	83 c4 10             	add    esp,0x10
c001dba7:	46                   	inc    esi
c001dba8:	eb cf                	jmp    c001db79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001dbaa:	51                   	push   ecx
c001dbab:	51                   	push   ecx
c001dbac:	52                   	push   edx
c001dbad:	50                   	push   eax
c001dbae:	e8 27 ec ff ff       	call   c001c7da <IDE::waitInterrupt(unsigned char)>
c001dbb3:	83 c4 10             	add    esp,0x10
c001dbb6:	84 c0                	test   al,al
c001dbb8:	0f 84 e8 fd ff ff    	je     c001d9a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dbbe:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dbc3:	52                   	push   edx
c001dbc4:	52                   	push   edx
c001dbc5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbcc:	50                   	push   eax
c001dbcd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbd3:	e8 6e ea ff ff       	call   c001c646 <IDE::prepareInterrupt(unsigned char)>
c001dbd8:	83 c4 10             	add    esp,0x10
c001dbdb:	50                   	push   eax
c001dbdc:	50                   	push   eax
c001dbdd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbe4:	50                   	push   eax
c001dbe5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbeb:	e8 6a ea ff ff       	call   c001c65a <IDE::getBase(unsigned char)>
c001dbf0:	8d 50 07             	lea    edx,[eax+0x7]
c001dbf3:	ec                   	in     al,dx
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	a8 88                	test   al,0x88
c001dbf9:	74 0a                	je     c001dc05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dbfb:	4b                   	dec    ebx
c001dbfc:	75 dd                	jne    c001dbdb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dbfe:	bb 02 00 00 00       	mov    ebx,0x2
c001dc03:	eb 02                	jmp    c001dc07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc05:	31 db                	xor    ebx,ebx
c001dc07:	83 c4 1c             	add    esp,0x1c
c001dc0a:	89 d8                	mov    eax,ebx
c001dc0c:	5b                   	pop    ebx
c001dc0d:	5e                   	pop    esi
c001dc0e:	5f                   	pop    edi
c001dc0f:	5d                   	pop    ebp
c001dc10:	c3                   	ret    
c001dc11:	90                   	nop

c001dc12 <ATAPI::diskRemoved()>:
c001dc12:	83 ec 18             	sub    esp,0x18
c001dc15:	68 43 34 02 c0       	push   0xc0023443
c001dc1a:	e8 1a 15 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001dc1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc23:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001dc2a:	83 c4 1c             	add    esp,0x1c
c001dc2d:	c3                   	ret    

c001dc2e <ATAPI::eject()>:
c001dc2e:	57                   	push   edi
c001dc2f:	b9 03 00 00 00       	mov    ecx,0x3
c001dc34:	53                   	push   ebx
c001dc35:	83 ec 14             	sub    esp,0x14
c001dc38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dc3c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dc40:	fc                   	cld    
c001dc41:	31 c0                	xor    eax,eax
c001dc43:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc45:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001dc4a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dc4f:	50                   	push   eax
c001dc50:	50                   	push   eax
c001dc51:	6a 00                	push   0x0
c001dc53:	6a 00                	push   0x0
c001dc55:	6a 00                	push   0x0
c001dc57:	6a 02                	push   0x2
c001dc59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc5d:	50                   	push   eax
c001dc5e:	53                   	push   ebx
c001dc5f:	e8 ee fc ff ff       	call   c001d952 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc64:	83 c4 14             	add    esp,0x14
c001dc67:	53                   	push   ebx
c001dc68:	e8 a5 ff ff ff       	call   c001dc12 <ATAPI::diskRemoved()>
c001dc6d:	83 c4 24             	add    esp,0x24
c001dc70:	5b                   	pop    ebx
c001dc71:	5f                   	pop    edi
c001dc72:	c3                   	ret    
c001dc73:	90                   	nop

c001dc74 <ATAPI::diskInserted()>:
c001dc74:	53                   	push   ebx
c001dc75:	83 ec 14             	sub    esp,0x14
c001dc78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dc7c:	68 59 34 02 c0       	push   0xc0023459
c001dc81:	e8 b3 14 ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001dc86:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001dc8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc90:	e8 1d 2d ff ff       	call   c00109b2 <PhysicalDisk::startCache()>
c001dc95:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001dc99:	83 c4 18             	add    esp,0x18
c001dc9c:	5b                   	pop    ebx
c001dc9d:	e9 f6 4c ff ff       	jmp    c0012998 <createPartitionsForDisk(PhysicalDisk*)>

c001dca2 <ATAPI::detectMedia()>:
c001dca2:	56                   	push   esi
c001dca3:	53                   	push   ebx
c001dca4:	83 ec 28             	sub    esp,0x28
c001dca7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dcab:	6a 0c                	push   0xc
c001dcad:	6a 00                	push   0x0
c001dcaf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001dcb3:	56                   	push   esi
c001dcb4:	e8 2d 2a fe ff       	call   c00006e6 <memset>
c001dcb9:	58                   	pop    eax
c001dcba:	5a                   	pop    edx
c001dcbb:	6a 00                	push   0x0
c001dcbd:	6a 00                	push   0x0
c001dcbf:	6a 00                	push   0x0
c001dcc1:	6a 00                	push   0x0
c001dcc3:	56                   	push   esi
c001dcc4:	53                   	push   ebx
c001dcc5:	e8 88 fc ff ff       	call   c001d952 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dcca:	83 c4 1c             	add    esp,0x1c
c001dccd:	6a 0c                	push   0xc
c001dccf:	6a 00                	push   0x0
c001dcd1:	56                   	push   esi
c001dcd2:	e8 0f 2a fe ff       	call   c00006e6 <memset>
c001dcd7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001dcdc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001dce1:	59                   	pop    ecx
c001dce2:	58                   	pop    eax
c001dce3:	6a 01                	push   0x1
c001dce5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001dce9:	50                   	push   eax
c001dcea:	6a 00                	push   0x0
c001dcec:	6a 12                	push   0x12
c001dcee:	56                   	push   esi
c001dcef:	53                   	push   ebx
c001dcf0:	e8 5d fc ff ff       	call   c001d952 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dcf5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001dcf9:	83 c4 20             	add    esp,0x20
c001dcfc:	83 e0 7f             	and    eax,0x7f
c001dcff:	3c 70                	cmp    al,0x70
c001dd01:	74 15                	je     c001dd18 <ATAPI::detectMedia()+0x76>
c001dd03:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dd0a:	75 0c                	jne    c001dd18 <ATAPI::detectMedia()+0x76>
c001dd0c:	83 ec 0c             	sub    esp,0xc
c001dd0f:	53                   	push   ebx
c001dd10:	e8 5f ff ff ff       	call   c001dc74 <ATAPI::diskInserted()>
c001dd15:	83 c4 10             	add    esp,0x10
c001dd18:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dd1c:	83 e0 0f             	and    eax,0xf
c001dd1f:	3c 02                	cmp    al,0x2
c001dd21:	75 1b                	jne    c001dd3e <ATAPI::detectMedia()+0x9c>
c001dd23:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dd28:	75 2d                	jne    c001dd57 <ATAPI::detectMedia()+0xb5>
c001dd2a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dd31:	74 24                	je     c001dd57 <ATAPI::detectMedia()+0xb5>
c001dd33:	83 ec 0c             	sub    esp,0xc
c001dd36:	53                   	push   ebx
c001dd37:	e8 d6 fe ff ff       	call   c001dc12 <ATAPI::diskRemoved()>
c001dd3c:	eb 16                	jmp    c001dd54 <ATAPI::detectMedia()+0xb2>
c001dd3e:	84 c0                	test   al,al
c001dd40:	75 15                	jne    c001dd57 <ATAPI::detectMedia()+0xb5>
c001dd42:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dd49:	75 0c                	jne    c001dd57 <ATAPI::detectMedia()+0xb5>
c001dd4b:	83 ec 0c             	sub    esp,0xc
c001dd4e:	53                   	push   ebx
c001dd4f:	e8 20 ff ff ff       	call   c001dc74 <ATAPI::diskInserted()>
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	83 c4 24             	add    esp,0x24
c001dd5a:	5b                   	pop    ebx
c001dd5b:	5e                   	pop    esi
c001dd5c:	c3                   	ret    
c001dd5d:	90                   	nop

c001dd5e <ATAPI::open(int, int, void*)>:
c001dd5e:	53                   	push   ebx
c001dd5f:	83 ec 08             	sub    esp,0x8
c001dd62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd6e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dd74:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dd7a:	c1 e0 06             	shl    eax,0x6
c001dd7d:	01 d0                	add    eax,edx
c001dd7f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001dd86:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001dd8c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001dd93:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001dd9d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dda3:	6a 04                	push   0x4
c001dda5:	6a 0c                	push   0xc
c001dda7:	51                   	push   ecx
c001dda8:	52                   	push   edx
c001dda9:	e8 be e8 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddae:	90                   	nop
c001ddaf:	90                   	nop
c001ddb0:	6a 00                	push   0x0
c001ddb2:	6a 0c                	push   0xc
c001ddb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddbb:	50                   	push   eax
c001ddbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddc2:	e8 a5 e8 ff ff       	call   c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddc7:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ddce:	83 c4 14             	add    esp,0x14
c001ddd1:	53                   	push   ebx
c001ddd2:	e8 cb fe ff ff       	call   c001dca2 <ATAPI::detectMedia()>
c001ddd7:	31 c0                	xor    eax,eax
c001ddd9:	83 c4 18             	add    esp,0x18
c001dddc:	5b                   	pop    ebx
c001dddd:	c3                   	ret    

c001ddde <ATAPI::read(unsigned long long, int, void*)>:
c001ddde:	55                   	push   ebp
c001dddf:	57                   	push   edi
c001dde0:	56                   	push   esi
c001dde1:	53                   	push   ebx
c001dde2:	83 ec 1c             	sub    esp,0x1c
c001dde5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dde9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dded:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ddf1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ddf8:	74 41                	je     c001de3b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ddfa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ddfe:	b9 03 00 00 00       	mov    ecx,0x3
c001de03:	fc                   	cld    
c001de04:	31 c0                	xor    eax,eax
c001de06:	86 fb                	xchg   bl,bh
c001de08:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de0a:	c1 c3 10             	rol    ebx,0x10
c001de0d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001de12:	89 e8                	mov    eax,ebp
c001de14:	86 fb                	xchg   bl,bh
c001de16:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001de1a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001de1e:	50                   	push   eax
c001de1f:	50                   	push   eax
c001de20:	55                   	push   ebp
c001de21:	c1 e5 0b             	shl    ebp,0xb
c001de24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001de28:	6a 00                	push   0x0
c001de2a:	55                   	push   ebp
c001de2b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001de2f:	50                   	push   eax
c001de30:	56                   	push   esi
c001de31:	e8 1c fb ff ff       	call   c001d952 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de36:	83 c4 20             	add    esp,0x20
c001de39:	eb 1a                	jmp    c001de55 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001de3b:	83 ec 0c             	sub    esp,0xc
c001de3e:	56                   	push   esi
c001de3f:	e8 5e fe ff ff       	call   c001dca2 <ATAPI::detectMedia()>
c001de44:	83 c4 10             	add    esp,0x10
c001de47:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001de4e:	75 aa                	jne    c001ddfa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001de50:	b8 02 00 00 00       	mov    eax,0x2
c001de55:	83 c4 1c             	add    esp,0x1c
c001de58:	5b                   	pop    ebx
c001de59:	5e                   	pop    esi
c001de5a:	5f                   	pop    edi
c001de5b:	5d                   	pop    ebp
c001de5c:	c3                   	ret    
c001de5d:	90                   	nop

c001de5e <AVX::open(int, int, void*)>:
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	e8 12 10 00 00       	call   c001ee78 <avxInit>
c001de66:	b8 00 00 00 00       	mov    eax,0x0
c001de6b:	83 c4 0c             	add    esp,0xc
c001de6e:	c3                   	ret    
c001de6f:	90                   	nop

c001de70 <AVX::close(int, int, void*)>:
c001de70:	83 ec 0c             	sub    esp,0xc
c001de73:	e8 01 10 00 00       	call   c001ee79 <avxClose>
c001de78:	b8 00 00 00 00       	mov    eax,0x0
c001de7d:	83 c4 0c             	add    esp,0xc
c001de80:	c3                   	ret    
c001de81:	90                   	nop

c001de82 <AVX::available()>:
c001de82:	83 ec 0c             	sub    esp,0xc
c001de85:	e8 e6 0f 00 00       	call   c001ee70 <avxDetect>
c001de8a:	85 c0                	test   eax,eax
c001de8c:	0f 95 c0             	setne  al
c001de8f:	83 c4 0c             	add    esp,0xc
c001de92:	c3                   	ret    
c001de93:	90                   	nop

c001de94 <AVX::save(void*)>:
c001de94:	83 ec 0c             	sub    esp,0xc
c001de97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de9b:	83 ec 0c             	sub    esp,0xc
c001de9e:	50                   	push   eax
c001de9f:	e8 d2 0f 00 00       	call   c001ee76 <avxSave>
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	90                   	nop
c001dea8:	83 c4 0c             	add    esp,0xc
c001deab:	c3                   	ret    

c001deac <AVX::load(void*)>:
c001deac:	83 ec 0c             	sub    esp,0xc
c001deaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001deb3:	83 ec 0c             	sub    esp,0xc
c001deb6:	50                   	push   eax
c001deb7:	e8 bb 0f 00 00       	call   c001ee77 <avxLoad>
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	90                   	nop
c001dec0:	83 c4 0c             	add    esp,0xc
c001dec3:	c3                   	ret    

c001dec4 <AVX::AVX()>:
c001dec4:	83 ec 0c             	sub    esp,0xc
c001dec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001decb:	83 ec 08             	sub    esp,0x8
c001dece:	68 a4 34 02 c0       	push   0xc00234a4
c001ded3:	50                   	push   eax
c001ded4:	e8 4f 2b ff ff       	call   c0010a28 <FPU::FPU(char const*)>
c001ded9:	83 c4 10             	add    esp,0x10
c001dedc:	ba b4 34 02 c0       	mov    edx,0xc00234b4
c001dee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee5:	89 10                	mov    DWORD PTR [eax],edx
c001dee7:	90                   	nop
c001dee8:	83 c4 0c             	add    esp,0xc
c001deeb:	c3                   	ret    

c001deec <MMX::available()>:
c001deec:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001def1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001def7:	83 e0 20             	and    eax,0x20
c001defa:	84 c0                	test   al,al
c001defc:	0f 95 c0             	setne  al
c001deff:	c3                   	ret    

c001df00 <MMX::open(int, int, void*)>:
c001df00:	83 ec 0c             	sub    esp,0xc
c001df03:	e8 e4 0f 00 00       	call   c001eeec <x87Init>
c001df08:	b8 00 00 00 00       	mov    eax,0x0
c001df0d:	83 c4 0c             	add    esp,0xc
c001df10:	c3                   	ret    
c001df11:	90                   	nop

c001df12 <MMX::close(int, int, void*)>:
c001df12:	83 ec 0c             	sub    esp,0xc
c001df15:	e8 ec 0f 00 00       	call   c001ef06 <x87Close>
c001df1a:	b8 00 00 00 00       	mov    eax,0x0
c001df1f:	83 c4 0c             	add    esp,0xc
c001df22:	c3                   	ret    
c001df23:	90                   	nop

c001df24 <MMX::save(void*)>:
c001df24:	83 ec 0c             	sub    esp,0xc
c001df27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df2b:	83 ec 0c             	sub    esp,0xc
c001df2e:	50                   	push   eax
c001df2f:	e8 ad 0f 00 00       	call   c001eee1 <x87Save>
c001df34:	83 c4 10             	add    esp,0x10
c001df37:	90                   	nop
c001df38:	83 c4 0c             	add    esp,0xc
c001df3b:	c3                   	ret    

c001df3c <MMX::load(void*)>:
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df43:	83 ec 0c             	sub    esp,0xc
c001df46:	50                   	push   eax
c001df47:	e8 9b 0f 00 00       	call   c001eee7 <x87Load>
c001df4c:	83 c4 10             	add    esp,0x10
c001df4f:	90                   	nop
c001df50:	83 c4 0c             	add    esp,0xc
c001df53:	c3                   	ret    

c001df54 <MMX::MMX()>:
c001df54:	83 ec 0c             	sub    esp,0xc
c001df57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5b:	83 ec 08             	sub    esp,0x8
c001df5e:	68 e4 34 02 c0       	push   0xc00234e4
c001df63:	50                   	push   eax
c001df64:	e8 bf 2a ff ff       	call   c0010a28 <FPU::FPU(char const*)>
c001df69:	83 c4 10             	add    esp,0x10
c001df6c:	ba f4 34 02 c0       	mov    edx,0xc00234f4
c001df71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df75:	89 10                	mov    DWORD PTR [eax],edx
c001df77:	90                   	nop
c001df78:	83 c4 0c             	add    esp,0xc
c001df7b:	c3                   	ret    

c001df7c <SSE::open(int, int, void*)>:
c001df7c:	83 ec 0c             	sub    esp,0xc
c001df7f:	e8 23 0f 00 00       	call   c001eea7 <sseInit>
c001df84:	b8 00 00 00 00       	mov    eax,0x0
c001df89:	83 c4 0c             	add    esp,0xc
c001df8c:	c3                   	ret    
c001df8d:	90                   	nop

c001df8e <SSE::close(int, int, void*)>:
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	e8 21 0f 00 00       	call   c001eeb7 <sseClose>
c001df96:	b8 00 00 00 00       	mov    eax,0x0
c001df9b:	83 c4 0c             	add    esp,0xc
c001df9e:	c3                   	ret    
c001df9f:	90                   	nop

c001dfa0 <SSE::available()>:
c001dfa0:	83 ec 1c             	sub    esp,0x1c
c001dfa3:	e8 d8 0e 00 00       	call   c001ee80 <sseDetect>
c001dfa8:	85 c0                	test   eax,eax
c001dfaa:	0f 95 c0             	setne  al
c001dfad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dfb1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dfb5:	83 c4 1c             	add    esp,0x1c
c001dfb8:	c3                   	ret    
c001dfb9:	90                   	nop

c001dfba <SSE::save(void*)>:
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfc1:	83 ec 0c             	sub    esp,0xc
c001dfc4:	50                   	push   eax
c001dfc5:	e8 d1 0e 00 00       	call   c001ee9b <sseSave>
c001dfca:	83 c4 10             	add    esp,0x10
c001dfcd:	90                   	nop
c001dfce:	83 c4 0c             	add    esp,0xc
c001dfd1:	c3                   	ret    

c001dfd2 <SSE::load(void*)>:
c001dfd2:	83 ec 0c             	sub    esp,0xc
c001dfd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfd9:	83 ec 0c             	sub    esp,0xc
c001dfdc:	50                   	push   eax
c001dfdd:	e8 bf 0e 00 00       	call   c001eea1 <sseLoad>
c001dfe2:	83 c4 10             	add    esp,0x10
c001dfe5:	90                   	nop
c001dfe6:	83 c4 0c             	add    esp,0xc
c001dfe9:	c3                   	ret    

c001dfea <SSE::SSE()>:
c001dfea:	83 ec 0c             	sub    esp,0xc
c001dfed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff1:	83 ec 08             	sub    esp,0x8
c001dff4:	68 24 35 02 c0       	push   0xc0023524
c001dff9:	50                   	push   eax
c001dffa:	e8 29 2a ff ff       	call   c0010a28 <FPU::FPU(char const*)>
c001dfff:	83 c4 10             	add    esp,0x10
c001e002:	ba 34 35 02 c0       	mov    edx,0xc0023534
c001e007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e00b:	89 10                	mov    DWORD PTR [eax],edx
c001e00d:	90                   	nop
c001e00e:	83 c4 0c             	add    esp,0xc
c001e011:	c3                   	ret    

c001e012 <x87::open(int, int, void*)>:
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	e8 d2 0e 00 00       	call   c001eeec <x87Init>
c001e01a:	b8 00 00 00 00       	mov    eax,0x0
c001e01f:	83 c4 0c             	add    esp,0xc
c001e022:	c3                   	ret    
c001e023:	90                   	nop

c001e024 <x87::close(int, int, void*)>:
c001e024:	83 ec 0c             	sub    esp,0xc
c001e027:	e8 da 0e 00 00       	call   c001ef06 <x87Close>
c001e02c:	b8 00 00 00 00       	mov    eax,0x0
c001e031:	83 c4 0c             	add    esp,0xc
c001e034:	c3                   	ret    
c001e035:	90                   	nop

c001e036 <x87::available()>:
c001e036:	83 ec 0c             	sub    esp,0xc
c001e039:	e8 88 0e 00 00       	call   c001eec6 <x87Detect>
c001e03e:	85 c0                	test   eax,eax
c001e040:	0f 95 c0             	setne  al
c001e043:	83 c4 0c             	add    esp,0xc
c001e046:	c3                   	ret    
c001e047:	90                   	nop

c001e048 <x87::save(void*)>:
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e04f:	83 ec 0c             	sub    esp,0xc
c001e052:	50                   	push   eax
c001e053:	e8 89 0e 00 00       	call   c001eee1 <x87Save>
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	90                   	nop
c001e05c:	83 c4 0c             	add    esp,0xc
c001e05f:	c3                   	ret    

c001e060 <x87::load(void*)>:
c001e060:	83 ec 0c             	sub    esp,0xc
c001e063:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e067:	83 ec 0c             	sub    esp,0xc
c001e06a:	50                   	push   eax
c001e06b:	e8 77 0e 00 00       	call   c001eee7 <x87Load>
c001e070:	83 c4 10             	add    esp,0x10
c001e073:	90                   	nop
c001e074:	83 c4 0c             	add    esp,0xc
c001e077:	c3                   	ret    

c001e078 <x87::x87()>:
c001e078:	83 ec 0c             	sub    esp,0xc
c001e07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07f:	83 ec 08             	sub    esp,0x8
c001e082:	68 64 35 02 c0       	push   0xc0023564
c001e087:	50                   	push   eax
c001e088:	e8 9b 29 ff ff       	call   c0010a28 <FPU::FPU(char const*)>
c001e08d:	83 c4 10             	add    esp,0x10
c001e090:	ba 74 35 02 c0       	mov    edx,0xc0023574
c001e095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e099:	89 10                	mov    DWORD PTR [eax],edx
c001e09b:	90                   	nop
c001e09c:	83 c4 0c             	add    esp,0xc
c001e09f:	c3                   	ret    

c001e0a0 <APIC::disable()>:
c001e0a0:	90                   	nop
c001e0a1:	c3                   	ret    

c001e0a2 <APIC::close(int, int, void*)>:
c001e0a2:	55                   	push   ebp
c001e0a3:	89 e5                	mov    ebp,esp
c001e0a5:	83 ec 08             	sub    esp,0x8
c001e0a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0ad:	83 c0 3c             	add    eax,0x3c
c001e0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0b2:	83 ec 0c             	sub    esp,0xc
c001e0b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e0b8:	ff d0                	call   eax
c001e0ba:	83 c4 10             	add    esp,0x10
c001e0bd:	b8 00 00 00 00       	mov    eax,0x0
c001e0c2:	c9                   	leave  
c001e0c3:	c3                   	ret    

c001e0c4 <IOAPIC::close(int, int, void*)>:
c001e0c4:	b8 00 00 00 00       	mov    eax,0x0
c001e0c9:	c3                   	ret    

c001e0ca <APIC::io_wait()>:
c001e0ca:	eb 00                	jmp    c001e0cc <APIC::io_wait()+0x2>
c001e0cc:	eb 00                	jmp    c001e0ce <APIC::io_wait()+0x4>
c001e0ce:	90                   	nop
c001e0cf:	c3                   	ret    

c001e0d0 <APIC::getBase()>:
c001e0d0:	55                   	push   ebp
c001e0d1:	89 e5                	mov    ebp,esp
c001e0d3:	83 ec 18             	sub    esp,0x18
c001e0d6:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001e0db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e0e1:	83 e0 08             	and    eax,0x8
c001e0e4:	84 c0                	test   al,al
c001e0e6:	75 07                	jne    c001e0ef <APIC::getBase()+0x1f>
c001e0e8:	b8 00 00 00 00       	mov    eax,0x0
c001e0ed:	eb 21                	jmp    c001e110 <APIC::getBase()+0x40>
c001e0ef:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001e0f4:	83 ec 08             	sub    esp,0x8
c001e0f7:	6a 1b                	push   0x1b
c001e0f9:	50                   	push   eax
c001e0fa:	e8 e9 d4 fe ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c001e0ff:	83 c4 10             	add    esp,0x10
c001e102:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e105:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e108:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e10b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e110:	c9                   	leave  
c001e111:	c3                   	ret    

c001e112 <APIC::eoi(unsigned char)>:
c001e112:	55                   	push   ebp
c001e113:	89 e5                	mov    ebp,esp
c001e115:	83 ec 28             	sub    esp,0x28
c001e118:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e11b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e124:	e8 a7 ff ff ff       	call   c001e0d0 <APIC::getBase()>
c001e129:	83 c4 10             	add    esp,0x10
c001e12c:	05 b0 00 00 00       	add    eax,0xb0
c001e131:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e134:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e137:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e13d:	90                   	nop
c001e13e:	c9                   	leave  
c001e13f:	c3                   	ret    

c001e140 <APIC::open(int, int, void*)>:
c001e140:	55                   	push   ebp
c001e141:	89 e5                	mov    ebp,esp
c001e143:	57                   	push   edi
c001e144:	56                   	push   esi
c001e145:	53                   	push   ebx
c001e146:	83 ec 1c             	sub    esp,0x1c
c001e149:	83 ec 0c             	sub    esp,0xc
c001e14c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e14f:	e8 7c ff ff ff       	call   c001e0d0 <APIC::getBase()>
c001e154:	83 c4 10             	add    esp,0x10
c001e157:	05 f0 00 00 00       	add    eax,0xf0
c001e15c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e15f:	83 ec 0c             	sub    esp,0xc
c001e162:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e165:	e8 66 ff ff ff       	call   c001e0d0 <APIC::getBase()>
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	89 c2                	mov    edx,eax
c001e16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e172:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e178:	0f b6 f8             	movzx  edi,al
c001e17b:	89 d0                	mov    eax,edx
c001e17d:	ba 00 00 00 00       	mov    edx,0x0
c001e182:	89 c1                	mov    ecx,eax
c001e184:	80 e5 ff             	and    ch,0xff
c001e187:	89 cb                	mov    ebx,ecx
c001e189:	0f b6 f2             	movzx  esi,dl
c001e18c:	89 d8                	mov    eax,ebx
c001e18e:	89 f2                	mov    edx,esi
c001e190:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e193:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e196:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e19a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e19e:	83 e0 00             	and    eax,0x0
c001e1a1:	09 d0                	or     eax,edx
c001e1a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e1a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1aa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e1b0:	8d 50 01             	lea    edx,[eax+0x1]
c001e1b3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e1b6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e1bc:	0f b6 d0             	movzx  edx,al
c001e1bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e1c2:	83 c2 08             	add    edx,0x8
c001e1c5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e1c9:	0f b6 c9             	movzx  ecx,cl
c001e1cc:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e1d2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e1d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e1d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1db:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e1de:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e1e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e1e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e1eb:	89 10                	mov    DWORD PTR [eax],edx
c001e1ed:	b8 00 00 00 00       	mov    eax,0x0
c001e1f2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e1f5:	5b                   	pop    ebx
c001e1f6:	5e                   	pop    esi
c001e1f7:	5f                   	pop    edi
c001e1f8:	5d                   	pop    ebp
c001e1f9:	c3                   	ret    

c001e1fa <IOAPIC::IOAPIC()>:
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e201:	83 ec 08             	sub    esp,0x8
c001e204:	68 a4 35 02 c0       	push   0xc00235a4
c001e209:	50                   	push   eax
c001e20a:	e8 25 25 ff ff       	call   c0010734 <Device::Device(char const*)>
c001e20f:	83 c4 10             	add    esp,0x10
c001e212:	ba cc 36 02 c0       	mov    edx,0xc00236cc
c001e217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21b:	89 10                	mov    DWORD PTR [eax],edx
c001e21d:	90                   	nop
c001e21e:	83 c4 0c             	add    esp,0xc
c001e221:	c3                   	ret    

c001e222 <APIC::APIC()>:
c001e222:	53                   	push   ebx
c001e223:	83 ec 18             	sub    esp,0x18
c001e226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e22a:	83 ec 08             	sub    esp,0x8
c001e22d:	68 ac 35 02 c0       	push   0xc00235ac
c001e232:	50                   	push   eax
c001e233:	e8 4a 2c ff ff       	call   c0010e82 <InterruptController::InterruptController(char const*)>
c001e238:	83 c4 10             	add    esp,0x10
c001e23b:	ba 84 36 02 c0       	mov    edx,0xc0023684
c001e240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e244:	89 10                	mov    DWORD PTR [eax],edx
c001e246:	a0 c0 61 02 c0       	mov    al,ds:0xc00261c0
c001e24b:	83 f0 01             	xor    eax,0x1
c001e24e:	84 c0                	test   al,al
c001e250:	0f 84 96 00 00 00    	je     c001e2ec <APIC::APIC()+0xca>
c001e256:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e25b:	a0 70 4c 02 c0       	mov    al,ds:0xc0024c70
c001e260:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e264:	73 7f                	jae    c001e2e5 <APIC::APIC()+0xc3>
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	68 68 01 00 00       	push   0x168
c001e26e:	e8 d7 0d ff ff       	call   c000f04a <operator new(unsigned long)>
c001e273:	83 c4 10             	add    esp,0x10
c001e276:	89 c3                	mov    ebx,eax
c001e278:	83 ec 0c             	sub    esp,0xc
c001e27b:	53                   	push   ebx
c001e27c:	e8 79 ff ff ff       	call   c001e1fa <IOAPIC::IOAPIC()>
c001e281:	83 c4 10             	add    esp,0x10
c001e284:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e288:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e28d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e291:	89 14 85 a0 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9e60],edx
c001e298:	a1 80 61 02 c0       	mov    eax,ds:0xc0026180
c001e29d:	40                   	inc    eax
c001e29e:	a3 80 61 02 c0       	mov    ds:0xc0026180,eax
c001e2a3:	a1 c8 43 02 c0       	mov    eax,ds:0xc00243c8
c001e2a8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2ae:	83 ec 08             	sub    esp,0x8
c001e2b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e2b5:	50                   	push   eax
c001e2b6:	e8 89 22 ff ff       	call   c0010544 <Device::addChild(Device*)>
c001e2bb:	83 c4 10             	add    esp,0x10
c001e2be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2c2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2c4:	83 c0 08             	add    eax,0x8
c001e2c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2c9:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e2ce:	6a 00                	push   0x0
c001e2d0:	6a 00                	push   0x0
c001e2d2:	52                   	push   edx
c001e2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e2d7:	ff d0                	call   eax
c001e2d9:	83 c4 10             	add    esp,0x10
c001e2dc:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e2e0:	e9 76 ff ff ff       	jmp    c001e25b <APIC::APIC()+0x39>
c001e2e5:	c6 05 c0 61 02 c0 01 	mov    BYTE PTR ds:0xc00261c0,0x1
c001e2ec:	90                   	nop
c001e2ed:	83 c4 18             	add    esp,0x18
c001e2f0:	5b                   	pop    ebx
c001e2f1:	c3                   	ret    

c001e2f2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e2f2:	55                   	push   ebp
c001e2f3:	89 e5                	mov    ebp,esp
c001e2f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e2fe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e301:	72 1d                	jb     c001e320 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e306:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e30f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e315:	01 d0                	add    eax,edx
c001e317:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e31a:	73 04                	jae    c001e320 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e31c:	b0 01                	mov    al,0x1
c001e31e:	eb 02                	jmp    c001e322 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e320:	b0 00                	mov    al,0x0
c001e322:	5d                   	pop    ebp
c001e323:	c3                   	ret    

c001e324 <IOAPIC::read(int)>:
c001e324:	55                   	push   ebp
c001e325:	89 e5                	mov    ebp,esp
c001e327:	83 ec 10             	sub    esp,0x10
c001e32a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e32d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e333:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e336:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e339:	0f b6 d0             	movzx  edx,al
c001e33c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e33f:	89 10                	mov    DWORD PTR [eax],edx
c001e341:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e344:	83 c0 10             	add    eax,0x10
c001e347:	8b 00                	mov    eax,DWORD PTR [eax]
c001e349:	c9                   	leave  
c001e34a:	c3                   	ret    
c001e34b:	90                   	nop

c001e34c <IOAPIC::open(int, int, void*)>:
c001e34c:	55                   	push   ebp
c001e34d:	89 e5                	mov    ebp,esp
c001e34f:	57                   	push   edi
c001e350:	56                   	push   esi
c001e351:	53                   	push   ebx
c001e352:	83 ec 0c             	sub    esp,0xc
c001e355:	83 ec 0c             	sub    esp,0xc
c001e358:	68 d7 35 02 c0       	push   0xc00235d7
c001e35d:	e8 d7 0d ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001e362:	83 c4 10             	add    esp,0x10
c001e365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e368:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e36b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e374:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e37a:	8b 14 85 a0 4c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb360]
c001e381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e384:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e38a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e38d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e393:	8b 14 85 20 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb2e0]
c001e39a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e39d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e3a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e3ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e3b5:	0f b6 f8             	movzx  edi,al
c001e3b8:	89 d0                	mov    eax,edx
c001e3ba:	ba 00 00 00 00       	mov    edx,0x0
c001e3bf:	89 c1                	mov    ecx,eax
c001e3c1:	80 e5 ff             	and    ch,0xff
c001e3c4:	89 cb                	mov    ebx,ecx
c001e3c6:	0f b6 f2             	movzx  esi,dl
c001e3c9:	89 d8                	mov    eax,ebx
c001e3cb:	89 f2                	mov    edx,esi
c001e3cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e3d0:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e3d3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e3d7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e3db:	83 e0 00             	and    eax,0x0
c001e3de:	09 d0                	or     eax,edx
c001e3e0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e3e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e3ed:	8d 50 01             	lea    edx,[eax+0x1]
c001e3f0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e3f3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e3f9:	0f b6 d0             	movzx  edx,al
c001e3fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3ff:	83 c2 08             	add    edx,0x8
c001e402:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e406:	0f b6 c9             	movzx  ecx,cl
c001e409:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e40f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e413:	83 ec 08             	sub    esp,0x8
c001e416:	6a 01                	push   0x1
c001e418:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e41b:	e8 04 ff ff ff       	call   c001e324 <IOAPIC::read(int)>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	c1 f8 10             	sar    eax,0x10
c001e426:	0f b6 c0             	movzx  eax,al
c001e429:	8d 50 01             	lea    edx,[eax+0x1]
c001e42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e42f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e435:	b8 00 00 00 00       	mov    eax,0x0
c001e43a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e43d:	5b                   	pop    ebx
c001e43e:	5e                   	pop    esi
c001e43f:	5f                   	pop    edi
c001e440:	5d                   	pop    ebp
c001e441:	c3                   	ret    

c001e442 <IOAPIC::write(int, int)>:
c001e442:	55                   	push   ebp
c001e443:	89 e5                	mov    ebp,esp
c001e445:	83 ec 10             	sub    esp,0x10
c001e448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e44b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e451:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e454:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e457:	0f b6 d0             	movzx  edx,al
c001e45a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e45d:	89 10                	mov    DWORD PTR [eax],edx
c001e45f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e462:	8d 50 10             	lea    edx,[eax+0x10]
c001e465:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e468:	89 02                	mov    DWORD PTR [edx],eax
c001e46a:	90                   	nop
c001e46b:	c9                   	leave  
c001e46c:	c3                   	ret    
c001e46d:	90                   	nop

c001e46e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e46e:	55                   	push   ebp
c001e46f:	89 e5                	mov    ebp,esp
c001e471:	83 ec 20             	sub    esp,0x20
c001e474:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e477:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e47a:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e47d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e480:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e483:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e486:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e489:	88 d0                	mov    al,dl
c001e48b:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e48e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e492:	83 c0 08             	add    eax,0x8
c001e495:	01 c0                	add    eax,eax
c001e497:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e49a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001e49e:	83 c0 08             	add    eax,0x8
c001e4a1:	01 c0                	add    eax,eax
c001e4a3:	40                   	inc    eax
c001e4a4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e4a7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e4aa:	50                   	push   eax
c001e4ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4ae:	e8 71 fe ff ff       	call   c001e324 <IOAPIC::read(int)>
c001e4b3:	83 c4 08             	add    esp,0x8
c001e4b6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e4b9:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e4c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e4c3:	c1 e0 18             	shl    eax,0x18
c001e4c6:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e4c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e4cc:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e4cf:	52                   	push   edx
c001e4d0:	50                   	push   eax
c001e4d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4d4:	e8 69 ff ff ff       	call   c001e442 <IOAPIC::write(int, int)>
c001e4d9:	83 c4 0c             	add    esp,0xc
c001e4dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4df:	50                   	push   eax
c001e4e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4e3:	e8 3c fe ff ff       	call   c001e324 <IOAPIC::read(int)>
c001e4e8:	83 c4 08             	add    esp,0x8
c001e4eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e4ee:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e4f5:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e4fc:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e503:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e50a:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001e50e:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e511:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e514:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e517:	52                   	push   edx
c001e518:	50                   	push   eax
c001e519:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e51c:	e8 21 ff ff ff       	call   c001e442 <IOAPIC::write(int, int)>
c001e521:	83 c4 0c             	add    esp,0xc
c001e524:	90                   	nop
c001e525:	c9                   	leave  
c001e526:	c3                   	ret    
c001e527:	90                   	nop

c001e528 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e528:	55                   	push   ebp
c001e529:	89 e5                	mov    ebp,esp
c001e52b:	56                   	push   esi
c001e52c:	53                   	push   ebx
c001e52d:	83 ec 20             	sub    esp,0x20
c001e530:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e533:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e536:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e53a:	74 28                	je     c001e564 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e53c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e540:	7f 12                	jg     c001e554 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001e542:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e545:	05 20 3b 02 c0       	add    eax,0xc0023b20
c001e54a:	8a 00                	mov    al,BYTE PTR [eax]
c001e54c:	0f b6 c0             	movzx  eax,al
c001e54f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e552:	eb 10                	jmp    c001e564 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001e554:	83 ec 0c             	sub    esp,0xc
c001e557:	68 e8 35 02 c0       	push   0xc00235e8
c001e55c:	e8 bf 73 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001e561:	83 c4 10             	add    esp,0x10
c001e564:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e568:	a1 80 61 02 c0       	mov    eax,ds:0xc0026180
c001e56d:	83 ec 08             	sub    esp,0x8
c001e570:	50                   	push   eax
c001e571:	68 20 36 02 c0       	push   0xc0023620
c001e576:	e8 be 0b ff ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e585:	a1 80 61 02 c0       	mov    eax,ds:0xc0026180
c001e58a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e58d:	7d 58                	jge    c001e5e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e58f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e592:	8b 04 85 a0 61 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9e60]
c001e599:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e59c:	83 ec 08             	sub    esp,0x8
c001e59f:	52                   	push   edx
c001e5a0:	50                   	push   eax
c001e5a1:	e8 4c fd ff ff       	call   c001e2f2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e5a6:	83 c4 10             	add    esp,0x10
c001e5a9:	84 c0                	test   al,al
c001e5ab:	74 35                	je     c001e5e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001e5ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5b0:	8b 1c 85 a0 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9e60]
c001e5b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5ba:	83 c0 20             	add    eax,0x20
c001e5bd:	0f b6 f0             	movzx  esi,al
c001e5c0:	e8 d8 61 ff ff       	call   c001479d <getCPUNumber()>
c001e5c5:	99                   	cdq    
c001e5c6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e5c9:	0f b6 c9             	movzx  ecx,cl
c001e5cc:	83 ec 0c             	sub    esp,0xc
c001e5cf:	56                   	push   esi
c001e5d0:	52                   	push   edx
c001e5d1:	50                   	push   eax
c001e5d2:	51                   	push   ecx
c001e5d3:	53                   	push   ebx
c001e5d4:	e8 95 fe ff ff       	call   c001e46e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e5d9:	83 c4 20             	add    esp,0x20
c001e5dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e5e0:	eb 05                	jmp    c001e5e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001e5e2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e5e5:	eb 9e                	jmp    c001e585 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001e5e7:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e5ea:	83 f0 01             	xor    eax,0x1
c001e5ed:	84 c0                	test   al,al
c001e5ef:	74 10                	je     c001e601 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001e5f1:	83 ec 0c             	sub    esp,0xc
c001e5f4:	68 37 36 02 c0       	push   0xc0023637
c001e5f9:	e8 22 73 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001e5fe:	83 c4 10             	add    esp,0x10
c001e601:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e605:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e60c:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e610:	7f 65                	jg     c001e677 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001e612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e615:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e618:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e61f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e622:	01 ca                	add    edx,ecx
c001e624:	83 c2 54             	add    edx,0x54
c001e627:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e62b:	85 c0                	test   eax,eax
c001e62d:	75 43                	jne    c001e672 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001e62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e632:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e635:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e63c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e63f:	01 ca                	add    edx,ecx
c001e641:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e644:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e647:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e64b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e64e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e651:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e658:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e65b:	01 ca                	add    edx,ecx
c001e65d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e663:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e666:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e66a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e66d:	83 e8 20             	sub    eax,0x20
c001e670:	eb 1a                	jmp    c001e68c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001e672:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e675:	eb 95                	jmp    c001e60c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001e677:	83 ec 0c             	sub    esp,0xc
c001e67a:	68 44 36 02 c0       	push   0xc0023644
c001e67f:	e8 9c 72 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001e684:	83 c4 10             	add    esp,0x10
c001e687:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e68c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e68f:	5b                   	pop    ebx
c001e690:	5e                   	pop    esi
c001e691:	5d                   	pop    ebp
c001e692:	c3                   	ret    
c001e693:	90                   	nop

c001e694 <PIC::disable()>:
c001e694:	55                   	push   ebp
c001e695:	89 e5                	mov    ebp,esp
c001e697:	83 ec 10             	sub    esp,0x10
c001e69a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e6a0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e6a4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e6a7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e6ab:	ee                   	out    dx,al
c001e6ac:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e6b2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e6b6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e6b9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e6bd:	ee                   	out    dx,al
c001e6be:	90                   	nop
c001e6bf:	c9                   	leave  
c001e6c0:	c3                   	ret    
c001e6c1:	90                   	nop

c001e6c2 <PIC::close(int, int, void*)>:
c001e6c2:	55                   	push   ebp
c001e6c3:	89 e5                	mov    ebp,esp
c001e6c5:	83 ec 08             	sub    esp,0x8
c001e6c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6cd:	83 c0 3c             	add    eax,0x3c
c001e6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6d2:	83 ec 0c             	sub    esp,0xc
c001e6d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6d8:	ff d0                	call   eax
c001e6da:	83 c4 10             	add    esp,0x10
c001e6dd:	b8 00 00 00 00       	mov    eax,0x0
c001e6e2:	c9                   	leave  
c001e6e3:	c3                   	ret    

c001e6e4 <PIC::PIC()>:
c001e6e4:	83 ec 0c             	sub    esp,0xc
c001e6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6eb:	83 ec 08             	sub    esp,0x8
c001e6ee:	68 f0 36 02 c0       	push   0xc00236f0
c001e6f3:	50                   	push   eax
c001e6f4:	e8 89 27 ff ff       	call   c0010e82 <InterruptController::InterruptController(char const*)>
c001e6f9:	83 c4 10             	add    esp,0x10
c001e6fc:	ba 1c 37 02 c0       	mov    edx,0xc002371c
c001e701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e705:	89 10                	mov    DWORD PTR [eax],edx
c001e707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e70b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e711:	0f b6 d0             	movzx  edx,al
c001e714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e718:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e723:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e729:	0f b6 d0             	movzx  edx,al
c001e72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e730:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e739:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e73f:	8d 50 01             	lea    edx,[eax+0x1]
c001e742:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e746:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e74c:	0f b6 d0             	movzx  edx,al
c001e74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e753:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e757:	83 e1 3f             	and    ecx,0x3f
c001e75a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e762:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e768:	0f b6 d0             	movzx  edx,al
c001e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e76f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e780:	0f b6 d0             	movzx  edx,al
c001e783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e787:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e796:	8d 50 01             	lea    edx,[eax+0x1]
c001e799:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e79d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e7a3:	0f b6 d0             	movzx  edx,al
c001e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7aa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e7ae:	83 e1 3f             	and    ecx,0x3f
c001e7b1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e7b5:	90                   	nop
c001e7b6:	83 c4 0c             	add    esp,0xc
c001e7b9:	c3                   	ret    

c001e7ba <PIC::ioWait()>:
c001e7ba:	eb 00                	jmp    c001e7bc <PIC::ioWait()+0x2>
c001e7bc:	eb 00                	jmp    c001e7be <PIC::ioWait()+0x4>
c001e7be:	90                   	nop
c001e7bf:	c3                   	ret    

c001e7c0 <PIC::getIRQReg(int)>:
c001e7c0:	55                   	push   ebp
c001e7c1:	89 e5                	mov    ebp,esp
c001e7c3:	83 ec 10             	sub    esp,0x10
c001e7c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7c9:	0f b6 c0             	movzx  eax,al
c001e7cc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e7d2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e7d5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e7d8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e7dc:	ee                   	out    dx,al
c001e7dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e7e0:	0f b6 c0             	movzx  eax,al
c001e7e3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e7e9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e7ec:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e7ef:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e7f3:	ee                   	out    dx,al
c001e7f4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e7fa:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e7fe:	89 c2                	mov    edx,eax
c001e800:	ec                   	in     al,dx
c001e801:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e804:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e807:	0f b6 c0             	movzx  eax,al
c001e80a:	c1 e0 08             	shl    eax,0x8
c001e80d:	89 c1                	mov    ecx,eax
c001e80f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e815:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e819:	89 c2                	mov    edx,eax
c001e81b:	ec                   	in     al,dx
c001e81c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e81f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e822:	0f b6 c0             	movzx  eax,al
c001e825:	09 c8                	or     eax,ecx
c001e827:	c9                   	leave  
c001e828:	c3                   	ret    
c001e829:	90                   	nop

c001e82a <PIC::eoi(unsigned char)>:
c001e82a:	55                   	push   ebp
c001e82b:	89 e5                	mov    ebp,esp
c001e82d:	83 ec 14             	sub    esp,0x14
c001e830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e833:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e836:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e83a:	75 1e                	jne    c001e85a <PIC::eoi(unsigned char)+0x30>
c001e83c:	6a 0b                	push   0xb
c001e83e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e841:	e8 7a ff ff ff       	call   c001e7c0 <PIC::getIRQReg(int)>
c001e846:	83 c4 08             	add    esp,0x8
c001e849:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e84d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001e851:	25 80 00 00 00       	and    eax,0x80
c001e856:	85 c0                	test   eax,eax
c001e858:	74 5f                	je     c001e8b9 <PIC::eoi(unsigned char)+0x8f>
c001e85a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e85e:	75 2d                	jne    c001e88d <PIC::eoi(unsigned char)+0x63>
c001e860:	6a 0b                	push   0xb
c001e862:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e865:	e8 56 ff ff ff       	call   c001e7c0 <PIC::getIRQReg(int)>
c001e86a:	83 c4 08             	add    esp,0x8
c001e86d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e871:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e874:	66 85 c0             	test   ax,ax
c001e877:	78 14                	js     c001e88d <PIC::eoi(unsigned char)+0x63>
c001e879:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e87f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e883:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e886:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e88a:	ee                   	out    dx,al
c001e88b:	eb 2d                	jmp    c001e8ba <PIC::eoi(unsigned char)+0x90>
c001e88d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e891:	76 12                	jbe    c001e8a5 <PIC::eoi(unsigned char)+0x7b>
c001e893:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e899:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e89d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e8a0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e8a4:	ee                   	out    dx,al
c001e8a5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e8ab:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e8af:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e8b2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e8b6:	ee                   	out    dx,al
c001e8b7:	eb 01                	jmp    c001e8ba <PIC::eoi(unsigned char)+0x90>
c001e8b9:	90                   	nop
c001e8ba:	c9                   	leave  
c001e8bb:	c3                   	ret    

c001e8bc <PIC::remap()>:
c001e8bc:	55                   	push   ebp
c001e8bd:	89 e5                	mov    ebp,esp
c001e8bf:	83 ec 48             	sub    esp,0x48
c001e8c2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e8c9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e8d0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e8d6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e8d9:	89 c2                	mov    edx,eax
c001e8db:	ec                   	in     al,dx
c001e8dc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e8df:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e8e2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e8e5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e8eb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e8ee:	89 c2                	mov    edx,eax
c001e8f0:	ec                   	in     al,dx
c001e8f1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e8f4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e8f7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e8fa:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e900:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e904:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e907:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e90a:	ee                   	out    dx,al
c001e90b:	83 ec 0c             	sub    esp,0xc
c001e90e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e911:	e8 a4 fe ff ff       	call   c001e7ba <PIC::ioWait()>
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e91f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e923:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e926:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e929:	ee                   	out    dx,al
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e930:	e8 85 fe ff ff       	call   c001e7ba <PIC::ioWait()>
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e93b:	0f b6 c0             	movzx  eax,al
c001e93e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e944:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e947:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e94a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e94d:	ee                   	out    dx,al
c001e94e:	83 ec 0c             	sub    esp,0xc
c001e951:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e954:	e8 61 fe ff ff       	call   c001e7ba <PIC::ioWait()>
c001e959:	83 c4 10             	add    esp,0x10
c001e95c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e95f:	0f b6 c0             	movzx  eax,al
c001e962:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e968:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e96b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e96e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e971:	ee                   	out    dx,al
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e978:	e8 3d fe ff ff       	call   c001e7ba <PIC::ioWait()>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e986:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e98a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e98d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e990:	ee                   	out    dx,al
c001e991:	83 ec 0c             	sub    esp,0xc
c001e994:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e997:	e8 1e fe ff ff       	call   c001e7ba <PIC::ioWait()>
c001e99c:	83 c4 10             	add    esp,0x10
c001e99f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e9a5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e9a9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e9ac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e9af:	ee                   	out    dx,al
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9b6:	e8 ff fd ff ff       	call   c001e7ba <PIC::ioWait()>
c001e9bb:	83 c4 10             	add    esp,0x10
c001e9be:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e9c4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e9c8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e9cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e9ce:	ee                   	out    dx,al
c001e9cf:	83 ec 0c             	sub    esp,0xc
c001e9d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9d5:	e8 e0 fd ff ff       	call   c001e7ba <PIC::ioWait()>
c001e9da:	83 c4 10             	add    esp,0x10
c001e9dd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e9e3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e9e7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e9ea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e9ed:	ee                   	out    dx,al
c001e9ee:	83 ec 0c             	sub    esp,0xc
c001e9f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9f4:	e8 c1 fd ff ff       	call   c001e7ba <PIC::ioWait()>
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001ea00:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ea06:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ea09:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ea0c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ea0f:	ee                   	out    dx,al
c001ea10:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001ea14:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ea1a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ea1d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ea20:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ea23:	ee                   	out    dx,al
c001ea24:	90                   	nop
c001ea25:	c9                   	leave  
c001ea26:	c3                   	ret    
c001ea27:	90                   	nop

c001ea28 <PIC::open(int, int, void*)>:
c001ea28:	55                   	push   ebp
c001ea29:	89 e5                	mov    ebp,esp
c001ea2b:	83 ec 18             	sub    esp,0x18
c001ea2e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ea34:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ea38:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea3b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea3f:	ee                   	out    dx,al
c001ea40:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ea46:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ea4a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea4d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea51:	ee                   	out    dx,al
c001ea52:	83 ec 0c             	sub    esp,0xc
c001ea55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea58:	e8 5f fe ff ff       	call   c001e8bc <PIC::remap()>
c001ea5d:	83 c4 10             	add    esp,0x10
c001ea60:	b8 00 00 00 00       	mov    eax,0x0
c001ea65:	c9                   	leave  
c001ea66:	c3                   	ret    
c001ea67:	90                   	nop

c001ea68 <APICTimer::close(int, int, void*)>:
c001ea68:	b8 00 00 00 00       	mov    eax,0x0
c001ea6d:	c3                   	ret    

c001ea6e <apicTimerHandler(regs*, void*)>:
c001ea6e:	83 ec 0c             	sub    esp,0xc
c001ea71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea77:	99                   	cdq    
c001ea78:	52                   	push   edx
c001ea79:	50                   	push   eax
c001ea7a:	6a 00                	push   0x0
c001ea7c:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ea81:	e8 76 07 00 00       	call   c001f1fc <__udivdi3>
c001ea86:	83 c4 10             	add    esp,0x10
c001ea89:	83 ec 08             	sub    esp,0x8
c001ea8c:	52                   	push   edx
c001ea8d:	50                   	push   eax
c001ea8e:	e8 26 42 ff ff       	call   c0012cb9 <timerHandler(unsigned long long)>
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	90                   	nop
c001ea97:	83 c4 0c             	add    esp,0xc
c001ea9a:	c3                   	ret    
c001ea9b:	90                   	nop

c001ea9c <APICTimer::write(int)>:
c001ea9c:	53                   	push   ebx
c001ea9d:	83 ec 28             	sub    esp,0x28
c001eaa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eaa4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eaa8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eaae:	e8 ed 5c ff ff       	call   c00147a0 <thisCPU()>
c001eab3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eab9:	83 ec 0c             	sub    esp,0xc
c001eabc:	50                   	push   eax
c001eabd:	e8 0e f6 ff ff       	call   c001e0d0 <APIC::getBase()>
c001eac2:	83 c4 10             	add    esp,0x10
c001eac5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eac9:	a1 30 4a 02 c0       	mov    eax,ds:0xc0024a30
c001eace:	8b 15 34 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024a34
c001ead4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ead8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001eadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eae0:	05 e0 03 00 00       	add    eax,0x3e0
c001eae5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eaeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eaef:	05 80 03 00 00       	add    eax,0x380
c001eaf4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001eafa:	fb                   	sti    
c001eafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb03:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001eb08:	83 d2 00             	adc    edx,0x0
c001eb0b:	89 c1                	mov    ecx,eax
c001eb0d:	89 d3                	mov    ebx,edx
c001eb0f:	a1 30 4a 02 c0       	mov    eax,ds:0xc0024a30
c001eb14:	8b 15 34 4a 02 c0    	mov    edx,DWORD PTR ds:0xc0024a34
c001eb1a:	39 c8                	cmp    eax,ecx
c001eb1c:	89 d0                	mov    eax,edx
c001eb1e:	19 d8                	sbb    eax,ebx
c001eb20:	73 02                	jae    c001eb24 <APICTimer::write(int)+0x88>
c001eb22:	eb d7                	jmp    c001eafb <APICTimer::write(int)+0x5f>
c001eb24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb28:	05 20 03 00 00       	add    eax,0x320
c001eb2d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001eb33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb37:	05 90 03 00 00       	add    eax,0x390
c001eb3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb3e:	f7 d0                	not    eax
c001eb40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eb44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb4c:	ba 00 00 00 00       	mov    edx,0x0
c001eb51:	f7 f3                	div    ebx
c001eb53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb5b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb61:	0d 00 00 02 00       	or     eax,0x20000
c001eb66:	89 c2                	mov    edx,eax
c001eb68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb6c:	05 20 03 00 00       	add    eax,0x320
c001eb71:	89 10                	mov    DWORD PTR [eax],edx
c001eb73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb77:	05 e0 03 00 00       	add    eax,0x3e0
c001eb7c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001eb82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb86:	05 80 03 00 00       	add    eax,0x380
c001eb8b:	89 c2                	mov    edx,eax
c001eb8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb91:	89 02                	mov    DWORD PTR [edx],eax
c001eb93:	90                   	nop
c001eb94:	83 c4 28             	add    esp,0x28
c001eb97:	5b                   	pop    ebx
c001eb98:	c3                   	ret    
c001eb99:	90                   	nop

c001eb9a <APICTimer::open(int, int, void*)>:
c001eb9a:	57                   	push   edi
c001eb9b:	56                   	push   esi
c001eb9c:	53                   	push   ebx
c001eb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba3:	83 c0 24             	add    eax,0x24
c001eba6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba8:	83 ec 08             	sub    esp,0x8
c001ebab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebb3:	ff d0                	call   eax
c001ebb5:	83 c4 10             	add    esp,0x10
c001ebb8:	e8 e3 5b ff ff       	call   c00147a0 <thisCPU()>
c001ebbd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ebc3:	83 ec 0c             	sub    esp,0xc
c001ebc6:	50                   	push   eax
c001ebc7:	e8 04 f5 ff ff       	call   c001e0d0 <APIC::getBase()>
c001ebcc:	83 c4 10             	add    esp,0x10
c001ebcf:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebdf:	0f b6 f8             	movzx  edi,al
c001ebe2:	89 d0                	mov    eax,edx
c001ebe4:	ba 00 00 00 00       	mov    edx,0x0
c001ebe9:	89 c1                	mov    ecx,eax
c001ebeb:	80 e5 ff             	and    ch,0xff
c001ebee:	89 cb                	mov    ebx,ecx
c001ebf0:	0f b6 f2             	movzx  esi,dl
c001ebf3:	89 d8                	mov    eax,ebx
c001ebf5:	89 f2                	mov    edx,esi
c001ebf7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebfb:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ebfe:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ec02:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ec06:	83 e0 00             	and    eax,0x0
c001ec09:	09 d0                	or     eax,edx
c001ec0b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ec0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec13:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ec19:	8d 50 01             	lea    edx,[eax+0x1]
c001ec1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ec20:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ec26:	0f b6 d0             	movzx  edx,al
c001ec29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2d:	83 c2 08             	add    edx,0x8
c001ec30:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ec34:	0f b6 c9             	movzx  ecx,cl
c001ec37:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ec3d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ec41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ec49:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec57:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ec5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec61:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ec67:	83 ec 0c             	sub    esp,0xc
c001ec6a:	51                   	push   ecx
c001ec6b:	6a 01                	push   0x1
c001ec6d:	68 6e ea 01 c0       	push   0xc001ea6e
c001ec72:	52                   	push   edx
c001ec73:	50                   	push   eax
c001ec74:	e8 1f 18 ff ff       	call   c0010498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec79:	83 c4 20             	add    esp,0x20
c001ec7c:	89 c2                	mov    edx,eax
c001ec7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec82:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ec88:	b8 00 00 00 00       	mov    eax,0x0
c001ec8d:	5b                   	pop    ebx
c001ec8e:	5e                   	pop    esi
c001ec8f:	5f                   	pop    edi
c001ec90:	c3                   	ret    
c001ec91:	90                   	nop

c001ec92 <APICTimer::APICTimer()>:
c001ec92:	83 ec 0c             	sub    esp,0xc
c001ec95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec99:	83 ec 08             	sub    esp,0x8
c001ec9c:	68 5c 37 02 c0       	push   0xc002375c
c001eca1:	50                   	push   eax
c001eca2:	e8 83 3f ff ff       	call   c0012c2a <Timer::Timer(char const*)>
c001eca7:	83 c4 10             	add    esp,0x10
c001ecaa:	ba 70 37 02 c0       	mov    edx,0xc0023770
c001ecaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb3:	89 10                	mov    DWORD PTR [eax],edx
c001ecb5:	90                   	nop
c001ecb6:	83 c4 0c             	add    esp,0xc
c001ecb9:	c3                   	ret    

c001ecba <PIT::write(int)>:
c001ecba:	83 ec 10             	sub    esp,0x10
c001ecbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ecc1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ecc5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eccb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eccf:	a3 c4 61 02 c0       	mov    ds:0xc00261c4,eax
c001ecd4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ecd9:	99                   	cdq    
c001ecda:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ecde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ece2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ece9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ecee:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ecf2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ecf7:	ee                   	out    dx,al
c001ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecfc:	0f b6 c0             	movzx  eax,al
c001ecff:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ed06:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ed0a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ed0e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ed13:	ee                   	out    dx,al
c001ed14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed18:	c1 f8 08             	sar    eax,0x8
c001ed1b:	0f b6 c0             	movzx  eax,al
c001ed1e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ed25:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ed29:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ed2d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ed32:	ee                   	out    dx,al
c001ed33:	90                   	nop
c001ed34:	83 c4 10             	add    esp,0x10
c001ed37:	c3                   	ret    

c001ed38 <pitHandler(regs*, void*)>:
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	a1 c4 61 02 c0       	mov    eax,ds:0xc00261c4
c001ed40:	99                   	cdq    
c001ed41:	52                   	push   edx
c001ed42:	50                   	push   eax
c001ed43:	6a 00                	push   0x0
c001ed45:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed4a:	e8 ad 04 00 00       	call   c001f1fc <__udivdi3>
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	83 ec 08             	sub    esp,0x8
c001ed55:	52                   	push   edx
c001ed56:	50                   	push   eax
c001ed57:	e8 5d 3f ff ff       	call   c0012cb9 <timerHandler(unsigned long long)>
c001ed5c:	83 c4 10             	add    esp,0x10
c001ed5f:	90                   	nop
c001ed60:	83 c4 0c             	add    esp,0xc
c001ed63:	c3                   	ret    

c001ed64 <PIT::open(int, int, void*)>:
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed6d:	83 c0 24             	add    eax,0x24
c001ed70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed72:	83 ec 08             	sub    esp,0x8
c001ed75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed7d:	ff d0                	call   eax
c001ed7f:	83 c4 10             	add    esp,0x10
c001ed82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed86:	83 ec 0c             	sub    esp,0xc
c001ed89:	6a 00                	push   0x0
c001ed8b:	6a 01                	push   0x1
c001ed8d:	68 38 ed 01 c0       	push   0xc001ed38
c001ed92:	6a 00                	push   0x0
c001ed94:	50                   	push   eax
c001ed95:	e8 fe 16 ff ff       	call   c0010498 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed9a:	83 c4 20             	add    esp,0x20
c001ed9d:	89 c2                	mov    edx,eax
c001ed9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eda9:	b8 00 00 00 00       	mov    eax,0x0
c001edae:	83 c4 0c             	add    esp,0xc
c001edb1:	c3                   	ret    

c001edb2 <PIT::close(int, int, void*)>:
c001edb2:	83 ec 0c             	sub    esp,0xc
c001edb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001edc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc7:	6a 01                	push   0x1
c001edc9:	68 38 ed 01 c0       	push   0xc001ed38
c001edce:	6a 00                	push   0x0
c001edd0:	50                   	push   eax
c001edd1:	e8 20 17 ff ff       	call   c00104f6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001edd6:	83 c4 10             	add    esp,0x10
c001edd9:	b8 00 00 00 00       	mov    eax,0x0
c001edde:	83 c4 0c             	add    esp,0xc
c001ede1:	c3                   	ret    

c001ede2 <PIT::PIT()>:
c001ede2:	83 ec 0c             	sub    esp,0xc
c001ede5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede9:	83 ec 08             	sub    esp,0x8
c001edec:	68 98 37 02 c0       	push   0xc0023798
c001edf1:	50                   	push   eax
c001edf2:	e8 33 3e ff ff       	call   c0012c2a <Timer::Timer(char const*)>
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c001edff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee03:	89 10                	mov    DWORD PTR [eax],edx
c001ee05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ee0f:	0f b6 d0             	movzx  edx,al
c001ee12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee16:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ee1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee21:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ee27:	0f b6 d0             	movzx  edx,al
c001ee2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ee33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ee3d:	8d 50 01             	lea    edx,[eax+0x1]
c001ee40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee44:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ee4a:	0f b6 d0             	movzx  edx,al
c001ee4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ee55:	83 e1 3f             	and    ecx,0x3f
c001ee58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ee5c:	90                   	nop
c001ee5d:	83 c4 0c             	add    esp,0xc
c001ee60:	c3                   	ret    
c001ee61:	66 90                	xchg   ax,ax
c001ee63:	66 90                	xchg   ax,ax
c001ee65:	66 90                	xchg   ax,ax
c001ee67:	66 90                	xchg   ax,ax
c001ee69:	66 90                	xchg   ax,ax
c001ee6b:	66 90                	xchg   ax,ax
c001ee6d:	66 90                	xchg   ax,ax
c001ee6f:	90                   	nop

c001ee70 <avxDetect>:
c001ee70:	b8 00 00 00 00       	mov    eax,0x0
c001ee75:	c3                   	ret    

c001ee76 <avxSave>:
c001ee76:	c3                   	ret    

c001ee77 <avxLoad>:
c001ee77:	c3                   	ret    

c001ee78 <avxInit>:
c001ee78:	c3                   	ret    

c001ee79 <avxClose>:
c001ee79:	c3                   	ret    
c001ee7a:	66 90                	xchg   ax,ax
c001ee7c:	66 90                	xchg   ax,ax
c001ee7e:	66 90                	xchg   ax,ax

c001ee80 <sseDetect>:
c001ee80:	b8 01 00 00 00       	mov    eax,0x1
c001ee85:	0f a2                	cpuid  
c001ee87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee8d:	74 06                	je     c001ee95 <sseDetect.noSSE>
c001ee8f:	b8 01 00 00 00       	mov    eax,0x1
c001ee94:	c3                   	ret    

c001ee95 <sseDetect.noSSE>:
c001ee95:	b8 00 00 00 00       	mov    eax,0x0
c001ee9a:	c3                   	ret    

c001ee9b <sseSave>:
c001ee9b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001eea0:	c3                   	ret    

c001eea1 <sseLoad>:
c001eea1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001eea6:	c3                   	ret    

c001eea7 <sseInit>:
c001eea7:	e8 40 00 00 00       	call   c001eeec <x87Init>
c001eeac:	0f 20 e0             	mov    eax,cr4
c001eeaf:	66 0d 00 06          	or     ax,0x600
c001eeb3:	0f 22 e0             	mov    cr4,eax
c001eeb6:	c3                   	ret    

c001eeb7 <sseClose>:
c001eeb7:	c3                   	ret    
c001eeb8:	66 90                	xchg   ax,ax
c001eeba:	66 90                	xchg   ax,ax
c001eebc:	66 90                	xchg   ax,ax
c001eebe:	66 90                	xchg   ax,ax

c001eec0 <value_37F>:
c001eec0:	7f 03                	jg     c001eec5 <value_37A+0x1>

c001eec2 <value_37E>:
c001eec2:	7e 03                	jle    c001eec7 <x87Detect+0x1>

c001eec4 <value_37A>:
c001eec4:	7a 03                	jp     c001eec9 <x87Detect+0x3>

c001eec6 <x87Detect>:
c001eec6:	b8 01 00 00 00       	mov    eax,0x1
c001eecb:	0f a2                	cpuid  
c001eecd:	f7 c2 01 00 00 00    	test   edx,0x1
c001eed3:	74 06                	je     c001eedb <x87Detect.nox87>
c001eed5:	b8 01 00 00 00       	mov    eax,0x1
c001eeda:	c3                   	ret    

c001eedb <x87Detect.nox87>:
c001eedb:	b8 00 00 00 00       	mov    eax,0x0
c001eee0:	c3                   	ret    

c001eee1 <x87Save>:
c001eee1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001eee6:	c3                   	ret    

c001eee7 <x87Load>:
c001eee7:	dd 64 24 08          	frstor [esp+0x8]
c001eeeb:	c3                   	ret    

c001eeec <x87Init>:
c001eeec:	9b db e3             	finit  
c001eeef:	0f 20 c0             	mov    eax,cr0
c001eef2:	66 25 fb ff          	and    ax,0xfffb
c001eef6:	66 0d 22 00          	or     ax,0x22
c001eefa:	0f 22 c0             	mov    cr0,eax
c001eefd:	0f 06                	clts   
c001eeff:	d9 2d c4 ee 01 c0    	fldcw  WORD PTR ds:0xc001eec4
c001ef05:	c3                   	ret    

c001ef06 <x87Close>:
c001ef06:	c3                   	ret    
c001ef07:	90                   	nop

c001ef08 <__do_global_ctors_aux>:
c001ef08:	a1 e8 ff 01 c0       	mov    eax,ds:0xc001ffe8
c001ef0d:	83 f8 ff             	cmp    eax,0xffffffff
c001ef10:	74 1a                	je     c001ef2c <__do_global_ctors_aux+0x24>
c001ef12:	55                   	push   ebp
c001ef13:	89 e5                	mov    ebp,esp
c001ef15:	53                   	push   ebx
c001ef16:	52                   	push   edx
c001ef17:	bb e8 ff 01 c0       	mov    ebx,0xc001ffe8
c001ef1c:	ff d0                	call   eax
c001ef1e:	83 eb 04             	sub    ebx,0x4
c001ef21:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ef23:	83 f8 ff             	cmp    eax,0xffffffff
c001ef26:	75 f4                	jne    c001ef1c <__do_global_ctors_aux+0x14>
c001ef28:	58                   	pop    eax
c001ef29:	5b                   	pop    ebx
c001ef2a:	5d                   	pop    ebp
c001ef2b:	c3                   	ret    
c001ef2c:	c3                   	ret    
c001ef2d:	66 90                	xchg   ax,ax
c001ef2f:	90                   	nop

c001ef30 <__divdi3>:
c001ef30:	55                   	push   ebp
c001ef31:	57                   	push   edi
c001ef32:	56                   	push   esi
c001ef33:	53                   	push   ebx
c001ef34:	83 ec 1c             	sub    esp,0x1c
c001ef37:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ef3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef3f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef42:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef46:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef4a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ef4e:	85 db                	test   ebx,ebx
c001ef50:	0f 88 8e 00 00 00    	js     c001efe4 <__divdi3+0xb4>
c001ef56:	89 dd                	mov    ebp,ebx
c001ef58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef60:	89 d3                	mov    ebx,edx
c001ef62:	85 d2                	test   edx,edx
c001ef64:	79 0d                	jns    c001ef73 <__divdi3+0x43>
c001ef66:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef6a:	f7 d8                	neg    eax
c001ef6c:	83 d2 00             	adc    edx,0x0
c001ef6f:	f7 da                	neg    edx
c001ef71:	89 d3                	mov    ebx,edx
c001ef73:	89 c7                	mov    edi,eax
c001ef75:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef78:	85 db                	test   ebx,ebx
c001ef7a:	75 48                	jne    c001efc4 <__divdi3+0x94>
c001ef7c:	39 ef                	cmp    edi,ebp
c001ef7e:	76 24                	jbe    c001efa4 <__divdi3+0x74>
c001ef80:	89 ea                	mov    edx,ebp
c001ef82:	f7 f7                	div    edi
c001ef84:	89 c1                	mov    ecx,eax
c001ef86:	31 f6                	xor    esi,esi
c001ef88:	89 c8                	mov    eax,ecx
c001ef8a:	89 f2                	mov    edx,esi
c001ef8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef90:	85 c9                	test   ecx,ecx
c001ef92:	74 07                	je     c001ef9b <__divdi3+0x6b>
c001ef94:	f7 d8                	neg    eax
c001ef96:	83 d2 00             	adc    edx,0x0
c001ef99:	f7 da                	neg    edx
c001ef9b:	83 c4 1c             	add    esp,0x1c
c001ef9e:	5b                   	pop    ebx
c001ef9f:	5e                   	pop    esi
c001efa0:	5f                   	pop    edi
c001efa1:	5d                   	pop    ebp
c001efa2:	c3                   	ret    
c001efa3:	90                   	nop
c001efa4:	85 ff                	test   edi,edi
c001efa6:	75 0b                	jne    c001efb3 <__divdi3+0x83>
c001efa8:	b8 01 00 00 00       	mov    eax,0x1
c001efad:	31 d2                	xor    edx,edx
c001efaf:	f7 f3                	div    ebx
c001efb1:	89 c7                	mov    edi,eax
c001efb3:	31 d2                	xor    edx,edx
c001efb5:	89 e8                	mov    eax,ebp
c001efb7:	f7 f7                	div    edi
c001efb9:	89 c6                	mov    esi,eax
c001efbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001efbe:	f7 f7                	div    edi
c001efc0:	89 c1                	mov    ecx,eax
c001efc2:	eb c4                	jmp    c001ef88 <__divdi3+0x58>
c001efc4:	39 eb                	cmp    ebx,ebp
c001efc6:	77 3c                	ja     c001f004 <__divdi3+0xd4>
c001efc8:	0f bd f3             	bsr    esi,ebx
c001efcb:	83 f6 1f             	xor    esi,0x1f
c001efce:	75 40                	jne    c001f010 <__divdi3+0xe0>
c001efd0:	39 eb                	cmp    ebx,ebp
c001efd2:	72 09                	jb     c001efdd <__divdi3+0xad>
c001efd4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001efd7:	0f 87 97 00 00 00    	ja     c001f074 <__divdi3+0x144>
c001efdd:	b9 01 00 00 00       	mov    ecx,0x1
c001efe2:	eb a4                	jmp    c001ef88 <__divdi3+0x58>
c001efe4:	f7 d9                	neg    ecx
c001efe6:	83 d3 00             	adc    ebx,0x0
c001efe9:	f7 db                	neg    ebx
c001efeb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001efee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eff2:	89 dd                	mov    ebp,ebx
c001eff4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001effc:	e9 5f ff ff ff       	jmp    c001ef60 <__divdi3+0x30>
c001f001:	8d 76 00             	lea    esi,[esi+0x0]
c001f004:	31 f6                	xor    esi,esi
c001f006:	31 c9                	xor    ecx,ecx
c001f008:	e9 7b ff ff ff       	jmp    c001ef88 <__divdi3+0x58>
c001f00d:	8d 76 00             	lea    esi,[esi+0x0]
c001f010:	b8 20 00 00 00       	mov    eax,0x20
c001f015:	29 f0                	sub    eax,esi
c001f017:	89 f1                	mov    ecx,esi
c001f019:	d3 e3                	shl    ebx,cl
c001f01b:	89 fa                	mov    edx,edi
c001f01d:	88 c1                	mov    cl,al
c001f01f:	d3 ea                	shr    edx,cl
c001f021:	09 da                	or     edx,ebx
c001f023:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f027:	89 f1                	mov    ecx,esi
c001f029:	d3 e7                	shl    edi,cl
c001f02b:	89 eb                	mov    ebx,ebp
c001f02d:	88 c1                	mov    cl,al
c001f02f:	d3 eb                	shr    ebx,cl
c001f031:	89 f1                	mov    ecx,esi
c001f033:	d3 e5                	shl    ebp,cl
c001f035:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f038:	88 c1                	mov    cl,al
c001f03a:	d3 ea                	shr    edx,cl
c001f03c:	09 d5                	or     ebp,edx
c001f03e:	89 e8                	mov    eax,ebp
c001f040:	89 da                	mov    edx,ebx
c001f042:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f046:	89 d3                	mov    ebx,edx
c001f048:	89 c5                	mov    ebp,eax
c001f04a:	f7 e7                	mul    edi
c001f04c:	39 d3                	cmp    ebx,edx
c001f04e:	72 18                	jb     c001f068 <__divdi3+0x138>
c001f050:	74 0a                	je     c001f05c <__divdi3+0x12c>
c001f052:	89 e9                	mov    ecx,ebp
c001f054:	31 f6                	xor    esi,esi
c001f056:	e9 2d ff ff ff       	jmp    c001ef88 <__divdi3+0x58>
c001f05b:	90                   	nop
c001f05c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f05f:	89 f1                	mov    ecx,esi
c001f061:	d3 e7                	shl    edi,cl
c001f063:	39 c7                	cmp    edi,eax
c001f065:	73 eb                	jae    c001f052 <__divdi3+0x122>
c001f067:	90                   	nop
c001f068:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f06b:	31 f6                	xor    esi,esi
c001f06d:	e9 16 ff ff ff       	jmp    c001ef88 <__divdi3+0x58>
c001f072:	66 90                	xchg   ax,ax
c001f074:	31 c9                	xor    ecx,ecx
c001f076:	e9 0d ff ff ff       	jmp    c001ef88 <__divdi3+0x58>
c001f07b:	90                   	nop

c001f07c <__moddi3>:
c001f07c:	55                   	push   ebp
c001f07d:	57                   	push   edi
c001f07e:	56                   	push   esi
c001f07f:	53                   	push   ebx
c001f080:	83 ec 2c             	sub    esp,0x2c
c001f083:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f087:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f08b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f08f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f093:	85 db                	test   ebx,ebx
c001f095:	0f 88 85 00 00 00    	js     c001f120 <__moddi3+0xa4>
c001f09b:	89 de                	mov    esi,ebx
c001f09d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f0a5:	89 d7                	mov    edi,edx
c001f0a7:	85 d2                	test   edx,edx
c001f0a9:	79 09                	jns    c001f0b4 <__moddi3+0x38>
c001f0ab:	f7 d8                	neg    eax
c001f0ad:	83 d2 00             	adc    edx,0x0
c001f0b0:	f7 da                	neg    edx
c001f0b2:	89 d7                	mov    edi,edx
c001f0b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0b8:	89 cd                	mov    ebp,ecx
c001f0ba:	85 ff                	test   edi,edi
c001f0bc:	75 52                	jne    c001f110 <__moddi3+0x94>
c001f0be:	89 c3                	mov    ebx,eax
c001f0c0:	39 f0                	cmp    eax,esi
c001f0c2:	76 24                	jbe    c001f0e8 <__moddi3+0x6c>
c001f0c4:	89 c8                	mov    eax,ecx
c001f0c6:	89 f2                	mov    edx,esi
c001f0c8:	f7 f3                	div    ebx
c001f0ca:	89 d6                	mov    esi,edx
c001f0cc:	89 f0                	mov    eax,esi
c001f0ce:	31 d2                	xor    edx,edx
c001f0d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0d4:	85 c9                	test   ecx,ecx
c001f0d6:	74 07                	je     c001f0df <__moddi3+0x63>
c001f0d8:	f7 d8                	neg    eax
c001f0da:	83 d2 00             	adc    edx,0x0
c001f0dd:	f7 da                	neg    edx
c001f0df:	83 c4 2c             	add    esp,0x2c
c001f0e2:	5b                   	pop    ebx
c001f0e3:	5e                   	pop    esi
c001f0e4:	5f                   	pop    edi
c001f0e5:	5d                   	pop    ebp
c001f0e6:	c3                   	ret    
c001f0e7:	90                   	nop
c001f0e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0ec:	85 db                	test   ebx,ebx
c001f0ee:	75 0d                	jne    c001f0fd <__moddi3+0x81>
c001f0f0:	b8 01 00 00 00       	mov    eax,0x1
c001f0f5:	31 d2                	xor    edx,edx
c001f0f7:	f7 f7                	div    edi
c001f0f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0fd:	89 f0                	mov    eax,esi
c001f0ff:	31 d2                	xor    edx,edx
c001f101:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f105:	f7 f7                	div    edi
c001f107:	89 e8                	mov    eax,ebp
c001f109:	f7 f7                	div    edi
c001f10b:	89 d6                	mov    esi,edx
c001f10d:	eb bd                	jmp    c001f0cc <__moddi3+0x50>
c001f10f:	90                   	nop
c001f110:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f114:	39 f7                	cmp    edi,esi
c001f116:	76 20                	jbe    c001f138 <__moddi3+0xbc>
c001f118:	89 c8                	mov    eax,ecx
c001f11a:	89 f2                	mov    edx,esi
c001f11c:	eb b2                	jmp    c001f0d0 <__moddi3+0x54>
c001f11e:	66 90                	xchg   ax,ax
c001f120:	f7 d9                	neg    ecx
c001f122:	83 d3 00             	adc    ebx,0x0
c001f125:	f7 db                	neg    ebx
c001f127:	89 de                	mov    esi,ebx
c001f129:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f131:	e9 6f ff ff ff       	jmp    c001f0a5 <__moddi3+0x29>
c001f136:	66 90                	xchg   ax,ax
c001f138:	0f bd c7             	bsr    eax,edi
c001f13b:	83 f0 1f             	xor    eax,0x1f
c001f13e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f142:	75 24                	jne    c001f168 <__moddi3+0xec>
c001f144:	39 f7                	cmp    edi,esi
c001f146:	72 06                	jb     c001f14e <__moddi3+0xd2>
c001f148:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f14c:	77 0c                	ja     c001f15a <__moddi3+0xde>
c001f14e:	89 e9                	mov    ecx,ebp
c001f150:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f154:	19 fe                	sbb    esi,edi
c001f156:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f15a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f15e:	89 f2                	mov    edx,esi
c001f160:	e9 6b ff ff ff       	jmp    c001f0d0 <__moddi3+0x54>
c001f165:	8d 76 00             	lea    esi,[esi+0x0]
c001f168:	b8 20 00 00 00       	mov    eax,0x20
c001f16d:	89 c2                	mov    edx,eax
c001f16f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f173:	29 da                	sub    edx,ebx
c001f175:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f179:	88 d9                	mov    cl,bl
c001f17b:	d3 e7                	shl    edi,cl
c001f17d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f181:	88 d1                	mov    cl,dl
c001f183:	d3 e8                	shr    eax,cl
c001f185:	09 c7                	or     edi,eax
c001f187:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f18b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f18f:	89 d8                	mov    eax,ebx
c001f191:	88 d9                	mov    cl,bl
c001f193:	d3 e7                	shl    edi,cl
c001f195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f199:	89 f3                	mov    ebx,esi
c001f19b:	88 d1                	mov    cl,dl
c001f19d:	d3 eb                	shr    ebx,cl
c001f19f:	89 c7                	mov    edi,eax
c001f1a1:	88 c1                	mov    cl,al
c001f1a3:	d3 e6                	shl    esi,cl
c001f1a5:	89 e8                	mov    eax,ebp
c001f1a7:	88 d1                	mov    cl,dl
c001f1a9:	d3 e8                	shr    eax,cl
c001f1ab:	09 f0                	or     eax,esi
c001f1ad:	89 f9                	mov    ecx,edi
c001f1af:	d3 e5                	shl    ebp,cl
c001f1b1:	89 da                	mov    edx,ebx
c001f1b3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f1b7:	89 d3                	mov    ebx,edx
c001f1b9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f1bd:	89 c6                	mov    esi,eax
c001f1bf:	89 d1                	mov    ecx,edx
c001f1c1:	39 d3                	cmp    ebx,edx
c001f1c3:	72 27                	jb     c001f1ec <__moddi3+0x170>
c001f1c5:	74 21                	je     c001f1e8 <__moddi3+0x16c>
c001f1c7:	29 f5                	sub    ebp,esi
c001f1c9:	19 cb                	sbb    ebx,ecx
c001f1cb:	89 de                	mov    esi,ebx
c001f1cd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f1d1:	d3 e6                	shl    esi,cl
c001f1d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f1d7:	89 f9                	mov    ecx,edi
c001f1d9:	d3 ed                	shr    ebp,cl
c001f1db:	09 ee                	or     esi,ebp
c001f1dd:	89 f0                	mov    eax,esi
c001f1df:	d3 eb                	shr    ebx,cl
c001f1e1:	89 da                	mov    edx,ebx
c001f1e3:	e9 e8 fe ff ff       	jmp    c001f0d0 <__moddi3+0x54>
c001f1e8:	39 c5                	cmp    ebp,eax
c001f1ea:	73 db                	jae    c001f1c7 <__moddi3+0x14b>
c001f1ec:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f1f0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f1f4:	89 d1                	mov    ecx,edx
c001f1f6:	89 c6                	mov    esi,eax
c001f1f8:	eb cd                	jmp    c001f1c7 <__moddi3+0x14b>
c001f1fa:	66 90                	xchg   ax,ax

c001f1fc <__udivdi3>:
c001f1fc:	55                   	push   ebp
c001f1fd:	57                   	push   edi
c001f1fe:	56                   	push   esi
c001f1ff:	53                   	push   ebx
c001f200:	83 ec 1c             	sub    esp,0x1c
c001f203:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f207:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f20b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f20f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f213:	85 d2                	test   edx,edx
c001f215:	75 41                	jne    c001f258 <__udivdi3+0x5c>
c001f217:	39 f7                	cmp    edi,esi
c001f219:	76 15                	jbe    c001f230 <__udivdi3+0x34>
c001f21b:	89 e8                	mov    eax,ebp
c001f21d:	89 f2                	mov    edx,esi
c001f21f:	f7 f7                	div    edi
c001f221:	31 db                	xor    ebx,ebx
c001f223:	89 da                	mov    edx,ebx
c001f225:	83 c4 1c             	add    esp,0x1c
c001f228:	5b                   	pop    ebx
c001f229:	5e                   	pop    esi
c001f22a:	5f                   	pop    edi
c001f22b:	5d                   	pop    ebp
c001f22c:	c3                   	ret    
c001f22d:	8d 76 00             	lea    esi,[esi+0x0]
c001f230:	89 f9                	mov    ecx,edi
c001f232:	85 ff                	test   edi,edi
c001f234:	75 0b                	jne    c001f241 <__udivdi3+0x45>
c001f236:	b8 01 00 00 00       	mov    eax,0x1
c001f23b:	31 d2                	xor    edx,edx
c001f23d:	f7 f7                	div    edi
c001f23f:	89 c1                	mov    ecx,eax
c001f241:	31 d2                	xor    edx,edx
c001f243:	89 f0                	mov    eax,esi
c001f245:	f7 f1                	div    ecx
c001f247:	89 c3                	mov    ebx,eax
c001f249:	89 e8                	mov    eax,ebp
c001f24b:	f7 f1                	div    ecx
c001f24d:	89 da                	mov    edx,ebx
c001f24f:	83 c4 1c             	add    esp,0x1c
c001f252:	5b                   	pop    ebx
c001f253:	5e                   	pop    esi
c001f254:	5f                   	pop    edi
c001f255:	5d                   	pop    ebp
c001f256:	c3                   	ret    
c001f257:	90                   	nop
c001f258:	39 f2                	cmp    edx,esi
c001f25a:	77 1c                	ja     c001f278 <__udivdi3+0x7c>
c001f25c:	0f bd da             	bsr    ebx,edx
c001f25f:	83 f3 1f             	xor    ebx,0x1f
c001f262:	75 24                	jne    c001f288 <__udivdi3+0x8c>
c001f264:	39 f2                	cmp    edx,esi
c001f266:	72 08                	jb     c001f270 <__udivdi3+0x74>
c001f268:	39 ef                	cmp    edi,ebp
c001f26a:	0f 87 84 00 00 00    	ja     c001f2f4 <__udivdi3+0xf8>
c001f270:	b8 01 00 00 00       	mov    eax,0x1
c001f275:	eb ac                	jmp    c001f223 <__udivdi3+0x27>
c001f277:	90                   	nop
c001f278:	31 db                	xor    ebx,ebx
c001f27a:	31 c0                	xor    eax,eax
c001f27c:	89 da                	mov    edx,ebx
c001f27e:	83 c4 1c             	add    esp,0x1c
c001f281:	5b                   	pop    ebx
c001f282:	5e                   	pop    esi
c001f283:	5f                   	pop    edi
c001f284:	5d                   	pop    ebp
c001f285:	c3                   	ret    
c001f286:	66 90                	xchg   ax,ax
c001f288:	b8 20 00 00 00       	mov    eax,0x20
c001f28d:	29 d8                	sub    eax,ebx
c001f28f:	88 d9                	mov    cl,bl
c001f291:	d3 e2                	shl    edx,cl
c001f293:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f297:	89 fa                	mov    edx,edi
c001f299:	88 c1                	mov    cl,al
c001f29b:	d3 ea                	shr    edx,cl
c001f29d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2a1:	09 d1                	or     ecx,edx
c001f2a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2a7:	88 d9                	mov    cl,bl
c001f2a9:	d3 e7                	shl    edi,cl
c001f2ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2af:	89 f7                	mov    edi,esi
c001f2b1:	88 c1                	mov    cl,al
c001f2b3:	d3 ef                	shr    edi,cl
c001f2b5:	88 d9                	mov    cl,bl
c001f2b7:	d3 e6                	shl    esi,cl
c001f2b9:	89 ea                	mov    edx,ebp
c001f2bb:	88 c1                	mov    cl,al
c001f2bd:	d3 ea                	shr    edx,cl
c001f2bf:	09 d6                	or     esi,edx
c001f2c1:	89 f0                	mov    eax,esi
c001f2c3:	89 fa                	mov    edx,edi
c001f2c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f2c9:	89 d7                	mov    edi,edx
c001f2cb:	89 c6                	mov    esi,eax
c001f2cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2d1:	39 d7                	cmp    edi,edx
c001f2d3:	72 13                	jb     c001f2e8 <__udivdi3+0xec>
c001f2d5:	74 09                	je     c001f2e0 <__udivdi3+0xe4>
c001f2d7:	89 f0                	mov    eax,esi
c001f2d9:	31 db                	xor    ebx,ebx
c001f2db:	e9 43 ff ff ff       	jmp    c001f223 <__udivdi3+0x27>
c001f2e0:	88 d9                	mov    cl,bl
c001f2e2:	d3 e5                	shl    ebp,cl
c001f2e4:	39 c5                	cmp    ebp,eax
c001f2e6:	73 ef                	jae    c001f2d7 <__udivdi3+0xdb>
c001f2e8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f2eb:	31 db                	xor    ebx,ebx
c001f2ed:	e9 31 ff ff ff       	jmp    c001f223 <__udivdi3+0x27>
c001f2f2:	66 90                	xchg   ax,ax
c001f2f4:	31 c0                	xor    eax,eax
c001f2f6:	e9 28 ff ff ff       	jmp    c001f223 <__udivdi3+0x27>
c001f2fb:	90                   	nop

c001f2fc <__umoddi3>:
c001f2fc:	55                   	push   ebp
c001f2fd:	57                   	push   edi
c001f2fe:	56                   	push   esi
c001f2ff:	53                   	push   ebx
c001f300:	83 ec 1c             	sub    esp,0x1c
c001f303:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f307:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f30b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f30f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f313:	89 da                	mov    edx,ebx
c001f315:	85 c0                	test   eax,eax
c001f317:	75 37                	jne    c001f350 <__umoddi3+0x54>
c001f319:	39 df                	cmp    edi,ebx
c001f31b:	76 13                	jbe    c001f330 <__umoddi3+0x34>
c001f31d:	89 f0                	mov    eax,esi
c001f31f:	f7 f7                	div    edi
c001f321:	89 d0                	mov    eax,edx
c001f323:	31 d2                	xor    edx,edx
c001f325:	83 c4 1c             	add    esp,0x1c
c001f328:	5b                   	pop    ebx
c001f329:	5e                   	pop    esi
c001f32a:	5f                   	pop    edi
c001f32b:	5d                   	pop    ebp
c001f32c:	c3                   	ret    
c001f32d:	8d 76 00             	lea    esi,[esi+0x0]
c001f330:	89 fd                	mov    ebp,edi
c001f332:	85 ff                	test   edi,edi
c001f334:	75 0b                	jne    c001f341 <__umoddi3+0x45>
c001f336:	b8 01 00 00 00       	mov    eax,0x1
c001f33b:	31 d2                	xor    edx,edx
c001f33d:	f7 f7                	div    edi
c001f33f:	89 c5                	mov    ebp,eax
c001f341:	89 d8                	mov    eax,ebx
c001f343:	31 d2                	xor    edx,edx
c001f345:	f7 f5                	div    ebp
c001f347:	89 f0                	mov    eax,esi
c001f349:	f7 f5                	div    ebp
c001f34b:	89 d0                	mov    eax,edx
c001f34d:	eb d4                	jmp    c001f323 <__umoddi3+0x27>
c001f34f:	90                   	nop
c001f350:	89 f1                	mov    ecx,esi
c001f352:	39 d8                	cmp    eax,ebx
c001f354:	76 0a                	jbe    c001f360 <__umoddi3+0x64>
c001f356:	89 f0                	mov    eax,esi
c001f358:	83 c4 1c             	add    esp,0x1c
c001f35b:	5b                   	pop    ebx
c001f35c:	5e                   	pop    esi
c001f35d:	5f                   	pop    edi
c001f35e:	5d                   	pop    ebp
c001f35f:	c3                   	ret    
c001f360:	0f bd e8             	bsr    ebp,eax
c001f363:	83 f5 1f             	xor    ebp,0x1f
c001f366:	75 1c                	jne    c001f384 <__umoddi3+0x88>
c001f368:	39 d8                	cmp    eax,ebx
c001f36a:	72 04                	jb     c001f370 <__umoddi3+0x74>
c001f36c:	39 f7                	cmp    edi,esi
c001f36e:	77 08                	ja     c001f378 <__umoddi3+0x7c>
c001f370:	89 da                	mov    edx,ebx
c001f372:	29 fe                	sub    esi,edi
c001f374:	19 c2                	sbb    edx,eax
c001f376:	89 f1                	mov    ecx,esi
c001f378:	89 c8                	mov    eax,ecx
c001f37a:	83 c4 1c             	add    esp,0x1c
c001f37d:	5b                   	pop    ebx
c001f37e:	5e                   	pop    esi
c001f37f:	5f                   	pop    edi
c001f380:	5d                   	pop    ebp
c001f381:	c3                   	ret    
c001f382:	66 90                	xchg   ax,ax
c001f384:	ba 20 00 00 00       	mov    edx,0x20
c001f389:	29 ea                	sub    edx,ebp
c001f38b:	89 e9                	mov    ecx,ebp
c001f38d:	d3 e0                	shl    eax,cl
c001f38f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f393:	89 f8                	mov    eax,edi
c001f395:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f399:	88 d1                	mov    cl,dl
c001f39b:	d3 e8                	shr    eax,cl
c001f39d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3a1:	09 c1                	or     ecx,eax
c001f3a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f3a7:	89 e9                	mov    ecx,ebp
c001f3a9:	d3 e7                	shl    edi,cl
c001f3ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3af:	89 d8                	mov    eax,ebx
c001f3b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3b5:	88 d1                	mov    cl,dl
c001f3b7:	d3 e8                	shr    eax,cl
c001f3b9:	89 c7                	mov    edi,eax
c001f3bb:	89 e9                	mov    ecx,ebp
c001f3bd:	d3 e3                	shl    ebx,cl
c001f3bf:	89 f0                	mov    eax,esi
c001f3c1:	88 d1                	mov    cl,dl
c001f3c3:	d3 e8                	shr    eax,cl
c001f3c5:	09 d8                	or     eax,ebx
c001f3c7:	89 e9                	mov    ecx,ebp
c001f3c9:	d3 e6                	shl    esi,cl
c001f3cb:	89 f3                	mov    ebx,esi
c001f3cd:	89 fa                	mov    edx,edi
c001f3cf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f3d3:	89 d1                	mov    ecx,edx
c001f3d5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3d9:	89 c6                	mov    esi,eax
c001f3db:	89 d7                	mov    edi,edx
c001f3dd:	39 d1                	cmp    ecx,edx
c001f3df:	72 27                	jb     c001f408 <__umoddi3+0x10c>
c001f3e1:	74 21                	je     c001f404 <__umoddi3+0x108>
c001f3e3:	89 ca                	mov    edx,ecx
c001f3e5:	29 f3                	sub    ebx,esi
c001f3e7:	19 fa                	sbb    edx,edi
c001f3e9:	89 d0                	mov    eax,edx
c001f3eb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f3ef:	d3 e0                	shl    eax,cl
c001f3f1:	89 e9                	mov    ecx,ebp
c001f3f3:	d3 eb                	shr    ebx,cl
c001f3f5:	09 d8                	or     eax,ebx
c001f3f7:	d3 ea                	shr    edx,cl
c001f3f9:	83 c4 1c             	add    esp,0x1c
c001f3fc:	5b                   	pop    ebx
c001f3fd:	5e                   	pop    esi
c001f3fe:	5f                   	pop    edi
c001f3ff:	5d                   	pop    ebp
c001f400:	c3                   	ret    
c001f401:	8d 76 00             	lea    esi,[esi+0x0]
c001f404:	39 c3                	cmp    ebx,eax
c001f406:	73 db                	jae    c001f3e3 <__umoddi3+0xe7>
c001f408:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f40c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f410:	89 d7                	mov    edi,edx
c001f412:	89 c6                	mov    esi,eax
c001f414:	eb cd                	jmp    c001f3e3 <__umoddi3+0xe7>
c001f416:	66 90                	xchg   ax,ax
c001f418:	66 90                	xchg   ax,ax
c001f41a:	66 90                	xchg   ax,ax
c001f41c:	66 90                	xchg   ax,ax
c001f41e:	66 90                	xchg   ax,ax

c001f420 <fabs>:
c001f420:	83 ec 0c             	sub    esp,0xc
c001f423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f427:	89 04 24             	mov    DWORD PTR [esp],eax
c001f42a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f42e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f433:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f437:	dd 04 24             	fld    QWORD PTR [esp]
c001f43a:	83 c4 0c             	add    esp,0xc
c001f43d:	c3                   	ret    
c001f43e:	66 90                	xchg   ax,ax

c001f440 <lrint>:
c001f440:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f444:	83 ec 04             	sub    esp,0x4
c001f447:	db 1c 24             	fistp  DWORD PTR [esp]
c001f44a:	58                   	pop    eax
c001f44b:	c3                   	ret    

c001f44c <lrintf>:
c001f44c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f450:	83 ec 04             	sub    esp,0x4
c001f453:	db 1c 24             	fistp  DWORD PTR [esp]
c001f456:	58                   	pop    eax
c001f457:	c3                   	ret    

Disassembly of section .init:

c001f458 <_init>:
c001f458:	55                   	push   ebp
c001f459:	89 e5                	mov    ebp,esp
c001f45b:	e8 b8 0c fe ff       	call   c0000118 <frame_dummy>
c001f460:	e8 a3 fa ff ff       	call   c001ef08 <__do_global_ctors_aux>
c001f465:	5d                   	pop    ebp
c001f466:	c3                   	ret    

Disassembly of section .fini:

c001f467 <_fini>:
c001f467:	55                   	push   ebp
c001f468:	89 e5                	mov    ebp,esp
c001f46a:	e8 39 0c fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f46f:	5d                   	pop    ebp
c001f470:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f472 <Computer::~Computer()>:
c001f472:	83 ec 0c             	sub    esp,0xc
c001f475:	ba 84 0f 02 c0       	mov    edx,0xc0020f84
c001f47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47e:	89 10                	mov    DWORD PTR [eax],edx
c001f480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f484:	83 ec 0c             	sub    esp,0xc
c001f487:	50                   	push   eax
c001f488:	e8 59 0f ff ff       	call   c00103e6 <Device::~Device()>
c001f48d:	83 c4 10             	add    esp,0x10
c001f490:	90                   	nop
c001f491:	83 c4 0c             	add    esp,0xc
c001f494:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f496 <Computer::~Computer()>:
c001f496:	83 ec 0c             	sub    esp,0xc
c001f499:	83 ec 0c             	sub    esp,0xc
c001f49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4a0:	e8 cd ff ff ff       	call   c001f472 <Computer::~Computer()>
c001f4a5:	83 c4 10             	add    esp,0x10
c001f4a8:	83 ec 08             	sub    esp,0x8
c001f4ab:	68 ec 01 00 00       	push   0x1ec
c001f4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4b4:	e8 a0 fb fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001f4b9:	83 c4 10             	add    esp,0x10
c001f4bc:	83 c4 0c             	add    esp,0xc
c001f4bf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f4c0 <idleCommon()>:
c001f4c0:	83 ec 0c             	sub    esp,0xc
c001f4c3:	e8 ac 93 ff ff       	call   c0018874 <lockScheduler()>
c001f4c8:	e8 db 96 ff ff       	call   c0018ba8 <schedule()>
c001f4cd:	83 c4 0c             	add    esp,0xc
c001f4d0:	e9 a1 93 ff ff       	jmp    c0018876 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f4d5 <CPU::readCR3()>:
c001f4d5:	83 ec 10             	sub    esp,0x10
c001f4d8:	0f 20 d8             	mov    eax,cr3
c001f4db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4e3:	83 c4 10             	add    esp,0x10
c001f4e6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f4e7 <CPU::writeCR3(unsigned long)>:
c001f4e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4eb:	0f 22 d8             	mov    cr3,eax
c001f4ee:	90                   	nop
c001f4ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f4f0 <LinkedList<UnixFile>::~LinkedList()>:
c001f4f0:	90                   	nop
c001f4f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f4f2 <LinkedList<UnixFile>::LinkedList()>:
c001f4f2:	83 ec 0c             	sub    esp,0xc
c001f4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f503:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f519:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f523:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f535:	83 ec 0c             	sub    esp,0xc
c001f538:	68 fa 11 02 c0       	push   0xc00211fa
c001f53d:	e8 f7 fb fe ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001f542:	83 c4 10             	add    esp,0x10
c001f545:	90                   	nop
c001f546:	83 c4 0c             	add    esp,0xc
c001f549:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f54a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f54a:	83 ec 0c             	sub    esp,0xc
c001f54d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f552:	75 10                	jne    c001f564 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f554:	83 ec 0c             	sub    esp,0xc
c001f557:	68 14 12 02 c0       	push   0xc0021214
c001f55c:	e8 bf 63 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f561:	83 c4 10             	add    esp,0x10
c001f564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f568:	8b 00                	mov    eax,DWORD PTR [eax]
c001f56a:	85 c0                	test   eax,eax
c001f56c:	74 34                	je     c001f5a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f572:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f575:	85 c0                	test   eax,eax
c001f577:	74 29                	je     c001f5a2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f580:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f584:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f58f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f599:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5a0:	eb 65                	jmp    c001f607 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5a8:	85 c0                	test   eax,eax
c001f5aa:	75 4b                	jne    c001f5f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5b3:	85 c0                	test   eax,eax
c001f5b5:	75 40                	jne    c001f5f7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5bf:	89 10                	mov    DWORD PTR [eax],edx
c001f5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f5c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5d3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5e1:	85 c0                	test   eax,eax
c001f5e3:	74 22                	je     c001f607 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5e5:	83 ec 0c             	sub    esp,0xc
c001f5e8:	68 36 12 02 c0       	push   0xc0021236
c001f5ed:	e8 2e 63 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f5f2:	83 c4 10             	add    esp,0x10
c001f5f5:	eb 10                	jmp    c001f607 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5f7:	83 ec 0c             	sub    esp,0xc
c001f5fa:	68 40 12 02 c0       	push   0xc0021240
c001f5ff:	e8 1c 63 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f604:	83 c4 10             	add    esp,0x10
c001f607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f60e:	8d 50 01             	lea    edx,[eax+0x1]
c001f611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f615:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f618:	90                   	nop
c001f619:	83 c4 0c             	add    esp,0xc
c001f61c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f61e <LinkedList<UnixFile>::getFirstElement()>:
c001f61e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f622:	8b 00                	mov    eax,DWORD PTR [eax]
c001f624:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f626 <LinkedList<UnixFile>::removeFirst()>:
c001f626:	83 ec 0c             	sub    esp,0xc
c001f629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f62f:	85 c0                	test   eax,eax
c001f631:	75 12                	jne    c001f645 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f633:	83 ec 0c             	sub    esp,0xc
c001f636:	68 4c 12 02 c0       	push   0xc002124c
c001f63b:	e8 e0 62 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f640:	83 c4 10             	add    esp,0x10
c001f643:	eb 7e                	jmp    c001f6c3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f64c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f64f:	85 c0                	test   eax,eax
c001f651:	74 10                	je     c001f663 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f653:	83 ec 0c             	sub    esp,0xc
c001f656:	68 97 12 02 c0       	push   0xc0021297
c001f65b:	e8 c0 62 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f667:	8b 00                	mov    eax,DWORD PTR [eax]
c001f669:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f66c:	85 c0                	test   eax,eax
c001f66e:	75 33                	jne    c001f6a3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f674:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f689:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f68c:	83 f8 01             	cmp    eax,0x1
c001f68f:	74 21                	je     c001f6b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f691:	83 ec 0c             	sub    esp,0xc
c001f694:	68 70 12 02 c0       	push   0xc0021270
c001f699:	e8 82 62 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f69e:	83 c4 10             	add    esp,0x10
c001f6a1:	eb 0f                	jmp    c001f6b2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6a9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b0:	89 10                	mov    DWORD PTR [eax],edx
c001f6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6b9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6c3:	83 c4 0c             	add    esp,0xc
c001f6c6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f6c8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f6c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6cf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f6d0 <DriverlessDevice::~DriverlessDevice()>:
c001f6d0:	ba 04 19 02 c0       	mov    edx,0xc0021904
c001f6d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d9:	89 10                	mov    DWORD PTR [eax],edx
c001f6db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6df:	50                   	push   eax
c001f6e0:	e8 01 0d ff ff       	call   c00103e6 <Device::~Device()>
c001f6e5:	83 c4 04             	add    esp,0x4
c001f6e8:	90                   	nop
c001f6e9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f6ea <DriverlessDevice::~DriverlessDevice()>:
c001f6ea:	83 ec 0c             	sub    esp,0xc
c001f6ed:	83 ec 0c             	sub    esp,0xc
c001f6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6f4:	e8 d7 ff ff ff       	call   c001f6d0 <DriverlessDevice::~DriverlessDevice()>
c001f6f9:	83 c4 10             	add    esp,0x10
c001f6fc:	83 ec 08             	sub    esp,0x8
c001f6ff:	68 58 01 00 00       	push   0x158
c001f704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f708:	e8 4c f9 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001f70d:	83 c4 10             	add    esp,0x10
c001f710:	83 c4 0c             	add    esp,0xc
c001f713:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f714 <LinkedList<Device>::addElement(Device*)>:
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f71c:	75 10                	jne    c001f72e <LinkedList<Device>::addElement(Device*)+0x1a>
c001f71e:	83 ec 0c             	sub    esp,0xc
c001f721:	68 14 12 02 c0       	push   0xc0021214
c001f726:	e8 f5 61 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f72b:	83 c4 10             	add    esp,0x10
c001f72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f732:	8b 00                	mov    eax,DWORD PTR [eax]
c001f734:	85 c0                	test   eax,eax
c001f736:	74 3a                	je     c001f772 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f73f:	85 c0                	test   eax,eax
c001f741:	74 2f                	je     c001f772 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f747:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f74a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f74e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f758:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f75c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f763:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f766:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f770:	eb 68                	jmp    c001f7da <LinkedList<Device>::addElement(Device*)+0xc6>
c001f772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f776:	8b 00                	mov    eax,DWORD PTR [eax]
c001f778:	85 c0                	test   eax,eax
c001f77a:	75 4e                	jne    c001f7ca <LinkedList<Device>::addElement(Device*)+0xb6>
c001f77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f783:	85 c0                	test   eax,eax
c001f785:	75 43                	jne    c001f7ca <LinkedList<Device>::addElement(Device*)+0xb6>
c001f787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f78f:	89 10                	mov    DWORD PTR [eax],edx
c001f791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f795:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f799:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7b4:	85 c0                	test   eax,eax
c001f7b6:	74 22                	je     c001f7da <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7b8:	83 ec 0c             	sub    esp,0xc
c001f7bb:	68 36 12 02 c0       	push   0xc0021236
c001f7c0:	e8 5b 61 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f7c5:	83 c4 10             	add    esp,0x10
c001f7c8:	eb 10                	jmp    c001f7da <LinkedList<Device>::addElement(Device*)+0xc6>
c001f7ca:	83 ec 0c             	sub    esp,0xc
c001f7cd:	68 40 12 02 c0       	push   0xc0021240
c001f7d2:	e8 49 61 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f7d7:	83 c4 10             	add    esp,0x10
c001f7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7e1:	8d 50 01             	lea    edx,[eax+0x1]
c001f7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7eb:	90                   	nop
c001f7ec:	83 c4 0c             	add    esp,0xc
c001f7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f7f0 <LinkedList<Device>::LinkedList()>:
c001f7f0:	83 ec 0c             	sub    esp,0xc
c001f7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f801:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f817:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f821:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f833:	83 ec 0c             	sub    esp,0xc
c001f836:	68 fa 11 02 c0       	push   0xc00211fa
c001f83b:	e8 f9 f8 fe ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001f840:	83 c4 10             	add    esp,0x10
c001f843:	90                   	nop
c001f844:	83 c4 0c             	add    esp,0xc
c001f847:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f848 <CPU::readCR0()>:
c001f848:	83 ec 10             	sub    esp,0x10
c001f84b:	0f 20 c0             	mov    eax,cr0
c001f84e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f852:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f856:	83 c4 10             	add    esp,0x10
c001f859:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f85a <CPU::writeCR0(unsigned long)>:
c001f85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f85e:	0f 22 c0             	mov    cr0,eax
c001f861:	90                   	nop
c001f862:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f863 <CPU::readDR0()>:
c001f863:	83 ec 10             	sub    esp,0x10
c001f866:	0f 21 c0             	mov    eax,db0
c001f869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f86d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f871:	83 c4 10             	add    esp,0x10
c001f874:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f875 <CPU::readDR1()>:
c001f875:	83 ec 10             	sub    esp,0x10
c001f878:	0f 21 c8             	mov    eax,db1
c001f87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f87f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f883:	83 c4 10             	add    esp,0x10
c001f886:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f887 <CPU::readDR2()>:
c001f887:	83 ec 10             	sub    esp,0x10
c001f88a:	0f 21 d0             	mov    eax,db2
c001f88d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f895:	83 c4 10             	add    esp,0x10
c001f898:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f899 <CPU::readDR3()>:
c001f899:	83 ec 10             	sub    esp,0x10
c001f89c:	0f 21 d8             	mov    eax,db3
c001f89f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f8a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8a7:	83 c4 10             	add    esp,0x10
c001f8aa:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f8ab <CPU::readDR6()>:
c001f8ab:	83 ec 10             	sub    esp,0x10
c001f8ae:	0f 21 f0             	mov    eax,db6
c001f8b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f8b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8b9:	83 c4 10             	add    esp,0x10
c001f8bc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f8bd <CPU::readDR7()>:
c001f8bd:	83 ec 10             	sub    esp,0x10
c001f8c0:	0f 21 f8             	mov    eax,db7
c001f8c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f8c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f8d0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f8d8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8de:	85 c0                	test   eax,eax
c001f8e0:	75 0e                	jne    c001f8f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8e9:	85 c0                	test   eax,eax
c001f8eb:	75 03                	jne    c001f8f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f8ed:	b0 01                	mov    al,0x1
c001f8ef:	c3                   	ret    
c001f8f0:	b0 00                	mov    al,0x0
c001f8f2:	90                   	nop
c001f8f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f8f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f8f4:	83 ec 0c             	sub    esp,0xc
c001f8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8fd:	85 c0                	test   eax,eax
c001f8ff:	75 15                	jne    c001f916 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f901:	83 ec 0c             	sub    esp,0xc
c001f904:	68 4c 12 02 c0       	push   0xc002124c
c001f909:	e8 12 60 ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f90e:	83 c4 10             	add    esp,0x10
c001f911:	e9 88 00 00 00       	jmp    c001f99e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f91d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f920:	85 c0                	test   eax,eax
c001f922:	0f 95 c0             	setne  al
c001f925:	84 c0                	test   al,al
c001f927:	74 10                	je     c001f939 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f929:	83 ec 0c             	sub    esp,0xc
c001f92c:	68 97 12 02 c0       	push   0xc0021297
c001f931:	e8 ea 5f ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f936:	83 c4 10             	add    esp,0x10
c001f939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f93f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f942:	85 c0                	test   eax,eax
c001f944:	0f 94 c0             	sete   al
c001f947:	84 c0                	test   al,al
c001f949:	74 33                	je     c001f97e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f959:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f967:	83 f8 01             	cmp    eax,0x1
c001f96a:	74 21                	je     c001f98d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f96c:	83 ec 0c             	sub    esp,0xc
c001f96f:	68 70 12 02 c0       	push   0xc0021270
c001f974:	e8 a7 5f ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f979:	83 c4 10             	add    esp,0x10
c001f97c:	eb 0f                	jmp    c001f98d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f982:	8b 00                	mov    eax,DWORD PTR [eax]
c001f984:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98b:	89 10                	mov    DWORD PTR [eax],edx
c001f98d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f991:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f994:	8d 50 ff             	lea    edx,[eax-0x1]
c001f997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f99e:	83 c4 0c             	add    esp,0xc
c001f9a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f9a2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f9a2:	83 ec 0c             	sub    esp,0xc
c001f9a5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9aa:	75 10                	jne    c001f9bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f9ac:	83 ec 0c             	sub    esp,0xc
c001f9af:	68 14 12 02 c0       	push   0xc0021214
c001f9b4:	e8 67 5f ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001f9b9:	83 c4 10             	add    esp,0x10
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c2:	85 c0                	test   eax,eax
c001f9c4:	74 34                	je     c001f9fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9cd:	85 c0                	test   eax,eax
c001f9cf:	74 29                	je     c001f9fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9dc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f9df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9f1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f9f8:	eb 65                	jmp    c001fa5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa00:	85 c0                	test   eax,eax
c001fa02:	75 4b                	jne    c001fa4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fa04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa0b:	85 c0                	test   eax,eax
c001fa0d:	75 40                	jne    c001fa4f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa17:	89 10                	mov    DWORD PTR [eax],edx
c001fa19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa2b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa39:	85 c0                	test   eax,eax
c001fa3b:	74 22                	je     c001fa5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fa3d:	83 ec 0c             	sub    esp,0xc
c001fa40:	68 36 12 02 c0       	push   0xc0021236
c001fa45:	e8 d6 5e ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001fa4a:	83 c4 10             	add    esp,0x10
c001fa4d:	eb 10                	jmp    c001fa5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fa4f:	83 ec 0c             	sub    esp,0xc
c001fa52:	68 40 12 02 c0       	push   0xc0021240
c001fa57:	e8 c4 5e ff ff       	call   c0015920 <Krnl::panic(char const*)>
c001fa5c:	83 c4 10             	add    esp,0x10
c001fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa66:	8d 50 01             	lea    edx,[eax+0x1]
c001fa69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa70:	90                   	nop
c001fa71:	83 c4 0c             	add    esp,0xc
c001fa74:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fa76 <ACPI::~ACPI()>:
c001fa76:	83 ec 0c             	sub    esp,0xc
c001fa79:	ba e8 20 02 c0       	mov    edx,0xc00220e8
c001fa7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa82:	89 10                	mov    DWORD PTR [eax],edx
c001fa84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa88:	83 ec 0c             	sub    esp,0xc
c001fa8b:	50                   	push   eax
c001fa8c:	e8 55 09 ff ff       	call   c00103e6 <Device::~Device()>
c001fa91:	83 c4 10             	add    esp,0x10
c001fa94:	90                   	nop
c001fa95:	83 c4 0c             	add    esp,0xc
c001fa98:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fa9a <ACPI::~ACPI()>:
c001fa9a:	83 ec 0c             	sub    esp,0xc
c001fa9d:	83 ec 0c             	sub    esp,0xc
c001faa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faa4:	e8 cd ff ff ff       	call   c001fa76 <ACPI::~ACPI()>
c001faa9:	83 c4 10             	add    esp,0x10
c001faac:	83 ec 08             	sub    esp,0x8
c001faaf:	68 68 22 00 00       	push   0x2268
c001fab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fab8:	e8 9c f5 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fabd:	83 c4 10             	add    esp,0x10
c001fac0:	83 c4 0c             	add    esp,0xc
c001fac3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fac4 <CPU::~CPU()>:
c001fac4:	83 ec 0c             	sub    esp,0xc
c001fac7:	ba d8 24 02 c0       	mov    edx,0xc00224d8
c001facc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad0:	89 10                	mov    DWORD PTR [eax],edx
c001fad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	50                   	push   eax
c001fada:	e8 07 09 ff ff       	call   c00103e6 <Device::~Device()>
c001fadf:	83 c4 10             	add    esp,0x10
c001fae2:	90                   	nop
c001fae3:	83 c4 0c             	add    esp,0xc
c001fae6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fae8 <CPU::~CPU()>:
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	83 ec 0c             	sub    esp,0xc
c001faee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faf2:	e8 cd ff ff ff       	call   c001fac4 <CPU::~CPU()>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	83 ec 08             	sub    esp,0x8
c001fafd:	68 98 11 00 00       	push   0x1198
c001fb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb06:	e8 4e f5 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fb0b:	83 c4 10             	add    esp,0x10
c001fb0e:	83 c4 0c             	add    esp,0xc
c001fb11:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fb12 <CPU::readCR4()>:
c001fb12:	83 ec 10             	sub    esp,0x10
c001fb15:	0f 20 e0             	mov    eax,cr4
c001fb18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb20:	83 c4 10             	add    esp,0x10
c001fb23:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fb24 <CPU::writeDR7(unsigned long)>:
c001fb24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb28:	0f 23 f8             	mov    db7,eax
c001fb2b:	90                   	nop
c001fb2c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fb2d <CPU::writeCR4(unsigned long)>:
c001fb2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb31:	0f 22 e0             	mov    cr4,eax
c001fb34:	90                   	nop
c001fb35:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fb36 <CPU::readCR2()>:
c001fb36:	83 ec 10             	sub    esp,0x10
c001fb39:	0f 20 d0             	mov    eax,cr2
c001fb3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb44:	83 c4 10             	add    esp,0x10
c001fb47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fb48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fb48:	90                   	nop
c001fb49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fb4a <ThreadControlBlock::ThreadControlBlock()>:
c001fb4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb59:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb64:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fb6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fb76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb82:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fb86:	90                   	nop
c001fb87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb88 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbcb:	83 ec 0c             	sub    esp,0xc
c001fbce:	68 fa 11 02 c0       	push   0xc00211fa
c001fbd3:	e8 61 f5 fe ff       	call   c000f139 <Dbg::kprintf(char const*, ...)>
c001fbd8:	83 c4 10             	add    esp,0x10
c001fbdb:	90                   	nop
c001fbdc:	83 c4 0c             	add    esp,0xc
c001fbdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fbe0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fbe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbe4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fbe7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fbe8 <PCI::~PCI()>:
c001fbe8:	83 ec 0c             	sub    esp,0xc
c001fbeb:	ba 58 31 02 c0       	mov    edx,0xc0023158
c001fbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf4:	89 10                	mov    DWORD PTR [eax],edx
c001fbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfa:	83 ec 0c             	sub    esp,0xc
c001fbfd:	50                   	push   eax
c001fbfe:	e8 f3 01 ff ff       	call   c000fdf6 <Bus::~Bus()>
c001fc03:	83 c4 10             	add    esp,0x10
c001fc06:	90                   	nop
c001fc07:	83 c4 0c             	add    esp,0xc
c001fc0a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fc0c <PCI::~PCI()>:
c001fc0c:	83 ec 0c             	sub    esp,0xc
c001fc0f:	83 ec 0c             	sub    esp,0xc
c001fc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc16:	e8 cd ff ff ff       	call   c001fbe8 <PCI::~PCI()>
c001fc1b:	83 c4 10             	add    esp,0x10
c001fc1e:	83 ec 08             	sub    esp,0x8
c001fc21:	68 58 01 00 00       	push   0x158
c001fc26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc2a:	e8 2a f4 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fc2f:	83 c4 10             	add    esp,0x10
c001fc32:	83 c4 0c             	add    esp,0xc
c001fc35:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc36 <IDE::~IDE()>:
c001fc36:	83 ec 0c             	sub    esp,0xc
c001fc39:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001fc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc42:	89 10                	mov    DWORD PTR [eax],edx
c001fc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc48:	83 ec 0c             	sub    esp,0xc
c001fc4b:	50                   	push   eax
c001fc4c:	e8 ab 0c ff ff       	call   c00108fc <HardDiskController::~HardDiskController()>
c001fc51:	83 c4 10             	add    esp,0x10
c001fc54:	90                   	nop
c001fc55:	83 c4 0c             	add    esp,0xc
c001fc58:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fc5a <IDE::~IDE()>:
c001fc5a:	83 ec 0c             	sub    esp,0xc
c001fc5d:	83 ec 0c             	sub    esp,0xc
c001fc60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc64:	e8 cd ff ff ff       	call   c001fc36 <IDE::~IDE()>
c001fc69:	83 c4 10             	add    esp,0x10
c001fc6c:	83 ec 08             	sub    esp,0x8
c001fc6f:	68 70 02 00 00       	push   0x270
c001fc74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc78:	e8 dc f3 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fc7d:	83 c4 10             	add    esp,0x10
c001fc80:	83 c4 0c             	add    esp,0xc
c001fc83:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc84 <ATA::~ATA()>:
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	ba 0c 34 02 c0       	mov    edx,0xc002340c
c001fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc90:	89 10                	mov    DWORD PTR [eax],edx
c001fc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc96:	83 ec 0c             	sub    esp,0xc
c001fc99:	50                   	push   eax
c001fc9a:	e8 3b 0d ff ff       	call   c00109da <PhysicalDisk::~PhysicalDisk()>
c001fc9f:	83 c4 10             	add    esp,0x10
c001fca2:	90                   	nop
c001fca3:	83 c4 0c             	add    esp,0xc
c001fca6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fca8 <ATA::~ATA()>:
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	83 ec 0c             	sub    esp,0xc
c001fcae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb2:	e8 cd ff ff ff       	call   c001fc84 <ATA::~ATA()>
c001fcb7:	83 c4 10             	add    esp,0x10
c001fcba:	83 ec 08             	sub    esp,0x8
c001fcbd:	68 7c 01 00 00       	push   0x17c
c001fcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc6:	e8 8e f3 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	83 c4 0c             	add    esp,0xc
c001fcd1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fcd2 <ATAPI::~ATAPI()>:
c001fcd2:	83 ec 0c             	sub    esp,0xc
c001fcd5:	ba 78 34 02 c0       	mov    edx,0xc0023478
c001fcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcde:	89 10                	mov    DWORD PTR [eax],edx
c001fce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce4:	83 ec 0c             	sub    esp,0xc
c001fce7:	50                   	push   eax
c001fce8:	e8 ed 0c ff ff       	call   c00109da <PhysicalDisk::~PhysicalDisk()>
c001fced:	83 c4 10             	add    esp,0x10
c001fcf0:	90                   	nop
c001fcf1:	83 c4 0c             	add    esp,0xc
c001fcf4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fcf6 <ATAPI::~ATAPI()>:
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	83 ec 0c             	sub    esp,0xc
c001fcfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd00:	e8 cd ff ff ff       	call   c001fcd2 <ATAPI::~ATAPI()>
c001fd05:	83 c4 10             	add    esp,0x10
c001fd08:	83 ec 08             	sub    esp,0x8
c001fd0b:	68 80 01 00 00       	push   0x180
c001fd10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd14:	e8 40 f3 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	83 c4 0c             	add    esp,0xc
c001fd1f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001fd20 <AVX::~AVX()>:
c001fd20:	83 ec 0c             	sub    esp,0xc
c001fd23:	ba b4 34 02 c0       	mov    edx,0xc00234b4
c001fd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2c:	89 10                	mov    DWORD PTR [eax],edx
c001fd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	50                   	push   eax
c001fd36:	e8 23 0d ff ff       	call   c0010a5e <FPU::~FPU()>
c001fd3b:	83 c4 10             	add    esp,0x10
c001fd3e:	90                   	nop
c001fd3f:	83 c4 0c             	add    esp,0xc
c001fd42:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001fd44 <AVX::~AVX()>:
c001fd44:	83 ec 0c             	sub    esp,0xc
c001fd47:	83 ec 0c             	sub    esp,0xc
c001fd4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd4e:	e8 cd ff ff ff       	call   c001fd20 <AVX::~AVX()>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	83 ec 08             	sub    esp,0x8
c001fd59:	68 58 01 00 00       	push   0x158
c001fd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd62:	e8 f2 f2 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fd67:	83 c4 10             	add    esp,0x10
c001fd6a:	83 c4 0c             	add    esp,0xc
c001fd6d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001fd6e <MMX::~MMX()>:
c001fd6e:	83 ec 0c             	sub    esp,0xc
c001fd71:	ba f4 34 02 c0       	mov    edx,0xc00234f4
c001fd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7a:	89 10                	mov    DWORD PTR [eax],edx
c001fd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd80:	83 ec 0c             	sub    esp,0xc
c001fd83:	50                   	push   eax
c001fd84:	e8 d5 0c ff ff       	call   c0010a5e <FPU::~FPU()>
c001fd89:	83 c4 10             	add    esp,0x10
c001fd8c:	90                   	nop
c001fd8d:	83 c4 0c             	add    esp,0xc
c001fd90:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001fd92 <MMX::~MMX()>:
c001fd92:	83 ec 0c             	sub    esp,0xc
c001fd95:	83 ec 0c             	sub    esp,0xc
c001fd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd9c:	e8 cd ff ff ff       	call   c001fd6e <MMX::~MMX()>
c001fda1:	83 c4 10             	add    esp,0x10
c001fda4:	83 ec 08             	sub    esp,0x8
c001fda7:	68 58 01 00 00       	push   0x158
c001fdac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb0:	e8 a4 f2 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	83 c4 0c             	add    esp,0xc
c001fdbb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001fdbc <SSE::~SSE()>:
c001fdbc:	83 ec 0c             	sub    esp,0xc
c001fdbf:	ba 34 35 02 c0       	mov    edx,0xc0023534
c001fdc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc8:	89 10                	mov    DWORD PTR [eax],edx
c001fdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	50                   	push   eax
c001fdd2:	e8 87 0c ff ff       	call   c0010a5e <FPU::~FPU()>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	90                   	nop
c001fddb:	83 c4 0c             	add    esp,0xc
c001fdde:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001fde0 <SSE::~SSE()>:
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	83 ec 0c             	sub    esp,0xc
c001fde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdea:	e8 cd ff ff ff       	call   c001fdbc <SSE::~SSE()>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	83 ec 08             	sub    esp,0x8
c001fdf5:	68 58 01 00 00       	push   0x158
c001fdfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfe:	e8 56 f2 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	83 c4 0c             	add    esp,0xc
c001fe09:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001fe0a <x87::~x87()>:
c001fe0a:	83 ec 0c             	sub    esp,0xc
c001fe0d:	ba 74 35 02 c0       	mov    edx,0xc0023574
c001fe12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe16:	89 10                	mov    DWORD PTR [eax],edx
c001fe18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1c:	83 ec 0c             	sub    esp,0xc
c001fe1f:	50                   	push   eax
c001fe20:	e8 39 0c ff ff       	call   c0010a5e <FPU::~FPU()>
c001fe25:	83 c4 10             	add    esp,0x10
c001fe28:	90                   	nop
c001fe29:	83 c4 0c             	add    esp,0xc
c001fe2c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fe2e <x87::~x87()>:
c001fe2e:	83 ec 0c             	sub    esp,0xc
c001fe31:	83 ec 0c             	sub    esp,0xc
c001fe34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe38:	e8 cd ff ff ff       	call   c001fe0a <x87::~x87()>
c001fe3d:	83 c4 10             	add    esp,0x10
c001fe40:	83 ec 08             	sub    esp,0x8
c001fe43:	68 58 01 00 00       	push   0x158
c001fe48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe4c:	e8 08 f2 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fe51:	83 c4 10             	add    esp,0x10
c001fe54:	83 c4 0c             	add    esp,0xc
c001fe57:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fe58 <IOAPIC::~IOAPIC()>:
c001fe58:	83 ec 0c             	sub    esp,0xc
c001fe5b:	ba cc 36 02 c0       	mov    edx,0xc00236cc
c001fe60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe64:	89 10                	mov    DWORD PTR [eax],edx
c001fe66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe6a:	83 ec 0c             	sub    esp,0xc
c001fe6d:	50                   	push   eax
c001fe6e:	e8 73 05 ff ff       	call   c00103e6 <Device::~Device()>
c001fe73:	83 c4 10             	add    esp,0x10
c001fe76:	90                   	nop
c001fe77:	83 c4 0c             	add    esp,0xc
c001fe7a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe7c <IOAPIC::~IOAPIC()>:
c001fe7c:	83 ec 0c             	sub    esp,0xc
c001fe7f:	83 ec 0c             	sub    esp,0xc
c001fe82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe86:	e8 cd ff ff ff       	call   c001fe58 <IOAPIC::~IOAPIC()>
c001fe8b:	83 c4 10             	add    esp,0x10
c001fe8e:	83 ec 08             	sub    esp,0x8
c001fe91:	68 68 01 00 00       	push   0x168
c001fe96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe9a:	e8 ba f1 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001fe9f:	83 c4 10             	add    esp,0x10
c001fea2:	83 c4 0c             	add    esp,0xc
c001fea5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001fea6 <APIC::~APIC()>:
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	ba 84 36 02 c0       	mov    edx,0xc0023684
c001feae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb2:	89 10                	mov    DWORD PTR [eax],edx
c001feb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	50                   	push   eax
c001febc:	e8 67 10 ff ff       	call   c0010f28 <InterruptController::~InterruptController()>
c001fec1:	83 c4 10             	add    esp,0x10
c001fec4:	90                   	nop
c001fec5:	83 c4 0c             	add    esp,0xc
c001fec8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001feca <APIC::~APIC()>:
c001feca:	83 ec 0c             	sub    esp,0xc
c001fecd:	83 ec 0c             	sub    esp,0xc
c001fed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed4:	e8 cd ff ff ff       	call   c001fea6 <APIC::~APIC()>
c001fed9:	83 c4 10             	add    esp,0x10
c001fedc:	83 ec 08             	sub    esp,0x8
c001fedf:	68 58 21 00 00       	push   0x2158
c001fee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fee8:	e8 6c f1 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001feed:	83 c4 10             	add    esp,0x10
c001fef0:	83 c4 0c             	add    esp,0xc
c001fef3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001fef4 <PIC::~PIC()>:
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	ba 1c 37 02 c0       	mov    edx,0xc002371c
c001fefc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff00:	89 10                	mov    DWORD PTR [eax],edx
c001ff02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff06:	83 ec 0c             	sub    esp,0xc
c001ff09:	50                   	push   eax
c001ff0a:	e8 19 10 ff ff       	call   c0010f28 <InterruptController::~InterruptController()>
c001ff0f:	83 c4 10             	add    esp,0x10
c001ff12:	90                   	nop
c001ff13:	83 c4 0c             	add    esp,0xc
c001ff16:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001ff18 <PIC::~PIC()>:
c001ff18:	83 ec 0c             	sub    esp,0xc
c001ff1b:	83 ec 0c             	sub    esp,0xc
c001ff1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff22:	e8 cd ff ff ff       	call   c001fef4 <PIC::~PIC()>
c001ff27:	83 c4 10             	add    esp,0x10
c001ff2a:	83 ec 08             	sub    esp,0x8
c001ff2d:	68 58 21 00 00       	push   0x2158
c001ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff36:	e8 1e f1 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	83 c4 0c             	add    esp,0xc
c001ff41:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ff42 <APICTimer::~APICTimer()>:
c001ff42:	83 ec 0c             	sub    esp,0xc
c001ff45:	ba 70 37 02 c0       	mov    edx,0xc0023770
c001ff4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4e:	89 10                	mov    DWORD PTR [eax],edx
c001ff50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	50                   	push   eax
c001ff58:	e8 03 2d ff ff       	call   c0012c60 <Timer::~Timer()>
c001ff5d:	83 c4 10             	add    esp,0x10
c001ff60:	90                   	nop
c001ff61:	83 c4 0c             	add    esp,0xc
c001ff64:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ff66 <APICTimer::~APICTimer()>:
c001ff66:	83 ec 0c             	sub    esp,0xc
c001ff69:	83 ec 0c             	sub    esp,0xc
c001ff6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff70:	e8 cd ff ff ff       	call   c001ff42 <APICTimer::~APICTimer()>
c001ff75:	83 c4 10             	add    esp,0x10
c001ff78:	83 ec 08             	sub    esp,0x8
c001ff7b:	68 60 01 00 00       	push   0x160
c001ff80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff84:	e8 d0 f0 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	83 c4 0c             	add    esp,0xc
c001ff8f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ff90 <PIT::~PIT()>:
c001ff90:	83 ec 0c             	sub    esp,0xc
c001ff93:	ba c0 37 02 c0       	mov    edx,0xc00237c0
c001ff98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9c:	89 10                	mov    DWORD PTR [eax],edx
c001ff9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa2:	83 ec 0c             	sub    esp,0xc
c001ffa5:	50                   	push   eax
c001ffa6:	e8 b5 2c ff ff       	call   c0012c60 <Timer::~Timer()>
c001ffab:	83 c4 10             	add    esp,0x10
c001ffae:	90                   	nop
c001ffaf:	83 c4 0c             	add    esp,0xc
c001ffb2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ffb4 <PIT::~PIT()>:
c001ffb4:	83 ec 0c             	sub    esp,0xc
c001ffb7:	83 ec 0c             	sub    esp,0xc
c001ffba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbe:	e8 cd ff ff ff       	call   c001ff90 <PIT::~PIT()>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	83 ec 08             	sub    esp,0x8
c001ffc9:	68 5c 01 00 00       	push   0x15c
c001ffce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd2:	e8 82 f0 fe ff       	call   c000f059 <operator delete(void*, unsigned long)>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	83 c4 0c             	add    esp,0xc
c001ffdd:	c3                   	ret    
