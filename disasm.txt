
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 dc c2 00 00       	call   c000c2fc <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 f7 01 00       	call   c001f778 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 02 03 02 c0       	mov    ebx,0xc0020302
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c 03 02 c0    	cmp    ebx,0xc002030c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000049:	3d cc 41 02 c0       	cmp    eax,0xc00241cc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 41 02 c0       	push   0xc00241cc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000075:	2d cc 41 02 c0       	sub    eax,0xc00241cc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 41 02 c0       	push   0xc00241cc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 03 02 c0       	mov    ebx,0xc0020314
c00000bb:	81 eb 10 03 02 c0    	sub    ebx,0xc0020310
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 03 02 c0       	mov    esi,0xc0020310
c00000ca:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 43 02 c0       	mov    ds:0xc0024370,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 41 02 c0       	push   0xc00241cc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 43 02 c0 01 	mov    BYTE PTR ds:0xc002436c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 43 02 c0       	push   0xc0024374
c000012c:	68 cc 41 02 c0       	push   0xc00241cc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	e9 fb ff ff ff       	jmp    c0000163 <voodooXADD+0x13>
c0000168:	89 35 11 02 00 c0    	mov    DWORD PTR ds:0xc0000211,esi
c000016e:	89 25 0d 02 00 c0    	mov    DWORD PTR ds:0xc000020d,esp
c0000174:	60                   	pusha  
c0000175:	b0 90                	mov    al,0x90
c0000177:	b9 20 00 00 00       	mov    ecx,0x20
c000017c:	bf e8 01 00 c0       	mov    edi,0xc00001e8
c0000181:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000183:	61                   	popa   
c0000184:	60                   	pusha  
c0000185:	89 d6                	mov    esi,edx
c0000187:	bf e8 01 00 c0       	mov    edi,0xc00001e8
c000018c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000018e:	61                   	popa   
c000018f:	60                   	pusha  
c0000190:	89 d6                	mov    esi,edx
c0000192:	bf f8 01 00 c0       	mov    edi,0xc00001f8
c0000197:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000199:	61                   	popa   
c000019a:	c6 82 e8 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe18],0x90
c00001a1:	80 aa e9 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe17],0xc0
c00001a8:	80 82 ea 01 00 c0 86 	add    BYTE PTR [edx-0x3ffffe16],0x86
c00001af:	c6 82 f8 01 00 c0 90 	mov    BYTE PTR [edx-0x3ffffe08],0x90
c00001b6:	80 aa f9 01 00 c0 c0 	sub    BYTE PTR [edx-0x3ffffe07],0xc0
c00001bd:	80 82 fa 01 00 c0 02 	add    BYTE PTR [edx-0x3ffffe06],0x2
c00001c4:	8b 60 10             	mov    esp,DWORD PTR [eax+0x10]
c00001c7:	5f                   	pop    edi
c00001c8:	5e                   	pop    esi
c00001c9:	5d                   	pop    ebp
c00001ca:	5b                   	pop    ebx
c00001cb:	5b                   	pop    ebx
c00001cc:	5a                   	pop    edx
c00001cd:	59                   	pop    ecx
c00001ce:	58                   	pop    eax
c00001cf:	8b 25 11 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000211
c00001d5:	e9 fb ff ff ff       	jmp    c00001d5 <voodooXADD+0x85>
c00001da:	e9 09 00 00 00       	jmp    c00001e8 <voodooXADD.helper>

c00001df <voodooXADD.finish>:
c00001df:	8b 25 0d 02 00 c0    	mov    esp,DWORD PTR ds:0xc000020d
c00001e5:	61                   	popa   
c00001e6:	c9                   	leave  
c00001e7:	c3                   	ret    

c00001e8 <voodooXADD.helper>:
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	e9 d2 ff ff ff       	jmp    c00001df <voodooXADD.finish>

c000020d <voodooXADD.oldStack>:
c000020d:	00 00                	add    BYTE PTR [eax],al
	...

c0000211 <voodooXADD.newStack>:
c0000211:	00 00                	add    BYTE PTR [eax],al
	...

c0000215 <doTPAUSE>:
c0000215:	fb                   	sti    
c0000216:	31 c0                	xor    eax,eax
c0000218:	31 d2                	xor    edx,edx
c000021a:	66 0f ae f0          	tpause eax
c000021e:	c3                   	ret    

c000021f <hasLegacyFPU>:
c000021f:	0f 20 c2             	mov    edx,cr0
c0000222:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000228:	0f 22 c2             	mov    cr0,edx
c000022b:	db e3                	fninit 
c000022d:	dd 3d 42 02 00 c0    	fnstsw WORD PTR ds:0xc0000242
c0000233:	31 c0                	xor    eax,eax
c0000235:	66 81 3d 42 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000242,0x0
c000023e:	75 01                	jne    c0000241 <hasLegacyFPU.nofpu>

c0000240 <hasLegacyFPU.hasfpu>:
c0000240:	40                   	inc    eax

c0000241 <hasLegacyFPU.nofpu>:
c0000241:	c3                   	ret    

c0000242 <testword>:
c0000242:	aa                   	stos   BYTE PTR es:[edi],al
c0000243:	55                   	push   ebp

c0000244 <is486>:
c0000244:	0f 09                	wbinvd 
c0000246:	31 c0                	xor    eax,eax
c0000248:	40                   	inc    eax
c0000249:	c3                   	ret    
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	31 c0                	xor    eax,eax
c0000279:	c3                   	ret    

c000027a <goToVM86>:
c000027a:	fa                   	cli    
c000027b:	55                   	push   ebp
c000027c:	89 e5                	mov    ebp,esp
c000027e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000281:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000284:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000287:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000028a:	25 ff ff 00 00       	and    eax,0xffff
c000028f:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000295:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000029b:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002a1:	52                   	push   edx
c00002a2:	51                   	push   ecx
c00002a3:	68 02 02 02 00       	push   0x20202
c00002a8:	53                   	push   ebx
c00002a9:	50                   	push   eax
c00002aa:	cf                   	iret   

c00002ab <goToUsermode>:
c00002ab:	2e 0f c3 04 4b       	movnti DWORD PTR cs:[ebx+ecx*2],eax
c00002b0:	fa                   	cli    
c00002b1:	55                   	push   ebp
c00002b2:	89 e5                	mov    ebp,esp
c00002b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002b7:	66 b8 23 00          	mov    ax,0x23
c00002bb:	66 8e d8             	mov    ds,ax
c00002be:	66 8e c0             	mov    es,ax
c00002c1:	66 8e e0             	mov    fs,ax
c00002c4:	66 8e e8             	mov    gs,ax
c00002c7:	89 e0                	mov    eax,esp
c00002c9:	68 23 00 00 00       	push   0x23
c00002ce:	50                   	push   eax
c00002cf:	68 02 02 00 00       	push   0x202
c00002d4:	68 1b 00 00 00       	push   0x1b
c00002d9:	53                   	push   ebx
c00002da:	cf                   	iret   

c00002db <switchToThreadASMFirstTime>:
c00002db:	9c                   	pushf  
c00002dc:	fa                   	cli    
c00002dd:	50                   	push   eax
c00002de:	53                   	push   ebx
c00002df:	51                   	push   ecx
c00002e0:	52                   	push   edx
c00002e1:	56                   	push   esi
c00002e2:	57                   	push   edi
c00002e3:	55                   	push   ebp
c00002e4:	e9 11 00 00 00       	jmp    c00002fa <commonThreadSwitch>

c00002e9 <switchToThreadASM>:
c00002e9:	9c                   	pushf  
c00002ea:	50                   	push   eax
c00002eb:	53                   	push   ebx
c00002ec:	51                   	push   ecx
c00002ed:	52                   	push   edx
c00002ee:	56                   	push   esi
c00002ef:	57                   	push   edi
c00002f0:	55                   	push   ebp
c00002f1:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002f7:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002fa <commonThreadSwitch>:
c00002fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002fe:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000304:	8b 06                	mov    eax,DWORD PTR [esi]
c0000306:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000309:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000030c:	0f 20 d9             	mov    ecx,cr3
c000030f:	39 c8                	cmp    eax,ecx
c0000311:	74 03                	je     c0000316 <commonThreadSwitch.doneVAS>
c0000313:	0f 22 d8             	mov    cr3,eax

c0000316 <commonThreadSwitch.doneVAS>:
c0000316:	85 d2                	test   edx,edx
c0000318:	74 4e                	je     c0000368 <commonThreadSwitch.notFirstTime>
c000031a:	fa                   	cli    
c000031b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000031e:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000323:	60                   	pusha  
c0000324:	e8 89 ec 00 00       	call   c000efb2 <mapVASFirstTime>
c0000329:	61                   	popa   
c000032a:	89 c4                	mov    esp,eax
c000032c:	56                   	push   esi
c000032d:	52                   	push   edx
c000032e:	e8 33 83 01 00       	call   c0018666 <changeTSS>
c0000333:	5a                   	pop    edx
c0000334:	5e                   	pop    esi
c0000335:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000033c:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000342:	74 39                	je     c000037d <commonThreadSwitch.cameOffAFork>
c0000344:	5d                   	pop    ebp
c0000345:	5f                   	pop    edi
c0000346:	5e                   	pop    esi
c0000347:	59                   	pop    ecx
c0000348:	59                   	pop    ecx
c0000349:	5b                   	pop    ebx
c000034a:	58                   	pop    eax
c000034b:	81 c4 04 00 00 00    	add    esp,0x4
c0000351:	6a 02                	push   0x2
c0000353:	9d                   	popf   
c0000354:	52                   	push   edx
c0000355:	e8 39 87 01 00       	call   c0018a93 <taskStartupFunction>
c000035a:	5a                   	pop    edx
c000035b:	50                   	push   eax
c000035c:	ff d2                	call   edx
c000035e:	e8 ee 8c 01 00       	call   c0019051 <taskReturned>
c0000363:	e9 fb ff ff ff       	jmp    c0000363 <commonThreadSwitch.doneVAS+0x4d>

c0000368 <commonThreadSwitch.notFirstTime>:
c0000368:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 f4 82 01 00       	call   c0018666 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	5d                   	pop    ebp
c0000375:	5f                   	pop    edi
c0000376:	5e                   	pop    esi
c0000377:	5a                   	pop    edx
c0000378:	59                   	pop    ecx
c0000379:	5b                   	pop    ebx
c000037a:	58                   	pop    eax
c000037b:	9d                   	popf   
c000037c:	c3                   	ret    

c000037d <commonThreadSwitch.cameOffAFork>:
c000037d:	31 c0                	xor    eax,eax
c000037f:	31 d2                	xor    edx,edx
c0000381:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000384:	e9 a2 02 00 00       	jmp    c000062b <offAForkJumpThingy>

c0000389 <detectCPUID>:
c0000389:	9c                   	pushf  
c000038a:	9c                   	pushf  
c000038b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000392:	9d                   	popf   
c0000393:	9c                   	pushf  
c0000394:	58                   	pop    eax
c0000395:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000398:	9d                   	popf   
c0000399:	25 00 00 20 00       	and    eax,0x200000
c000039e:	c3                   	ret    

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 b0 47 02 c0 	lgdtd  ds:0xc00247b0
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 a2 01 00 00       	jmp    c00005cf <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 98 01 00 00       	jmp    c00005cf <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 8e 01 00 00       	jmp    c00005cf <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 84 01 00 00       	jmp    c00005cf <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 7a 01 00 00       	jmp    c00005cf <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 70 01 00 00       	jmp    c00005cf <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 66 01 00 00       	jmp    c00005cf <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 5c 01 00 00       	jmp    c00005cf <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 54 01 00 00       	jmp    c00005cf <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 4a 01 00 00       	jmp    c00005cf <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 42 01 00 00       	jmp    c00005cf <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 3a 01 00 00       	jmp    c00005cf <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 32 01 00 00       	jmp    c00005cf <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 2a 01 00 00       	jmp    c00005cf <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 22 01 00 00       	jmp    c00005cf <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 18 01 00 00       	jmp    c00005cf <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 0e 01 00 00       	jmp    c00005cf <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 04 01 00 00       	jmp    c00005cf <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 fa 00 00 00       	jmp    c00005cf <int_common_stub>

c00004d5 <isr96>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 60                	push   0x60
c00004da:	e9 20 01 00 00       	jmp    c00005ff <syscall_common_stub>

c00004df <irq0>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 20                	push   0x20
c00004e4:	e9 e6 00 00 00       	jmp    c00005cf <int_common_stub>

c00004e9 <irq1>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 21                	push   0x21
c00004ee:	e9 dc 00 00 00       	jmp    c00005cf <int_common_stub>

c00004f3 <irq2>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 22                	push   0x22
c00004f8:	e9 d2 00 00 00       	jmp    c00005cf <int_common_stub>

c00004fd <irq3>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 23                	push   0x23
c0000502:	e9 c8 00 00 00       	jmp    c00005cf <int_common_stub>

c0000507 <irq4>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 24                	push   0x24
c000050c:	e9 be 00 00 00       	jmp    c00005cf <int_common_stub>

c0000511 <irq5>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 25                	push   0x25
c0000516:	e9 b4 00 00 00       	jmp    c00005cf <int_common_stub>

c000051b <irq6>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 26                	push   0x26
c0000520:	e9 aa 00 00 00       	jmp    c00005cf <int_common_stub>

c0000525 <irq7>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 27                	push   0x27
c000052a:	e9 a0 00 00 00       	jmp    c00005cf <int_common_stub>

c000052f <irq8>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 28                	push   0x28
c0000534:	e9 96 00 00 00       	jmp    c00005cf <int_common_stub>

c0000539 <irq9>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 29                	push   0x29
c000053e:	e9 8c 00 00 00       	jmp    c00005cf <int_common_stub>

c0000543 <irq10>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2a                	push   0x2a
c0000548:	e9 82 00 00 00       	jmp    c00005cf <int_common_stub>

c000054d <irq11>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2b                	push   0x2b
c0000552:	e9 78 00 00 00       	jmp    c00005cf <int_common_stub>

c0000557 <irq12>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 2c                	push   0x2c
c000055c:	e9 6e 00 00 00       	jmp    c00005cf <int_common_stub>

c0000561 <irq13>:
c0000561:	fa                   	cli    
c0000562:	6a 00                	push   0x0
c0000564:	6a 2d                	push   0x2d
c0000566:	e9 64 00 00 00       	jmp    c00005cf <int_common_stub>

c000056b <irq14>:
c000056b:	fa                   	cli    
c000056c:	6a 00                	push   0x0
c000056e:	6a 2e                	push   0x2e
c0000570:	e9 5a 00 00 00       	jmp    c00005cf <int_common_stub>

c0000575 <irq15>:
c0000575:	fa                   	cli    
c0000576:	6a 00                	push   0x0
c0000578:	6a 2f                	push   0x2f
c000057a:	e9 50 00 00 00       	jmp    c00005cf <int_common_stub>

c000057f <irq16>:
c000057f:	fa                   	cli    
c0000580:	6a 00                	push   0x0
c0000582:	6a 30                	push   0x30
c0000584:	e9 46 00 00 00       	jmp    c00005cf <int_common_stub>

c0000589 <irq17>:
c0000589:	fa                   	cli    
c000058a:	6a 00                	push   0x0
c000058c:	6a 31                	push   0x31
c000058e:	e9 3c 00 00 00       	jmp    c00005cf <int_common_stub>

c0000593 <irq18>:
c0000593:	fa                   	cli    
c0000594:	6a 00                	push   0x0
c0000596:	6a 32                	push   0x32
c0000598:	e9 32 00 00 00       	jmp    c00005cf <int_common_stub>

c000059d <irq19>:
c000059d:	fa                   	cli    
c000059e:	6a 00                	push   0x0
c00005a0:	6a 33                	push   0x33
c00005a2:	e9 28 00 00 00       	jmp    c00005cf <int_common_stub>

c00005a7 <irq20>:
c00005a7:	fa                   	cli    
c00005a8:	6a 00                	push   0x0
c00005aa:	6a 34                	push   0x34
c00005ac:	e9 1e 00 00 00       	jmp    c00005cf <int_common_stub>

c00005b1 <irq21>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 35                	push   0x35
c00005b6:	e9 14 00 00 00       	jmp    c00005cf <int_common_stub>

c00005bb <irq22>:
c00005bb:	fa                   	cli    
c00005bc:	6a 00                	push   0x0
c00005be:	6a 36                	push   0x36
c00005c0:	e9 0a 00 00 00       	jmp    c00005cf <int_common_stub>

c00005c5 <irq23>:
c00005c5:	fa                   	cli    
c00005c6:	6a 00                	push   0x0
c00005c8:	6a 37                	push   0x37
c00005ca:	e9 00 00 00 00       	jmp    c00005cf <int_common_stub>

c00005cf <int_common_stub>:
c00005cf:	60                   	pusha  
c00005d0:	1e                   	push   ds
c00005d1:	06                   	push   es
c00005d2:	0f a0                	push   fs
c00005d4:	0f a8                	push   gs
c00005d6:	66 b8 10 00          	mov    ax,0x10
c00005da:	66 8e d8             	mov    ds,ax
c00005dd:	66 8e c0             	mov    es,ax
c00005e0:	66 8e e0             	mov    fs,ax
c00005e3:	66 8e e8             	mov    gs,ax
c00005e6:	89 e1                	mov    ecx,esp
c00005e8:	51                   	push   ecx
c00005e9:	b9 db 0e 01 c0       	mov    ecx,0xc0010edb
c00005ee:	ff d1                	call   ecx
c00005f0:	59                   	pop    ecx
c00005f1:	0f a9                	pop    gs
c00005f3:	0f a1                	pop    fs
c00005f5:	07                   	pop    es
c00005f6:	1f                   	pop    ds
c00005f7:	61                   	popa   
c00005f8:	81 c4 08 00 00 00    	add    esp,0x8
c00005fe:	cf                   	iret   

c00005ff <syscall_common_stub>:
c00005ff:	60                   	pusha  
c0000600:	1e                   	push   ds
c0000601:	06                   	push   es
c0000602:	0f a0                	push   fs
c0000604:	0f a8                	push   gs
c0000606:	66 b8 10 00          	mov    ax,0x10
c000060a:	66 8e d8             	mov    ds,ax
c000060d:	66 8e c0             	mov    es,ax
c0000610:	66 8e e0             	mov    fs,ax
c0000613:	66 8e e8             	mov    gs,ax
c0000616:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000061c:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c000061f:	89 e1                	mov    ecx,esp
c0000621:	51                   	push   ecx
c0000622:	fb                   	sti    
c0000623:	b9 db 0e 01 c0       	mov    ecx,0xc0010edb
c0000628:	ff d1                	call   ecx
c000062a:	59                   	pop    ecx

c000062b <offAForkJumpThingy>:
c000062b:	0f a9                	pop    gs
c000062d:	0f a1                	pop    fs
c000062f:	07                   	pop    es
c0000630:	1f                   	pop    ds
c0000631:	61                   	popa   
c0000632:	81 c4 08 00 00 00    	add    esp,0x8
c0000638:	cf                   	iret   

c0000639 <memcmp>:
c0000639:	56                   	push   esi
c000063a:	53                   	push   ebx
c000063b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000063f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000643:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000647:	01 d6                	add    esi,edx
c0000649:	39 f2                	cmp    edx,esi
c000064b:	74 0e                	je     c000065b <memcmp+0x22>
c000064d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000650:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000653:	38 c8                	cmp    al,cl
c0000655:	75 08                	jne    c000065f <memcmp+0x26>
c0000657:	42                   	inc    edx
c0000658:	43                   	inc    ebx
c0000659:	eb ee                	jmp    c0000649 <memcmp+0x10>
c000065b:	31 c0                	xor    eax,eax
c000065d:	eb 02                	jmp    c0000661 <memcmp+0x28>
c000065f:	29 c8                	sub    eax,ecx
c0000661:	5b                   	pop    ebx
c0000662:	5e                   	pop    esi
c0000663:	c3                   	ret    

c0000664 <memmove>:
c0000664:	56                   	push   esi
c0000665:	53                   	push   ebx
c0000666:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000066e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000672:	39 c8                	cmp    eax,ecx
c0000674:	73 12                	jae    c0000688 <memmove+0x24>
c0000676:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000679:	89 c3                	mov    ebx,eax
c000067b:	39 f1                	cmp    ecx,esi
c000067d:	74 1a                	je     c0000699 <memmove+0x35>
c000067f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000681:	43                   	inc    ebx
c0000682:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000685:	41                   	inc    ecx
c0000686:	eb f3                	jmp    c000067b <memmove+0x17>
c0000688:	76 0f                	jbe    c0000699 <memmove+0x35>
c000068a:	85 d2                	test   edx,edx
c000068c:	74 0b                	je     c0000699 <memmove+0x35>
c000068e:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000692:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000696:	4a                   	dec    edx
c0000697:	eb f1                	jmp    c000068a <memmove+0x26>
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    

c000069c <memcpy>:
c000069c:	57                   	push   edi
c000069d:	56                   	push   esi
c000069e:	53                   	push   ebx
c000069f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006a7:	89 da                	mov    edx,ebx
c00006a9:	89 d9                	mov    ecx,ebx
c00006ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006af:	83 e2 fc             	and    edx,0xfffffffc
c00006b2:	c1 e9 02             	shr    ecx,0x2
c00006b5:	89 c7                	mov    edi,eax
c00006b7:	fc                   	cld    
c00006b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ba:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006bd:	01 c2                	add    edx,eax
c00006bf:	01 de                	add    esi,ebx
c00006c1:	39 f1                	cmp    ecx,esi
c00006c3:	74 09                	je     c00006ce <memcpy+0x32>
c00006c5:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006c7:	42                   	inc    edx
c00006c8:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006cb:	41                   	inc    ecx
c00006cc:	eb f3                	jmp    c00006c1 <memcpy+0x25>
c00006ce:	5b                   	pop    ebx
c00006cf:	5e                   	pop    esi
c00006d0:	5f                   	pop    edi
c00006d1:	c3                   	ret    

c00006d2 <memset>:
c00006d2:	53                   	push   ebx
c00006d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006db:	01 c1                	add    ecx,eax
c00006dd:	89 c2                	mov    edx,eax
c00006df:	39 ca                	cmp    edx,ecx
c00006e1:	74 0a                	je     c00006ed <memset+0x1b>
c00006e3:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006e7:	42                   	inc    edx
c00006e8:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006eb:	eb f2                	jmp    c00006df <memset+0xd>
c00006ed:	5b                   	pop    ebx
c00006ee:	c3                   	ret    

c00006ef <strlen>:
c00006ef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006f3:	31 c0                	xor    eax,eax
c00006f5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006f9:	74 03                	je     c00006fe <strlen+0xf>
c00006fb:	40                   	inc    eax
c00006fc:	eb f7                	jmp    c00006f5 <strlen+0x6>
c00006fe:	c3                   	ret    

c00006ff <strpbrk>:
c00006ff:	53                   	push   ebx
c0000700:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000704:	8a 08                	mov    cl,BYTE PTR [eax]
c0000706:	84 c9                	test   cl,cl
c0000708:	74 14                	je     c000071e <strpbrk+0x1f>
c000070a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000070e:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000710:	84 db                	test   bl,bl
c0000712:	74 07                	je     c000071b <strpbrk+0x1c>
c0000714:	38 cb                	cmp    bl,cl
c0000716:	74 08                	je     c0000720 <strpbrk+0x21>
c0000718:	42                   	inc    edx
c0000719:	eb f3                	jmp    c000070e <strpbrk+0xf>
c000071b:	40                   	inc    eax
c000071c:	eb e6                	jmp    c0000704 <strpbrk+0x5>
c000071e:	31 c0                	xor    eax,eax
c0000720:	5b                   	pop    ebx
c0000721:	c3                   	ret    

c0000722 <strtok>:
c0000722:	56                   	push   esi
c0000723:	53                   	push   ebx
c0000724:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000728:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000072c:	85 db                	test   ebx,ebx
c000072e:	75 0e                	jne    c000073e <strtok+0x1c>
c0000730:	8b 1d 8c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002438c
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 04                	jne    c000073e <strtok+0x1c>
c000073a:	31 db                	xor    ebx,ebx
c000073c:	eb 2e                	jmp    c000076c <strtok+0x4a>
c000073e:	56                   	push   esi
c000073f:	53                   	push   ebx
c0000740:	e8 ba ff ff ff       	call   c00006ff <strpbrk>
c0000745:	a3 8c 43 02 c0       	mov    ds:0xc002438c,eax
c000074a:	5a                   	pop    edx
c000074b:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c0000750:	59                   	pop    ecx
c0000751:	39 d8                	cmp    eax,ebx
c0000753:	75 07                	jne    c000075c <strtok+0x3a>
c0000755:	43                   	inc    ebx
c0000756:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000075a:	eb e2                	jmp    c000073e <strtok+0x1c>
c000075c:	85 c0                	test   eax,eax
c000075e:	74 da                	je     c000073a <strtok+0x18>
c0000760:	8d 50 01             	lea    edx,[eax+0x1]
c0000763:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000766:	89 15 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,edx
c000076c:	89 d8                	mov    eax,ebx
c000076e:	5b                   	pop    ebx
c000076f:	5e                   	pop    esi
c0000770:	c3                   	ret    

c0000771 <strcpy>:
c0000771:	53                   	push   ebx
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000778:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000077c:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000077f:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000782:	84 c9                	test   cl,cl
c0000784:	74 06                	je     c000078c <strcpy+0x1b>
c0000786:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000789:	42                   	inc    edx
c000078a:	eb ec                	jmp    c0000778 <strcpy+0x7>
c000078c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000078f:	5b                   	pop    ebx
c0000790:	c3                   	ret    

c0000791 <strncpy>:
c0000791:	56                   	push   esi
c0000792:	53                   	push   ebx
c0000793:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000797:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000079b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000079f:	89 c3                	mov    ebx,eax
c00007a1:	85 c9                	test   ecx,ecx
c00007a3:	74 1a                	je     c00007bf <strncpy+0x2e>
c00007a5:	46                   	inc    esi
c00007a6:	43                   	inc    ebx
c00007a7:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007aa:	49                   	dec    ecx
c00007ab:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007ae:	84 d2                	test   dl,dl
c00007b0:	75 ef                	jne    c00007a1 <strncpy+0x10>
c00007b2:	31 d2                	xor    edx,edx
c00007b4:	39 d1                	cmp    ecx,edx
c00007b6:	74 07                	je     c00007bf <strncpy+0x2e>
c00007b8:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007bc:	42                   	inc    edx
c00007bd:	eb f5                	jmp    c00007b4 <strncpy+0x23>
c00007bf:	5b                   	pop    ebx
c00007c0:	5e                   	pop    esi
c00007c1:	c3                   	ret    

c00007c2 <strcmp>:
c00007c2:	31 c9                	xor    ecx,ecx
c00007c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007cc:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007d0:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007d4:	38 d0                	cmp    al,dl
c00007d6:	75 08                	jne    c00007e0 <strcmp+0x1e>
c00007d8:	41                   	inc    ecx
c00007d9:	84 c0                	test   al,al
c00007db:	75 e7                	jne    c00007c4 <strcmp+0x2>
c00007dd:	31 c0                	xor    eax,eax
c00007df:	c3                   	ret    
c00007e0:	29 d0                	sub    eax,edx
c00007e2:	c3                   	ret    

c00007e3 <strchr>:
c00007e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007e7:	8a 10                	mov    dl,BYTE PTR [eax]
c00007e9:	84 d2                	test   dl,dl
c00007eb:	74 09                	je     c00007f6 <strchr+0x13>
c00007ed:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007f1:	74 05                	je     c00007f8 <strchr+0x15>
c00007f3:	40                   	inc    eax
c00007f4:	eb f1                	jmp    c00007e7 <strchr+0x4>
c00007f6:	31 c0                	xor    eax,eax
c00007f8:	c3                   	ret    

c00007f9 <strncmp>:
c00007f9:	56                   	push   esi
c00007fa:	53                   	push   ebx
c00007fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000807:	01 d6                	add    esi,edx
c0000809:	39 f2                	cmp    edx,esi
c000080b:	74 12                	je     c000081f <strncmp+0x26>
c000080d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000810:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000813:	38 c8                	cmp    al,cl
c0000815:	75 0c                	jne    c0000823 <strncmp+0x2a>
c0000817:	42                   	inc    edx
c0000818:	84 c0                	test   al,al
c000081a:	74 03                	je     c000081f <strncmp+0x26>
c000081c:	43                   	inc    ebx
c000081d:	eb ea                	jmp    c0000809 <strncmp+0x10>
c000081f:	31 c0                	xor    eax,eax
c0000821:	eb 02                	jmp    c0000825 <strncmp+0x2c>
c0000823:	29 c8                	sub    eax,ecx
c0000825:	5b                   	pop    ebx
c0000826:	5e                   	pop    esi
c0000827:	c3                   	ret    

c0000828 <strcat>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	89 c1                	mov    ecx,eax
c000082f:	8d 51 01             	lea    edx,[ecx+0x1]
c0000832:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000836:	74 04                	je     c000083c <strcat+0x14>
c0000838:	89 d1                	mov    ecx,edx
c000083a:	eb f3                	jmp    c000082f <strcat+0x7>
c000083c:	31 d2                	xor    edx,edx
c000083e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000842:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000845:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000848:	42                   	inc    edx
c0000849:	84 db                	test   bl,bl
c000084b:	75 f1                	jne    c000083e <strcat+0x16>
c000084d:	5b                   	pop    ebx
c000084e:	c3                   	ret    

c000084f <strncat>:
c000084f:	56                   	push   esi
c0000850:	53                   	push   ebx
c0000851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000855:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000859:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000085d:	89 c2                	mov    edx,eax
c000085f:	85 db                	test   ebx,ebx
c0000861:	74 23                	je     c0000886 <strncat+0x37>
c0000863:	8d 72 01             	lea    esi,[edx+0x1]
c0000866:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000086a:	74 04                	je     c0000870 <strncat+0x21>
c000086c:	89 f2                	mov    edx,esi
c000086e:	eb f3                	jmp    c0000863 <strncat+0x14>
c0000870:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000873:	41                   	inc    ecx
c0000874:	42                   	inc    edx
c0000875:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000878:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000087b:	84 db                	test   bl,bl
c000087d:	74 07                	je     c0000886 <strncat+0x37>
c000087f:	39 f1                	cmp    ecx,esi
c0000881:	75 f0                	jne    c0000873 <strncat+0x24>
c0000883:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000886:	5b                   	pop    ebx
c0000887:	5e                   	pop    esi
c0000888:	c3                   	ret    

c0000889 <strstr>:
c0000889:	57                   	push   edi
c000088a:	56                   	push   esi
c000088b:	53                   	push   ebx
c000088c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000890:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000894:	57                   	push   edi
c0000895:	e8 55 fe ff ff       	call   c00006ef <strlen>
c000089a:	59                   	pop    ecx
c000089b:	89 c6                	mov    esi,eax
c000089d:	85 c0                	test   eax,eax
c000089f:	74 1f                	je     c00008c0 <strstr+0x37>
c00008a1:	53                   	push   ebx
c00008a2:	e8 48 fe ff ff       	call   c00006ef <strlen>
c00008a7:	5a                   	pop    edx
c00008a8:	39 f0                	cmp    eax,esi
c00008aa:	72 12                	jb     c00008be <strstr+0x35>
c00008ac:	56                   	push   esi
c00008ad:	57                   	push   edi
c00008ae:	53                   	push   ebx
c00008af:	e8 85 fd ff ff       	call   c0000639 <memcmp>
c00008b4:	83 c4 0c             	add    esp,0xc
c00008b7:	85 c0                	test   eax,eax
c00008b9:	74 05                	je     c00008c0 <strstr+0x37>
c00008bb:	43                   	inc    ebx
c00008bc:	eb e3                	jmp    c00008a1 <strstr+0x18>
c00008be:	31 db                	xor    ebx,ebx
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    

c00008c6 <toupper>:
c00008c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008ca:	0f b6 d0             	movzx  edx,al
c00008cd:	f6 82 20 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfce0],0x2
c00008d4:	74 03                	je     c00008d9 <toupper+0x13>
c00008d6:	83 e8 20             	sub    eax,0x20
c00008d9:	c3                   	ret    

c00008da <tolower>:
c00008da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008de:	0f b6 d0             	movzx  edx,al
c00008e1:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00008e8:	74 03                	je     c00008ed <tolower+0x13>
c00008ea:	83 c0 20             	add    eax,0x20
c00008ed:	c3                   	ret    

c00008ee <simple_strtoul>:
c00008ee:	55                   	push   ebp
c00008ef:	57                   	push   edi
c00008f0:	56                   	push   esi
c00008f1:	53                   	push   ebx
c00008f2:	83 ec 08             	sub    esp,0x8
c00008f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008fd:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000900:	f6 82 20 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfce0],0x8
c0000907:	74 03                	je     c000090c <simple_strtoul+0x1e>
c0000909:	41                   	inc    ecx
c000090a:	eb f1                	jmp    c00008fd <simple_strtoul+0xf>
c000090c:	80 fa 09             	cmp    dl,0x9
c000090f:	74 f8                	je     c0000909 <simple_strtoul+0x1b>
c0000911:	80 fa 2d             	cmp    dl,0x2d
c0000914:	75 0b                	jne    c0000921 <simple_strtoul+0x33>
c0000916:	41                   	inc    ecx
c0000917:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000091f:	eb 0e                	jmp    c000092f <simple_strtoul+0x41>
c0000921:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000929:	80 fa 2b             	cmp    dl,0x2b
c000092c:	75 01                	jne    c000092f <simple_strtoul+0x41>
c000092e:	41                   	inc    ecx
c000092f:	85 f6                	test   esi,esi
c0000931:	75 22                	jne    c0000955 <simple_strtoul+0x67>
c0000933:	be 0a 00 00 00       	mov    esi,0xa
c0000938:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000093b:	75 5a                	jne    c0000997 <simple_strtoul+0xa9>
c000093d:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000941:	50                   	push   eax
c0000942:	e8 93 ff ff ff       	call   c00008da <tolower>
c0000947:	5a                   	pop    edx
c0000948:	83 f8 78             	cmp    eax,0x78
c000094b:	74 03                	je     c0000950 <simple_strtoul+0x62>
c000094d:	41                   	inc    ecx
c000094e:	eb 16                	jmp    c0000966 <simple_strtoul+0x78>
c0000950:	83 c1 02             	add    ecx,0x2
c0000953:	eb 22                	jmp    c0000977 <simple_strtoul+0x89>
c0000955:	8d 46 fe             	lea    eax,[esi-0x2]
c0000958:	83 f8 22             	cmp    eax,0x22
c000095b:	0f 87 ab 00 00 00    	ja     c0000a0c <simple_strtoul+0x11e>
c0000961:	83 fe 08             	cmp    esi,0x8
c0000964:	75 0c                	jne    c0000972 <simple_strtoul+0x84>
c0000966:	be 08 00 00 00       	mov    esi,0x8
c000096b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000096e:	75 27                	jne    c0000997 <simple_strtoul+0xa9>
c0000970:	eb 1f                	jmp    c0000991 <simple_strtoul+0xa3>
c0000972:	83 fe 10             	cmp    esi,0x10
c0000975:	75 20                	jne    c0000997 <simple_strtoul+0xa9>
c0000977:	be 10 00 00 00       	mov    esi,0x10
c000097c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000097f:	75 16                	jne    c0000997 <simple_strtoul+0xa9>
c0000981:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000985:	50                   	push   eax
c0000986:	e8 4f ff ff ff       	call   c00008da <tolower>
c000098b:	5d                   	pop    ebp
c000098c:	83 f8 78             	cmp    eax,0x78
c000098f:	74 03                	je     c0000994 <simple_strtoul+0xa6>
c0000991:	41                   	inc    ecx
c0000992:	eb 03                	jmp    c0000997 <simple_strtoul+0xa9>
c0000994:	83 c1 02             	add    ecx,0x2
c0000997:	31 ed                	xor    ebp,ebp
c0000999:	31 db                	xor    ebx,ebx
c000099b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	84 d2                	test   dl,dl
c00009a6:	74 27                	je     c00009cf <simple_strtoul+0xe1>
c00009a8:	0f b6 fa             	movzx  edi,dl
c00009ab:	f6 87 20 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfce0],0x4
c00009b2:	74 05                	je     c00009b9 <simple_strtoul+0xcb>
c00009b4:	83 ef 30             	sub    edi,0x30
c00009b7:	eb 22                	jmp    c00009db <simple_strtoul+0xed>
c00009b9:	0f be d2             	movsx  edx,dl
c00009bc:	52                   	push   edx
c00009bd:	e8 04 ff ff ff       	call   c00008c6 <toupper>
c00009c2:	0f b6 d0             	movzx  edx,al
c00009c5:	5f                   	pop    edi
c00009c6:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00009cd:	75 09                	jne    c00009d8 <simple_strtoul+0xea>
c00009cf:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d4:	75 2d                	jne    c0000a03 <simple_strtoul+0x115>
c00009d6:	eb 59                	jmp    c0000a31 <simple_strtoul+0x143>
c00009d8:	8d 78 c9             	lea    edi,[eax-0x37]
c00009db:	39 f7                	cmp    edi,esi
c00009dd:	73 f0                	jae    c00009cf <simple_strtoul+0xe1>
c00009df:	89 f8                	mov    eax,edi
c00009e1:	31 d2                	xor    edx,edx
c00009e3:	f7 d0                	not    eax
c00009e5:	f7 f6                	div    esi
c00009e7:	39 d8                	cmp    eax,ebx
c00009e9:	72 0e                	jb     c00009f9 <simple_strtoul+0x10b>
c00009eb:	0f af de             	imul   ebx,esi
c00009ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f5:	01 fb                	add    ebx,edi
c00009f7:	eb 07                	jmp    c0000a00 <simple_strtoul+0x112>
c00009f9:	bd 01 00 00 00       	mov    ebp,0x1
c00009fe:	31 db                	xor    ebx,ebx
c0000a00:	41                   	inc    ecx
c0000a01:	eb 9f                	jmp    c00009a2 <simple_strtoul+0xb4>
c0000a03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a06:	09 d8                	or     eax,ebx
c0000a08:	75 21                	jne    c0000a2b <simple_strtoul+0x13d>
c0000a0a:	eb 11                	jmp    c0000a1d <simple_strtoul+0x12f>
c0000a0c:	31 db                	xor    ebx,ebx
c0000a0e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a13:	74 22                	je     c0000a37 <simple_strtoul+0x149>
c0000a15:	31 ed                	xor    ebp,ebp
c0000a17:	31 db                	xor    ebx,ebx
c0000a19:	85 c9                	test   ecx,ecx
c0000a1b:	74 0e                	je     c0000a2b <simple_strtoul+0x13d>
c0000a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a25:	31 db                	xor    ebx,ebx
c0000a27:	89 38                	mov    DWORD PTR [eax],edi
c0000a29:	eb 06                	jmp    c0000a31 <simple_strtoul+0x143>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	89 08                	mov    DWORD PTR [eax],ecx
c0000a31:	4d                   	dec    ebp
c0000a32:	75 03                	jne    c0000a37 <simple_strtoul+0x149>
c0000a34:	83 cb ff             	or     ebx,0xffffffff
c0000a37:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3c:	75 02                	jne    c0000a40 <simple_strtoul+0x152>
c0000a3e:	f7 db                	neg    ebx
c0000a40:	83 c4 08             	add    esp,0x8
c0000a43:	89 d8                	mov    eax,ebx
c0000a45:	5b                   	pop    ebx
c0000a46:	5e                   	pop    esi
c0000a47:	5f                   	pop    edi
c0000a48:	5d                   	pop    ebp
c0000a49:	c3                   	ret    

c0000a4a <largebin_index>:
c0000a4a:	89 c2                	mov    edx,eax
c0000a4c:	c1 ea 08             	shr    edx,0x8
c0000a4f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a55:	77 10                	ja     c0000a67 <largebin_index+0x1d>
c0000a57:	0f bd d2             	bsr    edx,edx
c0000a5a:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a5d:	d3 e8                	shr    eax,cl
c0000a5f:	83 e0 03             	and    eax,0x3
c0000a62:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a66:	c3                   	ret    
c0000a67:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a6c:	c3                   	ret    

c0000a6d <malloc_init_state>:
c0000a6d:	8d 50 34             	lea    edx,[eax+0x34]
c0000a70:	53                   	push   ebx
c0000a71:	89 d1                	mov    ecx,edx
c0000a73:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a79:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a7c:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a7f:	83 c2 08             	add    edx,0x8
c0000a82:	39 da                	cmp    edx,ebx
c0000a84:	75 f3                	jne    c0000a79 <malloc_init_state+0xc>
c0000a86:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a88:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a92:	83 e2 03             	and    edx,0x3
c0000a95:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a9f:	83 ca 48             	or     edx,0x48
c0000aa2:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000aac:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ab6:	89 10                	mov    DWORD PTR [eax],edx
c0000ab8:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000abf:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ac2:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000acc:	5b                   	pop    ebx
c0000acd:	c3                   	ret    

c0000ace <malloc_consolidate>:
c0000ace:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ad0:	85 d2                	test   edx,edx
c0000ad2:	0f 84 d8 00 00 00    	je     c0000bb0 <malloc_consolidate+0xe2>
c0000ad8:	55                   	push   ebp
c0000ad9:	83 e2 fd             	and    edx,0xfffffffd
c0000adc:	57                   	push   edi
c0000add:	8d 78 34             	lea    edi,[eax+0x34]
c0000ae0:	56                   	push   esi
c0000ae1:	89 c5                	mov    ebp,eax
c0000ae3:	53                   	push   ebx
c0000ae4:	83 ec 10             	sub    esp,0x10
c0000ae7:	89 10                	mov    DWORD PTR [eax],edx
c0000ae9:	c1 ea 03             	shr    edx,0x3
c0000aec:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000af0:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000af4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000af8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000afb:	85 d2                	test   edx,edx
c0000afd:	0f 84 98 00 00 00    	je     c0000b9b <malloc_consolidate+0xcd>
c0000b03:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b0a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b0d:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b14:	89 f9                	mov    ecx,edi
c0000b16:	83 e1 fe             	and    ecx,0xfffffffe
c0000b19:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b1c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b1f:	83 e3 fc             	and    ebx,0xfffffffc
c0000b22:	83 e7 01             	and    edi,0x1
c0000b25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b28:	75 14                	jne    c0000b3e <malloc_consolidate+0x70>
c0000b2a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b2c:	29 fa                	sub    edx,edi
c0000b2e:	01 f9                	add    ecx,edi
c0000b30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b33:	89 fb                	mov    ebx,edi
c0000b35:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b38:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b3b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b3e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b41:	74 40                	je     c0000b83 <malloc_consolidate+0xb5>
c0000b43:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b46:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b49:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b4d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b50:	83 e7 01             	and    edi,0x1
c0000b53:	75 0e                	jne    c0000b63 <malloc_consolidate+0x95>
c0000b55:	01 d9                	add    ecx,ebx
c0000b57:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b5a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b5d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b60:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b63:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b66:	89 ce                	mov    esi,ecx
c0000b68:	83 ce 01             	or     esi,0x1
c0000b6b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b6e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b71:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b74:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b7b:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b7e:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b81:	eb 0c                	jmp    c0000b8f <malloc_consolidate+0xc1>
c0000b83:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b86:	83 c9 01             	or     ecx,0x1
c0000b89:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b8c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b93:	85 d2                	test   edx,edx
c0000b95:	0f 85 6f ff ff ff    	jne    c0000b0a <malloc_consolidate+0x3c>
c0000b9b:	83 c5 04             	add    ebp,0x4
c0000b9e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ba2:	0f 85 50 ff ff ff    	jne    c0000af8 <malloc_consolidate+0x2a>
c0000ba8:	83 c4 10             	add    esp,0x10
c0000bab:	5b                   	pop    ebx
c0000bac:	5e                   	pop    esi
c0000bad:	5f                   	pop    edi
c0000bae:	5d                   	pop    ebp
c0000baf:	c3                   	ret    
c0000bb0:	e9 b8 fe ff ff       	jmp    c0000a6d <malloc_init_state>

c0000bb5 <dlfree>:
c0000bb5:	57                   	push   edi
c0000bb6:	56                   	push   esi
c0000bb7:	53                   	push   ebx
c0000bb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bbc:	85 db                	test   ebx,ebx
c0000bbe:	0f 84 e2 00 00 00    	je     c0000ca6 <dlfree+0xf1>
c0000bc4:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bc7:	8b 0d a0 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243a0
c0000bcd:	89 f0                	mov    eax,esi
c0000bcf:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bd2:	83 e0 fc             	and    eax,0xfffffffc
c0000bd5:	39 c1                	cmp    ecx,eax
c0000bd7:	72 24                	jb     c0000bfd <dlfree+0x48>
c0000bd9:	c1 e8 03             	shr    eax,0x3
c0000bdc:	83 c9 03             	or     ecx,0x3
c0000bdf:	83 e8 02             	sub    eax,0x2
c0000be2:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000be8:	8b 0c 85 a4 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc5c]
c0000bef:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bf1:	89 14 85 a4 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc5c],edx
c0000bf8:	e9 a9 00 00 00       	jmp    c0000ca6 <dlfree+0xf1>
c0000bfd:	83 e6 02             	and    esi,0x2
c0000c00:	0f 85 a0 00 00 00    	jne    c0000ca6 <dlfree+0xf1>
c0000c06:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c09:	83 c9 01             	or     ecx,0x1
c0000c0c:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000c12:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c15:	83 e1 fc             	and    ecx,0xfffffffc
c0000c18:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c1c:	75 13                	jne    c0000c31 <dlfree+0x7c>
c0000c1e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c21:	29 da                	sub    edx,ebx
c0000c23:	01 d8                	add    eax,ebx
c0000c25:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c28:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c2b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c2e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c31:	39 35 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,esi
c0000c37:	74 40                	je     c0000c79 <dlfree+0xc4>
c0000c39:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c3d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c40:	80 e3 01             	and    bl,0x1
c0000c43:	75 0e                	jne    c0000c53 <dlfree+0x9e>
c0000c45:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c48:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c4b:	01 c8                	add    eax,ecx
c0000c4d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c50:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c53:	8b 0d dc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243dc
c0000c59:	c7 42 0c d4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243d4
c0000c60:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c63:	89 15 dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edx
c0000c69:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c6c:	89 c1                	mov    ecx,eax
c0000c6e:	83 c9 01             	or     ecx,0x1
c0000c71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c74:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c77:	eb 10                	jmp    c0000c89 <dlfree+0xd4>
c0000c79:	01 c8                	add    eax,ecx
c0000c7b:	89 c1                	mov    ecx,eax
c0000c7d:	83 c9 01             	or     ecx,0x1
c0000c80:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c83:	89 15 cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,edx
c0000c89:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c8e:	76 16                	jbe    c0000ca6 <dlfree+0xf1>
c0000c90:	f6 05 a0 43 02 c0 02 	test   BYTE PTR ds:0xc00243a0,0x2
c0000c97:	74 0d                	je     c0000ca6 <dlfree+0xf1>
c0000c99:	5b                   	pop    ebx
c0000c9a:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000c9f:	5e                   	pop    esi
c0000ca0:	5f                   	pop    edi
c0000ca1:	e9 28 fe ff ff       	jmp    c0000ace <malloc_consolidate>
c0000ca6:	5b                   	pop    ebx
c0000ca7:	5e                   	pop    esi
c0000ca8:	5f                   	pop    edi
c0000ca9:	c3                   	ret    

c0000caa <sYSMALLOc>:
c0000caa:	55                   	push   ebp
c0000cab:	57                   	push   edi
c0000cac:	56                   	push   esi
c0000cad:	53                   	push   ebx
c0000cae:	89 d3                	mov    ebx,edx
c0000cb0:	83 ec 2c             	sub    esp,0x2c
c0000cb3:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000cb9:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cc0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cc7:	74 1f                	je     c0000ce8 <sYSMALLOc+0x3e>
c0000cc9:	89 d0                	mov    eax,edx
c0000ccb:	e8 fe fd ff ff       	call   c0000ace <malloc_consolidate>
c0000cd0:	83 ec 0c             	sub    esp,0xc
c0000cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cd7:	83 e8 07             	sub    eax,0x7
c0000cda:	50                   	push   eax
c0000cdb:	e8 33 02 00 00       	call   c0000f13 <dlmalloc>
c0000ce0:	83 c4 10             	add    esp,0x10
c0000ce3:	e9 23 02 00 00       	jmp    c0000f0b <sYSMALLOc+0x261>
c0000ce8:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cef:	83 c0 10             	add    eax,0x10
c0000cf2:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000cf8:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000cfb:	01 c2                	add    edx,eax
c0000cfd:	83 e5 fc             	and    ebp,0xfffffffc
c0000d00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000d04:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d0b:	74 02                	je     c0000d0f <sYSMALLOc+0x65>
c0000d0d:	29 ea                	sub    edx,ebp
c0000d0f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000d13:	f7 d9                	neg    ecx
c0000d15:	21 ca                	and    edx,ecx
c0000d17:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d1b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d1f:	7f 07                	jg     c0000d28 <sYSMALLOc+0x7e>
c0000d21:	31 c0                	xor    eax,eax
c0000d23:	e9 e3 01 00 00       	jmp    c0000f0b <sYSMALLOc+0x261>
c0000d28:	83 ec 0c             	sub    esp,0xc
c0000d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d2f:	e8 0b b1 00 00       	call   c000be3f <sbrk>
c0000d34:	83 c4 10             	add    esp,0x10
c0000d37:	89 c6                	mov    esi,eax
c0000d39:	83 f8 ff             	cmp    eax,0xffffffff
c0000d3c:	74 e3                	je     c0000d21 <sYSMALLOc+0x77>
c0000d3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d42:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d45:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d4b:	39 c2                	cmp    edx,eax
c0000d4d:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d53:	75 11                	jne    c0000d66 <sYSMALLOc+0xbc>
c0000d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d59:	01 e8                	add    eax,ebp
c0000d5b:	83 c8 01             	or     eax,0x1
c0000d5e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d61:	e9 93 00 00 00       	jmp    c0000df9 <sYSMALLOc+0x14f>
c0000d66:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d6c:	a8 01                	test   al,0x1
c0000d6e:	0f 84 73 01 00 00    	je     c0000ee7 <sYSMALLOc+0x23d>
c0000d74:	85 ed                	test   ebp,ebp
c0000d76:	74 12                	je     c0000d8a <sYSMALLOc+0xe0>
c0000d78:	39 f2                	cmp    edx,esi
c0000d7a:	76 0e                	jbe    c0000d8a <sYSMALLOc+0xe0>
c0000d7c:	83 e0 fe             	and    eax,0xfffffffe
c0000d7f:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d85:	e9 5d 01 00 00       	jmp    c0000ee7 <sYSMALLOc+0x23d>
c0000d8a:	85 ed                	test   ebp,ebp
c0000d8c:	74 0c                	je     c0000d9a <sYSMALLOc+0xf0>
c0000d8e:	89 f0                	mov    eax,esi
c0000d90:	29 d0                	sub    eax,edx
c0000d92:	01 c1                	add    ecx,eax
c0000d94:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d9a:	89 f2                	mov    edx,esi
c0000d9c:	83 e2 07             	and    edx,0x7
c0000d9f:	0f 84 b1 00 00 00    	je     c0000e56 <sYSMALLOc+0x1ac>
c0000da5:	b8 08 00 00 00       	mov    eax,0x8
c0000daa:	29 d0                	sub    eax,edx
c0000dac:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000daf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000db3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000db7:	01 e8                	add    eax,ebp
c0000db9:	83 ec 0c             	sub    esp,0xc
c0000dbc:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000dbf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dc3:	01 f2                	add    edx,esi
c0000dc5:	01 d1                	add    ecx,edx
c0000dc7:	29 d0                	sub    eax,edx
c0000dc9:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000dcd:	01 c1                	add    ecx,eax
c0000dcf:	51                   	push   ecx
c0000dd0:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dd4:	e8 66 b0 00 00       	call   c000be3f <sbrk>
c0000dd9:	83 c4 10             	add    esp,0x10
c0000ddc:	83 f8 ff             	cmp    eax,0xffffffff
c0000ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000de3:	75 7c                	jne    c0000e61 <sYSMALLOc+0x1b7>
c0000de5:	83 ec 0c             	sub    esp,0xc
c0000de8:	6a 00                	push   0x0
c0000dea:	e8 50 b0 00 00       	call   c000be3f <sbrk>
c0000def:	83 c4 10             	add    esp,0x10
c0000df2:	31 c9                	xor    ecx,ecx
c0000df4:	83 f8 ff             	cmp    eax,0xffffffff
c0000df7:	75 7e                	jne    c0000e77 <sYSMALLOc+0x1cd>
c0000df9:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dff:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e05:	73 06                	jae    c0000e0d <sYSMALLOc+0x163>
c0000e07:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e0d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e13:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e19:	73 06                	jae    c0000e21 <sYSMALLOc+0x177>
c0000e1b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e27:	83 e2 fc             	and    edx,0xfffffffc
c0000e2a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e2e:	0f 87 ed fe ff ff    	ja     c0000d21 <sYSMALLOc+0x77>
c0000e34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e38:	29 fa                	sub    edx,edi
c0000e3a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e3d:	83 ca 01             	or     edx,0x1
c0000e40:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e43:	89 fb                	mov    ebx,edi
c0000e45:	83 cb 01             	or     ebx,0x1
c0000e48:	83 c0 08             	add    eax,0x8
c0000e4b:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e51:	e9 b5 00 00 00       	jmp    c0000f0b <sYSMALLOc+0x261>
c0000e56:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e5a:	31 c0                	xor    eax,eax
c0000e5c:	e9 52 ff ff ff       	jmp    c0000db3 <sYSMALLOc+0x109>
c0000e61:	39 c6                	cmp    esi,eax
c0000e63:	76 12                	jbe    c0000e77 <sYSMALLOc+0x1cd>
c0000e65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e69:	01 f0                	add    eax,esi
c0000e6b:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e72:	e9 7b ff ff ff       	jmp    c0000df2 <sYSMALLOc+0x148>
c0000e77:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e7b:	29 f0                	sub    eax,esi
c0000e7d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	83 c8 01             	or     eax,0x1
c0000e85:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e88:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e8e:	85 ed                	test   ebp,ebp
c0000e90:	0f 84 63 ff ff ff    	je     c0000df9 <sYSMALLOc+0x14f>
c0000e96:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e99:	83 e0 f8             	and    eax,0xfffffff8
c0000e9c:	89 c2                	mov    edx,eax
c0000e9e:	83 ca 01             	or     edx,0x1
c0000ea1:	83 f8 0f             	cmp    eax,0xf
c0000ea4:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000ea7:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000eaf:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000eb7:	0f 86 3c ff ff ff    	jbe    c0000df9 <sYSMALLOc+0x14f>
c0000ebd:	83 ec 0c             	sub    esp,0xc
c0000ec0:	83 c7 08             	add    edi,0x8
c0000ec3:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ec9:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ed3:	57                   	push   edi
c0000ed4:	e8 dc fc ff ff       	call   c0000bb5 <dlfree>
c0000ed9:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000edf:	83 c4 10             	add    esp,0x10
c0000ee2:	e9 12 ff ff ff       	jmp    c0000df9 <sYSMALLOc+0x14f>
c0000ee7:	83 ec 0c             	sub    esp,0xc
c0000eea:	6a 00                	push   0x0
c0000eec:	e8 4e af 00 00       	call   c000be3f <sbrk>
c0000ef1:	89 c2                	mov    edx,eax
c0000ef3:	29 f2                	sub    edx,esi
c0000ef5:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ef9:	83 c4 10             	add    esp,0x10
c0000efc:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f02:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000f06:	e9 e7 fe ff ff       	jmp    c0000df2 <sYSMALLOc+0x148>
c0000f0b:	83 c4 2c             	add    esp,0x2c
c0000f0e:	5b                   	pop    ebx
c0000f0f:	5e                   	pop    esi
c0000f10:	5f                   	pop    edi
c0000f11:	5d                   	pop    ebp
c0000f12:	c3                   	ret    

c0000f13 <dlmalloc>:
c0000f13:	55                   	push   ebp
c0000f14:	57                   	push   edi
c0000f15:	56                   	push   esi
c0000f16:	53                   	push   ebx
c0000f17:	83 ec 1c             	sub    esp,0x1c
c0000f1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f1e:	83 f8 df             	cmp    eax,0xffffffdf
c0000f21:	0f 87 70 03 00 00    	ja     c0001297 <dlmalloc+0x384>
c0000f27:	83 c0 0b             	add    eax,0xb
c0000f2a:	be 10 00 00 00       	mov    esi,0x10
c0000f2f:	83 f8 0f             	cmp    eax,0xf
c0000f32:	76 05                	jbe    c0000f39 <dlmalloc+0x26>
c0000f34:	83 e0 f8             	and    eax,0xfffffff8
c0000f37:	89 c6                	mov    esi,eax
c0000f39:	8b 3d a0 43 02 c0    	mov    edi,DWORD PTR ds:0xc00243a0
c0000f3f:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f45:	75 17                	jne    c0000f5e <dlmalloc+0x4b>
c0000f47:	85 ff                	test   edi,edi
c0000f49:	0f 85 05 03 00 00    	jne    c0001254 <dlmalloc+0x341>
c0000f4f:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000f54:	e8 75 fb ff ff       	call   c0000ace <malloc_consolidate>
c0000f59:	e9 f6 02 00 00       	jmp    c0001254 <dlmalloc+0x341>
c0000f5e:	39 f7                	cmp    edi,esi
c0000f60:	72 1f                	jb     c0000f81 <dlmalloc+0x6e>
c0000f62:	89 f2                	mov    edx,esi
c0000f64:	c1 ea 03             	shr    edx,0x3
c0000f67:	83 ea 02             	sub    edx,0x2
c0000f6a:	8b 04 95 a4 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc5c]
c0000f71:	85 c0                	test   eax,eax
c0000f73:	74 0c                	je     c0000f81 <dlmalloc+0x6e>
c0000f75:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f78:	89 0c 95 a4 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc5c],ecx
c0000f7f:	eb 30                	jmp    c0000fb1 <dlmalloc+0x9e>
c0000f81:	89 f0                	mov    eax,esi
c0000f83:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f89:	77 2e                	ja     c0000fb9 <dlmalloc+0xa6>
c0000f8b:	c1 e8 03             	shr    eax,0x3
c0000f8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f92:	8d 14 c5 d4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc2c]
c0000f99:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f9c:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f9f:	39 c3                	cmp    ebx,eax
c0000fa1:	74 2e                	je     c0000fd1 <dlmalloc+0xbe>
c0000fa3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fa6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fab:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fae:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fb1:	83 c0 08             	add    eax,0x8
c0000fb4:	e9 e0 02 00 00       	jmp    c0001299 <dlmalloc+0x386>
c0000fb9:	e8 8c fa ff ff       	call   c0000a4a <largebin_index>
c0000fbe:	83 e7 02             	and    edi,0x2
c0000fc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc5:	74 0a                	je     c0000fd1 <dlmalloc+0xbe>
c0000fc7:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000fcc:	e8 fd fa ff ff       	call   c0000ace <malloc_consolidate>
c0000fd1:	8d 46 10             	lea    eax,[esi+0x10]
c0000fd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fd8:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c0000fde:	81 fb d4 43 02 c0    	cmp    ebx,0xc00243d4
c0000fe4:	0f 84 13 01 00 00    	je     c00010fd <dlmalloc+0x1ea>
c0000fea:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000ff0:	83 e7 fc             	and    edi,0xfffffffc
c0000ff3:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ff9:	77 4c                	ja     c0001047 <dlmalloc+0x134>
c0000ffb:	3d d4 43 02 c0       	cmp    eax,0xc00243d4
c0001000:	75 45                	jne    c0001047 <dlmalloc+0x134>
c0001002:	39 1d d0 43 02 c0    	cmp    DWORD PTR ds:0xc00243d0,ebx
c0001008:	75 3d                	jne    c0001047 <dlmalloc+0x134>
c000100a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000100e:	73 37                	jae    c0001047 <dlmalloc+0x134>
c0001010:	89 fa                	mov    edx,edi
c0001012:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001015:	29 f2                	sub    edx,esi
c0001017:	83 ce 01             	or     esi,0x1
c000101a:	89 d1                	mov    ecx,edx
c000101c:	a3 dc 43 02 c0       	mov    ds:0xc00243dc,eax
c0001021:	83 c9 01             	or     ecx,0x1
c0001024:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c0001029:	a3 d0 43 02 c0       	mov    ds:0xc00243d0,eax
c000102e:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001035:	c7 40 0c d4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243d4
c000103c:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000103f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001042:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001045:	eb 15                	jmp    c000105c <dlmalloc+0x149>
c0001047:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c000104c:	39 fe                	cmp    esi,edi
c000104e:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001055:	75 0d                	jne    c0001064 <dlmalloc+0x151>
c0001057:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000105c:	8d 43 08             	lea    eax,[ebx+0x8]
c000105f:	e9 35 02 00 00       	jmp    c0001299 <dlmalloc+0x386>
c0001064:	89 f8                	mov    eax,edi
c0001066:	81 ff ff 00 00 00    	cmp    edi,0xff
c000106c:	77 19                	ja     c0001087 <dlmalloc+0x174>
c000106e:	c1 e8 03             	shr    eax,0x3
c0001071:	8d 14 00             	lea    edx,[eax+eax*1]
c0001074:	83 c2 0d             	add    edx,0xd
c0001077:	8d 2c 95 98 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc68]
c000107e:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c0001085:	eb 46                	jmp    c00010cd <dlmalloc+0x1ba>
c0001087:	e8 be f9 ff ff       	call   c0000a4a <largebin_index>
c000108c:	8d 14 00             	lea    edx,[eax+eax*1]
c000108f:	83 c2 0d             	add    edx,0xd
c0001092:	8d 0c 95 a0 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc60]
c0001099:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c00010a0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010a3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010a7:	89 d5                	mov    ebp,edx
c00010a9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010ad:	74 1e                	je     c00010cd <dlmalloc+0x1ba>
c00010af:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010b2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010b5:	77 12                	ja     c00010c9 <dlmalloc+0x1b6>
c00010b7:	83 cf 01             	or     edi,0x1
c00010ba:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010bd:	76 05                	jbe    c00010c4 <dlmalloc+0x1b1>
c00010bf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010c2:	eb f6                	jmp    c00010ba <dlmalloc+0x1a7>
c00010c4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010c7:	eb 04                	jmp    c00010cd <dlmalloc+0x1ba>
c00010c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010cd:	89 c7                	mov    edi,eax
c00010cf:	88 c1                	mov    cl,al
c00010d1:	c1 ff 05             	sar    edi,0x5
c00010d4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010d8:	bf 01 00 00 00       	mov    edi,0x1
c00010dd:	d3 e7                	shl    edi,cl
c00010df:	89 f8                	mov    eax,edi
c00010e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010e5:	09 04 bd d4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb92c],eax
c00010ec:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010ef:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010f2:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010f5:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010f8:	e9 db fe ff ff       	jmp    c0000fd8 <dlmalloc+0xc5>
c00010fd:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001103:	76 78                	jbe    c000117d <dlmalloc+0x26a>
c0001105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001109:	8d 04 c5 d4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc2c]
c0001110:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001113:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001116:	39 ca                	cmp    edx,ecx
c0001118:	74 63                	je     c000117d <dlmalloc+0x26a>
c000111a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000111d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001120:	83 e3 fc             	and    ebx,0xfffffffc
c0001123:	39 de                	cmp    esi,ebx
c0001125:	77 52                	ja     c0001179 <dlmalloc+0x266>
c0001127:	89 df                	mov    edi,ebx
c0001129:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000112c:	29 f7                	sub    edi,esi
c000112e:	01 d3                	add    ebx,edx
c0001130:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001133:	83 ff 0f             	cmp    edi,0xf
c0001136:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001139:	8d 42 08             	lea    eax,[edx+0x8]
c000113c:	77 09                	ja     c0001147 <dlmalloc+0x234>
c000113e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001142:	e9 52 01 00 00       	jmp    c0001299 <dlmalloc+0x386>
c0001147:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000114a:	83 ce 01             	or     esi,0x1
c000114d:	89 0d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,ecx
c0001153:	89 0d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,ecx
c0001159:	c7 41 08 d4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243d4
c0001160:	c7 41 0c d4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243d4
c0001167:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000116a:	89 fa                	mov    edx,edi
c000116c:	83 ca 01             	or     edx,0x1
c000116f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001172:	89 3b                	mov    DWORD PTR [ebx],edi
c0001174:	e9 20 01 00 00       	jmp    c0001299 <dlmalloc+0x386>
c0001179:	89 c2                	mov    edx,eax
c000117b:	eb 99                	jmp    c0001116 <dlmalloc+0x203>
c000117d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001181:	b8 01 00 00 00       	mov    eax,0x1
c0001186:	41                   	inc    ecx
c0001187:	89 cb                	mov    ebx,ecx
c0001189:	c1 eb 05             	shr    ebx,0x5
c000118c:	8d 14 cd cc 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc34]
c0001193:	d3 e0                	shl    eax,cl
c0001195:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c000119c:	39 f8                	cmp    eax,edi
c000119e:	77 04                	ja     c00011a4 <dlmalloc+0x291>
c00011a0:	85 c0                	test   eax,eax
c00011a2:	75 26                	jne    c00011ca <dlmalloc+0x2b7>
c00011a4:	43                   	inc    ebx
c00011a5:	83 fb 02             	cmp    ebx,0x2
c00011a8:	0f 87 a6 00 00 00    	ja     c0001254 <dlmalloc+0x341>
c00011ae:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c00011b5:	85 ff                	test   edi,edi
c00011b7:	74 eb                	je     c00011a4 <dlmalloc+0x291>
c00011b9:	89 d8                	mov    eax,ebx
c00011bb:	c1 e0 06             	shl    eax,0x6
c00011be:	8d 14 85 cc 43 02 c0 	lea    edx,[eax*4-0x3ffdbc34]
c00011c5:	b8 01 00 00 00       	mov    eax,0x1
c00011ca:	85 f8                	test   eax,edi
c00011cc:	75 07                	jne    c00011d5 <dlmalloc+0x2c2>
c00011ce:	83 c2 08             	add    edx,0x8
c00011d1:	01 c0                	add    eax,eax
c00011d3:	eb f5                	jmp    c00011ca <dlmalloc+0x2b7>
c00011d5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011d8:	39 ca                	cmp    edx,ecx
c00011da:	75 14                	jne    c00011f0 <dlmalloc+0x2dd>
c00011dc:	89 c1                	mov    ecx,eax
c00011de:	83 c2 08             	add    edx,0x8
c00011e1:	f7 d1                	not    ecx
c00011e3:	21 cf                	and    edi,ecx
c00011e5:	01 c0                	add    eax,eax
c00011e7:	89 3c 9d d4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb92c],edi
c00011ee:	eb ac                	jmp    c000119c <dlmalloc+0x289>
c00011f0:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011f3:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011f6:	83 e0 fc             	and    eax,0xfffffffc
c00011f9:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011fc:	89 c3                	mov    ebx,eax
c00011fe:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001201:	29 f3                	sub    ebx,esi
c0001203:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001206:	83 fb 0f             	cmp    ebx,0xf
c0001209:	8d 41 08             	lea    eax,[ecx+0x8]
c000120c:	77 09                	ja     c0001217 <dlmalloc+0x304>
c000120e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001212:	e9 82 00 00 00       	jmp    c0001299 <dlmalloc+0x386>
c0001217:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000121a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001220:	89 3d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edi
c0001226:	89 3d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,edi
c000122c:	c7 47 08 d4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243d4
c0001233:	c7 47 0c d4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243d4
c000123a:	77 06                	ja     c0001242 <dlmalloc+0x32f>
c000123c:	89 3d d0 43 02 c0    	mov    DWORD PTR ds:0xc00243d0,edi
c0001242:	83 ce 01             	or     esi,0x1
c0001245:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001248:	89 d9                	mov    ecx,ebx
c000124a:	83 c9 01             	or     ecx,0x1
c000124d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001250:	89 1a                	mov    DWORD PTR [edx],ebx
c0001252:	eb 45                	jmp    c0001299 <dlmalloc+0x386>
c0001254:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c0001259:	8d 4e 10             	lea    ecx,[esi+0x10]
c000125c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000125f:	83 e2 fc             	and    edx,0xfffffffc
c0001262:	39 d1                	cmp    ecx,edx
c0001264:	77 1e                	ja     c0001284 <dlmalloc+0x371>
c0001266:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001269:	89 f3                	mov    ebx,esi
c000126b:	29 f2                	sub    edx,esi
c000126d:	83 cb 01             	or     ebx,0x1
c0001270:	83 ca 01             	or     edx,0x1
c0001273:	89 0d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ecx
c0001279:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000127c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127f:	e9 2d fd ff ff       	jmp    c0000fb1 <dlmalloc+0x9e>
c0001284:	83 c4 1c             	add    esp,0x1c
c0001287:	89 f0                	mov    eax,esi
c0001289:	ba a0 43 02 c0       	mov    edx,0xc00243a0
c000128e:	5b                   	pop    ebx
c000128f:	5e                   	pop    esi
c0001290:	5f                   	pop    edi
c0001291:	5d                   	pop    ebp
c0001292:	e9 13 fa ff ff       	jmp    c0000caa <sYSMALLOc>
c0001297:	31 c0                	xor    eax,eax
c0001299:	83 c4 1c             	add    esp,0x1c
c000129c:	5b                   	pop    ebx
c000129d:	5e                   	pop    esi
c000129e:	5f                   	pop    edi
c000129f:	5d                   	pop    ebp
c00012a0:	c3                   	ret    

c00012a1 <iALLOc>:
c00012a1:	55                   	push   ebp
c00012a2:	89 c5                	mov    ebp,eax
c00012a4:	57                   	push   edi
c00012a5:	56                   	push   esi
c00012a6:	53                   	push   ebx
c00012a7:	83 ec 2c             	sub    esp,0x2c
c00012aa:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00012b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012bd:	75 12                	jne    c00012d1 <iALLOc+0x30>
c00012bf:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00012c4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012c8:	e8 01 f8 ff ff       	call   c0000ace <malloc_consolidate>
c00012cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012d6:	74 12                	je     c00012ea <iALLOc+0x49>
c00012d8:	85 ed                	test   ebp,ebp
c00012da:	0f 84 64 01 00 00    	je     c0001444 <iALLOc+0x1a3>
c00012e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012e8:	eb 33                	jmp    c000131d <iALLOc+0x7c>
c00012ea:	85 ed                	test   ebp,ebp
c00012ec:	75 14                	jne    c0001302 <iALLOc+0x61>
c00012ee:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012f6:	83 c4 2c             	add    esp,0x2c
c00012f9:	5b                   	pop    ebx
c00012fa:	5e                   	pop    esi
c00012fb:	5f                   	pop    edi
c00012fc:	5d                   	pop    ebp
c00012fd:	e9 11 fc ff ff       	jmp    c0000f13 <dlmalloc>
c0001302:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001309:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001311:	83 f8 0f             	cmp    eax,0xf
c0001314:	76 07                	jbe    c000131d <iALLOc+0x7c>
c0001316:	83 e0 f8             	and    eax,0xfffffff8
c0001319:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000131d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001322:	75 09                	jne    c000132d <iALLOc+0x8c>
c0001324:	89 d0                	mov    eax,edx
c0001326:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001329:	31 f6                	xor    esi,esi
c000132b:	eb 3b                	jmp    c0001368 <iALLOc+0xc7>
c000132d:	8b 02                	mov    eax,DWORD PTR [edx]
c000132f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001337:	83 c0 0b             	add    eax,0xb
c000133a:	83 f8 0f             	cmp    eax,0xf
c000133d:	76 07                	jbe    c0001346 <iALLOc+0xa5>
c000133f:	83 e0 f8             	and    eax,0xfffffff8
c0001342:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001346:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000134a:	0f af f5             	imul   esi,ebp
c000134d:	eb 25                	jmp    c0001374 <iALLOc+0xd3>
c000134f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001351:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001354:	bb 10 00 00 00       	mov    ebx,0x10
c0001359:	83 f9 0f             	cmp    ecx,0xf
c000135c:	76 05                	jbe    c0001363 <iALLOc+0xc2>
c000135e:	83 e1 f8             	and    ecx,0xfffffff8
c0001361:	89 cb                	mov    ebx,ecx
c0001363:	01 de                	add    esi,ebx
c0001365:	83 c0 04             	add    eax,0x4
c0001368:	39 c7                	cmp    edi,eax
c000136a:	75 e3                	jne    c000134f <iALLOc+0xae>
c000136c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001374:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001378:	83 ec 0c             	sub    esp,0xc
c000137b:	8b 1d f4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246f4
c0001381:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c000138b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000138f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001393:	50                   	push   eax
c0001394:	e8 7a fb ff ff       	call   c0000f13 <dlmalloc>
c0001399:	83 c4 10             	add    esp,0x10
c000139c:	89 1d f4 46 02 c0    	mov    DWORD PTR ds:0xc00246f4,ebx
c00013a2:	85 c0                	test   eax,eax
c00013a4:	0f 84 92 00 00 00    	je     c000143c <iALLOc+0x19b>
c00013aa:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013ad:	8d 78 f8             	lea    edi,[eax-0x8]
c00013b0:	83 e3 fc             	and    ebx,0xfffffffc
c00013b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013b7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013bc:	74 1e                	je     c00013dc <iALLOc+0x13b>
c00013be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013c2:	89 d9                	mov    ecx,ebx
c00013c4:	52                   	push   edx
c00013c5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013c9:	83 e9 04             	sub    ecx,0x4
c00013cc:	51                   	push   ecx
c00013cd:	6a 00                	push   0x0
c00013cf:	50                   	push   eax
c00013d0:	e8 fd f2 ff ff       	call   c00006d2 <memset>
c00013d5:	83 c4 10             	add    esp,0x10
c00013d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e1:	75 14                	jne    c00013f7 <iALLOc+0x156>
c00013e3:	8d 04 37             	lea    eax,[edi+esi*1]
c00013e6:	29 f3                	sub    ebx,esi
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	8d 48 08             	lea    ecx,[eax+0x8]
c00013ee:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f5:	89 f3                	mov    ebx,esi
c00013f7:	31 c0                	xor    eax,eax
c00013f9:	4d                   	dec    ebp
c00013fa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001401:	39 c5                	cmp    ebp,eax
c0001403:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001406:	74 2c                	je     c0001434 <iALLOc+0x193>
c0001408:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000140c:	85 c9                	test   ecx,ecx
c000140e:	75 15                	jne    c0001425 <iALLOc+0x184>
c0001410:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001413:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001416:	b9 10 00 00 00       	mov    ecx,0x10
c000141b:	83 fe 0f             	cmp    esi,0xf
c000141e:	76 05                	jbe    c0001425 <iALLOc+0x184>
c0001420:	83 e6 f8             	and    esi,0xfffffff8
c0001423:	89 f1                	mov    ecx,esi
c0001425:	89 ce                	mov    esi,ecx
c0001427:	29 cb                	sub    ebx,ecx
c0001429:	83 ce 01             	or     esi,0x1
c000142c:	40                   	inc    eax
c000142d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001430:	01 cf                	add    edi,ecx
c0001432:	eb c6                	jmp    c00013fa <iALLOc+0x159>
c0001434:	83 cb 01             	or     ebx,0x1
c0001437:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000143a:	eb 08                	jmp    c0001444 <iALLOc+0x1a3>
c000143c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001448:	83 c4 2c             	add    esp,0x2c
c000144b:	5b                   	pop    ebx
c000144c:	5e                   	pop    esi
c000144d:	5f                   	pop    edi
c000144e:	5d                   	pop    ebp
c000144f:	c3                   	ret    

c0001450 <dlrealloc>:
c0001450:	55                   	push   ebp
c0001451:	57                   	push   edi
c0001452:	56                   	push   esi
c0001453:	53                   	push   ebx
c0001454:	83 ec 1c             	sub    esp,0x1c
c0001457:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000145b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000145f:	85 db                	test   ebx,ebx
c0001461:	75 10                	jne    c0001473 <dlrealloc+0x23>
c0001463:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001467:	83 c4 1c             	add    esp,0x1c
c000146a:	5b                   	pop    ebx
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 a0 fa ff ff       	jmp    c0000f13 <dlmalloc>
c0001473:	83 f8 df             	cmp    eax,0xffffffdf
c0001476:	76 07                	jbe    c000147f <dlrealloc+0x2f>
c0001478:	31 db                	xor    ebx,ebx
c000147a:	e9 7c 01 00 00       	jmp    c00015fb <dlrealloc+0x1ab>
c000147f:	83 c0 0b             	add    eax,0xb
c0001482:	bf 10 00 00 00       	mov    edi,0x10
c0001487:	83 f8 0f             	cmp    eax,0xf
c000148a:	76 05                	jbe    c0001491 <dlrealloc+0x41>
c000148c:	83 e0 f8             	and    eax,0xfffffff8
c000148f:	89 c7                	mov    edi,eax
c0001491:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001494:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001497:	89 c6                	mov    esi,eax
c0001499:	83 e6 fc             	and    esi,0xfffffffc
c000149c:	a8 02                	test   al,0x2
c000149e:	75 d8                	jne    c0001478 <dlrealloc+0x28>
c00014a0:	39 f7                	cmp    edi,esi
c00014a2:	0f 86 15 01 00 00    	jbe    c00015bd <dlrealloc+0x16d>
c00014a8:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014ac:	39 15 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,edx
c00014b2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014b5:	75 33                	jne    c00014ea <dlrealloc+0x9a>
c00014b7:	83 e1 fc             	and    ecx,0xfffffffc
c00014ba:	01 f1                	add    ecx,esi
c00014bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014c0:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014c7:	77 49                	ja     c0001512 <dlrealloc+0xc2>
c00014c9:	83 e0 01             	and    eax,0x1
c00014cc:	01 fd                	add    ebp,edi
c00014ce:	09 f8                	or     eax,edi
c00014d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014d7:	29 f8                	sub    eax,edi
c00014d9:	89 2d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ebp
c00014df:	83 c8 01             	or     eax,0x1
c00014e2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014e5:	e9 11 01 00 00       	jmp    c00015fb <dlrealloc+0x1ab>
c00014ea:	89 c8                	mov    eax,ecx
c00014ec:	83 e0 fe             	and    eax,0xfffffffe
c00014ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014f4:	75 1c                	jne    c0001512 <dlrealloc+0xc2>
c00014f6:	83 e1 fc             	and    ecx,0xfffffffc
c00014f9:	01 f1                	add    ecx,esi
c00014fb:	39 cf                	cmp    edi,ecx
c00014fd:	77 13                	ja     c0001512 <dlrealloc+0xc2>
c00014ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001502:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001505:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001508:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000150b:	89 ce                	mov    esi,ecx
c000150d:	e9 ab 00 00 00       	jmp    c00015bd <dlrealloc+0x16d>
c0001512:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	8d 47 f9             	lea    eax,[edi-0x7]
c000151c:	50                   	push   eax
c000151d:	e8 f1 f9 ff ff       	call   c0000f13 <dlmalloc>
c0001522:	83 c4 10             	add    esp,0x10
c0001525:	89 c1                	mov    ecx,eax
c0001527:	85 c0                	test   eax,eax
c0001529:	0f 84 49 ff ff ff    	je     c0001478 <dlrealloc+0x28>
c000152f:	8d 40 f8             	lea    eax,[eax-0x8]
c0001532:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001536:	39 c2                	cmp    edx,eax
c0001538:	75 0a                	jne    c0001544 <dlrealloc+0xf4>
c000153a:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000153d:	83 e0 fc             	and    eax,0xfffffffc
c0001540:	01 c6                	add    esi,eax
c0001542:	eb 79                	jmp    c00015bd <dlrealloc+0x16d>
c0001544:	83 ee 04             	sub    esi,0x4
c0001547:	83 fe 27             	cmp    esi,0x27
c000154a:	76 16                	jbe    c0001562 <dlrealloc+0x112>
c000154c:	50                   	push   eax
c000154d:	56                   	push   esi
c000154e:	53                   	push   ebx
c000154f:	51                   	push   ecx
c0001550:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001554:	e8 43 f1 ff ff       	call   c000069c <memcpy>
c0001559:	83 c4 10             	add    esp,0x10
c000155c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001560:	eb 43                	jmp    c00015a5 <dlrealloc+0x155>
c0001562:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001564:	83 fe 13             	cmp    esi,0x13
c0001567:	89 01                	mov    DWORD PTR [ecx],eax
c0001569:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000156c:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000156f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001572:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001575:	76 2e                	jbe    c00015a5 <dlrealloc+0x155>
c0001577:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000157a:	83 fe 1b             	cmp    esi,0x1b
c000157d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001580:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001583:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001586:	76 1d                	jbe    c00015a5 <dlrealloc+0x155>
c0001588:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000158b:	83 fe 23             	cmp    esi,0x23
c000158e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001591:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001594:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001597:	76 0c                	jbe    c00015a5 <dlrealloc+0x155>
c0001599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000159c:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000159f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015a2:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a9:	83 ec 0c             	sub    esp,0xc
c00015ac:	53                   	push   ebx
c00015ad:	e8 03 f6 ff ff       	call   c0000bb5 <dlfree>
c00015b2:	83 c4 10             	add    esp,0x10
c00015b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015b9:	89 cb                	mov    ebx,ecx
c00015bb:	eb 3e                	jmp    c00015fb <dlrealloc+0x1ab>
c00015bd:	89 f2                	mov    edx,esi
c00015bf:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015c2:	29 fa                	sub    edx,edi
c00015c4:	83 e1 01             	and    ecx,0x1
c00015c7:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015cb:	83 fa 0f             	cmp    edx,0xf
c00015ce:	77 0b                	ja     c00015db <dlrealloc+0x18b>
c00015d0:	09 ce                	or     esi,ecx
c00015d2:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015d5:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d9:	eb 20                	jmp    c00015fb <dlrealloc+0x1ab>
c00015db:	01 fd                	add    ebp,edi
c00015dd:	83 ca 01             	or     edx,0x1
c00015e0:	09 cf                	or     edi,ecx
c00015e2:	83 ec 0c             	sub    esp,0xc
c00015e5:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015e8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015eb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ef:	83 c5 08             	add    ebp,0x8
c00015f2:	55                   	push   ebp
c00015f3:	e8 bd f5 ff ff       	call   c0000bb5 <dlfree>
c00015f8:	83 c4 10             	add    esp,0x10
c00015fb:	83 c4 1c             	add    esp,0x1c
c00015fe:	89 d8                	mov    eax,ebx
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	c3                   	ret    

c0001605 <dlmemalign>:
c0001605:	55                   	push   ebp
c0001606:	57                   	push   edi
c0001607:	56                   	push   esi
c0001608:	53                   	push   ebx
c0001609:	83 ec 0c             	sub    esp,0xc
c000160c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001610:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001614:	83 fa 08             	cmp    edx,0x8
c0001617:	77 10                	ja     c0001629 <dlmemalign+0x24>
c0001619:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000161d:	83 c4 0c             	add    esp,0xc
c0001620:	5b                   	pop    ebx
c0001621:	5e                   	pop    esi
c0001622:	5f                   	pop    edi
c0001623:	5d                   	pop    ebp
c0001624:	e9 ea f8 ff ff       	jmp    c0000f13 <dlmalloc>
c0001629:	bf 10 00 00 00       	mov    edi,0x10
c000162e:	83 fa 0f             	cmp    edx,0xf
c0001631:	76 13                	jbe    c0001646 <dlmemalign+0x41>
c0001633:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001636:	85 d1                	test   ecx,edx
c0001638:	75 04                	jne    c000163e <dlmemalign+0x39>
c000163a:	89 d7                	mov    edi,edx
c000163c:	eb 08                	jmp    c0001646 <dlmemalign+0x41>
c000163e:	39 d7                	cmp    edi,edx
c0001640:	73 04                	jae    c0001646 <dlmemalign+0x41>
c0001642:	01 ff                	add    edi,edi
c0001644:	eb f8                	jmp    c000163e <dlmemalign+0x39>
c0001646:	83 f8 df             	cmp    eax,0xffffffdf
c0001649:	76 07                	jbe    c0001652 <dlmemalign+0x4d>
c000164b:	31 c0                	xor    eax,eax
c000164d:	e9 ce 00 00 00       	jmp    c0001720 <dlmemalign+0x11b>
c0001652:	83 c0 0b             	add    eax,0xb
c0001655:	bd 10 00 00 00       	mov    ebp,0x10
c000165a:	83 f8 0f             	cmp    eax,0xf
c000165d:	76 05                	jbe    c0001664 <dlmemalign+0x5f>
c000165f:	83 e0 f8             	and    eax,0xfffffff8
c0001662:	89 c5                	mov    ebp,eax
c0001664:	83 ec 0c             	sub    esp,0xc
c0001667:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000166b:	50                   	push   eax
c000166c:	e8 a2 f8 ff ff       	call   c0000f13 <dlmalloc>
c0001671:	83 c4 10             	add    esp,0x10
c0001674:	89 c1                	mov    ecx,eax
c0001676:	85 c0                	test   eax,eax
c0001678:	74 d1                	je     c000164b <dlmemalign+0x46>
c000167a:	31 d2                	xor    edx,edx
c000167c:	8d 70 f8             	lea    esi,[eax-0x8]
c000167f:	f7 f7                	div    edi
c0001681:	85 d2                	test   edx,edx
c0001683:	74 62                	je     c00016e7 <dlmemalign+0xe2>
c0001685:	89 f8                	mov    eax,edi
c0001687:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000168b:	f7 d8                	neg    eax
c000168d:	21 c3                	and    ebx,eax
c000168f:	83 eb 08             	sub    ebx,0x8
c0001692:	89 d8                	mov    eax,ebx
c0001694:	29 f0                	sub    eax,esi
c0001696:	83 f8 0f             	cmp    eax,0xf
c0001699:	77 02                	ja     c000169d <dlmemalign+0x98>
c000169b:	01 fb                	add    ebx,edi
c000169d:	89 d8                	mov    eax,ebx
c000169f:	29 f0                	sub    eax,esi
c00016a1:	89 c6                	mov    esi,eax
c00016a3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016a6:	89 c2                	mov    edx,eax
c00016a8:	83 e2 fc             	and    edx,0xfffffffc
c00016ab:	29 f2                	sub    edx,esi
c00016ad:	a8 02                	test   al,0x2
c00016af:	74 10                	je     c00016c1 <dlmemalign+0xbc>
c00016b1:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016b4:	83 ca 02             	or     edx,0x2
c00016b7:	8d 43 08             	lea    eax,[ebx+0x8]
c00016ba:	89 33                	mov    DWORD PTR [ebx],esi
c00016bc:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016bf:	eb 5f                	jmp    c0001720 <dlmemalign+0x11b>
c00016c1:	89 d0                	mov    eax,edx
c00016c3:	83 ec 0c             	sub    esp,0xc
c00016c6:	83 c8 01             	or     eax,0x1
c00016c9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016cc:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016d1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016d4:	83 e0 01             	and    eax,0x1
c00016d7:	09 f0                	or     eax,esi
c00016d9:	89 de                	mov    esi,ebx
c00016db:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016de:	51                   	push   ecx
c00016df:	e8 d1 f4 ff ff       	call   c0000bb5 <dlfree>
c00016e4:	83 c4 10             	add    esp,0x10
c00016e7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016ea:	a8 02                	test   al,0x2
c00016ec:	75 2f                	jne    c000171d <dlmemalign+0x118>
c00016ee:	83 e0 fc             	and    eax,0xfffffffc
c00016f1:	8d 55 10             	lea    edx,[ebp+0x10]
c00016f4:	39 c2                	cmp    edx,eax
c00016f6:	73 25                	jae    c000171d <dlmemalign+0x118>
c00016f8:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016fb:	29 e8                	sub    eax,ebp
c00016fd:	83 c8 01             	or     eax,0x1
c0001700:	83 ec 0c             	sub    esp,0xc
c0001703:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001706:	83 c2 08             	add    edx,0x8
c0001709:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000170c:	83 e0 01             	and    eax,0x1
c000170f:	09 c5                	or     ebp,eax
c0001711:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001714:	52                   	push   edx
c0001715:	e8 9b f4 ff ff       	call   c0000bb5 <dlfree>
c000171a:	83 c4 10             	add    esp,0x10
c000171d:	8d 46 08             	lea    eax,[esi+0x8]
c0001720:	83 c4 0c             	add    esp,0xc
c0001723:	5b                   	pop    ebx
c0001724:	5e                   	pop    esi
c0001725:	5f                   	pop    edi
c0001726:	5d                   	pop    ebp
c0001727:	c3                   	ret    

c0001728 <dlcalloc>:
c0001728:	53                   	push   ebx
c0001729:	83 ec 14             	sub    esp,0x14
c000172c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001730:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001735:	50                   	push   eax
c0001736:	e8 d8 f7 ff ff       	call   c0000f13 <dlmalloc>
c000173b:	83 c4 10             	add    esp,0x10
c000173e:	89 c3                	mov    ebx,eax
c0001740:	85 c0                	test   eax,eax
c0001742:	74 77                	je     c00017bb <dlcalloc+0x93>
c0001744:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001747:	89 d0                	mov    eax,edx
c0001749:	83 e0 fc             	and    eax,0xfffffffc
c000174c:	80 e2 02             	and    dl,0x2
c000174f:	75 5a                	jne    c00017ab <dlcalloc+0x83>
c0001751:	83 e8 04             	sub    eax,0x4
c0001754:	83 f8 27             	cmp    eax,0x27
c0001757:	76 03                	jbe    c000175c <dlcalloc+0x34>
c0001759:	51                   	push   ecx
c000175a:	eb 53                	jmp    c00017af <dlcalloc+0x87>
c000175c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001762:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001769:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001770:	83 f8 13             	cmp    eax,0x13
c0001773:	76 46                	jbe    c00017bb <dlcalloc+0x93>
c0001775:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000177c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001783:	83 f8 1b             	cmp    eax,0x1b
c0001786:	76 33                	jbe    c00017bb <dlcalloc+0x93>
c0001788:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000178f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001796:	83 f8 23             	cmp    eax,0x23
c0001799:	76 20                	jbe    c00017bb <dlcalloc+0x93>
c000179b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017a2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017a9:	eb 10                	jmp    c00017bb <dlcalloc+0x93>
c00017ab:	83 e8 08             	sub    eax,0x8
c00017ae:	52                   	push   edx
c00017af:	50                   	push   eax
c00017b0:	6a 00                	push   0x0
c00017b2:	53                   	push   ebx
c00017b3:	e8 1a ef ff ff       	call   c00006d2 <memset>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 08             	add    esp,0x8
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	c3                   	ret    

c00017c2 <dlcfree>:
c00017c2:	e9 ee f3 ff ff       	jmp    c0000bb5 <dlfree>

c00017c7 <dlindependent_calloc>:
c00017c7:	83 ec 28             	sub    esp,0x28
c00017ca:	b9 03 00 00 00       	mov    ecx,0x3
c00017cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017e3:	e8 b9 fa ff ff       	call   c00012a1 <iALLOc>
c00017e8:	83 c4 2c             	add    esp,0x2c
c00017eb:	c3                   	ret    

c00017ec <dlindependent_comalloc>:
c00017ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017f4:	31 c9                	xor    ecx,ecx
c00017f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017fe:	e9 9e fa ff ff       	jmp    c00012a1 <iALLOc>

c0001803 <dlvalloc>:
c0001803:	83 ec 0c             	sub    esp,0xc
c0001806:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c000180d:	75 0a                	jne    c0001819 <dlvalloc+0x16>
c000180f:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001814:	e8 b5 f2 ff ff       	call   c0000ace <malloc_consolidate>
c0001819:	50                   	push   eax
c000181a:	50                   	push   eax
c000181b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000181f:	ff 35 fc 46 02 c0    	push   DWORD PTR ds:0xc00246fc
c0001825:	e8 db fd ff ff       	call   c0001605 <dlmemalign>
c000182a:	83 c4 1c             	add    esp,0x1c
c000182d:	c3                   	ret    

c000182e <dlpvalloc>:
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c0001838:	75 0a                	jne    c0001844 <dlpvalloc+0x16>
c000183a:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000183f:	e8 8a f2 ff ff       	call   c0000ace <malloc_consolidate>
c0001844:	52                   	push   edx
c0001845:	a1 fc 46 02 c0       	mov    eax,ds:0xc00246fc
c000184a:	52                   	push   edx
c000184b:	89 c1                	mov    ecx,eax
c000184d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001851:	f7 d9                	neg    ecx
c0001853:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001857:	21 ca                	and    edx,ecx
c0001859:	52                   	push   edx
c000185a:	50                   	push   eax
c000185b:	e8 a5 fd ff ff       	call   c0001605 <dlmemalign>
c0001860:	83 c4 1c             	add    esp,0x1c
c0001863:	c3                   	ret    

c0001864 <dlmalloc_trim>:
c0001864:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001869:	e8 60 f2 ff ff       	call   c0000ace <malloc_consolidate>
c000186e:	31 c0                	xor    eax,eax
c0001870:	c3                   	ret    

c0001871 <dlmalloc_usable_size>:
c0001871:	53                   	push   ebx
c0001872:	31 c0                	xor    eax,eax
c0001874:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001878:	85 c9                	test   ecx,ecx
c000187a:	74 24                	je     c00018a0 <dlmalloc_usable_size+0x2f>
c000187c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000187f:	f6 c2 02             	test   dl,0x2
c0001882:	74 08                	je     c000188c <dlmalloc_usable_size+0x1b>
c0001884:	83 e2 fc             	and    edx,0xfffffffc
c0001887:	8d 42 f8             	lea    eax,[edx-0x8]
c000188a:	eb 14                	jmp    c00018a0 <dlmalloc_usable_size+0x2f>
c000188c:	89 d3                	mov    ebx,edx
c000188e:	31 c0                	xor    eax,eax
c0001890:	83 e3 fe             	and    ebx,0xfffffffe
c0001893:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001898:	74 06                	je     c00018a0 <dlmalloc_usable_size+0x2f>
c000189a:	83 e2 fc             	and    edx,0xfffffffc
c000189d:	8d 42 fc             	lea    eax,[edx-0x4]
c00018a0:	5b                   	pop    ebx
c00018a1:	c3                   	ret    

c00018a2 <dlmallinfo>:
c00018a2:	55                   	push   ebp
c00018a3:	57                   	push   edi
c00018a4:	56                   	push   esi
c00018a5:	53                   	push   ebx
c00018a6:	83 ec 08             	sub    esp,0x8
c00018a9:	83 3d cc 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243cc,0x0
c00018b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018b4:	75 0a                	jne    c00018c0 <dlmallinfo+0x1e>
c00018b6:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00018bb:	e8 0e f2 ff ff       	call   c0000ace <malloc_consolidate>
c00018c0:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c00018c5:	31 ed                	xor    ebp,ebp
c00018c7:	31 c9                	xor    ecx,ecx
c00018c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018cc:	83 e0 fc             	and    eax,0xfffffffc
c00018cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018d3:	31 c0                	xor    eax,eax
c00018d5:	8b 14 85 a4 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc5c]
c00018dc:	85 d2                	test   edx,edx
c00018de:	74 0e                	je     c00018ee <dlmallinfo+0x4c>
c00018e0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018e3:	45                   	inc    ebp
c00018e4:	83 e6 fc             	and    esi,0xfffffffc
c00018e7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018ea:	01 f1                	add    ecx,esi
c00018ec:	eb ee                	jmp    c00018dc <dlmallinfo+0x3a>
c00018ee:	40                   	inc    eax
c00018ef:	83 f8 0a             	cmp    eax,0xa
c00018f2:	75 e1                	jne    c00018d5 <dlmallinfo+0x33>
c00018f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ff:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001902:	b8 d4 43 02 c0       	mov    eax,0xc00243d4
c0001907:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000190a:	39 f0                	cmp    eax,esi
c000190c:	74 10                	je     c000191e <dlmallinfo+0x7c>
c000190e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001911:	ff 04 24             	inc    DWORD PTR [esp]
c0001914:	83 e7 fc             	and    edi,0xfffffffc
c0001917:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000191a:	01 fa                	add    edx,edi
c000191c:	eb ec                	jmp    c000190a <dlmallinfo+0x68>
c000191e:	83 c0 08             	add    eax,0x8
c0001921:	3d cc 46 02 c0       	cmp    eax,0xc00246cc
c0001926:	75 df                	jne    c0001907 <dlmallinfo+0x65>
c0001928:	a1 08 47 02 c0       	mov    eax,ds:0xc0024708
c000192d:	8b 35 f0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f0
c0001933:	89 03                	mov    DWORD PTR [ebx],eax
c0001935:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001938:	29 d0                	sub    eax,edx
c000193a:	8b 35 04 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024704
c0001940:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001943:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001946:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001949:	8b 35 14 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024714
c000194f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001953:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001956:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001959:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000195c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000195f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001962:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001965:	83 c4 08             	add    esp,0x8
c0001968:	89 d8                	mov    eax,ebx
c000196a:	5b                   	pop    ebx
c000196b:	5e                   	pop    esi
c000196c:	5f                   	pop    edi
c000196d:	5d                   	pop    ebp
c000196e:	c2 04 00             	ret    0x4

c0001971 <dlmalloc_stats>:
c0001971:	83 ec 30             	sub    esp,0x30
c0001974:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001978:	50                   	push   eax
c0001979:	e8 24 ff ff ff       	call   c00018a2 <dlmallinfo>
c000197e:	83 c4 30             	add    esp,0x30
c0001981:	c3                   	ret    

c0001982 <dlmallopt>:
c0001982:	56                   	push   esi
c0001983:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001988:	53                   	push   ebx
c0001989:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000198d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001991:	e8 38 f1 ff ff       	call   c0000ace <malloc_consolidate>
c0001996:	8d 46 04             	lea    eax,[esi+0x4]
c0001999:	83 f8 05             	cmp    eax,0x5
c000199c:	77 67                	ja     c0001a05 <dlmallopt+0x83>
c000199e:	ff 24 85 24 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbdc]
c00019a5:	83 fb 50             	cmp    ebx,0x50
c00019a8:	77 5b                	ja     c0001a05 <dlmallopt+0x83>
c00019aa:	ba 08 00 00 00       	mov    edx,0x8
c00019af:	85 db                	test   ebx,ebx
c00019b1:	74 12                	je     c00019c5 <dlmallopt+0x43>
c00019b3:	83 c3 0b             	add    ebx,0xb
c00019b6:	ba 10 00 00 00       	mov    edx,0x10
c00019bb:	83 fb 0f             	cmp    ebx,0xf
c00019be:	76 05                	jbe    c00019c5 <dlmallopt+0x43>
c00019c0:	89 da                	mov    edx,ebx
c00019c2:	83 e2 f8             	and    edx,0xfffffff8
c00019c5:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c00019ca:	83 e0 03             	and    eax,0x3
c00019cd:	09 d0                	or     eax,edx
c00019cf:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c00019d4:	eb 31                	jmp    c0001a07 <dlmallopt+0x85>
c00019d6:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c00019dc:	eb 06                	jmp    c00019e4 <dlmallopt+0x62>
c00019de:	89 1d e8 46 02 c0    	mov    DWORD PTR ds:0xc00246e8,ebx
c00019e4:	be 01 00 00 00       	mov    esi,0x1
c00019e9:	eb 1c                	jmp    c0001a07 <dlmallopt+0x85>
c00019eb:	89 1d ec 46 02 c0    	mov    DWORD PTR ds:0xc00246ec,ebx
c00019f1:	eb f1                	jmp    c00019e4 <dlmallopt+0x62>
c00019f3:	31 f6                	xor    esi,esi
c00019f5:	85 db                	test   ebx,ebx
c00019f7:	75 0e                	jne    c0001a07 <dlmallopt+0x85>
c00019f9:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c0001a03:	eb df                	jmp    c00019e4 <dlmallopt+0x62>
c0001a05:	31 f6                	xor    esi,esi
c0001a07:	5b                   	pop    ebx
c0001a08:	89 f0                	mov    eax,esi
c0001a0a:	5e                   	pop    esi
c0001a0b:	c3                   	ret    

c0001a0c <disk_status>:
c0001a0c:	31 c0                	xor    eax,eax
c0001a0e:	c3                   	ret    

c0001a0f <disk_initialize>:
c0001a0f:	31 c0                	xor    eax,eax
c0001a11:	c3                   	ret    

c0001a12 <disk_read>:
c0001a12:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a17:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a23:	e9 a4 8d 01 00       	jmp    c001a7cc <fatWrapperReadDisk>

c0001a28 <disk_write>:
c0001a28:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2d:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a39:	e9 d9 8d 01 00       	jmp    c001a817 <fatWrapperWriteDisk>

c0001a3e <disk_ioctl>:
c0001a3e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a47:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a4c:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a58:	e9 05 8e 01 00       	jmp    c001a862 <fatWrapperIoctl>

c0001a5d <ld_word>:
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a64:	c1 e2 08             	shl    edx,0x8
c0001a67:	09 d0                	or     eax,edx
c0001a69:	c3                   	ret    

c0001a6a <ld_dword>:
c0001a6a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a6e:	89 d1                	mov    ecx,edx
c0001a70:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a74:	c1 e1 08             	shl    ecx,0x8
c0001a77:	09 ca                	or     edx,ecx
c0001a79:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a7c:	c1 e2 08             	shl    edx,0x8
c0001a7f:	09 d0                	or     eax,edx
c0001a81:	c3                   	ret    

c0001a82 <ld_qword>:
c0001a82:	57                   	push   edi
c0001a83:	56                   	push   esi
c0001a84:	53                   	push   ebx
c0001a85:	31 db                	xor    ebx,ebx
c0001a87:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a8a:	89 df                	mov    edi,ebx
c0001a8c:	89 ce                	mov    esi,ecx
c0001a8e:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a92:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a96:	c1 e6 08             	shl    esi,0x8
c0001a99:	09 f2                	or     edx,esi
c0001a9b:	89 d6                	mov    esi,edx
c0001a9d:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001aa1:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	09 f2                	or     edx,esi
c0001aaa:	89 d6                	mov    esi,edx
c0001aac:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ab0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ab4:	c1 e6 08             	shl    esi,0x8
c0001ab7:	89 fb                	mov    ebx,edi
c0001ab9:	09 f2                	or     edx,esi
c0001abb:	89 d1                	mov    ecx,edx
c0001abd:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ac1:	89 da                	mov    edx,ebx
c0001ac3:	5b                   	pop    ebx
c0001ac4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ac7:	c1 e1 08             	shl    ecx,0x8
c0001aca:	5e                   	pop    esi
c0001acb:	09 c8                	or     eax,ecx
c0001acd:	5f                   	pop    edi
c0001ace:	c3                   	ret    

c0001acf <st_word>:
c0001acf:	66 89 10             	mov    WORD PTR [eax],dx
c0001ad2:	c3                   	ret    

c0001ad3 <st_dword>:
c0001ad3:	89 10                	mov    DWORD PTR [eax],edx
c0001ad5:	c3                   	ret    

c0001ad6 <st_qword>:
c0001ad6:	89 10                	mov    DWORD PTR [eax],edx
c0001ad8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001adb:	c3                   	ret    

c0001adc <mem_cpy>:
c0001adc:	85 c9                	test   ecx,ecx
c0001ade:	74 10                	je     c0001af0 <mem_cpy+0x14>
c0001ae0:	57                   	push   edi
c0001ae1:	01 c1                	add    ecx,eax
c0001ae3:	56                   	push   esi
c0001ae4:	89 c7                	mov    edi,eax
c0001ae6:	89 d6                	mov    esi,edx
c0001ae8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ae9:	39 f9                	cmp    ecx,edi
c0001aeb:	75 fb                	jne    c0001ae8 <mem_cpy+0xc>
c0001aed:	5e                   	pop    esi
c0001aee:	5f                   	pop    edi
c0001aef:	c3                   	ret    
c0001af0:	c3                   	ret    

c0001af1 <mem_set>:
c0001af1:	01 c1                	add    ecx,eax
c0001af3:	40                   	inc    eax
c0001af4:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001af7:	39 c8                	cmp    eax,ecx
c0001af9:	75 f8                	jne    c0001af3 <mem_set+0x2>
c0001afb:	c3                   	ret    

c0001afc <mem_cmp>:
c0001afc:	57                   	push   edi
c0001afd:	56                   	push   esi
c0001afe:	89 c6                	mov    esi,eax
c0001b00:	53                   	push   ebx
c0001b01:	46                   	inc    esi
c0001b02:	42                   	inc    edx
c0001b03:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b07:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b0b:	29 fb                	sub    ebx,edi
c0001b0d:	89 cf                	mov    edi,ecx
c0001b0f:	29 f7                	sub    edi,esi
c0001b11:	01 c7                	add    edi,eax
c0001b13:	74 04                	je     c0001b19 <mem_cmp+0x1d>
c0001b15:	85 db                	test   ebx,ebx
c0001b17:	74 e8                	je     c0001b01 <mem_cmp+0x5>
c0001b19:	89 d8                	mov    eax,ebx
c0001b1b:	5b                   	pop    ebx
c0001b1c:	5e                   	pop    esi
c0001b1d:	5f                   	pop    edi
c0001b1e:	c3                   	ret    

c0001b1f <chk_chr>:
c0001b1f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b22:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b25:	74 07                	je     c0001b2e <chk_chr+0xf>
c0001b27:	39 d1                	cmp    ecx,edx
c0001b29:	74 03                	je     c0001b2e <chk_chr+0xf>
c0001b2b:	40                   	inc    eax
c0001b2c:	eb f1                	jmp    c0001b1f <chk_chr>
c0001b2e:	89 c8                	mov    eax,ecx
c0001b30:	c3                   	ret    

c0001b31 <dbc_1st>:
c0001b31:	31 c0                	xor    eax,eax
c0001b33:	c3                   	ret    

c0001b34 <dbc_2nd>:
c0001b34:	31 c0                	xor    eax,eax
c0001b36:	c3                   	ret    

c0001b37 <tchar2uni>:
c0001b37:	57                   	push   edi
c0001b38:	89 c7                	mov    edi,eax
c0001b3a:	56                   	push   esi
c0001b3b:	53                   	push   ebx
c0001b3c:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b3e:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b40:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b43:	84 c9                	test   cl,cl
c0001b45:	78 0a                	js     c0001b51 <tchar2uni+0x1a>
c0001b47:	0f b6 d1             	movzx  edx,cl
c0001b4a:	89 f3                	mov    ebx,esi
c0001b4c:	e9 9f 00 00 00       	jmp    c0001bf0 <tchar2uni+0xb9>
c0001b51:	88 ca                	mov    dl,cl
c0001b53:	83 e2 e0             	and    edx,0xffffffe0
c0001b56:	80 fa c0             	cmp    dl,0xc0
c0001b59:	75 0c                	jne    c0001b67 <tchar2uni+0x30>
c0001b5b:	89 ca                	mov    edx,ecx
c0001b5d:	b9 01 00 00 00       	mov    ecx,0x1
c0001b62:	83 e2 1f             	and    edx,0x1f
c0001b65:	eb 2e                	jmp    c0001b95 <tchar2uni+0x5e>
c0001b67:	88 ca                	mov    dl,cl
c0001b69:	83 e2 f0             	and    edx,0xfffffff0
c0001b6c:	80 fa e0             	cmp    dl,0xe0
c0001b6f:	75 0c                	jne    c0001b7d <tchar2uni+0x46>
c0001b71:	89 ca                	mov    edx,ecx
c0001b73:	b9 02 00 00 00       	mov    ecx,0x2
c0001b78:	83 e2 0f             	and    edx,0xf
c0001b7b:	eb 18                	jmp    c0001b95 <tchar2uni+0x5e>
c0001b7d:	88 ca                	mov    dl,cl
c0001b7f:	83 e2 f8             	and    edx,0xfffffff8
c0001b82:	88 d0                	mov    al,dl
c0001b84:	83 ca ff             	or     edx,0xffffffff
c0001b87:	3c f0                	cmp    al,0xf0
c0001b89:	75 6c                	jne    c0001bf7 <tchar2uni+0xc0>
c0001b8b:	89 ca                	mov    edx,ecx
c0001b8d:	b9 03 00 00 00       	mov    ecx,0x3
c0001b92:	83 e2 07             	and    edx,0x7
c0001b95:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b99:	46                   	inc    esi
c0001b9a:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b9d:	88 c8                	mov    al,cl
c0001b9f:	83 e0 c0             	and    eax,0xffffffc0
c0001ba2:	3c 80                	cmp    al,0x80
c0001ba4:	75 4e                	jne    c0001bf4 <tchar2uni+0xbd>
c0001ba6:	c1 e2 06             	shl    edx,0x6
c0001ba9:	83 e1 3f             	and    ecx,0x3f
c0001bac:	09 ca                	or     edx,ecx
c0001bae:	39 de                	cmp    esi,ebx
c0001bb0:	75 e7                	jne    c0001b99 <tchar2uni+0x62>
c0001bb2:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bbe:	76 34                	jbe    c0001bf4 <tchar2uni+0xbd>
c0001bc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bc9:	77 29                	ja     c0001bf4 <tchar2uni+0xbd>
c0001bcb:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bd1:	76 1d                	jbe    c0001bf0 <tchar2uni+0xb9>
c0001bd3:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bd9:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bdf:	c1 e1 06             	shl    ecx,0x6
c0001be2:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001be8:	09 ca                	or     edx,ecx
c0001bea:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bf0:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bf2:	eb 03                	jmp    c0001bf7 <tchar2uni+0xc0>
c0001bf4:	83 ca ff             	or     edx,0xffffffff
c0001bf7:	5b                   	pop    ebx
c0001bf8:	89 d0                	mov    eax,edx
c0001bfa:	5e                   	pop    esi
c0001bfb:	5f                   	pop    edi
c0001bfc:	c3                   	ret    

c0001bfd <put_utf>:
c0001bfd:	53                   	push   ebx
c0001bfe:	83 f8 7f             	cmp    eax,0x7f
c0001c01:	89 c3                	mov    ebx,eax
c0001c03:	b0 00                	mov    al,0x0
c0001c05:	77 11                	ja     c0001c18 <put_utf+0x1b>
c0001c07:	85 c9                	test   ecx,ecx
c0001c09:	0f 84 e5 00 00 00    	je     c0001cf4 <put_utf+0xf7>
c0001c0f:	88 1a                	mov    BYTE PTR [edx],bl
c0001c11:	b0 01                	mov    al,0x1
c0001c13:	e9 dc 00 00 00       	jmp    c0001cf4 <put_utf+0xf7>
c0001c18:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c1e:	77 23                	ja     c0001c43 <put_utf+0x46>
c0001c20:	83 f9 01             	cmp    ecx,0x1
c0001c23:	0f 86 cb 00 00 00    	jbe    c0001cf4 <put_utf+0xf7>
c0001c29:	89 d8                	mov    eax,ebx
c0001c2b:	83 e3 3f             	and    ebx,0x3f
c0001c2e:	c1 e8 06             	shr    eax,0x6
c0001c31:	83 cb 80             	or     ebx,0xffffff80
c0001c34:	83 c8 c0             	or     eax,0xffffffc0
c0001c37:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c3a:	88 02                	mov    BYTE PTR [edx],al
c0001c3c:	b0 02                	mov    al,0x2
c0001c3e:	e9 b1 00 00 00       	jmp    c0001cf4 <put_utf+0xf7>
c0001c43:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c49:	77 40                	ja     c0001c8b <put_utf+0x8e>
c0001c4b:	83 f9 02             	cmp    ecx,0x2
c0001c4e:	0f 86 a0 00 00 00    	jbe    c0001cf4 <put_utf+0xf7>
c0001c54:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c5a:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c60:	0f 86 8e 00 00 00    	jbe    c0001cf4 <put_utf+0xf7>
c0001c66:	89 d8                	mov    eax,ebx
c0001c68:	c1 e8 0c             	shr    eax,0xc
c0001c6b:	83 c8 e0             	or     eax,0xffffffe0
c0001c6e:	88 02                	mov    BYTE PTR [edx],al
c0001c70:	89 d8                	mov    eax,ebx
c0001c72:	c1 e8 06             	shr    eax,0x6
c0001c75:	83 e3 3f             	and    ebx,0x3f
c0001c78:	83 e0 3f             	and    eax,0x3f
c0001c7b:	83 cb 80             	or     ebx,0xffffff80
c0001c7e:	83 c8 80             	or     eax,0xffffff80
c0001c81:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c84:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c87:	b0 03                	mov    al,0x3
c0001c89:	eb 69                	jmp    c0001cf4 <put_utf+0xf7>
c0001c8b:	83 f9 03             	cmp    ecx,0x3
c0001c8e:	76 64                	jbe    c0001cf4 <put_utf+0xf7>
c0001c90:	89 d9                	mov    ecx,ebx
c0001c92:	66 31 c9             	xor    cx,cx
c0001c95:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c9b:	0f b7 c3             	movzx  eax,bx
c0001c9e:	c1 e9 06             	shr    ecx,0x6
c0001ca1:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ca7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cad:	77 43                	ja     c0001cf2 <put_utf+0xf5>
c0001caf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cb5:	77 3b                	ja     c0001cf2 <put_utf+0xf5>
c0001cb7:	09 cb                	or     ebx,ecx
c0001cb9:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cbf:	89 d8                	mov    eax,ebx
c0001cc1:	c1 e8 12             	shr    eax,0x12
c0001cc4:	83 c8 f0             	or     eax,0xfffffff0
c0001cc7:	88 02                	mov    BYTE PTR [edx],al
c0001cc9:	89 d8                	mov    eax,ebx
c0001ccb:	c1 e8 0c             	shr    eax,0xc
c0001cce:	83 e0 3f             	and    eax,0x3f
c0001cd1:	83 c8 80             	or     eax,0xffffff80
c0001cd4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cd7:	89 d8                	mov    eax,ebx
c0001cd9:	c1 e8 06             	shr    eax,0x6
c0001cdc:	83 e3 3f             	and    ebx,0x3f
c0001cdf:	83 e0 3f             	and    eax,0x3f
c0001ce2:	83 cb 80             	or     ebx,0xffffff80
c0001ce5:	83 c8 80             	or     eax,0xffffff80
c0001ce8:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ceb:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cee:	b0 04                	mov    al,0x4
c0001cf0:	eb 02                	jmp    c0001cf4 <put_utf+0xf7>
c0001cf2:	31 c0                	xor    eax,eax
c0001cf4:	5b                   	pop    ebx
c0001cf5:	c3                   	ret    

c0001cf6 <clst2sect>:
c0001cf6:	89 c1                	mov    ecx,eax
c0001cf8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cfb:	83 ea 02             	sub    edx,0x2
c0001cfe:	83 e8 02             	sub    eax,0x2
c0001d01:	39 d0                	cmp    eax,edx
c0001d03:	76 0d                	jbe    c0001d12 <clst2sect+0x1c>
c0001d05:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d09:	f7 e2                	mul    edx
c0001d0b:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d0e:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d11:	c3                   	ret    
c0001d12:	31 c0                	xor    eax,eax
c0001d14:	31 d2                	xor    edx,edx
c0001d16:	c3                   	ret    

c0001d17 <clmt_clust>:
c0001d17:	57                   	push   edi
c0001d18:	89 cf                	mov    edi,ecx
c0001d1a:	56                   	push   esi
c0001d1b:	89 d6                	mov    esi,edx
c0001d1d:	53                   	push   ebx
c0001d1e:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d23:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d27:	c1 ef 09             	shr    edi,0x9
c0001d2a:	89 f2                	mov    edx,esi
c0001d2c:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d2f:	89 f9                	mov    ecx,edi
c0001d31:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d35:	31 ff                	xor    edi,edi
c0001d37:	57                   	push   edi
c0001d38:	56                   	push   esi
c0001d39:	51                   	push   ecx
c0001d3a:	52                   	push   edx
c0001d3b:	e8 dc d7 01 00       	call   c001f51c <__udivdi3>
c0001d40:	83 c4 10             	add    esp,0x10
c0001d43:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d45:	85 d2                	test   edx,edx
c0001d47:	74 10                	je     c0001d59 <clmt_clust+0x42>
c0001d49:	39 d0                	cmp    eax,edx
c0001d4b:	72 07                	jb     c0001d54 <clmt_clust+0x3d>
c0001d4d:	29 d0                	sub    eax,edx
c0001d4f:	83 c3 08             	add    ebx,0x8
c0001d52:	eb ef                	jmp    c0001d43 <clmt_clust+0x2c>
c0001d54:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d57:	89 c2                	mov    edx,eax
c0001d59:	5b                   	pop    ebx
c0001d5a:	89 d0                	mov    eax,edx
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    

c0001d5f <pick_lfn>:
c0001d5f:	55                   	push   ebp
c0001d60:	57                   	push   edi
c0001d61:	56                   	push   esi
c0001d62:	89 d6                	mov    esi,edx
c0001d64:	53                   	push   ebx
c0001d65:	89 c3                	mov    ebx,eax
c0001d67:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d6a:	e8 ee fc ff ff       	call   c0001a5d <ld_word>
c0001d6f:	66 85 c0             	test   ax,ax
c0001d72:	74 04                	je     c0001d78 <pick_lfn+0x19>
c0001d74:	31 c0                	xor    eax,eax
c0001d76:	eb 5c                	jmp    c0001dd4 <pick_lfn+0x75>
c0001d78:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d7b:	83 e1 bf             	and    ecx,0xffffffbf
c0001d7e:	bd 01 00 00 00       	mov    ebp,0x1
c0001d83:	49                   	dec    ecx
c0001d84:	31 ff                	xor    edi,edi
c0001d86:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d89:	0f b6 87 40 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfac0]
c0001d90:	01 f0                	add    eax,esi
c0001d92:	e8 c6 fc ff ff       	call   c0001a5d <ld_word>
c0001d97:	66 85 ed             	test   bp,bp
c0001d9a:	74 11                	je     c0001dad <pick_lfn+0x4e>
c0001d9c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001da2:	77 d0                	ja     c0001d74 <pick_lfn+0x15>
c0001da4:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001da8:	89 c5                	mov    ebp,eax
c0001daa:	41                   	inc    ecx
c0001dab:	eb 04                	jmp    c0001db1 <pick_lfn+0x52>
c0001dad:	66 40                	inc    ax
c0001daf:	75 c3                	jne    c0001d74 <pick_lfn+0x15>
c0001db1:	47                   	inc    edi
c0001db2:	83 ff 0d             	cmp    edi,0xd
c0001db5:	75 d2                	jne    c0001d89 <pick_lfn+0x2a>
c0001db7:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dba:	74 13                	je     c0001dcf <pick_lfn+0x70>
c0001dbc:	66 85 ed             	test   bp,bp
c0001dbf:	74 0e                	je     c0001dcf <pick_lfn+0x70>
c0001dc1:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dc7:	77 ab                	ja     c0001d74 <pick_lfn+0x15>
c0001dc9:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dcf:	b8 01 00 00 00       	mov    eax,0x1
c0001dd4:	5b                   	pop    ebx
c0001dd5:	5e                   	pop    esi
c0001dd6:	5f                   	pop    edi
c0001dd7:	5d                   	pop    ebp
c0001dd8:	c3                   	ret    

c0001dd9 <put_lfn>:
c0001dd9:	55                   	push   ebp
c0001dda:	31 ed                	xor    ebp,ebp
c0001ddc:	57                   	push   edi
c0001ddd:	89 d7                	mov    edi,edx
c0001ddf:	56                   	push   esi
c0001de0:	31 f6                	xor    esi,esi
c0001de2:	53                   	push   ebx
c0001de3:	83 ec 08             	sub    esp,0x8
c0001de6:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ded:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001df0:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001df6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001df9:	31 d2                	xor    edx,edx
c0001dfb:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dff:	e8 cb fc ff ff       	call   c0001acf <st_word>
c0001e04:	0f b6 d9             	movzx  ebx,cl
c0001e07:	4b                   	dec    ebx
c0001e08:	6b db 0d             	imul   ebx,ebx,0xd
c0001e0b:	66 83 fe ff          	cmp    si,0xffff
c0001e0f:	74 08                	je     c0001e19 <put_lfn+0x40>
c0001e11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e14:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e18:	43                   	inc    ebx
c0001e19:	0f b6 85 40 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfac0]
c0001e20:	0f b7 d6             	movzx  edx,si
c0001e23:	01 f8                	add    eax,edi
c0001e25:	e8 a5 fc ff ff       	call   c0001acf <st_word>
c0001e2a:	66 85 f6             	test   si,si
c0001e2d:	75 03                	jne    c0001e32 <put_lfn+0x59>
c0001e2f:	83 ce ff             	or     esi,0xffffffff
c0001e32:	45                   	inc    ebp
c0001e33:	83 fd 0d             	cmp    ebp,0xd
c0001e36:	75 d3                	jne    c0001e0b <put_lfn+0x32>
c0001e38:	66 46                	inc    si
c0001e3a:	74 0a                	je     c0001e46 <put_lfn+0x6d>
c0001e3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e3f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e44:	75 09                	jne    c0001e4f <put_lfn+0x76>
c0001e46:	88 c8                	mov    al,cl
c0001e48:	83 c8 40             	or     eax,0x40
c0001e4b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e4f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e53:	88 07                	mov    BYTE PTR [edi],al
c0001e55:	83 c4 08             	add    esp,0x8
c0001e58:	5b                   	pop    ebx
c0001e59:	5e                   	pop    esi
c0001e5a:	5f                   	pop    edi
c0001e5b:	5d                   	pop    ebp
c0001e5c:	c3                   	ret    

c0001e5d <gen_numname>:
c0001e5d:	57                   	push   edi
c0001e5e:	89 cf                	mov    edi,ecx
c0001e60:	56                   	push   esi
c0001e61:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e66:	53                   	push   ebx
c0001e67:	89 c6                	mov    esi,eax
c0001e69:	83 ec 10             	sub    esp,0x10
c0001e6c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e70:	e8 67 fc ff ff       	call   c0001adc <mem_cpy>
c0001e75:	83 fb 05             	cmp    ebx,0x5
c0001e78:	76 2d                	jbe    c0001ea7 <gen_numname+0x4a>
c0001e7a:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e7d:	66 85 c0             	test   ax,ax
c0001e80:	74 25                	je     c0001ea7 <gen_numname+0x4a>
c0001e82:	83 c7 02             	add    edi,0x2
c0001e85:	ba 10 00 00 00       	mov    edx,0x10
c0001e8a:	89 c1                	mov    ecx,eax
c0001e8c:	01 db                	add    ebx,ebx
c0001e8e:	66 d1 e8             	shr    ax,1
c0001e91:	83 e1 01             	and    ecx,0x1
c0001e94:	01 cb                	add    ebx,ecx
c0001e96:	0f ba e3 10          	bt     ebx,0x10
c0001e9a:	73 06                	jae    c0001ea2 <gen_numname+0x45>
c0001e9c:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001ea2:	4a                   	dec    edx
c0001ea3:	75 e5                	jne    c0001e8a <gen_numname+0x2d>
c0001ea5:	eb d3                	jmp    c0001e7a <gen_numname+0x1d>
c0001ea7:	b8 07 00 00 00       	mov    eax,0x7
c0001eac:	88 d9                	mov    cl,bl
c0001eae:	83 e1 0f             	and    ecx,0xf
c0001eb1:	8d 51 30             	lea    edx,[ecx+0x30]
c0001eb4:	80 fa 39             	cmp    dl,0x39
c0001eb7:	76 03                	jbe    c0001ebc <gen_numname+0x5f>
c0001eb9:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ebc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ebf:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ec3:	89 da                	mov    edx,ebx
c0001ec5:	c1 ea 04             	shr    edx,0x4
c0001ec8:	83 fb 0f             	cmp    ebx,0xf
c0001ecb:	76 06                	jbe    c0001ed3 <gen_numname+0x76>
c0001ecd:	89 c8                	mov    eax,ecx
c0001ecf:	89 d3                	mov    ebx,edx
c0001ed1:	eb d9                	jmp    c0001eac <gen_numname+0x4f>
c0001ed3:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ed8:	31 d2                	xor    edx,edx
c0001eda:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001edd:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ee0:	39 ca                	cmp    edx,ecx
c0001ee2:	73 18                	jae    c0001efc <gen_numname+0x9f>
c0001ee4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee7:	3c 20                	cmp    al,0x20
c0001ee9:	74 11                	je     c0001efc <gen_numname+0x9f>
c0001eeb:	e8 41 fc ff ff       	call   c0001b31 <dbc_1st>
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	74 05                	je     c0001ef9 <gen_numname+0x9c>
c0001ef4:	39 d3                	cmp    ebx,edx
c0001ef6:	74 04                	je     c0001efc <gen_numname+0x9f>
c0001ef8:	42                   	inc    edx
c0001ef9:	42                   	inc    edx
c0001efa:	eb e1                	jmp    c0001edd <gen_numname+0x80>
c0001efc:	b0 20                	mov    al,0x20
c0001efe:	83 f9 07             	cmp    ecx,0x7
c0001f01:	77 05                	ja     c0001f08 <gen_numname+0xab>
c0001f03:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f07:	41                   	inc    ecx
c0001f08:	42                   	inc    edx
c0001f09:	83 fa 07             	cmp    edx,0x7
c0001f0c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f10:	76 ea                	jbe    c0001efc <gen_numname+0x9f>
c0001f12:	83 c4 10             	add    esp,0x10
c0001f15:	5b                   	pop    ebx
c0001f16:	5e                   	pop    esi
c0001f17:	5f                   	pop    edi
c0001f18:	c3                   	ret    

c0001f19 <sum_sfn>:
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	31 d2                	xor    edx,edx
c0001f1d:	d0 ca                	ror    dl,1
c0001f1f:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f22:	41                   	inc    ecx
c0001f23:	83 f9 0b             	cmp    ecx,0xb
c0001f26:	75 f5                	jne    c0001f1d <sum_sfn+0x4>
c0001f28:	88 d0                	mov    al,dl
c0001f2a:	c3                   	ret    

c0001f2b <xdir_sum>:
c0001f2b:	56                   	push   esi
c0001f2c:	31 c9                	xor    ecx,ecx
c0001f2e:	53                   	push   ebx
c0001f2f:	31 d2                	xor    edx,edx
c0001f31:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f35:	43                   	inc    ebx
c0001f36:	c1 e3 05             	shl    ebx,0x5
c0001f39:	83 fa 02             	cmp    edx,0x2
c0001f3c:	74 0b                	je     c0001f49 <xdir_sum+0x1e>
c0001f3e:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f42:	66 d1 c9             	ror    cx,1
c0001f45:	01 f1                	add    ecx,esi
c0001f47:	eb 05                	jmp    c0001f4e <xdir_sum+0x23>
c0001f49:	ba 03 00 00 00       	mov    edx,0x3
c0001f4e:	42                   	inc    edx
c0001f4f:	39 d3                	cmp    ebx,edx
c0001f51:	77 e6                	ja     c0001f39 <xdir_sum+0xe>
c0001f53:	5b                   	pop    ebx
c0001f54:	89 c8                	mov    eax,ecx
c0001f56:	5e                   	pop    esi
c0001f57:	c3                   	ret    

c0001f58 <xsum32>:
c0001f58:	d1 ca                	ror    edx,1
c0001f5a:	0f b6 c0             	movzx  eax,al
c0001f5d:	01 d0                	add    eax,edx
c0001f5f:	c3                   	ret    

c0001f60 <get_xfileinfo>:
c0001f60:	55                   	push   ebp
c0001f61:	31 c9                	xor    ecx,ecx
c0001f63:	57                   	push   edi
c0001f64:	bd 40 00 00 00       	mov    ebp,0x40
c0001f69:	56                   	push   esi
c0001f6a:	31 ff                	xor    edi,edi
c0001f6c:	53                   	push   ebx
c0001f6d:	89 c6                	mov    esi,eax
c0001f6f:	83 ec 0c             	sub    esp,0xc
c0001f72:	89 d3                	mov    ebx,edx
c0001f74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f7b:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f7f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f82:	76 6d                	jbe    c0001ff1 <get_xfileinfo+0x91>
c0001f84:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f8a:	76 0b                	jbe    c0001f97 <get_xfileinfo+0x37>
c0001f8c:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f90:	bf 01 00 00 00       	mov    edi,0x1
c0001f95:	eb 63                	jmp    c0001ffa <get_xfileinfo+0x9a>
c0001f97:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f9d:	75 03                	jne    c0001fa2 <get_xfileinfo+0x42>
c0001f9f:	83 c5 02             	add    ebp,0x2
c0001fa2:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fa5:	83 c5 02             	add    ebp,0x2
c0001fa8:	e8 b0 fa ff ff       	call   c0001a5d <ld_word>
c0001fad:	ff 04 24             	inc    DWORD PTR [esp]
c0001fb0:	66 85 c9             	test   cx,cx
c0001fb3:	75 0d                	jne    c0001fc2 <get_xfileinfo+0x62>
c0001fb5:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fbb:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fc0:	76 2b                	jbe    c0001fed <get_xfileinfo+0x8d>
c0001fc2:	c1 e1 10             	shl    ecx,0x10
c0001fc5:	ba ff 00 00 00       	mov    edx,0xff
c0001fca:	29 fa                	sub    edx,edi
c0001fcc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fd0:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fd4:	0f b7 c0             	movzx  eax,ax
c0001fd7:	09 c8                	or     eax,ecx
c0001fd9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fdd:	e8 1b fc ff ff       	call   c0001bfd <put_utf>
c0001fe2:	84 c0                	test   al,al
c0001fe4:	74 a6                	je     c0001f8c <get_xfileinfo+0x2c>
c0001fe6:	0f b6 c0             	movzx  eax,al
c0001fe9:	01 c7                	add    edi,eax
c0001feb:	31 c0                	xor    eax,eax
c0001fed:	89 c1                	mov    ecx,eax
c0001fef:	eb 8a                	jmp    c0001f7b <get_xfileinfo+0x1b>
c0001ff1:	85 ff                	test   edi,edi
c0001ff3:	74 97                	je     c0001f8c <get_xfileinfo+0x2c>
c0001ff5:	66 85 c9             	test   cx,cx
c0001ff8:	75 92                	jne    c0001f8c <get_xfileinfo+0x2c>
c0001ffa:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002003:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002006:	31 c0                	xor    eax,eax
c0002008:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000200b:	31 d2                	xor    edx,edx
c000200d:	80 e1 10             	and    cl,0x10
c0002010:	75 08                	jne    c000201a <get_xfileinfo+0xba>
c0002012:	8d 46 38             	lea    eax,[esi+0x38]
c0002015:	e8 68 fa ff ff       	call   c0001a82 <ld_qword>
c000201a:	89 03                	mov    DWORD PTR [ebx],eax
c000201c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000201f:	8d 46 0c             	lea    eax,[esi+0xc]
c0002022:	e8 36 fa ff ff       	call   c0001a5d <ld_word>
c0002027:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000202b:	8d 46 0e             	lea    eax,[esi+0xe]
c000202e:	e8 2a fa ff ff       	call   c0001a5d <ld_word>
c0002033:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002037:	83 c4 0c             	add    esp,0xc
c000203a:	5b                   	pop    ebx
c000203b:	5e                   	pop    esi
c000203c:	5f                   	pop    edi
c000203d:	5d                   	pop    ebp
c000203e:	c3                   	ret    

c000203f <get_ldnumber>:
c000203f:	57                   	push   edi
c0002040:	56                   	push   esi
c0002041:	53                   	push   ebx
c0002042:	83 cb ff             	or     ebx,0xffffffff
c0002045:	8b 10                	mov    edx,DWORD PTR [eax]
c0002047:	85 d2                	test   edx,edx
c0002049:	74 34                	je     c000207f <get_ldnumber+0x40>
c000204b:	89 c7                	mov    edi,eax
c000204d:	89 d1                	mov    ecx,edx
c000204f:	41                   	inc    ecx
c0002050:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0002053:	3c 1f                	cmp    al,0x1f
c0002055:	76 04                	jbe    c000205b <get_ldnumber+0x1c>
c0002057:	3c 3a                	cmp    al,0x3a
c0002059:	75 f4                	jne    c000204f <get_ldnumber+0x10>
c000205b:	31 db                	xor    ebx,ebx
c000205d:	3c 3a                	cmp    al,0x3a
c000205f:	75 1e                	jne    c000207f <get_ldnumber+0x40>
c0002061:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002064:	83 cb ff             	or     ebx,0xffffffff
c0002067:	8d 46 d0             	lea    eax,[esi-0x30]
c000206a:	3c 09                	cmp    al,0x9
c000206c:	77 11                	ja     c000207f <get_ldnumber+0x40>
c000206e:	83 c2 02             	add    edx,0x2
c0002071:	39 d1                	cmp    ecx,edx
c0002073:	75 0a                	jne    c000207f <get_ldnumber+0x40>
c0002075:	89 f0                	mov    eax,esi
c0002077:	89 0f                	mov    DWORD PTR [edi],ecx
c0002079:	0f be d8             	movsx  ebx,al
c000207c:	83 eb 30             	sub    ebx,0x30
c000207f:	89 d8                	mov    eax,ebx
c0002081:	5b                   	pop    ebx
c0002082:	5e                   	pop    esi
c0002083:	5f                   	pop    edi
c0002084:	c3                   	ret    

c0002085 <crc32>:
c0002085:	56                   	push   esi
c0002086:	89 d6                	mov    esi,edx
c0002088:	53                   	push   ebx
c0002089:	b2 01                	mov    dl,0x1
c000208b:	bb 08 00 00 00       	mov    ebx,0x8
c0002090:	89 f1                	mov    ecx,esi
c0002092:	84 d1                	test   cl,dl
c0002094:	0f 95 c1             	setne  cl
c0002097:	0f b6 c9             	movzx  ecx,cl
c000209a:	31 c1                	xor    ecx,eax
c000209c:	89 c8                	mov    eax,ecx
c000209e:	d1 e8                	shr    eax,1
c00020a0:	80 e1 01             	and    cl,0x1
c00020a3:	74 05                	je     c00020aa <crc32+0x25>
c00020a5:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020aa:	01 d2                	add    edx,edx
c00020ac:	4b                   	dec    ebx
c00020ad:	75 e1                	jne    c0002090 <crc32+0xb>
c00020af:	5b                   	pop    ebx
c00020b0:	5e                   	pop    esi
c00020b1:	c3                   	ret    

c00020b2 <test_gpt_header>:
c00020b2:	55                   	push   ebp
c00020b3:	b9 10 00 00 00       	mov    ecx,0x10
c00020b8:	57                   	push   edi
c00020b9:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00020be:	56                   	push   esi
c00020bf:	31 ff                	xor    edi,edi
c00020c1:	53                   	push   ebx
c00020c2:	89 c3                	mov    ebx,eax
c00020c4:	e8 33 fa ff ff       	call   c0001afc <mem_cmp>
c00020c9:	85 c0                	test   eax,eax
c00020cb:	75 55                	jne    c0002122 <test_gpt_header+0x70>
c00020cd:	89 c7                	mov    edi,eax
c00020cf:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020d4:	83 ce ff             	or     esi,0xffffffff
c00020d7:	31 d2                	xor    edx,edx
c00020d9:	83 fd 03             	cmp    ebp,0x3
c00020dc:	76 05                	jbe    c00020e3 <test_gpt_header+0x31>
c00020de:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020e3:	89 f0                	mov    eax,esi
c00020e5:	45                   	inc    ebp
c00020e6:	e8 9a ff ff ff       	call   c0002085 <crc32>
c00020eb:	83 fd 4c             	cmp    ebp,0x4c
c00020ee:	89 c6                	mov    esi,eax
c00020f0:	75 e5                	jne    c00020d7 <test_gpt_header+0x25>
c00020f2:	8d 43 10             	lea    eax,[ebx+0x10]
c00020f5:	e8 70 f9 ff ff       	call   c0001a6a <ld_dword>
c00020fa:	f7 d6                	not    esi
c00020fc:	39 c6                	cmp    esi,eax
c00020fe:	75 22                	jne    c0002122 <test_gpt_header+0x70>
c0002100:	8d 43 54             	lea    eax,[ebx+0x54]
c0002103:	e8 62 f9 ff ff       	call   c0001a6a <ld_dword>
c0002108:	83 c0 80             	add    eax,0xffffff80
c000210b:	75 15                	jne    c0002122 <test_gpt_header+0x70>
c000210d:	8d 43 50             	lea    eax,[ebx+0x50]
c0002110:	e8 55 f9 ff ff       	call   c0001a6a <ld_dword>
c0002115:	3d 80 00 00 00       	cmp    eax,0x80
c000211a:	0f 96 c0             	setbe  al
c000211d:	0f b6 c0             	movzx  eax,al
c0002120:	89 c7                	mov    edi,eax
c0002122:	5b                   	pop    ebx
c0002123:	89 f8                	mov    eax,edi
c0002125:	5e                   	pop    esi
c0002126:	5f                   	pop    edi
c0002127:	5d                   	pop    ebp
c0002128:	c3                   	ret    

c0002129 <make_rand>:
c0002129:	56                   	push   esi
c000212a:	85 c0                	test   eax,eax
c000212c:	53                   	push   ebx
c000212d:	75 05                	jne    c0002134 <make_rand+0xb>
c000212f:	b8 01 00 00 00       	mov    eax,0x1
c0002134:	01 d1                	add    ecx,edx
c0002136:	bb 08 00 00 00       	mov    ebx,0x8
c000213b:	89 c6                	mov    esi,eax
c000213d:	d1 e8                	shr    eax,1
c000213f:	83 e6 01             	and    esi,0x1
c0002142:	85 f6                	test   esi,esi
c0002144:	74 05                	je     c000214b <make_rand+0x22>
c0002146:	35 00 00 00 a3       	xor    eax,0xa3000000
c000214b:	4b                   	dec    ebx
c000214c:	75 ed                	jne    c000213b <make_rand+0x12>
c000214e:	42                   	inc    edx
c000214f:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002152:	39 ca                	cmp    edx,ecx
c0002154:	75 e0                	jne    c0002136 <make_rand+0xd>
c0002156:	5b                   	pop    ebx
c0002157:	5e                   	pop    esi
c0002158:	c3                   	ret    

c0002159 <validate>:
c0002159:	56                   	push   esi
c000215a:	89 d6                	mov    esi,edx
c000215c:	53                   	push   ebx
c000215d:	85 c0                	test   eax,eax
c000215f:	51                   	push   ecx
c0002160:	75 09                	jne    c000216b <validate+0x12>
c0002162:	b8 09 00 00 00       	mov    eax,0x9
c0002167:	31 c9                	xor    ecx,ecx
c0002169:	eb 2f                	jmp    c000219a <validate+0x41>
c000216b:	89 c3                	mov    ebx,eax
c000216d:	8b 00                	mov    eax,DWORD PTR [eax]
c000216f:	85 c0                	test   eax,eax
c0002171:	74 ef                	je     c0002162 <validate+0x9>
c0002173:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002176:	74 ea                	je     c0002162 <validate+0x9>
c0002178:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000217c:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002180:	75 e0                	jne    c0002162 <validate+0x9>
c0002182:	83 ec 0c             	sub    esp,0xc
c0002185:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002189:	50                   	push   eax
c000218a:	e8 7d f8 ff ff       	call   c0001a0c <disk_status>
c000218f:	83 c4 10             	add    esp,0x10
c0002192:	a8 01                	test   al,0x1
c0002194:	75 cc                	jne    c0002162 <validate+0x9>
c0002196:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002198:	31 c0                	xor    eax,eax
c000219a:	89 0e                	mov    DWORD PTR [esi],ecx
c000219c:	5a                   	pop    edx
c000219d:	5b                   	pop    ebx
c000219e:	5e                   	pop    esi
c000219f:	c3                   	ret    

c00021a0 <sync_window>:
c00021a0:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021a4:	0f 84 85 00 00 00    	je     c000222f <sync_window+0x8f>
c00021aa:	55                   	push   ebp
c00021ab:	8d 68 54             	lea    ebp,[eax+0x54]
c00021ae:	57                   	push   edi
c00021af:	56                   	push   esi
c00021b0:	53                   	push   ebx
c00021b1:	89 c3                	mov    ebx,eax
c00021b3:	83 ec 28             	sub    esp,0x28
c00021b6:	6a 01                	push   0x1
c00021b8:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021bb:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021be:	55                   	push   ebp
c00021bf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021c3:	50                   	push   eax
c00021c4:	e8 5f f8 ff ff       	call   c0001a28 <disk_write>
c00021c9:	83 c4 20             	add    esp,0x20
c00021cc:	ba 01 00 00 00       	mov    edx,0x1
c00021d1:	85 c0                	test   eax,eax
c00021d3:	75 50                	jne    c0002225 <sync_window+0x85>
c00021d5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021d8:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021df:	89 c6                	mov    esi,eax
c00021e1:	31 ff                	xor    edi,edi
c00021e3:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021e6:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021ed:	89 d7                	mov    edi,edx
c00021ef:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021f3:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021f6:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021fa:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021fe:	73 23                	jae    c0002223 <sync_window+0x83>
c0002200:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002204:	75 1d                	jne    c0002223 <sync_window+0x83>
c0002206:	83 ec 0c             	sub    esp,0xc
c0002209:	6a 01                	push   0x1
c000220b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000220f:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002213:	52                   	push   edx
c0002214:	50                   	push   eax
c0002215:	55                   	push   ebp
c0002216:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 08 f8 ff ff       	call   c0001a28 <disk_write>
c0002220:	83 c4 20             	add    esp,0x20
c0002223:	31 d2                	xor    edx,edx
c0002225:	83 c4 1c             	add    esp,0x1c
c0002228:	89 d0                	mov    eax,edx
c000222a:	5b                   	pop    ebx
c000222b:	5e                   	pop    esi
c000222c:	5f                   	pop    edi
c000222d:	5d                   	pop    ebp
c000222e:	c3                   	ret    
c000222f:	31 d2                	xor    edx,edx
c0002231:	89 d0                	mov    eax,edx
c0002233:	c3                   	ret    

c0002234 <move_window>:
c0002234:	56                   	push   esi
c0002235:	53                   	push   ebx
c0002236:	89 c3                	mov    ebx,eax
c0002238:	83 ec 14             	sub    esp,0x14
c000223b:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000223e:	75 07                	jne    c0002247 <move_window+0x13>
c0002240:	31 f6                	xor    esi,esi
c0002242:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002245:	74 59                	je     c00022a0 <move_window+0x6c>
c0002247:	89 d8                	mov    eax,ebx
c0002249:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000224d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002251:	e8 4a ff ff ff       	call   c00021a0 <sync_window>
c0002256:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000225a:	89 c6                	mov    esi,eax
c000225c:	85 c0                	test   eax,eax
c000225e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002262:	75 3c                	jne    c00022a0 <move_window+0x6c>
c0002264:	83 ec 0c             	sub    esp,0xc
c0002267:	8d 43 54             	lea    eax,[ebx+0x54]
c000226a:	6a 01                	push   0x1
c000226c:	51                   	push   ecx
c000226d:	52                   	push   edx
c000226e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002272:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002276:	50                   	push   eax
c0002277:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000227b:	50                   	push   eax
c000227c:	e8 91 f7 ff ff       	call   c0001a12 <disk_read>
c0002281:	83 c4 20             	add    esp,0x20
c0002284:	85 c0                	test   eax,eax
c0002286:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000228a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000228e:	74 0a                	je     c000229a <move_window+0x66>
c0002290:	83 ca ff             	or     edx,0xffffffff
c0002293:	be 01 00 00 00       	mov    esi,0x1
c0002298:	89 d1                	mov    ecx,edx
c000229a:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000229d:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022a0:	83 c4 14             	add    esp,0x14
c00022a3:	89 f0                	mov    eax,esi
c00022a5:	5b                   	pop    ebx
c00022a6:	5e                   	pop    esi
c00022a7:	c3                   	ret    

c00022a8 <check_fs>:
c00022a8:	53                   	push   ebx
c00022a9:	89 c3                	mov    ebx,eax
c00022ab:	83 ec 08             	sub    esp,0x8
c00022ae:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b2:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022b9:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022c0:	e8 6f ff ff ff       	call   c0002234 <move_window>
c00022c5:	ba 04 00 00 00       	mov    edx,0x4
c00022ca:	85 c0                	test   eax,eax
c00022cc:	0f 85 89 00 00 00    	jne    c000235b <check_fs+0xb3>
c00022d2:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022d8:	e8 80 f7 ff ff       	call   c0001a5d <ld_word>
c00022dd:	ba 03 00 00 00       	mov    edx,0x3
c00022e2:	66 3d 55 aa          	cmp    ax,0xaa55
c00022e6:	75 73                	jne    c000235b <check_fs+0xb3>
c00022e8:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00022ed:	8d 43 54             	lea    eax,[ebx+0x54]
c00022f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00022f5:	e8 02 f8 ff ff       	call   c0001afc <mem_cmp>
c00022fa:	ba 01 00 00 00       	mov    edx,0x1
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 58                	je     c000235b <check_fs+0xb3>
c0002303:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002306:	8d 50 18             	lea    edx,[eax+0x18]
c0002309:	80 fa 01             	cmp    dl,0x1
c000230c:	76 09                	jbe    c0002317 <check_fs+0x6f>
c000230e:	ba 02 00 00 00       	mov    edx,0x2
c0002313:	3c eb                	cmp    al,0xeb
c0002315:	75 44                	jne    c000235b <check_fs+0xb3>
c0002317:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c000231c:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002322:	b9 03 00 00 00       	mov    ecx,0x3
c0002327:	e8 d0 f7 ff ff       	call   c0001afc <mem_cmp>
c000232c:	31 d2                	xor    edx,edx
c000232e:	85 c0                	test   eax,eax
c0002330:	74 29                	je     c000235b <check_fs+0xb3>
c0002332:	ba 6c 05 02 c0       	mov    edx,0xc002056c
c0002337:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000233d:	b9 05 00 00 00       	mov    ecx,0x5
c0002342:	e8 b5 f7 ff ff       	call   c0001afc <mem_cmp>
c0002347:	31 d2                	xor    edx,edx
c0002349:	85 c0                	test   eax,eax
c000234b:	74 0e                	je     c000235b <check_fs+0xb3>
c000234d:	31 d2                	xor    edx,edx
c000234f:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002356:	0f 95 c2             	setne  dl
c0002359:	01 d2                	add    edx,edx
c000235b:	83 c4 08             	add    esp,0x8
c000235e:	89 d0                	mov    eax,edx
c0002360:	5b                   	pop    ebx
c0002361:	c3                   	ret    

c0002362 <find_volume>:
c0002362:	55                   	push   ebp
c0002363:	31 c9                	xor    ecx,ecx
c0002365:	57                   	push   edi
c0002366:	56                   	push   esi
c0002367:	89 d6                	mov    esi,edx
c0002369:	53                   	push   ebx
c000236a:	31 d2                	xor    edx,edx
c000236c:	83 ec 3c             	sub    esp,0x3c
c000236f:	89 c3                	mov    ebx,eax
c0002371:	e8 32 ff ff ff       	call   c00022a8 <check_fs>
c0002376:	83 f8 02             	cmp    eax,0x2
c0002379:	74 0e                	je     c0002389 <find_volume+0x27>
c000237b:	0f 87 56 01 00 00    	ja     c00024d7 <find_volume+0x175>
c0002381:	85 f6                	test   esi,esi
c0002383:	0f 84 4e 01 00 00    	je     c00024d7 <find_volume+0x175>
c0002389:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002390:	0f 85 df 00 00 00    	jne    c0002475 <find_volume+0x113>
c0002396:	31 c9                	xor    ecx,ecx
c0002398:	ba 01 00 00 00       	mov    edx,0x1
c000239d:	89 d8                	mov    eax,ebx
c000239f:	e8 90 fe ff ff       	call   c0002234 <move_window>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	74 0a                	je     c00023b2 <find_volume+0x50>
c00023a8:	b8 04 00 00 00       	mov    eax,0x4
c00023ad:	e9 25 01 00 00       	jmp    c00024d7 <find_volume+0x175>
c00023b2:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023b5:	89 e8                	mov    eax,ebp
c00023b7:	e8 f6 fc ff ff       	call   c00020b2 <test_gpt_header>
c00023bc:	85 c0                	test   eax,eax
c00023be:	75 0a                	jne    c00023ca <find_volume+0x68>
c00023c0:	b8 03 00 00 00       	mov    eax,0x3
c00023c5:	e9 0d 01 00 00       	jmp    c00024d7 <find_volume+0x175>
c00023ca:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023d0:	e8 95 f6 ff ff       	call   c0001a6a <ld_dword>
c00023d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023d9:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023df:	e8 9e f6 ff ff       	call   c0001a82 <ld_qword>
c00023e4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002400:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002404:	74 ba                	je     c00023c0 <find_volume+0x5e>
c0002406:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000240a:	31 c9                	xor    ecx,ecx
c000240c:	c1 e7 07             	shl    edi,0x7
c000240f:	89 d8                	mov    eax,ebx
c0002411:	89 fa                	mov    edx,edi
c0002413:	c1 ea 09             	shr    edx,0x9
c0002416:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000241a:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000241e:	e8 11 fe ff ff       	call   c0002234 <move_window>
c0002423:	85 c0                	test   eax,eax
c0002425:	75 81                	jne    c00023a8 <find_volume+0x46>
c0002427:	81 e7 80 01 00 00    	and    edi,0x180
c000242d:	b9 10 00 00 00       	mov    ecx,0x10
c0002432:	ba 50 05 02 c0       	mov    edx,0xc0020550
c0002437:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000243b:	e8 bc f6 ff ff       	call   c0001afc <mem_cmp>
c0002440:	85 c0                	test   eax,eax
c0002442:	75 2b                	jne    c000246f <find_volume+0x10d>
c0002444:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002448:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000244c:	e8 31 f6 ff ff       	call   c0001a82 <ld_qword>
c0002451:	89 d1                	mov    ecx,edx
c0002453:	89 c2                	mov    edx,eax
c0002455:	89 d8                	mov    eax,ebx
c0002457:	e8 4c fe ff ff       	call   c00022a8 <check_fs>
c000245c:	85 f6                	test   esi,esi
c000245e:	75 05                	jne    c0002465 <find_volume+0x103>
c0002460:	83 f8 01             	cmp    eax,0x1
c0002463:	76 72                	jbe    c00024d7 <find_volume+0x175>
c0002465:	85 f6                	test   esi,esi
c0002467:	74 06                	je     c000246f <find_volume+0x10d>
c0002469:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000246d:	74 68                	je     c00024d7 <find_volume+0x175>
c000246f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002473:	eb 87                	jmp    c00023fc <find_volume+0x9a>
c0002475:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002479:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000247f:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002485:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002489:	89 cd                	mov    ebp,ecx
c000248b:	89 f8                	mov    eax,edi
c000248d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002491:	e8 d4 f5 ff ff       	call   c0001a6a <ld_dword>
c0002496:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000249a:	83 c7 10             	add    edi,0x10
c000249d:	83 c1 04             	add    ecx,0x4
c00024a0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00024a3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024a7:	75 e2                	jne    c000248b <find_volume+0x129>
c00024a9:	31 ff                	xor    edi,edi
c00024ab:	85 f6                	test   esi,esi
c00024ad:	74 03                	je     c00024b2 <find_volume+0x150>
c00024af:	8d 7e ff             	lea    edi,[esi-0x1]
c00024b2:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024b6:	b8 03 00 00 00       	mov    eax,0x3
c00024bb:	85 d2                	test   edx,edx
c00024bd:	74 09                	je     c00024c8 <find_volume+0x166>
c00024bf:	31 c9                	xor    ecx,ecx
c00024c1:	89 d8                	mov    eax,ebx
c00024c3:	e8 e0 fd ff ff       	call   c00022a8 <check_fs>
c00024c8:	85 f6                	test   esi,esi
c00024ca:	75 0b                	jne    c00024d7 <find_volume+0x175>
c00024cc:	83 f8 01             	cmp    eax,0x1
c00024cf:	76 06                	jbe    c00024d7 <find_volume+0x175>
c00024d1:	47                   	inc    edi
c00024d2:	83 ff 03             	cmp    edi,0x3
c00024d5:	76 db                	jbe    c00024b2 <find_volume+0x150>
c00024d7:	83 c4 3c             	add    esp,0x3c
c00024da:	5b                   	pop    ebx
c00024db:	5e                   	pop    esi
c00024dc:	5f                   	pop    edi
c00024dd:	5d                   	pop    ebp
c00024de:	c3                   	ret    

c00024df <mount_volume>:
c00024df:	55                   	push   ebp
c00024e0:	57                   	push   edi
c00024e1:	89 cf                	mov    edi,ecx
c00024e3:	56                   	push   esi
c00024e4:	53                   	push   ebx
c00024e5:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ea:	83 ec 3c             	sub    esp,0x3c
c00024ed:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f7:	e8 43 fb ff ff       	call   c000203f <get_ldnumber>
c00024fc:	85 c0                	test   eax,eax
c00024fe:	0f 88 3b 05 00 00    	js     c0002a3f <mount_volume+0x560>
c0002504:	8b 2c 85 40 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8c0]
c000250b:	89 c6                	mov    esi,eax
c000250d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002512:	85 ed                	test   ebp,ebp
c0002514:	0f 84 25 05 00 00    	je     c0002a3f <mount_volume+0x560>
c000251a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000251e:	83 e7 fe             	and    edi,0xfffffffe
c0002521:	89 2a                	mov    DWORD PTR [edx],ebp
c0002523:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002527:	74 32                	je     c000255b <mount_volume+0x7c>
c0002529:	83 ec 0c             	sub    esp,0xc
c000252c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002530:	50                   	push   eax
c0002531:	e8 d6 f4 ff ff       	call   c0001a0c <disk_status>
c0002536:	83 c4 10             	add    esp,0x10
c0002539:	a8 01                	test   al,0x1
c000253b:	75 1e                	jne    c000255b <mount_volume+0x7c>
c000253d:	89 f9                	mov    ecx,edi
c000253f:	31 db                	xor    ebx,ebx
c0002541:	84 c9                	test   cl,cl
c0002543:	0f 84 f6 04 00 00    	je     c0002a3f <mount_volume+0x560>
c0002549:	a8 04                	test   al,0x4
c000254b:	0f 84 ee 04 00 00    	je     c0002a3f <mount_volume+0x560>
c0002551:	bb 0a 00 00 00       	mov    ebx,0xa
c0002556:	e9 e4 04 00 00       	jmp    c0002a3f <mount_volume+0x560>
c000255b:	83 ec 0c             	sub    esp,0xc
c000255e:	89 f0                	mov    eax,esi
c0002560:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002564:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002567:	0f b6 f0             	movzx  esi,al
c000256a:	56                   	push   esi
c000256b:	e8 9f f4 ff ff       	call   c0001a0f <disk_initialize>
c0002570:	bb 03 00 00 00       	mov    ebx,0x3
c0002575:	83 c4 10             	add    esp,0x10
c0002578:	a8 01                	test   al,0x1
c000257a:	0f 85 bf 04 00 00    	jne    c0002a3f <mount_volume+0x560>
c0002580:	89 f9                	mov    ecx,edi
c0002582:	84 c9                	test   cl,cl
c0002584:	74 04                	je     c000258a <mount_volume+0xab>
c0002586:	a8 04                	test   al,0x4
c0002588:	75 c7                	jne    c0002551 <mount_volume+0x72>
c000258a:	31 d2                	xor    edx,edx
c000258c:	89 e8                	mov    eax,ebp
c000258e:	e8 cf fd ff ff       	call   c0002362 <find_volume>
c0002593:	83 f8 04             	cmp    eax,0x4
c0002596:	75 0a                	jne    c00025a2 <mount_volume+0xc3>
c0002598:	bb 01 00 00 00       	mov    ebx,0x1
c000259d:	e9 9d 04 00 00       	jmp    c0002a3f <mount_volume+0x560>
c00025a2:	83 f8 01             	cmp    eax,0x1
c00025a5:	76 0a                	jbe    c00025b1 <mount_volume+0xd2>
c00025a7:	bb 0d 00 00 00       	mov    ebx,0xd
c00025ac:	e9 8e 04 00 00       	jmp    c0002a3f <mount_volume+0x560>
c00025b1:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025b4:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025bf:	75 17                	jne    c00025d8 <mount_volume+0xf9>
c00025c1:	b8 0b 00 00 00       	mov    eax,0xb
c00025c6:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025cb:	75 da                	jne    c00025a7 <mount_volume+0xc8>
c00025cd:	40                   	inc    eax
c00025ce:	83 f8 40             	cmp    eax,0x40
c00025d1:	75 f3                	jne    c00025c6 <mount_volume+0xe7>
c00025d3:	e9 5a 02 00 00       	jmp    c0002832 <mount_volume+0x353>
c00025d8:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025db:	e8 7d f4 ff ff       	call   c0001a5d <ld_word>
c00025e0:	66 3d 00 02          	cmp    ax,0x200
c00025e4:	75 c1                	jne    c00025a7 <mount_volume+0xc8>
c00025e6:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e9:	e8 6f f4 ff ff       	call   c0001a5d <ld_word>
c00025ee:	0f b7 c0             	movzx  eax,ax
c00025f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f5:	85 c0                	test   eax,eax
c00025f7:	75 0c                	jne    c0002605 <mount_volume+0x126>
c00025f9:	8d 45 78             	lea    eax,[ebp+0x78]
c00025fc:	e8 69 f4 ff ff       	call   c0001a6a <ld_dword>
c0002601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002609:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000260c:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002613:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002616:	48                   	dec    eax
c0002617:	3c 01                	cmp    al,0x1
c0002619:	77 8c                	ja     c00025a7 <mount_volume+0xc8>
c000261b:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261f:	89 c3                	mov    ebx,eax
c0002621:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002625:	66 85 c0             	test   ax,ax
c0002628:	0f 84 79 ff ff ff    	je     c00025a7 <mount_volume+0xc8>
c000262e:	8d 40 ff             	lea    eax,[eax-0x1]
c0002631:	85 d8                	test   eax,ebx
c0002633:	0f 85 6e ff ff ff    	jne    c00025a7 <mount_volume+0xc8>
c0002639:	8d 45 65             	lea    eax,[ebp+0x65]
c000263c:	e8 1c f4 ff ff       	call   c0001a5d <ld_word>
c0002641:	89 c7                	mov    edi,eax
c0002643:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002647:	a8 0f                	test   al,0xf
c0002649:	0f 85 58 ff ff ff    	jne    c00025a7 <mount_volume+0xc8>
c000264f:	8d 45 67             	lea    eax,[ebp+0x67]
c0002652:	e8 06 f4 ff ff       	call   c0001a5d <ld_word>
c0002657:	0f b7 f0             	movzx  esi,ax
c000265a:	85 f6                	test   esi,esi
c000265c:	75 0a                	jne    c0002668 <mount_volume+0x189>
c000265e:	8d 45 74             	lea    eax,[ebp+0x74]
c0002661:	e8 04 f4 ff ff       	call   c0001a6a <ld_dword>
c0002666:	89 c6                	mov    esi,eax
c0002668:	8d 45 62             	lea    eax,[ebp+0x62]
c000266b:	e8 ed f3 ff ff       	call   c0001a5d <ld_word>
c0002670:	66 85 c0             	test   ax,ax
c0002673:	0f 84 2e ff ff ff    	je     c00025a7 <mount_volume+0xc8>
c0002679:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000267e:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002683:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002687:	89 fa                	mov    edx,edi
c0002689:	66 c1 ea 04          	shr    dx,0x4
c000268d:	0f b7 d2             	movzx  edx,dx
c0002690:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002694:	0f b7 c8             	movzx  ecx,ax
c0002697:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000269a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000269e:	39 c6                	cmp    esi,eax
c00026a0:	0f 82 01 ff ff ff    	jb     c00025a7 <mount_volume+0xc8>
c00026a6:	29 c6                	sub    esi,eax
c00026a8:	31 d2                	xor    edx,edx
c00026aa:	89 f0                	mov    eax,esi
c00026ac:	f7 f3                	div    ebx
c00026ae:	39 de                	cmp    esi,ebx
c00026b0:	0f 82 f1 fe ff ff    	jb     c00025a7 <mount_volume+0xc8>
c00026b6:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026bb:	0f 87 e6 fe ff ff    	ja     c00025a7 <mount_volume+0xc8>
c00026c1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c6:	0f 86 63 03 00 00    	jbe    c0002a2f <mount_volume+0x550>
c00026cc:	bb 03 00 00 00       	mov    ebx,0x3
c00026d1:	8d 70 02             	lea    esi,[eax+0x2]
c00026d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026dc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026df:	89 c8                	mov    eax,ecx
c00026e1:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026e4:	31 d2                	xor    edx,edx
c00026e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f2:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026fd:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002700:	31 d2                	xor    edx,edx
c0002702:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002706:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000270a:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000270d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002710:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002713:	83 fb 03             	cmp    ebx,0x3
c0002716:	75 2b                	jne    c0002743 <mount_volume+0x264>
c0002718:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000271b:	e8 3d f3 ff ff       	call   c0001a5d <ld_word>
c0002720:	66 09 c7             	or     di,ax
c0002723:	0f 85 7e fe ff ff    	jne    c00025a7 <mount_volume+0xc8>
c0002729:	c1 e6 02             	shl    esi,0x2
c000272c:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002732:	e8 33 f3 ff ff       	call   c0001a6a <ld_dword>
c0002737:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000273e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002741:	eb 30                	jmp    c0002773 <mount_volume+0x294>
c0002743:	66 85 ff             	test   di,di
c0002746:	0f 84 5b fe ff ff    	je     c00025a7 <mount_volume+0xc8>
c000274c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002750:	31 d2                	xor    edx,edx
c0002752:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002756:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000275a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000275d:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002760:	83 fb 02             	cmp    ebx,0x2
c0002763:	75 04                	jne    c0002769 <mount_volume+0x28a>
c0002765:	01 f6                	add    esi,esi
c0002767:	eb 0a                	jmp    c0002773 <mount_volume+0x294>
c0002769:	8d 04 76             	lea    eax,[esi+esi*2]
c000276c:	83 e6 01             	and    esi,0x1
c000276f:	d1 e8                	shr    eax,1
c0002771:	01 c6                	add    esi,eax
c0002773:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002779:	c1 ee 09             	shr    esi,0x9
c000277c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002780:	0f 87 21 fe ff ff    	ja     c00025a7 <mount_volume+0xc8>
c0002786:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000278d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002794:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002798:	83 fb 03             	cmp    ebx,0x3
c000279b:	75 7a                	jne    c0002817 <mount_volume+0x338>
c000279d:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027a3:	e8 b5 f2 ff ff       	call   c0001a5d <ld_word>
c00027a8:	66 48                	dec    ax
c00027aa:	75 6b                	jne    c0002817 <mount_volume+0x338>
c00027ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027b4:	83 c2 01             	add    edx,0x1
c00027b7:	89 e8                	mov    eax,ebp
c00027b9:	83 d1 00             	adc    ecx,0x0
c00027bc:	e8 73 fa ff ff       	call   c0002234 <move_window>
c00027c1:	85 c0                	test   eax,eax
c00027c3:	75 52                	jne    c0002817 <mount_volume+0x338>
c00027c5:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c9:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027cf:	e8 89 f2 ff ff       	call   c0001a5d <ld_word>
c00027d4:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d8:	75 3d                	jne    c0002817 <mount_volume+0x338>
c00027da:	8d 45 54             	lea    eax,[ebp+0x54]
c00027dd:	e8 88 f2 ff ff       	call   c0001a6a <ld_dword>
c00027e2:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e7:	75 2e                	jne    c0002817 <mount_volume+0x338>
c00027e9:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ef:	e8 76 f2 ff ff       	call   c0001a6a <ld_dword>
c00027f4:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f9:	75 1c                	jne    c0002817 <mount_volume+0x338>
c00027fb:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002801:	e8 64 f2 ff ff       	call   c0001a6a <ld_dword>
c0002806:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002809:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280f:	e8 56 f2 ff ff       	call   c0001a6a <ld_dword>
c0002814:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002817:	66 a1 20 47 02 c0    	mov    ax,ds:0xc0024720
c000281d:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002820:	40                   	inc    eax
c0002821:	31 db                	xor    ebx,ebx
c0002823:	66 a3 20 47 02 c0    	mov    ds:0xc0024720,ax
c0002829:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000282d:	e9 0d 02 00 00       	jmp    c0002a3f <mount_volume+0x560>
c0002832:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002838:	e8 20 f2 ff ff       	call   c0001a5d <ld_word>
c000283d:	66 3d 00 01          	cmp    ax,0x100
c0002841:	0f 85 60 fd ff ff    	jne    c00025a7 <mount_volume+0xc8>
c0002847:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000284e:	0f 85 53 fd ff ff    	jne    c00025a7 <mount_volume+0xc8>
c0002854:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000285a:	e8 23 f2 ff ff       	call   c0001a82 <ld_qword>
c000285f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002863:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002869:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000286d:	e8 f8 f1 ff ff       	call   c0001a6a <ld_dword>
c0002872:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002875:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000287b:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000287e:	fe c8                	dec    al
c0002880:	0f 85 21 fd ff ff    	jne    c00025a7 <mount_volume+0xc8>
c0002886:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000288d:	bb 01 00 00 00       	mov    ebx,0x1
c0002892:	d3 e3                	shl    ebx,cl
c0002894:	66 85 db             	test   bx,bx
c0002897:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000289b:	0f 84 06 fd ff ff    	je     c00025a7 <mount_volume+0xc8>
c00028a1:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a7:	e8 be f1 ff ff       	call   c0001a6a <ld_dword>
c00028ac:	89 c6                	mov    esi,eax
c00028ae:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028b3:	0f 87 ee fc ff ff    	ja     c00025a7 <mount_volume+0xc8>
c00028b9:	8d 40 02             	lea    eax,[eax+0x2]
c00028bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028c0:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ca:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028cd:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028d3:	e8 92 f1 ff ff       	call   c0001a6a <ld_dword>
c00028d8:	31 d2                	xor    edx,edx
c00028da:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028de:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028ec:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028f6:	e8 6f f1 ff ff       	call   c0001a6a <ld_dword>
c00028fb:	31 d2                	xor    edx,edx
c00028fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002901:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002905:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002909:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290c:	0f b7 c3             	movzx  eax,bx
c000290f:	0f af f0             	imul   esi,eax
c0002912:	89 f0                	mov    eax,esi
c0002914:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002917:	31 d2                	xor    edx,edx
c0002919:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002921:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002925:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002929:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000292d:	39 c1                	cmp    ecx,eax
c000292f:	89 df                	mov    edi,ebx
c0002931:	19 d7                	sbb    edi,edx
c0002933:	0f 82 6e fc ff ff    	jb     c00025a7 <mount_volume+0xc8>
c0002939:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293f:	31 db                	xor    ebx,ebx
c0002941:	e8 24 f1 ff ff       	call   c0001a6a <ld_dword>
c0002946:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000294d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002950:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002958:	85 db                	test   ebx,ebx
c000295a:	75 39                	jne    c0002995 <mount_volume+0x4b6>
c000295c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002960:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002964:	0f 86 3d fc ff ff    	jbe    c00025a7 <mount_volume+0xc8>
c000296a:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000296d:	89 e8                	mov    eax,ebp
c000296f:	e8 82 f3 ff ff       	call   c0001cf6 <clst2sect>
c0002974:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002978:	31 ff                	xor    edi,edi
c000297a:	01 c6                	add    esi,eax
c000297c:	11 d7                	adc    edi,edx
c000297e:	89 e8                	mov    eax,ebp
c0002980:	89 f2                	mov    edx,esi
c0002982:	89 f9                	mov    ecx,edi
c0002984:	e8 ab f8 ff ff       	call   c0002234 <move_window>
c0002989:	85 c0                	test   eax,eax
c000298b:	0f 85 07 fc ff ff    	jne    c0002598 <mount_volume+0xb9>
c0002991:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002995:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000299a:	74 0b                	je     c00029a7 <mount_volume+0x4c8>
c000299c:	83 c3 20             	add    ebx,0x20
c000299f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a5:	eb b1                	jmp    c0002958 <mount_volume+0x479>
c00029a7:	8d 75 54             	lea    esi,[ebp+0x54]
c00029aa:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029ae:	e8 b7 f0 ff ff       	call   c0001a6a <ld_dword>
c00029b3:	89 c3                	mov    ebx,eax
c00029b5:	83 f8 01             	cmp    eax,0x1
c00029b8:	0f 86 e9 fb ff ff    	jbe    c00025a7 <mount_volume+0xc8>
c00029be:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029c1:	0f 86 e0 fb ff ff    	jbe    c00025a7 <mount_volume+0xc8>
c00029c7:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029cb:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029ce:	0f af c2             	imul   eax,edx
c00029d1:	31 d2                	xor    edx,edx
c00029d3:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d6:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d9:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029dc:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029df:	89 da                	mov    edx,ebx
c00029e1:	31 c9                	xor    ecx,ecx
c00029e3:	c1 ea 07             	shr    edx,0x7
c00029e6:	89 e8                	mov    eax,ebp
c00029e8:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029eb:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029ee:	e8 41 f8 ff ff       	call   c0002234 <move_window>
c00029f3:	85 c0                	test   eax,eax
c00029f5:	0f 85 9d fb ff ff    	jne    c0002598 <mount_volume+0xb9>
c00029fb:	89 d8                	mov    eax,ebx
c00029fd:	83 e0 7f             	and    eax,0x7f
c0002a00:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a03:	e8 62 f0 ff ff       	call   c0001a6a <ld_dword>
c0002a08:	83 f8 ff             	cmp    eax,0xffffffff
c0002a0b:	74 0a                	je     c0002a17 <mount_volume+0x538>
c0002a0d:	43                   	inc    ebx
c0002a0e:	39 d8                	cmp    eax,ebx
c0002a10:	74 cd                	je     c00029df <mount_volume+0x500>
c0002a12:	e9 90 fb ff ff       	jmp    c00025a7 <mount_volume+0xc8>
c0002a17:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a1e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a25:	bb 04 00 00 00       	mov    ebx,0x4
c0002a2a:	e9 e8 fd ff ff       	jmp    c0002817 <mount_volume+0x338>
c0002a2f:	31 db                	xor    ebx,ebx
c0002a31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a36:	0f 97 c3             	seta   bl
c0002a39:	43                   	inc    ebx
c0002a3a:	e9 92 fc ff ff       	jmp    c00026d1 <mount_volume+0x1f2>
c0002a3f:	83 c4 3c             	add    esp,0x3c
c0002a42:	89 d8                	mov    eax,ebx
c0002a44:	5b                   	pop    ebx
c0002a45:	5e                   	pop    esi
c0002a46:	5f                   	pop    edi
c0002a47:	5d                   	pop    ebp
c0002a48:	c3                   	ret    

c0002a49 <find_bitmap>:
c0002a49:	55                   	push   ebp
c0002a4a:	57                   	push   edi
c0002a4b:	89 c7                	mov    edi,eax
c0002a4d:	56                   	push   esi
c0002a4e:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a51:	53                   	push   ebx
c0002a52:	83 ec 1c             	sub    esp,0x1c
c0002a55:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a58:	83 e8 02             	sub    eax,0x2
c0002a5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a5f:	39 f0                	cmp    eax,esi
c0002a61:	77 02                	ja     c0002a65 <find_bitmap+0x1c>
c0002a63:	31 f6                	xor    esi,esi
c0002a65:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a69:	89 f3                	mov    ebx,esi
c0002a6b:	31 ed                	xor    ebp,ebp
c0002a6d:	89 da                	mov    edx,ebx
c0002a6f:	31 c9                	xor    ecx,ecx
c0002a71:	c1 ea 0c             	shr    edx,0xc
c0002a74:	89 f8                	mov    eax,edi
c0002a76:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a79:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a7c:	e8 b3 f7 ff ff       	call   c0002234 <move_window>
c0002a81:	85 c0                	test   eax,eax
c0002a83:	75 68                	jne    c0002aed <find_bitmap+0xa4>
c0002a85:	89 d9                	mov    ecx,ebx
c0002a87:	b8 01 00 00 00       	mov    eax,0x1
c0002a8c:	83 e1 07             	and    ecx,0x7
c0002a8f:	89 da                	mov    edx,ebx
c0002a91:	d3 e0                	shl    eax,cl
c0002a93:	c1 ea 03             	shr    edx,0x3
c0002a96:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a99:	83 e9 02             	sub    ecx,0x2
c0002a9c:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002aa2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa6:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aaa:	43                   	inc    ebx
c0002aab:	21 c1                	and    ecx,eax
c0002aad:	01 c0                	add    eax,eax
c0002aaf:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ab3:	77 09                	ja     c0002abe <find_bitmap+0x75>
c0002ab5:	31 db                	xor    ebx,ebx
c0002ab7:	ba 00 02 00 00       	mov    edx,0x200
c0002abc:	31 c0                	xor    eax,eax
c0002abe:	84 c9                	test   cl,cl
c0002ac0:	75 10                	jne    c0002ad2 <find_bitmap+0x89>
c0002ac2:	45                   	inc    ebp
c0002ac3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac7:	75 0f                	jne    c0002ad8 <find_bitmap+0x8f>
c0002ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002acd:	83 c0 02             	add    eax,0x2
c0002ad0:	eb 22                	jmp    c0002af4 <find_bitmap+0xab>
c0002ad2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad6:	31 ed                	xor    ebp,ebp
c0002ad8:	39 de                	cmp    esi,ebx
c0002ada:	74 16                	je     c0002af2 <find_bitmap+0xa9>
c0002adc:	84 c0                	test   al,al
c0002ade:	75 c6                	jne    c0002aa6 <find_bitmap+0x5d>
c0002ae0:	42                   	inc    edx
c0002ae1:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae7:	77 84                	ja     c0002a6d <find_bitmap+0x24>
c0002ae9:	b0 01                	mov    al,0x1
c0002aeb:	eb b9                	jmp    c0002aa6 <find_bitmap+0x5d>
c0002aed:	83 c8 ff             	or     eax,0xffffffff
c0002af0:	eb 02                	jmp    c0002af4 <find_bitmap+0xab>
c0002af2:	31 c0                	xor    eax,eax
c0002af4:	83 c4 1c             	add    esp,0x1c
c0002af7:	5b                   	pop    ebx
c0002af8:	5e                   	pop    esi
c0002af9:	5f                   	pop    edi
c0002afa:	5d                   	pop    ebp
c0002afb:	c3                   	ret    

c0002afc <change_bitmap>:
c0002afc:	55                   	push   ebp
c0002afd:	89 cd                	mov    ebp,ecx
c0002aff:	57                   	push   edi
c0002b00:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b03:	56                   	push   esi
c0002b04:	89 c7                	mov    edi,eax
c0002b06:	53                   	push   ebx
c0002b07:	89 c8                	mov    eax,ecx
c0002b09:	83 ec 1c             	sub    esp,0x1c
c0002b0c:	31 d2                	xor    edx,edx
c0002b0e:	c1 e8 0c             	shr    eax,0xc
c0002b11:	89 ce                	mov    esi,ecx
c0002b13:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b16:	bb 01 00 00 00       	mov    ebx,0x1
c0002b1b:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b1e:	83 e1 07             	and    ecx,0x7
c0002b21:	c1 ee 03             	shr    esi,0x3
c0002b24:	d3 e3                	shl    ebx,cl
c0002b26:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b2c:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b30:	89 c1                	mov    ecx,eax
c0002b32:	89 d3                	mov    ebx,edx
c0002b34:	83 c1 01             	add    ecx,0x1
c0002b37:	83 d3 00             	adc    ebx,0x0
c0002b3a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b3e:	89 d1                	mov    ecx,edx
c0002b40:	89 c2                	mov    edx,eax
c0002b42:	89 f8                	mov    eax,edi
c0002b44:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b48:	e8 e7 f6 ff ff       	call   c0002234 <move_window>
c0002b4d:	89 c1                	mov    ecx,eax
c0002b4f:	85 c0                	test   eax,eax
c0002b51:	75 48                	jne    c0002b9b <change_bitmap+0x9f>
c0002b53:	31 d2                	xor    edx,edx
c0002b55:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b59:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b5d:	0f 95 c2             	setne  dl
c0002b60:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b64:	74 3c                	je     c0002ba2 <change_bitmap+0xa6>
c0002b66:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b6a:	4d                   	dec    ebp
c0002b6b:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b6f:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b73:	74 32                	je     c0002ba7 <change_bitmap+0xab>
c0002b75:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b79:	75 d8                	jne    c0002b53 <change_bitmap+0x57>
c0002b7b:	8d 46 01             	lea    eax,[esi+0x1]
c0002b7e:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b83:	89 c3                	mov    ebx,eax
c0002b85:	31 f6                	xor    esi,esi
c0002b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b8f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b95:	74 99                	je     c0002b30 <change_bitmap+0x34>
c0002b97:	89 de                	mov    esi,ebx
c0002b99:	eb b8                	jmp    c0002b53 <change_bitmap+0x57>
c0002b9b:	b9 01 00 00 00       	mov    ecx,0x1
c0002ba0:	eb 05                	jmp    c0002ba7 <change_bitmap+0xab>
c0002ba2:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba7:	83 c4 1c             	add    esp,0x1c
c0002baa:	89 c8                	mov    eax,ecx
c0002bac:	5b                   	pop    ebx
c0002bad:	5e                   	pop    esi
c0002bae:	5f                   	pop    edi
c0002baf:	5d                   	pop    ebp
c0002bb0:	c3                   	ret    

c0002bb1 <put_fat>:
c0002bb1:	83 fa 01             	cmp    edx,0x1
c0002bb4:	0f 86 7b 01 00 00    	jbe    c0002d35 <put_fat+0x184>
c0002bba:	55                   	push   ebp
c0002bbb:	57                   	push   edi
c0002bbc:	89 cf                	mov    edi,ecx
c0002bbe:	56                   	push   esi
c0002bbf:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc4:	53                   	push   ebx
c0002bc5:	89 c6                	mov    esi,eax
c0002bc7:	83 ec 1c             	sub    esp,0x1c
c0002bca:	89 d3                	mov    ebx,edx
c0002bcc:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bcf:	0f 86 68 01 00 00    	jbe    c0002d3d <put_fat+0x18c>
c0002bd5:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd7:	3c 02                	cmp    al,0x2
c0002bd9:	0f 84 c7 00 00 00    	je     c0002ca6 <put_fat+0xf5>
c0002bdf:	77 09                	ja     c0002bea <put_fat+0x39>
c0002be1:	fe c8                	dec    al
c0002be3:	74 17                	je     c0002bfc <put_fat+0x4b>
c0002be5:	e9 53 01 00 00       	jmp    c0002d3d <put_fat+0x18c>
c0002bea:	b9 02 00 00 00       	mov    ecx,0x2
c0002bef:	3c 04                	cmp    al,0x4
c0002bf1:	0f 86 e1 00 00 00    	jbe    c0002cd8 <put_fat+0x127>
c0002bf7:	e9 41 01 00 00       	jmp    c0002d3d <put_fat+0x18c>
c0002bfc:	89 d5                	mov    ebp,edx
c0002bfe:	31 c9                	xor    ecx,ecx
c0002c00:	d1 ed                	shr    ebp,1
c0002c02:	89 f0                	mov    eax,esi
c0002c04:	01 d5                	add    ebp,edx
c0002c06:	89 ea                	mov    edx,ebp
c0002c08:	c1 ea 09             	shr    edx,0x9
c0002c0b:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c0e:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c11:	e8 1e f6 ff ff       	call   c0002234 <move_window>
c0002c16:	89 c1                	mov    ecx,eax
c0002c18:	85 c0                	test   eax,eax
c0002c1a:	0f 85 1d 01 00 00    	jne    c0002d3d <put_fat+0x18c>
c0002c20:	8d 46 54             	lea    eax,[esi+0x54]
c0002c23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c27:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c2a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c34:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c38:	83 e3 01             	and    ebx,0x1
c0002c3b:	89 f8                	mov    eax,edi
c0002c3d:	74 0d                	je     c0002c4c <put_fat+0x9b>
c0002c3f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c42:	89 fa                	mov    edx,edi
c0002c44:	c1 e2 04             	shl    edx,0x4
c0002c47:	83 e0 0f             	and    eax,0xf
c0002c4a:	09 d0                	or     eax,edx
c0002c4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c50:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c53:	c1 ea 09             	shr    edx,0x9
c0002c56:	31 c9                	xor    ecx,ecx
c0002c58:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c62:	89 f0                	mov    eax,esi
c0002c64:	e8 cb f5 ff ff       	call   c0002234 <move_window>
c0002c69:	89 c1                	mov    ecx,eax
c0002c6b:	85 c0                	test   eax,eax
c0002c6d:	0f 85 ca 00 00 00    	jne    c0002d3d <put_fat+0x18c>
c0002c73:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c77:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c7d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c81:	85 db                	test   ebx,ebx
c0002c83:	74 07                	je     c0002c8c <put_fat+0xdb>
c0002c85:	c1 ef 04             	shr    edi,0x4
c0002c88:	89 fa                	mov    edx,edi
c0002c8a:	eb 0e                	jmp    c0002c9a <put_fat+0xe9>
c0002c8c:	c1 ef 08             	shr    edi,0x8
c0002c8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c92:	83 e2 f0             	and    edx,0xfffffff0
c0002c95:	83 e7 0f             	and    edi,0xf
c0002c98:	09 fa                	or     edx,edi
c0002c9a:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c9d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ca1:	e9 97 00 00 00       	jmp    c0002d3d <put_fat+0x18c>
c0002ca6:	c1 ea 08             	shr    edx,0x8
c0002ca9:	31 c9                	xor    ecx,ecx
c0002cab:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cae:	89 f0                	mov    eax,esi
c0002cb0:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cb3:	e8 7c f5 ff ff       	call   c0002234 <move_window>
c0002cb8:	89 c1                	mov    ecx,eax
c0002cba:	85 c0                	test   eax,eax
c0002cbc:	75 7f                	jne    c0002d3d <put_fat+0x18c>
c0002cbe:	01 db                	add    ebx,ebx
c0002cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc4:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cca:	0f b7 d7             	movzx  edx,di
c0002ccd:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cd1:	e8 f9 ed ff ff       	call   c0001acf <st_word>
c0002cd6:	eb 53                	jmp    c0002d2b <put_fat+0x17a>
c0002cd8:	c1 ea 07             	shr    edx,0x7
c0002cdb:	31 c9                	xor    ecx,ecx
c0002cdd:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ce0:	89 f0                	mov    eax,esi
c0002ce2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ce5:	e8 4a f5 ff ff       	call   c0002234 <move_window>
c0002cea:	89 c1                	mov    ecx,eax
c0002cec:	85 c0                	test   eax,eax
c0002cee:	75 4d                	jne    c0002d3d <put_fat+0x18c>
c0002cf0:	c1 e3 02             	shl    ebx,0x2
c0002cf3:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cfc:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d00:	74 1c                	je     c0002d1e <put_fat+0x16d>
c0002d02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d06:	89 d8                	mov    eax,ebx
c0002d08:	e8 5d ed ff ff       	call   c0001a6a <ld_dword>
c0002d0d:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d13:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1c:	09 c7                	or     edi,eax
c0002d1e:	89 fa                	mov    edx,edi
c0002d20:	89 d8                	mov    eax,ebx
c0002d22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d26:	e8 a8 ed ff ff       	call   c0001ad3 <st_dword>
c0002d2b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d33:	eb 08                	jmp    c0002d3d <put_fat+0x18c>
c0002d35:	b9 02 00 00 00       	mov    ecx,0x2
c0002d3a:	89 c8                	mov    eax,ecx
c0002d3c:	c3                   	ret    
c0002d3d:	83 c4 1c             	add    esp,0x1c
c0002d40:	89 c8                	mov    eax,ecx
c0002d42:	5b                   	pop    ebx
c0002d43:	5e                   	pop    esi
c0002d44:	5f                   	pop    edi
c0002d45:	5d                   	pop    ebp
c0002d46:	c3                   	ret    

c0002d47 <fill_last_frag>:
c0002d47:	57                   	push   edi
c0002d48:	89 cf                	mov    edi,ecx
c0002d4a:	56                   	push   esi
c0002d4b:	89 d6                	mov    esi,edx
c0002d4d:	53                   	push   ebx
c0002d4e:	89 c3                	mov    ebx,eax
c0002d50:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d53:	85 c0                	test   eax,eax
c0002d55:	74 21                	je     c0002d78 <fill_last_frag+0x31>
c0002d57:	89 f9                	mov    ecx,edi
c0002d59:	83 f8 01             	cmp    eax,0x1
c0002d5c:	76 05                	jbe    c0002d63 <fill_last_frag+0x1c>
c0002d5e:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d61:	29 c1                	sub    ecx,eax
c0002d63:	8d 56 01             	lea    edx,[esi+0x1]
c0002d66:	29 c2                	sub    edx,eax
c0002d68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d6a:	e8 42 fe ff ff       	call   c0002bb1 <put_fat>
c0002d6f:	85 c0                	test   eax,eax
c0002d71:	75 05                	jne    c0002d78 <fill_last_frag+0x31>
c0002d73:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d76:	eb d8                	jmp    c0002d50 <fill_last_frag+0x9>
c0002d78:	5b                   	pop    ebx
c0002d79:	5e                   	pop    esi
c0002d7a:	5f                   	pop    edi
c0002d7b:	c3                   	ret    

c0002d7c <fill_first_frag>:
c0002d7c:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d80:	75 2d                	jne    c0002daf <fill_first_frag+0x33>
c0002d82:	57                   	push   edi
c0002d83:	56                   	push   esi
c0002d84:	53                   	push   ebx
c0002d85:	89 c3                	mov    ebx,eax
c0002d87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d8a:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d8d:	01 d7                	add    edi,edx
c0002d8f:	39 fa                	cmp    edx,edi
c0002d91:	74 14                	je     c0002da7 <fill_first_frag+0x2b>
c0002d93:	8d 72 01             	lea    esi,[edx+0x1]
c0002d96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d98:	89 f1                	mov    ecx,esi
c0002d9a:	e8 12 fe ff ff       	call   c0002bb1 <put_fat>
c0002d9f:	89 f2                	mov    edx,esi
c0002da1:	85 c0                	test   eax,eax
c0002da3:	74 ea                	je     c0002d8f <fill_first_frag+0x13>
c0002da5:	eb 0b                	jmp    c0002db2 <fill_first_frag+0x36>
c0002da7:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002dab:	31 c0                	xor    eax,eax
c0002dad:	eb 03                	jmp    c0002db2 <fill_first_frag+0x36>
c0002daf:	31 c0                	xor    eax,eax
c0002db1:	c3                   	ret    
c0002db2:	5b                   	pop    ebx
c0002db3:	5e                   	pop    esi
c0002db4:	5f                   	pop    edi
c0002db5:	c3                   	ret    

c0002db6 <get_fat>:
c0002db6:	83 fa 01             	cmp    edx,0x1
c0002db9:	0f 86 db 01 00 00    	jbe    c0002f9a <get_fat+0x1e4>
c0002dbf:	55                   	push   ebp
c0002dc0:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc5:	57                   	push   edi
c0002dc6:	56                   	push   esi
c0002dc7:	53                   	push   ebx
c0002dc8:	83 ec 1c             	sub    esp,0x1c
c0002dcb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dcd:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dd0:	0f 86 cc 01 00 00    	jbe    c0002fa2 <get_fat+0x1ec>
c0002dd6:	89 c3                	mov    ebx,eax
c0002dd8:	8a 07                	mov    al,BYTE PTR [edi]
c0002dda:	89 d6                	mov    esi,edx
c0002ddc:	3c 02                	cmp    al,0x2
c0002dde:	0f 84 99 00 00 00    	je     c0002e7d <get_fat+0xc7>
c0002de4:	77 09                	ja     c0002def <get_fat+0x39>
c0002de6:	fe c8                	dec    al
c0002de8:	74 1a                	je     c0002e04 <get_fat+0x4e>
c0002dea:	e9 b3 01 00 00       	jmp    c0002fa2 <get_fat+0x1ec>
c0002def:	3c 03                	cmp    al,0x3
c0002df1:	0f 84 b5 00 00 00    	je     c0002eac <get_fat+0xf6>
c0002df7:	3c 04                	cmp    al,0x4
c0002df9:	0f 84 e3 00 00 00    	je     c0002ee2 <get_fat+0x12c>
c0002dff:	e9 9e 01 00 00       	jmp    c0002fa2 <get_fat+0x1ec>
c0002e04:	89 d3                	mov    ebx,edx
c0002e06:	31 c9                	xor    ecx,ecx
c0002e08:	d1 eb                	shr    ebx,1
c0002e0a:	89 f8                	mov    eax,edi
c0002e0c:	01 d3                	add    ebx,edx
c0002e0e:	89 da                	mov    edx,ebx
c0002e10:	c1 ea 09             	shr    edx,0x9
c0002e13:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e16:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e19:	e8 16 f4 ff ff       	call   c0002234 <move_window>
c0002e1e:	85 c0                	test   eax,eax
c0002e20:	74 08                	je     c0002e2a <get_fat+0x74>
c0002e22:	83 c9 ff             	or     ecx,0xffffffff
c0002e25:	e9 78 01 00 00       	jmp    c0002fa2 <get_fat+0x1ec>
c0002e2a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e2d:	31 c9                	xor    ecx,ecx
c0002e2f:	89 ea                	mov    edx,ebp
c0002e31:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e37:	c1 ea 09             	shr    edx,0x9
c0002e3a:	89 f8                	mov    eax,edi
c0002e3c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3f:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e43:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e46:	e8 e9 f3 ff ff       	call   c0002234 <move_window>
c0002e4b:	85 c0                	test   eax,eax
c0002e4d:	75 d3                	jne    c0002e22 <get_fat+0x6c>
c0002e4f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e55:	0f b6 c3             	movzx  eax,bl
c0002e58:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e5d:	c1 e3 08             	shl    ebx,0x8
c0002e60:	09 c3                	or     ebx,eax
c0002e62:	89 d9                	mov    ecx,ebx
c0002e64:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e6a:	83 e6 01             	and    esi,0x1
c0002e6d:	0f 84 2f 01 00 00    	je     c0002fa2 <get_fat+0x1ec>
c0002e73:	89 d9                	mov    ecx,ebx
c0002e75:	c1 e9 04             	shr    ecx,0x4
c0002e78:	e9 25 01 00 00       	jmp    c0002fa2 <get_fat+0x1ec>
c0002e7d:	c1 ea 08             	shr    edx,0x8
c0002e80:	31 c9                	xor    ecx,ecx
c0002e82:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e85:	89 f8                	mov    eax,edi
c0002e87:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e8a:	e8 a5 f3 ff ff       	call   c0002234 <move_window>
c0002e8f:	85 c0                	test   eax,eax
c0002e91:	75 8f                	jne    c0002e22 <get_fat+0x6c>
c0002e93:	01 f6                	add    esi,esi
c0002e95:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e9b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e9f:	e8 b9 eb ff ff       	call   c0001a5d <ld_word>
c0002ea4:	0f b7 c8             	movzx  ecx,ax
c0002ea7:	e9 f6 00 00 00       	jmp    c0002fa2 <get_fat+0x1ec>
c0002eac:	c1 ea 07             	shr    edx,0x7
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb4:	89 f8                	mov    eax,edi
c0002eb6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb9:	e8 76 f3 ff ff       	call   c0002234 <move_window>
c0002ebe:	85 c0                	test   eax,eax
c0002ec0:	0f 85 5c ff ff ff    	jne    c0002e22 <get_fat+0x6c>
c0002ec6:	c1 e6 02             	shl    esi,0x2
c0002ec9:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ecf:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ed3:	e8 92 eb ff ff       	call   c0001a6a <ld_dword>
c0002ed8:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002edd:	e9 b4 00 00 00       	jmp    c0002f96 <get_fat+0x1e0>
c0002ee2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ee8:	89 d1                	mov    ecx,edx
c0002eea:	09 c1                	or     ecx,eax
c0002eec:	74 06                	je     c0002ef4 <get_fat+0x13e>
c0002eee:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ef2:	75 0f                	jne    c0002f03 <get_fat+0x14d>
c0002ef4:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef9:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002efd:	0f 85 9f 00 00 00    	jne    c0002fa2 <get_fat+0x1ec>
c0002f03:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f07:	89 f5                	mov    ebp,esi
c0002f09:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f0e:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f11:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f14:	80 f9 02             	cmp    cl,0x2
c0002f17:	75 35                	jne    c0002f4e <get_fat+0x198>
c0002f19:	83 c0 ff             	add    eax,0xffffffff
c0002f1c:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f21:	83 d2 ff             	adc    edx,0xffffffff
c0002f24:	31 db                	xor    ebx,ebx
c0002f26:	53                   	push   ebx
c0002f27:	51                   	push   ecx
c0002f28:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f2c:	c1 ea 09             	shr    edx,0x9
c0002f2f:	52                   	push   edx
c0002f30:	50                   	push   eax
c0002f31:	e8 e6 c5 01 00       	call   c001f51c <__udivdi3>
c0002f36:	83 c4 10             	add    esp,0x10
c0002f39:	b9 01 00 00 00       	mov    ecx,0x1
c0002f3e:	39 c5                	cmp    ebp,eax
c0002f40:	77 60                	ja     c0002fa2 <get_fat+0x1ec>
c0002f42:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f47:	74 59                	je     c0002fa2 <get_fat+0x1ec>
c0002f49:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f4c:	eb 54                	jmp    c0002fa2 <get_fat+0x1ec>
c0002f4e:	80 f9 03             	cmp    cl,0x3
c0002f51:	75 05                	jne    c0002f58 <get_fat+0x1a2>
c0002f53:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f56:	77 f1                	ja     c0002f49 <get_fat+0x193>
c0002f58:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f5d:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f61:	75 3f                	jne    c0002fa2 <get_fat+0x1ec>
c0002f63:	89 f2                	mov    edx,esi
c0002f65:	31 c9                	xor    ecx,ecx
c0002f67:	c1 ea 07             	shr    edx,0x7
c0002f6a:	89 f8                	mov    eax,edi
c0002f6c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f72:	e8 bd f2 ff ff       	call   c0002234 <move_window>
c0002f77:	85 c0                	test   eax,eax
c0002f79:	0f 85 a3 fe ff ff    	jne    c0002e22 <get_fat+0x6c>
c0002f7f:	c1 e6 02             	shl    esi,0x2
c0002f82:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f88:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f8c:	e8 d9 ea ff ff       	call   c0001a6a <ld_dword>
c0002f91:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f96:	89 c1                	mov    ecx,eax
c0002f98:	eb 08                	jmp    c0002fa2 <get_fat+0x1ec>
c0002f9a:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9f:	89 c8                	mov    eax,ecx
c0002fa1:	c3                   	ret    
c0002fa2:	83 c4 1c             	add    esp,0x1c
c0002fa5:	89 c8                	mov    eax,ecx
c0002fa7:	5b                   	pop    ebx
c0002fa8:	5e                   	pop    esi
c0002fa9:	5f                   	pop    edi
c0002faa:	5d                   	pop    ebp
c0002fab:	c3                   	ret    

c0002fac <dir_sdi>:
c0002fac:	55                   	push   ebp
c0002fad:	57                   	push   edi
c0002fae:	56                   	push   esi
c0002faf:	53                   	push   ebx
c0002fb0:	89 c3                	mov    ebx,eax
c0002fb2:	83 ec 1c             	sub    esp,0x1c
c0002fb5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb7:	31 c0                	xor    eax,eax
c0002fb9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fbc:	0f 94 c0             	sete   al
c0002fbf:	48                   	dec    eax
c0002fc0:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fc5:	05 00 00 00 10       	add    eax,0x10000000
c0002fca:	39 d0                	cmp    eax,edx
c0002fcc:	77 0a                	ja     c0002fd8 <dir_sdi+0x2c>
c0002fce:	b8 02 00 00 00       	mov    eax,0x2
c0002fd3:	e9 c4 00 00 00       	jmp    c000309c <dir_sdi+0xf0>
c0002fd8:	89 d6                	mov    esi,edx
c0002fda:	f6 c2 1f             	test   dl,0x1f
c0002fdd:	75 ef                	jne    c0002fce <dir_sdi+0x22>
c0002fdf:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fe2:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fe5:	85 c9                	test   ecx,ecx
c0002fe7:	75 2d                	jne    c0003016 <dir_sdi+0x6a>
c0002fe9:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fec:	77 1b                	ja     c0003009 <dir_sdi+0x5d>
c0002fee:	89 f2                	mov    edx,esi
c0002ff0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002ff4:	c1 ea 05             	shr    edx,0x5
c0002ff7:	39 c2                	cmp    edx,eax
c0002ff9:	73 d3                	jae    c0002fce <dir_sdi+0x22>
c0002ffb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffe:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003001:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003004:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003007:	eb 4b                	jmp    c0003054 <dir_sdi+0xa8>
c0003009:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000300c:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003010:	85 c0                	test   eax,eax
c0003012:	74 da                	je     c0002fee <dir_sdi+0x42>
c0003014:	89 c1                	mov    ecx,eax
c0003016:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000301a:	c1 e5 09             	shl    ebp,0x9
c000301d:	89 ca                	mov    edx,ecx
c000301f:	39 ee                	cmp    esi,ebp
c0003021:	72 1c                	jb     c000303f <dir_sdi+0x93>
c0003023:	89 d8                	mov    eax,ebx
c0003025:	e8 8c fd ff ff       	call   c0002db6 <get_fat>
c000302a:	89 c1                	mov    ecx,eax
c000302c:	83 f8 ff             	cmp    eax,0xffffffff
c000302f:	74 66                	je     c0003097 <dir_sdi+0xeb>
c0003031:	83 f8 01             	cmp    eax,0x1
c0003034:	76 98                	jbe    c0002fce <dir_sdi+0x22>
c0003036:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003039:	76 93                	jbe    c0002fce <dir_sdi+0x22>
c000303b:	29 ee                	sub    esi,ebp
c000303d:	eb de                	jmp    c000301d <dir_sdi+0x71>
c000303f:	89 f8                	mov    eax,edi
c0003041:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003045:	e8 ac ec ff ff       	call   c0001cf6 <clst2sect>
c000304a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000304e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003051:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003054:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003057:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000305a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000305d:	89 d1                	mov    ecx,edx
c000305f:	09 c1                	or     ecx,eax
c0003061:	0f 84 67 ff ff ff    	je     c0002fce <dir_sdi+0x22>
c0003067:	89 f1                	mov    ecx,esi
c0003069:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003071:	c1 e9 09             	shr    ecx,0x9
c0003074:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003078:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000307c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003080:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003086:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003089:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003090:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003093:	31 c0                	xor    eax,eax
c0003095:	eb 05                	jmp    c000309c <dir_sdi+0xf0>
c0003097:	b8 01 00 00 00       	mov    eax,0x1
c000309c:	83 c4 1c             	add    esp,0x1c
c000309f:	5b                   	pop    ebx
c00030a0:	5e                   	pop    esi
c00030a1:	5f                   	pop    edi
c00030a2:	5d                   	pop    ebp
c00030a3:	c3                   	ret    

c00030a4 <create_chain>:
c00030a4:	55                   	push   ebp
c00030a5:	89 c5                	mov    ebp,eax
c00030a7:	57                   	push   edi
c00030a8:	56                   	push   esi
c00030a9:	53                   	push   ebx
c00030aa:	83 ec 1c             	sub    esp,0x1c
c00030ad:	85 d2                	test   edx,edx
c00030af:	8b 30                	mov    esi,DWORD PTR [eax]
c00030b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030b5:	75 0e                	jne    c00030c5 <create_chain+0x21>
c00030b7:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030ba:	85 ff                	test   edi,edi
c00030bc:	74 39                	je     c00030f7 <create_chain+0x53>
c00030be:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030c1:	77 39                	ja     c00030fc <create_chain+0x58>
c00030c3:	eb 32                	jmp    c00030f7 <create_chain+0x53>
c00030c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c9:	e8 e8 fc ff ff       	call   c0002db6 <get_fat>
c00030ce:	89 c3                	mov    ebx,eax
c00030d0:	83 f8 01             	cmp    eax,0x1
c00030d3:	77 0a                	ja     c00030df <create_chain+0x3b>
c00030d5:	bb 01 00 00 00       	mov    ebx,0x1
c00030da:	e9 bc 01 00 00       	jmp    c000329b <create_chain+0x1f7>
c00030df:	83 f8 ff             	cmp    eax,0xffffffff
c00030e2:	0f 84 60 01 00 00    	je     c0003248 <create_chain+0x1a4>
c00030e8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030eb:	0f 87 aa 01 00 00    	ja     c000329b <create_chain+0x1f7>
c00030f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030f5:	eb 05                	jmp    c00030fc <create_chain+0x58>
c00030f7:	bf 01 00 00 00       	mov    edi,0x1
c00030fc:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003100:	75 07                	jne    c0003109 <create_chain+0x65>
c0003102:	31 db                	xor    ebx,ebx
c0003104:	e9 92 01 00 00       	jmp    c000329b <create_chain+0x1f7>
c0003109:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000310c:	75 74                	jne    c0003182 <create_chain+0xde>
c000310e:	b9 01 00 00 00       	mov    ecx,0x1
c0003113:	89 fa                	mov    edx,edi
c0003115:	89 f0                	mov    eax,esi
c0003117:	e8 2d f9 ff ff       	call   c0002a49 <find_bitmap>
c000311c:	89 c3                	mov    ebx,eax
c000311e:	8d 40 ff             	lea    eax,[eax-0x1]
c0003121:	83 f8 fd             	cmp    eax,0xfffffffd
c0003124:	0f 87 71 01 00 00    	ja     c000329b <create_chain+0x1f7>
c000312a:	83 ec 0c             	sub    esp,0xc
c000312d:	b9 01 00 00 00       	mov    ecx,0x1
c0003132:	89 da                	mov    edx,ebx
c0003134:	89 f0                	mov    eax,esi
c0003136:	6a 01                	push   0x1
c0003138:	e8 bf f9 ff ff       	call   c0002afc <change_bitmap>
c000313d:	83 c4 10             	add    esp,0x10
c0003140:	83 f8 02             	cmp    eax,0x2
c0003143:	74 90                	je     c00030d5 <create_chain+0x31>
c0003145:	83 f8 01             	cmp    eax,0x1
c0003148:	0f 84 fa 00 00 00    	je     c0003248 <create_chain+0x1a4>
c000314e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003153:	75 09                	jne    c000315e <create_chain+0xba>
c0003155:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003159:	e9 0e 01 00 00       	jmp    c000326c <create_chain+0x1c8>
c000315e:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003162:	0f 85 e9 00 00 00    	jne    c0003251 <create_chain+0x1ad>
c0003168:	8d 57 01             	lea    edx,[edi+0x1]
c000316b:	39 da                	cmp    edx,ebx
c000316d:	0f 84 f9 00 00 00    	je     c000326c <create_chain+0x1c8>
c0003173:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003176:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000317a:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000317d:	e9 cf 00 00 00       	jmp    c0003251 <create_chain+0x1ad>
c0003182:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003186:	75 41                	jne    c00031c9 <create_chain+0x125>
c0003188:	8d 5f 01             	lea    ebx,[edi+0x1]
c000318b:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000318e:	77 05                	ja     c0003195 <create_chain+0xf1>
c0003190:	bb 02 00 00 00       	mov    ebx,0x2
c0003195:	89 da                	mov    edx,ebx
c0003197:	89 e8                	mov    eax,ebp
c0003199:	e8 18 fc ff ff       	call   c0002db6 <get_fat>
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	0f 84 a6 00 00 00    	je     c000324d <create_chain+0x1a9>
c00031a7:	83 f8 ff             	cmp    eax,0xffffffff
c00031aa:	0f 84 9d 00 00 00    	je     c000324d <create_chain+0x1a9>
c00031b0:	85 c0                	test   eax,eax
c00031b2:	74 11                	je     c00031c5 <create_chain+0x121>
c00031b4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b7:	83 f8 01             	cmp    eax,0x1
c00031ba:	76 0d                	jbe    c00031c9 <create_chain+0x125>
c00031bc:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031bf:	76 08                	jbe    c00031c9 <create_chain+0x125>
c00031c1:	89 c7                	mov    edi,eax
c00031c3:	eb 04                	jmp    c00031c9 <create_chain+0x125>
c00031c5:	85 db                	test   ebx,ebx
c00031c7:	75 36                	jne    c00031ff <create_chain+0x15b>
c00031c9:	89 fb                	mov    ebx,edi
c00031cb:	43                   	inc    ebx
c00031cc:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031cf:	77 0e                	ja     c00031df <create_chain+0x13b>
c00031d1:	83 ff 01             	cmp    edi,0x1
c00031d4:	0f 86 28 ff ff ff    	jbe    c0003102 <create_chain+0x5e>
c00031da:	bb 02 00 00 00       	mov    ebx,0x2
c00031df:	89 da                	mov    edx,ebx
c00031e1:	89 e8                	mov    eax,ebp
c00031e3:	e8 ce fb ff ff       	call   c0002db6 <get_fat>
c00031e8:	85 c0                	test   eax,eax
c00031ea:	74 13                	je     c00031ff <create_chain+0x15b>
c00031ec:	83 f8 01             	cmp    eax,0x1
c00031ef:	74 5c                	je     c000324d <create_chain+0x1a9>
c00031f1:	83 f8 ff             	cmp    eax,0xffffffff
c00031f4:	74 57                	je     c000324d <create_chain+0x1a9>
c00031f6:	39 fb                	cmp    ebx,edi
c00031f8:	75 d1                	jne    c00031cb <create_chain+0x127>
c00031fa:	e9 03 ff ff ff       	jmp    c0003102 <create_chain+0x5e>
c00031ff:	83 c9 ff             	or     ecx,0xffffffff
c0003202:	89 da                	mov    edx,ebx
c0003204:	89 f0                	mov    eax,esi
c0003206:	e8 a6 f9 ff ff       	call   c0002bb1 <put_fat>
c000320b:	85 c0                	test   eax,eax
c000320d:	75 14                	jne    c0003223 <create_chain+0x17f>
c000320f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003214:	74 0d                	je     c0003223 <create_chain+0x17f>
c0003216:	89 d9                	mov    ecx,ebx
c0003218:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000321c:	89 f0                	mov    eax,esi
c000321e:	e8 8e f9 ff ff       	call   c0002bb1 <put_fat>
c0003223:	85 c0                	test   eax,eax
c0003225:	75 1a                	jne    c0003241 <create_chain+0x19d>
c0003227:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000322a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000322d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003230:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003233:	39 d0                	cmp    eax,edx
c0003235:	77 04                	ja     c000323b <create_chain+0x197>
c0003237:	48                   	dec    eax
c0003238:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000323b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323f:	eb 5a                	jmp    c000329b <create_chain+0x1f7>
c0003241:	48                   	dec    eax
c0003242:	0f 85 8d fe ff ff    	jne    c00030d5 <create_chain+0x31>
c0003248:	83 cb ff             	or     ebx,0xffffffff
c000324b:	eb 4e                	jmp    c000329b <create_chain+0x1f7>
c000324d:	89 c3                	mov    ebx,eax
c000324f:	eb 4a                	jmp    c000329b <create_chain+0x1f7>
c0003251:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003255:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003258:	41                   	inc    ecx
c0003259:	39 d9                	cmp    ecx,ebx
c000325b:	75 19                	jne    c0003276 <create_chain+0x1d2>
c000325d:	b9 02 00 00 00       	mov    ecx,0x2
c0003262:	85 d2                	test   edx,edx
c0003264:	74 03                	je     c0003269 <create_chain+0x1c5>
c0003266:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003269:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000326c:	85 c0                	test   eax,eax
c000326e:	0f 85 61 fe ff ff    	jne    c00030d5 <create_chain+0x31>
c0003274:	eb b1                	jmp    c0003227 <create_chain+0x183>
c0003276:	85 d2                	test   edx,edx
c0003278:	75 07                	jne    c0003281 <create_chain+0x1dd>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	89 d9                	mov    ecx,ebx
c0003283:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003287:	89 e8                	mov    eax,ebp
c0003289:	e8 b9 fa ff ff       	call   c0002d47 <fill_last_frag>
c000328e:	85 c0                	test   eax,eax
c0003290:	75 af                	jne    c0003241 <create_chain+0x19d>
c0003292:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003299:	eb 8c                	jmp    c0003227 <create_chain+0x183>
c000329b:	83 c4 1c             	add    esp,0x1c
c000329e:	89 d8                	mov    eax,ebx
c00032a0:	5b                   	pop    ebx
c00032a1:	5e                   	pop    esi
c00032a2:	5f                   	pop    edi
c00032a3:	5d                   	pop    ebp
c00032a4:	c3                   	ret    

c00032a5 <remove_chain>:
c00032a5:	55                   	push   ebp
c00032a6:	57                   	push   edi
c00032a7:	56                   	push   esi
c00032a8:	53                   	push   ebx
c00032a9:	83 ec 1c             	sub    esp,0x1c
c00032ac:	83 fa 01             	cmp    edx,0x1
c00032af:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032b5:	77 0a                	ja     c00032c1 <remove_chain+0x1c>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	e9 24 01 00 00       	jmp    c00033e5 <remove_chain+0x140>
c00032c1:	89 d6                	mov    esi,edx
c00032c3:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032c6:	76 ef                	jbe    c00032b7 <remove_chain+0x12>
c00032c8:	89 c7                	mov    edi,eax
c00032ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032cf:	75 06                	jne    c00032d7 <remove_chain+0x32>
c00032d1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032d5:	eb 54                	jmp    c000332b <remove_chain+0x86>
c00032d7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032da:	75 06                	jne    c00032e2 <remove_chain+0x3d>
c00032dc:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032e0:	74 ef                	je     c00032d1 <remove_chain+0x2c>
c00032e2:	83 c9 ff             	or     ecx,0xffffffff
c00032e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e9:	89 d8                	mov    eax,ebx
c00032eb:	e8 c1 f8 ff ff       	call   c0002bb1 <put_fat>
c00032f0:	85 c0                	test   eax,eax
c00032f2:	74 dd                	je     c00032d1 <remove_chain+0x2c>
c00032f4:	e9 ec 00 00 00       	jmp    c00033e5 <remove_chain+0x140>
c00032f9:	83 f8 01             	cmp    eax,0x1
c00032fc:	74 b9                	je     c00032b7 <remove_chain+0x12>
c00032fe:	83 f8 ff             	cmp    eax,0xffffffff
c0003301:	74 6d                	je     c0003370 <remove_chain+0xcb>
c0003303:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003306:	75 6f                	jne    c0003377 <remove_chain+0xd2>
c0003308:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000330b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000330e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003311:	39 d0                	cmp    eax,edx
c0003313:	73 08                	jae    c000331d <remove_chain+0x78>
c0003315:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003319:	40                   	inc    eax
c000331a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000331d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003320:	39 e9                	cmp    ecx,ebp
c0003322:	75 64                	jne    c0003388 <remove_chain+0xe3>
c0003324:	89 ee                	mov    esi,ebp
c0003326:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003329:	76 0f                	jbe    c000333a <remove_chain+0x95>
c000332b:	89 f2                	mov    edx,esi
c000332d:	89 f8                	mov    eax,edi
c000332f:	e8 82 fa ff ff       	call   c0002db6 <get_fat>
c0003334:	89 c5                	mov    ebp,eax
c0003336:	85 c0                	test   eax,eax
c0003338:	75 bf                	jne    c00032f9 <remove_chain+0x54>
c000333a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333d:	0f 85 a0 00 00 00    	jne    c00033e3 <remove_chain+0x13e>
c0003343:	eb 6c                	jmp    c00033b1 <remove_chain+0x10c>
c0003345:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003348:	84 c0                	test   al,al
c000334a:	75 7d                	jne    c00033c9 <remove_chain+0x124>
c000334c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000334f:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003353:	0f 84 86 00 00 00    	je     c00033df <remove_chain+0x13a>
c0003359:	89 da                	mov    edx,ebx
c000335b:	89 f8                	mov    eax,edi
c000335d:	e8 54 fa ff ff       	call   c0002db6 <get_fat>
c0003362:	83 f8 01             	cmp    eax,0x1
c0003365:	0f 86 4c ff ff ff    	jbe    c00032b7 <remove_chain+0x12>
c000336b:	83 f8 ff             	cmp    eax,0xffffffff
c000336e:	75 4e                	jne    c00033be <remove_chain+0x119>
c0003370:	b8 01 00 00 00       	mov    eax,0x1
c0003375:	eb 6e                	jmp    c00033e5 <remove_chain+0x140>
c0003377:	31 c9                	xor    ecx,ecx
c0003379:	89 f2                	mov    edx,esi
c000337b:	89 d8                	mov    eax,ebx
c000337d:	e8 2f f8 ff ff       	call   c0002bb1 <put_fat>
c0003382:	85 c0                	test   eax,eax
c0003384:	74 82                	je     c0003308 <remove_chain+0x63>
c0003386:	eb 5d                	jmp    c00033e5 <remove_chain+0x140>
c0003388:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000338b:	75 1b                	jne    c00033a8 <remove_chain+0x103>
c000338d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003391:	83 ec 0c             	sub    esp,0xc
c0003394:	6a 00                	push   0x0
c0003396:	89 d8                	mov    eax,ebx
c0003398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000339c:	e8 5b f7 ff ff       	call   c0002afc <change_bitmap>
c00033a1:	83 c4 10             	add    esp,0x10
c00033a4:	85 c0                	test   eax,eax
c00033a6:	75 3d                	jne    c00033e5 <remove_chain+0x140>
c00033a8:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033ac:	e9 73 ff ff ff       	jmp    c0003324 <remove_chain+0x7f>
c00033b1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033b6:	75 8d                	jne    c0003345 <remove_chain+0xa0>
c00033b8:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033bc:	eb 25                	jmp    c00033e3 <remove_chain+0x13e>
c00033be:	8d 53 01             	lea    edx,[ebx+0x1]
c00033c1:	89 c3                	mov    ebx,eax
c00033c3:	39 c2                	cmp    edx,eax
c00033c5:	74 88                	je     c000334f <remove_chain+0xaa>
c00033c7:	eb 1a                	jmp    c00033e3 <remove_chain+0x13e>
c00033c9:	3c 03                	cmp    al,0x3
c00033cb:	75 16                	jne    c00033e3 <remove_chain+0x13e>
c00033cd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033d0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d4:	77 0d                	ja     c00033e3 <remove_chain+0x13e>
c00033d6:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033dd:	72 04                	jb     c00033e3 <remove_chain+0x13e>
c00033df:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033e3:	31 c0                	xor    eax,eax
c00033e5:	83 c4 1c             	add    esp,0x1c
c00033e8:	5b                   	pop    ebx
c00033e9:	5e                   	pop    esi
c00033ea:	5f                   	pop    edi
c00033eb:	5d                   	pop    ebp
c00033ec:	c3                   	ret    

c00033ed <dir_clear>:
c00033ed:	55                   	push   ebp
c00033ee:	57                   	push   edi
c00033ef:	56                   	push   esi
c00033f0:	89 c6                	mov    esi,eax
c00033f2:	53                   	push   ebx
c00033f3:	83 ec 1c             	sub    esp,0x1c
c00033f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033fa:	e8 a1 ed ff ff       	call   c00021a0 <sync_window>
c00033ff:	85 c0                	test   eax,eax
c0003401:	0f 85 de 00 00 00    	jne    c00034e5 <dir_clear+0xf8>
c0003407:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000340b:	89 f0                	mov    eax,esi
c000340d:	e8 e4 e8 ff ff       	call   c0001cf6 <clst2sect>
c0003412:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341d:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003420:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003423:	b9 00 02 00 00       	mov    ecx,0x200
c0003428:	31 d2                	xor    edx,edx
c000342a:	89 e8                	mov    eax,ebp
c000342c:	e8 c0 e6 ff ff       	call   c0001af1 <mem_set>
c0003431:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003435:	c1 e3 09             	shl    ebx,0x9
c0003438:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000343e:	76 1f                	jbe    c000345f <dir_clear+0x72>
c0003440:	bb 00 80 00 00       	mov    ebx,0x8000
c0003445:	eb 18                	jmp    c000345f <dir_clear+0x72>
c0003447:	83 ec 0c             	sub    esp,0xc
c000344a:	53                   	push   ebx
c000344b:	e8 f3 4d 00 00       	call   c0008243 <ff_memalloc>
c0003450:	83 c4 10             	add    esp,0x10
c0003453:	89 c7                	mov    edi,eax
c0003455:	85 c0                	test   eax,eax
c0003457:	0f 85 8f 00 00 00    	jne    c00034ec <dir_clear+0xff>
c000345d:	d1 eb                	shr    ebx,1
c000345f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003465:	77 e0                	ja     c0003447 <dir_clear+0x5a>
c0003467:	31 db                	xor    ebx,ebx
c0003469:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000346d:	39 d8                	cmp    eax,ebx
c000346f:	76 66                	jbe    c00034d7 <dir_clear+0xea>
c0003471:	83 ec 0c             	sub    esp,0xc
c0003474:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003478:	6a 01                	push   0x1
c000347a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003482:	55                   	push   ebp
c0003483:	50                   	push   eax
c0003484:	e8 9f e5 ff ff       	call   c0001a28 <disk_write>
c0003489:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000348e:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003493:	83 c4 20             	add    esp,0x20
c0003496:	85 c0                	test   eax,eax
c0003498:	75 3d                	jne    c00034d7 <dir_clear+0xea>
c000349a:	43                   	inc    ebx
c000349b:	eb cc                	jmp    c0003469 <dir_clear+0x7c>
c000349d:	83 ec 0c             	sub    esp,0xc
c00034a0:	89 d8                	mov    eax,ebx
c00034a2:	31 d2                	xor    edx,edx
c00034a4:	55                   	push   ebp
c00034a5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034ad:	52                   	push   edx
c00034ae:	50                   	push   eax
c00034af:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034b3:	57                   	push   edi
c00034b4:	50                   	push   eax
c00034b5:	e8 6e e5 ff ff       	call   c0001a28 <disk_write>
c00034ba:	83 c4 20             	add    esp,0x20
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 0a                	jne    c00034cb <dir_clear+0xde>
c00034c1:	01 eb                	add    ebx,ebp
c00034c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c7:	39 d8                	cmp    eax,ebx
c00034c9:	77 d2                	ja     c000349d <dir_clear+0xb0>
c00034cb:	83 ec 0c             	sub    esp,0xc
c00034ce:	57                   	push   edi
c00034cf:	e8 85 4d 00 00       	call   c0008259 <ff_memfree>
c00034d4:	83 c4 10             	add    esp,0x10
c00034d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034db:	39 d8                	cmp    eax,ebx
c00034dd:	0f 95 c0             	setne  al
c00034e0:	0f b6 c0             	movzx  eax,al
c00034e3:	eb 19                	jmp    c00034fe <dir_clear+0x111>
c00034e5:	b8 01 00 00 00       	mov    eax,0x1
c00034ea:	eb 12                	jmp    c00034fe <dir_clear+0x111>
c00034ec:	89 d9                	mov    ecx,ebx
c00034ee:	31 d2                	xor    edx,edx
c00034f0:	c1 eb 09             	shr    ebx,0x9
c00034f3:	e8 f9 e5 ff ff       	call   c0001af1 <mem_set>
c00034f8:	89 dd                	mov    ebp,ebx
c00034fa:	31 db                	xor    ebx,ebx
c00034fc:	eb c5                	jmp    c00034c3 <dir_clear+0xd6>
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_next>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	53                   	push   ebx
c000350a:	89 c3                	mov    ebx,eax
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003511:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003514:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003518:	8d 78 20             	lea    edi,[eax+0x20]
c000351b:	31 c0                	xor    eax,eax
c000351d:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003521:	0f 94 c0             	sete   al
c0003524:	48                   	dec    eax
c0003525:	25 00 00 20 f0       	and    eax,0xf0200000
c000352a:	05 00 00 00 10       	add    eax,0x10000000
c000352f:	39 f8                	cmp    eax,edi
c0003531:	77 0e                	ja     c0003541 <dir_next+0x3b>
c0003533:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000353a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003541:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003544:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003547:	89 ce                	mov    esi,ecx
c0003549:	b8 04 00 00 00       	mov    eax,0x4
c000354e:	09 d6                	or     esi,edx
c0003550:	0f 84 da 00 00 00    	je     c0003630 <dir_next+0x12a>
c0003556:	89 f8                	mov    eax,edi
c0003558:	25 ff 01 00 00       	and    eax,0x1ff
c000355d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003561:	0f 85 b9 00 00 00    	jne    c0003620 <dir_next+0x11a>
c0003567:	83 c2 01             	add    edx,0x1
c000356a:	83 d1 00             	adc    ecx,0x0
c000356d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003570:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003573:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003576:	85 d2                	test   edx,edx
c0003578:	75 29                	jne    c00035a3 <dir_next+0x9d>
c000357a:	89 fa                	mov    edx,edi
c000357c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003580:	c1 ea 05             	shr    edx,0x5
c0003583:	39 c2                	cmp    edx,eax
c0003585:	0f 82 95 00 00 00    	jb     c0003620 <dir_next+0x11a>
c000358b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003592:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003599:	b8 04 00 00 00       	mov    eax,0x4
c000359e:	e9 8d 00 00 00       	jmp    c0003630 <dir_next+0x12a>
c00035a3:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035a7:	89 f9                	mov    ecx,edi
c00035a9:	48                   	dec    eax
c00035aa:	c1 e9 09             	shr    ecx,0x9
c00035ad:	85 c8                	test   eax,ecx
c00035af:	75 6f                	jne    c0003620 <dir_next+0x11a>
c00035b1:	89 d8                	mov    eax,ebx
c00035b3:	e8 fe f7 ff ff       	call   c0002db6 <get_fat>
c00035b8:	89 c6                	mov    esi,eax
c00035ba:	83 f8 01             	cmp    eax,0x1
c00035bd:	77 07                	ja     c00035c6 <dir_next+0xc0>
c00035bf:	b8 02 00 00 00       	mov    eax,0x2
c00035c4:	eb 6a                	jmp    c0003630 <dir_next+0x12a>
c00035c6:	83 f8 ff             	cmp    eax,0xffffffff
c00035c9:	75 07                	jne    c00035d2 <dir_next+0xcc>
c00035cb:	b8 01 00 00 00       	mov    eax,0x1
c00035d0:	eb 5e                	jmp    c0003630 <dir_next+0x12a>
c00035d2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035d5:	77 37                	ja     c000360e <dir_next+0x108>
c00035d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035dc:	74 ad                	je     c000358b <dir_next+0x85>
c00035de:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035e1:	89 d8                	mov    eax,ebx
c00035e3:	e8 bc fa ff ff       	call   c00030a4 <create_chain>
c00035e8:	89 c6                	mov    esi,eax
c00035ea:	b8 07 00 00 00       	mov    eax,0x7
c00035ef:	85 f6                	test   esi,esi
c00035f1:	74 3d                	je     c0003630 <dir_next+0x12a>
c00035f3:	83 fe 01             	cmp    esi,0x1
c00035f6:	74 c7                	je     c00035bf <dir_next+0xb9>
c00035f8:	83 fe ff             	cmp    esi,0xffffffff
c00035fb:	74 ce                	je     c00035cb <dir_next+0xc5>
c00035fd:	89 f2                	mov    edx,esi
c00035ff:	89 e8                	mov    eax,ebp
c0003601:	e8 e7 fd ff ff       	call   c00033ed <dir_clear>
c0003606:	85 c0                	test   eax,eax
c0003608:	75 c1                	jne    c00035cb <dir_next+0xc5>
c000360a:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000360e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003611:	89 f2                	mov    edx,esi
c0003613:	89 e8                	mov    eax,ebp
c0003615:	e8 dc e6 ff ff       	call   c0001cf6 <clst2sect>
c000361a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000361d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003624:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003627:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000362b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000362e:	31 c0                	xor    eax,eax
c0003630:	83 c4 1c             	add    esp,0x1c
c0003633:	5b                   	pop    ebx
c0003634:	5e                   	pop    esi
c0003635:	5f                   	pop    edi
c0003636:	5d                   	pop    ebp
c0003637:	c3                   	ret    

c0003638 <load_xdir>:
c0003638:	55                   	push   ebp
c0003639:	57                   	push   edi
c000363a:	56                   	push   esi
c000363b:	89 c6                	mov    esi,eax
c000363d:	53                   	push   ebx
c000363e:	83 ec 1c             	sub    esp,0x1c
c0003641:	8b 00                	mov    eax,DWORD PTR [eax]
c0003643:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003646:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003649:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000364c:	e8 e3 eb ff ff       	call   c0002234 <move_window>
c0003651:	89 c3                	mov    ebx,eax
c0003653:	85 c0                	test   eax,eax
c0003655:	0f 85 0c 01 00 00    	jne    c0003767 <load_xdir+0x12f>
c000365b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003661:	0f 85 fb 00 00 00    	jne    c0003762 <load_xdir+0x12a>
c0003667:	89 f8                	mov    eax,edi
c0003669:	b9 20 00 00 00       	mov    ecx,0x20
c000366e:	e8 69 e4 ff ff       	call   c0001adc <mem_cpy>
c0003673:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003677:	40                   	inc    eax
c0003678:	c1 e0 05             	shl    eax,0x5
c000367b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000367f:	83 e8 60             	sub    eax,0x60
c0003682:	3d 00 02 00 00       	cmp    eax,0x200
c0003687:	0f 87 d5 00 00 00    	ja     c0003762 <load_xdir+0x12a>
c000368d:	31 d2                	xor    edx,edx
c000368f:	89 f0                	mov    eax,esi
c0003691:	e8 70 fe ff ff       	call   c0003506 <dir_next>
c0003696:	89 c3                	mov    ebx,eax
c0003698:	83 f8 04             	cmp    eax,0x4
c000369b:	0f 84 c1 00 00 00    	je     c0003762 <load_xdir+0x12a>
c00036a1:	85 c0                	test   eax,eax
c00036a3:	0f 85 be 00 00 00    	jne    c0003767 <load_xdir+0x12f>
c00036a9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036ac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036af:	8b 06                	mov    eax,DWORD PTR [esi]
c00036b1:	e8 7e eb ff ff       	call   c0002234 <move_window>
c00036b6:	89 c3                	mov    ebx,eax
c00036b8:	85 c0                	test   eax,eax
c00036ba:	0f 85 a7 00 00 00    	jne    c0003767 <load_xdir+0x12f>
c00036c0:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036c3:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036c6:	0f 85 96 00 00 00    	jne    c0003762 <load_xdir+0x12a>
c00036cc:	8d 47 20             	lea    eax,[edi+0x20]
c00036cf:	b9 20 00 00 00       	mov    ecx,0x20
c00036d4:	e8 03 e4 ff ff       	call   c0001adc <mem_cpy>
c00036d9:	31 d2                	xor    edx,edx
c00036db:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036df:	b9 0f 00 00 00       	mov    ecx,0xf
c00036e4:	83 c0 2c             	add    eax,0x2c
c00036e7:	f7 f1                	div    ecx
c00036e9:	c1 e0 05             	shl    eax,0x5
c00036ec:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036f0:	77 70                	ja     c0003762 <load_xdir+0x12a>
c00036f2:	bd 40 00 00 00       	mov    ebp,0x40
c00036f7:	31 d2                	xor    edx,edx
c00036f9:	89 f0                	mov    eax,esi
c00036fb:	e8 06 fe ff ff       	call   c0003506 <dir_next>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	83 f8 04             	cmp    eax,0x4
c0003705:	74 5b                	je     c0003762 <load_xdir+0x12a>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 5c                	jne    c0003767 <load_xdir+0x12f>
c000370b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000370e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003711:	8b 06                	mov    eax,DWORD PTR [esi]
c0003713:	e8 1c eb ff ff       	call   c0002234 <move_window>
c0003718:	89 c3                	mov    ebx,eax
c000371a:	85 c0                	test   eax,eax
c000371c:	75 49                	jne    c0003767 <load_xdir+0x12f>
c000371e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003721:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003724:	75 3c                	jne    c0003762 <load_xdir+0x12a>
c0003726:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000372c:	77 0d                	ja     c000373b <load_xdir+0x103>
c000372e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003731:	b9 20 00 00 00       	mov    ecx,0x20
c0003736:	e8 a1 e3 ff ff       	call   c0001adc <mem_cpy>
c000373b:	83 c5 20             	add    ebp,0x20
c000373e:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003742:	77 b3                	ja     c00036f7 <load_xdir+0xbf>
c0003744:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000374a:	77 1b                	ja     c0003767 <load_xdir+0x12f>
c000374c:	89 f8                	mov    eax,edi
c000374e:	e8 d8 e7 ff ff       	call   c0001f2b <xdir_sum>
c0003753:	89 c1                	mov    ecx,eax
c0003755:	8d 47 02             	lea    eax,[edi+0x2]
c0003758:	e8 00 e3 ff ff       	call   c0001a5d <ld_word>
c000375d:	66 39 c1             	cmp    cx,ax
c0003760:	74 05                	je     c0003767 <load_xdir+0x12f>
c0003762:	bb 02 00 00 00       	mov    ebx,0x2
c0003767:	83 c4 1c             	add    esp,0x1c
c000376a:	89 d8                	mov    eax,ebx
c000376c:	5b                   	pop    ebx
c000376d:	5e                   	pop    esi
c000376e:	5f                   	pop    edi
c000376f:	5d                   	pop    ebp
c0003770:	c3                   	ret    

c0003771 <load_obj_xdir>:
c0003771:	53                   	push   ebx
c0003772:	89 c3                	mov    ebx,eax
c0003774:	83 ec 08             	sub    esp,0x8
c0003777:	8b 02                	mov    eax,DWORD PTR [edx]
c0003779:	89 03                	mov    DWORD PTR [ebx],eax
c000377b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000377e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003781:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003784:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003787:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000378a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003791:	30 c0                	xor    al,al
c0003793:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000379a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000379d:	89 d8                	mov    eax,ebx
c000379f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037a2:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037a5:	e8 02 f8 ff ff       	call   c0002fac <dir_sdi>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	75 0b                	jne    c00037b9 <load_obj_xdir+0x48>
c00037ae:	83 c4 08             	add    esp,0x8
c00037b1:	89 d8                	mov    eax,ebx
c00037b3:	5b                   	pop    ebx
c00037b4:	e9 7f fe ff ff       	jmp    c0003638 <load_xdir>
c00037b9:	83 c4 08             	add    esp,0x8
c00037bc:	5b                   	pop    ebx
c00037bd:	c3                   	ret    

c00037be <dir_read>:
c00037be:	55                   	push   ebp
c00037bf:	bd 04 00 00 00       	mov    ebp,0x4
c00037c4:	57                   	push   edi
c00037c5:	56                   	push   esi
c00037c6:	be ff ff ff ff       	mov    esi,0xffffffff
c00037cb:	53                   	push   ebx
c00037cc:	89 c3                	mov    ebx,eax
c00037ce:	83 ec 1c             	sub    esp,0x1c
c00037d1:	8b 38                	mov    edi,DWORD PTR [eax]
c00037d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037d7:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037e2:	89 c8                	mov    eax,ecx
c00037e4:	09 d0                	or     eax,edx
c00037e6:	0f 84 25 01 00 00    	je     c0003911 <dir_read+0x153>
c00037ec:	89 f8                	mov    eax,edi
c00037ee:	e8 41 ea ff ff       	call   c0002234 <move_window>
c00037f3:	89 c5                	mov    ebp,eax
c00037f5:	85 c0                	test   eax,eax
c00037f7:	0f 85 23 01 00 00    	jne    c0003920 <dir_read+0x162>
c00037fd:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003800:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003802:	84 c9                	test   cl,cl
c0003804:	0f 84 11 01 00 00    	je     c000391b <dir_read+0x15d>
c000380a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000380d:	75 48                	jne    c0003857 <dir_read+0x99>
c000380f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003814:	74 10                	je     c0003826 <dir_read+0x68>
c0003816:	80 f9 83             	cmp    cl,0x83
c0003819:	0f 85 dd 00 00 00    	jne    c00038fc <dir_read+0x13e>
c000381f:	31 ed                	xor    ebp,ebp
c0003821:	e9 08 01 00 00       	jmp    c000392e <dir_read+0x170>
c0003826:	80 f9 85             	cmp    cl,0x85
c0003829:	0f 85 cd 00 00 00    	jne    c00038fc <dir_read+0x13e>
c000382f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003832:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003835:	89 d8                	mov    eax,ebx
c0003837:	e8 fc fd ff ff       	call   c0003638 <load_xdir>
c000383c:	89 c5                	mov    ebp,eax
c000383e:	85 c0                	test   eax,eax
c0003840:	0f 85 da 00 00 00    	jne    c0003920 <dir_read+0x162>
c0003846:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003849:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000384c:	83 e0 3f             	and    eax,0x3f
c000384f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003852:	e9 d7 00 00 00       	jmp    c000392e <dir_read+0x170>
c0003857:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000385a:	83 e0 3f             	and    eax,0x3f
c000385d:	80 f9 e5             	cmp    cl,0xe5
c0003860:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003864:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003867:	0f 84 8a 00 00 00    	je     c00038f7 <dir_read+0x139>
c000386d:	80 f9 2e             	cmp    cl,0x2e
c0003870:	0f 84 81 00 00 00    	je     c00038f7 <dir_read+0x139>
c0003876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387a:	83 e0 1f             	and    eax,0x1f
c000387d:	83 f8 08             	cmp    eax,0x8
c0003880:	0f 94 c0             	sete   al
c0003883:	0f b6 c0             	movzx  eax,al
c0003886:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000388a:	75 6b                	jne    c00038f7 <dir_read+0x139>
c000388c:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003891:	75 44                	jne    c00038d7 <dir_read+0x119>
c0003893:	f6 c1 40             	test   cl,0x40
c0003896:	74 12                	je     c00038aa <dir_read+0xec>
c0003898:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000389b:	83 e1 bf             	and    ecx,0xffffffbf
c000389e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038a2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038a5:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a8:	eb 06                	jmp    c00038b0 <dir_read+0xf2>
c00038aa:	89 f0                	mov    eax,esi
c00038ac:	38 c8                	cmp    al,cl
c00038ae:	75 47                	jne    c00038f7 <dir_read+0x139>
c00038b0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038b4:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b9:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038bc:	75 3e                	jne    c00038fc <dir_read+0x13e>
c00038be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038c1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038c5:	e8 95 e4 ff ff       	call   c0001d5f <pick_lfn>
c00038ca:	85 c0                	test   eax,eax
c00038cc:	74 2e                	je     c00038fc <dir_read+0x13e>
c00038ce:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038d2:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038d5:	eb 25                	jmp    c00038fc <dir_read+0x13e>
c00038d7:	89 f0                	mov    eax,esi
c00038d9:	84 c0                	test   al,al
c00038db:	75 11                	jne    c00038ee <dir_read+0x130>
c00038dd:	89 d0                	mov    eax,edx
c00038df:	e8 35 e6 ff ff       	call   c0001f19 <sum_sfn>
c00038e4:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e8:	0f 84 31 ff ff ff    	je     c000381f <dir_read+0x61>
c00038ee:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038f5:	eb 37                	jmp    c000392e <dir_read+0x170>
c00038f7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038fc:	31 d2                	xor    edx,edx
c00038fe:	89 d8                	mov    eax,ebx
c0003900:	e8 01 fc ff ff       	call   c0003506 <dir_next>
c0003905:	89 c5                	mov    ebp,eax
c0003907:	85 c0                	test   eax,eax
c0003909:	0f 84 cd fe ff ff    	je     c00037dc <dir_read+0x1e>
c000390f:	eb 0f                	jmp    c0003920 <dir_read+0x162>
c0003911:	85 ed                	test   ebp,ebp
c0003913:	0f 84 06 ff ff ff    	je     c000381f <dir_read+0x61>
c0003919:	eb 05                	jmp    c0003920 <dir_read+0x162>
c000391b:	bd 04 00 00 00       	mov    ebp,0x4
c0003920:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003927:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000392e:	83 c4 1c             	add    esp,0x1c
c0003931:	89 e8                	mov    eax,ebp
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	5f                   	pop    edi
c0003936:	5d                   	pop    ebp
c0003937:	c3                   	ret    

c0003938 <dir_alloc>:
c0003938:	55                   	push   ebp
c0003939:	89 d5                	mov    ebp,edx
c000393b:	57                   	push   edi
c000393c:	31 d2                	xor    edx,edx
c000393e:	56                   	push   esi
c000393f:	53                   	push   ebx
c0003940:	89 c3                	mov    ebx,eax
c0003942:	83 ec 0c             	sub    esp,0xc
c0003945:	8b 38                	mov    edi,DWORD PTR [eax]
c0003947:	e8 60 f6 ff ff       	call   c0002fac <dir_sdi>
c000394c:	85 c0                	test   eax,eax
c000394e:	75 4e                	jne    c000399e <dir_alloc+0x66>
c0003950:	31 f6                	xor    esi,esi
c0003952:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003955:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003958:	89 f8                	mov    eax,edi
c000395a:	e8 d5 e8 ff ff       	call   c0002234 <move_window>
c000395f:	85 c0                	test   eax,eax
c0003961:	75 3b                	jne    c000399e <dir_alloc+0x66>
c0003963:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003966:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003969:	8a 12                	mov    dl,BYTE PTR [edx]
c000396b:	75 07                	jne    c0003974 <dir_alloc+0x3c>
c000396d:	f7 d2                	not    edx
c000396f:	c0 ea 07             	shr    dl,0x7
c0003972:	eb 0d                	jmp    c0003981 <dir_alloc+0x49>
c0003974:	80 fa e5             	cmp    dl,0xe5
c0003977:	0f 94 c1             	sete   cl
c000397a:	84 d2                	test   dl,dl
c000397c:	0f 94 c2             	sete   dl
c000397f:	09 ca                	or     edx,ecx
c0003981:	84 d2                	test   dl,dl
c0003983:	74 07                	je     c000398c <dir_alloc+0x54>
c0003985:	46                   	inc    esi
c0003986:	39 ee                	cmp    esi,ebp
c0003988:	75 04                	jne    c000398e <dir_alloc+0x56>
c000398a:	eb 1c                	jmp    c00039a8 <dir_alloc+0x70>
c000398c:	31 f6                	xor    esi,esi
c000398e:	ba 01 00 00 00       	mov    edx,0x1
c0003993:	89 d8                	mov    eax,ebx
c0003995:	e8 6c fb ff ff       	call   c0003506 <dir_next>
c000399a:	85 c0                	test   eax,eax
c000399c:	74 b4                	je     c0003952 <dir_alloc+0x1a>
c000399e:	83 f8 04             	cmp    eax,0x4
c00039a1:	75 05                	jne    c00039a8 <dir_alloc+0x70>
c00039a3:	b8 07 00 00 00       	mov    eax,0x7
c00039a8:	83 c4 0c             	add    esp,0xc
c00039ab:	5b                   	pop    ebx
c00039ac:	5e                   	pop    esi
c00039ad:	5f                   	pop    edi
c00039ae:	5d                   	pop    ebp
c00039af:	c3                   	ret    

c00039b0 <store_xdir>:
c00039b0:	55                   	push   ebp
c00039b1:	57                   	push   edi
c00039b2:	89 c7                	mov    edi,eax
c00039b4:	56                   	push   esi
c00039b5:	53                   	push   ebx
c00039b6:	83 ec 0c             	sub    esp,0xc
c00039b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00039bb:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039be:	89 e8                	mov    eax,ebp
c00039c0:	e8 66 e5 ff ff       	call   c0001f2b <xdir_sum>
c00039c5:	0f b7 d0             	movzx  edx,ax
c00039c8:	8d 45 02             	lea    eax,[ebp+0x2]
c00039cb:	e8 ff e0 ff ff       	call   c0001acf <st_word>
c00039d0:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039d3:	89 f8                	mov    eax,edi
c00039d5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039d9:	e8 ce f5 ff ff       	call   c0002fac <dir_sdi>
c00039de:	89 c6                	mov    esi,eax
c00039e0:	85 f6                	test   esi,esi
c00039e2:	75 3d                	jne    c0003a21 <store_xdir+0x71>
c00039e4:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039e7:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039ea:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ec:	e8 43 e8 ff ff       	call   c0002234 <move_window>
c00039f1:	89 c6                	mov    esi,eax
c00039f3:	85 c0                	test   eax,eax
c00039f5:	75 2a                	jne    c0003a21 <store_xdir+0x71>
c00039f7:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039fa:	b9 20 00 00 00       	mov    ecx,0x20
c00039ff:	89 ea                	mov    edx,ebp
c0003a01:	e8 d6 e0 ff ff       	call   c0001adc <mem_cpy>
c0003a06:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a08:	85 db                	test   ebx,ebx
c0003a0a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a0e:	74 11                	je     c0003a21 <store_xdir+0x71>
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 f8                	mov    eax,edi
c0003a14:	e8 ed fa ff ff       	call   c0003506 <dir_next>
c0003a19:	83 c5 20             	add    ebp,0x20
c0003a1c:	89 c6                	mov    esi,eax
c0003a1e:	4b                   	dec    ebx
c0003a1f:	eb bf                	jmp    c00039e0 <store_xdir+0x30>
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	83 fe 02             	cmp    esi,0x2
c0003a26:	76 05                	jbe    c0003a2d <store_xdir+0x7d>
c0003a28:	b8 02 00 00 00       	mov    eax,0x2
c0003a2d:	83 c4 0c             	add    esp,0xc
c0003a30:	5b                   	pop    ebx
c0003a31:	5e                   	pop    esi
c0003a32:	5f                   	pop    edi
c0003a33:	5d                   	pop    ebp
c0003a34:	c3                   	ret    

c0003a35 <dir_remove>:
c0003a35:	57                   	push   edi
c0003a36:	56                   	push   esi
c0003a37:	53                   	push   ebx
c0003a38:	89 c3                	mov    ebx,eax
c0003a3a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a3d:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3f:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a42:	83 fa ff             	cmp    edx,0xffffffff
c0003a45:	74 09                	je     c0003a50 <dir_remove+0x1b>
c0003a47:	e8 60 f5 ff ff       	call   c0002fac <dir_sdi>
c0003a4c:	85 c0                	test   eax,eax
c0003a4e:	75 41                	jne    c0003a91 <dir_remove+0x5c>
c0003a50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a53:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a56:	89 f0                	mov    eax,esi
c0003a58:	e8 d7 e7 ff ff       	call   c0002234 <move_window>
c0003a5d:	85 c0                	test   eax,eax
c0003a5f:	75 26                	jne    c0003a87 <dir_remove+0x52>
c0003a61:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a64:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a67:	75 05                	jne    c0003a6e <dir_remove+0x39>
c0003a69:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a6c:	eb 03                	jmp    c0003a71 <dir_remove+0x3c>
c0003a6e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a71:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a75:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a78:	73 17                	jae    c0003a91 <dir_remove+0x5c>
c0003a7a:	31 d2                	xor    edx,edx
c0003a7c:	89 d8                	mov    eax,ebx
c0003a7e:	e8 83 fa ff ff       	call   c0003506 <dir_next>
c0003a83:	85 c0                	test   eax,eax
c0003a85:	74 c9                	je     c0003a50 <dir_remove+0x1b>
c0003a87:	83 f8 04             	cmp    eax,0x4
c0003a8a:	75 05                	jne    c0003a91 <dir_remove+0x5c>
c0003a8c:	b8 02 00 00 00       	mov    eax,0x2
c0003a91:	5b                   	pop    ebx
c0003a92:	5e                   	pop    esi
c0003a93:	5f                   	pop    edi
c0003a94:	c3                   	ret    

c0003a95 <create_name>:
c0003a95:	55                   	push   ebp
c0003a96:	89 d5                	mov    ebp,edx
c0003a98:	57                   	push   edi
c0003a99:	89 c7                	mov    edi,eax
c0003a9b:	56                   	push   esi
c0003a9c:	31 f6                	xor    esi,esi
c0003a9e:	53                   	push   ebx
c0003a9f:	83 ec 3c             	sub    esp,0x3c
c0003aa2:	8b 02                	mov    eax,DWORD PTR [edx]
c0003aa4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa8:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ab1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ab5:	e8 7d e0 ff ff       	call   c0001b37 <tchar2uni>
c0003aba:	89 c3                	mov    ebx,eax
c0003abc:	83 f8 ff             	cmp    eax,0xffffffff
c0003abf:	75 0a                	jne    c0003acb <create_name+0x36>
c0003ac1:	b8 06 00 00 00       	mov    eax,0x6
c0003ac6:	e9 83 02 00 00       	jmp    c0003d4e <create_name+0x2b9>
c0003acb:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ad0:	76 0c                	jbe    c0003ade <create_name+0x49>
c0003ad2:	c1 e8 10             	shr    eax,0x10
c0003ad5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ad9:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003add:	46                   	inc    esi
c0003ade:	66 83 fb 1f          	cmp    bx,0x1f
c0003ae2:	89 d8                	mov    eax,ebx
c0003ae4:	76 36                	jbe    c0003b1c <create_name+0x87>
c0003ae6:	66 83 fb 2f          	cmp    bx,0x2f
c0003aea:	74 30                	je     c0003b1c <create_name+0x87>
c0003aec:	66 83 fb 5c          	cmp    bx,0x5c
c0003af0:	74 39                	je     c0003b2b <create_name+0x96>
c0003af2:	66 83 fb 7f          	cmp    bx,0x7f
c0003af6:	77 11                	ja     c0003b09 <create_name+0x74>
c0003af8:	0f b7 d3             	movzx  edx,bx
c0003afb:	b8 72 05 02 c0       	mov    eax,0xc0020572
c0003b00:	e8 1a e0 ff ff       	call   c0001b1f <chk_chr>
c0003b05:	85 c0                	test   eax,eax
c0003b07:	75 b8                	jne    c0003ac1 <create_name+0x2c>
c0003b09:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b0f:	77 b0                	ja     c0003ac1 <create_name+0x2c>
c0003b11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b15:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b19:	46                   	inc    esi
c0003b1a:	eb 95                	jmp    c0003ab1 <create_name+0x1c>
c0003b1c:	66 83 f8 1f          	cmp    ax,0x1f
c0003b20:	b3 04                	mov    bl,0x4
c0003b22:	76 19                	jbe    c0003b3d <create_name+0xa8>
c0003b24:	eb 05                	jmp    c0003b2b <create_name+0x96>
c0003b26:	40                   	inc    eax
c0003b27:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b2f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b31:	80 fa 2f             	cmp    dl,0x2f
c0003b34:	74 f0                	je     c0003b26 <create_name+0x91>
c0003b36:	80 fa 5c             	cmp    dl,0x5c
c0003b39:	74 eb                	je     c0003b26 <create_name+0x91>
c0003b3b:	31 db                	xor    ebx,ebx
c0003b3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b41:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b44:	85 f6                	test   esi,esi
c0003b46:	74 18                	je     c0003b60 <create_name+0xcb>
c0003b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b4c:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b51:	66 83 f8 20          	cmp    ax,0x20
c0003b55:	74 06                	je     c0003b5d <create_name+0xc8>
c0003b57:	66 83 f8 2e          	cmp    ax,0x2e
c0003b5b:	75 03                	jne    c0003b60 <create_name+0xcb>
c0003b5d:	4e                   	dec    esi
c0003b5e:	eb e4                	jmp    c0003b44 <create_name+0xaf>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	31 ed                	xor    ebp,ebp
c0003b66:	85 f6                	test   esi,esi
c0003b68:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b6e:	0f 84 4d ff ff ff    	je     c0003ac1 <create_name+0x2c>
c0003b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b78:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b7b:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b7f:	66 83 f8 20          	cmp    ax,0x20
c0003b83:	75 04                	jne    c0003b89 <create_name+0xf4>
c0003b85:	89 d5                	mov    ebp,edx
c0003b87:	eb eb                	jmp    c0003b74 <create_name+0xdf>
c0003b89:	85 ed                	test   ebp,ebp
c0003b8b:	75 06                	jne    c0003b93 <create_name+0xfe>
c0003b8d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b91:	75 08                	jne    c0003b9b <create_name+0x106>
c0003b93:	83 cb 03             	or     ebx,0x3
c0003b96:	eb 03                	jmp    c0003b9b <create_name+0x106>
c0003b98:	4e                   	dec    esi
c0003b99:	74 0c                	je     c0003ba7 <create_name+0x112>
c0003b9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b9f:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ba5:	75 f1                	jne    c0003b98 <create_name+0x103>
c0003ba7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bac:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003baf:	ba 20 00 00 00       	mov    edx,0x20
c0003bb4:	e8 38 df ff ff       	call   c0001af1 <mem_set>
c0003bb9:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003bc1:	31 c9                	xor    ecx,ecx
c0003bc3:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bc8:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bcb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd3:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bd7:	66 85 ed             	test   bp,bp
c0003bda:	0f 84 1f 01 00 00    	je     c0003cff <create_name+0x26a>
c0003be0:	66 83 fd 20          	cmp    bp,0x20
c0003be4:	74 0c                	je     c0003bf2 <create_name+0x15d>
c0003be6:	66 83 fd 2e          	cmp    bp,0x2e
c0003bea:	75 0f                	jne    c0003bfb <create_name+0x166>
c0003bec:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bf0:	74 09                	je     c0003bfb <create_name+0x166>
c0003bf2:	83 cb 03             	or     ebx,0x3
c0003bf5:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003bf9:	eb cd                	jmp    c0003bc8 <create_name+0x133>
c0003bfb:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003bff:	73 06                	jae    c0003c07 <create_name+0x172>
c0003c01:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c05:	75 3a                	jne    c0003c41 <create_name+0x1ac>
c0003c07:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003c0c:	75 08                	jne    c0003c16 <create_name+0x181>
c0003c0e:	83 cb 03             	or     ebx,0x3
c0003c11:	e9 e9 00 00 00       	jmp    c0003cff <create_name+0x26a>
c0003c16:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c1a:	74 0d                	je     c0003c29 <create_name+0x194>
c0003c1c:	83 cb 03             	or     ebx,0x3
c0003c1f:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c23:	0f 87 d6 00 00 00    	ja     c0003cff <create_name+0x26a>
c0003c29:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c2e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c32:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c3a:	b9 08 00 00 00       	mov    ecx,0x8
c0003c3f:	eb b4                	jmp    c0003bf5 <create_name+0x160>
c0003c41:	66 83 fd 7f          	cmp    bp,0x7f
c0003c45:	76 68                	jbe    c0003caf <create_name+0x21a>
c0003c47:	88 da                	mov    dl,bl
c0003c49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4d:	83 ca 02             	or     edx,0x2
c0003c50:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c54:	50                   	push   eax
c0003c55:	50                   	push   eax
c0003c56:	68 b5 01 00 00       	push   0x1b5
c0003c5b:	55                   	push   ebp
c0003c5c:	e8 0f 46 00 00       	call   c0008270 <ff_uni2oem>
c0003c61:	83 c4 10             	add    esp,0x10
c0003c64:	89 c5                	mov    ebp,eax
c0003c66:	a8 80                	test   al,0x80
c0003c68:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c70:	74 0c                	je     c0003c7e <create_name+0x1e9>
c0003c72:	83 e5 7f             	and    ebp,0x7f
c0003c75:	0f b6 ad c0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb40]
c0003c7c:	eb 2a                	jmp    c0003ca8 <create_name+0x213>
c0003c7e:	66 3d ff 00          	cmp    ax,0xff
c0003c82:	76 24                	jbe    c0003ca8 <create_name+0x213>
c0003c84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c88:	48                   	dec    eax
c0003c89:	39 c8                	cmp    eax,ecx
c0003c8b:	77 0c                	ja     c0003c99 <create_name+0x204>
c0003c8d:	83 cb 03             	or     ebx,0x3
c0003c90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c94:	e9 5c ff ff ff       	jmp    c0003bf5 <create_name+0x160>
c0003c99:	89 e8                	mov    eax,ebp
c0003c9b:	88 d3                	mov    bl,dl
c0003c9d:	66 c1 e8 08          	shr    ax,0x8
c0003ca1:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca5:	41                   	inc    ecx
c0003ca6:	eb 4b                	jmp    c0003cf3 <create_name+0x25e>
c0003ca8:	66 85 ed             	test   bp,bp
c0003cab:	88 d3                	mov    bl,dl
c0003cad:	74 19                	je     c0003cc8 <create_name+0x233>
c0003caf:	0f b7 d5             	movzx  edx,bp
c0003cb2:	b8 7b 05 02 c0       	mov    eax,0xc002057b
c0003cb7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cbb:	e8 5f de ff ff       	call   c0001b1f <chk_chr>
c0003cc0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc4:	85 c0                	test   eax,eax
c0003cc6:	74 0a                	je     c0003cd2 <create_name+0x23d>
c0003cc8:	83 cb 03             	or     ebx,0x3
c0003ccb:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd0:	eb 21                	jmp    c0003cf3 <create_name+0x25e>
c0003cd2:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd5:	66 83 f8 19          	cmp    ax,0x19
c0003cd9:	77 07                	ja     c0003ce2 <create_name+0x24d>
c0003cdb:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003ce0:	eb 11                	jmp    c0003cf3 <create_name+0x25e>
c0003ce2:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce5:	66 83 f8 19          	cmp    ax,0x19
c0003ce9:	77 08                	ja     c0003cf3 <create_name+0x25e>
c0003ceb:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cf0:	83 ed 20             	sub    ebp,0x20
c0003cf3:	89 e8                	mov    eax,ebp
c0003cf5:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cf9:	41                   	inc    ecx
c0003cfa:	e9 f6 fe ff ff       	jmp    c0003bf5 <create_name+0x160>
c0003cff:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d03:	75 04                	jne    c0003d09 <create_name+0x274>
c0003d05:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d09:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003d0e:	75 05                	jne    c0003d15 <create_name+0x280>
c0003d10:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003d15:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d19:	83 e0 0c             	and    eax,0xc
c0003d1c:	3c 0c                	cmp    al,0xc
c0003d1e:	74 0b                	je     c0003d2b <create_name+0x296>
c0003d20:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d24:	83 e0 03             	and    eax,0x3
c0003d27:	3c 03                	cmp    al,0x3
c0003d29:	75 05                	jne    c0003d30 <create_name+0x29b>
c0003d2b:	83 cb 02             	or     ebx,0x2
c0003d2e:	eb 19                	jmp    c0003d49 <create_name+0x2b4>
c0003d30:	f6 c3 02             	test   bl,0x2
c0003d33:	75 14                	jne    c0003d49 <create_name+0x2b4>
c0003d35:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d3a:	74 03                	je     c0003d3f <create_name+0x2aa>
c0003d3c:	83 cb 10             	or     ebx,0x10
c0003d3f:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d44:	74 03                	je     c0003d49 <create_name+0x2b4>
c0003d46:	83 cb 08             	or     ebx,0x8
c0003d49:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4c:	31 c0                	xor    eax,eax
c0003d4e:	83 c4 3c             	add    esp,0x3c
c0003d51:	5b                   	pop    ebx
c0003d52:	5e                   	pop    esi
c0003d53:	5f                   	pop    edi
c0003d54:	5d                   	pop    ebp
c0003d55:	c3                   	ret    

c0003d56 <xname_sum>:
c0003d56:	56                   	push   esi
c0003d57:	89 c6                	mov    esi,eax
c0003d59:	53                   	push   ebx
c0003d5a:	31 db                	xor    ebx,ebx
c0003d5c:	51                   	push   ecx
c0003d5d:	83 c6 02             	add    esi,0x2
c0003d60:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d64:	66 85 c0             	test   ax,ax
c0003d67:	74 1f                	je     c0003d88 <xname_sum+0x32>
c0003d69:	66 d1 cb             	ror    bx,1
c0003d6c:	83 ec 0c             	sub    esp,0xc
c0003d6f:	50                   	push   eax
c0003d70:	e8 00 46 00 00       	call   c0008375 <ff_wtoupper>
c0003d75:	0f b6 d0             	movzx  edx,al
c0003d78:	01 d3                	add    ebx,edx
c0003d7a:	83 c4 10             	add    esp,0x10
c0003d7d:	66 c1 e8 08          	shr    ax,0x8
c0003d81:	66 d1 cb             	ror    bx,1
c0003d84:	01 c3                	add    ebx,eax
c0003d86:	eb d5                	jmp    c0003d5d <xname_sum+0x7>
c0003d88:	5a                   	pop    edx
c0003d89:	89 d8                	mov    eax,ebx
c0003d8b:	5b                   	pop    ebx
c0003d8c:	5e                   	pop    esi
c0003d8d:	c3                   	ret    

c0003d8e <create_xdir>:
c0003d8e:	55                   	push   ebp
c0003d8f:	b9 40 00 00 00       	mov    ecx,0x40
c0003d94:	57                   	push   edi
c0003d95:	bd 01 00 00 00       	mov    ebp,0x1
c0003d9a:	56                   	push   esi
c0003d9b:	31 ff                	xor    edi,edi
c0003d9d:	53                   	push   ebx
c0003d9e:	89 c3                	mov    ebx,eax
c0003da0:	83 ec 1c             	sub    esp,0x1c
c0003da3:	be 40 00 00 00       	mov    esi,0x40
c0003da8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dac:	31 d2                	xor    edx,edx
c0003dae:	e8 3e dd ff ff       	call   c0001af1 <mem_set>
c0003db3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003db6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dba:	31 c9                	xor    ecx,ecx
c0003dbc:	8d 46 01             	lea    eax,[esi+0x1]
c0003dbf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dc3:	83 c6 02             	add    esi,0x2
c0003dc6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dca:	66 85 ed             	test   bp,bp
c0003dcd:	74 12                	je     c0003de1 <create_xdir+0x53>
c0003dcf:	0f b6 c1             	movzx  eax,cl
c0003dd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dda:	66 83 fd 01          	cmp    bp,0x1
c0003dde:	80 d9 ff             	sbb    cl,0xff
c0003de1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003de4:	83 c6 02             	add    esi,0x2
c0003de7:	0f b7 d5             	movzx  edx,bp
c0003dea:	e8 e0 dc ff ff       	call   c0001acf <st_word>
c0003def:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003df5:	75 d3                	jne    c0003dca <create_xdir+0x3c>
c0003df7:	8d 47 01             	lea    eax,[edi+0x1]
c0003dfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dfe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e02:	0f b6 c1             	movzx  eax,cl
c0003e05:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e0a:	74 07                	je     c0003e13 <create_xdir+0x85>
c0003e0c:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e11:	eb a9                	jmp    c0003dbc <create_xdir+0x2e>
c0003e13:	8d 47 02             	lea    eax,[edi+0x2]
c0003e16:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e19:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e1c:	89 d0                	mov    eax,edx
c0003e1e:	e8 33 ff ff ff       	call   c0003d56 <xname_sum>
c0003e23:	83 c4 1c             	add    esp,0x1c
c0003e26:	0f b7 d0             	movzx  edx,ax
c0003e29:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e2c:	5b                   	pop    ebx
c0003e2d:	5e                   	pop    esi
c0003e2e:	5f                   	pop    edi
c0003e2f:	5d                   	pop    ebp
c0003e30:	e9 9a dc ff ff       	jmp    c0001acf <st_word>

c0003e35 <cmp_lfn>:
c0003e35:	55                   	push   ebp
c0003e36:	57                   	push   edi
c0003e37:	89 d7                	mov    edi,edx
c0003e39:	56                   	push   esi
c0003e3a:	53                   	push   ebx
c0003e3b:	83 ec 1c             	sub    esp,0x1c
c0003e3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e42:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e45:	e8 13 dc ff ff       	call   c0001a5d <ld_word>
c0003e4a:	66 85 c0             	test   ax,ax
c0003e4d:	74 07                	je     c0003e56 <cmp_lfn+0x21>
c0003e4f:	31 c0                	xor    eax,eax
c0003e51:	e9 9a 00 00 00       	jmp    c0003ef0 <cmp_lfn+0xbb>
c0003e56:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e58:	bd 01 00 00 00       	mov    ebp,0x1
c0003e5d:	83 e3 3f             	and    ebx,0x3f
c0003e60:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e68:	4b                   	dec    ebx
c0003e69:	6b db 0d             	imul   ebx,ebx,0xd
c0003e6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e70:	0f b6 80 40 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfac0]
c0003e77:	01 f8                	add    eax,edi
c0003e79:	e8 df db ff ff       	call   c0001a5d <ld_word>
c0003e7e:	66 85 ed             	test   bp,bp
c0003e81:	89 c6                	mov    esi,eax
c0003e83:	74 3c                	je     c0003ec1 <cmp_lfn+0x8c>
c0003e85:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e8b:	77 c2                	ja     c0003e4f <cmp_lfn+0x1a>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	0f b7 c0             	movzx  eax,ax
c0003e93:	50                   	push   eax
c0003e94:	e8 dc 44 00 00       	call   c0008375 <ff_wtoupper>
c0003e99:	89 c5                	mov    ebp,eax
c0003e9b:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ea6:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003eaa:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ead:	e8 c3 44 00 00       	call   c0008375 <ff_wtoupper>
c0003eb2:	83 c4 10             	add    esp,0x10
c0003eb5:	39 c5                	cmp    ebp,eax
c0003eb7:	75 96                	jne    c0003e4f <cmp_lfn+0x1a>
c0003eb9:	89 f5                	mov    ebp,esi
c0003ebb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ebf:	eb 04                	jmp    c0003ec5 <cmp_lfn+0x90>
c0003ec1:	66 46                	inc    si
c0003ec3:	75 8a                	jne    c0003e4f <cmp_lfn+0x1a>
c0003ec5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ec9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ece:	75 9c                	jne    c0003e6c <cmp_lfn+0x37>
c0003ed0:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ed3:	74 16                	je     c0003eeb <cmp_lfn+0xb6>
c0003ed5:	66 85 ed             	test   bp,bp
c0003ed8:	74 11                	je     c0003eeb <cmp_lfn+0xb6>
c0003eda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ede:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ee3:	0f 94 c0             	sete   al
c0003ee6:	0f b6 c0             	movzx  eax,al
c0003ee9:	eb 05                	jmp    c0003ef0 <cmp_lfn+0xbb>
c0003eeb:	b8 01 00 00 00       	mov    eax,0x1
c0003ef0:	83 c4 1c             	add    esp,0x1c
c0003ef3:	5b                   	pop    ebx
c0003ef4:	5e                   	pop    esi
c0003ef5:	5f                   	pop    edi
c0003ef6:	5d                   	pop    ebp
c0003ef7:	c3                   	ret    

c0003ef8 <dir_find>:
c0003ef8:	55                   	push   ebp
c0003ef9:	31 d2                	xor    edx,edx
c0003efb:	57                   	push   edi
c0003efc:	56                   	push   esi
c0003efd:	53                   	push   ebx
c0003efe:	89 c3                	mov    ebx,eax
c0003f00:	83 ec 1c             	sub    esp,0x1c
c0003f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f05:	e8 a2 f0 ff ff       	call   c0002fac <dir_sdi>
c0003f0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f0d:	85 c0                	test   eax,eax
c0003f0f:	0f 85 9f 01 00 00    	jne    c00040b4 <dir_find+0x1bc>
c0003f15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f18:	0f 85 8e 00 00 00    	jne    c0003fac <dir_find+0xb4>
c0003f1e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f21:	e8 30 fe ff ff       	call   c0003d56 <xname_sum>
c0003f26:	89 c5                	mov    ebp,eax
c0003f28:	31 d2                	xor    edx,edx
c0003f2a:	89 d8                	mov    eax,ebx
c0003f2c:	e8 8d f8 ff ff       	call   c00037be <dir_read>
c0003f31:	85 c0                	test   eax,eax
c0003f33:	0f 85 5f 01 00 00    	jne    c0004098 <dir_find+0x1a0>
c0003f39:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f3c:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f3f:	e8 19 db ff ff       	call   c0001a5d <ld_word>
c0003f44:	66 39 e8             	cmp    ax,bp
c0003f47:	75 df                	jne    c0003f28 <dir_find+0x30>
c0003f49:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f4d:	31 ff                	xor    edi,edi
c0003f4f:	ba 40 00 00 00       	mov    edx,0x40
c0003f54:	39 f9                	cmp    ecx,edi
c0003f56:	0f 84 4a 01 00 00    	je     c00040a6 <dir_find+0x1ae>
c0003f5c:	f6 c2 1f             	test   dl,0x1f
c0003f5f:	75 03                	jne    c0003f64 <dir_find+0x6c>
c0003f61:	83 c2 02             	add    edx,0x2
c0003f64:	89 d0                	mov    eax,edx
c0003f66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f6a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f71:	e8 e7 da ff ff       	call   c0001a5d <ld_word>
c0003f76:	83 ec 0c             	sub    esp,0xc
c0003f79:	0f b7 c0             	movzx  eax,ax
c0003f7c:	50                   	push   eax
c0003f7d:	e8 f3 43 00 00       	call   c0008375 <ff_wtoupper>
c0003f82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f86:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f89:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f90:	e8 e0 43 00 00       	call   c0008375 <ff_wtoupper>
c0003f95:	83 c4 10             	add    esp,0x10
c0003f98:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f9c:	75 8a                	jne    c0003f28 <dir_find+0x30>
c0003f9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fa2:	47                   	inc    edi
c0003fa3:	83 c2 02             	add    edx,0x2
c0003fa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003faa:	eb a8                	jmp    c0003f54 <dir_find+0x5c>
c0003fac:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fb3:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fb8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fbd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fc0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fc3:	89 f0                	mov    eax,esi
c0003fc5:	e8 6a e2 ff ff       	call   c0002234 <move_window>
c0003fca:	85 c0                	test   eax,eax
c0003fcc:	0f 85 c6 00 00 00    	jne    c0004098 <dir_find+0x1a0>
c0003fd2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fd5:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fd8:	84 c9                	test   cl,cl
c0003fda:	0f 84 bd 00 00 00    	je     c000409d <dir_find+0x1a5>
c0003fe0:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fe3:	88 d0                	mov    al,dl
c0003fe5:	83 e0 3f             	and    eax,0x3f
c0003fe8:	80 f9 e5             	cmp    cl,0xe5
c0003feb:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fee:	0f 84 87 00 00 00    	je     c000407b <dir_find+0x183>
c0003ff4:	80 e2 08             	and    dl,0x8
c0003ff7:	74 06                	je     c0003fff <dir_find+0x107>
c0003ff9:	3c 0f                	cmp    al,0xf
c0003ffb:	75 7e                	jne    c000407b <dir_find+0x183>
c0003ffd:	eb 04                	jmp    c0004003 <dir_find+0x10b>
c0003fff:	3c 0f                	cmp    al,0xf
c0004001:	75 4c                	jne    c000404f <dir_find+0x157>
c0004003:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004007:	75 7e                	jne    c0004087 <dir_find+0x18f>
c0004009:	f6 c1 40             	test   cl,0x40
c000400c:	74 12                	je     c0004020 <dir_find+0x128>
c000400e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004011:	83 e1 bf             	and    ecx,0xffffffbf
c0004014:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004018:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000401b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000401e:	eb 06                	jmp    c0004026 <dir_find+0x12e>
c0004020:	89 f8                	mov    eax,edi
c0004022:	38 c8                	cmp    al,cl
c0004024:	75 5c                	jne    c0004082 <dir_find+0x18a>
c0004026:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000402a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000402f:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004032:	75 53                	jne    c0004087 <dir_find+0x18f>
c0004034:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004037:	89 ea                	mov    edx,ebp
c0004039:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000403d:	e8 f3 fd ff ff       	call   c0003e35 <cmp_lfn>
c0004042:	85 c0                	test   eax,eax
c0004044:	74 41                	je     c0004087 <dir_find+0x18f>
c0004046:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000404a:	8d 79 ff             	lea    edi,[ecx-0x1]
c000404d:	eb 38                	jmp    c0004087 <dir_find+0x18f>
c000404f:	89 f8                	mov    eax,edi
c0004051:	84 c0                	test   al,al
c0004053:	75 0d                	jne    c0004062 <dir_find+0x16a>
c0004055:	89 e8                	mov    eax,ebp
c0004057:	e8 bd de ff ff       	call   c0001f19 <sum_sfn>
c000405c:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004060:	74 52                	je     c00040b4 <dir_find+0x1bc>
c0004062:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004066:	75 13                	jne    c000407b <dir_find+0x183>
c0004068:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000406b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004070:	89 e8                	mov    eax,ebp
c0004072:	e8 85 da ff ff       	call   c0001afc <mem_cmp>
c0004077:	85 c0                	test   eax,eax
c0004079:	74 39                	je     c00040b4 <dir_find+0x1bc>
c000407b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004082:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004087:	31 d2                	xor    edx,edx
c0004089:	89 d8                	mov    eax,ebx
c000408b:	e8 76 f4 ff ff       	call   c0003506 <dir_next>
c0004090:	85 c0                	test   eax,eax
c0004092:	0f 84 25 ff ff ff    	je     c0003fbd <dir_find+0xc5>
c0004098:	89 04 24             	mov    DWORD PTR [esp],eax
c000409b:	eb 17                	jmp    c00040b4 <dir_find+0x1bc>
c000409d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040a4:	eb 0e                	jmp    c00040b4 <dir_find+0x1bc>
c00040a6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a9:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c00040ae:	0f 85 74 fe ff ff    	jne    c0003f28 <dir_find+0x30>
c00040b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040b7:	83 c4 1c             	add    esp,0x1c
c00040ba:	5b                   	pop    ebx
c00040bb:	5e                   	pop    esi
c00040bc:	5f                   	pop    edi
c00040bd:	5d                   	pop    ebp
c00040be:	c3                   	ret    

c00040bf <dir_register>:
c00040bf:	55                   	push   ebp
c00040c0:	57                   	push   edi
c00040c1:	56                   	push   esi
c00040c2:	be 06 00 00 00       	mov    esi,0x6
c00040c7:	53                   	push   ebx
c00040c8:	83 ec 6c             	sub    esp,0x6c
c00040cb:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040cf:	0f 85 63 02 00 00    	jne    c0004338 <dir_register+0x279>
c00040d5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040d7:	31 ff                	xor    edi,edi
c00040d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040dc:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040e1:	74 03                	je     c00040e6 <dir_register+0x27>
c00040e3:	47                   	inc    edi
c00040e4:	eb f6                	jmp    c00040dc <dir_register+0x1d>
c00040e6:	89 c3                	mov    ebx,eax
c00040e8:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040ec:	0f 85 e1 00 00 00    	jne    c00041d3 <dir_register+0x114>
c00040f2:	83 c7 0e             	add    edi,0xe
c00040f5:	b9 0f 00 00 00       	mov    ecx,0xf
c00040fa:	89 f8                	mov    eax,edi
c00040fc:	31 d2                	xor    edx,edx
c00040fe:	f7 f1                	div    ecx
c0004100:	89 c7                	mov    edi,eax
c0004102:	8d 50 02             	lea    edx,[eax+0x2]
c0004105:	89 d8                	mov    eax,ebx
c0004107:	e8 2c f8 ff ff       	call   c0003938 <dir_alloc>
c000410c:	89 c6                	mov    esi,eax
c000410e:	85 c0                	test   eax,eax
c0004110:	0f 85 22 02 00 00    	jne    c0004338 <dir_register+0x279>
c0004116:	81 c7 01 00 00 08    	add    edi,0x8000001
c000411c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000411f:	c1 e7 05             	shl    edi,0x5
c0004122:	29 f8                	sub    eax,edi
c0004124:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004127:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000412a:	a8 04                	test   al,0x4
c000412c:	0f 84 91 00 00 00    	je     c00041c3 <dir_register+0x104>
c0004132:	83 e0 fb             	and    eax,0xfffffffb
c0004135:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004138:	89 d8                	mov    eax,ebx
c000413a:	e8 3d ec ff ff       	call   c0002d7c <fill_first_frag>
c000413f:	85 c0                	test   eax,eax
c0004141:	0f 85 ef 01 00 00    	jne    c0004336 <dir_register+0x277>
c0004147:	83 c9 ff             	or     ecx,0xffffffff
c000414a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000414d:	89 d8                	mov    eax,ebx
c000414f:	e8 f3 eb ff ff       	call   c0002d47 <fill_last_frag>
c0004154:	85 c0                	test   eax,eax
c0004156:	0f 85 da 01 00 00    	jne    c0004336 <dir_register+0x277>
c000415c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004160:	74 61                	je     c00041c3 <dir_register+0x104>
c0004162:	89 da                	mov    edx,ebx
c0004164:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004168:	e8 04 f6 ff ff       	call   c0003771 <load_obj_xdir>
c000416d:	85 c0                	test   eax,eax
c000416f:	0f 85 c1 01 00 00    	jne    c0004336 <dir_register+0x277>
c0004175:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004179:	c1 e2 09             	shl    edx,0x9
c000417c:	31 c9                	xor    ecx,ecx
c000417e:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004181:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004184:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004187:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000418a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000418d:	83 c0 38             	add    eax,0x38
c0004190:	e8 41 d9 ff ff       	call   c0001ad6 <st_qword>
c0004195:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004198:	83 c0 28             	add    eax,0x28
c000419b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000419e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041a1:	e8 30 d9 ff ff       	call   c0001ad6 <st_qword>
c00041a6:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041a9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041ac:	83 c8 01             	or     eax,0x1
c00041af:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b6:	e8 f5 f7 ff ff       	call   c00039b0 <store_xdir>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 85 73 01 00 00    	jne    c0004336 <dir_register+0x277>
c00041c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041c9:	e8 c0 fb ff ff       	call   c0003d8e <create_xdir>
c00041ce:	e9 65 01 00 00       	jmp    c0004338 <dir_register+0x279>
c00041d3:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041d6:	b9 0c 00 00 00       	mov    ecx,0xc
c00041db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041df:	89 c2                	mov    edx,eax
c00041e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041e5:	e8 f2 d8 ff ff       	call   c0001adc <mem_cpy>
c00041ea:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ef:	74 58                	je     c0004249 <dir_register+0x18a>
c00041f1:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041f5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041fd:	83 ec 0c             	sub    esp,0xc
c0004200:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004207:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000420b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000420f:	e8 49 dc ff ff       	call   c0001e5d <gen_numname>
c0004214:	89 d8                	mov    eax,ebx
c0004216:	e8 dd fc ff ff       	call   c0003ef8 <dir_find>
c000421b:	83 c4 10             	add    esp,0x10
c000421e:	89 c6                	mov    esi,eax
c0004220:	85 c0                	test   eax,eax
c0004222:	75 15                	jne    c0004239 <dir_register+0x17a>
c0004224:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004228:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000422d:	75 ce                	jne    c00041fd <dir_register+0x13e>
c000422f:	be 07 00 00 00       	mov    esi,0x7
c0004234:	e9 ff 00 00 00       	jmp    c0004338 <dir_register+0x279>
c0004239:	83 f8 04             	cmp    eax,0x4
c000423c:	0f 85 f6 00 00 00    	jne    c0004338 <dir_register+0x279>
c0004242:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004246:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004249:	b9 01 00 00 00       	mov    ecx,0x1
c000424e:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004253:	74 0f                	je     c0004264 <dir_register+0x1a5>
c0004255:	b9 0d 00 00 00       	mov    ecx,0xd
c000425a:	8d 47 0c             	lea    eax,[edi+0xc]
c000425d:	31 d2                	xor    edx,edx
c000425f:	f7 f1                	div    ecx
c0004261:	8d 48 01             	lea    ecx,[eax+0x1]
c0004264:	89 ca                	mov    edx,ecx
c0004266:	89 d8                	mov    eax,ebx
c0004268:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000426c:	e8 c7 f6 ff ff       	call   c0003938 <dir_alloc>
c0004271:	89 c6                	mov    esi,eax
c0004273:	85 c0                	test   eax,eax
c0004275:	0f 85 bd 00 00 00    	jne    c0004338 <dir_register+0x279>
c000427b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000427f:	89 cf                	mov    edi,ecx
c0004281:	4f                   	dec    edi
c0004282:	74 6d                	je     c00042f1 <dir_register+0x232>
c0004284:	89 f8                	mov    eax,edi
c0004286:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004289:	c1 e0 05             	shl    eax,0x5
c000428c:	29 c2                	sub    edx,eax
c000428e:	89 d8                	mov    eax,ebx
c0004290:	e8 17 ed ff ff       	call   c0002fac <dir_sdi>
c0004295:	89 c6                	mov    esi,eax
c0004297:	85 c0                	test   eax,eax
c0004299:	0f 85 99 00 00 00    	jne    c0004338 <dir_register+0x279>
c000429f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042a3:	e8 71 dc ff ff       	call   c0001f19 <sum_sfn>
c00042a8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00042ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042b2:	89 e8                	mov    eax,ebp
c00042b4:	e8 7b df ff ff       	call   c0002234 <move_window>
c00042b9:	89 c6                	mov    esi,eax
c00042bb:	85 c0                	test   eax,eax
c00042bd:	75 79                	jne    c0004338 <dir_register+0x279>
c00042bf:	83 ec 0c             	sub    esp,0xc
c00042c2:	89 f8                	mov    eax,edi
c00042c4:	0f b6 c8             	movzx  ecx,al
c00042c7:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042cf:	52                   	push   edx
c00042d0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042d3:	e8 01 db ff ff       	call   c0001dd9 <put_lfn>
c00042d8:	31 d2                	xor    edx,edx
c00042da:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042de:	89 d8                	mov    eax,ebx
c00042e0:	e8 21 f2 ff ff       	call   c0003506 <dir_next>
c00042e5:	83 c4 10             	add    esp,0x10
c00042e8:	89 c6                	mov    esi,eax
c00042ea:	85 c0                	test   eax,eax
c00042ec:	75 4a                	jne    c0004338 <dir_register+0x279>
c00042ee:	4f                   	dec    edi
c00042ef:	75 bb                	jne    c00042ac <dir_register+0x1ed>
c00042f1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042f4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042f7:	89 e8                	mov    eax,ebp
c00042f9:	e8 36 df ff ff       	call   c0002234 <move_window>
c00042fe:	89 c6                	mov    esi,eax
c0004300:	85 c0                	test   eax,eax
c0004302:	75 34                	jne    c0004338 <dir_register+0x279>
c0004304:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004307:	b9 20 00 00 00       	mov    ecx,0x20
c000430c:	31 d2                	xor    edx,edx
c000430e:	e8 de d7 ff ff       	call   c0001af1 <mem_set>
c0004313:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004316:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000431a:	b9 0b 00 00 00       	mov    ecx,0xb
c000431f:	e8 b8 d7 ff ff       	call   c0001adc <mem_cpy>
c0004324:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004327:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000432a:	83 e0 18             	and    eax,0x18
c000432d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004330:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004334:	eb 02                	jmp    c0004338 <dir_register+0x279>
c0004336:	89 c6                	mov    esi,eax
c0004338:	83 c4 6c             	add    esp,0x6c
c000433b:	89 f0                	mov    eax,esi
c000433d:	5b                   	pop    ebx
c000433e:	5e                   	pop    esi
c000433f:	5f                   	pop    edi
c0004340:	5d                   	pop    ebp
c0004341:	c3                   	ret    

c0004342 <sync_fs>:
c0004342:	56                   	push   esi
c0004343:	53                   	push   ebx
c0004344:	53                   	push   ebx
c0004345:	89 c3                	mov    ebx,eax
c0004347:	e8 54 de ff ff       	call   c00021a0 <sync_window>
c000434c:	85 c0                	test   eax,eax
c000434e:	0f 85 b1 00 00 00    	jne    c0004405 <sync_fs+0xc3>
c0004354:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004357:	0f 85 8e 00 00 00    	jne    c00043eb <sync_fs+0xa9>
c000435d:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004361:	0f 85 84 00 00 00    	jne    c00043eb <sync_fs+0xa9>
c0004367:	8d 73 54             	lea    esi,[ebx+0x54]
c000436a:	b9 00 02 00 00       	mov    ecx,0x200
c000436f:	31 d2                	xor    edx,edx
c0004371:	89 f0                	mov    eax,esi
c0004373:	e8 79 d7 ff ff       	call   c0001af1 <mem_set>
c0004378:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000437e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004383:	e8 47 d7 ff ff       	call   c0001acf <st_word>
c0004388:	ba 52 52 61 41       	mov    edx,0x41615252
c000438d:	89 f0                	mov    eax,esi
c000438f:	e8 3f d7 ff ff       	call   c0001ad3 <st_dword>
c0004394:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000439a:	ba 72 72 41 61       	mov    edx,0x61417272
c000439f:	e8 2f d7 ff ff       	call   c0001ad3 <st_dword>
c00043a4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043a7:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043ad:	e8 21 d7 ff ff       	call   c0001ad3 <st_dword>
c00043b2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043b5:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043bb:	e8 13 d7 ff ff       	call   c0001ad3 <st_dword>
c00043c0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043c3:	83 c0 01             	add    eax,0x1
c00043c6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043c9:	83 d2 00             	adc    edx,0x0
c00043cc:	83 ec 0c             	sub    esp,0xc
c00043cf:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043d2:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043d5:	6a 01                	push   0x1
c00043d7:	52                   	push   edx
c00043d8:	50                   	push   eax
c00043d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043dd:	56                   	push   esi
c00043de:	50                   	push   eax
c00043df:	e8 44 d6 ff ff       	call   c0001a28 <disk_write>
c00043e4:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043e8:	83 c4 20             	add    esp,0x20
c00043eb:	51                   	push   ecx
c00043ec:	6a 00                	push   0x0
c00043ee:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f2:	6a 00                	push   0x0
c00043f4:	50                   	push   eax
c00043f5:	e8 44 d6 ff ff       	call   c0001a3e <disk_ioctl>
c00043fa:	83 c4 10             	add    esp,0x10
c00043fd:	85 c0                	test   eax,eax
c00043ff:	0f 95 c0             	setne  al
c0004402:	0f b6 c0             	movzx  eax,al
c0004405:	5a                   	pop    edx
c0004406:	5b                   	pop    ebx
c0004407:	5e                   	pop    esi
c0004408:	c3                   	ret    

c0004409 <create_partition>:
c0004409:	55                   	push   ebp
c000440a:	57                   	push   edi
c000440b:	56                   	push   esi
c000440c:	53                   	push   ebx
c000440d:	83 ec 60             	sub    esp,0x60
c0004410:	0f b6 c0             	movzx  eax,al
c0004413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004417:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000441b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000441f:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004423:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004427:	50                   	push   eax
c0004428:	6a 01                	push   0x1
c000442a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000442e:	e8 0b d6 ff ff       	call   c0001a3e <disk_ioctl>
c0004433:	83 c4 10             	add    esp,0x10
c0004436:	85 c0                	test   eax,eax
c0004438:	74 0a                	je     c0004444 <create_partition+0x3b>
c000443a:	b8 01 00 00 00       	mov    eax,0x1
c000443f:	e9 73 05 00 00       	jmp    c00049b7 <create_partition+0x5ae>
c0004444:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004448:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000444c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004454:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004459:	0f 86 ed 03 00 00    	jbe    c000484c <create_partition+0x443>
c000445f:	83 c0 df             	add    eax,0xffffffdf
c0004462:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000446a:	83 d2 ff             	adc    edx,0xffffffff
c000446d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004471:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004475:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004479:	83 c0 bd             	add    eax,0xffffffbd
c000447c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004480:	83 d2 ff             	adc    edx,0xffffffff
c0004483:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004487:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000448b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004492:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000449a:	be 22 00 00 00       	mov    esi,0x22
c000449f:	31 ff                	xor    edi,edi
c00044a1:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044a9:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044b1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044b9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044bd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044c3:	75 0e                	jne    c00044d3 <create_partition+0xca>
c00044c5:	b9 00 02 00 00       	mov    ecx,0x200
c00044ca:	31 d2                	xor    edx,edx
c00044cc:	89 d8                	mov    eax,ebx
c00044ce:	e8 1e d6 ff ff       	call   c0001af1 <mem_set>
c00044d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044e2:	0f 84 23 01 00 00    	je     c000460b <create_partition+0x202>
c00044e8:	89 f0                	mov    eax,esi
c00044ea:	89 fa                	mov    edx,edi
c00044ec:	05 ff 07 00 00       	add    eax,0x7ff
c00044f1:	83 d2 00             	adc    edx,0x0
c00044f4:	89 c1                	mov    ecx,eax
c00044f6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004500:	89 ce                	mov    esi,ecx
c0004502:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004506:	89 d7                	mov    edi,edx
c0004508:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000450c:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004510:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004513:	89 04 24             	mov    DWORD PTR [esp],eax
c0004516:	b8 64 00 00 00       	mov    eax,0x64
c000451b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000451e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004522:	b8 00 00 00 00       	mov    eax,0x0
c0004527:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000452b:	72 41                	jb     c000456e <create_partition+0x165>
c000452d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004535:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000453a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000453e:	01 c1                	add    ecx,eax
c0004540:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004544:	f7 24 24             	mul    DWORD PTR [esp]
c0004547:	6a 00                	push   0x0
c0004549:	01 ca                	add    edx,ecx
c000454b:	6a 64                	push   0x64
c000454d:	52                   	push   edx
c000454e:	50                   	push   eax
c000454f:	e8 c8 af 01 00       	call   c001f51c <__udivdi3>
c0004554:	83 c4 10             	add    esp,0x10
c0004557:	05 ff 07 00 00       	add    eax,0x7ff
c000455c:	83 d2 00             	adc    edx,0x0
c000455f:	89 c1                	mov    ecx,eax
c0004561:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000456b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000456e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004571:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004575:	01 f0                	add    eax,esi
c0004577:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000457b:	11 fa                	adc    edx,edi
c000457d:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004581:	19 d1                	sbb    ecx,edx
c0004583:	73 2e                	jae    c00045b3 <create_partition+0x1aa>
c0004585:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004589:	89 f8                	mov    eax,edi
c000458b:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000458f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004596:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000459e:	73 6b                	jae    c000460b <create_partition+0x202>
c00045a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045a8:	29 f0                	sub    eax,esi
c00045aa:	19 fa                	sbb    edx,edi
c00045ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00045af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045ba:	74 4f                	je     c000460b <create_partition+0x202>
c00045bc:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045bf:	b9 10 00 00 00       	mov    ecx,0x10
c00045c4:	ba 50 05 02 c0       	mov    edx,0xc0020550
c00045c9:	e8 0e d5 ff ff       	call   c0001adc <mem_cpy>
c00045ce:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045d2:	b9 10 00 00 00       	mov    ecx,0x10
c00045d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045db:	e8 49 db ff ff       	call   c0002129 <make_rand>
c00045e0:	89 f2                	mov    edx,esi
c00045e2:	89 f9                	mov    ecx,edi
c00045e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045e8:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045ec:	e8 e5 d4 ff ff       	call   c0001ad6 <st_qword>
c00045f1:	03 34 24             	add    esi,DWORD PTR [esp]
c00045f4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045f8:	89 f2                	mov    edx,esi
c00045fa:	89 f9                	mov    ecx,edi
c00045fc:	83 c2 ff             	add    edx,0xffffffff
c00045ff:	83 d1 ff             	adc    ecx,0xffffffff
c0004602:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004606:	e8 cb d4 ff ff       	call   c0001ad6 <st_qword>
c000460b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000460f:	83 e8 80             	sub    eax,0xffffff80
c0004612:	89 c5                	mov    ebp,eax
c0004614:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004618:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000461e:	75 6b                	jne    c000468b <create_partition+0x282>
c0004620:	45                   	inc    ebp
c0004621:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004625:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000462a:	e8 56 da ff ff       	call   c0002085 <crc32>
c000462f:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004635:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004639:	75 e5                	jne    c0004620 <create_partition+0x217>
c000463b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000463f:	83 ec 0c             	sub    esp,0xc
c0004642:	c1 ed 09             	shr    ebp,0x9
c0004645:	31 d2                	xor    edx,edx
c0004647:	6a 01                	push   0x1
c0004649:	52                   	push   edx
c000464a:	8d 45 02             	lea    eax,[ebp+0x2]
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 d0 d3 ff ff       	call   c0001a28 <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 d7 fd ff ff    	jne    c000443a <create_partition+0x31>
c0004663:	83 ec 0c             	sub    esp,0xc
c0004666:	89 e8                	mov    eax,ebp
c0004668:	31 d2                	xor    edx,edx
c000466a:	6a 01                	push   0x1
c000466c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004670:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004674:	52                   	push   edx
c0004675:	50                   	push   eax
c0004676:	53                   	push   ebx
c0004677:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000467b:	e8 a8 d3 ff ff       	call   c0001a28 <disk_write>
c0004680:	83 c4 20             	add    esp,0x20
c0004683:	85 c0                	test   eax,eax
c0004685:	0f 85 af fd ff ff    	jne    c000443a <create_partition+0x31>
c000468b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000468f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004693:	3d 00 40 00 00       	cmp    eax,0x4000
c0004698:	74 0d                	je     c00046a7 <create_partition+0x29e>
c000469a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000469e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046a2:	e9 12 fe ff ff       	jmp    c00044b9 <create_partition+0xb0>
c00046a7:	31 d2                	xor    edx,edx
c00046a9:	b9 00 02 00 00       	mov    ecx,0x200
c00046ae:	89 d8                	mov    eax,ebx
c00046b0:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046b3:	e8 39 d4 ff ff       	call   c0001af1 <mem_set>
c00046b8:	b9 10 00 00 00       	mov    ecx,0x10
c00046bd:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00046c2:	89 d8                	mov    eax,ebx
c00046c4:	e8 13 d4 ff ff       	call   c0001adc <mem_cpy>
c00046c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046cd:	f7 d2                	not    edx
c00046cf:	8d 43 58             	lea    eax,[ebx+0x58]
c00046d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046d5:	e8 f9 d3 ff ff       	call   c0001ad3 <st_dword>
c00046da:	8d 43 18             	lea    eax,[ebx+0x18]
c00046dd:	31 c9                	xor    ecx,ecx
c00046df:	ba 01 00 00 00       	mov    edx,0x1
c00046e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e7:	e8 ea d3 ff ff       	call   c0001ad6 <st_qword>
c00046ec:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f0:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046f4:	83 c2 ff             	add    edx,0xffffffff
c00046f7:	89 e8                	mov    eax,ebp
c00046f9:	83 d1 ff             	adc    ecx,0xffffffff
c00046fc:	e8 d5 d3 ff ff       	call   c0001ad6 <st_qword>
c0004701:	31 c9                	xor    ecx,ecx
c0004703:	8d 43 28             	lea    eax,[ebx+0x28]
c0004706:	ba 22 00 00 00       	mov    edx,0x22
c000470b:	e8 c6 d3 ff ff       	call   c0001ad6 <st_qword>
c0004710:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004714:	83 c2 de             	add    edx,0xffffffde
c0004717:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000471b:	83 d1 ff             	adc    ecx,0xffffffff
c000471e:	8d 43 30             	lea    eax,[ebx+0x30]
c0004721:	e8 b0 d3 ff ff       	call   c0001ad6 <st_qword>
c0004726:	8d 43 54             	lea    eax,[ebx+0x54]
c0004729:	ba 80 00 00 00       	mov    edx,0x80
c000472e:	31 f6                	xor    esi,esi
c0004730:	e8 9e d3 ff ff       	call   c0001ad3 <st_dword>
c0004735:	8d 43 50             	lea    eax,[ebx+0x50]
c0004738:	ba 80 00 00 00       	mov    edx,0x80
c000473d:	e8 91 d3 ff ff       	call   c0001ad3 <st_dword>
c0004742:	ba 02 00 00 00       	mov    edx,0x2
c0004747:	89 f8                	mov    eax,edi
c0004749:	e8 85 d3 ff ff       	call   c0001ad3 <st_dword>
c000474e:	8d 53 38             	lea    edx,[ebx+0x38]
c0004751:	b9 10 00 00 00       	mov    ecx,0x10
c0004756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000475a:	e8 ca d9 ff ff       	call   c0002129 <make_rand>
c000475f:	83 c8 ff             	or     eax,0xffffffff
c0004762:	46                   	inc    esi
c0004763:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004768:	e8 18 d9 ff ff       	call   c0002085 <crc32>
c000476d:	83 fe 5c             	cmp    esi,0x5c
c0004770:	75 f0                	jne    c0004762 <create_partition+0x359>
c0004772:	f7 d0                	not    eax
c0004774:	8d 73 10             	lea    esi,[ebx+0x10]
c0004777:	89 c2                	mov    edx,eax
c0004779:	89 f0                	mov    eax,esi
c000477b:	e8 53 d3 ff ff       	call   c0001ad3 <st_dword>
c0004780:	83 ec 0c             	sub    esp,0xc
c0004783:	6a 01                	push   0x1
c0004785:	6a 00                	push   0x0
c0004787:	6a 01                	push   0x1
c0004789:	53                   	push   ebx
c000478a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000478e:	e8 95 d2 ff ff       	call   c0001a28 <disk_write>
c0004793:	83 c4 20             	add    esp,0x20
c0004796:	85 c0                	test   eax,eax
c0004798:	0f 85 9c fc ff ff    	jne    c000443a <create_partition+0x31>
c000479e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047a2:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047a6:	83 c2 ff             	add    edx,0xffffffff
c00047a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047ac:	83 d1 ff             	adc    ecx,0xffffffff
c00047af:	e8 22 d3 ff ff       	call   c0001ad6 <st_qword>
c00047b4:	ba 01 00 00 00       	mov    edx,0x1
c00047b9:	31 c9                	xor    ecx,ecx
c00047bb:	89 e8                	mov    eax,ebp
c00047bd:	e8 14 d3 ff ff       	call   c0001ad6 <st_qword>
c00047c2:	89 f8                	mov    eax,edi
c00047c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047cc:	e8 05 d3 ff ff       	call   c0001ad6 <st_qword>
c00047d1:	89 f0                	mov    eax,esi
c00047d3:	31 d2                	xor    edx,edx
c00047d5:	31 ff                	xor    edi,edi
c00047d7:	e8 f7 d2 ff ff       	call   c0001ad3 <st_dword>
c00047dc:	83 c8 ff             	or     eax,0xffffffff
c00047df:	47                   	inc    edi
c00047e0:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047e5:	e8 9b d8 ff ff       	call   c0002085 <crc32>
c00047ea:	83 ff 5c             	cmp    edi,0x5c
c00047ed:	75 f0                	jne    c00047df <create_partition+0x3d6>
c00047ef:	f7 d0                	not    eax
c00047f1:	89 c2                	mov    edx,eax
c00047f3:	89 f0                	mov    eax,esi
c00047f5:	e8 d9 d2 ff ff       	call   c0001ad3 <st_dword>
c00047fa:	83 ec 0c             	sub    esp,0xc
c00047fd:	6a 01                	push   0x1
c00047ff:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004803:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004807:	83 c0 ff             	add    eax,0xffffffff
c000480a:	83 d2 ff             	adc    edx,0xffffffff
c000480d:	52                   	push   edx
c000480e:	50                   	push   eax
c000480f:	53                   	push   ebx
c0004810:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004814:	e8 0f d2 ff ff       	call   c0001a28 <disk_write>
c0004819:	83 c4 20             	add    esp,0x20
c000481c:	85 c0                	test   eax,eax
c000481e:	0f 85 16 fc ff ff    	jne    c000443a <create_partition+0x31>
c0004824:	31 d2                	xor    edx,edx
c0004826:	89 d8                	mov    eax,ebx
c0004828:	b9 00 02 00 00       	mov    ecx,0x200
c000482d:	e8 bf d2 ff ff       	call   c0001af1 <mem_set>
c0004832:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004838:	b9 10 00 00 00       	mov    ecx,0x10
c000483d:	ba 50 04 02 c0       	mov    edx,0xc0020450
c0004842:	e8 95 d2 ff ff       	call   c0001adc <mem_cpy>
c0004847:	e9 3d 01 00 00       	jmp    c0004989 <create_partition+0x580>
c000484c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004850:	b9 05 00 00 00       	mov    ecx,0x5
c0004855:	89 04 24             	mov    DWORD PTR [esp],eax
c0004858:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c000485d:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004862:	31 d2                	xor    edx,edx
c0004864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004867:	f7 f6                	div    esi
c0004869:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000486e:	76 0c                	jbe    c000487c <create_partition+0x473>
c0004870:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c0004874:	49                   	dec    ecx
c0004875:	75 e6                	jne    c000485d <create_partition+0x454>
c0004877:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c000487c:	b9 00 02 00 00       	mov    ecx,0x200
c0004881:	31 d2                	xor    edx,edx
c0004883:	89 d8                	mov    eax,ebx
c0004885:	bd 3f 00 00 00       	mov    ebp,0x3f
c000488a:	e8 62 d2 ff ff       	call   c0001af1 <mem_set>
c000488f:	b9 64 00 00 00       	mov    ecx,0x64
c0004894:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004897:	31 d2                	xor    edx,edx
c0004899:	f7 f1                	div    ecx
c000489b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000489f:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c00048a5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00048ad:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00048b2:	0f 96 c2             	setbe  dl
c00048b5:	85 ed                	test   ebp,ebp
c00048b7:	0f 95 c0             	setne  al
c00048ba:	84 c2                	test   dl,al
c00048bc:	0f 84 c7 00 00 00    	je     c0004989 <create_partition+0x580>
c00048c2:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048c5:	0f 83 be 00 00 00    	jae    c0004989 <create_partition+0x580>
c00048cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048d3:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048d6:	83 fe 64             	cmp    esi,0x64
c00048d9:	77 0c                	ja     c00048e7 <create_partition+0x4de>
c00048db:	74 07                	je     c00048e4 <create_partition+0x4db>
c00048dd:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048e2:	eb 03                	jmp    c00048e7 <create_partition+0x4de>
c00048e4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048e7:	89 e8                	mov    eax,ebp
c00048e9:	01 f0                	add    eax,esi
c00048eb:	72 05                	jb     c00048f2 <create_partition+0x4e9>
c00048ed:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048f0:	76 07                	jbe    c00048f9 <create_partition+0x4f0>
c00048f2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048f5:	29 ee                	sub    esi,ebp
c00048f7:	eb 08                	jmp    c0004901 <create_partition+0x4f8>
c00048f9:	85 f6                	test   esi,esi
c00048fb:	0f 84 88 00 00 00    	je     c0004989 <create_partition+0x580>
c0004901:	89 c8                	mov    eax,ecx
c0004903:	89 ea                	mov    edx,ebp
c0004905:	e8 c9 d1 ff ff       	call   c0001ad3 <st_dword>
c000490a:	89 f2                	mov    edx,esi
c000490c:	bf 3f 00 00 00       	mov    edi,0x3f
c0004911:	8d 41 04             	lea    eax,[ecx+0x4]
c0004914:	e8 ba d1 ff ff       	call   c0001ad3 <st_dword>
c0004919:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000491d:	31 d2                	xor    edx,edx
c000491f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004923:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c0004926:	83 c1 10             	add    ecx,0x10
c0004929:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000492e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004932:	89 e8                	mov    eax,ebp
c0004934:	f7 f7                	div    edi
c0004936:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000493a:	31 d2                	xor    edx,edx
c000493c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004940:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004943:	89 c2                	mov    edx,eax
c0004945:	c1 ea 02             	shr    edx,0x2
c0004948:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000494c:	47                   	inc    edi
c000494d:	01 f5                	add    ebp,esi
c000494f:	83 e2 c0             	and    edx,0xffffffc0
c0004952:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c0004955:	09 fa                	or     edx,edi
c0004957:	8d 45 ff             	lea    eax,[ebp-0x1]
c000495a:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c000495d:	bf 3f 00 00 00       	mov    edi,0x3f
c0004962:	31 d2                	xor    edx,edx
c0004964:	f7 f7                	div    edi
c0004966:	89 d6                	mov    esi,edx
c0004968:	31 d2                	xor    edx,edx
c000496a:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000496e:	89 c7                	mov    edi,eax
c0004970:	46                   	inc    esi
c0004971:	c1 ef 02             	shr    edi,0x2
c0004974:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c0004977:	83 e7 c0             	and    edi,0xffffffc0
c000497a:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c000497d:	09 fe                	or     esi,edi
c000497f:	89 f2                	mov    edx,esi
c0004981:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c0004984:	e9 24 ff ff ff       	jmp    c00048ad <create_partition+0x4a4>
c0004989:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000498f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004994:	e8 36 d1 ff ff       	call   c0001acf <st_word>
c0004999:	83 ec 0c             	sub    esp,0xc
c000499c:	6a 01                	push   0x1
c000499e:	6a 00                	push   0x0
c00049a0:	6a 00                	push   0x0
c00049a2:	53                   	push   ebx
c00049a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049a7:	e8 7c d0 ff ff       	call   c0001a28 <disk_write>
c00049ac:	83 c4 20             	add    esp,0x20
c00049af:	85 c0                	test   eax,eax
c00049b1:	0f 95 c0             	setne  al
c00049b4:	0f b6 c0             	movzx  eax,al
c00049b7:	83 c4 5c             	add    esp,0x5c
c00049ba:	5b                   	pop    ebx
c00049bb:	5e                   	pop    esi
c00049bc:	5f                   	pop    edi
c00049bd:	5d                   	pop    ebp
c00049be:	c3                   	ret    

c00049bf <get_fileinfo>:
c00049bf:	55                   	push   ebp
c00049c0:	57                   	push   edi
c00049c1:	56                   	push   esi
c00049c2:	53                   	push   ebx
c00049c3:	83 ec 1c             	sub    esp,0x1c
c00049c6:	8b 30                	mov    esi,DWORD PTR [eax]
c00049c8:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049cc:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049cf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d3:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049d6:	0f 84 dc 01 00 00    	je     c0004bb8 <get_fileinfo+0x1f9>
c00049dc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049df:	75 0f                	jne    c00049f0 <get_fileinfo+0x31>
c00049e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e4:	83 c4 1c             	add    esp,0x1c
c00049e7:	5b                   	pop    ebx
c00049e8:	5e                   	pop    esi
c00049e9:	5f                   	pop    edi
c00049ea:	5d                   	pop    ebp
c00049eb:	e9 70 d5 ff ff       	jmp    c0001f60 <get_xfileinfo>
c00049f0:	89 d3                	mov    ebx,edx
c00049f2:	89 c6                	mov    esi,eax
c00049f4:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049f8:	74 6a                	je     c0004a64 <get_fileinfo+0xa5>
c00049fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a02:	31 ed                	xor    ebp,ebp
c0004a04:	31 ff                	xor    edi,edi
c0004a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a11:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a15:	66 85 d2             	test   dx,dx
c0004a18:	74 3e                	je     c0004a58 <get_fileinfo+0x99>
c0004a1a:	66 85 ed             	test   bp,bp
c0004a1d:	75 0c                	jne    c0004a2b <get_fileinfo+0x6c>
c0004a1f:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a25:	66 3d ff 07          	cmp    ax,0x7ff
c0004a29:	76 22                	jbe    c0004a4d <get_fileinfo+0x8e>
c0004a2b:	89 e8                	mov    eax,ebp
c0004a2d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a32:	c1 e0 10             	shl    eax,0x10
c0004a35:	29 f9                	sub    ecx,edi
c0004a37:	09 d0                	or     eax,edx
c0004a39:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a3d:	e8 bb d1 ff ff       	call   c0001bfd <put_utf>
c0004a42:	84 c0                	test   al,al
c0004a44:	74 10                	je     c0004a56 <get_fileinfo+0x97>
c0004a46:	0f b6 c0             	movzx  eax,al
c0004a49:	01 c7                	add    edi,eax
c0004a4b:	31 d2                	xor    edx,edx
c0004a4d:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a52:	89 d5                	mov    ebp,edx
c0004a54:	eb b0                	jmp    c0004a06 <get_fileinfo+0x47>
c0004a56:	31 ff                	xor    edi,edi
c0004a58:	66 85 ed             	test   bp,bp
c0004a5b:	74 02                	je     c0004a5f <get_fileinfo+0xa0>
c0004a5d:	31 ff                	xor    edi,edi
c0004a5f:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a64:	31 ff                	xor    edi,edi
c0004a66:	31 c9                	xor    ecx,ecx
c0004a68:	83 f9 0a             	cmp    ecx,0xa
c0004a6b:	0f 87 ad 00 00 00    	ja     c0004b1e <get_fileinfo+0x15f>
c0004a71:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a74:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a77:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a7b:	66 83 fa 20          	cmp    dx,0x20
c0004a7f:	0f 84 92 00 00 00    	je     c0004b17 <get_fileinfo+0x158>
c0004a85:	66 83 fa 05          	cmp    dx,0x5
c0004a89:	75 05                	jne    c0004a90 <get_fileinfo+0xd1>
c0004a8b:	ba e5 00 00 00       	mov    edx,0xe5
c0004a90:	83 fd 09             	cmp    ebp,0x9
c0004a93:	75 0b                	jne    c0004aa0 <get_fileinfo+0xe1>
c0004a95:	83 ff 0b             	cmp    edi,0xb
c0004a98:	77 06                	ja     c0004aa0 <get_fileinfo+0xe1>
c0004a9a:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a9f:	47                   	inc    edi
c0004aa0:	0f b7 c2             	movzx  eax,dx
c0004aa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aa7:	e8 85 d0 ff ff       	call   c0001b31 <dbc_1st>
c0004aac:	85 c0                	test   eax,eax
c0004aae:	74 2f                	je     c0004adf <get_fileinfo+0x120>
c0004ab0:	83 fd 08             	cmp    ebp,0x8
c0004ab3:	74 2a                	je     c0004adf <get_fileinfo+0x120>
c0004ab5:	83 fd 0b             	cmp    ebp,0xb
c0004ab8:	74 25                	je     c0004adf <get_fileinfo+0x120>
c0004aba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac1:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ac5:	e8 6a d0 ff ff       	call   c0001b34 <dbc_2nd>
c0004aca:	85 c0                	test   eax,eax
c0004acc:	74 11                	je     c0004adf <get_fileinfo+0x120>
c0004ace:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad2:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ad5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ada:	c1 e2 08             	shl    edx,0x8
c0004add:	09 c2                	or     edx,eax
c0004adf:	50                   	push   eax
c0004ae0:	50                   	push   eax
c0004ae1:	68 b5 01 00 00       	push   0x1b5
c0004ae6:	0f b7 d2             	movzx  edx,dx
c0004ae9:	52                   	push   edx
c0004aea:	e8 17 38 00 00       	call   c0008306 <ff_oem2uni>
c0004aef:	83 c4 10             	add    esp,0x10
c0004af2:	66 85 c0             	test   ax,ax
c0004af5:	75 04                	jne    c0004afb <get_fileinfo+0x13c>
c0004af7:	31 ff                	xor    edi,edi
c0004af9:	eb 23                	jmp    c0004b1e <get_fileinfo+0x15f>
c0004afb:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b00:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b04:	29 f9                	sub    ecx,edi
c0004b06:	0f b7 c0             	movzx  eax,ax
c0004b09:	e8 ef d0 ff ff       	call   c0001bfd <put_utf>
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 e5                	je     c0004af7 <get_fileinfo+0x138>
c0004b12:	0f b6 c0             	movzx  eax,al
c0004b15:	01 c7                	add    edi,eax
c0004b17:	89 e9                	mov    ecx,ebp
c0004b19:	e9 4a ff ff ff       	jmp    c0004a68 <get_fileinfo+0xa9>
c0004b1e:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b23:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b27:	75 54                	jne    c0004b7d <get_fileinfo+0x1be>
c0004b29:	85 ff                	test   edi,edi
c0004b2b:	75 0b                	jne    c0004b38 <get_fileinfo+0x179>
c0004b2d:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b31:	ba 01 00 00 00       	mov    edx,0x1
c0004b36:	eb 33                	jmp    c0004b6b <get_fileinfo+0x1ac>
c0004b38:	b1 08                	mov    cl,0x8
c0004b3a:	31 d2                	xor    edx,edx
c0004b3c:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b42:	84 c0                	test   al,al
c0004b44:	74 25                	je     c0004b6b <get_fileinfo+0x1ac>
c0004b46:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4a:	74 16                	je     c0004b62 <get_fileinfo+0x1a3>
c0004b4c:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b4f:	66 83 ff 19          	cmp    di,0x19
c0004b53:	77 0f                	ja     c0004b64 <get_fileinfo+0x1a5>
c0004b55:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b58:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b5b:	74 07                	je     c0004b64 <get_fileinfo+0x1a5>
c0004b5d:	83 c0 20             	add    eax,0x20
c0004b60:	eb 02                	jmp    c0004b64 <get_fileinfo+0x1a5>
c0004b62:	b1 10                	mov    cl,0x10
c0004b64:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b68:	42                   	inc    edx
c0004b69:	eb d1                	jmp    c0004b3c <get_fileinfo+0x17d>
c0004b6b:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b70:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b73:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b77:	75 04                	jne    c0004b7d <get_fileinfo+0x1be>
c0004b79:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b7d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b80:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b83:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b89:	83 c0 1c             	add    eax,0x1c
c0004b8c:	e8 d9 ce ff ff       	call   c0001a6a <ld_dword>
c0004b91:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b98:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9d:	83 c0 16             	add    eax,0x16
c0004ba0:	e8 b8 ce ff ff       	call   c0001a5d <ld_word>
c0004ba5:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ba9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bac:	83 c0 18             	add    eax,0x18
c0004baf:	e8 a9 ce ff ff       	call   c0001a5d <ld_word>
c0004bb4:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bb8:	83 c4 1c             	add    esp,0x1c
c0004bbb:	5b                   	pop    ebx
c0004bbc:	5e                   	pop    esi
c0004bbd:	5f                   	pop    edi
c0004bbe:	5d                   	pop    ebp
c0004bbf:	c3                   	ret    

c0004bc0 <ld_clust.isra.0>:
c0004bc0:	56                   	push   esi
c0004bc1:	89 c6                	mov    esi,eax
c0004bc3:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bc6:	53                   	push   ebx
c0004bc7:	89 d3                	mov    ebx,edx
c0004bc9:	e8 8f ce ff ff       	call   c0001a5d <ld_word>
c0004bce:	0f b7 c8             	movzx  ecx,ax
c0004bd1:	89 f0                	mov    eax,esi
c0004bd3:	3c 03                	cmp    al,0x3
c0004bd5:	75 0d                	jne    c0004be4 <ld_clust.isra.0+0x24>
c0004bd7:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bda:	e8 7e ce ff ff       	call   c0001a5d <ld_word>
c0004bdf:	c1 e0 10             	shl    eax,0x10
c0004be2:	09 c1                	or     ecx,eax
c0004be4:	5b                   	pop    ebx
c0004be5:	89 c8                	mov    eax,ecx
c0004be7:	5e                   	pop    esi
c0004be8:	c3                   	ret    

c0004be9 <st_clust.isra.1>:
c0004be9:	56                   	push   esi
c0004bea:	89 c6                	mov    esi,eax
c0004bec:	53                   	push   ebx
c0004bed:	89 d3                	mov    ebx,edx
c0004bef:	0f b7 d1             	movzx  edx,cx
c0004bf2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bf5:	e8 d5 ce ff ff       	call   c0001acf <st_word>
c0004bfa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bfd:	75 0f                	jne    c0004c0e <st_clust.isra.1+0x25>
c0004bff:	c1 e9 10             	shr    ecx,0x10
c0004c02:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c05:	89 ca                	mov    edx,ecx
c0004c07:	5b                   	pop    ebx
c0004c08:	5e                   	pop    esi
c0004c09:	e9 c1 ce ff ff       	jmp    c0001acf <st_word>
c0004c0e:	5b                   	pop    ebx
c0004c0f:	5e                   	pop    esi
c0004c10:	c3                   	ret    

c0004c11 <init_alloc_info.isra.2>:
c0004c11:	56                   	push   esi
c0004c12:	89 c6                	mov    esi,eax
c0004c14:	53                   	push   ebx
c0004c15:	89 d3                	mov    ebx,edx
c0004c17:	51                   	push   ecx
c0004c18:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1a:	83 c0 34             	add    eax,0x34
c0004c1d:	e8 48 ce ff ff       	call   c0001a6a <ld_dword>
c0004c22:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c25:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c27:	83 c0 38             	add    eax,0x38
c0004c2a:	e8 53 ce ff ff       	call   c0001a82 <ld_qword>
c0004c2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c32:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c35:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c37:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c41:	83 e0 02             	and    eax,0x2
c0004c44:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c47:	5b                   	pop    ebx
c0004c48:	5b                   	pop    ebx
c0004c49:	5e                   	pop    esi
c0004c4a:	c3                   	ret    

c0004c4b <follow_path>:
c0004c4b:	56                   	push   esi
c0004c4c:	53                   	push   ebx
c0004c4d:	89 c3                	mov    ebx,eax
c0004c4f:	83 ec 14             	sub    esp,0x14
c0004c52:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c5c:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c5e:	80 fa 2f             	cmp    dl,0x2f
c0004c61:	75 07                	jne    c0004c6a <follow_path+0x1f>
c0004c63:	40                   	inc    eax
c0004c64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c68:	eb ee                	jmp    c0004c58 <follow_path+0xd>
c0004c6a:	80 fa 5c             	cmp    dl,0x5c
c0004c6d:	74 f4                	je     c0004c63 <follow_path+0x18>
c0004c6f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c7d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c80:	77 52                	ja     c0004cd4 <follow_path+0x89>
c0004c82:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c86:	31 d2                	xor    edx,edx
c0004c88:	89 d8                	mov    eax,ebx
c0004c8a:	e8 1d e3 ff ff       	call   c0002fac <dir_sdi>
c0004c8f:	eb 7c                	jmp    c0004d0d <follow_path+0xc2>
c0004c91:	89 d8                	mov    eax,ebx
c0004c93:	e8 60 f2 ff ff       	call   c0003ef8 <dir_find>
c0004c98:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c9b:	85 c0                	test   eax,eax
c0004c9d:	75 46                	jne    c0004ce5 <follow_path+0x9a>
c0004c9f:	80 e2 04             	and    dl,0x4
c0004ca2:	75 69                	jne    c0004d0d <follow_path+0xc2>
c0004ca4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ca8:	74 5e                	je     c0004d08 <follow_path+0xbd>
c0004caa:	8a 06                	mov    al,BYTE PTR [esi]
c0004cac:	3c 04                	cmp    al,0x4
c0004cae:	75 41                	jne    c0004cf1 <follow_path+0xa6>
c0004cb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb3:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cb7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cba:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cbd:	30 c0                	xor    al,al
c0004cbf:	09 d0                	or     eax,edx
c0004cc1:	89 da                	mov    edx,ebx
c0004cc3:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cc6:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cc9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ccc:	8d 46 10             	lea    eax,[esi+0x10]
c0004ccf:	e8 3d ff ff ff       	call   c0004c11 <init_alloc_info.isra.2>
c0004cd4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cd8:	89 d8                	mov    eax,ebx
c0004cda:	e8 b6 ed ff ff       	call   c0003a95 <create_name>
c0004cdf:	85 c0                	test   eax,eax
c0004ce1:	74 ae                	je     c0004c91 <follow_path+0x46>
c0004ce3:	eb 28                	jmp    c0004d0d <follow_path+0xc2>
c0004ce5:	83 f8 04             	cmp    eax,0x4
c0004ce8:	75 23                	jne    c0004d0d <follow_path+0xc2>
c0004cea:	80 e2 04             	and    dl,0x4
c0004ced:	74 19                	je     c0004d08 <follow_path+0xbd>
c0004cef:	eb 1c                	jmp    c0004d0d <follow_path+0xc2>
c0004cf1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf4:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cfa:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cfe:	e8 bd fe ff ff       	call   c0004bc0 <ld_clust.isra.0>
c0004d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d06:	eb cc                	jmp    c0004cd4 <follow_path+0x89>
c0004d08:	b8 05 00 00 00       	mov    eax,0x5
c0004d0d:	83 c4 14             	add    esp,0x14
c0004d10:	5b                   	pop    ebx
c0004d11:	5e                   	pop    esi
c0004d12:	c3                   	ret    

c0004d13 <f_mount>:
c0004d13:	53                   	push   ebx
c0004d14:	83 ec 18             	sub    esp,0x18
c0004d17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d27:	e8 13 d3 ff ff       	call   c000203f <get_ldnumber>
c0004d2c:	89 c2                	mov    edx,eax
c0004d2e:	b8 0b 00 00 00       	mov    eax,0xb
c0004d33:	85 d2                	test   edx,edx
c0004d35:	78 39                	js     c0004d70 <f_mount+0x5d>
c0004d37:	8b 04 95 40 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8c0]
c0004d3e:	85 c0                	test   eax,eax
c0004d40:	74 03                	je     c0004d45 <f_mount+0x32>
c0004d42:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d49:	85 c0                	test   eax,eax
c0004d4b:	74 03                	je     c0004d50 <f_mount+0x3d>
c0004d4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d54:	89 04 95 40 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8c0],eax
c0004d5b:	31 c0                	xor    eax,eax
c0004d5d:	84 db                	test   bl,bl
c0004d5f:	74 0f                	je     c0004d70 <f_mount+0x5d>
c0004d61:	31 c9                	xor    ecx,ecx
c0004d63:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d67:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d6b:	e8 6f d7 ff ff       	call   c00024df <mount_volume>
c0004d70:	83 c4 18             	add    esp,0x18
c0004d73:	5b                   	pop    ebx
c0004d74:	c3                   	ret    

c0004d75 <f_open>:
c0004d75:	55                   	push   ebp
c0004d76:	bd 09 00 00 00       	mov    ebp,0x9
c0004d7b:	57                   	push   edi
c0004d7c:	56                   	push   esi
c0004d7d:	53                   	push   ebx
c0004d7e:	83 ec 7c             	sub    esp,0x7c
c0004d81:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d88:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d8f:	85 db                	test   ebx,ebx
c0004d91:	0f 84 10 04 00 00    	je     c00051a7 <f_open+0x432>
c0004d97:	89 fe                	mov    esi,edi
c0004d99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d9d:	83 e6 3f             	and    esi,0x3f
c0004da0:	89 f0                	mov    eax,esi
c0004da2:	0f b6 c8             	movzx  ecx,al
c0004da5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dac:	e8 2e d7 ff ff       	call   c00024df <mount_volume>
c0004db1:	89 c5                	mov    ebp,eax
c0004db3:	85 c0                	test   eax,eax
c0004db5:	0f 85 e6 03 00 00    	jne    c00051a1 <f_open+0x42c>
c0004dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dbf:	83 ec 0c             	sub    esp,0xc
c0004dc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dc6:	bd 11 00 00 00       	mov    ebp,0x11
c0004dcb:	68 60 04 00 00       	push   0x460
c0004dd0:	e8 6e 34 00 00       	call   c0008243 <ff_memalloc>
c0004dd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd9:	83 c4 10             	add    esp,0x10
c0004ddc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de1:	0f 84 c0 03 00 00    	je     c00051a7 <f_open+0x432>
c0004de7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004deb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004def:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004df5:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004df8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dfb:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	e8 40 fe ff ff       	call   c0004c4b <follow_path>
c0004e0b:	89 c5                	mov    ebp,eax
c0004e0d:	85 c0                	test   eax,eax
c0004e0f:	75 0c                	jne    c0004e1d <f_open+0xa8>
c0004e11:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e16:	79 05                	jns    c0004e1d <f_open+0xa8>
c0004e18:	bd 06 00 00 00       	mov    ebp,0x6
c0004e1d:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e23:	0f 84 84 01 00 00    	je     c0004fad <f_open+0x238>
c0004e29:	85 ed                	test   ebp,ebp
c0004e2b:	74 20                	je     c0004e4d <f_open+0xd8>
c0004e2d:	83 fd 04             	cmp    ebp,0x4
c0004e30:	0f 85 58 03 00 00    	jne    c000518e <f_open+0x419>
c0004e36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3a:	83 ce 08             	or     esi,0x8
c0004e3d:	e8 7d f2 ff ff       	call   c00040bf <dir_register>
c0004e42:	89 c5                	mov    ebp,eax
c0004e44:	85 c0                	test   eax,eax
c0004e46:	74 2f                	je     c0004e77 <f_open+0x102>
c0004e48:	e9 41 03 00 00       	jmp    c000518e <f_open+0x419>
c0004e4d:	bd 07 00 00 00       	mov    ebp,0x7
c0004e52:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e57:	0f 85 31 03 00 00    	jne    c000518e <f_open+0x419>
c0004e5d:	bd 08 00 00 00       	mov    ebp,0x8
c0004e62:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e68:	0f 85 20 03 00 00    	jne    c000518e <f_open+0x419>
c0004e6e:	83 e7 08             	and    edi,0x8
c0004e71:	0f 84 65 01 00 00    	je     c0004fdc <f_open+0x267>
c0004e77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e7b:	8a 02                	mov    al,BYTE PTR [edx]
c0004e7d:	3c 04                	cmp    al,0x4
c0004e7f:	0f 85 97 00 00 00    	jne    c0004f1c <f_open+0x1a7>
c0004e85:	8d 42 10             	lea    eax,[edx+0x10]
c0004e88:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8a:	89 da                	mov    edx,ebx
c0004e8c:	e8 80 fd ff ff       	call   c0004c11 <init_alloc_info.isra.2>
c0004e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e95:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e98:	31 d2                	xor    edx,edx
c0004e9a:	83 c0 02             	add    eax,0x2
c0004e9d:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea2:	e8 4a cc ff ff       	call   c0001af1 <mem_set>
c0004ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eae:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb3:	83 c0 26             	add    eax,0x26
c0004eb6:	31 d2                	xor    edx,edx
c0004eb8:	e8 34 cc ff ff       	call   c0001af1 <mem_set>
c0004ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec4:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ec8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ecd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed0:	83 c0 08             	add    eax,0x8
c0004ed3:	e8 fb cb ff ff       	call   c0001ad3 <st_dword>
c0004ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004edc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004edf:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ee7:	e8 c4 ea ff ff       	call   c00039b0 <store_xdir>
c0004eec:	89 c5                	mov    ebp,eax
c0004eee:	85 c0                	test   eax,eax
c0004ef0:	0f 85 98 02 00 00    	jne    c000518e <f_open+0x419>
c0004ef6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ef9:	85 d2                	test   edx,edx
c0004efb:	0f 84 db 00 00 00    	je     c0004fdc <f_open+0x267>
c0004f01:	31 c9                	xor    ecx,ecx
c0004f03:	89 d8                	mov    eax,ebx
c0004f05:	e8 9b e3 ff ff       	call   c00032a5 <remove_chain>
c0004f0a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f0e:	89 c5                	mov    ebp,eax
c0004f10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f13:	48                   	dec    eax
c0004f14:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f17:	e9 b8 00 00 00       	jmp    c0004fd4 <f_open+0x25f>
c0004f1c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f20:	89 ea                	mov    edx,ebp
c0004f22:	e8 99 fc ff ff       	call   c0004bc0 <ld_clust.isra.0>
c0004f27:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f2c:	89 c7                	mov    edi,eax
c0004f2e:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f31:	e8 9d cb ff ff       	call   c0001ad3 <st_dword>
c0004f36:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f3e:	31 c9                	xor    ecx,ecx
c0004f40:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f48:	e8 9c fc ff ff       	call   c0004be9 <st_clust.isra.1>
c0004f4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f51:	83 c0 1c             	add    eax,0x1c
c0004f54:	31 d2                	xor    edx,edx
c0004f56:	e8 78 cb ff ff       	call   c0001ad3 <st_dword>
c0004f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5f:	85 ff                	test   edi,edi
c0004f61:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f65:	74 75                	je     c0004fdc <f_open+0x267>
c0004f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6b:	31 c9                	xor    ecx,ecx
c0004f6d:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f70:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f7f:	89 fa                	mov    edx,edi
c0004f81:	e8 1f e3 ff ff       	call   c00032a5 <remove_chain>
c0004f86:	89 c5                	mov    ebp,eax
c0004f88:	85 c0                	test   eax,eax
c0004f8a:	0f 85 fe 01 00 00    	jne    c000518e <f_open+0x419>
c0004f90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f9c:	4f                   	dec    edi
c0004f9d:	e8 92 d2 ff ff       	call   c0002234 <move_window>
c0004fa2:	89 c5                	mov    ebp,eax
c0004fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa8:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fab:	eb 27                	jmp    c0004fd4 <f_open+0x25f>
c0004fad:	85 ed                	test   ebp,ebp
c0004faf:	0f 85 d9 01 00 00    	jne    c000518e <f_open+0x419>
c0004fb5:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fb9:	bd 04 00 00 00       	mov    ebp,0x4
c0004fbe:	a8 10                	test   al,0x10
c0004fc0:	0f 85 c8 01 00 00    	jne    c000518e <f_open+0x419>
c0004fc6:	83 e7 02             	and    edi,0x2
c0004fc9:	74 11                	je     c0004fdc <f_open+0x267>
c0004fcb:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd0:	a8 01                	test   al,0x1
c0004fd2:	eb 02                	jmp    c0004fd6 <f_open+0x261>
c0004fd4:	85 ed                	test   ebp,ebp
c0004fd6:	0f 85 b2 01 00 00    	jne    c000518e <f_open+0x419>
c0004fdc:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe2:	74 03                	je     c0004fe7 <f_open+0x272>
c0004fe4:	83 ce 40             	or     esi,0x40
c0004fe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004feb:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fee:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff1:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004ff8:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffb:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004ffe:	8a 02                	mov    al,BYTE PTR [edx]
c0005000:	3c 04                	cmp    al,0x4
c0005002:	75 2a                	jne    c000502e <f_open+0x2b9>
c0005004:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005008:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000500b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000500f:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005014:	30 c0                	xor    al,al
c0005016:	09 c8                	or     eax,ecx
c0005018:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000501b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000501f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005022:	8d 42 10             	lea    eax,[edx+0x10]
c0005025:	89 da                	mov    edx,ebx
c0005027:	e8 e5 fb ff ff       	call   c0004c11 <init_alloc_info.isra.2>
c000502c:	eb 1c                	jmp    c000504a <f_open+0x2d5>
c000502e:	89 fa                	mov    edx,edi
c0005030:	e8 8b fb ff ff       	call   c0004bc0 <ld_clust.isra.0>
c0005035:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005038:	8d 47 1c             	lea    eax,[edi+0x1c]
c000503b:	e8 2a ca ff ff       	call   c0001a6a <ld_dword>
c0005040:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005047:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000504e:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005055:	89 03                	mov    DWORD PTR [ebx],eax
c0005057:	31 d2                	xor    edx,edx
c0005059:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000505d:	b9 00 02 00 00       	mov    ecx,0x200
c0005062:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005066:	89 f0                	mov    eax,esi
c0005068:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000506b:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005072:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005079:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005080:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005087:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000508e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005092:	e8 5a ca ff ff       	call   c0001af1 <mem_set>
c0005097:	83 e6 20             	and    esi,0x20
c000509a:	75 07                	jne    c00050a3 <f_open+0x32e>
c000509c:	31 ed                	xor    ebp,ebp
c000509e:	e9 eb 00 00 00       	jmp    c000518e <f_open+0x419>
c00050a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050a6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050b5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050b9:	74 e1                	je     c000509c <f_open+0x327>
c00050bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ca:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050cd:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d0:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d4:	c1 e5 09             	shl    ebp,0x9
c00050d7:	31 ff                	xor    edi,edi
c00050d9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050dd:	89 f8                	mov    eax,edi
c00050df:	89 ee                	mov    esi,ebp
c00050e1:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050e5:	73 22                	jae    c0005109 <f_open+0x394>
c00050e7:	89 d8                	mov    eax,ebx
c00050e9:	e8 c8 dc ff ff       	call   c0002db6 <get_fat>
c00050ee:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050f6:	89 c2                	mov    edx,eax
c00050f8:	83 f8 01             	cmp    eax,0x1
c00050fb:	76 10                	jbe    c000510d <f_open+0x398>
c00050fd:	83 f8 ff             	cmp    eax,0xffffffff
c0005100:	75 d5                	jne    c00050d7 <f_open+0x362>
c0005102:	bd 01 00 00 00       	mov    ebp,0x1
c0005107:	eb 09                	jmp    c0005112 <f_open+0x39d>
c0005109:	31 ed                	xor    ebp,ebp
c000510b:	eb 05                	jmp    c0005112 <f_open+0x39d>
c000510d:	bd 02 00 00 00       	mov    ebp,0x2
c0005112:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005115:	85 ed                	test   ebp,ebp
c0005117:	75 75                	jne    c000518e <f_open+0x419>
c0005119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000511d:	25 ff 01 00 00       	and    eax,0x1ff
c0005122:	0f 84 74 ff ff ff    	je     c000509c <f_open+0x327>
c0005128:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000512c:	bd 02 00 00 00       	mov    ebp,0x2
c0005131:	89 c8                	mov    eax,ecx
c0005133:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005137:	e8 ba cb ff ff       	call   c0001cf6 <clst2sect>
c000513c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005140:	89 d7                	mov    edi,edx
c0005142:	09 c7                	or     edi,eax
c0005144:	74 48                	je     c000518e <f_open+0x419>
c0005146:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000514e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005152:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005156:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005162:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005166:	83 ec 0c             	sub    esp,0xc
c0005169:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516c:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000516f:	6a 01                	push   0x1
c0005171:	52                   	push   edx
c0005172:	50                   	push   eax
c0005173:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005177:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000517b:	50                   	push   eax
c000517c:	e8 91 c8 ff ff       	call   c0001a12 <disk_read>
c0005181:	83 c4 20             	add    esp,0x20
c0005184:	85 c0                	test   eax,eax
c0005186:	0f 95 c0             	setne  al
c0005189:	0f b6 c0             	movzx  eax,al
c000518c:	89 c5                	mov    ebp,eax
c000518e:	83 ec 0c             	sub    esp,0xc
c0005191:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005195:	e8 bf 30 00 00       	call   c0008259 <ff_memfree>
c000519a:	83 c4 10             	add    esp,0x10
c000519d:	85 ed                	test   ebp,ebp
c000519f:	74 06                	je     c00051a7 <f_open+0x432>
c00051a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051a7:	83 c4 7c             	add    esp,0x7c
c00051aa:	89 e8                	mov    eax,ebp
c00051ac:	5b                   	pop    ebx
c00051ad:	5e                   	pop    esi
c00051ae:	5f                   	pop    edi
c00051af:	5d                   	pop    ebp
c00051b0:	c3                   	ret    

c00051b1 <f_read>:
c00051b1:	55                   	push   ebp
c00051b2:	57                   	push   edi
c00051b3:	56                   	push   esi
c00051b4:	53                   	push   ebx
c00051b5:	83 ec 2c             	sub    esp,0x2c
c00051b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051ca:	89 d8                	mov    eax,ebx
c00051cc:	e8 88 cf ff ff       	call   c0002159 <validate>
c00051d1:	89 c5                	mov    ebp,eax
c00051d3:	85 c0                	test   eax,eax
c00051d5:	0f 85 4c 02 00 00    	jne    c0005427 <f_read+0x276>
c00051db:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051df:	85 ed                	test   ebp,ebp
c00051e1:	0f 85 40 02 00 00    	jne    c0005427 <f_read+0x276>
c00051e7:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051eb:	0f 84 31 02 00 00    	je     c0005422 <f_read+0x271>
c00051f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051f7:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051fa:	bf 00 00 00 00       	mov    edi,0x0
c00051ff:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005202:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005206:	89 d1                	mov    ecx,edx
c0005208:	19 f9                	sbb    ecx,edi
c000520a:	0f 83 cf 00 00 00    	jae    c00052df <f_read+0x12e>
c0005210:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005214:	e9 c6 00 00 00       	jmp    c00052df <f_read+0x12e>
c0005219:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000521c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000521f:	89 d0                	mov    eax,edx
c0005221:	25 ff 01 00 00       	and    eax,0x1ff
c0005226:	0f 85 c9 01 00 00    	jne    c00053f5 <f_read+0x244>
c000522c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005230:	89 d6                	mov    esi,edx
c0005232:	89 cf                	mov    edi,ecx
c0005234:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005238:	0f ac fe 09          	shrd   esi,edi,0x9
c000523c:	48                   	dec    eax
c000523d:	21 f0                	and    eax,esi
c000523f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005243:	0f 84 a6 00 00 00    	je     c00052ef <f_read+0x13e>
c0005249:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005250:	89 c8                	mov    eax,ecx
c0005252:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005255:	e8 9c ca ff ff       	call   c0001cf6 <clst2sect>
c000525a:	89 d7                	mov    edi,edx
c000525c:	09 c7                	or     edi,eax
c000525e:	0f 84 b4 00 00 00    	je     c0005318 <f_read+0x167>
c0005264:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005268:	31 ff                	xor    edi,edi
c000526a:	01 c6                	add    esi,eax
c000526c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000526f:	11 d7                	adc    edi,edx
c0005271:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005279:	0f 86 fd 00 00 00    	jbe    c000537c <f_read+0x1cb>
c000527f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005283:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005287:	c1 e8 09             	shr    eax,0x9
c000528a:	89 04 24             	mov    DWORD PTR [esp],eax
c000528d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005290:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005294:	39 c2                	cmp    edx,eax
c0005296:	76 07                	jbe    c000529f <f_read+0xee>
c0005298:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000529c:	89 04 24             	mov    DWORD PTR [esp],eax
c000529f:	83 ec 0c             	sub    esp,0xc
c00052a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052a6:	57                   	push   edi
c00052a7:	56                   	push   esi
c00052a8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b0:	50                   	push   eax
c00052b1:	e8 5c c7 ff ff       	call   c0001a12 <disk_read>
c00052b6:	83 c4 20             	add    esp,0x20
c00052b9:	85 c0                	test   eax,eax
c00052bb:	75 6e                	jne    c000532b <f_read+0x17a>
c00052bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c1:	78 7e                	js     c0005341 <f_read+0x190>
c00052c3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052c6:	c1 e6 09             	shl    esi,0x9
c00052c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052cd:	31 ff                	xor    edi,edi
c00052cf:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d3:	01 30                	add    DWORD PTR [eax],esi
c00052d5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052d9:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052df:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e4:	0f 85 2f ff ff ff    	jne    c0005219 <f_read+0x68>
c00052ea:	e9 38 01 00 00       	jmp    c0005427 <f_read+0x276>
c00052ef:	89 c8                	mov    eax,ecx
c00052f1:	09 d0                	or     eax,edx
c00052f3:	75 05                	jne    c00052fa <f_read+0x149>
c00052f5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052f8:	eb 19                	jmp    c0005313 <f_read+0x162>
c00052fa:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052fe:	74 09                	je     c0005309 <f_read+0x158>
c0005300:	89 d8                	mov    eax,ebx
c0005302:	e8 10 ca ff ff       	call   c0001d17 <clmt_clust>
c0005307:	eb 0a                	jmp    c0005313 <f_read+0x162>
c0005309:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000530c:	89 d8                	mov    eax,ebx
c000530e:	e8 a3 da ff ff       	call   c0002db6 <get_fat>
c0005313:	83 f8 01             	cmp    eax,0x1
c0005316:	77 0e                	ja     c0005326 <f_read+0x175>
c0005318:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000531c:	bd 02 00 00 00       	mov    ebp,0x2
c0005321:	e9 01 01 00 00       	jmp    c0005427 <f_read+0x276>
c0005326:	83 f8 ff             	cmp    eax,0xffffffff
c0005329:	75 0e                	jne    c0005339 <f_read+0x188>
c000532b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000532f:	bd 01 00 00 00       	mov    ebp,0x1
c0005334:	e9 ee 00 00 00       	jmp    c0005427 <f_read+0x276>
c0005339:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000533c:	e9 08 ff ff ff       	jmp    c0005249 <f_read+0x98>
c0005341:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005344:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005347:	29 f0                	sub    eax,esi
c0005349:	19 fa                	sbb    edx,edi
c000534b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000534e:	89 d7                	mov    edi,edx
c0005350:	ba 00 00 00 00       	mov    edx,0x0
c0005355:	89 f9                	mov    ecx,edi
c0005357:	19 d1                	sbb    ecx,edx
c0005359:	0f 83 64 ff ff ff    	jae    c00052c3 <f_read+0x112>
c000535f:	89 c7                	mov    edi,eax
c0005361:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005365:	c1 e7 09             	shl    edi,0x9
c0005368:	8d 53 50             	lea    edx,[ebx+0x50]
c000536b:	01 f8                	add    eax,edi
c000536d:	b9 00 02 00 00       	mov    ecx,0x200
c0005372:	e8 65 c7 ff ff       	call   c0001adc <mem_cpy>
c0005377:	e9 47 ff ff ff       	jmp    c00052c3 <f_read+0x112>
c000537c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000537f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005382:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005386:	89 04 24             	mov    DWORD PTR [esp],eax
c0005389:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000538d:	75 05                	jne    c0005394 <f_read+0x1e3>
c000538f:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005392:	74 5b                	je     c00053ef <f_read+0x23e>
c0005394:	8d 43 50             	lea    eax,[ebx+0x50]
c0005397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000539b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000539f:	79 2a                	jns    c00053cb <f_read+0x21a>
c00053a1:	83 ec 0c             	sub    esp,0xc
c00053a4:	6a 01                	push   0x1
c00053a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053b6:	50                   	push   eax
c00053b7:	e8 6c c6 ff ff       	call   c0001a28 <disk_write>
c00053bc:	83 c4 20             	add    esp,0x20
c00053bf:	85 c0                	test   eax,eax
c00053c1:	0f 85 64 ff ff ff    	jne    c000532b <f_read+0x17a>
c00053c7:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053cb:	83 ec 0c             	sub    esp,0xc
c00053ce:	6a 01                	push   0x1
c00053d0:	57                   	push   edi
c00053d1:	56                   	push   esi
c00053d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053de:	50                   	push   eax
c00053df:	e8 2e c6 ff ff       	call   c0001a12 <disk_read>
c00053e4:	83 c4 20             	add    esp,0x20
c00053e7:	85 c0                	test   eax,eax
c00053e9:	0f 85 3c ff ff ff    	jne    c000532b <f_read+0x17a>
c00053ef:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053f8:	ba 00 02 00 00       	mov    edx,0x200
c00053fd:	25 ff 01 00 00       	and    eax,0x1ff
c0005402:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005406:	29 c2                	sub    edx,eax
c0005408:	39 d6                	cmp    esi,edx
c000540a:	76 02                	jbe    c000540e <f_read+0x25d>
c000540c:	89 d6                	mov    esi,edx
c000540e:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005412:	89 f1                	mov    ecx,esi
c0005414:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005418:	e8 bf c6 ff ff       	call   c0001adc <mem_cpy>
c000541d:	e9 a7 fe ff ff       	jmp    c00052c9 <f_read+0x118>
c0005422:	bd 07 00 00 00       	mov    ebp,0x7
c0005427:	83 c4 2c             	add    esp,0x2c
c000542a:	89 e8                	mov    eax,ebp
c000542c:	5b                   	pop    ebx
c000542d:	5e                   	pop    esi
c000542e:	5f                   	pop    edi
c000542f:	5d                   	pop    ebp
c0005430:	c3                   	ret    

c0005431 <f_write>:
c0005431:	55                   	push   ebp
c0005432:	57                   	push   edi
c0005433:	56                   	push   esi
c0005434:	53                   	push   ebx
c0005435:	83 ec 2c             	sub    esp,0x2c
c0005438:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000543c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005440:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005444:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544a:	89 d8                	mov    eax,ebx
c000544c:	e8 08 cd ff ff       	call   c0002159 <validate>
c0005451:	89 c5                	mov    ebp,eax
c0005453:	85 c0                	test   eax,eax
c0005455:	0f 85 86 02 00 00    	jne    c00056e1 <f_write+0x2b0>
c000545b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000545f:	85 ed                	test   ebp,ebp
c0005461:	0f 85 7a 02 00 00    	jne    c00056e1 <f_write+0x2b0>
c0005467:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000546b:	0f 84 6b 02 00 00    	je     c00056dc <f_write+0x2ab>
c0005471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005475:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005478:	0f 84 43 01 00 00    	je     c00055c1 <f_write+0x190>
c000547e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005481:	89 c1                	mov    ecx,eax
c0005483:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005487:	0f 83 34 01 00 00    	jae    c00055c1 <f_write+0x190>
c000548d:	f7 d0                	not    eax
c000548f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005493:	e9 29 01 00 00       	jmp    c00055c1 <f_write+0x190>
c0005498:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000549b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000549e:	89 d0                	mov    eax,edx
c00054a0:	25 ff 01 00 00       	and    eax,0x1ff
c00054a5:	0f 85 00 02 00 00    	jne    c00056ab <f_write+0x27a>
c00054ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054af:	89 d6                	mov    esi,edx
c00054b1:	89 cf                	mov    edi,ecx
c00054b3:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054b7:	0f ac fe 09          	shrd   esi,edi,0x9
c00054bb:	48                   	dec    eax
c00054bc:	21 f0                	and    eax,esi
c00054be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c2:	0f 84 06 01 00 00    	je     c00055ce <f_write+0x19d>
c00054c8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054cc:	0f 88 6e 01 00 00    	js     c0005640 <f_write+0x20f>
c00054d2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054d6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054d9:	89 c8                	mov    eax,ecx
c00054db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054df:	e8 12 c8 ff ff       	call   c0001cf6 <clst2sect>
c00054e4:	89 d1                	mov    ecx,edx
c00054e6:	09 c1                	or     ecx,eax
c00054e8:	0f 84 1c 01 00 00    	je     c000560a <f_write+0x1d9>
c00054ee:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f2:	31 ff                	xor    edi,edi
c00054f4:	01 c6                	add    esi,eax
c00054f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fa:	11 d7                	adc    edi,edx
c00054fc:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005504:	0f 86 63 01 00 00    	jbe    c000566d <f_write+0x23c>
c000550a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000550e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005512:	c1 e8 09             	shr    eax,0x9
c0005515:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005519:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000551d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005521:	39 c2                	cmp    edx,eax
c0005523:	76 08                	jbe    c000552d <f_write+0xfc>
c0005525:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005529:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000552d:	83 ec 0c             	sub    esp,0xc
c0005530:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005534:	57                   	push   edi
c0005535:	56                   	push   esi
c0005536:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000553e:	50                   	push   eax
c000553f:	e8 e4 c4 ff ff       	call   c0001a28 <disk_write>
c0005544:	83 c4 20             	add    esp,0x20
c0005547:	85 c0                	test   eax,eax
c0005549:	0f 85 ce 00 00 00    	jne    c000561d <f_write+0x1ec>
c000554f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005552:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005555:	29 f0                	sub    eax,esi
c0005557:	19 fa                	sbb    edx,edi
c0005559:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000555d:	89 d7                	mov    edi,edx
c000555f:	ba 00 00 00 00       	mov    edx,0x0
c0005564:	89 f9                	mov    ecx,edi
c0005566:	19 d1                	sbb    ecx,edx
c0005568:	73 1c                	jae    c0005586 <f_write+0x155>
c000556a:	89 c7                	mov    edi,eax
c000556c:	b9 00 02 00 00       	mov    ecx,0x200
c0005571:	c1 e7 09             	shl    edi,0x9
c0005574:	8d 43 50             	lea    eax,[ebx+0x50]
c0005577:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000557b:	89 fa                	mov    edx,edi
c000557d:	e8 5a c5 ff ff       	call   c0001adc <mem_cpy>
c0005582:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005586:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558a:	c1 e6 09             	shl    esi,0x9
c000558d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005591:	31 ff                	xor    edi,edi
c0005593:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005597:	01 30                	add    DWORD PTR [eax],esi
c0005599:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000559d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a0:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055a6:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055a9:	89 c1                	mov    ecx,eax
c00055ab:	39 f2                	cmp    edx,esi
c00055ad:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b0:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b3:	19 f9                	sbb    ecx,edi
c00055b5:	73 04                	jae    c00055bb <f_write+0x18a>
c00055b7:	89 f2                	mov    edx,esi
c00055b9:	89 f8                	mov    eax,edi
c00055bb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055be:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055c6:	0f 85 cc fe ff ff    	jne    c0005498 <f_write+0x67>
c00055cc:	eb 2e                	jmp    c00055fc <f_write+0x1cb>
c00055ce:	89 c8                	mov    eax,ecx
c00055d0:	09 d0                	or     eax,edx
c00055d2:	75 0b                	jne    c00055df <f_write+0x1ae>
c00055d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055d7:	31 d2                	xor    edx,edx
c00055d9:	85 c0                	test   eax,eax
c00055db:	75 28                	jne    c0005605 <f_write+0x1d4>
c00055dd:	eb 12                	jmp    c00055f1 <f_write+0x1c0>
c00055df:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e3:	74 09                	je     c00055ee <f_write+0x1bd>
c00055e5:	89 d8                	mov    eax,ebx
c00055e7:	e8 2b c7 ff ff       	call   c0001d17 <clmt_clust>
c00055ec:	eb 0a                	jmp    c00055f8 <f_write+0x1c7>
c00055ee:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f1:	89 d8                	mov    eax,ebx
c00055f3:	e8 ac da ff ff       	call   c00030a4 <create_chain>
c00055f8:	85 c0                	test   eax,eax
c00055fa:	75 09                	jne    c0005605 <f_write+0x1d4>
c00055fc:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005600:	e9 dc 00 00 00       	jmp    c00056e1 <f_write+0x2b0>
c0005605:	83 f8 01             	cmp    eax,0x1
c0005608:	75 0e                	jne    c0005618 <f_write+0x1e7>
c000560a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000560e:	bd 02 00 00 00       	mov    ebp,0x2
c0005613:	e9 c9 00 00 00       	jmp    c00056e1 <f_write+0x2b0>
c0005618:	83 f8 ff             	cmp    eax,0xffffffff
c000561b:	75 0e                	jne    c000562b <f_write+0x1fa>
c000561d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005621:	bd 01 00 00 00       	mov    ebp,0x1
c0005626:	e9 b6 00 00 00       	jmp    c00056e1 <f_write+0x2b0>
c000562b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000562e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005632:	0f 85 90 fe ff ff    	jne    c00054c8 <f_write+0x97>
c0005638:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000563b:	e9 88 fe ff ff       	jmp    c00054c8 <f_write+0x97>
c0005640:	83 ec 0c             	sub    esp,0xc
c0005643:	8d 43 50             	lea    eax,[ebx+0x50]
c0005646:	6a 01                	push   0x1
c0005648:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000564b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000564e:	50                   	push   eax
c000564f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005653:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005657:	50                   	push   eax
c0005658:	e8 cb c3 ff ff       	call   c0001a28 <disk_write>
c000565d:	83 c4 20             	add    esp,0x20
c0005660:	85 c0                	test   eax,eax
c0005662:	75 b9                	jne    c000561d <f_write+0x1ec>
c0005664:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005668:	e9 65 fe ff ff       	jmp    c00054d2 <f_write+0xa1>
c000566d:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005670:	75 05                	jne    c0005677 <f_write+0x246>
c0005672:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005675:	74 2e                	je     c00056a5 <f_write+0x274>
c0005677:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000567a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567d:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005680:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005683:	73 20                	jae    c00056a5 <f_write+0x274>
c0005685:	83 ec 0c             	sub    esp,0xc
c0005688:	8d 43 50             	lea    eax,[ebx+0x50]
c000568b:	6a 01                	push   0x1
c000568d:	57                   	push   edi
c000568e:	56                   	push   esi
c000568f:	50                   	push   eax
c0005690:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005694:	50                   	push   eax
c0005695:	e8 78 c3 ff ff       	call   c0001a12 <disk_read>
c000569a:	83 c4 20             	add    esp,0x20
c000569d:	85 c0                	test   eax,eax
c000569f:	0f 85 78 ff ff ff    	jne    c000561d <f_write+0x1ec>
c00056a5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056a8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056ab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056ae:	ba 00 02 00 00       	mov    edx,0x200
c00056b3:	25 ff 01 00 00       	and    eax,0x1ff
c00056b8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056bc:	29 c2                	sub    edx,eax
c00056be:	39 d6                	cmp    esi,edx
c00056c0:	76 02                	jbe    c00056c4 <f_write+0x293>
c00056c2:	89 d6                	mov    esi,edx
c00056c4:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056c8:	89 f1                	mov    ecx,esi
c00056ca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056ce:	e8 09 c4 ff ff       	call   c0001adc <mem_cpy>
c00056d3:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056d7:	e9 b1 fe ff ff       	jmp    c000558d <f_write+0x15c>
c00056dc:	bd 07 00 00 00       	mov    ebp,0x7
c00056e1:	83 c4 2c             	add    esp,0x2c
c00056e4:	89 e8                	mov    eax,ebp
c00056e6:	5b                   	pop    ebx
c00056e7:	5e                   	pop    esi
c00056e8:	5f                   	pop    edi
c00056e9:	5d                   	pop    ebp
c00056ea:	c3                   	ret    

c00056eb <f_sync>:
c00056eb:	56                   	push   esi
c00056ec:	53                   	push   ebx
c00056ed:	83 ec 64             	sub    esp,0x64
c00056f0:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056f8:	89 d8                	mov    eax,ebx
c00056fa:	e8 5a ca ff ff       	call   c0002159 <validate>
c00056ff:	85 c0                	test   eax,eax
c0005701:	0f 85 ba 01 00 00    	jne    c00058c1 <f_sync+0x1d6>
c0005707:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570a:	f6 c2 40             	test   dl,0x40
c000570d:	0f 84 ae 01 00 00    	je     c00058c1 <f_sync+0x1d6>
c0005713:	84 d2                	test   dl,dl
c0005715:	79 33                	jns    c000574a <f_sync+0x5f>
c0005717:	83 ec 0c             	sub    esp,0xc
c000571a:	8d 43 50             	lea    eax,[ebx+0x50]
c000571d:	6a 01                	push   0x1
c000571f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005722:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005725:	50                   	push   eax
c0005726:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000572e:	50                   	push   eax
c000572f:	e8 f4 c2 ff ff       	call   c0001a28 <disk_write>
c0005734:	89 c2                	mov    edx,eax
c0005736:	83 c4 20             	add    esp,0x20
c0005739:	b8 01 00 00 00       	mov    eax,0x1
c000573e:	85 d2                	test   edx,edx
c0005740:	0f 85 7b 01 00 00    	jne    c00058c1 <f_sync+0x1d6>
c0005746:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000574e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005751:	0f 85 11 01 00 00    	jne    c0005868 <f_sync+0x17d>
c0005757:	89 d8                	mov    eax,ebx
c0005759:	e8 1e d6 ff ff       	call   c0002d7c <fill_first_frag>
c000575e:	85 c0                	test   eax,eax
c0005760:	0f 85 5b 01 00 00    	jne    c00058c1 <f_sync+0x1d6>
c0005766:	83 c9 ff             	or     ecx,0xffffffff
c0005769:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000576c:	89 d8                	mov    eax,ebx
c000576e:	e8 d4 d5 ff ff       	call   c0002d47 <fill_last_frag>
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 46 01 00 00    	jne    c00058c1 <f_sync+0x1d6>
c000577b:	83 ec 0c             	sub    esp,0xc
c000577e:	68 60 04 00 00       	push   0x460
c0005783:	e8 bb 2a 00 00       	call   c0008243 <ff_memalloc>
c0005788:	89 c6                	mov    esi,eax
c000578a:	83 c4 10             	add    esp,0x10
c000578d:	b8 11 00 00 00       	mov    eax,0x11
c0005792:	85 f6                	test   esi,esi
c0005794:	0f 84 27 01 00 00    	je     c00058c1 <f_sync+0x1d6>
c000579a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000579e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057a7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057aa:	89 da                	mov    edx,ebx
c00057ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b0:	e8 bc df ff ff       	call   c0003771 <load_obj_xdir>
c00057b5:	85 c0                	test   eax,eax
c00057b7:	0f 85 95 00 00 00    	jne    c0005852 <f_sync+0x167>
c00057bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c4:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057c8:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057cb:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057ce:	83 ca 01             	or     edx,0x1
c00057d1:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057da:	83 c0 34             	add    eax,0x34
c00057dd:	e8 f1 c2 ff ff       	call   c0001ad3 <st_dword>
c00057e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ec:	83 c0 38             	add    eax,0x38
c00057ef:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f2:	e8 df c2 ff ff       	call   c0001ad6 <st_qword>
c00057f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fe:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005801:	83 c0 28             	add    eax,0x28
c0005804:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005807:	e8 ca c2 ff ff       	call   c0001ad6 <st_qword>
c000580c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	ba 00 00 21 50       	mov    edx,0x50210000
c0005818:	83 c0 0c             	add    eax,0xc
c000581b:	e8 b3 c2 ff ff       	call   c0001ad3 <st_dword>
c0005820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005824:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005827:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000582b:	31 d2                	xor    edx,edx
c000582d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005830:	83 c0 10             	add    eax,0x10
c0005833:	e8 9b c2 ff ff       	call   c0001ad3 <st_dword>
c0005838:	8d 44 24 14          	lea    eax,[esp+0x14]
c000583c:	e8 6f e1 ff ff       	call   c00039b0 <store_xdir>
c0005841:	85 c0                	test   eax,eax
c0005843:	75 0d                	jne    c0005852 <f_sync+0x167>
c0005845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005849:	e8 f4 ea ff ff       	call   c0004342 <sync_fs>
c000584e:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005852:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005856:	83 ec 0c             	sub    esp,0xc
c0005859:	56                   	push   esi
c000585a:	e8 fa 29 00 00       	call   c0008259 <ff_memfree>
c000585f:	83 c4 10             	add    esp,0x10
c0005862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005866:	eb 59                	jmp    c00058c1 <f_sync+0x1d6>
c0005868:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000586b:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000586e:	e8 c1 c9 ff ff       	call   c0002234 <move_window>
c0005873:	85 c0                	test   eax,eax
c0005875:	75 4a                	jne    c00058c1 <f_sync+0x1d6>
c0005877:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587a:	89 f2                	mov    edx,esi
c000587c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005880:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005883:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005885:	e8 5f f3 ff ff       	call   c0004be9 <st_clust.isra.1>
c000588a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000588d:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005890:	e8 3e c2 ff ff       	call   c0001ad3 <st_dword>
c0005895:	8d 46 16             	lea    eax,[esi+0x16]
c0005898:	ba 00 00 21 50       	mov    edx,0x50210000
c000589d:	e8 31 c2 ff ff       	call   c0001ad3 <st_dword>
c00058a2:	8d 46 12             	lea    eax,[esi+0x12]
c00058a5:	31 d2                	xor    edx,edx
c00058a7:	e8 23 c2 ff ff       	call   c0001acf <st_word>
c00058ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b8:	e8 85 ea ff ff       	call   c0004342 <sync_fs>
c00058bd:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c1:	83 c4 64             	add    esp,0x64
c00058c4:	5b                   	pop    ebx
c00058c5:	5e                   	pop    esi
c00058c6:	c3                   	ret    

c00058c7 <f_close>:
c00058c7:	53                   	push   ebx
c00058c8:	83 ec 24             	sub    esp,0x24
c00058cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058cf:	53                   	push   ebx
c00058d0:	e8 16 fe ff ff       	call   c00056eb <f_sync>
c00058d5:	83 c4 10             	add    esp,0x10
c00058d8:	85 c0                	test   eax,eax
c00058da:	75 15                	jne    c00058f1 <f_close+0x2a>
c00058dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e0:	89 d8                	mov    eax,ebx
c00058e2:	e8 72 c8 ff ff       	call   c0002159 <validate>
c00058e7:	85 c0                	test   eax,eax
c00058e9:	75 06                	jne    c00058f1 <f_close+0x2a>
c00058eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f1:	83 c4 18             	add    esp,0x18
c00058f4:	5b                   	pop    ebx
c00058f5:	c3                   	ret    

c00058f6 <f_lseek>:
c00058f6:	55                   	push   ebp
c00058f7:	57                   	push   edi
c00058f8:	56                   	push   esi
c00058f9:	53                   	push   ebx
c00058fa:	83 ec 3c             	sub    esp,0x3c
c00058fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005901:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005905:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005909:	89 04 24             	mov    DWORD PTR [esp],eax
c000590c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005910:	89 d8                	mov    eax,ebx
c0005912:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005916:	e8 3e c8 ff ff       	call   c0002159 <validate>
c000591b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000591f:	85 c0                	test   eax,eax
c0005921:	0f 85 28 04 00 00    	jne    c0005d4f <f_lseek+0x459>
c0005927:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000592b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592f:	85 c0                	test   eax,eax
c0005931:	0f 85 18 04 00 00    	jne    c0005d4f <f_lseek+0x459>
c0005937:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000593b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000593e:	74 0c                	je     c000594c <f_lseek+0x56>
c0005940:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005943:	85 c0                	test   eax,eax
c0005945:	75 1f                	jne    c0005966 <f_lseek+0x70>
c0005947:	e9 8b 01 00 00       	jmp    c0005ad7 <f_lseek+0x1e1>
c000594c:	83 c9 ff             	or     ecx,0xffffffff
c000594f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005952:	89 d8                	mov    eax,ebx
c0005954:	e8 ee d3 ff ff       	call   c0002d47 <fill_last_frag>
c0005959:	85 c0                	test   eax,eax
c000595b:	74 e3                	je     c0005940 <f_lseek+0x4a>
c000595d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005961:	e9 e9 03 00 00       	jmp    c0005d4f <f_lseek+0x459>
c0005966:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000596b:	0f 85 ac 00 00 00    	jne    c0005a1d <f_lseek+0x127>
c0005971:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005975:	0f 85 a2 00 00 00    	jne    c0005a1d <f_lseek+0x127>
c000597b:	8d 78 04             	lea    edi,[eax+0x4]
c000597e:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005981:	8b 00                	mov    eax,DWORD PTR [eax]
c0005983:	be 02 00 00 00       	mov    esi,0x2
c0005988:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000598c:	85 ed                	test   ebp,ebp
c000598e:	74 73                	je     c0005a03 <f_lseek+0x10d>
c0005990:	89 e9                	mov    ecx,ebp
c0005992:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005999:	89 ca                	mov    edx,ecx
c000599b:	89 d8                	mov    eax,ebx
c000599d:	ff 04 24             	inc    DWORD PTR [esp]
c00059a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a4:	e8 0d d4 ff ff       	call   c0002db6 <get_fat>
c00059a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059ad:	83 f8 01             	cmp    eax,0x1
c00059b0:	77 11                	ja     c00059c3 <f_lseek+0xcd>
c00059b2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059b6:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059be:	e9 8c 03 00 00       	jmp    c0005d4f <f_lseek+0x459>
c00059c3:	83 f8 ff             	cmp    eax,0xffffffff
c00059c6:	75 11                	jne    c00059d9 <f_lseek+0xe3>
c00059c8:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059cc:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059d4:	e9 76 03 00 00       	jmp    c0005d4f <f_lseek+0x459>
c00059d9:	8d 51 01             	lea    edx,[ecx+0x1]
c00059dc:	89 c1                	mov    ecx,eax
c00059de:	39 c2                	cmp    edx,eax
c00059e0:	74 b7                	je     c0005999 <f_lseek+0xa3>
c00059e2:	83 c6 02             	add    esi,0x2
c00059e5:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059e9:	72 0b                	jb     c00059f6 <f_lseek+0x100>
c00059eb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ee:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f1:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f3:	83 c7 08             	add    edi,0x8
c00059f6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059fa:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059fd:	76 04                	jbe    c0005a03 <f_lseek+0x10d>
c00059ff:	89 c5                	mov    ebp,eax
c0005a01:	eb 8d                	jmp    c0005990 <f_lseek+0x9a>
c0005a03:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a06:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c0005a0a:	89 30                	mov    DWORD PTR [eax],esi
c0005a0c:	0f 87 35 03 00 00    	ja     c0005d47 <f_lseek+0x451>
c0005a12:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a18:	e9 32 03 00 00       	jmp    c0005d4f <f_lseek+0x459>
c0005a1d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a20:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a23:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a2a:	19 f8                	sbb    eax,edi
c0005a2c:	73 07                	jae    c0005a35 <f_lseek+0x13f>
c0005a2e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a31:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a35:	89 f8                	mov    eax,edi
c0005a37:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a3a:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a3d:	09 f0                	or     eax,esi
c0005a3f:	0f 84 0a 03 00 00    	je     c0005d4f <f_lseek+0x459>
c0005a45:	89 f0                	mov    eax,esi
c0005a47:	89 fa                	mov    edx,edi
c0005a49:	83 c0 ff             	add    eax,0xffffffff
c0005a4c:	83 d2 ff             	adc    edx,0xffffffff
c0005a4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a52:	89 d1                	mov    ecx,edx
c0005a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a58:	89 c2                	mov    edx,eax
c0005a5a:	89 d8                	mov    eax,ebx
c0005a5c:	e8 b6 c2 ff ff       	call   c0001d17 <clmt_clust>
c0005a61:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a65:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a68:	89 c2                	mov    edx,eax
c0005a6a:	89 c8                	mov    eax,ecx
c0005a6c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a70:	e8 81 c2 ff ff       	call   c0001cf6 <clst2sect>
c0005a75:	89 d1                	mov    ecx,edx
c0005a77:	09 c1                	or     ecx,eax
c0005a79:	0f 84 33 ff ff ff    	je     c00059b2 <f_lseek+0xbc>
c0005a7f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a85:	0f 84 c4 02 00 00    	je     c0005d4f <f_lseek+0x459>
c0005a8b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a8f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a93:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a96:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a9a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a9e:	4d                   	dec    ebp
c0005a9f:	31 ff                	xor    edi,edi
c0005aa1:	21 ee                	and    esi,ebp
c0005aa3:	01 c6                	add    esi,eax
c0005aa5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005aa8:	11 d7                	adc    edi,edx
c0005aaa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aad:	39 fa                	cmp    edx,edi
c0005aaf:	75 08                	jne    c0005ab9 <f_lseek+0x1c3>
c0005ab1:	39 f0                	cmp    eax,esi
c0005ab3:	0f 84 96 02 00 00    	je     c0005d4f <f_lseek+0x459>
c0005ab9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005abc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ac0:	0f 89 58 02 00 00    	jns    c0005d1e <f_lseek+0x428>
c0005ac6:	83 ec 0c             	sub    esp,0xc
c0005ac9:	6a 01                	push   0x1
c0005acb:	52                   	push   edx
c0005acc:	50                   	push   eax
c0005acd:	55                   	push   ebp
c0005ace:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ad2:	e9 32 02 00 00       	jmp    c0005d09 <f_lseek+0x413>
c0005ad7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005adb:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ade:	74 16                	je     c0005af6 <f_lseek+0x200>
c0005ae0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005ae5:	76 0f                	jbe    c0005af6 <f_lseek+0x200>
c0005ae7:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005aee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005af6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005af9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005afc:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005aff:	89 c7                	mov    edi,eax
c0005b01:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b05:	73 0d                	jae    c0005b14 <f_lseek+0x21e>
c0005b07:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b0b:	75 07                	jne    c0005b14 <f_lseek+0x21e>
c0005b0d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b14:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b18:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b1b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b1e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b25:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b2c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b2f:	75 09                	jne    c0005b3a <f_lseek+0x244>
c0005b31:	31 f6                	xor    esi,esi
c0005b33:	31 ff                	xor    edi,edi
c0005b35:	e9 87 01 00 00       	jmp    c0005cc1 <f_lseek+0x3cb>
c0005b3a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b3e:	c1 e1 09             	shl    ecx,0x9
c0005b41:	89 d7                	mov    edi,edx
c0005b43:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b47:	09 c7                	or     edi,eax
c0005b49:	74 6b                	je     c0005bb6 <f_lseek+0x2c0>
c0005b4b:	83 c0 ff             	add    eax,0xffffffff
c0005b4e:	89 cf                	mov    edi,ecx
c0005b50:	83 d2 ff             	adc    edx,0xffffffff
c0005b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b57:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b5a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b5e:	83 c0 ff             	add    eax,0xffffffff
c0005b61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b65:	83 d2 ff             	adc    edx,0xffffffff
c0005b68:	31 ed                	xor    ebp,ebp
c0005b6a:	55                   	push   ebp
c0005b6b:	51                   	push   ecx
c0005b6c:	52                   	push   edx
c0005b6d:	50                   	push   eax
c0005b6e:	e8 a9 99 01 00       	call   c001f51c <__udivdi3>
c0005b73:	83 c4 10             	add    esp,0x10
c0005b76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b7a:	89 d6                	mov    esi,edx
c0005b7c:	55                   	push   ebp
c0005b7d:	57                   	push   edi
c0005b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b86:	e8 91 99 01 00       	call   c001f51c <__udivdi3>
c0005b8b:	83 c4 10             	add    esp,0x10
c0005b8e:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b92:	19 d6                	sbb    esi,edx
c0005b94:	72 20                	jb     c0005bb6 <f_lseek+0x2c0>
c0005b96:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b9e:	f7 d9                	neg    ecx
c0005ba0:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005ba4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ba7:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005baa:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bad:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005bb1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bb4:	eb 28                	jmp    c0005bde <f_lseek+0x2e8>
c0005bb6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bb9:	85 c0                	test   eax,eax
c0005bbb:	75 1e                	jne    c0005bdb <f_lseek+0x2e5>
c0005bbd:	31 d2                	xor    edx,edx
c0005bbf:	89 d8                	mov    eax,ebx
c0005bc1:	e8 de d4 ff ff       	call   c00030a4 <create_chain>
c0005bc6:	83 f8 01             	cmp    eax,0x1
c0005bc9:	0f 84 e3 fd ff ff    	je     c00059b2 <f_lseek+0xbc>
c0005bcf:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd2:	0f 84 f0 fd ff ff    	je     c00059c8 <f_lseek+0xd2>
c0005bd8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bdb:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bde:	85 c0                	test   eax,eax
c0005be0:	0f 84 4b ff ff ff    	je     c0005b31 <f_lseek+0x23b>
c0005be6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bea:	31 ff                	xor    edi,edi
c0005bec:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bef:	89 fd                	mov    ebp,edi
c0005bf1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bf5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bfb:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005bff:	73 7d                	jae    c0005c7e <f_lseek+0x388>
c0005c01:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c04:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c08:	01 d6                	add    esi,edx
c0005c0a:	11 cf                	adc    edi,ecx
c0005c0c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005c0f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005c12:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005c15:	f6 c2 02             	test   dl,0x2
c0005c18:	74 25                	je     c0005c3f <f_lseek+0x349>
c0005c1a:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c1d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c20:	19 f9                	sbb    ecx,edi
c0005c22:	73 0c                	jae    c0005c30 <f_lseek+0x33a>
c0005c24:	83 ca 40             	or     edx,0x40
c0005c27:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c2a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c2d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c30:	89 c2                	mov    edx,eax
c0005c32:	89 d8                	mov    eax,ebx
c0005c34:	e8 6b d4 ff ff       	call   c00030a4 <create_chain>
c0005c39:	85 c0                	test   eax,eax
c0005c3b:	75 0b                	jne    c0005c48 <f_lseek+0x352>
c0005c3d:	eb 30                	jmp    c0005c6f <f_lseek+0x379>
c0005c3f:	89 c2                	mov    edx,eax
c0005c41:	89 d8                	mov    eax,ebx
c0005c43:	e8 6e d1 ff ff       	call   c0002db6 <get_fat>
c0005c48:	83 f8 ff             	cmp    eax,0xffffffff
c0005c4b:	0f 84 77 fd ff ff    	je     c00059c8 <f_lseek+0xd2>
c0005c51:	83 f8 01             	cmp    eax,0x1
c0005c54:	0f 86 58 fd ff ff    	jbe    c00059b2 <f_lseek+0xbc>
c0005c5a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c5e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c61:	0f 86 4b fd ff ff    	jbe    c00059b2 <f_lseek+0xbc>
c0005c67:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c6a:	e9 77 ff ff ff       	jmp    c0005be6 <f_lseek+0x2f0>
c0005c6f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c76:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c7e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c81:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c85:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c88:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c8b:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c94:	0f 84 97 fe ff ff    	je     c0005b31 <f_lseek+0x23b>
c0005c9a:	89 c2                	mov    edx,eax
c0005c9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ca0:	e8 51 c0 ff ff       	call   c0001cf6 <clst2sect>
c0005ca5:	89 d7                	mov    edi,edx
c0005ca7:	09 c7                	or     edi,eax
c0005ca9:	0f 84 03 fd ff ff    	je     c00059b2 <f_lseek+0xbc>
c0005caf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cb6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cba:	c1 ef 09             	shr    edi,0x9
c0005cbd:	01 c6                	add    esi,eax
c0005cbf:	11 d7                	adc    edi,edx
c0005cc1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cc4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cc7:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cca:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ccd:	19 d1                	sbb    ecx,edx
c0005ccf:	73 0a                	jae    c0005cdb <f_lseek+0x3e5>
c0005cd1:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cd5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cd8:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cdb:	a9 ff 01 00 00       	test   eax,0x1ff
c0005ce0:	74 6d                	je     c0005d4f <f_lseek+0x459>
c0005ce2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ce5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ce8:	39 fa                	cmp    edx,edi
c0005cea:	75 04                	jne    c0005cf0 <f_lseek+0x3fa>
c0005cec:	39 f0                	cmp    eax,esi
c0005cee:	74 5f                	je     c0005d4f <f_lseek+0x459>
c0005cf0:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cf3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cf7:	79 25                	jns    c0005d1e <f_lseek+0x428>
c0005cf9:	83 ec 0c             	sub    esp,0xc
c0005cfc:	6a 01                	push   0x1
c0005cfe:	52                   	push   edx
c0005cff:	50                   	push   eax
c0005d00:	55                   	push   ebp
c0005d01:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d05:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d09:	50                   	push   eax
c0005d0a:	e8 19 bd ff ff       	call   c0001a28 <disk_write>
c0005d0f:	83 c4 20             	add    esp,0x20
c0005d12:	85 c0                	test   eax,eax
c0005d14:	0f 85 ae fc ff ff    	jne    c00059c8 <f_lseek+0xd2>
c0005d1a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d1e:	83 ec 0c             	sub    esp,0xc
c0005d21:	6a 01                	push   0x1
c0005d23:	57                   	push   edi
c0005d24:	56                   	push   esi
c0005d25:	55                   	push   ebp
c0005d26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d2a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d2e:	50                   	push   eax
c0005d2f:	e8 de bc ff ff       	call   c0001a12 <disk_read>
c0005d34:	83 c4 20             	add    esp,0x20
c0005d37:	85 c0                	test   eax,eax
c0005d39:	0f 85 89 fc ff ff    	jne    c00059c8 <f_lseek+0xd2>
c0005d3f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d42:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d45:	eb 08                	jmp    c0005d4f <f_lseek+0x459>
c0005d47:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d53:	83 c4 3c             	add    esp,0x3c
c0005d56:	5b                   	pop    ebx
c0005d57:	5e                   	pop    esi
c0005d58:	5f                   	pop    edi
c0005d59:	5d                   	pop    ebp
c0005d5a:	c3                   	ret    

c0005d5b <f_opendir>:
c0005d5b:	56                   	push   esi
c0005d5c:	b8 09 00 00 00       	mov    eax,0x9
c0005d61:	53                   	push   ebx
c0005d62:	83 ec 24             	sub    esp,0x24
c0005d65:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d69:	85 db                	test   ebx,ebx
c0005d6b:	0f 84 e6 00 00 00    	je     c0005e57 <f_opendir+0xfc>
c0005d71:	31 c9                	xor    ecx,ecx
c0005d73:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d77:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d7b:	e8 5f c7 ff ff       	call   c00024df <mount_volume>
c0005d80:	85 c0                	test   eax,eax
c0005d82:	0f 85 c9 00 00 00    	jne    c0005e51 <f_opendir+0xf6>
c0005d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d8c:	83 ec 0c             	sub    esp,0xc
c0005d8f:	89 03                	mov    DWORD PTR [ebx],eax
c0005d91:	68 60 04 00 00       	push   0x460
c0005d96:	e8 a8 24 00 00       	call   c0008243 <ff_memalloc>
c0005d9b:	89 c6                	mov    esi,eax
c0005d9d:	83 c4 10             	add    esp,0x10
c0005da0:	b8 11 00 00 00       	mov    eax,0x11
c0005da5:	85 f6                	test   esi,esi
c0005da7:	0f 84 aa 00 00 00    	je     c0005e57 <f_opendir+0xfc>
c0005dad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005db7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dbd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 83 ee ff ff       	call   c0004c4b <follow_path>
c0005dc8:	85 c0                	test   eax,eax
c0005dca:	75 61                	jne    c0005e2d <f_opendir+0xd2>
c0005dcc:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dd0:	78 46                	js     c0005e18 <f_opendir+0xbd>
c0005dd2:	b8 05 00 00 00       	mov    eax,0x5
c0005dd7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005ddb:	74 50                	je     c0005e2d <f_opendir+0xd2>
c0005ddd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005de1:	8a 01                	mov    al,BYTE PTR [ecx]
c0005de3:	3c 04                	cmp    al,0x4
c0005de5:	75 26                	jne    c0005e0d <f_opendir+0xb2>
c0005de7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dea:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ded:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005df0:	30 d2                	xor    dl,dl
c0005df2:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005df6:	09 c2                	or     edx,eax
c0005df8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005dfb:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005dfe:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e01:	89 da                	mov    edx,ebx
c0005e03:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e06:	e8 06 ee ff ff       	call   c0004c11 <init_alloc_info.isra.2>
c0005e0b:	eb 0b                	jmp    c0005e18 <f_opendir+0xbd>
c0005e0d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e10:	e8 ab ed ff ff       	call   c0004bc0 <ld_clust.isra.0>
c0005e15:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e1c:	31 d2                	xor    edx,edx
c0005e1e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e22:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e26:	89 d8                	mov    eax,ebx
c0005e28:	e8 7f d1 ff ff       	call   c0002fac <dir_sdi>
c0005e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e31:	83 ec 0c             	sub    esp,0xc
c0005e34:	56                   	push   esi
c0005e35:	e8 1f 24 00 00       	call   c0008259 <ff_memfree>
c0005e3a:	83 c4 10             	add    esp,0x10
c0005e3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e41:	83 f8 04             	cmp    eax,0x4
c0005e44:	74 06                	je     c0005e4c <f_opendir+0xf1>
c0005e46:	85 c0                	test   eax,eax
c0005e48:	74 0d                	je     c0005e57 <f_opendir+0xfc>
c0005e4a:	eb 05                	jmp    c0005e51 <f_opendir+0xf6>
c0005e4c:	b8 05 00 00 00       	mov    eax,0x5
c0005e51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e57:	83 c4 24             	add    esp,0x24
c0005e5a:	5b                   	pop    ebx
c0005e5b:	5e                   	pop    esi
c0005e5c:	c3                   	ret    

c0005e5d <f_closedir>:
c0005e5d:	53                   	push   ebx
c0005e5e:	83 ec 18             	sub    esp,0x18
c0005e61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e65:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e69:	89 d8                	mov    eax,ebx
c0005e6b:	e8 e9 c2 ff ff       	call   c0002159 <validate>
c0005e70:	85 c0                	test   eax,eax
c0005e72:	75 06                	jne    c0005e7a <f_closedir+0x1d>
c0005e74:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e7a:	83 c4 18             	add    esp,0x18
c0005e7d:	5b                   	pop    ebx
c0005e7e:	c3                   	ret    

c0005e7f <f_readdir>:
c0005e7f:	57                   	push   edi
c0005e80:	56                   	push   esi
c0005e81:	53                   	push   ebx
c0005e82:	83 ec 20             	sub    esp,0x20
c0005e85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e89:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e8d:	89 d8                	mov    eax,ebx
c0005e8f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e93:	e8 c1 c2 ff ff       	call   c0002159 <validate>
c0005e98:	85 c0                	test   eax,eax
c0005e9a:	75 77                	jne    c0005f13 <f_readdir+0x94>
c0005e9c:	85 ff                	test   edi,edi
c0005e9e:	75 0b                	jne    c0005eab <f_readdir+0x2c>
c0005ea0:	31 d2                	xor    edx,edx
c0005ea2:	89 d8                	mov    eax,ebx
c0005ea4:	e8 03 d1 ff ff       	call   c0002fac <dir_sdi>
c0005ea9:	eb 68                	jmp    c0005f13 <f_readdir+0x94>
c0005eab:	83 ec 0c             	sub    esp,0xc
c0005eae:	68 60 04 00 00       	push   0x460
c0005eb3:	e8 8b 23 00 00       	call   c0008243 <ff_memalloc>
c0005eb8:	89 c6                	mov    esi,eax
c0005eba:	83 c4 10             	add    esp,0x10
c0005ebd:	b8 11 00 00 00       	mov    eax,0x11
c0005ec2:	85 f6                	test   esi,esi
c0005ec4:	74 4d                	je     c0005f13 <f_readdir+0x94>
c0005ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eca:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ed0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ed3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ed6:	31 d2                	xor    edx,edx
c0005ed8:	89 d8                	mov    eax,ebx
c0005eda:	e8 df d8 ff ff       	call   c00037be <dir_read>
c0005edf:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ee4:	75 19                	jne    c0005eff <f_readdir+0x80>
c0005ee6:	89 fa                	mov    edx,edi
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 d0 ea ff ff       	call   c00049bf <get_fileinfo>
c0005eef:	31 d2                	xor    edx,edx
c0005ef1:	89 d8                	mov    eax,ebx
c0005ef3:	e8 0e d6 ff ff       	call   c0003506 <dir_next>
c0005ef8:	83 f8 04             	cmp    eax,0x4
c0005efb:	75 02                	jne    c0005eff <f_readdir+0x80>
c0005efd:	31 c0                	xor    eax,eax
c0005eff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f03:	83 ec 0c             	sub    esp,0xc
c0005f06:	56                   	push   esi
c0005f07:	e8 4d 23 00 00       	call   c0008259 <ff_memfree>
c0005f0c:	83 c4 10             	add    esp,0x10
c0005f0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f13:	83 c4 20             	add    esp,0x20
c0005f16:	5b                   	pop    ebx
c0005f17:	5e                   	pop    esi
c0005f18:	5f                   	pop    edi
c0005f19:	c3                   	ret    

c0005f1a <f_stat>:
c0005f1a:	57                   	push   edi
c0005f1b:	31 c9                	xor    ecx,ecx
c0005f1d:	56                   	push   esi
c0005f1e:	53                   	push   ebx
c0005f1f:	83 ec 50             	sub    esp,0x50
c0005f22:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f26:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f2a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f2e:	e8 ac c5 ff ff       	call   c00024df <mount_volume>
c0005f33:	89 c3                	mov    ebx,eax
c0005f35:	85 c0                	test   eax,eax
c0005f37:	75 67                	jne    c0005fa0 <f_stat+0x86>
c0005f39:	83 ec 0c             	sub    esp,0xc
c0005f3c:	bb 11 00 00 00       	mov    ebx,0x11
c0005f41:	68 60 04 00 00       	push   0x460
c0005f46:	e8 f8 22 00 00       	call   c0008243 <ff_memalloc>
c0005f4b:	83 c4 10             	add    esp,0x10
c0005f4e:	89 c6                	mov    esi,eax
c0005f50:	85 c0                	test   eax,eax
c0005f52:	74 4c                	je     c0005fa0 <f_stat+0x86>
c0005f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f58:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f5e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f61:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f64:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f68:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f6c:	e8 da ec ff ff       	call   c0004c4b <follow_path>
c0005f71:	89 c3                	mov    ebx,eax
c0005f73:	85 c0                	test   eax,eax
c0005f75:	75 1d                	jne    c0005f94 <f_stat+0x7a>
c0005f77:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f7c:	78 11                	js     c0005f8f <f_stat+0x75>
c0005f7e:	85 ff                	test   edi,edi
c0005f80:	74 12                	je     c0005f94 <f_stat+0x7a>
c0005f82:	89 fa                	mov    edx,edi
c0005f84:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f88:	e8 32 ea ff ff       	call   c00049bf <get_fileinfo>
c0005f8d:	eb 05                	jmp    c0005f94 <f_stat+0x7a>
c0005f8f:	bb 06 00 00 00       	mov    ebx,0x6
c0005f94:	83 ec 0c             	sub    esp,0xc
c0005f97:	56                   	push   esi
c0005f98:	e8 bc 22 00 00       	call   c0008259 <ff_memfree>
c0005f9d:	83 c4 10             	add    esp,0x10
c0005fa0:	83 c4 50             	add    esp,0x50
c0005fa3:	89 d8                	mov    eax,ebx
c0005fa5:	5b                   	pop    ebx
c0005fa6:	5e                   	pop    esi
c0005fa7:	5f                   	pop    edi
c0005fa8:	c3                   	ret    

c0005fa9 <f_getfree>:
c0005fa9:	55                   	push   ebp
c0005faa:	31 c9                	xor    ecx,ecx
c0005fac:	57                   	push   edi
c0005fad:	56                   	push   esi
c0005fae:	53                   	push   ebx
c0005faf:	83 ec 5c             	sub    esp,0x5c
c0005fb2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fb6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fba:	e8 20 c5 ff ff       	call   c00024df <mount_volume>
c0005fbf:	89 c5                	mov    ebp,eax
c0005fc1:	85 c0                	test   eax,eax
c0005fc3:	0f 85 be 01 00 00    	jne    c0006187 <f_getfree+0x1de>
c0005fc9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fcd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fd1:	89 02                	mov    DWORD PTR [edx],eax
c0005fd3:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fd6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fd9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fdd:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fe0:	39 f2                	cmp    edx,esi
c0005fe2:	77 0b                	ja     c0005fef <f_getfree+0x46>
c0005fe4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fe8:	89 10                	mov    DWORD PTR [eax],edx
c0005fea:	e9 98 01 00 00       	jmp    c0006187 <f_getfree+0x1de>
c0005fef:	8a 10                	mov    dl,BYTE PTR [eax]
c0005ff1:	80 fa 01             	cmp    dl,0x1
c0005ff4:	75 3a                	jne    c0006030 <f_getfree+0x87>
c0005ff6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005ffa:	be 02 00 00 00       	mov    esi,0x2
c0005fff:	31 db                	xor    ebx,ebx
c0006001:	89 f2                	mov    edx,esi
c0006003:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006007:	e8 aa cd ff ff       	call   c0002db6 <get_fat>
c000600c:	83 f8 ff             	cmp    eax,0xffffffff
c000600f:	0f 84 51 01 00 00    	je     c0006166 <f_getfree+0x1bd>
c0006015:	83 f8 01             	cmp    eax,0x1
c0006018:	0f 84 4f 01 00 00    	je     c000616d <f_getfree+0x1c4>
c000601e:	83 d3 00             	adc    ebx,0x0
c0006021:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006025:	46                   	inc    esi
c0006026:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006029:	77 d6                	ja     c0006001 <f_getfree+0x58>
c000602b:	e9 46 01 00 00       	jmp    c0006176 <f_getfree+0x1cd>
c0006030:	80 fa 04             	cmp    dl,0x4
c0006033:	0f 85 94 00 00 00    	jne    c00060cd <f_getfree+0x124>
c0006039:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000603c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000603f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006043:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006047:	31 ff                	xor    edi,edi
c0006049:	31 db                	xor    ebx,ebx
c000604b:	85 ff                	test   edi,edi
c000604d:	75 3f                	jne    c000608e <f_getfree+0xe5>
c000604f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006053:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006057:	83 c0 01             	add    eax,0x1
c000605a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000605e:	83 d2 00             	adc    edx,0x0
c0006061:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006065:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006069:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000606d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006071:	e8 be c1 ff ff       	call   c0002234 <move_window>
c0006076:	85 c0                	test   eax,eax
c0006078:	0f 85 f6 00 00 00    	jne    c0006174 <f_getfree+0x1cb>
c000607e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006082:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006086:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000608a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000608e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006092:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0006096:	88 c2                	mov    dl,al
c0006098:	b8 08 00 00 00       	mov    eax,0x8
c000609d:	29 f0                	sub    eax,esi
c000609f:	89 c1                	mov    ecx,eax
c00060a1:	01 f1                	add    ecx,esi
c00060a3:	74 18                	je     c00060bd <f_getfree+0x114>
c00060a5:	85 f6                	test   esi,esi
c00060a7:	74 14                	je     c00060bd <f_getfree+0x114>
c00060a9:	88 d1                	mov    cl,dl
c00060ab:	83 e1 01             	and    ecx,0x1
c00060ae:	80 f9 01             	cmp    cl,0x1
c00060b1:	88 d1                	mov    cl,dl
c00060b3:	83 d3 00             	adc    ebx,0x0
c00060b6:	4e                   	dec    esi
c00060b7:	d0 e9                	shr    cl,1
c00060b9:	88 ca                	mov    dl,cl
c00060bb:	eb e2                	jmp    c000609f <f_getfree+0xf6>
c00060bd:	47                   	inc    edi
c00060be:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060c4:	85 f6                	test   esi,esi
c00060c6:	75 83                	jne    c000604b <f_getfree+0xa2>
c00060c8:	e9 a9 00 00 00       	jmp    c0006176 <f_getfree+0x1cd>
c00060cd:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d0:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060db:	31 db                	xor    ebx,ebx
c00060dd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060e2:	75 1b                	jne    c00060ff <f_getfree+0x156>
c00060e4:	89 d6                	mov    esi,edx
c00060e6:	89 cf                	mov    edi,ecx
c00060e8:	83 c6 01             	add    esi,0x1
c00060eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ef:	83 d7 00             	adc    edi,0x0
c00060f2:	e8 3d c1 ff ff       	call   c0002234 <move_window>
c00060f7:	85 c0                	test   eax,eax
c00060f9:	75 79                	jne    c0006174 <f_getfree+0x1cb>
c00060fb:	89 f2                	mov    edx,esi
c00060fd:	89 f9                	mov    ecx,edi
c00060ff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0006103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006107:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000610f:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006113:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006117:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000611a:	75 15                	jne    c0006131 <f_getfree+0x188>
c000611c:	e8 3c b9 ff ff       	call   c0001a5d <ld_word>
c0006121:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006125:	66 83 f8 01          	cmp    ax,0x1
c0006129:	83 d3 00             	adc    ebx,0x0
c000612c:	83 c6 02             	add    esi,0x2
c000612f:	eb 17                	jmp    c0006148 <f_getfree+0x19f>
c0006131:	e8 34 b9 ff ff       	call   c0001a6a <ld_dword>
c0006136:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000613a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613f:	83 f8 01             	cmp    eax,0x1
c0006142:	83 d3 00             	adc    ebx,0x0
c0006145:	83 c6 04             	add    esi,0x4
c0006148:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614e:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006152:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006156:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000615a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000615e:	0f 85 79 ff ff ff    	jne    c00060dd <f_getfree+0x134>
c0006164:	eb 10                	jmp    c0006176 <f_getfree+0x1cd>
c0006166:	bd 01 00 00 00       	mov    ebp,0x1
c000616b:	eb 09                	jmp    c0006176 <f_getfree+0x1cd>
c000616d:	bd 02 00 00 00       	mov    ebp,0x2
c0006172:	eb 02                	jmp    c0006176 <f_getfree+0x1cd>
c0006174:	89 c5                	mov    ebp,eax
c0006176:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000617a:	89 18                	mov    DWORD PTR [eax],ebx
c000617c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006180:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006184:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006187:	83 c4 5c             	add    esp,0x5c
c000618a:	89 e8                	mov    eax,ebp
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	5d                   	pop    ebp
c0006190:	c3                   	ret    

c0006191 <f_truncate>:
c0006191:	56                   	push   esi
c0006192:	53                   	push   ebx
c0006193:	83 ec 14             	sub    esp,0x14
c0006196:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 b4 bf ff ff       	call   c0002159 <validate>
c00061a5:	89 c6                	mov    esi,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	0f 85 d2 00 00 00    	jne    c0006281 <f_truncate+0xf0>
c00061af:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b3:	85 f6                	test   esi,esi
c00061b5:	0f 85 c6 00 00 00    	jne    c0006281 <f_truncate+0xf0>
c00061bb:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061bf:	0f 84 b7 00 00 00    	je     c000627c <f_truncate+0xeb>
c00061c5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061ce:	89 d1                	mov    ecx,edx
c00061d0:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d3:	0f 83 a8 00 00 00    	jae    c0006281 <f_truncate+0xf0>
c00061d9:	09 c2                	or     edx,eax
c00061db:	75 15                	jne    c00061f2 <f_truncate+0x61>
c00061dd:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e0:	31 c9                	xor    ecx,ecx
c00061e2:	89 d8                	mov    eax,ebx
c00061e4:	e8 bc d0 ff ff       	call   c00032a5 <remove_chain>
c00061e9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f0:	eb 35                	jmp    c0006227 <f_truncate+0x96>
c00061f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f5:	89 d8                	mov    eax,ebx
c00061f7:	e8 ba cb ff ff       	call   c0002db6 <get_fat>
c00061fc:	89 c2                	mov    edx,eax
c00061fe:	b8 01 00 00 00       	mov    eax,0x1
c0006203:	83 fa ff             	cmp    edx,0xffffffff
c0006206:	74 1f                	je     c0006227 <f_truncate+0x96>
c0006208:	b8 02 00 00 00       	mov    eax,0x2
c000620d:	83 fa 01             	cmp    edx,0x1
c0006210:	74 15                	je     c0006227 <f_truncate+0x96>
c0006212:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006216:	31 c0                	xor    eax,eax
c0006218:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621b:	76 0a                	jbe    c0006227 <f_truncate+0x96>
c000621d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006220:	89 d8                	mov    eax,ebx
c0006222:	e8 7e d0 ff ff       	call   c00032a5 <remove_chain>
c0006227:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006230:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006233:	83 ca 40             	or     edx,0x40
c0006236:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006239:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623c:	85 c0                	test   eax,eax
c000623e:	75 35                	jne    c0006275 <f_truncate+0xe4>
c0006240:	84 d2                	test   dl,dl
c0006242:	79 3d                	jns    c0006281 <f_truncate+0xf0>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8d 43 50             	lea    eax,[ebx+0x50]
c000624a:	6a 01                	push   0x1
c000624c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000624f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006252:	50                   	push   eax
c0006253:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006257:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625b:	50                   	push   eax
c000625c:	e8 c7 b7 ff ff       	call   c0001a28 <disk_write>
c0006261:	83 c4 20             	add    esp,0x20
c0006264:	85 c0                	test   eax,eax
c0006266:	75 08                	jne    c0006270 <f_truncate+0xdf>
c0006268:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626c:	31 f6                	xor    esi,esi
c000626e:	eb 11                	jmp    c0006281 <f_truncate+0xf0>
c0006270:	b8 01 00 00 00       	mov    eax,0x1
c0006275:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006278:	89 c6                	mov    esi,eax
c000627a:	eb 05                	jmp    c0006281 <f_truncate+0xf0>
c000627c:	be 07 00 00 00       	mov    esi,0x7
c0006281:	83 c4 14             	add    esp,0x14
c0006284:	89 f0                	mov    eax,esi
c0006286:	5b                   	pop    ebx
c0006287:	5e                   	pop    esi
c0006288:	c3                   	ret    

c0006289 <f_unlink>:
c0006289:	56                   	push   esi
c000628a:	b9 02 00 00 00       	mov    ecx,0x2
c000628f:	53                   	push   ebx
c0006290:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006296:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629a:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a1:	e8 39 c2 ff ff       	call   c00024df <mount_volume>
c00062a6:	85 c0                	test   eax,eax
c00062a8:	0f 85 53 01 00 00    	jne    c0006401 <f_unlink+0x178>
c00062ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b2:	83 ec 0c             	sub    esp,0xc
c00062b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062b9:	68 60 04 00 00       	push   0x460
c00062be:	e8 80 1f 00 00       	call   c0008243 <ff_memalloc>
c00062c3:	89 c3                	mov    ebx,eax
c00062c5:	83 c4 10             	add    esp,0x10
c00062c8:	b8 11 00 00 00       	mov    eax,0x11
c00062cd:	85 db                	test   ebx,ebx
c00062cf:	0f 84 2c 01 00 00    	je     c0006401 <f_unlink+0x178>
c00062d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062df:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e5:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ec:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f0:	e8 56 e9 ff ff       	call   c0004c4b <follow_path>
c00062f5:	85 c0                	test   eax,eax
c00062f7:	0f 85 f0 00 00 00    	jne    c00063ed <f_unlink+0x164>
c00062fd:	b8 06 00 00 00       	mov    eax,0x6
c0006302:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630a:	0f 88 dd 00 00 00    	js     c00063ed <f_unlink+0x164>
c0006310:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006315:	74 0a                	je     c0006321 <f_unlink+0x98>
c0006317:	b8 07 00 00 00       	mov    eax,0x7
c000631c:	e9 cc 00 00 00       	jmp    c00063ed <f_unlink+0x164>
c0006321:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006325:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006329:	8a 02                	mov    al,BYTE PTR [edx]
c000632b:	3c 04                	cmp    al,0x4
c000632d:	75 12                	jne    c0006341 <f_unlink+0xb8>
c000632f:	8d 42 10             	lea    eax,[edx+0x10]
c0006332:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006336:	e8 d6 e8 ff ff       	call   c0004c11 <init_alloc_info.isra.2>
c000633b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000633f:	eb 0e                	jmp    c000634f <f_unlink+0xc6>
c0006341:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006348:	e8 73 e8 ff ff       	call   c0004bc0 <ld_clust.isra.0>
c000634d:	89 c6                	mov    esi,eax
c000634f:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006354:	75 20                	jne    c0006376 <f_unlink+0xed>
c0006356:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635a:	e8 d6 d6 ff ff       	call   c0003a35 <dir_remove>
c000635f:	85 c0                	test   eax,eax
c0006361:	75 7d                	jne    c00063e0 <f_unlink+0x157>
c0006363:	85 f6                	test   esi,esi
c0006365:	74 79                	je     c00063e0 <f_unlink+0x157>
c0006367:	31 c9                	xor    ecx,ecx
c0006369:	89 f2                	mov    edx,esi
c000636b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000636f:	e8 31 cf ff ff       	call   c00032a5 <remove_chain>
c0006374:	eb 6a                	jmp    c00063e0 <f_unlink+0x157>
c0006376:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000637a:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006381:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006388:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000638b:	75 21                	jne    c00063ae <f_unlink+0x125>
c000638d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006391:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006395:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000639c:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063a0:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063a7:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063ae:	31 d2                	xor    edx,edx
c00063b0:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b7:	e8 f0 cb ff ff       	call   c0002fac <dir_sdi>
c00063bc:	85 c0                	test   eax,eax
c00063be:	75 2d                	jne    c00063ed <f_unlink+0x164>
c00063c0:	31 d2                	xor    edx,edx
c00063c2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063c9:	e8 f0 d3 ff ff       	call   c00037be <dir_read>
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 41 ff ff ff    	je     c0006317 <f_unlink+0x8e>
c00063d6:	83 f8 04             	cmp    eax,0x4
c00063d9:	75 12                	jne    c00063ed <f_unlink+0x164>
c00063db:	e9 76 ff ff ff       	jmp    c0006356 <f_unlink+0xcd>
c00063e0:	85 c0                	test   eax,eax
c00063e2:	75 09                	jne    c00063ed <f_unlink+0x164>
c00063e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063e8:	e8 55 df ff ff       	call   c0004342 <sync_fs>
c00063ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f1:	83 ec 0c             	sub    esp,0xc
c00063f4:	53                   	push   ebx
c00063f5:	e8 5f 1e 00 00       	call   c0008259 <ff_memfree>
c00063fa:	83 c4 10             	add    esp,0x10
c00063fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006401:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	c3                   	ret    

c000640a <f_mkdir>:
c000640a:	57                   	push   edi
c000640b:	b9 02 00 00 00       	mov    ecx,0x2
c0006410:	56                   	push   esi
c0006411:	53                   	push   ebx
c0006412:	83 c4 80             	add    esp,0xffffff80
c0006415:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006419:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006420:	e8 ba c0 ff ff       	call   c00024df <mount_volume>
c0006425:	89 c3                	mov    ebx,eax
c0006427:	85 c0                	test   eax,eax
c0006429:	0f 85 fe 01 00 00    	jne    c000662d <f_mkdir+0x223>
c000642f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006433:	83 ec 0c             	sub    esp,0xc
c0006436:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000643a:	bb 11 00 00 00       	mov    ebx,0x11
c000643f:	68 60 04 00 00       	push   0x460
c0006444:	e8 fa 1d 00 00       	call   c0008243 <ff_memalloc>
c0006449:	83 c4 10             	add    esp,0x10
c000644c:	89 c7                	mov    edi,eax
c000644e:	85 c0                	test   eax,eax
c0006450:	0f 84 d7 01 00 00    	je     c000662d <f_mkdir+0x223>
c0006456:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645a:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006460:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000646d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006471:	e8 d5 e7 ff ff       	call   c0004c4b <follow_path>
c0006476:	89 c3                	mov    ebx,eax
c0006478:	85 c0                	test   eax,eax
c000647a:	74 3e                	je     c00064ba <f_mkdir+0xb0>
c000647c:	83 f8 04             	cmp    eax,0x4
c000647f:	75 3e                	jne    c00064bf <f_mkdir+0xb5>
c0006481:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006485:	31 d2                	xor    edx,edx
c0006487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000648f:	e8 10 cc ff ff       	call   c00030a4 <create_chain>
c0006494:	89 c6                	mov    esi,eax
c0006496:	85 c0                	test   eax,eax
c0006498:	74 0c                	je     c00064a6 <f_mkdir+0x9c>
c000649a:	bb 02 00 00 00       	mov    ebx,0x2
c000649f:	83 f8 01             	cmp    eax,0x1
c00064a2:	74 07                	je     c00064ab <f_mkdir+0xa1>
c00064a4:	eb 2a                	jmp    c00064d0 <f_mkdir+0xc6>
c00064a6:	bb 07 00 00 00       	mov    ebx,0x7
c00064ab:	31 c9                	xor    ecx,ecx
c00064ad:	89 f2                	mov    edx,esi
c00064af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b3:	e8 ed cd ff ff       	call   c00032a5 <remove_chain>
c00064b8:	eb 05                	jmp    c00064bf <f_mkdir+0xb5>
c00064ba:	bb 08 00 00 00       	mov    ebx,0x8
c00064bf:	83 ec 0c             	sub    esp,0xc
c00064c2:	57                   	push   edi
c00064c3:	e8 91 1d 00 00       	call   c0008259 <ff_memfree>
c00064c8:	83 c4 10             	add    esp,0x10
c00064cb:	e9 5d 01 00 00       	jmp    c000662d <f_mkdir+0x223>
c00064d0:	bb 01 00 00 00       	mov    ebx,0x1
c00064d5:	83 f8 ff             	cmp    eax,0xffffffff
c00064d8:	74 d1                	je     c00064ab <f_mkdir+0xa1>
c00064da:	89 f2                	mov    edx,esi
c00064dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e0:	e8 08 cf ff ff       	call   c00033ed <dir_clear>
c00064e5:	89 c3                	mov    ebx,eax
c00064e7:	85 c0                	test   eax,eax
c00064e9:	75 c0                	jne    c00064ab <f_mkdir+0xa1>
c00064eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ef:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f2:	74 69                	je     c000655d <f_mkdir+0x153>
c00064f4:	b9 0b 00 00 00       	mov    ecx,0xb
c00064f9:	83 c0 54             	add    eax,0x54
c00064fc:	ba 20 00 00 00       	mov    edx,0x20
c0006501:	e8 eb b5 ff ff       	call   c0001af1 <mem_set>
c0006506:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650a:	83 c0 6a             	add    eax,0x6a
c000650d:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006511:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0006515:	ba 00 00 21 50       	mov    edx,0x50210000
c000651a:	e8 b4 b5 ff ff       	call   c0001ad3 <st_dword>
c000651f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006523:	89 f1                	mov    ecx,esi
c0006525:	8d 50 54             	lea    edx,[eax+0x54]
c0006528:	e8 bc e6 ff ff       	call   c0004be9 <st_clust.isra.1>
c000652d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006531:	b9 20 00 00 00       	mov    ecx,0x20
c0006536:	8d 50 54             	lea    edx,[eax+0x54]
c0006539:	83 c0 74             	add    eax,0x74
c000653c:	e8 9b b5 ff ff       	call   c0001adc <mem_cpy>
c0006541:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006545:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006549:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000654d:	8d 50 74             	lea    edx,[eax+0x74]
c0006550:	e8 94 e6 ff ff       	call   c0004be9 <st_clust.isra.1>
c0006555:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006559:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000655d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006561:	e8 59 db ff ff       	call   c00040bf <dir_register>
c0006566:	89 c3                	mov    ebx,eax
c0006568:	85 c0                	test   eax,eax
c000656a:	0f 85 3b ff ff ff    	jne    c00064ab <f_mkdir+0xa1>
c0006570:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006574:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006577:	75 74                	jne    c00065ed <f_mkdir+0x1e3>
c0006579:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657c:	ba 00 00 21 50       	mov    edx,0x50210000
c0006581:	83 c0 0c             	add    eax,0xc
c0006584:	e8 4a b5 ff ff       	call   c0001ad3 <st_dword>
c0006589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006590:	89 f2                	mov    edx,esi
c0006592:	83 c0 34             	add    eax,0x34
c0006595:	e8 39 b5 ff ff       	call   c0001ad3 <st_dword>
c000659a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a2:	c1 e2 09             	shl    edx,0x9
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	83 c0 38             	add    eax,0x38
c00065ab:	e8 23 b5 ff ff       	call   c0001ad3 <st_dword>
c00065b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b4:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065b8:	c1 e2 09             	shl    edx,0x9
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	83 c0 28             	add    eax,0x28
c00065c1:	e8 0d b5 ff ff       	call   c0001ad3 <st_dword>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065cd:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d4:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065d8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065dc:	e8 cf d3 ff ff       	call   c00039b0 <store_xdir>
c00065e1:	89 c3                	mov    ebx,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	0f 85 d4 fe ff ff    	jne    c00064bf <f_mkdir+0xb5>
c00065eb:	eb 30                	jmp    c000661d <f_mkdir+0x213>
c00065ed:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f1:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f6:	83 c0 16             	add    eax,0x16
c00065f9:	e8 d5 b4 ff ff       	call   c0001ad3 <st_dword>
c00065fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006602:	89 f1                	mov    ecx,esi
c0006604:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006608:	e8 dc e5 ff ff       	call   c0004be9 <st_clust.isra.1>
c000660d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006611:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006615:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006619:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000661d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006621:	e8 1c dd ff ff       	call   c0004342 <sync_fs>
c0006626:	89 c3                	mov    ebx,eax
c0006628:	e9 92 fe ff ff       	jmp    c00064bf <f_mkdir+0xb5>
c000662d:	83 ec 80             	sub    esp,0xffffff80
c0006630:	89 d8                	mov    eax,ebx
c0006632:	5b                   	pop    ebx
c0006633:	5e                   	pop    esi
c0006634:	5f                   	pop    edi
c0006635:	c3                   	ret    

c0006636 <f_rename>:
c0006636:	55                   	push   ebp
c0006637:	57                   	push   edi
c0006638:	56                   	push   esi
c0006639:	53                   	push   ebx
c000663a:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006640:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006647:	e8 f3 b9 ff ff       	call   c000203f <get_ldnumber>
c000664c:	b9 02 00 00 00       	mov    ecx,0x2
c0006651:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006655:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665c:	e8 7e be ff ff       	call   c00024df <mount_volume>
c0006661:	85 c0                	test   eax,eax
c0006663:	0f 85 b5 02 00 00    	jne    c000691e <f_rename+0x2e8>
c0006669:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000666d:	83 ec 0c             	sub    esp,0xc
c0006670:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006674:	68 60 04 00 00       	push   0x460
c0006679:	e8 c5 1b 00 00       	call   c0008243 <ff_memalloc>
c000667e:	89 c3                	mov    ebx,eax
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	b8 11 00 00 00       	mov    eax,0x11
c0006688:	85 db                	test   ebx,ebx
c000668a:	0f 84 8e 02 00 00    	je     c000691e <f_rename+0x2e8>
c0006690:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006694:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066a7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ab:	e8 9b e5 ff ff       	call   c0004c4b <follow_path>
c00066b0:	85 c0                	test   eax,eax
c00066b2:	0f 85 52 02 00 00    	jne    c000690a <f_rename+0x2d4>
c00066b8:	b8 06 00 00 00       	mov    eax,0x6
c00066bd:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c5:	0f 85 3f 02 00 00    	jne    c000690a <f_rename+0x2d4>
c00066cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066cf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d2:	0f 85 05 01 00 00    	jne    c00067dd <f_rename+0x1a7>
c00066d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066db:	b9 40 00 00 00       	mov    ecx,0x40
c00066e0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e4:	e8 f3 b3 ff ff       	call   c0001adc <mem_cpy>
c00066e9:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066ee:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f9:	e8 de b3 ff ff       	call   c0001adc <mem_cpy>
c00066fe:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006705:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670c:	e8 3a e5 ff ff       	call   c0004c4b <follow_path>
c0006711:	85 c0                	test   eax,eax
c0006713:	75 29                	jne    c000673e <f_rename+0x108>
c0006715:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006719:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006720:	74 0a                	je     c000672c <f_rename+0xf6>
c0006722:	b8 08 00 00 00       	mov    eax,0x8
c0006727:	e9 de 01 00 00       	jmp    c000690a <f_rename+0x2d4>
c000672c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006733:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673a:	75 e6                	jne    c0006722 <f_rename+0xec>
c000673c:	eb 09                	jmp    c0006747 <f_rename+0x111>
c000673e:	83 f8 04             	cmp    eax,0x4
c0006741:	0f 85 c3 01 00 00    	jne    c000690a <f_rename+0x2d4>
c0006747:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674e:	e8 6c d9 ff ff       	call   c00040bf <dir_register>
c0006753:	85 c0                	test   eax,eax
c0006755:	0f 85 af 01 00 00    	jne    c000690a <f_rename+0x2d4>
c000675b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000675f:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006762:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006765:	89 c5                	mov    ebp,eax
c0006767:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000676e:	8d 46 24             	lea    eax,[esi+0x24]
c0006771:	e8 e7 b2 ff ff       	call   c0001a5d <ld_word>
c0006776:	b9 40 00 00 00       	mov    ecx,0x40
c000677b:	89 c7                	mov    edi,eax
c000677d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006781:	89 f0                	mov    eax,esi
c0006783:	e8 54 b3 ff ff       	call   c0001adc <mem_cpy>
c0006788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006794:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067a5:	83 c0 24             	add    eax,0x24
c00067a8:	0f b7 d7             	movzx  edx,di
c00067ab:	e8 1f b3 ff ff       	call   c0001acf <st_word>
c00067b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067b7:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ba:	a8 10                	test   al,0x10
c00067bc:	75 06                	jne    c00067c4 <f_rename+0x18e>
c00067be:	83 c8 20             	or     eax,0x20
c00067c1:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067cb:	e8 e0 d1 ff ff       	call   c00039b0 <store_xdir>
c00067d0:	85 c0                	test   eax,eax
c00067d2:	0f 84 1c 01 00 00    	je     c00068f4 <f_rename+0x2be>
c00067d8:	e9 2d 01 00 00       	jmp    c000690a <f_rename+0x2d4>
c00067dd:	b9 20 00 00 00       	mov    ecx,0x20
c00067e2:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067ed:	e8 ea b2 ff ff       	call   c0001adc <mem_cpy>
c00067f2:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067f7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fb:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006802:	e8 d5 b2 ff ff       	call   c0001adc <mem_cpy>
c0006807:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000680e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006815:	e8 31 e4 ff ff       	call   c0004c4b <follow_path>
c000681a:	85 c0                	test   eax,eax
c000681c:	75 27                	jne    c0006845 <f_rename+0x20f>
c000681e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006822:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006829:	0f 85 f3 fe ff ff    	jne    c0006722 <f_rename+0xec>
c000682f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006836:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000683d:	0f 85 df fe ff ff    	jne    c0006722 <f_rename+0xec>
c0006843:	eb 09                	jmp    c000684e <f_rename+0x218>
c0006845:	83 f8 04             	cmp    eax,0x4
c0006848:	0f 85 bc 00 00 00    	jne    c000690a <f_rename+0x2d4>
c000684e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006855:	e8 65 d8 ff ff       	call   c00040bf <dir_register>
c000685a:	85 c0                	test   eax,eax
c000685c:	0f 85 a8 00 00 00    	jne    c000690a <f_rename+0x2d4>
c0006862:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006869:	b9 13 00 00 00       	mov    ecx,0x13
c000686e:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006872:	8d 46 0d             	lea    eax,[esi+0xd]
c0006875:	e8 62 b2 ff ff       	call   c0001adc <mem_cpy>
c000687a:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c000687e:	a8 10                	test   al,0x10
c0006880:	75 03                	jne    c0006885 <f_rename+0x24f>
c0006882:	83 c8 20             	or     eax,0x20
c0006885:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006888:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006890:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006894:	74 5e                	je     c00068f4 <f_rename+0x2be>
c0006896:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000689d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a1:	74 51                	je     c00068f4 <f_rename+0x2be>
c00068a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068a7:	89 f2                	mov    edx,esi
c00068a9:	8a 07                	mov    al,BYTE PTR [edi]
c00068ab:	e8 10 e3 ff ff       	call   c0004bc0 <ld_clust.isra.0>
c00068b0:	89 c2                	mov    edx,eax
c00068b2:	89 f8                	mov    eax,edi
c00068b4:	e8 3d b4 ff ff       	call   c0001cf6 <clst2sect>
c00068b9:	89 c6                	mov    esi,eax
c00068bb:	89 d1                	mov    ecx,edx
c00068bd:	b8 02 00 00 00       	mov    eax,0x2
c00068c2:	09 f2                	or     edx,esi
c00068c4:	74 44                	je     c000690a <f_rename+0x2d4>
c00068c6:	89 f2                	mov    edx,esi
c00068c8:	89 f8                	mov    eax,edi
c00068ca:	e8 65 b9 ff ff       	call   c0002234 <move_window>
c00068cf:	85 c0                	test   eax,eax
c00068d1:	75 37                	jne    c000690a <f_rename+0x2d4>
c00068d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d7:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068db:	75 17                	jne    c00068f4 <f_rename+0x2be>
c00068dd:	8d 50 74             	lea    edx,[eax+0x74]
c00068e0:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068e7:	e8 fd e2 ff ff       	call   c0004be9 <st_clust.isra.1>
c00068ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068f8:	e8 38 d1 ff ff       	call   c0003a35 <dir_remove>
c00068fd:	85 c0                	test   eax,eax
c00068ff:	75 09                	jne    c000690a <f_rename+0x2d4>
c0006901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006905:	e8 38 da ff ff       	call   c0004342 <sync_fs>
c000690a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000690e:	83 ec 0c             	sub    esp,0xc
c0006911:	53                   	push   ebx
c0006912:	e8 42 19 00 00       	call   c0008259 <ff_memfree>
c0006917:	83 c4 10             	add    esp,0x10
c000691a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000691e:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006924:	5b                   	pop    ebx
c0006925:	5e                   	pop    esi
c0006926:	5f                   	pop    edi
c0006927:	5d                   	pop    ebp
c0006928:	c3                   	ret    

c0006929 <f_chmod>:
c0006929:	57                   	push   edi
c000692a:	b9 02 00 00 00       	mov    ecx,0x2
c000692f:	56                   	push   esi
c0006930:	53                   	push   ebx
c0006931:	83 ec 60             	sub    esp,0x60
c0006934:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006938:	8d 44 24 70          	lea    eax,[esp+0x70]
c000693c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006940:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006944:	e8 96 bb ff ff       	call   c00024df <mount_volume>
c0006949:	85 c0                	test   eax,eax
c000694b:	0f 85 af 00 00 00    	jne    c0006a00 <f_chmod+0xd7>
c0006951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006955:	83 ec 0c             	sub    esp,0xc
c0006958:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695c:	68 60 04 00 00       	push   0x460
c0006961:	e8 dd 18 00 00       	call   c0008243 <ff_memalloc>
c0006966:	89 c6                	mov    esi,eax
c0006968:	83 c4 10             	add    esp,0x10
c000696b:	b8 11 00 00 00       	mov    eax,0x11
c0006970:	85 f6                	test   esi,esi
c0006972:	0f 84 88 00 00 00    	je     c0006a00 <f_chmod+0xd7>
c0006978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006982:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006990:	e8 b6 e2 ff ff       	call   c0004c4b <follow_path>
c0006995:	85 c0                	test   eax,eax
c0006997:	75 53                	jne    c00069ec <f_chmod+0xc3>
c0006999:	b8 06 00 00 00       	mov    eax,0x6
c000699e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a3:	75 47                	jne    c00069ec <f_chmod+0xc3>
c00069a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a9:	89 f9                	mov    ecx,edi
c00069ab:	83 e1 27             	and    ecx,0x27
c00069ae:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b1:	75 1d                	jne    c00069d0 <f_chmod+0xa7>
c00069b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b6:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b9:	21 cb                	and    ebx,ecx
c00069bb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069be:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c5:	e8 e6 cf ff ff       	call   c00039b0 <store_xdir>
c00069ca:	85 c0                	test   eax,eax
c00069cc:	75 1e                	jne    c00069ec <f_chmod+0xc3>
c00069ce:	eb 13                	jmp    c00069e3 <f_chmod+0xba>
c00069d0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d4:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d7:	21 cb                	and    ebx,ecx
c00069d9:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069dc:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e7:	e8 56 d9 ff ff       	call   c0004342 <sync_fs>
c00069ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f0:	83 ec 0c             	sub    esp,0xc
c00069f3:	56                   	push   esi
c00069f4:	e8 60 18 00 00       	call   c0008259 <ff_memfree>
c00069f9:	83 c4 10             	add    esp,0x10
c00069fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a00:	83 c4 60             	add    esp,0x60
c0006a03:	5b                   	pop    ebx
c0006a04:	5e                   	pop    esi
c0006a05:	5f                   	pop    edi
c0006a06:	c3                   	ret    

c0006a07 <f_utime>:
c0006a07:	56                   	push   esi
c0006a08:	b9 02 00 00 00       	mov    ecx,0x2
c0006a0d:	53                   	push   ebx
c0006a0e:	83 ec 64             	sub    esp,0x64
c0006a11:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a15:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a19:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a1d:	e8 bd ba ff ff       	call   c00024df <mount_volume>
c0006a22:	85 c0                	test   eax,eax
c0006a24:	0f 85 b5 00 00 00    	jne    c0006adf <f_utime+0xd8>
c0006a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2e:	83 ec 0c             	sub    esp,0xc
c0006a31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a35:	68 60 04 00 00       	push   0x460
c0006a3a:	e8 04 18 00 00       	call   c0008243 <ff_memalloc>
c0006a3f:	89 c3                	mov    ebx,eax
c0006a41:	83 c4 10             	add    esp,0x10
c0006a44:	b8 11 00 00 00       	mov    eax,0x11
c0006a49:	85 db                	test   ebx,ebx
c0006a4b:	0f 84 8e 00 00 00    	je     c0006adf <f_utime+0xd8>
c0006a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a55:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a65:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a69:	e8 dd e1 ff ff       	call   c0004c4b <follow_path>
c0006a6e:	85 c0                	test   eax,eax
c0006a70:	75 59                	jne    c0006acb <f_utime+0xc4>
c0006a72:	b8 06 00 00 00       	mov    eax,0x6
c0006a77:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7c:	75 4d                	jne    c0006acb <f_utime+0xc4>
c0006a7e:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a86:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8a:	c1 e2 10             	shl    edx,0x10
c0006a8d:	09 ca                	or     edx,ecx
c0006a8f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a92:	75 1a                	jne    c0006aae <f_utime+0xa7>
c0006a94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a97:	83 c0 0c             	add    eax,0xc
c0006a9a:	e8 34 b0 ff ff       	call   c0001ad3 <st_dword>
c0006a9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa3:	e8 08 cf ff ff       	call   c00039b0 <store_xdir>
c0006aa8:	85 c0                	test   eax,eax
c0006aaa:	75 1f                	jne    c0006acb <f_utime+0xc4>
c0006aac:	eb 14                	jmp    c0006ac2 <f_utime+0xbb>
c0006aae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab2:	83 c0 16             	add    eax,0x16
c0006ab5:	e8 19 b0 ff ff       	call   c0001ad3 <st_dword>
c0006aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac6:	e8 77 d8 ff ff       	call   c0004342 <sync_fs>
c0006acb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006acf:	83 ec 0c             	sub    esp,0xc
c0006ad2:	53                   	push   ebx
c0006ad3:	e8 81 17 00 00       	call   c0008259 <ff_memfree>
c0006ad8:	83 c4 10             	add    esp,0x10
c0006adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006adf:	83 c4 64             	add    esp,0x64
c0006ae2:	5b                   	pop    ebx
c0006ae3:	5e                   	pop    esi
c0006ae4:	c3                   	ret    

c0006ae5 <f_getlabel>:
c0006ae5:	55                   	push   ebp
c0006ae6:	31 c9                	xor    ecx,ecx
c0006ae8:	57                   	push   edi
c0006ae9:	56                   	push   esi
c0006aea:	53                   	push   ebx
c0006aeb:	83 ec 6c             	sub    esp,0x6c
c0006aee:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af2:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006af9:	e8 e1 b9 ff ff       	call   c00024df <mount_volume>
c0006afe:	89 c3                	mov    ebx,eax
c0006b00:	85 c0                	test   eax,eax
c0006b02:	0f 85 73 01 00 00    	jne    c0006c7b <f_getlabel+0x196>
c0006b08:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b10:	0f 84 65 01 00 00    	je     c0006c7b <f_getlabel+0x196>
c0006b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1a:	31 d2                	xor    edx,edx
c0006b1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b20:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b24:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2c:	e8 7b c4 ff ff       	call   c0002fac <dir_sdi>
c0006b31:	89 c3                	mov    ebx,eax
c0006b33:	85 c0                	test   eax,eax
c0006b35:	0f 85 2f 01 00 00    	jne    c0006c6a <f_getlabel+0x185>
c0006b3b:	ba 01 00 00 00       	mov    edx,0x1
c0006b40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b44:	e8 75 cc ff ff       	call   c00037be <dir_read>
c0006b49:	89 c3                	mov    ebx,eax
c0006b4b:	85 c0                	test   eax,eax
c0006b4d:	0f 85 17 01 00 00    	jne    c0006c6a <f_getlabel+0x185>
c0006b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b5a:	74 09                	je     c0006b65 <f_getlabel+0x80>
c0006b5c:	31 f6                	xor    esi,esi
c0006b5e:	31 c9                	xor    ecx,ecx
c0006b60:	e9 c8 00 00 00       	jmp    c0006c2d <f_getlabel+0x148>
c0006b65:	31 ed                	xor    ebp,ebp
c0006b67:	31 f6                	xor    esi,esi
c0006b69:	31 ff                	xor    edi,edi
c0006b6b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b73:	39 fa                	cmp    edx,edi
c0006b75:	76 4b                	jbe    c0006bc2 <f_getlabel+0xdd>
c0006b77:	47                   	inc    edi
c0006b78:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7b:	01 d0                	add    eax,edx
c0006b7d:	e8 db ae ff ff       	call   c0001a5d <ld_word>
c0006b82:	66 85 ed             	test   bp,bp
c0006b85:	75 0d                	jne    c0006b94 <f_getlabel+0xaf>
c0006b87:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8d:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b92:	76 28                	jbe    c0006bbc <f_getlabel+0xd7>
c0006b94:	89 e9                	mov    ecx,ebp
c0006b96:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9d:	c1 e1 10             	shl    ecx,0x10
c0006ba0:	01 f2                	add    edx,esi
c0006ba2:	0f b7 c0             	movzx  eax,ax
c0006ba5:	09 c8                	or     eax,ecx
c0006ba7:	b9 04 00 00 00       	mov    ecx,0x4
c0006bac:	e8 4c b0 ff ff       	call   c0001bfd <put_utf>
c0006bb1:	84 c0                	test   al,al
c0006bb3:	74 0b                	je     c0006bc0 <f_getlabel+0xdb>
c0006bb5:	0f b6 c0             	movzx  eax,al
c0006bb8:	01 c6                	add    esi,eax
c0006bba:	31 c0                	xor    eax,eax
c0006bbc:	89 c5                	mov    ebp,eax
c0006bbe:	eb ab                	jmp    c0006b6b <f_getlabel+0x86>
c0006bc0:	31 f6                	xor    esi,esi
c0006bc2:	66 85 ed             	test   bp,bp
c0006bc5:	74 02                	je     c0006bc9 <f_getlabel+0xe4>
c0006bc7:	31 f6                	xor    esi,esi
c0006bc9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bd0:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bd4:	e9 a2 00 00 00       	jmp    c0006c7b <f_getlabel+0x196>
c0006bd9:	83 ff 0b             	cmp    edi,0xb
c0006bdc:	74 11                	je     c0006bef <f_getlabel+0x10a>
c0006bde:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be7:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bea:	c1 e0 08             	shl    eax,0x8
c0006bed:	09 c2                	or     edx,eax
c0006bef:	50                   	push   eax
c0006bf0:	50                   	push   eax
c0006bf1:	68 b5 01 00 00       	push   0x1b5
c0006bf6:	0f b7 d2             	movzx  edx,dx
c0006bf9:	52                   	push   edx
c0006bfa:	e8 07 17 00 00       	call   c0008306 <ff_oem2uni>
c0006bff:	83 c4 10             	add    esp,0x10
c0006c02:	66 85 c0             	test   ax,ax
c0006c05:	74 46                	je     c0006c4d <f_getlabel+0x168>
c0006c07:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0e:	b9 04 00 00 00       	mov    ecx,0x4
c0006c13:	01 f2                	add    edx,esi
c0006c15:	0f b7 c0             	movzx  eax,ax
c0006c18:	e8 e0 af ff ff       	call   c0001bfd <put_utf>
c0006c1d:	84 c0                	test   al,al
c0006c1f:	74 2c                	je     c0006c4d <f_getlabel+0x168>
c0006c21:	0f b6 c0             	movzx  eax,al
c0006c24:	01 c6                	add    esi,eax
c0006c26:	83 ff 0b             	cmp    edi,0xb
c0006c29:	74 24                	je     c0006c4f <f_getlabel+0x16a>
c0006c2b:	89 f9                	mov    ecx,edi
c0006c2d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c31:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c34:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c39:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c42:	e8 ea ae ff ff       	call   c0001b31 <dbc_1st>
c0006c47:	85 c0                	test   eax,eax
c0006c49:	74 a4                	je     c0006bef <f_getlabel+0x10a>
c0006c4b:	eb 8c                	jmp    c0006bd9 <f_getlabel+0xf4>
c0006c4d:	31 f6                	xor    esi,esi
c0006c4f:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c56:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c59:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c60:	74 19                	je     c0006c7b <f_getlabel+0x196>
c0006c62:	4e                   	dec    esi
c0006c63:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c66:	74 ee                	je     c0006c56 <f_getlabel+0x171>
c0006c68:	eb 11                	jmp    c0006c7b <f_getlabel+0x196>
c0006c6a:	83 fb 04             	cmp    ebx,0x4
c0006c6d:	75 0c                	jne    c0006c7b <f_getlabel+0x196>
c0006c6f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c76:	31 db                	xor    ebx,ebx
c0006c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c7b:	85 db                	test   ebx,ebx
c0006c7d:	75 50                	jne    c0006ccf <f_getlabel+0x1ea>
c0006c7f:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c87:	74 46                	je     c0006ccf <f_getlabel+0x1ea>
c0006c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c90:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c93:	e8 9c b5 ff ff       	call   c0002234 <move_window>
c0006c98:	89 c3                	mov    ebx,eax
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	75 31                	jne    c0006ccf <f_getlabel+0x1ea>
c0006c9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ca2:	b8 43 00 00 00       	mov    eax,0x43
c0006ca7:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca9:	80 f9 03             	cmp    cl,0x3
c0006cac:	74 0f                	je     c0006cbd <f_getlabel+0x1d8>
c0006cae:	31 c0                	xor    eax,eax
c0006cb0:	80 f9 04             	cmp    cl,0x4
c0006cb3:	0f 94 c0             	sete   al
c0006cb6:	48                   	dec    eax
c0006cb7:	83 e0 c3             	and    eax,0xffffffc3
c0006cba:	83 c0 64             	add    eax,0x64
c0006cbd:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cc1:	e8 a4 ad ff ff       	call   c0001a6a <ld_dword>
c0006cc6:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ccd:	89 07                	mov    DWORD PTR [edi],eax
c0006ccf:	83 c4 6c             	add    esp,0x6c
c0006cd2:	89 d8                	mov    eax,ebx
c0006cd4:	5b                   	pop    ebx
c0006cd5:	5e                   	pop    esi
c0006cd6:	5f                   	pop    edi
c0006cd7:	5d                   	pop    ebp
c0006cd8:	c3                   	ret    

c0006cd9 <f_setlabel>:
c0006cd9:	56                   	push   esi
c0006cda:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdf:	53                   	push   ebx
c0006ce0:	83 ec 74             	sub    esp,0x74
c0006ce3:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cee:	e8 ec b7 ff ff       	call   c00024df <mount_volume>
c0006cf3:	89 c6                	mov    esi,eax
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	0f 85 41 02 00 00    	jne    c0006f3e <f_setlabel+0x265>
c0006cfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d04:	0f 85 8e 00 00 00    	jne    c0006d98 <f_setlabel+0xbf>
c0006d0a:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0f:	31 d2                	xor    edx,edx
c0006d11:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d15:	31 db                	xor    ebx,ebx
c0006d17:	e8 d5 ad ff ff       	call   c0001af1 <mem_set>
c0006d1c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d23:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d26:	0f 86 0a 01 00 00    	jbe    c0006e36 <f_setlabel+0x15d>
c0006d2c:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d33:	e8 ff ad ff ff       	call   c0001b37 <tchar2uni>
c0006d38:	89 c6                	mov    esi,eax
c0006d3a:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3f:	76 2a                	jbe    c0006d6b <f_setlabel+0x92>
c0006d41:	83 f8 ff             	cmp    eax,0xffffffff
c0006d44:	74 05                	je     c0006d4b <f_setlabel+0x72>
c0006d46:	83 fb 09             	cmp    ebx,0x9
c0006d49:	76 0a                	jbe    c0006d55 <f_setlabel+0x7c>
c0006d4b:	be 06 00 00 00       	mov    esi,0x6
c0006d50:	e9 e9 01 00 00       	jmp    c0006f3e <f_setlabel+0x265>
c0006d55:	89 c2                	mov    edx,eax
c0006d57:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d61:	01 c8                	add    eax,ecx
c0006d63:	43                   	inc    ebx
c0006d64:	e8 66 ad ff ff       	call   c0001acf <st_word>
c0006d69:	eb 04                	jmp    c0006d6f <f_setlabel+0x96>
c0006d6b:	85 c0                	test   eax,eax
c0006d6d:	74 dc                	je     c0006d4b <f_setlabel+0x72>
c0006d6f:	89 f2                	mov    edx,esi
c0006d71:	b8 97 04 02 c0       	mov    eax,0xc0020497
c0006d76:	e8 a4 ad ff ff       	call   c0001b1f <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	75 cc                	jne    c0006d4b <f_setlabel+0x72>
c0006d7f:	83 fb 0a             	cmp    ebx,0xa
c0006d82:	77 c7                	ja     c0006d4b <f_setlabel+0x72>
c0006d84:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d87:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d8b:	0f b7 d6             	movzx  edx,si
c0006d8e:	01 c8                	add    eax,ecx
c0006d90:	43                   	inc    ebx
c0006d91:	e8 39 ad ff ff       	call   c0001acf <st_word>
c0006d96:	eb 84                	jmp    c0006d1c <f_setlabel+0x43>
c0006d98:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9d:	ba 20 00 00 00       	mov    edx,0x20
c0006da2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da6:	31 db                	xor    ebx,ebx
c0006da8:	e8 44 ad ff ff       	call   c0001af1 <mem_set>
c0006dad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db4:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db7:	76 60                	jbe    c0006e19 <f_setlabel+0x140>
c0006db9:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dc0:	e8 72 ad ff ff       	call   c0001b37 <tchar2uni>
c0006dc5:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dca:	0f 87 7b ff ff ff    	ja     c0006d4b <f_setlabel+0x72>
c0006dd0:	83 ec 0c             	sub    esp,0xc
c0006dd3:	50                   	push   eax
c0006dd4:	e8 9c 15 00 00       	call   c0008375 <ff_wtoupper>
c0006dd9:	5a                   	pop    edx
c0006dda:	59                   	pop    ecx
c0006ddb:	68 b5 01 00 00       	push   0x1b5
c0006de0:	50                   	push   eax
c0006de1:	e8 8a 14 00 00       	call   c0008270 <ff_uni2oem>
c0006de6:	83 c4 10             	add    esp,0x10
c0006de9:	89 c6                	mov    esi,eax
c0006deb:	66 85 c0             	test   ax,ax
c0006dee:	0f 84 57 ff ff ff    	je     c0006d4b <f_setlabel+0x72>
c0006df4:	0f b7 d0             	movzx  edx,ax
c0006df7:	b8 90 04 02 c0       	mov    eax,0xc0020490
c0006dfc:	e8 1e ad ff ff       	call   c0001b1f <chk_chr>
c0006e01:	85 c0                	test   eax,eax
c0006e03:	0f 85 42 ff ff ff    	jne    c0006d4b <f_setlabel+0x72>
c0006e09:	66 81 fe ff 00       	cmp    si,0xff
c0006e0e:	0f 87 14 01 00 00    	ja     c0006f28 <f_setlabel+0x24f>
c0006e14:	e9 fa 00 00 00       	jmp    c0006f13 <f_setlabel+0x23a>
c0006e19:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1e:	0f 84 27 ff ff ff    	je     c0006d4b <f_setlabel+0x72>
c0006e24:	85 db                	test   ebx,ebx
c0006e26:	74 0e                	je     c0006e36 <f_setlabel+0x15d>
c0006e28:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e2b:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e30:	75 04                	jne    c0006e36 <f_setlabel+0x15d>
c0006e32:	89 c3                	mov    ebx,eax
c0006e34:	eb ee                	jmp    c0006e24 <f_setlabel+0x14b>
c0006e36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e3a:	31 d2                	xor    edx,edx
c0006e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e40:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e44:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e4c:	e8 5b c1 ff ff       	call   c0002fac <dir_sdi>
c0006e51:	89 c6                	mov    esi,eax
c0006e53:	85 c0                	test   eax,eax
c0006e55:	0f 85 e3 00 00 00    	jne    c0006f3e <f_setlabel+0x265>
c0006e5b:	ba 01 00 00 00       	mov    edx,0x1
c0006e60:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e64:	e8 55 c9 ff ff       	call   c00037be <dir_read>
c0006e69:	85 c0                	test   eax,eax
c0006e6b:	75 21                	jne    c0006e8e <f_setlabel+0x1b5>
c0006e6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e71:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e75:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e78:	74 5d                	je     c0006ed7 <f_setlabel+0x1fe>
c0006e7a:	85 db                	test   ebx,ebx
c0006e7c:	74 0b                	je     c0006e89 <f_setlabel+0x1b0>
c0006e7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e83:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e87:	eb 70                	jmp    c0006ef9 <f_setlabel+0x220>
c0006e89:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e8c:	eb 70                	jmp    c0006efe <f_setlabel+0x225>
c0006e8e:	83 f8 04             	cmp    eax,0x4
c0006e91:	75 7c                	jne    c0006f0f <f_setlabel+0x236>
c0006e93:	85 db                	test   ebx,ebx
c0006e95:	0f 84 a3 00 00 00    	je     c0006f3e <f_setlabel+0x265>
c0006e9b:	ba 01 00 00 00       	mov    edx,0x1
c0006ea0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea4:	e8 8f ca ff ff       	call   c0003938 <dir_alloc>
c0006ea9:	89 c6                	mov    esi,eax
c0006eab:	85 c0                	test   eax,eax
c0006ead:	0f 85 8b 00 00 00    	jne    c0006f3e <f_setlabel+0x265>
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb9:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebe:	e8 2e ac ff ff       	call   c0001af1 <mem_set>
c0006ec3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eca:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ece:	75 18                	jne    c0006ee8 <f_setlabel+0x20f>
c0006ed0:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed7:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006eda:	b9 16 00 00 00       	mov    ecx,0x16
c0006edf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee3:	83 c0 02             	add    eax,0x2
c0006ee6:	eb 9b                	jmp    c0006e83 <f_setlabel+0x1aa>
c0006ee8:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006eec:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef1:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef9:	e8 de ab ff ff       	call   c0001adc <mem_cpy>
c0006efe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f0a:	e8 33 d4 ff ff       	call   c0004342 <sync_fs>
c0006f0f:	89 c6                	mov    esi,eax
c0006f11:	eb 2b                	jmp    c0006f3e <f_setlabel+0x265>
c0006f13:	83 fb 0a             	cmp    ebx,0xa
c0006f16:	0f 87 2f fe ff ff    	ja     c0006d4b <f_setlabel+0x72>
c0006f1c:	89 f0                	mov    eax,esi
c0006f1e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f22:	43                   	inc    ebx
c0006f23:	e9 85 fe ff ff       	jmp    c0006dad <f_setlabel+0xd4>
c0006f28:	83 fb 09             	cmp    ebx,0x9
c0006f2b:	0f 87 1a fe ff ff    	ja     c0006d4b <f_setlabel+0x72>
c0006f31:	89 f0                	mov    eax,esi
c0006f33:	66 c1 e8 08          	shr    ax,0x8
c0006f37:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f3b:	43                   	inc    ebx
c0006f3c:	eb de                	jmp    c0006f1c <f_setlabel+0x243>
c0006f3e:	83 c4 74             	add    esp,0x74
c0006f41:	89 f0                	mov    eax,esi
c0006f43:	5b                   	pop    ebx
c0006f44:	5e                   	pop    esi
c0006f45:	c3                   	ret    

c0006f46 <f_forward>:
c0006f46:	55                   	push   ebp
c0006f47:	57                   	push   edi
c0006f48:	56                   	push   esi
c0006f49:	53                   	push   ebx
c0006f4a:	83 ec 2c             	sub    esp,0x2c
c0006f4d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f55:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f5f:	89 d8                	mov    eax,ebx
c0006f61:	e8 f3 b1 ff ff       	call   c0002159 <validate>
c0006f66:	89 c5                	mov    ebp,eax
c0006f68:	85 c0                	test   eax,eax
c0006f6a:	0f 85 aa 01 00 00    	jne    c000711a <f_forward+0x1d4>
c0006f70:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f74:	85 ed                	test   ebp,ebp
c0006f76:	0f 85 9e 01 00 00    	jne    c000711a <f_forward+0x1d4>
c0006f7c:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f80:	0f 84 8f 01 00 00    	je     c0007115 <f_forward+0x1cf>
c0006f86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f8c:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8f:	bf 00 00 00 00       	mov    edi,0x0
c0006f94:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f97:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f9b:	89 d1                	mov    ecx,edx
c0006f9d:	19 f9                	sbb    ecx,edi
c0006f9f:	0f 83 cf 00 00 00    	jae    c0007074 <f_forward+0x12e>
c0006fa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa9:	e9 c6 00 00 00       	jmp    c0007074 <f_forward+0x12e>
c0006fae:	50                   	push   eax
c0006faf:	50                   	push   eax
c0006fb0:	6a 00                	push   0x0
c0006fb2:	6a 00                	push   0x0
c0006fb4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb8:	83 c4 10             	add    esp,0x10
c0006fbb:	85 c0                	test   eax,eax
c0006fbd:	0f 84 57 01 00 00    	je     c000711a <f_forward+0x1d4>
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fca:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fcd:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fd1:	89 d7                	mov    edi,edx
c0006fd3:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd6:	89 c6                	mov    esi,eax
c0006fd8:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fdc:	21 ce                	and    esi,ecx
c0006fde:	89 c1                	mov    ecx,eax
c0006fe0:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe6:	0f 84 98 00 00 00    	je     c0007084 <f_forward+0x13e>
c0006fec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ff0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff3:	89 c8                	mov    eax,ecx
c0006ff5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff9:	e8 f8 ac ff ff       	call   c0001cf6 <clst2sect>
c0006ffe:	89 d7                	mov    edi,edx
c0007000:	09 c7                	or     edi,eax
c0007002:	0f 84 9e 00 00 00    	je     c00070a6 <f_forward+0x160>
c0007008:	31 ff                	xor    edi,edi
c000700a:	01 c6                	add    esi,eax
c000700c:	11 d7                	adc    edi,edx
c000700e:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007011:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007014:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007018:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000701b:	39 fa                	cmp    edx,edi
c000701d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007021:	0f 85 a2 00 00 00    	jne    c00070c9 <f_forward+0x183>
c0007027:	39 f0                	cmp    eax,esi
c0007029:	0f 85 9a 00 00 00    	jne    c00070c9 <f_forward+0x183>
c000702f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007032:	ba 00 02 00 00       	mov    edx,0x200
c0007037:	25 ff 01 00 00       	and    eax,0x1ff
c000703c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007040:	29 c2                	sub    edx,eax
c0007042:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007045:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007048:	39 d1                	cmp    ecx,edx
c000704a:	76 02                	jbe    c000704e <f_forward+0x108>
c000704c:	89 d1                	mov    ecx,edx
c000704e:	52                   	push   edx
c000704f:	8d 73 50             	lea    esi,[ebx+0x50]
c0007052:	52                   	push   edx
c0007053:	01 c6                	add    esi,eax
c0007055:	51                   	push   ecx
c0007056:	56                   	push   esi
c0007057:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000705b:	83 c4 10             	add    esp,0x10
c000705e:	85 c0                	test   eax,eax
c0007060:	74 44                	je     c00070a6 <f_forward+0x160>
c0007062:	31 ff                	xor    edi,edi
c0007064:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007067:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000706a:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706e:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007072:	01 07                	add    DWORD PTR [edi],eax
c0007074:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007079:	0f 85 2f ff ff ff    	jne    c0006fae <f_forward+0x68>
c000707f:	e9 96 00 00 00       	jmp    c000711a <f_forward+0x1d4>
c0007084:	85 f6                	test   esi,esi
c0007086:	0f 85 60 ff ff ff    	jne    c0006fec <f_forward+0xa6>
c000708c:	89 d7                	mov    edi,edx
c000708e:	09 c7                	or     edi,eax
c0007090:	75 05                	jne    c0007097 <f_forward+0x151>
c0007092:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007095:	eb 0a                	jmp    c00070a1 <f_forward+0x15b>
c0007097:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000709a:	89 d8                	mov    eax,ebx
c000709c:	e8 15 bd ff ff       	call   c0002db6 <get_fat>
c00070a1:	83 f8 01             	cmp    eax,0x1
c00070a4:	77 0b                	ja     c00070b1 <f_forward+0x16b>
c00070a6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070aa:	bd 02 00 00 00       	mov    ebp,0x2
c00070af:	eb 69                	jmp    c000711a <f_forward+0x1d4>
c00070b1:	83 f8 ff             	cmp    eax,0xffffffff
c00070b4:	75 0b                	jne    c00070c1 <f_forward+0x17b>
c00070b6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070ba:	bd 01 00 00 00       	mov    ebp,0x1
c00070bf:	eb 59                	jmp    c000711a <f_forward+0x1d4>
c00070c1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c4:	e9 23 ff ff ff       	jmp    c0006fec <f_forward+0xa6>
c00070c9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070cd:	79 20                	jns    c00070ef <f_forward+0x1a9>
c00070cf:	83 ec 0c             	sub    esp,0xc
c00070d2:	6a 01                	push   0x1
c00070d4:	52                   	push   edx
c00070d5:	50                   	push   eax
c00070d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070da:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070de:	50                   	push   eax
c00070df:	e8 44 a9 ff ff       	call   c0001a28 <disk_write>
c00070e4:	83 c4 20             	add    esp,0x20
c00070e7:	85 c0                	test   eax,eax
c00070e9:	75 cb                	jne    c00070b6 <f_forward+0x170>
c00070eb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ef:	83 ec 0c             	sub    esp,0xc
c00070f2:	6a 01                	push   0x1
c00070f4:	57                   	push   edi
c00070f5:	56                   	push   esi
c00070f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007102:	50                   	push   eax
c0007103:	e8 0a a9 ff ff       	call   c0001a12 <disk_read>
c0007108:	83 c4 20             	add    esp,0x20
c000710b:	85 c0                	test   eax,eax
c000710d:	0f 84 1c ff ff ff    	je     c000702f <f_forward+0xe9>
c0007113:	eb a1                	jmp    c00070b6 <f_forward+0x170>
c0007115:	bd 07 00 00 00       	mov    ebp,0x7
c000711a:	83 c4 2c             	add    esp,0x2c
c000711d:	89 e8                	mov    eax,ebp
c000711f:	5b                   	pop    ebx
c0007120:	5e                   	pop    esi
c0007121:	5f                   	pop    edi
c0007122:	5d                   	pop    ebp
c0007123:	c3                   	ret    

c0007124 <f_mkfs>:
c0007124:	55                   	push   ebp
c0007125:	57                   	push   edi
c0007126:	56                   	push   esi
c0007127:	53                   	push   ebx
c0007128:	bb 0b 00 00 00       	mov    ebx,0xb
c000712d:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007133:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713a:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007141:	e8 f9 ae ff ff       	call   c000203f <get_ldnumber>
c0007146:	85 c0                	test   eax,eax
c0007148:	0f 88 e8 10 00 00    	js     c0008236 <f_mkfs+0x1112>
c000714e:	8b 14 85 40 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8c0]
c0007155:	85 d2                	test   edx,edx
c0007157:	74 03                	je     c000715c <f_mkfs+0x38>
c0007159:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000715c:	85 f6                	test   esi,esi
c000715e:	75 05                	jne    c0007165 <f_mkfs+0x41>
c0007160:	be 80 04 02 c0       	mov    esi,0xc0020480
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000716c:	83 ec 0c             	sub    esp,0xc
c000716f:	bb 03 00 00 00       	mov    ebx,0x3
c0007174:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007178:	e8 92 a8 ff ff       	call   c0001a0f <disk_initialize>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	a8 01                	test   al,0x1
c0007182:	0f 85 ae 10 00 00    	jne    c0008236 <f_mkfs+0x1112>
c0007188:	bb 0a 00 00 00       	mov    ebx,0xa
c000718d:	a8 04                	test   al,0x4
c000718f:	0f 85 a1 10 00 00    	jne    c0008236 <f_mkfs+0x1112>
c0007195:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007198:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000719c:	85 c0                	test   eax,eax
c000719e:	75 20                	jne    c00071c0 <f_mkfs+0x9c>
c00071a0:	51                   	push   ecx
c00071a1:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a5:	50                   	push   eax
c00071a6:	6a 03                	push   0x3
c00071a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ac:	e8 8d a8 ff ff       	call   c0001a3e <disk_ioctl>
c00071b1:	83 c4 10             	add    esp,0x10
c00071b4:	85 c0                	test   eax,eax
c00071b6:	74 08                	je     c00071c0 <f_mkfs+0x9c>
c00071b8:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c4:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c7:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071cc:	77 04                	ja     c00071d2 <f_mkfs+0xae>
c00071ce:	85 c2                	test   edx,eax
c00071d0:	74 08                	je     c00071da <f_mkfs+0xb6>
c00071d2:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071da:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071dd:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071e1:	48                   	dec    eax
c00071e2:	3c 01                	cmp    al,0x1
c00071e4:	76 05                	jbe    c00071eb <f_mkfs+0xc7>
c00071e6:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071eb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071f2:	48                   	dec    eax
c00071f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f8:	77 07                	ja     c0007201 <f_mkfs+0xdd>
c00071fa:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ff:	74 08                	je     c0007209 <f_mkfs+0xe5>
c0007201:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007209:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000720c:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007212:	77 07                	ja     c000721b <f_mkfs+0xf7>
c0007214:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007217:	85 d8                	test   eax,ebx
c0007219:	74 02                	je     c000721d <f_mkfs+0xf9>
c000721b:	31 db                	xor    ebx,ebx
c000721d:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007228:	77 0a                	ja     c0007234 <f_mkfs+0x110>
c000722a:	bb 11 00 00 00       	mov    ebx,0x11
c000722f:	e9 02 10 00 00       	jmp    c0008236 <f_mkfs+0x1112>
c0007234:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000723b:	8b 36                	mov    esi,DWORD PTR [esi]
c000723d:	85 ed                	test   ebp,ebp
c000723f:	75 1e                	jne    c000725f <f_mkfs+0x13b>
c0007241:	83 ec 0c             	sub    esp,0xc
c0007244:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000724b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007250:	50                   	push   eax
c0007251:	e8 ed 0f 00 00       	call   c0008243 <ff_memalloc>
c0007256:	83 c4 10             	add    esp,0x10
c0007259:	89 c5                	mov    ebp,eax
c000725b:	85 c0                	test   eax,eax
c000725d:	74 cb                	je     c000722a <f_mkfs+0x106>
c000725f:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007267:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726f:	52                   	push   edx
c0007270:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007274:	50                   	push   eax
c0007275:	6a 01                	push   0x1
c0007277:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000727b:	e8 be a7 ff ff       	call   c0001a3e <disk_ioctl>
c0007280:	83 c4 10             	add    esp,0x10
c0007283:	85 c0                	test   eax,eax
c0007285:	0f 85 46 0f 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c000728b:	89 f1                	mov    ecx,esi
c000728d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007295:	83 e1 0f             	and    ecx,0xf
c0007298:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072a0:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a4:	83 e6 08             	and    esi,0x8
c00072a7:	75 56                	jne    c00072ff <f_mkfs+0x1db>
c00072a9:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072ad:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072b1:	83 ff 00             	cmp    edi,0x0
c00072b4:	76 20                	jbe    c00072d6 <f_mkfs+0x1b2>
c00072b6:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072bb:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c1:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c9:	83 d7 ff             	adc    edi,0xffffffff
c00072cc:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072d0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d4:	eb 21                	jmp    c00072f7 <f_mkfs+0x1d3>
c00072d6:	ba 3f 00 00 00       	mov    edx,0x3f
c00072db:	39 f2                	cmp    edx,esi
c00072dd:	19 f8                	sbb    eax,edi
c00072df:	73 1e                	jae    c00072ff <f_mkfs+0x1db>
c00072e1:	83 c6 c1             	add    esi,0xffffffc1
c00072e4:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072ec:	83 d7 ff             	adc    edi,0xffffffff
c00072ef:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007303:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007307:	89 04 24             	mov    DWORD PTR [esp],eax
c000730a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730e:	ba 7f 00 00 00       	mov    edx,0x7f
c0007313:	31 c0                	xor    eax,eax
c0007315:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007318:	89 c7                	mov    edi,eax
c000731a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731e:	0f 83 c1 0a 00 00    	jae    c0007de5 <f_mkfs+0xcc1>
c0007324:	89 df                	mov    edi,ebx
c0007326:	c1 ef 09             	shr    edi,0x9
c0007329:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732d:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007334:	c1 ef 09             	shr    edi,0x9
c0007337:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000733c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007340:	74 29                	je     c000736b <f_mkfs+0x247>
c0007342:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007347:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000734d:	0f 97 c2             	seta   dl
c0007350:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007353:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007357:	0f 92 c0             	setb   al
c000735a:	08 c2                	or     dl,al
c000735c:	75 5b                	jne    c00073b9 <f_mkfs+0x295>
c000735e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007362:	83 e0 07             	and    eax,0x7
c0007365:	3c 04                	cmp    al,0x4
c0007367:	74 50                	je     c00073b9 <f_mkfs+0x295>
c0007369:	eb 1b                	jmp    c0007386 <f_mkfs+0x262>
c000736b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007370:	0f 87 6f 0a 00 00    	ja     c0007de5 <f_mkfs+0xcc1>
c0007376:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737c:	76 08                	jbe    c0007386 <f_mkfs+0x262>
c000737e:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007386:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000738a:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738e:	83 e0 01             	and    eax,0x1
c0007391:	80 e1 02             	and    cl,0x2
c0007394:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007398:	74 0d                	je     c00073a7 <f_mkfs+0x283>
c000739a:	84 c0                	test   al,al
c000739c:	0f 84 4f 09 00 00    	je     c0007cf1 <f_mkfs+0xbcd>
c00073a2:	e9 0e 08 00 00       	jmp    c0007bb5 <f_mkfs+0xa91>
c00073a7:	bb 13 00 00 00       	mov    ebx,0x13
c00073ac:	84 c0                	test   al,al
c00073ae:	0f 85 01 08 00 00    	jne    c0007bb5 <f_mkfs+0xa91>
c00073b4:	e9 35 0e 00 00       	jmp    c00081ee <f_mkfs+0x10ca>
c00073b9:	ba ff 0f 00 00       	mov    edx,0xfff
c00073be:	31 c0                	xor    eax,eax
c00073c0:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c3:	89 c7                	mov    edi,eax
c00073c5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c9:	0f 83 16 0a 00 00    	jae    c0007de5 <f_mkfs+0xcc1>
c00073cf:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d5:	77 39                	ja     c0007410 <f_mkfs+0x2ec>
c00073d7:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073dc:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073eb:	73 08                	jae    c00073f5 <f_mkfs+0x2d1>
c00073ed:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f5:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073fa:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fd:	b8 00 00 00 00       	mov    eax,0x0
c0007402:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007406:	73 08                	jae    c0007410 <f_mkfs+0x2ec>
c0007408:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007414:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007418:	83 c0 20             	add    eax,0x20
c000741b:	83 d2 00             	adc    edx,0x0
c000741e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007422:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007426:	31 d2                	xor    edx,edx
c0007428:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000742c:	52                   	push   edx
c000742d:	50                   	push   eax
c000742e:	31 ff                	xor    edi,edi
c0007430:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007434:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007438:	e8 df 80 01 00       	call   c001f51c <__udivdi3>
c000743d:	83 c4 10             	add    esp,0x10
c0007440:	c1 e0 02             	shl    eax,0x2
c0007443:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007447:	05 07 02 00 00       	add    eax,0x207
c000744c:	89 f1                	mov    ecx,esi
c000744e:	c1 e8 09             	shr    eax,0x9
c0007451:	89 fb                	mov    ebx,edi
c0007453:	83 c1 ff             	add    ecx,0xffffffff
c0007456:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000745a:	83 d3 ff             	adc    ebx,0xffffffff
c000745d:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007461:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c0007465:	31 d2                	xor    edx,edx
c0007467:	01 c8                	add    eax,ecx
c0007469:	11 da                	adc    edx,ebx
c000746b:	89 c1                	mov    ecx,eax
c000746d:	f7 de                	neg    esi
c000746f:	83 d7 00             	adc    edi,0x0
c0007472:	21 f1                	and    ecx,esi
c0007474:	f7 df                	neg    edi
c0007476:	89 d0                	mov    eax,edx
c0007478:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747c:	21 f8                	and    eax,edi
c000747e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007482:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007486:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000748a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007499:	0f ac d0 01          	shrd   eax,edx,0x1
c000749d:	d1 ea                	shr    edx,1
c000749f:	89 df                	mov    edi,ebx
c00074a1:	39 c1                	cmp    ecx,eax
c00074a3:	19 d7                	sbb    edi,edx
c00074a5:	0f 83 3a 09 00 00    	jae    c0007de5 <f_mkfs+0xcc1>
c00074ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074af:	31 d2                	xor    edx,edx
c00074b1:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b9:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074c0:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c4:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074cc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074d0:	83 f8 0f             	cmp    eax,0xf
c00074d3:	0f 86 0c 09 00 00    	jbe    c0007de5 <f_mkfs+0xcc1>
c00074d9:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074e1:	0f 87 fe 08 00 00    	ja     c0007de5 <f_mkfs+0xcc1>
c00074e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074eb:	31 d2                	xor    edx,edx
c00074ed:	83 c0 07             	add    eax,0x7
c00074f0:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f8:	c1 e8 03             	shr    eax,0x3
c00074fb:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007503:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750b:	c1 e0 09             	shl    eax,0x9
c000750e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007515:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007519:	48                   	dec    eax
c000751a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751e:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007522:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007526:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752a:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007531:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007535:	31 d2                	xor    edx,edx
c0007537:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007540:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007544:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007548:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000754c:	31 ff                	xor    edi,edi
c000754e:	31 f6                	xor    esi,esi
c0007550:	31 db                	xor    ebx,ebx
c0007552:	85 ff                	test   edi,edi
c0007554:	74 05                	je     c000755b <f_mkfs+0x437>
c0007556:	4f                   	dec    edi
c0007557:	74 44                	je     c000759d <f_mkfs+0x479>
c0007559:	eb 4f                	jmp    c00075aa <f_mkfs+0x486>
c000755b:	83 ec 0c             	sub    esp,0xc
c000755e:	0f b7 c3             	movzx  eax,bx
c0007561:	50                   	push   eax
c0007562:	e8 0e 0e 00 00       	call   c0008375 <ff_wtoupper>
c0007567:	83 c4 10             	add    esp,0x10
c000756a:	89 c1                	mov    ecx,eax
c000756c:	66 39 c3             	cmp    bx,ax
c000756f:	8d 53 01             	lea    edx,[ebx+0x1]
c0007572:	75 3e                	jne    c00075b2 <f_mkfs+0x48e>
c0007574:	be 01 00 00 00       	mov    esi,0x1
c0007579:	89 df                	mov    edi,ebx
c000757b:	66 01 f7             	add    di,si
c000757e:	75 07                	jne    c0007587 <f_mkfs+0x463>
c0007580:	83 fe 7f             	cmp    esi,0x7f
c0007583:	77 31                	ja     c00075b6 <f_mkfs+0x492>
c0007585:	eb 16                	jmp    c000759d <f_mkfs+0x479>
c0007587:	83 ec 0c             	sub    esp,0xc
c000758a:	0f b7 ff             	movzx  edi,di
c000758d:	57                   	push   edi
c000758e:	e8 e2 0d 00 00       	call   c0008375 <ff_wtoupper>
c0007593:	83 c4 10             	add    esp,0x10
c0007596:	39 c7                	cmp    edi,eax
c0007598:	75 e6                	jne    c0007580 <f_mkfs+0x45c>
c000759a:	46                   	inc    esi
c000759b:	eb dc                	jmp    c0007579 <f_mkfs+0x455>
c000759d:	31 c0                	xor    eax,eax
c000759f:	4e                   	dec    esi
c00075a0:	0f 95 c0             	setne  al
c00075a3:	89 d9                	mov    ecx,ebx
c00075a5:	89 c7                	mov    edi,eax
c00075a7:	43                   	inc    ebx
c00075a8:	eb 14                	jmp    c00075be <f_mkfs+0x49a>
c00075aa:	89 f1                	mov    ecx,esi
c00075ac:	01 f3                	add    ebx,esi
c00075ae:	31 ff                	xor    edi,edi
c00075b0:	eb 0c                	jmp    c00075be <f_mkfs+0x49a>
c00075b2:	89 d3                	mov    ebx,edx
c00075b4:	eb 08                	jmp    c00075be <f_mkfs+0x49a>
c00075b6:	bf 02 00 00 00       	mov    edi,0x2
c00075bb:	83 c9 ff             	or     ecx,0xffffffff
c00075be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c5:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075c9:	0f b6 c1             	movzx  eax,cl
c00075cc:	e8 87 a9 ff ff       	call   c0001f58 <xsum32>
c00075d1:	66 c1 e9 08          	shr    cx,0x8
c00075d5:	89 c2                	mov    edx,eax
c00075d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075da:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075de:	0f b7 c1             	movzx  eax,cx
c00075e1:	e8 72 a9 ff ff       	call   c0001f58 <xsum32>
c00075e6:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075eb:	66 85 db             	test   bx,bx
c00075ee:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f2:	74 1f                	je     c0007613 <f_mkfs+0x4ef>
c00075f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f7:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075fe:	83 c0 02             	add    eax,0x2
c0007601:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007607:	39 c2                	cmp    edx,eax
c0007609:	74 08                	je     c0007613 <f_mkfs+0x4ef>
c000760b:	89 04 24             	mov    DWORD PTR [esp],eax
c000760e:	e9 3f ff ff ff       	jmp    c0007552 <f_mkfs+0x42e>
c0007613:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007616:	83 ec 0c             	sub    esp,0xc
c0007619:	05 01 02 00 00       	add    eax,0x201
c000761e:	c1 e8 09             	shr    eax,0x9
c0007621:	50                   	push   eax
c0007622:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007626:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000762a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000762e:	55                   	push   ebp
c000762f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007633:	e8 f0 a3 ff ff       	call   c0001a28 <disk_write>
c0007638:	83 c4 20             	add    esp,0x20
c000763b:	85 c0                	test   eax,eax
c000763d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007640:	0f 85 8b 0b 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007646:	89 d0                	mov    eax,edx
c0007648:	31 d2                	xor    edx,edx
c000764a:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c000764e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007652:	66 85 db             	test   bx,bx
c0007655:	74 04                	je     c000765b <f_mkfs+0x537>
c0007657:	31 c0                	xor    eax,eax
c0007659:	eb b0                	jmp    c000760b <f_mkfs+0x4e7>
c000765b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000765f:	31 d2                	xor    edx,edx
c0007661:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007665:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007669:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000766d:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007674:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007678:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000767e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007682:	8d 70 01             	lea    esi,[eax+0x1]
c0007685:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007689:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000768d:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007698:	c1 eb 09             	shr    ebx,0x9
c000769b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000769f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076a3:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076aa:	31 d2                	xor    edx,edx
c00076ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b4:	89 c1                	mov    ecx,eax
c00076b6:	89 e8                	mov    eax,ebp
c00076b8:	e8 34 a4 ff ff       	call   c0001af1 <mem_set>
c00076bd:	31 c0                	xor    eax,eax
c00076bf:	83 fe 07             	cmp    esi,0x7
c00076c2:	76 10                	jbe    c00076d4 <f_mkfs+0x5b0>
c00076c4:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c7:	76 0b                	jbe    c00076d4 <f_mkfs+0x5b0>
c00076c9:	40                   	inc    eax
c00076ca:	83 ee 08             	sub    esi,0x8
c00076cd:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d2:	eb eb                	jmp    c00076bf <f_mkfs+0x59b>
c00076d4:	b2 01                	mov    dl,0x1
c00076d6:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076da:	85 f6                	test   esi,esi
c00076dc:	74 0c                	je     c00076ea <f_mkfs+0x5c6>
c00076de:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e1:	76 07                	jbe    c00076ea <f_mkfs+0x5c6>
c00076e3:	08 11                	or     BYTE PTR [ecx],dl
c00076e5:	4e                   	dec    esi
c00076e6:	01 d2                	add    edx,edx
c00076e8:	eb f0                	jmp    c00076da <f_mkfs+0x5b6>
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f0:	76 04                	jbe    c00076f6 <f_mkfs+0x5d2>
c00076f2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f6:	83 ec 0c             	sub    esp,0xc
c00076f9:	57                   	push   edi
c00076fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007702:	55                   	push   ebp
c0007703:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007707:	e8 1c a3 ff ff       	call   c0001a28 <disk_write>
c000770c:	83 c4 20             	add    esp,0x20
c000770f:	85 c0                	test   eax,eax
c0007711:	0f 85 ba 0a 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007717:	31 d2                	xor    edx,edx
c0007719:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771d:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007721:	29 fb                	sub    ebx,edi
c0007723:	0f 85 7a ff ff ff    	jne    c00076a3 <f_mkfs+0x57f>
c0007729:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007735:	31 f6                	xor    esi,esi
c0007737:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000773b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773e:	31 d2                	xor    edx,edx
c0007740:	89 e8                	mov    eax,ebp
c0007742:	e8 aa a3 ff ff       	call   c0001af1 <mem_set>
c0007747:	31 c9                	xor    ecx,ecx
c0007749:	85 db                	test   ebx,ebx
c000774b:	75 40                	jne    c000778d <f_mkfs+0x669>
c000774d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007752:	89 e8                	mov    eax,ebp
c0007754:	e8 7a a3 ff ff       	call   c0001ad3 <st_dword>
c0007759:	8d 45 04             	lea    eax,[ebp+0x4]
c000775c:	83 ca ff             	or     edx,0xffffffff
c000775f:	bb 02 00 00 00       	mov    ebx,0x2
c0007764:	e8 6a a3 ff ff       	call   c0001ad3 <st_dword>
c0007769:	b9 08 00 00 00       	mov    ecx,0x8
c000776e:	eb 1d                	jmp    c000778d <f_mkfs+0x669>
c0007770:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007773:	76 3b                	jbe    c00077b0 <f_mkfs+0x68c>
c0007775:	43                   	inc    ebx
c0007776:	83 fe 01             	cmp    esi,0x1
c0007779:	89 da                	mov    edx,ebx
c000777b:	77 03                	ja     c0007780 <f_mkfs+0x65c>
c000777d:	83 ca ff             	or     edx,0xffffffff
c0007780:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007784:	4e                   	dec    esi
c0007785:	e8 49 a3 ff ff       	call   c0001ad3 <st_dword>
c000778a:	83 c1 04             	add    ecx,0x4
c000778d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007791:	85 f6                	test   esi,esi
c0007793:	75 db                	jne    c0007770 <f_mkfs+0x64c>
c0007795:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779a:	77 14                	ja     c00077b0 <f_mkfs+0x68c>
c000779c:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a7:	85 f6                	test   esi,esi
c00077a9:	74 05                	je     c00077b0 <f_mkfs+0x68c>
c00077ab:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ae:	77 dd                	ja     c000778d <f_mkfs+0x669>
c00077b0:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00077b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b8:	39 cf                	cmp    edi,ecx
c00077ba:	76 02                	jbe    c00077be <f_mkfs+0x69a>
c00077bc:	89 cf                	mov    edi,ecx
c00077be:	83 ec 0c             	sub    esp,0xc
c00077c1:	57                   	push   edi
c00077c2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ca:	55                   	push   ebp
c00077cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077cf:	e8 54 a2 ff ff       	call   c0001a28 <disk_write>
c00077d4:	83 c4 20             	add    esp,0x20
c00077d7:	85 c0                	test   eax,eax
c00077d9:	0f 85 f2 09 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c00077df:	31 d2                	xor    edx,edx
c00077e1:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077e5:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077e9:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077ed:	0f 85 48 ff ff ff    	jne    c000773b <f_mkfs+0x617>
c00077f3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f6:	31 d2                	xor    edx,edx
c00077f8:	89 e8                	mov    eax,ebp
c00077fa:	31 ff                	xor    edi,edi
c00077fc:	e8 f0 a2 ff ff       	call   c0001af1 <mem_set>
c0007801:	8d 45 34             	lea    eax,[ebp+0x34]
c0007804:	ba 02 00 00 00       	mov    edx,0x2
c0007809:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780d:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007811:	e8 bd a2 ff ff       	call   c0001ad3 <st_dword>
c0007816:	8d 45 38             	lea    eax,[ebp+0x38]
c0007819:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781d:	e8 b1 a2 ff ff       	call   c0001ad3 <st_dword>
c0007822:	8d 45 44             	lea    eax,[ebp+0x44]
c0007825:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007829:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782d:	e8 a1 a2 ff ff       	call   c0001ad3 <st_dword>
c0007832:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007836:	8d 45 54             	lea    eax,[ebp+0x54]
c0007839:	83 c2 02             	add    edx,0x2
c000783c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007840:	e8 8e a2 ff ff       	call   c0001ad3 <st_dword>
c0007845:	8d 45 58             	lea    eax,[ebp+0x58]
c0007848:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007850:	e8 7e a2 ff ff       	call   c0001ad3 <st_dword>
c0007855:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007859:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000785e:	89 c6                	mov    esi,eax
c0007860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007864:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007868:	89 04 24             	mov    DWORD PTR [esp],eax
c000786b:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c000786f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007872:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007876:	39 cb                	cmp    ebx,ecx
c0007878:	76 02                	jbe    c000787c <f_mkfs+0x758>
c000787a:	89 cb                	mov    ebx,ecx
c000787c:	83 ec 0c             	sub    esp,0xc
c000787f:	53                   	push   ebx
c0007880:	57                   	push   edi
c0007881:	56                   	push   esi
c0007882:	55                   	push   ebp
c0007883:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007887:	e8 9c a1 ff ff       	call   c0001a28 <disk_write>
c000788c:	83 c4 20             	add    esp,0x20
c000788f:	85 c0                	test   eax,eax
c0007891:	0f 85 3a 09 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007897:	31 d2                	xor    edx,edx
c0007899:	b9 00 02 00 00       	mov    ecx,0x200
c000789e:	89 e8                	mov    eax,ebp
c00078a0:	e8 4c a2 ff ff       	call   c0001af1 <mem_set>
c00078a5:	31 d2                	xor    edx,edx
c00078a7:	01 de                	add    esi,ebx
c00078a9:	11 d7                	adc    edi,edx
c00078ab:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078ae:	75 bf                	jne    c000786f <f_mkfs+0x74b>
c00078b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b8:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c0:	b9 00 02 00 00       	mov    ecx,0x200
c00078c5:	31 d2                	xor    edx,edx
c00078c7:	89 e8                	mov    eax,ebp
c00078c9:	e8 23 a2 ff ff       	call   c0001af1 <mem_set>
c00078ce:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d3:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00078d8:	89 e8                	mov    eax,ebp
c00078da:	e8 fd a1 ff ff       	call   c0001adc <mem_cpy>
c00078df:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078ea:	e8 e7 a1 ff ff       	call   c0001ad6 <st_qword>
c00078ef:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f3:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f6:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fa:	e8 d7 a1 ff ff       	call   c0001ad6 <st_qword>
c00078ff:	8d 45 50             	lea    eax,[ebp+0x50]
c0007902:	ba 20 00 00 00       	mov    edx,0x20
c0007907:	e8 c7 a1 ff ff       	call   c0001ad3 <st_dword>
c000790c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007910:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007914:	e8 ba a1 ff ff       	call   c0001ad3 <st_dword>
c0007919:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791d:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007921:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007925:	e8 a9 a1 ff ff       	call   c0001ad3 <st_dword>
c000792a:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007931:	e8 9d a1 ff ff       	call   c0001ad3 <st_dword>
c0007936:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000793a:	8d 50 02             	lea    edx,[eax+0x2]
c000793d:	8d 45 60             	lea    eax,[ebp+0x60]
c0007940:	e8 8e a1 ff ff       	call   c0001ad3 <st_dword>
c0007945:	8d 45 64             	lea    eax,[ebp+0x64]
c0007948:	ba 00 00 21 50       	mov    edx,0x50210000
c000794d:	e8 81 a1 ff ff       	call   c0001ad3 <st_dword>
c0007952:	8d 45 68             	lea    eax,[ebp+0x68]
c0007955:	ba 00 01 00 00       	mov    edx,0x100
c000795a:	e8 70 a1 ff ff       	call   c0001acf <st_word>
c000795f:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007963:	b8 0a 00 00 00       	mov    eax,0xa
c0007968:	48                   	dec    eax
c0007969:	74 05                	je     c0007970 <f_mkfs+0x84c>
c000796b:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796e:	eb f8                	jmp    c0007968 <f_mkfs+0x844>
c0007970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007974:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007978:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797c:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007980:	74 05                	je     c0007987 <f_mkfs+0x863>
c0007982:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007985:	eb f5                	jmp    c000797c <f_mkfs+0x858>
c0007987:	8d 45 78             	lea    eax,[ebp+0x78]
c000798a:	ba eb fe 00 00       	mov    edx,0xfeeb
c000798f:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007995:	31 db                	xor    ebx,ebx
c0007997:	e8 33 a1 ff ff       	call   c0001acf <st_word>
c000799c:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00079aa:	e8 20 a1 ff ff       	call   c0001acf <st_word>
c00079af:	31 c9                	xor    ecx,ecx
c00079b1:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b4:	83 f8 01             	cmp    eax,0x1
c00079b7:	76 13                	jbe    c00079cc <f_mkfs+0x8a8>
c00079b9:	83 f9 70             	cmp    ecx,0x70
c00079bc:	74 0e                	je     c00079cc <f_mkfs+0x8a8>
c00079be:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c3:	89 da                	mov    edx,ebx
c00079c5:	e8 8e a5 ff ff       	call   c0001f58 <xsum32>
c00079ca:	89 c3                	mov    ebx,eax
c00079cc:	41                   	inc    ecx
c00079cd:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d3:	75 dc                	jne    c00079b1 <f_mkfs+0x88d>
c00079d5:	89 f0                	mov    eax,esi
c00079d7:	89 fa                	mov    edx,edi
c00079d9:	83 c0 01             	add    eax,0x1
c00079dc:	83 d2 00             	adc    edx,0x0
c00079df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079e7:	83 ec 0c             	sub    esp,0xc
c00079ea:	6a 01                	push   0x1
c00079ec:	57                   	push   edi
c00079ed:	56                   	push   esi
c00079ee:	55                   	push   ebp
c00079ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f3:	e8 30 a0 ff ff       	call   c0001a28 <disk_write>
c00079f8:	83 c4 20             	add    esp,0x20
c00079fb:	85 c0                	test   eax,eax
c00079fd:	0f 85 ce 07 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007a03:	31 d2                	xor    edx,edx
c0007a05:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0a:	89 e8                	mov    eax,ebp
c0007a0c:	e8 e0 a0 ff ff       	call   c0001af1 <mem_set>
c0007a11:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a16:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a19:	e8 b1 a0 ff ff       	call   c0001acf <st_word>
c0007a1e:	89 f0                	mov    eax,esi
c0007a20:	83 c0 09             	add    eax,0x9
c0007a23:	89 fa                	mov    edx,edi
c0007a25:	83 d2 00             	adc    edx,0x0
c0007a28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a2f:	31 c9                	xor    ecx,ecx
c0007a31:	41                   	inc    ecx
c0007a32:	89 da                	mov    edx,ebx
c0007a34:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a39:	e8 1a a5 ff ff       	call   c0001f58 <xsum32>
c0007a3e:	89 c3                	mov    ebx,eax
c0007a40:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a46:	75 e9                	jne    c0007a31 <f_mkfs+0x90d>
c0007a48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a50:	83 c0 01             	add    eax,0x1
c0007a53:	83 d2 00             	adc    edx,0x0
c0007a56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a5e:	83 ec 0c             	sub    esp,0xc
c0007a61:	6a 01                	push   0x1
c0007a63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6b:	55                   	push   ebp
c0007a6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a70:	e8 b3 9f ff ff       	call   c0001a28 <disk_write>
c0007a75:	83 c4 20             	add    esp,0x20
c0007a78:	85 c0                	test   eax,eax
c0007a7a:	0f 85 51 07 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007a80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a84:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a88:	75 09                	jne    c0007a93 <f_mkfs+0x96f>
c0007a8a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a91:	74 12                	je     c0007aa5 <f_mkfs+0x981>
c0007a93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a97:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa3:	eb 8a                	jmp    c0007a2f <f_mkfs+0x90b>
c0007aa5:	31 d2                	xor    edx,edx
c0007aa7:	b9 00 02 00 00       	mov    ecx,0x200
c0007aac:	89 e8                	mov    eax,ebp
c0007aae:	e8 3e a0 ff ff       	call   c0001af1 <mem_set>
c0007ab3:	83 c6 0b             	add    esi,0xb
c0007ab6:	83 d7 00             	adc    edi,0x0
c0007ab9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac1:	31 c9                	xor    ecx,ecx
c0007ac3:	41                   	inc    ecx
c0007ac4:	89 da                	mov    edx,ebx
c0007ac6:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acb:	e8 88 a4 ff ff       	call   c0001f58 <xsum32>
c0007ad0:	89 c3                	mov    ebx,eax
c0007ad2:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad8:	75 e9                	jne    c0007ac3 <f_mkfs+0x99f>
c0007ada:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007add:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae1:	83 c6 01             	add    esi,0x1
c0007ae4:	83 d7 00             	adc    edi,0x0
c0007ae7:	83 ec 0c             	sub    esp,0xc
c0007aea:	6a 01                	push   0x1
c0007aec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af4:	55                   	push   ebp
c0007af5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007af9:	e8 2a 9f ff ff       	call   c0001a28 <disk_write>
c0007afe:	83 c4 20             	add    esp,0x20
c0007b01:	85 c0                	test   eax,eax
c0007b03:	0f 85 c8 06 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007b09:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0d:	75 06                	jne    c0007b15 <f_mkfs+0x9f1>
c0007b0f:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b13:	74 09                	je     c0007b1e <f_mkfs+0x9fa>
c0007b15:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b18:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1c:	eb a3                	jmp    c0007ac1 <f_mkfs+0x99d>
c0007b1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b22:	89 da                	mov    edx,ebx
c0007b24:	01 e8                	add    eax,ebp
c0007b26:	e8 a8 9f ff ff       	call   c0001ad3 <st_dword>
c0007b2b:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b30:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b38:	75 e4                	jne    c0007b1e <f_mkfs+0x9fa>
c0007b3a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b41:	83 c6 02             	add    esi,0x2
c0007b44:	83 d7 00             	adc    edi,0x0
c0007b47:	83 ec 0c             	sub    esp,0xc
c0007b4a:	6a 01                	push   0x1
c0007b4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b54:	55                   	push   ebp
c0007b55:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b59:	e8 ca 9e ff ff       	call   c0001a28 <disk_write>
c0007b5e:	83 c4 20             	add    esp,0x20
c0007b61:	85 c0                	test   eax,eax
c0007b63:	0f 85 68 06 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007b69:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6e:	74 0d                	je     c0007b7d <f_mkfs+0xa59>
c0007b70:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b78:	e9 43 fd ff ff       	jmp    c00078c0 <f_mkfs+0x79c>
c0007b7d:	b1 07                	mov    cl,0x7
c0007b7f:	e9 e3 05 00 00       	jmp    c0008167 <f_mkfs+0x1043>
c0007b84:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b89:	0f 85 4f 02 00 00    	jne    c0007dde <f_mkfs+0xcba>
c0007b8f:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b94:	0f 86 22 02 00 00    	jbe    c0007dbc <f_mkfs+0xc98>
c0007b9a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b9f:	0f 85 81 06 00 00    	jne    c0008226 <f_mkfs+0x1102>
c0007ba5:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bac:	83 f8 40             	cmp    eax,0x40
c0007baf:	0f 87 51 06 00 00    	ja     c0008206 <f_mkfs+0x10e2>
c0007bb5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bb9:	85 ff                	test   edi,edi
c0007bbb:	75 1c                	jne    c0007bd9 <f_mkfs+0xab5>
c0007bbd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc0:	ba 60 04 02 c0       	mov    edx,0xc0020460
c0007bc5:	c1 e9 0c             	shr    ecx,0xc
c0007bc8:	bf 01 00 00 00       	mov    edi,0x1
c0007bcd:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd0:	66 85 c0             	test   ax,ax
c0007bd3:	0f 85 95 01 00 00    	jne    c0007d6e <f_mkfs+0xc4a>
c0007bd9:	31 d2                	xor    edx,edx
c0007bdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bde:	f7 f7                	div    edi
c0007be0:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be5:	0f 86 95 01 00 00    	jbe    c0007d80 <f_mkfs+0xc5c>
c0007beb:	83 c0 02             	add    eax,0x2
c0007bee:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf3:	01 c0                	add    eax,eax
c0007bf5:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfa:	be 01 00 00 00       	mov    esi,0x1
c0007bff:	c1 e8 09             	shr    eax,0x9
c0007c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0a:	c1 e0 05             	shl    eax,0x5
c0007c0d:	c1 e8 09             	shr    eax,0x9
c0007c10:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c14:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c19:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c1d:	89 f0                	mov    eax,esi
c0007c1f:	31 d2                	xor    edx,edx
c0007c21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c31:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c35:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c44:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c48:	31 db                	xor    ebx,ebx
c0007c4a:	01 c8                	add    eax,ecx
c0007c4c:	11 da                	adc    edx,ebx
c0007c4e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c52:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c56:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c5a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5e:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c62:	f7 da                	neg    edx
c0007c64:	21 d1                	and    ecx,edx
c0007c66:	29 d9                	sub    ecx,ebx
c0007c68:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6d:	0f 85 20 01 00 00    	jne    c0007d93 <f_mkfs+0xc6f>
c0007c73:	31 db                	xor    ebx,ebx
c0007c75:	01 ce                	add    esi,ecx
c0007c77:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7b:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c7f:	89 f8                	mov    eax,edi
c0007c81:	31 d2                	xor    edx,edx
c0007c83:	c1 e0 04             	shl    eax,0x4
c0007c86:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c8a:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8e:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c92:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c96:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9a:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9d:	19 d3                	sbb    ebx,edx
c0007c9f:	0f 82 40 01 00 00    	jb     c0007de5 <f_mkfs+0xcc1>
c0007ca5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ca9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cac:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007cb1:	89 c8                	mov    eax,ecx
c0007cb3:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007cb7:	29 f0                	sub    eax,esi
c0007cb9:	29 d0                	sub    eax,edx
c0007cbb:	31 d2                	xor    edx,edx
c0007cbd:	f7 f7                	div    edi
c0007cbf:	89 c3                	mov    ebx,eax
c0007cc1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc6:	0f 85 b8 fe ff ff    	jne    c0007b84 <f_mkfs+0xa60>
c0007ccc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd1:	0f 87 1d 01 00 00    	ja     c0007df4 <f_mkfs+0xcd0>
c0007cd7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdc:	0f 85 03 01 00 00    	jne    c0007de5 <f_mkfs+0xcc1>
c0007ce2:	83 ff 01             	cmp    edi,0x1
c0007ce5:	0f 86 fa 00 00 00    	jbe    c0007de5 <f_mkfs+0xcc1>
c0007ceb:	d1 ef                	shr    edi,1
c0007ced:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf8:	85 db                	test   ebx,ebx
c0007cfa:	75 2d                	jne    c0007d29 <f_mkfs+0xc05>
c0007cfc:	89 cb                	mov    ebx,ecx
c0007cfe:	ba 70 04 02 c0       	mov    edx,0xc0020470
c0007d03:	c1 eb 11             	shr    ebx,0x11
c0007d06:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d11:	66 85 c0             	test   ax,ax
c0007d14:	74 11                	je     c0007d27 <f_mkfs+0xc03>
c0007d16:	83 c2 02             	add    edx,0x2
c0007d19:	39 d8                	cmp    eax,ebx
c0007d1b:	77 0a                	ja     c0007d27 <f_mkfs+0xc03>
c0007d1d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d21:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d25:	eb e7                	jmp    c0007d0e <f_mkfs+0xbea>
c0007d27:	31 db                	xor    ebx,ebx
c0007d29:	31 d2                	xor    edx,edx
c0007d2b:	89 c8                	mov    eax,ecx
c0007d2d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d31:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d38:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3d:	c1 ea 09             	shr    edx,0x9
c0007d40:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d45:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d49:	0f 87 96 00 00 00    	ja     c0007de5 <f_mkfs+0xcc1>
c0007d4f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d53:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d5b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d5f:	be 20 00 00 00       	mov    esi,0x20
c0007d64:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d69:	e9 a6 fe ff ff       	jmp    c0007c14 <f_mkfs+0xaf0>
c0007d6e:	83 c2 02             	add    edx,0x2
c0007d71:	39 c8                	cmp    eax,ecx
c0007d73:	0f 87 60 fe ff ff    	ja     c0007bd9 <f_mkfs+0xab5>
c0007d79:	01 ff                	add    edi,edi
c0007d7b:	e9 4d fe ff ff       	jmp    c0007bcd <f_mkfs+0xaa9>
c0007d80:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d83:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d88:	40                   	inc    eax
c0007d89:	d1 e8                	shr    eax,1
c0007d8b:	83 c0 03             	add    eax,0x3
c0007d8e:	e9 62 fe ff ff       	jmp    c0007bf5 <f_mkfs+0xad1>
c0007d93:	31 d2                	xor    edx,edx
c0007d95:	89 c8                	mov    eax,ecx
c0007d97:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d9b:	85 d2                	test   edx,edx
c0007d9d:	74 0c                	je     c0007dab <f_mkfs+0xc87>
c0007d9f:	49                   	dec    ecx
c0007da0:	46                   	inc    esi
c0007da1:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da6:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dab:	89 c8                	mov    eax,ecx
c0007dad:	31 d2                	xor    edx,edx
c0007daf:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007db3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db7:	e9 c3 fe ff ff       	jmp    c0007c7f <f_mkfs+0xb5b>
c0007dbc:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc1:	77 31                	ja     c0007df4 <f_mkfs+0xcd0>
c0007dc3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc8:	75 1b                	jne    c0007de5 <f_mkfs+0xcc1>
c0007dca:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd1:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd6:	0f 86 d9 fd ff ff    	jbe    c0007bb5 <f_mkfs+0xa91>
c0007ddc:	eb 07                	jmp    c0007de5 <f_mkfs+0xcc1>
c0007dde:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de3:	76 0a                	jbe    c0007def <f_mkfs+0xccb>
c0007de5:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dea:	e9 ff 03 00 00       	jmp    c00081ee <f_mkfs+0x10ca>
c0007def:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df4:	31 d2                	xor    edx,edx
c0007df6:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfb:	89 e8                	mov    eax,ebp
c0007dfd:	e8 ef 9c ff ff       	call   c0001af1 <mem_set>
c0007e02:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e07:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007e0c:	89 e8                	mov    eax,ebp
c0007e0e:	e8 c9 9c ff ff       	call   c0001adc <mem_cpy>
c0007e13:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e16:	ba 00 02 00 00       	mov    edx,0x200
c0007e1b:	e8 af 9c ff ff       	call   c0001acf <st_word>
c0007e20:	89 f8                	mov    eax,edi
c0007e22:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e25:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e28:	0f b7 d6             	movzx  edx,si
c0007e2b:	e8 9f 9c ff ff       	call   c0001acf <st_word>
c0007e30:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e34:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e37:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3c:	75 08                	jne    c0007e46 <f_mkfs+0xd22>
c0007e3e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e46:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4d:	e8 7d 9c ff ff       	call   c0001acf <st_word>
c0007e52:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e57:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5b:	39 d0                	cmp    eax,edx
c0007e5d:	b8 00 00 00 00       	mov    eax,0x0
c0007e62:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e66:	72 0a                	jb     c0007e72 <f_mkfs+0xd4e>
c0007e68:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6b:	e8 5f 9c ff ff       	call   c0001acf <st_word>
c0007e70:	eb 08                	jmp    c0007e7a <f_mkfs+0xd56>
c0007e72:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e75:	e8 59 9c ff ff       	call   c0001ad3 <st_dword>
c0007e7a:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e82:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e86:	e8 44 9c ff ff       	call   c0001acf <st_word>
c0007e8b:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8e:	ba ff 00 00 00       	mov    edx,0xff
c0007e93:	e8 37 9c ff ff       	call   c0001acf <st_word>
c0007e98:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e9f:	e8 2f 9c ff ff       	call   c0001ad3 <st_dword>
c0007ea4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea9:	75 57                	jne    c0007f02 <f_mkfs+0xdde>
c0007eab:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eae:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb3:	e8 1b 9c ff ff       	call   c0001ad3 <st_dword>
c0007eb8:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ebf:	e8 0f 9c ff ff       	call   c0001ad3 <st_dword>
c0007ec4:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec7:	ba 02 00 00 00       	mov    edx,0x2
c0007ecc:	e8 02 9c ff ff       	call   c0001ad3 <st_dword>
c0007ed1:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed4:	ba 01 00 00 00       	mov    edx,0x1
c0007ed9:	e8 f1 9b ff ff       	call   c0001acf <st_word>
c0007ede:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee1:	ba 06 00 00 00       	mov    edx,0x6
c0007ee6:	e8 e4 9b ff ff       	call   c0001acf <st_word>
c0007eeb:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007eef:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef3:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef6:	b9 13 00 00 00       	mov    ecx,0x13
c0007efb:	ba 8e 05 02 c0       	mov    edx,0xc002058e
c0007f00:	eb 2f                	jmp    c0007f31 <f_mkfs+0xe0d>
c0007f02:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f05:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0a:	e8 c4 9b ff ff       	call   c0001ad3 <st_dword>
c0007f0f:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f12:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f17:	e8 b3 9b ff ff       	call   c0001acf <st_word>
c0007f1c:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f20:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f24:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f27:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2c:	ba a2 05 02 c0       	mov    edx,0xc00205a2
c0007f31:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f37:	e8 a0 9b ff ff       	call   c0001adc <mem_cpy>
c0007f3c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f41:	89 f0                	mov    eax,esi
c0007f43:	e8 87 9b ff ff       	call   c0001acf <st_word>
c0007f48:	83 ec 0c             	sub    esp,0xc
c0007f4b:	6a 01                	push   0x1
c0007f4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f55:	55                   	push   ebp
c0007f56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5a:	e8 c9 9a ff ff       	call   c0001a28 <disk_write>
c0007f5f:	83 c4 20             	add    esp,0x20
c0007f62:	85 c0                	test   eax,eax
c0007f64:	0f 85 67 02 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0007f6a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f6f:	0f 85 b7 00 00 00    	jne    c000802c <f_mkfs+0xf08>
c0007f75:	83 ec 0c             	sub    esp,0xc
c0007f78:	6a 01                	push   0x1
c0007f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f82:	83 c0 06             	add    eax,0x6
c0007f85:	83 d2 00             	adc    edx,0x0
c0007f88:	52                   	push   edx
c0007f89:	50                   	push   eax
c0007f8a:	55                   	push   ebp
c0007f8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f8f:	e8 94 9a ff ff       	call   c0001a28 <disk_write>
c0007f94:	83 c4 20             	add    esp,0x20
c0007f97:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9c:	31 d2                	xor    edx,edx
c0007f9e:	89 e8                	mov    eax,ebp
c0007fa0:	e8 4c 9b ff ff       	call   c0001af1 <mem_set>
c0007fa5:	ba 52 52 61 41       	mov    edx,0x41615252
c0007faa:	89 e8                	mov    eax,ebp
c0007fac:	e8 22 9b ff ff       	call   c0001ad3 <st_dword>
c0007fb1:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb7:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbc:	e8 12 9b ff ff       	call   c0001ad3 <st_dword>
c0007fc1:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc4:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fca:	e8 04 9b ff ff       	call   c0001ad3 <st_dword>
c0007fcf:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd5:	ba 02 00 00 00       	mov    edx,0x2
c0007fda:	e8 f4 9a ff ff       	call   c0001ad3 <st_dword>
c0007fdf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe4:	89 f0                	mov    eax,esi
c0007fe6:	e8 e4 9a ff ff       	call   c0001acf <st_word>
c0007feb:	83 ec 0c             	sub    esp,0xc
c0007fee:	6a 01                	push   0x1
c0007ff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff8:	83 c0 07             	add    eax,0x7
c0007ffb:	83 d2 00             	adc    edx,0x0
c0007ffe:	52                   	push   edx
c0007fff:	50                   	push   eax
c0008000:	55                   	push   ebp
c0008001:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008005:	e8 1e 9a ff ff       	call   c0001a28 <disk_write>
c000800a:	83 c4 14             	add    esp,0x14
c000800d:	6a 01                	push   0x1
c000800f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008013:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008017:	83 c0 01             	add    eax,0x1
c000801a:	83 d2 00             	adc    edx,0x0
c000801d:	52                   	push   edx
c000801e:	50                   	push   eax
c000801f:	55                   	push   ebp
c0008020:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008024:	e8 ff 99 ff ff       	call   c0001a28 <disk_write>
c0008029:	83 c4 20             	add    esp,0x20
c000802c:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008033:	31 d2                	xor    edx,edx
c0008035:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803b:	31 db                	xor    ebx,ebx
c000803d:	89 e8                	mov    eax,ebp
c000803f:	e8 ad 9a ff ff       	call   c0001af1 <mem_set>
c0008044:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000804b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008050:	0f 94 c3             	sete   bl
c0008053:	4b                   	dec    ebx
c0008054:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805a:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008060:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008065:	75 21                	jne    c0008088 <f_mkfs+0xf64>
c0008067:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806c:	89 e8                	mov    eax,ebp
c000806e:	e8 60 9a ff ff       	call   c0001ad3 <st_dword>
c0008073:	8d 45 04             	lea    eax,[ebp+0x4]
c0008076:	83 ca ff             	or     edx,0xffffffff
c0008079:	e8 55 9a ff ff       	call   c0001ad3 <st_dword>
c000807e:	8d 45 08             	lea    eax,[ebp+0x8]
c0008081:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008086:	eb 04                	jmp    c000808c <f_mkfs+0xf68>
c0008088:	89 da                	mov    edx,ebx
c000808a:	89 e8                	mov    eax,ebp
c000808c:	e8 42 9a ff ff       	call   c0001ad3 <st_dword>
c0008091:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008099:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a1:	39 ce                	cmp    esi,ecx
c00080a3:	76 02                	jbe    c00080a7 <f_mkfs+0xf83>
c00080a5:	89 ce                	mov    esi,ecx
c00080a7:	83 ec 0c             	sub    esp,0xc
c00080aa:	56                   	push   esi
c00080ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b3:	55                   	push   ebp
c00080b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b8:	e8 6b 99 ff ff       	call   c0001a28 <disk_write>
c00080bd:	83 c4 20             	add    esp,0x20
c00080c0:	85 c0                	test   eax,eax
c00080c2:	0f 85 09 01 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c00080c8:	31 d2                	xor    edx,edx
c00080ca:	b9 00 02 00 00       	mov    ecx,0x200
c00080cf:	89 e8                	mov    eax,ebp
c00080d1:	e8 1b 9a ff ff       	call   c0001af1 <mem_set>
c00080d6:	31 d2                	xor    edx,edx
c00080d8:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dc:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e4:	75 b3                	jne    c0008099 <f_mkfs+0xf75>
c00080e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080e9:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f0:	40                   	inc    eax
c00080f1:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080f5:	0f 87 65 ff ff ff    	ja     c0008060 <f_mkfs+0xf3c>
c00080fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008100:	74 04                	je     c0008106 <f_mkfs+0xfe2>
c0008102:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0008106:	89 fb                	mov    ebx,edi
c0008108:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810c:	76 04                	jbe    c0008112 <f_mkfs+0xfee>
c000810e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008112:	83 ec 0c             	sub    esp,0xc
c0008115:	53                   	push   ebx
c0008116:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811e:	55                   	push   ebp
c000811f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008123:	e8 00 99 ff ff       	call   c0001a28 <disk_write>
c0008128:	83 c4 20             	add    esp,0x20
c000812b:	85 c0                	test   eax,eax
c000812d:	0f 85 9e 00 00 00    	jne    c00081d1 <f_mkfs+0x10ad>
c0008133:	31 d2                	xor    edx,edx
c0008135:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008139:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813d:	29 df                	sub    edi,ebx
c000813f:	75 c5                	jne    c0008106 <f_mkfs+0xfe2>
c0008141:	b1 0c                	mov    cl,0xc
c0008143:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008148:	74 1d                	je     c0008167 <f_mkfs+0x1043>
c000814a:	b8 ff ff 00 00       	mov    eax,0xffff
c000814f:	b1 06                	mov    cl,0x6
c0008151:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008155:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008159:	72 0c                	jb     c0008167 <f_mkfs+0x1043>
c000815b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008160:	0f 94 c1             	sete   cl
c0008163:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008167:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816c:	75 4c                	jne    c00081ba <f_mkfs+0x1096>
c000816e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008172:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008176:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008184:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000818f:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819a:	83 ec 0c             	sub    esp,0xc
c000819d:	0f b6 c9             	movzx  ecx,cl
c00081a0:	55                   	push   ebp
c00081a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081a5:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081ac:	e8 58 c2 ff ff       	call   c0004409 <create_partition>
c00081b1:	83 c4 10             	add    esp,0x10
c00081b4:	89 c3                	mov    ebx,eax
c00081b6:	85 c0                	test   eax,eax
c00081b8:	75 34                	jne    c00081ee <f_mkfs+0x10ca>
c00081ba:	50                   	push   eax
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	6a 00                	push   0x0
c00081bf:	6a 00                	push   0x0
c00081c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c5:	e8 74 98 ff ff       	call   c0001a3e <disk_ioctl>
c00081ca:	83 c4 10             	add    esp,0x10
c00081cd:	85 c0                	test   eax,eax
c00081cf:	74 1d                	je     c00081ee <f_mkfs+0x10ca>
c00081d1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081d9:	75 0c                	jne    c00081e7 <f_mkfs+0x10c3>
c00081db:	83 ec 0c             	sub    esp,0xc
c00081de:	55                   	push   ebp
c00081df:	e8 75 00 00 00       	call   c0008259 <ff_memfree>
c00081e4:	83 c4 10             	add    esp,0x10
c00081e7:	bb 01 00 00 00       	mov    ebx,0x1
c00081ec:	eb 48                	jmp    c0008236 <f_mkfs+0x1112>
c00081ee:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f6:	75 3e                	jne    c0008236 <f_mkfs+0x1112>
c00081f8:	83 ec 0c             	sub    esp,0xc
c00081fb:	55                   	push   ebp
c00081fc:	e8 58 00 00 00       	call   c0008259 <ff_memfree>
c0008201:	83 c4 10             	add    esp,0x10
c0008204:	eb 30                	jmp    c0008236 <f_mkfs+0x1112>
c0008206:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820b:	0f 85 eb fa ff ff    	jne    c0007cfc <f_mkfs+0xbd8>
c0008211:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008215:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821b:	0f 86 b8 f9 ff ff    	jbe    c0007bd9 <f_mkfs+0xab5>
c0008221:	e9 bf fb ff ff       	jmp    c0007de5 <f_mkfs+0xcc1>
c0008226:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822b:	0f 85 c0 fa ff ff    	jne    c0007cf1 <f_mkfs+0xbcd>
c0008231:	e9 af fb ff ff       	jmp    c0007de5 <f_mkfs+0xcc1>
c0008236:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823c:	89 d8                	mov    eax,ebx
c000823e:	5b                   	pop    ebx
c000823f:	5e                   	pop    esi
c0008240:	5f                   	pop    edi
c0008241:	5d                   	pop    ebp
c0008242:	c3                   	ret    

c0008243 <ff_memalloc>:
c0008243:	83 ec 0c             	sub    esp,0xc
c0008246:	83 ec 0c             	sub    esp,0xc
c0008249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824d:	e8 9f 3d 00 00       	call   c000bff1 <malloc>
c0008252:	83 c4 10             	add    esp,0x10
c0008255:	83 c4 0c             	add    esp,0xc
c0008258:	c3                   	ret    

c0008259 <ff_memfree>:
c0008259:	83 ec 0c             	sub    esp,0xc
c000825c:	83 ec 0c             	sub    esp,0xc
c000825f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008263:	e8 99 3d 00 00       	call   c000c001 <free>
c0008268:	83 c4 10             	add    esp,0x10
c000826b:	90                   	nop
c000826c:	83 c4 0c             	add    esp,0xc
c000826f:	c3                   	ret    

c0008270 <ff_uni2oem>:
c0008270:	83 ec 14             	sub    esp,0x14
c0008273:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008277:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008282:	c7 44 24 0c c0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208c0
c000828a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000828f:	77 0b                	ja     c000829c <ff_uni2oem+0x2c>
c0008291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008295:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829a:	eb 61                	jmp    c00082fd <ff_uni2oem+0x8d>
c000829c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a4:	77 57                	ja     c00082fd <ff_uni2oem+0x8d>
c00082a6:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ac:	75 4f                	jne    c00082fd <ff_uni2oem+0x8d>
c00082ae:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b5:	eb 0b                	jmp    c00082c2 <ff_uni2oem+0x52>
c00082b7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bc:	40                   	inc    eax
c00082bd:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c2:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c8:	77 21                	ja     c00082eb <ff_uni2oem+0x7b>
c00082ca:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082cf:	25 ff ff 00 00       	and    eax,0xffff
c00082d4:	8d 14 00             	lea    edx,[eax+eax*1]
c00082d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082db:	01 d0                	add    eax,edx
c00082dd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082e0:	25 ff ff 00 00       	and    eax,0xffff
c00082e5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e9:	75 cc                	jne    c00082b7 <ff_uni2oem+0x47>
c00082eb:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f0:	83 e8 80             	sub    eax,0xffffff80
c00082f3:	25 ff 00 00 00       	and    eax,0xff
c00082f8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008302:	83 c4 14             	add    esp,0x14
c0008305:	c3                   	ret    

c0008306 <ff_oem2uni>:
c0008306:	83 ec 18             	sub    esp,0x18
c0008309:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000830d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008311:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008316:	66 89 04 24          	mov    WORD PTR [esp],ax
c000831a:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008321:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c0008329:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832f:	77 0b                	ja     c000833c <ff_oem2uni+0x36>
c0008331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008335:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000833a:	eb 30                	jmp    c000836c <ff_oem2uni+0x66>
c000833c:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008342:	75 28                	jne    c000836c <ff_oem2uni+0x66>
c0008344:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000834b:	77 1f                	ja     c000836c <ff_oem2uni+0x66>
c000834d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008351:	25 ff ff 00 00       	and    eax,0xffff
c0008356:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000835b:	8d 14 00             	lea    edx,[eax+eax*1]
c000835e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008362:	01 d0                	add    eax,edx
c0008364:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008367:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008371:	83 c4 18             	add    esp,0x18
c0008374:	c3                   	ret    

c0008375 <ff_wtoupper>:
c0008375:	83 ec 10             	sub    esp,0x10
c0008378:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008380:	0f 87 62 01 00 00    	ja     c00084e8 <ff_wtoupper+0x173>
c0008386:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000838a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000838f:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008396:	77 07                	ja     c000839f <ff_wtoupper+0x2a>
c0008398:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c000839d:	eb 05                	jmp    c00083a4 <ff_wtoupper+0x2f>
c000839f:	b8 00 06 02 c0       	mov    eax,0xc0020600
c00083a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ac:	8d 50 02             	lea    edx,[eax+0x2]
c00083af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083b3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083b6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083bb:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083c1:	0f 84 13 01 00 00    	je     c00084da <ff_wtoupper+0x165>
c00083c7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cc:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083d1:	0f 82 03 01 00 00    	jb     c00084da <ff_wtoupper+0x165>
c00083d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083db:	8d 50 02             	lea    edx,[eax+0x2]
c00083de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083ea:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ef:	66 c1 e8 08          	shr    ax,0x8
c00083f3:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f8:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083ff:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008404:	31 d2                	xor    edx,edx
c0008406:	66 89 c2             	mov    dx,ax
c0008409:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000840d:	31 c9                	xor    ecx,ecx
c000840f:	66 89 c1             	mov    cx,ax
c0008412:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008417:	25 ff ff 00 00       	and    eax,0xffff
c000841c:	01 c8                	add    eax,ecx
c000841e:	39 c2                	cmp    edx,eax
c0008420:	0f 8d 92 00 00 00    	jge    c00084b8 <ff_wtoupper+0x143>
c0008426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000842a:	25 ff ff 00 00       	and    eax,0xffff
c000842f:	83 f8 08             	cmp    eax,0x8
c0008432:	0f 87 a1 00 00 00    	ja     c00084d9 <ff_wtoupper+0x164>
c0008438:	8b 04 85 c0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa40]
c000843f:	ff e0                	jmp    eax
c0008441:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008446:	31 d2                	xor    edx,edx
c0008448:	66 89 c2             	mov    dx,ax
c000844b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000844f:	25 ff ff 00 00       	and    eax,0xffff
c0008454:	29 c2                	sub    edx,eax
c0008456:	89 d0                	mov    eax,edx
c0008458:	8d 14 00             	lea    edx,[eax+eax*1]
c000845b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000845f:	01 d0                	add    eax,edx
c0008461:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008464:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008469:	eb 4b                	jmp    c00084b6 <ff_wtoupper+0x141>
c000846b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008470:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008474:	83 e0 01             	and    eax,0x1
c0008477:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000847c:	eb 38                	jmp    c00084b6 <ff_wtoupper+0x141>
c000847e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008484:	eb 30                	jmp    c00084b6 <ff_wtoupper+0x141>
c0008486:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000848c:	eb 28                	jmp    c00084b6 <ff_wtoupper+0x141>
c000848e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008494:	eb 20                	jmp    c00084b6 <ff_wtoupper+0x141>
c0008496:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000849c:	eb 18                	jmp    c00084b6 <ff_wtoupper+0x141>
c000849e:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084a4:	eb 10                	jmp    c00084b6 <ff_wtoupper+0x141>
c00084a6:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084ac:	eb 08                	jmp    c00084b6 <ff_wtoupper+0x141>
c00084ae:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084b5:	90                   	nop
c00084b6:	eb 21                	jmp    c00084d9 <ff_wtoupper+0x164>
c00084b8:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084be:	0f 85 e4 fe ff ff    	jne    c00083a8 <ff_wtoupper+0x33>
c00084c4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084c9:	25 ff ff 00 00       	and    eax,0xffff
c00084ce:	01 c0                	add    eax,eax
c00084d0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084d4:	e9 cf fe ff ff       	jmp    c00083a8 <ff_wtoupper+0x33>
c00084d9:	90                   	nop
c00084da:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084df:	25 ff ff 00 00       	and    eax,0xffff
c00084e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084ec:	83 c4 10             	add    esp,0x10
c00084ef:	c3                   	ret    

c00084f0 <is_bad_src_ratio>:
c00084f0:	83 ec 0c             	sub    esp,0xc
c00084f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00084fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008502:	dd 04 24             	fld    QWORD PTR [esp]
c0008505:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000850b:	de d9                	fcompp 
c000850d:	df e0                	fnstsw ax
c000850f:	f6 c4 45             	test   ah,0x45
c0008512:	74 10                	je     c0008524 <is_bad_src_ratio+0x34>
c0008514:	dd 04 24             	fld    QWORD PTR [esp]
c0008517:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000851d:	df e0                	fnstsw ax
c000851f:	f6 c4 45             	test   ah,0x45
c0008522:	75 07                	jne    c000852b <is_bad_src_ratio+0x3b>
c0008524:	b8 01 00 00 00       	mov    eax,0x1
c0008529:	eb 05                	jmp    c0008530 <is_bad_src_ratio+0x40>
c000852b:	b8 00 00 00 00       	mov    eax,0x0
c0008530:	83 c4 0c             	add    esp,0xc
c0008533:	c3                   	ret    

c0008534 <psrc_set_converter>:
c0008534:	56                   	push   esi
c0008535:	89 d6                	mov    esi,edx
c0008537:	53                   	push   ebx
c0008538:	89 c3                	mov    ebx,eax
c000853a:	83 ec 0c             	sub    esp,0xc
c000853d:	52                   	push   edx
c000853e:	50                   	push   eax
c000853f:	e8 21 24 00 00       	call   c000a965 <sinc_set_converter>
c0008544:	83 c4 10             	add    esp,0x10
c0008547:	85 c0                	test   eax,eax
c0008549:	74 25                	je     c0008570 <psrc_set_converter+0x3c>
c000854b:	50                   	push   eax
c000854c:	50                   	push   eax
c000854d:	56                   	push   esi
c000854e:	53                   	push   ebx
c000854f:	e8 1c 28 00 00       	call   c000ad70 <zoh_set_converter>
c0008554:	83 c4 10             	add    esp,0x10
c0008557:	85 c0                	test   eax,eax
c0008559:	74 15                	je     c0008570 <psrc_set_converter+0x3c>
c000855b:	51                   	push   ecx
c000855c:	51                   	push   ecx
c000855d:	56                   	push   esi
c000855e:	53                   	push   ebx
c000855f:	e8 0c 0a 00 00       	call   c0008f70 <linear_set_converter>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	ba 0a 00 00 00       	mov    edx,0xa
c000856c:	85 c0                	test   eax,eax
c000856e:	75 02                	jne    c0008572 <psrc_set_converter+0x3e>
c0008570:	31 d2                	xor    edx,edx
c0008572:	89 d0                	mov    eax,edx
c0008574:	5a                   	pop    edx
c0008575:	5b                   	pop    ebx
c0008576:	5e                   	pop    esi
c0008577:	c3                   	ret    

c0008578 <src_delete>:
c0008578:	53                   	push   ebx
c0008579:	83 ec 08             	sub    esp,0x8
c000857c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008580:	85 db                	test   ebx,ebx
c0008582:	74 29                	je     c00085ad <src_delete+0x35>
c0008584:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008587:	85 c0                	test   eax,eax
c0008589:	74 0c                	je     c0008597 <src_delete+0x1f>
c000858b:	83 ec 0c             	sub    esp,0xc
c000858e:	50                   	push   eax
c000858f:	e8 6d 3a 00 00       	call   c000c001 <free>
c0008594:	83 c4 10             	add    esp,0x10
c0008597:	50                   	push   eax
c0008598:	6a 3c                	push   0x3c
c000859a:	6a 00                	push   0x0
c000859c:	53                   	push   ebx
c000859d:	e8 30 81 ff ff       	call   c00006d2 <memset>
c00085a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085a5:	e8 57 3a 00 00       	call   c000c001 <free>
c00085aa:	83 c4 10             	add    esp,0x10
c00085ad:	83 c4 08             	add    esp,0x8
c00085b0:	31 c0                	xor    eax,eax
c00085b2:	5b                   	pop    ebx
c00085b3:	c3                   	ret    

c00085b4 <src_process>:
c00085b4:	56                   	push   esi
c00085b5:	53                   	push   ebx
c00085b6:	53                   	push   ebx
c00085b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085bf:	85 f6                	test   esi,esi
c00085c1:	0f 84 e2 00 00 00    	je     c00086a9 <src_process+0xf5>
c00085c7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085cb:	0f 84 df 00 00 00    	je     c00086b0 <src_process+0xfc>
c00085d1:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085d5:	0f 84 d5 00 00 00    	je     c00086b0 <src_process+0xfc>
c00085db:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085e2:	0f 85 cf 00 00 00    	jne    c00086b7 <src_process+0x103>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	0f 84 ce 00 00 00    	je     c00086be <src_process+0x10a>
c00085f0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085f3:	0f 84 cc 00 00 00    	je     c00086c5 <src_process+0x111>
c00085f9:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085fd:	0f 84 c2 00 00 00    	je     c00086c5 <src_process+0x111>
c0008603:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008606:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008609:	e8 e2 fe ff ff       	call   c00084f0 <is_bad_src_ratio>
c000860e:	5a                   	pop    edx
c000860f:	85 c0                	test   eax,eax
c0008611:	59                   	pop    ecx
c0008612:	0f 85 b4 00 00 00    	jne    c00086cc <src_process+0x118>
c0008618:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000861c:	79 07                	jns    c0008625 <src_process+0x71>
c000861e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008625:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008629:	79 07                	jns    c0008632 <src_process+0x7e>
c000862b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008634:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008637:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000863a:	39 ca                	cmp    edx,ecx
c000863c:	73 0b                	jae    c0008649 <src_process+0x95>
c000863e:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008642:	8d 04 82             	lea    eax,[edx+eax*4]
c0008645:	39 c1                	cmp    ecx,eax
c0008647:	eb 09                	jmp    c0008652 <src_process+0x9e>
c0008649:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000864d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008650:	39 c2                	cmp    edx,eax
c0008652:	72 7f                	jb     c00086d3 <src_process+0x11f>
c0008654:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000865b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008662:	d9 05 a0 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea0
c0008668:	dc 1e                	fcomp  QWORD PTR [esi]
c000866a:	df e0                	fnstsw ax
c000866c:	9e                   	sahf   
c000866d:	76 05                	jbe    c0008674 <src_process+0xc0>
c000866f:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008672:	dd 1e                	fstp   QWORD PTR [esi]
c0008674:	dd 06                	fld    QWORD PTR [esi]
c0008676:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008679:	83 ec 10             	sub    esp,0x10
c000867c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000867f:	e8 bc 70 01 00       	call   c001f740 <fabs>
c0008684:	83 c4 10             	add    esp,0x10
c0008687:	dd 05 90 0e 02 c0    	fld    QWORD PTR ds:0xc0020e90
c000868d:	de d9                	fcompp 
c000868f:	df e0                	fnstsw ax
c0008691:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008695:	9e                   	sahf   
c0008696:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000869a:	76 05                	jbe    c00086a1 <src_process+0xed>
c000869c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000869f:	eb 03                	jmp    c00086a4 <src_process+0xf0>
c00086a1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086a4:	59                   	pop    ecx
c00086a5:	5b                   	pop    ebx
c00086a6:	5e                   	pop    esi
c00086a7:	ff e0                	jmp    eax
c00086a9:	b8 02 00 00 00       	mov    eax,0x2
c00086ae:	eb 28                	jmp    c00086d8 <src_process+0x124>
c00086b0:	b8 07 00 00 00       	mov    eax,0x7
c00086b5:	eb 21                	jmp    c00086d8 <src_process+0x124>
c00086b7:	b8 12 00 00 00       	mov    eax,0x12
c00086bc:	eb 1a                	jmp    c00086d8 <src_process+0x124>
c00086be:	b8 03 00 00 00       	mov    eax,0x3
c00086c3:	eb 13                	jmp    c00086d8 <src_process+0x124>
c00086c5:	b8 04 00 00 00       	mov    eax,0x4
c00086ca:	eb 0c                	jmp    c00086d8 <src_process+0x124>
c00086cc:	b8 06 00 00 00       	mov    eax,0x6
c00086d1:	eb 05                	jmp    c00086d8 <src_process+0x124>
c00086d3:	b8 10 00 00 00       	mov    eax,0x10
c00086d8:	5a                   	pop    edx
c00086d9:	5b                   	pop    ebx
c00086da:	5e                   	pop    esi
c00086db:	c3                   	ret    

c00086dc <src_callback_read>:
c00086dc:	55                   	push   ebp
c00086dd:	57                   	push   edi
c00086de:	56                   	push   esi
c00086df:	53                   	push   ebx
c00086e0:	83 ec 4c             	sub    esp,0x4c
c00086e3:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086e7:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086eb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086ef:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086f3:	85 ff                	test   edi,edi
c00086f5:	0f 8e 36 01 00 00    	jle    c0008831 <src_callback_read+0x155>
c00086fb:	85 db                	test   ebx,ebx
c00086fd:	0f 84 2e 01 00 00    	je     c0008831 <src_callback_read+0x155>
c0008703:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000870a:	74 0c                	je     c0008718 <src_callback_read+0x3c>
c000870c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008713:	e9 19 01 00 00       	jmp    c0008831 <src_callback_read+0x155>
c0008718:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000871c:	75 0c                	jne    c000872a <src_callback_read+0x4e>
c000871e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008725:	e9 07 01 00 00       	jmp    c0008831 <src_callback_read+0x155>
c000872a:	51                   	push   ecx
c000872b:	6a 24                	push   0x24
c000872d:	6a 00                	push   0x0
c000872f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008733:	50                   	push   eax
c0008734:	e8 99 7f ff ff       	call   c00006d2 <memset>
c0008739:	5e                   	pop    esi
c000873a:	5d                   	pop    ebp
c000873b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000873f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008743:	e8 a8 fd ff ff       	call   c00084f0 <is_bad_src_ratio>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	74 0c                	je     c000875b <src_callback_read+0x7f>
c000874f:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008756:	e9 d6 00 00 00       	jmp    c0008831 <src_callback_read+0x155>
c000875b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000875f:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008763:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008767:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000876b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000876e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008772:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008775:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008779:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000877d:	31 f6                	xor    esi,esi
c000877f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008784:	75 30                	jne    c00087b6 <src_callback_read+0xda>
c0008786:	8d 44 24 14          	lea    eax,[esp+0x14]
c000878a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000878e:	52                   	push   edx
c000878f:	52                   	push   edx
c0008790:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008794:	50                   	push   eax
c0008795:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008798:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000879b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000879f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00087a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00087a7:	83 c4 10             	add    esp,0x10
c00087aa:	85 c0                	test   eax,eax
c00087ac:	75 08                	jne    c00087b6 <src_callback_read+0xda>
c00087ae:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087b6:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087bd:	50                   	push   eax
c00087be:	50                   	push   eax
c00087bf:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087c3:	50                   	push   eax
c00087c4:	53                   	push   ebx
c00087c5:	e8 ea fd ff ff       	call   c00085b4 <src_process>
c00087ca:	83 c4 10             	add    esp,0x10
c00087cd:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087d4:	85 c0                	test   eax,eax
c00087d6:	75 42                	jne    c000881a <src_callback_read+0x13e>
c00087d8:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087dc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087df:	89 e9                	mov    ecx,ebp
c00087e1:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087e5:	0f af ca             	imul   ecx,edx
c00087e8:	c1 e1 02             	shl    ecx,0x2
c00087eb:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087f3:	0f af d1             	imul   edx,ecx
c00087f6:	c1 e2 02             	shl    edx,0x2
c00087f9:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087fd:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008801:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008804:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008809:	75 04                	jne    c000880f <src_callback_read+0x133>
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 0b                	je     c000881a <src_callback_read+0x13e>
c000880f:	39 d7                	cmp    edi,edx
c0008811:	7e 09                	jle    c000881c <src_callback_read+0x140>
c0008813:	89 d6                	mov    esi,edx
c0008815:	e9 65 ff ff ff       	jmp    c000877f <src_callback_read+0xa3>
c000881a:	89 f2                	mov    edx,esi
c000881c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008820:	85 c0                	test   eax,eax
c0008822:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008825:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008829:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000882c:	74 05                	je     c0008833 <src_callback_read+0x157>
c000882e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008831:	31 d2                	xor    edx,edx
c0008833:	83 c4 4c             	add    esp,0x4c
c0008836:	89 d0                	mov    eax,edx
c0008838:	5b                   	pop    ebx
c0008839:	5e                   	pop    esi
c000883a:	5f                   	pop    edi
c000883b:	5d                   	pop    ebp
c000883c:	c3                   	ret    

c000883d <src_set_ratio>:
c000883d:	53                   	push   ebx
c000883e:	b8 02 00 00 00       	mov    eax,0x2
c0008843:	83 ec 08             	sub    esp,0x8
c0008846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000884a:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000884e:	85 db                	test   ebx,ebx
c0008850:	74 33                	je     c0008885 <src_set_ratio+0x48>
c0008852:	b8 07 00 00 00       	mov    eax,0x7
c0008857:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000885b:	74 2c                	je     c0008889 <src_set_ratio+0x4c>
c000885d:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008861:	74 2a                	je     c000888d <src_set_ratio+0x50>
c0008863:	50                   	push   eax
c0008864:	50                   	push   eax
c0008865:	dd 14 24             	fst    QWORD PTR [esp]
c0008868:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000886c:	e8 7f fc ff ff       	call   c00084f0 <is_bad_src_ratio>
c0008871:	5a                   	pop    edx
c0008872:	59                   	pop    ecx
c0008873:	85 c0                	test   eax,eax
c0008875:	75 07                	jne    c000887e <src_set_ratio+0x41>
c0008877:	dd 04 24             	fld    QWORD PTR [esp]
c000887a:	dd 1b                	fstp   QWORD PTR [ebx]
c000887c:	eb 11                	jmp    c000888f <src_set_ratio+0x52>
c000887e:	b8 06 00 00 00       	mov    eax,0x6
c0008883:	eb 0a                	jmp    c000888f <src_set_ratio+0x52>
c0008885:	dd d8                	fstp   st(0)
c0008887:	eb 06                	jmp    c000888f <src_set_ratio+0x52>
c0008889:	dd d8                	fstp   st(0)
c000888b:	eb 02                	jmp    c000888f <src_set_ratio+0x52>
c000888d:	dd d8                	fstp   st(0)
c000888f:	83 c4 08             	add    esp,0x8
c0008892:	5b                   	pop    ebx
c0008893:	c3                   	ret    

c0008894 <src_get_channels>:
c0008894:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008898:	b8 02 00 00 00       	mov    eax,0x2
c000889d:	85 d2                	test   edx,edx
c000889f:	74 14                	je     c00088b5 <src_get_channels+0x21>
c00088a1:	b8 07 00 00 00       	mov    eax,0x7
c00088a6:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088aa:	74 09                	je     c00088b5 <src_get_channels+0x21>
c00088ac:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088b0:	74 03                	je     c00088b5 <src_get_channels+0x21>
c00088b2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088b5:	c3                   	ret    

c00088b6 <src_reset>:
c00088b6:	53                   	push   ebx
c00088b7:	b8 02 00 00 00       	mov    eax,0x2
c00088bc:	83 ec 08             	sub    esp,0x8
c00088bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c3:	85 db                	test   ebx,ebx
c00088c5:	74 2e                	je     c00088f5 <src_reset+0x3f>
c00088c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088ca:	85 c0                	test   eax,eax
c00088cc:	74 09                	je     c00088d7 <src_reset+0x21>
c00088ce:	83 ec 0c             	sub    esp,0xc
c00088d1:	53                   	push   ebx
c00088d2:	ff d0                	call   eax
c00088d4:	83 c4 10             	add    esp,0x10
c00088d7:	d9 ee                	fldz   
c00088d9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088e0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088e7:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088ea:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088f1:	31 c0                	xor    eax,eax
c00088f3:	dd 1b                	fstp   QWORD PTR [ebx]
c00088f5:	83 c4 08             	add    esp,0x8
c00088f8:	5b                   	pop    ebx
c00088f9:	c3                   	ret    

c00088fa <src_new>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	53                   	push   ebx
c00088fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008901:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008905:	85 f6                	test   esi,esi
c0008907:	74 73                	je     c000897c <src_new+0x82>
c0008909:	85 ff                	test   edi,edi
c000890b:	7f 08                	jg     c0008915 <src_new+0x1b>
c000890d:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008913:	eb 1e                	jmp    c0008933 <src_new+0x39>
c0008915:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000891b:	50                   	push   eax
c000891c:	50                   	push   eax
c000891d:	6a 3c                	push   0x3c
c000891f:	6a 01                	push   0x1
c0008921:	e8 fb 36 00 00       	call   c000c021 <calloc>
c0008926:	83 c4 10             	add    esp,0x10
c0008929:	89 c3                	mov    ebx,eax
c000892b:	85 c0                	test   eax,eax
c000892d:	75 10                	jne    c000893f <src_new+0x45>
c000892f:	85 f6                	test   esi,esi
c0008931:	75 04                	jne    c0008937 <src_new+0x3d>
c0008933:	31 db                	xor    ebx,ebx
c0008935:	eb 4b                	jmp    c0008982 <src_new+0x88>
c0008937:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000893d:	eb 43                	jmp    c0008982 <src_new+0x88>
c000893f:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008942:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008949:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000894d:	e8 e2 fb ff ff       	call   c0008534 <psrc_set_converter>
c0008952:	85 c0                	test   eax,eax
c0008954:	74 18                	je     c000896e <src_new+0x74>
c0008956:	85 f6                	test   esi,esi
c0008958:	74 06                	je     c0008960 <src_new+0x66>
c000895a:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008960:	83 ec 0c             	sub    esp,0xc
c0008963:	53                   	push   ebx
c0008964:	31 db                	xor    ebx,ebx
c0008966:	e8 96 36 00 00       	call   c000c001 <free>
c000896b:	83 c4 10             	add    esp,0x10
c000896e:	83 ec 0c             	sub    esp,0xc
c0008971:	53                   	push   ebx
c0008972:	e8 3f ff ff ff       	call   c00088b6 <src_reset>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	eb 06                	jmp    c0008982 <src_new+0x88>
c000897c:	85 ff                	test   edi,edi
c000897e:	7f 9b                	jg     c000891b <src_new+0x21>
c0008980:	eb b1                	jmp    c0008933 <src_new+0x39>
c0008982:	89 d8                	mov    eax,ebx
c0008984:	5b                   	pop    ebx
c0008985:	5e                   	pop    esi
c0008986:	5f                   	pop    edi
c0008987:	c3                   	ret    

c0008988 <src_callback_new>:
c0008988:	56                   	push   esi
c0008989:	53                   	push   ebx
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000898f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008993:	85 f6                	test   esi,esi
c0008995:	75 0e                	jne    c00089a5 <src_callback_new+0x1d>
c0008997:	31 db                	xor    ebx,ebx
c0008999:	85 c0                	test   eax,eax
c000899b:	74 47                	je     c00089e4 <src_callback_new+0x5c>
c000899d:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089a3:	eb 3f                	jmp    c00089e4 <src_callback_new+0x5c>
c00089a5:	85 c0                	test   eax,eax
c00089a7:	74 06                	je     c00089af <src_callback_new+0x27>
c00089a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089af:	51                   	push   ecx
c00089b0:	50                   	push   eax
c00089b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089b9:	e8 3c ff ff ff       	call   c00088fa <src_new>
c00089be:	83 c4 10             	add    esp,0x10
c00089c1:	89 c3                	mov    ebx,eax
c00089c3:	85 c0                	test   eax,eax
c00089c5:	74 1d                	je     c00089e4 <src_callback_new+0x5c>
c00089c7:	83 ec 0c             	sub    esp,0xc
c00089ca:	50                   	push   eax
c00089cb:	e8 e6 fe ff ff       	call   c00088b6 <src_reset>
c00089d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089d4:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089db:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089de:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089e1:	83 c4 10             	add    esp,0x10
c00089e4:	5a                   	pop    edx
c00089e5:	89 d8                	mov    eax,ebx
c00089e7:	5b                   	pop    ebx
c00089e8:	5e                   	pop    esi
c00089e9:	c3                   	ret    

c00089ea <src_get_name>:
c00089ea:	53                   	push   ebx
c00089eb:	83 ec 14             	sub    esp,0x14
c00089ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089f2:	53                   	push   ebx
c00089f3:	e8 47 1f 00 00       	call   c000a93f <sinc_get_name>
c00089f8:	83 c4 10             	add    esp,0x10
c00089fb:	85 c0                	test   eax,eax
c00089fd:	75 1d                	jne    c0008a1c <src_get_name+0x32>
c00089ff:	83 ec 0c             	sub    esp,0xc
c0008a02:	53                   	push   ebx
c0008a03:	e8 4a 23 00 00       	call   c000ad52 <zoh_get_name>
c0008a08:	83 c4 10             	add    esp,0x10
c0008a0b:	85 c0                	test   eax,eax
c0008a0d:	75 0d                	jne    c0008a1c <src_get_name+0x32>
c0008a0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a13:	83 c4 08             	add    esp,0x8
c0008a16:	5b                   	pop    ebx
c0008a17:	e9 36 05 00 00       	jmp    c0008f52 <linear_get_name>
c0008a1c:	83 c4 08             	add    esp,0x8
c0008a1f:	5b                   	pop    ebx
c0008a20:	c3                   	ret    

c0008a21 <src_get_description>:
c0008a21:	53                   	push   ebx
c0008a22:	83 ec 14             	sub    esp,0x14
c0008a25:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a29:	53                   	push   ebx
c0008a2a:	e8 23 1f 00 00       	call   c000a952 <sinc_get_description>
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	85 c0                	test   eax,eax
c0008a34:	75 1d                	jne    c0008a53 <src_get_description+0x32>
c0008a36:	83 ec 0c             	sub    esp,0xc
c0008a39:	53                   	push   ebx
c0008a3a:	e8 22 23 00 00       	call   c000ad61 <zoh_get_description>
c0008a3f:	83 c4 10             	add    esp,0x10
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 0d                	jne    c0008a53 <src_get_description+0x32>
c0008a46:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a4a:	83 c4 08             	add    esp,0x8
c0008a4d:	5b                   	pop    ebx
c0008a4e:	e9 0e 05 00 00       	jmp    c0008f61 <linear_get_description>
c0008a53:	83 c4 08             	add    esp,0x8
c0008a56:	5b                   	pop    ebx
c0008a57:	c3                   	ret    

c0008a58 <src_get_version>:
c0008a58:	b8 c0 09 02 c0       	mov    eax,0xc00209c0
c0008a5d:	c3                   	ret    

c0008a5e <src_is_valid_ratio>:
c0008a5e:	50                   	push   eax
c0008a5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a67:	e8 84 fa ff ff       	call   c00084f0 <is_bad_src_ratio>
c0008a6c:	85 c0                	test   eax,eax
c0008a6e:	0f 94 c0             	sete   al
c0008a71:	0f b6 c0             	movzx  eax,al
c0008a74:	83 c4 0c             	add    esp,0xc
c0008a77:	c3                   	ret    

c0008a78 <src_error>:
c0008a78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a7c:	31 c0                	xor    eax,eax
c0008a7e:	85 d2                	test   edx,edx
c0008a80:	74 03                	je     c0008a85 <src_error+0xd>
c0008a82:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a85:	c3                   	ret    

c0008a86 <src_strerror>:
c0008a86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a8a:	31 c0                	xor    eax,eax
c0008a8c:	83 fa 17             	cmp    edx,0x17
c0008a8f:	77 07                	ja     c0008a98 <src_strerror+0x12>
c0008a91:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c0008a98:	c3                   	ret    

c0008a99 <src_simple>:
c0008a99:	56                   	push   esi
c0008a9a:	53                   	push   ebx
c0008a9b:	83 ec 18             	sub    esp,0x18
c0008a9e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008aa2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008aa6:	50                   	push   eax
c0008aa7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008aaf:	e8 46 fe ff ff       	call   c00088fa <src_new>
c0008ab4:	83 c4 10             	add    esp,0x10
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	75 06                	jne    c0008ac1 <src_simple+0x28>
c0008abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008abf:	eb 25                	jmp    c0008ae6 <src_simple+0x4d>
c0008ac1:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ac8:	89 c3                	mov    ebx,eax
c0008aca:	50                   	push   eax
c0008acb:	50                   	push   eax
c0008acc:	56                   	push   esi
c0008acd:	53                   	push   ebx
c0008ace:	e8 e1 fa ff ff       	call   c00085b4 <src_process>
c0008ad3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ad6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ada:	e8 99 fa ff ff       	call   c0008578 <src_delete>
c0008adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ae3:	83 c4 10             	add    esp,0x10
c0008ae6:	83 c4 14             	add    esp,0x14
c0008ae9:	5b                   	pop    ebx
c0008aea:	5e                   	pop    esi
c0008aeb:	c3                   	ret    

c0008aec <src_short_to_float_array>:
c0008aec:	83 ec 0c             	sub    esp,0xc
c0008aef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008af3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008af7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008afb:	85 c0                	test   eax,eax
c0008afd:	74 0f                	je     c0008b0e <src_short_to_float_array+0x22>
c0008aff:	48                   	dec    eax
c0008b00:	d9 05 a4 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea4
c0008b06:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008b09:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b0c:	eb ed                	jmp    c0008afb <src_short_to_float_array+0xf>
c0008b0e:	83 c4 0c             	add    esp,0xc
c0008b11:	c3                   	ret    

c0008b12 <src_float_to_short_array>:
c0008b12:	56                   	push   esi
c0008b13:	53                   	push   ebx
c0008b14:	52                   	push   edx
c0008b15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b1d:	85 db                	test   ebx,ebx
c0008b1f:	74 51                	je     c0008b72 <src_float_to_short_array+0x60>
c0008b21:	4b                   	dec    ebx
c0008b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b26:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008b2c:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b2f:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008b35:	df e0                	fnstsw ax
c0008b37:	9e                   	sahf   
c0008b38:	72 0a                	jb     c0008b44 <src_float_to_short_array+0x32>
c0008b3a:	dd d8                	fstp   st(0)
c0008b3c:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b42:	eb d9                	jmp    c0008b1d <src_float_to_short_array+0xb>
c0008b44:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008b4a:	d8 d9                	fcomp  st(1)
c0008b4c:	df e0                	fnstsw ax
c0008b4e:	9e                   	sahf   
c0008b4f:	72 0a                	jb     c0008b5b <src_float_to_short_array+0x49>
c0008b51:	dd d8                	fstp   st(0)
c0008b53:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b59:	eb c2                	jmp    c0008b1d <src_float_to_short_array+0xb>
c0008b5b:	83 ec 10             	sub    esp,0x10
c0008b5e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b61:	e8 fa 6b 01 00       	call   c001f760 <lrint>
c0008b66:	83 c4 10             	add    esp,0x10
c0008b69:	c1 f8 10             	sar    eax,0x10
c0008b6c:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b70:	eb ab                	jmp    c0008b1d <src_float_to_short_array+0xb>
c0008b72:	58                   	pop    eax
c0008b73:	5b                   	pop    ebx
c0008b74:	5e                   	pop    esi
c0008b75:	c3                   	ret    

c0008b76 <src_int_to_float_array>:
c0008b76:	83 ec 0c             	sub    esp,0xc
c0008b79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b7d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b85:	85 c0                	test   eax,eax
c0008b87:	74 0f                	je     c0008b98 <src_int_to_float_array+0x22>
c0008b89:	48                   	dec    eax
c0008b8a:	d9 05 b0 0e 02 c0    	fld    DWORD PTR ds:0xc0020eb0
c0008b90:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b93:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b96:	eb ed                	jmp    c0008b85 <src_int_to_float_array+0xf>
c0008b98:	83 c4 0c             	add    esp,0xc
c0008b9b:	c3                   	ret    

c0008b9c <src_float_to_int_array>:
c0008b9c:	56                   	push   esi
c0008b9d:	53                   	push   ebx
c0008b9e:	52                   	push   edx
c0008b9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ba3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008ba7:	85 db                	test   ebx,ebx
c0008ba9:	74 4f                	je     c0008bfa <src_float_to_int_array+0x5e>
c0008bab:	4b                   	dec    ebx
c0008bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb0:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008bb6:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008bb9:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008bbf:	df e0                	fnstsw ax
c0008bc1:	9e                   	sahf   
c0008bc2:	72 0b                	jb     c0008bcf <src_float_to_int_array+0x33>
c0008bc4:	dd d8                	fstp   st(0)
c0008bc6:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bcd:	eb d8                	jmp    c0008ba7 <src_float_to_int_array+0xb>
c0008bcf:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008bd5:	d8 d9                	fcomp  st(1)
c0008bd7:	df e0                	fnstsw ax
c0008bd9:	9e                   	sahf   
c0008bda:	72 0b                	jb     c0008be7 <src_float_to_int_array+0x4b>
c0008bdc:	dd d8                	fstp   st(0)
c0008bde:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008be5:	eb c0                	jmp    c0008ba7 <src_float_to_int_array+0xb>
c0008be7:	83 ec 10             	sub    esp,0x10
c0008bea:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bed:	e8 6e 6b 01 00       	call   c001f760 <lrint>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008bf8:	eb ad                	jmp    c0008ba7 <src_float_to_int_array+0xb>
c0008bfa:	58                   	pop    eax
c0008bfb:	5b                   	pop    ebx
c0008bfc:	5e                   	pop    esi
c0008bfd:	c3                   	ret    

c0008bfe <is_bad_src_ratio>:
c0008bfe:	83 ec 0c             	sub    esp,0xc
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008c0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c10:	dd 04 24             	fld    QWORD PTR [esp]
c0008c13:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008c19:	de d9                	fcompp 
c0008c1b:	df e0                	fnstsw ax
c0008c1d:	f6 c4 45             	test   ah,0x45
c0008c20:	74 10                	je     c0008c32 <is_bad_src_ratio+0x34>
c0008c22:	dd 04 24             	fld    QWORD PTR [esp]
c0008c25:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008c2b:	df e0                	fnstsw ax
c0008c2d:	f6 c4 45             	test   ah,0x45
c0008c30:	75 07                	jne    c0008c39 <is_bad_src_ratio+0x3b>
c0008c32:	b8 01 00 00 00       	mov    eax,0x1
c0008c37:	eb 05                	jmp    c0008c3e <is_bad_src_ratio+0x40>
c0008c39:	b8 00 00 00 00       	mov    eax,0x0
c0008c3e:	83 c4 0c             	add    esp,0xc
c0008c41:	c3                   	ret    

c0008c42 <fmod_one>:
c0008c42:	83 ec 2c             	sub    esp,0x2c
c0008c45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c55:	83 ec 08             	sub    esp,0x8
c0008c58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	e8 fb 6a 01 00       	call   c001f760 <lrint>
c0008c65:	83 c4 10             	add    esp,0x10
c0008c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c6c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c70:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c74:	de e1                	fsubrp st(1),st
c0008c76:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c7a:	d9 ee                	fldz   
c0008c7c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c80:	df e0                	fnstsw ax
c0008c82:	f6 c4 45             	test   ah,0x45
c0008c85:	75 0a                	jne    c0008c91 <fmod_one+0x4f>
c0008c87:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c8b:	d9 e8                	fld1   
c0008c8d:	de c1                	faddp  st(1),st
c0008c8f:	eb 04                	jmp    c0008c95 <fmod_one+0x53>
c0008c91:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c95:	83 c4 2c             	add    esp,0x2c
c0008c98:	c3                   	ret    

c0008c99 <linear_vari_process>:
c0008c99:	55                   	push   ebp
c0008c9a:	57                   	push   edi
c0008c9b:	56                   	push   esi
c0008c9c:	53                   	push   ebx
c0008c9d:	83 ec 2c             	sub    esp,0x2c
c0008ca0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008ca4:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008ca8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008cb0:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008cb4:	0f 8e 5a 02 00 00    	jle    c0008f14 <linear_vari_process+0x27b>
c0008cba:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cbd:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cc5:	85 db                	test   ebx,ebx
c0008cc7:	0f 84 47 02 00 00    	je     c0008f14 <linear_vari_process+0x27b>
c0008ccd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cd0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cd4:	74 19                	je     c0008cef <linear_vari_process+0x56>
c0008cd6:	31 d2                	xor    edx,edx
c0008cd8:	39 c2                	cmp    edx,eax
c0008cda:	7d 0c                	jge    c0008ce8 <linear_vari_process+0x4f>
c0008cdc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cde:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008ce1:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ce5:	42                   	inc    edx
c0008ce6:	eb f0                	jmp    c0008cd8 <linear_vari_process+0x3f>
c0008ce8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cef:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cf2:	0f af d0             	imul   edx,eax
c0008cf5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008cf8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008cfc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008d03:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008d06:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008d0d:	dd 07                	fld    QWORD PTR [edi]
c0008d0f:	dd 14 24             	fst    QWORD PTR [esp]
c0008d12:	50                   	push   eax
c0008d13:	50                   	push   eax
c0008d14:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d17:	e8 e2 fe ff ff       	call   c0008bfe <is_bad_src_ratio>
c0008d1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d20:	5a                   	pop    edx
c0008d21:	59                   	pop    ecx
c0008d22:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d27:	0f 85 df 01 00 00    	jne    c0008f0c <linear_vari_process+0x273>
c0008d2d:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d30:	d9 e8                	fld1   
c0008d32:	d8 d1                	fcom   st(1)
c0008d34:	df e0                	fnstsw ax
c0008d36:	9e                   	sahf   
c0008d37:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d3b:	0f 86 97 00 00 00    	jbe    c0008dd8 <linear_vari_process+0x13f>
c0008d41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d44:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d47:	0f 8d 8b 00 00 00    	jge    c0008dd8 <linear_vari_process+0x13f>
c0008d4d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d51:	d8 c1                	fadd   st,st(1)
c0008d53:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d56:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d59:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d5c:	df e0                	fnstsw ax
c0008d5e:	9e                   	sahf   
c0008d5f:	73 77                	jae    c0008dd8 <linear_vari_process+0x13f>
c0008d61:	85 d2                	test   edx,edx
c0008d63:	7e 36                	jle    c0008d9b <linear_vari_process+0x102>
c0008d65:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d69:	dd 07                	fld    QWORD PTR [edi]
c0008d6b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d6e:	83 ec 10             	sub    esp,0x10
c0008d71:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d74:	e8 c7 69 01 00       	call   c001f740 <fabs>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008d82:	df e0                	fnstsw ax
c0008d84:	9e                   	sahf   
c0008d85:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d89:	76 10                	jbe    c0008d9b <linear_vari_process+0x102>
c0008d8b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d8e:	dc 27                	fsub   QWORD PTR [edi]
c0008d90:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d93:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d96:	dc 07                	fadd   QWORD PTR [edi]
c0008d98:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9b:	31 c0                	xor    eax,eax
c0008d9d:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008da0:	7e 1f                	jle    c0008dc1 <linear_vari_process+0x128>
c0008da2:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008da4:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008da7:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008dab:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008daf:	d8 e1                	fsub   st,st(1)
c0008db1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008db4:	40                   	inc    eax
c0008db5:	d8 ca                	fmul   st,st(2)
c0008db7:	de c1                	faddp  st(1),st
c0008db9:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dbc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008dbf:	eb dc                	jmp    c0008d9d <linear_vari_process+0x104>
c0008dc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dc5:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dc8:	de c1                	faddp  st(1),st
c0008dca:	e9 61 ff ff ff       	jmp    c0008d30 <linear_vari_process+0x97>
c0008dcf:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dd3:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dd6:	de c1                	faddp  st(1),st
c0008dd8:	83 ec 10             	sub    esp,0x10
c0008ddb:	dd 14 24             	fst    QWORD PTR [esp]
c0008dde:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de2:	e8 5b fe ff ff       	call   c0008c42 <fmod_one>
c0008de7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dea:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dee:	d8 e1                	fsub   st,st(1)
c0008df0:	d9 c9                	fxch   st(1)
c0008df2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008df6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008df9:	e8 62 69 01 00       	call   c001f760 <lrint>
c0008dfe:	83 c4 10             	add    esp,0x10
c0008e01:	0f af e8             	imul   ebp,eax
c0008e04:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008e07:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008e0a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e0e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e11:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e14:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e17:	0f 8d 95 00 00 00    	jge    c0008eb2 <linear_vari_process+0x219>
c0008e1d:	d9 c0                	fld    st(0)
c0008e1f:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e22:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e26:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e2a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e2e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e32:	de d9                	fcompp 
c0008e34:	df e0                	fnstsw ax
c0008e36:	9e                   	sahf   
c0008e37:	76 79                	jbe    c0008eb2 <linear_vari_process+0x219>
c0008e39:	85 ed                	test   ebp,ebp
c0008e3b:	7e 36                	jle    c0008e73 <linear_vari_process+0x1da>
c0008e3d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e41:	dd 07                	fld    QWORD PTR [edi]
c0008e43:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e46:	83 ec 10             	sub    esp,0x10
c0008e49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e4c:	e8 ef 68 01 00       	call   c001f740 <fabs>
c0008e51:	83 c4 10             	add    esp,0x10
c0008e54:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008e5a:	df e0                	fnstsw ax
c0008e5c:	9e                   	sahf   
c0008e5d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e61:	76 10                	jbe    c0008e73 <linear_vari_process+0x1da>
c0008e63:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e66:	dc 27                	fsub   QWORD PTR [edi]
c0008e68:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e6b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e6e:	dc 07                	fadd   QWORD PTR [edi]
c0008e70:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e73:	31 c0                	xor    eax,eax
c0008e75:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e78:	39 c2                	cmp    edx,eax
c0008e7a:	0f 8e 4f ff ff ff    	jle    c0008dcf <linear_vari_process+0x136>
c0008e80:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e82:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e85:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e89:	89 e9                	mov    ecx,ebp
c0008e8b:	29 d1                	sub    ecx,edx
c0008e8d:	01 c5                	add    ebp,eax
c0008e8f:	89 ca                	mov    edx,ecx
c0008e91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e95:	01 c2                	add    edx,eax
c0008e97:	40                   	inc    eax
c0008e98:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e9b:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e9e:	d8 e1                	fsub   st,st(1)
c0008ea0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008ea3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008ea6:	d8 ca                	fmul   st,st(2)
c0008ea8:	de c1                	faddp  st(1),st
c0008eaa:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008ead:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008eb0:	eb c3                	jmp    c0008e75 <linear_vari_process+0x1dc>
c0008eb2:	39 d1                	cmp    ecx,edx
c0008eb4:	7d 13                	jge    c0008ec9 <linear_vari_process+0x230>
c0008eb6:	89 d0                	mov    eax,edx
c0008eb8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ebb:	29 c8                	sub    eax,ecx
c0008ebd:	99                   	cdq    
c0008ebe:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ec5:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008ec9:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ecc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ecf:	85 c0                	test   eax,eax
c0008ed1:	7f 1b                	jg     c0008eee <linear_vari_process+0x255>
c0008ed3:	dd 04 24             	fld    QWORD PTR [esp]
c0008ed6:	dd 1f                	fstp   QWORD PTR [edi]
c0008ed8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008edb:	99                   	cdq    
c0008edc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008edf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ee2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ee5:	99                   	cdq    
c0008ee6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ee9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008eec:	eb 26                	jmp    c0008f14 <linear_vari_process+0x27b>
c0008eee:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ef1:	31 d2                	xor    edx,edx
c0008ef3:	29 c8                	sub    eax,ecx
c0008ef5:	c1 e0 02             	shl    eax,0x2
c0008ef8:	39 d1                	cmp    ecx,edx
c0008efa:	7e d7                	jle    c0008ed3 <linear_vari_process+0x23a>
c0008efc:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008efe:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008f02:	83 c0 04             	add    eax,0x4
c0008f05:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f09:	42                   	inc    edx
c0008f0a:	eb ec                	jmp    c0008ef8 <linear_vari_process+0x25f>
c0008f0c:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f18:	83 c4 2c             	add    esp,0x2c
c0008f1b:	5b                   	pop    ebx
c0008f1c:	5e                   	pop    esi
c0008f1d:	5f                   	pop    edi
c0008f1e:	5d                   	pop    ebp
c0008f1f:	c3                   	ret    

c0008f20 <linear_reset>:
c0008f20:	83 ec 0c             	sub    esp,0xc
c0008f23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f27:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f2a:	85 c0                	test   eax,eax
c0008f2c:	74 20                	je     c0008f4e <linear_reset+0x2e>
c0008f2e:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f31:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f3b:	51                   	push   ecx
c0008f3c:	c1 e2 02             	shl    edx,0x2
c0008f3f:	83 c0 1c             	add    eax,0x1c
c0008f42:	52                   	push   edx
c0008f43:	6a 00                	push   0x0
c0008f45:	50                   	push   eax
c0008f46:	e8 87 77 ff ff       	call   c00006d2 <memset>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	83 c4 0c             	add    esp,0xc
c0008f51:	c3                   	ret    

c0008f52 <linear_get_name>:
c0008f52:	31 c0                	xor    eax,eax
c0008f54:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f59:	75 05                	jne    c0008f60 <linear_get_name+0xe>
c0008f5b:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c0008f60:	c3                   	ret    

c0008f61 <linear_get_description>:
c0008f61:	31 c0                	xor    eax,eax
c0008f63:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f68:	75 05                	jne    c0008f6f <linear_get_description+0xe>
c0008f6a:	b8 c8 0e 02 c0       	mov    eax,0xc0020ec8
c0008f6f:	c3                   	ret    

c0008f70 <linear_set_converter>:
c0008f70:	53                   	push   ebx
c0008f71:	b8 0a 00 00 00       	mov    eax,0xa
c0008f76:	83 ec 08             	sub    esp,0x8
c0008f79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f7d:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f82:	75 6e                	jne    c0008ff2 <linear_set_converter+0x82>
c0008f84:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f87:	85 c0                	test   eax,eax
c0008f89:	74 13                	je     c0008f9e <linear_set_converter+0x2e>
c0008f8b:	83 ec 0c             	sub    esp,0xc
c0008f8e:	50                   	push   eax
c0008f8f:	e8 6d 30 00 00       	call   c000c001 <free>
c0008f94:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	50                   	push   eax
c0008f9f:	50                   	push   eax
c0008fa0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fa3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008faa:	50                   	push   eax
c0008fab:	6a 01                	push   0x1
c0008fad:	e8 6f 30 00 00       	call   c000c021 <calloc>
c0008fb2:	89 c2                	mov    edx,eax
c0008fb4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	b8 01 00 00 00       	mov    eax,0x1
c0008fbf:	85 d2                	test   edx,edx
c0008fc1:	74 2f                	je     c0008ff2 <linear_set_converter+0x82>
c0008fc3:	83 ec 0c             	sub    esp,0xc
c0008fc6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fc9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fcc:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fd2:	c7 43 24 99 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c99
c0008fd9:	c7 43 20 99 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c99
c0008fe0:	c7 43 28 20 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f20
c0008fe7:	53                   	push   ebx
c0008fe8:	e8 33 ff ff ff       	call   c0008f20 <linear_reset>
c0008fed:	83 c4 10             	add    esp,0x10
c0008ff0:	31 c0                	xor    eax,eax
c0008ff2:	83 c4 08             	add    esp,0x8
c0008ff5:	5b                   	pop    ebx
c0008ff6:	c3                   	ret    

c0008ff7 <is_bad_src_ratio>:
c0008ff7:	83 ec 0c             	sub    esp,0xc
c0008ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ffe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009001:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009005:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009009:	dd 04 24             	fld    QWORD PTR [esp]
c000900c:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0009012:	de d9                	fcompp 
c0009014:	df e0                	fnstsw ax
c0009016:	f6 c4 45             	test   ah,0x45
c0009019:	74 10                	je     c000902b <is_bad_src_ratio+0x34>
c000901b:	dd 04 24             	fld    QWORD PTR [esp]
c000901e:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0009024:	df e0                	fnstsw ax
c0009026:	f6 c4 45             	test   ah,0x45
c0009029:	75 07                	jne    c0009032 <is_bad_src_ratio+0x3b>
c000902b:	b8 01 00 00 00       	mov    eax,0x1
c0009030:	eb 05                	jmp    c0009037 <is_bad_src_ratio+0x40>
c0009032:	b8 00 00 00 00       	mov    eax,0x0
c0009037:	83 c4 0c             	add    esp,0xc
c000903a:	c3                   	ret    

c000903b <int_to_fp>:
c000903b:	c1 e0 0c             	shl    eax,0xc
c000903e:	c3                   	ret    

c000903f <fp_to_int>:
c000903f:	c1 f8 0c             	sar    eax,0xc
c0009042:	c3                   	ret    

c0009043 <fp_fraction_part>:
c0009043:	25 ff 0f 00 00       	and    eax,0xfff
c0009048:	c3                   	ret    

c0009049 <fp_to_double>:
c0009049:	83 ec 0c             	sub    esp,0xc
c000904c:	e8 f2 ff ff ff       	call   c0009043 <fp_fraction_part>
c0009051:	d9 05 88 10 02 c0    	fld    DWORD PTR ds:0xc0021088
c0009057:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000905b:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c000905f:	83 c4 0c             	add    esp,0xc
c0009062:	c3                   	ret    

c0009063 <calc_output_single>:
c0009063:	55                   	push   ebp
c0009064:	57                   	push   edi
c0009065:	89 c7                	mov    edi,eax
c0009067:	56                   	push   esi
c0009068:	53                   	push   ebx
c0009069:	89 d3                	mov    ebx,edx
c000906b:	83 ec 24             	sub    esp,0x24
c000906e:	89 de                	mov    esi,ebx
c0009070:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009073:	e8 c3 ff ff ff       	call   c000903b <int_to_fp>
c0009078:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000907b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000907f:	29 c8                	sub    eax,ecx
c0009081:	99                   	cdq    
c0009082:	f7 fb                	idiv   ebx
c0009084:	0f af f0             	imul   esi,eax
c0009087:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000908a:	01 ce                	add    esi,ecx
c000908c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009090:	29 c2                	sub    edx,eax
c0009092:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009099:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00090a1:	8d 14 97             	lea    edx,[edi+edx*4]
c00090a4:	89 f0                	mov    eax,esi
c00090a6:	e8 9e ff ff ff       	call   c0009049 <fp_to_double>
c00090ab:	89 f0                	mov    eax,esi
c00090ad:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090b1:	e8 89 ff ff ff       	call   c000903f <fp_to_int>
c00090b6:	83 c2 04             	add    edx,0x4
c00090b9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090bd:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090c1:	d8 e1                	fsub   st,st(1)
c00090c3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090c7:	de c9                	fmulp  st(1),st
c00090c9:	de c1                	faddp  st(1),st
c00090cb:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090d1:	29 de                	sub    esi,ebx
c00090d3:	dc 04 24             	fadd   QWORD PTR [esp]
c00090d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090d9:	79 c9                	jns    c00090a4 <calc_output_single+0x41>
c00090db:	89 d8                	mov    eax,ebx
c00090dd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090e1:	29 c8                	sub    eax,ecx
c00090e3:	89 c1                	mov    ecx,eax
c00090e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e9:	29 c8                	sub    eax,ecx
c00090eb:	99                   	cdq    
c00090ec:	f7 fb                	idiv   ebx
c00090ee:	89 da                	mov    edx,ebx
c00090f0:	0f af d0             	imul   edx,eax
c00090f3:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090f7:	01 d1                	add    ecx,edx
c00090f9:	d9 ee                	fldz   
c00090fb:	8d 14 87             	lea    edx,[edi+eax*4]
c00090fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009102:	89 c8                	mov    eax,ecx
c0009104:	e8 40 ff ff ff       	call   c0009049 <fp_to_double>
c0009109:	89 c8                	mov    eax,ecx
c000910b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000910f:	e8 2b ff ff ff       	call   c000903f <fp_to_int>
c0009114:	29 d9                	sub    ecx,ebx
c0009116:	83 ea 04             	sub    edx,0x4
c0009119:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000911d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009121:	d8 e1                	fsub   st,st(1)
c0009123:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009127:	de c9                	fmulp  st(1),st
c0009129:	de c1                	faddp  st(1),st
c000912b:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009131:	85 c9                	test   ecx,ecx
c0009133:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009137:	de c1                	faddp  st(1),st
c0009139:	7f c3                	jg     c00090fe <calc_output_single+0x9b>
c000913b:	dd 04 24             	fld    QWORD PTR [esp]
c000913e:	de c1                	faddp  st(1),st
c0009140:	83 c4 24             	add    esp,0x24
c0009143:	5b                   	pop    ebx
c0009144:	5e                   	pop    esi
c0009145:	5f                   	pop    edi
c0009146:	5d                   	pop    ebp
c0009147:	c3                   	ret    

c0009148 <calc_output_stereo>:
c0009148:	55                   	push   ebp
c0009149:	57                   	push   edi
c000914a:	89 c7                	mov    edi,eax
c000914c:	56                   	push   esi
c000914d:	53                   	push   ebx
c000914e:	89 d3                	mov    ebx,edx
c0009150:	83 ec 44             	sub    esp,0x44
c0009153:	89 de                	mov    esi,ebx
c0009155:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009158:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000915c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009160:	e8 d6 fe ff ff       	call   c000903b <int_to_fp>
c0009165:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009168:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000916c:	29 c8                	sub    eax,ecx
c000916e:	99                   	cdq    
c000916f:	f7 fb                	idiv   ebx
c0009171:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009174:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000917c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009180:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009183:	0f af f0             	imul   esi,eax
c0009186:	0f af c2             	imul   eax,edx
c0009189:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000918d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009191:	d9 ee                	fldz   
c0009193:	29 c2                	sub    edx,eax
c0009195:	01 ce                	add    esi,ecx
c0009197:	dd 1c 24             	fstp   QWORD PTR [esp]
c000919a:	8d 14 97             	lea    edx,[edi+edx*4]
c000919d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00091a5:	89 f0                	mov    eax,esi
c00091a7:	e8 9d fe ff ff       	call   c0009049 <fp_to_double>
c00091ac:	89 f0                	mov    eax,esi
c00091ae:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091b2:	e8 88 fe ff ff       	call   c000903f <fp_to_int>
c00091b7:	83 c2 08             	add    edx,0x8
c00091ba:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091be:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091c2:	d8 e1                	fsub   st,st(1)
c00091c4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091c8:	de c9                	fmulp  st(1),st
c00091ca:	de c1                	faddp  st(1),st
c00091cc:	d9 c0                	fld    st(0)
c00091ce:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091d4:	dc 04 24             	fadd   QWORD PTR [esp]
c00091d7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091da:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091e0:	29 de                	sub    esi,ebx
c00091e2:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091e6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091ea:	79 b9                	jns    c00091a5 <calc_output_stereo+0x5d>
c00091ec:	89 d8                	mov    eax,ebx
c00091ee:	29 c8                	sub    eax,ecx
c00091f0:	89 c1                	mov    ecx,eax
c00091f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091f6:	29 c8                	sub    eax,ecx
c00091f8:	99                   	cdq    
c00091f9:	f7 fb                	idiv   ebx
c00091fb:	89 da                	mov    edx,ebx
c00091fd:	0f af d0             	imul   edx,eax
c0009200:	40                   	inc    eax
c0009201:	01 d1                	add    ecx,edx
c0009203:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c0009208:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000920c:	d9 ee                	fldz   
c000920e:	d9 ee                	fldz   
c0009210:	8d 14 87             	lea    edx,[edi+eax*4]
c0009213:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009217:	89 c8                	mov    eax,ecx
c0009219:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000921d:	e8 27 fe ff ff       	call   c0009049 <fp_to_double>
c0009222:	89 c8                	mov    eax,ecx
c0009224:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009228:	e8 12 fe ff ff       	call   c000903f <fp_to_int>
c000922d:	29 d9                	sub    ecx,ebx
c000922f:	83 ea 08             	sub    edx,0x8
c0009232:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009236:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000923a:	d8 e1                	fsub   st,st(1)
c000923c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009240:	de c9                	fmulp  st(1),st
c0009242:	de c1                	faddp  st(1),st
c0009244:	d9 c0                	fld    st(0)
c0009246:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000924c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009250:	de c1                	faddp  st(1),st
c0009252:	d9 c9                	fxch   st(1)
c0009254:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c000925a:	85 c9                	test   ecx,ecx
c000925c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009260:	de c1                	faddp  st(1),st
c0009262:	7f af                	jg     c0009213 <calc_output_stereo+0xcb>
c0009264:	dd 04 24             	fld    QWORD PTR [esp]
c0009267:	de c2                	faddp  st(2),st
c0009269:	d9 c9                	fxch   st(1)
c000926b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000926f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009273:	d9 18                	fstp   DWORD PTR [eax]
c0009275:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009279:	de c1                	faddp  st(1),st
c000927b:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000927f:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009282:	83 c4 44             	add    esp,0x44
c0009285:	5b                   	pop    ebx
c0009286:	5e                   	pop    esi
c0009287:	5f                   	pop    edi
c0009288:	5d                   	pop    ebp
c0009289:	c3                   	ret    

c000928a <calc_output_quad>:
c000928a:	55                   	push   ebp
c000928b:	57                   	push   edi
c000928c:	56                   	push   esi
c000928d:	89 c6                	mov    esi,eax
c000928f:	53                   	push   ebx
c0009290:	89 d3                	mov    ebx,edx
c0009292:	83 ec 5c             	sub    esp,0x5c
c0009295:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009298:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c000929c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00092a0:	dd 1c 24             	fstp   QWORD PTR [esp]
c00092a3:	e8 93 fd ff ff       	call   c000903b <int_to_fp>
c00092a8:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00092ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	99                   	cdq    
c00092b2:	f7 fb                	idiv   ebx
c00092b4:	89 da                	mov    edx,ebx
c00092b6:	0f af d0             	imul   edx,eax
c00092b9:	01 ca                	add    edx,ecx
c00092bb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092bf:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092c6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092c9:	0f af c2             	imul   eax,edx
c00092cc:	d9 ee                	fldz   
c00092ce:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092d6:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092da:	29 c2                	sub    edx,eax
c00092dc:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092e0:	8d 14 96             	lea    edx,[esi+edx*4]
c00092e3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092e7:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ef:	e8 55 fd ff ff       	call   c0009049 <fp_to_double>
c00092f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092f8:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092fc:	e8 3e fd ff ff       	call   c000903f <fp_to_int>
c0009301:	83 c2 10             	add    edx,0x10
c0009304:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009308:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000930c:	d8 e1                	fsub   st,st(1)
c000930e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009312:	de c9                	fmulp  st(1),st
c0009314:	de c1                	faddp  st(1),st
c0009316:	d9 c0                	fld    st(0)
c0009318:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000931e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009322:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009326:	d9 c0                	fld    st(0)
c0009328:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000932e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009332:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009336:	d9 c0                	fld    st(0)
c0009338:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000933e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009342:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009346:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000934c:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009350:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009354:	de c1                	faddp  st(1),st
c0009356:	79 8f                	jns    c00092e7 <calc_output_quad+0x5d>
c0009358:	89 d8                	mov    eax,ebx
c000935a:	29 c8                	sub    eax,ecx
c000935c:	89 c1                	mov    ecx,eax
c000935e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009362:	29 c8                	sub    eax,ecx
c0009364:	99                   	cdq    
c0009365:	f7 fb                	idiv   ebx
c0009367:	89 da                	mov    edx,ebx
c0009369:	0f af d0             	imul   edx,eax
c000936c:	40                   	inc    eax
c000936d:	01 d1                	add    ecx,edx
c000936f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009374:	d9 ee                	fldz   
c0009376:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c000937a:	d9 ee                	fldz   
c000937c:	d9 ee                	fldz   
c000937e:	d9 ee                	fldz   
c0009380:	8d 14 86             	lea    edx,[esi+eax*4]
c0009383:	eb 0a                	jmp    c000938f <calc_output_quad+0x105>
c0009385:	d9 cc                	fxch   st(4)
c0009387:	d9 ca                	fxch   st(2)
c0009389:	d9 c9                	fxch   st(1)
c000938b:	d9 cb                	fxch   st(3)
c000938d:	d9 c9                	fxch   st(1)
c000938f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009393:	d9 c9                	fxch   st(1)
c0009395:	89 c8                	mov    eax,ecx
c0009397:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000939b:	d9 c9                	fxch   st(1)
c000939d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00093a1:	d9 c9                	fxch   st(1)
c00093a3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00093a7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00093ab:	e8 99 fc ff ff       	call   c0009049 <fp_to_double>
c00093b0:	89 c8                	mov    eax,ecx
c00093b2:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093b6:	e8 84 fc ff ff       	call   c000903f <fp_to_int>
c00093bb:	29 d9                	sub    ecx,ebx
c00093bd:	83 ea 10             	sub    edx,0x10
c00093c0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093c4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093c8:	d8 e1                	fsub   st,st(1)
c00093ca:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093ce:	de c9                	fmulp  st(1),st
c00093d0:	de c1                	faddp  st(1),st
c00093d2:	d9 c0                	fld    st(0)
c00093d4:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093da:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093de:	de c1                	faddp  st(1),st
c00093e0:	d9 c1                	fld    st(1)
c00093e2:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093e8:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093ec:	de c1                	faddp  st(1),st
c00093ee:	d9 c2                	fld    st(2)
c00093f0:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093fa:	de c1                	faddp  st(1),st
c00093fc:	d9 cb                	fxch   st(3)
c00093fe:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009404:	85 c9                	test   ecx,ecx
c0009406:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000940a:	de c1                	faddp  st(1),st
c000940c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009410:	0f 8f 6f ff ff ff    	jg     c0009385 <calc_output_quad+0xfb>
c0009416:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000941a:	de c4                	faddp  st(4),st
c000941c:	d9 cb                	fxch   st(3)
c000941e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009421:	d9 1f                	fstp   DWORD PTR [edi]
c0009423:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009427:	de c2                	faddp  st(2),st
c0009429:	d9 c9                	fxch   st(1)
c000942b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009431:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009435:	de c3                	faddp  st(3),st
c0009437:	d9 ca                	fxch   st(2)
c0009439:	dc 0c 24             	fmul   QWORD PTR [esp]
c000943c:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c000943f:	de c1                	faddp  st(1),st
c0009441:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009444:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009447:	83 c4 5c             	add    esp,0x5c
c000944a:	5b                   	pop    ebx
c000944b:	5e                   	pop    esi
c000944c:	5f                   	pop    edi
c000944d:	5d                   	pop    ebp
c000944e:	c3                   	ret    

c000944f <calc_output_hex>:
c000944f:	55                   	push   ebp
c0009450:	57                   	push   edi
c0009451:	89 c7                	mov    edi,eax
c0009453:	56                   	push   esi
c0009454:	53                   	push   ebx
c0009455:	89 d3                	mov    ebx,edx
c0009457:	83 ec 7c             	sub    esp,0x7c
c000945a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000945d:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009464:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000946b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000946e:	e8 c8 fb ff ff       	call   c000903b <int_to_fp>
c0009473:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009476:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000947a:	29 c8                	sub    eax,ecx
c000947c:	99                   	cdq    
c000947d:	f7 fb                	idiv   ebx
c000947f:	89 da                	mov    edx,ebx
c0009481:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009489:	0f af d0             	imul   edx,eax
c000948c:	01 ca                	add    edx,ecx
c000948e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0009496:	d9 ee                	fldz   
c0009498:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000949c:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000949f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00094a3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00094a6:	0f af c2             	imul   eax,edx
c00094a9:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00094ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00094b1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00094b5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094b9:	29 c2                	sub    edx,eax
c00094bb:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094bf:	8d 14 97             	lea    edx,[edi+edx*4]
c00094c2:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094c6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094ce:	e8 76 fb ff ff       	call   c0009049 <fp_to_double>
c00094d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094d7:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094db:	e8 5f fb ff ff       	call   c000903f <fp_to_int>
c00094e0:	83 c2 18             	add    edx,0x18
c00094e3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094e7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094eb:	d8 e1                	fsub   st,st(1)
c00094ed:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094f1:	de c9                	fmulp  st(1),st
c00094f3:	de c1                	faddp  st(1),st
c00094f5:	d9 c0                	fld    st(0)
c00094f7:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094fd:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009501:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009505:	d9 c0                	fld    st(0)
c0009507:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c000950d:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009511:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009515:	d9 c0                	fld    st(0)
c0009517:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000951d:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009521:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009525:	d9 c0                	fld    st(0)
c0009527:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000952d:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009531:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009535:	d9 c0                	fld    st(0)
c0009537:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000953d:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009541:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009545:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000954b:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c000954f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009553:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009557:	0f 89 6d ff ff ff    	jns    c00094ca <calc_output_hex+0x7b>
c000955d:	89 d8                	mov    eax,ebx
c000955f:	29 c8                	sub    eax,ecx
c0009561:	89 c1                	mov    ecx,eax
c0009563:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009567:	29 c8                	sub    eax,ecx
c0009569:	99                   	cdq    
c000956a:	f7 fb                	idiv   ebx
c000956c:	89 da                	mov    edx,ebx
c000956e:	0f af d0             	imul   edx,eax
c0009571:	40                   	inc    eax
c0009572:	01 d1                	add    ecx,edx
c0009574:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009579:	d9 ee                	fldz   
c000957b:	d9 ee                	fldz   
c000957d:	d9 ee                	fldz   
c000957f:	d9 ca                	fxch   st(2)
c0009581:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c0009585:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009589:	d9 ee                	fldz   
c000958b:	8d 14 87             	lea    edx,[edi+eax*4]
c000958e:	d9 ee                	fldz   
c0009590:	d9 ca                	fxch   st(2)
c0009592:	eb 0a                	jmp    c000959e <calc_output_hex+0x14f>
c0009594:	d9 c9                	fxch   st(1)
c0009596:	d9 cc                	fxch   st(4)
c0009598:	d9 cb                	fxch   st(3)
c000959a:	d9 ca                	fxch   st(2)
c000959c:	d9 c9                	fxch   st(1)
c000959e:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00095a2:	89 c8                	mov    eax,ecx
c00095a4:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00095a8:	d9 ca                	fxch   st(2)
c00095aa:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00095ae:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095b2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095b6:	e8 8e fa ff ff       	call   c0009049 <fp_to_double>
c00095bb:	89 c8                	mov    eax,ecx
c00095bd:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095c1:	e8 79 fa ff ff       	call   c000903f <fp_to_int>
c00095c6:	29 d9                	sub    ecx,ebx
c00095c8:	83 ea 18             	sub    edx,0x18
c00095cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095cf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095d3:	d8 e1                	fsub   st,st(1)
c00095d5:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095d9:	de c9                	fmulp  st(1),st
c00095db:	de c1                	faddp  st(1),st
c00095dd:	d9 c0                	fld    st(0)
c00095df:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095e5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095e9:	de c1                	faddp  st(1),st
c00095eb:	d9 c1                	fld    st(1)
c00095ed:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095f3:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095f7:	de c1                	faddp  st(1),st
c00095f9:	d9 c2                	fld    st(2)
c00095fb:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009601:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009605:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009609:	d9 c2                	fld    st(2)
c000960b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009611:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009615:	de c1                	faddp  st(1),st
c0009617:	d9 c3                	fld    st(3)
c0009619:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c000961f:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009623:	de c1                	faddp  st(1),st
c0009625:	d9 cc                	fxch   st(4)
c0009627:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000962d:	85 c9                	test   ecx,ecx
c000962f:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009633:	de c1                	faddp  st(1),st
c0009635:	0f 8f 59 ff ff ff    	jg     c0009594 <calc_output_hex+0x145>
c000963b:	d9 cb                	fxch   st(3)
c000963d:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009641:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009644:	d9 1e                	fstp   DWORD PTR [esi]
c0009646:	d9 c9                	fxch   st(1)
c0009648:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009652:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009656:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000965a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000965d:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009660:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009664:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009667:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c000966a:	d9 c9                	fxch   st(1)
c000966c:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009670:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009673:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009676:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000967a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000967d:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009680:	83 c4 7c             	add    esp,0x7c
c0009683:	5b                   	pop    ebx
c0009684:	5e                   	pop    esi
c0009685:	5f                   	pop    edi
c0009686:	5d                   	pop    ebp
c0009687:	c3                   	ret    

c0009688 <sinc_reset>:
c0009688:	56                   	push   esi
c0009689:	53                   	push   ebx
c000968a:	51                   	push   ecx
c000968b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000968f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009692:	85 db                	test   ebx,ebx
c0009694:	74 51                	je     c00096e7 <sinc_reset+0x5f>
c0009696:	d9 ee                	fldz   
c0009698:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000969f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00096a6:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00096a9:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00096b0:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096b6:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096b9:	52                   	push   edx
c00096ba:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096bd:	c1 e0 02             	shl    eax,0x2
c00096c0:	50                   	push   eax
c00096c1:	6a 00                	push   0x0
c00096c3:	56                   	push   esi
c00096c4:	e8 09 70 ff ff       	call   c00006d2 <memset>
c00096c9:	83 c4 0c             	add    esp,0xc
c00096cc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096cf:	c1 e0 02             	shl    eax,0x2
c00096d2:	50                   	push   eax
c00096d3:	68 aa 00 00 00       	push   0xaa
c00096d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096db:	8d 04 86             	lea    eax,[esi+eax*4]
c00096de:	50                   	push   eax
c00096df:	e8 ee 6f ff ff       	call   c00006d2 <memset>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	58                   	pop    eax
c00096e8:	5b                   	pop    ebx
c00096e9:	5e                   	pop    esi
c00096ea:	c3                   	ret    

c00096eb <calc_output_multi>:
c00096eb:	55                   	push   ebp
c00096ec:	57                   	push   edi
c00096ed:	8d 78 44             	lea    edi,[eax+0x44]
c00096f0:	56                   	push   esi
c00096f1:	89 c6                	mov    esi,eax
c00096f3:	53                   	push   ebx
c00096f4:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096fa:	83 ec 4c             	sub    esp,0x4c
c00096fd:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009701:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009705:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009708:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000970c:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009710:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009714:	e8 22 f9 ff ff       	call   c000903b <int_to_fp>
c0009719:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000971d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009721:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0009725:	99                   	cdq    
c0009726:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c000972a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000972e:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009731:	0f af d0             	imul   edx,eax
c0009734:	0f af c3             	imul   eax,ebx
c0009737:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000973b:	29 c5                	sub    ebp,eax
c000973d:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009744:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009748:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000974c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009750:	52                   	push   edx
c0009751:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009755:	6a 00                	push   0x0
c0009757:	57                   	push   edi
c0009758:	e8 75 6f ff ff       	call   c00006d2 <memset>
c000975d:	83 c4 10             	add    esp,0x10
c0009760:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009764:	e8 e0 f8 ff ff       	call   c0009049 <fp_to_double>
c0009769:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000976d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009771:	e8 c9 f8 ff ff       	call   c000903f <fp_to_int>
c0009776:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009779:	89 d9                	mov    ecx,ebx
c000977b:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000977e:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009782:	d8 e1                	fsub   st,st(1)
c0009784:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009788:	de c9                	fmulp  st(1),st
c000978a:	de c1                	faddp  st(1),st
c000978c:	89 c8                	mov    eax,ecx
c000978e:	bd 08 00 00 00       	mov    ebp,0x8
c0009793:	99                   	cdq    
c0009794:	f7 fd                	idiv   ebp
c0009796:	4a                   	dec    edx
c0009797:	83 fa 06             	cmp    edx,0x6
c000979a:	77 07                	ja     c00097a3 <calc_output_multi+0xb8>
c000979c:	ff 24 95 00 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf100]
c00097a3:	49                   	dec    ecx
c00097a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a8:	d9 c0                	fld    st(0)
c00097aa:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b1:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b4:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b8:	dc 00                	fadd   QWORD PTR [eax]
c00097ba:	dd 18                	fstp   QWORD PTR [eax]
c00097bc:	49                   	dec    ecx
c00097bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c1:	d9 c0                	fld    st(0)
c00097c3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097ca:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d1:	dc 00                	fadd   QWORD PTR [eax]
c00097d3:	dd 18                	fstp   QWORD PTR [eax]
c00097d5:	49                   	dec    ecx
c00097d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097da:	d9 c0                	fld    st(0)
c00097dc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e3:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097ea:	dc 00                	fadd   QWORD PTR [eax]
c00097ec:	dd 18                	fstp   QWORD PTR [eax]
c00097ee:	49                   	dec    ecx
c00097ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f3:	d9 c0                	fld    st(0)
c00097f5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097fc:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ff:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009803:	dc 00                	fadd   QWORD PTR [eax]
c0009805:	dd 18                	fstp   QWORD PTR [eax]
c0009807:	49                   	dec    ecx
c0009808:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980c:	d9 c0                	fld    st(0)
c000980e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009815:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009818:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981c:	dc 00                	fadd   QWORD PTR [eax]
c000981e:	dd 18                	fstp   QWORD PTR [eax]
c0009820:	49                   	dec    ecx
c0009821:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009825:	d9 c0                	fld    st(0)
c0009827:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982e:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009831:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009835:	dc 00                	fadd   QWORD PTR [eax]
c0009837:	dd 18                	fstp   QWORD PTR [eax]
c0009839:	49                   	dec    ecx
c000983a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983e:	d9 c0                	fld    st(0)
c0009840:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009847:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000984e:	dc 00                	fadd   QWORD PTR [eax]
c0009850:	dd 18                	fstp   QWORD PTR [eax]
c0009852:	49                   	dec    ecx
c0009853:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009857:	d9 c0                	fld    st(0)
c0009859:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009860:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009863:	85 c9                	test   ecx,ecx
c0009865:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009869:	dc 00                	fadd   QWORD PTR [eax]
c000986b:	dd 18                	fstp   QWORD PTR [eax]
c000986d:	0f 8f 19 ff ff ff    	jg     c000978c <calc_output_multi+0xa1>
c0009873:	dd d8                	fstp   st(0)
c0009875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009879:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c000987d:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009881:	0f 89 d9 fe ff ff    	jns    c0009760 <calc_output_multi+0x75>
c0009887:	89 d1                	mov    ecx,edx
c0009889:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000988d:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009891:	29 c8                	sub    eax,ecx
c0009893:	99                   	cdq    
c0009894:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009898:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989c:	0f af d0             	imul   edx,eax
c000989f:	40                   	inc    eax
c00098a0:	01 d1                	add    ecx,edx
c00098a2:	0f af c3             	imul   eax,ebx
c00098a5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00098a8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00098ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098b0:	50                   	push   eax
c00098b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098b5:	6a 00                	push   0x0
c00098b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098bb:	e8 12 6e ff ff       	call   c00006d2 <memset>
c00098c0:	83 c4 10             	add    esp,0x10
c00098c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098c7:	e8 7d f7 ff ff       	call   c0009049 <fp_to_double>
c00098cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098d0:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098d4:	e8 66 f7 ff ff       	call   c000903f <fp_to_int>
c00098d9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098dc:	89 d9                	mov    ecx,ebx
c00098de:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098e1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098e5:	d8 e1                	fsub   st,st(1)
c00098e7:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098eb:	de c9                	fmulp  st(1),st
c00098ed:	de c1                	faddp  st(1),st
c00098ef:	89 c8                	mov    eax,ecx
c00098f1:	bd 08 00 00 00       	mov    ebp,0x8
c00098f6:	99                   	cdq    
c00098f7:	f7 fd                	idiv   ebp
c00098f9:	4a                   	dec    edx
c00098fa:	83 fa 06             	cmp    edx,0x6
c00098fd:	77 07                	ja     c0009906 <calc_output_multi+0x21b>
c00098ff:	ff 24 95 1c 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e4]
c0009906:	49                   	dec    ecx
c0009907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000990b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000990f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009916:	d9 c0                	fld    st(0)
c0009918:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000991c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000991f:	dc 00                	fadd   QWORD PTR [eax]
c0009921:	dd 18                	fstp   QWORD PTR [eax]
c0009923:	49                   	dec    ecx
c0009924:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009928:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000992c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009933:	d9 c0                	fld    st(0)
c0009935:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009939:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000993c:	dc 00                	fadd   QWORD PTR [eax]
c000993e:	dd 18                	fstp   QWORD PTR [eax]
c0009940:	49                   	dec    ecx
c0009941:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009949:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009950:	d9 c0                	fld    st(0)
c0009952:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009956:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009959:	dc 00                	fadd   QWORD PTR [eax]
c000995b:	dd 18                	fstp   QWORD PTR [eax]
c000995d:	49                   	dec    ecx
c000995e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009962:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009966:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000996d:	d9 c0                	fld    st(0)
c000996f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009973:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009976:	dc 00                	fadd   QWORD PTR [eax]
c0009978:	dd 18                	fstp   QWORD PTR [eax]
c000997a:	49                   	dec    ecx
c000997b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000997f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009983:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998a:	d9 c0                	fld    st(0)
c000998c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009990:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009993:	dc 00                	fadd   QWORD PTR [eax]
c0009995:	dd 18                	fstp   QWORD PTR [eax]
c0009997:	49                   	dec    ecx
c0009998:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000999c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099a7:	d9 c0                	fld    st(0)
c00099a9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ad:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b0:	dc 00                	fadd   QWORD PTR [eax]
c00099b2:	dd 18                	fstp   QWORD PTR [eax]
c00099b4:	49                   	dec    ecx
c00099b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099bd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c4:	d9 c0                	fld    st(0)
c00099c6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099ca:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099cd:	dc 00                	fadd   QWORD PTR [eax]
c00099cf:	dd 18                	fstp   QWORD PTR [eax]
c00099d1:	49                   	dec    ecx
c00099d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099da:	85 c9                	test   ecx,ecx
c00099dc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099e3:	d9 c0                	fld    st(0)
c00099e5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099ec:	dc 00                	fadd   QWORD PTR [eax]
c00099ee:	dd 18                	fstp   QWORD PTR [eax]
c00099f0:	0f 8f f9 fe ff ff    	jg     c00098ef <calc_output_multi+0x204>
c00099f6:	dd d8                	fstp   st(0)
c00099f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099fc:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c0009a00:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009a04:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0009a09:	0f 8f b4 fe ff ff    	jg     c00098c3 <calc_output_multi+0x1d8>
c0009a0f:	b9 08 00 00 00       	mov    ecx,0x8
c0009a14:	89 d8                	mov    eax,ebx
c0009a16:	99                   	cdq    
c0009a17:	f7 f9                	idiv   ecx
c0009a19:	4a                   	dec    edx
c0009a1a:	83 fa 06             	cmp    edx,0x6
c0009a1d:	77 07                	ja     c0009a26 <calc_output_multi+0x33b>
c0009a1f:	ff 24 95 38 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0c8]
c0009a26:	4b                   	dec    ebx
c0009a27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a2b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a31:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a35:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a39:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3c:	4b                   	dec    ebx
c0009a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a41:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a44:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a47:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a4b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a52:	4b                   	dec    ebx
c0009a53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a57:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a5a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a61:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a65:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a68:	4b                   	dec    ebx
c0009a69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6d:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a70:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a73:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a77:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a7b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7e:	4b                   	dec    ebx
c0009a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a83:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a86:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a89:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a91:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a94:	4b                   	dec    ebx
c0009a95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a99:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa3:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aaa:	4b                   	dec    ebx
c0009aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aaf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009abd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac0:	4b                   	dec    ebx
c0009ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ac5:	85 db                	test   ebx,ebx
c0009ac7:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aca:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009acd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ad1:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ad5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ad8:	0f 8f 36 ff ff ff    	jg     c0009a14 <calc_output_multi+0x329>
c0009ade:	83 c4 4c             	add    esp,0x4c
c0009ae1:	5b                   	pop    ebx
c0009ae2:	5e                   	pop    esi
c0009ae3:	5f                   	pop    edi
c0009ae4:	5d                   	pop    ebp
c0009ae5:	c3                   	ret    

c0009ae6 <double_to_fp>:
c0009ae6:	d9 05 8c 10 02 c0    	fld    DWORD PTR ds:0xc002108c
c0009aec:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009af0:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009af4:	e9 67 5c 01 00       	jmp    c001f760 <lrint>

c0009af9 <fmod_one>:
c0009af9:	83 ec 2c             	sub    esp,0x2c
c0009afc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b0c:	83 ec 08             	sub    esp,0x8
c0009b0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b17:	e8 44 5c 01 00       	call   c001f760 <lrint>
c0009b1c:	83 c4 10             	add    esp,0x10
c0009b1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b23:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b27:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b2b:	de e1                	fsubrp st(1),st
c0009b2d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b31:	d9 ee                	fldz   
c0009b33:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b37:	df e0                	fnstsw ax
c0009b39:	f6 c4 45             	test   ah,0x45
c0009b3c:	75 0a                	jne    c0009b48 <fmod_one+0x4f>
c0009b3e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b42:	d9 e8                	fld1   
c0009b44:	de c1                	faddp  st(1),st
c0009b46:	eb 04                	jmp    c0009b4c <fmod_one+0x53>
c0009b48:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b4c:	83 c4 2c             	add    esp,0x2c
c0009b4f:	c3                   	ret    

c0009b50 <prepare_data>:
c0009b50:	55                   	push   ebp
c0009b51:	57                   	push   edi
c0009b52:	56                   	push   esi
c0009b53:	53                   	push   ebx
c0009b54:	83 ec 1c             	sub    esp,0x1c
c0009b57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b5b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b5f:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b63:	0f 89 57 01 00 00    	jns    c0009cc0 <prepare_data+0x170>
c0009b69:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b6c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b6f:	85 d2                	test   edx,edx
c0009b71:	75 0d                	jne    c0009b80 <prepare_data+0x30>
c0009b73:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b76:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b79:	29 d0                	sub    eax,edx
c0009b7b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b7e:	eb 44                	jmp    c0009bc4 <prepare_data+0x74>
c0009b80:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b83:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b86:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b89:	39 c1                	cmp    ecx,eax
c0009b8b:	7d 04                	jge    c0009b91 <prepare_data+0x41>
c0009b8d:	29 d0                	sub    eax,edx
c0009b8f:	eb 2d                	jmp    c0009bbe <prepare_data+0x6e>
c0009b91:	29 d7                	sub    edi,edx
c0009b93:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b99:	01 f7                	add    edi,esi
c0009b9b:	29 f2                	sub    edx,esi
c0009b9d:	51                   	push   ecx
c0009b9e:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009ba5:	8d 14 90             	lea    edx,[eax+edx*4]
c0009ba8:	51                   	push   ecx
c0009ba9:	52                   	push   edx
c0009baa:	50                   	push   eax
c0009bab:	e8 b4 6a ff ff       	call   c0000664 <memmove>
c0009bb0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009bb3:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bb6:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bb9:	29 f0                	sub    eax,esi
c0009bbb:	83 c4 10             	add    esp,0x10
c0009bbe:	29 f0                	sub    eax,esi
c0009bc0:	79 02                	jns    c0009bc4 <prepare_data+0x74>
c0009bc2:	31 c0                	xor    eax,eax
c0009bc4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bc7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bca:	29 ef                	sub    edi,ebp
c0009bcc:	39 c7                	cmp    edi,eax
c0009bce:	7e 02                	jle    c0009bd2 <prepare_data+0x82>
c0009bd0:	89 c7                	mov    edi,eax
c0009bd2:	89 f8                	mov    eax,edi
c0009bd4:	99                   	cdq    
c0009bd5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bd8:	29 d7                	sub    edi,edx
c0009bda:	b8 15 00 00 00       	mov    eax,0x15
c0009bdf:	0f 88 dd 00 00 00    	js     c0009cc2 <prepare_data+0x172>
c0009be5:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009be8:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009beb:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bee:	0f 8f ce 00 00 00    	jg     c0009cc2 <prepare_data+0x172>
c0009bf4:	50                   	push   eax
c0009bf5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bfc:	50                   	push   eax
c0009bfd:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009c03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c09:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009c0c:	50                   	push   eax
c0009c0d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c14:	50                   	push   eax
c0009c15:	e8 82 6a ff ff       	call   c000069c <memcpy>
c0009c1a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c1d:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c20:	83 c4 10             	add    esp,0x10
c0009c23:	01 fd                	add    ebp,edi
c0009c25:	01 f9                	add    ecx,edi
c0009c27:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c2a:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c2d:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c34:	0f 85 86 00 00 00    	jne    c0009cc0 <prepare_data+0x170>
c0009c3a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c3d:	89 e8                	mov    eax,ebp
c0009c3f:	29 c8                	sub    eax,ecx
c0009c41:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c44:	39 f8                	cmp    eax,edi
c0009c46:	7d 78                	jge    c0009cc0 <prepare_data+0x170>
c0009c48:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c4c:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c50:	74 6e                	je     c0009cc0 <prepare_data+0x170>
c0009c52:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c55:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c59:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c5c:	29 ef                	sub    edi,ebp
c0009c5e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c62:	7c 29                	jl     c0009c8d <prepare_data+0x13d>
c0009c64:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c67:	29 f1                	sub    ecx,esi
c0009c69:	55                   	push   ebp
c0009c6a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c71:	50                   	push   eax
c0009c72:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c75:	50                   	push   eax
c0009c76:	52                   	push   edx
c0009c77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c7b:	e8 e4 69 ff ff       	call   c0000664 <memmove>
c0009c80:	83 c4 10             	add    esp,0x10
c0009c83:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c86:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c90:	83 c6 05             	add    esi,0x5
c0009c93:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c96:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c99:	78 07                	js     c0009ca2 <prepare_data+0x152>
c0009c9b:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c9e:	39 cf                	cmp    edi,ecx
c0009ca0:	7e 04                	jle    c0009ca6 <prepare_data+0x156>
c0009ca2:	89 ce                	mov    esi,ecx
c0009ca4:	29 c6                	sub    esi,eax
c0009ca6:	51                   	push   ecx
c0009ca7:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009cae:	51                   	push   ecx
c0009caf:	8d 04 82             	lea    eax,[edx+eax*4]
c0009cb2:	6a 00                	push   0x0
c0009cb4:	50                   	push   eax
c0009cb5:	e8 18 6a ff ff       	call   c00006d2 <memset>
c0009cba:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	31 c0                	xor    eax,eax
c0009cc2:	83 c4 1c             	add    esp,0x1c
c0009cc5:	5b                   	pop    ebx
c0009cc6:	5e                   	pop    esi
c0009cc7:	5f                   	pop    edi
c0009cc8:	5d                   	pop    ebp
c0009cc9:	c3                   	ret    

c0009cca <sinc_multichan_vari_process>:
c0009cca:	55                   	push   ebp
c0009ccb:	b8 05 00 00 00       	mov    eax,0x5
c0009cd0:	57                   	push   edi
c0009cd1:	56                   	push   esi
c0009cd2:	53                   	push   ebx
c0009cd3:	83 ec 3c             	sub    esp,0x3c
c0009cd6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cda:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cde:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ce1:	85 db                	test   ebx,ebx
c0009ce3:	0f 84 5b 02 00 00    	je     c0009f44 <sinc_multichan_vari_process+0x27a>
c0009ce9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cec:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cef:	0f af d0             	imul   edx,eax
c0009cf2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cf5:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009cf9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009d00:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009d03:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009d0a:	dd 06                	fld    QWORD PTR [esi]
c0009d0c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009d10:	55                   	push   ebp
c0009d11:	55                   	push   ebp
c0009d12:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d15:	e8 dd f2 ff ff       	call   c0008ff7 <is_bad_src_ratio>
c0009d1a:	89 c2                	mov    edx,eax
c0009d1c:	58                   	pop    eax
c0009d1d:	59                   	pop    ecx
c0009d1e:	b8 16 00 00 00       	mov    eax,0x16
c0009d23:	85 d2                	test   edx,edx
c0009d25:	0f 85 19 02 00 00    	jne    c0009f44 <sinc_multichan_vari_process+0x27a>
c0009d2b:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009d31:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d34:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d37:	dd 06                	fld    QWORD PTR [esi]
c0009d39:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d3c:	d8 d1                	fcom   st(1)
c0009d3e:	df e0                	fnstsw ax
c0009d40:	9e                   	sahf   
c0009d41:	76 0f                	jbe    c0009d52 <sinc_multichan_vari_process+0x88>
c0009d43:	dd d8                	fstp   st(0)
c0009d45:	d9 e8                	fld1   
c0009d47:	d8 d9                	fcomp  st(1)
c0009d49:	df e0                	fnstsw ax
c0009d4b:	9e                   	sahf   
c0009d4c:	77 0f                	ja     c0009d5d <sinc_multichan_vari_process+0x93>
c0009d4e:	dd d8                	fstp   st(0)
c0009d50:	eb 11                	jmp    c0009d63 <sinc_multichan_vari_process+0x99>
c0009d52:	dd d9                	fstp   st(1)
c0009d54:	d9 e8                	fld1   
c0009d56:	d8 d9                	fcomp  st(1)
c0009d58:	df e0                	fnstsw ax
c0009d5a:	9e                   	sahf   
c0009d5b:	76 04                	jbe    c0009d61 <sinc_multichan_vari_process+0x97>
c0009d5d:	de f9                	fdivp  st(1),st
c0009d5f:	eb 02                	jmp    c0009d63 <sinc_multichan_vari_process+0x99>
c0009d61:	dd d8                	fstp   st(0)
c0009d63:	83 ec 10             	sub    esp,0x10
c0009d66:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d69:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d6c:	e8 ef 59 01 00       	call   c001f760 <lrint>
c0009d71:	40                   	inc    eax
c0009d72:	0f af c5             	imul   eax,ebp
c0009d75:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d78:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d7c:	dd 14 24             	fst    QWORD PTR [esp]
c0009d7f:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d83:	e8 71 fd ff ff       	call   c0009af9 <fmod_one>
c0009d88:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d8b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d92:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d96:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d9a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d9e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009da1:	e8 ba 59 01 00       	call   c001f760 <lrint>
c0009da6:	d9 e8                	fld1   
c0009da8:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009dac:	0f af e8             	imul   ebp,eax
c0009daf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009db3:	01 e8                	add    eax,ebp
c0009db5:	99                   	cdq    
c0009db6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009db9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dbc:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c0009dc2:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dc6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009dc9:	83 c4 10             	add    esp,0x10
c0009dcc:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dcf:	7d 4b                	jge    c0009e1c <sinc_multichan_vari_process+0x152>
c0009dd1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dd4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dd7:	01 c8                	add    eax,ecx
c0009dd9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ddc:	99                   	cdq    
c0009ddd:	f7 f9                	idiv   ecx
c0009ddf:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009de3:	7d 09                	jge    c0009dee <sinc_multichan_vari_process+0x124>
c0009de5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009de8:	85 c0                	test   eax,eax
c0009dea:	79 57                	jns    c0009e43 <sinc_multichan_vari_process+0x179>
c0009dec:	eb 70                	jmp    c0009e5e <sinc_multichan_vari_process+0x194>
c0009dee:	51                   	push   ecx
c0009def:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009df3:	57                   	push   edi
c0009df4:	53                   	push   ebx
c0009df5:	e8 56 fd ff ff       	call   c0009b50 <prepare_data>
c0009dfa:	83 c4 10             	add    esp,0x10
c0009dfd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009e00:	85 c0                	test   eax,eax
c0009e02:	0f 85 3c 01 00 00    	jne    c0009f44 <sinc_multichan_vari_process+0x27a>
c0009e08:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009e0b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009e0e:	01 c8                	add    eax,ecx
c0009e10:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e13:	99                   	cdq    
c0009e14:	f7 f9                	idiv   ecx
c0009e16:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e1a:	7c c9                	jl     c0009de5 <sinc_multichan_vari_process+0x11b>
c0009e1c:	dd 04 24             	fld    QWORD PTR [esp]
c0009e1f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e26:	dd 1e                	fstp   QWORD PTR [esi]
c0009e28:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e2b:	99                   	cdq    
c0009e2c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e2f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e32:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e35:	99                   	cdq    
c0009e36:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e39:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e3c:	31 c0                	xor    eax,eax
c0009e3e:	e9 01 01 00 00       	jmp    c0009f44 <sinc_multichan_vari_process+0x27a>
c0009e43:	dd 04 24             	fld    QWORD PTR [esp]
c0009e46:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e4d:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e51:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e55:	d9 c9                	fxch   st(1)
c0009e57:	de d9                	fcompp 
c0009e59:	df e0                	fnstsw ax
c0009e5b:	9e                   	sahf   
c0009e5c:	73 be                	jae    c0009e1c <sinc_multichan_vari_process+0x152>
c0009e5e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e62:	7e 2f                	jle    c0009e93 <sinc_multichan_vari_process+0x1c9>
c0009e64:	dd 06                	fld    QWORD PTR [esi]
c0009e66:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e69:	83 ec 10             	sub    esp,0x10
c0009e6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e6f:	e8 cc 58 01 00       	call   c001f740 <fabs>
c0009e74:	83 c4 10             	add    esp,0x10
c0009e77:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c0009e7d:	df e0                	fnstsw ax
c0009e7f:	9e                   	sahf   
c0009e80:	76 11                	jbe    c0009e93 <sinc_multichan_vari_process+0x1c9>
c0009e82:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e85:	dc 26                	fsub   QWORD PTR [esi]
c0009e87:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e8a:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e8d:	dc 06                	fadd   QWORD PTR [esi]
c0009e8f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e93:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e96:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e9a:	d9 e8                	fld1   
c0009e9c:	d8 d9                	fcomp  st(1)
c0009e9e:	df e0                	fnstsw ax
c0009ea0:	9e                   	sahf   
c0009ea1:	77 04                	ja     c0009ea7 <sinc_multichan_vari_process+0x1dd>
c0009ea3:	dd d8                	fstp   st(0)
c0009ea5:	d9 e8                	fld1   
c0009ea7:	de c9                	fmulp  st(1),st
c0009ea9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009ead:	50                   	push   eax
c0009eae:	50                   	push   eax
c0009eaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009eb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009eb7:	e8 2a fc ff ff       	call   c0009ae6 <double_to_fp>
c0009ebc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ec0:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009ec4:	89 c5                	mov    ebp,eax
c0009ec6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ec9:	e8 18 fc ff ff       	call   c0009ae6 <double_to_fp>
c0009ece:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ed1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ed4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ed7:	89 c1                	mov    ecx,eax
c0009ed9:	52                   	push   edx
c0009eda:	89 d8                	mov    eax,ebx
c0009edc:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ee0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ee3:	52                   	push   edx
c0009ee4:	52                   	push   edx
c0009ee5:	89 ea                	mov    edx,ebp
c0009ee7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eea:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009eed:	e8 f9 f7 ff ff       	call   c00096eb <calc_output_multi>
c0009ef2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009ef5:	d9 e8                	fld1   
c0009ef7:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009efb:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009efe:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	dd 14 24             	fst    QWORD PTR [esp]
c0009f08:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009f0c:	e8 e8 fb ff ff       	call   c0009af9 <fmod_one>
c0009f11:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f14:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f1b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f1f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f23:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f27:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f2a:	e8 31 58 01 00       	call   c001f760 <lrint>
c0009f2f:	0f af e8             	imul   ebp,eax
c0009f32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f36:	01 e8                	add    eax,ebp
c0009f38:	99                   	cdq    
c0009f39:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f3c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f3f:	e9 82 fe ff ff       	jmp    c0009dc6 <sinc_multichan_vari_process+0xfc>
c0009f44:	83 c4 3c             	add    esp,0x3c
c0009f47:	5b                   	pop    ebx
c0009f48:	5e                   	pop    esi
c0009f49:	5f                   	pop    edi
c0009f4a:	5d                   	pop    ebp
c0009f4b:	c3                   	ret    

c0009f4c <sinc_hex_vari_process>:
c0009f4c:	55                   	push   ebp
c0009f4d:	b8 05 00 00 00       	mov    eax,0x5
c0009f52:	57                   	push   edi
c0009f53:	56                   	push   esi
c0009f54:	53                   	push   ebx
c0009f55:	83 ec 3c             	sub    esp,0x3c
c0009f58:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f5c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f60:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f63:	85 db                	test   ebx,ebx
c0009f65:	0f 84 56 02 00 00    	je     c000a1c1 <sinc_hex_vari_process+0x275>
c0009f6b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f6e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f71:	0f af d0             	imul   edx,eax
c0009f74:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f77:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f7b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f82:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f85:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f8c:	dd 06                	fld    QWORD PTR [esi]
c0009f8e:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f92:	55                   	push   ebp
c0009f93:	55                   	push   ebp
c0009f94:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f97:	e8 5b f0 ff ff       	call   c0008ff7 <is_bad_src_ratio>
c0009f9c:	89 c2                	mov    edx,eax
c0009f9e:	58                   	pop    eax
c0009f9f:	59                   	pop    ecx
c0009fa0:	b8 16 00 00 00       	mov    eax,0x16
c0009fa5:	85 d2                	test   edx,edx
c0009fa7:	0f 85 14 02 00 00    	jne    c000a1c1 <sinc_hex_vari_process+0x275>
c0009fad:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009fb3:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fb6:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fb9:	dd 06                	fld    QWORD PTR [esi]
c0009fbb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fbe:	d8 d1                	fcom   st(1)
c0009fc0:	df e0                	fnstsw ax
c0009fc2:	9e                   	sahf   
c0009fc3:	76 0f                	jbe    c0009fd4 <sinc_hex_vari_process+0x88>
c0009fc5:	dd d8                	fstp   st(0)
c0009fc7:	d9 e8                	fld1   
c0009fc9:	d8 d9                	fcomp  st(1)
c0009fcb:	df e0                	fnstsw ax
c0009fcd:	9e                   	sahf   
c0009fce:	77 0f                	ja     c0009fdf <sinc_hex_vari_process+0x93>
c0009fd0:	dd d8                	fstp   st(0)
c0009fd2:	eb 11                	jmp    c0009fe5 <sinc_hex_vari_process+0x99>
c0009fd4:	dd d9                	fstp   st(1)
c0009fd6:	d9 e8                	fld1   
c0009fd8:	d8 d9                	fcomp  st(1)
c0009fda:	df e0                	fnstsw ax
c0009fdc:	9e                   	sahf   
c0009fdd:	76 04                	jbe    c0009fe3 <sinc_hex_vari_process+0x97>
c0009fdf:	de f9                	fdivp  st(1),st
c0009fe1:	eb 02                	jmp    c0009fe5 <sinc_hex_vari_process+0x99>
c0009fe3:	dd d8                	fstp   st(0)
c0009fe5:	83 ec 10             	sub    esp,0x10
c0009fe8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009feb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fee:	e8 6d 57 01 00       	call   c001f760 <lrint>
c0009ff3:	40                   	inc    eax
c0009ff4:	0f af c5             	imul   eax,ebp
c0009ff7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ffa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ffe:	dd 14 24             	fst    QWORD PTR [esp]
c000a001:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a005:	e8 ef fa ff ff       	call   c0009af9 <fmod_one>
c000a00a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a00d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a010:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a014:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a018:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a01c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a020:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a023:	e8 38 57 01 00       	call   c001f760 <lrint>
c000a028:	d9 e8                	fld1   
c000a02a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a02e:	0f af e8             	imul   ebp,eax
c000a031:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a035:	01 e8                	add    eax,ebp
c000a037:	99                   	cdq    
c000a038:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a03b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a03e:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a044:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a048:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a051:	7d 4b                	jge    c000a09e <sinc_hex_vari_process+0x152>
c000a053:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a056:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a059:	01 c8                	add    eax,ecx
c000a05b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a05e:	99                   	cdq    
c000a05f:	f7 f9                	idiv   ecx
c000a061:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a065:	7d 09                	jge    c000a070 <sinc_hex_vari_process+0x124>
c000a067:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a06a:	85 c0                	test   eax,eax
c000a06c:	79 57                	jns    c000a0c5 <sinc_hex_vari_process+0x179>
c000a06e:	eb 70                	jmp    c000a0e0 <sinc_hex_vari_process+0x194>
c000a070:	51                   	push   ecx
c000a071:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a075:	57                   	push   edi
c000a076:	53                   	push   ebx
c000a077:	e8 d4 fa ff ff       	call   c0009b50 <prepare_data>
c000a07c:	83 c4 10             	add    esp,0x10
c000a07f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a082:	85 c0                	test   eax,eax
c000a084:	0f 85 37 01 00 00    	jne    c000a1c1 <sinc_hex_vari_process+0x275>
c000a08a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a08d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a090:	01 c8                	add    eax,ecx
c000a092:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a095:	99                   	cdq    
c000a096:	f7 f9                	idiv   ecx
c000a098:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a09c:	7c c9                	jl     c000a067 <sinc_hex_vari_process+0x11b>
c000a09e:	dd 04 24             	fld    QWORD PTR [esp]
c000a0a1:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a0a4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a0a8:	dd 1e                	fstp   QWORD PTR [esi]
c000a0aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0ad:	99                   	cdq    
c000a0ae:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0b1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0b7:	99                   	cdq    
c000a0b8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0bb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0be:	31 c0                	xor    eax,eax
c000a0c0:	e9 fc 00 00 00       	jmp    c000a1c1 <sinc_hex_vari_process+0x275>
c000a0c5:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c8:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0cf:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0d3:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0d7:	d9 c9                	fxch   st(1)
c000a0d9:	de d9                	fcompp 
c000a0db:	df e0                	fnstsw ax
c000a0dd:	9e                   	sahf   
c000a0de:	73 be                	jae    c000a09e <sinc_hex_vari_process+0x152>
c000a0e0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0e4:	7e 2f                	jle    c000a115 <sinc_hex_vari_process+0x1c9>
c000a0e6:	dd 06                	fld    QWORD PTR [esi]
c000a0e8:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0eb:	83 ec 10             	sub    esp,0x10
c000a0ee:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0f1:	e8 4a 56 01 00       	call   c001f740 <fabs>
c000a0f6:	83 c4 10             	add    esp,0x10
c000a0f9:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a0ff:	df e0                	fnstsw ax
c000a101:	9e                   	sahf   
c000a102:	76 11                	jbe    c000a115 <sinc_hex_vari_process+0x1c9>
c000a104:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a107:	dc 26                	fsub   QWORD PTR [esi]
c000a109:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a10c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a10f:	dc 06                	fadd   QWORD PTR [esi]
c000a111:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a115:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a118:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a11c:	d9 e8                	fld1   
c000a11e:	d8 d9                	fcomp  st(1)
c000a120:	df e0                	fnstsw ax
c000a122:	9e                   	sahf   
c000a123:	77 04                	ja     c000a129 <sinc_hex_vari_process+0x1dd>
c000a125:	dd d8                	fstp   st(0)
c000a127:	d9 e8                	fld1   
c000a129:	de c9                	fmulp  st(1),st
c000a12b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a12f:	50                   	push   eax
c000a130:	50                   	push   eax
c000a131:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a135:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a139:	e8 a8 f9 ff ff       	call   c0009ae6 <double_to_fp>
c000a13e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a142:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a146:	89 c5                	mov    ebp,eax
c000a148:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a14b:	e8 96 f9 ff ff       	call   c0009ae6 <double_to_fp>
c000a150:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a153:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a156:	83 c4 0c             	add    esp,0xc
c000a159:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a15c:	89 c1                	mov    ecx,eax
c000a15e:	52                   	push   edx
c000a15f:	89 d8                	mov    eax,ebx
c000a161:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a165:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a168:	52                   	push   edx
c000a169:	52                   	push   edx
c000a16a:	89 ea                	mov    edx,ebp
c000a16c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a16f:	e8 db f2 ff ff       	call   c000944f <calc_output_hex>
c000a174:	d9 e8                	fld1   
c000a176:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a17a:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a17e:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a182:	dd 14 24             	fst    QWORD PTR [esp]
c000a185:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a189:	e8 6b f9 ff ff       	call   c0009af9 <fmod_one>
c000a18e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a191:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a194:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a198:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a19c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a1a0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1a4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a7:	e8 b4 55 01 00       	call   c001f760 <lrint>
c000a1ac:	0f af e8             	imul   ebp,eax
c000a1af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1b3:	01 e8                	add    eax,ebp
c000a1b5:	99                   	cdq    
c000a1b6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1b9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1bc:	e9 87 fe ff ff       	jmp    c000a048 <sinc_hex_vari_process+0xfc>
c000a1c1:	83 c4 3c             	add    esp,0x3c
c000a1c4:	5b                   	pop    ebx
c000a1c5:	5e                   	pop    esi
c000a1c6:	5f                   	pop    edi
c000a1c7:	5d                   	pop    ebp
c000a1c8:	c3                   	ret    

c000a1c9 <sinc_quad_vari_process>:
c000a1c9:	55                   	push   ebp
c000a1ca:	b8 05 00 00 00       	mov    eax,0x5
c000a1cf:	57                   	push   edi
c000a1d0:	56                   	push   esi
c000a1d1:	53                   	push   ebx
c000a1d2:	83 ec 3c             	sub    esp,0x3c
c000a1d5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1d9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1dd:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1e0:	85 db                	test   ebx,ebx
c000a1e2:	0f 84 56 02 00 00    	je     c000a43e <sinc_quad_vari_process+0x275>
c000a1e8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1eb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1ee:	0f af d0             	imul   edx,eax
c000a1f1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1f4:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a202:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a209:	dd 06                	fld    QWORD PTR [esi]
c000a20b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a20f:	55                   	push   ebp
c000a210:	55                   	push   ebp
c000a211:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a214:	e8 de ed ff ff       	call   c0008ff7 <is_bad_src_ratio>
c000a219:	89 c2                	mov    edx,eax
c000a21b:	58                   	pop    eax
c000a21c:	59                   	pop    ecx
c000a21d:	b8 16 00 00 00       	mov    eax,0x16
c000a222:	85 d2                	test   edx,edx
c000a224:	0f 85 14 02 00 00    	jne    c000a43e <sinc_quad_vari_process+0x275>
c000a22a:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a230:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a233:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a236:	dd 06                	fld    QWORD PTR [esi]
c000a238:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a23b:	d8 d1                	fcom   st(1)
c000a23d:	df e0                	fnstsw ax
c000a23f:	9e                   	sahf   
c000a240:	76 0f                	jbe    c000a251 <sinc_quad_vari_process+0x88>
c000a242:	dd d8                	fstp   st(0)
c000a244:	d9 e8                	fld1   
c000a246:	d8 d9                	fcomp  st(1)
c000a248:	df e0                	fnstsw ax
c000a24a:	9e                   	sahf   
c000a24b:	77 0f                	ja     c000a25c <sinc_quad_vari_process+0x93>
c000a24d:	dd d8                	fstp   st(0)
c000a24f:	eb 11                	jmp    c000a262 <sinc_quad_vari_process+0x99>
c000a251:	dd d9                	fstp   st(1)
c000a253:	d9 e8                	fld1   
c000a255:	d8 d9                	fcomp  st(1)
c000a257:	df e0                	fnstsw ax
c000a259:	9e                   	sahf   
c000a25a:	76 04                	jbe    c000a260 <sinc_quad_vari_process+0x97>
c000a25c:	de f9                	fdivp  st(1),st
c000a25e:	eb 02                	jmp    c000a262 <sinc_quad_vari_process+0x99>
c000a260:	dd d8                	fstp   st(0)
c000a262:	83 ec 10             	sub    esp,0x10
c000a265:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a268:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a26b:	e8 f0 54 01 00       	call   c001f760 <lrint>
c000a270:	40                   	inc    eax
c000a271:	0f af c5             	imul   eax,ebp
c000a274:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a277:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a27b:	dd 14 24             	fst    QWORD PTR [esp]
c000a27e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a282:	e8 72 f8 ff ff       	call   c0009af9 <fmod_one>
c000a287:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a28a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a28d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a291:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a295:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a299:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a29d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2a0:	e8 bb 54 01 00       	call   c001f760 <lrint>
c000a2a5:	d9 e8                	fld1   
c000a2a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2ab:	0f af e8             	imul   ebp,eax
c000a2ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2b2:	01 e8                	add    eax,ebp
c000a2b4:	99                   	cdq    
c000a2b5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2b8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2bb:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a2c1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c8:	83 c4 10             	add    esp,0x10
c000a2cb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2ce:	7d 4b                	jge    c000a31b <sinc_quad_vari_process+0x152>
c000a2d0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2d6:	01 c8                	add    eax,ecx
c000a2d8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2db:	99                   	cdq    
c000a2dc:	f7 f9                	idiv   ecx
c000a2de:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2e2:	7d 09                	jge    c000a2ed <sinc_quad_vari_process+0x124>
c000a2e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2e7:	85 c0                	test   eax,eax
c000a2e9:	79 57                	jns    c000a342 <sinc_quad_vari_process+0x179>
c000a2eb:	eb 70                	jmp    c000a35d <sinc_quad_vari_process+0x194>
c000a2ed:	51                   	push   ecx
c000a2ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2f2:	57                   	push   edi
c000a2f3:	53                   	push   ebx
c000a2f4:	e8 57 f8 ff ff       	call   c0009b50 <prepare_data>
c000a2f9:	83 c4 10             	add    esp,0x10
c000a2fc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2ff:	85 c0                	test   eax,eax
c000a301:	0f 85 37 01 00 00    	jne    c000a43e <sinc_quad_vari_process+0x275>
c000a307:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a30a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a30d:	01 c8                	add    eax,ecx
c000a30f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a312:	99                   	cdq    
c000a313:	f7 f9                	idiv   ecx
c000a315:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a319:	7c c9                	jl     c000a2e4 <sinc_quad_vari_process+0x11b>
c000a31b:	dd 04 24             	fld    QWORD PTR [esp]
c000a31e:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a321:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a325:	dd 1e                	fstp   QWORD PTR [esi]
c000a327:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a32a:	99                   	cdq    
c000a32b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a32e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a331:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a334:	99                   	cdq    
c000a335:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a338:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a33b:	31 c0                	xor    eax,eax
c000a33d:	e9 fc 00 00 00       	jmp    c000a43e <sinc_quad_vari_process+0x275>
c000a342:	dd 04 24             	fld    QWORD PTR [esp]
c000a345:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a348:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a34c:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a350:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a354:	d9 c9                	fxch   st(1)
c000a356:	de d9                	fcompp 
c000a358:	df e0                	fnstsw ax
c000a35a:	9e                   	sahf   
c000a35b:	73 be                	jae    c000a31b <sinc_quad_vari_process+0x152>
c000a35d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a361:	7e 2f                	jle    c000a392 <sinc_quad_vari_process+0x1c9>
c000a363:	dd 06                	fld    QWORD PTR [esi]
c000a365:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a368:	83 ec 10             	sub    esp,0x10
c000a36b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a36e:	e8 cd 53 01 00       	call   c001f740 <fabs>
c000a373:	83 c4 10             	add    esp,0x10
c000a376:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a37c:	df e0                	fnstsw ax
c000a37e:	9e                   	sahf   
c000a37f:	76 11                	jbe    c000a392 <sinc_quad_vari_process+0x1c9>
c000a381:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a384:	dc 26                	fsub   QWORD PTR [esi]
c000a386:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a389:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a38c:	dc 06                	fadd   QWORD PTR [esi]
c000a38e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a392:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a395:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a399:	d9 e8                	fld1   
c000a39b:	d8 d9                	fcomp  st(1)
c000a39d:	df e0                	fnstsw ax
c000a39f:	9e                   	sahf   
c000a3a0:	77 04                	ja     c000a3a6 <sinc_quad_vari_process+0x1dd>
c000a3a2:	dd d8                	fstp   st(0)
c000a3a4:	d9 e8                	fld1   
c000a3a6:	de c9                	fmulp  st(1),st
c000a3a8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3ac:	50                   	push   eax
c000a3ad:	50                   	push   eax
c000a3ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b6:	e8 2b f7 ff ff       	call   c0009ae6 <double_to_fp>
c000a3bb:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3bf:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3c3:	89 c5                	mov    ebp,eax
c000a3c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c8:	e8 19 f7 ff ff       	call   c0009ae6 <double_to_fp>
c000a3cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3d0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3d3:	83 c4 0c             	add    esp,0xc
c000a3d6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3d9:	89 c1                	mov    ecx,eax
c000a3db:	52                   	push   edx
c000a3dc:	89 d8                	mov    eax,ebx
c000a3de:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3e2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e5:	52                   	push   edx
c000a3e6:	52                   	push   edx
c000a3e7:	89 ea                	mov    edx,ebp
c000a3e9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3ec:	e8 99 ee ff ff       	call   c000928a <calc_output_quad>
c000a3f1:	d9 e8                	fld1   
c000a3f3:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3f7:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3fb:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3ff:	dd 14 24             	fst    QWORD PTR [esp]
c000a402:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a406:	e8 ee f6 ff ff       	call   c0009af9 <fmod_one>
c000a40b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a40e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a415:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a419:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a41d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a421:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a424:	e8 37 53 01 00       	call   c001f760 <lrint>
c000a429:	0f af e8             	imul   ebp,eax
c000a42c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a430:	01 e8                	add    eax,ebp
c000a432:	99                   	cdq    
c000a433:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a436:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a439:	e9 87 fe ff ff       	jmp    c000a2c5 <sinc_quad_vari_process+0xfc>
c000a43e:	83 c4 3c             	add    esp,0x3c
c000a441:	5b                   	pop    ebx
c000a442:	5e                   	pop    esi
c000a443:	5f                   	pop    edi
c000a444:	5d                   	pop    ebp
c000a445:	c3                   	ret    

c000a446 <sinc_stereo_vari_process>:
c000a446:	55                   	push   ebp
c000a447:	b8 05 00 00 00       	mov    eax,0x5
c000a44c:	57                   	push   edi
c000a44d:	56                   	push   esi
c000a44e:	53                   	push   ebx
c000a44f:	83 ec 3c             	sub    esp,0x3c
c000a452:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a456:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a45a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a45d:	85 db                	test   ebx,ebx
c000a45f:	0f 84 56 02 00 00    	je     c000a6bb <sinc_stereo_vari_process+0x275>
c000a465:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a468:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a46b:	0f af d0             	imul   edx,eax
c000a46e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a471:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a475:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a47c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a47f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a486:	dd 06                	fld    QWORD PTR [esi]
c000a488:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a48c:	55                   	push   ebp
c000a48d:	55                   	push   ebp
c000a48e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a491:	e8 61 eb ff ff       	call   c0008ff7 <is_bad_src_ratio>
c000a496:	89 c2                	mov    edx,eax
c000a498:	58                   	pop    eax
c000a499:	59                   	pop    ecx
c000a49a:	b8 16 00 00 00       	mov    eax,0x16
c000a49f:	85 d2                	test   edx,edx
c000a4a1:	0f 85 14 02 00 00    	jne    c000a6bb <sinc_stereo_vari_process+0x275>
c000a4a7:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a4ad:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4b0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4b3:	dd 06                	fld    QWORD PTR [esi]
c000a4b5:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4b8:	d8 d1                	fcom   st(1)
c000a4ba:	df e0                	fnstsw ax
c000a4bc:	9e                   	sahf   
c000a4bd:	76 0f                	jbe    c000a4ce <sinc_stereo_vari_process+0x88>
c000a4bf:	dd d8                	fstp   st(0)
c000a4c1:	d9 e8                	fld1   
c000a4c3:	d8 d9                	fcomp  st(1)
c000a4c5:	df e0                	fnstsw ax
c000a4c7:	9e                   	sahf   
c000a4c8:	77 0f                	ja     c000a4d9 <sinc_stereo_vari_process+0x93>
c000a4ca:	dd d8                	fstp   st(0)
c000a4cc:	eb 11                	jmp    c000a4df <sinc_stereo_vari_process+0x99>
c000a4ce:	dd d9                	fstp   st(1)
c000a4d0:	d9 e8                	fld1   
c000a4d2:	d8 d9                	fcomp  st(1)
c000a4d4:	df e0                	fnstsw ax
c000a4d6:	9e                   	sahf   
c000a4d7:	76 04                	jbe    c000a4dd <sinc_stereo_vari_process+0x97>
c000a4d9:	de f9                	fdivp  st(1),st
c000a4db:	eb 02                	jmp    c000a4df <sinc_stereo_vari_process+0x99>
c000a4dd:	dd d8                	fstp   st(0)
c000a4df:	83 ec 10             	sub    esp,0x10
c000a4e2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4e5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e8:	e8 73 52 01 00       	call   c001f760 <lrint>
c000a4ed:	40                   	inc    eax
c000a4ee:	0f af c5             	imul   eax,ebp
c000a4f1:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4f8:	dd 14 24             	fst    QWORD PTR [esp]
c000a4fb:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4ff:	e8 f5 f5 ff ff       	call   c0009af9 <fmod_one>
c000a504:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a507:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a50a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a50e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a512:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a516:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a51a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a51d:	e8 3e 52 01 00       	call   c001f760 <lrint>
c000a522:	d9 e8                	fld1   
c000a524:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a528:	0f af e8             	imul   ebp,eax
c000a52b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a52f:	01 e8                	add    eax,ebp
c000a531:	99                   	cdq    
c000a532:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a535:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a538:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a53e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a542:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a54b:	7d 4b                	jge    c000a598 <sinc_stereo_vari_process+0x152>
c000a54d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a550:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a553:	01 c8                	add    eax,ecx
c000a555:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a558:	99                   	cdq    
c000a559:	f7 f9                	idiv   ecx
c000a55b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a55f:	7d 09                	jge    c000a56a <sinc_stereo_vari_process+0x124>
c000a561:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a564:	85 c0                	test   eax,eax
c000a566:	79 57                	jns    c000a5bf <sinc_stereo_vari_process+0x179>
c000a568:	eb 70                	jmp    c000a5da <sinc_stereo_vari_process+0x194>
c000a56a:	51                   	push   ecx
c000a56b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a56f:	57                   	push   edi
c000a570:	53                   	push   ebx
c000a571:	e8 da f5 ff ff       	call   c0009b50 <prepare_data>
c000a576:	83 c4 10             	add    esp,0x10
c000a579:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a57c:	85 c0                	test   eax,eax
c000a57e:	0f 85 37 01 00 00    	jne    c000a6bb <sinc_stereo_vari_process+0x275>
c000a584:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a587:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a58a:	01 c8                	add    eax,ecx
c000a58c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a58f:	99                   	cdq    
c000a590:	f7 f9                	idiv   ecx
c000a592:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a596:	7c c9                	jl     c000a561 <sinc_stereo_vari_process+0x11b>
c000a598:	dd 04 24             	fld    QWORD PTR [esp]
c000a59b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a59e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5a2:	dd 1e                	fstp   QWORD PTR [esi]
c000a5a4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5a7:	99                   	cdq    
c000a5a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5ab:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5ae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5b1:	99                   	cdq    
c000a5b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5b8:	31 c0                	xor    eax,eax
c000a5ba:	e9 fc 00 00 00       	jmp    c000a6bb <sinc_stereo_vari_process+0x275>
c000a5bf:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c2:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5cd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5d1:	d9 c9                	fxch   st(1)
c000a5d3:	de d9                	fcompp 
c000a5d5:	df e0                	fnstsw ax
c000a5d7:	9e                   	sahf   
c000a5d8:	73 be                	jae    c000a598 <sinc_stereo_vari_process+0x152>
c000a5da:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5de:	7e 2f                	jle    c000a60f <sinc_stereo_vari_process+0x1c9>
c000a5e0:	dd 06                	fld    QWORD PTR [esi]
c000a5e2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5e5:	83 ec 10             	sub    esp,0x10
c000a5e8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5eb:	e8 50 51 01 00       	call   c001f740 <fabs>
c000a5f0:	83 c4 10             	add    esp,0x10
c000a5f3:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a5f9:	df e0                	fnstsw ax
c000a5fb:	9e                   	sahf   
c000a5fc:	76 11                	jbe    c000a60f <sinc_stereo_vari_process+0x1c9>
c000a5fe:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a601:	dc 26                	fsub   QWORD PTR [esi]
c000a603:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a606:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a609:	dc 06                	fadd   QWORD PTR [esi]
c000a60b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a60f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a612:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a616:	d9 e8                	fld1   
c000a618:	d8 d9                	fcomp  st(1)
c000a61a:	df e0                	fnstsw ax
c000a61c:	9e                   	sahf   
c000a61d:	77 04                	ja     c000a623 <sinc_stereo_vari_process+0x1dd>
c000a61f:	dd d8                	fstp   st(0)
c000a621:	d9 e8                	fld1   
c000a623:	de c9                	fmulp  st(1),st
c000a625:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a629:	50                   	push   eax
c000a62a:	50                   	push   eax
c000a62b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a633:	e8 ae f4 ff ff       	call   c0009ae6 <double_to_fp>
c000a638:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a63c:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a640:	89 c5                	mov    ebp,eax
c000a642:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a645:	e8 9c f4 ff ff       	call   c0009ae6 <double_to_fp>
c000a64a:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a64d:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a650:	83 c4 0c             	add    esp,0xc
c000a653:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a656:	89 c1                	mov    ecx,eax
c000a658:	52                   	push   edx
c000a659:	89 d8                	mov    eax,ebx
c000a65b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a65f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a662:	52                   	push   edx
c000a663:	52                   	push   edx
c000a664:	89 ea                	mov    edx,ebp
c000a666:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a669:	e8 da ea ff ff       	call   c0009148 <calc_output_stereo>
c000a66e:	d9 e8                	fld1   
c000a670:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a674:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a678:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a67c:	dd 14 24             	fst    QWORD PTR [esp]
c000a67f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a683:	e8 71 f4 ff ff       	call   c0009af9 <fmod_one>
c000a688:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a68b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a68e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a692:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a696:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a69a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a69e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a1:	e8 ba 50 01 00       	call   c001f760 <lrint>
c000a6a6:	0f af e8             	imul   ebp,eax
c000a6a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6ad:	01 e8                	add    eax,ebp
c000a6af:	99                   	cdq    
c000a6b0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6b6:	e9 87 fe ff ff       	jmp    c000a542 <sinc_stereo_vari_process+0xfc>
c000a6bb:	83 c4 3c             	add    esp,0x3c
c000a6be:	5b                   	pop    ebx
c000a6bf:	5e                   	pop    esi
c000a6c0:	5f                   	pop    edi
c000a6c1:	5d                   	pop    ebp
c000a6c2:	c3                   	ret    

c000a6c3 <sinc_mono_vari_process>:
c000a6c3:	55                   	push   ebp
c000a6c4:	b8 05 00 00 00       	mov    eax,0x5
c000a6c9:	57                   	push   edi
c000a6ca:	56                   	push   esi
c000a6cb:	53                   	push   ebx
c000a6cc:	83 ec 3c             	sub    esp,0x3c
c000a6cf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6d3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6d7:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6da:	85 db                	test   ebx,ebx
c000a6dc:	0f 84 55 02 00 00    	je     c000a937 <sinc_mono_vari_process+0x274>
c000a6e2:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6e5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6e8:	0f af d0             	imul   edx,eax
c000a6eb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6ee:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6f9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6fc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a703:	dd 06                	fld    QWORD PTR [esi]
c000a705:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a709:	51                   	push   ecx
c000a70a:	51                   	push   ecx
c000a70b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a70e:	e8 e4 e8 ff ff       	call   c0008ff7 <is_bad_src_ratio>
c000a713:	5d                   	pop    ebp
c000a714:	89 c2                	mov    edx,eax
c000a716:	58                   	pop    eax
c000a717:	85 d2                	test   edx,edx
c000a719:	b8 16 00 00 00       	mov    eax,0x16
c000a71e:	0f 85 13 02 00 00    	jne    c000a937 <sinc_mono_vari_process+0x274>
c000a724:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a72a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a72d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a730:	dd 06                	fld    QWORD PTR [esi]
c000a732:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a735:	d8 d1                	fcom   st(1)
c000a737:	df e0                	fnstsw ax
c000a739:	9e                   	sahf   
c000a73a:	76 0f                	jbe    c000a74b <sinc_mono_vari_process+0x88>
c000a73c:	dd d8                	fstp   st(0)
c000a73e:	d9 e8                	fld1   
c000a740:	d8 d9                	fcomp  st(1)
c000a742:	df e0                	fnstsw ax
c000a744:	9e                   	sahf   
c000a745:	77 0f                	ja     c000a756 <sinc_mono_vari_process+0x93>
c000a747:	dd d8                	fstp   st(0)
c000a749:	eb 11                	jmp    c000a75c <sinc_mono_vari_process+0x99>
c000a74b:	dd d9                	fstp   st(1)
c000a74d:	d9 e8                	fld1   
c000a74f:	d8 d9                	fcomp  st(1)
c000a751:	df e0                	fnstsw ax
c000a753:	9e                   	sahf   
c000a754:	76 04                	jbe    c000a75a <sinc_mono_vari_process+0x97>
c000a756:	de f9                	fdivp  st(1),st
c000a758:	eb 02                	jmp    c000a75c <sinc_mono_vari_process+0x99>
c000a75a:	dd d8                	fstp   st(0)
c000a75c:	83 ec 10             	sub    esp,0x10
c000a75f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a762:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a765:	e8 f6 4f 01 00       	call   c001f760 <lrint>
c000a76a:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a76d:	40                   	inc    eax
c000a76e:	dd 14 24             	fst    QWORD PTR [esp]
c000a771:	0f af e8             	imul   ebp,eax
c000a774:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a778:	e8 7c f3 ff ff       	call   c0009af9 <fmod_one>
c000a77d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a780:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a784:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a787:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a78b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a78f:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a793:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a797:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a79a:	e8 c1 4f 01 00       	call   c001f760 <lrint>
c000a79f:	d9 e8                	fld1   
c000a7a1:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7a5:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a7aa:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a7ae:	99                   	cdq    
c000a7af:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7b2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7b5:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a7bb:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7c2:	83 c4 10             	add    esp,0x10
c000a7c5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7c8:	7d 44                	jge    c000a80e <sinc_mono_vari_process+0x14b>
c000a7ca:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7d0:	01 c8                	add    eax,ecx
c000a7d2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7d5:	99                   	cdq    
c000a7d6:	f7 f9                	idiv   ecx
c000a7d8:	39 d5                	cmp    ebp,edx
c000a7da:	7d 09                	jge    c000a7e5 <sinc_mono_vari_process+0x122>
c000a7dc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7df:	85 c0                	test   eax,eax
c000a7e1:	79 52                	jns    c000a835 <sinc_mono_vari_process+0x172>
c000a7e3:	eb 6b                	jmp    c000a850 <sinc_mono_vari_process+0x18d>
c000a7e5:	52                   	push   edx
c000a7e6:	55                   	push   ebp
c000a7e7:	57                   	push   edi
c000a7e8:	53                   	push   ebx
c000a7e9:	e8 62 f3 ff ff       	call   c0009b50 <prepare_data>
c000a7ee:	83 c4 10             	add    esp,0x10
c000a7f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7f4:	85 c0                	test   eax,eax
c000a7f6:	0f 85 3b 01 00 00    	jne    c000a937 <sinc_mono_vari_process+0x274>
c000a7fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a802:	01 c8                	add    eax,ecx
c000a804:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a807:	99                   	cdq    
c000a808:	f7 f9                	idiv   ecx
c000a80a:	39 d5                	cmp    ebp,edx
c000a80c:	7c ce                	jl     c000a7dc <sinc_mono_vari_process+0x119>
c000a80e:	dd 04 24             	fld    QWORD PTR [esp]
c000a811:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a814:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a818:	dd 1e                	fstp   QWORD PTR [esi]
c000a81a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a81d:	99                   	cdq    
c000a81e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a821:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a824:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a827:	99                   	cdq    
c000a828:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a82b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a82e:	31 c0                	xor    eax,eax
c000a830:	e9 02 01 00 00       	jmp    c000a937 <sinc_mono_vari_process+0x274>
c000a835:	dd 04 24             	fld    QWORD PTR [esp]
c000a838:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a83b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a83f:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a843:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a847:	d9 c9                	fxch   st(1)
c000a849:	de d9                	fcompp 
c000a84b:	df e0                	fnstsw ax
c000a84d:	9e                   	sahf   
c000a84e:	77 be                	ja     c000a80e <sinc_mono_vari_process+0x14b>
c000a850:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a854:	7e 2f                	jle    c000a885 <sinc_mono_vari_process+0x1c2>
c000a856:	dd 06                	fld    QWORD PTR [esi]
c000a858:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a85b:	83 ec 10             	sub    esp,0x10
c000a85e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a861:	e8 da 4e 01 00       	call   c001f740 <fabs>
c000a866:	83 c4 10             	add    esp,0x10
c000a869:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a86f:	df e0                	fnstsw ax
c000a871:	9e                   	sahf   
c000a872:	76 11                	jbe    c000a885 <sinc_mono_vari_process+0x1c2>
c000a874:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a877:	dc 26                	fsub   QWORD PTR [esi]
c000a879:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a87c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a87f:	dc 06                	fadd   QWORD PTR [esi]
c000a881:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a885:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a888:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a88c:	d9 e8                	fld1   
c000a88e:	d8 d9                	fcomp  st(1)
c000a890:	df e0                	fnstsw ax
c000a892:	9e                   	sahf   
c000a893:	77 04                	ja     c000a899 <sinc_mono_vari_process+0x1d6>
c000a895:	dd d8                	fstp   st(0)
c000a897:	d9 e8                	fld1   
c000a899:	de c9                	fmulp  st(1),st
c000a89b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a89f:	50                   	push   eax
c000a8a0:	50                   	push   eax
c000a8a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a9:	e8 38 f2 ff ff       	call   c0009ae6 <double_to_fp>
c000a8ae:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8b2:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8b6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8ba:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8bd:	e8 24 f2 ff ff       	call   c0009ae6 <double_to_fp>
c000a8c2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8c6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8ca:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8cd:	89 c1                	mov    ecx,eax
c000a8cf:	89 d8                	mov    eax,ebx
c000a8d1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8d5:	e8 89 e7 ff ff       	call   c0009063 <calc_output_single>
c000a8da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8dd:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8e1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8e4:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8e7:	d9 e8                	fld1   
c000a8e9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8ed:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8f0:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8f4:	dd 14 24             	fst    QWORD PTR [esp]
c000a8f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8fb:	e8 f9 f1 ff ff       	call   c0009af9 <fmod_one>
c000a900:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a907:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a90a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a90e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a912:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a916:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a91a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a91d:	e8 3e 4e 01 00       	call   c001f760 <lrint>
c000a922:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a927:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a92b:	99                   	cdq    
c000a92c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a92f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a932:	e9 88 fe ff ff       	jmp    c000a7bf <sinc_mono_vari_process+0xfc>
c000a937:	83 c4 3c             	add    esp,0x3c
c000a93a:	5b                   	pop    ebx
c000a93b:	5e                   	pop    esi
c000a93c:	5f                   	pop    edi
c000a93d:	5d                   	pop    ebp
c000a93e:	c3                   	ret    

c000a93f <sinc_get_name>:
c000a93f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a943:	31 c0                	xor    eax,eax
c000a945:	83 fa 02             	cmp    edx,0x2
c000a948:	77 07                	ja     c000a951 <sinc_get_name+0x12>
c000a94a:	8b 04 95 60 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0a0]
c000a951:	c3                   	ret    

c000a952 <sinc_get_description>:
c000a952:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a956:	31 c0                	xor    eax,eax
c000a958:	83 fa 02             	cmp    edx,0x2
c000a95b:	77 07                	ja     c000a964 <sinc_get_description+0x12>
c000a95d:	8b 04 95 54 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0ac]
c000a964:	c3                   	ret    

c000a965 <sinc_set_converter>:
c000a965:	53                   	push   ebx
c000a966:	81 ec 58 08 00 00    	sub    esp,0x858
c000a96c:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a973:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a976:	85 c0                	test   eax,eax
c000a978:	74 13                	je     c000a98d <sinc_set_converter+0x28>
c000a97a:	83 ec 0c             	sub    esp,0xc
c000a97d:	50                   	push   eax
c000a97e:	e8 7e 16 00 00       	call   c000c001 <free>
c000a983:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a98a:	83 c4 10             	add    esp,0x10
c000a98d:	50                   	push   eax
c000a98e:	68 44 08 00 00       	push   0x844
c000a993:	6a 00                	push   0x0
c000a995:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a999:	50                   	push   eax
c000a99a:	e8 33 5d ff ff       	call   c00006d2 <memset>
c000a99f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a9a2:	83 c4 10             	add    esp,0x10
c000a9a5:	b8 0b 00 00 00       	mov    eax,0xb
c000a9aa:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a9b0:	7f 6e                	jg     c000aa20 <sinc_set_converter+0xbb>
c000a9b2:	83 fa 01             	cmp    edx,0x1
c000a9b5:	75 10                	jne    c000a9c7 <sinc_set_converter+0x62>
c000a9b7:	c7 43 24 c3 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6c3
c000a9be:	c7 43 20 c3 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6c3
c000a9c5:	eb 4d                	jmp    c000aa14 <sinc_set_converter+0xaf>
c000a9c7:	83 fa 02             	cmp    edx,0x2
c000a9ca:	75 10                	jne    c000a9dc <sinc_set_converter+0x77>
c000a9cc:	c7 43 24 46 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a446
c000a9d3:	c7 43 20 46 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a446
c000a9da:	eb 38                	jmp    c000aa14 <sinc_set_converter+0xaf>
c000a9dc:	83 fa 04             	cmp    edx,0x4
c000a9df:	75 10                	jne    c000a9f1 <sinc_set_converter+0x8c>
c000a9e1:	c7 43 24 c9 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1c9
c000a9e8:	c7 43 20 c9 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1c9
c000a9ef:	eb 23                	jmp    c000aa14 <sinc_set_converter+0xaf>
c000a9f1:	83 fa 06             	cmp    edx,0x6
c000a9f4:	75 10                	jne    c000aa06 <sinc_set_converter+0xa1>
c000a9f6:	c7 43 24 4c 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f4c
c000a9fd:	c7 43 20 4c 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f4c
c000aa04:	eb 0e                	jmp    c000aa14 <sinc_set_converter+0xaf>
c000aa06:	c7 43 24 ca 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cca
c000aa0d:	c7 43 20 ca 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cca
c000aa14:	c7 43 28 88 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009688
c000aa1b:	b8 0a 00 00 00       	mov    eax,0xa
c000aa20:	81 c4 58 08 00 00    	add    esp,0x858
c000aa26:	5b                   	pop    ebx
c000aa27:	c3                   	ret    

c000aa28 <is_bad_src_ratio>:
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa3a:	dd 04 24             	fld    QWORD PTR [esp]
c000aa3d:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000aa43:	de d9                	fcompp 
c000aa45:	df e0                	fnstsw ax
c000aa47:	f6 c4 45             	test   ah,0x45
c000aa4a:	74 10                	je     c000aa5c <is_bad_src_ratio+0x34>
c000aa4c:	dd 04 24             	fld    QWORD PTR [esp]
c000aa4f:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000aa55:	df e0                	fnstsw ax
c000aa57:	f6 c4 45             	test   ah,0x45
c000aa5a:	75 07                	jne    c000aa63 <is_bad_src_ratio+0x3b>
c000aa5c:	b8 01 00 00 00       	mov    eax,0x1
c000aa61:	eb 05                	jmp    c000aa68 <is_bad_src_ratio+0x40>
c000aa63:	b8 00 00 00 00       	mov    eax,0x0
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	c3                   	ret    

c000aa6c <fmod_one>:
c000aa6c:	83 ec 2c             	sub    esp,0x2c
c000aa6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	e8 d1 4c 01 00       	call   c001f760 <lrint>
c000aa8f:	83 c4 10             	add    esp,0x10
c000aa92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa96:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa9a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa9e:	de e1                	fsubrp st(1),st
c000aaa0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaa4:	d9 ee                	fldz   
c000aaa6:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aaaa:	df e0                	fnstsw ax
c000aaac:	f6 c4 45             	test   ah,0x45
c000aaaf:	75 0a                	jne    c000aabb <fmod_one+0x4f>
c000aab1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aab5:	d9 e8                	fld1   
c000aab7:	de c1                	faddp  st(1),st
c000aab9:	eb 04                	jmp    c000aabf <fmod_one+0x53>
c000aabb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aabf:	83 c4 2c             	add    esp,0x2c
c000aac2:	c3                   	ret    

c000aac3 <zoh_vari_process>:
c000aac3:	55                   	push   ebp
c000aac4:	57                   	push   edi
c000aac5:	56                   	push   esi
c000aac6:	53                   	push   ebx
c000aac7:	83 ec 2c             	sub    esp,0x2c
c000aaca:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aace:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aad2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aada:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aade:	0f 8e 30 02 00 00    	jle    c000ad14 <zoh_vari_process+0x251>
c000aae4:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aae7:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aaef:	85 db                	test   ebx,ebx
c000aaf1:	0f 84 1d 02 00 00    	je     c000ad14 <zoh_vari_process+0x251>
c000aaf7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aafa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aafe:	74 19                	je     c000ab19 <zoh_vari_process+0x56>
c000ab00:	31 d2                	xor    edx,edx
c000ab02:	39 c2                	cmp    edx,eax
c000ab04:	7d 0c                	jge    c000ab12 <zoh_vari_process+0x4f>
c000ab06:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ab08:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ab0b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ab0f:	42                   	inc    edx
c000ab10:	eb f0                	jmp    c000ab02 <zoh_vari_process+0x3f>
c000ab12:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab19:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab1c:	0f af d0             	imul   edx,eax
c000ab1f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab22:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab26:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab2d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab30:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab37:	dd 07                	fld    QWORD PTR [edi]
c000ab39:	dd 14 24             	fst    QWORD PTR [esp]
c000ab3c:	50                   	push   eax
c000ab3d:	50                   	push   eax
c000ab3e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab41:	e8 e2 fe ff ff       	call   c000aa28 <is_bad_src_ratio>
c000ab46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab4a:	5a                   	pop    edx
c000ab4b:	59                   	pop    ecx
c000ab4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab51:	0f 85 b5 01 00 00    	jne    c000ad0c <zoh_vari_process+0x249>
c000ab57:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab5a:	d9 e8                	fld1   
c000ab5c:	d8 d1                	fcom   st(1)
c000ab5e:	df e0                	fnstsw ax
c000ab60:	9e                   	sahf   
c000ab61:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab65:	0f 86 83 00 00 00    	jbe    c000abee <zoh_vari_process+0x12b>
c000ab6b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab6e:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab71:	7d 7b                	jge    c000abee <zoh_vari_process+0x12b>
c000ab73:	d9 c0                	fld    st(0)
c000ab75:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab78:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab7b:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab7e:	df e0                	fnstsw ax
c000ab80:	9e                   	sahf   
c000ab81:	73 6b                	jae    c000abee <zoh_vari_process+0x12b>
c000ab83:	85 d2                	test   edx,edx
c000ab85:	7e 36                	jle    c000abbd <zoh_vari_process+0xfa>
c000ab87:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab8b:	dd 07                	fld    QWORD PTR [edi]
c000ab8d:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab90:	83 ec 10             	sub    esp,0x10
c000ab93:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab96:	e8 a5 4b 01 00       	call   c001f740 <fabs>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000aba4:	df e0                	fnstsw ax
c000aba6:	9e                   	sahf   
c000aba7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abab:	76 10                	jbe    c000abbd <zoh_vari_process+0xfa>
c000abad:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abb0:	dc 27                	fsub   QWORD PTR [edi]
c000abb2:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abb5:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abb8:	dc 07                	fadd   QWORD PTR [edi]
c000abba:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abbd:	31 c0                	xor    eax,eax
c000abbf:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abc2:	7e 13                	jle    c000abd7 <zoh_vari_process+0x114>
c000abc4:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abc8:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abcb:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abce:	40                   	inc    eax
c000abcf:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abd2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abd5:	eb e8                	jmp    c000abbf <zoh_vari_process+0xfc>
c000abd7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abdb:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abde:	de c1                	faddp  st(1),st
c000abe0:	e9 75 ff ff ff       	jmp    c000ab5a <zoh_vari_process+0x97>
c000abe5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abe9:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abec:	de c1                	faddp  st(1),st
c000abee:	83 ec 10             	sub    esp,0x10
c000abf1:	dd 14 24             	fst    QWORD PTR [esp]
c000abf4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf8:	e8 6f fe ff ff       	call   c000aa6c <fmod_one>
c000abfd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac00:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ac04:	d8 e1                	fsub   st,st(1)
c000ac06:	d9 c9                	fxch   st(1)
c000ac08:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ac0c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac0f:	e8 4c 4b 01 00       	call   c001f760 <lrint>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	0f af e8             	imul   ebp,eax
c000ac1a:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac1d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac20:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac24:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac27:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac2a:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac2d:	0f 8d 80 00 00 00    	jge    c000acb3 <zoh_vari_process+0x1f0>
c000ac33:	d9 c0                	fld    st(0)
c000ac35:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac38:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac3c:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac40:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac44:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac48:	de d9                	fcompp 
c000ac4a:	df e0                	fnstsw ax
c000ac4c:	9e                   	sahf   
c000ac4d:	72 64                	jb     c000acb3 <zoh_vari_process+0x1f0>
c000ac4f:	85 d2                	test   edx,edx
c000ac51:	7e 36                	jle    c000ac89 <zoh_vari_process+0x1c6>
c000ac53:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac57:	dd 07                	fld    QWORD PTR [edi]
c000ac59:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac5c:	83 ec 10             	sub    esp,0x10
c000ac5f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac62:	e8 d9 4a 01 00       	call   c001f740 <fabs>
c000ac67:	83 c4 10             	add    esp,0x10
c000ac6a:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ac70:	df e0                	fnstsw ax
c000ac72:	9e                   	sahf   
c000ac73:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac77:	76 10                	jbe    c000ac89 <zoh_vari_process+0x1c6>
c000ac79:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac7c:	dc 27                	fsub   QWORD PTR [edi]
c000ac7e:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac81:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac84:	dc 07                	fadd   QWORD PTR [edi]
c000ac86:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac89:	31 d2                	xor    edx,edx
c000ac8b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac8e:	39 d0                	cmp    eax,edx
c000ac90:	0f 8e 4f ff ff ff    	jle    c000abe5 <zoh_vari_process+0x122>
c000ac96:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac99:	29 c1                	sub    ecx,eax
c000ac9b:	89 c8                	mov    eax,ecx
c000ac9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac9f:	01 d0                	add    eax,edx
c000aca1:	42                   	inc    edx
c000aca2:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000aca5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000aca8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000acab:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000acae:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000acb1:	eb d8                	jmp    c000ac8b <zoh_vari_process+0x1c8>
c000acb3:	39 e9                	cmp    ecx,ebp
c000acb5:	7d 13                	jge    c000acca <zoh_vari_process+0x207>
c000acb7:	89 e8                	mov    eax,ebp
c000acb9:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acbc:	29 c8                	sub    eax,ecx
c000acbe:	99                   	cdq    
c000acbf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acc6:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acca:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000accd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acd0:	85 c0                	test   eax,eax
c000acd2:	7f 1b                	jg     c000acef <zoh_vari_process+0x22c>
c000acd4:	dd 04 24             	fld    QWORD PTR [esp]
c000acd7:	dd 1f                	fstp   QWORD PTR [edi]
c000acd9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acdc:	99                   	cdq    
c000acdd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ace0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ace3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ace6:	99                   	cdq    
c000ace7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000aced:	eb 25                	jmp    c000ad14 <zoh_vari_process+0x251>
c000acef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acf2:	31 d2                	xor    edx,edx
c000acf4:	29 e8                	sub    eax,ebp
c000acf6:	c1 e0 02             	shl    eax,0x2
c000acf9:	39 d5                	cmp    ebp,edx
c000acfb:	7e d7                	jle    c000acd4 <zoh_vari_process+0x211>
c000acfd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acff:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ad02:	83 c0 04             	add    eax,0x4
c000ad05:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ad09:	42                   	inc    edx
c000ad0a:	eb ed                	jmp    c000acf9 <zoh_vari_process+0x236>
c000ad0c:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad18:	83 c4 2c             	add    esp,0x2c
c000ad1b:	5b                   	pop    ebx
c000ad1c:	5e                   	pop    esi
c000ad1d:	5f                   	pop    edi
c000ad1e:	5d                   	pop    ebp
c000ad1f:	c3                   	ret    

c000ad20 <zoh_reset>:
c000ad20:	83 ec 0c             	sub    esp,0xc
c000ad23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad27:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad2a:	85 c0                	test   eax,eax
c000ad2c:	74 20                	je     c000ad4e <zoh_reset+0x2e>
c000ad2e:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad31:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad3b:	51                   	push   ecx
c000ad3c:	c1 e2 02             	shl    edx,0x2
c000ad3f:	83 c0 1c             	add    eax,0x1c
c000ad42:	52                   	push   edx
c000ad43:	6a 00                	push   0x0
c000ad45:	50                   	push   eax
c000ad46:	e8 87 59 ff ff       	call   c00006d2 <memset>
c000ad4b:	83 c4 10             	add    esp,0x10
c000ad4e:	83 c4 0c             	add    esp,0xc
c000ad51:	c3                   	ret    

c000ad52 <zoh_get_name>:
c000ad52:	31 c0                	xor    eax,eax
c000ad54:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad59:	75 05                	jne    c000ad60 <zoh_get_name+0xe>
c000ad5b:	b8 94 10 02 c0       	mov    eax,0xc0021094
c000ad60:	c3                   	ret    

c000ad61 <zoh_get_description>:
c000ad61:	31 c0                	xor    eax,eax
c000ad63:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad68:	75 05                	jne    c000ad6f <zoh_get_description+0xe>
c000ad6a:	b8 a5 10 02 c0       	mov    eax,0xc00210a5
c000ad6f:	c3                   	ret    

c000ad70 <zoh_set_converter>:
c000ad70:	53                   	push   ebx
c000ad71:	b8 0a 00 00 00       	mov    eax,0xa
c000ad76:	83 ec 08             	sub    esp,0x8
c000ad79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad7d:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad82:	75 6e                	jne    c000adf2 <zoh_set_converter+0x82>
c000ad84:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad87:	85 c0                	test   eax,eax
c000ad89:	74 13                	je     c000ad9e <zoh_set_converter+0x2e>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	50                   	push   eax
c000ad8f:	e8 6d 12 00 00       	call   c000c001 <free>
c000ad94:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad9b:	83 c4 10             	add    esp,0x10
c000ad9e:	50                   	push   eax
c000ad9f:	50                   	push   eax
c000ada0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ada3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000adaa:	50                   	push   eax
c000adab:	6a 01                	push   0x1
c000adad:	e8 6f 12 00 00       	call   c000c021 <calloc>
c000adb2:	89 c2                	mov    edx,eax
c000adb4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	b8 01 00 00 00       	mov    eax,0x1
c000adbf:	85 d2                	test   edx,edx
c000adc1:	74 2f                	je     c000adf2 <zoh_set_converter+0x82>
c000adc3:	83 ec 0c             	sub    esp,0xc
c000adc6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adc9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adcc:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000add2:	c7 43 24 c3 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aac3
c000add9:	c7 43 20 c3 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aac3
c000ade0:	c7 43 28 20 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad20
c000ade7:	53                   	push   ebx
c000ade8:	e8 33 ff ff ff       	call   c000ad20 <zoh_reset>
c000aded:	83 c4 10             	add    esp,0x10
c000adf0:	31 c0                	xor    eax,eax
c000adf2:	83 c4 08             	add    esp,0x8
c000adf5:	5b                   	pop    ebx
c000adf6:	c3                   	ret    
c000adf7:	90                   	nop

c000adf8 <Computer::close(int, int, void*)>:
c000adf8:	57                   	push   edi
c000adf9:	56                   	push   esi
c000adfa:	53                   	push   ebx
c000adfb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ae07:	83 ec 0c             	sub    esp,0xc
c000ae0a:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae10:	50                   	push   eax
c000ae11:	e8 98 59 00 00       	call   c00107ae <Device::closeAll()>
c000ae16:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae1c:	83 c4 10             	add    esp,0x10
c000ae1f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae21:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae25:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae2d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae35:	5b                   	pop    ebx
c000ae36:	5e                   	pop    esi
c000ae37:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae3a:	5f                   	pop    edi
c000ae3b:	ff e0                	jmp    eax
c000ae3d:	90                   	nop

c000ae3e <Computer::Computer()>:
c000ae3e:	83 ec 0c             	sub    esp,0xc
c000ae41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae45:	83 ec 08             	sub    esp,0x8
c000ae48:	68 dc 10 02 c0       	push   0xc00210dc
c000ae4d:	50                   	push   eax
c000ae4e:	e8 d5 59 00 00       	call   c0010828 <Device::Device(char const*)>
c000ae53:	83 c4 10             	add    esp,0x10
c000ae56:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5f:	89 10                	mov    DWORD PTR [eax],edx
c000ae61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae65:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae73:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae81:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae87:	83 ca 04             	or     edx,0x4
c000ae8a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9a:	31 d2                	xor    edx,edx
c000ae9c:	88 c2                	mov    dl,al
c000ae9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea2:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000aea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aead:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb3:	31 d2                	xor    edx,edx
c000aeb5:	88 c2                	mov    dl,al
c000aeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeca:	8d 50 01             	lea    edx,[eax+0x1]
c000aecd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aed1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aed7:	31 d2                	xor    edx,edx
c000aed9:	88 c2                	mov    dl,al
c000aedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aee3:	83 e1 3f             	and    ecx,0x3f
c000aee6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aef4:	31 d2                	xor    edx,edx
c000aef6:	88 c2                	mov    dl,al
c000aef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000af03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af0d:	31 d2                	xor    edx,edx
c000af0f:	88 c2                	mov    dl,al
c000af11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af15:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af24:	8d 50 01             	lea    edx,[eax+0x1]
c000af27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af2b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af31:	31 d2                	xor    edx,edx
c000af33:	88 c2                	mov    dl,al
c000af35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af39:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af3d:	83 e1 3f             	and    ecx,0x3f
c000af40:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af48:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af4e:	31 d2                	xor    edx,edx
c000af50:	88 c2                	mov    dl,al
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af61:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af67:	31 d2                	xor    edx,edx
c000af69:	88 c2                	mov    dl,al
c000af6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af78:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af7e:	8d 50 01             	lea    edx,[eax+0x1]
c000af81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af85:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af8b:	31 d2                	xor    edx,edx
c000af8d:	88 c2                	mov    dl,al
c000af8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af93:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af97:	83 e1 3f             	and    ecx,0x3f
c000af9a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af9e:	90                   	nop
c000af9f:	83 c4 0c             	add    esp,0xc
c000afa2:	c3                   	ret    
c000afa3:	90                   	nop

c000afa4 <Computer::setBootMessage(char const*)>:
c000afa4:	c3                   	ret    
c000afa5:	90                   	nop

c000afa6 <Computer::start()>:
c000afa6:	56                   	push   esi
c000afa7:	53                   	push   ebx
c000afa8:	83 ec 14             	sub    esp,0x14
c000afab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000afaf:	e8 a7 da 00 00       	call   c0018a5b <lockScheduler()>
c000afb4:	e8 eb dd 00 00       	call   c0018da4 <schedule()>
c000afb9:	e8 9f da 00 00       	call   c0018a5d <unlockScheduler()>
c000afbe:	fb                   	sti    
c000afbf:	83 ec 0c             	sub    esp,0xc
c000afc2:	68 3b 07 00 00       	push   0x73b
c000afc7:	e8 22 41 00 00       	call   c000f0ee <operator new(unsigned long)>
c000afcc:	89 c6                	mov    esi,eax
c000afce:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c000afd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afda:	50                   	push   eax
c000afdb:	68 e5 10 02 c0       	push   0xc00210e5
c000afe0:	6a 01                	push   0x1
c000afe2:	56                   	push   esi
c000afe3:	e8 ca d8 00 00       	call   c00188b2 <Process::Process(bool, char const*, Process*, char**)>
c000afe8:	83 c4 20             	add    esp,0x20
c000afeb:	68 ff 00 00 00       	push   0xff
c000aff0:	6a 00                	push   0x0
c000aff2:	68 7f b9 00 c0       	push   0xc000b97f
c000aff7:	56                   	push   esi
c000aff8:	e8 93 db 00 00       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c000affd:	6a 7a                	push   0x7a
c000afff:	8b 15 f4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bf4
c000b005:	6a 00                	push   0x0
c000b007:	68 d5 93 01 c0       	push   0xc00193d5
c000b00c:	52                   	push   edx
c000b00d:	e8 7e db 00 00       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c000b012:	83 c4 20             	add    esp,0x20
c000b015:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c000b01a:	c6 05 ad 47 02 c0 01 	mov    BYTE PTR ds:0xc00247ad,0x1
c000b021:	e8 60 45 00 00       	call   c000f586 <initVFS()>
c000b026:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b02c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b02e:	6a 00                	push   0x0
c000b030:	6a 00                	push   0x0
c000b032:	6a 00                	push   0x0
c000b034:	50                   	push   eax
c000b035:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b038:	e8 6c c2 00 00       	call   c00172a9 <setupSystemCalls()>
c000b03d:	e8 42 50 00 00       	call   c0010084 <loadClockSettings()>
c000b042:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b045:	e8 38 57 00 00       	call   c0010782 <Device::loadDriversForAll()>
c000b04a:	bb 02 00 00 00       	mov    ebx,0x2
c000b04f:	b8 01 00 00 00       	mov    eax,0x1
c000b054:	31 d2                	xor    edx,edx
c000b056:	31 c9                	xor    ecx,ecx
c000b058:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b060:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b068:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b06e:	59                   	pop    ecx
c000b06f:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c000b075:	5e                   	pop    esi
c000b076:	6a 01                	push   0x1
c000b078:	68 f2 10 02 c0       	push   0xc00210f2
c000b07d:	e8 f3 d3 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c000b082:	5a                   	pop    edx
c000b083:	59                   	pop    ecx
c000b084:	53                   	push   ebx
c000b085:	50                   	push   eax
c000b086:	e8 b0 d5 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c000b08b:	c7 04 24 e8 22 02 c0 	mov    DWORD PTR [esp],0xc00222e8
c000b092:	e8 8c 41 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	6a 02                	push   0x2
c000b09f:	e8 59 de 00 00       	call   c0018efd <blockTask(TaskState)>
c000b0a4:	83 c4 10             	add    esp,0x10
c000b0a7:	eb f1                	jmp    c000b09a <Computer::start()+0xf4>

c000b0a9 <firstTask()>:
c000b0a9:	83 ec 18             	sub    esp,0x18
c000b0ac:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b0b1:	50                   	push   eax
c000b0b2:	e8 ef fe ff ff       	call   c000afa6 <Computer::start()>
c000b0b7:	90                   	nop

c000b0b8 <Computer::detectFeatures()>:
c000b0b8:	55                   	push   ebp
c000b0b9:	57                   	push   edi
c000b0ba:	56                   	push   esi
c000b0bb:	53                   	push   ebx
c000b0bc:	83 ec 1c             	sub    esp,0x1c
c000b0bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0c3:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0c9:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0cf:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0d5:	e8 af 52 ff ff       	call   c0000389 <detectCPUID>
c000b0da:	85 c0                	test   eax,eax
c000b0dc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0e2:	0f 95 c2             	setne  dl
c000b0e5:	01 d2                	add    edx,edx
c000b0e7:	83 e0 fd             	and    eax,0xfffffffd
c000b0ea:	09 d0                	or     eax,edx
c000b0ec:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0f2:	a8 02                	test   al,0x2
c000b0f4:	75 4e                	jne    c000b144 <Computer::detectFeatures()+0x8c>
c000b0f6:	f6 05 c1 47 02 c0 04 	test   BYTE PTR ds:0xc00247c1,0x4
c000b0fd:	74 0f                	je     c000b10e <Computer::detectFeatures()+0x56>
c000b0ff:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b105:	83 e0 fb             	and    eax,0xfffffffb
c000b108:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b10e:	e8 d3 40 01 00       	call   c001f1e6 <x87Detect>
c000b113:	83 e0 01             	and    eax,0x1
c000b116:	c1 e0 04             	shl    eax,0x4
c000b119:	88 c2                	mov    dl,al
c000b11b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b121:	83 e0 ef             	and    eax,0xffffffef
c000b124:	09 d0                	or     eax,edx
c000b126:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b12c:	a8 10                	test   al,0x10
c000b12e:	0f 85 20 01 00 00    	jne    c000b254 <Computer::detectFeatures()+0x19c>
c000b134:	84 c0                	test   al,al
c000b136:	0f 88 3b 01 00 00    	js     c000b277 <Computer::detectFeatures()+0x1bf>
c000b13c:	83 c4 1c             	add    esp,0x1c
c000b13f:	5b                   	pop    ebx
c000b140:	5e                   	pop    esi
c000b141:	5f                   	pop    edi
c000b142:	5d                   	pop    ebp
c000b143:	c3                   	ret    
c000b144:	83 ec 0c             	sub    esp,0xc
c000b147:	6a 20                	push   0x20
c000b149:	e8 e1 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b14e:	83 e0 01             	and    eax,0x1
c000b151:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b158:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b15e:	83 e0 f7             	and    eax,0xfffffff7
c000b161:	09 d0                	or     eax,edx
c000b163:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b169:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b170:	e8 ba 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b175:	83 e0 01             	and    eax,0x1
c000b178:	88 c2                	mov    dl,al
c000b17a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b180:	83 e0 fe             	and    eax,0xfffffffe
c000b183:	09 d0                	or     eax,edx
c000b185:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b18b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b192:	e8 98 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b197:	c1 e0 07             	shl    eax,0x7
c000b19a:	88 c2                	mov    dl,al
c000b19c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1a2:	83 e0 7f             	and    eax,0x7f
c000b1a5:	09 d0                	or     eax,edx
c000b1a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1ad:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1b4:	e8 76 96 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	83 e0 01             	and    eax,0x1
c000b1bf:	c1 e0 05             	shl    eax,0x5
c000b1c2:	88 c2                	mov    dl,al
c000b1c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1ca:	83 e0 df             	and    eax,0xffffffdf
c000b1cd:	09 d0                	or     eax,edx
c000b1cf:	f7 05 c0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247c0,0x401
c000b1d9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1df:	0f 84 b8 00 00 00    	je     c000b29d <Computer::detectFeatures()+0x1e5>
c000b1e5:	83 ec 0c             	sub    esp,0xc
c000b1e8:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1ee:	83 e1 fe             	and    ecx,0xfffffffe
c000b1f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1f5:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1fb:	50                   	push   eax
c000b1fc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b200:	55                   	push   ebp
c000b201:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b205:	57                   	push   edi
c000b206:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b20a:	56                   	push   esi
c000b20b:	68 00 00 00 80       	push   0x80000000
c000b210:	e8 97 95 00 00       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b215:	83 c4 20             	add    esp,0x20
c000b218:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b21f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b223:	0f 86 cd fe ff ff    	jbe    c000b0f6 <Computer::detectFeatures()+0x3e>
c000b229:	83 ec 0c             	sub    esp,0xc
c000b22c:	50                   	push   eax
c000b22d:	55                   	push   ebp
c000b22e:	57                   	push   edi
c000b22f:	56                   	push   esi
c000b230:	68 01 00 00 80       	push   0x80000001
c000b235:	e8 72 95 00 00       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b23a:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b240:	83 c4 20             	add    esp,0x20
c000b243:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b249:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b24f:	e9 a2 fe ff ff       	jmp    c000b0f6 <Computer::detectFeatures()+0x3e>
c000b254:	e8 47 3f 01 00       	call   c001f1a0 <sseDetect>
c000b259:	88 c2                	mov    dl,al
c000b25b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b261:	c1 e2 07             	shl    edx,0x7
c000b264:	83 e0 7f             	and    eax,0x7f
c000b267:	09 d0                	or     eax,edx
c000b269:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b26f:	84 c0                	test   al,al
c000b271:	0f 89 c5 fe ff ff    	jns    c000b13c <Computer::detectFeatures()+0x84>
c000b277:	e8 14 3f 01 00       	call   c001f190 <avxDetect>
c000b27c:	83 e0 01             	and    eax,0x1
c000b27f:	c1 e0 05             	shl    eax,0x5
c000b282:	88 c2                	mov    dl,al
c000b284:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b28a:	83 e0 df             	and    eax,0xffffffdf
c000b28d:	09 d0                	or     eax,edx
c000b28f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b295:	83 c4 1c             	add    esp,0x1c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    
c000b29d:	83 ec 0c             	sub    esp,0xc
c000b2a0:	68 00 02 00 00       	push   0x200
c000b2a5:	e8 85 95 00 00       	call   c001482f <cpuidCheckEDX(unsigned int)>
c000b2aa:	83 c4 10             	add    esp,0x10
c000b2ad:	e9 33 ff ff ff       	jmp    c000b1e5 <Computer::detectFeatures()+0x12d>

c000b2b2 <Computer::displayFeatures()>:
c000b2b2:	53                   	push   ebx
c000b2b3:	83 ec 14             	sub    esp,0x14
c000b2b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2ba:	68 15 11 02 c0       	push   0xc0021115
c000b2bf:	e8 5f 3f 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2cc:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2d3:	74 05                	je     c000b2da <Computer::displayFeatures()+0x28>
c000b2d5:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2da:	51                   	push   ecx
c000b2db:	51                   	push   ecx
c000b2dc:	50                   	push   eax
c000b2dd:	68 28 11 02 c0       	push   0xc0021128
c000b2e2:	e8 3c 3f 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2ef:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2f6:	75 05                	jne    c000b2fd <Computer::displayFeatures()+0x4b>
c000b2f8:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2fd:	52                   	push   edx
c000b2fe:	52                   	push   edx
c000b2ff:	50                   	push   eax
c000b300:	68 39 11 02 c0       	push   0xc0021139
c000b305:	e8 19 3f 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b312:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b319:	75 05                	jne    c000b320 <Computer::displayFeatures()+0x6e>
c000b31b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b320:	51                   	push   ecx
c000b321:	51                   	push   ecx
c000b322:	50                   	push   eax
c000b323:	68 4a 11 02 c0       	push   0xc002114a
c000b328:	e8 f6 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b32d:	83 c4 10             	add    esp,0x10
c000b330:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b335:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b33c:	75 05                	jne    c000b343 <Computer::displayFeatures()+0x91>
c000b33e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b343:	52                   	push   edx
c000b344:	52                   	push   edx
c000b345:	50                   	push   eax
c000b346:	68 5b 11 02 c0       	push   0xc002115b
c000b34b:	e8 d3 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b358:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b35f:	75 05                	jne    c000b366 <Computer::displayFeatures()+0xb4>
c000b361:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b366:	51                   	push   ecx
c000b367:	51                   	push   ecx
c000b368:	50                   	push   eax
c000b369:	68 6c 11 02 c0       	push   0xc002116c
c000b36e:	e8 b0 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b37b:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b382:	75 05                	jne    c000b389 <Computer::displayFeatures()+0xd7>
c000b384:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b389:	52                   	push   edx
c000b38a:	52                   	push   edx
c000b38b:	50                   	push   eax
c000b38c:	68 7d 11 02 c0       	push   0xc002117d
c000b391:	e8 8d 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b396:	83 c4 10             	add    esp,0x10
c000b399:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b39e:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b3a5:	75 05                	jne    c000b3ac <Computer::displayFeatures()+0xfa>
c000b3a7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3ac:	51                   	push   ecx
c000b3ad:	51                   	push   ecx
c000b3ae:	50                   	push   eax
c000b3af:	68 8e 11 02 c0       	push   0xc002118e
c000b3b4:	e8 6a 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b3b9:	83 c4 10             	add    esp,0x10
c000b3bc:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3c1:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3c8:	78 05                	js     c000b3cf <Computer::displayFeatures()+0x11d>
c000b3ca:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3cf:	52                   	push   edx
c000b3d0:	52                   	push   edx
c000b3d1:	50                   	push   eax
c000b3d2:	68 9f 11 02 c0       	push   0xc002119f
c000b3d7:	e8 47 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3e4:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3eb:	0f 84 93 01 00 00    	je     c000b584 <Computer::displayFeatures()+0x2d2>
c000b3f1:	51                   	push   ecx
c000b3f2:	51                   	push   ecx
c000b3f3:	50                   	push   eax
c000b3f4:	68 b0 11 02 c0       	push   0xc00211b0
c000b3f9:	e8 25 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b406:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b40d:	0f 84 67 01 00 00    	je     c000b57a <Computer::displayFeatures()+0x2c8>
c000b413:	52                   	push   edx
c000b414:	52                   	push   edx
c000b415:	50                   	push   eax
c000b416:	68 c1 11 02 c0       	push   0xc00211c1
c000b41b:	e8 03 3e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b428:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b42f:	0f 84 3b 01 00 00    	je     c000b570 <Computer::displayFeatures()+0x2be>
c000b435:	51                   	push   ecx
c000b436:	51                   	push   ecx
c000b437:	50                   	push   eax
c000b438:	68 d2 11 02 c0       	push   0xc00211d2
c000b43d:	e8 e1 3d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b44a:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b451:	0f 84 0f 01 00 00    	je     c000b566 <Computer::displayFeatures()+0x2b4>
c000b457:	52                   	push   edx
c000b458:	52                   	push   edx
c000b459:	50                   	push   eax
c000b45a:	68 e3 11 02 c0       	push   0xc00211e3
c000b45f:	e8 bf 3d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b46c:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b473:	0f 84 e3 00 00 00    	je     c000b55c <Computer::displayFeatures()+0x2aa>
c000b479:	51                   	push   ecx
c000b47a:	51                   	push   ecx
c000b47b:	50                   	push   eax
c000b47c:	68 f4 11 02 c0       	push   0xc00211f4
c000b481:	e8 9d 3d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b48e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b495:	0f 84 b7 00 00 00    	je     c000b552 <Computer::displayFeatures()+0x2a0>
c000b49b:	52                   	push   edx
c000b49c:	52                   	push   edx
c000b49d:	50                   	push   eax
c000b49e:	68 05 12 02 c0       	push   0xc0021205
c000b4a3:	e8 7b 3d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b4a8:	83 c4 10             	add    esp,0x10
c000b4ab:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4b0:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4b7:	0f 84 8b 00 00 00    	je     c000b548 <Computer::displayFeatures()+0x296>
c000b4bd:	51                   	push   ecx
c000b4be:	51                   	push   ecx
c000b4bf:	50                   	push   eax
c000b4c0:	68 16 12 02 c0       	push   0xc0021216
c000b4c5:	e8 59 3d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b4ca:	83 c4 10             	add    esp,0x10
c000b4cd:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4d2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4d9:	78 05                	js     c000b4e0 <Computer::displayFeatures()+0x22e>
c000b4db:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b4e0:	52                   	push   edx
c000b4e1:	52                   	push   edx
c000b4e2:	50                   	push   eax
c000b4e3:	68 27 12 02 c0       	push   0xc0021227
c000b4e8:	e8 36 3d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b4ed:	83 c4 10             	add    esp,0x10
c000b4f0:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4f5:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4fc:	74 43                	je     c000b541 <Computer::displayFeatures()+0x28f>
c000b4fe:	51                   	push   ecx
c000b4ff:	51                   	push   ecx
c000b500:	50                   	push   eax
c000b501:	68 38 12 02 c0       	push   0xc0021238
c000b506:	e8 18 3d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b50b:	83 c4 10             	add    esp,0x10
c000b50e:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b513:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b51a:	74 1e                	je     c000b53a <Computer::displayFeatures()+0x288>
c000b51c:	52                   	push   edx
c000b51d:	52                   	push   edx
c000b51e:	50                   	push   eax
c000b51f:	68 49 12 02 c0       	push   0xc0021249
c000b524:	e8 fa 3c 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b529:	c7 44 24 20 c6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228c6
c000b531:	83 c4 18             	add    esp,0x18
c000b534:	5b                   	pop    ebx
c000b535:	e9 e9 3c 00 00       	jmp    c000f223 <Dbg::kprintf(char const*, ...)>
c000b53a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b53f:	eb db                	jmp    c000b51c <Computer::displayFeatures()+0x26a>
c000b541:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b546:	eb b6                	jmp    c000b4fe <Computer::displayFeatures()+0x24c>
c000b548:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b54d:	e9 6b ff ff ff       	jmp    c000b4bd <Computer::displayFeatures()+0x20b>
c000b552:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b557:	e9 3f ff ff ff       	jmp    c000b49b <Computer::displayFeatures()+0x1e9>
c000b55c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b561:	e9 13 ff ff ff       	jmp    c000b479 <Computer::displayFeatures()+0x1c7>
c000b566:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b56b:	e9 e7 fe ff ff       	jmp    c000b457 <Computer::displayFeatures()+0x1a5>
c000b570:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b575:	e9 bb fe ff ff       	jmp    c000b435 <Computer::displayFeatures()+0x183>
c000b57a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b57f:	e9 8f fe ff ff       	jmp    c000b413 <Computer::displayFeatures()+0x161>
c000b584:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b589:	e9 63 fe ff ff       	jmp    c000b3f1 <Computer::displayFeatures()+0x13f>

c000b58e <Computer::rdmsr(unsigned int)>:
c000b58e:	83 ec 0c             	sub    esp,0xc
c000b591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b595:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b59c:	74 0a                	je     c000b5a8 <Computer::rdmsr(unsigned int)+0x1a>
c000b59e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5a2:	0f 32                	rdmsr  
c000b5a4:	83 c4 0c             	add    esp,0xc
c000b5a7:	c3                   	ret    
c000b5a8:	83 ec 0c             	sub    esp,0xc
c000b5ab:	68 5a 12 02 c0       	push   0xc002125a
c000b5b0:	e8 9d a4 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b5b5:	83 c4 10             	add    esp,0x10
c000b5b8:	eb e4                	jmp    c000b59e <Computer::rdmsr(unsigned int)+0x10>

c000b5ba <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5ba:	57                   	push   edi
c000b5bb:	56                   	push   esi
c000b5bc:	52                   	push   edx
c000b5bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5c1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5c9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5d0:	74 0e                	je     c000b5e0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d6:	89 f0                	mov    eax,esi
c000b5d8:	89 fa                	mov    edx,edi
c000b5da:	0f 30                	wrmsr  
c000b5dc:	58                   	pop    eax
c000b5dd:	5e                   	pop    esi
c000b5de:	5f                   	pop    edi
c000b5df:	c3                   	ret    
c000b5e0:	83 ec 0c             	sub    esp,0xc
c000b5e3:	68 60 12 02 c0       	push   0xc0021260
c000b5e8:	e8 65 a4 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b5ed:	83 c4 10             	add    esp,0x10
c000b5f0:	eb e0                	jmp    c000b5d2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5f2 <Computer::nmiEnabled()>:
c000b5f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5fc:	c3                   	ret    
c000b5fd:	90                   	nop

c000b5fe <Computer::readCMOS(unsigned char)>:
c000b5fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b602:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b606:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b60d:	19 c0                	sbb    eax,eax
c000b60f:	83 e0 80             	and    eax,0xffffff80
c000b612:	09 d0                	or     eax,edx
c000b614:	e6 70                	out    0x70,al
c000b616:	e4 71                	in     al,0x71
c000b618:	c3                   	ret    
c000b619:	90                   	nop

c000b61a <Computer::enableNMI(bool)>:
c000b61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b622:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b628:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b630:	eb cc                	jmp    c000b5fe <Computer::readCMOS(unsigned char)>

c000b632 <Computer::open(int, int, void*)>:
c000b632:	56                   	push   esi
c000b633:	53                   	push   ebx
c000b634:	83 ec 10             	sub    esp,0x10
c000b637:	f6 05 c0 47 02 c0 04 	test   BYTE PTR ds:0xc00247c0,0x4
c000b63e:	0f 94 05 e0 3b 02 c0 	sete   BYTE PTR ds:0xc0023be0
c000b645:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b649:	68 68 22 00 00       	push   0x2268
c000b64e:	e8 9b 3a 00 00       	call   c000f0ee <operator new(unsigned long)>
c000b653:	89 c6                	mov    esi,eax
c000b655:	89 04 24             	mov    DWORD PTR [esp],eax
c000b658:	e8 bf 87 00 00       	call   c0013e1c <ACPI::ACPI()>
c000b65d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b663:	59                   	pop    ecx
c000b664:	58                   	pop    eax
c000b665:	56                   	push   esi
c000b666:	53                   	push   ebx
c000b667:	e8 cc 4f 00 00       	call   c0010638 <Device::addChild(Device*)>
c000b66c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b66f:	e8 44 fa ff ff       	call   c000b0b8 <Computer::detectFeatures()>
c000b674:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b677:	e8 36 fc ff ff       	call   c000b2b2 <Computer::displayFeatures()>
c000b67c:	58                   	pop    eax
c000b67d:	5a                   	pop    edx
c000b67e:	6a 01                	push   0x1
c000b680:	53                   	push   ebx
c000b681:	e8 94 ff ff ff       	call   c000b61a <Computer::enableNMI(bool)>
c000b686:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b68d:	e8 5c 3a 00 00       	call   c000f0ee <operator new(unsigned long)>
c000b692:	89 c6                	mov    esi,eax
c000b694:	89 04 24             	mov    DWORD PTR [esp],eax
c000b697:	e8 5e 92 00 00       	call   c00148fa <CPU::CPU()>
c000b69c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6a2:	59                   	pop    ecx
c000b6a3:	58                   	pop    eax
c000b6a4:	56                   	push   esi
c000b6a5:	53                   	push   ebx
c000b6a6:	e8 8d 4f 00 00       	call   c0010638 <Device::addChild(Device*)>
c000b6ab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6b1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6b7:	51                   	push   ecx
c000b6b8:	6a 00                	push   0x0
c000b6ba:	6a 00                	push   0x0
c000b6bc:	50                   	push   eax
c000b6bd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6c0:	83 c4 20             	add    esp,0x20
c000b6c3:	e8 d8 54 00 00       	call   c0010ba0 <setupFPU()>
c000b6c8:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6ce:	85 c0                	test   eax,eax
c000b6d0:	74 1e                	je     c000b6f0 <Computer::open(int, int, void*)+0xbe>
c000b6d2:	52                   	push   edx
c000b6d3:	52                   	push   edx
c000b6d4:	50                   	push   eax
c000b6d5:	53                   	push   ebx
c000b6d6:	e8 5d 4f 00 00       	call   c0010638 <Device::addChild(Device*)>
c000b6db:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6e1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6e3:	6a 00                	push   0x0
c000b6e5:	6a 00                	push   0x0
c000b6e7:	6a 00                	push   0x0
c000b6e9:	50                   	push   eax
c000b6ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6ed:	83 c4 20             	add    esp,0x20
c000b6f0:	83 ec 0c             	sub    esp,0xc
c000b6f3:	68 a9 b0 00 c0       	push   0xc000b0a9
c000b6f8:	e8 92 d5 00 00       	call   c0018c8f <setupMultitasking(void (*)())>
c000b6fd:	83 c4 14             	add    esp,0x14
c000b700:	83 c8 ff             	or     eax,0xffffffff
c000b703:	5b                   	pop    ebx
c000b704:	5e                   	pop    esi
c000b705:	c3                   	ret    

c000b706 <Computer::disableNMI()>:
c000b706:	6a 00                	push   0x0
c000b708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b70c:	50                   	push   eax
c000b70d:	e8 08 ff ff ff       	call   c000b61a <Computer::enableNMI(bool)>
c000b712:	5a                   	pop    edx
c000b713:	59                   	pop    ecx
c000b714:	c3                   	ret    
c000b715:	90                   	nop

c000b716 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b71a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b71e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b725:	19 c0                	sbb    eax,eax
c000b727:	83 e0 80             	and    eax,0xffffff80
c000b72a:	09 d0                	or     eax,edx
c000b72c:	e6 70                	out    0x70,al
c000b72e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b732:	e6 71                	out    0x71,al
c000b734:	c3                   	ret    
c000b735:	90                   	nop

c000b736 <Computer::handleNMI()>:
c000b736:	56                   	push   esi
c000b737:	53                   	push   ebx
c000b738:	83 ec 10             	sub    esp,0x10
c000b73b:	e4 92                	in     al,0x92
c000b73d:	89 c6                	mov    esi,eax
c000b73f:	e4 61                	in     al,0x61
c000b741:	68 66 12 02 c0       	push   0xc0021266
c000b746:	88 c3                	mov    bl,al
c000b748:	e8 d6 3a 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b74d:	83 c4 10             	add    esp,0x10
c000b750:	83 e6 10             	and    esi,0x10
c000b753:	75 0d                	jne    c000b762 <Computer::handleNMI()+0x2c>
c000b755:	f6 c3 40             	test   bl,0x40
c000b758:	75 1d                	jne    c000b777 <Computer::handleNMI()+0x41>
c000b75a:	84 db                	test   bl,bl
c000b75c:	78 2d                	js     c000b78b <Computer::handleNMI()+0x55>
c000b75e:	58                   	pop    eax
c000b75f:	5b                   	pop    ebx
c000b760:	5e                   	pop    esi
c000b761:	c3                   	ret    
c000b762:	83 ec 0c             	sub    esp,0xc
c000b765:	68 77 12 02 c0       	push   0xc0021277
c000b76a:	e8 e3 a2 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b76f:	83 c4 10             	add    esp,0x10
c000b772:	f6 c3 40             	test   bl,0x40
c000b775:	74 e3                	je     c000b75a <Computer::handleNMI()+0x24>
c000b777:	83 ec 0c             	sub    esp,0xc
c000b77a:	68 84 12 02 c0       	push   0xc0021284
c000b77f:	e8 ce a2 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000b784:	83 c4 10             	add    esp,0x10
c000b787:	84 db                	test   bl,bl
c000b789:	79 d3                	jns    c000b75e <Computer::handleNMI()+0x28>
c000b78b:	c7 44 24 10 8e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002128e
c000b793:	5a                   	pop    edx
c000b794:	5b                   	pop    ebx
c000b795:	5e                   	pop    esi
c000b796:	e9 b7 a2 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000b79b:	90                   	nop

c000b79c <Computer::setDiskActivityLight(int, bool)>:
c000b79c:	56                   	push   esi
c000b79d:	53                   	push   ebx
c000b79e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7a2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7a7:	77 1c                	ja     c000b7c5 <Computer::setDiskActivityLight(int, bool)+0x29>
c000b7a9:	e4 92                	in     al,0x92
c000b7ab:	bb 40 00 00 00       	mov    ebx,0x40
c000b7b0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7b4:	89 da                	mov    edx,ebx
c000b7b6:	d3 e2                	shl    edx,cl
c000b7b8:	83 f2 ff             	xor    edx,0xffffffff
c000b7bb:	89 f1                	mov    ecx,esi
c000b7bd:	21 d0                	and    eax,edx
c000b7bf:	d3 e3                	shl    ebx,cl
c000b7c1:	09 d8                	or     eax,ebx
c000b7c3:	e6 92                	out    0x92,al
c000b7c5:	5b                   	pop    ebx
c000b7c6:	5e                   	pop    esi
c000b7c7:	c3                   	ret    

c000b7c8 <GDTEntry::setBase(unsigned int)>:
c000b7c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7d0:	89 c1                	mov    ecx,eax
c000b7d2:	c1 e9 10             	shr    ecx,0x10
c000b7d5:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7d9:	c1 e8 18             	shr    eax,0x18
c000b7dc:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7df:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7e2:	c3                   	ret    
c000b7e3:	90                   	nop

c000b7e4 <GDTEntry::setLimit(unsigned int)>:
c000b7e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7ec:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7ef:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7f2:	c1 e8 10             	shr    eax,0x10
c000b7f5:	83 e2 f0             	and    edx,0xfffffff0
c000b7f8:	83 e0 0f             	and    eax,0xf
c000b7fb:	09 d0                	or     eax,edx
c000b7fd:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b800:	c3                   	ret    
c000b801:	90                   	nop

c000b802 <GDT::GDT()>:
c000b802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b806:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b810:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b816:	90                   	nop
c000b817:	c3                   	ret    

c000b818 <GDT::addEntry(GDTEntry)>:
c000b818:	53                   	push   ebx
c000b819:	83 ec 0c             	sub    esp,0xc
c000b81c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b820:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b822:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b829:	52                   	push   edx
c000b82a:	50                   	push   eax
c000b82b:	68 c8 12 02 c0       	push   0xc00212c8
c000b830:	e8 ee 39 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000b835:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b837:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b83b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b83f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b843:	8d 50 01             	lea    edx,[eax+0x1]
c000b846:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b84a:	89 13                	mov    DWORD PTR [ebx],edx
c000b84c:	c1 e0 03             	shl    eax,0x3
c000b84f:	83 c4 18             	add    esp,0x18
c000b852:	5b                   	pop    ebx
c000b853:	c3                   	ret    

c000b854 <GDT::getNumberOfEntries()>:
c000b854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b858:	8b 00                	mov    eax,DWORD PTR [eax]
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <GDT::flush()>:
c000b85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b860:	83 c0 04             	add    eax,0x4
c000b863:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b866:	a3 b2 47 02 c0       	mov    ds:0xc00247b2,eax
c000b86b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b872:	66 89 15 b0 47 02 c0 	mov    WORD PTR ds:0xc00247b0,dx
c000b879:	e9 7f 4b ff ff       	jmp    c00003fd <loadGDT>

c000b87e <GDT::setup()>:
c000b87e:	55                   	push   ebp
c000b87f:	57                   	push   edi
c000b880:	56                   	push   esi
c000b881:	53                   	push   ebx
c000b882:	83 ec 3c             	sub    esp,0x3c
c000b885:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b889:	6a 00                	push   0x0
c000b88b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b88f:	53                   	push   ebx
c000b890:	e8 33 ff ff ff       	call   c000b7c8 <GDTEntry::setBase(unsigned int)>
c000b895:	6a 00                	push   0x0
c000b897:	53                   	push   ebx
c000b898:	e8 47 ff ff ff       	call   c000b7e4 <GDTEntry::setLimit(unsigned int)>
c000b89d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b8a5:	6a 00                	push   0x0
c000b8a7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8ab:	53                   	push   ebx
c000b8ac:	e8 17 ff ff ff       	call   c000b7c8 <GDTEntry::setBase(unsigned int)>
c000b8b1:	68 ff ff ff 00       	push   0xffffff
c000b8b6:	53                   	push   ebx
c000b8b7:	e8 28 ff ff ff       	call   c000b7e4 <GDTEntry::setLimit(unsigned int)>
c000b8bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8c0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8c5:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8ce:	83 c4 20             	add    esp,0x20
c000b8d1:	6a 00                	push   0x0
c000b8d3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8d7:	53                   	push   ebx
c000b8d8:	e8 eb fe ff ff       	call   c000b7c8 <GDTEntry::setBase(unsigned int)>
c000b8dd:	68 ff ff ff 00       	push   0xffffff
c000b8e2:	53                   	push   ebx
c000b8e3:	e8 fc fe ff ff       	call   c000b7e4 <GDTEntry::setLimit(unsigned int)>
c000b8e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8ec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8f0:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8f5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8f9:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8fe:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b902:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b906:	89 d8                	mov    eax,ebx
c000b908:	80 cc 60             	or     ah,0x60
c000b90b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b90f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b913:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b917:	83 c4 0c             	add    esp,0xc
c000b91a:	89 f8                	mov    eax,edi
c000b91c:	80 cc 60             	or     ah,0x60
c000b91f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b923:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b927:	89 c7                	mov    edi,eax
c000b929:	55                   	push   ebp
c000b92a:	e8 e9 fe ff ff       	call   c000b818 <GDT::addEntry(GDTEntry)>
c000b92f:	83 c4 0c             	add    esp,0xc
c000b932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b936:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b93a:	55                   	push   ebp
c000b93b:	e8 d8 fe ff ff       	call   c000b818 <GDT::addEntry(GDTEntry)>
c000b940:	83 c4 0c             	add    esp,0xc
c000b943:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b947:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b94b:	55                   	push   ebp
c000b94c:	e8 c7 fe ff ff       	call   c000b818 <GDT::addEntry(GDTEntry)>
c000b951:	83 c4 0c             	add    esp,0xc
c000b954:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b958:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b95c:	53                   	push   ebx
c000b95d:	51                   	push   ecx
c000b95e:	55                   	push   ebp
c000b95f:	e8 b4 fe ff ff       	call   c000b818 <GDT::addEntry(GDTEntry)>
c000b964:	83 c4 0c             	add    esp,0xc
c000b967:	57                   	push   edi
c000b968:	56                   	push   esi
c000b969:	55                   	push   ebp
c000b96a:	e8 a9 fe ff ff       	call   c000b818 <GDT::addEntry(GDTEntry)>
c000b96f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b972:	e8 e5 fe ff ff       	call   c000b85c <GDT::flush()>
c000b977:	83 c4 4c             	add    esp,0x4c
c000b97a:	5b                   	pop    ebx
c000b97b:	5e                   	pop    esi
c000b97c:	5f                   	pop    edi
c000b97d:	5d                   	pop    ebp
c000b97e:	c3                   	ret    

c000b97f <idleFunction(void*)>:
c000b97f:	53                   	push   ebx
c000b980:	83 ec 08             	sub    esp,0x8
c000b983:	e8 d5 d0 00 00       	call   c0018a5d <unlockScheduler()>
c000b988:	e8 59 8f 00 00       	call   c00148e6 <thisCPU()>
c000b98d:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b994:	74 41                	je     c000b9d7 <idleFunction(void*)+0x58>
c000b996:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b99b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b9a2:	74 33                	je     c000b9d7 <idleFunction(void*)+0x58>
c000b9a4:	52                   	push   edx
c000b9a5:	31 db                	xor    ebx,ebx
c000b9a7:	52                   	push   edx
c000b9a8:	68 e1 00 00 00       	push   0xe1
c000b9ad:	50                   	push   eax
c000b9ae:	e8 db fb ff ff       	call   c000b58e <Computer::rdmsr(unsigned int)>
c000b9b3:	53                   	push   ebx
c000b9b4:	83 e0 02             	and    eax,0x2
c000b9b7:	50                   	push   eax
c000b9b8:	68 e1 00 00 00       	push   0xe1
c000b9bd:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c000b9c3:	e8 f2 fb ff ff       	call   c000b5ba <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9c8:	83 c4 20             	add    esp,0x20
c000b9cb:	e8 45 48 ff ff       	call   c0000215 <doTPAUSE>
c000b9d0:	e8 0b 3e 01 00       	call   c001f7e0 <idleCommon()>
c000b9d5:	eb f4                	jmp    c000b9cb <idleFunction(void*)+0x4c>
c000b9d7:	fb                   	sti    
c000b9d8:	f4                   	hlt    
c000b9d9:	e8 02 3e 01 00       	call   c001f7e0 <idleCommon()>
c000b9de:	eb f7                	jmp    c000b9d7 <idleFunction(void*)+0x58>

c000b9e0 <IDTEntry::IDTEntry(bool)>:
c000b9e0:	83 ec 04             	sub    esp,0x4
c000b9e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9e7:	88 04 24             	mov    BYTE PTR [esp],al
c000b9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9ee:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba00:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba03:	83 e2 f0             	and    edx,0xfffffff0
c000ba06:	83 ca 0e             	or     edx,0xe
c000ba09:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba10:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba13:	83 e2 ef             	and    edx,0xffffffef
c000ba16:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba19:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba1d:	74 04                	je     c000ba23 <IDTEntry::IDTEntry(bool)+0x43>
c000ba1f:	b2 03                	mov    dl,0x3
c000ba21:	eb 02                	jmp    c000ba25 <IDTEntry::IDTEntry(bool)+0x45>
c000ba23:	b2 00                	mov    dl,0x0
c000ba25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba29:	83 e2 03             	and    edx,0x3
c000ba2c:	88 d1                	mov    cl,dl
c000ba2e:	c1 e1 05             	shl    ecx,0x5
c000ba31:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba34:	83 e2 9f             	and    edx,0xffffff9f
c000ba37:	09 ca                	or     edx,ecx
c000ba39:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba40:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba43:	83 ca 80             	or     edx,0xffffff80
c000ba46:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba49:	90                   	nop
c000ba4a:	83 c4 04             	add    esp,0x4
c000ba4d:	c3                   	ret    

c000ba4e <IDTEntry::setOffset(unsigned int)>:
c000ba4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba56:	66 89 02             	mov    WORD PTR [edx],ax
c000ba59:	c1 e8 10             	shr    eax,0x10
c000ba5c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba60:	c3                   	ret    
c000ba61:	90                   	nop

c000ba62 <IDT::IDT()>:
c000ba62:	90                   	nop
c000ba63:	c3                   	ret    

c000ba64 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba68:	83 c0 30             	add    eax,0x30
c000ba6b:	c3                   	ret    

c000ba6c <IDT::addEntry(IDTEntry, int)>:
c000ba6c:	53                   	push   ebx
c000ba6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba7d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba80:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba84:	5b                   	pop    ebx
c000ba85:	c3                   	ret    

c000ba86 <IDT::addEntry(int, void (*)(), bool)>:
c000ba86:	53                   	push   ebx
c000ba87:	83 ec 10             	sub    esp,0x10
c000ba8a:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba8f:	50                   	push   eax
c000ba90:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba94:	53                   	push   ebx
c000ba95:	e8 46 ff ff ff       	call   c000b9e0 <IDTEntry::IDTEntry(bool)>
c000ba9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba9e:	53                   	push   ebx
c000ba9f:	e8 aa ff ff ff       	call   c000ba4e <IDTEntry::setOffset(unsigned int)>
c000baa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baa8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bab0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab4:	e8 b3 ff ff ff       	call   c000ba6c <IDT::addEntry(IDTEntry, int)>
c000bab9:	83 c4 30             	add    esp,0x30
c000babc:	5b                   	pop    ebx
c000babd:	c3                   	ret    

c000babe <IDT::flush()>:
c000babe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bac2:	66 c7 05 b8 47 02 c0 ff 07 	mov    WORD PTR ds:0xc00247b8,0x7ff
c000bacb:	a3 ba 47 02 c0       	mov    ds:0xc00247ba,eax
c000bad0:	0f 01 1d b8 47 02 c0 	lidtd  ds:0xc00247b8
c000bad7:	c3                   	ret    

c000bad8 <IDT::setup()>:
c000bad8:	57                   	push   edi
c000bad9:	56                   	push   esi
c000bada:	53                   	push   ebx
c000badb:	83 ec 10             	sub    esp,0x10
c000bade:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bae2:	6a 00                	push   0x0
c000bae4:	68 1d 04 00 c0       	push   0xc000041d
c000bae9:	6a 00                	push   0x0
c000baeb:	53                   	push   ebx
c000baec:	e8 95 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000baf1:	6a 00                	push   0x0
c000baf3:	68 2d 04 00 c0       	push   0xc000042d
c000baf8:	6a 01                	push   0x1
c000bafa:	53                   	push   ebx
c000bafb:	e8 86 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb00:	83 c4 20             	add    esp,0x20
c000bb03:	6a 00                	push   0x0
c000bb05:	68 37 04 00 c0       	push   0xc0000437
c000bb0a:	6a 02                	push   0x2
c000bb0c:	53                   	push   ebx
c000bb0d:	e8 74 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb12:	6a 00                	push   0x0
c000bb14:	68 41 04 00 c0       	push   0xc0000441
c000bb19:	6a 03                	push   0x3
c000bb1b:	53                   	push   ebx
c000bb1c:	e8 65 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb21:	83 c4 20             	add    esp,0x20
c000bb24:	6a 00                	push   0x0
c000bb26:	68 4b 04 00 c0       	push   0xc000044b
c000bb2b:	6a 04                	push   0x4
c000bb2d:	53                   	push   ebx
c000bb2e:	e8 53 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb33:	6a 00                	push   0x0
c000bb35:	68 55 04 00 c0       	push   0xc0000455
c000bb3a:	6a 05                	push   0x5
c000bb3c:	53                   	push   ebx
c000bb3d:	e8 44 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb42:	83 c4 20             	add    esp,0x20
c000bb45:	6a 00                	push   0x0
c000bb47:	68 5f 04 00 c0       	push   0xc000045f
c000bb4c:	6a 06                	push   0x6
c000bb4e:	53                   	push   ebx
c000bb4f:	e8 32 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb54:	6a 00                	push   0x0
c000bb56:	68 69 04 00 c0       	push   0xc0000469
c000bb5b:	6a 07                	push   0x7
c000bb5d:	53                   	push   ebx
c000bb5e:	e8 23 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb63:	83 c4 20             	add    esp,0x20
c000bb66:	6a 00                	push   0x0
c000bb68:	68 73 04 00 c0       	push   0xc0000473
c000bb6d:	6a 08                	push   0x8
c000bb6f:	53                   	push   ebx
c000bb70:	e8 11 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb75:	6a 00                	push   0x0
c000bb77:	68 7b 04 00 c0       	push   0xc000047b
c000bb7c:	6a 09                	push   0x9
c000bb7e:	53                   	push   ebx
c000bb7f:	e8 02 ff ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb84:	83 c4 20             	add    esp,0x20
c000bb87:	6a 00                	push   0x0
c000bb89:	68 85 04 00 c0       	push   0xc0000485
c000bb8e:	6a 0a                	push   0xa
c000bb90:	53                   	push   ebx
c000bb91:	e8 f0 fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bb96:	6a 00                	push   0x0
c000bb98:	68 8d 04 00 c0       	push   0xc000048d
c000bb9d:	6a 0b                	push   0xb
c000bb9f:	53                   	push   ebx
c000bba0:	e8 e1 fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bba5:	83 c4 20             	add    esp,0x20
c000bba8:	6a 00                	push   0x0
c000bbaa:	68 95 04 00 c0       	push   0xc0000495
c000bbaf:	6a 0c                	push   0xc
c000bbb1:	53                   	push   ebx
c000bbb2:	e8 cf fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bbb7:	6a 00                	push   0x0
c000bbb9:	68 9d 04 00 c0       	push   0xc000049d
c000bbbe:	6a 0d                	push   0xd
c000bbc0:	53                   	push   ebx
c000bbc1:	e8 c0 fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bbc6:	83 c4 20             	add    esp,0x20
c000bbc9:	6a 00                	push   0x0
c000bbcb:	68 a5 04 00 c0       	push   0xc00004a5
c000bbd0:	6a 0e                	push   0xe
c000bbd2:	53                   	push   ebx
c000bbd3:	e8 ae fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bbd8:	6a 00                	push   0x0
c000bbda:	68 ad 04 00 c0       	push   0xc00004ad
c000bbdf:	6a 0f                	push   0xf
c000bbe1:	53                   	push   ebx
c000bbe2:	e8 9f fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bbe7:	83 c4 20             	add    esp,0x20
c000bbea:	6a 00                	push   0x0
c000bbec:	68 b7 04 00 c0       	push   0xc00004b7
c000bbf1:	6a 10                	push   0x10
c000bbf3:	53                   	push   ebx
c000bbf4:	e8 8d fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bbf9:	6a 00                	push   0x0
c000bbfb:	68 c1 04 00 c0       	push   0xc00004c1
c000bc00:	6a 11                	push   0x11
c000bc02:	53                   	push   ebx
c000bc03:	e8 7e fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc08:	83 c4 20             	add    esp,0x20
c000bc0b:	6a 00                	push   0x0
c000bc0d:	68 cb 04 00 c0       	push   0xc00004cb
c000bc12:	6a 12                	push   0x12
c000bc14:	53                   	push   ebx
c000bc15:	e8 6c fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc1a:	6a 01                	push   0x1
c000bc1c:	68 d5 04 00 c0       	push   0xc00004d5
c000bc21:	6a 60                	push   0x60
c000bc23:	53                   	push   ebx
c000bc24:	e8 5d fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc29:	83 c4 20             	add    esp,0x20
c000bc2c:	6a 00                	push   0x0
c000bc2e:	68 df 04 00 c0       	push   0xc00004df
c000bc33:	6a 20                	push   0x20
c000bc35:	53                   	push   ebx
c000bc36:	e8 4b fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc3b:	6a 00                	push   0x0
c000bc3d:	68 e9 04 00 c0       	push   0xc00004e9
c000bc42:	6a 21                	push   0x21
c000bc44:	53                   	push   ebx
c000bc45:	e8 3c fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc4a:	83 c4 20             	add    esp,0x20
c000bc4d:	6a 00                	push   0x0
c000bc4f:	68 f3 04 00 c0       	push   0xc00004f3
c000bc54:	6a 22                	push   0x22
c000bc56:	53                   	push   ebx
c000bc57:	e8 2a fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc5c:	6a 00                	push   0x0
c000bc5e:	68 fd 04 00 c0       	push   0xc00004fd
c000bc63:	6a 23                	push   0x23
c000bc65:	53                   	push   ebx
c000bc66:	e8 1b fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc6b:	83 c4 20             	add    esp,0x20
c000bc6e:	6a 00                	push   0x0
c000bc70:	68 07 05 00 c0       	push   0xc0000507
c000bc75:	6a 24                	push   0x24
c000bc77:	53                   	push   ebx
c000bc78:	e8 09 fe ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc7d:	6a 00                	push   0x0
c000bc7f:	68 11 05 00 c0       	push   0xc0000511
c000bc84:	6a 25                	push   0x25
c000bc86:	53                   	push   ebx
c000bc87:	e8 fa fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc8c:	83 c4 20             	add    esp,0x20
c000bc8f:	6a 00                	push   0x0
c000bc91:	68 1b 05 00 c0       	push   0xc000051b
c000bc96:	6a 26                	push   0x26
c000bc98:	53                   	push   ebx
c000bc99:	e8 e8 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bc9e:	6a 00                	push   0x0
c000bca0:	68 25 05 00 c0       	push   0xc0000525
c000bca5:	6a 27                	push   0x27
c000bca7:	53                   	push   ebx
c000bca8:	e8 d9 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bcad:	83 c4 20             	add    esp,0x20
c000bcb0:	6a 00                	push   0x0
c000bcb2:	68 2f 05 00 c0       	push   0xc000052f
c000bcb7:	6a 28                	push   0x28
c000bcb9:	53                   	push   ebx
c000bcba:	e8 c7 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bcbf:	6a 00                	push   0x0
c000bcc1:	68 39 05 00 c0       	push   0xc0000539
c000bcc6:	6a 29                	push   0x29
c000bcc8:	53                   	push   ebx
c000bcc9:	e8 b8 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bcce:	83 c4 20             	add    esp,0x20
c000bcd1:	6a 00                	push   0x0
c000bcd3:	68 43 05 00 c0       	push   0xc0000543
c000bcd8:	6a 2a                	push   0x2a
c000bcda:	53                   	push   ebx
c000bcdb:	e8 a6 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bce0:	6a 00                	push   0x0
c000bce2:	68 4d 05 00 c0       	push   0xc000054d
c000bce7:	6a 2b                	push   0x2b
c000bce9:	53                   	push   ebx
c000bcea:	e8 97 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bcef:	83 c4 20             	add    esp,0x20
c000bcf2:	6a 00                	push   0x0
c000bcf4:	68 57 05 00 c0       	push   0xc0000557
c000bcf9:	6a 2c                	push   0x2c
c000bcfb:	53                   	push   ebx
c000bcfc:	e8 85 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd01:	6a 00                	push   0x0
c000bd03:	68 61 05 00 c0       	push   0xc0000561
c000bd08:	6a 2d                	push   0x2d
c000bd0a:	53                   	push   ebx
c000bd0b:	e8 76 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd10:	83 c4 20             	add    esp,0x20
c000bd13:	6a 00                	push   0x0
c000bd15:	68 6b 05 00 c0       	push   0xc000056b
c000bd1a:	6a 2e                	push   0x2e
c000bd1c:	53                   	push   ebx
c000bd1d:	e8 64 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd22:	6a 00                	push   0x0
c000bd24:	68 75 05 00 c0       	push   0xc0000575
c000bd29:	6a 2f                	push   0x2f
c000bd2b:	53                   	push   ebx
c000bd2c:	e8 55 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd31:	83 c4 20             	add    esp,0x20
c000bd34:	6a 00                	push   0x0
c000bd36:	68 7f 05 00 c0       	push   0xc000057f
c000bd3b:	6a 30                	push   0x30
c000bd3d:	53                   	push   ebx
c000bd3e:	e8 43 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd43:	6a 00                	push   0x0
c000bd45:	68 89 05 00 c0       	push   0xc0000589
c000bd4a:	6a 31                	push   0x31
c000bd4c:	53                   	push   ebx
c000bd4d:	e8 34 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd52:	83 c4 20             	add    esp,0x20
c000bd55:	6a 00                	push   0x0
c000bd57:	68 93 05 00 c0       	push   0xc0000593
c000bd5c:	6a 32                	push   0x32
c000bd5e:	53                   	push   ebx
c000bd5f:	e8 22 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd64:	6a 00                	push   0x0
c000bd66:	68 9d 05 00 c0       	push   0xc000059d
c000bd6b:	6a 33                	push   0x33
c000bd6d:	53                   	push   ebx
c000bd6e:	e8 13 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd73:	83 c4 20             	add    esp,0x20
c000bd76:	6a 00                	push   0x0
c000bd78:	68 a7 05 00 c0       	push   0xc00005a7
c000bd7d:	6a 34                	push   0x34
c000bd7f:	53                   	push   ebx
c000bd80:	e8 01 fd ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd85:	6a 00                	push   0x0
c000bd87:	68 b1 05 00 c0       	push   0xc00005b1
c000bd8c:	6a 35                	push   0x35
c000bd8e:	53                   	push   ebx
c000bd8f:	e8 f2 fc ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bd94:	83 c4 20             	add    esp,0x20
c000bd97:	6a 00                	push   0x0
c000bd99:	68 bb 05 00 c0       	push   0xc00005bb
c000bd9e:	6a 36                	push   0x36
c000bda0:	53                   	push   ebx
c000bda1:	e8 e0 fc ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bda6:	6a 00                	push   0x0
c000bda8:	68 c5 05 00 c0       	push   0xc00005c5
c000bdad:	6a 37                	push   0x37
c000bdaf:	53                   	push   ebx
c000bdb0:	e8 d1 fc ff ff       	call   c000ba86 <IDT::addEntry(int, void (*)(), bool)>
c000bdb5:	83 c4 20             	add    esp,0x20
c000bdb8:	e8 d8 25 00 00       	call   c000e395 <Virt::getAKernelVAS()>
c000bdbd:	52                   	push   edx
c000bdbe:	6a 03                	push   0x3
c000bdc0:	6a 02                	push   0x2
c000bdc2:	50                   	push   eax
c000bdc3:	e8 0e 2c 00 00       	call   c000e9d6 <VAS::allocatePages(int, int)>
c000bdc8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdcf:	89 c6                	mov    esi,eax
c000bdd1:	e8 18 33 00 00       	call   c000f0ee <operator new(unsigned long)>
c000bdd6:	81 c6 00 20 00 00    	add    esi,0x2000
c000bddc:	89 04 24             	mov    DWORD PTR [esp],eax
c000bddf:	89 c7                	mov    edi,eax
c000bde1:	e8 ee 1c 00 00       	call   c000dad4 <TSS::TSS()>
c000bde6:	83 c4 0c             	add    esp,0xc
c000bde9:	68 73 04 00 c0       	push   0xc0000473
c000bdee:	56                   	push   esi
c000bdef:	57                   	push   edi
c000bdf0:	e8 1f 1d 00 00       	call   c000db14 <TSS::setup(unsigned long, unsigned long)>
c000bdf5:	59                   	pop    ecx
c000bdf6:	89 c6                	mov    esi,eax
c000bdf8:	5f                   	pop    edi
c000bdf9:	6a 00                	push   0x0
c000bdfb:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bdff:	50                   	push   eax
c000be00:	e8 db fb ff ff       	call   c000b9e0 <IDTEntry::IDTEntry(bool)>
c000be05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be09:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be0e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be14:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be1b:	80 ce 05             	or     dh,0x5
c000be1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be26:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be2d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be33:	e8 86 fc ff ff       	call   c000babe <IDT::flush()>
c000be38:	83 c4 20             	add    esp,0x20
c000be3b:	5b                   	pop    ebx
c000be3c:	5e                   	pop    esi
c000be3d:	5f                   	pop    edi
c000be3e:	c3                   	ret    

c000be3f <sbrk>:
c000be3f:	55                   	push   ebp
c000be40:	57                   	push   edi
c000be41:	56                   	push   esi
c000be42:	53                   	push   ebx
c000be43:	83 ec 1c             	sub    esp,0x1c
c000be46:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be4a:	85 db                	test   ebx,ebx
c000be4c:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be51:	0f 84 e4 00 00 00    	je     c000bf3b <sbrk+0xfc>
c000be57:	78 3d                	js     c000be96 <sbrk+0x57>
c000be59:	e8 88 8a 00 00       	call   c00148e6 <thisCPU()>
c000be5e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be64:	83 e0 01             	and    eax,0x1
c000be67:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be6b:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be74:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be7a:	89 d8                	mov    eax,ebx
c000be7c:	c1 f8 1f             	sar    eax,0x1f
c000be7f:	25 ff 0f 00 00       	and    eax,0xfff
c000be84:	01 c3                	add    ebx,eax
c000be86:	c1 fb 0c             	sar    ebx,0xc
c000be89:	89 df                	mov    edi,ebx
c000be8b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be8f:	be 00 00 00 00       	mov    esi,0x0
c000be94:	eb 2a                	jmp    c000bec0 <sbrk+0x81>
c000be96:	83 ec 08             	sub    esp,0x8
c000be99:	53                   	push   ebx
c000be9a:	68 e4 12 02 c0       	push   0xc00212e4
c000be9f:	e8 7f 33 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000bea4:	83 c4 10             	add    esp,0x10
c000bea7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beac:	e9 8a 00 00 00       	jmp    c000bf3b <sbrk+0xfc>
c000beb1:	81 05 c0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023bc0,0x1000
c000bebb:	46                   	inc    esi
c000bebc:	39 f7                	cmp    edi,esi
c000bebe:	74 34                	je     c000bef4 <sbrk+0xb5>
c000bec0:	e8 d0 24 00 00       	call   c000e395 <Virt::getAKernelVAS()>
c000bec5:	89 c3                	mov    ebx,eax
c000bec7:	8b 2d c0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023bc0
c000becd:	e8 f5 06 00 00       	call   c000c5c7 <Phys::allocatePage()>
c000bed2:	68 01 04 00 00       	push   0x401
c000bed7:	55                   	push   ebp
c000bed8:	50                   	push   eax
c000bed9:	53                   	push   ebx
c000beda:	e8 f5 29 00 00       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bedf:	83 c4 10             	add    esp,0x10
c000bee2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee7:	74 c8                	je     c000beb1 <sbrk+0x72>
c000bee9:	8b 1d c0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023bc0
c000beef:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bef2:	eb bd                	jmp    c000beb1 <sbrk+0x72>
c000bef4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bef9:	74 48                	je     c000bf43 <sbrk+0x104>
c000befb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000beff:	89 d3                	mov    ebx,edx
c000bf01:	c1 eb 0a             	shr    ebx,0xa
c000bf04:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf0a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf14:	c1 e0 0c             	shl    eax,0xc
c000bf17:	01 d0                	add    eax,edx
c000bf19:	c1 e8 0a             	shr    eax,0xa
c000bf1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf21:	2d 00 00 40 00       	sub    eax,0x400000
c000bf26:	39 c3                	cmp    ebx,eax
c000bf28:	77 0d                	ja     c000bf37 <sbrk+0xf8>
c000bf2a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf2d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf33:	39 d8                	cmp    eax,ebx
c000bf35:	73 f3                	jae    c000bf2a <sbrk+0xeb>
c000bf37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf3b:	83 c4 1c             	add    esp,0x1c
c000bf3e:	5b                   	pop    ebx
c000bf3f:	5e                   	pop    esi
c000bf40:	5f                   	pop    edi
c000bf41:	5d                   	pop    ebp
c000bf42:	c3                   	ret    
c000bf43:	e8 ad 38 01 00       	call   c001f7f5 <CPU::readCR3()>
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	50                   	push   eax
c000bf4c:	e8 b6 38 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000bf51:	83 c4 10             	add    esp,0x10
c000bf54:	eb e1                	jmp    c000bf37 <sbrk+0xf8>

c000bf56 <mmap>:
c000bf56:	83 ec 18             	sub    esp,0x18
c000bf59:	68 14 13 02 c0       	push   0xc0021314
c000bf5e:	e8 ef 9a 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000bf63:	b8 00 00 00 00       	mov    eax,0x0
c000bf68:	83 c4 1c             	add    esp,0x1c
c000bf6b:	c3                   	ret    

c000bf6c <munmap>:
c000bf6c:	83 ec 18             	sub    esp,0x18
c000bf6f:	68 19 13 02 c0       	push   0xc0021319
c000bf74:	e8 d9 9a 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000bf79:	b8 00 00 00 00       	mov    eax,0x0
c000bf7e:	83 c4 1c             	add    esp,0x1c
c000bf81:	c3                   	ret    

c000bf82 <liballoc_lock()>:
c000bf82:	83 ec 0c             	sub    esp,0xc
c000bf85:	e8 d1 ca 00 00       	call   c0018a5b <lockScheduler()>
c000bf8a:	b8 00 00 00 00       	mov    eax,0x0
c000bf8f:	83 c4 0c             	add    esp,0xc
c000bf92:	c3                   	ret    

c000bf93 <liballoc_unlock()>:
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	e8 c2 ca 00 00       	call   c0018a5d <unlockScheduler()>
c000bf9b:	b8 00 00 00 00       	mov    eax,0x0
c000bfa0:	83 c4 0c             	add    esp,0xc
c000bfa3:	c3                   	ret    

c000bfa4 <liballoc_alloc(int)>:
c000bfa4:	83 ec 0c             	sub    esp,0xc
c000bfa7:	e8 e9 23 00 00       	call   c000e395 <Virt::getAKernelVAS()>
c000bfac:	83 ec 04             	sub    esp,0x4
c000bfaf:	6a 01                	push   0x1
c000bfb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb5:	50                   	push   eax
c000bfb6:	e8 1b 2a 00 00       	call   c000e9d6 <VAS::allocatePages(int, int)>
c000bfbb:	83 c4 1c             	add    esp,0x1c
c000bfbe:	c3                   	ret    

c000bfbf <liballoc_free(void*, int)>:
c000bfbf:	83 ec 0c             	sub    esp,0xc
c000bfc2:	e8 ce 23 00 00       	call   c000e395 <Virt::getAKernelVAS()>
c000bfc7:	83 ec 08             	sub    esp,0x8
c000bfca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfce:	50                   	push   eax
c000bfcf:	e8 a2 26 00 00       	call   c000e676 <VAS::freeAllocatedPages(unsigned long)>
c000bfd4:	b8 00 00 00 00       	mov    eax,0x0
c000bfd9:	83 c4 1c             	add    esp,0x1c
c000bfdc:	c3                   	ret    

c000bfdd <realloc>:
c000bfdd:	83 ec 14             	sub    esp,0x14
c000bfe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe8:	e8 63 54 ff ff       	call   c0001450 <dlrealloc>
c000bfed:	83 c4 1c             	add    esp,0x1c
c000bff0:	c3                   	ret    

c000bff1 <malloc>:
c000bff1:	83 ec 18             	sub    esp,0x18
c000bff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff8:	e8 16 4f ff ff       	call   c0000f13 <dlmalloc>
c000bffd:	83 c4 1c             	add    esp,0x1c
c000c000:	c3                   	ret    

c000c001 <free>:
c000c001:	83 ec 18             	sub    esp,0x18
c000c004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c008:	e8 a8 4b ff ff       	call   c0000bb5 <dlfree>
c000c00d:	83 c4 1c             	add    esp,0x1c
c000c010:	c3                   	ret    

c000c011 <rfree>:
c000c011:	83 ec 18             	sub    esp,0x18
c000c014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c018:	e8 e4 ff ff ff       	call   c000c001 <free>
c000c01d:	83 c4 1c             	add    esp,0x1c
c000c020:	c3                   	ret    

c000c021 <calloc>:
c000c021:	56                   	push   esi
c000c022:	53                   	push   ebx
c000c023:	83 ec 10             	sub    esp,0x10
c000c026:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c02a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c02f:	53                   	push   ebx
c000c030:	e8 bc ff ff ff       	call   c000bff1 <malloc>
c000c035:	89 c6                	mov    esi,eax
c000c037:	83 c4 0c             	add    esp,0xc
c000c03a:	53                   	push   ebx
c000c03b:	6a 00                	push   0x0
c000c03d:	50                   	push   eax
c000c03e:	e8 8f 46 ff ff       	call   c00006d2 <memset>
c000c043:	89 f0                	mov    eax,esi
c000c045:	83 c4 14             	add    esp,0x14
c000c048:	5b                   	pop    ebx
c000c049:	5e                   	pop    esi
c000c04a:	c3                   	ret    

c000c04b <hwTextMode_loadInData(VgaText*)>:
c000c04b:	57                   	push   edi
c000c04c:	56                   	push   esi
c000c04d:	53                   	push   ebx
c000c04e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c052:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c058:	85 c0                	test   eax,eax
c000c05a:	7e 30                	jle    c000c08c <hwTextMode_loadInData(VgaText*)+0x41>
c000c05c:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c05f:	31 f6                	xor    esi,esi
c000c061:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c064:	31 c0                	xor    eax,eax
c000c066:	c1 e1 05             	shl    ecx,0x5
c000c069:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c06f:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c073:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c077:	40                   	inc    eax
c000c078:	83 f8 50             	cmp    eax,0x50
c000c07b:	75 f2                	jne    c000c06f <hwTextMode_loadInData(VgaText*)+0x24>
c000c07d:	46                   	inc    esi
c000c07e:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c084:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c08a:	7f d5                	jg     c000c061 <hwTextMode_loadInData(VgaText*)+0x16>
c000c08c:	5b                   	pop    ebx
c000c08d:	5e                   	pop    esi
c000c08e:	5f                   	pop    edi
c000c08f:	c3                   	ret    

c000c090 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c090:	56                   	push   esi
c000c091:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c096:	53                   	push   ebx
c000c097:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c09b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c09f:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c0a5:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0ab:	c1 e0 04             	shl    eax,0x4
c000c0ae:	83 e6 0f             	and    esi,0xf
c000c0b1:	25 ff 00 00 00       	and    eax,0xff
c000c0b6:	83 c2 02             	add    edx,0x2
c000c0b9:	09 f0                	or     eax,esi
c000c0bb:	41                   	inc    ecx
c000c0bc:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0c0:	c1 e0 08             	shl    eax,0x8
c000c0c3:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0c9:	09 f0                	or     eax,esi
c000c0cb:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0cf:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0d5:	75 c8                	jne    c000c09f <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0d7:	5b                   	pop    ebx
c000c0d8:	5e                   	pop    esi
c000c0d9:	c3                   	ret    

c000c0da <hwTextMode_showCursor(VgaText*, bool)>:
c000c0da:	56                   	push   esi
c000c0db:	53                   	push   ebx
c000c0dc:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0e1:	74 38                	je     c000c11b <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0e3:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0e8:	b0 0a                	mov    al,0xa
c000c0ea:	89 da                	mov    edx,ebx
c000c0ec:	ee                   	out    dx,al
c000c0ed:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0f2:	89 ca                	mov    edx,ecx
c000c0f4:	ec                   	in     al,dx
c000c0f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0f9:	b2 0f                	mov    dl,0xf
c000c0fb:	83 e0 c0             	and    eax,0xffffffc0
c000c0fe:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c104:	09 d0                	or     eax,edx
c000c106:	89 ca                	mov    edx,ecx
c000c108:	ee                   	out    dx,al
c000c109:	b0 0b                	mov    al,0xb
c000c10b:	89 da                	mov    edx,ebx
c000c10d:	ee                   	out    dx,al
c000c10e:	89 ca                	mov    edx,ecx
c000c110:	ec                   	in     al,dx
c000c111:	83 e0 e0             	and    eax,0xffffffe0
c000c114:	83 c8 0f             	or     eax,0xf
c000c117:	ee                   	out    dx,al
c000c118:	5b                   	pop    ebx
c000c119:	5e                   	pop    esi
c000c11a:	c3                   	ret    
c000c11b:	b0 0a                	mov    al,0xa
c000c11d:	ba d4 03 00 00       	mov    edx,0x3d4
c000c122:	ee                   	out    dx,al
c000c123:	b0 20                	mov    al,0x20
c000c125:	ba d5 03 00 00       	mov    edx,0x3d5
c000c12a:	ee                   	out    dx,al
c000c12b:	5b                   	pop    ebx
c000c12c:	5e                   	pop    esi
c000c12d:	c3                   	ret    

c000c12e <hwTextMode_update(VgaText*)>:
c000c12e:	c3                   	ret    

c000c12f <hwTextMode_updateCursor(VgaText*)>:
c000c12f:	56                   	push   esi
c000c130:	b9 19 00 00 00       	mov    ecx,0x19
c000c135:	53                   	push   ebx
c000c136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c13a:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c140:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c146:	29 d1                	sub    ecx,edx
c000c148:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c14e:	01 d9                	add    ecx,ebx
c000c150:	b0 0f                	mov    al,0xf
c000c152:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c155:	c1 e1 04             	shl    ecx,0x4
c000c158:	01 f1                	add    ecx,esi
c000c15a:	be d4 03 00 00       	mov    esi,0x3d4
c000c15f:	89 f2                	mov    edx,esi
c000c161:	ee                   	out    dx,al
c000c162:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c167:	88 c8                	mov    al,cl
c000c169:	89 da                	mov    edx,ebx
c000c16b:	ee                   	out    dx,al
c000c16c:	b0 0e                	mov    al,0xe
c000c16e:	89 f2                	mov    edx,esi
c000c170:	ee                   	out    dx,al
c000c171:	89 c8                	mov    eax,ecx
c000c173:	89 da                	mov    edx,ebx
c000c175:	66 c1 e8 08          	shr    ax,0x8
c000c179:	ee                   	out    dx,al
c000c17a:	5b                   	pop    ebx
c000c17b:	5e                   	pop    esi
c000c17c:	c3                   	ret    

c000c17d <hwTextMode_disableBlink(VgaText*, bool)>:
c000c17d:	ba da 03 00 00       	mov    edx,0x3da
c000c182:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c187:	75 18                	jne    c000c1a1 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c189:	ec                   	in     al,dx
c000c18a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c18f:	b0 30                	mov    al,0x30
c000c191:	89 ca                	mov    edx,ecx
c000c193:	ee                   	out    dx,al
c000c194:	ba c1 03 00 00       	mov    edx,0x3c1
c000c199:	ec                   	in     al,dx
c000c19a:	83 c8 08             	or     eax,0x8
c000c19d:	89 ca                	mov    edx,ecx
c000c19f:	ee                   	out    dx,al
c000c1a0:	c3                   	ret    
c000c1a1:	ec                   	in     al,dx
c000c1a2:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1a7:	b0 30                	mov    al,0x30
c000c1a9:	89 ca                	mov    edx,ecx
c000c1ab:	ee                   	out    dx,al
c000c1ac:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1b1:	ec                   	in     al,dx
c000c1b2:	83 e0 f7             	and    eax,0xfffffff7
c000c1b5:	89 ca                	mov    edx,ecx
c000c1b7:	ee                   	out    dx,al
c000c1b8:	c3                   	ret    

c000c1b9 <hwTextMode_scrollScreen(VgaText*)>:
c000c1b9:	55                   	push   ebp
c000c1ba:	bd 02 00 00 00       	mov    ebp,0x2
c000c1bf:	57                   	push   edi
c000c1c0:	56                   	push   esi
c000c1c1:	53                   	push   ebx
c000c1c2:	83 ec 1c             	sub    esp,0x1c
c000c1c5:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1d1:	31 c0                	xor    eax,eax
c000c1d3:	eb 0b                	jmp    c000c1e0 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1d5:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1db:	74 58                	je     c000c235 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1dd:	43                   	inc    ebx
c000c1de:	89 f0                	mov    eax,esi
c000c1e0:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1e6:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1ec:	88 13                	mov    BYTE PTR [ebx],dl
c000c1ee:	8d 70 01             	lea    esi,[eax+0x1]
c000c1f1:	83 fd 18             	cmp    ebp,0x18
c000c1f4:	75 df                	jne    c000c1d5 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1f6:	a8 01                	test   al,0x1
c000c1f8:	75 13                	jne    c000c20d <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1fa:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1fd:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c203:	75 d8                	jne    c000c1dd <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c205:	83 c4 1c             	add    esp,0x1c
c000c208:	5b                   	pop    ebx
c000c209:	5e                   	pop    esi
c000c20a:	5f                   	pop    edi
c000c20b:	5d                   	pop    ebp
c000c20c:	c3                   	ret    
c000c20d:	52                   	push   edx
c000c20e:	31 c0                	xor    eax,eax
c000c210:	52                   	push   edx
c000c211:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c215:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c21b:	50                   	push   eax
c000c21c:	31 c0                	xor    eax,eax
c000c21e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c222:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c228:	50                   	push   eax
c000c229:	e8 84 0b 00 00       	call   c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000c22e:	83 c4 10             	add    esp,0x10
c000c231:	88 07                	mov    BYTE PTR [edi],al
c000c233:	eb c8                	jmp    c000c1fd <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c239:	45                   	inc    ebp
c000c23a:	05 a0 00 00 00       	add    eax,0xa0
c000c23f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c243:	eb 88                	jmp    c000c1cd <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c245 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c245:	56                   	push   esi
c000c246:	31 c0                	xor    eax,eax
c000c248:	53                   	push   ebx
c000c249:	83 ec 0c             	sub    esp,0xc
c000c24c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c250:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c254:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c258:	50                   	push   eax
c000c259:	31 c0                	xor    eax,eax
c000c25b:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c25f:	50                   	push   eax
c000c260:	e8 4d 0b 00 00       	call   c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000c265:	5a                   	pop    edx
c000c266:	25 ff 00 00 00       	and    eax,0xff
c000c26b:	59                   	pop    ecx
c000c26c:	50                   	push   eax
c000c26d:	89 f0                	mov    eax,esi
c000c26f:	0f be f0             	movsx  esi,al
c000c272:	56                   	push   esi
c000c273:	e8 e0 0b 00 00       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000c278:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c27c:	ba 19 00 00 00       	mov    edx,0x19
c000c281:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c287:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c28a:	29 f2                	sub    edx,esi
c000c28c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c290:	c1 e1 04             	shl    ecx,0x4
c000c293:	8d 14 92             	lea    edx,[edx+edx*4]
c000c296:	01 d9                	add    ecx,ebx
c000c298:	c1 e2 04             	shl    edx,0x4
c000c29b:	01 ca                	add    edx,ecx
c000c29d:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c2a5:	83 c4 14             	add    esp,0x14
c000c2a8:	5b                   	pop    ebx
c000c2a9:	5e                   	pop    esi
c000c2aa:	c3                   	ret    

c000c2ab <setupTextMode()>:
c000c2ab:	c7 05 58 48 02 c0 7d c1 00 c0 	mov    DWORD PTR ds:0xc0024858,0xc000c17d
c000c2b5:	c7 05 44 48 02 c0 4b c0 00 c0 	mov    DWORD PTR ds:0xc0024844,0xc000c04b
c000c2bf:	c7 05 40 48 02 c0 90 c0 00 c0 	mov    DWORD PTR ds:0xc0024840,0xc000c090
c000c2c9:	c7 05 4c 48 02 c0 b9 c1 00 c0 	mov    DWORD PTR ds:0xc002484c,0xc000c1b9
c000c2d3:	c7 05 54 48 02 c0 da c0 00 c0 	mov    DWORD PTR ds:0xc0024854,0xc000c0da
c000c2dd:	c7 05 48 48 02 c0 2e c1 00 c0 	mov    DWORD PTR ds:0xc0024848,0xc000c12e
c000c2e7:	c7 05 50 48 02 c0 2f c1 00 c0 	mov    DWORD PTR ds:0xc0024850,0xc000c12f
c000c2f1:	c7 05 5c 48 02 c0 45 c2 00 c0 	mov    DWORD PTR ds:0xc002485c,0xc000c245
c000c2fb:	c3                   	ret    

c000c2fc <kernel_main>:
c000c2fc:	57                   	push   edi
c000c2fd:	bf f9 03 00 00       	mov    edi,0x3f9
c000c302:	56                   	push   esi
c000c303:	31 f6                	xor    esi,esi
c000c305:	53                   	push   ebx
c000c306:	83 ec 10             	sub    esp,0x10
c000c309:	e8 fe 08 00 00       	call   c000cc0c <installVgaTextImplementation()>
c000c30e:	e8 98 ff ff ff       	call   c000c2ab <setupTextMode()>
c000c313:	89 f0                	mov    eax,esi
c000c315:	89 fa                	mov    edx,edi
c000c317:	ee                   	out    dx,al
c000c318:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c31d:	b0 80                	mov    al,0x80
c000c31f:	89 da                	mov    edx,ebx
c000c321:	ee                   	out    dx,al
c000c322:	b1 03                	mov    cl,0x3
c000c324:	ba f8 03 00 00       	mov    edx,0x3f8
c000c329:	88 c8                	mov    al,cl
c000c32b:	ee                   	out    dx,al
c000c32c:	89 f0                	mov    eax,esi
c000c32e:	89 fa                	mov    edx,edi
c000c330:	ee                   	out    dx,al
c000c331:	88 c8                	mov    al,cl
c000c333:	89 da                	mov    edx,ebx
c000c335:	ee                   	out    dx,al
c000c336:	b0 c7                	mov    al,0xc7
c000c338:	ba fa 03 00 00       	mov    edx,0x3fa
c000c33d:	ee                   	out    dx,al
c000c33e:	b0 0b                	mov    al,0xb
c000c340:	ba fc 03 00 00       	mov    edx,0x3fc
c000c345:	ee                   	out    dx,al
c000c346:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c34b:	83 ec 0c             	sub    esp,0xc
c000c34e:	05 ff 0f 00 00       	add    eax,0xfff
c000c353:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c358:	50                   	push   eax
c000c359:	e8 6d 03 00 00       	call   c000c6cb <Phys::physicalMemorySetup(unsigned int)>
c000c35e:	e8 b6 1f 00 00       	call   c000e319 <Virt::virtualMemorySetup()>
c000c363:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c369:	83 c4 10             	add    esp,0x10
c000c36c:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c372:	75 0e                	jne    c000c382 <kernel_main+0x86>
c000c374:	89 d8                	mov    eax,ebx
c000c376:	25 48 03 00 00       	and    eax,0x348
c000c37b:	3d 00 03 00 00       	cmp    eax,0x300
c000c380:	74 10                	je     c000c392 <kernel_main+0x96>
c000c382:	83 ec 0c             	sub    esp,0xc
c000c385:	68 c7 28 02 c0       	push   0xc00228c7
c000c38a:	e8 c3 96 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c38f:	83 c4 10             	add    esp,0x10
c000c392:	83 ec 0c             	sub    esp,0xc
c000c395:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c39b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c39f:	53                   	push   ebx
c000c3a0:	e8 11 21 00 00       	call   c000e4b6 <VAS::VAS()>
c000c3a5:	89 1d 04 49 02 c0    	mov    DWORD PTR ds:0xc0024904,ebx
c000c3ab:	e8 70 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3b0:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3b7:	e8 32 2d 00 00       	call   c000f0ee <operator new(unsigned long)>
c000c3bc:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3bf:	89 c6                	mov    esi,eax
c000c3c1:	e8 78 ea ff ff       	call   c000ae3e <Computer::Computer()>
c000c3c6:	6a 00                	push   0x0
c000c3c8:	6a 00                	push   0x0
c000c3ca:	89 35 a8 47 02 c0    	mov    DWORD PTR ds:0xc00247a8,esi
c000c3d0:	6a 00                	push   0x0
c000c3d2:	56                   	push   esi
c000c3d3:	e8 5a f2 ff ff       	call   c000b632 <Computer::open(int, int, void*)>
c000c3d8:	83 c4 14             	add    esp,0x14
c000c3db:	53                   	push   ebx
c000c3dc:	e8 87 23 00 00       	call   c000e768 <VAS::~VAS()>
c000c3e1:	c7 04 24 20 13 02 c0 	mov    DWORD PTR [esp],0xc0021320
c000c3e8:	e8 65 96 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c3ed:	83 c4 20             	add    esp,0x20
c000c3f0:	5b                   	pop    ebx
c000c3f1:	5e                   	pop    esi
c000c3f2:	5f                   	pop    edi
c000c3f3:	c3                   	ret    

c000c3f4 <Phys::allocateDMA(unsigned long)>:
c000c3f4:	57                   	push   edi
c000c3f5:	31 d2                	xor    edx,edx
c000c3f7:	56                   	push   esi
c000c3f8:	31 ff                	xor    edi,edi
c000c3fa:	53                   	push   ebx
c000c3fb:	31 c9                	xor    ecx,ecx
c000c3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c401:	31 f6                	xor    esi,esi
c000c403:	05 ff 0f 00 00       	add    eax,0xfff
c000c408:	c1 e8 0c             	shr    eax,0xc
c000c40b:	eb 17                	jmp    c000c424 <Phys::allocateDMA(unsigned long)+0x30>
c000c40d:	85 c9                	test   ecx,ecx
c000c40f:	75 04                	jne    c000c415 <Phys::allocateDMA(unsigned long)+0x21>
c000c411:	89 d7                	mov    edi,edx
c000c413:	89 d6                	mov    esi,edx
c000c415:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c418:	39 d8                	cmp    eax,ebx
c000c41a:	74 1f                	je     c000c43b <Phys::allocateDMA(unsigned long)+0x47>
c000c41c:	42                   	inc    edx
c000c41d:	89 d9                	mov    ecx,ebx
c000c41f:	83 fa 2f             	cmp    edx,0x2f
c000c422:	7f 11                	jg     c000c435 <Phys::allocateDMA(unsigned long)+0x41>
c000c424:	80 ba 00 48 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb800],0x0
c000c42b:	74 e0                	je     c000c40d <Phys::allocateDMA(unsigned long)+0x19>
c000c42d:	31 c9                	xor    ecx,ecx
c000c42f:	42                   	inc    edx
c000c430:	83 fa 2f             	cmp    edx,0x2f
c000c433:	7e ef                	jle    c000c424 <Phys::allocateDMA(unsigned long)+0x30>
c000c435:	5b                   	pop    ebx
c000c436:	31 c0                	xor    eax,eax
c000c438:	5e                   	pop    esi
c000c439:	5f                   	pop    edi
c000c43a:	c3                   	ret    
c000c43b:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c43f:	89 d3                	mov    ebx,edx
c000c441:	c1 fb 1f             	sar    ebx,0x1f
c000c444:	83 e3 0f             	and    ebx,0xf
c000c447:	01 d3                	add    ebx,edx
c000c449:	89 f2                	mov    edx,esi
c000c44b:	c1 fb 04             	sar    ebx,0x4
c000c44e:	c1 fa 04             	sar    edx,0x4
c000c451:	39 da                	cmp    edx,ebx
c000c453:	75 30                	jne    c000c485 <Phys::allocateDMA(unsigned long)+0x91>
c000c455:	85 c0                	test   eax,eax
c000c457:	74 1b                	je     c000c474 <Phys::allocateDMA(unsigned long)+0x80>
c000c459:	bf 00 48 02 c0       	mov    edi,0xc0024800
c000c45e:	8d 96 00 48 02 c0    	lea    edx,[esi-0x3ffdb800]
c000c464:	83 f7 ff             	xor    edi,0xffffffff
c000c467:	29 f7                	sub    edi,esi
c000c469:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c46c:	42                   	inc    edx
c000c46d:	8d 04 17             	lea    eax,[edi+edx*1]
c000c470:	39 c1                	cmp    ecx,eax
c000c472:	7f f5                	jg     c000c469 <Phys::allocateDMA(unsigned long)+0x75>
c000c474:	85 db                	test   ebx,ebx
c000c476:	74 13                	je     c000c48b <Phys::allocateDMA(unsigned long)+0x97>
c000c478:	5b                   	pop    ebx
c000c479:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c47f:	c1 e0 0c             	shl    eax,0xc
c000c482:	5e                   	pop    esi
c000c483:	5f                   	pop    edi
c000c484:	c3                   	ret    
c000c485:	89 fa                	mov    edx,edi
c000c487:	31 c9                	xor    ecx,ecx
c000c489:	eb a4                	jmp    c000c42f <Phys::allocateDMA(unsigned long)+0x3b>
c000c48b:	c1 e6 0c             	shl    esi,0xc
c000c48e:	5b                   	pop    ebx
c000c48f:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c495:	5e                   	pop    esi
c000c496:	5f                   	pop    edi
c000c497:	c3                   	ret    

c000c498 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c498:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4a0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4a6:	c1 e9 0c             	shr    ecx,0xc
c000c4a9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4ae:	76 25                	jbe    c000c4d5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4b0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4b5:	c1 e8 0c             	shr    eax,0xc
c000c4b8:	8d 50 10             	lea    edx,[eax+0x10]
c000c4bb:	85 c9                	test   ecx,ecx
c000c4bd:	74 15                	je     c000c4d4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4bf:	8d 82 00 48 02 c0    	lea    eax,[edx-0x3ffdb800]
c000c4c5:	8d 94 11 00 48 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb800]
c000c4cc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4cf:	40                   	inc    eax
c000c4d0:	39 d0                	cmp    eax,edx
c000c4d2:	75 f8                	jne    c000c4cc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4d4:	c3                   	ret    
c000c4d5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4db:	c1 ea 0c             	shr    edx,0xc
c000c4de:	eb db                	jmp    c000c4bb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4e0 <Phys::setPageState(unsigned long, bool)>:
c000c4e0:	56                   	push   esi
c000c4e1:	ba 01 00 00 00       	mov    edx,0x1
c000c4e6:	53                   	push   ebx
c000c4e7:	8b 35 c4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023bc4
c000c4ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4f5:	89 c8                	mov    eax,ecx
c000c4f7:	83 e1 07             	and    ecx,0x7
c000c4fa:	c1 e8 03             	shr    eax,0x3
c000c4fd:	01 c6                	add    esi,eax
c000c4ff:	d3 e2                	shl    edx,cl
c000c501:	83 f2 ff             	xor    edx,0xffffffff
c000c504:	20 16                	and    BYTE PTR [esi],dl
c000c506:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c50c:	01 d0                	add    eax,edx
c000c50e:	d3 e3                	shl    ebx,cl
c000c510:	8a 08                	mov    cl,BYTE PTR [eax]
c000c512:	09 d9                	or     ecx,ebx
c000c514:	88 08                	mov    BYTE PTR [eax],cl
c000c516:	5b                   	pop    ebx
c000c517:	5e                   	pop    esi
c000c518:	c3                   	ret    

c000c519 <Phys::getPageState(unsigned long)>:
c000c519:	53                   	push   ebx
c000c51a:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c524:	31 db                	xor    ebx,ebx
c000c526:	89 c8                	mov    eax,ecx
c000c528:	83 e1 07             	and    ecx,0x7
c000c52b:	c1 e8 03             	shr    eax,0x3
c000c52e:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c531:	89 d8                	mov    eax,ebx
c000c533:	5b                   	pop    ebx
c000c534:	d3 f8                	sar    eax,cl
c000c536:	83 e0 01             	and    eax,0x1
c000c539:	c3                   	ret    

c000c53a <Phys::freePage(unsigned long)>:
c000c53a:	53                   	push   ebx
c000c53b:	83 ec 08             	sub    esp,0x8
c000c53e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c542:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c548:	76 5a                	jbe    c000c5a4 <Phys::freePage(unsigned long)+0x6a>
c000c54a:	c1 eb 0c             	shr    ebx,0xc
c000c54d:	53                   	push   ebx
c000c54e:	e8 c6 ff ff ff       	call   c000c519 <Phys::getPageState(unsigned long)>
c000c553:	5a                   	pop    edx
c000c554:	84 c0                	test   al,al
c000c556:	74 5e                	je     c000c5b6 <Phys::freePage(unsigned long)+0x7c>
c000c558:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c55d:	48                   	dec    eax
c000c55e:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c563:	8d 04 80             	lea    eax,[eax+eax*4]
c000c566:	8d 04 80             	lea    eax,[eax+eax*4]
c000c569:	c1 e0 02             	shl    eax,0x2
c000c56c:	89 c2                	mov    edx,eax
c000c56e:	c1 fa 1f             	sar    edx,0x1f
c000c571:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c577:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c57d:	75 12                	jne    c000c591 <Phys::freePage(unsigned long)+0x57>
c000c57f:	51                   	push   ecx
c000c580:	51                   	push   ecx
c000c581:	6a 00                	push   0x0
c000c583:	53                   	push   ebx
c000c584:	e8 57 ff ff ff       	call   c000c4e0 <Phys::setPageState(unsigned long, bool)>
c000c589:	83 c4 10             	add    esp,0x10
c000c58c:	83 c4 08             	add    esp,0x8
c000c58f:	5b                   	pop    ebx
c000c590:	c3                   	ret    
c000c591:	83 ec 0c             	sub    esp,0xc
c000c594:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c599:	50                   	push   eax
c000c59a:	e8 01 0a 00 00       	call   c000cfa0 <VgaText::updateRAMUsageDisplay(int)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	eb db                	jmp    c000c57f <Phys::freePage(unsigned long)+0x45>
c000c5a4:	68 00 10 00 00       	push   0x1000
c000c5a9:	53                   	push   ebx
c000c5aa:	e8 e9 fe ff ff       	call   c000c498 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5af:	59                   	pop    ecx
c000c5b0:	5b                   	pop    ebx
c000c5b1:	83 c4 08             	add    esp,0x8
c000c5b4:	5b                   	pop    ebx
c000c5b5:	c3                   	ret    
c000c5b6:	c7 44 24 10 3b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002133b
c000c5be:	83 c4 08             	add    esp,0x8
c000c5c1:	5b                   	pop    ebx
c000c5c2:	e9 8b 94 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>

c000c5c7 <Phys::allocatePage()>:
c000c5c7:	56                   	push   esi
c000c5c8:	53                   	push   ebx
c000c5c9:	51                   	push   ecx
c000c5ca:	8b 35 e0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247e0
c000c5d0:	89 f3                	mov    ebx,esi
c000c5d2:	eb 0a                	jmp    c000c5de <Phys::allocatePage()+0x17>
c000c5d4:	89 1d e0 47 02 c0    	mov    DWORD PTR ds:0xc00247e0,ebx
c000c5da:	39 de                	cmp    esi,ebx
c000c5dc:	74 24                	je     c000c602 <Phys::allocatePage()+0x3b>
c000c5de:	53                   	push   ebx
c000c5df:	e8 35 ff ff ff       	call   c000c519 <Phys::getPageState(unsigned long)>
c000c5e4:	5a                   	pop    edx
c000c5e5:	84 c0                	test   al,al
c000c5e7:	74 5a                	je     c000c643 <Phys::allocatePage()+0x7c>
c000c5e9:	43                   	inc    ebx
c000c5ea:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5f0:	75 e2                	jne    c000c5d4 <Phys::allocatePage()+0xd>
c000c5f2:	31 db                	xor    ebx,ebx
c000c5f4:	c7 05 e0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247e0,0x0
c000c5fe:	39 de                	cmp    esi,ebx
c000c600:	75 dc                	jne    c000c5de <Phys::allocatePage()+0x17>
c000c602:	83 ec 0c             	sub    esp,0xc
c000c605:	68 51 13 02 c0       	push   0xc0021351
c000c60a:	e8 14 2c 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000c60f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c616:	e8 d9 fd ff ff       	call   c000c3f4 <Phys::allocateDMA(unsigned long)>
c000c61b:	83 c4 10             	add    esp,0x10
c000c61e:	85 c0                	test   eax,eax
c000c620:	75 5a                	jne    c000c67c <Phys::allocatePage()+0xb5>
c000c622:	83 ec 0c             	sub    esp,0xc
c000c625:	68 62 13 02 c0       	push   0xc0021362
c000c62a:	e8 23 94 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c62f:	83 c4 10             	add    esp,0x10
c000c632:	8b 1d e0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e0
c000c638:	53                   	push   ebx
c000c639:	e8 db fe ff ff       	call   c000c519 <Phys::getPageState(unsigned long)>
c000c63e:	5a                   	pop    edx
c000c63f:	84 c0                	test   al,al
c000c641:	75 a6                	jne    c000c5e9 <Phys::allocatePage()+0x22>
c000c643:	6a 01                	push   0x1
c000c645:	53                   	push   ebx
c000c646:	e8 95 fe ff ff       	call   c000c4e0 <Phys::setPageState(unsigned long, bool)>
c000c64b:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c650:	59                   	pop    ecx
c000c651:	40                   	inc    eax
c000c652:	5b                   	pop    ebx
c000c653:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c658:	8d 04 80             	lea    eax,[eax+eax*4]
c000c65b:	8d 04 80             	lea    eax,[eax+eax*4]
c000c65e:	c1 e0 02             	shl    eax,0x2
c000c661:	89 c2                	mov    edx,eax
c000c663:	c1 fa 1f             	sar    edx,0x1f
c000c666:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c66c:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c672:	75 0c                	jne    c000c680 <Phys::allocatePage()+0xb9>
c000c674:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c679:	c1 e0 0c             	shl    eax,0xc
c000c67c:	5a                   	pop    edx
c000c67d:	5b                   	pop    ebx
c000c67e:	5e                   	pop    esi
c000c67f:	c3                   	ret    
c000c680:	83 ec 0c             	sub    esp,0xc
c000c683:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c688:	50                   	push   eax
c000c689:	e8 12 09 00 00       	call   c000cfa0 <VgaText::updateRAMUsageDisplay(int)>
c000c68e:	83 c4 10             	add    esp,0x10
c000c691:	eb e1                	jmp    c000c674 <Phys::allocatePage()+0xad>

c000c693 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c693:	56                   	push   esi
c000c694:	53                   	push   ebx
c000c695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c699:	39 1d e4 47 02 c0    	cmp    DWORD PTR ds:0xc00247e4,ebx
c000c69f:	73 06                	jae    c000c6a7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c6a1:	89 1d e4 47 02 c0    	mov    DWORD PTR ds:0xc00247e4,ebx
c000c6a7:	c1 eb 0c             	shr    ebx,0xc
c000c6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6ae:	c1 e8 0c             	shr    eax,0xc
c000c6b1:	39 d8                	cmp    eax,ebx
c000c6b3:	73 13                	jae    c000c6c8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6b5:	6a 00                	push   0x0
c000c6b7:	8d 70 01             	lea    esi,[eax+0x1]
c000c6ba:	50                   	push   eax
c000c6bb:	e8 20 fe ff ff       	call   c000c4e0 <Phys::setPageState(unsigned long, bool)>
c000c6c0:	5a                   	pop    edx
c000c6c1:	89 f0                	mov    eax,esi
c000c6c3:	59                   	pop    ecx
c000c6c4:	39 f3                	cmp    ebx,esi
c000c6c6:	75 ed                	jne    c000c6b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6c8:	5b                   	pop    ebx
c000c6c9:	5e                   	pop    esi
c000c6ca:	c3                   	ret    

c000c6cb <Phys::physicalMemorySetup(unsigned int)>:
c000c6cb:	55                   	push   ebp
c000c6cc:	57                   	push   edi
c000c6cd:	56                   	push   esi
c000c6ce:	53                   	push   ebx
c000c6cf:	31 db                	xor    ebx,ebx
c000c6d1:	83 ec 40             	sub    esp,0x40
c000c6d4:	6a 30                	push   0x30
c000c6d6:	6a 00                	push   0x0
c000c6d8:	68 00 48 02 c0       	push   0xc0024800
c000c6dd:	e8 f0 3f ff ff       	call   c00006d2 <memset>
c000c6e2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6eb:	05 00 10 00 00       	add    eax,0x1000
c000c6f0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6f4:	83 c4 10             	add    esp,0x10
c000c6f7:	56                   	push   esi
c000c6f8:	56                   	push   esi
c000c6f9:	6a 01                	push   0x1
c000c6fb:	53                   	push   ebx
c000c6fc:	43                   	inc    ebx
c000c6fd:	e8 de fd ff ff       	call   c000c4e0 <Phys::setPageState(unsigned long, bool)>
c000c702:	83 c4 10             	add    esp,0x10
c000c705:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c70b:	75 ea                	jne    c000c6f7 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c70d:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c713:	66 85 c0             	test   ax,ax
c000c716:	0f 84 3b 01 00 00    	je     c000c857 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c71c:	89 c7                	mov    edi,eax
c000c71e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c726:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c72c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c731:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c735:	eb 6d                	jmp    c000c7a4 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c737:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c73b:	89 c1                	mov    ecx,eax
c000c73d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c741:	0f 83 bc 00 00 00    	jae    c000c803 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c747:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c74b:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c750:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c754:	39 f2                	cmp    edx,esi
c000c756:	19 f8                	sbb    eax,edi
c000c758:	73 07                	jae    c000c761 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c75a:	be 00 00 0a 00       	mov    esi,0xa0000
c000c75f:	31 ff                	xor    edi,edi
c000c761:	89 f2                	mov    edx,esi
c000c763:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c768:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c76e:	89 f9                	mov    ecx,edi
c000c770:	83 d1 ff             	adc    ecx,0xffffffff
c000c773:	39 d0                	cmp    eax,edx
c000c775:	b8 00 00 00 00       	mov    eax,0x0
c000c77a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c77e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c782:	19 c8                	sbb    eax,ecx
c000c784:	0f 82 0d 01 00 00    	jb     c000c897 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c78a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c78e:	83 c3 18             	add    ebx,0x18
c000c791:	41                   	inc    ecx
c000c792:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c796:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c79a:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c79e:	0f 84 c3 00 00 00    	je     c000c867 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7a4:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c7a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c7a9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c7ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7b3:	01 f0                	add    eax,esi
c000c7b5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7c0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7c4:	11 fa                	adc    edx,edi
c000c7c6:	55                   	push   ebp
c000c7c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7d3:	51                   	push   ecx
c000c7d4:	56                   	push   esi
c000c7d5:	68 9c 13 02 c0       	push   0xc002139c
c000c7da:	e8 44 2a 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000c7df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7e3:	83 c4 10             	add    esp,0x10
c000c7e6:	09 f8                	or     eax,edi
c000c7e8:	75 7d                	jne    c000c867 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7ea:	83 fd 01             	cmp    ebp,0x1
c000c7ed:	75 11                	jne    c000c800 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7ef:	ba 00 00 08 00       	mov    edx,0x80000
c000c7f4:	89 c1                	mov    ecx,eax
c000c7f6:	39 f2                	cmp    edx,esi
c000c7f8:	19 f9                	sbb    ecx,edi
c000c7fa:	0f 83 37 ff ff ff    	jae    c000c737 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c800:	4d                   	dec    ebp
c000c801:	75 87                	jne    c000c78a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c803:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c807:	31 d2                	xor    edx,edx
c000c809:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c80d:	89 c8                	mov    eax,ecx
c000c80f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c813:	19 d1                	sbb    ecx,edx
c000c815:	0f 82 6f ff ff ff    	jb     c000c78a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c81b:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c820:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c824:	b9 00 00 00 00       	mov    ecx,0x0
c000c829:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c82d:	0f 83 57 ff ff ff    	jae    c000c78a <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c833:	39 c6                	cmp    esi,eax
c000c835:	19 d7                	sbb    edi,edx
c000c837:	73 6a                	jae    c000c8a3 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c839:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c83d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c841:	29 c7                	sub    edi,eax
c000c843:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c847:	19 d5                	sbb    ebp,edx
c000c849:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c84d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c851:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c855:	eb 4c                	jmp    c000c8a3 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	68 70 13 02 c0       	push   0xc0021370
c000c85f:	e8 ee 91 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000c864:	83 c4 10             	add    esp,0x10
c000c867:	bb 40 01 00 00       	mov    ebx,0x140
c000c86c:	50                   	push   eax
c000c86d:	50                   	push   eax
c000c86e:	6a 00                	push   0x0
c000c870:	53                   	push   ebx
c000c871:	e8 6a fc ff ff       	call   c000c4e0 <Phys::setPageState(unsigned long, bool)>
c000c876:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c87c:	43                   	inc    ebx
c000c87d:	42                   	inc    edx
c000c87e:	83 c4 10             	add    esp,0x10
c000c881:	89 15 f0 47 02 c0    	mov    DWORD PTR ds:0xc00247f0,edx
c000c887:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c88d:	75 dd                	jne    c000c86c <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c88f:	83 c4 3c             	add    esp,0x3c
c000c892:	5b                   	pop    ebx
c000c893:	5e                   	pop    esi
c000c894:	5f                   	pop    edi
c000c895:	5d                   	pop    ebp
c000c896:	c3                   	ret    
c000c897:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c89b:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c8a3:	56                   	push   esi
c000c8a4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c8a8:	56                   	push   esi
c000c8a9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c8ad:	57                   	push   edi
c000c8ae:	68 c0 13 02 c0       	push   0xc00213c0
c000c8b3:	e8 6b 29 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000c8b8:	5d                   	pop    ebp
c000c8b9:	58                   	pop    eax
c000c8ba:	56                   	push   esi
c000c8bb:	57                   	push   edi
c000c8bc:	e8 d2 fd ff ff       	call   c000c693 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8c9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8cd:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c8d3:	83 c4 0c             	add    esp,0xc
c000c8d6:	01 d0                	add    eax,edx
c000c8d8:	a3 f0 47 02 c0       	mov    ds:0xc00247f0,eax
c000c8dd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8e4:	52                   	push   edx
c000c8e5:	50                   	push   eax
c000c8e6:	68 7e 13 02 c0       	push   0xc002137e
c000c8eb:	e8 33 29 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	e9 92 fe ff ff       	jmp    c000c78a <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8f8 <Pipe::isAtty()>:
c000c8f8:	31 c0                	xor    eax,eax
c000c8fa:	c3                   	ret    
c000c8fb:	90                   	nop

c000c8fc <Pipe::~Pipe()>:
c000c8fc:	83 ec 0c             	sub    esp,0xc
c000c8ff:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c908:	89 10                	mov    DWORD PTR [eax],edx
c000c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90e:	83 ec 0c             	sub    esp,0xc
c000c911:	50                   	push   eax
c000c912:	e8 5d 16 00 00       	call   c000df74 <UnixFile::~UnixFile()>
c000c917:	83 c4 10             	add    esp,0x10
c000c91a:	90                   	nop
c000c91b:	83 c4 0c             	add    esp,0xc
c000c91e:	c3                   	ret    
c000c91f:	90                   	nop

c000c920 <Pipe::~Pipe()>:
c000c920:	83 ec 0c             	sub    esp,0xc
c000c923:	83 ec 0c             	sub    esp,0xc
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 cd ff ff ff       	call   c000c8fc <Pipe::~Pipe()>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	83 ec 08             	sub    esp,0x8
c000c935:	6a 20                	push   0x20
c000c937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c93b:	e8 bd 27 00 00       	call   c000f0fd <operator delete(void*, unsigned long)>
c000c940:	83 c4 10             	add    esp,0x10
c000c943:	83 c4 0c             	add    esp,0xc
c000c946:	c3                   	ret    
c000c947:	90                   	nop

c000c948 <Pipe::read(unsigned long long, void*, int*)>:
c000c948:	55                   	push   ebp
c000c949:	57                   	push   edi
c000c94a:	56                   	push   esi
c000c94b:	53                   	push   ebx
c000c94c:	83 ec 1c             	sub    esp,0x1c
c000c94f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c953:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c957:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c95b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c95e:	89 c8                	mov    eax,ecx
c000c960:	99                   	cdq    
c000c961:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c965:	74 19                	je     c000c980 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c967:	39 f9                	cmp    ecx,edi
c000c969:	89 d1                	mov    ecx,edx
c000c96b:	19 f1                	sbb    ecx,esi
c000c96d:	73 11                	jae    c000c980 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c96f:	e8 e7 c0 00 00       	call   c0018a5b <lockScheduler()>
c000c974:	e8 2b c4 00 00       	call   c0018da4 <schedule()>
c000c979:	e8 df c0 00 00       	call   c0018a5d <unlockScheduler()>
c000c97e:	eb db                	jmp    c000c95b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c980:	39 f8                	cmp    eax,edi
c000c982:	89 d1                	mov    ecx,edx
c000c984:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c988:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c98c:	19 f1                	sbb    ecx,esi
c000c98e:	73 08                	jae    c000c998 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c990:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c994:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c998:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c99b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c99e:	29 c6                	sub    esi,eax
c000c9a0:	89 f1                	mov    ecx,esi
c000c9a2:	c1 f9 1f             	sar    ecx,0x1f
c000c9a5:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9a9:	89 ca                	mov    edx,ecx
c000c9ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9af:	19 d1                	sbb    ecx,edx
c000c9b1:	73 04                	jae    c000c9b7 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9b3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9bb:	89 fd                	mov    ebp,edi
c000c9bd:	29 f5                	sub    ebp,esi
c000c9bf:	85 f6                	test   esi,esi
c000c9c1:	74 12                	je     c000c9d5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9c3:	52                   	push   edx
c000c9c4:	56                   	push   esi
c000c9c5:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9c8:	50                   	push   eax
c000c9c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9cd:	e8 ca 3c ff ff       	call   c000069c <memcpy>
c000c9d2:	83 c4 10             	add    esp,0x10
c000c9d5:	85 ed                	test   ebp,ebp
c000c9d7:	74 12                	je     c000c9eb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9d9:	50                   	push   eax
c000c9da:	55                   	push   ebp
c000c9db:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9de:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9e2:	56                   	push   esi
c000c9e3:	e8 b4 3c ff ff       	call   c000069c <memcpy>
c000c9e8:	83 c4 10             	add    esp,0x10
c000c9eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9ee:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9f1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9f4:	99                   	cdq    
c000c9f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9f9:	89 f7                	mov    edi,esi
c000c9fb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9ff:	c1 ff 1f             	sar    edi,0x1f
c000ca02:	57                   	push   edi
c000ca03:	56                   	push   esi
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	e8 11 2c 01 00       	call   c001f61c <__umoddi3>
c000ca0b:	83 c4 10             	add    esp,0x10
c000ca0e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca11:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca16:	75 10                	jne    c000ca28 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca18:	83 ec 0c             	sub    esp,0xc
c000ca1b:	68 e9 13 02 c0       	push   0xc00213e9
c000ca20:	e8 2d 90 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000ca25:	83 c4 10             	add    esp,0x10
c000ca28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca30:	89 10                	mov    DWORD PTR [eax],edx
c000ca32:	83 c4 1c             	add    esp,0x1c
c000ca35:	31 c0                	xor    eax,eax
c000ca37:	5b                   	pop    ebx
c000ca38:	5e                   	pop    esi
c000ca39:	5f                   	pop    edi
c000ca3a:	5d                   	pop    ebp
c000ca3b:	c3                   	ret    

c000ca3c <Pipe::write(unsigned long long, void*, int*)>:
c000ca3c:	55                   	push   ebp
c000ca3d:	57                   	push   edi
c000ca3e:	56                   	push   esi
c000ca3f:	53                   	push   ebx
c000ca40:	83 ec 1c             	sub    esp,0x1c
c000ca43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca4b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca52:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca55:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca58:	89 de                	mov    esi,ebx
c000ca5a:	89 df                	mov    edi,ebx
c000ca5c:	c1 ff 1f             	sar    edi,0x1f
c000ca5f:	01 c6                	add    esi,eax
c000ca61:	89 c8                	mov    eax,ecx
c000ca63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca67:	11 d7                	adc    edi,edx
c000ca69:	99                   	cdq    
c000ca6a:	89 d0                	mov    eax,edx
c000ca6c:	39 f1                	cmp    ecx,esi
c000ca6e:	19 f8                	sbb    eax,edi
c000ca70:	b8 01 00 00 00       	mov    eax,0x1
c000ca75:	0f 82 80 00 00 00    	jb     c000cafb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca7b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca7e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca81:	01 d8                	add    eax,ebx
c000ca83:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca87:	99                   	cdq    
c000ca88:	f7 f9                	idiv   ecx
c000ca8a:	29 d1                	sub    ecx,edx
c000ca8c:	89 d7                	mov    edi,edx
c000ca8e:	89 c8                	mov    eax,ecx
c000ca90:	99                   	cdq    
c000ca91:	39 ce                	cmp    esi,ecx
c000ca93:	19 d3                	sbb    ebx,edx
c000ca95:	bb 00 00 00 00       	mov    ebx,0x0
c000ca9a:	72 04                	jb     c000caa0 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca9c:	89 f3                	mov    ebx,esi
c000ca9e:	29 cb                	sub    ebx,ecx
c000caa0:	89 f1                	mov    ecx,esi
c000caa2:	29 d9                	sub    ecx,ebx
c000caa4:	74 1a                	je     c000cac0 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000caa6:	52                   	push   edx
c000caa7:	51                   	push   ecx
c000caa8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000caac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cab0:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000cab3:	57                   	push   edi
c000cab4:	e8 e3 3b ff ff       	call   c000069c <memcpy>
c000cab9:	83 c4 10             	add    esp,0x10
c000cabc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cac0:	85 db                	test   ebx,ebx
c000cac2:	74 12                	je     c000cad6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cac4:	50                   	push   eax
c000cac5:	53                   	push   ebx
c000cac6:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000caca:	51                   	push   ecx
c000cacb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cace:	e8 c9 3b ff ff       	call   c000069c <memcpy>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cad9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cade:	75 10                	jne    c000caf0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cae0:	83 ec 0c             	sub    esp,0xc
c000cae3:	68 05 14 02 c0       	push   0xc0021405
c000cae8:	e8 65 8f 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caf4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000caf7:	89 38                	mov    DWORD PTR [eax],edi
c000caf9:	31 c0                	xor    eax,eax
c000cafb:	83 c4 1c             	add    esp,0x1c
c000cafe:	5b                   	pop    ebx
c000caff:	5e                   	pop    esi
c000cb00:	5f                   	pop    edi
c000cb01:	5d                   	pop    ebp
c000cb02:	c3                   	ret    
c000cb03:	90                   	nop

c000cb04 <Pipe::Pipe(int)>:
c000cb04:	83 ec 0c             	sub    esp,0xc
c000cb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0b:	83 ec 08             	sub    esp,0x8
c000cb0e:	6a 00                	push   0x0
c000cb10:	50                   	push   eax
c000cb11:	e8 bc 12 00 00       	call   c000ddd2 <UnixFile::UnixFile(int)>
c000cb16:	83 c4 10             	add    esp,0x10
c000cb19:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000cb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb22:	89 10                	mov    DWORD PTR [eax],edx
c000cb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb2c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb33:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb49:	83 ec 0c             	sub    esp,0xc
c000cb4c:	50                   	push   eax
c000cb4d:	e8 9f f4 ff ff       	call   c000bff1 <malloc>
c000cb52:	83 c4 10             	add    esp,0x10
c000cb55:	89 c2                	mov    edx,eax
c000cb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb62:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb66:	90                   	nop
c000cb67:	83 c4 0c             	add    esp,0xc
c000cb6a:	c3                   	ret    
c000cb6b:	90                   	nop

c000cb6c <VgaText::isAtty()>:
c000cb6c:	b0 01                	mov    al,0x1
c000cb6e:	c3                   	ret    
c000cb6f:	90                   	nop

c000cb70 <VgaText::~VgaText()>:
c000cb70:	83 ec 0c             	sub    esp,0xc
c000cb73:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000cb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7c:	89 10                	mov    DWORD PTR [eax],edx
c000cb7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb82:	83 ec 0c             	sub    esp,0xc
c000cb85:	50                   	push   eax
c000cb86:	e8 e9 13 00 00       	call   c000df74 <UnixFile::~UnixFile()>
c000cb8b:	83 c4 10             	add    esp,0x10
c000cb8e:	90                   	nop
c000cb8f:	83 c4 0c             	add    esp,0xc
c000cb92:	c3                   	ret    
c000cb93:	90                   	nop

c000cb94 <VgaText::~VgaText()>:
c000cb94:	83 ec 0c             	sub    esp,0xc
c000cb97:	83 ec 0c             	sub    esp,0xc
c000cb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb9e:	e8 cd ff ff ff       	call   c000cb70 <VgaText::~VgaText()>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	83 ec 08             	sub    esp,0x8
c000cba9:	68 60 12 00 00       	push   0x1260
c000cbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbb2:	e8 46 25 00 00       	call   c000f0fd <operator delete(void*, unsigned long)>
c000cbb7:	83 c4 10             	add    esp,0x10
c000cbba:	83 c4 0c             	add    esp,0xc
c000cbbd:	c3                   	ret    

c000cbbe <VgaText::read(unsigned long long, void*, int*)>:
c000cbbe:	83 ec 10             	sub    esp,0x10
c000cbc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbcd:	e8 69 58 00 00       	call   c001243b <readKeyboard(VgaText*, char*, unsigned long)>
c000cbd2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbd6:	89 02                	mov    DWORD PTR [edx],eax
c000cbd8:	31 c0                	xor    eax,eax
c000cbda:	83 c4 1c             	add    esp,0x1c
c000cbdd:	c3                   	ret    

c000cbde <setTerminalScrollLock(bool)>:
c000cbde:	c3                   	ret    

c000cbdf <addToTerminalCycle(VgaText*)>:
c000cbdf:	8b 15 60 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024860
c000cbe5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe9:	85 d2                	test   edx,edx
c000cbeb:	75 0c                	jne    c000cbf9 <addToTerminalCycle(VgaText*)+0x1a>
c000cbed:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbf3:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000cbf8:	c3                   	ret    
c000cbf9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbff:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cc05:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc0b:	c3                   	ret    

c000cc0c <installVgaTextImplementation()>:
c000cc0c:	83 ec 10             	sub    esp,0x10
c000cc0f:	6a 20                	push   0x20
c000cc11:	6a 00                	push   0x0
c000cc13:	68 40 48 02 c0       	push   0xc0024840
c000cc18:	e8 b5 3a ff ff       	call   c00006d2 <memset>
c000cc1d:	83 c4 1c             	add    esp,0x1c
c000cc20:	c3                   	ret    

c000cc21 <scrollTerminalScrollLock(int)>:
c000cc21:	c3                   	ret    

c000cc22 <VgaText::load()>:
c000cc22:	53                   	push   ebx
c000cc23:	31 c0                	xor    eax,eax
c000cc25:	83 ec 58             	sub    esp,0x58
c000cc28:	89 e2                	mov    edx,esp
c000cc2a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc2e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc32:	40                   	inc    eax
c000cc33:	83 f8 50             	cmp    eax,0x50
c000cc36:	75 f6                	jne    c000cc2e <VgaText::load()+0xc>
c000cc38:	31 c0                	xor    eax,eax
c000cc3a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc41:	84 c9                	test   cl,cl
c000cc43:	74 06                	je     c000cc4b <VgaText::load()+0x29>
c000cc45:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc48:	40                   	inc    eax
c000cc49:	eb ef                	jmp    c000cc3a <VgaText::load()+0x18>
c000cc4b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc51:	85 c0                	test   eax,eax
c000cc53:	74 09                	je     c000cc5e <VgaText::load()+0x3c>
c000cc55:	51                   	push   ecx
c000cc56:	51                   	push   ecx
c000cc57:	52                   	push   edx
c000cc58:	53                   	push   ebx
c000cc59:	ff d0                	call   eax
c000cc5b:	83 c4 10             	add    esp,0x10
c000cc5e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc64:	85 c0                	test   eax,eax
c000cc66:	74 09                	je     c000cc71 <VgaText::load()+0x4f>
c000cc68:	83 ec 0c             	sub    esp,0xc
c000cc6b:	53                   	push   ebx
c000cc6c:	ff d0                	call   eax
c000cc6e:	83 c4 10             	add    esp,0x10
c000cc71:	83 c4 58             	add    esp,0x58
c000cc74:	5b                   	pop    ebx
c000cc75:	c3                   	ret    

c000cc76 <VgaText::updateCursor()>:
c000cc76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc7a:	39 05 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,eax
c000cc80:	75 0c                	jne    c000cc8e <VgaText::updateCursor()+0x18>
c000cc82:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc88:	85 c0                	test   eax,eax
c000cc8a:	74 02                	je     c000cc8e <VgaText::updateCursor()+0x18>
c000cc8c:	ff e0                	jmp    eax
c000cc8e:	c3                   	ret    
c000cc8f:	90                   	nop

c000cc90 <VgaText::showCursor(bool)>:
c000cc90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc98:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc9e:	c3                   	ret    
c000cc9f:	90                   	nop

c000cca0 <VgaText::disableBlink(bool)>:
c000cca0:	56                   	push   esi
c000cca1:	53                   	push   ebx
c000cca2:	51                   	push   ecx
c000cca3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cca7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccab:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ccb1:	75 18                	jne    c000cccb <VgaText::disableBlink(bool)+0x2b>
c000ccb3:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccb9:	85 c0                	test   eax,eax
c000ccbb:	74 0e                	je     c000cccb <VgaText::disableBlink(bool)+0x2b>
c000ccbd:	89 f1                	mov    ecx,esi
c000ccbf:	52                   	push   edx
c000ccc0:	52                   	push   edx
c000ccc1:	0f b6 d1             	movzx  edx,cl
c000ccc4:	52                   	push   edx
c000ccc5:	53                   	push   ebx
c000ccc6:	ff d0                	call   eax
c000ccc8:	83 c4 10             	add    esp,0x10
c000cccb:	89 f0                	mov    eax,esi
c000cccd:	83 f0 01             	xor    eax,0x1
c000ccd0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccd6:	58                   	pop    eax
c000ccd7:	5b                   	pop    ebx
c000ccd8:	5e                   	pop    esi
c000ccd9:	c3                   	ret    

c000ccda <VgaText::doANSI_SGR(int)>:
c000ccda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cce2:	85 d2                	test   edx,edx
c000cce4:	75 14                	jne    c000ccfa <VgaText::doANSI_SGR(int)+0x20>
c000cce6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccec:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccf2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccf8:	eb 65                	jmp    c000cd5f <VgaText::doANSI_SGR(int)+0x85>
c000ccfa:	83 fa 07             	cmp    edx,0x7
c000ccfd:	75 14                	jne    c000cd13 <VgaText::doANSI_SGR(int)+0x39>
c000ccff:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cd05:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd0b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd11:	eb 4c                	jmp    c000cd5f <VgaText::doANSI_SGR(int)+0x85>
c000cd13:	83 fa 1b             	cmp    edx,0x1b
c000cd16:	74 ce                	je     c000cce6 <VgaText::doANSI_SGR(int)+0xc>
c000cd18:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd1b:	83 f9 07             	cmp    ecx,0x7
c000cd1e:	77 09                	ja     c000cd29 <VgaText::doANSI_SGR(int)+0x4f>
c000cd20:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd27:	eb 20                	jmp    c000cd49 <VgaText::doANSI_SGR(int)+0x6f>
c000cd29:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd2c:	83 f9 07             	cmp    ecx,0x7
c000cd2f:	77 09                	ja     c000cd3a <VgaText::doANSI_SGR(int)+0x60>
c000cd31:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd38:	eb 25                	jmp    c000cd5f <VgaText::doANSI_SGR(int)+0x85>
c000cd3a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd3d:	83 f9 07             	cmp    ecx,0x7
c000cd40:	77 0e                	ja     c000cd50 <VgaText::doANSI_SGR(int)+0x76>
c000cd42:	8b 14 95 b8 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc548]
c000cd49:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd4f:	c3                   	ret    
c000cd50:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd53:	83 f9 07             	cmp    ecx,0x7
c000cd56:	77 0d                	ja     c000cd65 <VgaText::doANSI_SGR(int)+0x8b>
c000cd58:	8b 14 95 90 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc570]
c000cd5f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd65:	c3                   	ret    

c000cd66 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd6e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd74:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd7a:	c3                   	ret    
c000cd7b:	90                   	nop

c000cd7c <VgaText::setDefaultFgColour(VgaColour)>:
c000cd7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd84:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd8a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd90:	c3                   	ret    
c000cd91:	90                   	nop

c000cd92 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd92:	53                   	push   ebx
c000cd93:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd9f:	51                   	push   ecx
c000cda0:	e8 c1 ff ff ff       	call   c000cd66 <VgaText::setDefaultBgColour(VgaColour)>
c000cda5:	58                   	pop    eax
c000cda6:	5a                   	pop    edx
c000cda7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cdab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cdaf:	5b                   	pop    ebx
c000cdb0:	eb ca                	jmp    c000cd7c <VgaText::setDefaultFgColour(VgaColour)>

c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdb2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdb7:	c1 e2 04             	shl    edx,0x4
c000cdba:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdbe:	83 e0 0f             	and    eax,0xf
c000cdc1:	09 d0                	or     eax,edx
c000cdc3:	c3                   	ret    

c000cdc4 <VgaText::scrollScreen()>:
c000cdc4:	57                   	push   edi
c000cdc5:	56                   	push   esi
c000cdc6:	be 01 00 00 00       	mov    esi,0x1
c000cdcb:	53                   	push   ebx
c000cdcc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdd0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdd6:	31 ff                	xor    edi,edi
c000cdd8:	01 d9                	add    ecx,ebx
c000cdda:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cddd:	83 fe 17             	cmp    esi,0x17
c000cde0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cde6:	75 28                	jne    c000ce10 <VgaText::scrollScreen()+0x4c>
c000cde8:	f7 c7 01 00 00 00    	test   edi,0x1
c000cdee:	74 1c                	je     c000ce0c <VgaText::scrollScreen()+0x48>
c000cdf0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdf7:	50                   	push   eax
c000cdf8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdff:	50                   	push   eax
c000ce00:	e8 ad ff ff ff       	call   c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce05:	5a                   	pop    edx
c000ce06:	5a                   	pop    edx
c000ce07:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce0a:	eb 04                	jmp    c000ce10 <VgaText::scrollScreen()+0x4c>
c000ce0c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce10:	47                   	inc    edi
c000ce11:	41                   	inc    ecx
c000ce12:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce18:	75 c0                	jne    c000cdda <VgaText::scrollScreen()+0x16>
c000ce1a:	46                   	inc    esi
c000ce1b:	83 fe 18             	cmp    esi,0x18
c000ce1e:	75 b0                	jne    c000cdd0 <VgaText::scrollScreen()+0xc>
c000ce20:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ce26:	75 24                	jne    c000ce4c <VgaText::scrollScreen()+0x88>
c000ce28:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce2f:	74 08                	je     c000ce39 <VgaText::scrollScreen()+0x75>
c000ce31:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce37:	eb 13                	jmp    c000ce4c <VgaText::scrollScreen()+0x88>
c000ce39:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce3f:	85 c0                	test   eax,eax
c000ce41:	74 09                	je     c000ce4c <VgaText::scrollScreen()+0x88>
c000ce43:	83 ec 0c             	sub    esp,0xc
c000ce46:	53                   	push   ebx
c000ce47:	ff d0                	call   eax
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce50:	5b                   	pop    ebx
c000ce51:	5e                   	pop    esi
c000ce52:	5f                   	pop    edi
c000ce53:	e9 1e fe ff ff       	jmp    c000cc76 <VgaText::updateCursor()>

c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce5d:	c1 e0 08             	shl    eax,0x8
c000ce60:	89 c2                	mov    edx,eax
c000ce62:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce67:	09 d0                	or     eax,edx
c000ce69:	c3                   	ret    

c000ce6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce6a:	53                   	push   ebx
c000ce6b:	83 ec 08             	sub    esp,0x8
c000ce6e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce77:	50                   	push   eax
c000ce78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce7d:	50                   	push   eax
c000ce7e:	e8 2f ff ff ff       	call   c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce83:	5a                   	pop    edx
c000ce84:	5b                   	pop    ebx
c000ce85:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce8a:	0f b6 c0             	movzx  eax,al
c000ce8d:	50                   	push   eax
c000ce8e:	53                   	push   ebx
c000ce8f:	e8 c4 ff ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce94:	5a                   	pop    edx
c000ce95:	5a                   	pop    edx
c000ce96:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce9c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000cea0:	0f b7 d2             	movzx  edx,dx
c000cea3:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cea8:	39 0d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ecx
c000ceae:	75 14                	jne    c000cec4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceb0:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ceb6:	85 c0                	test   eax,eax
c000ceb8:	74 0a                	je     c000cec4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cebe:	83 c4 08             	add    esp,0x8
c000cec1:	5b                   	pop    ebx
c000cec2:	ff e0                	jmp    eax
c000cec4:	83 c4 08             	add    esp,0x8
c000cec7:	5b                   	pop    ebx
c000cec8:	c3                   	ret    
c000cec9:	90                   	nop

c000ceca <VgaText::getCursorX()>:
c000ceca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cece:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ced4:	c3                   	ret    
c000ced5:	90                   	nop

c000ced6 <VgaText::getCursorY()>:
c000ced6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceda:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cee0:	c3                   	ret    
c000cee1:	90                   	nop

c000cee2 <VgaText::setCursor(int, int)>:
c000cee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ceea:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cef0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cef4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cefa:	e9 77 fd ff ff       	jmp    c000cc76 <VgaText::updateCursor()>
c000ceff:	90                   	nop

c000cf00 <VgaText::setCursorX(int)>:
c000cf00:	83 ec 10             	sub    esp,0x10
c000cf03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf07:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf11:	50                   	push   eax
c000cf12:	e8 cb ff ff ff       	call   c000cee2 <VgaText::setCursor(int, int)>
c000cf17:	83 c4 1c             	add    esp,0x1c
c000cf1a:	c3                   	ret    
c000cf1b:	90                   	nop

c000cf1c <VgaText::setCursorY(int)>:
c000cf1c:	83 ec 10             	sub    esp,0x10
c000cf1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf27:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf2d:	50                   	push   eax
c000cf2e:	e8 af ff ff ff       	call   c000cee2 <VgaText::setCursor(int, int)>
c000cf33:	83 c4 1c             	add    esp,0x1c
c000cf36:	c3                   	ret    
c000cf37:	90                   	nop

c000cf38 <VgaText::incrementCursor(bool)>:
c000cf38:	56                   	push   esi
c000cf39:	53                   	push   ebx
c000cf3a:	51                   	push   ecx
c000cf3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf43:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf49:	40                   	inc    eax
c000cf4a:	83 f8 50             	cmp    eax,0x50
c000cf4d:	74 08                	je     c000cf57 <VgaText::incrementCursor(bool)+0x1f>
c000cf4f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf55:	eb 33                	jmp    c000cf8a <VgaText::incrementCursor(bool)+0x52>
c000cf57:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf5d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf67:	8d 50 01             	lea    edx,[eax+0x1]
c000cf6a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf70:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf76:	75 12                	jne    c000cf8a <VgaText::incrementCursor(bool)+0x52>
c000cf78:	83 ec 0c             	sub    esp,0xc
c000cf7b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf81:	53                   	push   ebx
c000cf82:	e8 3d fe ff ff       	call   c000cdc4 <VgaText::scrollScreen()>
c000cf87:	83 c4 10             	add    esp,0x10
c000cf8a:	89 f0                	mov    eax,esi
c000cf8c:	84 c0                	test   al,al
c000cf8e:	74 0c                	je     c000cf9c <VgaText::incrementCursor(bool)+0x64>
c000cf90:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf94:	5a                   	pop    edx
c000cf95:	5b                   	pop    ebx
c000cf96:	5e                   	pop    esi
c000cf97:	e9 da fc ff ff       	jmp    c000cc76 <VgaText::updateCursor()>
c000cf9c:	58                   	pop    eax
c000cf9d:	5b                   	pop    ebx
c000cf9e:	5e                   	pop    esi
c000cf9f:	c3                   	ret    

c000cfa0 <VgaText::updateRAMUsageDisplay(int)>:
c000cfa0:	53                   	push   ebx
c000cfa1:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfa6:	6a 0f                	push   0xf
c000cfa8:	6a 00                	push   0x0
c000cfaa:	e8 03 fe ff ff       	call   c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfaf:	5a                   	pop    edx
c000cfb0:	59                   	pop    ecx
c000cfb1:	0f b6 c8             	movzx  ecx,al
c000cfb4:	51                   	push   ecx
c000cfb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfb9:	99                   	cdq    
c000cfba:	f7 fb                	idiv   ebx
c000cfbc:	83 c0 30             	add    eax,0x30
c000cfbf:	89 d3                	mov    ebx,edx
c000cfc1:	0f be c0             	movsx  eax,al
c000cfc4:	50                   	push   eax
c000cfc5:	e8 8e fe ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfca:	5a                   	pop    edx
c000cfcb:	83 c3 30             	add    ebx,0x30
c000cfce:	5a                   	pop    edx
c000cfcf:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfd5:	0f b6 db             	movzx  ebx,bl
c000cfd8:	51                   	push   ecx
c000cfd9:	53                   	push   ebx
c000cfda:	e8 79 fe ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfdf:	5b                   	pop    ebx
c000cfe0:	5a                   	pop    edx
c000cfe1:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfe7:	51                   	push   ecx
c000cfe8:	6a 25                	push   0x25
c000cfea:	e8 69 fe ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfef:	59                   	pop    ecx
c000cff0:	5b                   	pop    ebx
c000cff1:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cff7:	5b                   	pop    ebx
c000cff8:	c3                   	ret    
c000cff9:	90                   	nop

c000cffa <VgaText::updateDiskUsage()>:
c000cffa:	55                   	push   ebp
c000cffb:	bd 10 27 00 00       	mov    ebp,0x2710
c000d000:	57                   	push   edi
c000d001:	56                   	push   esi
c000d002:	53                   	push   ebx
c000d003:	6a 0f                	push   0xf
c000d005:	6a 00                	push   0x0
c000d007:	e8 a6 fd ff ff       	call   c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000d00c:	0f b6 d8             	movzx  ebx,al
c000d00f:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d014:	5a                   	pop    edx
c000d015:	99                   	cdq    
c000d016:	f7 fd                	idiv   ebp
c000d018:	59                   	pop    ecx
c000d019:	b9 0a 00 00 00       	mov    ecx,0xa
c000d01e:	99                   	cdq    
c000d01f:	f7 f9                	idiv   ecx
c000d021:	53                   	push   ebx
c000d022:	8d 42 30             	lea    eax,[edx+0x30]
c000d025:	0f b6 c0             	movzx  eax,al
c000d028:	50                   	push   eax
c000d029:	e8 2a fe ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d02e:	5e                   	pop    esi
c000d02f:	5f                   	pop    edi
c000d030:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d036:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d03b:	bf e8 03 00 00       	mov    edi,0x3e8
c000d040:	99                   	cdq    
c000d041:	f7 ff                	idiv   edi
c000d043:	99                   	cdq    
c000d044:	f7 f9                	idiv   ecx
c000d046:	53                   	push   ebx
c000d047:	8d 42 30             	lea    eax,[edx+0x30]
c000d04a:	0f b6 c0             	movzx  eax,al
c000d04d:	50                   	push   eax
c000d04e:	e8 05 fe ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d053:	5a                   	pop    edx
c000d054:	5e                   	pop    esi
c000d055:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d05b:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d060:	be 64 00 00 00       	mov    esi,0x64
c000d065:	99                   	cdq    
c000d066:	f7 fe                	idiv   esi
c000d068:	99                   	cdq    
c000d069:	f7 f9                	idiv   ecx
c000d06b:	53                   	push   ebx
c000d06c:	8d 42 30             	lea    eax,[edx+0x30]
c000d06f:	0f b6 c0             	movzx  eax,al
c000d072:	50                   	push   eax
c000d073:	e8 e0 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d078:	5a                   	pop    edx
c000d079:	5a                   	pop    edx
c000d07a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d080:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d085:	53                   	push   ebx
c000d086:	99                   	cdq    
c000d087:	f7 f9                	idiv   ecx
c000d089:	99                   	cdq    
c000d08a:	f7 f9                	idiv   ecx
c000d08c:	8d 42 30             	lea    eax,[edx+0x30]
c000d08f:	0f b6 c0             	movzx  eax,al
c000d092:	50                   	push   eax
c000d093:	e8 c0 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d098:	5a                   	pop    edx
c000d099:	5a                   	pop    edx
c000d09a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d0a0:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d0a5:	53                   	push   ebx
c000d0a6:	99                   	cdq    
c000d0a7:	f7 f9                	idiv   ecx
c000d0a9:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ac:	0f b6 c0             	movzx  eax,al
c000d0af:	50                   	push   eax
c000d0b0:	e8 a3 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0b5:	5a                   	pop    edx
c000d0b6:	5a                   	pop    edx
c000d0b7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0bd:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0c2:	53                   	push   ebx
c000d0c3:	99                   	cdq    
c000d0c4:	f7 fd                	idiv   ebp
c000d0c6:	99                   	cdq    
c000d0c7:	f7 f9                	idiv   ecx
c000d0c9:	8d 42 30             	lea    eax,[edx+0x30]
c000d0cc:	0f b6 c0             	movzx  eax,al
c000d0cf:	50                   	push   eax
c000d0d0:	e8 83 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0d5:	5d                   	pop    ebp
c000d0d6:	5a                   	pop    edx
c000d0d7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0dd:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0e2:	53                   	push   ebx
c000d0e3:	99                   	cdq    
c000d0e4:	f7 ff                	idiv   edi
c000d0e6:	99                   	cdq    
c000d0e7:	f7 f9                	idiv   ecx
c000d0e9:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ec:	0f b6 c0             	movzx  eax,al
c000d0ef:	50                   	push   eax
c000d0f0:	e8 63 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0f5:	5f                   	pop    edi
c000d0f6:	5d                   	pop    ebp
c000d0f7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0fd:	53                   	push   ebx
c000d0fe:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d103:	99                   	cdq    
c000d104:	f7 fe                	idiv   esi
c000d106:	99                   	cdq    
c000d107:	f7 f9                	idiv   ecx
c000d109:	8d 42 30             	lea    eax,[edx+0x30]
c000d10c:	0f b6 c0             	movzx  eax,al
c000d10f:	50                   	push   eax
c000d110:	e8 43 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d115:	5a                   	pop    edx
c000d116:	5e                   	pop    esi
c000d117:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d11d:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d122:	53                   	push   ebx
c000d123:	99                   	cdq    
c000d124:	f7 f9                	idiv   ecx
c000d126:	99                   	cdq    
c000d127:	f7 f9                	idiv   ecx
c000d129:	8d 42 30             	lea    eax,[edx+0x30]
c000d12c:	0f b6 c0             	movzx  eax,al
c000d12f:	50                   	push   eax
c000d130:	e8 23 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d135:	5f                   	pop    edi
c000d136:	5d                   	pop    ebp
c000d137:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d13d:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d142:	53                   	push   ebx
c000d143:	99                   	cdq    
c000d144:	f7 f9                	idiv   ecx
c000d146:	83 c2 30             	add    edx,0x30
c000d149:	0f b6 d2             	movzx  edx,dl
c000d14c:	52                   	push   edx
c000d14d:	e8 06 fd ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d152:	5a                   	pop    edx
c000d153:	59                   	pop    ecx
c000d154:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d15a:	5b                   	pop    ebx
c000d15b:	5e                   	pop    esi
c000d15c:	5f                   	pop    edi
c000d15d:	5d                   	pop    ebp
c000d15e:	c3                   	ret    
c000d15f:	90                   	nop

c000d160 <VgaText::updateTitle()>:
c000d160:	53                   	push   ebx
c000d161:	31 c0                	xor    eax,eax
c000d163:	83 ec 58             	sub    esp,0x58
c000d166:	89 e1                	mov    ecx,esp
c000d168:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d16c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d170:	40                   	inc    eax
c000d171:	83 f8 50             	cmp    eax,0x50
c000d174:	75 f6                	jne    c000d16c <VgaText::updateTitle()+0xc>
c000d176:	31 c0                	xor    eax,eax
c000d178:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d17f:	84 db                	test   bl,bl
c000d181:	74 06                	je     c000d189 <VgaText::updateTitle()+0x29>
c000d183:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d186:	40                   	inc    eax
c000d187:	eb ef                	jmp    c000d178 <VgaText::updateTitle()+0x18>
c000d189:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d18f:	85 c0                	test   eax,eax
c000d191:	74 09                	je     c000d19c <VgaText::updateTitle()+0x3c>
c000d193:	53                   	push   ebx
c000d194:	53                   	push   ebx
c000d195:	51                   	push   ecx
c000d196:	52                   	push   edx
c000d197:	ff d0                	call   eax
c000d199:	83 c4 10             	add    esp,0x10
c000d19c:	e8 59 fe ff ff       	call   c000cffa <VgaText::updateDiskUsage()>
c000d1a1:	83 c4 58             	add    esp,0x58
c000d1a4:	5b                   	pop    ebx
c000d1a5:	c3                   	ret    

c000d1a6 <VgaText::setTitleTextColour(VgaColour)>:
c000d1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ae:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1b4:	eb aa                	jmp    c000d160 <VgaText::updateTitle()>

c000d1b6 <VgaText::setTitleColour(VgaColour)>:
c000d1b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1be:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1c4:	eb 9a                	jmp    c000d160 <VgaText::updateTitle()>

c000d1c6 <VgaText::setTitle(char*)>:
c000d1c6:	53                   	push   ebx
c000d1c7:	83 ec 10             	sub    esp,0x10
c000d1ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1d8:	50                   	push   eax
c000d1d9:	e8 93 35 ff ff       	call   c0000771 <strcpy>
c000d1de:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1e2:	83 c4 18             	add    esp,0x18
c000d1e5:	5b                   	pop    ebx
c000d1e6:	e9 75 ff ff ff       	jmp    c000d160 <VgaText::updateTitle()>
c000d1eb:	90                   	nop

c000d1ec <VgaText::decrementCursor(bool)>:
c000d1ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1f4:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1fa:	85 c0                	test   eax,eax
c000d1fc:	74 07                	je     c000d205 <VgaText::decrementCursor(bool)+0x19>
c000d1fe:	48                   	dec    eax
c000d1ff:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d205:	84 c9                	test   cl,cl
c000d207:	74 09                	je     c000d212 <VgaText::decrementCursor(bool)+0x26>
c000d209:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d20d:	e9 64 fa ff ff       	jmp    c000cc76 <VgaText::updateCursor()>
c000d212:	c3                   	ret    
c000d213:	90                   	nop

c000d214 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d214:	53                   	push   ebx
c000d215:	83 ec 08             	sub    esp,0x8
c000d218:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d21c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d220:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d224:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d228:	3c 07                	cmp    al,0x7
c000d22a:	75 2a                	jne    c000d256 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d22c:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c000d231:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d239:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d241:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d249:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d24d:	83 c4 08             	add    esp,0x8
c000d250:	5b                   	pop    ebx
c000d251:	e9 c0 2d 00 00       	jmp    c0010016 <Buzzer::beep(int, int, bool)>
c000d256:	3c 0d                	cmp    al,0xd
c000d258:	75 0c                	jne    c000d266 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d25a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d264:	eb 3b                	jmp    c000d2a1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d266:	3c 0a                	cmp    al,0xa
c000d268:	75 40                	jne    c000d2aa <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d26a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d270:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d27a:	8d 50 01             	lea    edx,[eax+0x1]
c000d27d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d283:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d289:	75 12                	jne    c000d29d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d28b:	83 ec 0c             	sub    esp,0xc
c000d28e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d294:	53                   	push   ebx
c000d295:	e8 2a fb ff ff       	call   c000cdc4 <VgaText::scrollScreen()>
c000d29a:	83 c4 10             	add    esp,0x10
c000d29d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d2a1:	83 c4 08             	add    esp,0x8
c000d2a4:	5b                   	pop    ebx
c000d2a5:	e9 cc f9 ff ff       	jmp    c000cc76 <VgaText::updateCursor()>
c000d2aa:	3c 08                	cmp    al,0x8
c000d2ac:	75 31                	jne    c000d2df <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2ae:	50                   	push   eax
c000d2af:	50                   	push   eax
c000d2b0:	6a 01                	push   0x1
c000d2b2:	53                   	push   ebx
c000d2b3:	e8 34 ff ff ff       	call   c000d1ec <VgaText::decrementCursor(bool)>
c000d2b8:	5a                   	pop    edx
c000d2b9:	59                   	pop    ecx
c000d2ba:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2c0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2c6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2cc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2d2:	6a 20                	push   0x20
c000d2d4:	53                   	push   ebx
c000d2d5:	e8 90 fb ff ff       	call   c000ce6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2da:	83 c4 28             	add    esp,0x28
c000d2dd:	5b                   	pop    ebx
c000d2de:	c3                   	ret    
c000d2df:	83 ec 08             	sub    esp,0x8
c000d2e2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2e8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2ee:	0f be c0             	movsx  eax,al
c000d2f1:	51                   	push   ecx
c000d2f2:	52                   	push   edx
c000d2f3:	50                   	push   eax
c000d2f4:	53                   	push   ebx
c000d2f5:	e8 70 fb ff ff       	call   c000ce6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2fa:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2fe:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d306:	83 c4 28             	add    esp,0x28
c000d309:	5b                   	pop    ebx
c000d30a:	e9 29 fc ff ff       	jmp    c000cf38 <VgaText::incrementCursor(bool)>
c000d30f:	90                   	nop

c000d310 <VgaText::isShowingCursor()>:
c000d310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d314:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d31a:	c3                   	ret    
c000d31b:	90                   	nop

c000d31c <VgaText::isBlinkDisabled()>:
c000d31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d320:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d326:	83 f0 01             	xor    eax,0x1
c000d329:	c3                   	ret    

c000d32a <VgaText::setCursorHeight(int)>:
c000d32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d32e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d332:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d338:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d33f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d343:	e9 48 f9 ff ff       	jmp    c000cc90 <VgaText::showCursor(bool)>

c000d348 <VgaText::getCursorHeight()>:
c000d348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d34c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d352:	c3                   	ret    

c000d353 <setActiveTerminal(VgaText*)>:
c000d353:	53                   	push   ebx
c000d354:	83 ec 08             	sub    esp,0x8
c000d357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d35b:	85 db                	test   ebx,ebx
c000d35d:	75 11                	jne    c000d370 <setActiveTerminal(VgaText*)+0x1d>
c000d35f:	c7 44 24 10 40 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021440
c000d367:	83 c4 08             	add    esp,0x8
c000d36a:	5b                   	pop    ebx
c000d36b:	e9 e2 86 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000d370:	50                   	push   eax
c000d371:	50                   	push   eax
c000d372:	53                   	push   ebx
c000d373:	68 4e 14 02 c0       	push   0xc002144e
c000d378:	e8 a6 1e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000d37d:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c000d382:	83 c4 10             	add    esp,0x10
c000d385:	85 c0                	test   eax,eax
c000d387:	74 0c                	je     c000d395 <setActiveTerminal(VgaText*)+0x42>
c000d389:	83 ec 0c             	sub    esp,0xc
c000d38c:	50                   	push   eax
c000d38d:	e8 e4 f8 ff ff       	call   c000cc76 <VgaText::updateCursor()>
c000d392:	83 c4 10             	add    esp,0x10
c000d395:	51                   	push   ecx
c000d396:	89 1d 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,ebx
c000d39c:	51                   	push   ecx
c000d39d:	53                   	push   ebx
c000d39e:	68 66 14 02 c0       	push   0xc0021466
c000d3a3:	e8 7b 1e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000d3a8:	83 c4 0c             	add    esp,0xc
c000d3ab:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3b1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3b7:	53                   	push   ebx
c000d3b8:	e8 25 fb ff ff       	call   c000cee2 <VgaText::setCursor(int, int)>
c000d3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c0:	e8 57 ff ff ff       	call   c000d31c <VgaText::isBlinkDisabled()>
c000d3c5:	5a                   	pop    edx
c000d3c6:	59                   	pop    ecx
c000d3c7:	0f b6 c0             	movzx  eax,al
c000d3ca:	50                   	push   eax
c000d3cb:	53                   	push   ebx
c000d3cc:	e8 cf f8 ff ff       	call   c000cca0 <VgaText::disableBlink(bool)>
c000d3d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3d4:	e8 6f ff ff ff       	call   c000d348 <VgaText::getCursorHeight()>
c000d3d9:	5a                   	pop    edx
c000d3da:	59                   	pop    ecx
c000d3db:	50                   	push   eax
c000d3dc:	53                   	push   ebx
c000d3dd:	e8 48 ff ff ff       	call   c000d32a <VgaText::setCursorHeight(int)>
c000d3e2:	83 c4 10             	add    esp,0x10
c000d3e5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3ec:	75 0a                	jne    c000d3f8 <setActiveTerminal(VgaText*)+0xa5>
c000d3ee:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3fc:	83 c4 08             	add    esp,0x8
c000d3ff:	5b                   	pop    ebx
c000d400:	e9 1d f8 ff ff       	jmp    c000cc22 <VgaText::load()>

c000d405 <doTerminalCycle()>:
c000d405:	83 ec 18             	sub    esp,0x18
c000d408:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000d40d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d413:	50                   	push   eax
c000d414:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000d419:	e8 35 ff ff ff       	call   c000d353 <setActiveTerminal(VgaText*)>
c000d41e:	83 c4 1c             	add    esp,0x1c
c000d421:	c3                   	ret    

c000d422 <VgaText::doUpdate()>:
c000d422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d426:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d42c:	85 c0                	test   eax,eax
c000d42e:	74 02                	je     c000d432 <VgaText::doUpdate()+0x10>
c000d430:	ff e0                	jmp    eax
c000d432:	c3                   	ret    
c000d433:	90                   	nop

c000d434 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d434:	55                   	push   ebp
c000d435:	57                   	push   edi
c000d436:	56                   	push   esi
c000d437:	53                   	push   ebx
c000d438:	83 ec 1c             	sub    esp,0x1c
c000d43b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d43f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d444:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d44b:	50                   	push   eax
c000d44c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d451:	50                   	push   eax
c000d452:	e8 5b f9 ff ff       	call   c000cdb2 <VgaText::combineColours(unsigned char, unsigned char)>
c000d457:	59                   	pop    ecx
c000d458:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d45b:	5b                   	pop    ebx
c000d45c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d464:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d46a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d46e:	0f b7 db             	movzx  ebx,bx
c000d471:	01 db                	add    ebx,ebx
c000d473:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d477:	01 fb                	add    ebx,edi
c000d479:	31 c0                	xor    eax,eax
c000d47b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d47e:	84 c9                	test   cl,cl
c000d480:	0f 84 3d 01 00 00    	je     c000d5c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d486:	80 f9 0d             	cmp    cl,0xd
c000d489:	75 0f                	jne    c000d49a <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d48b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d495:	e9 23 01 00 00       	jmp    c000d5bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d49a:	80 f9 0a             	cmp    cl,0xa
c000d49d:	75 5b                	jne    c000d4fa <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d49f:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d4a5:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4af:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4b2:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4b8:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4be:	75 12                	jne    c000d4d2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4c0:	83 ec 0c             	sub    esp,0xc
c000d4c3:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4c9:	55                   	push   ebp
c000d4ca:	e8 f5 f8 ff ff       	call   c000cdc4 <VgaText::scrollScreen()>
c000d4cf:	83 c4 10             	add    esp,0x10
c000d4d2:	83 ec 0c             	sub    esp,0xc
c000d4d5:	55                   	push   ebp
c000d4d6:	e8 9b f7 ff ff       	call   c000cc76 <VgaText::updateCursor()>
c000d4db:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4e3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4e9:	83 c4 10             	add    esp,0x10
c000d4ec:	0f b7 db             	movzx  ebx,bx
c000d4ef:	01 db                	add    ebx,ebx
c000d4f1:	31 c0                	xor    eax,eax
c000d4f3:	01 fb                	add    ebx,edi
c000d4f5:	e9 c3 00 00 00       	jmp    c000d5bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4fa:	80 f9 08             	cmp    cl,0x8
c000d4fd:	75 4e                	jne    c000d54d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d503:	50                   	push   eax
c000d504:	50                   	push   eax
c000d505:	6a 01                	push   0x1
c000d507:	55                   	push   ebp
c000d508:	e8 df fc ff ff       	call   c000d1ec <VgaText::decrementCursor(bool)>
c000d50d:	58                   	pop    eax
c000d50e:	5a                   	pop    edx
c000d50f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d515:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d51b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d521:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d527:	6a 20                	push   0x20
c000d529:	55                   	push   ebp
c000d52a:	e8 3b f9 ff ff       	call   c000ce6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d52f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d537:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d53d:	83 c4 20             	add    esp,0x20
c000d540:	0f b7 db             	movzx  ebx,bx
c000d543:	01 db                	add    ebx,ebx
c000d545:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d549:	01 fb                	add    ebx,edi
c000d54b:	eb 70                	jmp    c000d5bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d54d:	50                   	push   eax
c000d54e:	50                   	push   eax
c000d54f:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d554:	50                   	push   eax
c000d555:	51                   	push   ecx
c000d556:	e8 fd f8 ff ff       	call   c000ce58 <VgaText::combineCharAndColour(char, unsigned char)>
c000d55b:	66 89 03             	mov    WORD PTR [ebx],ax
c000d55e:	83 c4 10             	add    esp,0x10
c000d561:	39 2d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebp
c000d567:	75 2a                	jne    c000d593 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d569:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d56f:	85 c0                	test   eax,eax
c000d571:	74 20                	je     c000d593 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d573:	52                   	push   edx
c000d574:	52                   	push   edx
c000d575:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d57b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d581:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d585:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d589:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d58c:	51                   	push   ecx
c000d58d:	55                   	push   ebp
c000d58e:	ff d0                	call   eax
c000d590:	83 c4 20             	add    esp,0x20
c000d593:	50                   	push   eax
c000d594:	83 c3 02             	add    ebx,0x2
c000d597:	50                   	push   eax
c000d598:	6a 00                	push   0x0
c000d59a:	55                   	push   ebp
c000d59b:	e8 98 f9 ff ff       	call   c000cf38 <VgaText::incrementCursor(bool)>
c000d5a0:	83 c4 10             	add    esp,0x10
c000d5a3:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5aa:	75 0f                	jne    c000d5bb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d5ac:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5b4:	0f b7 db             	movzx  ebx,bx
c000d5b7:	01 db                	add    ebx,ebx
c000d5b9:	01 fb                	add    ebx,edi
c000d5bb:	b0 01                	mov    al,0x1
c000d5bd:	46                   	inc    esi
c000d5be:	e9 b8 fe ff ff       	jmp    c000d47b <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5c3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5c7:	83 ec 0c             	sub    esp,0xc
c000d5ca:	55                   	push   ebp
c000d5cb:	e8 a6 f6 ff ff       	call   c000cc76 <VgaText::updateCursor()>
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5d7:	84 c0                	test   al,al
c000d5d9:	74 0c                	je     c000d5e7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5db:	83 ec 0c             	sub    esp,0xc
c000d5de:	55                   	push   ebp
c000d5df:	e8 3e fe ff ff       	call   c000d422 <VgaText::doUpdate()>
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5ee:	83 c4 1c             	add    esp,0x1c
c000d5f1:	5b                   	pop    ebx
c000d5f2:	5e                   	pop    esi
c000d5f3:	5f                   	pop    edi
c000d5f4:	5d                   	pop    ebp
c000d5f5:	c3                   	ret    

c000d5f6 <VgaText::clearScreen()>:
c000d5f6:	57                   	push   edi
c000d5f7:	56                   	push   esi
c000d5f8:	31 f6                	xor    esi,esi
c000d5fa:	53                   	push   ebx
c000d5fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5ff:	52                   	push   edx
c000d600:	6a 00                	push   0x0
c000d602:	6a 00                	push   0x0
c000d604:	53                   	push   ebx
c000d605:	e8 d8 f8 ff ff       	call   c000cee2 <VgaText::setCursor(int, int)>
c000d60a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d611:	83 c4 10             	add    esp,0x10
c000d614:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d61a:	7e 26                	jle    c000d642 <VgaText::clearScreen()+0x4c>
c000d61c:	31 ff                	xor    edi,edi
c000d61e:	50                   	push   eax
c000d61f:	50                   	push   eax
c000d620:	56                   	push   esi
c000d621:	57                   	push   edi
c000d622:	47                   	inc    edi
c000d623:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d629:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d62f:	6a 20                	push   0x20
c000d631:	53                   	push   ebx
c000d632:	e8 33 f8 ff ff       	call   c000ce6a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d637:	83 c4 20             	add    esp,0x20
c000d63a:	83 ff 50             	cmp    edi,0x50
c000d63d:	75 df                	jne    c000d61e <VgaText::clearScreen()+0x28>
c000d63f:	46                   	inc    esi
c000d640:	eb d2                	jmp    c000d614 <VgaText::clearScreen()+0x1e>
c000d642:	83 ec 0c             	sub    esp,0xc
c000d645:	53                   	push   ebx
c000d646:	e8 d7 fd ff ff       	call   c000d422 <VgaText::doUpdate()>
c000d64b:	83 c4 10             	add    esp,0x10
c000d64e:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d655:	5b                   	pop    ebx
c000d656:	5e                   	pop    esi
c000d657:	5f                   	pop    edi
c000d658:	c3                   	ret    
c000d659:	90                   	nop

c000d65a <VgaText::putchar(char)>:
c000d65a:	56                   	push   esi
c000d65b:	53                   	push   ebx
c000d65c:	83 ec 14             	sub    esp,0x14
c000d65f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d663:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d667:	3c 5b                	cmp    al,0x5b
c000d669:	75 21                	jne    c000d68c <VgaText::putchar(char)+0x32>
c000d66b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d672:	74 28                	je     c000d69c <VgaText::putchar(char)+0x42>
c000d674:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d67d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d687:	e9 e2 00 00 00       	jmp    c000d76e <VgaText::putchar(char)+0x114>
c000d68c:	3c 1b                	cmp    al,0x1b
c000d68e:	75 0c                	jne    c000d69c <VgaText::putchar(char)+0x42>
c000d690:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d697:	e9 d2 00 00 00       	jmp    c000d76e <VgaText::putchar(char)+0x114>
c000d69c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d6a2:	84 c9                	test   cl,cl
c000d6a4:	0f 84 ab 00 00 00    	je     c000d755 <VgaText::putchar(char)+0xfb>
c000d6aa:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6ad:	80 fa 3e             	cmp    dl,0x3e
c000d6b0:	0f 87 82 00 00 00    	ja     c000d738 <VgaText::putchar(char)+0xde>
c000d6b6:	3c 6d                	cmp    al,0x6d
c000d6b8:	75 4d                	jne    c000d707 <VgaText::putchar(char)+0xad>
c000d6ba:	31 f6                	xor    esi,esi
c000d6bc:	31 d2                	xor    edx,edx
c000d6be:	31 c0                	xor    eax,eax
c000d6c0:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6c6:	7e 30                	jle    c000d6f8 <VgaText::putchar(char)+0x9e>
c000d6c8:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6d0:	80 fa 3b             	cmp    dl,0x3b
c000d6d3:	75 17                	jne    c000d6ec <VgaText::putchar(char)+0x92>
c000d6d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6d9:	50                   	push   eax
c000d6da:	53                   	push   ebx
c000d6db:	e8 fa f5 ff ff       	call   c000ccda <VgaText::doANSI_SGR(int)>
c000d6e0:	59                   	pop    ecx
c000d6e1:	31 d2                	xor    edx,edx
c000d6e3:	58                   	pop    eax
c000d6e4:	31 c0                	xor    eax,eax
c000d6e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6ea:	eb 09                	jmp    c000d6f5 <VgaText::putchar(char)+0x9b>
c000d6ec:	6b c0 0a             	imul   eax,eax,0xa
c000d6ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6f3:	88 ca                	mov    dl,cl
c000d6f5:	46                   	inc    esi
c000d6f6:	eb c8                	jmp    c000d6c0 <VgaText::putchar(char)+0x66>
c000d6f8:	84 d2                	test   dl,dl
c000d6fa:	74 31                	je     c000d72d <VgaText::putchar(char)+0xd3>
c000d6fc:	50                   	push   eax
c000d6fd:	53                   	push   ebx
c000d6fe:	e8 d7 f5 ff ff       	call   c000ccda <VgaText::doANSI_SGR(int)>
c000d703:	58                   	pop    eax
c000d704:	5a                   	pop    edx
c000d705:	eb 26                	jmp    c000d72d <VgaText::putchar(char)+0xd3>
c000d707:	3c 4a                	cmp    al,0x4a
c000d709:	75 22                	jne    c000d72d <VgaText::putchar(char)+0xd3>
c000d70b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d712:	75 19                	jne    c000d72d <VgaText::putchar(char)+0xd3>
c000d714:	83 ec 0c             	sub    esp,0xc
c000d717:	53                   	push   ebx
c000d718:	e8 d9 fe ff ff       	call   c000d5f6 <VgaText::clearScreen()>
c000d71d:	83 c4 0c             	add    esp,0xc
c000d720:	6a 00                	push   0x0
c000d722:	6a 00                	push   0x0
c000d724:	53                   	push   ebx
c000d725:	e8 b8 f7 ff ff       	call   c000cee2 <VgaText::setCursor(int, int)>
c000d72a:	83 c4 10             	add    esp,0x10
c000d72d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d736:	eb 36                	jmp    c000d76e <VgaText::putchar(char)+0x114>
c000d738:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d73e:	83 fa 0e             	cmp    edx,0xe
c000d741:	7f 2b                	jg     c000d76e <VgaText::putchar(char)+0x114>
c000d743:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d746:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d74c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d753:	eb 19                	jmp    c000d76e <VgaText::putchar(char)+0x114>
c000d755:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d75b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d761:	0f be c0             	movsx  eax,al
c000d764:	50                   	push   eax
c000d765:	53                   	push   ebx
c000d766:	e8 a9 fa ff ff       	call   c000d214 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d76b:	83 c4 10             	add    esp,0x10
c000d76e:	83 c4 14             	add    esp,0x14
c000d771:	5b                   	pop    ebx
c000d772:	5e                   	pop    esi
c000d773:	c3                   	ret    

c000d774 <VgaText::puts(char const*)>:
c000d774:	53                   	push   ebx
c000d775:	83 ec 08             	sub    esp,0x8
c000d778:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d77c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d77f:	84 c0                	test   al,al
c000d781:	74 12                	je     c000d795 <VgaText::puts(char const*)+0x21>
c000d783:	51                   	push   ecx
c000d784:	43                   	inc    ebx
c000d785:	51                   	push   ecx
c000d786:	50                   	push   eax
c000d787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78b:	e8 ca fe ff ff       	call   c000d65a <VgaText::putchar(char)>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	eb e7                	jmp    c000d77c <VgaText::puts(char const*)+0x8>
c000d795:	83 c4 08             	add    esp,0x8
c000d798:	5b                   	pop    ebx
c000d799:	c3                   	ret    

c000d79a <VgaText::putx(unsigned int)>:
c000d79a:	57                   	push   edi
c000d79b:	b9 11 00 00 00       	mov    ecx,0x11
c000d7a0:	56                   	push   esi
c000d7a1:	be 82 14 02 c0       	mov    esi,0xc0021482
c000d7a6:	53                   	push   ebx
c000d7a7:	83 ec 20             	sub    esp,0x20
c000d7aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7ae:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7b2:	fc                   	cld    
c000d7b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b5:	be 08 00 00 00       	mov    esi,0x8
c000d7ba:	50                   	push   eax
c000d7bb:	50                   	push   eax
c000d7bc:	89 d8                	mov    eax,ebx
c000d7be:	c1 e8 1c             	shr    eax,0x1c
c000d7c1:	c1 e3 04             	shl    ebx,0x4
c000d7c4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7c9:	50                   	push   eax
c000d7ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7ce:	e8 87 fe ff ff       	call   c000d65a <VgaText::putchar(char)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	4e                   	dec    esi
c000d7d7:	75 e1                	jne    c000d7ba <VgaText::putx(unsigned int)+0x20>
c000d7d9:	83 c4 20             	add    esp,0x20
c000d7dc:	5b                   	pop    ebx
c000d7dd:	5e                   	pop    esi
c000d7de:	5f                   	pop    edi
c000d7df:	c3                   	ret    

c000d7e0 <VgaText::VgaText(char const*)>:
c000d7e0:	57                   	push   edi
c000d7e1:	56                   	push   esi
c000d7e2:	53                   	push   ebx
c000d7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e7:	83 ec 08             	sub    esp,0x8
c000d7ea:	6a 00                	push   0x0
c000d7ec:	50                   	push   eax
c000d7ed:	e8 e0 05 00 00       	call   c000ddd2 <UnixFile::UnixFile(int)>
c000d7f2:	83 c4 10             	add    esp,0x10
c000d7f5:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	89 10                	mov    DWORD PTR [eax],edx
c000d800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d804:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d812:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d820:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d82b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d836:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d844:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d852:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d85d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d868:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d86e:	bb 40 48 02 c0       	mov    ebx,0xc0024840
c000d873:	b8 08 00 00 00       	mov    eax,0x8
c000d878:	fc                   	cld    
c000d879:	89 d7                	mov    edi,edx
c000d87b:	89 de                	mov    esi,ebx
c000d87d:	89 c1                	mov    ecx,eax
c000d87f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d885:	05 1e 10 00 00       	add    eax,0x101e
c000d88a:	83 ec 08             	sub    esp,0x8
c000d88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d891:	50                   	push   eax
c000d892:	e8 da 2e ff ff       	call   c0000771 <strcpy>
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ac:	83 c0 0c             	add    eax,0xc
c000d8af:	83 ec 04             	sub    esp,0x4
c000d8b2:	68 00 0f 00 00       	push   0xf00
c000d8b7:	6a 00                	push   0x0
c000d8b9:	50                   	push   eax
c000d8ba:	e8 13 2e ff ff       	call   c00006d2 <memset>
c000d8bf:	83 c4 10             	add    esp,0x10
c000d8c2:	83 ec 04             	sub    esp,0x4
c000d8c5:	6a 00                	push   0x0
c000d8c7:	6a 07                	push   0x7
c000d8c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8cd:	e8 c0 f4 ff ff       	call   c000cd92 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8d2:	83 c4 10             	add    esp,0x10
c000d8d5:	83 ec 08             	sub    esp,0x8
c000d8d8:	6a 02                	push   0x2
c000d8da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8de:	e8 47 fa ff ff       	call   c000d32a <VgaText::setCursorHeight(int)>
c000d8e3:	83 c4 10             	add    esp,0x10
c000d8e6:	83 ec 04             	sub    esp,0x4
c000d8e9:	6a 00                	push   0x0
c000d8eb:	6a 00                	push   0x0
c000d8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f1:	e8 ec f5 ff ff       	call   c000cee2 <VgaText::setCursor(int, int)>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	83 ec 08             	sub    esp,0x8
c000d8fc:	6a 01                	push   0x1
c000d8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d902:	e8 89 f3 ff ff       	call   c000cc90 <VgaText::showCursor(bool)>
c000d907:	83 c4 10             	add    esp,0x10
c000d90a:	83 ec 08             	sub    esp,0x8
c000d90d:	6a 01                	push   0x1
c000d90f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d913:	e8 88 f3 ff ff       	call   c000cca0 <VgaText::disableBlink(bool)>
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	83 ec 0c             	sub    esp,0xc
c000d91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d922:	e8 cf fc ff ff       	call   c000d5f6 <VgaText::clearScreen()>
c000d927:	83 c4 10             	add    esp,0x10
c000d92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d92e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d939:	05 9e 10 00 00       	add    eax,0x109e
c000d93e:	83 ec 04             	sub    esp,0x4
c000d941:	68 96 00 00 00       	push   0x96
c000d946:	6a 00                	push   0x0
c000d948:	50                   	push   eax
c000d949:	e8 84 2d ff ff       	call   c00006d2 <memset>
c000d94e:	83 c4 10             	add    esp,0x10
c000d951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d955:	05 34 11 00 00       	add    eax,0x1134
c000d95a:	83 ec 04             	sub    esp,0x4
c000d95d:	68 2c 01 00 00       	push   0x12c
c000d962:	6a 00                	push   0x0
c000d964:	50                   	push   eax
c000d965:	e8 68 2d ff ff       	call   c00006d2 <memset>
c000d96a:	83 c4 10             	add    esp,0x10
c000d96d:	90                   	nop
c000d96e:	5b                   	pop    ebx
c000d96f:	5e                   	pop    esi
c000d970:	5f                   	pop    edi
c000d971:	c3                   	ret    

c000d972 <VgaText::receiveKey(unsigned char)>:
c000d972:	55                   	push   ebp
c000d973:	57                   	push   edi
c000d974:	56                   	push   esi
c000d975:	53                   	push   ebx
c000d976:	83 ec 1c             	sub    esp,0x1c
c000d979:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d97d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d981:	84 db                	test   bl,bl
c000d983:	0f 84 c9 00 00 00    	je     c000da52 <VgaText::receiveKey(unsigned char)+0xe0>
c000d989:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d98f:	80 fb 08             	cmp    bl,0x8
c000d992:	75 2c                	jne    c000d9c0 <VgaText::receiveKey(unsigned char)+0x4e>
c000d994:	83 ec 0c             	sub    esp,0xc
c000d997:	57                   	push   edi
c000d998:	e8 52 2d ff ff       	call   c00006ef <strlen>
c000d99d:	83 c4 10             	add    esp,0x10
c000d9a0:	85 c0                	test   eax,eax
c000d9a2:	74 41                	je     c000d9e5 <VgaText::receiveKey(unsigned char)+0x73>
c000d9a4:	50                   	push   eax
c000d9a5:	50                   	push   eax
c000d9a6:	6a 08                	push   0x8
c000d9a8:	56                   	push   esi
c000d9a9:	e8 ac fc ff ff       	call   c000d65a <VgaText::putchar(char)>
c000d9ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9b1:	e8 39 2d ff ff       	call   c00006ef <strlen>
c000d9b6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9be:	eb 22                	jmp    c000d9e2 <VgaText::receiveKey(unsigned char)+0x70>
c000d9c0:	52                   	push   edx
c000d9c1:	52                   	push   edx
c000d9c2:	0f be c3             	movsx  eax,bl
c000d9c5:	50                   	push   eax
c000d9c6:	56                   	push   esi
c000d9c7:	e8 8e fc ff ff       	call   c000d65a <VgaText::putchar(char)>
c000d9cc:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9d0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9d5:	59                   	pop    ecx
c000d9d6:	5d                   	pop    ebp
c000d9d7:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9db:	50                   	push   eax
c000d9dc:	57                   	push   edi
c000d9dd:	e8 46 2e ff ff       	call   c0000828 <strcat>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9ec:	75 05                	jne    c000d9f3 <VgaText::receiveKey(unsigned char)+0x81>
c000d9ee:	80 fb 0a             	cmp    bl,0xa
c000d9f1:	75 53                	jne    c000da46 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9f3:	83 ec 0c             	sub    esp,0xc
c000d9f6:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9fc:	53                   	push   ebx
c000d9fd:	e8 ed 2c ff ff       	call   c00006ef <strlen>
c000da02:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da05:	89 c5                	mov    ebp,eax
c000da07:	e8 e3 2c ff ff       	call   c00006ef <strlen>
c000da0c:	83 c4 10             	add    esp,0x10
c000da0f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da13:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da18:	76 10                	jbe    c000da2a <VgaText::receiveKey(unsigned char)+0xb8>
c000da1a:	83 ec 0c             	sub    esp,0xc
c000da1d:	68 93 14 02 c0       	push   0xc0021493
c000da22:	e8 2b 80 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	50                   	push   eax
c000da2b:	50                   	push   eax
c000da2c:	57                   	push   edi
c000da2d:	53                   	push   ebx
c000da2e:	e8 f5 2d ff ff       	call   c0000828 <strcat>
c000da33:	83 c4 0c             	add    esp,0xc
c000da36:	68 96 00 00 00       	push   0x96
c000da3b:	6a 00                	push   0x0
c000da3d:	57                   	push   edi
c000da3e:	e8 8f 2c ff ff       	call   c00006d2 <memset>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	56                   	push   esi
c000da4a:	e8 d3 f9 ff ff       	call   c000d422 <VgaText::doUpdate()>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	83 c4 1c             	add    esp,0x1c
c000da55:	5b                   	pop    ebx
c000da56:	5e                   	pop    esi
c000da57:	5f                   	pop    edi
c000da58:	5d                   	pop    ebp
c000da59:	c3                   	ret    

c000da5a <VgaText::write(unsigned long long, void*, int*)>:
c000da5a:	55                   	push   ebp
c000da5b:	57                   	push   edi
c000da5c:	56                   	push   esi
c000da5d:	53                   	push   ebx
c000da5e:	83 ec 0c             	sub    esp,0xc
c000da61:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da65:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da6d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da74:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da77:	39 eb                	cmp    ebx,ebp
c000da79:	74 13                	je     c000da8e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da7b:	50                   	push   eax
c000da7c:	43                   	inc    ebx
c000da7d:	50                   	push   eax
c000da7e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da82:	50                   	push   eax
c000da83:	56                   	push   esi
c000da84:	e8 d1 fb ff ff       	call   c000d65a <VgaText::putchar(char)>
c000da89:	83 c4 10             	add    esp,0x10
c000da8c:	eb e9                	jmp    c000da77 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da8e:	83 ec 0c             	sub    esp,0xc
c000da91:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da98:	56                   	push   esi
c000da99:	e8 84 f9 ff ff       	call   c000d422 <VgaText::doUpdate()>
c000da9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000daa2:	89 38                	mov    DWORD PTR [eax],edi
c000daa4:	83 c4 1c             	add    esp,0x1c
c000daa7:	31 c0                	xor    eax,eax
c000daa9:	5b                   	pop    ebx
c000daaa:	5e                   	pop    esi
c000daab:	5f                   	pop    edi
c000daac:	5d                   	pop    ebp
c000daad:	c3                   	ret    

c000daae <newTerminal(char*)>:
c000daae:	83 ec 28             	sub    esp,0x28
c000dab1:	68 60 12 00 00       	push   0x1260
c000dab6:	e8 33 16 00 00       	call   c000f0ee <operator new(unsigned long)>
c000dabb:	5a                   	pop    edx
c000dabc:	59                   	pop    ecx
c000dabd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dac1:	50                   	push   eax
c000dac2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dac6:	e8 15 fd ff ff       	call   c000d7e0 <VgaText::VgaText(char const*)>
c000dacb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dacf:	83 c4 2c             	add    esp,0x2c
c000dad2:	c3                   	ret    
c000dad3:	90                   	nop

c000dad4 <TSS::TSS()>:
c000dad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dadf:	90                   	nop
c000dae0:	c3                   	ret    
c000dae1:	90                   	nop

c000dae2 <TSS::setESP(unsigned long)>:
c000dae2:	55                   	push   ebp
c000dae3:	89 e5                	mov    ebp,esp
c000dae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daeb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000daee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daf1:	90                   	nop
c000daf2:	5d                   	pop    ebp
c000daf3:	c3                   	ret    

c000daf4 <TSS::flush()>:
c000daf4:	55                   	push   ebp
c000daf5:	89 e5                	mov    ebp,esp
c000daf7:	83 ec 10             	sub    esp,0x10
c000dafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dafd:	8b 00                	mov    eax,DWORD PTR [eax]
c000daff:	83 c8 03             	or     eax,0x3
c000db02:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db06:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db0a:	66 89 d0             	mov    ax,dx
c000db0d:	0f 00 d8             	ltr    ax
c000db10:	90                   	nop
c000db11:	c9                   	leave  
c000db12:	c3                   	ret    
c000db13:	90                   	nop

c000db14 <TSS::setup(unsigned long, unsigned long)>:
c000db14:	55                   	push   ebp
c000db15:	89 e5                	mov    ebp,esp
c000db17:	53                   	push   ebx
c000db18:	83 ec 14             	sub    esp,0x14
c000db1b:	83 ec 0c             	sub    esp,0xc
c000db1e:	6a 68                	push   0x68
c000db20:	e8 cc e4 ff ff       	call   c000bff1 <malloc>
c000db25:	83 c4 10             	add    esp,0x10
c000db28:	89 c2                	mov    edx,eax
c000db2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db36:	83 ec 04             	sub    esp,0x4
c000db39:	6a 68                	push   0x68
c000db3b:	6a 00                	push   0x0
c000db3d:	50                   	push   eax
c000db3e:	e8 8f 2b ff ff       	call   c00006d2 <memset>
c000db43:	83 c4 10             	add    esp,0x10
c000db46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db4c:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db58:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db64:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db70:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7c:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db88:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db94:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dba3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dbaf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb8:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbc2:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbc5:	e8 2b 1c 01 00       	call   c001f7f5 <CPU::readCR3()>
c000dbca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbd3:	83 ec 08             	sub    esp,0x8
c000dbd6:	50                   	push   eax
c000dbd7:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbda:	50                   	push   eax
c000dbdb:	e8 e8 db ff ff       	call   c000b7c8 <GDTEntry::setBase(unsigned int)>
c000dbe0:	83 c4 10             	add    esp,0x10
c000dbe3:	83 ec 08             	sub    esp,0x8
c000dbe6:	6a 68                	push   0x68
c000dbe8:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbeb:	50                   	push   eax
c000dbec:	e8 f3 db ff ff       	call   c000b7e4 <GDTEntry::setLimit(unsigned int)>
c000dbf1:	83 c4 10             	add    esp,0x10
c000dbf4:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbf8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbfb:	83 e0 0f             	and    eax,0xf
c000dbfe:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc01:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc04:	83 c8 40             	or     eax,0x40
c000dc07:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc0a:	e8 d7 6c 00 00       	call   c00148e6 <thisCPU()>
c000dc0f:	05 78 01 00 00       	add    eax,0x178
c000dc14:	83 ec 04             	sub    esp,0x4
c000dc17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc1a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc1d:	50                   	push   eax
c000dc1e:	e8 f5 db ff ff       	call   c000b818 <GDT::addEntry(GDTEntry)>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	89 c2                	mov    edx,eax
c000dc28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc2b:	89 10                	mov    DWORD PTR [eax],edx
c000dc2d:	e8 b4 6c 00 00       	call   c00148e6 <thisCPU()>
c000dc32:	05 78 01 00 00       	add    eax,0x178
c000dc37:	83 ec 0c             	sub    esp,0xc
c000dc3a:	50                   	push   eax
c000dc3b:	e8 1c dc ff ff       	call   c000b85c <GDT::flush()>
c000dc40:	83 c4 10             	add    esp,0x10
c000dc43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc46:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc48:	83 ec 08             	sub    esp,0x8
c000dc4b:	50                   	push   eax
c000dc4c:	68 fc 14 02 c0       	push   0xc00214fc
c000dc51:	e8 cd 15 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc5e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc61:	c9                   	leave  
c000dc62:	c3                   	ret    
c000dc63:	90                   	nop

c000dc64 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc64:	55                   	push   ebp
c000dc65:	57                   	push   edi
c000dc66:	56                   	push   esi
c000dc67:	53                   	push   ebx
c000dc68:	83 ec 0c             	sub    esp,0xc
c000dc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc6f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc73:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc77:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc7e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc82:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc87:	75 08                	jne    c000dc91 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc89:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc8f:	eb 5e                	jmp    c000dcef <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc91:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc96:	75 3d                	jne    c000dcd5 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc98:	83 ec 0c             	sub    esp,0xc
c000dc9b:	68 1a 15 02 c0       	push   0xc002151a
c000dca0:	e8 7e 15 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000dca5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcaa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcb3:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcb5:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dcb9:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcbd:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcc1:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcc5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcc9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dccc:	83 c4 1c             	add    esp,0x1c
c000dccf:	5b                   	pop    ebx
c000dcd0:	5e                   	pop    esi
c000dcd1:	5f                   	pop    edi
c000dcd2:	5d                   	pop    ebp
c000dcd3:	ff e0                	jmp    eax
c000dcd5:	89 c2                	mov    edx,eax
c000dcd7:	83 e2 fd             	and    edx,0xfffffffd
c000dcda:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dce0:	74 a7                	je     c000dc89 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dce2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dce7:	83 e0 ef             	and    eax,0xffffffef
c000dcea:	83 f8 08             	cmp    eax,0x8
c000dced:	76 9a                	jbe    c000dc89 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcef:	83 c4 0c             	add    esp,0xc
c000dcf2:	31 c0                	xor    eax,eax
c000dcf4:	5b                   	pop    ebx
c000dcf5:	5e                   	pop    esi
c000dcf6:	5f                   	pop    edi
c000dcf7:	5d                   	pop    ebp
c000dcf8:	c3                   	ret    
c000dcf9:	90                   	nop

c000dcfa <ReservedFilename::isAtty()>:
c000dcfa:	83 ec 18             	sub    esp,0x18
c000dcfd:	68 27 15 02 c0       	push   0xc0021527
c000dd02:	e8 1c 15 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000dd07:	83 c4 10             	add    esp,0x10
c000dd0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd0e:	31 c0                	xor    eax,eax
c000dd10:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dd17:	75 12                	jne    c000dd2b <ReservedFilename::isAtty()+0x31>
c000dd19:	83 ec 0c             	sub    esp,0xc
c000dd1c:	68 3d 15 02 c0       	push   0xc002153d
c000dd21:	e8 fd 14 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000dd26:	83 c4 10             	add    esp,0x10
c000dd29:	b0 01                	mov    al,0x1
c000dd2b:	83 c4 0c             	add    esp,0xc
c000dd2e:	c3                   	ret    
c000dd2f:	90                   	nop

c000dd30 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd30:	55                   	push   ebp
c000dd31:	57                   	push   edi
c000dd32:	56                   	push   esi
c000dd33:	53                   	push   ebx
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd3b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd3f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd43:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd4a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd4e:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd53:	75 08                	jne    c000dd5d <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd5b:	eb 63                	jmp    c000ddc0 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd5d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd62:	75 3d                	jne    c000dda1 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd64:	83 ec 0c             	sub    esp,0xc
c000dd67:	68 50 15 02 c0       	push   0xc0021550
c000dd6c:	e8 b2 14 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000dd71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd76:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd79:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd7f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd81:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd85:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd89:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd8d:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd95:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd98:	83 c4 1c             	add    esp,0x1c
c000dd9b:	5b                   	pop    ebx
c000dd9c:	5e                   	pop    esi
c000dd9d:	5f                   	pop    edi
c000dd9e:	5d                   	pop    ebp
c000dd9f:	ff e0                	jmp    eax
c000dda1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dda6:	75 04                	jne    c000ddac <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dda8:	89 33                	mov    DWORD PTR [ebx],esi
c000ddaa:	eb 14                	jmp    c000ddc0 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000ddac:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000ddb1:	74 a2                	je     c000dd55 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddb3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000ddb8:	83 e0 ef             	and    eax,0xffffffef
c000ddbb:	83 f8 08             	cmp    eax,0x8
c000ddbe:	76 95                	jbe    c000dd55 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddc0:	83 c4 0c             	add    esp,0xc
c000ddc3:	31 c0                	xor    eax,eax
c000ddc5:	5b                   	pop    ebx
c000ddc6:	5e                   	pop    esi
c000ddc7:	5f                   	pop    edi
c000ddc8:	5d                   	pop    ebp
c000ddc9:	c3                   	ret    

c000ddca <UnixFile::getFileDescriptor()>:
c000ddca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddd1:	c3                   	ret    

c000ddd2 <UnixFile::UnixFile(int)>:
c000ddd2:	53                   	push   ebx
c000ddd3:	83 ec 18             	sub    esp,0x18
c000ddd6:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000dddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddf:	89 10                	mov    DWORD PTR [eax],edx
c000dde1:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dde9:	0f 8f 4d 01 00 00    	jg     c000df3c <UnixFile::UnixFile(int)+0x16a>
c000ddef:	a1 40 3c 02 c0       	mov    eax,ds:0xc0023c40
c000ddf4:	8d 50 01             	lea    edx,[eax+0x1]
c000ddf7:	89 15 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,edx
c000ddfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de01:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000de04:	83 ec 08             	sub    esp,0x8
c000de07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de0b:	68 f8 48 02 c0       	push   0xc00248f8
c000de10:	e8 55 1a 01 00       	call   c001f86a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de15:	83 c4 10             	add    esp,0x10
c000de18:	a0 f4 48 02 c0       	mov    al,ds:0xc00248f4
c000de1d:	83 f0 01             	xor    eax,0x1
c000de20:	84 c0                	test   al,al
c000de22:	0f 84 15 01 00 00    	je     c000df3d <UnixFile::UnixFile(int)+0x16b>
c000de28:	c6 05 f4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f4,0x1
c000de2f:	83 ec 0c             	sub    esp,0xc
c000de32:	6a 0c                	push   0xc
c000de34:	e8 b5 12 00 00       	call   c000f0ee <operator new(unsigned long)>
c000de39:	83 c4 10             	add    esp,0x10
c000de3c:	89 c3                	mov    ebx,eax
c000de3e:	83 ec 08             	sub    esp,0x8
c000de41:	68 03 ff ff 0f       	push   0xfffff03
c000de46:	53                   	push   ebx
c000de47:	e8 f6 00 00 00       	call   c000df42 <ReservedFilename::ReservedFilename(int)>
c000de4c:	83 c4 10             	add    esp,0x10
c000de4f:	89 1d ec 48 02 c0    	mov    DWORD PTR ds:0xc00248ec,ebx
c000de55:	83 ec 0c             	sub    esp,0xc
c000de58:	6a 0c                	push   0xc
c000de5a:	e8 8f 12 00 00       	call   c000f0ee <operator new(unsigned long)>
c000de5f:	83 c4 10             	add    esp,0x10
c000de62:	89 c3                	mov    ebx,eax
c000de64:	83 ec 08             	sub    esp,0x8
c000de67:	68 01 ff ff 0f       	push   0xfffff01
c000de6c:	53                   	push   ebx
c000de6d:	e8 d0 00 00 00       	call   c000df42 <ReservedFilename::ReservedFilename(int)>
c000de72:	83 c4 10             	add    esp,0x10
c000de75:	89 1d f0 48 02 c0    	mov    DWORD PTR ds:0xc00248f0,ebx
c000de7b:	83 ec 0c             	sub    esp,0xc
c000de7e:	6a 0c                	push   0xc
c000de80:	e8 69 12 00 00       	call   c000f0ee <operator new(unsigned long)>
c000de85:	83 c4 10             	add    esp,0x10
c000de88:	89 c3                	mov    ebx,eax
c000de8a:	83 ec 08             	sub    esp,0x8
c000de8d:	68 00 ff ff 0f       	push   0xfffff00
c000de92:	53                   	push   ebx
c000de93:	e8 aa 00 00 00       	call   c000df42 <ReservedFilename::ReservedFilename(int)>
c000de98:	83 c4 10             	add    esp,0x10
c000de9b:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000dea1:	83 ec 0c             	sub    esp,0xc
c000dea4:	6a 0c                	push   0xc
c000dea6:	e8 43 12 00 00       	call   c000f0ee <operator new(unsigned long)>
c000deab:	83 c4 10             	add    esp,0x10
c000deae:	89 c3                	mov    ebx,eax
c000deb0:	83 ec 08             	sub    esp,0x8
c000deb3:	68 02 ff ff 0f       	push   0xfffff02
c000deb8:	53                   	push   ebx
c000deb9:	e8 84 00 00 00       	call   c000df42 <ReservedFilename::ReservedFilename(int)>
c000debe:	83 c4 10             	add    esp,0x10
c000dec1:	89 1d e8 48 02 c0    	mov    DWORD PTR ds:0xc00248e8,ebx
c000dec7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000decf:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ded4:	7f 67                	jg     c000df3d <UnixFile::UnixFile(int)+0x16b>
c000ded6:	83 ec 0c             	sub    esp,0xc
c000ded9:	6a 0c                	push   0xc
c000dedb:	e8 0e 12 00 00       	call   c000f0ee <operator new(unsigned long)>
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	89 c3                	mov    ebx,eax
c000dee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dee9:	05 10 ff ff 0f       	add    eax,0xfffff10
c000deee:	83 ec 08             	sub    esp,0x8
c000def1:	50                   	push   eax
c000def2:	53                   	push   ebx
c000def3:	e8 4a 00 00 00       	call   c000df42 <ReservedFilename::ReservedFilename(int)>
c000def8:	83 c4 10             	add    esp,0x10
c000defb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deff:	89 1c 85 c0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb740],ebx
c000df06:	83 ec 0c             	sub    esp,0xc
c000df09:	6a 0c                	push   0xc
c000df0b:	e8 de 11 00 00       	call   c000f0ee <operator new(unsigned long)>
c000df10:	83 c4 10             	add    esp,0x10
c000df13:	89 c3                	mov    ebx,eax
c000df15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df19:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df1e:	83 ec 08             	sub    esp,0x8
c000df21:	50                   	push   eax
c000df22:	53                   	push   ebx
c000df23:	e8 1a 00 00 00       	call   c000df42 <ReservedFilename::ReservedFilename(int)>
c000df28:	83 c4 10             	add    esp,0x10
c000df2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df2f:	89 1c 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],ebx
c000df36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df3a:	eb 93                	jmp    c000decf <UnixFile::UnixFile(int)+0xfd>
c000df3c:	90                   	nop
c000df3d:	83 c4 18             	add    esp,0x18
c000df40:	5b                   	pop    ebx
c000df41:	c3                   	ret    

c000df42 <ReservedFilename::ReservedFilename(int)>:
c000df42:	83 ec 0c             	sub    esp,0xc
c000df45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df49:	83 ec 08             	sub    esp,0x8
c000df4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df50:	50                   	push   eax
c000df51:	e8 7c fe ff ff       	call   c000ddd2 <UnixFile::UnixFile(int)>
c000df56:	83 c4 10             	add    esp,0x10
c000df59:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000df5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df62:	89 10                	mov    DWORD PTR [eax],edx
c000df64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df6f:	90                   	nop
c000df70:	83 c4 0c             	add    esp,0xc
c000df73:	c3                   	ret    

c000df74 <UnixFile::~UnixFile()>:
c000df74:	83 ec 1c             	sub    esp,0x1c
c000df77:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df80:	89 10                	mov    DWORD PTR [eax],edx
c000df82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df89:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df8e:	7f 73                	jg     c000e003 <UnixFile::~UnixFile()+0x8f>
c000df90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	68 f8 48 02 c0       	push   0xc00248f8
c000dfa0:	e8 99 19 01 00       	call   c001f93e <LinkedList<UnixFile>::getFirstElement()>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	68 f8 48 02 c0       	push   0xc00248f8
c000dfb4:	e8 8d 19 01 00       	call   c001f946 <LinkedList<UnixFile>::removeFirst()>
c000dfb9:	83 c4 10             	add    esp,0x10
c000dfbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfc0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfc4:	74 40                	je     c000e006 <UnixFile::~UnixFile()+0x92>
c000dfc6:	83 ec 08             	sub    esp,0x8
c000dfc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfcd:	68 f8 48 02 c0       	push   0xc00248f8
c000dfd2:	e8 93 18 01 00       	call   c001f86a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfde:	8d 50 01             	lea    edx,[eax+0x1]
c000dfe1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfe5:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfea:	0f 94 c0             	sete   al
c000dfed:	84 c0                	test   al,al
c000dfef:	74 a7                	je     c000df98 <UnixFile::~UnixFile()+0x24>
c000dff1:	83 ec 0c             	sub    esp,0xc
c000dff4:	68 44 16 02 c0       	push   0xc0021644
c000dff9:	e8 54 7a 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000dffe:	83 c4 10             	add    esp,0x10
c000e001:	eb 95                	jmp    c000df98 <UnixFile::~UnixFile()+0x24>
c000e003:	90                   	nop
c000e004:	eb 01                	jmp    c000e007 <UnixFile::~UnixFile()+0x93>
c000e006:	90                   	nop
c000e007:	90                   	nop
c000e008:	83 c4 1c             	add    esp,0x1c
c000e00b:	c3                   	ret    

c000e00c <UnixFile::~UnixFile()>:
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	83 ec 0c             	sub    esp,0xc
c000e012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e016:	e8 59 ff ff ff       	call   c000df74 <UnixFile::~UnixFile()>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	83 ec 08             	sub    esp,0x8
c000e021:	6a 0c                	push   0xc
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 d1 10 00 00       	call   c000f0fd <operator delete(void*, unsigned long)>
c000e02c:	83 c4 10             	add    esp,0x10
c000e02f:	83 c4 0c             	add    esp,0xc
c000e032:	c3                   	ret    
c000e033:	90                   	nop

c000e034 <ReservedFilename::~ReservedFilename()>:
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000e03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e040:	89 10                	mov    DWORD PTR [eax],edx
c000e042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e046:	83 ec 0c             	sub    esp,0xc
c000e049:	50                   	push   eax
c000e04a:	e8 25 ff ff ff       	call   c000df74 <UnixFile::~UnixFile()>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	90                   	nop
c000e053:	83 c4 0c             	add    esp,0xc
c000e056:	c3                   	ret    
c000e057:	90                   	nop

c000e058 <ReservedFilename::~ReservedFilename()>:
c000e058:	83 ec 0c             	sub    esp,0xc
c000e05b:	83 ec 0c             	sub    esp,0xc
c000e05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e062:	e8 cd ff ff ff       	call   c000e034 <ReservedFilename::~ReservedFilename()>
c000e067:	83 c4 10             	add    esp,0x10
c000e06a:	83 ec 08             	sub    esp,0x8
c000e06d:	6a 0c                	push   0xc
c000e06f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e073:	e8 85 10 00 00       	call   c000f0fd <operator delete(void*, unsigned long)>
c000e078:	83 c4 10             	add    esp,0x10
c000e07b:	83 c4 0c             	add    esp,0xc
c000e07e:	c3                   	ret    

c000e07f <getFromFileDescriptor(int)>:
c000e07f:	53                   	push   ebx
c000e080:	83 ec 08             	sub    esp,0x8
c000e083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e087:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e08d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e093:	7f 33                	jg     c000e0c8 <getFromFileDescriptor(int)+0x49>
c000e095:	83 ec 0c             	sub    esp,0xc
c000e098:	68 f8 48 02 c0       	push   0xc00248f8
c000e09d:	e8 9c 18 01 00       	call   c001f93e <LinkedList<UnixFile>::getFirstElement()>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	85 c0                	test   eax,eax
c000e0a7:	75 07                	jne    c000e0b0 <getFromFileDescriptor(int)+0x31>
c000e0a9:	31 c0                	xor    eax,eax
c000e0ab:	e9 98 00 00 00       	jmp    c000e148 <getFromFileDescriptor(int)+0xc9>
c000e0b0:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e0b3:	0f 84 8f 00 00 00    	je     c000e148 <getFromFileDescriptor(int)+0xc9>
c000e0b9:	52                   	push   edx
c000e0ba:	52                   	push   edx
c000e0bb:	50                   	push   eax
c000e0bc:	68 f8 48 02 c0       	push   0xc00248f8
c000e0c1:	e8 22 19 01 00       	call   c001f9e8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0c6:	eb da                	jmp    c000e0a2 <getFromFileDescriptor(int)+0x23>
c000e0c8:	83 ec 0c             	sub    esp,0xc
c000e0cb:	68 5d 15 02 c0       	push   0xc002155d
c000e0d0:	e8 4e 11 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000e0dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0e3:	74 63                	je     c000e148 <getFromFileDescriptor(int)+0xc9>
c000e0e5:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0eb:	75 17                	jne    c000e104 <getFromFileDescriptor(int)+0x85>
c000e0ed:	83 ec 0c             	sub    esp,0xc
c000e0f0:	68 84 15 02 c0       	push   0xc0021584
c000e0f5:	e8 29 11 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e0fa:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c000e0ff:	83 c4 10             	add    esp,0x10
c000e102:	eb 44                	jmp    c000e148 <getFromFileDescriptor(int)+0xc9>
c000e104:	a1 e8 48 02 c0       	mov    eax,ds:0xc00248e8
c000e109:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e10f:	74 37                	je     c000e148 <getFromFileDescriptor(int)+0xc9>
c000e111:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e116:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e11c:	74 2a                	je     c000e148 <getFromFileDescriptor(int)+0xc9>
c000e11e:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e124:	83 f8 08             	cmp    eax,0x8
c000e127:	77 09                	ja     c000e132 <getFromFileDescriptor(int)+0xb3>
c000e129:	8b 04 85 c0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb740]
c000e130:	eb 16                	jmp    c000e148 <getFromFileDescriptor(int)+0xc9>
c000e132:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e138:	83 fb 08             	cmp    ebx,0x8
c000e13b:	0f 87 68 ff ff ff    	ja     c000e0a9 <getFromFileDescriptor(int)+0x2a>
c000e141:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000e148:	83 c4 08             	add    esp,0x8
c000e14b:	5b                   	pop    ebx
c000e14c:	c3                   	ret    

c000e14d <__static_initialization_and_destruction_0(int, int)>:
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e155:	75 34                	jne    c000e18b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e157:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e15f:	75 2a                	jne    c000e18b <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e161:	83 ec 0c             	sub    esp,0xc
c000e164:	68 f8 48 02 c0       	push   0xc00248f8
c000e169:	e8 a4 16 01 00       	call   c001f812 <LinkedList<UnixFile>::LinkedList()>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	83 ec 04             	sub    esp,0x4
c000e174:	68 bc 3b 02 c0       	push   0xc0023bbc
c000e179:	68 f8 48 02 c0       	push   0xc00248f8
c000e17e:	68 10 f8 01 c0       	push   0xc001f810
c000e183:	e8 f1 0e 00 00       	call   c000f079 <__cxa_atexit>
c000e188:	83 c4 10             	add    esp,0x10
c000e18b:	90                   	nop
c000e18c:	83 c4 0c             	add    esp,0xc
c000e18f:	c3                   	ret    

c000e190 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e190:	83 ec 0c             	sub    esp,0xc
c000e193:	83 ec 08             	sub    esp,0x8
c000e196:	68 ff ff 00 00       	push   0xffff
c000e19b:	6a 01                	push   0x1
c000e19d:	e8 ab ff ff ff       	call   c000e14d <__static_initialization_and_destruction_0(int, int)>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	83 c4 0c             	add    esp,0xc
c000e1a8:	c3                   	ret    
c000e1a9:	90                   	nop

c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e1aa:	53                   	push   ebx
c000e1ab:	8b 15 48 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c48
c000e1b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1b9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1bf:	89 c8                	mov    eax,ecx
c000e1c1:	d1 e8                	shr    eax,1
c000e1c3:	01 d0                	add    eax,edx
c000e1c5:	83 e1 01             	and    ecx,0x1
c000e1c8:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1ca:	75 09                	jne    c000e1d5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1cc:	83 e2 f0             	and    edx,0xfffffff0
c000e1cf:	09 da                	or     edx,ebx
c000e1d1:	88 10                	mov    BYTE PTR [eax],dl
c000e1d3:	5b                   	pop    ebx
c000e1d4:	c3                   	ret    
c000e1d5:	c1 e3 04             	shl    ebx,0x4
c000e1d8:	83 e2 0f             	and    edx,0xf
c000e1db:	09 da                	or     edx,ebx
c000e1dd:	88 10                	mov    BYTE PTR [eax],dl
c000e1df:	5b                   	pop    ebx
c000e1e0:	c3                   	ret    

c000e1e1 <Virt::getPageState(unsigned long)>:
c000e1e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1e5:	8b 0d 48 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c48
c000e1eb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1f1:	89 d0                	mov    eax,edx
c000e1f3:	d1 e8                	shr    eax,1
c000e1f5:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1f8:	88 c8                	mov    al,cl
c000e1fa:	c0 e8 04             	shr    al,0x4
c000e1fd:	83 e2 01             	and    edx,0x1
c000e200:	75 05                	jne    c000e207 <Virt::getPageState(unsigned long)+0x26>
c000e202:	88 c8                	mov    al,cl
c000e204:	83 e0 0f             	and    eax,0xf
c000e207:	c3                   	ret    

c000e208 <Virt::allocateKernelVirtualPages(int)>:
c000e208:	55                   	push   ebp
c000e209:	31 ed                	xor    ebp,ebp
c000e20b:	57                   	push   edi
c000e20c:	56                   	push   esi
c000e20d:	53                   	push   ebx
c000e20e:	31 db                	xor    ebx,ebx
c000e210:	83 ec 1c             	sub    esp,0x1c
c000e213:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e219:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e21d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e222:	57                   	push   edi
c000e223:	e8 b9 ff ff ff       	call   c000e1e1 <Virt::getPageState(unsigned long)>
c000e228:	5a                   	pop    edx
c000e229:	84 c0                	test   al,al
c000e22b:	75 3a                	jne    c000e267 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e22d:	85 db                	test   ebx,ebx
c000e22f:	75 02                	jne    c000e233 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e231:	89 fd                	mov    ebp,edi
c000e233:	43                   	inc    ebx
c000e234:	39 f3                	cmp    ebx,esi
c000e236:	74 5a                	je     c000e292 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e238:	47                   	inc    edi
c000e239:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e23f:	76 31                	jbe    c000e272 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e241:	c7 05 44 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c44,0xc8000
c000e24b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e250:	75 28                	jne    c000e27a <Virt::allocateKernelVirtualPages(int)+0x72>
c000e252:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e257:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e25c:	57                   	push   edi
c000e25d:	e8 7f ff ff ff       	call   c000e1e1 <Virt::getPageState(unsigned long)>
c000e262:	5a                   	pop    edx
c000e263:	84 c0                	test   al,al
c000e265:	74 c6                	je     c000e22d <Virt::allocateKernelVirtualPages(int)+0x25>
c000e267:	47                   	inc    edi
c000e268:	31 db                	xor    ebx,ebx
c000e26a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e270:	77 cf                	ja     c000e241 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e272:	89 3d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edi
c000e278:	eb a8                	jmp    c000e222 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e27a:	83 ec 0c             	sub    esp,0xc
c000e27d:	68 9c 16 02 c0       	push   0xc002169c
c000e282:	e8 cb 77 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e287:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e28d:	83 c4 10             	add    esp,0x10
c000e290:	eb 90                	jmp    c000e222 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e292:	89 2d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,ebp
c000e298:	4b                   	dec    ebx
c000e299:	74 5f                	je     c000e2fa <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e29b:	85 f6                	test   esi,esi
c000e29d:	74 3d                	je     c000e2dc <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e29f:	89 e8                	mov    eax,ebp
c000e2a1:	31 db                	xor    ebx,ebx
c000e2a3:	8d 7e ff             	lea    edi,[esi-0x1]
c000e2a6:	eb 14                	jmp    c000e2bc <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e2a8:	6a 01                	push   0x1
c000e2aa:	43                   	inc    ebx
c000e2ab:	50                   	push   eax
c000e2ac:	e8 f9 fe ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2b1:	58                   	pop    eax
c000e2b2:	39 f3                	cmp    ebx,esi
c000e2b4:	5a                   	pop    edx
c000e2b5:	74 25                	je     c000e2dc <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2b7:	a1 44 3c 02 c0       	mov    eax,ds:0xc0023c44
c000e2bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e2bf:	85 db                	test   ebx,ebx
c000e2c1:	89 15 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edx
c000e2c7:	74 20                	je     c000e2e9 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2c9:	39 df                	cmp    edi,ebx
c000e2cb:	75 db                	jne    c000e2a8 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2cd:	6a 03                	push   0x3
c000e2cf:	43                   	inc    ebx
c000e2d0:	50                   	push   eax
c000e2d1:	e8 d4 fe ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2d6:	59                   	pop    ecx
c000e2d7:	39 f3                	cmp    ebx,esi
c000e2d9:	58                   	pop    eax
c000e2da:	75 db                	jne    c000e2b7 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2dc:	83 c4 1c             	add    esp,0x1c
c000e2df:	89 e8                	mov    eax,ebp
c000e2e1:	c1 e0 0c             	shl    eax,0xc
c000e2e4:	5b                   	pop    ebx
c000e2e5:	5e                   	pop    esi
c000e2e6:	5f                   	pop    edi
c000e2e7:	5d                   	pop    ebp
c000e2e8:	c3                   	ret    
c000e2e9:	6a 02                	push   0x2
c000e2eb:	bb 01 00 00 00       	mov    ebx,0x1
c000e2f0:	50                   	push   eax
c000e2f1:	e8 b4 fe ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2f6:	58                   	pop    eax
c000e2f7:	5a                   	pop    edx
c000e2f8:	eb bd                	jmp    c000e2b7 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2fa:	6a 04                	push   0x4
c000e2fc:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2ff:	55                   	push   ebp
c000e300:	a3 44 3c 02 c0       	mov    ds:0xc0023c44,eax
c000e305:	e8 a0 fe ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e30a:	59                   	pop    ecx
c000e30b:	5b                   	pop    ebx
c000e30c:	89 e8                	mov    eax,ebp
c000e30e:	c1 e0 0c             	shl    eax,0xc
c000e311:	83 c4 1c             	add    esp,0x1c
c000e314:	5b                   	pop    ebx
c000e315:	5e                   	pop    esi
c000e316:	5f                   	pop    edi
c000e317:	5d                   	pop    ebp
c000e318:	c3                   	ret    

c000e319 <Virt::virtualMemorySetup()>:
c000e319:	53                   	push   ebx
c000e31a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e31f:	83 ec 08             	sub    esp,0x8
c000e322:	6a 0f                	push   0xf
c000e324:	53                   	push   ebx
c000e325:	43                   	inc    ebx
c000e326:	e8 7f fe ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e32b:	59                   	pop    ecx
c000e32c:	58                   	pop    eax
c000e32d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e333:	75 ed                	jne    c000e322 <Virt::virtualMemorySetup()+0x9>
c000e335:	50                   	push   eax
c000e336:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e33b:	50                   	push   eax
c000e33c:	68 00 00 00 c8       	push   0xc8000000
c000e341:	68 23 18 02 c0       	push   0xc0021823
c000e346:	e8 d8 0e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e34b:	58                   	pop    eax
c000e34c:	5a                   	pop    edx
c000e34d:	68 00 f0 ff ef       	push   0xeffff000
c000e352:	68 37 18 02 c0       	push   0xc0021837
c000e357:	e8 c7 0e 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e35c:	83 c4 10             	add    esp,0x10
c000e35f:	50                   	push   eax
c000e360:	50                   	push   eax
c000e361:	6a 00                	push   0x0
c000e363:	53                   	push   ebx
c000e364:	43                   	inc    ebx
c000e365:	e8 40 fe ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e36a:	83 c4 10             	add    esp,0x10
c000e36d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e373:	75 ea                	jne    c000e35f <Virt::virtualMemorySetup()+0x46>
c000e375:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e37a:	51                   	push   ecx
c000e37b:	51                   	push   ecx
c000e37c:	6a 0f                	push   0xf
c000e37e:	53                   	push   ebx
c000e37f:	43                   	inc    ebx
c000e380:	e8 25 fe ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e385:	83 c4 10             	add    esp,0x10
c000e388:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e38e:	75 ea                	jne    c000e37a <Virt::virtualMemorySetup()+0x61>
c000e390:	83 c4 08             	add    esp,0x8
c000e393:	5b                   	pop    ebx
c000e394:	c3                   	ret    

c000e395 <Virt::getAKernelVAS()>:
c000e395:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c000e39a:	c3                   	ret    

c000e39b <Virt::setupPageSwapping(int)>:
c000e39b:	57                   	push   edi
c000e39c:	56                   	push   esi
c000e39d:	53                   	push   ebx
c000e39e:	83 ec 1c             	sub    esp,0x1c
c000e3a1:	68 14 01 00 00       	push   0x114
c000e3a6:	e8 43 0d 00 00       	call   c000f0ee <operator new(unsigned long)>
c000e3ab:	83 c4 0c             	add    esp,0xc
c000e3ae:	8b 3d f4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bf4
c000e3b4:	89 c6                	mov    esi,eax
c000e3b6:	57                   	push   edi
c000e3b7:	68 4b 18 02 c0       	push   0xc002184b
c000e3bc:	50                   	push   eax
c000e3bd:	e8 98 13 00 00       	call   c000f75a <File::File(char const*, Process*)>
c000e3c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3c5:	e8 6c 15 00 00       	call   c000f936 <File::unlink()>
c000e3ca:	58                   	pop    eax
c000e3cb:	5a                   	pop    edx
c000e3cc:	6a 12                	push   0x12
c000e3ce:	56                   	push   esi
c000e3cf:	e8 ea 13 00 00       	call   c000f7be <File::open(FileOpenMode)>
c000e3d4:	83 c4 10             	add    esp,0x10
c000e3d7:	85 c0                	test   eax,eax
c000e3d9:	0f 85 b6 00 00 00    	jne    c000e495 <Virt::setupPageSwapping(int)+0xfa>
c000e3df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3eb:	c1 e3 08             	shl    ebx,0x8
c000e3ee:	83 ec 0c             	sub    esp,0xc
c000e3f1:	c1 fb 04             	sar    ebx,0x4
c000e3f4:	68 00 00 01 00       	push   0x10000
c000e3f9:	e8 f3 db ff ff       	call   c000bff1 <malloc>
c000e3fe:	83 c4 0c             	add    esp,0xc
c000e401:	89 c7                	mov    edi,eax
c000e403:	68 00 00 01 00       	push   0x10000
c000e408:	6a 00                	push   0x0
c000e40a:	50                   	push   eax
c000e40b:	e8 c2 22 ff ff       	call   c00006d2 <memset>
c000e410:	83 c4 10             	add    esp,0x10
c000e413:	4b                   	dec    ebx
c000e414:	83 fb ff             	cmp    ebx,0xffffffff
c000e417:	74 4a                	je     c000e463 <Virt::setupPageSwapping(int)+0xc8>
c000e419:	83 ec 0c             	sub    esp,0xc
c000e41c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e41e:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e422:	52                   	push   edx
c000e423:	57                   	push   edi
c000e424:	6a 00                	push   0x0
c000e426:	68 00 00 01 00       	push   0x10000
c000e42b:	56                   	push   esi
c000e42c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e42f:	83 c4 20             	add    esp,0x20
c000e432:	85 c0                	test   eax,eax
c000e434:	75 4d                	jne    c000e483 <Virt::setupPageSwapping(int)+0xe8>
c000e436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e43a:	3d 00 00 01 00       	cmp    eax,0x10000
c000e43f:	74 d2                	je     c000e413 <Virt::setupPageSwapping(int)+0x78>
c000e441:	52                   	push   edx
c000e442:	4b                   	dec    ebx
c000e443:	52                   	push   edx
c000e444:	50                   	push   eax
c000e445:	68 9e 18 02 c0       	push   0xc002189e
c000e44a:	e8 d4 0d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e44f:	c7 04 24 a7 18 02 c0 	mov    DWORD PTR [esp],0xc00218a7
c000e456:	e8 f7 75 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e45b:	83 c4 10             	add    esp,0x10
c000e45e:	83 fb ff             	cmp    ebx,0xffffffff
c000e461:	75 b6                	jne    c000e419 <Virt::setupPageSwapping(int)+0x7e>
c000e463:	83 ec 0c             	sub    esp,0xc
c000e466:	56                   	push   esi
c000e467:	e8 b0 13 00 00       	call   c000f81c <File::close()>
c000e46c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e46f:	e8 9d db ff ff       	call   c000c011 <rfree>
c000e474:	8b 06                	mov    eax,DWORD PTR [esi]
c000e476:	89 34 24             	mov    DWORD PTR [esp],esi
c000e479:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e47c:	83 c4 20             	add    esp,0x20
c000e47f:	5b                   	pop    ebx
c000e480:	5e                   	pop    esi
c000e481:	5f                   	pop    edi
c000e482:	c3                   	ret    
c000e483:	51                   	push   ecx
c000e484:	51                   	push   ecx
c000e485:	50                   	push   eax
c000e486:	68 86 18 02 c0       	push   0xc0021886
c000e48b:	e8 93 0d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e490:	83 c4 10             	add    esp,0x10
c000e493:	eb a1                	jmp    c000e436 <Virt::setupPageSwapping(int)+0x9b>
c000e495:	53                   	push   ebx
c000e496:	53                   	push   ebx
c000e497:	50                   	push   eax
c000e498:	68 62 18 02 c0       	push   0xc0021862
c000e49d:	e8 81 0d 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e4a2:	c7 04 24 6b 18 02 c0 	mov    DWORD PTR [esp],0xc002186b
c000e4a9:	e8 a4 75 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e4ae:	83 c4 10             	add    esp,0x10
c000e4b1:	e9 29 ff ff ff       	jmp    c000e3df <Virt::setupPageSwapping(int)+0x44>

c000e4b6 <VAS::VAS()>:
c000e4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c5:	a3 04 49 02 c0       	mov    ds:0xc0024904,eax
c000e4ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ce:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4dd:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4e4:	90                   	nop
c000e4e5:	c3                   	ret    

c000e4e6 <VAS::VAS(VAS*)>:
c000e4e6:	83 ec 0c             	sub    esp,0xc
c000e4e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4f4:	83 ec 0c             	sub    esp,0xc
c000e4f7:	68 bc 16 02 c0       	push   0xc00216bc
c000e4fc:	e8 51 75 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e501:	83 c4 10             	add    esp,0x10
c000e504:	90                   	nop
c000e505:	83 c4 0c             	add    esp,0xc
c000e508:	c3                   	ret    
c000e509:	90                   	nop

c000e50a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e50a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e50e:	89 c2                	mov    edx,eax
c000e510:	c1 ea 16             	shr    edx,0x16
c000e513:	c1 e8 0a             	shr    eax,0xa
c000e516:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e51b:	19 c9                	sbb    ecx,ecx
c000e51d:	25 fc 0f 00 00       	and    eax,0xffc
c000e522:	c1 e2 0c             	shl    edx,0xc
c000e525:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e52b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e532:	01 d0                	add    eax,edx
c000e534:	c3                   	ret    
c000e535:	90                   	nop

c000e536 <VAS::getPageTableEntry(unsigned long)>:
c000e536:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e53a:	89 ca                	mov    edx,ecx
c000e53c:	c1 ea 16             	shr    edx,0x16
c000e53f:	c1 e9 0a             	shr    ecx,0xa
c000e542:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e548:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e54e:	c1 e0 0c             	shl    eax,0xc
c000e551:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e554:	c3                   	ret    

c000e555 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e555:	57                   	push   edi
c000e556:	56                   	push   esi
c000e557:	be 01 00 00 00       	mov    esi,0x1
c000e55c:	53                   	push   ebx
c000e55d:	83 ec 10             	sub    esp,0x10
c000e560:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e564:	c1 eb 0c             	shr    ebx,0xc
c000e567:	eb 3e                	jmp    c000e5a7 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e569:	e8 27 fe ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c000e56e:	51                   	push   ecx
c000e56f:	51                   	push   ecx
c000e570:	57                   	push   edi
c000e571:	50                   	push   eax
c000e572:	e8 bf ff ff ff       	call   c000e536 <VAS::getPageTableEntry(unsigned long)>
c000e577:	83 c4 10             	add    esp,0x10
c000e57a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e57e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e580:	f6 c4 04             	test   ah,0x4
c000e583:	75 5f                	jne    c000e5e4 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e585:	80 fa 04             	cmp    dl,0x4
c000e588:	74 78                	je     c000e602 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e58a:	80 fa 02             	cmp    dl,0x2
c000e58d:	0f 84 88 00 00 00    	je     c000e61b <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e593:	80 fa 03             	cmp    dl,0x3
c000e596:	0f 84 ac 00 00 00    	je     c000e648 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e59c:	fe ca                	dec    dl
c000e59e:	0f 84 92 00 00 00    	je     c000e636 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e5a4:	43                   	inc    ebx
c000e5a5:	31 f6                	xor    esi,esi
c000e5a7:	53                   	push   ebx
c000e5a8:	e8 34 fc ff ff       	call   c000e1e1 <Virt::getPageState(unsigned long)>
c000e5ad:	5f                   	pop    edi
c000e5ae:	89 df                	mov    edi,ebx
c000e5b0:	c1 e7 0c             	shl    edi,0xc
c000e5b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5b7:	84 c0                	test   al,al
c000e5b9:	75 ae                	jne    c000e569 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5bb:	83 ec 0c             	sub    esp,0xc
c000e5be:	68 ad 18 02 c0       	push   0xc00218ad
c000e5c3:	e8 8a 74 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e5c8:	e8 c8 fd ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c000e5cd:	5a                   	pop    edx
c000e5ce:	59                   	pop    ecx
c000e5cf:	57                   	push   edi
c000e5d0:	50                   	push   eax
c000e5d1:	e8 60 ff ff ff       	call   c000e536 <VAS::getPageTableEntry(unsigned long)>
c000e5d6:	83 c4 10             	add    esp,0x10
c000e5d9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5df:	f6 c4 04             	test   ah,0x4
c000e5e2:	74 c0                	je     c000e5a4 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5e4:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5f0:	50                   	push   eax
c000e5f1:	e8 44 df ff ff       	call   c000c53a <Phys::freePage(unsigned long)>
c000e5f6:	83 c4 10             	add    esp,0x10
c000e5f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5fd:	80 fa 04             	cmp    dl,0x4
c000e600:	75 88                	jne    c000e58a <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e602:	89 f0                	mov    eax,esi
c000e604:	84 c0                	test   al,al
c000e606:	75 46                	jne    c000e64e <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e608:	c7 44 24 20 e0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216e0
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	5b                   	pop    ebx
c000e614:	5e                   	pop    esi
c000e615:	5f                   	pop    edi
c000e616:	e9 37 74 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000e61b:	89 f0                	mov    eax,esi
c000e61d:	84 c0                	test   al,al
c000e61f:	75 15                	jne    c000e636 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e621:	83 ec 0c             	sub    esp,0xc
c000e624:	68 c9 18 02 c0       	push   0xc00218c9
c000e629:	e8 24 74 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e62e:	83 c4 10             	add    esp,0x10
c000e631:	e9 6e ff ff ff       	jmp    c000e5a4 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e636:	50                   	push   eax
c000e637:	50                   	push   eax
c000e638:	6a 00                	push   0x0
c000e63a:	53                   	push   ebx
c000e63b:	e8 6a fb ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e640:	83 c4 10             	add    esp,0x10
c000e643:	e9 5c ff ff ff       	jmp    c000e5a4 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e648:	89 f0                	mov    eax,esi
c000e64a:	84 c0                	test   al,al
c000e64c:	75 14                	jne    c000e662 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e64e:	52                   	push   edx
c000e64f:	52                   	push   edx
c000e650:	6a 00                	push   0x0
c000e652:	53                   	push   ebx
c000e653:	e8 52 fb ff ff       	call   c000e1aa <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	83 c4 10             	add    esp,0x10
c000e65e:	5b                   	pop    ebx
c000e65f:	5e                   	pop    esi
c000e660:	5f                   	pop    edi
c000e661:	c3                   	ret    
c000e662:	c7 44 24 20 e5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218e5
c000e66a:	83 c4 10             	add    esp,0x10
c000e66d:	5b                   	pop    ebx
c000e66e:	5e                   	pop    esi
c000e66f:	5f                   	pop    edi
c000e670:	e9 dd 73 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c000e675:	90                   	nop

c000e676 <VAS::freeAllocatedPages(unsigned long)>:
c000e676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e67a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e67e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e682:	74 09                	je     c000e68d <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e684:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e688:	e9 c8 fe ff ff       	jmp    c000e555 <Virt::freeKernelVirtualPages(unsigned long)>
c000e68d:	c7 44 24 04 04 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021704
c000e695:	e9 89 0b 00 00       	jmp    c000f223 <Dbg::kprintf(char const*, ...)>

c000e69a <VAS::virtualToPhysical(unsigned long)>:
c000e69a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e69e:	50                   	push   eax
c000e69f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e6a3:	52                   	push   edx
c000e6a4:	e8 8d fe ff ff       	call   c000e536 <VAS::getPageTableEntry(unsigned long)>
c000e6a9:	59                   	pop    ecx
c000e6aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6ac:	5a                   	pop    edx
c000e6ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6b2:	c3                   	ret    
c000e6b3:	90                   	nop

c000e6b4 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e6b4:	55                   	push   ebp
c000e6b5:	57                   	push   edi
c000e6b6:	56                   	push   esi
c000e6b7:	53                   	push   ebx
c000e6b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6c0:	89 c3                	mov    ebx,eax
c000e6c2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6c6:	c1 e3 0c             	shl    ebx,0xc
c000e6c9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6cd:	01 f3                	add    ebx,esi
c000e6cf:	85 c0                	test   eax,eax
c000e6d1:	7e 1f                	jle    c000e6f2 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6d3:	56                   	push   esi
c000e6d4:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6da:	55                   	push   ebp
c000e6db:	e8 56 fe ff ff       	call   c000e536 <VAS::getPageTableEntry(unsigned long)>
c000e6e0:	5a                   	pop    edx
c000e6e1:	59                   	pop    ecx
c000e6e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6e4:	21 f9                	and    ecx,edi
c000e6e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6ea:	09 d1                	or     ecx,edx
c000e6ec:	39 f3                	cmp    ebx,esi
c000e6ee:	89 08                	mov    DWORD PTR [eax],ecx
c000e6f0:	75 e1                	jne    c000e6d3 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6f2:	5b                   	pop    ebx
c000e6f3:	5e                   	pop    esi
c000e6f4:	5f                   	pop    edi
c000e6f5:	5d                   	pop    ebp
c000e6f6:	c3                   	ret    
c000e6f7:	90                   	nop

c000e6f8 <VAS::setToWriteCombining(unsigned long, int)>:
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	e8 e6 61 00 00       	call   c00148e6 <thisCPU()>
c000e700:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e707:	75 04                	jne    c000e70d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e709:	83 c4 0c             	add    esp,0xc
c000e70c:	c3                   	ret    
c000e70d:	83 ec 0c             	sub    esp,0xc
c000e710:	68 80 00 00 00       	push   0x80
c000e715:	6a ff                	push   0xffffffff
c000e717:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e71b:	50                   	push   eax
c000e71c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e720:	52                   	push   edx
c000e721:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e725:	51                   	push   ecx
c000e726:	e8 89 ff ff ff       	call   c000e6b4 <VAS::reflagRange(unsigned long, int, int, int)>
c000e72b:	83 c4 20             	add    esp,0x20
c000e72e:	83 c4 0c             	add    esp,0xc
c000e731:	c3                   	ret    

c000e732 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e732:	83 ec 0c             	sub    esp,0xc
c000e735:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e739:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e73e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e745:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e748:	19 c0                	sbb    eax,eax
c000e74a:	83 ca 03             	or     edx,0x3
c000e74d:	83 e0 fc             	and    eax,0xfffffffc
c000e750:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e757:	e8 99 10 01 00       	call   c001f7f5 <CPU::readCR3()>
c000e75c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e760:	83 c4 0c             	add    esp,0xc
c000e763:	e9 9f 10 01 00       	jmp    c001f807 <CPU::writeCR3(unsigned long)>

c000e768 <VAS::~VAS()>:
c000e768:	83 ec 2c             	sub    esp,0x2c
c000e76b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e773:	e8 e3 a2 00 00       	call   c0018a5b <lockScheduler()>
c000e778:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e77d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e77f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e782:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e788:	83 ec 04             	sub    esp,0x4
c000e78b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e78f:	6a 01                	push   0x1
c000e791:	50                   	push   eax
c000e792:	e8 9b ff ff ff       	call   c000e732 <VAS::mapOtherVASIn(bool, VAS*)>
c000e797:	83 c4 10             	add    esp,0x10
c000e79a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7a2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e7aa:	0f 8f d7 00 00 00    	jg     c000e887 <VAS::~VAS()+0x11f>
c000e7b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7bb:	c1 e2 02             	shl    edx,0x2
c000e7be:	01 d0                	add    eax,edx
c000e7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ca:	83 e0 01             	and    eax,0x1
c000e7cd:	0f 84 ab 00 00 00    	je     c000e87e <VAS::~VAS()+0x116>
c000e7d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7db:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7e3:	7f 75                	jg     c000e85a <VAS::~VAS()+0xf2>
c000e7e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7e9:	c1 e0 0a             	shl    eax,0xa
c000e7ec:	89 c2                	mov    edx,eax
c000e7ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7f2:	01 d0                	add    eax,edx
c000e7f4:	c1 e0 0c             	shl    eax,0xc
c000e7f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e800:	8b 00                	mov    eax,DWORD PTR [eax]
c000e802:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e805:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e80b:	83 ec 04             	sub    esp,0x4
c000e80e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e812:	6a 01                	push   0x1
c000e814:	50                   	push   eax
c000e815:	e8 f0 fc ff ff       	call   c000e50a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e825:	8b 00                	mov    eax,DWORD PTR [eax]
c000e827:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e82b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e82f:	25 01 04 00 00       	and    eax,0x401
c000e834:	3d 01 04 00 00       	cmp    eax,0x401
c000e839:	75 19                	jne    c000e854 <VAS::~VAS()+0xec>
c000e83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e83f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e844:	83 ec 0c             	sub    esp,0xc
c000e847:	50                   	push   eax
c000e848:	e8 ed dc ff ff       	call   c000c53a <Phys::freePage(unsigned long)>
c000e84d:	83 c4 10             	add    esp,0x10
c000e850:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e854:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e858:	eb 81                	jmp    c000e7db <VAS::~VAS()+0x73>
c000e85a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85e:	25 00 04 00 00       	and    eax,0x400
c000e863:	74 19                	je     c000e87e <VAS::~VAS()+0x116>
c000e865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e869:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e86e:	83 ec 0c             	sub    esp,0xc
c000e871:	50                   	push   eax
c000e872:	e8 c3 dc ff ff       	call   c000c53a <Phys::freePage(unsigned long)>
c000e877:	83 c4 10             	add    esp,0x10
c000e87a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e87e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e882:	e9 1b ff ff ff       	jmp    c000e7a2 <VAS::~VAS()+0x3a>
c000e887:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e88b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e88e:	83 ec 0c             	sub    esp,0xc
c000e891:	50                   	push   eax
c000e892:	e8 be fc ff ff       	call   c000e555 <Virt::freeKernelVirtualPages(unsigned long)>
c000e897:	83 c4 10             	add    esp,0x10
c000e89a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e89e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e8a1:	83 ec 0c             	sub    esp,0xc
c000e8a4:	50                   	push   eax
c000e8a5:	e8 90 dc ff ff       	call   c000c53a <Phys::freePage(unsigned long)>
c000e8aa:	83 c4 10             	add    esp,0x10
c000e8ad:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e8b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8b5:	c1 e0 02             	shl    eax,0x2
c000e8b8:	83 ec 08             	sub    esp,0x8
c000e8bb:	50                   	push   eax
c000e8bc:	68 28 17 02 c0       	push   0xc0021728
c000e8c1:	e8 5d 09 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e8c6:	83 c4 10             	add    esp,0x10
c000e8c9:	e8 8f a1 00 00       	call   c0018a5d <unlockScheduler()>
c000e8ce:	90                   	nop
c000e8cf:	83 c4 2c             	add    esp,0x2c
c000e8d2:	c3                   	ret    
c000e8d3:	90                   	nop

c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8d4:	55                   	push   ebp
c000e8d5:	57                   	push   edi
c000e8d6:	56                   	push   esi
c000e8d7:	53                   	push   ebx
c000e8d8:	83 ec 1c             	sub    esp,0x1c
c000e8db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8e3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8e9:	77 08                	ja     c000e8f3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8eb:	0f 20 d8             	mov    eax,cr3
c000e8ee:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8f1:	75 49                	jne    c000e93c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8f7:	09 d8                	or     eax,ebx
c000e8f9:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8fe:	75 59                	jne    c000e959 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e900:	89 de                	mov    esi,ebx
c000e902:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e905:	c1 ee 16             	shr    esi,0x16
c000e908:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e90f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e913:	74 56                	je     c000e96b <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e915:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e91b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e91f:	c1 eb 0a             	shr    ebx,0xa
c000e922:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e926:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e92c:	09 d0                	or     eax,edx
c000e92e:	c1 e6 0c             	shl    esi,0xc
c000e931:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e934:	83 c4 1c             	add    esp,0x1c
c000e937:	5b                   	pop    ebx
c000e938:	5e                   	pop    esi
c000e939:	5f                   	pop    edi
c000e93a:	5d                   	pop    ebp
c000e93b:	c3                   	ret    
c000e93c:	83 ec 0c             	sub    esp,0xc
c000e93f:	68 48 17 02 c0       	push   0xc0021748
c000e944:	e8 da 08 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000e949:	83 c4 10             	add    esp,0x10
c000e94c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e950:	09 d8                	or     eax,ebx
c000e952:	a9 ff 0f 00 00       	test   eax,0xfff
c000e957:	74 a7                	je     c000e900 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e959:	83 ec 0c             	sub    esp,0xc
c000e95c:	68 b0 17 02 c0       	push   0xc00217b0
c000e961:	e8 ec 70 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000e966:	83 c4 10             	add    esp,0x10
c000e969:	eb 95                	jmp    c000e900 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e96b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e96f:	e8 53 dc ff ff       	call   c000c5c7 <Phys::allocatePage()>
c000e974:	89 c5                	mov    ebp,eax
c000e976:	e8 1a fa ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c000e97b:	83 ec 0c             	sub    esp,0xc
c000e97e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e982:	6a 01                	push   0x1
c000e984:	e8 7f f8 ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c000e989:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e990:	6a 01                	push   0x1
c000e992:	50                   	push   eax
c000e993:	55                   	push   ebp
c000e994:	81 cd 07 04 00 00    	or     ebp,0x407
c000e99a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e99e:	51                   	push   ecx
c000e99f:	e8 22 02 00 00       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9a4:	83 c4 1c             	add    esp,0x1c
c000e9a7:	68 00 10 00 00       	push   0x1000
c000e9ac:	6a 00                	push   0x0
c000e9ae:	50                   	push   eax
c000e9af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9b3:	e8 1a 1d ff ff       	call   c00006d2 <memset>
c000e9b8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9bc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9bf:	e8 91 fb ff ff       	call   c000e555 <Virt::freeKernelVirtualPages(unsigned long)>
c000e9c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9cb:	83 c4 10             	add    esp,0x10
c000e9ce:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9d1:	e9 3f ff ff ff       	jmp    c000e915 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9d6 <VAS::allocatePages(int, int)>:
c000e9d6:	55                   	push   ebp
c000e9d7:	57                   	push   edi
c000e9d8:	56                   	push   esi
c000e9d9:	53                   	push   ebx
c000e9da:	83 ec 1c             	sub    esp,0x1c
c000e9dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9e1:	e8 00 5f 00 00       	call   c00148e6 <thisCPU()>
c000e9e6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9ec:	83 e0 01             	and    eax,0x1
c000e9ef:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9f3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9f7:	0f 85 d5 00 00 00    	jne    c000ead2 <VAS::allocatePages(int, int)+0xfc>
c000e9fd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ea00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea04:	85 c0                	test   eax,eax
c000ea06:	0f 84 aa 00 00 00    	je     c000eab6 <VAS::allocatePages(int, int)+0xe0>
c000ea0c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ea10:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea14:	c1 e6 0c             	shl    esi,0xc
c000ea17:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea1b:	01 de                	add    esi,ebx
c000ea1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea21:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea27:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea2a:	85 c0                	test   eax,eax
c000ea2c:	7e 25                	jle    c000ea53 <VAS::allocatePages(int, int)+0x7d>
c000ea2e:	e8 94 db ff ff       	call   c000c5c7 <Phys::allocatePage()>
c000ea33:	55                   	push   ebp
c000ea34:	53                   	push   ebx
c000ea35:	50                   	push   eax
c000ea36:	57                   	push   edi
c000ea37:	e8 98 fe ff ff       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea44:	74 03                	je     c000ea49 <VAS::allocatePages(int, int)+0x73>
c000ea46:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea49:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea4f:	39 de                	cmp    esi,ebx
c000ea51:	75 db                	jne    c000ea2e <VAS::allocatePages(int, int)+0x58>
c000ea53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea58:	74 3f                	je     c000ea99 <VAS::allocatePages(int, int)+0xc3>
c000ea5a:	c1 ee 0a             	shr    esi,0xa
c000ea5d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea61:	c1 eb 0a             	shr    ebx,0xa
c000ea64:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea6a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea70:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea76:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea7c:	39 f3                	cmp    ebx,esi
c000ea7e:	77 0d                	ja     c000ea8d <VAS::allocatePages(int, int)+0xb7>
c000ea80:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea83:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea89:	39 de                	cmp    esi,ebx
c000ea8b:	73 f3                	jae    c000ea80 <VAS::allocatePages(int, int)+0xaa>
c000ea8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea91:	83 c4 1c             	add    esp,0x1c
c000ea94:	5b                   	pop    ebx
c000ea95:	5e                   	pop    esi
c000ea96:	5f                   	pop    edi
c000ea97:	5d                   	pop    ebp
c000ea98:	c3                   	ret    
c000ea99:	e8 57 0d 01 00       	call   c001f7f5 <CPU::readCR3()>
c000ea9e:	83 ec 0c             	sub    esp,0xc
c000eaa1:	50                   	push   eax
c000eaa2:	e8 60 0d 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000eaa7:	83 c4 10             	add    esp,0x10
c000eaaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaae:	83 c4 1c             	add    esp,0x1c
c000eab1:	5b                   	pop    ebx
c000eab2:	5e                   	pop    esi
c000eab3:	5f                   	pop    edi
c000eab4:	5d                   	pop    ebp
c000eab5:	c3                   	ret    
c000eab6:	83 ec 0c             	sub    esp,0xc
c000eab9:	68 d4 17 02 c0       	push   0xc00217d4
c000eabe:	e8 8f 6f 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000eac3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eac6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eaca:	83 c4 10             	add    esp,0x10
c000eacd:	e9 3a ff ff ff       	jmp    c000ea0c <VAS::allocatePages(int, int)+0x36>
c000ead2:	83 ec 0c             	sub    esp,0xc
c000ead5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ead9:	53                   	push   ebx
c000eada:	e8 29 f7 ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c000eadf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eae3:	83 c4 10             	add    esp,0x10
c000eae6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000eaeb:	0f 87 94 00 00 00    	ja     c000eb85 <VAS::allocatePages(int, int)+0x1af>
c000eaf1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaf5:	85 d2                	test   edx,edx
c000eaf7:	7e 3c                	jle    c000eb35 <VAS::allocatePages(int, int)+0x15f>
c000eaf9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb01:	c1 e5 0c             	shl    ebp,0xc
c000eb04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eb08:	81 ce 00 04 00 00    	or     esi,0x400
c000eb0e:	01 dd                	add    ebp,ebx
c000eb10:	e8 b2 da ff ff       	call   c000c5c7 <Phys::allocatePage()>
c000eb15:	56                   	push   esi
c000eb16:	53                   	push   ebx
c000eb17:	50                   	push   eax
c000eb18:	57                   	push   edi
c000eb19:	e8 b6 fd ff ff       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb1e:	83 c4 10             	add    esp,0x10
c000eb21:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb26:	74 03                	je     c000eb2b <VAS::allocatePages(int, int)+0x155>
c000eb28:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb31:	39 dd                	cmp    ebp,ebx
c000eb33:	75 db                	jne    c000eb10 <VAS::allocatePages(int, int)+0x13a>
c000eb35:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb3a:	0f 84 59 ff ff ff    	je     c000ea99 <VAS::allocatePages(int, int)+0xc3>
c000eb40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb48:	c1 e0 0c             	shl    eax,0xc
c000eb4b:	89 d3                	mov    ebx,edx
c000eb4d:	c1 eb 0a             	shr    ebx,0xa
c000eb50:	01 d0                	add    eax,edx
c000eb52:	c1 e8 0a             	shr    eax,0xa
c000eb55:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb60:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb66:	2d 00 00 40 00       	sub    eax,0x400000
c000eb6b:	39 c3                	cmp    ebx,eax
c000eb6d:	0f 87 1a ff ff ff    	ja     c000ea8d <VAS::allocatePages(int, int)+0xb7>
c000eb73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb76:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb7c:	39 d8                	cmp    eax,ebx
c000eb7e:	73 f3                	jae    c000eb73 <VAS::allocatePages(int, int)+0x19d>
c000eb80:	e9 08 ff ff ff       	jmp    c000ea8d <VAS::allocatePages(int, int)+0xb7>
c000eb85:	e8 5c 5d 00 00       	call   c00148e6 <thisCPU()>
c000eb8a:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb91:	0f 84 5a ff ff ff    	je     c000eaf1 <VAS::allocatePages(int, int)+0x11b>
c000eb97:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb9b:	80 cd 01             	or     ch,0x1
c000eb9e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eba2:	e9 4a ff ff ff       	jmp    c000eaf1 <VAS::allocatePages(int, int)+0x11b>
c000eba7:	90                   	nop

c000eba8 <VAS::setCPUSpecific(unsigned long)>:
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	6a 05                	push   0x5
c000ebad:	68 00 00 40 c2       	push   0xc2400000
c000ebb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebb6:	50                   	push   eax
c000ebb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebbb:	52                   	push   edx
c000ebbc:	e8 13 fd ff ff       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebc1:	83 c4 1c             	add    esp,0x1c
c000ebc4:	c3                   	ret    
c000ebc5:	90                   	nop

c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebc6:	55                   	push   ebp
c000ebc7:	57                   	push   edi
c000ebc8:	56                   	push   esi
c000ebc9:	53                   	push   ebx
c000ebca:	83 ec 1c             	sub    esp,0x1c
c000ebcd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebd5:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebd9:	e8 08 5d 00 00       	call   c00148e6 <thisCPU()>
c000ebde:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebe4:	83 e0 01             	and    eax,0x1
c000ebe7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebef:	85 c0                	test   eax,eax
c000ebf1:	7e 39                	jle    c000ec2c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebf3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf7:	89 f3                	mov    ebx,esi
c000ebf9:	c1 e0 0c             	shl    eax,0xc
c000ebfc:	01 f0                	add    eax,esi
c000ebfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec02:	55                   	push   ebp
c000ec03:	53                   	push   ebx
c000ec04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec08:	29 f0                	sub    eax,esi
c000ec0a:	01 d8                	add    eax,ebx
c000ec0c:	50                   	push   eax
c000ec0d:	57                   	push   edi
c000ec0e:	e8 c1 fc ff ff       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ec13:	83 c4 10             	add    esp,0x10
c000ec16:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec1b:	74 03                	je     c000ec20 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec1d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec20:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec26:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec2a:	75 d6                	jne    c000ec02 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec2c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec31:	74 42                	je     c000ec75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec37:	89 f3                	mov    ebx,esi
c000ec39:	c1 e0 0c             	shl    eax,0xc
c000ec3c:	c1 eb 0a             	shr    ebx,0xa
c000ec3f:	01 f0                	add    eax,esi
c000ec41:	c1 e8 0a             	shr    eax,0xa
c000ec44:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec4f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec55:	2d 00 00 40 00       	sub    eax,0x400000
c000ec5a:	39 c3                	cmp    ebx,eax
c000ec5c:	77 0d                	ja     c000ec6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec61:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec67:	39 d8                	cmp    eax,ebx
c000ec69:	73 f3                	jae    c000ec5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec6b:	83 c4 1c             	add    esp,0x1c
c000ec6e:	89 f0                	mov    eax,esi
c000ec70:	5b                   	pop    ebx
c000ec71:	5e                   	pop    esi
c000ec72:	5f                   	pop    edi
c000ec73:	5d                   	pop    ebp
c000ec74:	c3                   	ret    
c000ec75:	e8 7b 0b 01 00       	call   c001f7f5 <CPU::readCR3()>
c000ec7a:	83 ec 0c             	sub    esp,0xc
c000ec7d:	50                   	push   eax
c000ec7e:	e8 84 0b 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000ec83:	83 c4 10             	add    esp,0x10
c000ec86:	89 f0                	mov    eax,esi
c000ec88:	83 c4 1c             	add    esp,0x1c
c000ec8b:	5b                   	pop    ebx
c000ec8c:	5e                   	pop    esi
c000ec8d:	5f                   	pop    edi
c000ec8e:	5d                   	pop    ebp
c000ec8f:	c3                   	ret    

c000ec90 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec90:	55                   	push   ebp
c000ec91:	57                   	push   edi
c000ec92:	56                   	push   esi
c000ec93:	53                   	push   ebx
c000ec94:	83 ec 1c             	sub    esp,0x1c
c000ec97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec9b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec9f:	09 f0                	or     eax,esi
c000eca1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eca5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eca9:	a9 ff 0f 00 00       	test   eax,0xfff
c000ecae:	75 4c                	jne    c000ecfc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ecb0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecb4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ecb7:	c1 eb 16             	shr    ebx,0x16
c000ecba:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ecc1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ecc5:	74 4f                	je     c000ed16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ecc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eccb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000eccf:	c1 e8 0a             	shr    eax,0xa
c000ecd2:	80 fa 01             	cmp    dl,0x1
c000ecd5:	19 d2                	sbb    edx,edx
c000ecd7:	25 fc 0f 00 00       	and    eax,0xffc
c000ecdc:	c1 e3 0c             	shl    ebx,0xc
c000ecdf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ece5:	01 d8                	add    eax,ebx
c000ece7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eceb:	09 d9                	or     ecx,ebx
c000eced:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ecf4:	83 c4 1c             	add    esp,0x1c
c000ecf7:	5b                   	pop    ebx
c000ecf8:	5e                   	pop    esi
c000ecf9:	5f                   	pop    edi
c000ecfa:	5d                   	pop    ebp
c000ecfb:	c3                   	ret    
c000ecfc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ed00:	83 ec 0c             	sub    esp,0xc
c000ed03:	68 00 18 02 c0       	push   0xc0021800
c000ed08:	e8 45 6d 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000ed0d:	83 c4 10             	add    esp,0x10
c000ed10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed14:	eb 9a                	jmp    c000ecb0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ed16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed1a:	e8 a8 d8 ff ff       	call   c000c5c7 <Phys::allocatePage()>
c000ed1f:	89 c5                	mov    ebp,eax
c000ed21:	e8 6f f6 ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c000ed26:	83 ec 0c             	sub    esp,0xc
c000ed29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed2d:	6a 01                	push   0x1
c000ed2f:	e8 d4 f4 ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c000ed34:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed3b:	6a 01                	push   0x1
c000ed3d:	50                   	push   eax
c000ed3e:	55                   	push   ebp
c000ed3f:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed45:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed49:	51                   	push   ecx
c000ed4a:	e8 77 fe ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed4f:	83 c4 1c             	add    esp,0x1c
c000ed52:	68 00 10 00 00       	push   0x1000
c000ed57:	6a 00                	push   0x0
c000ed59:	50                   	push   eax
c000ed5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed5e:	e8 6f 19 ff ff       	call   c00006d2 <memset>
c000ed63:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed67:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed6a:	e8 e6 f7 ff ff       	call   c000e555 <Virt::freeKernelVirtualPages(unsigned long)>
c000ed6f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed72:	83 c4 10             	add    esp,0x10
c000ed75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed79:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed7c:	e9 46 ff ff ff       	jmp    c000ecc7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed81:	90                   	nop

c000ed82 <VAS::VAS(bool)>:
c000ed82:	53                   	push   ebx
c000ed83:	83 ec 28             	sub    esp,0x28
c000ed86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed8a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000eda1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000eda4:	e8 1e d8 ff ff       	call   c000c5c7 <Phys::allocatePage()>
c000eda9:	89 c2                	mov    edx,eax
c000edab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edaf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edb2:	e8 de f5 ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c000edb7:	89 c3                	mov    ebx,eax
c000edb9:	83 ec 0c             	sub    esp,0xc
c000edbc:	6a 01                	push   0x1
c000edbe:	e8 45 f4 ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c000edc3:	83 c4 10             	add    esp,0x10
c000edc6:	89 c2                	mov    edx,eax
c000edc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edcf:	83 ec 0c             	sub    esp,0xc
c000edd2:	6a 03                	push   0x3
c000edd4:	6a 01                	push   0x1
c000edd6:	52                   	push   edx
c000edd7:	50                   	push   eax
c000edd8:	53                   	push   ebx
c000edd9:	e8 e8 fd ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edde:	83 c4 20             	add    esp,0x20
c000ede1:	89 c2                	mov    edx,eax
c000ede3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000edea:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000edf2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000edfa:	7f 1c                	jg     c000ee18 <VAS::VAS(bool)+0x96>
c000edfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee07:	c1 e2 02             	shl    edx,0x2
c000ee0a:	01 d0                	add    eax,edx
c000ee0c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee12:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee16:	eb da                	jmp    c000edf2 <VAS::VAS(bool)+0x70>
c000ee18:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee20:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee28:	7f 71                	jg     c000ee9b <VAS::VAS(bool)+0x119>
c000ee2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee2e:	2d 00 02 00 00       	sub    eax,0x200
c000ee33:	c1 e0 0c             	shl    eax,0xc
c000ee36:	83 c8 03             	or     eax,0x3
c000ee39:	89 c3                	mov    ebx,eax
c000ee3b:	e8 a6 5a 00 00       	call   c00148e6 <thisCPU()>
c000ee40:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee46:	83 e0 10             	and    eax,0x10
c000ee49:	84 c0                	test   al,al
c000ee4b:	74 07                	je     c000ee54 <VAS::VAS(bool)+0xd2>
c000ee4d:	b8 00 01 00 00       	mov    eax,0x100
c000ee52:	eb 05                	jmp    c000ee59 <VAS::VAS(bool)+0xd7>
c000ee54:	b8 00 00 00 00       	mov    eax,0x0
c000ee59:	09 d8                	or     eax,ebx
c000ee5b:	89 c1                	mov    ecx,eax
c000ee5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee68:	c1 e2 02             	shl    edx,0x2
c000ee6b:	01 d0                	add    eax,edx
c000ee6d:	89 ca                	mov    edx,ecx
c000ee6f:	89 10                	mov    DWORD PTR [eax],edx
c000ee71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee75:	2d 40 03 00 00       	sub    eax,0x340
c000ee7a:	83 f8 7f             	cmp    eax,0x7f
c000ee7d:	77 16                	ja     c000ee95 <VAS::VAS(bool)+0x113>
c000ee7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee8a:	c1 e2 02             	shl    edx,0x2
c000ee8d:	01 d0                	add    eax,edx
c000ee8f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee95:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee99:	eb 85                	jmp    c000ee20 <VAS::VAS(bool)+0x9e>
c000ee9b:	e8 46 5a 00 00       	call   c00148e6 <thisCPU()>
c000eea0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eea6:	83 e0 10             	and    eax,0x10
c000eea9:	84 c0                	test   al,al
c000eeab:	74 07                	je     c000eeb4 <VAS::VAS(bool)+0x132>
c000eead:	b8 03 41 00 00       	mov    eax,0x4103
c000eeb2:	eb 05                	jmp    c000eeb9 <VAS::VAS(bool)+0x137>
c000eeb4:	b8 03 40 00 00       	mov    eax,0x4003
c000eeb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eebd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eec0:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eec6:	89 02                	mov    DWORD PTR [edx],eax
c000eec8:	e8 19 5a 00 00       	call   c00148e6 <thisCPU()>
c000eecd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eed3:	83 ec 08             	sub    esp,0x8
c000eed6:	50                   	push   eax
c000eed7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eedb:	e8 c8 fc ff ff       	call   c000eba8 <VAS::setCPUSpecific(unsigned long)>
c000eee0:	83 c4 10             	add    esp,0x10
c000eee3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eee7:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eeea:	e8 f7 59 00 00       	call   c00148e6 <thisCPU()>
c000eeef:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eef5:	83 e0 10             	and    eax,0x10
c000eef8:	84 c0                	test   al,al
c000eefa:	74 07                	je     c000ef03 <VAS::VAS(bool)+0x181>
c000eefc:	b8 00 01 00 00       	mov    eax,0x100
c000ef01:	eb 05                	jmp    c000ef08 <VAS::VAS(bool)+0x186>
c000ef03:	b8 00 00 00 00       	mov    eax,0x0
c000ef08:	09 d8                	or     eax,ebx
c000ef0a:	89 c2                	mov    edx,eax
c000ef0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef10:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef13:	05 fc 0f 00 00       	add    eax,0xffc
c000ef18:	83 ca 03             	or     edx,0x3
c000ef1b:	89 10                	mov    DWORD PTR [eax],edx
c000ef1d:	e8 c4 59 00 00       	call   c00148e6 <thisCPU()>
c000ef22:	83 ec 0c             	sub    esp,0xc
c000ef25:	50                   	push   eax
c000ef26:	e8 ef 19 00 00       	call   c001091a <Device::getName()>
c000ef2b:	83 c4 10             	add    esp,0x10
c000ef2e:	83 ec 08             	sub    esp,0x8
c000ef31:	68 ff 18 02 c0       	push   0xc00218ff
c000ef36:	50                   	push   eax
c000ef37:	e8 86 18 ff ff       	call   c00007c2 <strcmp>
c000ef3c:	83 c4 10             	add    esp,0x10
c000ef3f:	85 c0                	test   eax,eax
c000ef41:	0f 94 c0             	sete   al
c000ef44:	84 c0                	test   al,al
c000ef46:	74 64                	je     c000efac <VAS::VAS(bool)+0x22a>
c000ef48:	e8 ec 9a 00 00       	call   c0018a39 <disableIRQs()>
c000ef4d:	e8 94 59 00 00       	call   c00148e6 <thisCPU()>
c000ef52:	05 7c 09 00 00       	add    eax,0x97c
c000ef57:	83 ec 0c             	sub    esp,0xc
c000ef5a:	50                   	push   eax
c000ef5b:	e8 04 cb ff ff       	call   c000ba64 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef60:	83 c4 10             	add    esp,0x10
c000ef63:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef68:	89 c3                	mov    ebx,eax
c000ef6a:	e8 77 59 00 00       	call   c00148e6 <thisCPU()>
c000ef6f:	05 7c 09 00 00       	add    eax,0x97c
c000ef74:	83 ec 0c             	sub    esp,0xc
c000ef77:	50                   	push   eax
c000ef78:	e8 e7 ca ff ff       	call   c000ba64 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef7d:	83 c4 10             	add    esp,0x10
c000ef80:	83 ec 08             	sub    esp,0x8
c000ef83:	50                   	push   eax
c000ef84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef88:	e8 a9 f5 ff ff       	call   c000e536 <VAS::getPageTableEntry(unsigned long)>
c000ef8d:	83 c4 10             	add    esp,0x10
c000ef90:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef92:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef97:	6a 11                	push   0x11
c000ef99:	53                   	push   ebx
c000ef9a:	50                   	push   eax
c000ef9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef9f:	e8 30 f9 ff ff       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000efa4:	83 c4 10             	add    esp,0x10
c000efa7:	e8 a0 9a 00 00       	call   c0018a4c <enableIRQs()>
c000efac:	90                   	nop
c000efad:	83 c4 28             	add    esp,0x28
c000efb0:	5b                   	pop    ebx
c000efb1:	c3                   	ret    

c000efb2 <mapVASFirstTime>:
c000efb2:	55                   	push   ebp
c000efb3:	57                   	push   edi
c000efb4:	56                   	push   esi
c000efb5:	53                   	push   ebx
c000efb6:	83 ec 0c             	sub    esp,0xc
c000efb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efbe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efc1:	4a                   	dec    edx
c000efc2:	0f 84 99 00 00 00    	je     c000f061 <mapVASFirstTime+0xaf>
c000efc8:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efcb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efce:	c1 e5 15             	shl    ebp,0x15
c000efd1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efd6:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efdb:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efe1:	29 eb                	sub    ebx,ebp
c000efe3:	29 ee                	sub    esi,ebp
c000efe5:	e8 dd d5 ff ff       	call   c000c5c7 <Phys::allocatePage()>
c000efea:	83 ec 0c             	sub    esp,0xc
c000efed:	68 03 04 00 00       	push   0x403
c000eff2:	6a 01                	push   0x1
c000eff4:	53                   	push   ebx
c000eff5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000effb:	50                   	push   eax
c000effc:	57                   	push   edi
c000effd:	e8 c4 fb ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f002:	83 c4 20             	add    esp,0x20
c000f005:	39 f3                	cmp    ebx,esi
c000f007:	75 dc                	jne    c000efe5 <mapVASFirstTime+0x33>
c000f009:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000f00e:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000f013:	29 e8                	sub    eax,ebp
c000f015:	29 ee                	sub    esi,ebp
c000f017:	89 c5                	mov    ebp,eax
c000f019:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f01d:	19 db                	sbb    ebx,ebx
c000f01f:	e8 a3 d5 ff ff       	call   c000c5c7 <Phys::allocatePage()>
c000f024:	83 e3 04             	and    ebx,0x4
c000f027:	83 ec 0c             	sub    esp,0xc
c000f02a:	81 c3 03 04 00 00    	add    ebx,0x403
c000f030:	53                   	push   ebx
c000f031:	6a 01                	push   0x1
c000f033:	56                   	push   esi
c000f034:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f03a:	50                   	push   eax
c000f03b:	57                   	push   edi
c000f03c:	e8 85 fb ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f041:	83 c4 20             	add    esp,0x20
c000f044:	39 f5                	cmp    ebp,esi
c000f046:	75 d1                	jne    c000f019 <mapVASFirstTime+0x67>
c000f048:	e8 a8 07 01 00       	call   c001f7f5 <CPU::readCR3()>
c000f04d:	83 ec 0c             	sub    esp,0xc
c000f050:	50                   	push   eax
c000f051:	e8 b1 07 01 00       	call   c001f807 <CPU::writeCR3(unsigned long)>
c000f056:	83 c4 10             	add    esp,0x10
c000f059:	83 c4 0c             	add    esp,0xc
c000f05c:	5b                   	pop    ebx
c000f05d:	5e                   	pop    esi
c000f05e:	5f                   	pop    edi
c000f05f:	5d                   	pop    ebp
c000f060:	c3                   	ret    
c000f061:	83 ec 0c             	sub    esp,0xc
c000f064:	68 0d 19 02 c0       	push   0xc002190d
c000f069:	e8 b5 01 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000f06e:	83 c4 10             	add    esp,0x10
c000f071:	83 c4 0c             	add    esp,0xc
c000f074:	5b                   	pop    ebx
c000f075:	5e                   	pop    esi
c000f076:	5f                   	pop    edi
c000f077:	5d                   	pop    ebp
c000f078:	c3                   	ret    

c000f079 <__cxa_atexit>:
c000f079:	31 c0                	xor    eax,eax
c000f07b:	c3                   	ret    

c000f07c <__cxa_finalize>:
c000f07c:	c3                   	ret    

c000f07d <__stack_chk_fail>:
c000f07d:	55                   	push   ebp
c000f07e:	89 e5                	mov    ebp,esp
c000f080:	83 ec 10             	sub    esp,0x10
c000f083:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f086:	68 26 19 02 c0       	push   0xc0021926
c000f08b:	e8 93 01 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000f090:	58                   	pop    eax
c000f091:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f094:	5a                   	pop    edx
c000f095:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f098:	68 26 19 02 c0       	push   0xc0021926
c000f09d:	e8 81 01 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000f0a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0a5:	59                   	pop    ecx
c000f0a6:	5a                   	pop    edx
c000f0a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0ac:	68 26 19 02 c0       	push   0xc0021926
c000f0b1:	e8 6d 01 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000f0b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0b9:	59                   	pop    ecx
c000f0ba:	5a                   	pop    edx
c000f0bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0c2:	68 26 19 02 c0       	push   0xc0021926
c000f0c7:	e8 57 01 00 00       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c000f0cc:	c7 04 24 2e 19 02 c0 	mov    DWORD PTR [esp],0xc002192e
c000f0d3:	e8 7a 69 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000f0d8:	83 c4 10             	add    esp,0x10
c000f0db:	c9                   	leave  
c000f0dc:	c3                   	ret    

c000f0dd <__cxa_pure_virtual>:
c000f0dd:	83 ec 18             	sub    esp,0x18
c000f0e0:	68 46 19 02 c0       	push   0xc0021946
c000f0e5:	e8 68 69 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c000f0ea:	83 c4 1c             	add    esp,0x1c
c000f0ed:	c3                   	ret    

c000f0ee <operator new(unsigned long)>:
c000f0ee:	e9 fe ce ff ff       	jmp    c000bff1 <malloc>

c000f0f3 <operator new[](unsigned long)>:
c000f0f3:	e9 f9 ce ff ff       	jmp    c000bff1 <malloc>

c000f0f8 <operator delete(void*)>:
c000f0f8:	e9 14 cf ff ff       	jmp    c000c011 <rfree>

c000f0fd <operator delete(void*, unsigned long)>:
c000f0fd:	e9 0f cf ff ff       	jmp    c000c011 <rfree>

c000f102 <operator delete[](void*)>:
c000f102:	e9 0a cf ff ff       	jmp    c000c011 <rfree>

c000f107 <operator delete[](void*, unsigned long)>:
c000f107:	e9 05 cf ff ff       	jmp    c000c011 <rfree>

c000f10c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f10c:	57                   	push   edi
c000f10d:	56                   	push   esi
c000f10e:	be 5d 19 02 c0       	mov    esi,0xc002195d
c000f113:	53                   	push   ebx
c000f114:	83 ec 40             	sub    esp,0x40
c000f117:	a0 5c 19 02 c0       	mov    al,ds:0xc002195c
c000f11c:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f120:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f124:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f128:	b8 3e 00 00 00       	mov    eax,0x3e
c000f12d:	f7 c7 02 00 00 00    	test   edi,0x2
c000f133:	75 69                	jne    c000f19e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f135:	89 c1                	mov    ecx,eax
c000f137:	c1 e9 02             	shr    ecx,0x2
c000f13a:	fc                   	cld    
c000f13b:	31 d2                	xor    edx,edx
c000f13d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f13f:	a8 02                	test   al,0x2
c000f141:	74 0b                	je     c000f14e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f143:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f146:	66 89 17             	mov    WORD PTR [edi],dx
c000f149:	ba 02 00 00 00       	mov    edx,0x2
c000f14e:	a8 01                	test   al,0x1
c000f150:	74 06                	je     c000f158 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f152:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f155:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f158:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f15c:	83 f9 3e             	cmp    ecx,0x3e
c000f15f:	7e 05                	jle    c000f166 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f161:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f166:	89 df                	mov    edi,ebx
c000f168:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f16c:	eb 02                	jmp    c000f170 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f16e:	89 c7                	mov    edi,eax
c000f170:	31 d2                	xor    edx,edx
c000f172:	89 f8                	mov    eax,edi
c000f174:	46                   	inc    esi
c000f175:	f7 f1                	div    ecx
c000f177:	39 cf                	cmp    edi,ecx
c000f179:	73 f3                	jae    c000f16e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f17b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f17e:	eb 02                	jmp    c000f182 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f180:	89 c3                	mov    ebx,eax
c000f182:	31 d2                	xor    edx,edx
c000f184:	89 d8                	mov    eax,ebx
c000f186:	f7 f1                	div    ecx
c000f188:	4e                   	dec    esi
c000f189:	39 cb                	cmp    ebx,ecx
c000f18b:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f18f:	88 16                	mov    BYTE PTR [esi],dl
c000f191:	73 ed                	jae    c000f180 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f193:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f197:	83 c4 40             	add    esp,0x40
c000f19a:	5b                   	pop    ebx
c000f19b:	5e                   	pop    esi
c000f19c:	5f                   	pop    edi
c000f19d:	c3                   	ret    
c000f19e:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f1a1:	83 c7 02             	add    edi,0x2
c000f1a4:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f1a8:	83 c6 02             	add    esi,0x2
c000f1ab:	83 e8 02             	sub    eax,0x2
c000f1ae:	eb 85                	jmp    c000f135 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f1b0 <Dbg::logc(char)>:
c000f1b0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1b4:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1b9:	ec                   	in     al,dx
c000f1ba:	a8 20                	test   al,0x20
c000f1bc:	74 fb                	je     c000f1b9 <Dbg::logc(char)+0x9>
c000f1be:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1c3:	88 c8                	mov    al,cl
c000f1c5:	ee                   	out    dx,al
c000f1c6:	c3                   	ret    

c000f1c7 <Dbg::logs(char*)>:
c000f1c7:	53                   	push   ebx
c000f1c8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1cc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1cf:	84 c0                	test   al,al
c000f1d1:	74 0f                	je     c000f1e2 <Dbg::logs(char*)+0x1b>
c000f1d3:	43                   	inc    ebx
c000f1d4:	50                   	push   eax
c000f1d5:	e8 d6 ff ff ff       	call   c000f1b0 <Dbg::logc(char)>
c000f1da:	5a                   	pop    edx
c000f1db:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1de:	84 c0                	test   al,al
c000f1e0:	75 f1                	jne    c000f1d3 <Dbg::logs(char*)+0xc>
c000f1e2:	5b                   	pop    ebx
c000f1e3:	c3                   	ret    

c000f1e4 <Dbg::logWriteInt(unsigned int)>:
c000f1e4:	83 ec 10             	sub    esp,0x10
c000f1e7:	6a 0a                	push   0xa
c000f1e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1ed:	50                   	push   eax
c000f1ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1f2:	50                   	push   eax
c000f1f3:	e8 14 ff ff ff       	call   c000f10c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1f8:	50                   	push   eax
c000f1f9:	e8 c9 ff ff ff       	call   c000f1c7 <Dbg::logs(char*)>
c000f1fe:	83 c4 20             	add    esp,0x20
c000f201:	c3                   	ret    

c000f202 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f202:	83 ec 10             	sub    esp,0x10
c000f205:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f209:	50                   	push   eax
c000f20a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f20e:	50                   	push   eax
c000f20f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f213:	52                   	push   edx
c000f214:	e8 f3 fe ff ff       	call   c000f10c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f219:	50                   	push   eax
c000f21a:	e8 a8 ff ff ff       	call   c000f1c7 <Dbg::logs(char*)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	c3                   	ret    

c000f223 <Dbg::kprintf(char const*, ...)>:
c000f223:	55                   	push   ebp
c000f224:	57                   	push   edi
c000f225:	56                   	push   esi
c000f226:	53                   	push   ebx
c000f227:	83 ec 0c             	sub    esp,0xc
c000f22a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f22e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f232:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f236:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f239:	84 c0                	test   al,al
c000f23b:	74 4d                	je     c000f28a <Dbg::kprintf(char const*, ...)+0x67>
c000f23d:	31 ff                	xor    edi,edi
c000f23f:	8d 77 01             	lea    esi,[edi+0x1]
c000f242:	3c 25                	cmp    al,0x25
c000f244:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f247:	0f 85 ec 00 00 00    	jne    c000f339 <Dbg::kprintf(char const*, ...)+0x116>
c000f24d:	83 c7 02             	add    edi,0x2
c000f250:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f253:	83 e8 25             	sub    eax,0x25
c000f256:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f259:	3c 53                	cmp    al,0x53
c000f25b:	0f 87 c0 00 00 00    	ja     c000f321 <Dbg::kprintf(char const*, ...)+0xfe>
c000f261:	25 ff 00 00 00       	and    eax,0xff
c000f266:	ff 24 85 9c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde664]
c000f26d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f271:	89 c8                	mov    eax,ecx
c000f273:	83 c1 04             	add    ecx,0x4
c000f276:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f27a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f27c:	50                   	push   eax
c000f27d:	e8 45 ff ff ff       	call   c000f1c7 <Dbg::logs(char*)>
c000f282:	58                   	pop    eax
c000f283:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f286:	84 c0                	test   al,al
c000f288:	75 b5                	jne    c000f23f <Dbg::kprintf(char const*, ...)+0x1c>
c000f28a:	83 c4 0c             	add    esp,0xc
c000f28d:	5b                   	pop    ebx
c000f28e:	5e                   	pop    esi
c000f28f:	5f                   	pop    edi
c000f290:	5d                   	pop    ebp
c000f291:	c3                   	ret    
c000f292:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f296:	89 d0                	mov    eax,edx
c000f298:	83 c2 04             	add    edx,0x4
c000f29b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f29f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2a1:	50                   	push   eax
c000f2a2:	e8 3d ff ff ff       	call   c000f1e4 <Dbg::logWriteInt(unsigned int)>
c000f2a7:	58                   	pop    eax
c000f2a8:	eb d9                	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f2aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2ae:	89 d0                	mov    eax,edx
c000f2b0:	83 c2 04             	add    edx,0x4
c000f2b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2b7:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2ba:	50                   	push   eax
c000f2bb:	e8 f0 fe ff ff       	call   c000f1b0 <Dbg::logc(char)>
c000f2c0:	58                   	pop    eax
c000f2c1:	eb c0                	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f2c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2c7:	89 c8                	mov    eax,ecx
c000f2c9:	83 c1 04             	add    ecx,0x4
c000f2cc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2d0:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2d2:	55                   	push   ebp
c000f2d3:	e8 0c ff ff ff       	call   c000f1e4 <Dbg::logWriteInt(unsigned int)>
c000f2d8:	58                   	pop    eax
c000f2d9:	eb a8                	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f2db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2df:	89 c8                	mov    eax,ecx
c000f2e1:	83 c1 04             	add    ecx,0x4
c000f2e4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2e8:	6a 10                	push   0x10
c000f2ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2ec:	51                   	push   ecx
c000f2ed:	e8 10 ff ff ff       	call   c000f202 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2f2:	5d                   	pop    ebp
c000f2f3:	58                   	pop    eax
c000f2f4:	eb 8d                	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f2f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fa:	89 d0                	mov    eax,edx
c000f2fc:	83 c2 08             	add    edx,0x8
c000f2ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f303:	6a 10                	push   0x10
c000f305:	8b 00                	mov    eax,DWORD PTR [eax]
c000f307:	50                   	push   eax
c000f308:	e8 f5 fe ff ff       	call   c000f202 <Dbg::logWriteIntBase(unsigned int, int)>
c000f30d:	58                   	pop    eax
c000f30e:	5a                   	pop    edx
c000f30f:	e9 6f ff ff ff       	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f314:	6a 25                	push   0x25
c000f316:	e8 95 fe ff ff       	call   c000f1b0 <Dbg::logc(char)>
c000f31b:	5a                   	pop    edx
c000f31c:	e9 62 ff ff ff       	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f321:	6a 25                	push   0x25
c000f323:	e8 88 fe ff ff       	call   c000f1b0 <Dbg::logc(char)>
c000f328:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f32c:	50                   	push   eax
c000f32d:	e8 7e fe ff ff       	call   c000f1b0 <Dbg::logc(char)>
c000f332:	5a                   	pop    edx
c000f333:	59                   	pop    ecx
c000f334:	e9 4a ff ff ff       	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f339:	50                   	push   eax
c000f33a:	89 f7                	mov    edi,esi
c000f33c:	e8 6f fe ff ff       	call   c000f1b0 <Dbg::logc(char)>
c000f341:	89 ee                	mov    esi,ebp
c000f343:	58                   	pop    eax
c000f344:	e9 3a ff ff ff       	jmp    c000f283 <Dbg::kprintf(char const*, ...)+0x60>
c000f349:	90                   	nop

c000f34a <File::read(unsigned long long, void*, int*)>:
c000f34a:	53                   	push   ebx
c000f34b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f34f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f353:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f35a:	3c 19                	cmp    al,0x19
c000f35c:	77 35                	ja     c000f393 <File::read(unsigned long long, void*, int*)+0x49>
c000f35e:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f365:	85 c0                	test   eax,eax
c000f367:	74 2a                	je     c000f393 <File::read(unsigned long long, void*, int*)+0x49>
c000f369:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f36f:	85 c0                	test   eax,eax
c000f371:	74 20                	je     c000f393 <File::read(unsigned long long, void*, int*)+0x49>
c000f373:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f377:	74 21                	je     c000f39a <File::read(unsigned long long, void*, int*)+0x50>
c000f379:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f37b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f37f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f385:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f389:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f38d:	5b                   	pop    ebx
c000f38e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f391:	ff e0                	jmp    eax
c000f393:	b8 0b 00 00 00       	mov    eax,0xb
c000f398:	eb 05                	jmp    c000f39f <File::read(unsigned long long, void*, int*)+0x55>
c000f39a:	b8 05 00 00 00       	mov    eax,0x5
c000f39f:	5b                   	pop    ebx
c000f3a0:	c3                   	ret    
c000f3a1:	90                   	nop

c000f3a2 <File::write(unsigned long long, void*, int*)>:
c000f3a2:	53                   	push   ebx
c000f3a3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3ab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3b2:	3c 19                	cmp    al,0x19
c000f3b4:	77 35                	ja     c000f3eb <File::write(unsigned long long, void*, int*)+0x49>
c000f3b6:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f3bd:	85 c0                	test   eax,eax
c000f3bf:	74 2a                	je     c000f3eb <File::write(unsigned long long, void*, int*)+0x49>
c000f3c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3c7:	85 c0                	test   eax,eax
c000f3c9:	74 20                	je     c000f3eb <File::write(unsigned long long, void*, int*)+0x49>
c000f3cb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3cf:	74 21                	je     c000f3f2 <File::write(unsigned long long, void*, int*)+0x50>
c000f3d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3d7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3e5:	5b                   	pop    ebx
c000f3e6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3e9:	ff e0                	jmp    eax
c000f3eb:	b8 0b 00 00 00       	mov    eax,0xb
c000f3f0:	eb 05                	jmp    c000f3f7 <File::write(unsigned long long, void*, int*)+0x55>
c000f3f2:	b8 05 00 00 00       	mov    eax,0x5
c000f3f7:	5b                   	pop    ebx
c000f3f8:	c3                   	ret    
c000f3f9:	90                   	nop

c000f3fa <Directory::read(unsigned long long, void*, int*)>:
c000f3fa:	53                   	push   ebx
c000f3fb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f403:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f40a:	3c 19                	cmp    al,0x19
c000f40c:	77 35                	ja     c000f443 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f40e:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f415:	85 c0                	test   eax,eax
c000f417:	74 2a                	je     c000f443 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f419:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f41f:	85 c0                	test   eax,eax
c000f421:	74 20                	je     c000f443 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f423:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f427:	74 21                	je     c000f44a <Directory::read(unsigned long long, void*, int*)+0x50>
c000f429:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f42b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f42f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f435:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f439:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43d:	5b                   	pop    ebx
c000f43e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f441:	ff e0                	jmp    eax
c000f443:	b8 0b 00 00 00       	mov    eax,0xb
c000f448:	eb 05                	jmp    c000f44f <Directory::read(unsigned long long, void*, int*)+0x55>
c000f44a:	b8 05 00 00 00       	mov    eax,0x5
c000f44f:	5b                   	pop    ebx
c000f450:	c3                   	ret    
c000f451:	90                   	nop

c000f452 <Directory::write(unsigned long long, void*, int*)>:
c000f452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f456:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f45d:	b8 0b 00 00 00       	mov    eax,0xb
c000f462:	80 fa 19             	cmp    dl,0x19
c000f465:	77 18                	ja     c000f47f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f467:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f46e:	85 d2                	test   edx,edx
c000f470:	74 0d                	je     c000f47f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f472:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f479:	19 c0                	sbb    eax,eax
c000f47b:	83 e0 0a             	and    eax,0xa
c000f47e:	40                   	inc    eax
c000f47f:	c3                   	ret    

c000f480 <File::isAtty()>:
c000f480:	31 c0                	xor    eax,eax
c000f482:	c3                   	ret    
c000f483:	90                   	nop

c000f484 <Directory::isAtty()>:
c000f484:	31 c0                	xor    eax,eax
c000f486:	c3                   	ret    
c000f487:	90                   	nop

c000f488 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f488:	b8 0a 00 00 00       	mov    eax,0xa
c000f48d:	c3                   	ret    

c000f48e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f48e:	b8 0a 00 00 00       	mov    eax,0xa
c000f493:	c3                   	ret    

c000f494 <File::~File()>:
c000f494:	83 ec 0c             	sub    esp,0xc
c000f497:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a0:	89 10                	mov    DWORD PTR [eax],edx
c000f4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a6:	83 ec 0c             	sub    esp,0xc
c000f4a9:	50                   	push   eax
c000f4aa:	e8 c5 ea ff ff       	call   c000df74 <UnixFile::~UnixFile()>
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	90                   	nop
c000f4b3:	83 c4 0c             	add    esp,0xc
c000f4b6:	c3                   	ret    
c000f4b7:	90                   	nop

c000f4b8 <File::~File()>:
c000f4b8:	83 ec 0c             	sub    esp,0xc
c000f4bb:	83 ec 0c             	sub    esp,0xc
c000f4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c2:	e8 cd ff ff ff       	call   c000f494 <File::~File()>
c000f4c7:	83 c4 10             	add    esp,0x10
c000f4ca:	83 ec 08             	sub    esp,0x8
c000f4cd:	68 14 01 00 00       	push   0x114
c000f4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d6:	e8 22 fc ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	83 c4 0c             	add    esp,0xc
c000f4e1:	c3                   	ret    

c000f4e2 <Directory::~Directory()>:
c000f4e2:	83 ec 0c             	sub    esp,0xc
c000f4e5:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000f4ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ee:	89 10                	mov    DWORD PTR [eax],edx
c000f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4f4:	83 ec 0c             	sub    esp,0xc
c000f4f7:	50                   	push   eax
c000f4f8:	e8 77 ea ff ff       	call   c000df74 <UnixFile::~UnixFile()>
c000f4fd:	83 c4 10             	add    esp,0x10
c000f500:	90                   	nop
c000f501:	83 c4 0c             	add    esp,0xc
c000f504:	c3                   	ret    
c000f505:	90                   	nop

c000f506 <Directory::~Directory()>:
c000f506:	83 ec 0c             	sub    esp,0xc
c000f509:	83 ec 0c             	sub    esp,0xc
c000f50c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f510:	e8 cd ff ff ff       	call   c000f4e2 <Directory::~Directory()>
c000f515:	83 c4 10             	add    esp,0x10
c000f518:	83 ec 08             	sub    esp,0x8
c000f51b:	68 14 01 00 00       	push   0x114
c000f520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f524:	e8 d4 fb ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c000f529:	83 c4 10             	add    esp,0x10
c000f52c:	83 c4 0c             	add    esp,0xc
c000f52f:	c3                   	ret    

c000f530 <Filesystem::Filesystem()>:
c000f530:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f535:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f539:	89 10                	mov    DWORD PTR [eax],edx
c000f53b:	8b 15 08 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024908
c000f541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f545:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f54c:	a3 08 49 02 c0       	mov    ds:0xc0024908,eax
c000f551:	90                   	nop
c000f552:	c3                   	ret    
c000f553:	90                   	nop

c000f554 <Filesystem::~Filesystem()>:
c000f554:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f55d:	89 10                	mov    DWORD PTR [eax],edx
c000f55f:	90                   	nop
c000f560:	c3                   	ret    
c000f561:	90                   	nop

c000f562 <Filesystem::~Filesystem()>:
c000f562:	83 ec 0c             	sub    esp,0xc
c000f565:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f569:	e8 e6 ff ff ff       	call   c000f554 <Filesystem::~Filesystem()>
c000f56e:	83 c4 04             	add    esp,0x4
c000f571:	83 ec 08             	sub    esp,0x8
c000f574:	6a 08                	push   0x8
c000f576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f57a:	e8 7e fb ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c000f57f:	83 c4 10             	add    esp,0x10
c000f582:	83 c4 0c             	add    esp,0xc
c000f585:	c3                   	ret    

c000f586 <initVFS()>:
c000f586:	83 ec 18             	sub    esp,0x18
c000f589:	6a 08                	push   0x8
c000f58b:	e8 5e fb ff ff       	call   c000f0ee <operator new(unsigned long)>
c000f590:	89 04 24             	mov    DWORD PTR [esp],eax
c000f593:	e8 da b3 00 00       	call   c001a972 <FAT::FAT()>
c000f598:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f59f:	e8 4a fb ff ff       	call   c000f0ee <operator new(unsigned long)>
c000f5a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5a7:	e8 66 c6 00 00       	call   c001bc12 <ISO9660::ISO9660()>
c000f5ac:	83 c4 1c             	add    esp,0x1c
c000f5af:	c3                   	ret    

c000f5b0 <standardiseFiles(char*, char const*, char const*)>:
c000f5b0:	55                   	push   ebp
c000f5b1:	57                   	push   edi
c000f5b2:	56                   	push   esi
c000f5b3:	53                   	push   ebx
c000f5b4:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5ba:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5c1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5c8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5cf:	68 00 04 00 00       	push   0x400
c000f5d4:	6a 00                	push   0x0
c000f5d6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5da:	56                   	push   esi
c000f5db:	e8 f2 10 ff ff       	call   c00006d2 <memset>
c000f5e0:	83 c4 10             	add    esp,0x10
c000f5e3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5e7:	75 0b                	jne    c000f5f4 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5e9:	50                   	push   eax
c000f5ea:	50                   	push   eax
c000f5eb:	57                   	push   edi
c000f5ec:	56                   	push   esi
c000f5ed:	e8 7f 11 ff ff       	call   c0000771 <strcpy>
c000f5f2:	eb 41                	jmp    c000f635 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5f4:	8a 07                	mov    al,BYTE PTR [edi]
c000f5f6:	3c 5c                	cmp    al,0x5c
c000f5f8:	74 04                	je     c000f5fe <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5fa:	3c 2f                	cmp    al,0x2f
c000f5fc:	75 18                	jne    c000f616 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5fe:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f601:	3c 60                	cmp    al,0x60
c000f603:	7e 03                	jle    c000f608 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f605:	83 e8 20             	sub    eax,0x20
c000f608:	88 04 24             	mov    BYTE PTR [esp],al
c000f60b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f612:	50                   	push   eax
c000f613:	50                   	push   eax
c000f614:	eb 18                	jmp    c000f62e <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f616:	50                   	push   eax
c000f617:	50                   	push   eax
c000f618:	55                   	push   ebp
c000f619:	56                   	push   esi
c000f61a:	e8 52 11 ff ff       	call   c0000771 <strcpy>
c000f61f:	5a                   	pop    edx
c000f620:	59                   	pop    ecx
c000f621:	68 54 2e 02 c0       	push   0xc0022e54
c000f626:	56                   	push   esi
c000f627:	e8 fc 11 ff ff       	call   c0000828 <strcat>
c000f62c:	5d                   	pop    ebp
c000f62d:	58                   	pop    eax
c000f62e:	57                   	push   edi
c000f62f:	56                   	push   esi
c000f630:	e8 f3 11 ff ff       	call   c0000828 <strcat>
c000f635:	83 c4 10             	add    esp,0x10
c000f638:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f63b:	3c 60                	cmp    al,0x60
c000f63d:	7e 03                	jle    c000f642 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f63f:	83 e8 20             	sub    eax,0x20
c000f642:	88 04 24             	mov    BYTE PTR [esp],al
c000f645:	88 03                	mov    BYTE PTR [ebx],al
c000f647:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f64e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f654:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f658:	bf 03 00 00 00       	mov    edi,0x3
c000f65d:	b8 03 00 00 00       	mov    eax,0x3
c000f662:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f665:	84 d2                	test   dl,dl
c000f667:	0f 84 91 00 00 00    	je     c000f6fe <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f66d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f670:	80 fa 2f             	cmp    dl,0x2f
c000f673:	74 05                	je     c000f67a <standardiseFiles(char*, char const*, char const*)+0xca>
c000f675:	80 fa 5c             	cmp    dl,0x5c
c000f678:	75 12                	jne    c000f68c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f67a:	89 c5                	mov    ebp,eax
c000f67c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f681:	74 09                	je     c000f68c <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f683:	40                   	inc    eax
c000f684:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f688:	89 cf                	mov    edi,ecx
c000f68a:	eb d6                	jmp    c000f662 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f68c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f691:	75 5b                	jne    c000f6ee <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f693:	80 fa 2e             	cmp    dl,0x2e
c000f696:	75 56                	jne    c000f6ee <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f698:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f69c:	74 19                	je     c000f6b7 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f69e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6a3:	74 53                	je     c000f6f8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6a5:	89 f9                	mov    ecx,edi
c000f6a7:	41                   	inc    ecx
c000f6a8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6ab:	80 fa 5c             	cmp    dl,0x5c
c000f6ae:	74 f7                	je     c000f6a7 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6b0:	80 fa 2f             	cmp    dl,0x2f
c000f6b3:	74 f2                	je     c000f6a7 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6b5:	eb d1                	jmp    c000f688 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6b7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6bc:	74 3a                	je     c000f6f8 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6be:	83 f8 03             	cmp    eax,0x3
c000f6c1:	74 c5                	je     c000f688 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6c3:	41                   	inc    ecx
c000f6c4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6c7:	80 fa 2f             	cmp    dl,0x2f
c000f6ca:	74 f7                	je     c000f6c3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6cc:	80 fa 5c             	cmp    dl,0x5c
c000f6cf:	74 f2                	je     c000f6c3 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6d1:	48                   	dec    eax
c000f6d2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6d6:	75 06                	jne    c000f6de <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6d8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6dc:	eb f3                	jmp    c000f6d1 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6e2:	74 07                	je     c000f6eb <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6e8:	48                   	dec    eax
c000f6e9:	eb f3                	jmp    c000f6de <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6eb:	40                   	inc    eax
c000f6ec:	eb 9a                	jmp    c000f688 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6ee:	80 fa 2f             	cmp    dl,0x2f
c000f6f1:	74 95                	je     c000f688 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6f3:	80 fa 5c             	cmp    dl,0x5c
c000f6f6:	74 90                	je     c000f688 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6f8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6fb:	40                   	inc    eax
c000f6fc:	eb 8a                	jmp    c000f688 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6fe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f702:	83 ec 0c             	sub    esp,0xc
c000f705:	53                   	push   ebx
c000f706:	e8 e4 0f ff ff       	call   c00006ef <strlen>
c000f70b:	83 c4 10             	add    esp,0x10
c000f70e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f713:	75 26                	jne    c000f73b <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f715:	83 ec 0c             	sub    esp,0xc
c000f718:	53                   	push   ebx
c000f719:	e8 d1 0f ff ff       	call   c00006ef <strlen>
c000f71e:	83 c4 10             	add    esp,0x10
c000f721:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f726:	74 26                	je     c000f74e <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	53                   	push   ebx
c000f72c:	e8 be 0f ff ff       	call   c00006ef <strlen>
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f739:	eb c7                	jmp    c000f702 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f73b:	83 ec 0c             	sub    esp,0xc
c000f73e:	53                   	push   ebx
c000f73f:	e8 ab 0f ff ff       	call   c00006ef <strlen>
c000f744:	83 c4 10             	add    esp,0x10
c000f747:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f74c:	74 c7                	je     c000f715 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f74e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f754:	5b                   	pop    ebx
c000f755:	5e                   	pop    esi
c000f756:	5f                   	pop    edi
c000f757:	5d                   	pop    ebp
c000f758:	c3                   	ret    
c000f759:	90                   	nop

c000f75a <File::File(char const*, Process*)>:
c000f75a:	83 ec 0c             	sub    esp,0xc
c000f75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f761:	83 ec 08             	sub    esp,0x8
c000f764:	6a 00                	push   0x0
c000f766:	50                   	push   eax
c000f767:	e8 66 e6 ff ff       	call   c000ddd2 <UnixFile::UnixFile(int)>
c000f76c:	83 c4 10             	add    esp,0x10
c000f76f:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f778:	89 10                	mov    DWORD PTR [eax],edx
c000f77a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f77e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f788:	83 c0 0d             	add    eax,0xd
c000f78b:	83 ec 04             	sub    esp,0x4
c000f78e:	52                   	push   edx
c000f78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f793:	50                   	push   eax
c000f794:	e8 17 fe ff ff       	call   c000f5b0 <standardiseFiles(char*, char const*, char const*)>
c000f799:	83 c4 10             	add    esp,0x10
c000f79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f7a3:	8d 50 bf             	lea    edx,[eax-0x41]
c000f7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7aa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7b8:	90                   	nop
c000f7b9:	83 c4 0c             	add    esp,0xc
c000f7bc:	c3                   	ret    
c000f7bd:	90                   	nop

c000f7be <File::open(FileOpenMode)>:
c000f7be:	53                   	push   ebx
c000f7bf:	b8 0b 00 00 00       	mov    eax,0xb
c000f7c4:	83 ec 08             	sub    esp,0x8
c000f7c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7cb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7d2:	80 fa 19             	cmp    dl,0x19
c000f7d5:	77 40                	ja     c000f817 <File::open(FileOpenMode)+0x59>
c000f7d7:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f7de:	85 d2                	test   edx,edx
c000f7e0:	74 35                	je     c000f817 <File::open(FileOpenMode)+0x59>
c000f7e2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7e8:	85 d2                	test   edx,edx
c000f7ea:	74 2b                	je     c000f817 <File::open(FileOpenMode)+0x59>
c000f7ec:	b8 06 00 00 00       	mov    eax,0x6
c000f7f1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7f5:	75 20                	jne    c000f817 <File::open(FileOpenMode)+0x59>
c000f7f7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7f9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f803:	51                   	push   ecx
c000f804:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f807:	51                   	push   ecx
c000f808:	52                   	push   edx
c000f809:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f80c:	83 c4 10             	add    esp,0x10
c000f80f:	85 c0                	test   eax,eax
c000f811:	75 04                	jne    c000f817 <File::open(FileOpenMode)+0x59>
c000f813:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f817:	83 c4 08             	add    esp,0x8
c000f81a:	5b                   	pop    ebx
c000f81b:	c3                   	ret    

c000f81c <File::close()>:
c000f81c:	53                   	push   ebx
c000f81d:	b8 0b 00 00 00       	mov    eax,0xb
c000f822:	83 ec 08             	sub    esp,0x8
c000f825:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f829:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f830:	80 fa 19             	cmp    dl,0x19
c000f833:	77 41                	ja     c000f876 <File::close()+0x5a>
c000f835:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000f83c:	85 db                	test   ebx,ebx
c000f83e:	74 36                	je     c000f876 <File::close()+0x5a>
c000f840:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f847:	74 2d                	je     c000f876 <File::close()+0x5a>
c000f849:	b8 05 00 00 00       	mov    eax,0x5
c000f84e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f852:	74 22                	je     c000f876 <File::close()+0x5a>
c000f854:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f858:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000f85f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f865:	53                   	push   ebx
c000f866:	53                   	push   ebx
c000f867:	8b 10                	mov    edx,DWORD PTR [eax]
c000f869:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f86f:	50                   	push   eax
c000f870:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f873:	83 c4 10             	add    esp,0x10
c000f876:	83 c4 08             	add    esp,0x8
c000f879:	5b                   	pop    ebx
c000f87a:	c3                   	ret    
c000f87b:	90                   	nop

c000f87c <File::seek(unsigned long long)>:
c000f87c:	56                   	push   esi
c000f87d:	b8 0b 00 00 00       	mov    eax,0xb
c000f882:	53                   	push   ebx
c000f883:	51                   	push   ecx
c000f884:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f888:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f88c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f890:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f897:	80 fa 19             	cmp    dl,0x19
c000f89a:	77 31                	ja     c000f8cd <File::seek(unsigned long long)+0x51>
c000f89c:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8a3:	85 d2                	test   edx,edx
c000f8a5:	74 26                	je     c000f8cd <File::seek(unsigned long long)+0x51>
c000f8a7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	74 1c                	je     c000f8cd <File::seek(unsigned long long)+0x51>
c000f8b1:	b8 05 00 00 00       	mov    eax,0x5
c000f8b6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8ba:	74 11                	je     c000f8cd <File::seek(unsigned long long)+0x51>
c000f8bc:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8be:	53                   	push   ebx
c000f8bf:	51                   	push   ecx
c000f8c0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8c6:	52                   	push   edx
c000f8c7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8ca:	83 c4 10             	add    esp,0x10
c000f8cd:	5a                   	pop    edx
c000f8ce:	5b                   	pop    ebx
c000f8cf:	5e                   	pop    esi
c000f8d0:	c3                   	ret    
c000f8d1:	90                   	nop

c000f8d2 <File::tell(unsigned long long*)>:
c000f8d2:	83 ec 0c             	sub    esp,0xc
c000f8d5:	b8 0b 00 00 00       	mov    eax,0xb
c000f8da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8de:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8e5:	80 fa 19             	cmp    dl,0x19
c000f8e8:	77 34                	ja     c000f91e <File::tell(unsigned long long*)+0x4c>
c000f8ea:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8f1:	85 d2                	test   edx,edx
c000f8f3:	74 29                	je     c000f91e <File::tell(unsigned long long*)+0x4c>
c000f8f5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8fb:	85 d2                	test   edx,edx
c000f8fd:	74 1f                	je     c000f91e <File::tell(unsigned long long*)+0x4c>
c000f8ff:	b8 05 00 00 00       	mov    eax,0x5
c000f904:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f908:	74 14                	je     c000f91e <File::tell(unsigned long long*)+0x4c>
c000f90a:	50                   	push   eax
c000f90b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f90d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f911:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f917:	52                   	push   edx
c000f918:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f91b:	83 c4 10             	add    esp,0x10
c000f91e:	83 c4 0c             	add    esp,0xc
c000f921:	c3                   	ret    

c000f922 <File::rewind()>:
c000f922:	83 ec 10             	sub    esp,0x10
c000f925:	6a 00                	push   0x0
c000f927:	6a 00                	push   0x0
c000f929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f92d:	e8 4a ff ff ff       	call   c000f87c <File::seek(unsigned long long)>
c000f932:	83 c4 1c             	add    esp,0x1c
c000f935:	c3                   	ret    

c000f936 <File::unlink()>:
c000f936:	83 ec 0c             	sub    esp,0xc
c000f939:	b8 0b 00 00 00       	mov    eax,0xb
c000f93e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f942:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f949:	80 f9 19             	cmp    cl,0x19
c000f94c:	77 2f                	ja     c000f97d <File::unlink()+0x47>
c000f94e:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f955:	85 c9                	test   ecx,ecx
c000f957:	74 24                	je     c000f97d <File::unlink()+0x47>
c000f959:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f95f:	85 c9                	test   ecx,ecx
c000f961:	74 1a                	je     c000f97d <File::unlink()+0x47>
c000f963:	b8 06 00 00 00       	mov    eax,0x6
c000f968:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f96c:	75 0f                	jne    c000f97d <File::unlink()+0x47>
c000f96e:	50                   	push   eax
c000f96f:	83 c2 0d             	add    edx,0xd
c000f972:	50                   	push   eax
c000f973:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f975:	52                   	push   edx
c000f976:	51                   	push   ecx
c000f977:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f97a:	83 c4 10             	add    esp,0x10
c000f97d:	83 c4 0c             	add    esp,0xc
c000f980:	c3                   	ret    
c000f981:	90                   	nop

c000f982 <File::rename(char const*)>:
c000f982:	83 ec 0c             	sub    esp,0xc
c000f985:	b8 0b 00 00 00       	mov    eax,0xb
c000f98a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f98e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f995:	80 f9 19             	cmp    cl,0x19
c000f998:	77 32                	ja     c000f9cc <File::rename(char const*)+0x4a>
c000f99a:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9a1:	85 c9                	test   ecx,ecx
c000f9a3:	74 27                	je     c000f9cc <File::rename(char const*)+0x4a>
c000f9a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9ab:	85 c9                	test   ecx,ecx
c000f9ad:	74 1d                	je     c000f9cc <File::rename(char const*)+0x4a>
c000f9af:	b8 06 00 00 00       	mov    eax,0x6
c000f9b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9b8:	75 12                	jne    c000f9cc <File::rename(char const*)+0x4a>
c000f9ba:	50                   	push   eax
c000f9bb:	83 c2 0d             	add    edx,0xd
c000f9be:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9c4:	52                   	push   edx
c000f9c5:	51                   	push   ecx
c000f9c6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9c9:	83 c4 10             	add    esp,0x10
c000f9cc:	83 c4 0c             	add    esp,0xc
c000f9cf:	c3                   	ret    

c000f9d0 <File::chfatattr(unsigned char, unsigned char)>:
c000f9d0:	57                   	push   edi
c000f9d1:	b8 0b 00 00 00       	mov    eax,0xb
c000f9d6:	56                   	push   esi
c000f9d7:	53                   	push   ebx
c000f9d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9e0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9eb:	80 f9 19             	cmp    cl,0x19
c000f9ee:	77 37                	ja     c000fa27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f0:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9f7:	85 c9                	test   ecx,ecx
c000f9f9:	74 2c                	je     c000fa27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9fb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa01:	85 c9                	test   ecx,ecx
c000fa03:	74 22                	je     c000fa27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa05:	b8 06 00 00 00       	mov    eax,0x6
c000fa0a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa0e:	75 17                	jne    c000fa27 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000fa10:	89 f0                	mov    eax,esi
c000fa12:	8b 39                	mov    edi,DWORD PTR [ecx]
c000fa14:	0f b6 f0             	movzx  esi,al
c000fa17:	56                   	push   esi
c000fa18:	83 c2 0d             	add    edx,0xd
c000fa1b:	0f b6 db             	movzx  ebx,bl
c000fa1e:	53                   	push   ebx
c000fa1f:	52                   	push   edx
c000fa20:	51                   	push   ecx
c000fa21:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa24:	83 c4 10             	add    esp,0x10
c000fa27:	5b                   	pop    ebx
c000fa28:	5e                   	pop    esi
c000fa29:	5f                   	pop    edi
c000fa2a:	c3                   	ret    
c000fa2b:	90                   	nop

c000fa2c <File::exists()>:
c000fa2c:	83 ec 0c             	sub    esp,0xc
c000fa2f:	31 c0                	xor    eax,eax
c000fa31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa35:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa3c:	80 f9 19             	cmp    cl,0x19
c000fa3f:	77 24                	ja     c000fa65 <File::exists()+0x39>
c000fa41:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa48:	85 c9                	test   ecx,ecx
c000fa4a:	74 19                	je     c000fa65 <File::exists()+0x39>
c000fa4c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa52:	85 c9                	test   ecx,ecx
c000fa54:	74 0f                	je     c000fa65 <File::exists()+0x39>
c000fa56:	50                   	push   eax
c000fa57:	83 c2 0d             	add    edx,0xd
c000fa5a:	50                   	push   eax
c000fa5b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa5d:	52                   	push   edx
c000fa5e:	51                   	push   ecx
c000fa5f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa62:	83 c4 10             	add    esp,0x10
c000fa65:	83 c4 0c             	add    esp,0xc
c000fa68:	c3                   	ret    
c000fa69:	90                   	nop

c000fa6a <File::stat(unsigned long long*, bool*)>:
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	50                   	push   eax
c000fa6d:	b8 0b 00 00 00       	mov    eax,0xb
c000fa72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa76:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa85:	80 f9 19             	cmp    cl,0x19
c000fa88:	77 3d                	ja     c000fac7 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa8a:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa91:	85 c9                	test   ecx,ecx
c000fa93:	74 32                	je     c000fac7 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa9b:	85 c9                	test   ecx,ecx
c000fa9d:	74 28                	je     c000fac7 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000faa1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000faa5:	74 13                	je     c000faba <File::stat(unsigned long long*, bool*)+0x50>
c000faa7:	83 ec 04             	sub    esp,0x4
c000faaa:	56                   	push   esi
c000faab:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000fab1:	51                   	push   ecx
c000fab2:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000fab5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000fab8:	eb 0a                	jmp    c000fac4 <File::stat(unsigned long long*, bool*)+0x5a>
c000faba:	53                   	push   ebx
c000fabb:	83 c2 0d             	add    edx,0xd
c000fabe:	56                   	push   esi
c000fabf:	52                   	push   edx
c000fac0:	51                   	push   ecx
c000fac1:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000fac4:	83 c4 10             	add    esp,0x10
c000fac7:	5a                   	pop    edx
c000fac8:	5b                   	pop    ebx
c000fac9:	5e                   	pop    esi
c000faca:	c3                   	ret    

c000facb <getcwd(Process*, char*, int)>:
c000facb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000facf:	31 c0                	xor    eax,eax
c000fad1:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fad4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fad8:	7d 15                	jge    c000faef <getcwd(Process*, char*, int)+0x24>
c000fada:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fade:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fae5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fae8:	84 c9                	test   cl,cl
c000faea:	74 06                	je     c000faf2 <getcwd(Process*, char*, int)+0x27>
c000faec:	40                   	inc    eax
c000faed:	eb e2                	jmp    c000fad1 <getcwd(Process*, char*, int)+0x6>
c000faef:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000faf2:	31 c0                	xor    eax,eax
c000faf4:	c3                   	ret    

c000faf5 <setcwd(Process*, char*)>:
c000faf5:	55                   	push   ebp
c000faf6:	57                   	push   edi
c000faf7:	56                   	push   esi
c000faf8:	53                   	push   ebx
c000faf9:	81 ec 20 02 00 00    	sub    esp,0x220
c000faff:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fb06:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fb0c:	57                   	push   edi
c000fb0d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fb14:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb18:	56                   	push   esi
c000fb19:	e8 92 fa ff ff       	call   c000f5b0 <standardiseFiles(char*, char const*, char const*)>
c000fb1e:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb21:	e8 c9 0b ff ff       	call   c00006ef <strlen>
c000fb26:	83 c4 10             	add    esp,0x10
c000fb29:	83 f8 02             	cmp    eax,0x2
c000fb2c:	77 17                	ja     c000fb45 <setcwd(Process*, char*)+0x50>
c000fb2e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb33:	83 e8 41             	sub    eax,0x41
c000fb36:	83 f8 19             	cmp    eax,0x19
c000fb39:	76 24                	jbe    c000fb5f <setcwd(Process*, char*)+0x6a>
c000fb3b:	b8 03 00 00 00       	mov    eax,0x3
c000fb40:	e9 cb 00 00 00       	jmp    c000fc10 <setcwd(Process*, char*)+0x11b>
c000fb45:	83 ec 0c             	sub    esp,0xc
c000fb48:	56                   	push   esi
c000fb49:	e8 a1 0b ff ff       	call   c00006ef <strlen>
c000fb4e:	83 c4 10             	add    esp,0x10
c000fb51:	83 f8 03             	cmp    eax,0x3
c000fb54:	75 33                	jne    c000fb89 <setcwd(Process*, char*)+0x94>
c000fb56:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb5b:	75 2c                	jne    c000fb89 <setcwd(Process*, char*)+0x94>
c000fb5d:	eb cf                	jmp    c000fb2e <setcwd(Process*, char*)+0x39>
c000fb5f:	8b 14 85 a0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb260]
c000fb66:	b8 05 00 00 00       	mov    eax,0x5
c000fb6b:	85 d2                	test   edx,edx
c000fb6d:	0f 84 9d 00 00 00    	je     c000fc10 <setcwd(Process*, char*)+0x11b>
c000fb73:	b8 06 00 00 00       	mov    eax,0x6
c000fb78:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb7f:	0f 84 8b 00 00 00    	je     c000fc10 <setcwd(Process*, char*)+0x11b>
c000fb85:	51                   	push   ecx
c000fb86:	51                   	push   ecx
c000fb87:	eb 7b                	jmp    c000fc04 <setcwd(Process*, char*)+0x10f>
c000fb89:	83 ec 0c             	sub    esp,0xc
c000fb8c:	68 14 01 00 00       	push   0x114
c000fb91:	e8 58 f5 ff ff       	call   c000f0ee <operator new(unsigned long)>
c000fb96:	83 c4 0c             	add    esp,0xc
c000fb99:	89 c3                	mov    ebx,eax
c000fb9b:	55                   	push   ebp
c000fb9c:	56                   	push   esi
c000fb9d:	50                   	push   eax
c000fb9e:	e8 b7 fb ff ff       	call   c000f75a <File::File(char const*, Process*)>
c000fba3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fba8:	83 c4 0c             	add    esp,0xc
c000fbab:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fbaf:	50                   	push   eax
c000fbb0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fbb4:	50                   	push   eax
c000fbb5:	53                   	push   ebx
c000fbb6:	e8 af fe ff ff       	call   c000fa6a <File::stat(unsigned long long*, bool*)>
c000fbbb:	83 c4 10             	add    esp,0x10
c000fbbe:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fbc0:	83 f8 02             	cmp    eax,0x2
c000fbc3:	75 09                	jne    c000fbce <setcwd(Process*, char*)+0xd9>
c000fbc5:	83 ec 0c             	sub    esp,0xc
c000fbc8:	53                   	push   ebx
c000fbc9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbcc:	eb 0d                	jmp    c000fbdb <setcwd(Process*, char*)+0xe6>
c000fbce:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbd1:	85 c0                	test   eax,eax
c000fbd3:	74 10                	je     c000fbe5 <setcwd(Process*, char*)+0xf0>
c000fbd5:	83 ec 0c             	sub    esp,0xc
c000fbd8:	53                   	push   ebx
c000fbd9:	ff d2                	call   edx
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	b8 01 00 00 00       	mov    eax,0x1
c000fbe3:	eb 2b                	jmp    c000fc10 <setcwd(Process*, char*)+0x11b>
c000fbe5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbea:	75 10                	jne    c000fbfc <setcwd(Process*, char*)+0x107>
c000fbec:	83 ec 0c             	sub    esp,0xc
c000fbef:	53                   	push   ebx
c000fbf0:	ff d2                	call   edx
c000fbf2:	83 c4 10             	add    esp,0x10
c000fbf5:	b8 02 00 00 00       	mov    eax,0x2
c000fbfa:	eb 14                	jmp    c000fc10 <setcwd(Process*, char*)+0x11b>
c000fbfc:	83 ec 0c             	sub    esp,0xc
c000fbff:	53                   	push   ebx
c000fc00:	ff d2                	call   edx
c000fc02:	58                   	pop    eax
c000fc03:	5a                   	pop    edx
c000fc04:	56                   	push   esi
c000fc05:	57                   	push   edi
c000fc06:	e8 66 0b ff ff       	call   c0000771 <strcpy>
c000fc0b:	83 c4 10             	add    esp,0x10
c000fc0e:	31 c0                	xor    eax,eax
c000fc10:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fc16:	5b                   	pop    ebx
c000fc17:	5e                   	pop    esi
c000fc18:	5f                   	pop    edi
c000fc19:	5d                   	pop    ebp
c000fc1a:	c3                   	ret    
c000fc1b:	90                   	nop

c000fc1c <Directory::Directory(char const*, Process*)>:
c000fc1c:	83 ec 0c             	sub    esp,0xc
c000fc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc23:	83 ec 08             	sub    esp,0x8
c000fc26:	6a 00                	push   0x0
c000fc28:	50                   	push   eax
c000fc29:	e8 a4 e1 ff ff       	call   c000ddd2 <UnixFile::UnixFile(int)>
c000fc2e:	83 c4 10             	add    esp,0x10
c000fc31:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000fc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc3a:	89 10                	mov    DWORD PTR [eax],edx
c000fc3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc40:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4a:	83 c0 0d             	add    eax,0xd
c000fc4d:	83 ec 04             	sub    esp,0x4
c000fc50:	52                   	push   edx
c000fc51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc55:	50                   	push   eax
c000fc56:	e8 55 f9 ff ff       	call   c000f5b0 <standardiseFiles(char*, char const*, char const*)>
c000fc5b:	83 c4 10             	add    esp,0x10
c000fc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc62:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc65:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc76:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc7a:	90                   	nop
c000fc7b:	83 c4 0c             	add    esp,0xc
c000fc7e:	c3                   	ret    
c000fc7f:	90                   	nop

c000fc80 <Directory::open()>:
c000fc80:	53                   	push   ebx
c000fc81:	b8 0b 00 00 00       	mov    eax,0xb
c000fc86:	83 ec 08             	sub    esp,0x8
c000fc89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc8d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc94:	80 fa 19             	cmp    dl,0x19
c000fc97:	77 3d                	ja     c000fcd6 <Directory::open()+0x56>
c000fc99:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fca0:	85 d2                	test   edx,edx
c000fca2:	74 32                	je     c000fcd6 <Directory::open()+0x56>
c000fca4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fcaa:	85 d2                	test   edx,edx
c000fcac:	74 28                	je     c000fcd6 <Directory::open()+0x56>
c000fcae:	b8 06 00 00 00       	mov    eax,0x6
c000fcb3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fcb7:	75 1d                	jne    c000fcd6 <Directory::open()+0x56>
c000fcb9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fcbf:	50                   	push   eax
c000fcc0:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcc2:	51                   	push   ecx
c000fcc3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fcc6:	51                   	push   ecx
c000fcc7:	52                   	push   edx
c000fcc8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	85 c0                	test   eax,eax
c000fcd0:	75 04                	jne    c000fcd6 <Directory::open()+0x56>
c000fcd2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcd6:	83 c4 08             	add    esp,0x8
c000fcd9:	5b                   	pop    ebx
c000fcda:	c3                   	ret    
c000fcdb:	90                   	nop

c000fcdc <Directory::close()>:
c000fcdc:	53                   	push   ebx
c000fcdd:	b8 0b 00 00 00       	mov    eax,0xb
c000fce2:	83 ec 08             	sub    esp,0x8
c000fce5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fce9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcf0:	80 fa 19             	cmp    dl,0x19
c000fcf3:	77 41                	ja     c000fd36 <Directory::close()+0x5a>
c000fcf5:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000fcfc:	85 db                	test   ebx,ebx
c000fcfe:	74 36                	je     c000fd36 <Directory::close()+0x5a>
c000fd00:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fd07:	74 2d                	je     c000fd36 <Directory::close()+0x5a>
c000fd09:	b8 05 00 00 00       	mov    eax,0x5
c000fd0e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fd12:	74 22                	je     c000fd36 <Directory::close()+0x5a>
c000fd14:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd18:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000fd1f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd25:	53                   	push   ebx
c000fd26:	53                   	push   ebx
c000fd27:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd29:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd2f:	50                   	push   eax
c000fd30:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd33:	83 c4 10             	add    esp,0x10
c000fd36:	83 c4 08             	add    esp,0x8
c000fd39:	5b                   	pop    ebx
c000fd3a:	c3                   	ret    
c000fd3b:	90                   	nop

c000fd3c <Directory::unlink()>:
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	b8 0b 00 00 00       	mov    eax,0xb
c000fd44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd4f:	80 f9 19             	cmp    cl,0x19
c000fd52:	77 2f                	ja     c000fd83 <Directory::unlink()+0x47>
c000fd54:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd5b:	85 c9                	test   ecx,ecx
c000fd5d:	74 24                	je     c000fd83 <Directory::unlink()+0x47>
c000fd5f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd65:	85 c9                	test   ecx,ecx
c000fd67:	74 1a                	je     c000fd83 <Directory::unlink()+0x47>
c000fd69:	b8 06 00 00 00       	mov    eax,0x6
c000fd6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd72:	75 0f                	jne    c000fd83 <Directory::unlink()+0x47>
c000fd74:	50                   	push   eax
c000fd75:	83 c2 0d             	add    edx,0xd
c000fd78:	50                   	push   eax
c000fd79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd7b:	52                   	push   edx
c000fd7c:	51                   	push   ecx
c000fd7d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd80:	83 c4 10             	add    esp,0x10
c000fd83:	83 c4 0c             	add    esp,0xc
c000fd86:	c3                   	ret    
c000fd87:	90                   	nop

c000fd88 <Directory::rename(char const*)>:
c000fd88:	83 ec 0c             	sub    esp,0xc
c000fd8b:	b8 0b 00 00 00       	mov    eax,0xb
c000fd90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd94:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd9b:	80 f9 19             	cmp    cl,0x19
c000fd9e:	77 32                	ja     c000fdd2 <Directory::rename(char const*)+0x4a>
c000fda0:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fda7:	85 c9                	test   ecx,ecx
c000fda9:	74 27                	je     c000fdd2 <Directory::rename(char const*)+0x4a>
c000fdab:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdb1:	85 c9                	test   ecx,ecx
c000fdb3:	74 1d                	je     c000fdd2 <Directory::rename(char const*)+0x4a>
c000fdb5:	b8 06 00 00 00       	mov    eax,0x6
c000fdba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdbe:	75 12                	jne    c000fdd2 <Directory::rename(char const*)+0x4a>
c000fdc0:	50                   	push   eax
c000fdc1:	83 c2 0d             	add    edx,0xd
c000fdc4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdca:	52                   	push   edx
c000fdcb:	51                   	push   ecx
c000fdcc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdcf:	83 c4 10             	add    esp,0x10
c000fdd2:	83 c4 0c             	add    esp,0xc
c000fdd5:	c3                   	ret    

c000fdd6 <Directory::exists()>:
c000fdd6:	83 ec 0c             	sub    esp,0xc
c000fdd9:	31 c0                	xor    eax,eax
c000fddb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fddf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fde6:	80 f9 19             	cmp    cl,0x19
c000fde9:	77 24                	ja     c000fe0f <Directory::exists()+0x39>
c000fdeb:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fdf2:	85 c9                	test   ecx,ecx
c000fdf4:	74 19                	je     c000fe0f <Directory::exists()+0x39>
c000fdf6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdfc:	85 c9                	test   ecx,ecx
c000fdfe:	74 0f                	je     c000fe0f <Directory::exists()+0x39>
c000fe00:	50                   	push   eax
c000fe01:	83 c2 0d             	add    edx,0xd
c000fe04:	50                   	push   eax
c000fe05:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe07:	52                   	push   edx
c000fe08:	51                   	push   ecx
c000fe09:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fe0c:	83 c4 10             	add    esp,0x10
c000fe0f:	83 c4 0c             	add    esp,0xc
c000fe12:	c3                   	ret    
c000fe13:	90                   	nop

c000fe14 <Directory::read(dirent*)>:
c000fe14:	83 ec 1c             	sub    esp,0x1c
c000fe17:	b8 0b 00 00 00       	mov    eax,0xb
c000fe1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe20:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe27:	80 fa 19             	cmp    dl,0x19
c000fe2a:	77 30                	ja     c000fe5c <Directory::read(dirent*)+0x48>
c000fe2c:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fe33:	85 d2                	test   edx,edx
c000fe35:	74 25                	je     c000fe5c <Directory::read(dirent*)+0x48>
c000fe37:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe3e:	74 1c                	je     c000fe5c <Directory::read(dirent*)+0x48>
c000fe40:	83 ec 0c             	sub    esp,0xc
c000fe43:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe45:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe49:	52                   	push   edx
c000fe4a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe4e:	6a 00                	push   0x0
c000fe50:	68 10 01 00 00       	push   0x110
c000fe55:	51                   	push   ecx
c000fe56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe59:	83 c4 20             	add    esp,0x20
c000fe5c:	83 c4 1c             	add    esp,0x1c
c000fe5f:	c3                   	ret    

c000fe60 <Directory::create()>:
c000fe60:	83 ec 0c             	sub    esp,0xc
c000fe63:	b8 0b 00 00 00       	mov    eax,0xb
c000fe68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe73:	80 f9 19             	cmp    cl,0x19
c000fe76:	77 2f                	ja     c000fea7 <Directory::create()+0x47>
c000fe78:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fe7f:	85 c9                	test   ecx,ecx
c000fe81:	74 24                	je     c000fea7 <Directory::create()+0x47>
c000fe83:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe89:	85 c9                	test   ecx,ecx
c000fe8b:	74 1a                	je     c000fea7 <Directory::create()+0x47>
c000fe8d:	b8 06 00 00 00       	mov    eax,0x6
c000fe92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe96:	75 0f                	jne    c000fea7 <Directory::create()+0x47>
c000fe98:	50                   	push   eax
c000fe99:	83 c2 0d             	add    edx,0xd
c000fe9c:	50                   	push   eax
c000fe9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe9f:	52                   	push   edx
c000fea0:	51                   	push   ecx
c000fea1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 0c             	add    esp,0xc
c000feaa:	c3                   	ret    
c000feab:	90                   	nop

c000feac <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000feac:	b8 0a 00 00 00       	mov    eax,0xa
c000feb1:	c3                   	ret    

c000feb2 <Bus::Bus(char const*)>:
c000feb2:	83 ec 0c             	sub    esp,0xc
c000feb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb9:	83 ec 08             	sub    esp,0x8
c000febc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fec0:	50                   	push   eax
c000fec1:	e8 62 09 00 00       	call   c0010828 <Device::Device(char const*)>
c000fec6:	83 c4 10             	add    esp,0x10
c000fec9:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed2:	89 10                	mov    DWORD PTR [eax],edx
c000fed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fee2:	90                   	nop
c000fee3:	83 c4 0c             	add    esp,0xc
c000fee6:	c3                   	ret    
c000fee7:	90                   	nop

c000fee8 <Bus::~Bus()>:
c000fee8:	83 ec 0c             	sub    esp,0xc
c000feeb:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef4:	89 10                	mov    DWORD PTR [eax],edx
c000fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fefa:	83 ec 0c             	sub    esp,0xc
c000fefd:	50                   	push   eax
c000fefe:	e8 db 05 00 00       	call   c00104de <Device::~Device()>
c000ff03:	83 c4 10             	add    esp,0x10
c000ff06:	90                   	nop
c000ff07:	83 c4 0c             	add    esp,0xc
c000ff0a:	c3                   	ret    
c000ff0b:	90                   	nop

c000ff0c <Bus::~Bus()>:
c000ff0c:	83 ec 0c             	sub    esp,0xc
c000ff0f:	83 ec 0c             	sub    esp,0xc
c000ff12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff16:	e8 cd ff ff ff       	call   c000fee8 <Bus::~Bus()>
c000ff1b:	83 c4 10             	add    esp,0x10
c000ff1e:	83 ec 08             	sub    esp,0x8
c000ff21:	68 58 01 00 00       	push   0x158
c000ff26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff2a:	e8 ce f1 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c000ff2f:	83 c4 10             	add    esp,0x10
c000ff32:	83 c4 0c             	add    esp,0xc
c000ff35:	c3                   	ret    

c000ff36 <Buzzer::Buzzer(char const*)>:
c000ff36:	83 ec 0c             	sub    esp,0xc
c000ff39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff3d:	83 ec 08             	sub    esp,0x8
c000ff40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff44:	50                   	push   eax
c000ff45:	e8 de 08 00 00       	call   c0010828 <Device::Device(char const*)>
c000ff4a:	83 c4 10             	add    esp,0x10
c000ff4d:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff56:	89 10                	mov    DWORD PTR [eax],edx
c000ff58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff5c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff6a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff74:	90                   	nop
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <Buzzer::~Buzzer()>:
c000ff7a:	83 ec 0c             	sub    esp,0xc
c000ff7d:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff86:	89 10                	mov    DWORD PTR [eax],edx
c000ff88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	50                   	push   eax
c000ff90:	e8 49 05 00 00       	call   c00104de <Device::~Device()>
c000ff95:	83 c4 10             	add    esp,0x10
c000ff98:	90                   	nop
c000ff99:	83 c4 0c             	add    esp,0xc
c000ff9c:	c3                   	ret    
c000ff9d:	90                   	nop

c000ff9e <Buzzer::~Buzzer()>:
c000ff9e:	83 ec 0c             	sub    esp,0xc
c000ffa1:	83 ec 0c             	sub    esp,0xc
c000ffa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa8:	e8 cd ff ff ff       	call   c000ff7a <Buzzer::~Buzzer()>
c000ffad:	83 c4 10             	add    esp,0x10
c000ffb0:	83 ec 08             	sub    esp,0x8
c000ffb3:	68 5c 01 00 00       	push   0x15c
c000ffb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffbc:	e8 3c f1 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c000ffc1:	83 c4 10             	add    esp,0x10
c000ffc4:	83 c4 0c             	add    esp,0xc
c000ffc7:	c3                   	ret    

c000ffc8 <Buzzer::stop()>:
c000ffc8:	83 ec 14             	sub    esp,0x14
c000ffcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffcf:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffd1:	6a 00                	push   0x0
c000ffd3:	50                   	push   eax
c000ffd4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffd7:	83 c4 1c             	add    esp,0x1c
c000ffda:	c3                   	ret    

c000ffdb <beepThread(void*)>:
c000ffdb:	53                   	push   ebx
c000ffdc:	83 ec 08             	sub    esp,0x8
c000ffdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffe3:	e8 75 8a 00 00       	call   c0018a5d <unlockScheduler()>
c000ffe8:	52                   	push   edx
c000ffe9:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffee:	52                   	push   edx
c000ffef:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fff5:	52                   	push   edx
c000fff6:	50                   	push   eax
c000fff7:	e8 bd 8f 00 00       	call   c0018fb9 <nanoSleep(unsigned long long)>
c000fffc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffff:	e8 c4 ff ff ff       	call   c000ffc8 <Buzzer::stop()>
c0010004:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001000c:	83 c4 18             	add    esp,0x18
c001000f:	5b                   	pop    ebx
c0010010:	e9 e8 8e 00 00       	jmp    c0018efd <blockTask(TaskState)>
c0010015:	90                   	nop

c0010016 <Buzzer::beep(int, int, bool)>:
c0010016:	57                   	push   edi
c0010017:	56                   	push   esi
c0010018:	53                   	push   ebx
c0010019:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001001d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010021:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010025:	52                   	push   edx
c0010026:	52                   	push   edx
c0010027:	8b 06                	mov    eax,DWORD PTR [esi]
c0010029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001002d:	56                   	push   esi
c001002e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010031:	89 f8                	mov    eax,edi
c0010033:	83 c4 10             	add    esp,0x10
c0010036:	84 c0                	test   al,al
c0010038:	74 1f                	je     c0010059 <Buzzer::beep(int, int, bool)+0x43>
c001003a:	50                   	push   eax
c001003b:	50                   	push   eax
c001003c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0010042:	99                   	cdq    
c0010043:	52                   	push   edx
c0010044:	50                   	push   eax
c0010045:	e8 6f 8f 00 00       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001004a:	83 c4 10             	add    esp,0x10
c001004d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010051:	5b                   	pop    ebx
c0010052:	5e                   	pop    esi
c0010053:	5f                   	pop    edi
c0010054:	e9 6f ff ff ff       	jmp    c000ffc8 <Buzzer::stop()>
c0010059:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001005f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0010064:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001006c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010070:	c7 44 24 14 db ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffdb
c0010078:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001007c:	5b                   	pop    ebx
c001007d:	5e                   	pop    esi
c001007e:	5f                   	pop    edi
c001007f:	e9 0c 8b 00 00       	jmp    c0018b90 <Process::createThread(void (*)(void*), void*, int)>

c0010084 <loadClockSettings()>:
c0010084:	c7 05 14 49 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024914,0xa
c001008e:	c6 05 11 49 02 c0 00 	mov    BYTE PTR ds:0xc0024911,0x0
c0010095:	c6 05 10 49 02 c0 01 	mov    BYTE PTR ds:0xc0024910,0x1
c001009c:	c3                   	ret    
c001009d:	90                   	nop

c001009e <Clock::Clock(char const*)>:
c001009e:	83 ec 0c             	sub    esp,0xc
c00100a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a5:	83 ec 08             	sub    esp,0x8
c00100a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ac:	50                   	push   eax
c00100ad:	e8 76 07 00 00       	call   c0010828 <Device::Device(char const*)>
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100be:	89 10                	mov    DWORD PTR [eax],edx
c00100c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100ce:	90                   	nop
c00100cf:	83 c4 0c             	add    esp,0xc
c00100d2:	c3                   	ret    
c00100d3:	90                   	nop

c00100d4 <Clock::~Clock()>:
c00100d4:	83 ec 0c             	sub    esp,0xc
c00100d7:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e0:	89 10                	mov    DWORD PTR [eax],edx
c00100e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e6:	83 ec 0c             	sub    esp,0xc
c00100e9:	50                   	push   eax
c00100ea:	e8 ef 03 00 00       	call   c00104de <Device::~Device()>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	90                   	nop
c00100f3:	83 c4 0c             	add    esp,0xc
c00100f6:	c3                   	ret    
c00100f7:	90                   	nop

c00100f8 <Clock::~Clock()>:
c00100f8:	83 ec 0c             	sub    esp,0xc
c00100fb:	83 ec 0c             	sub    esp,0xc
c00100fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010102:	e8 cd ff ff ff       	call   c00100d4 <Clock::~Clock()>
c0010107:	83 c4 10             	add    esp,0x10
c001010a:	83 ec 08             	sub    esp,0x8
c001010d:	68 58 01 00 00       	push   0x158
c0010112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010116:	e8 e2 ef ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001011b:	83 c4 10             	add    esp,0x10
c001011e:	83 c4 0c             	add    esp,0xc
c0010121:	c3                   	ret    

c0010122 <Clock::timeInSecondsLocal()>:
c0010122:	53                   	push   ebx
c0010123:	83 ec 14             	sub    esp,0x14
c0010126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001012a:	8b 10                	mov    edx,DWORD PTR [eax]
c001012c:	50                   	push   eax
c001012d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010130:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010137:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c001013d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010143:	89 cb                	mov    ebx,ecx
c0010145:	c1 fb 1f             	sar    ebx,0x1f
c0010148:	01 c8                	add    eax,ecx
c001014a:	11 da                	adc    edx,ebx
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	31 c9                	xor    ecx,ecx
c0010151:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010158:	74 05                	je     c001015f <Clock::timeInSecondsLocal()+0x3d>
c001015a:	b9 08 07 00 00       	mov    ecx,0x708
c001015f:	31 db                	xor    ebx,ebx
c0010161:	01 c8                	add    eax,ecx
c0010163:	11 da                	adc    edx,ebx
c0010165:	83 c4 08             	add    esp,0x8
c0010168:	5b                   	pop    ebx
c0010169:	c3                   	ret    

c001016a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001016a:	57                   	push   edi
c001016b:	56                   	push   esi
c001016c:	53                   	push   ebx
c001016d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010171:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010175:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010179:	8b 01                	mov    eax,DWORD PTR [ecx]
c001017b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001017e:	0f b6 05 10 49 02 c0 	movzx  eax,BYTE PTR ds:0xc0024910
c0010185:	03 05 14 49 02 c0    	add    eax,DWORD PTR ds:0xc0024914
c001018b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0010191:	99                   	cdq    
c0010192:	29 c6                	sub    esi,eax
c0010194:	19 d7                	sbb    edi,edx
c0010196:	89 f0                	mov    eax,esi
c0010198:	89 fa                	mov    edx,edi
c001019a:	31 f6                	xor    esi,esi
c001019c:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c00101a3:	74 05                	je     c00101aa <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00101a5:	be 08 07 00 00       	mov    esi,0x708
c00101aa:	31 ff                	xor    edi,edi
c00101ac:	29 f0                	sub    eax,esi
c00101ae:	19 fa                	sbb    edx,edi
c00101b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101b4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101b8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101bc:	89 d8                	mov    eax,ebx
c00101be:	5b                   	pop    ebx
c00101bf:	5e                   	pop    esi
c00101c0:	5f                   	pop    edi
c00101c1:	ff e0                	jmp    eax

c00101c3 <datetimeToSeconds(datetime_t)>:
c00101c3:	55                   	push   ebp
c00101c4:	57                   	push   edi
c00101c5:	56                   	push   esi
c00101c6:	53                   	push   ebx
c00101c7:	83 ec 14             	sub    esp,0x14
c00101ca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101d2:	0f b6 f5             	movzx  esi,ch
c00101d5:	6b f6 3c             	imul   esi,esi,0x3c
c00101d8:	89 cf                	mov    edi,ecx
c00101da:	89 d3                	mov    ebx,edx
c00101dc:	0f b6 c9             	movzx  ecx,cl
c00101df:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101e5:	0f b6 c6             	movzx  eax,dh
c00101e8:	c1 ef 10             	shr    edi,0x10
c00101eb:	48                   	dec    eax
c00101ec:	c1 eb 10             	shr    ebx,0x10
c00101ef:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101f3:	89 f8                	mov    eax,edi
c00101f5:	0f b6 f8             	movzx  edi,al
c00101f8:	01 fe                	add    esi,edi
c00101fa:	01 f1                	add    ecx,esi
c00101fc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010200:	c1 f9 1f             	sar    ecx,0x1f
c0010203:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010207:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001020c:	0f b6 d2             	movzx  edx,dl
c001020f:	66 81 eb 6c 07       	sub    bx,0x76c
c0010214:	8b 0c 8d 20 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde3e0]
c001021b:	0f b7 f3             	movzx  esi,bx
c001021e:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010222:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010227:	76 29                	jbe    c0010252 <datetimeToSeconds(datetime_t)+0x8f>
c0010229:	f6 c3 03             	test   bl,0x3
c001022c:	75 24                	jne    c0010252 <datetimeToSeconds(datetime_t)+0x8f>
c001022e:	31 d2                	xor    edx,edx
c0010230:	bf 64 00 00 00       	mov    edi,0x64
c0010235:	89 d8                	mov    eax,ebx
c0010237:	66 f7 f7             	div    di
c001023a:	66 85 d2             	test   dx,dx
c001023d:	75 12                	jne    c0010251 <datetimeToSeconds(datetime_t)+0x8e>
c001023f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010245:	bf 90 01 00 00       	mov    edi,0x190
c001024a:	99                   	cdq    
c001024b:	f7 ff                	idiv   edi
c001024d:	85 d2                	test   edx,edx
c001024f:	75 01                	jne    c0010252 <datetimeToSeconds(datetime_t)+0x8f>
c0010251:	41                   	inc    ecx
c0010252:	66 83 fb 46          	cmp    bx,0x46
c0010256:	76 45                	jbe    c001029d <datetimeToSeconds(datetime_t)+0xda>
c0010258:	bb 46 00 00 00       	mov    ebx,0x46
c001025d:	bf 64 00 00 00       	mov    edi,0x64
c0010262:	bd 90 01 00 00       	mov    ebp,0x190
c0010267:	b8 6d 01 00 00       	mov    eax,0x16d
c001026c:	f6 c3 03             	test   bl,0x3
c001026f:	75 23                	jne    c0010294 <datetimeToSeconds(datetime_t)+0xd1>
c0010271:	89 d8                	mov    eax,ebx
c0010273:	99                   	cdq    
c0010274:	f7 ff                	idiv   edi
c0010276:	85 d2                	test   edx,edx
c0010278:	b8 6e 01 00 00       	mov    eax,0x16e
c001027d:	75 15                	jne    c0010294 <datetimeToSeconds(datetime_t)+0xd1>
c001027f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010285:	99                   	cdq    
c0010286:	f7 fd                	idiv   ebp
c0010288:	31 c0                	xor    eax,eax
c001028a:	85 d2                	test   edx,edx
c001028c:	0f 94 c0             	sete   al
c001028f:	05 6d 01 00 00       	add    eax,0x16d
c0010294:	43                   	inc    ebx
c0010295:	01 c1                	add    ecx,eax
c0010297:	39 f3                	cmp    ebx,esi
c0010299:	7c cc                	jl     c0010267 <datetimeToSeconds(datetime_t)+0xa4>
c001029b:	eb 3b                	jmp    c00102d8 <datetimeToSeconds(datetime_t)+0x115>
c001029d:	74 39                	je     c00102d8 <datetimeToSeconds(datetime_t)+0x115>
c001029f:	b8 45 00 00 00       	mov    eax,0x45
c00102a4:	89 c2                	mov    edx,eax
c00102a6:	83 e2 03             	and    edx,0x3
c00102a9:	39 f0                	cmp    eax,esi
c00102ab:	7e 13                	jle    c00102c0 <datetimeToSeconds(datetime_t)+0xfd>
c00102ad:	85 d2                	test   edx,edx
c00102af:	0f 94 c2             	sete   dl
c00102b2:	0f b6 d2             	movzx  edx,dl
c00102b5:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102bb:	48                   	dec    eax
c00102bc:	29 d1                	sub    ecx,edx
c00102be:	eb e4                	jmp    c00102a4 <datetimeToSeconds(datetime_t)+0xe1>
c00102c0:	b8 6d 01 00 00       	mov    eax,0x16d
c00102c5:	85 d2                	test   edx,edx
c00102c7:	75 0d                	jne    c00102d6 <datetimeToSeconds(datetime_t)+0x113>
c00102c9:	31 c0                	xor    eax,eax
c00102cb:	66 85 db             	test   bx,bx
c00102ce:	0f 95 c0             	setne  al
c00102d1:	05 6d 01 00 00       	add    eax,0x16d
c00102d6:	29 c1                	sub    ecx,eax
c00102d8:	b8 80 51 01 00       	mov    eax,0x15180
c00102dd:	f7 e9                	imul   ecx
c00102df:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102e3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102e7:	83 c4 14             	add    esp,0x14
c00102ea:	5b                   	pop    ebx
c00102eb:	5e                   	pop    esi
c00102ec:	5f                   	pop    edi
c00102ed:	5d                   	pop    ebp
c00102ee:	c3                   	ret    
c00102ef:	90                   	nop

c00102f0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102f0:	57                   	push   edi
c00102f1:	56                   	push   esi
c00102f2:	53                   	push   ebx
c00102f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00102f9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010300:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010304:	e8 ba fe ff ff       	call   c00101c3 <datetimeToSeconds(datetime_t)>
c0010309:	59                   	pop    ecx
c001030a:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010311:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010317:	5b                   	pop    ebx
c0010318:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001031e:	89 cb                	mov    ebx,ecx
c0010320:	c1 fb 1f             	sar    ebx,0x1f
c0010323:	29 c8                	sub    eax,ecx
c0010325:	19 da                	sbb    edx,ebx
c0010327:	31 c9                	xor    ecx,ecx
c0010329:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010330:	74 05                	je     c0010337 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010332:	b9 08 07 00 00       	mov    ecx,0x708
c0010337:	31 db                	xor    ebx,ebx
c0010339:	29 c8                	sub    eax,ecx
c001033b:	19 da                	sbb    edx,ebx
c001033d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010341:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010345:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010349:	5b                   	pop    ebx
c001034a:	89 f8                	mov    eax,edi
c001034c:	5e                   	pop    esi
c001034d:	5f                   	pop    edi
c001034e:	ff e0                	jmp    eax

c0010350 <secondsToDatetime(unsigned long long)>:
c0010350:	55                   	push   ebp
c0010351:	57                   	push   edi
c0010352:	56                   	push   esi
c0010353:	53                   	push   ebx
c0010354:	83 ec 1c             	sub    esp,0x1c
c0010357:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001035b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001035f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010363:	6a 00                	push   0x0
c0010365:	68 80 51 01 00       	push   0x15180
c001036a:	55                   	push   ebp
c001036b:	57                   	push   edi
c001036c:	e8 ab f1 00 00       	call   c001f51c <__udivdi3>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010378:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001037e:	6a 00                	push   0x0
c0010380:	68 80 51 01 00       	push   0x15180
c0010385:	55                   	push   ebp
c0010386:	57                   	push   edi
c0010387:	e8 90 f2 00 00       	call   c001f61c <__umoddi3>
c001038c:	bf 10 0e 00 00       	mov    edi,0xe10
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	99                   	cdq    
c0010395:	f7 ff                	idiv   edi
c0010397:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001039a:	89 d0                	mov    eax,edx
c001039c:	99                   	cdq    
c001039d:	bf 3c 00 00 00       	mov    edi,0x3c
c00103a2:	f7 ff                	idiv   edi
c00103a4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00103a7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00103aa:	85 db                	test   ebx,ebx
c00103ac:	79 11                	jns    c00103bf <secondsToDatetime(unsigned long long)+0x6f>
c00103ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103b2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103b8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103bd:	eb 07                	jmp    c00103c6 <secondsToDatetime(unsigned long long)+0x76>
c00103bf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103c4:	89 d8                	mov    eax,ebx
c00103c6:	99                   	cdq    
c00103c7:	f7 f9                	idiv   ecx
c00103c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103cd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103d2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103da:	01 c3                	add    ebx,eax
c00103dc:	31 d2                	xor    edx,edx
c00103de:	89 d8                	mov    eax,ebx
c00103e0:	bf b4 05 00 00       	mov    edi,0x5b4
c00103e5:	f7 f1                	div    ecx
c00103e7:	31 d2                	xor    edx,edx
c00103e9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103ee:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103f1:	89 d8                	mov    eax,ebx
c00103f3:	f7 f7                	div    edi
c00103f5:	29 c1                	sub    ecx,eax
c00103f7:	31 d2                	xor    edx,edx
c00103f9:	89 d8                	mov    eax,ebx
c00103fb:	f7 f5                	div    ebp
c00103fd:	29 c1                	sub    ecx,eax
c00103ff:	bd 6d 01 00 00       	mov    ebp,0x16d
c0010404:	89 c8                	mov    eax,ecx
c0010406:	31 d2                	xor    edx,edx
c0010408:	f7 f5                	div    ebp
c001040a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001040e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010413:	89 c8                	mov    eax,ecx
c0010415:	31 d2                	xor    edx,edx
c0010417:	f7 f5                	div    ebp
c0010419:	01 c3                	add    ebx,eax
c001041b:	31 d2                	xor    edx,edx
c001041d:	89 c8                	mov    eax,ecx
c001041f:	f7 f7                	div    edi
c0010421:	29 c3                	sub    ebx,eax
c0010423:	bf 99 00 00 00       	mov    edi,0x99
c0010428:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010430:	29 c3                	sub    ebx,eax
c0010432:	31 d2                	xor    edx,edx
c0010434:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010437:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001043a:	83 c1 02             	add    ecx,0x2
c001043d:	bb 05 00 00 00       	mov    ebx,0x5
c0010442:	89 c8                	mov    eax,ecx
c0010444:	f7 f7                	div    edi
c0010446:	89 c7                	mov    edi,eax
c0010448:	31 d2                	xor    edx,edx
c001044a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010450:	83 c0 02             	add    eax,0x2
c0010453:	f7 f3                	div    ebx
c0010455:	89 eb                	mov    ebx,ebp
c0010457:	29 c3                	sub    ebx,eax
c0010459:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001045f:	19 c0                	sbb    eax,eax
c0010461:	31 d2                	xor    edx,edx
c0010463:	83 e0 0c             	and    eax,0xc
c0010466:	88 1e                	mov    BYTE PTR [esi],bl
c0010468:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001046c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010474:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010478:	83 f9 01             	cmp    ecx,0x1
c001047b:	0f 96 c2             	setbe  dl
c001047e:	01 d0                	add    eax,edx
c0010480:	41                   	inc    ecx
c0010481:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010485:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010488:	83 c4 1c             	add    esp,0x1c
c001048b:	89 f0                	mov    eax,esi
c001048d:	5b                   	pop    ebx
c001048e:	5e                   	pop    esi
c001048f:	5f                   	pop    edi
c0010490:	5d                   	pop    ebp
c0010491:	c2 04 00             	ret    0x4

c0010494 <Clock::timeInDatetimeLocal()>:
c0010494:	53                   	push   ebx
c0010495:	83 ec 14             	sub    esp,0x14
c0010498:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001049c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00104a0:	e8 7d fc ff ff       	call   c0010122 <Clock::timeInSecondsLocal()>
c00104a5:	83 c4 0c             	add    esp,0xc
c00104a8:	52                   	push   edx
c00104a9:	50                   	push   eax
c00104aa:	53                   	push   ebx
c00104ab:	e8 a0 fe ff ff       	call   c0010350 <secondsToDatetime(unsigned long long)>
c00104b0:	83 c4 14             	add    esp,0x14
c00104b3:	89 d8                	mov    eax,ebx
c00104b5:	5b                   	pop    ebx
c00104b6:	c2 04 00             	ret    0x4
c00104b9:	90                   	nop

c00104ba <Device::hibernate()>:
c00104ba:	c3                   	ret    
c00104bb:	90                   	nop

c00104bc <Device::wake()>:
c00104bc:	c3                   	ret    
c00104bd:	90                   	nop

c00104be <Device::detect()>:
c00104be:	c3                   	ret    
c00104bf:	90                   	nop

c00104c0 <Device::disableLegacy()>:
c00104c0:	c3                   	ret    
c00104c1:	90                   	nop

c00104c2 <Device::powerSaving(PowerSavingLevel)>:
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <DriverlessDevice::close(int, int, void*)>:
c00104c4:	31 c0                	xor    eax,eax
c00104c6:	c3                   	ret    
c00104c7:	90                   	nop

c00104c8 <DriverlessDevice::detect()>:
c00104c8:	c3                   	ret    
c00104c9:	90                   	nop

c00104ca <DriverlessDevice::open(int, int, void*)>:
c00104ca:	83 ec 18             	sub    esp,0x18
c00104cd:	68 50 1c 02 c0       	push   0xc0021c50
c00104d2:	e8 7b 55 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c00104d7:	83 c8 ff             	or     eax,0xffffffff
c00104da:	83 c4 1c             	add    esp,0x1c
c00104dd:	c3                   	ret    

c00104de <Device::~Device()>:
c00104de:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c00104e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e7:	89 10                	mov    DWORD PTR [eax],edx
c00104e9:	90                   	nop
c00104ea:	c3                   	ret    
c00104eb:	90                   	nop

c00104ec <Device::~Device()>:
c00104ec:	83 ec 0c             	sub    esp,0xc
c00104ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104f3:	e8 e6 ff ff ff       	call   c00104de <Device::~Device()>
c00104f8:	83 c4 04             	add    esp,0x4
c00104fb:	83 ec 08             	sub    esp,0x8
c00104fe:	68 58 01 00 00       	push   0x158
c0010503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010507:	e8 f1 eb ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	83 c4 0c             	add    esp,0xc
c0010512:	c3                   	ret    
c0010513:	90                   	nop

c0010514 <Device::findAndLoadDriver()>:
c0010514:	c3                   	ret    
c0010515:	90                   	nop

c0010516 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010516:	57                   	push   edi
c0010517:	b9 09 00 00 00       	mov    ecx,0x9
c001051c:	56                   	push   esi
c001051d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010521:	81 c7 18 01 00 00    	add    edi,0x118
c0010527:	8d 74 24 10          	lea    esi,[esp+0x10]
c001052b:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010532:	fc                   	cld    
c0010533:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010535:	5e                   	pop    esi
c0010536:	5f                   	pop    edi
c0010537:	c3                   	ret    

c0010538 <Device::preOpenACPI(void*, char*, char*)>:
c0010538:	56                   	push   esi
c0010539:	53                   	push   ebx
c001053a:	83 ec 08             	sub    esp,0x8
c001053d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010541:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010545:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010549:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001054f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010559:	6a 1e                	push   0x1e
c001055b:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010561:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010565:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001056b:	50                   	push   eax
c001056c:	e8 2b 01 ff ff       	call   c000069c <memcpy>
c0010571:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010575:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010579:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010581:	83 c4 14             	add    esp,0x14
c0010584:	5b                   	pop    ebx
c0010585:	5e                   	pop    esi
c0010586:	e9 11 01 ff ff       	jmp    c000069c <memcpy>
c001058b:	90                   	nop

c001058c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001058c:	55                   	push   ebp
c001058d:	57                   	push   edi
c001058e:	56                   	push   esi
c001058f:	53                   	push   ebx
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010597:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001059b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001059f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00105a3:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00105a8:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105af:	75 0b                	jne    c00105bc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00105b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00105b3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105b7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105ba:	eb 24                	jmp    c00105e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105bc:	e8 25 43 00 00       	call   c00148e6 <thisCPU()>
c00105c1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00105c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105cd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105d1:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105d5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105dd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105e0:	83 c4 0c             	add    esp,0xc
c00105e3:	5b                   	pop    ebx
c00105e4:	5e                   	pop    esi
c00105e5:	5f                   	pop    edi
c00105e6:	5d                   	pop    ebp
c00105e7:	ff e0                	jmp    eax
c00105e9:	90                   	nop

c00105ea <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105ea:	57                   	push   edi
c00105eb:	56                   	push   esi
c00105ec:	53                   	push   ebx
c00105ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105f9:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105fe:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010605:	75 0b                	jne    c0010612 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010607:	8b 00                	mov    eax,DWORD PTR [eax]
c0010609:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001060d:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010610:	eb 20                	jmp    c0010632 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010612:	e8 cf 42 00 00       	call   c00148e6 <thisCPU()>
c0010617:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001061d:	8b 10                	mov    edx,DWORD PTR [eax]
c001061f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010623:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010627:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001062b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001062f:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010632:	5b                   	pop    ebx
c0010633:	5e                   	pop    esi
c0010634:	5f                   	pop    edi
c0010635:	ff e0                	jmp    eax
c0010637:	90                   	nop

c0010638 <Device::addChild(Device*)>:
c0010638:	53                   	push   ebx
c0010639:	83 ec 08             	sub    esp,0x8
c001063c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010640:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010644:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001064a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010650:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010652:	85 d2                	test   edx,edx
c0010654:	74 04                	je     c001065a <Device::addChild(Device*)+0x22>
c0010656:	89 d3                	mov    ebx,edx
c0010658:	eb f6                	jmp    c0010650 <Device::addChild(Device*)+0x18>
c001065a:	83 ec 0c             	sub    esp,0xc
c001065d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010660:	6a 08                	push   0x8
c0010662:	e8 87 ea ff ff       	call   c000f0ee <operator new(unsigned long)>
c0010667:	89 03                	mov    DWORD PTR [ebx],eax
c0010669:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001066f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010676:	83 c4 18             	add    esp,0x18
c0010679:	5b                   	pop    ebx
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <Device::removeAllChildren()>:
c001067c:	56                   	push   esi
c001067d:	53                   	push   ebx
c001067e:	52                   	push   edx
c001067f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010683:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010689:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001068c:	74 17                	je     c00106a5 <Device::removeAllChildren()+0x29>
c001068e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010691:	85 c0                	test   eax,eax
c0010693:	74 0c                	je     c00106a1 <Device::removeAllChildren()+0x25>
c0010695:	83 ec 0c             	sub    esp,0xc
c0010698:	8b 10                	mov    edx,DWORD PTR [eax]
c001069a:	50                   	push   eax
c001069b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001069e:	83 c4 10             	add    esp,0x10
c00106a1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106a3:	eb e4                	jmp    c0010689 <Device::removeAllChildren()+0xd>
c00106a5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106b1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106be:	58                   	pop    eax
c00106bf:	5b                   	pop    ebx
c00106c0:	5e                   	pop    esi
c00106c1:	c3                   	ret    

c00106c2 <Device::hibernateAll()>:
c00106c2:	53                   	push   ebx
c00106c3:	83 ec 14             	sub    esp,0x14
c00106c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106cc:	53                   	push   ebx
c00106cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106dc:	74 0f                	je     c00106ed <Device::hibernateAll()+0x2b>
c00106de:	83 ec 0c             	sub    esp,0xc
c00106e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106e4:	e8 d9 ff ff ff       	call   c00106c2 <Device::hibernateAll()>
c00106e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106eb:	eb e9                	jmp    c00106d6 <Device::hibernateAll()+0x14>
c00106ed:	83 c4 08             	add    esp,0x8
c00106f0:	5b                   	pop    ebx
c00106f1:	c3                   	ret    

c00106f2 <Device::wakeAll()>:
c00106f2:	53                   	push   ebx
c00106f3:	83 ec 14             	sub    esp,0x14
c00106f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106fc:	53                   	push   ebx
c00106fd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010700:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010706:	83 c4 10             	add    esp,0x10
c0010709:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001070c:	74 0f                	je     c001071d <Device::wakeAll()+0x2b>
c001070e:	83 ec 0c             	sub    esp,0xc
c0010711:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010714:	e8 d9 ff ff ff       	call   c00106f2 <Device::wakeAll()>
c0010719:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001071b:	eb e9                	jmp    c0010706 <Device::wakeAll()+0x14>
c001071d:	83 c4 08             	add    esp,0x8
c0010720:	5b                   	pop    ebx
c0010721:	c3                   	ret    

c0010722 <Device::detectAll()>:
c0010722:	53                   	push   ebx
c0010723:	83 ec 14             	sub    esp,0x14
c0010726:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001072a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001072c:	53                   	push   ebx
c001072d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010730:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010736:	83 c4 10             	add    esp,0x10
c0010739:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001073c:	74 0f                	je     c001074d <Device::detectAll()+0x2b>
c001073e:	83 ec 0c             	sub    esp,0xc
c0010741:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010744:	e8 d9 ff ff ff       	call   c0010722 <Device::detectAll()>
c0010749:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001074b:	eb e9                	jmp    c0010736 <Device::detectAll()+0x14>
c001074d:	83 c4 08             	add    esp,0x8
c0010750:	5b                   	pop    ebx
c0010751:	c3                   	ret    

c0010752 <Device::disableLegacyAll()>:
c0010752:	53                   	push   ebx
c0010753:	83 ec 14             	sub    esp,0x14
c0010756:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001075a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001075c:	53                   	push   ebx
c001075d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010760:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010766:	83 c4 10             	add    esp,0x10
c0010769:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001076c:	74 0f                	je     c001077d <Device::disableLegacyAll()+0x2b>
c001076e:	83 ec 0c             	sub    esp,0xc
c0010771:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010774:	e8 d9 ff ff ff       	call   c0010752 <Device::disableLegacyAll()>
c0010779:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001077b:	eb e9                	jmp    c0010766 <Device::disableLegacyAll()+0x14>
c001077d:	83 c4 08             	add    esp,0x8
c0010780:	5b                   	pop    ebx
c0010781:	c3                   	ret    

c0010782 <Device::loadDriversForAll()>:
c0010782:	53                   	push   ebx
c0010783:	83 ec 08             	sub    esp,0x8
c0010786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078a:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010790:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010792:	85 db                	test   ebx,ebx
c0010794:	74 12                	je     c00107a8 <Device::loadDriversForAll()+0x26>
c0010796:	83 ec 0c             	sub    esp,0xc
c0010799:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001079c:	e8 e1 ff ff ff       	call   c0010782 <Device::loadDriversForAll()>
c00107a1:	83 c4 10             	add    esp,0x10
c00107a4:	89 d8                	mov    eax,ebx
c00107a6:	eb e8                	jmp    c0010790 <Device::loadDriversForAll()+0xe>
c00107a8:	83 c4 08             	add    esp,0x8
c00107ab:	5b                   	pop    ebx
c00107ac:	c3                   	ret    
c00107ad:	90                   	nop

c00107ae <Device::closeAll()>:
c00107ae:	53                   	push   ebx
c00107af:	83 ec 08             	sub    esp,0x8
c00107b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107b8:	6a 00                	push   0x0
c00107ba:	6a 00                	push   0x0
c00107bc:	6a 00                	push   0x0
c00107be:	53                   	push   ebx
c00107bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107c8:	83 c4 10             	add    esp,0x10
c00107cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107ce:	74 0f                	je     c00107df <Device::closeAll()+0x31>
c00107d0:	83 ec 0c             	sub    esp,0xc
c00107d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107d6:	e8 d3 ff ff ff       	call   c00107ae <Device::closeAll()>
c00107db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107dd:	eb e9                	jmp    c00107c8 <Device::closeAll()+0x1a>
c00107df:	83 c4 08             	add    esp,0x8
c00107e2:	5b                   	pop    ebx
c00107e3:	c3                   	ret    

c00107e4 <Device::powerSavingAll(PowerSavingLevel)>:
c00107e4:	56                   	push   esi
c00107e5:	53                   	push   ebx
c00107e6:	83 ec 0c             	sub    esp,0xc
c00107e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107ed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107f3:	56                   	push   esi
c00107f4:	53                   	push   ebx
c00107f5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107fe:	83 c4 10             	add    esp,0x10
c0010801:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010804:	74 0f                	je     c0010815 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010806:	52                   	push   edx
c0010807:	52                   	push   edx
c0010808:	56                   	push   esi
c0010809:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001080c:	e8 d3 ff ff ff       	call   c00107e4 <Device::powerSavingAll(PowerSavingLevel)>
c0010811:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010813:	eb e9                	jmp    c00107fe <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010815:	58                   	pop    eax
c0010816:	5b                   	pop    ebx
c0010817:	5e                   	pop    esi
c0010818:	c3                   	ret    
c0010819:	90                   	nop

c001081a <Device::setName(char const*)>:
c001081a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010822:	e9 4a ff fe ff       	jmp    c0000771 <strcpy>
c0010827:	90                   	nop

c0010828 <Device::Device(char const*)>:
c0010828:	83 ec 0c             	sub    esp,0xc
c001082b:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c0010830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010834:	89 10                	mov    DWORD PTR [eax],edx
c0010836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010848:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010856:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010864:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001086e:	83 ec 08             	sub    esp,0x8
c0010871:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010879:	e8 9c ff ff ff       	call   c001081a <Device::setName(char const*)>
c001087e:	83 c4 10             	add    esp,0x10
c0010881:	83 ec 0c             	sub    esp,0xc
c0010884:	6a 08                	push   0x8
c0010886:	e8 63 e8 ff ff       	call   c000f0ee <operator new(unsigned long)>
c001088b:	83 c4 10             	add    esp,0x10
c001088e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010894:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001089b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001089f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00108a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ca:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010914:	90                   	nop
c0010915:	83 c4 0c             	add    esp,0xc
c0010918:	c3                   	ret    
c0010919:	90                   	nop

c001091a <Device::getName()>:
c001091a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001091e:	05 d0 00 00 00       	add    eax,0xd0
c0010923:	c3                   	ret    

c0010924 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092b:	83 ec 08             	sub    esp,0x8
c001092e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010932:	50                   	push   eax
c0010933:	e8 f0 fe ff ff       	call   c0010828 <Device::Device(char const*)>
c0010938:	83 c4 10             	add    esp,0x10
c001093b:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	89 10                	mov    DWORD PTR [eax],edx
c0010946:	90                   	nop
c0010947:	83 c4 0c             	add    esp,0xc
c001094a:	c3                   	ret    
c001094b:	90                   	nop

c001094c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001094c:	57                   	push   edi
c001094d:	56                   	push   esi
c001094e:	53                   	push   ebx
c001094f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010953:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010957:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001095b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010961:	75 0c                	jne    c001096f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010963:	52                   	push   edx
c0010964:	52                   	push   edx
c0010965:	53                   	push   ebx
c0010966:	56                   	push   esi
c0010967:	e8 c8 f0 00 00       	call   c001fa34 <LinkedList<Device>::addElement(Device*)>
c001096c:	83 c4 10             	add    esp,0x10
c001096f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010975:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010978:	74 12                	je     c001098c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001097a:	50                   	push   eax
c001097b:	57                   	push   edi
c001097c:	56                   	push   esi
c001097d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010980:	e8 c7 ff ff ff       	call   c001094c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010985:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	eb e9                	jmp    c0010975 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001098c:	5b                   	pop    ebx
c001098d:	5e                   	pop    esi
c001098e:	5f                   	pop    edi
c001098f:	c3                   	ret    

c0010990 <getDevicesOfType(DeviceType)>:
c0010990:	53                   	push   ebx
c0010991:	83 ec 14             	sub    esp,0x14
c0010994:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010998:	53                   	push   ebx
c0010999:	e8 72 f1 00 00       	call   c001fb10 <LinkedList<Device>::LinkedList()>
c001099e:	83 c4 0c             	add    esp,0xc
c00109a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109a5:	53                   	push   ebx
c00109a6:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c00109ac:	e8 9b ff ff ff       	call   c001094c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00109b1:	83 c4 18             	add    esp,0x18
c00109b4:	89 d8                	mov    eax,ebx
c00109b6:	5b                   	pop    ebx
c00109b7:	c2 04 00             	ret    0x4

c00109ba <HardDiskController::HardDiskController(char const*)>:
c00109ba:	83 ec 0c             	sub    esp,0xc
c00109bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c1:	83 ec 08             	sub    esp,0x8
c00109c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109c8:	50                   	push   eax
c00109c9:	e8 5a fe ff ff       	call   c0010828 <Device::Device(char const*)>
c00109ce:	83 c4 10             	add    esp,0x10
c00109d1:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109da:	89 10                	mov    DWORD PTR [eax],edx
c00109dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109ea:	90                   	nop
c00109eb:	83 c4 0c             	add    esp,0xc
c00109ee:	c3                   	ret    
c00109ef:	90                   	nop

c00109f0 <HardDiskController::~HardDiskController()>:
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fc:	89 10                	mov    DWORD PTR [eax],edx
c00109fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a02:	83 ec 0c             	sub    esp,0xc
c0010a05:	50                   	push   eax
c0010a06:	e8 d3 fa ff ff       	call   c00104de <Device::~Device()>
c0010a0b:	83 c4 10             	add    esp,0x10
c0010a0e:	90                   	nop
c0010a0f:	83 c4 0c             	add    esp,0xc
c0010a12:	c3                   	ret    
c0010a13:	90                   	nop

c0010a14 <HardDiskController::~HardDiskController()>:
c0010a14:	83 ec 0c             	sub    esp,0xc
c0010a17:	83 ec 0c             	sub    esp,0xc
c0010a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1e:	e8 cd ff ff ff       	call   c00109f0 <HardDiskController::~HardDiskController()>
c0010a23:	83 c4 10             	add    esp,0x10
c0010a26:	83 ec 08             	sub    esp,0x8
c0010a29:	68 58 01 00 00       	push   0x158
c0010a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a32:	e8 c6 e6 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	83 c4 0c             	add    esp,0xc
c0010a3d:	c3                   	ret    

c0010a3e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a45:	83 ec 08             	sub    esp,0x8
c0010a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a4c:	50                   	push   eax
c0010a4d:	e8 d6 fd ff ff       	call   c0010828 <Device::Device(char const*)>
c0010a52:	83 c4 10             	add    esp,0x10
c0010a55:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5e:	89 10                	mov    DWORD PTR [eax],edx
c0010a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a64:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a8c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a96:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010aa0:	90                   	nop
c0010aa1:	83 c4 0c             	add    esp,0xc
c0010aa4:	c3                   	ret    
c0010aa5:	90                   	nop

c0010aa6 <PhysicalDisk::startCache()>:
c0010aa6:	56                   	push   esi
c0010aa7:	53                   	push   ebx
c0010aa8:	83 ec 10             	sub    esp,0x10
c0010aab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010aaf:	6a 30                	push   0x30
c0010ab1:	e8 38 e6 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0010ab6:	89 c6                	mov    esi,eax
c0010ab8:	58                   	pop    eax
c0010ab9:	5a                   	pop    edx
c0010aba:	53                   	push   ebx
c0010abb:	56                   	push   esi
c0010abc:	e8 3b 25 00 00       	call   c0012ffc <VCache::VCache(PhysicalDisk*)>
c0010ac1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010ac7:	83 c4 14             	add    esp,0x14
c0010aca:	5b                   	pop    ebx
c0010acb:	5e                   	pop    esi
c0010acc:	c3                   	ret    
c0010acd:	90                   	nop

c0010ace <PhysicalDisk::~PhysicalDisk()>:
c0010ace:	83 ec 0c             	sub    esp,0xc
c0010ad1:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ada:	89 10                	mov    DWORD PTR [eax],edx
c0010adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae0:	83 ec 0c             	sub    esp,0xc
c0010ae3:	50                   	push   eax
c0010ae4:	e8 f5 f9 ff ff       	call   c00104de <Device::~Device()>
c0010ae9:	83 c4 10             	add    esp,0x10
c0010aec:	90                   	nop
c0010aed:	83 c4 0c             	add    esp,0xc
c0010af0:	c3                   	ret    
c0010af1:	90                   	nop

c0010af2 <PhysicalDisk::~PhysicalDisk()>:
c0010af2:	83 ec 0c             	sub    esp,0xc
c0010af5:	83 ec 0c             	sub    esp,0xc
c0010af8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010afc:	e8 cd ff ff ff       	call   c0010ace <PhysicalDisk::~PhysicalDisk()>
c0010b01:	83 c4 10             	add    esp,0x10
c0010b04:	83 ec 08             	sub    esp,0x8
c0010b07:	68 6c 01 00 00       	push   0x16c
c0010b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b10:	e8 e8 e5 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0010b15:	83 c4 10             	add    esp,0x10
c0010b18:	83 c4 0c             	add    esp,0xc
c0010b1b:	c3                   	ret    

c0010b1c <FPU::FPU(char const*)>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b23:	83 ec 08             	sub    esp,0x8
c0010b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b2a:	50                   	push   eax
c0010b2b:	e8 f8 fc ff ff       	call   c0010828 <Device::Device(char const*)>
c0010b30:	83 c4 10             	add    esp,0x10
c0010b33:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3c:	89 10                	mov    DWORD PTR [eax],edx
c0010b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b42:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b4c:	90                   	nop
c0010b4d:	83 c4 0c             	add    esp,0xc
c0010b50:	c3                   	ret    
c0010b51:	90                   	nop

c0010b52 <FPU::~FPU()>:
c0010b52:	83 ec 0c             	sub    esp,0xc
c0010b55:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5e:	89 10                	mov    DWORD PTR [eax],edx
c0010b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b64:	83 ec 0c             	sub    esp,0xc
c0010b67:	50                   	push   eax
c0010b68:	e8 71 f9 ff ff       	call   c00104de <Device::~Device()>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	90                   	nop
c0010b71:	83 c4 0c             	add    esp,0xc
c0010b74:	c3                   	ret    
c0010b75:	90                   	nop

c0010b76 <FPU::~FPU()>:
c0010b76:	83 ec 0c             	sub    esp,0xc
c0010b79:	83 ec 0c             	sub    esp,0xc
c0010b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b80:	e8 cd ff ff ff       	call   c0010b52 <FPU::~FPU()>
c0010b85:	83 c4 10             	add    esp,0x10
c0010b88:	83 ec 08             	sub    esp,0x8
c0010b8b:	68 58 01 00 00       	push   0x158
c0010b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b94:	e8 64 e5 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0010b99:	83 c4 10             	add    esp,0x10
c0010b9c:	83 c4 0c             	add    esp,0xc
c0010b9f:	c3                   	ret    

c0010ba0 <setupFPU()>:
c0010ba0:	53                   	push   ebx
c0010ba1:	83 ec 08             	sub    esp,0x8
c0010ba4:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ba9:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010bb0:	74 19                	je     c0010bcb <setupFPU()+0x2b>
c0010bb2:	83 ec 0c             	sub    esp,0xc
c0010bb5:	68 58 01 00 00       	push   0x158
c0010bba:	e8 2f e5 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0010bbf:	89 c3                	mov    ebx,eax
c0010bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bc4:	e8 97 d5 00 00       	call   c001e160 <AVX::AVX()>
c0010bc9:	eb 5b                	jmp    c0010c26 <setupFPU()+0x86>
c0010bcb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bd1:	84 c0                	test   al,al
c0010bd3:	79 19                	jns    c0010bee <setupFPU()+0x4e>
c0010bd5:	83 ec 0c             	sub    esp,0xc
c0010bd8:	68 58 01 00 00       	push   0x158
c0010bdd:	e8 0c e5 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0010be2:	89 c3                	mov    ebx,eax
c0010be4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010be7:	e8 9a d6 00 00       	call   c001e286 <SSE::SSE()>
c0010bec:	eb 38                	jmp    c0010c26 <setupFPU()+0x86>
c0010bee:	a8 20                	test   al,0x20
c0010bf0:	74 19                	je     c0010c0b <setupFPU()+0x6b>
c0010bf2:	83 ec 0c             	sub    esp,0xc
c0010bf5:	68 58 01 00 00       	push   0x158
c0010bfa:	e8 ef e4 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0010bff:	89 c3                	mov    ebx,eax
c0010c01:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c04:	e8 e7 d5 00 00       	call   c001e1f0 <MMX::MMX()>
c0010c09:	eb 1b                	jmp    c0010c26 <setupFPU()+0x86>
c0010c0b:	a8 10                	test   al,0x10
c0010c0d:	74 1c                	je     c0010c2b <setupFPU()+0x8b>
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	68 58 01 00 00       	push   0x158
c0010c17:	e8 d2 e4 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0010c1c:	89 c3                	mov    ebx,eax
c0010c1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c21:	e8 ee d6 00 00       	call   c001e314 <x87::x87()>
c0010c26:	83 c4 10             	add    esp,0x10
c0010c29:	eb 2c                	jmp    c0010c57 <setupFPU()+0xb7>
c0010c2b:	83 ec 0c             	sub    esp,0xc
c0010c2e:	31 db                	xor    ebx,ebx
c0010c30:	68 28 1d 02 c0       	push   0xc0021d28
c0010c35:	e8 e9 e5 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0010c3a:	e8 a7 3c 00 00       	call   c00148e6 <thisCPU()>
c0010c3f:	e8 a2 3c 00 00       	call   c00148e6 <thisCPU()>
c0010c44:	e8 1f ef 00 00       	call   c001fb68 <CPU::readCR0()>
c0010c49:	83 c8 04             	or     eax,0x4
c0010c4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c4f:	e8 26 ef 00 00       	call   c001fb7a <CPU::writeCR0(unsigned long)>
c0010c54:	83 c4 10             	add    esp,0x10
c0010c57:	83 c4 08             	add    esp,0x8
c0010c5a:	89 d8                	mov    eax,ebx
c0010c5c:	5b                   	pop    ebx
c0010c5d:	c3                   	ret    

c0010c5e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c66:	c1 e0 04             	shl    eax,0x4
c0010c69:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c6d:	8d 50 10             	lea    edx,[eax+0x10]
c0010c70:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c76:	74 08                	je     c0010c80 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c78:	83 c0 04             	add    eax,0x4
c0010c7b:	39 d0                	cmp    eax,edx
c0010c7d:	75 f1                	jne    c0010c70 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c7f:	c3                   	ret    
c0010c80:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c8a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c94:	eb e2                	jmp    c0010c78 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c96 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c96:	57                   	push   edi
c0010c97:	31 c0                	xor    eax,eax
c0010c99:	56                   	push   esi
c0010c9a:	53                   	push   ebx
c0010c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ca3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010ca7:	89 da                	mov    edx,ebx
c0010ca9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010cad:	c1 e2 04             	shl    edx,0x4
c0010cb0:	01 ca                	add    edx,ecx
c0010cb2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010cba:	74 16                	je     c0010cd2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010cbc:	40                   	inc    eax
c0010cbd:	83 f8 04             	cmp    eax,0x4
c0010cc0:	75 f0                	jne    c0010cb2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010cc2:	c7 44 24 10 6c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d6c
c0010cca:	5b                   	pop    ebx
c0010ccb:	5e                   	pop    esi
c0010ccc:	5f                   	pop    edi
c0010ccd:	e9 80 4d 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c0010cd2:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cd5:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cd8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010cde:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010ce4:	5b                   	pop    ebx
c0010ce5:	5e                   	pop    esi
c0010ce6:	5f                   	pop    edi
c0010ce7:	c3                   	ret    

c0010ce8 <doubleFault(regs*, void*)>:
c0010ce8:	55                   	push   ebp
c0010ce9:	89 e5                	mov    ebp,esp
c0010ceb:	83 ec 08             	sub    esp,0x8
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	68 a7 1d 02 c0       	push   0xc0021da7
c0010cf6:	e8 57 4d 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010cfb:	83 c4 10             	add    esp,0x10
c0010cfe:	90                   	nop
c0010cff:	c9                   	leave  
c0010d00:	c3                   	ret    
c0010d01:	90                   	nop

c0010d02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010d02:	56                   	push   esi
c0010d03:	53                   	push   ebx
c0010d04:	50                   	push   eax
c0010d05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d09:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d0d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d12:	75 35                	jne    c0010d49 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010d14:	8d 43 20             	lea    eax,[ebx+0x20]
c0010d17:	31 d2                	xor    edx,edx
c0010d19:	89 c1                	mov    ecx,eax
c0010d1b:	c1 e1 04             	shl    ecx,0x4
c0010d1e:	01 f1                	add    ecx,esi
c0010d20:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d28:	74 3e                	je     c0010d68 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d2a:	42                   	inc    edx
c0010d2b:	83 fa 04             	cmp    edx,0x4
c0010d2e:	75 f0                	jne    c0010d20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	68 ec 1d 02 c0       	push   0xc0021dec
c0010d38:	e8 15 4d 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010d3d:	83 c4 10             	add    esp,0x10
c0010d40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d45:	5a                   	pop    edx
c0010d46:	5b                   	pop    ebx
c0010d47:	5e                   	pop    esi
c0010d48:	c3                   	ret    
c0010d49:	83 ec 0c             	sub    esp,0xc
c0010d4c:	56                   	push   esi
c0010d4d:	e8 c8 fb ff ff       	call   c001091a <Device::getName()>
c0010d52:	83 c4 10             	add    esp,0x10
c0010d55:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d58:	75 ba                	jne    c0010d14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d5a:	83 fb 0f             	cmp    ebx,0xf
c0010d5d:	7f 29                	jg     c0010d88 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d5f:	0f b6 9b 00 3f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc100]
c0010d66:	eb ac                	jmp    c0010d14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d68:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d6f:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d72:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d7c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d82:	89 d8                	mov    eax,ebx
c0010d84:	5a                   	pop    edx
c0010d85:	5b                   	pop    ebx
c0010d86:	5e                   	pop    esi
c0010d87:	c3                   	ret    
c0010d88:	83 ec 0c             	sub    esp,0xc
c0010d8b:	68 b4 1d 02 c0       	push   0xc0021db4
c0010d90:	e8 bd 4c 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	e9 77 ff ff ff       	jmp    c0010d14 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d9d:	90                   	nop

c0010d9e <InterruptController::clearAllHandlers(int, bool)>:
c0010d9e:	56                   	push   esi
c0010d9f:	53                   	push   ebx
c0010da0:	52                   	push   edx
c0010da1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010da5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010da9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010dae:	75 61                	jne    c0010e11 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010db0:	8d 46 20             	lea    eax,[esi+0x20]
c0010db3:	c1 e6 04             	shl    esi,0x4
c0010db6:	c1 e0 04             	shl    eax,0x4
c0010db9:	01 de                	add    esi,ebx
c0010dbb:	01 d8                	add    eax,ebx
c0010dbd:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010dc7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010dd1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010ddb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010de5:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010def:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010df9:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010e03:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010e0d:	58                   	pop    eax
c0010e0e:	5b                   	pop    ebx
c0010e0f:	5e                   	pop    esi
c0010e10:	c3                   	ret    
c0010e11:	83 ec 0c             	sub    esp,0xc
c0010e14:	53                   	push   ebx
c0010e15:	e8 00 fb ff ff       	call   c001091a <Device::getName()>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e20:	75 8e                	jne    c0010db0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e22:	83 fe 0f             	cmp    esi,0xf
c0010e25:	7f 09                	jg     c0010e30 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e27:	0f b6 b6 00 3f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc100]
c0010e2e:	eb 80                	jmp    c0010db0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e30:	83 ec 0c             	sub    esp,0xc
c0010e33:	68 28 1e 02 c0       	push   0xc0021e28
c0010e38:	e8 15 4c 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	e9 6b ff ff ff       	jmp    c0010db0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e45:	90                   	nop

c0010e46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e46:	56                   	push   esi
c0010e47:	53                   	push   ebx
c0010e48:	52                   	push   edx
c0010e49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e51:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e56:	75 3a                	jne    c0010e92 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e5c:	8d 50 20             	lea    edx,[eax+0x20]
c0010e5f:	c1 e2 04             	shl    edx,0x4
c0010e62:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e65:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e69:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e6f:	74 0b                	je     c0010e7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e71:	83 c0 04             	add    eax,0x4
c0010e74:	39 d0                	cmp    eax,edx
c0010e76:	75 f1                	jne    c0010e69 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e78:	58                   	pop    eax
c0010e79:	5b                   	pop    ebx
c0010e7a:	5e                   	pop    esi
c0010e7b:	c3                   	ret    
c0010e7c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e86:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e90:	eb df                	jmp    c0010e71 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e92:	83 ec 0c             	sub    esp,0xc
c0010e95:	56                   	push   esi
c0010e96:	e8 7f fa ff ff       	call   c001091a <Device::getName()>
c0010e9b:	83 c4 10             	add    esp,0x10
c0010e9e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010ea1:	75 b5                	jne    c0010e58 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ea3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010ea8:	7f 11                	jg     c0010ebb <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010eaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010eae:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0010eb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010eb9:	eb 9d                	jmp    c0010e58 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ebb:	83 ec 0c             	sub    esp,0xc
c0010ebe:	68 28 1e 02 c0       	push   0xc0021e28
c0010ec3:	e8 8a 4b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0010ec8:	83 c4 10             	add    esp,0x10
c0010ecb:	eb 8b                	jmp    c0010e58 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010ecd <nmiHandler(regs*, void*)>:
c0010ecd:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ed6:	e9 5b a8 ff ff       	jmp    c000b736 <Computer::handleNMI()>

c0010edb <int_handler>:
c0010edb:	55                   	push   ebp
c0010edc:	57                   	push   edi
c0010edd:	56                   	push   esi
c0010ede:	53                   	push   ebx
c0010edf:	83 ec 0c             	sub    esp,0xc
c0010ee2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ee6:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010eed:	74 0b                	je     c0010efa <int_handler+0x1f>
c0010eef:	fa                   	cli    
c0010ef0:	f4                   	hlt    
c0010ef1:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010ef8:	75 f5                	jne    c0010eef <int_handler+0x14>
c0010efa:	e8 e7 39 00 00       	call   c00148e6 <thisCPU()>
c0010eff:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010f02:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010f08:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f0b:	83 f8 17             	cmp    eax,0x17
c0010f0e:	77 13                	ja     c0010f23 <int_handler+0x48>
c0010f10:	83 ec 08             	sub    esp,0x8
c0010f13:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f15:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f18:	0f b6 c0             	movzx  eax,al
c0010f1b:	50                   	push   eax
c0010f1c:	57                   	push   edi
c0010f1d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	83 c3 15             	add    ebx,0x15
c0010f26:	c1 e3 04             	shl    ebx,0x4
c0010f29:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f2d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f34:	31 db                	xor    ebx,ebx
c0010f36:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f3a:	85 c0                	test   eax,eax
c0010f3c:	74 13                	je     c0010f51 <int_handler+0x76>
c0010f3e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f41:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f45:	74 1c                	je     c0010f63 <int_handler+0x88>
c0010f47:	83 ec 08             	sub    esp,0x8
c0010f4a:	52                   	push   edx
c0010f4b:	56                   	push   esi
c0010f4c:	ff d0                	call   eax
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	43                   	inc    ebx
c0010f52:	83 fb 04             	cmp    ebx,0x4
c0010f55:	75 df                	jne    c0010f36 <int_handler+0x5b>
c0010f57:	83 c4 0c             	add    esp,0xc
c0010f5a:	31 c0                	xor    eax,eax
c0010f5c:	5b                   	pop    ebx
c0010f5d:	31 d2                	xor    edx,edx
c0010f5f:	5e                   	pop    esi
c0010f60:	5f                   	pop    edi
c0010f61:	5d                   	pop    ebp
c0010f62:	c3                   	ret    
c0010f63:	83 ec 08             	sub    esp,0x8
c0010f66:	52                   	push   edx
c0010f67:	56                   	push   esi
c0010f68:	ff d0                	call   eax
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	83 c4 0c             	add    esp,0xc
c0010f70:	5b                   	pop    ebx
c0010f71:	5e                   	pop    esi
c0010f72:	5f                   	pop    edi
c0010f73:	5d                   	pop    ebp
c0010f74:	c3                   	ret    
c0010f75:	90                   	nop

c0010f76 <InterruptController::InterruptController(char const*)>:
c0010f76:	83 ec 1c             	sub    esp,0x1c
c0010f79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f7d:	83 ec 08             	sub    esp,0x8
c0010f80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f84:	50                   	push   eax
c0010f85:	e8 9e f8 ff ff       	call   c0010828 <Device::Device(char const*)>
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0010f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f96:	89 10                	mov    DWORD PTR [eax],edx
c0010f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f9c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010fa6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fae:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010fb6:	7f 5e                	jg     c0011016 <InterruptController::InterruptController(char const*)+0xa0>
c0010fb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fc0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fc5:	7f 49                	jg     c0011010 <InterruptController::InterruptController(char const*)+0x9a>
c0010fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fcb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fcf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fda:	01 ca                	add    edx,ecx
c0010fdc:	83 c2 54             	add    edx,0x54
c0010fdf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010feb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010ff6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ffa:	01 ca                	add    edx,ecx
c0010ffc:	81 c2 54 04 00 00    	add    edx,0x454
c0011002:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001100a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001100e:	eb b0                	jmp    c0010fc0 <InterruptController::InterruptController(char const*)+0x4a>
c0011010:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011014:	eb 98                	jmp    c0010fae <InterruptController::InterruptController(char const*)+0x38>
c0011016:	90                   	nop
c0011017:	83 c4 1c             	add    esp,0x1c
c001101a:	c3                   	ret    
c001101b:	90                   	nop

c001101c <InterruptController::~InterruptController()>:
c001101c:	83 ec 0c             	sub    esp,0xc
c001101f:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0011024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011028:	89 10                	mov    DWORD PTR [eax],edx
c001102a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	50                   	push   eax
c0011032:	e8 a7 f4 ff ff       	call   c00104de <Device::~Device()>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	90                   	nop
c001103b:	83 c4 0c             	add    esp,0xc
c001103e:	c3                   	ret    
c001103f:	90                   	nop

c0011040 <InterruptController::~InterruptController()>:
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	83 ec 0c             	sub    esp,0xc
c0011046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104a:	e8 cd ff ff ff       	call   c001101c <InterruptController::~InterruptController()>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	83 ec 08             	sub    esp,0x8
c0011055:	68 58 21 00 00       	push   0x2158
c001105a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001105e:	e8 9a e0 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	83 c4 0c             	add    esp,0xc
c0011069:	c3                   	ret    

c001106a <displayDebugInfo(regs*)>:
c001106a:	55                   	push   ebp
c001106b:	57                   	push   edi
c001106c:	56                   	push   esi
c001106d:	53                   	push   ebx
c001106e:	83 ec 24             	sub    esp,0x24
c0011071:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011075:	0f 20 c2             	mov    edx,cr0
c0011078:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001107c:	0f 20 d7             	mov    edi,cr2
c001107f:	0f 20 de             	mov    esi,cr3
c0011082:	0f 20 e5             	mov    ebp,cr4
c0011085:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011088:	68 62 1e 02 c0       	push   0xc0021e62
c001108d:	e8 91 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011092:	58                   	pop    eax
c0011093:	5a                   	pop    edx
c0011094:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011097:	68 6d 1e 02 c0       	push   0xc0021e6d
c001109c:	e8 82 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00110a1:	59                   	pop    ecx
c00110a2:	58                   	pop    eax
c00110a3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00110a6:	68 78 1e 02 c0       	push   0xc0021e78
c00110ab:	e8 73 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00110b0:	58                   	pop    eax
c00110b1:	5a                   	pop    edx
c00110b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110b5:	68 83 1e 02 c0       	push   0xc0021e83
c00110ba:	e8 64 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00110bf:	59                   	pop    ecx
c00110c0:	58                   	pop    eax
c00110c1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110c4:	68 8e 1e 02 c0       	push   0xc0021e8e
c00110c9:	e8 55 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00110ce:	58                   	pop    eax
c00110cf:	5a                   	pop    edx
c00110d0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110d3:	68 99 1e 02 c0       	push   0xc0021e99
c00110d8:	e8 46 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00110dd:	59                   	pop    ecx
c00110de:	58                   	pop    eax
c00110df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110e2:	68 a4 1e 02 c0       	push   0xc0021ea4
c00110e7:	e8 37 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00110ec:	58                   	pop    eax
c00110ed:	5a                   	pop    edx
c00110ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110f1:	68 af 1e 02 c0       	push   0xc0021eaf
c00110f6:	e8 28 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00110fb:	59                   	pop    ecx
c00110fc:	58                   	pop    eax
c00110fd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011100:	68 ba 1e 02 c0       	push   0xc0021eba
c0011105:	e8 19 e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001110a:	58                   	pop    eax
c001110b:	5a                   	pop    edx
c001110c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001110f:	68 c9 1e 02 c0       	push   0xc0021ec9
c0011114:	e8 0a e1 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011119:	59                   	pop    ecx
c001111a:	58                   	pop    eax
c001111b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001111e:	68 d4 1e 02 c0       	push   0xc0021ed4
c0011123:	e8 fb e0 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011128:	58                   	pop    eax
c0011129:	5a                   	pop    edx
c001112a:	57                   	push   edi
c001112b:	68 df 1e 02 c0       	push   0xc0021edf
c0011130:	e8 ee e0 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011135:	59                   	pop    ecx
c0011136:	58                   	pop    eax
c0011137:	56                   	push   esi
c0011138:	68 ea 1e 02 c0       	push   0xc0021eea
c001113d:	e8 e1 e0 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011142:	58                   	pop    eax
c0011143:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011148:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001114e:	e8 00 c2 ff ff       	call   c000d353 <setActiveTerminal(VgaText*)>
c0011153:	58                   	pop    eax
c0011154:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011157:	5a                   	pop    edx
c0011158:	c1 e0 05             	shl    eax,0x5
c001115b:	05 60 3c 02 c0       	add    eax,0xc0023c60
c0011160:	50                   	push   eax
c0011161:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011166:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001116c:	e8 03 c6 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011171:	59                   	pop    ecx
c0011172:	58                   	pop    eax
c0011173:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011178:	68 f5 1e 02 c0       	push   0xc0021ef5
c001117d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011183:	e8 ec c5 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011188:	58                   	pop    eax
c0011189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001118e:	5a                   	pop    edx
c001118f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011192:	83 c0 0c             	add    eax,0xc
c0011195:	50                   	push   eax
c0011196:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001119b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a1:	e8 ce c5 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c00111a6:	59                   	pop    ecx
c00111a7:	58                   	pop    eax
c00111a8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111ad:	68 fe 1e 02 c0       	push   0xc0021efe
c00111b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b8:	e8 b7 c5 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c00111bd:	58                   	pop    eax
c00111be:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111c3:	5a                   	pop    edx
c00111c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111cd:	e8 c8 c5 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c00111d2:	59                   	pop    ecx
c00111d3:	58                   	pop    eax
c00111d4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111d9:	68 06 1f 02 c0       	push   0xc0021f06
c00111de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e4:	e8 8b c5 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c00111e9:	58                   	pop    eax
c00111ea:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111ef:	5a                   	pop    edx
c00111f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f9:	e8 9c c5 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c00111fe:	59                   	pop    ecx
c00111ff:	58                   	pop    eax
c0011200:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011205:	68 0e 1f 02 c0       	push   0xc0021f0e
c001120a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011210:	e8 5f c5 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011215:	58                   	pop    eax
c0011216:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001121b:	5a                   	pop    edx
c001121c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001121f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011225:	e8 70 c5 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c001122a:	59                   	pop    ecx
c001122b:	58                   	pop    eax
c001122c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011231:	68 16 1f 02 c0       	push   0xc0021f16
c0011236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001123c:	e8 33 c5 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011241:	58                   	pop    eax
c0011242:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011247:	5a                   	pop    edx
c0011248:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001124b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011251:	e8 44 c5 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0011256:	59                   	pop    ecx
c0011257:	58                   	pop    eax
c0011258:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001125d:	68 1e 1f 02 c0       	push   0xc0021f1e
c0011262:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011268:	e8 07 c5 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c001126d:	58                   	pop    eax
c001126e:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011273:	5a                   	pop    edx
c0011274:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011277:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001127d:	e8 18 c5 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0011282:	59                   	pop    ecx
c0011283:	58                   	pop    eax
c0011284:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011289:	68 26 1f 02 c0       	push   0xc0021f26
c001128e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011294:	e8 db c4 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011299:	58                   	pop    eax
c001129a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001129f:	5a                   	pop    edx
c00112a0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00112a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a9:	e8 ec c4 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c00112ae:	59                   	pop    ecx
c00112af:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112b4:	5b                   	pop    ebx
c00112b5:	68 2e 1f 02 c0       	push   0xc0021f2e
c00112ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c0:	e8 af c4 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c00112c5:	58                   	pop    eax
c00112c6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112cb:	5a                   	pop    edx
c00112cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112d0:	52                   	push   edx
c00112d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112d7:	e8 be c4 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c00112dc:	59                   	pop    ecx
c00112dd:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112e2:	5b                   	pop    ebx
c00112e3:	68 37 1f 02 c0       	push   0xc0021f37
c00112e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ee:	e8 81 c4 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c00112f3:	58                   	pop    eax
c00112f4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112f9:	5a                   	pop    edx
c00112fa:	57                   	push   edi
c00112fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011301:	e8 94 c4 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0011306:	59                   	pop    ecx
c0011307:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001130c:	5b                   	pop    ebx
c001130d:	68 3f 1f 02 c0       	push   0xc0021f3f
c0011312:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011318:	e8 57 c4 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c001131d:	5f                   	pop    edi
c001131e:	58                   	pop    eax
c001131f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011324:	56                   	push   esi
c0011325:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001132b:	e8 6a c4 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0011330:	58                   	pop    eax
c0011331:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011336:	5a                   	pop    edx
c0011337:	68 47 1f 02 c0       	push   0xc0021f47
c001133c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011342:	e8 2d c4 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011347:	59                   	pop    ecx
c0011348:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001134d:	5b                   	pop    ebx
c001134e:	55                   	push   ebp
c001134f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011355:	e8 40 c4 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c001135a:	5e                   	pop    esi
c001135b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011360:	5f                   	pop    edi
c0011361:	68 4f 1f 02 c0       	push   0xc0021f4f
c0011366:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001136c:	e8 03 c4 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011371:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011376:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001137c:	e8 02 e8 00 00       	call   c001fb83 <CPU::readDR0()>
c0011381:	5d                   	pop    ebp
c0011382:	5a                   	pop    edx
c0011383:	50                   	push   eax
c0011384:	53                   	push   ebx
c0011385:	e8 10 c4 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c001138a:	59                   	pop    ecx
c001138b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011390:	5b                   	pop    ebx
c0011391:	68 58 1f 02 c0       	push   0xc0021f58
c0011396:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001139c:	e8 d3 c3 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c00113a1:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113a6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113ac:	e8 e4 e7 00 00       	call   c001fb95 <CPU::readDR1()>
c00113b1:	5e                   	pop    esi
c00113b2:	5f                   	pop    edi
c00113b3:	50                   	push   eax
c00113b4:	53                   	push   ebx
c00113b5:	e8 e0 c3 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c00113ba:	5d                   	pop    ebp
c00113bb:	58                   	pop    eax
c00113bc:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113c1:	68 60 1f 02 c0       	push   0xc0021f60
c00113c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113cc:	e8 a3 c3 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c00113d1:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113d6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113dc:	e8 c6 e7 00 00       	call   c001fba7 <CPU::readDR2()>
c00113e1:	5a                   	pop    edx
c00113e2:	59                   	pop    ecx
c00113e3:	50                   	push   eax
c00113e4:	53                   	push   ebx
c00113e5:	e8 b0 c3 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c00113ea:	5b                   	pop    ebx
c00113eb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113f0:	5e                   	pop    esi
c00113f1:	68 68 1f 02 c0       	push   0xc0021f68
c00113f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113fc:	e8 73 c3 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011401:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011406:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001140c:	e8 a8 e7 00 00       	call   c001fbb9 <CPU::readDR3()>
c0011411:	5f                   	pop    edi
c0011412:	5d                   	pop    ebp
c0011413:	50                   	push   eax
c0011414:	53                   	push   ebx
c0011415:	e8 80 c3 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c001141a:	58                   	pop    eax
c001141b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011420:	5a                   	pop    edx
c0011421:	68 70 1f 02 c0       	push   0xc0021f70
c0011426:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001142c:	e8 43 c3 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011431:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011436:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001143c:	e8 8a e7 00 00       	call   c001fbcb <CPU::readDR6()>
c0011441:	59                   	pop    ecx
c0011442:	5e                   	pop    esi
c0011443:	50                   	push   eax
c0011444:	53                   	push   ebx
c0011445:	e8 50 c3 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c001144a:	5f                   	pop    edi
c001144b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011450:	5d                   	pop    ebp
c0011451:	68 78 1f 02 c0       	push   0xc0021f78
c0011456:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001145c:	e8 13 c3 ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0011461:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011466:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001146c:	e8 6c e7 00 00       	call   c001fbdd <CPU::readDR7()>
c0011471:	5a                   	pop    edx
c0011472:	59                   	pop    ecx
c0011473:	50                   	push   eax
c0011474:	53                   	push   ebx
c0011475:	e8 20 c3 ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c001147a:	fa                   	cli    
c001147b:	f4                   	hlt    
c001147c:	83 c4 10             	add    esp,0x10
c001147f:	eb fe                	jmp    c001147f <displayDebugInfo(regs*)+0x415>

c0011481 <x87EmulHandler(regs*, void*)>:
c0011481:	53                   	push   ebx
c0011482:	83 ec 08             	sub    esp,0x8
c0011485:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c001148a:	85 c0                	test   eax,eax
c001148c:	74 15                	je     c00114a3 <x87EmulHandler(regs*, void*)+0x22>
c001148e:	83 ec 0c             	sub    esp,0xc
c0011491:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011495:	ff d0                	call   eax
c0011497:	83 c4 10             	add    esp,0x10
c001149a:	84 c0                	test   al,al
c001149c:	74 2f                	je     c00114cd <x87EmulHandler(regs*, void*)+0x4c>
c001149e:	83 c4 08             	add    esp,0x8
c00114a1:	5b                   	pop    ebx
c00114a2:	c3                   	ret    
c00114a3:	83 ec 08             	sub    esp,0x8
c00114a6:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c00114ac:	6a 01                	push   0x1
c00114ae:	68 80 1f 02 c0       	push   0xc0021f80
c00114b3:	e8 bd 6f 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c00114b8:	5a                   	pop    edx
c00114b9:	59                   	pop    ecx
c00114ba:	53                   	push   ebx
c00114bb:	50                   	push   eax
c00114bc:	e8 7a 71 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c00114c1:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	85 c0                	test   eax,eax
c00114cb:	75 c1                	jne    c001148e <x87EmulHandler(regs*, void*)+0xd>
c00114cd:	83 ec 0c             	sub    esp,0xc
c00114d0:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114d5:	e8 49 dd ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00114da:	58                   	pop    eax
c00114db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114df:	e8 86 fb ff ff       	call   c001106a <displayDebugInfo(regs*)>

c00114e4 <gpFault(regs*, void*)>:
c00114e4:	53                   	push   ebx
c00114e5:	83 ec 14             	sub    esp,0x14
c00114e8:	c7 05 30 49 02 c0 ed 98 01 c0 	mov    DWORD PTR ds:0xc0024930,0xc00198ed
c00114f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114f6:	53                   	push   ebx
c00114f7:	e8 f1 83 00 00       	call   c00198ed <Vm::faultHandler(regs*)>
c00114fc:	83 c4 10             	add    esp,0x10
c00114ff:	84 c0                	test   al,al
c0011501:	74 05                	je     c0011508 <gpFault(regs*, void*)+0x24>
c0011503:	83 c4 08             	add    esp,0x8
c0011506:	5b                   	pop    ebx
c0011507:	c3                   	ret    
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	68 9d 1f 02 c0       	push   0xc0021f9d
c0011510:	e8 0e dd ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011515:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011518:	e8 4d fb ff ff       	call   c001106a <displayDebugInfo(regs*)>

c001151d <pgFault(regs*, void*)>:
c001151d:	83 ec 18             	sub    esp,0x18
c0011520:	68 b8 1f 02 c0       	push   0xc0021fb8
c0011525:	e8 f9 dc ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001152a:	58                   	pop    eax
c001152b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001152f:	e8 36 fb ff ff       	call   c001106a <displayDebugInfo(regs*)>

c0011534 <otherISRHandler(regs*, void*)>:
c0011534:	53                   	push   ebx
c0011535:	83 ec 0c             	sub    esp,0xc
c0011538:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001153c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001153f:	50                   	push   eax
c0011540:	50                   	push   eax
c0011541:	68 c5 1f 02 c0       	push   0xc0021fc5
c0011546:	e8 d8 dc ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001154b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001154e:	e8 17 fb ff ff       	call   c001106a <displayDebugInfo(regs*)>

c0011553 <opcodeFault(regs*, void*)>:
c0011553:	55                   	push   ebp
c0011554:	89 e5                	mov    ebp,esp
c0011556:	56                   	push   esi
c0011557:	53                   	push   ebx
c0011558:	83 ec 40             	sub    esp,0x40
c001155b:	e8 86 33 00 00       	call   c00148e6 <thisCPU()>
c0011560:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011566:	84 c0                	test   al,al
c0011568:	74 24                	je     c001158e <opcodeFault(regs*, void*)+0x3b>
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	68 e4 1f 02 c0       	push   0xc0021fe4
c0011572:	e8 ac dc ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011577:	83 c4 10             	add    esp,0x10
c001157a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011580:	8d 50 19             	lea    edx,[eax+0x19]
c0011583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011586:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011589:	e9 77 05 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5b2>
c001158e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011591:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011594:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011597:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001159b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00115a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115ab:	8a 00                	mov    al,BYTE PTR [eax]
c00115ad:	3c f0                	cmp    al,0xf0
c00115af:	75 17                	jne    c00115c8 <opcodeFault(regs*, void*)+0x75>
c00115b1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115ba:	8d 50 01             	lea    edx,[eax+0x1]
c00115bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c3:	e9 da 00 00 00       	jmp    c00116a2 <opcodeFault(regs*, void*)+0x14f>
c00115c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115cb:	8a 00                	mov    al,BYTE PTR [eax]
c00115cd:	3c f2                	cmp    al,0xf2
c00115cf:	74 09                	je     c00115da <opcodeFault(regs*, void*)+0x87>
c00115d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115d4:	8a 00                	mov    al,BYTE PTR [eax]
c00115d6:	3c f3                	cmp    al,0xf3
c00115d8:	75 1b                	jne    c00115f5 <opcodeFault(regs*, void*)+0xa2>
c00115da:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115e7:	8d 50 01             	lea    edx,[eax+0x1]
c00115ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115f0:	e9 ad 00 00 00       	jmp    c00116a2 <opcodeFault(regs*, void*)+0x14f>
c00115f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115f8:	8a 00                	mov    al,BYTE PTR [eax]
c00115fa:	3c 66                	cmp    al,0x66
c00115fc:	75 1f                	jne    c001161d <opcodeFault(regs*, void*)+0xca>
c00115fe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011602:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0011606:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001160c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001160f:	8d 50 01             	lea    edx,[eax+0x1]
c0011612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011615:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011618:	e9 85 00 00 00       	jmp    c00116a2 <opcodeFault(regs*, void*)+0x14f>
c001161d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011620:	8a 00                	mov    al,BYTE PTR [eax]
c0011622:	3c 67                	cmp    al,0x67
c0011624:	75 18                	jne    c001163e <opcodeFault(regs*, void*)+0xeb>
c0011626:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001162a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001162d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011630:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011633:	8d 50 01             	lea    edx,[eax+0x1]
c0011636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011639:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001163c:	eb 64                	jmp    c00116a2 <opcodeFault(regs*, void*)+0x14f>
c001163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011641:	8a 00                	mov    al,BYTE PTR [eax]
c0011643:	3c 2e                	cmp    al,0x2e
c0011645:	74 09                	je     c0011650 <opcodeFault(regs*, void*)+0xfd>
c0011647:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001164a:	8a 00                	mov    al,BYTE PTR [eax]
c001164c:	3c 3e                	cmp    al,0x3e
c001164e:	75 18                	jne    c0011668 <opcodeFault(regs*, void*)+0x115>
c0011650:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011654:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001165d:	8d 50 01             	lea    edx,[eax+0x1]
c0011660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011663:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011666:	eb 3a                	jmp    c00116a2 <opcodeFault(regs*, void*)+0x14f>
c0011668:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001166b:	8a 00                	mov    al,BYTE PTR [eax]
c001166d:	3c 36                	cmp    al,0x36
c001166f:	74 1b                	je     c001168c <opcodeFault(regs*, void*)+0x139>
c0011671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011674:	8a 00                	mov    al,BYTE PTR [eax]
c0011676:	3c 26                	cmp    al,0x26
c0011678:	74 12                	je     c001168c <opcodeFault(regs*, void*)+0x139>
c001167a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001167d:	8a 00                	mov    al,BYTE PTR [eax]
c001167f:	3c 64                	cmp    al,0x64
c0011681:	74 09                	je     c001168c <opcodeFault(regs*, void*)+0x139>
c0011683:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011686:	8a 00                	mov    al,BYTE PTR [eax]
c0011688:	3c 65                	cmp    al,0x65
c001168a:	75 16                	jne    c00116a2 <opcodeFault(regs*, void*)+0x14f>
c001168c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011690:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011696:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011699:	8d 50 01             	lea    edx,[eax+0x1]
c001169c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a5:	8a 00                	mov    al,BYTE PTR [eax]
c00116a7:	3c 0f                	cmp    al,0xf
c00116a9:	0f 85 ad 00 00 00    	jne    c001175c <opcodeFault(regs*, void*)+0x209>
c00116af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116b2:	40                   	inc    eax
c00116b3:	8a 00                	mov    al,BYTE PTR [eax]
c00116b5:	3c c2                	cmp    al,0xc2
c00116b7:	74 0e                	je     c00116c7 <opcodeFault(regs*, void*)+0x174>
c00116b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116bc:	40                   	inc    eax
c00116bd:	8a 00                	mov    al,BYTE PTR [eax]
c00116bf:	3c c3                	cmp    al,0xc3
c00116c1:	0f 85 95 00 00 00    	jne    c001175c <opcodeFault(regs*, void*)+0x209>
c00116c7:	83 ec 0c             	sub    esp,0xc
c00116ca:	68 07 20 02 c0       	push   0xc0022007
c00116cf:	e8 4f db ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116dd:	8d 50 01             	lea    edx,[eax+0x1]
c00116e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116e6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116ec:	8a 00                	mov    al,BYTE PTR [eax]
c00116ee:	8d 50 fe             	lea    edx,[eax-0x2]
c00116f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116f4:	88 10                	mov    BYTE PTR [eax],dl
c00116f6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116f9:	50                   	push   eax
c00116fa:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116fd:	50                   	push   eax
c00116fe:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0011701:	50                   	push   eax
c0011702:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011705:	e8 48 41 00 00       	call   c0015852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001170a:	83 c4 10             	add    esp,0x10
c001170d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011710:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011713:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011716:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011719:	01 d0                	add    eax,edx
c001171b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001171e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011721:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011724:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011727:	48                   	dec    eax
c0011728:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001172b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001172e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011731:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011737:	83 ec 04             	sub    esp,0x4
c001173a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001173d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011740:	50                   	push   eax
c0011741:	e8 0a ea fe ff       	call   c0000150 <voodooXADD>
c0011746:	83 c4 10             	add    esp,0x10
c0011749:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001174c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001174f:	01 c2                	add    edx,eax
c0011751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011754:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011757:	e9 a9 03 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5b2>
c001175c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001175f:	8a 00                	mov    al,BYTE PTR [eax]
c0011761:	3c 0f                	cmp    al,0xf
c0011763:	0f 85 8b 01 00 00    	jne    c00118f4 <opcodeFault(regs*, void*)+0x3a1>
c0011769:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001176c:	40                   	inc    eax
c001176d:	8a 00                	mov    al,BYTE PTR [eax]
c001176f:	3c c7                	cmp    al,0xc7
c0011771:	0f 86 7d 01 00 00    	jbe    c00118f4 <opcodeFault(regs*, void*)+0x3a1>
c0011777:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001177a:	40                   	inc    eax
c001177b:	8a 00                	mov    al,BYTE PTR [eax]
c001177d:	3c cf                	cmp    al,0xcf
c001177f:	0f 87 6f 01 00 00    	ja     c00118f4 <opcodeFault(regs*, void*)+0x3a1>
c0011785:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011788:	40                   	inc    eax
c0011789:	8a 00                	mov    al,BYTE PTR [eax]
c001178b:	83 c0 38             	add    eax,0x38
c001178e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0011791:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011795:	75 0b                	jne    c00117a2 <opcodeFault(regs*, void*)+0x24f>
c0011797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001179d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117a0:	eb 75                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c00117a2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00117a6:	75 0b                	jne    c00117b3 <opcodeFault(regs*, void*)+0x260>
c00117a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00117ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117b1:	eb 64                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c00117b3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117b7:	75 0b                	jne    c00117c4 <opcodeFault(regs*, void*)+0x271>
c00117b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117c2:	eb 53                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c00117c4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117c8:	75 0b                	jne    c00117d5 <opcodeFault(regs*, void*)+0x282>
c00117ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117d3:	eb 42                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c00117d5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117d9:	75 0b                	jne    c00117e6 <opcodeFault(regs*, void*)+0x293>
c00117db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117de:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117e4:	eb 31                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c00117e6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117ea:	75 0b                	jne    c00117f7 <opcodeFault(regs*, void*)+0x2a4>
c00117ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ef:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117f5:	eb 20                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c00117f7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117fb:	75 0b                	jne    c0011808 <opcodeFault(regs*, void*)+0x2b5>
c00117fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011800:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011803:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011806:	eb 0f                	jmp    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c0011808:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001180c:	75 09                	jne    c0011817 <opcodeFault(regs*, void*)+0x2c4>
c001180e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011811:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011814:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011817:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001181b:	74 10                	je     c001182d <opcodeFault(regs*, void*)+0x2da>
c001181d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011824:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001182b:	eb 2d                	jmp    c001185a <opcodeFault(regs*, void*)+0x307>
c001182d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011830:	c1 e0 18             	shl    eax,0x18
c0011833:	89 c2                	mov    edx,eax
c0011835:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011838:	c1 e0 08             	shl    eax,0x8
c001183b:	25 00 00 ff 00       	and    eax,0xff0000
c0011840:	09 c2                	or     edx,eax
c0011842:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011845:	c1 e8 08             	shr    eax,0x8
c0011848:	25 00 ff 00 00       	and    eax,0xff00
c001184d:	09 c2                	or     edx,eax
c001184f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011852:	c1 e8 18             	shr    eax,0x18
c0011855:	09 d0                	or     eax,edx
c0011857:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001185a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001185e:	75 0b                	jne    c001186b <opcodeFault(regs*, void*)+0x318>
c0011860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011863:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011866:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011869:	eb 75                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c001186b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001186f:	75 0b                	jne    c001187c <opcodeFault(regs*, void*)+0x329>
c0011871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011874:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011877:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001187a:	eb 64                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c001187c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0011880:	75 0b                	jne    c001188d <opcodeFault(regs*, void*)+0x33a>
c0011882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011885:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011888:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001188b:	eb 53                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c001188d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0011891:	75 0b                	jne    c001189e <opcodeFault(regs*, void*)+0x34b>
c0011893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011896:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001189c:	eb 42                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c001189e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00118a2:	75 0b                	jne    c00118af <opcodeFault(regs*, void*)+0x35c>
c00118a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118aa:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00118ad:	eb 31                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c00118af:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00118b3:	75 0b                	jne    c00118c0 <opcodeFault(regs*, void*)+0x36d>
c00118b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118be:	eb 20                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c00118c0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118c4:	75 0b                	jne    c00118d1 <opcodeFault(regs*, void*)+0x37e>
c00118c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118cc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118cf:	eb 0f                	jmp    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c00118d1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118d5:	75 09                	jne    c00118e0 <opcodeFault(regs*, void*)+0x38d>
c00118d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118dd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118e6:	8d 50 02             	lea    edx,[eax+0x2]
c00118e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118ef:	e9 11 02 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5b2>
c00118f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118f7:	8a 00                	mov    al,BYTE PTR [eax]
c00118f9:	3c 0f                	cmp    al,0xf
c00118fb:	0f 85 76 01 00 00    	jne    c0011a77 <opcodeFault(regs*, void*)+0x524>
c0011901:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011904:	40                   	inc    eax
c0011905:	8a 00                	mov    al,BYTE PTR [eax]
c0011907:	3c c7                	cmp    al,0xc7
c0011909:	0f 85 68 01 00 00    	jne    c0011a77 <opcodeFault(regs*, void*)+0x524>
c001190f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011915:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011918:	8d 50 01             	lea    edx,[eax+0x1]
c001191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011921:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011924:	50                   	push   eax
c0011925:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011928:	50                   	push   eax
c0011929:	8d 45 bc             	lea    eax,[ebp-0x44]
c001192c:	50                   	push   eax
c001192d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011930:	e8 1d 3f 00 00       	call   c0015852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001193b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001193e:	83 f0 01             	xor    eax,0x1
c0011941:	84 c0                	test   al,al
c0011943:	0f 84 2e 01 00 00    	je     c0011a77 <opcodeFault(regs*, void*)+0x524>
c0011949:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001194c:	3c 01                	cmp    al,0x1
c001194e:	0f 85 23 01 00 00    	jne    c0011a77 <opcodeFault(regs*, void*)+0x524>
c0011954:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011957:	83 f0 01             	xor    eax,0x1
c001195a:	84 c0                	test   al,al
c001195c:	0f 84 15 01 00 00    	je     c0011a77 <opcodeFault(regs*, void*)+0x524>
c0011962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011965:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011968:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001196b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011972:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011975:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011978:	89 c2                	mov    edx,eax
c001197a:	b8 00 00 00 00       	mov    eax,0x0
c001197f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011982:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011988:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001198b:	ba 00 00 00 00       	mov    edx,0x0
c0011990:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0011993:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011999:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001199c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001199f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00119a6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119a9:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119ac:	89 c2                	mov    edx,eax
c00119ae:	b8 00 00 00 00       	mov    eax,0x0
c00119b3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00119b6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00119b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119bf:	ba 00 00 00 00       	mov    edx,0x0
c00119c4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119c7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119ca:	e8 8c 70 00 00       	call   c0018a5b <lockScheduler()>
c00119cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119d2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d7:	89 c1                	mov    ecx,eax
c00119d9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119dc:	89 cb                	mov    ebx,ecx
c00119de:	89 d0                	mov    eax,edx
c00119e0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119e3:	89 c6                	mov    esi,eax
c00119e5:	89 f0                	mov    eax,esi
c00119e7:	09 d8                	or     eax,ebx
c00119e9:	85 c0                	test   eax,eax
c00119eb:	75 21                	jne    c0011a0e <opcodeFault(regs*, void*)+0x4bb>
c00119ed:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119f0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119f3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119f6:	89 01                	mov    DWORD PTR [ecx],eax
c00119f8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a01:	83 c8 40             	or     eax,0x40
c0011a04:	89 c2                	mov    edx,eax
c0011a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a09:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a0c:	eb 3e                	jmp    c0011a4c <opcodeFault(regs*, void*)+0x4f9>
c0011a0e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011a11:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a16:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011a19:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011a1c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a22:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a25:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a28:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a2b:	89 d0                	mov    eax,edx
c0011a2d:	31 d2                	xor    edx,edx
c0011a2f:	89 c3                	mov    ebx,eax
c0011a31:	89 d6                	mov    esi,edx
c0011a33:	89 da                	mov    edx,ebx
c0011a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a38:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a41:	83 e0 bf             	and    eax,0xffffffbf
c0011a44:	89 c2                	mov    edx,eax
c0011a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a49:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a4c:	e8 0c 70 00 00       	call   c0018a5d <unlockScheduler()>
c0011a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a57:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a5a:	01 c2                	add    edx,eax
c0011a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a62:	83 ec 0c             	sub    esp,0xc
c0011a65:	68 16 20 02 c0       	push   0xc0022016
c0011a6a:	e8 b4 d7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011a6f:	83 c4 10             	add    esp,0x10
c0011a72:	e9 8e 00 00 00       	jmp    c0011b05 <opcodeFault(regs*, void*)+0x5b2>
c0011a77:	83 ec 0c             	sub    esp,0xc
c0011a7a:	68 29 20 02 c0       	push   0xc0022029
c0011a7f:	e8 9f d7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011a84:	83 c4 10             	add    esp,0x10
c0011a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a8a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a93:	c1 e0 04             	shl    eax,0x4
c0011a96:	01 d0                	add    eax,edx
c0011a98:	83 c0 03             	add    eax,0x3
c0011a9b:	8a 00                	mov    al,BYTE PTR [eax]
c0011a9d:	0f b6 d8             	movzx  ebx,al
c0011aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aac:	c1 e0 04             	shl    eax,0x4
c0011aaf:	01 d0                	add    eax,edx
c0011ab1:	83 c0 02             	add    eax,0x2
c0011ab4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ab6:	0f b6 c8             	movzx  ecx,al
c0011ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011abc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac5:	c1 e0 04             	shl    eax,0x4
c0011ac8:	01 d0                	add    eax,edx
c0011aca:	40                   	inc    eax
c0011acb:	8a 00                	mov    al,BYTE PTR [eax]
c0011acd:	0f b6 d0             	movzx  edx,al
c0011ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011adc:	c1 e0 04             	shl    eax,0x4
c0011adf:	01 f0                	add    eax,esi
c0011ae1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae3:	0f b6 c0             	movzx  eax,al
c0011ae6:	83 ec 0c             	sub    esp,0xc
c0011ae9:	53                   	push   ebx
c0011aea:	51                   	push   ecx
c0011aeb:	52                   	push   edx
c0011aec:	50                   	push   eax
c0011aed:	68 3c 20 02 c0       	push   0xc002203c
c0011af2:	e8 2c d7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011af7:	83 c4 20             	add    esp,0x20
c0011afa:	83 ec 0c             	sub    esp,0xc
c0011afd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011b00:	e8 65 f5 ff ff       	call   c001106a <displayDebugInfo(regs*)>
c0011b05:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011b08:	5b                   	pop    ebx
c0011b09:	5e                   	pop    esi
c0011b0a:	5d                   	pop    ebp
c0011b0b:	c3                   	ret    

c0011b0c <displayProgramFault(char const*)>:
c0011b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b14:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011b1a:	85 c0                	test   eax,eax
c0011b1c:	74 15                	je     c0011b33 <displayProgramFault(char const*)+0x27>
c0011b1e:	83 ec 0c             	sub    esp,0xc
c0011b21:	6a 04                	push   0x4
c0011b23:	6a 0f                	push   0xf
c0011b25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b29:	50                   	push   eax
c0011b2a:	e8 05 b9 ff ff       	call   c000d434 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b2f:	83 c4 1c             	add    esp,0x1c
c0011b32:	c3                   	ret    
c0011b33:	c3                   	ret    

c0011b34 <setupInterruptController()>:
c0011b34:	55                   	push   ebp
c0011b35:	89 e5                	mov    ebp,esp
c0011b37:	53                   	push   ebx
c0011b38:	83 ec 14             	sub    esp,0x14
c0011b3b:	e8 a3 2d 00 00       	call   c00148e3 <getCPUNumber()>
c0011b40:	85 c0                	test   eax,eax
c0011b42:	0f 95 c0             	setne  al
c0011b45:	84 c0                	test   al,al
c0011b47:	74 56                	je     c0011b9f <setupInterruptController()+0x6b>
c0011b49:	83 ec 0c             	sub    esp,0xc
c0011b4c:	68 58 21 00 00       	push   0x2158
c0011b51:	e8 98 d5 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0011b56:	83 c4 10             	add    esp,0x10
c0011b59:	89 c3                	mov    ebx,eax
c0011b5b:	83 ec 0c             	sub    esp,0xc
c0011b5e:	53                   	push   ebx
c0011b5f:	e8 6a c9 00 00       	call   c001e4ce <APIC::APIC()>
c0011b64:	83 c4 10             	add    esp,0x10
c0011b67:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b6a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b72:	83 c0 08             	add    eax,0x8
c0011b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b77:	6a 00                	push   0x0
c0011b79:	6a 00                	push   0x0
c0011b7b:	6a 00                	push   0x0
c0011b7d:	52                   	push   edx
c0011b7e:	ff d0                	call   eax
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b88:	83 ec 08             	sub    esp,0x8
c0011b8b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b8e:	50                   	push   eax
c0011b8f:	e8 a4 ea ff ff       	call   c0010638 <Device::addChild(Device*)>
c0011b94:	83 c4 10             	add    esp,0x10
c0011b97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b9a:	e9 48 03 00 00       	jmp    c0011ee7 <setupInterruptController()+0x3b3>
c0011b9f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011ba4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011baa:	83 e0 01             	and    eax,0x1
c0011bad:	84 c0                	test   al,al
c0011baf:	0f 95 c0             	setne  al
c0011bb2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	68 58 21 00 00       	push   0x2158
c0011bbd:	e8 2c d5 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	89 c3                	mov    ebx,eax
c0011bc7:	83 ec 0c             	sub    esp,0xc
c0011bca:	53                   	push   ebx
c0011bcb:	e8 f8 cd 00 00       	call   c001e9c8 <PIC::PIC()>
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bd6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bde:	83 c0 08             	add    eax,0x8
c0011be1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be3:	6a 00                	push   0x0
c0011be5:	6a 00                	push   0x0
c0011be7:	6a 00                	push   0x0
c0011be9:	52                   	push   edx
c0011bea:	ff d0                	call   eax
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011bf3:	74 6e                	je     c0011c63 <setupInterruptController()+0x12f>
c0011bf5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bf8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bfd:	83 c0 0c             	add    eax,0xc
c0011c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c02:	6a 00                	push   0x0
c0011c04:	6a 00                	push   0x0
c0011c06:	6a 00                	push   0x0
c0011c08:	52                   	push   edx
c0011c09:	ff d0                	call   eax
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011c12:	74 15                	je     c0011c29 <setupInterruptController()+0xf5>
c0011c14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c19:	83 c0 04             	add    eax,0x4
c0011c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1e:	83 ec 0c             	sub    esp,0xc
c0011c21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c24:	ff d0                	call   eax
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	68 58 21 00 00       	push   0x2158
c0011c31:	e8 b8 d4 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	89 c3                	mov    ebx,eax
c0011c3b:	83 ec 0c             	sub    esp,0xc
c0011c3e:	53                   	push   ebx
c0011c3f:	e8 8a c8 00 00       	call   c001e4ce <APIC::APIC()>
c0011c44:	83 c4 10             	add    esp,0x10
c0011c47:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c4a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c52:	83 c0 08             	add    eax,0x8
c0011c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c57:	6a 00                	push   0x0
c0011c59:	6a 00                	push   0x0
c0011c5b:	6a 00                	push   0x0
c0011c5d:	52                   	push   edx
c0011c5e:	ff d0                	call   eax
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011c68:	83 ec 08             	sub    esp,0x8
c0011c6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c6e:	50                   	push   eax
c0011c6f:	e8 c4 e9 ff ff       	call   c0010638 <Device::addChild(Device*)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c7c:	83 c0 24             	add    eax,0x24
c0011c7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c81:	6a 00                	push   0x0
c0011c83:	68 34 15 01 c0       	push   0xc0011534
c0011c88:	6a 00                	push   0x0
c0011c8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c8d:	ff d0                	call   eax
c0011c8f:	83 c4 10             	add    esp,0x10
c0011c92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c97:	83 c0 24             	add    eax,0x24
c0011c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9c:	6a 00                	push   0x0
c0011c9e:	68 34 15 01 c0       	push   0xc0011534
c0011ca3:	6a 01                	push   0x1
c0011ca5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ca8:	ff d0                	call   eax
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb2:	83 c0 24             	add    eax,0x24
c0011cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb7:	6a 00                	push   0x0
c0011cb9:	68 cd 0e 01 c0       	push   0xc0010ecd
c0011cbe:	6a 02                	push   0x2
c0011cc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cc3:	ff d0                	call   eax
c0011cc5:	83 c4 10             	add    esp,0x10
c0011cc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ccd:	83 c0 24             	add    eax,0x24
c0011cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd2:	6a 00                	push   0x0
c0011cd4:	68 34 15 01 c0       	push   0xc0011534
c0011cd9:	6a 03                	push   0x3
c0011cdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cde:	ff d0                	call   eax
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce8:	83 c0 24             	add    eax,0x24
c0011ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ced:	6a 00                	push   0x0
c0011cef:	68 34 15 01 c0       	push   0xc0011534
c0011cf4:	6a 04                	push   0x4
c0011cf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cf9:	ff d0                	call   eax
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d03:	83 c0 24             	add    eax,0x24
c0011d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d08:	6a 00                	push   0x0
c0011d0a:	68 34 15 01 c0       	push   0xc0011534
c0011d0f:	6a 05                	push   0x5
c0011d11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d14:	ff d0                	call   eax
c0011d16:	83 c4 10             	add    esp,0x10
c0011d19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d1e:	83 c0 24             	add    eax,0x24
c0011d21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d23:	6a 00                	push   0x0
c0011d25:	68 53 15 01 c0       	push   0xc0011553
c0011d2a:	6a 06                	push   0x6
c0011d2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d2f:	ff d0                	call   eax
c0011d31:	83 c4 10             	add    esp,0x10
c0011d34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d39:	83 c0 24             	add    eax,0x24
c0011d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d3e:	6a 00                	push   0x0
c0011d40:	68 81 14 01 c0       	push   0xc0011481
c0011d45:	6a 07                	push   0x7
c0011d47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d4a:	ff d0                	call   eax
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d54:	83 c0 24             	add    eax,0x24
c0011d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d59:	6a 00                	push   0x0
c0011d5b:	68 e8 0c 01 c0       	push   0xc0010ce8
c0011d60:	6a 08                	push   0x8
c0011d62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d65:	ff d0                	call   eax
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d6f:	83 c0 24             	add    eax,0x24
c0011d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d74:	6a 00                	push   0x0
c0011d76:	68 34 15 01 c0       	push   0xc0011534
c0011d7b:	6a 09                	push   0x9
c0011d7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d80:	ff d0                	call   eax
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8a:	83 c0 24             	add    eax,0x24
c0011d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8f:	6a 00                	push   0x0
c0011d91:	68 34 15 01 c0       	push   0xc0011534
c0011d96:	6a 0a                	push   0xa
c0011d98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d9b:	ff d0                	call   eax
c0011d9d:	83 c4 10             	add    esp,0x10
c0011da0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011da3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da5:	83 c0 24             	add    eax,0x24
c0011da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011daa:	6a 00                	push   0x0
c0011dac:	68 34 15 01 c0       	push   0xc0011534
c0011db1:	6a 0b                	push   0xb
c0011db3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011db6:	ff d0                	call   eax
c0011db8:	83 c4 10             	add    esp,0x10
c0011dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc0:	83 c0 24             	add    eax,0x24
c0011dc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc5:	6a 00                	push   0x0
c0011dc7:	68 34 15 01 c0       	push   0xc0011534
c0011dcc:	6a 0c                	push   0xc
c0011dce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dd1:	ff d0                	call   eax
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ddb:	83 c0 24             	add    eax,0x24
c0011dde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de0:	6a 00                	push   0x0
c0011de2:	68 e4 14 01 c0       	push   0xc00114e4
c0011de7:	6a 0d                	push   0xd
c0011de9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dec:	ff d0                	call   eax
c0011dee:	83 c4 10             	add    esp,0x10
c0011df1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df6:	83 c0 24             	add    eax,0x24
c0011df9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dfb:	6a 00                	push   0x0
c0011dfd:	68 1d 15 01 c0       	push   0xc001151d
c0011e02:	6a 0e                	push   0xe
c0011e04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e07:	ff d0                	call   eax
c0011e09:	83 c4 10             	add    esp,0x10
c0011e0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e11:	83 c0 24             	add    eax,0x24
c0011e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e16:	6a 00                	push   0x0
c0011e18:	68 34 15 01 c0       	push   0xc0011534
c0011e1d:	6a 0f                	push   0xf
c0011e1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e22:	ff d0                	call   eax
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e2c:	83 c0 24             	add    eax,0x24
c0011e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e31:	6a 00                	push   0x0
c0011e33:	68 34 15 01 c0       	push   0xc0011534
c0011e38:	6a 10                	push   0x10
c0011e3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e3d:	ff d0                	call   eax
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e47:	83 c0 24             	add    eax,0x24
c0011e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e4c:	6a 00                	push   0x0
c0011e4e:	68 34 15 01 c0       	push   0xc0011534
c0011e53:	6a 11                	push   0x11
c0011e55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e58:	ff d0                	call   eax
c0011e5a:	83 c4 10             	add    esp,0x10
c0011e5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e62:	83 c0 24             	add    eax,0x24
c0011e65:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e67:	6a 00                	push   0x0
c0011e69:	68 34 15 01 c0       	push   0xc0011534
c0011e6e:	6a 12                	push   0x12
c0011e70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e73:	ff d0                	call   eax
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7d:	83 c0 24             	add    eax,0x24
c0011e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e82:	6a 00                	push   0x0
c0011e84:	68 34 15 01 c0       	push   0xc0011534
c0011e89:	6a 13                	push   0x13
c0011e8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e8e:	ff d0                	call   eax
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e98:	83 c0 24             	add    eax,0x24
c0011e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9d:	6a 00                	push   0x0
c0011e9f:	68 34 15 01 c0       	push   0xc0011534
c0011ea4:	6a 14                	push   0x14
c0011ea6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ea9:	ff d0                	call   eax
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb3:	83 c0 24             	add    eax,0x24
c0011eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb8:	6a 00                	push   0x0
c0011eba:	68 34 15 01 c0       	push   0xc0011534
c0011ebf:	6a 1e                	push   0x1e
c0011ec1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ec4:	ff d0                	call   eax
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ecc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ece:	83 c0 24             	add    eax,0x24
c0011ed1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ed3:	6a 00                	push   0x0
c0011ed5:	68 62 74 01 c0       	push   0xc0017462
c0011eda:	6a 60                	push   0x60
c0011edc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011edf:	ff d0                	call   eax
c0011ee1:	83 c4 10             	add    esp,0x10
c0011ee4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ee7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011eea:	c9                   	leave  
c0011eeb:	c3                   	ret    

c0011eec <InterruptController::convertLegacyIRQNumber(int)>:
c0011eec:	55                   	push   ebp
c0011eed:	89 e5                	mov    ebp,esp
c0011eef:	83 ec 08             	sub    esp,0x8
c0011ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ef5:	83 ec 0c             	sub    esp,0xc
c0011ef8:	50                   	push   eax
c0011ef9:	e8 1c ea ff ff       	call   c001091a <Device::getName()>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	8a 00                	mov    al,BYTE PTR [eax]
c0011f03:	3c 41                	cmp    al,0x41
c0011f05:	0f 94 c0             	sete   al
c0011f08:	84 c0                	test   al,al
c0011f0a:	74 28                	je     c0011f34 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f0c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011f10:	7f 12                	jg     c0011f24 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011f12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f15:	05 00 3f 02 c0       	add    eax,0xc0023f00
c0011f1a:	8a 00                	mov    al,BYTE PTR [eax]
c0011f1c:	0f b6 c0             	movzx  eax,al
c0011f1f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f22:	eb 10                	jmp    c0011f34 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f24:	83 ec 0c             	sub    esp,0xc
c0011f27:	68 b4 1d 02 c0       	push   0xc0021db4
c0011f2c:	e8 21 3b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0011f31:	83 c4 10             	add    esp,0x10
c0011f34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f37:	c9                   	leave  
c0011f38:	c3                   	ret    
c0011f39:	90                   	nop

c0011f3a <startGUI(void*)>:
c0011f3a:	55                   	push   ebp
c0011f3b:	89 e5                	mov    ebp,esp
c0011f3d:	53                   	push   ebx
c0011f3e:	83 ec 04             	sub    esp,0x4
c0011f41:	e8 17 6b 00 00       	call   c0018a5d <unlockScheduler()>
c0011f46:	e8 fb 6a 00 00       	call   c0018a46 <getIRQNestingLevel()>
c0011f4b:	83 ec 08             	sub    esp,0x8
c0011f4e:	50                   	push   eax
c0011f4f:	68 a4 20 02 c0       	push   0xc00220a4
c0011f54:	e8 ca d2 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f62:	83 ec 08             	sub    esp,0x8
c0011f65:	6a 01                	push   0x1
c0011f67:	68 be 20 02 c0       	push   0xc00220be
c0011f6c:	e8 04 65 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	83 ec 08             	sub    esp,0x8
c0011f77:	53                   	push   ebx
c0011f78:	50                   	push   eax
c0011f79:	e8 bd 66 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f87:	83 ec 08             	sub    esp,0x8
c0011f8a:	6a 01                	push   0x1
c0011f8c:	68 d8 20 02 c0       	push   0xc00220d8
c0011f91:	e8 df 64 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0011f96:	83 c4 10             	add    esp,0x10
c0011f99:	83 ec 08             	sub    esp,0x8
c0011f9c:	53                   	push   ebx
c0011f9d:	50                   	push   eax
c0011f9e:	e8 98 66 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	90                   	nop
c0011fa7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011faa:	c9                   	leave  
c0011fab:	c3                   	ret    

c0011fac <sendKeyToTerminal(unsigned char)>:
c0011fac:	55                   	push   ebp
c0011fad:	89 e5                	mov    ebp,esp
c0011faf:	83 ec 28             	sub    esp,0x28
c0011fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011fb8:	8b 15 64 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024864
c0011fbe:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011fc1:	25 ff 00 00 00       	and    eax,0xff
c0011fc6:	83 ec 08             	sub    esp,0x8
c0011fc9:	50                   	push   eax
c0011fca:	52                   	push   edx
c0011fcb:	e8 a2 b9 ff ff       	call   c000d972 <VgaText::receiveKey(unsigned char)>
c0011fd0:	83 c4 10             	add    esp,0x10
c0011fd3:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fd7:	75 41                	jne    c001201a <sendKeyToTerminal(unsigned char)+0x6e>
c0011fd9:	e8 a4 6a 00 00       	call   c0018a82 <lockStuff()>
c0011fde:	a1 40 49 02 c0       	mov    eax,ds:0xc0024940
c0011fe3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fe6:	c7 05 40 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024940,0x0
c0011ff0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011ff4:	74 1f                	je     c0012015 <sendKeyToTerminal(unsigned char)+0x69>
c0011ff6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ff9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011ffc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011fff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0012005:	83 ec 0c             	sub    esp,0xc
c0012008:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001200b:	e8 6f 70 00 00       	call   c001907f <unblockTask(ThreadControlBlock*)>
c0012010:	83 c4 10             	add    esp,0x10
c0012013:	eb db                	jmp    c0011ff0 <sendKeyToTerminal(unsigned char)+0x44>
c0012015:	e8 0f 6e 00 00       	call   c0018e29 <unlockStuff()>
c001201a:	90                   	nop
c001201b:	c9                   	leave  
c001201c:	c3                   	ret    

c001201d <sendKeyboardToken(KeyboardToken)>:
c001201d:	55                   	push   ebp
c001201e:	89 e5                	mov    ebp,esp
c0012020:	83 ec 18             	sub    esp,0x18
c0012023:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0012026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012029:	25 ff ff 00 00       	and    eax,0xffff
c001202e:	83 f2 01             	xor    edx,0x1
c0012031:	88 90 60 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6a0],dl
c0012037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001203a:	66 3d 03 02          	cmp    ax,0x203
c001203e:	75 07                	jne    c0012047 <sendKeyboardToken(KeyboardToken)+0x2a>
c0012040:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012045:	84 c0                	test   al,al
c0012047:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001204b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001204e:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012053:	38 c2                	cmp    dl,al
c0012055:	74 1e                	je     c0012075 <sendKeyboardToken(KeyboardToken)+0x58>
c0012057:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001205a:	a2 68 4d 02 c0       	mov    ds:0xc0024d68,al
c001205f:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012064:	25 ff 00 00 00       	and    eax,0xff
c0012069:	83 ec 0c             	sub    esp,0xc
c001206c:	50                   	push   eax
c001206d:	e8 6c ab ff ff       	call   c000cbde <setTerminalScrollLock(bool)>
c0012072:	83 c4 10             	add    esp,0x10
c0012075:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0012078:	84 c0                	test   al,al
c001207a:	0f 84 ae 00 00 00    	je     c001212e <sendKeyboardToken(KeyboardToken)+0x111>
c0012080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012083:	66 3d 10 03          	cmp    ax,0x310
c0012087:	75 06                	jne    c001208f <sendKeyboardToken(KeyboardToken)+0x72>
c0012089:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001208f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012092:	66 3d 11 03          	cmp    ax,0x311
c0012096:	75 06                	jne    c001209e <sendKeyboardToken(KeyboardToken)+0x81>
c0012098:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001209e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a1:	66 3d 12 03          	cmp    ax,0x312
c00120a5:	75 06                	jne    c00120ad <sendKeyboardToken(KeyboardToken)+0x90>
c00120a7:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00120ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b0:	66 3d 13 03          	cmp    ax,0x313
c00120b4:	75 06                	jne    c00120bc <sendKeyboardToken(KeyboardToken)+0x9f>
c00120b6:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00120bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120bf:	66 3d 14 03          	cmp    ax,0x314
c00120c3:	75 06                	jne    c00120cb <sendKeyboardToken(KeyboardToken)+0xae>
c00120c5:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ce:	66 3d 15 03          	cmp    ax,0x315
c00120d2:	75 06                	jne    c00120da <sendKeyboardToken(KeyboardToken)+0xbd>
c00120d4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120dd:	66 3d 16 03          	cmp    ax,0x316
c00120e1:	75 06                	jne    c00120e9 <sendKeyboardToken(KeyboardToken)+0xcc>
c00120e3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ec:	66 3d 17 03          	cmp    ax,0x317
c00120f0:	75 06                	jne    c00120f8 <sendKeyboardToken(KeyboardToken)+0xdb>
c00120f2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120fb:	66 3d 18 03          	cmp    ax,0x318
c00120ff:	75 06                	jne    c0012107 <sendKeyboardToken(KeyboardToken)+0xea>
c0012101:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0012107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001210a:	66 3d 19 03          	cmp    ax,0x319
c001210e:	75 06                	jne    c0012116 <sendKeyboardToken(KeyboardToken)+0xf9>
c0012110:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012119:	66 3d 1a 03          	cmp    ax,0x31a
c001211d:	0f 85 c9 00 00 00    	jne    c00121ec <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012123:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012129:	e9 be 00 00 00       	jmp    c00121ec <sendKeyboardToken(KeyboardToken)+0x1cf>
c001212e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012131:	66 3d 10 03          	cmp    ax,0x310
c0012135:	75 0a                	jne    c0012141 <sendKeyboardToken(KeyboardToken)+0x124>
c0012137:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001213d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012144:	66 3d 11 03          	cmp    ax,0x311
c0012148:	75 0a                	jne    c0012154 <sendKeyboardToken(KeyboardToken)+0x137>
c001214a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012150:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012157:	66 3d 12 03          	cmp    ax,0x312
c001215b:	75 0a                	jne    c0012167 <sendKeyboardToken(KeyboardToken)+0x14a>
c001215d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012163:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001216a:	66 3d 13 03          	cmp    ax,0x313
c001216e:	75 0a                	jne    c001217a <sendKeyboardToken(KeyboardToken)+0x15d>
c0012170:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012176:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001217a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001217d:	66 3d 14 03          	cmp    ax,0x314
c0012181:	75 0a                	jne    c001218d <sendKeyboardToken(KeyboardToken)+0x170>
c0012183:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012189:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001218d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012190:	66 3d 15 03          	cmp    ax,0x315
c0012194:	75 0a                	jne    c00121a0 <sendKeyboardToken(KeyboardToken)+0x183>
c0012196:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001219c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a3:	66 3d 16 03          	cmp    ax,0x316
c00121a7:	75 0a                	jne    c00121b3 <sendKeyboardToken(KeyboardToken)+0x196>
c00121a9:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00121af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b6:	66 3d 17 03          	cmp    ax,0x317
c00121ba:	75 0a                	jne    c00121c6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c00121bc:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121c9:	66 3d 18 03          	cmp    ax,0x318
c00121cd:	75 0a                	jne    c00121d9 <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121cf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121dc:	66 3d 19 03          	cmp    ax,0x319
c00121e0:	75 0a                	jne    c00121ec <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121e2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121ef:	66 3d 00 02          	cmp    ax,0x200
c00121f3:	75 2a                	jne    c001221f <sendKeyboardToken(KeyboardToken)+0x202>
c00121f5:	a0 60 4d 02 c0       	mov    al,ds:0xc0024d60
c00121fa:	83 f0 01             	xor    eax,0x1
c00121fd:	84 c0                	test   al,al
c00121ff:	74 1e                	je     c001221f <sendKeyboardToken(KeyboardToken)+0x202>
c0012201:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0012206:	6a 01                	push   0x1
c0012208:	6a 00                	push   0x0
c001220a:	68 3a 1f 01 c0       	push   0xc0011f3a
c001220f:	50                   	push   eax
c0012210:	e8 7b 69 00 00       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c0012215:	83 c4 10             	add    esp,0x10
c0012218:	c6 05 60 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d60,0x1
c001221f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012222:	66 3d 1d 03          	cmp    ax,0x31d
c0012226:	75 06                	jne    c001222e <sendKeyboardToken(KeyboardToken)+0x211>
c0012228:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001222e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012231:	66 3d 1c 03          	cmp    ax,0x31c
c0012235:	75 06                	jne    c001223d <sendKeyboardToken(KeyboardToken)+0x220>
c0012237:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001223d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012240:	66 3d 1b 03          	cmp    ax,0x31b
c0012244:	75 06                	jne    c001224c <sendKeyboardToken(KeyboardToken)+0x22f>
c0012246:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001224c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001224f:	66 3d 1e 03          	cmp    ax,0x31e
c0012253:	75 06                	jne    c001225b <sendKeyboardToken(KeyboardToken)+0x23e>
c0012255:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001225b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001225e:	66 3d 1f 03          	cmp    ax,0x31f
c0012262:	75 06                	jne    c001226a <sendKeyboardToken(KeyboardToken)+0x24d>
c0012264:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001226a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001226d:	66 3d 1a 03          	cmp    ax,0x31a
c0012271:	75 06                	jne    c0012279 <sendKeyboardToken(KeyboardToken)+0x25c>
c0012273:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012279:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001227d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012280:	83 f0 01             	xor    eax,0x1
c0012283:	84 c0                	test   al,al
c0012285:	74 7b                	je     c0012302 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0012287:	a0 61 4a 02 c0       	mov    al,ds:0xc0024a61
c001228c:	84 c0                	test   al,al
c001228e:	74 43                	je     c00122d3 <sendKeyboardToken(KeyboardToken)+0x2b6>
c0012290:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012294:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012298:	74 2d                	je     c00122c7 <sendKeyboardToken(KeyboardToken)+0x2aa>
c001229a:	8b 15 64 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d64
c00122a0:	89 d0                	mov    eax,edx
c00122a2:	c1 e0 02             	shl    eax,0x2
c00122a5:	01 d0                	add    eax,edx
c00122a7:	01 c0                	add    eax,eax
c00122a9:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122b1:	25 ff ff 00 00       	and    eax,0xffff
c00122b6:	8d 50 d0             	lea    edx,[eax-0x30]
c00122b9:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122be:	01 d0                	add    eax,edx
c00122c0:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122c5:	eb 71                	jmp    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122c7:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122d1:	eb 65                	jmp    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122d3:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122d8:	85 c0                	test   eax,eax
c00122da:	74 1a                	je     c00122f6 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122dc:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122e1:	25 ff 00 00 00       	and    eax,0xff
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 bd fc ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122f6:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c0012300:	eb 36                	jmp    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c0012302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012305:	66 3d 01 01          	cmp    ax,0x101
c0012309:	75 2d                	jne    c0012338 <sendKeyboardToken(KeyboardToken)+0x31b>
c001230b:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012310:	85 c0                	test   eax,eax
c0012312:	74 1a                	je     c001232e <sendKeyboardToken(KeyboardToken)+0x311>
c0012314:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012319:	25 ff 00 00 00       	and    eax,0xff
c001231e:	83 ec 0c             	sub    esp,0xc
c0012321:	50                   	push   eax
c0012322:	e8 85 fc ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c0012327:	83 c4 10             	add    esp,0x10
c001232a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001232e:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c0012338:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001233b:	83 f0 01             	xor    eax,0x1
c001233e:	84 c0                	test   al,al
c0012340:	74 4e                	je     c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c0012342:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012345:	83 f0 01             	xor    eax,0x1
c0012348:	84 c0                	test   al,al
c001234a:	74 44                	je     c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c001234c:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012351:	83 f0 01             	xor    eax,0x1
c0012354:	84 c0                	test   al,al
c0012356:	74 38                	je     c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c0012358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235b:	66 83 f8 1f          	cmp    ax,0x1f
c001235f:	76 09                	jbe    c001236a <sendKeyboardToken(KeyboardToken)+0x34d>
c0012361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012364:	66 83 f8 7e          	cmp    ax,0x7e
c0012368:	76 12                	jbe    c001237c <sendKeyboardToken(KeyboardToken)+0x35f>
c001236a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001236d:	66 83 f8 0a          	cmp    ax,0xa
c0012371:	74 09                	je     c001237c <sendKeyboardToken(KeyboardToken)+0x35f>
c0012373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012376:	66 83 f8 08          	cmp    ax,0x8
c001237a:	75 14                	jne    c0012390 <sendKeyboardToken(KeyboardToken)+0x373>
c001237c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001237f:	25 ff 00 00 00       	and    eax,0xff
c0012384:	83 ec 0c             	sub    esp,0xc
c0012387:	50                   	push   eax
c0012388:	e8 1f fc ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c001238d:	83 c4 10             	add    esp,0x10
c0012390:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012393:	83 f0 01             	xor    eax,0x1
c0012396:	84 c0                	test   al,al
c0012398:	74 51                	je     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c001239a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001239d:	83 f0 01             	xor    eax,0x1
c00123a0:	84 c0                	test   al,al
c00123a2:	74 47                	je     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a4:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c00123a9:	84 c0                	test   al,al
c00123ab:	74 3e                	je     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b0:	66 83 f8 3f          	cmp    ax,0x3f
c00123b4:	76 35                	jbe    c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b9:	66 83 f8 7f          	cmp    ax,0x7f
c00123bd:	77 2c                	ja     c00123eb <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c2:	88 c2                	mov    dl,al
c00123c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c7:	66 83 f8 5f          	cmp    ax,0x5f
c00123cb:	76 04                	jbe    c00123d1 <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123cd:	b0 20                	mov    al,0x20
c00123cf:	eb 02                	jmp    c00123d3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123d1:	b0 00                	mov    al,0x0
c00123d3:	29 c2                	sub    edx,eax
c00123d5:	88 d0                	mov    al,dl
c00123d7:	83 e8 40             	sub    eax,0x40
c00123da:	25 ff 00 00 00       	and    eax,0xff
c00123df:	83 ec 0c             	sub    esp,0xc
c00123e2:	50                   	push   eax
c00123e3:	e8 c4 fb ff ff       	call   c0011fac <sendKeyToTerminal(unsigned char)>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123ee:	66 3d 00 03          	cmp    ax,0x300
c00123f2:	75 0f                	jne    c0012403 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123f4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123f7:	83 f0 01             	xor    eax,0x1
c00123fa:	84 c0                	test   al,al
c00123fc:	74 05                	je     c0012403 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123fe:	e8 02 b0 ff ff       	call   c000d405 <doTerminalCycle()>
c0012403:	90                   	nop
c0012404:	c9                   	leave  
c0012405:	c3                   	ret    

c0012406 <clearInternalKeybuffer(VgaText*)>:
c0012406:	55                   	push   ebp
c0012407:	89 e5                	mov    ebp,esp
c0012409:	83 ec 08             	sub    esp,0x8
c001240c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001240f:	05 34 11 00 00       	add    eax,0x1134
c0012414:	83 ec 0c             	sub    esp,0xc
c0012417:	50                   	push   eax
c0012418:	e8 d2 e2 fe ff       	call   c00006ef <strlen>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012423:	81 c2 34 11 00 00    	add    edx,0x1134
c0012429:	83 ec 04             	sub    esp,0x4
c001242c:	50                   	push   eax
c001242d:	6a 00                	push   0x0
c001242f:	52                   	push   edx
c0012430:	e8 9d e2 fe ff       	call   c00006d2 <memset>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	90                   	nop
c0012439:	c9                   	leave  
c001243a:	c3                   	ret    

c001243b <readKeyboard(VgaText*, char*, unsigned long)>:
c001243b:	55                   	push   ebp
c001243c:	89 e5                	mov    ebp,esp
c001243e:	83 ec 18             	sub    esp,0x18
c0012441:	fb                   	sti    
c0012442:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012449:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001244d:	74 77                	je     c00124c6 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001244f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012452:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012458:	84 c0                	test   al,al
c001245a:	75 02                	jne    c001245e <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c001245c:	eb f1                	jmp    c001244f <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c001245e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012461:	8d 50 01             	lea    edx,[eax+0x1]
c0012464:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012467:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001246a:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0012470:	88 10                	mov    BYTE PTR [eax],dl
c0012472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012475:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001247b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001247e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012481:	05 34 11 00 00       	add    eax,0x1134
c0012486:	83 ec 0c             	sub    esp,0xc
c0012489:	50                   	push   eax
c001248a:	e8 60 e2 fe ff       	call   c00006ef <strlen>
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012495:	81 c2 34 11 00 00    	add    edx,0x1134
c001249b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001249e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00124a1:	81 c2 34 11 00 00    	add    edx,0x1134
c00124a7:	83 ec 04             	sub    esp,0x4
c00124aa:	50                   	push   eax
c00124ab:	51                   	push   ecx
c00124ac:	52                   	push   edx
c00124ad:	e8 b2 e1 fe ff       	call   c0000664 <memmove>
c00124b2:	83 c4 10             	add    esp,0x10
c00124b5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00124b8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00124bb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124bf:	75 88                	jne    c0012449 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124c4:	eb 03                	jmp    c00124c9 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124c9:	c9                   	leave  
c00124ca:	c3                   	ret    
c00124cb:	90                   	nop

c00124cc <Keyboard::Keyboard(char const*)>:
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d3:	83 ec 08             	sub    esp,0x8
c00124d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124da:	50                   	push   eax
c00124db:	e8 48 e3 ff ff       	call   c0010828 <Device::Device(char const*)>
c00124e0:	83 c4 10             	add    esp,0x10
c00124e3:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ec:	89 10                	mov    DWORD PTR [eax],edx
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124fc:	c6 05 44 49 02 c0 01 	mov    BYTE PTR ds:0xc0024944,0x1
c0012503:	90                   	nop
c0012504:	83 c4 0c             	add    esp,0xc
c0012507:	c3                   	ret    

c0012508 <Keyboard::~Keyboard()>:
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	89 10                	mov    DWORD PTR [eax],edx
c0012516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	50                   	push   eax
c001251e:	e8 bb df ff ff       	call   c00104de <Device::~Device()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	90                   	nop
c0012527:	83 c4 0c             	add    esp,0xc
c001252a:	c3                   	ret    
c001252b:	90                   	nop

c001252c <Keyboard::~Keyboard()>:
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012536:	e8 cd ff ff ff       	call   c0012508 <Keyboard::~Keyboard()>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 ec 08             	sub    esp,0x8
c0012541:	68 5c 01 00 00       	push   0x15c
c0012546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254a:	e8 ae cb ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	83 c4 0c             	add    esp,0xc
c0012555:	c3                   	ret    

c0012556 <LogicalDisk::close(int, int, void*)>:
c0012556:	83 c8 ff             	or     eax,0xffffffff
c0012559:	c3                   	ret    

c001255a <LogicalDisk::~LogicalDisk()>:
c001255a:	83 ec 0c             	sub    esp,0xc
c001255d:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012566:	89 10                	mov    DWORD PTR [eax],edx
c0012568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	50                   	push   eax
c0012570:	e8 69 df ff ff       	call   c00104de <Device::~Device()>
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	90                   	nop
c0012579:	83 c4 0c             	add    esp,0xc
c001257c:	c3                   	ret    
c001257d:	90                   	nop

c001257e <LogicalDisk::~LogicalDisk()>:
c001257e:	83 ec 0c             	sub    esp,0xc
c0012581:	83 ec 0c             	sub    esp,0xc
c0012584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012588:	e8 cd ff ff ff       	call   c001255a <LogicalDisk::~LogicalDisk()>
c001258d:	83 c4 10             	add    esp,0x10
c0012590:	83 ec 08             	sub    esp,0x8
c0012593:	68 74 01 00 00       	push   0x174
c0012598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259c:	e8 5c cb ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	83 c4 0c             	add    esp,0xc
c00125a7:	c3                   	ret    

c00125a8 <LogicalDisk::open(int, int, void*)>:
c00125a8:	83 ec 18             	sub    esp,0x18
c00125ab:	68 28 21 02 c0       	push   0xc0022128
c00125b0:	e8 9d 34 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c00125b5:	83 c8 ff             	or     eax,0xffffffff
c00125b8:	83 c4 1c             	add    esp,0x1c
c00125bb:	c3                   	ret    

c00125bc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00125bc:	53                   	push   ebx
c00125bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125c9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125cf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125d5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125db:	77 10                	ja     c00125ed <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125dd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125e3:	89 d3                	mov    ebx,edx
c00125e5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125eb:	72 05                	jb     c00125f2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125ed:	83 c8 ff             	or     eax,0xffffffff
c00125f0:	89 c2                	mov    edx,eax
c00125f2:	5b                   	pop    ebx
c00125f3:	c3                   	ret    

c00125f4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125f4:	56                   	push   esi
c00125f5:	83 c8 ff             	or     eax,0xffffffff
c00125f8:	53                   	push   ebx
c00125f9:	89 c2                	mov    edx,eax
c00125fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012603:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012607:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001260d:	77 27                	ja     c0012636 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001260f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012615:	89 d8                	mov    eax,ebx
c0012617:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001261d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012622:	89 c2                	mov    edx,eax
c0012624:	73 10                	jae    c0012636 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012626:	89 c8                	mov    eax,ecx
c0012628:	89 da                	mov    edx,ebx
c001262a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012630:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012636:	5b                   	pop    ebx
c0012637:	5e                   	pop    esi
c0012638:	c3                   	ret    
c0012639:	90                   	nop

c001263a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001263a:	83 ec 1c             	sub    esp,0x1c
c001263d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012649:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001264d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012651:	89 04 24             	mov    DWORD PTR [esp],eax
c0012654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012658:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001265c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012660:	83 ec 08             	sub    esp,0x8
c0012663:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012667:	50                   	push   eax
c0012668:	e8 bb e1 ff ff       	call   c0010828 <Device::Device(char const*)>
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012679:	89 10                	mov    DWORD PTR [eax],edx
c001267b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001267f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001268a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012695:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001269f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126ab:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00126b1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00126b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126c2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126c8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126d6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126ea:	90                   	nop
c00126eb:	83 c4 1c             	add    esp,0x1c
c00126ee:	c3                   	ret    
c00126ef:	90                   	nop

c00126f0 <LogicalDisk::assignDriveLetter()>:
c00126f0:	55                   	push   ebp
c00126f1:	57                   	push   edi
c00126f2:	56                   	push   esi
c00126f3:	53                   	push   ebx
c00126f4:	83 ec 14             	sub    esp,0x14
c00126f7:	8b 3d 80 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d80
c00126fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012701:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0012705:	8b 3d 84 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d84
c001270b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0012711:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012715:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001271b:	3c 01                	cmp    al,0x1
c001271d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012721:	19 c0                	sbb    eax,eax
c0012723:	83 e0 02             	and    eax,0x2
c0012726:	83 c0 41             	add    eax,0x41
c0012729:	0f be e8             	movsx  ebp,al
c001272c:	3c 43                	cmp    al,0x43
c001272e:	75 10                	jne    c0012740 <LogicalDisk::assignDriveLetter()+0x50>
c0012730:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012737:	75 5d                	jne    c0012796 <LogicalDisk::assignDriveLetter()+0xa6>
c0012739:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001273e:	75 56                	jne    c0012796 <LogicalDisk::assignDriveLetter()+0xa6>
c0012740:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012743:	ba 01 00 00 00       	mov    edx,0x1
c0012748:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001274c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012750:	d3 e2                	shl    edx,cl
c0012752:	89 d7                	mov    edi,edx
c0012754:	89 d6                	mov    esi,edx
c0012756:	c1 ff 1f             	sar    edi,0x1f
c0012759:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001275d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012761:	21 f9                	and    ecx,edi
c0012763:	09 d1                	or     ecx,edx
c0012765:	75 2f                	jne    c0012796 <LogicalDisk::assignDriveLetter()+0xa6>
c0012767:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001276b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001276f:	09 f2                	or     edx,esi
c0012771:	89 15 80 4d 02 c0    	mov    DWORD PTR ds:0xc0024d80,edx
c0012777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001277b:	09 fa                	or     edx,edi
c001277d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0012781:	89 15 84 4d 02 c0    	mov    DWORD PTR ds:0xc0024d84,edx
c0012787:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001278d:	89 1c bd a0 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb260],ebx
c0012794:	eb 08                	jmp    c001279e <LogicalDisk::assignDriveLetter()+0xae>
c0012796:	40                   	inc    eax
c0012797:	45                   	inc    ebp
c0012798:	3c 5b                	cmp    al,0x5b
c001279a:	75 90                	jne    c001272c <LogicalDisk::assignDriveLetter()+0x3c>
c001279c:	31 c0                	xor    eax,eax
c001279e:	83 c4 14             	add    esp,0x14
c00127a1:	5b                   	pop    ebx
c00127a2:	5e                   	pop    esi
c00127a3:	5f                   	pop    edi
c00127a4:	5d                   	pop    ebp
c00127a5:	c3                   	ret    

c00127a6 <LogicalDisk::mount()>:
c00127a6:	56                   	push   esi
c00127a7:	53                   	push   ebx
c00127a8:	51                   	push   ecx
c00127a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127ad:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c00127b3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00127bd:	85 db                	test   ebx,ebx
c00127bf:	74 50                	je     c0012811 <LogicalDisk::mount()+0x6b>
c00127c1:	e8 80 62 00 00       	call   c0018a46 <getIRQNestingLevel()>
c00127c6:	52                   	push   edx
c00127c7:	52                   	push   edx
c00127c8:	50                   	push   eax
c00127c9:	68 4c 21 02 c0       	push   0xc002214c
c00127ce:	e8 50 ca ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00127d3:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127da:	83 c4 0c             	add    esp,0xc
c00127dd:	83 e8 41             	sub    eax,0x41
c00127e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127e2:	50                   	push   eax
c00127e3:	56                   	push   esi
c00127e4:	53                   	push   ebx
c00127e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	84 c0                	test   al,al
c00127ed:	74 08                	je     c00127f7 <LogicalDisk::mount()+0x51>
c00127ef:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127f5:	eb 1c                	jmp    c0012813 <LogicalDisk::mount()+0x6d>
c00127f7:	e8 4a 62 00 00       	call   c0018a46 <getIRQNestingLevel()>
c00127fc:	51                   	push   ecx
c00127fd:	51                   	push   ecx
c00127fe:	50                   	push   eax
c00127ff:	68 67 21 02 c0       	push   0xc0022167
c0012804:	e8 1a ca ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0012809:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001280c:	83 c4 10             	add    esp,0x10
c001280f:	eb ac                	jmp    c00127bd <LogicalDisk::mount()+0x17>
c0012811:	31 c0                	xor    eax,eax
c0012813:	5a                   	pop    edx
c0012814:	5b                   	pop    ebx
c0012815:	5e                   	pop    esi
c0012816:	c3                   	ret    
c0012817:	90                   	nop

c0012818 <LogicalDisk::unmount()>:
c0012818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001281c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012826:	c3                   	ret    
c0012827:	90                   	nop

c0012828 <LogicalDisk::unassignDriveLetter()>:
c0012828:	57                   	push   edi
c0012829:	56                   	push   esi
c001282a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001282e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012835:	84 c9                	test   cl,cl
c0012837:	75 0f                	jne    c0012848 <LogicalDisk::unassignDriveLetter()+0x20>
c0012839:	c7 44 24 0c 82 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022182
c0012841:	5e                   	pop    esi
c0012842:	5f                   	pop    edi
c0012843:	e9 0a 32 00 00       	jmp    c0015a52 <Krnl::panic(char const*)>
c0012848:	83 e9 41             	sub    ecx,0x41
c001284b:	b8 01 00 00 00       	mov    eax,0x1
c0012850:	d3 e0                	shl    eax,cl
c0012852:	89 c7                	mov    edi,eax
c0012854:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001285b:	c1 ff 1f             	sar    edi,0x1f
c001285e:	c7 04 8d a0 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb260],0x0
c0012869:	89 fe                	mov    esi,edi
c001286b:	f7 d6                	not    esi
c001286d:	f7 d0                	not    eax
c001286f:	21 35 84 4d 02 c0    	and    DWORD PTR ds:0xc0024d84,esi
c0012875:	5e                   	pop    esi
c0012876:	21 05 80 4d 02 c0    	and    DWORD PTR ds:0xc0024d80,eax
c001287c:	5f                   	pop    edi
c001287d:	c3                   	ret    

c001287e <LogicalDisk::read(unsigned long long, int, void*)>:
c001287e:	57                   	push   edi
c001287f:	56                   	push   esi
c0012880:	53                   	push   ebx
c0012881:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012885:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012889:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001288d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012891:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012897:	77 41                	ja     c00128da <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012899:	99                   	cdq    
c001289a:	01 c8                	add    eax,ecx
c001289c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00128a2:	11 da                	adc    edx,ebx
c00128a4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00128aa:	19 d7                	sbb    edi,edx
c00128ac:	72 33                	jb     c00128e1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00128ae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00128b4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128c2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128d2:	5b                   	pop    ebx
c00128d3:	5e                   	pop    esi
c00128d4:	5f                   	pop    edi
c00128d5:	e9 9a 09 00 00       	jmp    c0013274 <VCache::read(unsigned long long, int, void*)>
c00128da:	b8 05 00 00 00       	mov    eax,0x5
c00128df:	eb 05                	jmp    c00128e6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128e1:	b8 07 00 00 00       	mov    eax,0x7
c00128e6:	5b                   	pop    ebx
c00128e7:	5e                   	pop    esi
c00128e8:	5f                   	pop    edi
c00128e9:	c3                   	ret    

c00128ea <LogicalDisk::write(unsigned long long, int, void*)>:
c00128ea:	57                   	push   edi
c00128eb:	56                   	push   esi
c00128ec:	53                   	push   ebx
c00128ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128fd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012903:	77 41                	ja     c0012946 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0012905:	99                   	cdq    
c0012906:	01 c8                	add    eax,ecx
c0012908:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001290e:	11 da                	adc    edx,ebx
c0012910:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012916:	19 d7                	sbb    edi,edx
c0012918:	72 33                	jb     c001294d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001291a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012920:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012926:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001292a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001292e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012934:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001293a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001293e:	5b                   	pop    ebx
c001293f:	5e                   	pop    esi
c0012940:	5f                   	pop    edi
c0012941:	e9 4a 08 00 00       	jmp    c0013190 <VCache::write(unsigned long long, int, void*)>
c0012946:	b8 05 00 00 00       	mov    eax,0x5
c001294b:	eb 05                	jmp    c0012952 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001294d:	b8 07 00 00 00       	mov    eax,0x7
c0012952:	5b                   	pop    ebx
c0012953:	5e                   	pop    esi
c0012954:	5f                   	pop    edi
c0012955:	c3                   	ret    

c0012956 <Mouse::Mouse(char const*)>:
c0012956:	83 ec 0c             	sub    esp,0xc
c0012959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295d:	83 ec 08             	sub    esp,0x8
c0012960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012964:	50                   	push   eax
c0012965:	e8 be de ff ff       	call   c0010828 <Device::Device(char const*)>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012976:	89 10                	mov    DWORD PTR [eax],edx
c0012978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001297c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012986:	90                   	nop
c0012987:	83 c4 0c             	add    esp,0xc
c001298a:	c3                   	ret    
c001298b:	90                   	nop

c001298c <Mouse::~Mouse()>:
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012998:	89 10                	mov    DWORD PTR [eax],edx
c001299a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299e:	83 ec 0c             	sub    esp,0xc
c00129a1:	50                   	push   eax
c00129a2:	e8 37 db ff ff       	call   c00104de <Device::~Device()>
c00129a7:	83 c4 10             	add    esp,0x10
c00129aa:	90                   	nop
c00129ab:	83 c4 0c             	add    esp,0xc
c00129ae:	c3                   	ret    
c00129af:	90                   	nop

c00129b0 <Mouse::~Mouse()>:
c00129b0:	83 ec 0c             	sub    esp,0xc
c00129b3:	83 ec 0c             	sub    esp,0xc
c00129b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ba:	e8 cd ff ff ff       	call   c001298c <Mouse::~Mouse()>
c00129bf:	83 c4 10             	add    esp,0x10
c00129c2:	83 ec 08             	sub    esp,0x8
c00129c5:	68 58 01 00 00       	push   0x158
c00129ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129ce:	e8 2a c7 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	83 c4 0c             	add    esp,0xc
c00129d9:	c3                   	ret    

c00129da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129da:	55                   	push   ebp
c00129db:	57                   	push   edi
c00129dc:	56                   	push   esi
c00129dd:	53                   	push   ebx
c00129de:	81 ec 28 01 00 00    	sub    esp,0x128
c00129e4:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129eb:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129f2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129f9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012a00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012a04:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012a08:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a0f:	e8 06 df ff ff       	call   c001091a <Device::getName()>
c0012a14:	5a                   	pop    edx
c0012a15:	59                   	pop    ecx
c0012a16:	50                   	push   eax
c0012a17:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012a1b:	55                   	push   ebp
c0012a1c:	e8 50 dd fe ff       	call   c0000771 <strcpy>
c0012a21:	5b                   	pop    ebx
c0012a22:	58                   	pop    eax
c0012a23:	68 fc 21 02 c0       	push   0xc00221fc
c0012a28:	55                   	push   ebp
c0012a29:	e8 fa dd fe ff       	call   c0000828 <strcat>
c0012a2e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a35:	e8 b4 c6 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0012a3a:	83 c4 0c             	add    esp,0xc
c0012a3d:	89 c3                	mov    ebx,eax
c0012a3f:	57                   	push   edi
c0012a40:	56                   	push   esi
c0012a41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a49:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a50:	55                   	push   ebp
c0012a51:	50                   	push   eax
c0012a52:	e8 e3 fb ff ff       	call   c001263a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a57:	83 c4 14             	add    esp,0x14
c0012a5a:	53                   	push   ebx
c0012a5b:	e8 90 fc ff ff       	call   c00126f0 <LogicalDisk::assignDriveLetter()>
c0012a60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a63:	e8 3e fd ff ff       	call   c00127a6 <LogicalDisk::mount()>
c0012a68:	58                   	pop    eax
c0012a69:	5a                   	pop    edx
c0012a6a:	53                   	push   ebx
c0012a6b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a72:	e8 c1 db ff ff       	call   c0010638 <Device::addChild(Device*)>
c0012a77:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a7d:	5b                   	pop    ebx
c0012a7e:	5e                   	pop    esi
c0012a7f:	5f                   	pop    edi
c0012a80:	5d                   	pop    ebp
c0012a81:	c3                   	ret    

c0012a82 <createPartitionsForDisk(PhysicalDisk*)>:
c0012a82:	55                   	push   ebp
c0012a83:	57                   	push   edi
c0012a84:	56                   	push   esi
c0012a85:	53                   	push   ebx
c0012a86:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a8c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a93:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a99:	3d 00 02 00 00       	cmp    eax,0x200
c0012a9e:	74 27                	je     c0012ac7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012aa0:	83 ec 10             	sub    esp,0x10
c0012aa3:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012aa9:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012aaf:	99                   	cdq    
c0012ab0:	52                   	push   edx
c0012ab1:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012ab5:	50                   	push   eax
c0012ab6:	89 fd                	mov    ebp,edi
c0012ab8:	c1 e6 0a             	shl    esi,0xa
c0012abb:	55                   	push   ebp
c0012abc:	56                   	push   esi
c0012abd:	e8 5a ca 00 00       	call   c001f51c <__udivdi3>
c0012ac2:	e9 b1 00 00 00       	jmp    c0012b78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012ac7:	83 ec 0c             	sub    esp,0xc
c0012aca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012acc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012ad0:	56                   	push   esi
c0012ad1:	6a 01                	push   0x1
c0012ad3:	6a 00                	push   0x0
c0012ad5:	6a 00                	push   0x0
c0012ad7:	53                   	push   ebx
c0012ad8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012adb:	83 c4 20             	add    esp,0x20
c0012ade:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ae6:	75 0a                	jne    c0012af2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012ae8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012af0:	74 2c                	je     c0012b1e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012af2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012af8:	83 ec 10             	sub    esp,0x10
c0012afb:	89 f7                	mov    edi,esi
c0012afd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b03:	c1 ff 1f             	sar    edi,0x1f
c0012b06:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b0c:	57                   	push   edi
c0012b0d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b11:	c1 e0 0a             	shl    eax,0xa
c0012b14:	56                   	push   esi
c0012b15:	52                   	push   edx
c0012b16:	50                   	push   eax
c0012b17:	e8 00 ca 00 00       	call   c001f51c <__udivdi3>
c0012b1c:	eb 5a                	jmp    c0012b78 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b1e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b25:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b2c:	83 e0 7f             	and    eax,0x7f
c0012b2f:	83 e1 7f             	and    ecx,0x7f
c0012b32:	01 c1                	add    ecx,eax
c0012b34:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b3b:	83 e0 7f             	and    eax,0x7f
c0012b3e:	01 c1                	add    ecx,eax
c0012b40:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b47:	83 e0 7f             	and    eax,0x7f
c0012b4a:	00 c1                	add    cl,al
c0012b4c:	74 41                	je     c0012b8f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b54:	83 ec 10             	sub    esp,0x10
c0012b57:	89 f7                	mov    edi,esi
c0012b59:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b5f:	c1 ff 1f             	sar    edi,0x1f
c0012b62:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b68:	57                   	push   edi
c0012b69:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b6d:	c1 e0 0a             	shl    eax,0xa
c0012b70:	56                   	push   esi
c0012b71:	52                   	push   edx
c0012b72:	50                   	push   eax
c0012b73:	e8 a4 c9 00 00       	call   c001f51c <__udivdi3>
c0012b78:	83 c4 14             	add    esp,0x14
c0012b7b:	52                   	push   edx
c0012b7c:	50                   	push   eax
c0012b7d:	6a 00                	push   0x0
c0012b7f:	6a 00                	push   0x0
c0012b81:	53                   	push   ebx
c0012b82:	e8 53 fe ff ff       	call   c00129da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b87:	83 c4 20             	add    esp,0x20
c0012b8a:	e9 79 01 00 00       	jmp    c0012d08 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b8f:	89 f0                	mov    eax,esi
c0012b91:	31 f6                	xor    esi,esi
c0012b93:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b9a:	75 02                	jne    c0012b9e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b9c:	89 f1                	mov    ecx,esi
c0012b9e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012ba5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012bac:	c1 e2 08             	shl    edx,0x8
c0012baf:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012bb7:	c1 e7 10             	shl    edi,0x10
c0012bba:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012bc2:	09 fa                	or     edx,edi
c0012bc4:	83 c0 10             	add    eax,0x10
c0012bc7:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bce:	09 fa                	or     edx,edi
c0012bd0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bd7:	c1 e7 18             	shl    edi,0x18
c0012bda:	09 fa                	or     edx,edi
c0012bdc:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012be0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012be7:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012bee:	c1 e7 10             	shl    edi,0x10
c0012bf1:	c1 e2 08             	shl    edx,0x8
c0012bf4:	09 fa                	or     edx,edi
c0012bf6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012bfd:	09 fa                	or     edx,edi
c0012bff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012c06:	c1 e7 18             	shl    edi,0x18
c0012c09:	09 fa                	or     edx,edi
c0012c0b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012c0f:	46                   	inc    esi
c0012c10:	83 fe 04             	cmp    esi,0x4
c0012c13:	0f 85 7a ff ff ff    	jne    c0012b93 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c1d:	83 f0 01             	xor    eax,0x1
c0012c20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c24:	75 57                	jne    c0012c7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c2a:	83 f0 01             	xor    eax,0x1
c0012c2d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c31:	75 4a                	jne    c0012c7d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c33:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c39:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c3d:	89 f7                	mov    edi,esi
c0012c3f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c47:	c1 ff 1f             	sar    edi,0x1f
c0012c4a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c52:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c58:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c5e:	57                   	push   edi
c0012c5f:	56                   	push   esi
c0012c60:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c64:	c1 e0 0a             	shl    eax,0xa
c0012c67:	52                   	push   edx
c0012c68:	50                   	push   eax
c0012c69:	e8 ae c8 00 00       	call   c001f51c <__udivdi3>
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c79:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c7d:	84 c9                	test   cl,cl
c0012c7f:	74 53                	je     c0012cd4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c81:	0f b6 c9             	movzx  ecx,cl
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c94:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c98:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012ca0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ca4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012cac:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012cb0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012cb4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012cb8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012cbc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012cc0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012cc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012cc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ccc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cd0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cd4:	31 ed                	xor    ebp,ebp
c0012cd6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cda:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012cde:	89 f8                	mov    eax,edi
c0012ce0:	09 f0                	or     eax,esi
c0012ce2:	74 1e                	je     c0012d02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012ce4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012ce8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cec:	89 d1                	mov    ecx,edx
c0012cee:	09 c1                	or     ecx,eax
c0012cf0:	74 10                	je     c0012d02 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	57                   	push   edi
c0012cf6:	56                   	push   esi
c0012cf7:	52                   	push   edx
c0012cf8:	50                   	push   eax
c0012cf9:	53                   	push   ebx
c0012cfa:	e8 db fc ff ff       	call   c00129da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012cff:	83 c4 20             	add    esp,0x20
c0012d02:	45                   	inc    ebp
c0012d03:	83 fd 04             	cmp    ebp,0x4
c0012d06:	75 ce                	jne    c0012cd6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012d08:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012d0e:	5b                   	pop    ebx
c0012d0f:	5e                   	pop    esi
c0012d10:	5f                   	pop    edi
c0012d11:	5d                   	pop    ebp
c0012d12:	c3                   	ret    
c0012d13:	90                   	nop

c0012d14 <Timer::Timer(char const*)>:
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1b:	83 ec 08             	sub    esp,0x8
c0012d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d22:	50                   	push   eax
c0012d23:	e8 00 db ff ff       	call   c0010828 <Device::Device(char const*)>
c0012d28:	83 c4 10             	add    esp,0x10
c0012d2b:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d34:	89 10                	mov    DWORD PTR [eax],edx
c0012d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d3a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d44:	90                   	nop
c0012d45:	83 c4 0c             	add    esp,0xc
c0012d48:	c3                   	ret    
c0012d49:	90                   	nop

c0012d4a <Timer::~Timer()>:
c0012d4a:	83 ec 0c             	sub    esp,0xc
c0012d4d:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d56:	89 10                	mov    DWORD PTR [eax],edx
c0012d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	50                   	push   eax
c0012d60:	e8 79 d7 ff ff       	call   c00104de <Device::~Device()>
c0012d65:	83 c4 10             	add    esp,0x10
c0012d68:	90                   	nop
c0012d69:	83 c4 0c             	add    esp,0xc
c0012d6c:	c3                   	ret    
c0012d6d:	90                   	nop

c0012d6e <Timer::~Timer()>:
c0012d6e:	83 ec 0c             	sub    esp,0xc
c0012d71:	83 ec 0c             	sub    esp,0xc
c0012d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d78:	e8 cd ff ff ff       	call   c0012d4a <Timer::~Timer()>
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	83 ec 08             	sub    esp,0x8
c0012d83:	68 5c 01 00 00       	push   0x15c
c0012d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d8c:	e8 6c c3 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	83 c4 0c             	add    esp,0xc
c0012d97:	c3                   	ret    

c0012d98 <Timer::read()>:
c0012d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012da2:	c3                   	ret    

c0012da3 <timerHandler(unsigned long long)>:
c0012da3:	55                   	push   ebp
c0012da4:	57                   	push   edi
c0012da5:	56                   	push   esi
c0012da6:	53                   	push   ebx
c0012da7:	83 ec 0c             	sub    esp,0xc
c0012daa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012dae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012db2:	01 35 10 4e 02 c0    	add    DWORD PTR ds:0xc0024e10,esi
c0012db8:	11 3d 14 4e 02 c0    	adc    DWORD PTR ds:0xc0024e14,edi
c0012dbe:	80 3d ad 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ad,0x0
c0012dc5:	0f 84 07 01 00 00    	je     c0012ed2 <timerHandler(unsigned long long)+0x12f>
c0012dcb:	e8 b2 5c 00 00       	call   c0018a82 <lockStuff()>
c0012dd0:	83 ec 0c             	sub    esp,0xc
c0012dd3:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012dd8:	e8 13 ce 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012ddd:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012de4:	89 c3                	mov    ebx,eax
c0012de6:	e8 0d ce 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012deb:	83 c4 10             	add    esp,0x10
c0012dee:	84 c0                	test   al,al
c0012df0:	74 60                	je     c0012e52 <timerHandler(unsigned long long)+0xaf>
c0012df2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012df8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012dfb:	85 c0                	test   eax,eax
c0012dfd:	0f 85 91 00 00 00    	jne    c0012e94 <timerHandler(unsigned long long)+0xf1>
c0012e03:	e9 be 00 00 00       	jmp    c0012ec6 <timerHandler(unsigned long long)+0x123>
c0012e08:	83 ec 0c             	sub    esp,0xc
c0012e0b:	55                   	push   ebp
c0012e0c:	e8 6e 62 00 00       	call   c001907f <unblockTask(ThreadControlBlock*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	39 eb                	cmp    ebx,ebp
c0012e16:	75 12                	jne    c0012e2a <timerHandler(unsigned long long)+0x87>
c0012e18:	83 ec 0c             	sub    esp,0xc
c0012e1b:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e20:	e8 cb cd 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e25:	89 c3                	mov    ebx,eax
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	83 ec 0c             	sub    esp,0xc
c0012e2d:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e32:	e8 c1 cd 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e37:	83 c4 10             	add    esp,0x10
c0012e3a:	84 c0                	test   al,al
c0012e3c:	75 b4                	jne    c0012df2 <timerHandler(unsigned long long)+0x4f>
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e46:	e8 a5 cd 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	39 d8                	cmp    eax,ebx
c0012e50:	74 a0                	je     c0012df2 <timerHandler(unsigned long long)+0x4f>
c0012e52:	83 ec 0c             	sub    esp,0xc
c0012e55:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e5a:	e8 91 cd 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e5f:	89 c5                	mov    ebp,eax
c0012e61:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012e68:	e8 a7 cd 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e6d:	83 c4 10             	add    esp,0x10
c0012e70:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e73:	a1 14 4e 02 c0       	mov    eax,ds:0xc0024e14
c0012e78:	39 15 10 4e 02 c0    	cmp    DWORD PTR ds:0xc0024e10,edx
c0012e7e:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e81:	19 c8                	sbb    eax,ecx
c0012e83:	73 83                	jae    c0012e08 <timerHandler(unsigned long long)+0x65>
c0012e85:	50                   	push   eax
c0012e86:	50                   	push   eax
c0012e87:	55                   	push   ebp
c0012e88:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e8d:	e8 30 ce 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e92:	eb 93                	jmp    c0012e27 <timerHandler(unsigned long long)+0x84>
c0012e94:	80 3d ac 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ac,0x0
c0012e9b:	74 29                	je     c0012ec6 <timerHandler(unsigned long long)+0x123>
c0012e9d:	39 c6                	cmp    esi,eax
c0012e9f:	bb 00 00 00 00       	mov    ebx,0x0
c0012ea4:	19 df                	sbb    edi,ebx
c0012ea6:	72 19                	jb     c0012ec1 <timerHandler(unsigned long long)+0x11e>
c0012ea8:	e8 ae 5b 00 00       	call   c0018a5b <lockScheduler()>
c0012ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012eb2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012eb5:	e8 ea 5e 00 00       	call   c0018da4 <schedule()>
c0012eba:	e8 9e 5b 00 00       	call   c0018a5d <unlockScheduler()>
c0012ebf:	eb 05                	jmp    c0012ec6 <timerHandler(unsigned long long)+0x123>
c0012ec1:	29 f0                	sub    eax,esi
c0012ec3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012ec6:	83 c4 0c             	add    esp,0xc
c0012ec9:	5b                   	pop    ebx
c0012eca:	5e                   	pop    esi
c0012ecb:	5f                   	pop    edi
c0012ecc:	5d                   	pop    ebp
c0012ecd:	e9 57 5f 00 00       	jmp    c0018e29 <unlockStuff()>
c0012ed2:	83 c4 0c             	add    esp,0xc
c0012ed5:	5b                   	pop    ebx
c0012ed6:	5e                   	pop    esi
c0012ed7:	5f                   	pop    edi
c0012ed8:	5d                   	pop    ebp
c0012ed9:	c3                   	ret    

c0012eda <setupTimer(int)>:
c0012eda:	57                   	push   edi
c0012edb:	56                   	push   esi
c0012edc:	53                   	push   ebx
c0012edd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ee1:	e8 fd 19 00 00       	call   c00148e3 <getCPUNumber()>
c0012ee6:	85 c0                	test   eax,eax
c0012ee8:	74 32                	je     c0012f1c <setupTimer(int)+0x42>
c0012eea:	83 ec 0c             	sub    esp,0xc
c0012eed:	68 60 01 00 00       	push   0x160
c0012ef2:	e8 f7 c1 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0012ef7:	89 04 24             	mov    DWORD PTR [esp],eax
c0012efa:	89 c3                	mov    ebx,eax
c0012efc:	e8 a7 c0 00 00       	call   c001efa8 <APICTimer::APICTimer()>
c0012f01:	6a 00                	push   0x0
c0012f03:	6a 00                	push   0x0
c0012f05:	56                   	push   esi
c0012f06:	53                   	push   ebx
c0012f07:	e8 96 bf 00 00       	call   c001eea2 <APICTimer::open(int, int, void*)>
c0012f0c:	83 c4 20             	add    esp,0x20
c0012f0f:	e8 d2 19 00 00       	call   c00148e6 <thisCPU()>
c0012f14:	56                   	push   esi
c0012f15:	56                   	push   esi
c0012f16:	53                   	push   ebx
c0012f17:	e9 96 00 00 00       	jmp    c0012fb2 <setupTimer(int)+0xd8>
c0012f1c:	e8 c5 19 00 00       	call   c00148e6 <thisCPU()>
c0012f21:	83 ec 0c             	sub    esp,0xc
c0012f24:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f2a:	e8 eb d9 ff ff       	call   c001091a <Device::getName()>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f35:	0f 85 87 00 00 00    	jne    c0012fc2 <setupTimer(int)+0xe8>
c0012f3b:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f40:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f47:	74 79                	je     c0012fc2 <setupTimer(int)+0xe8>
c0012f49:	83 ec 0c             	sub    esp,0xc
c0012f4c:	68 5c 01 00 00       	push   0x15c
c0012f51:	e8 98 c1 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0012f56:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f59:	89 c3                	mov    ebx,eax
c0012f5b:	e8 a4 c1 00 00       	call   c001f104 <PIT::PIT()>
c0012f60:	59                   	pop    ecx
c0012f61:	5f                   	pop    edi
c0012f62:	53                   	push   ebx
c0012f63:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012f69:	e8 ca d6 ff ff       	call   c0010638 <Device::addChild(Device*)>
c0012f6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f70:	6a 00                	push   0x0
c0012f72:	6a 00                	push   0x0
c0012f74:	56                   	push   esi
c0012f75:	53                   	push   ebx
c0012f76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f79:	83 c4 14             	add    esp,0x14
c0012f7c:	68 60 01 00 00       	push   0x160
c0012f81:	e8 68 c1 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0012f86:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f89:	89 c7                	mov    edi,eax
c0012f8b:	e8 18 c0 00 00       	call   c001efa8 <APICTimer::APICTimer()>
c0012f90:	6a 00                	push   0x0
c0012f92:	6a 00                	push   0x0
c0012f94:	56                   	push   esi
c0012f95:	57                   	push   edi
c0012f96:	e8 07 bf 00 00       	call   c001eea2 <APICTimer::open(int, int, void*)>
c0012f9b:	83 c4 20             	add    esp,0x20
c0012f9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fa0:	6a 00                	push   0x0
c0012fa2:	6a 00                	push   0x0
c0012fa4:	6a 00                	push   0x0
c0012fa6:	53                   	push   ebx
c0012fa7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012faa:	e8 37 19 00 00       	call   c00148e6 <thisCPU()>
c0012faf:	5a                   	pop    edx
c0012fb0:	59                   	pop    ecx
c0012fb1:	57                   	push   edi
c0012fb2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012fb8:	e8 7b d6 ff ff       	call   c0010638 <Device::addChild(Device*)>
c0012fbd:	83 c4 10             	add    esp,0x10
c0012fc0:	eb 33                	jmp    c0012ff5 <setupTimer(int)+0x11b>
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	68 5c 01 00 00       	push   0x15c
c0012fca:	e8 1f c1 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0012fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fd2:	89 c3                	mov    ebx,eax
c0012fd4:	e8 2b c1 00 00       	call   c001f104 <PIT::PIT()>
c0012fd9:	58                   	pop    eax
c0012fda:	5a                   	pop    edx
c0012fdb:	53                   	push   ebx
c0012fdc:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012fe2:	e8 51 d6 ff ff       	call   c0010638 <Device::addChild(Device*)>
c0012fe7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fe9:	6a 00                	push   0x0
c0012feb:	6a 00                	push   0x0
c0012fed:	56                   	push   esi
c0012fee:	53                   	push   ebx
c0012fef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ff2:	83 c4 20             	add    esp,0x20
c0012ff5:	89 d8                	mov    eax,ebx
c0012ff7:	5b                   	pop    ebx
c0012ff8:	5e                   	pop    esi
c0012ff9:	5f                   	pop    edi
c0012ffa:	c3                   	ret    
c0012ffb:	90                   	nop

c0012ffc <VCache::VCache(PhysicalDisk*)>:
c0012ffc:	53                   	push   ebx
c0012ffd:	83 ec 08             	sub    esp,0x8
c0013000:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0013005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013009:	89 10                	mov    DWORD PTR [eax],edx
c001300b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0013016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001301a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0013021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013025:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001302c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013037:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001303e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013049:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0013050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013054:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013058:	83 ec 0c             	sub    esp,0xc
c001305b:	6a 10                	push   0x10
c001305d:	e8 8c c0 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0013062:	83 c4 10             	add    esp,0x10
c0013065:	89 c3                	mov    ebx,eax
c0013067:	83 ec 0c             	sub    esp,0xc
c001306a:	53                   	push   ebx
c001306b:	e8 0e 5b 00 00       	call   c0018b7e <Mutex::Mutex()>
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013077:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001307a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001307e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013082:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013089:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0013090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013094:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001309a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00130a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130a5:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00130ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00130b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130b5:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00130b8:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00130bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130bf:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130c7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130cd:	c1 e0 06             	shl    eax,0x6
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	50                   	push   eax
c00130d4:	e8 18 8f ff ff       	call   c000bff1 <malloc>
c00130d9:	83 c4 10             	add    esp,0x10
c00130dc:	89 c2                	mov    edx,eax
c00130de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130e5:	90                   	nop
c00130e6:	83 c4 08             	add    esp,0x8
c00130e9:	5b                   	pop    ebx
c00130ea:	c3                   	ret    
c00130eb:	90                   	nop

c00130ec <VCache::writeWriteBuffer()>:
c00130ec:	53                   	push   ebx
c00130ed:	83 ec 14             	sub    esp,0x14
c00130f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00130f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013102:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0013105:	50                   	push   eax
c0013106:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013109:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013110:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0013117:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001311b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013122:	83 c4 28             	add    esp,0x28
c0013125:	5b                   	pop    ebx
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <VCache::~VCache()>:
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0013130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013134:	89 10                	mov    DWORD PTR [eax],edx
c0013136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001313a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001313d:	84 c0                	test   al,al
c001313f:	74 0f                	je     c0013150 <VCache::~VCache()+0x28>
c0013141:	83 ec 0c             	sub    esp,0xc
c0013144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013148:	e8 9f ff ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013157:	83 ec 0c             	sub    esp,0xc
c001315a:	50                   	push   eax
c001315b:	e8 a1 8e ff ff       	call   c000c001 <free>
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	90                   	nop
c0013164:	83 c4 0c             	add    esp,0xc
c0013167:	c3                   	ret    

c0013168 <VCache::~VCache()>:
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	83 ec 0c             	sub    esp,0xc
c001316e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013172:	e8 b1 ff ff ff       	call   c0013128 <VCache::~VCache()>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	83 ec 08             	sub    esp,0x8
c001317d:	6a 30                	push   0x30
c001317f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013183:	e8 75 bf ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	83 c4 0c             	add    esp,0xc
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <VCache::write(unsigned long long, int, void*)>:
c0013190:	55                   	push   ebp
c0013191:	57                   	push   edi
c0013192:	56                   	push   esi
c0013193:	53                   	push   ebx
c0013194:	83 ec 28             	sub    esp,0x28
c0013197:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001319b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001319f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00131a3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00131a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131aa:	e8 3d 5e 00 00       	call   c0018fec <Semaphore::acquire()>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131b6:	74 66                	je     c001321e <VCache::write(unsigned long long, int, void*)+0x8e>
c00131b8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131bb:	99                   	cdq    
c00131bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131c0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131c3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131c6:	89 c1                	mov    ecx,eax
c00131c8:	31 f1                	xor    ecx,esi
c00131ca:	89 d0                	mov    eax,edx
c00131cc:	31 f8                	xor    eax,edi
c00131ce:	89 ca                	mov    edx,ecx
c00131d0:	09 c2                	or     edx,eax
c00131d2:	75 3e                	jne    c0013212 <VCache::write(unsigned long long, int, void*)+0x82>
c00131d4:	83 fd 01             	cmp    ebp,0x1
c00131d7:	75 39                	jne    c0013212 <VCache::write(unsigned long long, int, void*)+0x82>
c00131d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131e2:	51                   	push   ecx
c00131e3:	50                   	push   eax
c00131e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131e8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131ec:	0f af c8             	imul   ecx,eax
c00131ef:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131f2:	51                   	push   ecx
c00131f3:	e8 a4 d4 fe ff       	call   c000069c <memcpy>
c00131f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131fb:	83 c4 10             	add    esp,0x10
c00131fe:	40                   	inc    eax
c00131ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013202:	83 f8 40             	cmp    eax,0x40
c0013205:	75 57                	jne    c001325e <VCache::write(unsigned long long, int, void*)+0xce>
c0013207:	83 ec 0c             	sub    esp,0xc
c001320a:	53                   	push   ebx
c001320b:	e8 dc fe ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c0013210:	eb 34                	jmp    c0013246 <VCache::write(unsigned long long, int, void*)+0xb6>
c0013212:	83 ec 0c             	sub    esp,0xc
c0013215:	53                   	push   ebx
c0013216:	e8 d1 fe ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c001321b:	83 c4 10             	add    esp,0x10
c001321e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013221:	83 fd 3f             	cmp    ebp,0x3f
c0013224:	7f 25                	jg     c001324b <VCache::write(unsigned long long, int, void*)+0xbb>
c0013226:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0013229:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001322c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001322f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013233:	52                   	push   edx
c0013234:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001323a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001323e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013241:	e8 56 d4 fe ff       	call   c000069c <memcpy>
c0013246:	83 c4 10             	add    esp,0x10
c0013249:	eb 13                	jmp    c001325e <VCache::write(unsigned long long, int, void*)+0xce>
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013250:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013254:	55                   	push   ebp
c0013255:	57                   	push   edi
c0013256:	56                   	push   esi
c0013257:	50                   	push   eax
c0013258:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001325b:	83 c4 20             	add    esp,0x20
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013264:	e8 0f 63 00 00       	call   c0019578 <Semaphore::release()>
c0013269:	83 c4 2c             	add    esp,0x2c
c001326c:	5b                   	pop    ebx
c001326d:	31 c0                	xor    eax,eax
c001326f:	5e                   	pop    esi
c0013270:	5f                   	pop    edi
c0013271:	5d                   	pop    ebp
c0013272:	c3                   	ret    
c0013273:	90                   	nop

c0013274 <VCache::read(unsigned long long, int, void*)>:
c0013274:	57                   	push   edi
c0013275:	56                   	push   esi
c0013276:	53                   	push   ebx
c0013277:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001327b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001327f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013283:	83 ec 0c             	sub    esp,0xc
c0013286:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013289:	e8 5e 5d 00 00       	call   c0018fec <Semaphore::acquire()>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013295:	74 0c                	je     c00132a3 <VCache::read(unsigned long long, int, void*)+0x2f>
c0013297:	83 ec 0c             	sub    esp,0xc
c001329a:	53                   	push   ebx
c001329b:	e8 4c fe ff ff       	call   c00130ec <VCache::writeWriteBuffer()>
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00132a6:	83 ec 0c             	sub    esp,0xc
c00132a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00132ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132b3:	57                   	push   edi
c00132b4:	56                   	push   esi
c00132b5:	50                   	push   eax
c00132b6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132b9:	83 c4 14             	add    esp,0x14
c00132bc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132bf:	e8 b4 62 00 00       	call   c0019578 <Semaphore::release()>
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	5b                   	pop    ebx
c00132c8:	31 c0                	xor    eax,eax
c00132ca:	5e                   	pop    esi
c00132cb:	5f                   	pop    edi
c00132cc:	c3                   	ret    
c00132cd:	90                   	nop

c00132ce <Video::putrect(int, int, int, int, unsigned int)>:
c00132ce:	55                   	push   ebp
c00132cf:	57                   	push   edi
c00132d0:	56                   	push   esi
c00132d1:	53                   	push   ebx
c00132d2:	83 ec 1c             	sub    esp,0x1c
c00132d5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132e1:	01 e8                	add    eax,ebp
c00132e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132ef:	01 df                	add    edi,ebx
c00132f1:	39 fb                	cmp    ebx,edi
c00132f3:	7d 1b                	jge    c0013310 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132f5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132f9:	7d 12                	jge    c001330d <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132fb:	8b 16                	mov    edx,DWORD PTR [esi]
c00132fd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013301:	53                   	push   ebx
c0013302:	55                   	push   ebp
c0013303:	45                   	inc    ebp
c0013304:	56                   	push   esi
c0013305:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013308:	83 c4 10             	add    esp,0x10
c001330b:	eb e8                	jmp    c00132f5 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001330d:	43                   	inc    ebx
c001330e:	eb e1                	jmp    c00132f1 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013310:	83 c4 1c             	add    esp,0x1c
c0013313:	5b                   	pop    ebx
c0013314:	5e                   	pop    esi
c0013315:	5f                   	pop    edi
c0013316:	5d                   	pop    ebp
c0013317:	c3                   	ret    

c0013318 <Video::blit(unsigned int*, int, int, int, int)>:
c0013318:	55                   	push   ebp
c0013319:	57                   	push   edi
c001331a:	56                   	push   esi
c001331b:	53                   	push   ebx
c001331c:	83 ec 1c             	sub    esp,0x1c
c001331f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013323:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013327:	85 c0                	test   eax,eax
c0013329:	79 02                	jns    c001332d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001332b:	31 c0                	xor    eax,eax
c001332d:	c1 e0 02             	shl    eax,0x2
c0013330:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013338:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001333c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013340:	39 d8                	cmp    eax,ebx
c0013342:	7e 49                	jle    c001338d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013344:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001334a:	7c 41                	jl     c001338d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001334c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013350:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013354:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013358:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001335c:	39 f9                	cmp    ecx,edi
c001335e:	7e 22                	jle    c0013382 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013360:	83 c5 04             	add    ebp,0x4
c0013363:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013369:	7c 14                	jl     c001337f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001336b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001336d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0013370:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013374:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013378:	56                   	push   esi
c0013379:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001337c:	83 c4 10             	add    esp,0x10
c001337f:	47                   	inc    edi
c0013380:	eb d2                	jmp    c0013354 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013386:	43                   	inc    ebx
c0013387:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001338b:	eb ab                	jmp    c0013338 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001338d:	83 c4 1c             	add    esp,0x1c
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <Video::clearScreen(unsigned int)>:
c0013396:	57                   	push   edi
c0013397:	56                   	push   esi
c0013398:	53                   	push   ebx
c0013399:	31 db                	xor    ebx,ebx
c001339b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001339f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00133a5:	7e 1f                	jle    c00133c6 <Video::clearScreen(unsigned int)+0x30>
c00133a7:	31 ff                	xor    edi,edi
c00133a9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00133af:	7e 12                	jle    c00133c3 <Video::clearScreen(unsigned int)+0x2d>
c00133b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00133b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133b7:	53                   	push   ebx
c00133b8:	57                   	push   edi
c00133b9:	47                   	inc    edi
c00133ba:	56                   	push   esi
c00133bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133be:	83 c4 10             	add    esp,0x10
c00133c1:	eb e6                	jmp    c00133a9 <Video::clearScreen(unsigned int)+0x13>
c00133c3:	43                   	inc    ebx
c00133c4:	eb d9                	jmp    c001339f <Video::clearScreen(unsigned int)+0x9>
c00133c6:	5b                   	pop    ebx
c00133c7:	5e                   	pop    esi
c00133c8:	5f                   	pop    edi
c00133c9:	c3                   	ret    

c00133ca <Video::putpixel(int, int, unsigned int)>:
c00133ca:	c7 44 24 04 48 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022248
c00133d2:	e9 4c be ff ff       	jmp    c000f223 <Dbg::kprintf(char const*, ...)>
c00133d7:	90                   	nop

c00133d8 <Video::Video(char const*)>:
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133df:	83 ec 08             	sub    esp,0x8
c00133e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e6:	50                   	push   eax
c00133e7:	e8 3c d4 ff ff       	call   c0010828 <Device::Device(char const*)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	ba 60 22 02 c0       	mov    edx,0xc0022260
c00133f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f8:	89 10                	mov    DWORD PTR [eax],edx
c00133fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0013408:	90                   	nop
c0013409:	83 c4 0c             	add    esp,0xc
c001340c:	c3                   	ret    
c001340d:	90                   	nop

c001340e <Video::~Video()>:
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0013416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341a:	89 10                	mov    DWORD PTR [eax],edx
c001341c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013420:	83 ec 0c             	sub    esp,0xc
c0013423:	50                   	push   eax
c0013424:	e8 b5 d0 ff ff       	call   c00104de <Device::~Device()>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	90                   	nop
c001342d:	83 c4 0c             	add    esp,0xc
c0013430:	c3                   	ret    
c0013431:	90                   	nop

c0013432 <Video::~Video()>:
c0013432:	83 ec 0c             	sub    esp,0xc
c0013435:	83 ec 0c             	sub    esp,0xc
c0013438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343c:	e8 cd ff ff ff       	call   c001340e <Video::~Video()>
c0013441:	83 c4 10             	add    esp,0x10
c0013444:	83 ec 08             	sub    esp,0x8
c0013447:	68 64 01 00 00       	push   0x164
c001344c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013450:	e8 a8 bc ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	83 c4 0c             	add    esp,0xc
c001345b:	c3                   	ret    

c001345c <Video::isMonochrome()>:
c001345c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013460:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013466:	c3                   	ret    
c0013467:	90                   	nop

c0013468 <Video::getWidth()>:
c0013468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001346c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013472:	c3                   	ret    
c0013473:	90                   	nop

c0013474 <Video::getHeight()>:
c0013474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013478:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001347e:	c3                   	ret    
c001347f:	90                   	nop

c0013480 <Video::drawCursor(int, int, unsigned char*, int)>:
c0013480:	55                   	push   ebp
c0013481:	57                   	push   edi
c0013482:	56                   	push   esi
c0013483:	53                   	push   ebx
c0013484:	83 ec 2c             	sub    esp,0x2c
c0013487:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001348b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001348f:	83 f8 01             	cmp    eax,0x1
c0013492:	19 c9                	sbb    ecx,ecx
c0013494:	31 db                	xor    ebx,ebx
c0013496:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001349a:	89 cd                	mov    ebp,ecx
c001349c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00134a4:	f7 d5                	not    ebp
c00134a6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00134ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00134b0:	01 d8                	add    eax,ebx
c00134b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134b6:	56                   	push   esi
c00134b7:	e8 b8 ff ff ff       	call   c0013474 <Video::getHeight()>
c00134bc:	59                   	pop    ecx
c00134bd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134c1:	7e 70                	jle    c0013533 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134c7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134cb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134d6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134e1:	89 f8                	mov    eax,edi
c00134e3:	83 c0 20             	add    eax,0x20
c00134e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134ea:	56                   	push   esi
c00134eb:	e8 78 ff ff ff       	call   c0013468 <Video::getWidth()>
c00134f0:	5a                   	pop    edx
c00134f1:	39 c7                	cmp    edi,eax
c00134f3:	7d 34                	jge    c0013529 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134f5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134fa:	74 05                	je     c0013501 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00134fe:	55                   	push   ebp
c00134ff:	eb 0d                	jmp    c001350e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0013501:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0013506:	74 12                	je     c001351a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0013508:	8b 06                	mov    eax,DWORD PTR [esi]
c001350a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001350e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013512:	57                   	push   edi
c0013513:	56                   	push   esi
c0013514:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	47                   	inc    edi
c001351b:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001351f:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013523:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013527:	75 c1                	jne    c00134ea <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013529:	43                   	inc    ebx
c001352a:	83 fb 20             	cmp    ebx,0x20
c001352d:	0f 85 79 ff ff ff    	jne    c00134ac <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013533:	83 c4 2c             	add    esp,0x2c
c0013536:	5b                   	pop    ebx
c0013537:	5e                   	pop    esi
c0013538:	5f                   	pop    edi
c0013539:	5d                   	pop    ebp
c001353a:	c3                   	ret    
c001353b:	90                   	nop

c001353c <ACPI::close(int, int, void*)>:
c001353c:	83 ec 1c             	sub    esp,0x1c
c001353f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013547:	74 0a                	je     c0013553 <ACPI::close(int, int, void*)+0x17>
c0013549:	b8 00 00 00 00       	mov    eax,0x0
c001354e:	e9 9e 00 00 00       	jmp    c00135f1 <ACPI::close(int, int, void*)+0xb5>
c0013553:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013558:	75 37                	jne    c0013591 <ACPI::close(int, int, void*)+0x55>
c001355a:	83 ec 0c             	sub    esp,0xc
c001355d:	68 98 22 02 c0       	push   0xc0022298
c0013562:	e8 bc bc ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c001356f:	85 c0                	test   eax,eax
c0013571:	74 07                	je     c001357a <ACPI::close(int, int, void*)+0x3e>
c0013573:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013578:	ff d0                	call   eax
c001357a:	83 ec 0c             	sub    esp,0xc
c001357d:	68 6c 23 02 c0       	push   0xc002236c
c0013582:	e8 cb 24 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001358f:	eb 60                	jmp    c00135f1 <ACPI::close(int, int, void*)+0xb5>
c0013591:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013596:	75 54                	jne    c00135ec <ACPI::close(int, int, void*)+0xb0>
c0013598:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c001359d:	85 c0                	test   eax,eax
c001359f:	74 07                	je     c00135a8 <ACPI::close(int, int, void*)+0x6c>
c00135a1:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c00135a6:	ff d0                	call   eax
c00135a8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00135ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00135b1:	25 ff 00 00 00       	and    eax,0xff
c00135b6:	83 e0 02             	and    eax,0x2
c00135b9:	74 1c                	je     c00135d7 <ACPI::close(int, int, void*)+0x9b>
c00135bb:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135c6:	89 c2                	mov    edx,eax
c00135c8:	ec                   	in     al,dx
c00135c9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135cd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135d5:	eb d6                	jmp    c00135ad <ACPI::close(int, int, void*)+0x71>
c00135d7:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135de:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135eb:	ee                   	out    dx,al
c00135ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135f1:	83 c4 1c             	add    esp,0x1c
c00135f4:	c3                   	ret    

c00135f5 <findRSDP()>:
c00135f5:	83 ec 1c             	sub    esp,0x1c
c00135f8:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00135fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013603:	83 e0 04             	and    eax,0x4
c0013606:	84 c0                	test   al,al
c0013608:	75 07                	jne    c0013611 <findRSDP()+0x1c>
c001360a:	b8 00 00 00 00       	mov    eax,0x0
c001360f:	eb 6a                	jmp    c001367b <findRSDP()+0x86>
c0013611:	a1 f0 47 02 c0       	mov    eax,ds:0xc00247f0
c0013616:	3d ff 07 00 00       	cmp    eax,0x7ff
c001361b:	7f 1b                	jg     c0013638 <findRSDP()+0x43>
c001361d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013622:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013628:	83 e2 fb             	and    edx,0xfffffffb
c001362b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013631:	b8 00 00 00 00       	mov    eax,0x0
c0013636:	eb 43                	jmp    c001367b <findRSDP()+0x86>
c0013638:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013640:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013648:	77 2c                	ja     c0013676 <findRSDP()+0x81>
c001364a:	83 ec 04             	sub    esp,0x4
c001364d:	6a 08                	push   0x8
c001364f:	68 a5 22 02 c0       	push   0xc00222a5
c0013654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013658:	e8 dc cf fe ff       	call   c0000639 <memcmp>
c001365d:	83 c4 10             	add    esp,0x10
c0013660:	85 c0                	test   eax,eax
c0013662:	0f 94 c0             	sete   al
c0013665:	84 c0                	test   al,al
c0013667:	74 06                	je     c001366f <findRSDP()+0x7a>
c0013669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001366d:	eb 0c                	jmp    c001367b <findRSDP()+0x86>
c001366f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013674:	eb ca                	jmp    c0013640 <findRSDP()+0x4b>
c0013676:	b8 00 00 00 00       	mov    eax,0x0
c001367b:	83 c4 1c             	add    esp,0x1c
c001367e:	c3                   	ret    

c001367f <loadACPITables(unsigned char*)>:
c001367f:	56                   	push   esi
c0013680:	53                   	push   ebx
c0013681:	83 ec 44             	sub    esp,0x44
c0013684:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013689:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001368f:	83 e0 04             	and    eax,0x4
c0013692:	84 c0                	test   al,al
c0013694:	0f 84 05 02 00 00    	je     c001389f <loadACPITables(unsigned char*)+0x220>
c001369a:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c001369f:	84 c0                	test   al,al
c00136a1:	74 75                	je     c0013718 <loadACPITables(unsigned char*)+0x99>
c00136a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136a7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00136ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136b2:	83 e8 24             	sub    eax,0x24
c00136b5:	c1 e8 03             	shr    eax,0x3
c00136b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00136bc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136c8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136cc:	0f 8d b2 00 00 00    	jge    c0013784 <loadACPITables(unsigned char*)+0x105>
c00136d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136d6:	83 c0 24             	add    eax,0x24
c00136d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136e9:	c1 e0 03             	shl    eax,0x3
c00136ec:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00136f9:	89 c1                	mov    ecx,eax
c00136fb:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c0013700:	8d 50 01             	lea    edx,[eax+0x1]
c0013703:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013709:	89 ca                	mov    edx,ecx
c001370b:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013712:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013716:	eb ac                	jmp    c00136c4 <loadACPITables(unsigned char*)+0x45>
c0013718:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001371c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013727:	83 e8 24             	sub    eax,0x24
c001372a:	c1 e8 02             	shr    eax,0x2
c001372d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013731:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001373d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013741:	7d 41                	jge    c0013784 <loadACPITables(unsigned char*)+0x105>
c0013743:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013747:	83 c0 24             	add    eax,0x24
c001374a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001374e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013756:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001375a:	c1 e0 02             	shl    eax,0x2
c001375d:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013765:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013767:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c001376c:	8d 50 01             	lea    edx,[eax+0x1]
c001376f:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013775:	89 ca                	mov    edx,ecx
c0013777:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c001377e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013782:	eb b5                	jmp    c0013739 <loadACPITables(unsigned char*)+0xba>
c0013784:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001378c:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c0013791:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013795:	0f 8d 05 01 00 00    	jge    c00138a0 <loadACPITables(unsigned char*)+0x221>
c001379b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001379f:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c00137a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b6:	25 ff 0f 00 00       	and    eax,0xfff
c00137bb:	89 c6                	mov    esi,eax
c00137bd:	e8 d3 ab ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c00137c2:	89 c3                	mov    ebx,eax
c00137c4:	83 ec 0c             	sub    esp,0xc
c00137c7:	6a 01                	push   0x1
c00137c9:	e8 3a aa ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137d5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137db:	83 ec 0c             	sub    esp,0xc
c00137de:	6a 01                	push   0x1
c00137e0:	6a 01                	push   0x1
c00137e2:	50                   	push   eax
c00137e3:	52                   	push   edx
c00137e4:	53                   	push   ebx
c00137e5:	e8 dc b3 ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137ea:	83 c4 20             	add    esp,0x20
c00137ed:	09 f0                	or     eax,esi
c00137ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137f7:	c1 e0 03             	shl    eax,0x3
c00137fa:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00137ff:	83 ec 04             	sub    esp,0x4
c0013802:	6a 04                	push   0x4
c0013804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013808:	50                   	push   eax
c0013809:	e8 8e ce fe ff       	call   c000069c <memcpy>
c001380e:	83 c4 10             	add    esp,0x10
c0013811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013815:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001381c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013820:	05 00 10 00 00       	add    eax,0x1000
c0013825:	c1 e8 0c             	shr    eax,0xc
c0013828:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001382c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013830:	89 04 24             	mov    DWORD PTR [esp],eax
c0013833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013837:	25 ff 0f 00 00       	and    eax,0xfff
c001383c:	89 c6                	mov    esi,eax
c001383e:	e8 52 ab ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c0013843:	89 c3                	mov    ebx,eax
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001384c:	e8 b7 a9 ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c0013851:	83 c4 10             	add    esp,0x10
c0013854:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013858:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001385e:	83 ec 0c             	sub    esp,0xc
c0013861:	6a 01                	push   0x1
c0013863:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013867:	50                   	push   eax
c0013868:	52                   	push   edx
c0013869:	53                   	push   ebx
c001386a:	e8 57 b3 ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001386f:	83 c4 20             	add    esp,0x20
c0013872:	09 f0                	or     eax,esi
c0013874:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013878:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001387b:	83 ec 0c             	sub    esp,0xc
c001387e:	50                   	push   eax
c001387f:	e8 d1 ac ff ff       	call   c000e555 <Virt::freeKernelVirtualPages(unsigned long)>
c0013884:	83 c4 10             	add    esp,0x10
c0013887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001388b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001388f:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013896:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c001389a:	e9 ed fe ff ff       	jmp    c001378c <loadACPITables(unsigned char*)+0x10d>
c001389f:	90                   	nop
c00138a0:	83 c4 44             	add    esp,0x44
c00138a3:	5b                   	pop    ebx
c00138a4:	5e                   	pop    esi
c00138a5:	c3                   	ret    

c00138a6 <findRSDT(unsigned char*)>:
c00138a6:	56                   	push   esi
c00138a7:	53                   	push   ebx
c00138a8:	83 ec 44             	sub    esp,0x44
c00138ab:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00138b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138b6:	83 e0 04             	and    eax,0x4
c00138b9:	84 c0                	test   al,al
c00138bb:	75 0a                	jne    c00138c7 <findRSDT(unsigned char*)+0x21>
c00138bd:	b8 00 00 00 00       	mov    eax,0x0
c00138c2:	e9 f7 00 00 00       	jmp    c00139be <findRSDT(unsigned char*)+0x118>
c00138c7:	83 ec 04             	sub    esp,0x4
c00138ca:	6a 24                	push   0x24
c00138cc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138d0:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138d4:	50                   	push   eax
c00138d5:	e8 c2 cd fe ff       	call   c000069c <memcpy>
c00138da:	83 c4 10             	add    esp,0x10
c00138dd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138e1:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138e5:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013901:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013905:	25 ff 0f 00 00       	and    eax,0xfff
c001390a:	89 c6                	mov    esi,eax
c001390c:	e8 84 aa ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c0013911:	89 c3                	mov    ebx,eax
c0013913:	83 ec 0c             	sub    esp,0xc
c0013916:	6a 02                	push   0x2
c0013918:	e8 eb a8 ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c001391d:	83 c4 10             	add    esp,0x10
c0013920:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013924:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001392a:	83 ec 0c             	sub    esp,0xc
c001392d:	6a 01                	push   0x1
c001392f:	6a 02                	push   0x2
c0013931:	50                   	push   eax
c0013932:	52                   	push   edx
c0013933:	53                   	push   ebx
c0013934:	e8 8d b2 ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013939:	83 c4 20             	add    esp,0x20
c001393c:	09 f0                	or     eax,esi
c001393e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013946:	25 ff 0f 00 00       	and    eax,0xfff
c001394b:	89 c6                	mov    esi,eax
c001394d:	e8 43 aa ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c0013952:	89 c3                	mov    ebx,eax
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	6a 02                	push   0x2
c0013959:	e8 aa a8 ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013965:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001396b:	83 ec 0c             	sub    esp,0xc
c001396e:	6a 01                	push   0x1
c0013970:	6a 02                	push   0x2
c0013972:	50                   	push   eax
c0013973:	52                   	push   edx
c0013974:	53                   	push   ebx
c0013975:	e8 4c b2 ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001397a:	83 c4 20             	add    esp,0x20
c001397d:	09 f0                	or     eax,esi
c001397f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013983:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013988:	75 11                	jne    c001399b <findRSDT(unsigned char*)+0xf5>
c001398a:	c6 05 40 50 02 c0 00 	mov    BYTE PTR ds:0xc0025040,0x0
c0013991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013995:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013999:	eb 1f                	jmp    c00139ba <findRSDT(unsigned char*)+0x114>
c001399b:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00139a0:	75 11                	jne    c00139b3 <findRSDT(unsigned char*)+0x10d>
c00139a2:	c6 05 40 50 02 c0 01 	mov    BYTE PTR ds:0xc0025040,0x1
c00139a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00139ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00139b1:	eb 07                	jmp    c00139ba <findRSDT(unsigned char*)+0x114>
c00139b3:	b8 00 00 00 00       	mov    eax,0x0
c00139b8:	eb 04                	jmp    c00139be <findRSDT(unsigned char*)+0x118>
c00139ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139be:	83 c4 44             	add    esp,0x44
c00139c1:	5b                   	pop    ebx
c00139c2:	5e                   	pop    esi
c00139c3:	c3                   	ret    

c00139c4 <findDataTable(unsigned char*, char*)>:
c00139c4:	83 ec 1c             	sub    esp,0x1c
c00139c7:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00139cc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139d2:	83 e0 04             	and    eax,0x4
c00139d5:	84 c0                	test   al,al
c00139d7:	75 07                	jne    c00139e0 <findDataTable(unsigned char*, char*)+0x1c>
c00139d9:	b8 00 00 00 00       	mov    eax,0x0
c00139de:	eb 7c                	jmp    c0013a5c <findDataTable(unsigned char*, char*)+0x98>
c00139e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139e8:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139f1:	7d 3a                	jge    c0013a2d <findDataTable(unsigned char*, char*)+0x69>
c00139f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139f7:	c1 e0 03             	shl    eax,0x3
c00139fa:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00139ff:	83 ec 04             	sub    esp,0x4
c0013a02:	6a 04                	push   0x4
c0013a04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a08:	50                   	push   eax
c0013a09:	e8 2b cc fe ff       	call   c0000639 <memcmp>
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	85 c0                	test   eax,eax
c0013a13:	0f 94 c0             	sete   al
c0013a16:	84 c0                	test   al,al
c0013a18:	74 0d                	je     c0013a27 <findDataTable(unsigned char*, char*)+0x63>
c0013a1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a1e:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013a25:	eb 35                	jmp    c0013a5c <findDataTable(unsigned char*, char*)+0x98>
c0013a27:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a2b:	eb bb                	jmp    c00139e8 <findDataTable(unsigned char*, char*)+0x24>
c0013a2d:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013a32:	84 c0                	test   al,al
c0013a34:	74 07                	je     c0013a3d <findDataTable(unsigned char*, char*)+0x79>
c0013a36:	b8 58 00 00 00       	mov    eax,0x58
c0013a3b:	eb 05                	jmp    c0013a42 <findDataTable(unsigned char*, char*)+0x7e>
c0013a3d:	b8 52 00 00 00       	mov    eax,0x52
c0013a42:	83 ec 04             	sub    esp,0x4
c0013a45:	50                   	push   eax
c0013a46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a4a:	68 90 23 02 c0       	push   0xc0022390
c0013a4f:	e8 cf b7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0013a54:	83 c4 10             	add    esp,0x10
c0013a57:	b8 00 00 00 00       	mov    eax,0x0
c0013a5c:	83 c4 1c             	add    esp,0x1c
c0013a5f:	c3                   	ret    

c0013a60 <scanMADT()>:
c0013a60:	83 ec 2c             	sub    esp,0x2c
c0013a63:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a68:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a6e:	83 e0 04             	and    eax,0x4
c0013a71:	84 c0                	test   al,al
c0013a73:	0f 84 9a 03 00 00    	je     c0013e13 <scanMADT()+0x3b3>
c0013a79:	e8 77 fb ff ff       	call   c00135f5 <findRSDP()>
c0013a7e:	a3 4c 50 02 c0       	mov    ds:0xc002504c,eax
c0013a83:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a88:	85 c0                	test   eax,eax
c0013a8a:	75 19                	jne    c0013aa5 <scanMADT()+0x45>
c0013a8c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a91:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a97:	83 e2 fb             	and    edx,0xfffffffb
c0013a9a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013aa0:	e9 72 03 00 00       	jmp    c0013e17 <scanMADT()+0x3b7>
c0013aa5:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013aaa:	83 ec 0c             	sub    esp,0xc
c0013aad:	50                   	push   eax
c0013aae:	e8 f3 fd ff ff       	call   c00138a6 <findRSDT(unsigned char*)>
c0013ab3:	83 c4 10             	add    esp,0x10
c0013ab6:	a3 48 50 02 c0       	mov    ds:0xc0025048,eax
c0013abb:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ac0:	85 c0                	test   eax,eax
c0013ac2:	75 19                	jne    c0013add <scanMADT()+0x7d>
c0013ac4:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013ac9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013acf:	83 e2 fb             	and    edx,0xfffffffb
c0013ad2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013ad8:	e9 3a 03 00 00       	jmp    c0013e17 <scanMADT()+0x3b7>
c0013add:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	50                   	push   eax
c0013ae6:	e8 94 fb ff ff       	call   c001367f <loadACPITables(unsigned char*)>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013af3:	83 ec 08             	sub    esp,0x8
c0013af6:	68 ae 22 02 c0       	push   0xc00222ae
c0013afb:	50                   	push   eax
c0013afc:	e8 c3 fe ff ff       	call   c00139c4 <findDataTable(unsigned char*, char*)>
c0013b01:	83 c4 10             	add    esp,0x10
c0013b04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013b08:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013b0d:	75 19                	jne    c0013b28 <scanMADT()+0xc8>
c0013b0f:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013b14:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013b1a:	83 e2 fe             	and    edx,0xfffffffe
c0013b1d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b23:	e9 ef 02 00 00       	jmp    c0013e17 <scanMADT()+0x3b7>
c0013b28:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b37:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b3b:	0f 87 d6 02 00 00    	ja     c0013e17 <scanMADT()+0x3b7>
c0013b41:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b49:	0f 87 c8 02 00 00    	ja     c0013e17 <scanMADT()+0x3b7>
c0013b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b5b:	8d 50 01             	lea    edx,[eax+0x1]
c0013b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b66:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b6a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b72:	8d 50 01             	lea    edx,[eax+0x1]
c0013b75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b79:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b7d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b81:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b85:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b8a:	0f 86 86 02 00 00    	jbe    c0013e16 <scanMADT()+0x3b6>
c0013b90:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b95:	75 5b                	jne    c0013bf2 <scanMADT()+0x192>
c0013b97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b9b:	8d 50 01             	lea    edx,[eax+0x1]
c0013b9e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ba2:	8a 15 80 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025180
c0013ba8:	81 e2 ff 00 00 00    	and    edx,0xff
c0013bae:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bb2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013bb6:	88 82 c0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae40],al
c0013bbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013bc0:	8d 42 01             	lea    eax,[edx+0x1]
c0013bc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bc7:	a0 80 51 02 c0       	mov    al,ds:0xc0025180
c0013bcc:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bcf:	88 0d 80 51 02 c0    	mov    BYTE PTR ds:0xc0025180,cl
c0013bd5:	25 ff 00 00 00       	and    eax,0xff
c0013bda:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bde:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013be2:	88 90 a0 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae60],dl
c0013be8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bed:	e9 0a 02 00 00       	jmp    c0013dfc <scanMADT()+0x39c>
c0013bf2:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013bf7:	0f 85 29 01 00 00    	jne    c0013d26 <scanMADT()+0x2c6>
c0013bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c01:	8d 50 01             	lea    edx,[eax+0x1]
c0013c04:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c08:	8a 15 50 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025050
c0013c0e:	81 e2 ff 00 00 00    	and    edx,0xff
c0013c14:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c18:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013c1c:	88 82 60 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafa0],al
c0013c22:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c2e:	01 d0                	add    eax,edx
c0013c30:	83 c0 2c             	add    eax,0x2c
c0013c33:	8a 00                	mov    al,BYTE PTR [eax]
c0013c35:	31 d2                	xor    edx,edx
c0013c37:	88 c2                	mov    dl,al
c0013c39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c3d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c44:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c48:	25 ff 00 00 00       	and    eax,0xff
c0013c4d:	c1 e0 08             	shl    eax,0x8
c0013c50:	89 d1                	mov    ecx,edx
c0013c52:	09 c1                	or     ecx,eax
c0013c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c58:	8d 50 02             	lea    edx,[eax+0x2]
c0013c5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c63:	25 ff 00 00 00       	and    eax,0xff
c0013c68:	c1 e0 10             	shl    eax,0x10
c0013c6b:	09 c1                	or     ecx,eax
c0013c6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c71:	8d 50 03             	lea    edx,[eax+0x3]
c0013c74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c78:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c7c:	25 ff 00 00 00       	and    eax,0xff
c0013c81:	c1 e0 18             	shl    eax,0x18
c0013c84:	09 c1                	or     ecx,eax
c0013c86:	89 ca                	mov    edx,ecx
c0013c88:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013c8d:	25 ff 00 00 00       	and    eax,0xff
c0013c92:	89 14 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],edx
c0013c99:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca6:	01 d0                	add    eax,edx
c0013ca8:	83 c0 2c             	add    eax,0x2c
c0013cab:	8a 00                	mov    al,BYTE PTR [eax]
c0013cad:	31 d2                	xor    edx,edx
c0013caf:	88 c2                	mov    dl,al
c0013cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0013cb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cbc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cc0:	25 ff 00 00 00       	and    eax,0xff
c0013cc5:	c1 e0 08             	shl    eax,0x8
c0013cc8:	89 d1                	mov    ecx,edx
c0013cca:	09 c1                	or     ecx,eax
c0013ccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cd0:	8d 50 02             	lea    edx,[eax+0x2]
c0013cd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cdb:	25 ff 00 00 00       	and    eax,0xff
c0013ce0:	c1 e0 10             	shl    eax,0x10
c0013ce3:	09 c1                	or     ecx,eax
c0013ce5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ce9:	8d 50 03             	lea    edx,[eax+0x3]
c0013cec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cf0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cf4:	25 ff 00 00 00       	and    eax,0xff
c0013cf9:	c1 e0 18             	shl    eax,0x18
c0013cfc:	09 c1                	or     ecx,eax
c0013cfe:	89 ca                	mov    edx,ecx
c0013d00:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d05:	25 ff 00 00 00       	and    eax,0xff
c0013d0a:	89 14 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],edx
c0013d11:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d16:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d1b:	40                   	inc    eax
c0013d1c:	a2 50 50 02 c0       	mov    ds:0xc0025050,al
c0013d21:	e9 d6 00 00 00       	jmp    c0013dfc <scanMADT()+0x39c>
c0013d26:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d2b:	0f 85 b1 00 00 00    	jne    c0013de2 <scanMADT()+0x382>
c0013d31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d35:	8d 50 01             	lea    edx,[eax+0x1]
c0013d38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d3c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d40:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d44:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d4c:	8d 50 01             	lea    edx,[eax+0x1]
c0013d4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d57:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d5b:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d67:	01 d0                	add    eax,edx
c0013d69:	83 c0 2c             	add    eax,0x2c
c0013d6c:	8a 00                	mov    al,BYTE PTR [eax]
c0013d6e:	31 d2                	xor    edx,edx
c0013d70:	88 c2                	mov    dl,al
c0013d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d76:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d81:	25 ff 00 00 00       	and    eax,0xff
c0013d86:	c1 e0 08             	shl    eax,0x8
c0013d89:	89 d1                	mov    ecx,edx
c0013d8b:	09 c1                	or     ecx,eax
c0013d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d91:	8d 50 02             	lea    edx,[eax+0x2]
c0013d94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d98:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d9c:	25 ff 00 00 00       	and    eax,0xff
c0013da1:	c1 e0 10             	shl    eax,0x10
c0013da4:	09 c1                	or     ecx,eax
c0013da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013daa:	8d 50 03             	lea    edx,[eax+0x3]
c0013dad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013db5:	25 ff 00 00 00       	and    eax,0xff
c0013dba:	c1 e0 18             	shl    eax,0x18
c0013dbd:	09 c8                	or     eax,ecx
c0013dbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013dc3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dc8:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013dcd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013dd1:	25 ff 00 00 00       	and    eax,0xff
c0013dd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dda:	88 90 00 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc100],dl
c0013de0:	eb 1a                	jmp    c0013dfc <scanMADT()+0x39c>
c0013de2:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013de7:	75 07                	jne    c0013df0 <scanMADT()+0x390>
c0013de9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013dee:	eb 0c                	jmp    c0013dfc <scanMADT()+0x39c>
c0013df0:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013df5:	75 05                	jne    c0013dfc <scanMADT()+0x39c>
c0013df7:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013dfc:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013e00:	31 d2                	xor    edx,edx
c0013e02:	88 c2                	mov    dl,al
c0013e04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e08:	01 d0                	add    eax,edx
c0013e0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e0e:	e9 1d fd ff ff       	jmp    c0013b30 <scanMADT()+0xd0>
c0013e13:	90                   	nop
c0013e14:	eb 01                	jmp    c0013e17 <scanMADT()+0x3b7>
c0013e16:	90                   	nop
c0013e17:	83 c4 2c             	add    esp,0x2c
c0013e1a:	c3                   	ret    
c0013e1b:	90                   	nop

c0013e1c <ACPI::ACPI()>:
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e23:	83 ec 08             	sub    esp,0x8
c0013e26:	68 b3 22 02 c0       	push   0xc00222b3
c0013e2b:	50                   	push   eax
c0013e2c:	e8 f7 c9 ff ff       	call   c0010828 <Device::Device(char const*)>
c0013e31:	83 c4 10             	add    esp,0x10
c0013e34:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c0013e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3d:	89 10                	mov    DWORD PTR [eax],edx
c0013e3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e43:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4e:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5c:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e6a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e71:	e8 ea fb ff ff       	call   c0013a60 <scanMADT()>
c0013e76:	90                   	nop
c0013e77:	83 c4 0c             	add    esp,0xc
c0013e7a:	c3                   	ret    
c0013e7b:	90                   	nop

c0013e7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e7c:	83 ec 2c             	sub    esp,0x2c
c0013e7f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e8b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e8f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e94:	88 d0                	mov    al,dl
c0013e96:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e9f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013eab:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013eb1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013eb5:	0f 8d 97 00 00 00    	jge    c0013f52 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ebf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ec3:	83 c2 2a             	add    edx,0x2a
c0013ec6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013eca:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013ecf:	75 78                	jne    c0013f49 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ed1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ed5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ed9:	83 c2 2a             	add    edx,0x2a
c0013edc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013ee0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ee4:	75 63                	jne    c0013f49 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ee6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013eeb:	74 3a                	je     c0013f27 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013eed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ef1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ef5:	83 c2 2a             	add    edx,0x2a
c0013ef8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013efc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f03:	39 c2                	cmp    edx,eax
c0013f05:	74 10                	je     c0013f17 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013f07:	83 ec 0c             	sub    esp,0xc
c0013f0a:	68 c0 23 02 c0       	push   0xc00223c0
c0013f0f:	e8 3e 1b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	83 ec 0c             	sub    esp,0xc
c0013f1a:	68 b8 22 02 c0       	push   0xc00222b8
c0013f1f:	e8 2e 1b 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f33:	83 c2 2a             	add    edx,0x2a
c0013f36:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f3a:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f3c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f3f:	89 01                	mov    DWORD PTR [ecx],eax
c0013f41:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f44:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f49:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f4d:	e9 55 ff ff ff       	jmp    c0013ea7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f52:	90                   	nop
c0013f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f57:	83 c4 2c             	add    esp,0x2c
c0013f5a:	c2 04 00             	ret    0x4
c0013f5d:	90                   	nop

c0013f5e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f5e:	56                   	push   esi
c0013f5f:	53                   	push   ebx
c0013f60:	83 ec 14             	sub    esp,0x14
c0013f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f6b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f6f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f74:	88 c8                	mov    al,cl
c0013f76:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f7a:	88 d0                	mov    al,dl
c0013f7c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f84:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f8e:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f94:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f98:	31 c9                	xor    ecx,ecx
c0013f9a:	88 c1                	mov    cl,al
c0013f9c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013fa0:	31 d2                	xor    edx,edx
c0013fa2:	88 c2                	mov    dl,al
c0013fa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fa8:	25 ff ff 00 00       	and    eax,0xffff
c0013fad:	83 ec 04             	sub    esp,0x4
c0013fb0:	56                   	push   esi
c0013fb1:	53                   	push   ebx
c0013fb2:	51                   	push   ecx
c0013fb3:	52                   	push   edx
c0013fb4:	50                   	push   eax
c0013fb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fb9:	68 f0 23 02 c0       	push   0xc00223f0
c0013fbe:	e8 60 b2 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0013fc3:	83 c4 20             	add    esp,0x20
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fd7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fdb:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fe9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fed:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013ff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ff4:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013ff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffd:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0014003:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0014007:	8d 48 01             	lea    ecx,[eax+0x1]
c001400a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400e:	83 c2 2a             	add    edx,0x2a
c0014011:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0014015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014019:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001401f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014023:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0014026:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001402a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001402e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014032:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014038:	8d 50 01             	lea    edx,[eax+0x1]
c001403b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403f:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0014045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014049:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001404f:	3d 00 08 00 00       	cmp    eax,0x800
c0014054:	75 10                	jne    c0014066 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0014056:	83 ec 0c             	sub    esp,0xc
c0014059:	68 c7 22 02 c0       	push   0xc00222c7
c001405e:	e8 ef 19 00 00       	call   c0015a52 <Krnl::panic(char const*)>
c0014063:	83 c4 10             	add    esp,0x10
c0014066:	90                   	nop
c0014067:	83 c4 14             	add    esp,0x14
c001406a:	5b                   	pop    ebx
c001406b:	5e                   	pop    esi
c001406c:	c3                   	ret    
c001406d:	90                   	nop

c001406e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001406e:	b8 00 00 00 00       	mov    eax,0x0
c0014073:	c3                   	ret    

c0014074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0014074:	83 ec 1c             	sub    esp,0x1c
c0014077:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001407b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001407e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014082:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0014088:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001408c:	25 ff 00 00 00       	and    eax,0xff
c0014091:	83 ec 08             	sub    esp,0x8
c0014094:	50                   	push   eax
c0014095:	52                   	push   edx
c0014096:	e8 63 75 ff ff       	call   c000b5fe <Computer::readCMOS(unsigned char)>
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00140a2:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00140a8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00140ac:	25 ff 00 00 00       	and    eax,0xff
c00140b1:	83 ec 04             	sub    esp,0x4
c00140b4:	6a 01                	push   0x1
c00140b6:	50                   	push   eax
c00140b7:	52                   	push   edx
c00140b8:	e8 59 76 ff ff       	call   c000b716 <Computer::writeCMOS(unsigned char, unsigned char)>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	90                   	nop
c00140c1:	83 c4 1c             	add    esp,0x1c
c00140c4:	c3                   	ret    
c00140c5:	90                   	nop

c00140c6 <ACPI::open(int, int, void*)>:
c00140c6:	53                   	push   ebx
c00140c7:	83 ec 18             	sub    esp,0x18
c00140ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ce:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d9:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140df:	84 c0                	test   al,al
c00140e1:	74 60                	je     c0014143 <ACPI::open(int, int, void*)+0x7d>
c00140e3:	83 ec 0c             	sub    esp,0xc
c00140e6:	68 58 01 00 00       	push   0x158
c00140eb:	e8 fe af ff ff       	call   c000f0ee <operator new(unsigned long)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	89 c3                	mov    ebx,eax
c00140f5:	83 ec 0c             	sub    esp,0xc
c00140f8:	53                   	push   ebx
c00140f9:	e8 a8 80 00 00       	call   c001c1a6 <PCI::PCI()>
c00140fe:	83 c4 10             	add    esp,0x10
c0014101:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0014105:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014109:	83 ec 08             	sub    esp,0x8
c001410c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014110:	50                   	push   eax
c0014111:	e8 22 c5 ff ff       	call   c0010638 <Device::addChild(Device*)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001411d:	8b 00                	mov    eax,DWORD PTR [eax]
c001411f:	83 c0 08             	add    eax,0x8
c0014122:	8b 00                	mov    eax,DWORD PTR [eax]
c0014124:	6a 00                	push   0x0
c0014126:	6a 00                	push   0x0
c0014128:	6a 00                	push   0x0
c001412a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001412e:	ff d0                	call   eax
c0014130:	83 c4 10             	add    esp,0x10
c0014133:	83 ec 0c             	sub    esp,0xc
c0014136:	68 e4 22 02 c0       	push   0xc00222e4
c001413b:	e8 e3 b0 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	68 ef 22 02 c0       	push   0xc00222ef
c001414b:	e8 43 38 00 00       	call   c0017993 <Thr::loadKernelSymbolTable(char const*)>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014159:	83 ec 08             	sub    esp,0x8
c001415c:	6a 01                	push   0x1
c001415e:	68 0d 23 02 c0       	push   0xc002230d
c0014163:	e8 0d 43 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	83 ec 08             	sub    esp,0x8
c001416e:	53                   	push   ebx
c001416f:	50                   	push   eax
c0014170:	e8 c6 44 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0014175:	83 c4 10             	add    esp,0x10
c0014178:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001417e:	83 ec 08             	sub    esp,0x8
c0014181:	6a 01                	push   0x1
c0014183:	68 2a 23 02 c0       	push   0xc002232a
c0014188:	e8 e8 42 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	83 ec 08             	sub    esp,0x8
c0014193:	53                   	push   ebx
c0014194:	50                   	push   eax
c0014195:	e8 a1 44 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00141a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00141a8:	83 e0 04             	and    eax,0x4
c00141ab:	84 c0                	test   al,al
c00141ad:	0f 84 cf 00 00 00    	je     c0014282 <ACPI::open(int, int, void*)+0x1bc>
c00141b3:	83 ec 0c             	sub    esp,0xc
c00141b6:	68 14 01 00 00       	push   0x114
c00141bb:	e8 2e af ff ff       	call   c000f0ee <operator new(unsigned long)>
c00141c0:	83 c4 10             	add    esp,0x10
c00141c3:	89 c3                	mov    ebx,eax
c00141c5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00141ca:	83 ec 04             	sub    esp,0x4
c00141cd:	50                   	push   eax
c00141ce:	68 47 23 02 c0       	push   0xc0022347
c00141d3:	53                   	push   ebx
c00141d4:	e8 81 b5 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c00141d9:	83 c4 10             	add    esp,0x10
c00141dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141e5:	74 17                	je     c00141fe <ACPI::open(int, int, void*)+0x138>
c00141e7:	83 ec 0c             	sub    esp,0xc
c00141ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141ee:	e8 39 b8 ff ff       	call   c000fa2c <File::exists()>
c00141f3:	83 c4 10             	add    esp,0x10
c00141f6:	84 c0                	test   al,al
c00141f8:	74 04                	je     c00141fe <ACPI::open(int, int, void*)+0x138>
c00141fa:	b0 01                	mov    al,0x1
c00141fc:	eb 02                	jmp    c0014200 <ACPI::open(int, int, void*)+0x13a>
c00141fe:	b0 00                	mov    al,0x0
c0014200:	84 c0                	test   al,al
c0014202:	74 25                	je     c0014229 <ACPI::open(int, int, void*)+0x163>
c0014204:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001420a:	83 ec 08             	sub    esp,0x8
c001420d:	6a 01                	push   0x1
c001420f:	68 47 23 02 c0       	push   0xc0022347
c0014214:	e8 5c 42 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c0014219:	83 c4 10             	add    esp,0x10
c001421c:	83 ec 08             	sub    esp,0x8
c001421f:	53                   	push   ebx
c0014220:	50                   	push   eax
c0014221:	e8 15 44 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001422e:	74 1e                	je     c001424e <ACPI::open(int, int, void*)+0x188>
c0014230:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014235:	74 17                	je     c001424e <ACPI::open(int, int, void*)+0x188>
c0014237:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001423b:	8b 00                	mov    eax,DWORD PTR [eax]
c001423d:	83 c0 08             	add    eax,0x8
c0014240:	8b 00                	mov    eax,DWORD PTR [eax]
c0014242:	83 ec 0c             	sub    esp,0xc
c0014245:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014249:	ff d0                	call   eax
c001424b:	83 c4 10             	add    esp,0x10
c001424e:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0014253:	83 ec 08             	sub    esp,0x8
c0014256:	68 64 23 02 c0       	push   0xc0022364
c001425b:	50                   	push   eax
c001425c:	e8 63 f7 ff ff       	call   c00139c4 <findDataTable(unsigned char*, char*)>
c0014261:	83 c4 10             	add    esp,0x10
c0014264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014268:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001426d:	74 13                	je     c0014282 <ACPI::open(int, int, void*)+0x1bc>
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001427a:	e8 f5 fd ff ff       	call   c0014074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	b8 00 00 00 00       	mov    eax,0x0
c0014287:	83 c4 18             	add    esp,0x18
c001428a:	5b                   	pop    ebx
c001428b:	c3                   	ret    

c001428c <ACPI::sleep()>:
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0014294:	85 c0                	test   eax,eax
c0014296:	74 07                	je     c001429f <ACPI::sleep()+0x13>
c0014298:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001429d:	ff d0                	call   eax
c001429f:	90                   	nop
c00142a0:	83 c4 0c             	add    esp,0xc
c00142a3:	c3                   	ret    

c00142a4 <CPU::close(int, int, void*)>:
c00142a4:	31 c0                	xor    eax,eax
c00142a6:	c3                   	ret    

c00142a7 <lookupAMDCPUName(unsigned char, unsigned char)>:
c00142a7:	55                   	push   ebp
c00142a8:	57                   	push   edi
c00142a9:	56                   	push   esi
c00142aa:	53                   	push   ebx
c00142ab:	51                   	push   ecx
c00142ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142b4:	89 d6                	mov    esi,edx
c00142b6:	89 cd                	mov    ebp,ecx
c00142b8:	80 fa 04             	cmp    dl,0x4
c00142bb:	75 28                	jne    c00142e5 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00142bd:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142c0:	3c 03                	cmp    al,0x3
c00142c2:	0f 86 64 01 00 00    	jbe    c001442c <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142c8:	80 f9 03             	cmp    cl,0x3
c00142cb:	0f 84 5b 01 00 00    	je     c001442c <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142d1:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142d4:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142d9:	89 fb                	mov    ebx,edi
c00142db:	80 fb 01             	cmp    bl,0x1
c00142de:	77 4e                	ja     c001432e <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142e0:	e9 61 01 00 00       	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e5:	80 fa 05             	cmp    dl,0x5
c00142e8:	75 4d                	jne    c0014337 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142ea:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142ef:	80 f9 03             	cmp    cl,0x3
c00142f2:	0f 86 4e 01 00 00    	jbe    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f8:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142fb:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c0014300:	89 fb                	mov    ebx,edi
c0014302:	80 fb 01             	cmp    bl,0x1
c0014305:	0f 86 3b 01 00 00    	jbe    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001430b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0014310:	80 f9 08             	cmp    cl,0x8
c0014313:	0f 84 2d 01 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014319:	89 cf                	mov    edi,ecx
c001431b:	b8 10 41 02 c0       	mov    eax,0xc0024110
c0014320:	83 e7 fb             	and    edi,0xfffffffb
c0014323:	89 fb                	mov    ebx,edi
c0014325:	80 fb 09             	cmp    bl,0x9
c0014328:	0f 84 18 01 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001432e:	31 c0                	xor    eax,eax
c0014330:	89 eb                	mov    ebx,ebp
c0014332:	0f b6 fb             	movzx  edi,bl
c0014335:	eb 30                	jmp    c0014367 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014337:	31 c0                	xor    eax,eax
c0014339:	80 fa 06             	cmp    dl,0x6
c001433c:	75 f2                	jne    c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001433e:	80 f9 0a             	cmp    cl,0xa
c0014341:	77 ed                	ja     c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014343:	bf de 05 00 00       	mov    edi,0x5de
c0014348:	0f a3 cf             	bt     edi,ecx
c001434b:	73 e3                	jae    c0014330 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001434d:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0014352:	e9 ef 00 00 00       	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014357:	39 c7                	cmp    edi,eax
c0014359:	0f 84 d4 00 00 00    	je     c0014433 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c001435f:	40                   	inc    eax
c0014360:	3d d0 00 00 00       	cmp    eax,0xd0
c0014365:	74 09                	je     c0014370 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014367:	89 f3                	mov    ebx,esi
c0014369:	80 fb 0f             	cmp    bl,0xf
c001436c:	75 f1                	jne    c001435f <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c001436e:	eb e7                	jmp    c0014357 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0014370:	80 fa 10             	cmp    dl,0x10
c0014373:	75 19                	jne    c001438e <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014375:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014378:	83 e0 fb             	and    eax,0xfffffffb
c001437b:	3c 02                	cmp    al,0x2
c001437d:	0f 86 b7 00 00 00    	jbe    c001443a <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014383:	80 f9 02             	cmp    cl,0x2
c0014386:	0f 84 ae 00 00 00    	je     c001443a <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001438c:	eb 13                	jmp    c00143a1 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001438e:	80 fa 11             	cmp    dl,0x11
c0014391:	75 0e                	jne    c00143a1 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014393:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014398:	80 f9 03             	cmp    cl,0x3
c001439b:	0f 84 a5 00 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143a1:	80 fa 12             	cmp    dl,0x12
c00143a4:	75 0e                	jne    c00143b4 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c00143a6:	b8 40 41 02 c0       	mov    eax,0xc0024140
c00143ab:	80 f9 01             	cmp    cl,0x1
c00143ae:	0f 84 92 00 00 00    	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143b4:	80 fa 14             	cmp    dl,0x14
c00143b7:	be 01 00 00 00       	mov    esi,0x1
c00143bc:	0f 94 c3             	sete   bl
c00143bf:	80 f9 13             	cmp    cl,0x13
c00143c2:	77 0c                	ja     c00143d0 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143c4:	be 04 00 09 00       	mov    esi,0x90004
c00143c9:	d3 ee                	shr    esi,cl
c00143cb:	f7 d6                	not    esi
c00143cd:	83 e6 01             	and    esi,0x1
c00143d0:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143d3:	3c 01                	cmp    al,0x1
c00143d5:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143da:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143df:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143e3:	75 61                	jne    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143e5:	80 fa 15             	cmp    dl,0x15
c00143e8:	75 1f                	jne    c0014409 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143ea:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143ef:	80 f9 01             	cmp    cl,0x1
c00143f2:	74 52                	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f4:	89 f3                	mov    ebx,esi
c00143f6:	b8 70 41 02 c0       	mov    eax,0xc0024170
c00143fb:	84 db                	test   bl,bl
c00143fd:	74 47                	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143ff:	b8 80 41 02 c0       	mov    eax,0xc0024180
c0014404:	80 f9 30             	cmp    cl,0x30
c0014407:	74 3d                	je     c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014409:	80 fa 16             	cmp    dl,0x16
c001440c:	0f 94 c2             	sete   dl
c001440f:	84 c9                	test   cl,cl
c0014411:	75 09                	jne    c001441c <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014413:	b8 90 41 02 c0       	mov    eax,0xc0024190
c0014418:	84 d2                	test   dl,dl
c001441a:	75 2a                	jne    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001441c:	80 f9 30             	cmp    cl,0x30
c001441f:	75 20                	jne    c0014441 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014421:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0014426:	84 d2                	test   dl,dl
c0014428:	75 1c                	jne    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001442a:	eb 15                	jmp    c0014441 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001442c:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c0014431:	eb 13                	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014433:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014438:	eb 0c                	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001443a:	b8 40 41 02 c0       	mov    eax,0xc0024140
c001443f:	eb 05                	jmp    c0014446 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014441:	b8 72 27 02 c0       	mov    eax,0xc0022772
c0014446:	5a                   	pop    edx
c0014447:	5b                   	pop    ebx
c0014448:	5e                   	pop    esi
c0014449:	5f                   	pop    edi
c001444a:	5d                   	pop    ebp
c001444b:	c3                   	ret    

c001444c <lookupIntelCPUName(unsigned char, unsigned char)>:
c001444c:	53                   	push   ebx
c001444d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014451:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014455:	80 f9 04             	cmp    cl,0x4
c0014458:	75 6a                	jne    c00144c4 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001445a:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001445f:	80 fa 01             	cmp    dl,0x1
c0014462:	0f 86 9b 02 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014468:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c001446d:	80 fa 02             	cmp    dl,0x2
c0014470:	0f 84 8d 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014476:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c001447b:	80 fa 03             	cmp    dl,0x3
c001447e:	0f 84 7f 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014484:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c0014489:	80 fa 04             	cmp    dl,0x4
c001448c:	0f 84 71 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014492:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014497:	80 fa 05             	cmp    dl,0x5
c001449a:	0f 84 63 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144a0:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c00144a5:	80 fa 07             	cmp    dl,0x7
c00144a8:	0f 84 55 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ae:	8d 5a f8             	lea    ebx,[edx-0x8]
c00144b1:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144b6:	80 fb 01             	cmp    bl,0x1
c00144b9:	0f 87 e0 01 00 00    	ja     c001469f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144bf:	e9 3f 02 00 00       	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c4:	80 f9 05             	cmp    cl,0x5
c00144c7:	75 3e                	jne    c0014507 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144c9:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144cc:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144d1:	80 fb 02             	cmp    bl,0x2
c00144d4:	0f 86 29 02 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144da:	80 fa 04             	cmp    dl,0x4
c00144dd:	0f 84 f1 01 00 00    	je     c00146d4 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144e3:	80 fa 07             	cmp    dl,0x7
c00144e6:	0f 84 17 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144ec:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144f1:	80 fa 08             	cmp    dl,0x8
c00144f4:	0f 84 09 02 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144fa:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00144ff:	80 fa 09             	cmp    dl,0x9
c0014502:	e9 96 01 00 00       	jmp    c001469d <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c0014507:	80 f9 06             	cmp    cl,0x6
c001450a:	0f 85 80 01 00 00    	jne    c0014690 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0014510:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c0014515:	80 fa 01             	cmp    dl,0x1
c0014518:	0f 84 e5 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001451e:	8d 42 fb             	lea    eax,[edx-0x5]
c0014521:	3c 01                	cmp    al,0x1
c0014523:	0f 86 b2 01 00 00    	jbe    c00146db <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014529:	80 fa 03             	cmp    dl,0x3
c001452c:	0f 84 a9 01 00 00    	je     c00146db <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014532:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014535:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c001453a:	80 fb 01             	cmp    bl,0x1
c001453d:	0f 86 c0 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014543:	80 fa 09             	cmp    dl,0x9
c0014546:	0f 84 96 01 00 00    	je     c00146e2 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c001454c:	8d 5a f6             	lea    ebx,[edx-0xa]
c001454f:	80 fb 01             	cmp    bl,0x1
c0014552:	0f 86 ab 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014558:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c001455d:	80 fa 0d             	cmp    dl,0xd
c0014560:	0f 84 9d 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014566:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c001456b:	80 fa 0e             	cmp    dl,0xe
c001456e:	0f 84 8f 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014574:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014579:	80 fa 0f             	cmp    dl,0xf
c001457c:	0f 84 81 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014582:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014587:	80 fa 15             	cmp    dl,0x15
c001458a:	0f 84 73 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014590:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014593:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014598:	80 fb 01             	cmp    bl,0x1
c001459b:	0f 86 62 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a1:	80 fa 1a             	cmp    dl,0x1a
c00145a4:	0f 84 3f 01 00 00    	je     c00146e9 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c00145aa:	80 fa 1c             	cmp    dl,0x1c
c00145ad:	0f 84 3d 01 00 00    	je     c00146f0 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00145b3:	80 fa 1d             	cmp    dl,0x1d
c00145b6:	0f 84 47 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145bc:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145c1:	80 fa 25             	cmp    dl,0x25
c00145c4:	0f 84 39 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ca:	8d 5a da             	lea    ebx,[edx-0x26]
c00145cd:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145d2:	80 fb 01             	cmp    bl,0x1
c00145d5:	0f 86 28 01 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145db:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145e0:	80 fa 2a             	cmp    dl,0x2a
c00145e3:	0f 84 1a 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e9:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145ee:	80 fa 2c             	cmp    dl,0x2c
c00145f1:	0f 84 0c 01 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f7:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145fc:	80 fa 2d             	cmp    dl,0x2d
c00145ff:	0f 84 fe 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014605:	b8 10 40 02 c0       	mov    eax,0xc0024010
c001460a:	80 fa 2e             	cmp    dl,0x2e
c001460d:	0f 84 f0 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014613:	b8 30 40 02 c0       	mov    eax,0xc0024030
c0014618:	80 fa 2f             	cmp    dl,0x2f
c001461b:	0f 84 e2 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014621:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014624:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0014629:	80 fb 01             	cmp    bl,0x1
c001462c:	0f 86 d1 00 00 00    	jbe    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014632:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014637:	80 fa 37             	cmp    dl,0x37
c001463a:	0f 84 c3 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014640:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014645:	80 fa 3a             	cmp    dl,0x3a
c0014648:	0f 84 b5 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001464e:	b8 70 40 02 c0       	mov    eax,0xc0024070
c0014653:	80 fa 3c             	cmp    dl,0x3c
c0014656:	0f 84 a7 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001465c:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0014661:	80 fa 3d             	cmp    dl,0x3d
c0014664:	0f 84 99 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001466a:	b8 60 40 02 c0       	mov    eax,0xc0024060
c001466f:	80 fa 3e             	cmp    dl,0x3e
c0014672:	0f 84 8b 00 00 00    	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014678:	8d 42 bb             	lea    eax,[edx-0x45]
c001467b:	3c 01                	cmp    al,0x1
c001467d:	76 78                	jbe    c00146f7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001467f:	80 fa 3f             	cmp    dl,0x3f
c0014682:	74 73                	je     c00146f7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014684:	80 fa 4a             	cmp    dl,0x4a
c0014687:	74 75                	je     c00146fe <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014689:	80 fa 4d             	cmp    dl,0x4d
c001468c:	75 11                	jne    c001469f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001468e:	eb 6e                	jmp    c00146fe <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014690:	80 f9 0b             	cmp    cl,0xb
c0014693:	75 0a                	jne    c001469f <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014695:	b8 90 40 02 c0       	mov    eax,0xc0024090
c001469a:	80 fa 01             	cmp    dl,0x1
c001469d:	74 64                	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001469f:	80 f9 0f             	cmp    cl,0xf
c00146a2:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c00146a7:	0f 94 c1             	sete   cl
c00146aa:	80 fa 02             	cmp    dl,0x2
c00146ad:	0f 96 c3             	setbe  bl
c00146b0:	84 cb                	test   bl,cl
c00146b2:	75 4f                	jne    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146b4:	8d 42 fd             	lea    eax,[edx-0x3]
c00146b7:	3c 01                	cmp    al,0x1
c00146b9:	0f 96 c0             	setbe  al
c00146bc:	80 fa 06             	cmp    dl,0x6
c00146bf:	0f 94 c2             	sete   dl
c00146c2:	09 c2                	or     edx,eax
c00146c4:	b8 72 27 02 c0       	mov    eax,0xc0022772
c00146c9:	84 ca                	test   dl,cl
c00146cb:	74 36                	je     c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146cd:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00146d2:	eb 2f                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d4:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00146d9:	eb 28                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146db:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146e0:	eb 21                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e2:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00146e7:	eb 1a                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e9:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00146ee:	eb 13                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146f0:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00146f5:	eb 0c                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146f7:	b8 70 40 02 c0       	mov    eax,0xc0024070
c00146fc:	eb 05                	jmp    c0014703 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146fe:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014703:	5b                   	pop    ebx
c0014704:	c3                   	ret    

c0014705 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0014705:	60                   	pusha  
c0014706:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001470a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001470e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014712:	9c                   	pushf  
c0014713:	fa                   	cli    
c0014714:	0f 09                	wbinvd 
c0014716:	0f 30                	wrmsr  
c0014718:	9d                   	popf   
c0014719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001471d:	89 02                	mov    DWORD PTR [edx],eax
c001471f:	61                   	popa   
c0014720:	c3                   	ret    

c0014721 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014721:	60                   	pusha  
c0014722:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014726:	9c                   	pushf  
c0014727:	fa                   	cli    
c0014728:	0f 09                	wbinvd 
c001472a:	31 c0                	xor    eax,eax
c001472c:	31 d2                	xor    edx,edx
c001472e:	0f 32                	rdmsr  
c0014730:	9d                   	popf   
c0014731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014735:	89 02                	mov    DWORD PTR [edx],eax
c0014737:	61                   	popa   
c0014738:	c3                   	ret    

c0014739 <AMD_K6_writeback(int, int, int)>:
c0014739:	56                   	push   esi
c001473a:	53                   	push   ebx
c001473b:	83 ec 10             	sub    esp,0x10
c001473e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014742:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014747:	75 5d                	jne    c00147a6 <AMD_K6_writeback(int, int, int)+0x6d>
c0014749:	83 f8 08             	cmp    eax,0x8
c001474c:	75 09                	jne    c0014757 <AMD_K6_writeback(int, int, int)+0x1e>
c001474e:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014753:	7e 13                	jle    c0014768 <AMD_K6_writeback(int, int, int)+0x2f>
c0014755:	eb 30                	jmp    c0014787 <AMD_K6_writeback(int, int, int)+0x4e>
c0014757:	83 f8 06             	cmp    eax,0x6
c001475a:	7c 4a                	jl     c00147a6 <AMD_K6_writeback(int, int, int)+0x6d>
c001475c:	83 f8 07             	cmp    eax,0x7
c001475f:	7e 07                	jle    c0014768 <AMD_K6_writeback(int, int, int)+0x2f>
c0014761:	83 f8 09             	cmp    eax,0x9
c0014764:	74 21                	je     c0014787 <AMD_K6_writeback(int, int, int)+0x4e>
c0014766:	eb 3e                	jmp    c00147a6 <AMD_K6_writeback(int, int, int)+0x6d>
c0014768:	89 e6                	mov    esi,esp
c001476a:	8b 1d e4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e4
c0014770:	c1 eb 15             	shr    ebx,0x15
c0014773:	56                   	push   esi
c0014774:	68 82 00 00 c0       	push   0xc0000082
c0014779:	e8 a3 ff ff ff       	call   c0014721 <AMD_K6_read_msr(unsigned int, REGS*)>
c001477e:	56                   	push   esi
c001477f:	83 e3 7e             	and    ebx,0x7e
c0014782:	6a 00                	push   0x0
c0014784:	53                   	push   ebx
c0014785:	eb 12                	jmp    c0014799 <AMD_K6_writeback(int, int, int)+0x60>
c0014787:	89 e3                	mov    ebx,esp
c0014789:	53                   	push   ebx
c001478a:	68 82 00 00 c0       	push   0xc0000082
c001478f:	e8 8d ff ff ff       	call   c0014721 <AMD_K6_read_msr(unsigned int, REGS*)>
c0014794:	53                   	push   ebx
c0014795:	6a 00                	push   0x0
c0014797:	6a 00                	push   0x0
c0014799:	68 82 00 00 c0       	push   0xc0000082
c001479e:	e8 62 ff ff ff       	call   c0014705 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00147a3:	83 c4 18             	add    esp,0x18
c00147a6:	83 c4 10             	add    esp,0x10
c00147a9:	5b                   	pop    ebx
c00147aa:	5e                   	pop    esi
c00147ab:	c3                   	ret    

c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00147ac:	55                   	push   ebp
c00147ad:	57                   	push   edi
c00147ae:	56                   	push   esi
c00147af:	53                   	push   ebx
c00147b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00147b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00147bc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147c0:	39 05 c0 41 02 c0    	cmp    DWORD PTR ds:0xc00241c0,eax
c00147c6:	75 23                	jne    c00147eb <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147c8:	a1 ec 51 02 c0       	mov    eax,ds:0xc00251ec
c00147cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147d1:	89 06                	mov    DWORD PTR [esi],eax
c00147d3:	a1 e8 51 02 c0       	mov    eax,ds:0xc00251e8
c00147d8:	89 07                	mov    DWORD PTR [edi],eax
c00147da:	a1 e4 51 02 c0       	mov    eax,ds:0xc00251e4
c00147df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147e2:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c00147e7:	89 02                	mov    DWORD PTR [edx],eax
c00147e9:	eb 3f                	jmp    c001482a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147eb:	31 c9                	xor    ecx,ecx
c00147ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f1:	0f a2                	cpuid  
c00147f3:	89 06                	mov    DWORD PTR [esi],eax
c00147f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147f9:	89 1f                	mov    DWORD PTR [edi],ebx
c00147fb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147fe:	89 10                	mov    DWORD PTR [eax],edx
c0014800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014804:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c0014809:	8b 06                	mov    eax,DWORD PTR [esi]
c001480b:	a3 ec 51 02 c0       	mov    ds:0xc00251ec,eax
c0014810:	8b 07                	mov    eax,DWORD PTR [edi]
c0014812:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c0014817:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001481a:	a3 e4 51 02 c0       	mov    ds:0xc00251e4,eax
c001481f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014823:	8b 00                	mov    eax,DWORD PTR [eax]
c0014825:	a3 e0 51 02 c0       	mov    ds:0xc00251e0,eax
c001482a:	5b                   	pop    ebx
c001482b:	5e                   	pop    esi
c001482c:	5f                   	pop    edi
c001482d:	5d                   	pop    ebp
c001482e:	c3                   	ret    

c001482f <cpuidCheckEDX(unsigned int)>:
c001482f:	83 ec 10             	sub    esp,0x10
c0014832:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014836:	50                   	push   eax
c0014837:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001483b:	50                   	push   eax
c001483c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014840:	50                   	push   eax
c0014841:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014845:	50                   	push   eax
c0014846:	6a 01                	push   0x1
c0014848:	e8 5f ff ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001484d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014851:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014855:	0f 95 c0             	setne  al
c0014858:	83 c4 24             	add    esp,0x24
c001485b:	c3                   	ret    

c001485c <cpuidCheckECX(unsigned int)>:
c001485c:	83 ec 10             	sub    esp,0x10
c001485f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014863:	50                   	push   eax
c0014864:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014868:	50                   	push   eax
c0014869:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001486d:	50                   	push   eax
c001486e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014872:	50                   	push   eax
c0014873:	6a 01                	push   0x1
c0014875:	e8 32 ff ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001487a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001487e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014882:	0f 95 c0             	setne  al
c0014885:	83 c4 24             	add    esp,0x24
c0014888:	c3                   	ret    

c0014889 <cpuidCheckExtendedEBX(unsigned int)>:
c0014889:	83 ec 10             	sub    esp,0x10
c001488c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014890:	50                   	push   eax
c0014891:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014895:	50                   	push   eax
c0014896:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001489a:	50                   	push   eax
c001489b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001489f:	50                   	push   eax
c00148a0:	6a 07                	push   0x7
c00148a2:	e8 05 ff ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148ab:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00148af:	0f 95 c0             	setne  al
c00148b2:	83 c4 24             	add    esp,0x24
c00148b5:	c3                   	ret    

c00148b6 <cpuidCheckExtendedECX(unsigned int)>:
c00148b6:	83 ec 10             	sub    esp,0x10
c00148b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148bd:	50                   	push   eax
c00148be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148c2:	50                   	push   eax
c00148c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148c7:	50                   	push   eax
c00148c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148cc:	50                   	push   eax
c00148cd:	6a 07                	push   0x7
c00148cf:	e8 d8 fe ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148d8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148dc:	0f 95 c0             	setne  al
c00148df:	83 c4 24             	add    esp,0x24
c00148e2:	c3                   	ret    

c00148e3 <getCPUNumber()>:
c00148e3:	31 c0                	xor    eax,eax
c00148e5:	c3                   	ret    

c00148e6 <thisCPU()>:
c00148e6:	e8 f8 ff ff ff       	call   c00148e3 <getCPUNumber()>
c00148eb:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00148f1:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148f8:	c3                   	ret    
c00148f9:	90                   	nop

c00148fa <CPU::CPU()>:
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014901:	83 ec 08             	sub    esp,0x8
c0014904:	68 72 27 02 c0       	push   0xc0022772
c0014909:	50                   	push   eax
c001490a:	e8 19 bf ff ff       	call   c0010828 <Device::Device(char const*)>
c001490f:	83 c4 10             	add    esp,0x10
c0014912:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c0014917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491b:	89 10                	mov    DWORD PTR [eax],edx
c001491d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014921:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001492b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001492f:	05 78 01 00 00       	add    eax,0x178
c0014934:	83 ec 0c             	sub    esp,0xc
c0014937:	50                   	push   eax
c0014938:	e8 c5 6e ff ff       	call   c000b802 <GDT::GDT()>
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014944:	05 7c 09 00 00       	add    eax,0x97c
c0014949:	83 ec 0c             	sub    esp,0xc
c001494c:	50                   	push   eax
c001494d:	e8 10 71 ff ff       	call   c000ba62 <IDT::IDT()>
c0014952:	83 c4 10             	add    esp,0x10
c0014955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014959:	05 7c 11 00 00       	add    eax,0x117c
c001495e:	83 ec 0c             	sub    esp,0xc
c0014961:	50                   	push   eax
c0014962:	e8 6d 91 ff ff       	call   c000dad4 <TSS::TSS()>
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001496e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014979:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014983:	90                   	nop
c0014984:	83 c4 0c             	add    esp,0xc
c0014987:	c3                   	ret    

c0014988 <CPU::displayFeatures()>:
c0014988:	53                   	push   ebx
c0014989:	83 ec 10             	sub    esp,0x10
c001498c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014990:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014996:	68 80 24 02 c0       	push   0xc0022480
c001499b:	e8 83 a8 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00149a0:	59                   	pop    ecx
c00149a1:	58                   	pop    eax
c00149a2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00149a8:	50                   	push   eax
c00149a9:	68 91 24 02 c0       	push   0xc0022491
c00149ae:	e8 70 a8 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00149b3:	58                   	pop    eax
c00149b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149ba:	c1 e8 0e             	shr    eax,0xe
c00149bd:	5a                   	pop    edx
c00149be:	0f b6 c0             	movzx  eax,al
c00149c1:	50                   	push   eax
c00149c2:	68 a2 24 02 c0       	push   0xc00224a2
c00149c7:	e8 57 a8 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00149cc:	59                   	pop    ecx
c00149cd:	58                   	pop    eax
c00149ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149d4:	66 c1 e8 06          	shr    ax,0x6
c00149d8:	0f b6 c0             	movzx  eax,al
c00149db:	50                   	push   eax
c00149dc:	68 b3 24 02 c0       	push   0xc00224b3
c00149e1:	e8 3d a8 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00149e6:	c7 04 24 c6 28 02 c0 	mov    DWORD PTR [esp],0xc00228c6
c00149ed:	e8 31 a8 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00149f2:	83 c4 10             	add    esp,0x10
c00149f5:	b8 12 11 02 c0       	mov    eax,0xc0021112
c00149fa:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0014a01:	74 05                	je     c0014a08 <CPU::displayFeatures()+0x80>
c0014a03:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a08:	52                   	push   edx
c0014a09:	52                   	push   edx
c0014a0a:	50                   	push   eax
c0014a0b:	68 c4 24 02 c0       	push   0xc00224c4
c0014a10:	e8 0e a8 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014a15:	83 c4 10             	add    esp,0x10
c0014a18:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a1d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a24:	78 05                	js     c0014a2b <CPU::displayFeatures()+0xa3>
c0014a26:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a2b:	51                   	push   ecx
c0014a2c:	51                   	push   ecx
c0014a2d:	50                   	push   eax
c0014a2e:	68 db 24 02 c0       	push   0xc00224db
c0014a33:	e8 eb a7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014a38:	83 c4 10             	add    esp,0x10
c0014a3b:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a40:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a47:	75 05                	jne    c0014a4e <CPU::displayFeatures()+0xc6>
c0014a49:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a4e:	52                   	push   edx
c0014a4f:	52                   	push   edx
c0014a50:	50                   	push   eax
c0014a51:	68 f2 24 02 c0       	push   0xc00224f2
c0014a56:	e8 c8 a7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a63:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a6a:	75 05                	jne    c0014a71 <CPU::displayFeatures()+0xe9>
c0014a6c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a71:	51                   	push   ecx
c0014a72:	51                   	push   ecx
c0014a73:	50                   	push   eax
c0014a74:	68 09 25 02 c0       	push   0xc0022509
c0014a79:	e8 a5 a7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014a7e:	83 c4 10             	add    esp,0x10
c0014a81:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a86:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a8d:	75 05                	jne    c0014a94 <CPU::displayFeatures()+0x10c>
c0014a8f:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a94:	52                   	push   edx
c0014a95:	52                   	push   edx
c0014a96:	50                   	push   eax
c0014a97:	68 20 25 02 c0       	push   0xc0022520
c0014a9c:	e8 82 a7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014aa1:	83 c4 10             	add    esp,0x10
c0014aa4:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014aa9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014ab0:	75 05                	jne    c0014ab7 <CPU::displayFeatures()+0x12f>
c0014ab2:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ab7:	51                   	push   ecx
c0014ab8:	51                   	push   ecx
c0014ab9:	50                   	push   eax
c0014aba:	68 37 25 02 c0       	push   0xc0022537
c0014abf:	e8 5f a7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014acc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014ad3:	75 05                	jne    c0014ada <CPU::displayFeatures()+0x152>
c0014ad5:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ada:	52                   	push   edx
c0014adb:	52                   	push   edx
c0014adc:	50                   	push   eax
c0014add:	68 4e 25 02 c0       	push   0xc002254e
c0014ae2:	e8 3c a7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014ae7:	83 c4 10             	add    esp,0x10
c0014aea:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014aef:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014af6:	75 05                	jne    c0014afd <CPU::displayFeatures()+0x175>
c0014af8:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014afd:	51                   	push   ecx
c0014afe:	51                   	push   ecx
c0014aff:	50                   	push   eax
c0014b00:	68 65 25 02 c0       	push   0xc0022565
c0014b05:	e8 19 a7 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b12:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b19:	75 05                	jne    c0014b20 <CPU::displayFeatures()+0x198>
c0014b1b:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b20:	52                   	push   edx
c0014b21:	52                   	push   edx
c0014b22:	50                   	push   eax
c0014b23:	68 7c 25 02 c0       	push   0xc002257c
c0014b28:	e8 f6 a6 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014b2d:	83 c4 10             	add    esp,0x10
c0014b30:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b35:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b3c:	75 05                	jne    c0014b43 <CPU::displayFeatures()+0x1bb>
c0014b3e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b43:	51                   	push   ecx
c0014b44:	51                   	push   ecx
c0014b45:	50                   	push   eax
c0014b46:	68 93 25 02 c0       	push   0xc0022593
c0014b4b:	e8 d3 a6 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014b50:	83 c4 10             	add    esp,0x10
c0014b53:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b58:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b5f:	75 05                	jne    c0014b66 <CPU::displayFeatures()+0x1de>
c0014b61:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b66:	52                   	push   edx
c0014b67:	52                   	push   edx
c0014b68:	50                   	push   eax
c0014b69:	68 aa 25 02 c0       	push   0xc00225aa
c0014b6e:	e8 b0 a6 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014b73:	83 c4 10             	add    esp,0x10
c0014b76:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b7b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b82:	75 05                	jne    c0014b89 <CPU::displayFeatures()+0x201>
c0014b84:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b89:	51                   	push   ecx
c0014b8a:	51                   	push   ecx
c0014b8b:	50                   	push   eax
c0014b8c:	68 c1 25 02 c0       	push   0xc00225c1
c0014b91:	e8 8d a6 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014b96:	83 c4 10             	add    esp,0x10
c0014b99:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b9e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014ba5:	75 05                	jne    c0014bac <CPU::displayFeatures()+0x224>
c0014ba7:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bac:	52                   	push   edx
c0014bad:	52                   	push   edx
c0014bae:	50                   	push   eax
c0014baf:	68 d8 25 02 c0       	push   0xc00225d8
c0014bb4:	e8 6a a6 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014bb9:	83 c4 10             	add    esp,0x10
c0014bbc:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bc1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014bc8:	78 05                	js     c0014bcf <CPU::displayFeatures()+0x247>
c0014bca:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bcf:	51                   	push   ecx
c0014bd0:	51                   	push   ecx
c0014bd1:	50                   	push   eax
c0014bd2:	68 ef 25 02 c0       	push   0xc00225ef
c0014bd7:	e8 47 a6 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014be4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014beb:	75 05                	jne    c0014bf2 <CPU::displayFeatures()+0x26a>
c0014bed:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bf2:	52                   	push   edx
c0014bf3:	52                   	push   edx
c0014bf4:	50                   	push   eax
c0014bf5:	68 06 26 02 c0       	push   0xc0022606
c0014bfa:	e8 24 a6 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0014bff:	83 c4 18             	add    esp,0x18
c0014c02:	5b                   	pop    ebx
c0014c03:	c3                   	ret    

c0014c04 <CPU::detectFeatures()>:
c0014c04:	55                   	push   ebp
c0014c05:	57                   	push   edi
c0014c06:	56                   	push   esi
c0014c07:	53                   	push   ebx
c0014c08:	83 ec 50             	sub    esp,0x50
c0014c0b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014c0f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014c19:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c20:	6a 0d                	push   0xd
c0014c22:	6a 00                	push   0x0
c0014c24:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c2a:	57                   	push   edi
c0014c2b:	e8 a2 ba fe ff       	call   c00006d2 <memset>
c0014c30:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014c35:	83 c4 10             	add    esp,0x10
c0014c38:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c3f:	0f 84 04 09 00 00    	je     c0015549 <CPU::detectFeatures()+0x945>
c0014c45:	83 ec 0c             	sub    esp,0xc
c0014c48:	6a 10                	push   0x10
c0014c4a:	e8 e0 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014c4f:	83 e0 01             	and    eax,0x1
c0014c52:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c55:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c5b:	83 e0 fd             	and    eax,0xfffffffd
c0014c5e:	09 d0                	or     eax,edx
c0014c60:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c66:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c6d:	e8 bd fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014c72:	83 e0 01             	and    eax,0x1
c0014c75:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c7c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c82:	83 e0 fb             	and    eax,0xfffffffb
c0014c85:	09 d0                	or     eax,edx
c0014c87:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c8d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c94:	e8 96 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014c99:	83 e0 01             	and    eax,0x1
c0014c9c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014ca3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ca9:	83 e0 f7             	and    eax,0xfffffff7
c0014cac:	09 d0                	or     eax,edx
c0014cae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cb4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014cbb:	e8 6f fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014cc0:	83 e0 01             	and    eax,0x1
c0014cc3:	c1 e0 04             	shl    eax,0x4
c0014cc6:	88 c2                	mov    dl,al
c0014cc8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cce:	83 e0 ef             	and    eax,0xffffffef
c0014cd1:	09 d0                	or     eax,edx
c0014cd3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cd9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014ce0:	e8 4a fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014ce5:	83 e0 01             	and    eax,0x1
c0014ce8:	c1 e0 05             	shl    eax,0x5
c0014ceb:	88 c2                	mov    dl,al
c0014ced:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cf3:	83 e0 df             	and    eax,0xffffffdf
c0014cf6:	09 d0                	or     eax,edx
c0014cf8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cfe:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014d05:	e8 25 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014d0a:	83 e0 01             	and    eax,0x1
c0014d0d:	8d 14 00             	lea    edx,[eax+eax*1]
c0014d10:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014d16:	83 e0 fd             	and    eax,0xfffffffd
c0014d19:	09 d0                	or     eax,edx
c0014d1b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d21:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d28:	e8 02 fb ff ff       	call   c001482f <cpuidCheckEDX(unsigned int)>
c0014d2d:	83 e0 01             	and    eax,0x1
c0014d30:	c1 e0 06             	shl    eax,0x6
c0014d33:	88 c2                	mov    dl,al
c0014d35:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d3b:	83 e0 bf             	and    eax,0xffffffbf
c0014d3e:	09 d0                	or     eax,edx
c0014d40:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d46:	58                   	pop    eax
c0014d47:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d4b:	56                   	push   esi
c0014d4c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d50:	55                   	push   ebp
c0014d51:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d55:	50                   	push   eax
c0014d56:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d5a:	52                   	push   edx
c0014d5b:	6a 00                	push   0x0
c0014d5d:	e8 4a fa ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d62:	83 c4 1c             	add    esp,0x1c
c0014d65:	6a 04                	push   0x4
c0014d67:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d6b:	50                   	push   eax
c0014d6c:	57                   	push   edi
c0014d6d:	e8 2a b9 fe ff       	call   c000069c <memcpy>
c0014d72:	83 c4 0c             	add    esp,0xc
c0014d75:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d7b:	6a 04                	push   0x4
c0014d7d:	56                   	push   esi
c0014d7e:	50                   	push   eax
c0014d7f:	e8 18 b9 fe ff       	call   c000069c <memcpy>
c0014d84:	83 c4 0c             	add    esp,0xc
c0014d87:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d8d:	6a 04                	push   0x4
c0014d8f:	55                   	push   ebp
c0014d90:	50                   	push   eax
c0014d91:	e8 06 b9 fe ff       	call   c000069c <memcpy>
c0014d96:	58                   	pop    eax
c0014d97:	5a                   	pop    edx
c0014d98:	68 1d 26 02 c0       	push   0xc002261d
c0014d9d:	57                   	push   edi
c0014d9e:	e8 1f ba fe ff       	call   c00007c2 <strcmp>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	85 c0                	test   eax,eax
c0014da8:	75 0f                	jne    c0014db9 <CPU::detectFeatures()+0x1b5>
c0014daa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014db4:	e9 22 02 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014db9:	50                   	push   eax
c0014dba:	50                   	push   eax
c0014dbb:	68 2a 26 02 c0       	push   0xc002262a
c0014dc0:	57                   	push   edi
c0014dc1:	e8 fc b9 fe ff       	call   c00007c2 <strcmp>
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	85 c0                	test   eax,eax
c0014dcb:	74 dd                	je     c0014daa <CPU::detectFeatures()+0x1a6>
c0014dcd:	51                   	push   ecx
c0014dce:	51                   	push   ecx
c0014dcf:	68 37 26 02 c0       	push   0xc0022637
c0014dd4:	57                   	push   edi
c0014dd5:	e8 e8 b9 fe ff       	call   c00007c2 <strcmp>
c0014dda:	83 c4 10             	add    esp,0x10
c0014ddd:	85 c0                	test   eax,eax
c0014ddf:	74 2a                	je     c0014e0b <CPU::detectFeatures()+0x207>
c0014de1:	52                   	push   edx
c0014de2:	52                   	push   edx
c0014de3:	68 44 26 02 c0       	push   0xc0022644
c0014de8:	57                   	push   edi
c0014de9:	e8 d4 b9 fe ff       	call   c00007c2 <strcmp>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	85 c0                	test   eax,eax
c0014df3:	74 16                	je     c0014e0b <CPU::detectFeatures()+0x207>
c0014df5:	50                   	push   eax
c0014df6:	50                   	push   eax
c0014df7:	68 51 26 02 c0       	push   0xc0022651
c0014dfc:	57                   	push   edi
c0014dfd:	e8 c0 b9 fe ff       	call   c00007c2 <strcmp>
c0014e02:	83 c4 10             	add    esp,0x10
c0014e05:	85 c0                	test   eax,eax
c0014e07:	74 48                	je     c0014e51 <CPU::detectFeatures()+0x24d>
c0014e09:	eb 0f                	jmp    c0014e1a <CPU::detectFeatures()+0x216>
c0014e0b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014e15:	e9 c1 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e1a:	50                   	push   eax
c0014e1b:	50                   	push   eax
c0014e1c:	68 5e 26 02 c0       	push   0xc002265e
c0014e21:	57                   	push   edi
c0014e22:	e8 9b b9 fe ff       	call   c00007c2 <strcmp>
c0014e27:	83 c4 10             	add    esp,0x10
c0014e2a:	85 c0                	test   eax,eax
c0014e2c:	74 23                	je     c0014e51 <CPU::detectFeatures()+0x24d>
c0014e2e:	50                   	push   eax
c0014e2f:	50                   	push   eax
c0014e30:	68 6b 26 02 c0       	push   0xc002266b
c0014e35:	57                   	push   edi
c0014e36:	e8 87 b9 fe ff       	call   c00007c2 <strcmp>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	85 c0                	test   eax,eax
c0014e40:	75 1e                	jne    c0014e60 <CPU::detectFeatures()+0x25c>
c0014e42:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e4c:	e9 8a 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e51:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e5b:	e9 7b 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e60:	50                   	push   eax
c0014e61:	50                   	push   eax
c0014e62:	68 78 26 02 c0       	push   0xc0022678
c0014e67:	57                   	push   edi
c0014e68:	e8 55 b9 fe ff       	call   c00007c2 <strcmp>
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	85 c0                	test   eax,eax
c0014e72:	75 0f                	jne    c0014e83 <CPU::detectFeatures()+0x27f>
c0014e74:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e7e:	e9 58 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014e83:	50                   	push   eax
c0014e84:	50                   	push   eax
c0014e85:	68 37 26 02 c0       	push   0xc0022637
c0014e8a:	57                   	push   edi
c0014e8b:	e8 32 b9 fe ff       	call   c00007c2 <strcmp>
c0014e90:	83 c4 10             	add    esp,0x10
c0014e93:	85 c0                	test   eax,eax
c0014e95:	75 0f                	jne    c0014ea6 <CPU::detectFeatures()+0x2a2>
c0014e97:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014ea1:	e9 35 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014ea6:	50                   	push   eax
c0014ea7:	50                   	push   eax
c0014ea8:	68 85 26 02 c0       	push   0xc0022685
c0014ead:	57                   	push   edi
c0014eae:	e8 0f b9 fe ff       	call   c00007c2 <strcmp>
c0014eb3:	83 c4 10             	add    esp,0x10
c0014eb6:	85 c0                	test   eax,eax
c0014eb8:	75 0f                	jne    c0014ec9 <CPU::detectFeatures()+0x2c5>
c0014eba:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014ec4:	e9 12 01 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014ec9:	51                   	push   ecx
c0014eca:	51                   	push   ecx
c0014ecb:	68 92 26 02 c0       	push   0xc0022692
c0014ed0:	57                   	push   edi
c0014ed1:	e8 ec b8 fe ff       	call   c00007c2 <strcmp>
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	85 c0                	test   eax,eax
c0014edb:	75 0f                	jne    c0014eec <CPU::detectFeatures()+0x2e8>
c0014edd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ee7:	e9 ef 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014eec:	52                   	push   edx
c0014eed:	52                   	push   edx
c0014eee:	68 9f 26 02 c0       	push   0xc002269f
c0014ef3:	57                   	push   edi
c0014ef4:	e8 c9 b8 fe ff       	call   c00007c2 <strcmp>
c0014ef9:	83 c4 10             	add    esp,0x10
c0014efc:	85 c0                	test   eax,eax
c0014efe:	75 0f                	jne    c0014f0f <CPU::detectFeatures()+0x30b>
c0014f00:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014f0a:	e9 cc 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f0f:	50                   	push   eax
c0014f10:	50                   	push   eax
c0014f11:	68 ac 26 02 c0       	push   0xc00226ac
c0014f16:	57                   	push   edi
c0014f17:	e8 a6 b8 fe ff       	call   c00007c2 <strcmp>
c0014f1c:	83 c4 10             	add    esp,0x10
c0014f1f:	85 c0                	test   eax,eax
c0014f21:	75 0f                	jne    c0014f32 <CPU::detectFeatures()+0x32e>
c0014f23:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f2d:	e9 a9 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f32:	50                   	push   eax
c0014f33:	50                   	push   eax
c0014f34:	68 b9 26 02 c0       	push   0xc00226b9
c0014f39:	57                   	push   edi
c0014f3a:	e8 83 b8 fe ff       	call   c00007c2 <strcmp>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	85 c0                	test   eax,eax
c0014f44:	75 0f                	jne    c0014f55 <CPU::detectFeatures()+0x351>
c0014f46:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f50:	e9 86 00 00 00       	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f55:	50                   	push   eax
c0014f56:	50                   	push   eax
c0014f57:	68 c6 26 02 c0       	push   0xc00226c6
c0014f5c:	57                   	push   edi
c0014f5d:	e8 60 b8 fe ff       	call   c00007c2 <strcmp>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	85 c0                	test   eax,eax
c0014f67:	75 0c                	jne    c0014f75 <CPU::detectFeatures()+0x371>
c0014f69:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f73:	eb 66                	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f75:	50                   	push   eax
c0014f76:	50                   	push   eax
c0014f77:	68 d3 26 02 c0       	push   0xc00226d3
c0014f7c:	57                   	push   edi
c0014f7d:	e8 40 b8 fe ff       	call   c00007c2 <strcmp>
c0014f82:	83 c4 10             	add    esp,0x10
c0014f85:	85 c0                	test   eax,eax
c0014f87:	75 0c                	jne    c0014f95 <CPU::detectFeatures()+0x391>
c0014f89:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f93:	eb 46                	jmp    c0014fdb <CPU::detectFeatures()+0x3d7>
c0014f95:	50                   	push   eax
c0014f96:	50                   	push   eax
c0014f97:	68 e0 26 02 c0       	push   0xc00226e0
c0014f9c:	57                   	push   edi
c0014f9d:	e8 20 b8 fe ff       	call   c00007c2 <strcmp>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	85 c0                	test   eax,eax
c0014fa7:	74 e0                	je     c0014f89 <CPU::detectFeatures()+0x385>
c0014fa9:	50                   	push   eax
c0014faa:	50                   	push   eax
c0014fab:	68 ed 26 02 c0       	push   0xc00226ed
c0014fb0:	57                   	push   edi
c0014fb1:	e8 0c b8 fe ff       	call   c00007c2 <strcmp>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	85 c0                	test   eax,eax
c0014fbb:	74 cc                	je     c0014f89 <CPU::detectFeatures()+0x385>
c0014fbd:	51                   	push   ecx
c0014fbe:	51                   	push   ecx
c0014fbf:	68 fa 26 02 c0       	push   0xc00226fa
c0014fc4:	57                   	push   edi
c0014fc5:	e8 f8 b7 fe ff       	call   c00007c2 <strcmp>
c0014fca:	83 c4 10             	add    esp,0x10
c0014fcd:	85 c0                	test   eax,eax
c0014fcf:	74 b8                	je     c0014f89 <CPU::detectFeatures()+0x385>
c0014fd1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fdb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fe0:	0f 86 be 00 00 00    	jbe    c00150a4 <CPU::detectFeatures()+0x4a0>
c0014fe6:	83 ec 0c             	sub    esp,0xc
c0014fe9:	68 80 00 00 00       	push   0x80
c0014fee:	e8 96 f8 ff ff       	call   c0014889 <cpuidCheckExtendedEBX(unsigned int)>
c0014ff3:	83 e0 01             	and    eax,0x1
c0014ff6:	c1 e0 06             	shl    eax,0x6
c0014ff9:	88 c2                	mov    dl,al
c0014ffb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015001:	83 e0 bf             	and    eax,0xffffffbf
c0015004:	09 d0                	or     eax,edx
c0015006:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001500c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0015013:	e8 71 f8 ff ff       	call   c0014889 <cpuidCheckExtendedEBX(unsigned int)>
c0015018:	83 e0 01             	and    eax,0x1
c001501b:	c1 e0 04             	shl    eax,0x4
c001501e:	88 c2                	mov    dl,al
c0015020:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015026:	83 e0 ef             	and    eax,0xffffffef
c0015029:	09 d0                	or     eax,edx
c001502b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015031:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0015038:	e8 4c f8 ff ff       	call   c0014889 <cpuidCheckExtendedEBX(unsigned int)>
c001503d:	c1 e0 07             	shl    eax,0x7
c0015040:	88 c2                	mov    dl,al
c0015042:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015048:	83 e0 7f             	and    eax,0x7f
c001504b:	09 d0                	or     eax,edx
c001504d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0015053:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001505a:	e8 57 f8 ff ff       	call   c00148b6 <cpuidCheckExtendedECX(unsigned int)>
c001505f:	83 e0 01             	and    eax,0x1
c0015062:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015069:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001506f:	83 e0 f7             	and    eax,0xfffffff7
c0015072:	09 d0                	or     eax,edx
c0015074:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001507a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0015081:	e8 30 f8 ff ff       	call   c00148b6 <cpuidCheckExtendedECX(unsigned int)>
c0015086:	83 c4 10             	add    esp,0x10
c0015089:	83 e0 01             	and    eax,0x1
c001508c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0015093:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015099:	83 e0 fb             	and    eax,0xfffffffb
c001509c:	09 d0                	or     eax,edx
c001509e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00150a4:	83 ec 0c             	sub    esp,0xc
c00150a7:	56                   	push   esi
c00150a8:	55                   	push   ebp
c00150a9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00150ad:	57                   	push   edi
c00150ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150b2:	50                   	push   eax
c00150b3:	6a 01                	push   0x1
c00150b5:	e8 f2 f6 ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150be:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150c4:	88 c1                	mov    cl,al
c00150c6:	83 e2 f0             	and    edx,0xfffffff0
c00150c9:	83 e1 0f             	and    ecx,0xf
c00150cc:	09 ca                	or     edx,ecx
c00150ce:	88 c1                	mov    cl,al
c00150d0:	c0 e9 04             	shr    cl,0x4
c00150d3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150d9:	0f b6 d1             	movzx  edx,cl
c00150dc:	c1 e2 06             	shl    edx,0x6
c00150df:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150e3:	89 d5                	mov    ebp,edx
c00150e5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150eb:	66 81 e2 3f c0       	and    dx,0xc03f
c00150f0:	83 c4 20             	add    esp,0x20
c00150f3:	09 ea                	or     edx,ebp
c00150f5:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150fc:	89 c2                	mov    edx,eax
c00150fe:	c1 ea 08             	shr    edx,0x8
c0015101:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0015107:	83 e2 0f             	and    edx,0xf
c001510a:	83 e1 3f             	and    ecx,0x3f
c001510d:	89 d5                	mov    ebp,edx
c001510f:	c1 e5 06             	shl    ebp,0x6
c0015112:	09 cd                	or     ebp,ecx
c0015114:	89 e9                	mov    ecx,ebp
c0015116:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001511c:	88 d1                	mov    cl,dl
c001511e:	c0 e9 02             	shr    cl,0x2
c0015121:	89 cd                	mov    ebp,ecx
c0015123:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0015129:	83 e1 c0             	and    ecx,0xffffffc0
c001512c:	09 cd                	or     ebp,ecx
c001512e:	89 e9                	mov    ecx,ebp
c0015130:	89 c5                	mov    ebp,eax
c0015132:	c1 ed 0c             	shr    ebp,0xc
c0015135:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001513b:	83 e5 03             	and    ebp,0x3
c001513e:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015144:	c1 e5 04             	shl    ebp,0x4
c0015147:	83 e1 cf             	and    ecx,0xffffffcf
c001514a:	09 cd                	or     ebp,ecx
c001514c:	80 fa 06             	cmp    dl,0x6
c001514f:	89 e9                	mov    ecx,ebp
c0015151:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015157:	74 05                	je     c001515e <CPU::detectFeatures()+0x55a>
c0015159:	80 fa 0f             	cmp    dl,0xf
c001515c:	75 5d                	jne    c00151bb <CPU::detectFeatures()+0x5b7>
c001515e:	89 c5                	mov    ebp,eax
c0015160:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015164:	c1 ed 10             	shr    ebp,0x10
c0015167:	c1 e5 04             	shl    ebp,0x4
c001516a:	09 e9                	or     ecx,ebp
c001516c:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015172:	0f b6 c9             	movzx  ecx,cl
c0015175:	c1 e1 06             	shl    ecx,0x6
c0015178:	66 81 e5 3f c0       	and    bp,0xc03f
c001517d:	09 e9                	or     ecx,ebp
c001517f:	80 fa 0f             	cmp    dl,0xf
c0015182:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015189:	75 30                	jne    c00151bb <CPU::detectFeatures()+0x5b7>
c001518b:	c1 e8 14             	shr    eax,0x14
c001518e:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0015194:	83 c0 0f             	add    eax,0xf
c0015197:	83 e2 3f             	and    edx,0x3f
c001519a:	88 c1                	mov    cl,al
c001519c:	c1 e1 06             	shl    ecx,0x6
c001519f:	c0 e8 02             	shr    al,0x2
c00151a2:	09 ca                	or     edx,ecx
c00151a4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00151aa:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00151b0:	83 e2 c0             	and    edx,0xffffffc0
c00151b3:	09 d0                	or     eax,edx
c00151b5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00151bb:	83 ec 0c             	sub    esp,0xc
c00151be:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151c5:	56                   	push   esi
c00151c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151ca:	50                   	push   eax
c00151cb:	57                   	push   edi
c00151cc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151d0:	55                   	push   ebp
c00151d1:	68 00 00 00 80       	push   0x80000000
c00151d6:	e8 d1 f5 ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151db:	83 c4 20             	add    esp,0x20
c00151de:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151ea:	76 1e                	jbe    c001520a <CPU::detectFeatures()+0x606>
c00151ec:	83 ec 0c             	sub    esp,0xc
c00151ef:	56                   	push   esi
c00151f0:	50                   	push   eax
c00151f1:	57                   	push   edi
c00151f2:	55                   	push   ebp
c00151f3:	68 01 00 00 80       	push   0x80000001
c00151f8:	e8 af f5 ff ff       	call   c00147ac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151fd:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0015207:	83 c4 20             	add    esp,0x20
c001520a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015210:	83 f8 01             	cmp    eax,0x1
c0015213:	75 6f                	jne    c0015284 <CPU::detectFeatures()+0x680>
c0015215:	51                   	push   ecx
c0015216:	51                   	push   ecx
c0015217:	68 06 27 02 c0       	push   0xc0022706
c001521c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015220:	56                   	push   esi
c0015221:	e8 4b b5 fe ff       	call   c0000771 <strcpy>
c0015226:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001522c:	5f                   	pop    edi
c001522d:	66 c1 e8 06          	shr    ax,0x6
c0015231:	5d                   	pop    ebp
c0015232:	0f b6 c0             	movzx  eax,al
c0015235:	50                   	push   eax
c0015236:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001523c:	c1 e8 0e             	shr    eax,0xe
c001523f:	0f b6 c0             	movzx  eax,al
c0015242:	50                   	push   eax
c0015243:	e8 04 f2 ff ff       	call   c001444c <lookupIntelCPUName(unsigned char, unsigned char)>
c0015248:	5a                   	pop    edx
c0015249:	59                   	pop    ecx
c001524a:	50                   	push   eax
c001524b:	56                   	push   esi
c001524c:	e8 d7 b5 fe ff       	call   c0000828 <strcat>
c0015251:	5f                   	pop    edi
c0015252:	5d                   	pop    ebp
c0015253:	56                   	push   esi
c0015254:	53                   	push   ebx
c0015255:	e8 c0 b5 ff ff       	call   c001081a <Device::setName(char const*)>
c001525a:	58                   	pop    eax
c001525b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015261:	5a                   	pop    edx
c0015262:	68 0d 27 02 c0       	push   0xc002270d
c0015267:	50                   	push   eax
c0015268:	e8 55 b5 fe ff       	call   c00007c2 <strcmp>
c001526d:	83 c4 10             	add    esp,0x10
c0015270:	85 c0                	test   eax,eax
c0015272:	0f 85 53 03 00 00    	jne    c00155cb <CPU::detectFeatures()+0x9c7>
c0015278:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001527f:	e9 47 03 00 00       	jmp    c00155cb <CPU::detectFeatures()+0x9c7>
c0015284:	83 f8 02             	cmp    eax,0x2
c0015287:	0f 85 b5 00 00 00    	jne    c0015342 <CPU::detectFeatures()+0x73e>
c001528d:	57                   	push   edi
c001528e:	57                   	push   edi
c001528f:	68 1f 27 02 c0       	push   0xc002271f
c0015294:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015298:	56                   	push   esi
c0015299:	e8 d3 b4 fe ff       	call   c0000771 <strcpy>
c001529e:	5d                   	pop    ebp
c001529f:	58                   	pop    eax
c00152a0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152a6:	66 c1 e8 06          	shr    ax,0x6
c00152aa:	0f b6 c0             	movzx  eax,al
c00152ad:	50                   	push   eax
c00152ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152b4:	c1 e8 0e             	shr    eax,0xe
c00152b7:	0f b6 c0             	movzx  eax,al
c00152ba:	50                   	push   eax
c00152bb:	e8 e7 ef ff ff       	call   c00142a7 <lookupAMDCPUName(unsigned char, unsigned char)>
c00152c0:	5a                   	pop    edx
c00152c1:	59                   	pop    ecx
c00152c2:	50                   	push   eax
c00152c3:	56                   	push   esi
c00152c4:	e8 5f b5 fe ff       	call   c0000828 <strcat>
c00152c9:	5f                   	pop    edi
c00152ca:	5d                   	pop    ebp
c00152cb:	56                   	push   esi
c00152cc:	53                   	push   ebx
c00152cd:	e8 48 b5 ff ff       	call   c001081a <Device::setName(char const*)>
c00152d2:	58                   	pop    eax
c00152d3:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152d9:	5a                   	pop    edx
c00152da:	68 24 27 02 c0       	push   0xc0022724
c00152df:	50                   	push   eax
c00152e0:	e8 dd b4 fe ff       	call   c00007c2 <strcmp>
c00152e5:	83 c4 10             	add    esp,0x10
c00152e8:	85 c0                	test   eax,eax
c00152ea:	75 20                	jne    c001530c <CPU::detectFeatures()+0x708>
c00152ec:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00152f2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152f8:	a8 01                	test   al,0x1
c00152fa:	74 10                	je     c001530c <CPU::detectFeatures()+0x708>
c00152fc:	83 e0 fe             	and    eax,0xfffffffe
c00152ff:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0015305:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001530c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015312:	c1 e8 0e             	shr    eax,0xe
c0015315:	3c 05                	cmp    al,0x5
c0015317:	0f 85 ae 02 00 00    	jne    c00155cb <CPU::detectFeatures()+0x9c7>
c001531d:	56                   	push   esi
c001531e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015324:	83 e0 0f             	and    eax,0xf
c0015327:	50                   	push   eax
c0015328:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001532e:	66 c1 e8 06          	shr    ax,0x6
c0015332:	0f b6 c0             	movzx  eax,al
c0015335:	50                   	push   eax
c0015336:	6a 05                	push   0x5
c0015338:	e8 fc f3 ff ff       	call   c0014739 <AMD_K6_writeback(int, int, int)>
c001533d:	e9 ff 01 00 00       	jmp    c0015541 <CPU::detectFeatures()+0x93d>
c0015342:	89 c1                	mov    ecx,eax
c0015344:	83 e1 fd             	and    ecx,0xfffffffd
c0015347:	83 f9 04             	cmp    ecx,0x4
c001534a:	74 09                	je     c0015355 <CPU::detectFeatures()+0x751>
c001534c:	83 f8 03             	cmp    eax,0x3
c001534f:	0f 85 6f 01 00 00    	jne    c00154c4 <CPU::detectFeatures()+0x8c0>
c0015355:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001535b:	c1 ea 0e             	shr    edx,0xe
c001535e:	80 fa 05             	cmp    dl,0x5
c0015361:	75 62                	jne    c00153c5 <CPU::detectFeatures()+0x7c1>
c0015363:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015369:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001536e:	66 81 fa 00 01       	cmp    dx,0x100
c0015373:	75 0c                	jne    c0015381 <CPU::detectFeatures()+0x77d>
c0015375:	51                   	push   ecx
c0015376:	51                   	push   ecx
c0015377:	68 2b 27 02 c0       	push   0xc002272b
c001537c:	e9 ba 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015381:	66 81 fa 00 02       	cmp    dx,0x200
c0015386:	75 0c                	jne    c0015394 <CPU::detectFeatures()+0x790>
c0015388:	52                   	push   edx
c0015389:	52                   	push   edx
c001538a:	68 3e 27 02 c0       	push   0xc002273e
c001538f:	e9 a7 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015394:	66 81 fa 40 02       	cmp    dx,0x240
c0015399:	75 0c                	jne    c00153a7 <CPU::detectFeatures()+0x7a3>
c001539b:	50                   	push   eax
c001539c:	50                   	push   eax
c001539d:	68 50 27 02 c0       	push   0xc0022750
c00153a2:	e9 94 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00153a7:	83 f8 06             	cmp    eax,0x6
c00153aa:	0f 84 ee 00 00 00    	je     c001549e <CPU::detectFeatures()+0x89a>
c00153b0:	83 f9 04             	cmp    ecx,0x4
c00153b3:	0f 84 f6 00 00 00    	je     c00154af <CPU::detectFeatures()+0x8ab>
c00153b9:	50                   	push   eax
c00153ba:	50                   	push   eax
c00153bb:	68 76 27 02 c0       	push   0xc0022776
c00153c0:	e9 76 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00153c5:	80 fa 06             	cmp    dl,0x6
c00153c8:	0f 85 cb 00 00 00    	jne    c0015499 <CPU::detectFeatures()+0x895>
c00153ce:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153d4:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153d9:	66 81 fa 80 01       	cmp    dx,0x180
c00153de:	75 0c                	jne    c00153ec <CPU::detectFeatures()+0x7e8>
c00153e0:	50                   	push   eax
c00153e1:	50                   	push   eax
c00153e2:	68 81 27 02 c0       	push   0xc0022781
c00153e7:	e9 4f 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00153ec:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153f1:	74 07                	je     c00153fa <CPU::detectFeatures()+0x7f6>
c00153f3:	66 81 fa 00 02       	cmp    dx,0x200
c00153f8:	75 0c                	jne    c0015406 <CPU::detectFeatures()+0x802>
c00153fa:	50                   	push   eax
c00153fb:	50                   	push   eax
c00153fc:	68 91 27 02 c0       	push   0xc0022791
c0015401:	e9 35 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015406:	66 81 fa 40 02       	cmp    dx,0x240
c001540b:	75 0c                	jne    c0015419 <CPU::detectFeatures()+0x815>
c001540d:	50                   	push   eax
c001540e:	50                   	push   eax
c001540f:	68 98 27 02 c0       	push   0xc0022798
c0015414:	e9 22 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015419:	66 81 fa 80 02       	cmp    dx,0x280
c001541e:	74 07                	je     c0015427 <CPU::detectFeatures()+0x823>
c0015420:	66 81 fa 40 03       	cmp    dx,0x340
c0015425:	75 0c                	jne    c0015433 <CPU::detectFeatures()+0x82f>
c0015427:	50                   	push   eax
c0015428:	50                   	push   eax
c0015429:	68 a1 27 02 c0       	push   0xc00227a1
c001542e:	e9 08 01 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015433:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015438:	75 0c                	jne    c0015446 <CPU::detectFeatures()+0x842>
c001543a:	55                   	push   ebp
c001543b:	55                   	push   ebp
c001543c:	68 a8 27 02 c0       	push   0xc00227a8
c0015441:	e9 f5 00 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015446:	83 f8 06             	cmp    eax,0x6
c0015449:	74 53                	je     c001549e <CPU::detectFeatures()+0x89a>
c001544b:	83 f9 04             	cmp    ecx,0x4
c001544e:	74 5f                	je     c00154af <CPU::detectFeatures()+0x8ab>
c0015450:	57                   	push   edi
c0015451:	57                   	push   edi
c0015452:	68 b1 27 02 c0       	push   0xc00227b1
c0015457:	53                   	push   ebx
c0015458:	e8 bd b3 ff ff       	call   c001081a <Device::setName(char const*)>
c001545d:	b1 c1                	mov    cl,0xc1
c001545f:	88 c8                	mov    al,cl
c0015461:	e6 22                	out    0x22,al
c0015463:	e4 23                	in     al,0x23
c0015465:	88 c2                	mov    dl,al
c0015467:	88 c8                	mov    al,cl
c0015469:	e6 22                	out    0x22,al
c001546b:	88 d0                	mov    al,dl
c001546d:	83 c8 10             	or     eax,0x10
c0015470:	e6 23                	out    0x23,al
c0015472:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015479:	89 d0                	mov    eax,edx
c001547b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001547e:	40                   	inc    eax
c001547f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015485:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015489:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001548f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015494:	e9 a8 00 00 00       	jmp    c0015541 <CPU::detectFeatures()+0x93d>
c0015499:	83 f8 06             	cmp    eax,0x6
c001549c:	75 0c                	jne    c00154aa <CPU::detectFeatures()+0x8a6>
c001549e:	56                   	push   esi
c001549f:	56                   	push   esi
c00154a0:	68 62 27 02 c0       	push   0xc0022762
c00154a5:	e9 91 00 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154aa:	83 f9 04             	cmp    ecx,0x4
c00154ad:	75 0c                	jne    c00154bb <CPU::detectFeatures()+0x8b7>
c00154af:	51                   	push   ecx
c00154b0:	51                   	push   ecx
c00154b1:	68 6e 27 02 c0       	push   0xc002276e
c00154b6:	e9 80 00 00 00       	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154bb:	52                   	push   edx
c00154bc:	52                   	push   edx
c00154bd:	68 bc 27 02 c0       	push   0xc00227bc
c00154c2:	eb 77                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154c4:	83 f8 07             	cmp    eax,0x7
c00154c7:	75 09                	jne    c00154d2 <CPU::detectFeatures()+0x8ce>
c00154c9:	50                   	push   eax
c00154ca:	50                   	push   eax
c00154cb:	68 c6 27 02 c0       	push   0xc00227c6
c00154d0:	eb 69                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154d2:	83 f8 0a             	cmp    eax,0xa
c00154d5:	75 09                	jne    c00154e0 <CPU::detectFeatures()+0x8dc>
c00154d7:	50                   	push   eax
c00154d8:	50                   	push   eax
c00154d9:	68 d1 27 02 c0       	push   0xc00227d1
c00154de:	eb 5b                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154e0:	83 f8 0b             	cmp    eax,0xb
c00154e3:	75 09                	jne    c00154ee <CPU::detectFeatures()+0x8ea>
c00154e5:	50                   	push   eax
c00154e6:	50                   	push   eax
c00154e7:	68 d9 27 02 c0       	push   0xc00227d9
c00154ec:	eb 4d                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154ee:	83 f8 08             	cmp    eax,0x8
c00154f1:	75 09                	jne    c00154fc <CPU::detectFeatures()+0x8f8>
c00154f3:	50                   	push   eax
c00154f4:	50                   	push   eax
c00154f5:	68 e2 27 02 c0       	push   0xc00227e2
c00154fa:	eb 3f                	jmp    c001553b <CPU::detectFeatures()+0x937>
c00154fc:	83 f8 09             	cmp    eax,0x9
c00154ff:	75 09                	jne    c001550a <CPU::detectFeatures()+0x906>
c0015501:	50                   	push   eax
c0015502:	50                   	push   eax
c0015503:	68 ea 27 02 c0       	push   0xc00227ea
c0015508:	eb 31                	jmp    c001553b <CPU::detectFeatures()+0x937>
c001550a:	83 f8 05             	cmp    eax,0x5
c001550d:	75 09                	jne    c0015518 <CPU::detectFeatures()+0x914>
c001550f:	50                   	push   eax
c0015510:	50                   	push   eax
c0015511:	68 f2 27 02 c0       	push   0xc00227f2
c0015516:	eb 23                	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015518:	83 f8 0c             	cmp    eax,0xc
c001551b:	75 09                	jne    c0015526 <CPU::detectFeatures()+0x922>
c001551d:	55                   	push   ebp
c001551e:	55                   	push   ebp
c001551f:	68 00 28 02 c0       	push   0xc0022800
c0015524:	eb 15                	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015526:	83 f8 0d             	cmp    eax,0xd
c0015529:	75 09                	jne    c0015534 <CPU::detectFeatures()+0x930>
c001552b:	57                   	push   edi
c001552c:	57                   	push   edi
c001552d:	68 0b 28 02 c0       	push   0xc002280b
c0015532:	eb 07                	jmp    c001553b <CPU::detectFeatures()+0x937>
c0015534:	56                   	push   esi
c0015535:	56                   	push   esi
c0015536:	68 1f 28 02 c0       	push   0xc002281f
c001553b:	53                   	push   ebx
c001553c:	e8 d9 b2 ff ff       	call   c001081a <Device::setName(char const*)>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	e9 82 00 00 00       	jmp    c00155cb <CPU::detectFeatures()+0x9c7>
c0015549:	51                   	push   ecx
c001554a:	51                   	push   ecx
c001554b:	68 6b 26 02 c0       	push   0xc002266b
c0015550:	57                   	push   edi
c0015551:	e8 1b b2 fe ff       	call   c0000771 <strcpy>
c0015556:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015560:	e8 df ac fe ff       	call   c0000244 <is486>
c0015565:	83 c4 10             	add    esp,0x10
c0015568:	85 c0                	test   eax,eax
c001556a:	74 2d                	je     c0015599 <CPU::detectFeatures()+0x995>
c001556c:	52                   	push   edx
c001556d:	52                   	push   edx
c001556e:	68 2b 28 02 c0       	push   0xc002282b
c0015573:	53                   	push   ebx
c0015574:	e8 a1 b2 ff ff       	call   c001081a <Device::setName(char const*)>
c0015579:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0015580:	e8 e3 a5 00 00       	call   c001fb68 <CPU::readCR0()>
c0015585:	83 c4 10             	add    esp,0x10
c0015588:	83 e0 14             	and    eax,0x14
c001558b:	83 f8 04             	cmp    eax,0x4
c001558e:	75 1f                	jne    c00155af <CPU::detectFeatures()+0x9ab>
c0015590:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015597:	eb 32                	jmp    c00155cb <CPU::detectFeatures()+0x9c7>
c0015599:	50                   	push   eax
c001559a:	50                   	push   eax
c001559b:	68 36 28 02 c0       	push   0xc0022836
c00155a0:	53                   	push   ebx
c00155a1:	e8 74 b2 ff ff       	call   c001081a <Device::setName(char const*)>
c00155a6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00155ad:	eb d1                	jmp    c0015580 <CPU::detectFeatures()+0x97c>
c00155af:	e8 6b ac fe ff       	call   c000021f <hasLegacyFPU>
c00155b4:	83 e0 01             	and    eax,0x1
c00155b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00155ba:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155c0:	83 e0 fd             	and    eax,0xfffffffd
c00155c3:	09 d0                	or     eax,edx
c00155c5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155cb:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155d2:	83 c4 4c             	add    esp,0x4c
c00155d5:	5b                   	pop    ebx
c00155d6:	5e                   	pop    esi
c00155d7:	5f                   	pop    edi
c00155d8:	5d                   	pop    ebp
c00155d9:	c3                   	ret    

c00155da <CPU::setupSMEP()>:
c00155da:	83 ec 0c             	sub    esp,0xc
c00155dd:	e8 50 a8 00 00       	call   c001fe32 <CPU::readCR4()>
c00155e2:	0d 00 00 10 00       	or     eax,0x100000
c00155e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155eb:	83 c4 0c             	add    esp,0xc
c00155ee:	e9 5a a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c00155f3:	90                   	nop

c00155f4 <CPU::setupUMIP()>:
c00155f4:	83 ec 0c             	sub    esp,0xc
c00155f7:	e8 36 a8 00 00       	call   c001fe32 <CPU::readCR4()>
c00155fc:	80 cc 08             	or     ah,0x8
c00155ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015603:	83 c4 0c             	add    esp,0xc
c0015606:	e9 42 a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c001560b:	90                   	nop

c001560c <CPU::setupTSC()>:
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	e8 1e a8 00 00       	call   c001fe32 <CPU::readCR4()>
c0015614:	83 c8 04             	or     eax,0x4
c0015617:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001561b:	83 c4 0c             	add    esp,0xc
c001561e:	e9 2a a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c0015623:	90                   	nop

c0015624 <CPU::setupLargePages()>:
c0015624:	83 ec 0c             	sub    esp,0xc
c0015627:	e8 06 a8 00 00       	call   c001fe32 <CPU::readCR4()>
c001562c:	83 c8 10             	or     eax,0x10
c001562f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015633:	83 c4 0c             	add    esp,0xc
c0015636:	e9 12 a8 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>
c001563b:	90                   	nop

c001563c <CPU::setupPAT()>:
c001563c:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0015641:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015648:	74 2c                	je     c0015676 <CPU::setupPAT()+0x3a>
c001564a:	53                   	push   ebx
c001564b:	83 ec 10             	sub    esp,0x10
c001564e:	68 77 02 00 00       	push   0x277
c0015653:	50                   	push   eax
c0015654:	e8 35 5f ff ff       	call   c000b58e <Computer::rdmsr(unsigned int)>
c0015659:	83 e2 f8             	and    edx,0xfffffff8
c001565c:	83 ca 01             	or     edx,0x1
c001565f:	52                   	push   edx
c0015660:	50                   	push   eax
c0015661:	68 77 02 00 00       	push   0x277
c0015666:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001566c:	e8 49 5f ff ff       	call   c000b5ba <Computer::wrmsr(unsigned int, unsigned long long)>
c0015671:	83 c4 28             	add    esp,0x28
c0015674:	5b                   	pop    ebx
c0015675:	c3                   	ret    
c0015676:	c3                   	ret    
c0015677:	90                   	nop

c0015678 <CPU::setupMTRR()>:
c0015678:	c3                   	ret    
c0015679:	90                   	nop

c001567a <CPU::setupGlobalPages()>:
c001567a:	83 ec 0c             	sub    esp,0xc
c001567d:	e8 b0 a7 00 00       	call   c001fe32 <CPU::readCR4()>
c0015682:	0c 80                	or     al,0x80
c0015684:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015688:	83 c4 0c             	add    esp,0xc
c001568b:	e9 bd a7 00 00       	jmp    c001fe4d <CPU::writeCR4(unsigned long)>

c0015690 <CPU::allowUsermodeDataAccess()>:
c0015690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015694:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001569b:	74 03                	je     c00156a0 <CPU::allowUsermodeDataAccess()+0x10>
c001569d:	0f 01 cb             	stac   
c00156a0:	c3                   	ret    
c00156a1:	90                   	nop

c00156a2 <CPU::prohibitUsermodeDataAccess()>:
c00156a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156a6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00156ad:	74 03                	je     c00156b2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00156af:	0f 01 ca             	clac   
c00156b2:	c3                   	ret    
c00156b3:	90                   	nop

c00156b4 <CPU::setupSMAP()>:
c00156b4:	53                   	push   ebx
c00156b5:	83 ec 08             	sub    esp,0x8
c00156b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156bc:	e8 71 a7 00 00       	call   c001fe32 <CPU::readCR4()>
c00156c1:	83 ec 0c             	sub    esp,0xc
c00156c4:	0d 00 00 20 00       	or     eax,0x200000
c00156c9:	50                   	push   eax
c00156ca:	e8 7e a7 00 00       	call   c001fe4d <CPU::writeCR4(unsigned long)>
c00156cf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156d3:	83 c4 18             	add    esp,0x18
c00156d6:	5b                   	pop    ebx
c00156d7:	eb c9                	jmp    c00156a2 <CPU::prohibitUsermodeDataAccess()>
c00156d9:	90                   	nop

c00156da <CPU::setupFeatures()>:
c00156da:	53                   	push   ebx
c00156db:	83 ec 08             	sub    esp,0x8
c00156de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156e2:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156e9:	74 0c                	je     c00156f7 <CPU::setupFeatures()+0x1d>
c00156eb:	83 ec 0c             	sub    esp,0xc
c00156ee:	53                   	push   ebx
c00156ef:	e8 e6 fe ff ff       	call   c00155da <CPU::setupSMEP()>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156fe:	74 0c                	je     c001570c <CPU::setupFeatures()+0x32>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	53                   	push   ebx
c0015704:	e8 ab ff ff ff       	call   c00156b4 <CPU::setupSMAP()>
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015713:	74 0c                	je     c0015721 <CPU::setupFeatures()+0x47>
c0015715:	83 ec 0c             	sub    esp,0xc
c0015718:	53                   	push   ebx
c0015719:	e8 d6 fe ff ff       	call   c00155f4 <CPU::setupUMIP()>
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015728:	74 0c                	je     c0015736 <CPU::setupFeatures()+0x5c>
c001572a:	83 ec 0c             	sub    esp,0xc
c001572d:	53                   	push   ebx
c001572e:	e8 d9 fe ff ff       	call   c001560c <CPU::setupTSC()>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001573d:	74 0c                	je     c001574b <CPU::setupFeatures()+0x71>
c001573f:	83 ec 0c             	sub    esp,0xc
c0015742:	53                   	push   ebx
c0015743:	e8 dc fe ff ff       	call   c0015624 <CPU::setupLargePages()>
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015752:	74 0c                	je     c0015760 <CPU::setupFeatures()+0x86>
c0015754:	83 ec 0c             	sub    esp,0xc
c0015757:	53                   	push   ebx
c0015758:	e8 1d ff ff ff       	call   c001567a <CPU::setupGlobalPages()>
c001575d:	83 c4 10             	add    esp,0x10
c0015760:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015767:	74 0d                	je     c0015776 <CPU::setupFeatures()+0x9c>
c0015769:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001576d:	83 c4 08             	add    esp,0x8
c0015770:	5b                   	pop    ebx
c0015771:	e9 c6 fe ff ff       	jmp    c001563c <CPU::setupPAT()>
c0015776:	83 c4 08             	add    esp,0x8
c0015779:	5b                   	pop    ebx
c001577a:	c3                   	ret    
c001577b:	90                   	nop

c001577c <CPU::open(int, int, void*)>:
c001577c:	57                   	push   edi
c001577d:	56                   	push   esi
c001577e:	53                   	push   ebx
c001577f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015783:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015787:	83 ec 0c             	sub    esp,0xc
c001578a:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0015790:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015796:	50                   	push   eax
c0015797:	e8 e2 60 ff ff       	call   c000b87e <GDT::setup()>
c001579c:	83 c4 0c             	add    esp,0xc
c001579f:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00157a5:	6a 00                	push   0x0
c00157a7:	68 ef be ad de       	push   0xdeadbeef
c00157ac:	57                   	push   edi
c00157ad:	e8 62 83 ff ff       	call   c000db14 <TSS::setup(unsigned long, unsigned long)>
c00157b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157b5:	e8 3a 83 ff ff       	call   c000daf4 <TSS::flush()>
c00157ba:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00157c3:	e8 10 63 ff ff       	call   c000bad8 <IDT::setup()>
c00157c8:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157cf:	e8 70 a6 00 00       	call   c001fe44 <CPU::writeDR7(unsigned long)>
c00157d4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157de:	e8 e4 6d ff ff       	call   c000c5c7 <Phys::allocatePage()>
c00157e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157e9:	89 30                	mov    DWORD PTR [eax],esi
c00157eb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157f1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157f4:	58                   	pop    eax
c00157f5:	5a                   	pop    edx
c00157f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015800:	e8 a3 93 ff ff       	call   c000eba8 <VAS::setCPUSpecific(unsigned long)>
c0015805:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015808:	e8 f7 f3 ff ff       	call   c0014c04 <CPU::detectFeatures()>
c001580d:	e8 22 c3 ff ff       	call   c0011b34 <setupInterruptController()>
c0015812:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015818:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001581d:	83 e0 10             	and    eax,0x10
c0015820:	83 f8 01             	cmp    eax,0x1
c0015823:	19 c0                	sbb    eax,eax
c0015825:	83 e0 46             	and    eax,0x46
c0015828:	83 c0 1e             	add    eax,0x1e
c001582b:	89 04 24             	mov    DWORD PTR [esp],eax
c001582e:	e8 a7 d6 ff ff       	call   c0012eda <setupTimer(int)>
c0015833:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015839:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001583c:	e8 99 fe ff ff       	call   c00156da <CPU::setupFeatures()>
c0015841:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015844:	e8 3f f1 ff ff       	call   c0014988 <CPU::displayFeatures()>
c0015849:	83 c4 10             	add    esp,0x10
c001584c:	5b                   	pop    ebx
c001584d:	31 c0                	xor    eax,eax
c001584f:	5e                   	pop    esi
c0015850:	5f                   	pop    edi
c0015851:	c3                   	ret    

c0015852 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015852:	56                   	push   esi
c0015853:	53                   	push   ebx
c0015854:	51                   	push   ecx
c0015855:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015859:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001585d:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015860:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015863:	88 c1                	mov    cl,al
c0015865:	c0 e9 06             	shr    cl,0x6
c0015868:	88 0c 24             	mov    BYTE PTR [esp],cl
c001586b:	88 c1                	mov    cl,al
c001586d:	66 c1 e8 03          	shr    ax,0x3
c0015871:	83 e1 07             	and    ecx,0x7
c0015874:	83 e0 07             	and    eax,0x7
c0015877:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001587b:	88 06                	mov    BYTE PTR [esi],al
c001587d:	74 7f                	je     c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001587f:	80 f9 04             	cmp    cl,0x4
c0015882:	74 7a                	je     c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015884:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015888:	75 05                	jne    c001588f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c001588a:	80 f9 05             	cmp    cl,0x5
c001588d:	74 6f                	je     c00158fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001588f:	84 c9                	test   cl,cl
c0015891:	75 05                	jne    c0015898 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015893:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015896:	eb 3c                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015898:	80 f9 01             	cmp    cl,0x1
c001589b:	75 05                	jne    c00158a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c001589d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158a0:	eb 32                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a2:	80 f9 02             	cmp    cl,0x2
c00158a5:	75 05                	jne    c00158ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c00158a7:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00158aa:	eb 28                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158ac:	31 c0                	xor    eax,eax
c00158ae:	80 f9 03             	cmp    cl,0x3
c00158b1:	75 05                	jne    c00158b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00158b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158b6:	eb 1c                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b8:	80 f9 05             	cmp    cl,0x5
c00158bb:	75 05                	jne    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00158bd:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158c0:	eb 12                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158c2:	80 f9 06             	cmp    cl,0x6
c00158c5:	75 05                	jne    c00158cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158c7:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158ca:	eb 08                	jmp    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158cc:	80 f9 07             	cmp    cl,0x7
c00158cf:	75 03                	jne    c00158d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158d1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158d4:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158d8:	75 10                	jne    c00158ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158da:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158de:	b9 03 00 00 00       	mov    ecx,0x3
c00158e3:	01 d0                	add    eax,edx
c00158e5:	e9 42 01 00 00       	jmp    c0015a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158ea:	b9 02 00 00 00       	mov    ecx,0x2
c00158ef:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158f3:	0f 85 33 01 00 00    	jne    c0015a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158f9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158fc:	eb 18                	jmp    c0015916 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158fe:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015902:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c0015907:	80 f9 05             	cmp    cl,0x5
c001590a:	0f 94 c0             	sete   al
c001590d:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c0015911:	74 0d                	je     c0015920 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015913:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015916:	b9 06 00 00 00       	mov    ecx,0x6
c001591b:	e9 0c 01 00 00       	jmp    c0015a2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015920:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015924:	0f 84 06 01 00 00    	je     c0015a30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c001592a:	80 f9 04             	cmp    cl,0x4
c001592d:	0f 85 06 01 00 00    	jne    c0015a39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015933:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015936:	89 c6                	mov    esi,eax
c0015938:	88 c1                	mov    cl,al
c001593a:	66 c1 ee 03          	shr    si,0x3
c001593e:	c0 e9 06             	shr    cl,0x6
c0015941:	83 e6 07             	and    esi,0x7
c0015944:	24 07                	and    al,0x7
c0015946:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c001594a:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001594e:	89 f1                	mov    ecx,esi
c0015950:	75 05                	jne    c0015957 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015952:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015955:	eb 4b                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015957:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001595c:	75 05                	jne    c0015963 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c001595e:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015961:	eb 3f                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015963:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015968:	75 05                	jne    c001596f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c001596a:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c001596d:	eb 33                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001596f:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015974:	75 05                	jne    c001597b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015976:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015979:	eb 27                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001597b:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c0015980:	75 05                	jne    c0015987 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015982:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015985:	eb 1b                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015987:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001598c:	75 05                	jne    c0015993 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c001598e:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c0015991:	eb 0f                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015993:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015998:	75 05                	jne    c001599f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c001599a:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c001599d:	eb 03                	jmp    c00159a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001599f:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00159a2:	84 c9                	test   cl,cl
c00159a4:	75 05                	jne    c00159ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00159a6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00159a9:	eb 3c                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159ab:	80 f9 01             	cmp    cl,0x1
c00159ae:	75 05                	jne    c00159b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00159b0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00159b3:	eb 32                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b5:	80 f9 02             	cmp    cl,0x2
c00159b8:	75 05                	jne    c00159bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00159ba:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00159bd:	eb 28                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159bf:	80 f9 03             	cmp    cl,0x3
c00159c2:	75 05                	jne    c00159c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159c4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159c7:	eb 1e                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c9:	31 c0                	xor    eax,eax
c00159cb:	80 f9 04             	cmp    cl,0x4
c00159ce:	74 17                	je     c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159d0:	80 f9 05             	cmp    cl,0x5
c00159d3:	75 05                	jne    c00159da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159d5:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159d8:	eb 0d                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159da:	80 f9 06             	cmp    cl,0x6
c00159dd:	75 05                	jne    c00159e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159df:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159e2:	eb 03                	jmp    c00159e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159e4:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159e7:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159ec:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159f0:	0f 94 c2             	sete   dl
c00159f3:	d3 e0                	shl    eax,cl
c00159f5:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159f9:	74 07                	je     c0015a02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159fb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159fe:	31 d2                	xor    edx,edx
c0015a00:	eb 23                	jmp    c0015a25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0015a02:	01 f0                	add    eax,esi
c0015a04:	b9 03 00 00 00       	mov    ecx,0x3
c0015a09:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015a0d:	74 33                	je     c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a0f:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015a13:	75 0d                	jne    c0015a22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015a15:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015a19:	01 c8                	add    eax,ecx
c0015a1b:	b9 04 00 00 00       	mov    ecx,0x4
c0015a20:	eb 20                	jmp    c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a22:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a25:	b9 07 00 00 00       	mov    ecx,0x7
c0015a2a:	eb 16                	jmp    c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a2c:	31 d2                	xor    edx,edx
c0015a2e:	eb 12                	jmp    c0015a42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a30:	b9 02 00 00 00       	mov    ecx,0x2
c0015a35:	b2 01                	mov    dl,0x1
c0015a37:	eb 07                	jmp    c0015a40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a39:	31 d2                	xor    edx,edx
c0015a3b:	b9 02 00 00 00       	mov    ecx,0x2
c0015a40:	31 c0                	xor    eax,eax
c0015a42:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a46:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a48:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a4c:	88 11                	mov    BYTE PTR [ecx],dl
c0015a4e:	5a                   	pop    edx
c0015a4f:	5b                   	pop    ebx
c0015a50:	5e                   	pop    esi
c0015a51:	c3                   	ret    

c0015a52 <Krnl::panic(char const*)>:
c0015a52:	55                   	push   ebp
c0015a53:	89 e5                	mov    ebp,esp
c0015a55:	53                   	push   ebx
c0015a56:	51                   	push   ecx
c0015a57:	a1 f0 51 02 c0       	mov    eax,ds:0xc00251f0
c0015a5c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a5f:	85 c0                	test   eax,eax
c0015a61:	74 02                	je     c0015a65 <Krnl::panic(char const*)+0x13>
c0015a63:	ff d0                	call   eax
c0015a65:	fa                   	cli    
c0015a66:	50                   	push   eax
c0015a67:	c6 05 f4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251f4,0x1
c0015a6e:	50                   	push   eax
c0015a6f:	c6 05 e0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023be0,0x0
c0015a76:	53                   	push   ebx
c0015a77:	68 70 28 02 c0       	push   0xc0022870
c0015a7c:	e8 a2 97 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0015a81:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a86:	5a                   	pop    edx
c0015a87:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a8d:	51                   	push   ecx
c0015a8e:	e8 c0 78 ff ff       	call   c000d353 <setActiveTerminal(VgaText*)>
c0015a93:	83 c4 0c             	add    esp,0xc
c0015a96:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a9b:	6a 01                	push   0x1
c0015a9d:	6a 0f                	push   0xf
c0015a9f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015aa5:	50                   	push   eax
c0015aa6:	e8 e7 72 ff ff       	call   c000cd92 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015aab:	58                   	pop    eax
c0015aac:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ab1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ab7:	50                   	push   eax
c0015ab8:	e8 39 7b ff ff       	call   c000d5f6 <VgaText::clearScreen()>
c0015abd:	58                   	pop    eax
c0015abe:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ac3:	5a                   	pop    edx
c0015ac4:	68 89 28 02 c0       	push   0xc0022889
c0015ac9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015acf:	51                   	push   ecx
c0015ad0:	e8 9f 7c ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015ad5:	58                   	pop    eax
c0015ad6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015adb:	5a                   	pop    edx
c0015adc:	68 30 29 02 c0       	push   0xc0022930
c0015ae1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ae7:	51                   	push   ecx
c0015ae8:	e8 87 7c ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015aed:	58                   	pop    eax
c0015aee:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015af3:	5a                   	pop    edx
c0015af4:	68 a5 28 02 c0       	push   0xc00228a5
c0015af9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aff:	51                   	push   ecx
c0015b00:	e8 6f 7c ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015b05:	58                   	pop    eax
c0015b06:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b0b:	5a                   	pop    edx
c0015b0c:	53                   	push   ebx
c0015b0d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b13:	51                   	push   ecx
c0015b14:	e8 5b 7c ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015b19:	5b                   	pop    ebx
c0015b1a:	58                   	pop    eax
c0015b1b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b20:	68 c5 28 02 c0       	push   0xc00228c5
c0015b25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b2b:	50                   	push   eax
c0015b2c:	e8 43 7c ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015b31:	58                   	pop    eax
c0015b32:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b37:	5a                   	pop    edx
c0015b38:	68 6c 29 02 c0       	push   0xc002296c
c0015b3d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b43:	51                   	push   ecx
c0015b44:	e8 2b 7c ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015b49:	5b                   	pop    ebx
c0015b4a:	58                   	pop    eax
c0015b4b:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b50:	68 a5 28 02 c0       	push   0xc00228a5
c0015b55:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b5b:	50                   	push   eax
c0015b5c:	e8 13 7c ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015b61:	58                   	pop    eax
c0015b62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b67:	5a                   	pop    edx
c0015b68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b6b:	83 c0 0c             	add    eax,0xc
c0015b6e:	50                   	push   eax
c0015b6f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b74:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b7a:	51                   	push   ecx
c0015b7b:	e8 f4 7b ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015b80:	5b                   	pop    ebx
c0015b81:	58                   	pop    eax
c0015b82:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b87:	68 c4 28 02 c0       	push   0xc00228c4
c0015b8c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b92:	50                   	push   eax
c0015b93:	e8 dc 7b ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015b98:	58                   	pop    eax
c0015b99:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b9e:	5a                   	pop    edx
c0015b9f:	68 98 29 02 c0       	push   0xc0022998
c0015ba4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015baa:	51                   	push   ecx
c0015bab:	e8 c4 7b ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015bb0:	5b                   	pop    ebx
c0015bb1:	58                   	pop    eax
c0015bb2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bb7:	68 d8 29 02 c0       	push   0xc00229d8
c0015bbc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bc2:	50                   	push   eax
c0015bc3:	e8 ac 7b ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015bc8:	58                   	pop    eax
c0015bc9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bce:	5a                   	pop    edx
c0015bcf:	68 b0 28 02 c0       	push   0xc00228b0
c0015bd4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bda:	51                   	push   ecx
c0015bdb:	e8 94 7b ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015be0:	5b                   	pop    ebx
c0015be1:	58                   	pop    eax
c0015be2:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015be5:	50                   	push   eax
c0015be6:	68 c8 28 02 c0       	push   0xc00228c8
c0015beb:	e8 33 96 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0015bf0:	58                   	pop    eax
c0015bf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bf4:	5a                   	pop    edx
c0015bf5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bf8:	51                   	push   ecx
c0015bf9:	68 d1 28 02 c0       	push   0xc00228d1
c0015bfe:	e8 20 96 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0015c03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015c06:	5b                   	pop    ebx
c0015c07:	5a                   	pop    edx
c0015c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015c0d:	51                   	push   ecx
c0015c0e:	68 da 28 02 c0       	push   0xc00228da
c0015c13:	e8 0b 96 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0015c18:	5b                   	pop    ebx
c0015c19:	58                   	pop    eax
c0015c1a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c1f:	68 1c 2a 02 c0       	push   0xc0022a1c
c0015c24:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c2a:	50                   	push   eax
c0015c2b:	e8 44 7b ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015c30:	58                   	pop    eax
c0015c31:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c36:	5a                   	pop    edx
c0015c37:	68 e3 28 02 c0       	push   0xc00228e3
c0015c3c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c42:	51                   	push   ecx
c0015c43:	e8 2c 7b ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015c48:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c4d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c53:	e8 10 9f 00 00       	call   c001fb68 <CPU::readCR0()>
c0015c58:	5a                   	pop    edx
c0015c59:	59                   	pop    ecx
c0015c5a:	50                   	push   eax
c0015c5b:	53                   	push   ebx
c0015c5c:	e8 39 7b ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0015c61:	5b                   	pop    ebx
c0015c62:	58                   	pop    eax
c0015c63:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c68:	68 ed 28 02 c0       	push   0xc00228ed
c0015c6d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c73:	50                   	push   eax
c0015c74:	e8 fb 7a ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015c79:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c7e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c84:	e8 cd a1 00 00       	call   c001fe56 <CPU::readCR2()>
c0015c89:	5a                   	pop    edx
c0015c8a:	59                   	pop    ecx
c0015c8b:	50                   	push   eax
c0015c8c:	53                   	push   ebx
c0015c8d:	e8 08 7b ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0015c92:	5b                   	pop    ebx
c0015c93:	58                   	pop    eax
c0015c94:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c99:	68 f7 28 02 c0       	push   0xc00228f7
c0015c9e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ca4:	50                   	push   eax
c0015ca5:	e8 ca 7a ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015caa:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015caf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cb5:	e8 3b 9b 00 00       	call   c001f7f5 <CPU::readCR3()>
c0015cba:	5a                   	pop    edx
c0015cbb:	59                   	pop    ecx
c0015cbc:	50                   	push   eax
c0015cbd:	53                   	push   ebx
c0015cbe:	e8 d7 7a ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0015cc3:	5b                   	pop    ebx
c0015cc4:	58                   	pop    eax
c0015cc5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cca:	68 0a 29 02 c0       	push   0xc002290a
c0015ccf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cd5:	50                   	push   eax
c0015cd6:	e8 99 7a ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015cdb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ce0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ce6:	e8 47 a1 00 00       	call   c001fe32 <CPU::readCR4()>
c0015ceb:	5a                   	pop    edx
c0015cec:	59                   	pop    ecx
c0015ced:	50                   	push   eax
c0015cee:	53                   	push   ebx
c0015cef:	e8 a6 7a ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0015cf4:	5b                   	pop    ebx
c0015cf5:	58                   	pop    eax
c0015cf6:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cfb:	68 14 29 02 c0       	push   0xc0022914
c0015d00:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d06:	50                   	push   eax
c0015d07:	e8 68 7a ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015d0c:	5a                   	pop    edx
c0015d0d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d12:	59                   	pop    ecx
c0015d13:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015d16:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d1c:	53                   	push   ebx
c0015d1d:	50                   	push   eax
c0015d1e:	e8 77 7a ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0015d23:	58                   	pop    eax
c0015d24:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d29:	5a                   	pop    edx
c0015d2a:	68 2b 29 02 c0       	push   0xc002292b
c0015d2f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d35:	51                   	push   ecx
c0015d36:	e8 39 7a ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015d3b:	5b                   	pop    ebx
c0015d3c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d41:	5a                   	pop    edx
c0015d42:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d45:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d4b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d4e:	51                   	push   ecx
c0015d4f:	50                   	push   eax
c0015d50:	e8 45 7a ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0015d55:	5b                   	pop    ebx
c0015d56:	58                   	pop    eax
c0015d57:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d5c:	68 2b 29 02 c0       	push   0xc002292b
c0015d61:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d67:	50                   	push   eax
c0015d68:	e8 07 7a ff ff       	call   c000d774 <VgaText::puts(char const*)>
c0015d6d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d70:	59                   	pop    ecx
c0015d71:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d76:	5b                   	pop    ebx
c0015d77:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d79:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d7f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d82:	52                   	push   edx
c0015d83:	50                   	push   eax
c0015d84:	e8 11 7a ff ff       	call   c000d79a <VgaText::putx(unsigned int)>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	b2 fe                	mov    dl,0xfe
c0015d8e:	e4 60                	in     al,0x60
c0015d90:	3c 1c                	cmp    al,0x1c
c0015d92:	74 04                	je     c0015d98 <Krnl::panic(char const*)+0x346>
c0015d94:	3c 5a                	cmp    al,0x5a
c0015d96:	75 f6                	jne    c0015d8e <Krnl::panic(char const*)+0x33c>
c0015d98:	e4 64                	in     al,0x64
c0015d9a:	a8 02                	test   al,0x2
c0015d9c:	75 fa                	jne    c0015d98 <Krnl::panic(char const*)+0x346>
c0015d9e:	88 d0                	mov    al,dl
c0015da0:	e6 64                	out    0x64,al
c0015da2:	fa                   	cli    
c0015da3:	f4                   	hlt    
c0015da4:	eb e8                	jmp    c0015d8e <Krnl::panic(char const*)+0x33c>

c0015da6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015da6:	55                   	push   ebp
c0015da7:	57                   	push   edi
c0015da8:	56                   	push   esi
c0015da9:	53                   	push   ebx
c0015daa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015db0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015db7:	8d 46 01             	lea    eax,[esi+0x1]
c0015dba:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015dbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dc0:	80 fb 40             	cmp    bl,0x40
c0015dc3:	75 19                	jne    c0015dde <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015dc5:	8a 06                	mov    al,BYTE PTR [esi]
c0015dc7:	84 c0                	test   al,al
c0015dc9:	74 07                	je     c0015dd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dcb:	3c 3a                	cmp    al,0x3a
c0015dcd:	74 03                	je     c0015dd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dcf:	46                   	inc    esi
c0015dd0:	eb f3                	jmp    c0015dc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015dd2:	84 c0                	test   al,al
c0015dd4:	0f 84 1f 01 00 00    	je     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dda:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ddd:	46                   	inc    esi
c0015dde:	50                   	push   eax
c0015ddf:	6a 40                	push   0x40
c0015de1:	6a 00                	push   0x0
c0015de3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015de7:	50                   	push   eax
c0015de8:	e8 e5 a8 fe ff       	call   c00006d2 <memset>
c0015ded:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015df4:	31 d2                	xor    edx,edx
c0015df6:	83 c4 10             	add    esp,0x10
c0015df9:	8a 07                	mov    al,BYTE PTR [edi]
c0015dfb:	84 c0                	test   al,al
c0015dfd:	0f 84 f6 00 00 00    	je     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e03:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015e09:	0f 8f ea 00 00 00    	jg     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e0f:	3c 0a                	cmp    al,0xa
c0015e11:	0f 85 d3 00 00 00    	jne    c0015eea <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015e17:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015e1c:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e20:	f6 c1 df             	test   cl,0xdf
c0015e23:	0f 94 c2             	sete   dl
c0015e26:	80 f9 23             	cmp    cl,0x23
c0015e29:	0f 94 c0             	sete   al
c0015e2c:	08 c2                	or     dl,al
c0015e2e:	75 47                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e30:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e33:	3c 01                	cmp    al,0x1
c0015e35:	76 40                	jbe    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e37:	80 f9 5b             	cmp    cl,0x5b
c0015e3a:	75 3f                	jne    c0015e7b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e3c:	80 fb 40             	cmp    bl,0x40
c0015e3f:	75 36                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e41:	83 ec 0c             	sub    esp,0xc
c0015e44:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e48:	55                   	push   ebp
c0015e49:	e8 a1 a8 fe ff       	call   c00006ef <strlen>
c0015e4e:	83 c4 10             	add    esp,0x10
c0015e51:	83 f8 3f             	cmp    eax,0x3f
c0015e54:	0f 87 9f 00 00 00    	ja     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e5a:	50                   	push   eax
c0015e5b:	50                   	push   eax
c0015e5c:	55                   	push   ebp
c0015e5d:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e61:	55                   	push   ebp
c0015e62:	e8 0a a9 fe ff       	call   c0000771 <strcpy>
c0015e67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e6a:	e8 80 a8 fe ff       	call   c00006ef <strlen>
c0015e6f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e74:	83 c4 10             	add    esp,0x10
c0015e77:	31 c9                	xor    ecx,ecx
c0015e79:	eb 76                	jmp    c0015ef1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e7b:	80 fb 40             	cmp    bl,0x40
c0015e7e:	74 06                	je     c0015e86 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e80:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e84:	eb 19                	jmp    c0015e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e86:	51                   	push   ecx
c0015e87:	51                   	push   ecx
c0015e88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e8c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e90:	50                   	push   eax
c0015e91:	e8 2c a9 fe ff       	call   c00007c2 <strcmp>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	85 c0                	test   eax,eax
c0015e9b:	75 da                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e9d:	eb e1                	jmp    c0015e80 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015ea2:	84 c0                	test   al,al
c0015ea4:	0f 94 c1             	sete   cl
c0015ea7:	3c 3d                	cmp    al,0x3d
c0015ea9:	0f 94 c2             	sete   dl
c0015eac:	08 d1                	or     cl,dl
c0015eae:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015eb2:	75 03                	jne    c0015eb7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015eb4:	45                   	inc    ebp
c0015eb5:	eb e8                	jmp    c0015e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015eb7:	84 c0                	test   al,al
c0015eb9:	74 3e                	je     c0015ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015ebb:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015ebf:	52                   	push   edx
c0015ec0:	52                   	push   edx
c0015ec1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015ec5:	50                   	push   eax
c0015ec6:	56                   	push   esi
c0015ec7:	e8 f6 a8 fe ff       	call   c00007c2 <strcmp>
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	85 c0                	test   eax,eax
c0015ed1:	75 a4                	jne    c0015e77 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ed3:	50                   	push   eax
c0015ed4:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ed7:	50                   	push   eax
c0015ed8:	52                   	push   edx
c0015ed9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015ee0:	e8 8c a8 fe ff       	call   c0000771 <strcpy>
c0015ee5:	83 c4 10             	add    esp,0x10
c0015ee8:	eb 14                	jmp    c0015efe <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015eea:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015eed:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015ef1:	47                   	inc    edi
c0015ef2:	89 ca                	mov    edx,ecx
c0015ef4:	e9 00 ff ff ff       	jmp    c0015df9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015ef9:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015efe:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015f02:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015f08:	5b                   	pop    ebx
c0015f09:	5e                   	pop    esi
c0015f0a:	5f                   	pop    edi
c0015f0b:	5d                   	pop    ebp
c0015f0c:	c3                   	ret    

c0015f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015f0d:	57                   	push   edi
c0015f0e:	56                   	push   esi
c0015f0f:	53                   	push   ebx
c0015f10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015f16:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015f1d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f24:	53                   	push   ebx
c0015f25:	e8 c5 a7 fe ff       	call   c00006ef <strlen>
c0015f2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f2d:	89 c7                	mov    edi,eax
c0015f2f:	e8 bb a7 fe ff       	call   c00006ef <strlen>
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f3b:	31 ff                	xor    edi,edi
c0015f3d:	3d ff 00 00 00       	cmp    eax,0xff
c0015f42:	0f 87 18 01 00 00    	ja     c0016060 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f48:	51                   	push   ecx
c0015f49:	51                   	push   ecx
c0015f4a:	56                   	push   esi
c0015f4b:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f4f:	56                   	push   esi
c0015f50:	e8 1c a8 fe ff       	call   c0000771 <strcpy>
c0015f55:	58                   	pop    eax
c0015f56:	5a                   	pop    edx
c0015f57:	68 54 2e 02 c0       	push   0xc0022e54
c0015f5c:	56                   	push   esi
c0015f5d:	e8 c6 a8 fe ff       	call   c0000828 <strcat>
c0015f62:	59                   	pop    ecx
c0015f63:	58                   	pop    eax
c0015f64:	53                   	push   ebx
c0015f65:	56                   	push   esi
c0015f66:	e8 bd a8 fe ff       	call   c0000828 <strcat>
c0015f6b:	58                   	pop    eax
c0015f6c:	5a                   	pop    edx
c0015f6d:	68 42 2a 02 c0       	push   0xc0022a42
c0015f72:	56                   	push   esi
c0015f73:	e8 b0 a8 fe ff       	call   c0000828 <strcat>
c0015f78:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f7f:	e8 6a 91 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0015f84:	83 c4 0c             	add    esp,0xc
c0015f87:	89 c3                	mov    ebx,eax
c0015f89:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c0015f8f:	56                   	push   esi
c0015f90:	50                   	push   eax
c0015f91:	e8 c4 97 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c0015f96:	59                   	pop    ecx
c0015f97:	5e                   	pop    esi
c0015f98:	6a 01                	push   0x1
c0015f9a:	53                   	push   ebx
c0015f9b:	e8 1e 98 ff ff       	call   c000f7be <File::open(FileOpenMode)>
c0015fa0:	83 c4 10             	add    esp,0x10
c0015fa3:	85 c0                	test   eax,eax
c0015fa5:	74 08                	je     c0015faf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015fa7:	83 ec 0c             	sub    esp,0xc
c0015faa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fac:	53                   	push   ebx
c0015fad:	eb 2e                	jmp    c0015fdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015faf:	52                   	push   edx
c0015fb0:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015fb4:	50                   	push   eax
c0015fb5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fb9:	50                   	push   eax
c0015fba:	53                   	push   ebx
c0015fbb:	e8 aa 9a ff ff       	call   c000fa6a <File::stat(unsigned long long*, bool*)>
c0015fc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fc4:	83 c4 10             	add    esp,0x10
c0015fc7:	89 c1                	mov    ecx,eax
c0015fc9:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fcd:	75 13                	jne    c0015fe2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fcf:	83 ec 0c             	sub    esp,0xc
c0015fd2:	53                   	push   ebx
c0015fd3:	e8 44 98 ff ff       	call   c000f81c <File::close()>
c0015fd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fe0:	eb 7b                	jmp    c001605d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fe2:	83 ec 0c             	sub    esp,0xc
c0015fe5:	50                   	push   eax
c0015fe6:	e8 06 60 ff ff       	call   c000bff1 <malloc>
c0015feb:	89 c6                	mov    esi,eax
c0015fed:	58                   	pop    eax
c0015fee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ff0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015ff4:	52                   	push   edx
c0015ff5:	56                   	push   esi
c0015ff6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ffa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ffe:	53                   	push   ebx
c0015fff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016002:	83 c4 20             	add    esp,0x20
c0016005:	85 c0                	test   eax,eax
c0016007:	75 0a                	jne    c0016013 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0016009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001600d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016011:	74 18                	je     c001602b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0016013:	83 ec 0c             	sub    esp,0xc
c0016016:	31 ff                	xor    edi,edi
c0016018:	53                   	push   ebx
c0016019:	e8 fe 97 ff ff       	call   c000f81c <File::close()>
c001601e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016023:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016026:	83 c4 10             	add    esp,0x10
c0016029:	eb 35                	jmp    c0016060 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001602b:	83 ec 0c             	sub    esp,0xc
c001602e:	53                   	push   ebx
c001602f:	e8 e8 97 ff ff       	call   c000f81c <File::close()>
c0016034:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016039:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001603c:	83 c4 0c             	add    esp,0xc
c001603f:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016046:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001604d:	56                   	push   esi
c001604e:	e8 53 fd ff ff       	call   c0015da6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0016053:	89 34 24             	mov    DWORD PTR [esp],esi
c0016056:	89 c7                	mov    edi,eax
c0016058:	e8 a4 5f ff ff       	call   c000c001 <free>
c001605d:	83 c4 10             	add    esp,0x10
c0016060:	81 c4 10 01 00 00    	add    esp,0x110
c0016066:	89 f8                	mov    eax,edi
c0016068:	5b                   	pop    ebx
c0016069:	5e                   	pop    esi
c001606a:	5f                   	pop    edi
c001606b:	c3                   	ret    

c001606c <Reg::getLine(char*, char*, char*)>:
c001606c:	57                   	push   edi
c001606d:	56                   	push   esi
c001606e:	53                   	push   ebx
c001606f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016077:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001607b:	57                   	push   edi
c001607c:	56                   	push   esi
c001607d:	53                   	push   ebx
c001607e:	68 47 2a 02 c0       	push   0xc0022a47
c0016083:	e8 85 fe ff ff       	call   c0015f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016088:	83 c4 10             	add    esp,0x10
c001608b:	84 c0                	test   al,al
c001608d:	75 10                	jne    c001609f <Reg::getLine(char*, char*, char*)+0x33>
c001608f:	57                   	push   edi
c0016090:	56                   	push   esi
c0016091:	53                   	push   ebx
c0016092:	68 6c 2a 02 c0       	push   0xc0022a6c
c0016097:	e8 71 fe ff ff       	call   c0015f0d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001609c:	83 c4 10             	add    esp,0x10
c001609f:	5b                   	pop    ebx
c00160a0:	5e                   	pop    esi
c00160a1:	5f                   	pop    edi
c00160a2:	c3                   	ret    

c00160a3 <Reg::readInt(char*, char*, int*)>:
c00160a3:	55                   	push   ebp
c00160a4:	57                   	push   edi
c00160a5:	56                   	push   esi
c00160a6:	53                   	push   ebx
c00160a7:	81 ec f0 00 00 00    	sub    esp,0xf0
c00160ad:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00160b1:	57                   	push   edi
c00160b2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160b9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160c0:	e8 a7 ff ff ff       	call   c001606c <Reg::getLine(char*, char*, char*)>
c00160c5:	83 c4 10             	add    esp,0x10
c00160c8:	84 c0                	test   al,al
c00160ca:	0f 84 b2 00 00 00    	je     c0016182 <Reg::readInt(char*, char*, int*)+0xdf>
c00160d0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160d4:	80 fa 2b             	cmp    dl,0x2b
c00160d7:	74 0c                	je     c00160e5 <Reg::readInt(char*, char*, int*)+0x42>
c00160d9:	80 fa 2d             	cmp    dl,0x2d
c00160dc:	75 0e                	jne    c00160ec <Reg::readInt(char*, char*, int*)+0x49>
c00160de:	ba 01 00 00 00       	mov    edx,0x1
c00160e3:	eb 0b                	jmp    c00160f0 <Reg::readInt(char*, char*, int*)+0x4d>
c00160e5:	ba 01 00 00 00       	mov    edx,0x1
c00160ea:	eb 02                	jmp    c00160ee <Reg::readInt(char*, char*, int*)+0x4b>
c00160ec:	31 d2                	xor    edx,edx
c00160ee:	31 c0                	xor    eax,eax
c00160f0:	be 0a 00 00 00       	mov    esi,0xa
c00160f5:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160fa:	75 20                	jne    c001611c <Reg::readInt(char*, char*, int*)+0x79>
c00160fc:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0016100:	80 f9 78             	cmp    cl,0x78
c0016103:	75 0a                	jne    c001610f <Reg::readInt(char*, char*, int*)+0x6c>
c0016105:	83 c2 02             	add    edx,0x2
c0016108:	be 10 00 00 00       	mov    esi,0x10
c001610d:	eb 0d                	jmp    c001611c <Reg::readInt(char*, char*, int*)+0x79>
c001610f:	80 f9 62             	cmp    cl,0x62
c0016112:	75 08                	jne    c001611c <Reg::readInt(char*, char*, int*)+0x79>
c0016114:	83 c2 02             	add    edx,0x2
c0016117:	be 02 00 00 00       	mov    esi,0x2
c001611c:	01 d7                	add    edi,edx
c001611e:	31 d2                	xor    edx,edx
c0016120:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016122:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016126:	84 db                	test   bl,bl
c0016128:	0f 94 c3             	sete   bl
c001612b:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016130:	0f 94 c1             	sete   cl
c0016133:	08 cb                	or     bl,cl
c0016135:	75 3a                	jne    c0016171 <Reg::readInt(char*, char*, int*)+0xce>
c0016137:	0f af d6             	imul   edx,esi
c001613a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001613f:	83 fe 10             	cmp    esi,0x10
c0016142:	75 26                	jne    c001616a <Reg::readInt(char*, char*, int*)+0xc7>
c0016144:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016148:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001614b:	89 e9                	mov    ecx,ebp
c001614d:	80 f9 05             	cmp    cl,0x5
c0016150:	77 06                	ja     c0016158 <Reg::readInt(char*, char*, int*)+0xb5>
c0016152:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016156:	eb 16                	jmp    c001616e <Reg::readInt(char*, char*, int*)+0xcb>
c0016158:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001615c:	83 e9 61             	sub    ecx,0x61
c001615f:	80 f9 05             	cmp    cl,0x5
c0016162:	77 06                	ja     c001616a <Reg::readInt(char*, char*, int*)+0xc7>
c0016164:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016168:	eb 04                	jmp    c001616e <Reg::readInt(char*, char*, int*)+0xcb>
c001616a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001616e:	47                   	inc    edi
c001616f:	eb af                	jmp    c0016120 <Reg::readInt(char*, char*, int*)+0x7d>
c0016171:	84 c0                	test   al,al
c0016173:	74 02                	je     c0016177 <Reg::readInt(char*, char*, int*)+0xd4>
c0016175:	f7 da                	neg    edx
c0016177:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001617e:	89 10                	mov    DWORD PTR [eax],edx
c0016180:	88 d8                	mov    al,bl
c0016182:	81 c4 ec 00 00 00    	add    esp,0xec
c0016188:	5b                   	pop    ebx
c0016189:	5e                   	pop    esi
c001618a:	5f                   	pop    edi
c001618b:	5d                   	pop    ebp
c001618c:	c3                   	ret    

c001618d <Reg::readString(char*, char*, char*, int)>:
c001618d:	57                   	push   edi
c001618e:	56                   	push   esi
c001618f:	53                   	push   ebx
c0016190:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016196:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001619a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00161a1:	57                   	push   edi
c00161a2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00161a9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00161b0:	e8 b7 fe ff ff       	call   c001606c <Reg::getLine(char*, char*, char*)>
c00161b5:	83 c4 10             	add    esp,0x10
c00161b8:	89 c6                	mov    esi,eax
c00161ba:	84 c0                	test   al,al
c00161bc:	74 44                	je     c0016202 <Reg::readString(char*, char*, char*, int)+0x75>
c00161be:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161c5:	31 c0                	xor    eax,eax
c00161c7:	4a                   	dec    edx
c00161c8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161cb:	84 c9                	test   cl,cl
c00161cd:	74 0f                	je     c00161de <Reg::readString(char*, char*, char*, int)+0x51>
c00161cf:	39 c2                	cmp    edx,eax
c00161d1:	7e 0b                	jle    c00161de <Reg::readString(char*, char*, char*, int)+0x51>
c00161d3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161d6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161db:	40                   	inc    eax
c00161dc:	eb ea                	jmp    c00161c8 <Reg::readString(char*, char*, char*, int)+0x3b>
c00161de:	83 ec 0c             	sub    esp,0xc
c00161e1:	53                   	push   ebx
c00161e2:	e8 08 a5 fe ff       	call   c00006ef <strlen>
c00161e7:	83 c4 10             	add    esp,0x10
c00161ea:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161ef:	75 11                	jne    c0016202 <Reg::readString(char*, char*, char*, int)+0x75>
c00161f1:	83 ec 0c             	sub    esp,0xc
c00161f4:	53                   	push   ebx
c00161f5:	e8 f5 a4 fe ff       	call   c00006ef <strlen>
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016202:	81 c4 d0 00 00 00    	add    esp,0xd0
c0016208:	89 f0                	mov    eax,esi
c001620a:	5b                   	pop    ebx
c001620b:	5e                   	pop    esi
c001620c:	5f                   	pop    edi
c001620d:	c3                   	ret    

c001620e <Reg::readBool(char*, char*, bool*)>:
c001620e:	83 ec 20             	sub    esp,0x20
c0016211:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016215:	50                   	push   eax
c0016216:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001621a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001621e:	e8 80 fe ff ff       	call   c00160a3 <Reg::readInt(char*, char*, int*)>
c0016223:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016227:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001622c:	0f 95 02             	setne  BYTE PTR [edx]
c001622f:	83 c4 2c             	add    esp,0x2c
c0016232:	c3                   	ret    

c0016233 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016233:	53                   	push   ebx
c0016234:	83 ec 1c             	sub    esp,0x1c
c0016237:	8d 44 24 13          	lea    eax,[esp+0x13]
c001623b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001623f:	50                   	push   eax
c0016240:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016244:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016248:	e8 c1 ff ff ff       	call   c001620e <Reg::readBool(char*, char*, bool*)>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	84 c0                	test   al,al
c0016252:	74 04                	je     c0016258 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016254:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016258:	83 c4 18             	add    esp,0x18
c001625b:	88 d8                	mov    al,bl
c001625d:	5b                   	pop    ebx
c001625e:	c3                   	ret    

c001625f <Reg::readIntWithDefault(char*, char*, int)>:
c001625f:	53                   	push   ebx
c0016260:	83 ec 1c             	sub    esp,0x1c
c0016263:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016267:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001626b:	50                   	push   eax
c001626c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016270:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016274:	e8 2a fe ff ff       	call   c00160a3 <Reg::readInt(char*, char*, int*)>
c0016279:	83 c4 10             	add    esp,0x10
c001627c:	84 c0                	test   al,al
c001627e:	74 04                	je     c0016284 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0016280:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016284:	83 c4 18             	add    esp,0x18
c0016287:	89 d8                	mov    eax,ebx
c0016289:	5b                   	pop    ebx
c001628a:	c3                   	ret    

c001628b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001628b:	56                   	push   esi
c001628c:	53                   	push   ebx
c001628d:	51                   	push   ecx
c001628e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016292:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629a:	56                   	push   esi
c001629b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001629f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a3:	e8 e5 fe ff ff       	call   c001618d <Reg::readString(char*, char*, char*, int)>
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	84 c0                	test   al,al
c00162ad:	74 02                	je     c00162b1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00162af:	89 f3                	mov    ebx,esi
c00162b1:	5a                   	pop    edx
c00162b2:	89 d8                	mov    eax,ebx
c00162b4:	5b                   	pop    ebx
c00162b5:	5e                   	pop    esi
c00162b6:	c3                   	ret    

c00162b7 <Sys::exit(regs*)>:
c00162b7:	83 ec 18             	sub    esp,0x18
c00162ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162be:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162c1:	e8 c2 31 00 00       	call   c0019488 <terminateTask(int)>
c00162c6:	83 c8 ff             	or     eax,0xffffffff
c00162c9:	89 c2                	mov    edx,eax
c00162cb:	83 c4 1c             	add    esp,0x1c
c00162ce:	c3                   	ret    

c00162cf <Sys::loadDLL(regs*)>:
c00162cf:	56                   	push   esi
c00162d0:	31 d2                	xor    edx,edx
c00162d2:	53                   	push   ebx
c00162d3:	b8 01 00 00 00       	mov    eax,0x1
c00162d8:	51                   	push   ecx
c00162d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162dd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162e1:	74 7d                	je     c0016360 <Sys::loadDLL(regs*)+0x91>
c00162e3:	83 ec 0c             	sub    esp,0xc
c00162e6:	68 14 01 00 00       	push   0x114
c00162eb:	e8 fe 8d ff ff       	call   c000f0ee <operator new(unsigned long)>
c00162f0:	89 c3                	mov    ebx,eax
c00162f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f7:	83 c4 0c             	add    esp,0xc
c00162fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016300:	53                   	push   ebx
c0016301:	e8 54 94 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c0016306:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016309:	e8 1e 97 ff ff       	call   c000fa2c <File::exists()>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	84 c0                	test   al,al
c0016313:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016315:	75 11                	jne    c0016328 <Sys::loadDLL(regs*)+0x59>
c0016317:	83 ec 0c             	sub    esp,0xc
c001631a:	53                   	push   ebx
c001631b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001631e:	83 c4 10             	add    esp,0x10
c0016321:	b8 03 00 00 00       	mov    eax,0x3
c0016326:	eb 36                	jmp    c001635e <Sys::loadDLL(regs*)+0x8f>
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	53                   	push   ebx
c001632c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001632f:	58                   	pop    eax
c0016330:	5a                   	pop    edx
c0016331:	6a 00                	push   0x0
c0016333:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016336:	e8 3a 21 00 00       	call   c0018475 <Thr::loadDLL(char const*, bool)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	89 c1                	mov    ecx,eax
c0016340:	31 d2                	xor    edx,edx
c0016342:	b8 04 00 00 00       	mov    eax,0x4
c0016347:	85 c9                	test   ecx,ecx
c0016349:	74 15                	je     c0016360 <Sys::loadDLL(regs*)+0x91>
c001634b:	53                   	push   ebx
c001634c:	53                   	push   ebx
c001634d:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0016353:	51                   	push   ecx
c0016354:	e8 e2 22 00 00       	call   c001863b <Thr::executeDLL(unsigned long, void*)>
c0016359:	83 c4 10             	add    esp,0x10
c001635c:	31 c0                	xor    eax,eax
c001635e:	31 d2                	xor    edx,edx
c0016360:	59                   	pop    ecx
c0016361:	5b                   	pop    ebx
c0016362:	5e                   	pop    esi
c0016363:	c3                   	ret    

c0016364 <Sys::read(regs*)>:
c0016364:	57                   	push   edi
c0016365:	56                   	push   esi
c0016366:	53                   	push   ebx
c0016367:	83 ec 10             	sub    esp,0x10
c001636a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001636e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016371:	83 f8 02             	cmp    eax,0x2
c0016374:	77 10                	ja     c0016386 <Sys::read(regs*)+0x22>
c0016376:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001637b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001637e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016384:	eb 0e                	jmp    c0016394 <Sys::read(regs*)+0x30>
c0016386:	83 ec 0c             	sub    esp,0xc
c0016389:	50                   	push   eax
c001638a:	e8 f0 7c ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c001638f:	83 c4 10             	add    esp,0x10
c0016392:	89 c1                	mov    ecx,eax
c0016394:	83 c8 ff             	or     eax,0xffffffff
c0016397:	85 c9                	test   ecx,ecx
c0016399:	89 c2                	mov    edx,eax
c001639b:	74 28                	je     c00163c5 <Sys::read(regs*)+0x61>
c001639d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163a5:	83 ec 0c             	sub    esp,0xc
c00163a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00163aa:	31 ff                	xor    edi,edi
c00163ac:	8d 54 24 18          	lea    edx,[esp+0x18]
c00163b0:	52                   	push   edx
c00163b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163b4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163b7:	57                   	push   edi
c00163b8:	56                   	push   esi
c00163b9:	51                   	push   ecx
c00163ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163c1:	83 c4 20             	add    esp,0x20
c00163c4:	99                   	cdq    
c00163c5:	83 c4 10             	add    esp,0x10
c00163c8:	5b                   	pop    ebx
c00163c9:	5e                   	pop    esi
c00163ca:	5f                   	pop    edi
c00163cb:	c3                   	ret    

c00163cc <Sys::sbrk(regs*)>:
c00163cc:	56                   	push   esi
c00163cd:	53                   	push   ebx
c00163ce:	50                   	push   eax
c00163cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163db:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163de:	85 db                	test   ebx,ebx
c00163e0:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163e6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163e9:	74 02                	je     c00163ed <Sys::sbrk(regs*)+0x21>
c00163eb:	79 06                	jns    c00163f3 <Sys::sbrk(regs*)+0x27>
c00163ed:	89 f0                	mov    eax,esi
c00163ef:	31 d2                	xor    edx,edx
c00163f1:	eb 2a                	jmp    c001641d <Sys::sbrk(regs*)+0x51>
c00163f3:	83 c8 ff             	or     eax,0xffffffff
c00163f6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163fc:	89 c2                	mov    edx,eax
c00163fe:	77 1d                	ja     c001641d <Sys::sbrk(regs*)+0x51>
c0016400:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0016406:	50                   	push   eax
c0016407:	c1 ea 0c             	shr    edx,0xc
c001640a:	68 07 04 00 00       	push   0x407
c001640f:	52                   	push   edx
c0016410:	51                   	push   ecx
c0016411:	e8 c0 85 ff ff       	call   c000e9d6 <VAS::allocatePages(int, int)>
c0016416:	89 f0                	mov    eax,esi
c0016418:	31 d2                	xor    edx,edx
c001641a:	83 c4 10             	add    esp,0x10
c001641d:	59                   	pop    ecx
c001641e:	5b                   	pop    ebx
c001641f:	5e                   	pop    esi
c0016420:	c3                   	ret    

c0016421 <Sys::write(regs*)>:
c0016421:	57                   	push   edi
c0016422:	56                   	push   esi
c0016423:	53                   	push   ebx
c0016424:	83 ec 18             	sub    esp,0x18
c0016427:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001642b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001642e:	68 87 2a 02 c0       	push   0xc0022a87
c0016433:	e8 eb 8d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0016438:	83 c4 10             	add    esp,0x10
c001643b:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c001643f:	77 10                	ja     c0016451 <Sys::write(regs*)+0x30>
c0016441:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016446:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016449:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001644f:	eb 1b                	jmp    c001646c <Sys::write(regs*)+0x4b>
c0016451:	83 ec 0c             	sub    esp,0xc
c0016454:	68 a6 2a 02 c0       	push   0xc0022aa6
c0016459:	e8 c5 8d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001645e:	58                   	pop    eax
c001645f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016462:	e8 18 7c ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	89 c1                	mov    ecx,eax
c001646c:	83 c8 ff             	or     eax,0xffffffff
c001646f:	85 c9                	test   ecx,ecx
c0016471:	89 c2                	mov    edx,eax
c0016473:	74 28                	je     c001649d <Sys::write(regs*)+0x7c>
c0016475:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001647d:	83 ec 0c             	sub    esp,0xc
c0016480:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016482:	31 ff                	xor    edi,edi
c0016484:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016488:	52                   	push   edx
c0016489:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001648c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001648f:	57                   	push   edi
c0016490:	56                   	push   esi
c0016491:	51                   	push   ecx
c0016492:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016495:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016499:	83 c4 20             	add    esp,0x20
c001649c:	99                   	cdq    
c001649d:	83 c4 10             	add    esp,0x10
c00164a0:	5b                   	pop    ebx
c00164a1:	5e                   	pop    esi
c00164a2:	5f                   	pop    edi
c00164a3:	c3                   	ret    

c00164a4 <Sys::yield(regs*)>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	e8 af 25 00 00       	call   c0018a5b <lockScheduler()>
c00164ac:	e8 f3 28 00 00       	call   c0018da4 <schedule()>
c00164b1:	e8 a7 25 00 00       	call   c0018a5d <unlockScheduler()>
c00164b6:	31 c0                	xor    eax,eax
c00164b8:	31 d2                	xor    edx,edx
c00164ba:	83 c4 0c             	add    esp,0xc
c00164bd:	c3                   	ret    

c00164be <sysCallGetPID(regs*)>:
c00164be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00164c8:	89 c2                	mov    edx,eax
c00164ca:	c1 fa 1f             	sar    edx,0x1f
c00164cd:	c3                   	ret    

c00164ce <sysCallSeekDir(regs*)>:
c00164ce:	31 c0                	xor    eax,eax
c00164d0:	31 d2                	xor    edx,edx
c00164d2:	c3                   	ret    

c00164d3 <sysCallTellDir(regs*)>:
c00164d3:	31 c0                	xor    eax,eax
c00164d5:	31 d2                	xor    edx,edx
c00164d7:	c3                   	ret    

c00164d8 <sysCallVerify(regs*)>:
c00164d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164dc:	31 d2                	xor    edx,edx
c00164de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164e1:	c3                   	ret    

c00164e2 <sysCallFork(regs*)>:
c00164e2:	83 c8 ff             	or     eax,0xffffffff
c00164e5:	83 ca ff             	or     edx,0xffffffff
c00164e8:	c3                   	ret    

c00164e9 <sysCallExecve(regs*)>:
c00164e9:	83 c8 ff             	or     eax,0xffffffff
c00164ec:	83 ca ff             	or     edx,0xffffffff
c00164ef:	c3                   	ret    

c00164f0 <sysCallGetArgc(regs*)>:
c00164f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164f8:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164fe:	89 c2                	mov    edx,eax
c0016500:	c1 fa 1f             	sar    edx,0x1f
c0016503:	c3                   	ret    

c0016504 <sysFormatDisk(regs*)>:
c0016504:	56                   	push   esi
c0016505:	53                   	push   ebx
c0016506:	50                   	push   eax
c0016507:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001650b:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c0016511:	eb 2a                	jmp    c001653d <sysFormatDisk(regs*)+0x39>
c0016513:	83 ec 0c             	sub    esp,0xc
c0016516:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016519:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001651c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001651e:	51                   	push   ecx
c001651f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0016522:	51                   	push   ecx
c0016523:	50                   	push   eax
c0016524:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001652b:	50                   	push   eax
c001652c:	53                   	push   ebx
c001652d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0016530:	83 c4 20             	add    esp,0x20
c0016533:	89 c1                	mov    ecx,eax
c0016535:	83 f8 08             	cmp    eax,0x8
c0016538:	75 12                	jne    c001654c <sysFormatDisk(regs*)+0x48>
c001653a:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001653d:	85 db                	test   ebx,ebx
c001653f:	75 d2                	jne    c0016513 <sysFormatDisk(regs*)+0xf>
c0016541:	b8 03 00 00 00       	mov    eax,0x3
c0016546:	31 d2                	xor    edx,edx
c0016548:	59                   	pop    ecx
c0016549:	5b                   	pop    ebx
c001654a:	5e                   	pop    esi
c001654b:	c3                   	ret    
c001654c:	85 c0                	test   eax,eax
c001654e:	74 13                	je     c0016563 <sysFormatDisk(regs*)+0x5f>
c0016550:	31 d2                	xor    edx,edx
c0016552:	b8 01 00 00 00       	mov    eax,0x1
c0016557:	83 f9 09             	cmp    ecx,0x9
c001655a:	74 ec                	je     c0016548 <sysFormatDisk(regs*)+0x44>
c001655c:	b8 02 00 00 00       	mov    eax,0x2
c0016561:	eb e3                	jmp    c0016546 <sysFormatDisk(regs*)+0x42>
c0016563:	31 c0                	xor    eax,eax
c0016565:	eb df                	jmp    c0016546 <sysFormatDisk(regs*)+0x42>

c0016567 <sysSetDiskVolumeLabel(regs*)>:
c0016567:	56                   	push   esi
c0016568:	53                   	push   ebx
c0016569:	53                   	push   ebx
c001656a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001656e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016571:	83 f8 19             	cmp    eax,0x19
c0016574:	77 2d                	ja     c00165a3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016576:	8b 0c 85 a0 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb260]
c001657d:	85 c9                	test   ecx,ecx
c001657f:	74 22                	je     c00165a3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016581:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016584:	85 d2                	test   edx,edx
c0016586:	74 1b                	je     c00165a3 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016588:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001658e:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016590:	52                   	push   edx
c0016591:	50                   	push   eax
c0016592:	51                   	push   ecx
c0016593:	53                   	push   ebx
c0016594:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016597:	83 c4 10             	add    esp,0x10
c001659a:	89 c2                	mov    edx,eax
c001659c:	c1 fa 1f             	sar    edx,0x1f
c001659f:	59                   	pop    ecx
c00165a0:	5b                   	pop    ebx
c00165a1:	5e                   	pop    esi
c00165a2:	c3                   	ret    
c00165a3:	59                   	pop    ecx
c00165a4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165a9:	5b                   	pop    ebx
c00165aa:	83 ca ff             	or     edx,0xffffffff
c00165ad:	5e                   	pop    esi
c00165ae:	c3                   	ret    

c00165af <sysGetDiskVolumeLabel(regs*)>:
c00165af:	57                   	push   edi
c00165b0:	56                   	push   esi
c00165b1:	53                   	push   ebx
c00165b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165b9:	83 fa 19             	cmp    edx,0x19
c00165bc:	77 38                	ja     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165be:	8b 0c 95 a0 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb260]
c00165c5:	85 c9                	test   ecx,ecx
c00165c7:	74 2d                	je     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165c9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165cc:	85 db                	test   ebx,ebx
c00165ce:	74 26                	je     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165d3:	85 c0                	test   eax,eax
c00165d5:	74 1f                	je     c00165f6 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165d7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165dd:	83 ec 0c             	sub    esp,0xc
c00165e0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165e2:	50                   	push   eax
c00165e3:	53                   	push   ebx
c00165e4:	52                   	push   edx
c00165e5:	51                   	push   ecx
c00165e6:	56                   	push   esi
c00165e7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165ea:	83 c4 20             	add    esp,0x20
c00165ed:	89 c2                	mov    edx,eax
c00165ef:	c1 fa 1f             	sar    edx,0x1f
c00165f2:	5b                   	pop    ebx
c00165f3:	5e                   	pop    esi
c00165f4:	5f                   	pop    edi
c00165f5:	c3                   	ret    
c00165f6:	5b                   	pop    ebx
c00165f7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165fc:	5e                   	pop    esi
c00165fd:	83 ca ff             	or     edx,0xffffffff
c0016600:	5f                   	pop    edi
c0016601:	c3                   	ret    

c0016602 <sysShutdown(regs*)>:
c0016602:	57                   	push   edi
c0016603:	56                   	push   esi
c0016604:	56                   	push   esi
c0016605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016609:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001660c:	85 c0                	test   eax,eax
c001660e:	74 18                	je     c0016628 <sysShutdown(regs*)+0x26>
c0016610:	83 f8 01             	cmp    eax,0x1
c0016613:	74 51                	je     c0016666 <sysShutdown(regs*)+0x64>
c0016615:	83 ce ff             	or     esi,0xffffffff
c0016618:	83 cf ff             	or     edi,0xffffffff
c001661b:	83 f8 02             	cmp    eax,0x2
c001661e:	74 2a                	je     c001664a <sysShutdown(regs*)+0x48>
c0016620:	59                   	pop    ecx
c0016621:	89 f0                	mov    eax,esi
c0016623:	5e                   	pop    esi
c0016624:	89 fa                	mov    edx,edi
c0016626:	5f                   	pop    edi
c0016627:	c3                   	ret    
c0016628:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001662d:	83 ce ff             	or     esi,0xffffffff
c0016630:	83 cf ff             	or     edi,0xffffffff
c0016633:	8b 10                	mov    edx,DWORD PTR [eax]
c0016635:	6a 00                	push   0x0
c0016637:	6a 00                	push   0x0
c0016639:	6a 00                	push   0x0
c001663b:	50                   	push   eax
c001663c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	89 f0                	mov    eax,esi
c0016644:	89 fa                	mov    edx,edi
c0016646:	59                   	pop    ecx
c0016647:	5e                   	pop    esi
c0016648:	5f                   	pop    edi
c0016649:	c3                   	ret    
c001664a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001664f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016651:	6a 00                	push   0x0
c0016653:	6a 00                	push   0x0
c0016655:	6a 01                	push   0x1
c0016657:	50                   	push   eax
c0016658:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001665b:	83 c4 10             	add    esp,0x10
c001665e:	89 f0                	mov    eax,esi
c0016660:	89 fa                	mov    edx,edi
c0016662:	59                   	pop    ecx
c0016663:	5e                   	pop    esi
c0016664:	5f                   	pop    edi
c0016665:	c3                   	ret    
c0016666:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001666b:	85 c0                	test   eax,eax
c001666d:	74 02                	je     c0016671 <sysShutdown(regs*)+0x6f>
c001666f:	ff d0                	call   eax
c0016671:	31 f6                	xor    esi,esi
c0016673:	59                   	pop    ecx
c0016674:	31 ff                	xor    edi,edi
c0016676:	89 f0                	mov    eax,esi
c0016678:	5e                   	pop    esi
c0016679:	89 fa                	mov    edx,edi
c001667b:	5f                   	pop    edi
c001667c:	c3                   	ret    

c001667d <sysCallGetCwd(regs*)>:
c001667d:	83 ec 10             	sub    esp,0x10
c0016680:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016684:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016687:	52                   	push   edx
c0016688:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001668b:	51                   	push   ecx
c001668c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016691:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016694:	50                   	push   eax
c0016695:	e8 31 94 ff ff       	call   c000facb <getcwd(Process*, char*, int)>
c001669a:	89 c2                	mov    edx,eax
c001669c:	83 c4 1c             	add    esp,0x1c
c001669f:	c1 fa 1f             	sar    edx,0x1f
c00166a2:	c3                   	ret    

c00166a3 <sysCallSetCwd(regs*)>:
c00166a3:	83 ec 14             	sub    esp,0x14
c00166a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00166ad:	50                   	push   eax
c00166ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166b3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00166b6:	52                   	push   edx
c00166b7:	e8 39 94 ff ff       	call   c000faf5 <setcwd(Process*, char*)>
c00166bc:	89 c2                	mov    edx,eax
c00166be:	83 c4 1c             	add    esp,0x1c
c00166c1:	c1 fa 1f             	sar    edx,0x1f
c00166c4:	c3                   	ret    

c00166c5 <sysCallRealpath(regs*)>:
c00166c5:	53                   	push   ebx
c00166c6:	83 ec 08             	sub    esp,0x8
c00166c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166cd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166d0:	85 c9                	test   ecx,ecx
c00166d2:	74 35                	je     c0016709 <sysCallRealpath(regs*)+0x44>
c00166d4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166d7:	31 d2                	xor    edx,edx
c00166d9:	b8 01 00 00 00       	mov    eax,0x1
c00166de:	85 db                	test   ebx,ebx
c00166e0:	75 05                	jne    c00166e7 <sysCallRealpath(regs*)+0x22>
c00166e2:	83 c4 08             	add    esp,0x8
c00166e5:	5b                   	pop    ebx
c00166e6:	c3                   	ret    
c00166e7:	50                   	push   eax
c00166e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166f0:	05 0c 01 00 00       	add    eax,0x10c
c00166f5:	50                   	push   eax
c00166f6:	51                   	push   ecx
c00166f7:	53                   	push   ebx
c00166f8:	e8 b3 8e ff ff       	call   c000f5b0 <standardiseFiles(char*, char const*, char const*)>
c00166fd:	83 c4 10             	add    esp,0x10
c0016700:	31 c0                	xor    eax,eax
c0016702:	31 d2                	xor    edx,edx
c0016704:	83 c4 08             	add    esp,0x8
c0016707:	5b                   	pop    ebx
c0016708:	c3                   	ret    
c0016709:	b8 01 00 00 00       	mov    eax,0x1
c001670e:	31 d2                	xor    edx,edx
c0016710:	eb f2                	jmp    c0016704 <sysCallRealpath(regs*)+0x3f>

c0016712 <sysCallReadDir(regs*)>:
c0016712:	53                   	push   ebx
c0016713:	83 ec 18             	sub    esp,0x18
c0016716:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001671a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001671d:	83 f8 02             	cmp    eax,0x2
c0016720:	76 56                	jbe    c0016778 <sysCallReadDir(regs*)+0x66>
c0016722:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016725:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001672b:	77 57                	ja     c0016784 <sysCallReadDir(regs*)+0x72>
c001672d:	83 ec 0c             	sub    esp,0xc
c0016730:	50                   	push   eax
c0016731:	e8 49 79 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c0016736:	83 c4 10             	add    esp,0x10
c0016739:	85 c0                	test   eax,eax
c001673b:	74 57                	je     c0016794 <sysCallReadDir(regs*)+0x82>
c001673d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016745:	83 ec 0c             	sub    esp,0xc
c0016748:	8b 10                	mov    edx,DWORD PTR [eax]
c001674a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001674e:	51                   	push   ecx
c001674f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016752:	51                   	push   ecx
c0016753:	6a 00                	push   0x0
c0016755:	68 10 01 00 00       	push   0x110
c001675a:	50                   	push   eax
c001675b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001675e:	83 c4 20             	add    esp,0x20
c0016761:	89 c1                	mov    ecx,eax
c0016763:	85 c0                	test   eax,eax
c0016765:	74 38                	je     c001679f <sysCallReadDir(regs*)+0x8d>
c0016767:	31 d2                	xor    edx,edx
c0016769:	b8 02 00 00 00       	mov    eax,0x2
c001676e:	83 f9 07             	cmp    ecx,0x7
c0016771:	74 05                	je     c0016778 <sysCallReadDir(regs*)+0x66>
c0016773:	83 c4 18             	add    esp,0x18
c0016776:	5b                   	pop    ebx
c0016777:	c3                   	ret    
c0016778:	b8 01 00 00 00       	mov    eax,0x1
c001677d:	31 d2                	xor    edx,edx
c001677f:	83 c4 18             	add    esp,0x18
c0016782:	5b                   	pop    ebx
c0016783:	c3                   	ret    
c0016784:	53                   	push   ebx
c0016785:	53                   	push   ebx
c0016786:	52                   	push   edx
c0016787:	68 c8 2a 02 c0       	push   0xc0022ac8
c001678c:	e8 92 8a ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0016791:	83 c4 10             	add    esp,0x10
c0016794:	83 c4 18             	add    esp,0x18
c0016797:	83 c8 ff             	or     eax,0xffffffff
c001679a:	83 ca ff             	or     edx,0xffffffff
c001679d:	5b                   	pop    ebx
c001679e:	c3                   	ret    
c001679f:	31 c0                	xor    eax,eax
c00167a1:	31 d2                	xor    edx,edx
c00167a3:	eb da                	jmp    c001677f <sysCallReadDir(regs*)+0x6d>

c00167a5 <sysCallIsATTY(regs*)>:
c00167a5:	83 ec 0c             	sub    esp,0xc
c00167a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00167af:	83 f8 02             	cmp    eax,0x2
c00167b2:	76 07                	jbe    c00167bb <sysCallIsATTY(regs*)+0x16>
c00167b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167b9:	75 28                	jne    c00167e3 <sysCallIsATTY(regs*)+0x3e>
c00167bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167c9:	85 c0                	test   eax,eax
c00167cb:	74 26                	je     c00167f3 <sysCallIsATTY(regs*)+0x4e>
c00167cd:	83 ec 0c             	sub    esp,0xc
c00167d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00167d2:	50                   	push   eax
c00167d3:	ff 12                	call   DWORD PTR [edx]
c00167d5:	83 c4 10             	add    esp,0x10
c00167d8:	25 ff 00 00 00       	and    eax,0xff
c00167dd:	31 d2                	xor    edx,edx
c00167df:	83 c4 0c             	add    esp,0xc
c00167e2:	c3                   	ret    
c00167e3:	83 ec 0c             	sub    esp,0xc
c00167e6:	50                   	push   eax
c00167e7:	e8 93 78 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c00167ec:	83 c4 10             	add    esp,0x10
c00167ef:	85 c0                	test   eax,eax
c00167f1:	75 da                	jne    c00167cd <sysCallIsATTY(regs*)+0x28>
c00167f3:	83 c8 ff             	or     eax,0xffffffff
c00167f6:	83 ca ff             	or     edx,0xffffffff
c00167f9:	83 c4 0c             	add    esp,0xc
c00167fc:	c3                   	ret    

c00167fd <sysCallSeek(regs*)>:
c00167fd:	53                   	push   ebx
c00167fe:	83 ec 08             	sub    esp,0x8
c0016801:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016805:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016808:	83 f8 02             	cmp    eax,0x2
c001680b:	76 4b                	jbe    c0016858 <sysCallSeek(regs*)+0x5b>
c001680d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016812:	77 34                	ja     c0016848 <sysCallSeek(regs*)+0x4b>
c0016814:	83 ec 0c             	sub    esp,0xc
c0016817:	50                   	push   eax
c0016818:	e8 62 78 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c001681d:	83 c4 0c             	add    esp,0xc
c0016820:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016823:	31 db                	xor    ebx,ebx
c0016825:	53                   	push   ebx
c0016826:	51                   	push   ecx
c0016827:	50                   	push   eax
c0016828:	e8 4f 90 ff ff       	call   c000f87c <File::seek(unsigned long long)>
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	85 c0                	test   eax,eax
c0016832:	0f 95 c0             	setne  al
c0016835:	25 ff 00 00 00       	and    eax,0xff
c001683a:	31 d2                	xor    edx,edx
c001683c:	f7 d8                	neg    eax
c001683e:	83 d2 00             	adc    edx,0x0
c0016841:	83 c4 08             	add    esp,0x8
c0016844:	f7 da                	neg    edx
c0016846:	5b                   	pop    ebx
c0016847:	c3                   	ret    
c0016848:	52                   	push   edx
c0016849:	52                   	push   edx
c001684a:	50                   	push   eax
c001684b:	68 84 2b 02 c0       	push   0xc0022b84
c0016850:	e8 ce 89 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	83 c4 08             	add    esp,0x8
c001685b:	83 c8 ff             	or     eax,0xffffffff
c001685e:	83 ca ff             	or     edx,0xffffffff
c0016861:	5b                   	pop    ebx
c0016862:	c3                   	ret    

c0016863 <sysCallTell(regs*)>:
c0016863:	53                   	push   ebx
c0016864:	83 ec 08             	sub    esp,0x8
c0016867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001686b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001686e:	83 f8 02             	cmp    eax,0x2
c0016871:	76 60                	jbe    c00168d3 <sysCallTell(regs*)+0x70>
c0016873:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016878:	77 30                	ja     c00168aa <sysCallTell(regs*)+0x47>
c001687a:	83 ec 0c             	sub    esp,0xc
c001687d:	50                   	push   eax
c001687e:	e8 fc 77 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c0016883:	5a                   	pop    edx
c0016884:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016887:	59                   	pop    ecx
c0016888:	53                   	push   ebx
c0016889:	50                   	push   eax
c001688a:	e8 43 90 ff ff       	call   c000f8d2 <File::tell(unsigned long long*)>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	85 c0                	test   eax,eax
c0016894:	0f 95 c0             	setne  al
c0016897:	25 ff 00 00 00       	and    eax,0xff
c001689c:	31 d2                	xor    edx,edx
c001689e:	f7 d8                	neg    eax
c00168a0:	83 d2 00             	adc    edx,0x0
c00168a3:	83 c4 08             	add    esp,0x8
c00168a6:	f7 da                	neg    edx
c00168a8:	5b                   	pop    ebx
c00168a9:	c3                   	ret    
c00168aa:	52                   	push   edx
c00168ab:	52                   	push   edx
c00168ac:	50                   	push   eax
c00168ad:	68 9e 2b 02 c0       	push   0xc0022b9e
c00168b2:	e8 6c 89 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00168b7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	31 d2                	xor    edx,edx
c00168bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168cc:	83 c4 08             	add    esp,0x8
c00168cf:	31 c0                	xor    eax,eax
c00168d1:	5b                   	pop    ebx
c00168d2:	c3                   	ret    
c00168d3:	83 c4 08             	add    esp,0x8
c00168d6:	83 c8 ff             	or     eax,0xffffffff
c00168d9:	83 ca ff             	or     edx,0xffffffff
c00168dc:	5b                   	pop    ebx
c00168dd:	c3                   	ret    

c00168de <sysCallSizeFromFilename(regs*)>:
c00168de:	57                   	push   edi
c00168df:	56                   	push   esi
c00168e0:	53                   	push   ebx
c00168e1:	83 ec 10             	sub    esp,0x10
c00168e4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168e8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168eb:	83 fb 02             	cmp    ebx,0x2
c00168ee:	0f 86 8b 00 00 00    	jbe    c001697f <sysCallSizeFromFilename(regs*)+0xa1>
c00168f4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168fa:	77 58                	ja     c0016954 <sysCallSizeFromFilename(regs*)+0x76>
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	68 14 01 00 00       	push   0x114
c0016904:	e8 e5 87 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0016909:	89 c7                	mov    edi,eax
c001690b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016910:	83 c4 0c             	add    esp,0xc
c0016913:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016916:	50                   	push   eax
c0016917:	53                   	push   ebx
c0016918:	57                   	push   edi
c0016919:	e8 3c 8e ff ff       	call   c000f75a <File::File(char const*, Process*)>
c001691e:	83 c4 0c             	add    esp,0xc
c0016921:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016925:	50                   	push   eax
c0016926:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016929:	52                   	push   edx
c001692a:	57                   	push   edi
c001692b:	e8 3a 91 ff ff       	call   c000fa6a <File::stat(unsigned long long*, bool*)>
c0016930:	89 c3                	mov    ebx,eax
c0016932:	8b 07                	mov    eax,DWORD PTR [edi]
c0016934:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016937:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001693a:	31 c0                	xor    eax,eax
c001693c:	83 c4 10             	add    esp,0x10
c001693f:	85 db                	test   ebx,ebx
c0016941:	0f 95 c0             	setne  al
c0016944:	31 d2                	xor    edx,edx
c0016946:	f7 d8                	neg    eax
c0016948:	83 d2 00             	adc    edx,0x0
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	f7 da                	neg    edx
c0016950:	5b                   	pop    ebx
c0016951:	5e                   	pop    esi
c0016952:	5f                   	pop    edi
c0016953:	c3                   	ret    
c0016954:	51                   	push   ecx
c0016955:	51                   	push   ecx
c0016956:	53                   	push   ebx
c0016957:	68 b8 2b 02 c0       	push   0xc0022bb8
c001695c:	e8 c2 88 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0016961:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	31 d2                	xor    edx,edx
c0016969:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001696f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	31 c0                	xor    eax,eax
c001697b:	5b                   	pop    ebx
c001697c:	5e                   	pop    esi
c001697d:	5f                   	pop    edi
c001697e:	c3                   	ret    
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	83 c8 ff             	or     eax,0xffffffff
c0016985:	83 ca ff             	or     edx,0xffffffff
c0016988:	5b                   	pop    ebx
c0016989:	5e                   	pop    esi
c001698a:	5f                   	pop    edi
c001698b:	c3                   	ret    

c001698c <sysCallSize(regs*)>:
c001698c:	53                   	push   ebx
c001698d:	83 ec 18             	sub    esp,0x18
c0016990:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016994:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016997:	83 f8 02             	cmp    eax,0x2
c001699a:	76 66                	jbe    c0016a02 <sysCallSize(regs*)+0x76>
c001699c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169a1:	77 36                	ja     c00169d9 <sysCallSize(regs*)+0x4d>
c00169a3:	83 ec 0c             	sub    esp,0xc
c00169a6:	50                   	push   eax
c00169a7:	e8 d3 76 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c00169ac:	83 c4 0c             	add    esp,0xc
c00169af:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169b3:	52                   	push   edx
c00169b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00169b7:	52                   	push   edx
c00169b8:	50                   	push   eax
c00169b9:	e8 ac 90 ff ff       	call   c000fa6a <File::stat(unsigned long long*, bool*)>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	85 c0                	test   eax,eax
c00169c3:	0f 95 c0             	setne  al
c00169c6:	25 ff 00 00 00       	and    eax,0xff
c00169cb:	31 d2                	xor    edx,edx
c00169cd:	f7 d8                	neg    eax
c00169cf:	83 d2 00             	adc    edx,0x0
c00169d2:	83 c4 18             	add    esp,0x18
c00169d5:	f7 da                	neg    edx
c00169d7:	5b                   	pop    ebx
c00169d8:	c3                   	ret    
c00169d9:	51                   	push   ecx
c00169da:	51                   	push   ecx
c00169db:	50                   	push   eax
c00169dc:	68 b8 2b 02 c0       	push   0xc0022bb8
c00169e1:	e8 3d 88 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00169e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	31 d2                	xor    edx,edx
c00169ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169fb:	83 c4 18             	add    esp,0x18
c00169fe:	31 c0                	xor    eax,eax
c0016a00:	5b                   	pop    ebx
c0016a01:	c3                   	ret    
c0016a02:	83 c4 18             	add    esp,0x18
c0016a05:	83 c8 ff             	or     eax,0xffffffff
c0016a08:	83 ca ff             	or     edx,0xffffffff
c0016a0b:	5b                   	pop    ebx
c0016a0c:	c3                   	ret    

c0016a0d <sysCallClose(regs*)>:
c0016a0d:	53                   	push   ebx
c0016a0e:	83 ec 08             	sub    esp,0x8
c0016a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a15:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a18:	83 f8 02             	cmp    eax,0x2
c0016a1b:	76 4f                	jbe    c0016a6c <sysCallClose(regs*)+0x5f>
c0016a1d:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a22:	74 53                	je     c0016a77 <sysCallClose(regs*)+0x6a>
c0016a24:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a29:	74 5b                	je     c0016a86 <sysCallClose(regs*)+0x79>
c0016a2b:	77 2f                	ja     c0016a5c <sysCallClose(regs*)+0x4f>
c0016a2d:	83 ec 0c             	sub    esp,0xc
c0016a30:	50                   	push   eax
c0016a31:	e8 49 76 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c0016a36:	89 c3                	mov    ebx,eax
c0016a38:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a3b:	e8 dc 8d ff ff       	call   c000f81c <File::close()>
c0016a40:	83 c4 10             	add    esp,0x10
c0016a43:	85 db                	test   ebx,ebx
c0016a45:	74 0c                	je     c0016a53 <sysCallClose(regs*)+0x46>
c0016a47:	83 ec 0c             	sub    esp,0xc
c0016a4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a4c:	53                   	push   ebx
c0016a4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a50:	83 c4 10             	add    esp,0x10
c0016a53:	83 c4 08             	add    esp,0x8
c0016a56:	31 c0                	xor    eax,eax
c0016a58:	31 d2                	xor    edx,edx
c0016a5a:	5b                   	pop    ebx
c0016a5b:	c3                   	ret    
c0016a5c:	52                   	push   edx
c0016a5d:	52                   	push   edx
c0016a5e:	50                   	push   eax
c0016a5f:	68 ec 2a 02 c0       	push   0xc0022aec
c0016a64:	e8 ba 87 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0016a69:	83 c4 10             	add    esp,0x10
c0016a6c:	83 c4 08             	add    esp,0x8
c0016a6f:	83 c8 ff             	or     eax,0xffffffff
c0016a72:	83 ca ff             	or     edx,0xffffffff
c0016a75:	5b                   	pop    ebx
c0016a76:	c3                   	ret    
c0016a77:	83 ec 0c             	sub    esp,0xc
c0016a7a:	68 d3 2b 02 c0       	push   0xc0022bd3
c0016a7f:	e8 9f 87 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0016a84:	eb ca                	jmp    c0016a50 <sysCallClose(regs*)+0x43>
c0016a86:	83 ec 0c             	sub    esp,0xc
c0016a89:	68 e1 2b 02 c0       	push   0xc0022be1
c0016a8e:	eb ef                	jmp    c0016a7f <sysCallClose(regs*)+0x72>

c0016a90 <sysCallOpenDir(regs*)>:
c0016a90:	56                   	push   esi
c0016a91:	53                   	push   ebx
c0016a92:	50                   	push   eax
c0016a93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a97:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a9a:	85 c0                	test   eax,eax
c0016a9c:	74 53                	je     c0016af1 <sysCallOpenDir(regs*)+0x61>
c0016a9e:	83 ec 0c             	sub    esp,0xc
c0016aa1:	68 14 01 00 00       	push   0x114
c0016aa6:	e8 43 86 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0016aab:	89 c6                	mov    esi,eax
c0016aad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ab2:	83 c4 0c             	add    esp,0xc
c0016ab5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ab8:	50                   	push   eax
c0016ab9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016abc:	50                   	push   eax
c0016abd:	56                   	push   esi
c0016abe:	e8 59 91 ff ff       	call   c000fc1c <Directory::Directory(char const*, Process*)>
c0016ac3:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ac6:	e8 b5 91 ff ff       	call   c000fc80 <Directory::open()>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	85 c0                	test   eax,eax
c0016ad0:	75 1f                	jne    c0016af1 <sysCallOpenDir(regs*)+0x61>
c0016ad2:	83 ec 0c             	sub    esp,0xc
c0016ad5:	56                   	push   esi
c0016ad6:	e8 ef 72 ff ff       	call   c000ddca <UnixFile::getFileDescriptor()>
c0016adb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016ade:	83 c4 10             	add    esp,0x10
c0016ae1:	89 02                	mov    DWORD PTR [edx],eax
c0016ae3:	c1 f8 1f             	sar    eax,0x1f
c0016ae6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ae9:	31 c0                	xor    eax,eax
c0016aeb:	59                   	pop    ecx
c0016aec:	31 d2                	xor    edx,edx
c0016aee:	5b                   	pop    ebx
c0016aef:	5e                   	pop    esi
c0016af0:	c3                   	ret    
c0016af1:	59                   	pop    ecx
c0016af2:	83 c8 ff             	or     eax,0xffffffff
c0016af5:	5b                   	pop    ebx
c0016af6:	83 ca ff             	or     edx,0xffffffff
c0016af9:	5e                   	pop    esi
c0016afa:	c3                   	ret    

c0016afb <sysCallMakeDir(regs*)>:
c0016afb:	56                   	push   esi
c0016afc:	53                   	push   ebx
c0016afd:	83 ec 10             	sub    esp,0x10
c0016b00:	68 14 01 00 00       	push   0x114
c0016b05:	e8 e4 85 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0016b0a:	89 c3                	mov    ebx,eax
c0016b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b11:	83 c4 0c             	add    esp,0xc
c0016b14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b17:	50                   	push   eax
c0016b18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b1c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b1f:	52                   	push   edx
c0016b20:	53                   	push   ebx
c0016b21:	e8 f6 90 ff ff       	call   c000fc1c <Directory::Directory(char const*, Process*)>
c0016b26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b29:	e8 32 93 ff ff       	call   c000fe60 <Directory::create()>
c0016b2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b31:	89 c6                	mov    esi,eax
c0016b33:	e8 a4 91 ff ff       	call   c000fcdc <Directory::close()>
c0016b38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b40:	31 c0                	xor    eax,eax
c0016b42:	85 f6                	test   esi,esi
c0016b44:	0f 95 c0             	setne  al
c0016b47:	31 d2                	xor    edx,edx
c0016b49:	f7 d8                	neg    eax
c0016b4b:	83 d2 00             	adc    edx,0x0
c0016b4e:	83 c4 14             	add    esp,0x14
c0016b51:	f7 da                	neg    edx
c0016b53:	5b                   	pop    ebx
c0016b54:	5e                   	pop    esi
c0016b55:	c3                   	ret    

c0016b56 <sysCallCloseDir(regs*)>:
c0016b56:	53                   	push   ebx
c0016b57:	83 ec 08             	sub    esp,0x8
c0016b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b61:	83 f8 02             	cmp    eax,0x2
c0016b64:	76 46                	jbe    c0016bac <sysCallCloseDir(regs*)+0x56>
c0016b66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b6b:	77 2f                	ja     c0016b9c <sysCallCloseDir(regs*)+0x46>
c0016b6d:	83 ec 0c             	sub    esp,0xc
c0016b70:	50                   	push   eax
c0016b71:	e8 09 75 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c0016b76:	89 c3                	mov    ebx,eax
c0016b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b7b:	e8 5c 91 ff ff       	call   c000fcdc <Directory::close()>
c0016b80:	83 c4 10             	add    esp,0x10
c0016b83:	85 db                	test   ebx,ebx
c0016b85:	74 0c                	je     c0016b93 <sysCallCloseDir(regs*)+0x3d>
c0016b87:	83 ec 0c             	sub    esp,0xc
c0016b8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b8c:	53                   	push   ebx
c0016b8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b90:	83 c4 10             	add    esp,0x10
c0016b93:	83 c4 08             	add    esp,0x8
c0016b96:	31 c0                	xor    eax,eax
c0016b98:	31 d2                	xor    edx,edx
c0016b9a:	5b                   	pop    ebx
c0016b9b:	c3                   	ret    
c0016b9c:	52                   	push   edx
c0016b9d:	52                   	push   edx
c0016b9e:	50                   	push   eax
c0016b9f:	68 14 2b 02 c0       	push   0xc0022b14
c0016ba4:	e8 7a 86 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0016ba9:	83 c4 10             	add    esp,0x10
c0016bac:	83 c4 08             	add    esp,0x8
c0016baf:	83 c8 ff             	or     eax,0xffffffff
c0016bb2:	83 ca ff             	or     edx,0xffffffff
c0016bb5:	5b                   	pop    ebx
c0016bb6:	c3                   	ret    

c0016bb7 <sysCallWait(regs*)>:
c0016bb7:	83 ec 10             	sub    esp,0x10
c0016bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bbe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016bc1:	52                   	push   edx
c0016bc2:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016bc5:	51                   	push   ecx
c0016bc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bc9:	50                   	push   eax
c0016bca:	e8 4f 23 00 00       	call   c0018f1e <waitTask(int, int*, int)>
c0016bcf:	89 c2                	mov    edx,eax
c0016bd1:	83 c4 1c             	add    esp,0x1c
c0016bd4:	c1 fa 1f             	sar    edx,0x1f
c0016bd7:	c3                   	ret    

c0016bd8 <sysCallRmdir(regs*)>:
c0016bd8:	56                   	push   esi
c0016bd9:	53                   	push   ebx
c0016bda:	83 ec 10             	sub    esp,0x10
c0016bdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016be1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016be4:	68 14 01 00 00       	push   0x114
c0016be9:	e8 00 85 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0016bee:	83 c4 0c             	add    esp,0xc
c0016bf1:	89 c3                	mov    ebx,eax
c0016bf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bf8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016bfb:	50                   	push   eax
c0016bfc:	56                   	push   esi
c0016bfd:	53                   	push   ebx
c0016bfe:	e8 57 8b ff ff       	call   c000f75a <File::File(char const*, Process*)>
c0016c03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c06:	e8 2b 8d ff ff       	call   c000f936 <File::unlink()>
c0016c0b:	89 c6                	mov    esi,eax
c0016c0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c15:	31 c0                	xor    eax,eax
c0016c17:	85 f6                	test   esi,esi
c0016c19:	0f 95 c0             	setne  al
c0016c1c:	31 d2                	xor    edx,edx
c0016c1e:	f7 d8                	neg    eax
c0016c20:	83 d2 00             	adc    edx,0x0
c0016c23:	83 c4 14             	add    esp,0x14
c0016c26:	f7 da                	neg    edx
c0016c28:	5b                   	pop    ebx
c0016c29:	5e                   	pop    esi
c0016c2a:	c3                   	ret    

c0016c2b <sysCallUnlink(regs*)>:
c0016c2b:	56                   	push   esi
c0016c2c:	53                   	push   ebx
c0016c2d:	83 ec 10             	sub    esp,0x10
c0016c30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c34:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c37:	68 14 01 00 00       	push   0x114
c0016c3c:	e8 ad 84 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0016c41:	83 c4 0c             	add    esp,0xc
c0016c44:	89 c3                	mov    ebx,eax
c0016c46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c4b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c4e:	50                   	push   eax
c0016c4f:	56                   	push   esi
c0016c50:	53                   	push   ebx
c0016c51:	e8 04 8b ff ff       	call   c000f75a <File::File(char const*, Process*)>
c0016c56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c59:	e8 d8 8c ff ff       	call   c000f936 <File::unlink()>
c0016c5e:	89 c6                	mov    esi,eax
c0016c60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c68:	31 c0                	xor    eax,eax
c0016c6a:	85 f6                	test   esi,esi
c0016c6c:	0f 95 c0             	setne  al
c0016c6f:	31 d2                	xor    edx,edx
c0016c71:	f7 d8                	neg    eax
c0016c73:	83 d2 00             	adc    edx,0x0
c0016c76:	83 c4 14             	add    esp,0x14
c0016c79:	f7 da                	neg    edx
c0016c7b:	5b                   	pop    ebx
c0016c7c:	5e                   	pop    esi
c0016c7d:	c3                   	ret    

c0016c7e <sysCallGetArgv(regs*)>:
c0016c7e:	83 ec 0c             	sub    esp,0xc
c0016c81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c85:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c88:	85 c0                	test   eax,eax
c0016c8a:	78 2b                	js     c0016cb7 <sysCallGetArgv(regs*)+0x39>
c0016c8c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c92:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c95:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c9b:	7d 1a                	jge    c0016cb7 <sysCallGetArgv(regs*)+0x39>
c0016c9d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016ca4:	85 c0                	test   eax,eax
c0016ca6:	74 17                	je     c0016cbf <sysCallGetArgv(regs*)+0x41>
c0016ca8:	51                   	push   ecx
c0016ca9:	51                   	push   ecx
c0016caa:	50                   	push   eax
c0016cab:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016cae:	50                   	push   eax
c0016caf:	e8 bd 9a fe ff       	call   c0000771 <strcpy>
c0016cb4:	83 c4 10             	add    esp,0x10
c0016cb7:	31 c0                	xor    eax,eax
c0016cb9:	31 d2                	xor    edx,edx
c0016cbb:	83 c4 0c             	add    esp,0xc
c0016cbe:	c3                   	ret    
c0016cbf:	b8 01 00 00 00       	mov    eax,0x1
c0016cc4:	31 d2                	xor    edx,edx
c0016cc6:	83 c4 0c             	add    esp,0xc
c0016cc9:	c3                   	ret    

c0016cca <sysCallTTYName(regs*)>:
c0016cca:	56                   	push   esi
c0016ccb:	53                   	push   ebx
c0016ccc:	50                   	push   eax
c0016ccd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cd1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cd4:	85 c0                	test   eax,eax
c0016cd6:	74 4d                	je     c0016d25 <sysCallTTYName(regs*)+0x5b>
c0016cd8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cdb:	83 f8 02             	cmp    eax,0x2
c0016cde:	76 07                	jbe    c0016ce7 <sysCallTTYName(regs*)+0x1d>
c0016ce0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016ce5:	75 54                	jne    c0016d3b <sysCallTTYName(regs*)+0x71>
c0016ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cef:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016cf5:	85 db                	test   ebx,ebx
c0016cf7:	74 2c                	je     c0016d25 <sysCallTTYName(regs*)+0x5b>
c0016cf9:	83 ec 0c             	sub    esp,0xc
c0016cfc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cfe:	53                   	push   ebx
c0016cff:	ff 10                	call   DWORD PTR [eax]
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	84 c0                	test   al,al
c0016d06:	74 28                	je     c0016d30 <sysCallTTYName(regs*)+0x66>
c0016d08:	50                   	push   eax
c0016d09:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016d0f:	50                   	push   eax
c0016d10:	53                   	push   ebx
c0016d11:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d14:	50                   	push   eax
c0016d15:	e8 57 9a fe ff       	call   c0000771 <strcpy>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	31 c0                	xor    eax,eax
c0016d1f:	31 d2                	xor    edx,edx
c0016d21:	59                   	pop    ecx
c0016d22:	5b                   	pop    ebx
c0016d23:	5e                   	pop    esi
c0016d24:	c3                   	ret    
c0016d25:	59                   	pop    ecx
c0016d26:	b8 01 00 00 00       	mov    eax,0x1
c0016d2b:	5b                   	pop    ebx
c0016d2c:	31 d2                	xor    edx,edx
c0016d2e:	5e                   	pop    esi
c0016d2f:	c3                   	ret    
c0016d30:	59                   	pop    ecx
c0016d31:	b8 02 00 00 00       	mov    eax,0x2
c0016d36:	5b                   	pop    ebx
c0016d37:	31 d2                	xor    edx,edx
c0016d39:	5e                   	pop    esi
c0016d3a:	c3                   	ret    
c0016d3b:	83 ec 0c             	sub    esp,0xc
c0016d3e:	50                   	push   eax
c0016d3f:	e8 3b 73 ff ff       	call   c000e07f <getFromFileDescriptor(int)>
c0016d44:	83 c4 10             	add    esp,0x10
c0016d47:	89 c3                	mov    ebx,eax
c0016d49:	eb aa                	jmp    c0016cf5 <sysCallTTYName(regs*)+0x2b>

c0016d4b <sysCallGetEnv(regs*)>:
c0016d4b:	83 ec 0c             	sub    esp,0xc
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d55:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d58:	85 d2                	test   edx,edx
c0016d5a:	75 22                	jne    c0016d7e <sysCallGetEnv(regs*)+0x33>
c0016d5c:	31 c0                	xor    eax,eax
c0016d5e:	31 d2                	xor    edx,edx
c0016d60:	85 c9                	test   ecx,ecx
c0016d62:	74 04                	je     c0016d68 <sysCallGetEnv(regs*)+0x1d>
c0016d64:	83 c4 0c             	add    esp,0xc
c0016d67:	c3                   	ret    
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	68 38 2b 02 c0       	push   0xc0022b38
c0016d70:	e8 7a 99 fe ff       	call   c00006ef <strlen>
c0016d75:	83 c4 10             	add    esp,0x10
c0016d78:	31 d2                	xor    edx,edx
c0016d7a:	83 c4 0c             	add    esp,0xc
c0016d7d:	c3                   	ret    
c0016d7e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d81:	85 c9                	test   ecx,ecx
c0016d83:	74 0b                	je     c0016d90 <sysCallGetEnv(regs*)+0x45>
c0016d85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d88:	31 c0                	xor    eax,eax
c0016d8a:	31 d2                	xor    edx,edx
c0016d8c:	83 c4 0c             	add    esp,0xc
c0016d8f:	c3                   	ret    
c0016d90:	52                   	push   edx
c0016d91:	52                   	push   edx
c0016d92:	68 38 2b 02 c0       	push   0xc0022b38
c0016d97:	50                   	push   eax
c0016d98:	e8 d4 99 fe ff       	call   c0000771 <strcpy>
c0016d9d:	83 c4 10             	add    esp,0x10
c0016da0:	eb e6                	jmp    c0016d88 <sysCallGetEnv(regs*)+0x3d>

c0016da2 <sysCallUSleep(regs*)>:
c0016da2:	57                   	push   edi
c0016da3:	56                   	push   esi
c0016da4:	53                   	push   ebx
c0016da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da9:	52                   	push   edx
c0016daa:	52                   	push   edx
c0016dab:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016dae:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016db1:	89 c8                	mov    eax,ecx
c0016db3:	89 da                	mov    edx,ebx
c0016db5:	0f a4 c2 05          	shld   edx,eax,0x5
c0016db9:	c1 e0 05             	shl    eax,0x5
c0016dbc:	29 c8                	sub    eax,ecx
c0016dbe:	19 da                	sbb    edx,ebx
c0016dc0:	0f a4 c2 02          	shld   edx,eax,0x2
c0016dc4:	c1 e0 02             	shl    eax,0x2
c0016dc7:	01 c8                	add    eax,ecx
c0016dc9:	11 da                	adc    edx,ebx
c0016dcb:	0f a4 c2 03          	shld   edx,eax,0x3
c0016dcf:	c1 e0 03             	shl    eax,0x3
c0016dd2:	52                   	push   edx
c0016dd3:	50                   	push   eax
c0016dd4:	e8 e0 21 00 00       	call   c0018fb9 <nanoSleep(unsigned long long)>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	31 c0                	xor    eax,eax
c0016dde:	31 d2                	xor    edx,edx
c0016de0:	5b                   	pop    ebx
c0016de1:	5e                   	pop    esi
c0016de2:	5f                   	pop    edi
c0016de3:	c3                   	ret    

c0016de4 <sysCallSpawn(regs*)>:
c0016de4:	56                   	push   esi
c0016de5:	53                   	push   ebx
c0016de6:	50                   	push   eax
c0016de7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016deb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016dee:	85 c0                	test   eax,eax
c0016df0:	75 08                	jne    c0016dfa <sysCallSpawn(regs*)+0x16>
c0016df2:	59                   	pop    ecx
c0016df3:	31 c0                	xor    eax,eax
c0016df5:	5b                   	pop    ebx
c0016df6:	31 d2                	xor    edx,edx
c0016df8:	5e                   	pop    esi
c0016df9:	c3                   	ret    
c0016dfa:	83 ec 0c             	sub    esp,0xc
c0016dfd:	68 3b 07 00 00       	push   0x73b
c0016e02:	e8 e7 82 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0016e07:	89 c6                	mov    esi,eax
c0016e09:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016e0c:	50                   	push   eax
c0016e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e15:	50                   	push   eax
c0016e16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e19:	50                   	push   eax
c0016e1a:	56                   	push   esi
c0016e1b:	e8 d6 18 00 00       	call   c00186f6 <Process::Process(char const*, Process*, char**)>
c0016e20:	83 c4 20             	add    esp,0x20
c0016e23:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e2a:	75 c6                	jne    c0016df2 <sysCallSpawn(regs*)+0xe>
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	56                   	push   esi
c0016e30:	e8 3d 1e 00 00       	call   c0018c72 <Process::createUserThread()>
c0016e35:	83 c4 10             	add    esp,0x10
c0016e38:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e3a:	89 c2                	mov    edx,eax
c0016e3c:	c1 fa 1f             	sar    edx,0x1f
c0016e3f:	59                   	pop    ecx
c0016e40:	5b                   	pop    ebx
c0016e41:	5e                   	pop    esi
c0016e42:	c3                   	ret    

c0016e43 <sysAppSettings(regs*)>:
c0016e43:	53                   	push   ebx
c0016e44:	31 d2                	xor    edx,edx
c0016e46:	83 ec 08             	sub    esp,0x8
c0016e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e50:	b8 01 00 00 00       	mov    eax,0x1
c0016e55:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e5b:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e61:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e66:	75 30                	jne    c0016e98 <sysAppSettings(regs*)+0x55>
c0016e68:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e6e:	83 e0 1f             	and    eax,0x1f
c0016e71:	3c 01                	cmp    al,0x1
c0016e73:	74 28                	je     c0016e9d <sysAppSettings(regs*)+0x5a>
c0016e75:	3c 07                	cmp    al,0x7
c0016e77:	0f 84 be 00 00 00    	je     c0016f3b <sysAppSettings(regs*)+0xf8>
c0016e7d:	84 c0                	test   al,al
c0016e7f:	0f 84 da 00 00 00    	je     c0016f5f <sysAppSettings(regs*)+0x11c>
c0016e85:	3c 08                	cmp    al,0x8
c0016e87:	74 6d                	je     c0016ef6 <sysAppSettings(regs*)+0xb3>
c0016e89:	25 ff 00 00 00       	and    eax,0xff
c0016e8e:	05 e8 03 00 00       	add    eax,0x3e8
c0016e93:	89 c2                	mov    edx,eax
c0016e95:	c1 fa 1f             	sar    edx,0x1f
c0016e98:	83 c4 08             	add    esp,0x8
c0016e9b:	5b                   	pop    ebx
c0016e9c:	c3                   	ret    
c0016e9d:	50                   	push   eax
c0016e9e:	68 00 01 00 00       	push   0x100
c0016ea3:	6a 00                	push   0x0
c0016ea5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eaa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ead:	83 c0 0c             	add    eax,0xc
c0016eb0:	50                   	push   eax
c0016eb1:	e8 1c 98 fe ff       	call   c00006d2 <memset>
c0016eb6:	83 c4 0c             	add    esp,0xc
c0016eb9:	68 ff 00 00 00       	push   0xff
c0016ebe:	53                   	push   ebx
c0016ebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ec7:	83 c0 0c             	add    eax,0xc
c0016eca:	50                   	push   eax
c0016ecb:	e8 cc 97 fe ff       	call   c000069c <memcpy>
c0016ed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed5:	5a                   	pop    edx
c0016ed6:	59                   	pop    ecx
c0016ed7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eda:	8d 50 0c             	lea    edx,[eax+0xc]
c0016edd:	52                   	push   edx
c0016ede:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ee4:	53                   	push   ebx
c0016ee5:	e8 dc 62 ff ff       	call   c000d1c6 <VgaText::setTitle(char*)>
c0016eea:	83 c4 10             	add    esp,0x10
c0016eed:	31 c0                	xor    eax,eax
c0016eef:	31 d2                	xor    edx,edx
c0016ef1:	83 c4 08             	add    esp,0x8
c0016ef4:	5b                   	pop    ebx
c0016ef5:	c3                   	ret    
c0016ef6:	50                   	push   eax
c0016ef7:	50                   	push   eax
c0016ef8:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016efe:	83 e0 0f             	and    eax,0xf
c0016f01:	50                   	push   eax
c0016f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f0a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016f10:	50                   	push   eax
c0016f11:	e8 a0 62 ff ff       	call   c000d1b6 <VgaText::setTitleColour(VgaColour)>
c0016f16:	58                   	pop    eax
c0016f17:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016f1d:	c1 e8 04             	shr    eax,0x4
c0016f20:	5a                   	pop    edx
c0016f21:	83 e0 0f             	and    eax,0xf
c0016f24:	50                   	push   eax
c0016f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f2d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f33:	51                   	push   ecx
c0016f34:	e8 6d 62 ff ff       	call   c000d1a6 <VgaText::setTitleTextColour(VgaColour)>
c0016f39:	eb af                	jmp    c0016eea <sysAppSettings(regs*)+0xa7>
c0016f3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f43:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f49:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f4f:	c0 e8 06             	shr    al,0x6
c0016f52:	83 e0 01             	and    eax,0x1
c0016f55:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f5b:	31 c0                	xor    eax,eax
c0016f5d:	eb 90                	jmp    c0016eef <sysAppSettings(regs*)+0xac>
c0016f5f:	b8 02 00 00 00       	mov    eax,0x2
c0016f64:	31 d2                	xor    edx,edx
c0016f66:	eb 89                	jmp    c0016ef1 <sysAppSettings(regs*)+0xae>

c0016f68 <sysSetFatAttrib(regs*)>:
c0016f68:	57                   	push   edi
c0016f69:	56                   	push   esi
c0016f6a:	53                   	push   ebx
c0016f6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f6f:	83 ec 0c             	sub    esp,0xc
c0016f72:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f75:	68 14 01 00 00       	push   0x114
c0016f7a:	e8 6f 81 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0016f7f:	83 c4 0c             	add    esp,0xc
c0016f82:	89 c3                	mov    ebx,eax
c0016f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f8c:	50                   	push   eax
c0016f8d:	57                   	push   edi
c0016f8e:	53                   	push   ebx
c0016f8f:	e8 c6 87 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c0016f94:	83 c4 0c             	add    esp,0xc
c0016f97:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f9a:	0f b6 d4             	movzx  edx,ah
c0016f9d:	52                   	push   edx
c0016f9e:	25 ff 00 00 00       	and    eax,0xff
c0016fa3:	50                   	push   eax
c0016fa4:	53                   	push   ebx
c0016fa5:	e8 26 8a ff ff       	call   c000f9d0 <File::chfatattr(unsigned char, unsigned char)>
c0016faa:	89 c6                	mov    esi,eax
c0016fac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	31 c0                	xor    eax,eax
c0016fb9:	85 f6                	test   esi,esi
c0016fbb:	0f 95 c0             	setne  al
c0016fbe:	5b                   	pop    ebx
c0016fbf:	31 d2                	xor    edx,edx
c0016fc1:	f7 d8                	neg    eax
c0016fc3:	83 d2 00             	adc    edx,0x0
c0016fc6:	5e                   	pop    esi
c0016fc7:	f7 da                	neg    edx
c0016fc9:	5f                   	pop    edi
c0016fca:	c3                   	ret    

c0016fcb <sysPanic(regs*)>:
c0016fcb:	83 ec 18             	sub    esp,0x18
c0016fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fd2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fd5:	50                   	push   eax
c0016fd6:	e8 77 ea ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0016fdb:	c7 04 24 ef 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bef
c0016fe2:	e8 6b ea ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0016fe7:	b8 01 00 00 00       	mov    eax,0x1
c0016fec:	31 d2                	xor    edx,edx
c0016fee:	83 c4 1c             	add    esp,0x1c
c0016ff1:	c3                   	ret    

c0016ff2 <sysPipe(regs*)>:
c0016ff2:	57                   	push   edi
c0016ff3:	56                   	push   esi
c0016ff4:	53                   	push   ebx
c0016ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff9:	83 ec 0c             	sub    esp,0xc
c0016ffc:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016fff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0017002:	6a 20                	push   0x20
c0017004:	e8 e5 80 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0017009:	89 c3                	mov    ebx,eax
c001700b:	58                   	pop    eax
c001700c:	5a                   	pop    edx
c001700d:	68 00 50 00 00       	push   0x5000
c0017012:	53                   	push   ebx
c0017013:	e8 ec 5a ff ff       	call   c000cb04 <Pipe::Pipe(int)>
c0017018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001701b:	e8 aa 6d ff ff       	call   c000ddca <UnixFile::getFileDescriptor()>
c0017020:	89 07                	mov    DWORD PTR [edi],eax
c0017022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017025:	e8 a0 6d ff ff       	call   c000ddca <UnixFile::getFileDescriptor()>
c001702a:	83 c4 10             	add    esp,0x10
c001702d:	89 06                	mov    DWORD PTR [esi],eax
c001702f:	31 d2                	xor    edx,edx
c0017031:	5b                   	pop    ebx
c0017032:	31 c0                	xor    eax,eax
c0017034:	5e                   	pop    esi
c0017035:	5f                   	pop    edi
c0017036:	c3                   	ret    

c0017037 <sysGetUnixTime(regs*)>:
c0017037:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001703c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017042:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017046:	e9 d7 90 ff ff       	jmp    c0010122 <Clock::timeInSecondsLocal()>

c001704b <string_ends_with(char const*, char const*)>:
c001704b:	57                   	push   edi
c001704c:	56                   	push   esi
c001704d:	53                   	push   ebx
c001704e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017052:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017056:	83 ec 0c             	sub    esp,0xc
c0017059:	53                   	push   ebx
c001705a:	e8 90 96 fe ff       	call   c00006ef <strlen>
c001705f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017062:	89 c6                	mov    esi,eax
c0017064:	e8 86 96 fe ff       	call   c00006ef <strlen>
c0017069:	83 c4 10             	add    esp,0x10
c001706c:	31 d2                	xor    edx,edx
c001706e:	39 c6                	cmp    esi,eax
c0017070:	7d 06                	jge    c0017078 <string_ends_with(char const*, char const*)+0x2d>
c0017072:	5b                   	pop    ebx
c0017073:	89 d0                	mov    eax,edx
c0017075:	5e                   	pop    esi
c0017076:	5f                   	pop    edi
c0017077:	c3                   	ret    
c0017078:	52                   	push   edx
c0017079:	29 c6                	sub    esi,eax
c001707b:	52                   	push   edx
c001707c:	01 f3                	add    ebx,esi
c001707e:	57                   	push   edi
c001707f:	53                   	push   ebx
c0017080:	e8 3d 97 fe ff       	call   c00007c2 <strcmp>
c0017085:	83 c4 10             	add    esp,0x10
c0017088:	31 d2                	xor    edx,edx
c001708a:	85 c0                	test   eax,eax
c001708c:	5b                   	pop    ebx
c001708d:	0f 94 c2             	sete   dl
c0017090:	5e                   	pop    esi
c0017091:	89 d0                	mov    eax,edx
c0017093:	5f                   	pop    edi
c0017094:	c3                   	ret    

c0017095 <sysCallOpen(regs*)>:
c0017095:	56                   	push   esi
c0017096:	53                   	push   ebx
c0017097:	81 ec 04 01 00 00    	sub    esp,0x104
c001709d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00170a4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00170a7:	85 c9                	test   ecx,ecx
c00170a9:	0f 84 bb 00 00 00    	je     c001716a <sysCallOpen(regs*)+0xd5>
c00170af:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170b2:	85 c0                	test   eax,eax
c00170b4:	0f 84 b0 00 00 00    	je     c001716a <sysCallOpen(regs*)+0xd5>
c00170ba:	52                   	push   edx
c00170bb:	68 fe 2b 02 c0       	push   0xc0022bfe
c00170c0:	50                   	push   eax
c00170c1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170c5:	56                   	push   esi
c00170c6:	e8 e5 84 ff ff       	call   c000f5b0 <standardiseFiles(char*, char const*, char const*)>
c00170cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00170ce:	e8 1c 96 fe ff       	call   c00006ef <strlen>
c00170d3:	83 c4 10             	add    esp,0x10
c00170d6:	48                   	dec    eax
c00170d7:	74 25                	je     c00170fe <sysCallOpen(regs*)+0x69>
c00170d9:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170dc:	80 fa 2e             	cmp    dl,0x2e
c00170df:	74 19                	je     c00170fa <sysCallOpen(regs*)+0x65>
c00170e1:	80 fa 3a             	cmp    dl,0x3a
c00170e4:	74 14                	je     c00170fa <sysCallOpen(regs*)+0x65>
c00170e6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170ea:	48                   	dec    eax
c00170eb:	74 11                	je     c00170fe <sysCallOpen(regs*)+0x69>
c00170ed:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170f0:	80 fa 3a             	cmp    dl,0x3a
c00170f3:	74 05                	je     c00170fa <sysCallOpen(regs*)+0x65>
c00170f5:	80 fa 2e             	cmp    dl,0x2e
c00170f8:	75 ec                	jne    c00170e6 <sysCallOpen(regs*)+0x51>
c00170fa:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170fe:	51                   	push   ecx
c00170ff:	51                   	push   ecx
c0017100:	68 02 2c 02 c0       	push   0xc0022c02
c0017105:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017108:	50                   	push   eax
c0017109:	e8 3d ff ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	85 c0                	test   eax,eax
c0017113:	75 17                	jne    c001712c <sysCallOpen(regs*)+0x97>
c0017115:	50                   	push   eax
c0017116:	50                   	push   eax
c0017117:	68 23 2c 02 c0       	push   0xc0022c23
c001711c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001711f:	50                   	push   eax
c0017120:	e8 26 ff ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c0017125:	83 c4 10             	add    esp,0x10
c0017128:	85 c0                	test   eax,eax
c001712a:	74 4d                	je     c0017179 <sysCallOpen(regs*)+0xe4>
c001712c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001712f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017135:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001713c:	50                   	push   eax
c001713d:	50                   	push   eax
c001713e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017141:	8b 10                	mov    edx,DWORD PTR [eax]
c0017143:	52                   	push   edx
c0017144:	68 07 2c 02 c0       	push   0xc0022c07
c0017149:	e8 d5 80 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001714e:	c7 04 24 16 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c16
c0017155:	e8 c9 80 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001715a:	83 c4 10             	add    esp,0x10
c001715d:	81 c4 04 01 00 00    	add    esp,0x104
c0017163:	31 c0                	xor    eax,eax
c0017165:	31 d2                	xor    edx,edx
c0017167:	5b                   	pop    ebx
c0017168:	5e                   	pop    esi
c0017169:	c3                   	ret    
c001716a:	81 c4 04 01 00 00    	add    esp,0x104
c0017170:	83 c8 ff             	or     eax,0xffffffff
c0017173:	83 ca ff             	or     edx,0xffffffff
c0017176:	5b                   	pop    ebx
c0017177:	5e                   	pop    esi
c0017178:	c3                   	ret    
c0017179:	50                   	push   eax
c001717a:	50                   	push   eax
c001717b:	68 03 2c 02 c0       	push   0xc0022c03
c0017180:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017183:	50                   	push   eax
c0017184:	e8 39 96 fe ff       	call   c00007c2 <strcmp>
c0017189:	83 c4 10             	add    esp,0x10
c001718c:	85 c0                	test   eax,eax
c001718e:	74 9c                	je     c001712c <sysCallOpen(regs*)+0x97>
c0017190:	50                   	push   eax
c0017191:	50                   	push   eax
c0017192:	68 02 2c 02 c0       	push   0xc0022c02
c0017197:	56                   	push   esi
c0017198:	e8 ae fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	85 c0                	test   eax,eax
c00171a2:	75 88                	jne    c001712c <sysCallOpen(regs*)+0x97>
c00171a4:	52                   	push   edx
c00171a5:	52                   	push   edx
c00171a6:	68 28 2c 02 c0       	push   0xc0022c28
c00171ab:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00171ae:	51                   	push   ecx
c00171af:	e8 97 fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	85 c0                	test   eax,eax
c00171b9:	0f 85 d5 00 00 00    	jne    c0017294 <sysCallOpen(regs*)+0x1ff>
c00171bf:	50                   	push   eax
c00171c0:	50                   	push   eax
c00171c1:	68 2d 2c 02 c0       	push   0xc0022c2d
c00171c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171c9:	50                   	push   eax
c00171ca:	e8 7c fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	85 c0                	test   eax,eax
c00171d4:	0f 85 ba 00 00 00    	jne    c0017294 <sysCallOpen(regs*)+0x1ff>
c00171da:	50                   	push   eax
c00171db:	50                   	push   eax
c00171dc:	68 29 2c 02 c0       	push   0xc0022c29
c00171e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171e4:	50                   	push   eax
c00171e5:	e8 d8 95 fe ff       	call   c00007c2 <strcmp>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	85 c0                	test   eax,eax
c00171ef:	0f 84 9f 00 00 00    	je     c0017294 <sysCallOpen(regs*)+0x1ff>
c00171f5:	50                   	push   eax
c00171f6:	50                   	push   eax
c00171f7:	68 28 2c 02 c0       	push   0xc0022c28
c00171fc:	56                   	push   esi
c00171fd:	e8 49 fe ff ff       	call   c001704b <string_ends_with(char const*, char const*)>
c0017202:	83 c4 10             	add    esp,0x10
c0017205:	85 c0                	test   eax,eax
c0017207:	0f 85 87 00 00 00    	jne    c0017294 <sysCallOpen(regs*)+0x1ff>
c001720d:	83 ec 0c             	sub    esp,0xc
c0017210:	68 14 01 00 00       	push   0x114
c0017215:	e8 d4 7e ff ff       	call   c000f0ee <operator new(unsigned long)>
c001721a:	89 c6                	mov    esi,eax
c001721c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017221:	83 c4 0c             	add    esp,0xc
c0017224:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017227:	51                   	push   ecx
c0017228:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001722b:	50                   	push   eax
c001722c:	56                   	push   esi
c001722d:	e8 28 85 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c0017232:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017235:	83 c4 10             	add    esp,0x10
c0017238:	89 d0                	mov    eax,edx
c001723a:	25 ff 00 00 00       	and    eax,0xff
c001723f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017242:	89 d0                	mov    eax,edx
c0017244:	83 e0 01             	and    eax,0x1
c0017247:	f6 c2 02             	test   dl,0x2
c001724a:	74 03                	je     c001724f <sysCallOpen(regs*)+0x1ba>
c001724c:	83 c8 02             	or     eax,0x2
c001724f:	f6 c2 04             	test   dl,0x4
c0017252:	74 03                	je     c0017257 <sysCallOpen(regs*)+0x1c2>
c0017254:	83 c8 04             	or     eax,0x4
c0017257:	f6 c2 08             	test   dl,0x8
c001725a:	74 03                	je     c001725f <sysCallOpen(regs*)+0x1ca>
c001725c:	83 c8 0a             	or     eax,0xa
c001725f:	83 e2 10             	and    edx,0x10
c0017262:	74 03                	je     c0017267 <sysCallOpen(regs*)+0x1d2>
c0017264:	83 c8 12             	or     eax,0x12
c0017267:	52                   	push   edx
c0017268:	52                   	push   edx
c0017269:	50                   	push   eax
c001726a:	56                   	push   esi
c001726b:	e8 4e 85 ff ff       	call   c000f7be <File::open(FileOpenMode)>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	85 c0                	test   eax,eax
c0017275:	0f 85 ef fe ff ff    	jne    c001716a <sysCallOpen(regs*)+0xd5>
c001727b:	83 ec 0c             	sub    esp,0xc
c001727e:	56                   	push   esi
c001727f:	e8 46 6b ff ff       	call   c000ddca <UnixFile::getFileDescriptor()>
c0017284:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017287:	89 02                	mov    DWORD PTR [edx],eax
c0017289:	c1 f8 1f             	sar    eax,0x1f
c001728c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001728f:	e9 c6 fe ff ff       	jmp    c001715a <sysCallOpen(regs*)+0xc5>
c0017294:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017297:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001729d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00172a4:	e9 b4 fe ff ff       	jmp    c001715d <sysCallOpen(regs*)+0xc8>

c00172a9 <setupSystemCalls()>:
c00172a9:	c7 05 00 52 02 c0 a4 64 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc00164a4
c00172b3:	c7 05 04 52 02 c0 b7 62 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00162b7
c00172bd:	c7 05 08 52 02 c0 cc 63 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc00163cc
c00172c7:	c7 05 0c 52 02 c0 21 64 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0016421
c00172d1:	c7 05 10 52 02 c0 64 63 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0016364
c00172db:	c7 05 14 52 02 c0 be 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164be
c00172e5:	c7 05 18 52 02 c0 7d 66 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc001667d
c00172ef:	c7 05 1c 52 02 c0 a3 66 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc00166a3
c00172f9:	c7 05 24 52 02 c0 0d 6a 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc0016a0d
c0017303:	c7 05 20 52 02 c0 95 70 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc0017095
c001730d:	c7 05 28 52 02 c0 90 6a 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016a90
c0017317:	c7 05 2c 52 02 c0 12 67 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc0016712
c0017321:	c7 05 30 52 02 c0 ce 64 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc00164ce
c001732b:	c7 05 34 52 02 c0 d3 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164d3
c0017335:	c7 05 38 52 02 c0 fb 6a 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc0016afb
c001733f:	c7 05 3c 52 02 c0 56 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016b56
c0017349:	c7 05 40 52 02 c0 fd 67 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc00167fd
c0017353:	c7 05 44 52 02 c0 63 68 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc0016863
c001735d:	c7 05 48 52 02 c0 8c 69 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc001698c
c0017367:	c7 05 4c 52 02 c0 d8 64 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00164d8
c0017371:	c7 05 50 52 02 c0 b7 6b 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016bb7
c001737b:	c7 05 54 52 02 c0 e2 64 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc00164e2
c0017385:	c7 05 58 52 02 c0 e9 64 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc00164e9
c001738f:	c7 05 5c 52 02 c0 d8 6b 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc0016bd8
c0017399:	c7 05 60 52 02 c0 2b 6c 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016c2b
c00173a3:	c7 05 64 52 02 c0 f0 64 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc00164f0
c00173ad:	c7 05 68 52 02 c0 7e 6c 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016c7e
c00173b7:	c7 05 6c 52 02 c0 c5 66 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00166c5
c00173c1:	c7 05 70 52 02 c0 ca 6c 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc0016cca
c00173cb:	c7 05 74 52 02 c0 a5 67 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc00167a5
c00173d5:	c7 05 78 52 02 c0 a2 6d 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016da2
c00173df:	c7 05 7c 52 02 c0 de 68 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc00168de
c00173e9:	c7 05 80 52 02 c0 e4 6d 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc0016de4
c00173f3:	c7 05 84 52 02 c0 4b 6d 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016d4b
c00173fd:	c7 05 88 52 02 c0 43 6e 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc0016e43
c0017407:	c7 05 8c 52 02 c0 04 65 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc0016504
c0017411:	c7 05 90 52 02 c0 67 65 01 c0 	mov    DWORD PTR ds:0xc0025290,0xc0016567
c001741b:	c7 05 94 52 02 c0 af 65 01 c0 	mov    DWORD PTR ds:0xc0025294,0xc00165af
c0017425:	c7 05 98 52 02 c0 68 6f 01 c0 	mov    DWORD PTR ds:0xc0025298,0xc0016f68
c001742f:	c7 05 9c 52 02 c0 cb 6f 01 c0 	mov    DWORD PTR ds:0xc002529c,0xc0016fcb
c0017439:	c7 05 a0 52 02 c0 02 66 01 c0 	mov    DWORD PTR ds:0xc00252a0,0xc0016602
c0017443:	c7 05 a4 52 02 c0 f2 6f 01 c0 	mov    DWORD PTR ds:0xc00252a4,0xc0016ff2
c001744d:	c7 05 a8 52 02 c0 37 70 01 c0 	mov    DWORD PTR ds:0xc00252a8,0xc0017037
c0017457:	c7 05 ac 52 02 c0 cf 62 01 c0 	mov    DWORD PTR ds:0xc00252ac,0xc00162cf
c0017461:	c3                   	ret    

c0017462 <systemCall(regs*, void*)>:
c0017462:	53                   	push   ebx
c0017463:	83 ec 08             	sub    esp,0x8
c0017466:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001746a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001746d:	83 f8 7f             	cmp    eax,0x7f
c0017470:	77 16                	ja     c0017488 <systemCall(regs*, void*)+0x26>
c0017472:	8b 14 85 00 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae00]
c0017479:	85 d2                	test   edx,edx
c001747b:	74 0b                	je     c0017488 <systemCall(regs*, void*)+0x26>
c001747d:	83 ec 0c             	sub    esp,0xc
c0017480:	53                   	push   ebx
c0017481:	ff d2                	call   edx
c0017483:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017486:	eb 0d                	jmp    c0017495 <systemCall(regs*, void*)+0x33>
c0017488:	52                   	push   edx
c0017489:	52                   	push   edx
c001748a:	50                   	push   eax
c001748b:	68 32 2c 02 c0       	push   0xc0022c32
c0017490:	e8 8e 7d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001749d:	83 c4 08             	add    esp,0x8
c00174a0:	31 d2                	xor    edx,edx
c00174a2:	5b                   	pop    ebx
c00174a3:	c3                   	ret    

c00174a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00174a4:	55                   	push   ebp
c00174a5:	89 e5                	mov    ebp,esp
c00174a7:	57                   	push   edi
c00174a8:	56                   	push   esi
c00174a9:	53                   	push   ebx
c00174aa:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00174b0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00174b3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00174b6:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00174bd:	74 27                	je     c00174e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174bf:	85 c0                	test   eax,eax
c00174c1:	74 23                	je     c00174e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174c3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174c7:	75 1d                	jne    c00174e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174c9:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174cc:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174d2:	89 d1                	mov    ecx,edx
c00174d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174da:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174e0:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174e3:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174e6:	83 ec 0c             	sub    esp,0xc
c00174e9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174ec:	05 ff 0f 00 00       	add    eax,0xfff
c00174f1:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174f7:	6a 01                	push   0x1
c00174f9:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174ff:	e8 04 6d ff ff       	call   c000e208 <Virt::allocateKernelVirtualPages(int)>
c0017504:	83 c4 10             	add    esp,0x10
c0017507:	89 c6                	mov    esi,eax
c0017509:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001750f:	0f 86 21 01 00 00    	jbe    c0017636 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0017515:	c1 eb 0c             	shr    ebx,0xc
c0017518:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017522:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017528:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001752b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001752e:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017534:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017537:	29 d8                	sub    eax,ebx
c0017539:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001753f:	0f 83 f4 00 00 00    	jae    c0017639 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017545:	83 ec 0c             	sub    esp,0xc
c0017548:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001754b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0017551:	3d 00 10 00 00       	cmp    eax,0x1000
c0017556:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017558:	52                   	push   edx
c0017559:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001755f:	52                   	push   edx
c0017560:	76 05                	jbe    c0017567 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017562:	b8 00 10 00 00       	mov    eax,0x1000
c0017567:	31 d2                	xor    edx,edx
c0017569:	52                   	push   edx
c001756a:	50                   	push   eax
c001756b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001756e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017571:	83 c4 20             	add    esp,0x20
c0017574:	85 c0                	test   eax,eax
c0017576:	74 1f                	je     c0017597 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017578:	51                   	push   ecx
c0017579:	51                   	push   ecx
c001757a:	50                   	push   eax
c001757b:	68 46 2c 02 c0       	push   0xc0022c46
c0017580:	e8 9e 7c ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0017585:	89 34 24             	mov    DWORD PTR [esp],esi
c0017588:	e8 c8 6f ff ff       	call   c000e555 <Virt::freeKernelVirtualPages(unsigned long)>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	31 c0                	xor    eax,eax
c0017592:	e9 7c 01 00 00       	jmp    c0017713 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017597:	e8 bf 14 00 00       	call   c0018a5b <lockScheduler()>
c001759c:	e8 26 50 ff ff       	call   c000c5c7 <Phys::allocatePage()>
c00175a1:	6a 07                	push   0x7
c00175a3:	56                   	push   esi
c00175a4:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00175aa:	50                   	push   eax
c00175ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175b1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175b4:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175ba:	e8 15 73 ff ff       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00175bf:	83 c4 0c             	add    esp,0xc
c00175c2:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175c8:	6a 00                	push   0x0
c00175ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175d0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175d3:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175d9:	e8 54 71 ff ff       	call   c000e732 <VAS::mapOtherVASIn(bool, VAS*)>
c00175de:	58                   	pop    eax
c00175df:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175e5:	5a                   	pop    edx
c00175e6:	68 07 04 00 00       	push   0x407
c00175eb:	53                   	push   ebx
c00175ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175f2:	50                   	push   eax
c00175f3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175f9:	6a 00                	push   0x0
c00175fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017600:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017603:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017609:	e8 82 76 ff ff       	call   c000ec90 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001760e:	83 c4 1c             	add    esp,0x1c
c0017611:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017617:	68 00 10 00 00       	push   0x1000
c001761c:	50                   	push   eax
c001761d:	56                   	push   esi
c001761e:	e8 79 90 fe ff       	call   c000069c <memcpy>
c0017623:	e8 35 14 00 00       	call   c0018a5d <unlockScheduler()>
c0017628:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001762e:	83 c4 10             	add    esp,0x10
c0017631:	e9 f5 fe ff ff       	jmp    c001752b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017636:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017639:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017643:	0f 86 bc 00 00 00    	jbe    c0017705 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017649:	e8 0d 14 00 00       	call   c0018a5b <lockScheduler()>
c001764e:	51                   	push   ecx
c001764f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017655:	6a 00                	push   0x0
c0017657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001765c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001765f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017665:	e8 c8 70 ff ff       	call   c000e732 <VAS::mapOtherVASIn(bool, VAS*)>
c001766a:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c0017670:	c1 e8 0c             	shr    eax,0xc
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001767c:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017686:	e8 3c 4f ff ff       	call   c000c5c7 <Phys::allocatePage()>
c001768b:	6a 07                	push   0x7
c001768d:	56                   	push   esi
c001768e:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017694:	50                   	push   eax
c0017695:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001769b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001769e:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00176a4:	e8 2b 72 ff ff       	call   c000e8d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00176a9:	58                   	pop    eax
c00176aa:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00176b0:	5a                   	pop    edx
c00176b1:	68 07 04 00 00       	push   0x407
c00176b6:	53                   	push   ebx
c00176b7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00176bd:	50                   	push   eax
c00176be:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176c4:	6a 00                	push   0x0
c00176c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176d4:	e8 b7 75 ff ff       	call   c000ec90 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176d9:	83 c4 1c             	add    esp,0x1c
c00176dc:	68 00 10 00 00       	push   0x1000
c00176e1:	6a 00                	push   0x0
c00176e3:	56                   	push   esi
c00176e4:	e8 e9 8f fe ff       	call   c00006d2 <memset>
c00176e9:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176f8:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176fe:	77 86                	ja     c0017686 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c0017700:	e8 58 13 00 00       	call   c0018a5d <unlockScheduler()>
c0017705:	83 ec 0c             	sub    esp,0xc
c0017708:	56                   	push   esi
c0017709:	e8 47 6e ff ff       	call   c000e555 <Virt::freeKernelVirtualPages(unsigned long)>
c001770e:	83 c4 10             	add    esp,0x10
c0017711:	b0 01                	mov    al,0x1
c0017713:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017716:	5b                   	pop    ebx
c0017717:	5e                   	pop    esi
c0017718:	5f                   	pop    edi
c0017719:	5d                   	pop    ebp
c001771a:	c3                   	ret    

c001771b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001771b:	55                   	push   ebp
c001771c:	57                   	push   edi
c001771d:	56                   	push   esi
c001771e:	53                   	push   ebx
c001771f:	83 ec 48             	sub    esp,0x48
c0017722:	68 14 01 00 00       	push   0x114
c0017727:	e8 c2 79 ff ff       	call   c000f0ee <operator new(unsigned long)>
c001772c:	83 c4 0c             	add    esp,0xc
c001772f:	89 c6                	mov    esi,eax
c0017731:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017735:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017739:	50                   	push   eax
c001773a:	e8 1b 80 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c001773f:	58                   	pop    eax
c0017740:	5a                   	pop    edx
c0017741:	6a 01                	push   0x1
c0017743:	56                   	push   esi
c0017744:	e8 75 80 ff ff       	call   c000f7be <File::open(FileOpenMode)>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	85 c0                	test   eax,eax
c001774e:	0f 85 47 01 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017754:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001775c:	83 ec 0c             	sub    esp,0xc
c001775f:	6a 34                	push   0x34
c0017761:	e8 8b 48 ff ff       	call   c000bff1 <malloc>
c0017766:	89 c3                	mov    ebx,eax
c0017768:	58                   	pop    eax
c0017769:	8b 06                	mov    eax,DWORD PTR [esi]
c001776b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001776f:	57                   	push   edi
c0017770:	53                   	push   ebx
c0017771:	6a 00                	push   0x0
c0017773:	6a 34                	push   0x34
c0017775:	56                   	push   esi
c0017776:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017779:	83 c4 20             	add    esp,0x20
c001777c:	85 c0                	test   eax,eax
c001777e:	0f 85 17 01 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017784:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001778a:	0f 85 0b 01 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017790:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017793:	85 c0                	test   eax,eax
c0017795:	0f 84 00 01 00 00    	je     c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001779b:	31 d2                	xor    edx,edx
c001779d:	55                   	push   ebp
c001779e:	52                   	push   edx
c001779f:	50                   	push   eax
c00177a0:	56                   	push   esi
c00177a1:	e8 d6 80 ff ff       	call   c000f87c <File::seek(unsigned long long)>
c00177a6:	83 c4 10             	add    esp,0x10
c00177a9:	85 c0                	test   eax,eax
c00177ab:	0f 85 ea 00 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00177b4:	83 ec 0c             	sub    esp,0xc
c00177b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177bb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177bf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177c3:	0f af c2             	imul   eax,edx
c00177c6:	50                   	push   eax
c00177c7:	e8 25 48 ff ff       	call   c000bff1 <malloc>
c00177cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177d7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177db:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177df:	0f af c2             	imul   eax,edx
c00177e2:	99                   	cdq    
c00177e3:	52                   	push   edx
c00177e4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177e6:	50                   	push   eax
c00177e7:	56                   	push   esi
c00177e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177ee:	83 c4 20             	add    esp,0x20
c00177f1:	85 c0                	test   eax,eax
c00177f3:	0f 84 a2 00 00 00    	je     c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177f9:	31 d2                	xor    edx,edx
c00177fb:	51                   	push   ecx
c00177fc:	52                   	push   edx
c00177fd:	50                   	push   eax
c00177fe:	56                   	push   esi
c00177ff:	e8 78 80 ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017804:	83 c4 10             	add    esp,0x10
c0017807:	85 c0                	test   eax,eax
c0017809:	0f 85 8c 00 00 00    	jne    c001789b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001780f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017813:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017817:	0f af c2             	imul   eax,edx
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	31 ed                	xor    ebp,ebp
c001781f:	50                   	push   eax
c0017820:	e8 cc 47 ff ff       	call   c000bff1 <malloc>
c0017825:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017829:	89 3c 24             	mov    DWORD PTR [esp],edi
c001782c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017830:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017834:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017838:	0f af c2             	imul   eax,edx
c001783b:	99                   	cdq    
c001783c:	52                   	push   edx
c001783d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001783f:	50                   	push   eax
c0017840:	56                   	push   esi
c0017841:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017844:	83 c4 20             	add    esp,0x20
c0017847:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001784f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017853:	0f 86 80 00 00 00    	jbe    c00178d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017859:	0f b7 fd             	movzx  edi,bp
c001785c:	c1 e7 05             	shl    edi,0x5
c001785f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017863:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017866:	75 6b                	jne    c00178d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017868:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001786b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001786f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017876:	52                   	push   edx
c0017877:	31 d2                	xor    edx,edx
c0017879:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001787c:	52                   	push   edx
c001787d:	50                   	push   eax
c001787e:	56                   	push   esi
c001787f:	e8 f8 7f ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017884:	83 c4 10             	add    esp,0x10
c0017887:	85 c0                	test   eax,eax
c0017889:	74 17                	je     c00178a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001788b:	83 ec 0c             	sub    esp,0xc
c001788e:	68 71 2c 02 c0       	push   0xc0022c71
c0017893:	e8 8b 79 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0017898:	83 c4 10             	add    esp,0x10
c001789b:	31 c0                	xor    eax,eax
c001789d:	e9 87 00 00 00       	jmp    c0017929 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00178a2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00178a5:	83 ec 0c             	sub    esp,0xc
c00178a8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00178ab:	50                   	push   eax
c00178ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00178b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178b4:	56                   	push   esi
c00178b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00178b9:	e8 e6 fb ff ff       	call   c00174a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178c2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178c6:	83 c4 20             	add    esp,0x20
c00178c9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178cd:	73 04                	jae    c00178d3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178d3:	45                   	inc    ebp
c00178d4:	e9 76 ff ff ff       	jmp    c001784f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178d9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178e5:	83 ec 0c             	sub    esp,0xc
c00178e8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178f3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178f9:	05 00 10 00 00       	add    eax,0x1000
c00178fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017905:	e8 f7 46 ff ff       	call   c000c001 <free>
c001790a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001790d:	e8 ef 46 ff ff       	call   c000c001 <free>
c0017912:	58                   	pop    eax
c0017913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017917:	e8 e5 46 ff ff       	call   c000c001 <free>
c001791c:	89 34 24             	mov    DWORD PTR [esp],esi
c001791f:	e8 f8 7e ff ff       	call   c000f81c <File::close()>
c0017924:	83 c4 10             	add    esp,0x10
c0017927:	b0 01                	mov    al,0x1
c0017929:	83 c4 3c             	add    esp,0x3c
c001792c:	5b                   	pop    ebx
c001792d:	5e                   	pop    esi
c001792e:	5f                   	pop    edi
c001792f:	5d                   	pop    ebp
c0017930:	c3                   	ret    

c0017931 <Thr::runtimeReferenceHelper()>:
c0017931:	83 ec 18             	sub    esp,0x18
c0017934:	68 79 2c 02 c0       	push   0xc0022c79
c0017939:	e8 e5 78 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001793e:	fa                   	cli    
c001793f:	83 c4 10             	add    esp,0x10
c0017942:	eb fe                	jmp    c0017942 <Thr::runtimeReferenceHelper()+0x11>

c0017944 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017944:	57                   	push   edi
c0017945:	56                   	push   esi
c0017946:	53                   	push   ebx
c0017947:	31 db                	xor    ebx,ebx
c0017949:	39 1d a0 5b 02 c0    	cmp    DWORD PTR ds:0xc0025ba0,ebx
c001794f:	7e 3c                	jle    c001798d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017951:	8b 34 9d 20 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda4e0]
c0017958:	31 ff                	xor    edi,edi
c001795a:	39 3c 9d 20 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda5e0],edi
c0017961:	7e 27                	jle    c001798a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017963:	50                   	push   eax
c0017964:	50                   	push   eax
c0017965:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017969:	8b 06                	mov    eax,DWORD PTR [esi]
c001796b:	03 04 9d a0 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda560]
c0017972:	50                   	push   eax
c0017973:	e8 4a 8e fe ff       	call   c00007c2 <strcmp>
c0017978:	83 c4 10             	add    esp,0x10
c001797b:	85 c0                	test   eax,eax
c001797d:	75 05                	jne    c0017984 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001797f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017982:	eb 0b                	jmp    c001798f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017984:	83 c6 10             	add    esi,0x10
c0017987:	47                   	inc    edi
c0017988:	eb d0                	jmp    c001795a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001798a:	43                   	inc    ebx
c001798b:	eb bc                	jmp    c0017949 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001798d:	31 c0                	xor    eax,eax
c001798f:	5b                   	pop    ebx
c0017990:	5e                   	pop    esi
c0017991:	5f                   	pop    edi
c0017992:	c3                   	ret    

c0017993 <Thr::loadKernelSymbolTable(char const*)>:
c0017993:	55                   	push   ebp
c0017994:	57                   	push   edi
c0017995:	56                   	push   esi
c0017996:	53                   	push   ebx
c0017997:	83 ec 68             	sub    esp,0x68
c001799a:	8b 35 f4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bf4
c00179a0:	68 14 01 00 00       	push   0x114
c00179a5:	e8 44 77 ff ff       	call   c000f0ee <operator new(unsigned long)>
c00179aa:	83 c4 0c             	add    esp,0xc
c00179ad:	89 c3                	mov    ebx,eax
c00179af:	56                   	push   esi
c00179b0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00179b4:	50                   	push   eax
c00179b5:	e8 a0 7d ff ff       	call   c000f75a <File::File(char const*, Process*)>
c00179ba:	5e                   	pop    esi
c00179bb:	5f                   	pop    edi
c00179bc:	6a 01                	push   0x1
c00179be:	53                   	push   ebx
c00179bf:	e8 fa 7d ff ff       	call   c000f7be <File::open(FileOpenMode)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	31 d2                	xor    edx,edx
c00179c9:	85 c0                	test   eax,eax
c00179cb:	0f 85 79 02 00 00    	jne    c0017c4a <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179d1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	6a 34                	push   0x34
c00179de:	e8 0e 46 ff ff       	call   c000bff1 <malloc>
c00179e3:	59                   	pop    ecx
c00179e4:	89 c7                	mov    edi,eax
c00179e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179e8:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179ec:	56                   	push   esi
c00179ed:	57                   	push   edi
c00179ee:	6a 00                	push   0x0
c00179f0:	6a 34                	push   0x34
c00179f2:	53                   	push   ebx
c00179f3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179f6:	83 c4 20             	add    esp,0x20
c00179f9:	85 c0                	test   eax,eax
c00179fb:	74 17                	je     c0017a14 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	68 9b 2c 02 c0       	push   0xc0022c9b
c0017a05:	e8 48 e0 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0017a0a:	83 c4 10             	add    esp,0x10
c0017a0d:	31 d2                	xor    edx,edx
c0017a0f:	e9 36 02 00 00       	jmp    c0017c4a <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017a14:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017a1a:	75 e1                	jne    c00179fd <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a1c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a1f:	85 c0                	test   eax,eax
c0017a21:	74 da                	je     c00179fd <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a23:	52                   	push   edx
c0017a24:	31 d2                	xor    edx,edx
c0017a26:	52                   	push   edx
c0017a27:	50                   	push   eax
c0017a28:	53                   	push   ebx
c0017a29:	e8 4e 7e ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017a2e:	83 c4 10             	add    esp,0x10
c0017a31:	85 c0                	test   eax,eax
c0017a33:	75 c8                	jne    c00179fd <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a35:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a39:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a3d:	0f af c2             	imul   eax,edx
c0017a40:	83 ec 0c             	sub    esp,0xc
c0017a43:	31 ed                	xor    ebp,ebp
c0017a45:	50                   	push   eax
c0017a46:	e8 a6 45 ff ff       	call   c000bff1 <malloc>
c0017a4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a56:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a5a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a5e:	0f af c2             	imul   eax,edx
c0017a61:	99                   	cdq    
c0017a62:	52                   	push   edx
c0017a63:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a65:	50                   	push   eax
c0017a66:	53                   	push   ebx
c0017a67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a6a:	83 c4 20             	add    esp,0x20
c0017a6d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a75:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a7d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a8d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a91:	0f 86 aa 00 00 00    	jbe    c0017b41 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a97:	0f b7 f5             	movzx  esi,bp
c0017a9a:	6b f6 28             	imul   esi,esi,0x28
c0017a9d:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017aa1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017aa4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017aa8:	50                   	push   eax
c0017aa9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017aad:	6b c0 28             	imul   eax,eax,0x28
c0017ab0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ab4:	8b 16                	mov    edx,DWORD PTR [esi]
c0017ab6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017aba:	89 d0                	mov    eax,edx
c0017abc:	31 d2                	xor    edx,edx
c0017abe:	52                   	push   edx
c0017abf:	50                   	push   eax
c0017ac0:	53                   	push   ebx
c0017ac1:	e8 b6 7d ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017ac6:	83 c4 0c             	add    esp,0xc
c0017ac9:	6a 20                	push   0x20
c0017acb:	6a 00                	push   0x0
c0017acd:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ad1:	52                   	push   edx
c0017ad2:	e8 fb 8b fe ff       	call   c00006d2 <memset>
c0017ad7:	58                   	pop    eax
c0017ad8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ada:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017ade:	51                   	push   ecx
c0017adf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017ae3:	52                   	push   edx
c0017ae4:	6a 00                	push   0x0
c0017ae6:	6a 1f                	push   0x1f
c0017ae8:	53                   	push   ebx
c0017ae9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017aec:	83 c4 18             	add    esp,0x18
c0017aef:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017af4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017af8:	52                   	push   edx
c0017af9:	e8 c4 8c fe ff       	call   c00007c2 <strcmp>
c0017afe:	83 c4 10             	add    esp,0x10
c0017b01:	85 c0                	test   eax,eax
c0017b03:	75 0f                	jne    c0017b14 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017b05:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b14:	50                   	push   eax
c0017b15:	50                   	push   eax
c0017b16:	68 ba 2c 02 c0       	push   0xc0022cba
c0017b1b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b1f:	50                   	push   eax
c0017b20:	e8 9d 8c fe ff       	call   c00007c2 <strcmp>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	85 c0                	test   eax,eax
c0017b2a:	75 0f                	jne    c0017b3b <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b2c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b3b:	45                   	inc    ebp
c0017b3c:	e9 4c ff ff ff       	jmp    c0017a8d <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b46:	75 10                	jne    c0017b58 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b50:	e8 fd de ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b5d:	75 10                	jne    c0017b6f <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b5f:	83 ec 0c             	sub    esp,0xc
c0017b62:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b67:	e8 e6 de ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	31 d2                	xor    edx,edx
c0017b71:	50                   	push   eax
c0017b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b76:	52                   	push   edx
c0017b77:	50                   	push   eax
c0017b78:	53                   	push   ebx
c0017b79:	e8 fe 7c ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017b7e:	5a                   	pop    edx
c0017b7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b83:	e8 69 44 ff ff       	call   c000bff1 <malloc>
c0017b88:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b90:	89 c1                	mov    ecx,eax
c0017b92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b9a:	5e                   	pop    esi
c0017b9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b9d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017ba1:	55                   	push   ebp
c0017ba2:	51                   	push   ecx
c0017ba3:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017ba7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017baf:	53                   	push   ebx
c0017bb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bb3:	83 c4 14             	add    esp,0x14
c0017bb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bba:	e8 32 44 ff ff       	call   c000bff1 <malloc>
c0017bbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bc2:	89 c6                	mov    esi,eax
c0017bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bc6:	56                   	push   esi
c0017bc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bcb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bcf:	53                   	push   ebx
c0017bd0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bd7:	8b 15 a0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba0
c0017bdd:	c1 e8 04             	shr    eax,0x4
c0017be0:	83 c4 1c             	add    esp,0x1c
c0017be3:	89 04 95 20 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda5e0],eax
c0017bea:	31 d2                	xor    edx,edx
c0017bec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bf0:	52                   	push   edx
c0017bf1:	50                   	push   eax
c0017bf2:	53                   	push   ebx
c0017bf3:	e8 84 7c ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017bf8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bfb:	31 d2                	xor    edx,edx
c0017bfd:	56                   	push   esi
c0017bfe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c02:	52                   	push   edx
c0017c03:	50                   	push   eax
c0017c04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c06:	53                   	push   ebx
c0017c07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017c0a:	83 c4 14             	add    esp,0x14
c0017c0d:	53                   	push   ebx
c0017c0e:	e8 09 7c ff ff       	call   c000f81c <File::close()>
c0017c13:	5d                   	pop    ebp
c0017c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c18:	e8 e4 43 ff ff       	call   c000c001 <free>
c0017c1d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c20:	e8 dc 43 ff ff       	call   c000c001 <free>
c0017c25:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c0017c2a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c2e:	8d 50 01             	lea    edx,[eax+0x1]
c0017c31:	89 15 a0 5b 02 c0    	mov    DWORD PTR ds:0xc0025ba0,edx
c0017c37:	89 0c 85 20 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4e0],ecx
c0017c3e:	89 34 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],esi
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	b2 01                	mov    dl,0x1
c0017c4a:	83 c4 5c             	add    esp,0x5c
c0017c4d:	88 d0                	mov    al,dl
c0017c4f:	5b                   	pop    ebx
c0017c50:	5e                   	pop    esi
c0017c51:	5f                   	pop    edi
c0017c52:	5d                   	pop    ebp
c0017c53:	c3                   	ret    

c0017c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c54:	55                   	push   ebp
c0017c55:	57                   	push   edi
c0017c56:	56                   	push   esi
c0017c57:	53                   	push   ebx
c0017c58:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c5e:	8b 1d f4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bf4
c0017c64:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c6b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c6f:	68 14 01 00 00       	push   0x114
c0017c74:	e8 75 74 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0017c79:	83 c4 0c             	add    esp,0xc
c0017c7c:	53                   	push   ebx
c0017c7d:	89 c7                	mov    edi,eax
c0017c7f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c86:	50                   	push   eax
c0017c87:	e8 ce 7a ff ff       	call   c000f75a <File::File(char const*, Process*)>
c0017c8c:	5e                   	pop    esi
c0017c8d:	5d                   	pop    ebp
c0017c8e:	6a 01                	push   0x1
c0017c90:	57                   	push   edi
c0017c91:	e8 28 7b ff ff       	call   c000f7be <File::open(FileOpenMode)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	85 c0                	test   eax,eax
c0017c9b:	0f 85 10 07 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ca1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ca9:	83 ec 0c             	sub    esp,0xc
c0017cac:	6a 34                	push   0x34
c0017cae:	e8 3e 43 ff ff       	call   c000bff1 <malloc>
c0017cb3:	5b                   	pop    ebx
c0017cb4:	89 c5                	mov    ebp,eax
c0017cb6:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cb8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017cbc:	53                   	push   ebx
c0017cbd:	55                   	push   ebp
c0017cbe:	6a 00                	push   0x0
c0017cc0:	6a 34                	push   0x34
c0017cc2:	57                   	push   edi
c0017cc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cc6:	83 c4 20             	add    esp,0x20
c0017cc9:	85 c0                	test   eax,eax
c0017ccb:	0f 85 e0 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd1:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cd8:	0f 85 d3 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cde:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017ce1:	85 c0                	test   eax,eax
c0017ce3:	0f 84 c8 06 00 00    	je     c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ce9:	31 d2                	xor    edx,edx
c0017ceb:	51                   	push   ecx
c0017cec:	52                   	push   edx
c0017ced:	50                   	push   eax
c0017cee:	57                   	push   edi
c0017cef:	e8 88 7b ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	85 c0                	test   eax,eax
c0017cf9:	0f 85 b2 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017d02:	83 ec 0c             	sub    esp,0xc
c0017d05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017d09:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d0d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d11:	0f af c2             	imul   eax,edx
c0017d14:	50                   	push   eax
c0017d15:	e8 d7 42 ff ff       	call   c000bff1 <malloc>
c0017d1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d25:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d29:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d2d:	0f af c2             	imul   eax,edx
c0017d30:	99                   	cdq    
c0017d31:	52                   	push   edx
c0017d32:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d34:	50                   	push   eax
c0017d35:	57                   	push   edi
c0017d36:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d39:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d3c:	83 c4 20             	add    esp,0x20
c0017d3f:	85 c0                	test   eax,eax
c0017d41:	0f 84 6a 06 00 00    	je     c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d47:	52                   	push   edx
c0017d48:	31 d2                	xor    edx,edx
c0017d4a:	52                   	push   edx
c0017d4b:	50                   	push   eax
c0017d4c:	57                   	push   edi
c0017d4d:	e8 2a 7b ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017d52:	83 c4 10             	add    esp,0x10
c0017d55:	85 c0                	test   eax,eax
c0017d57:	0f 85 54 06 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d5d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d61:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d65:	0f af c2             	imul   eax,edx
c0017d68:	83 ec 0c             	sub    esp,0xc
c0017d6b:	31 f6                	xor    esi,esi
c0017d6d:	50                   	push   eax
c0017d6e:	e8 7e 42 ff ff       	call   c000bff1 <malloc>
c0017d73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d7e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d82:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d86:	0f af c2             	imul   eax,edx
c0017d89:	99                   	cdq    
c0017d8a:	52                   	push   edx
c0017d8b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d8d:	50                   	push   eax
c0017d8e:	57                   	push   edi
c0017d8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d92:	83 c4 20             	add    esp,0x20
c0017d95:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d99:	0f 86 af 00 00 00    	jbe    c0017e4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d9f:	0f b7 de             	movzx  ebx,si
c0017da2:	c1 e3 05             	shl    ebx,0x5
c0017da5:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017da9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017dac:	0f 85 96 00 00 00    	jne    c0017e48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017db2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017db5:	31 d2                	xor    edx,edx
c0017db7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017dbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017dc2:	50                   	push   eax
c0017dc3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017dc6:	52                   	push   edx
c0017dc7:	50                   	push   eax
c0017dc8:	57                   	push   edi
c0017dc9:	e8 ae 7a ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017dce:	83 c4 10             	add    esp,0x10
c0017dd1:	85 c0                	test   eax,eax
c0017dd3:	0f 85 d8 05 00 00    	jne    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dd9:	52                   	push   edx
c0017dda:	52                   	push   edx
c0017ddb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ddf:	68 dc 2c 02 c0       	push   0xc0022cdc
c0017de4:	e8 3a 74 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0017de9:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017df0:	31 d2                	xor    edx,edx
c0017df2:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017df6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017dfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dfe:	59                   	pop    ecx
c0017dff:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017e01:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e08:	50                   	push   eax
c0017e09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e11:	52                   	push   edx
c0017e12:	50                   	push   eax
c0017e13:	57                   	push   edi
c0017e14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e17:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e1a:	83 c4 18             	add    esp,0x18
c0017e1d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e20:	50                   	push   eax
c0017e21:	68 00 2d 02 c0       	push   0xc0022d00
c0017e26:	e8 f8 73 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0017e2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e2e:	83 c4 0c             	add    esp,0xc
c0017e31:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e34:	50                   	push   eax
c0017e35:	6a 00                	push   0x0
c0017e37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e3b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e3f:	50                   	push   eax
c0017e40:	e8 8d 88 fe ff       	call   c00006d2 <memset>
c0017e45:	83 c4 10             	add    esp,0x10
c0017e48:	46                   	inc    esi
c0017e49:	e9 47 ff ff ff       	jmp    c0017d95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e4e:	50                   	push   eax
c0017e4f:	31 db                	xor    ebx,ebx
c0017e51:	68 00 01 00 00       	push   0x100
c0017e56:	6a 00                	push   0x0
c0017e58:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e5c:	50                   	push   eax
c0017e5d:	e8 70 88 fe ff       	call   c00006d2 <memset>
c0017e62:	83 c4 0c             	add    esp,0xc
c0017e65:	68 00 01 00 00       	push   0x100
c0017e6a:	6a 00                	push   0x0
c0017e6c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e73:	50                   	push   eax
c0017e74:	e8 59 88 fe ff       	call   c00006d2 <memset>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e84:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e94:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e9c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ea4:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017ea8:	0f 86 2f 01 00 00    	jbe    c0017fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017eae:	0f b7 f3             	movzx  esi,bx
c0017eb1:	6b f6 28             	imul   esi,esi,0x28
c0017eb4:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017eb8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ebb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ebf:	50                   	push   eax
c0017ec0:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017ec4:	6b d2 28             	imul   edx,edx,0x28
c0017ec7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ecb:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ecd:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ed1:	31 d2                	xor    edx,edx
c0017ed3:	52                   	push   edx
c0017ed4:	50                   	push   eax
c0017ed5:	57                   	push   edi
c0017ed6:	e8 a1 79 ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017edb:	83 c4 0c             	add    esp,0xc
c0017ede:	6a 20                	push   0x20
c0017ee0:	6a 00                	push   0x0
c0017ee2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ee9:	51                   	push   ecx
c0017eea:	e8 e3 87 fe ff       	call   c00006d2 <memset>
c0017eef:	58                   	pop    eax
c0017ef0:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ef2:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ef6:	52                   	push   edx
c0017ef7:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017efe:	51                   	push   ecx
c0017eff:	6a 00                	push   0x0
c0017f01:	6a 1f                	push   0x1f
c0017f03:	57                   	push   edi
c0017f04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017f07:	83 c4 1c             	add    esp,0x1c
c0017f0a:	6a 09                	push   0x9
c0017f0c:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017f11:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017f18:	51                   	push   ecx
c0017f19:	e8 1b 87 fe ff       	call   c0000639 <memcmp>
c0017f1e:	83 c4 10             	add    esp,0x10
c0017f21:	85 c0                	test   eax,eax
c0017f23:	75 21                	jne    c0017f46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f31:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f35:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f38:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f3f:	89 c8                	mov    eax,ecx
c0017f41:	40                   	inc    eax
c0017f42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f46:	50                   	push   eax
c0017f47:	6a 09                	push   0x9
c0017f49:	68 27 2d 02 c0       	push   0xc0022d27
c0017f4e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f55:	50                   	push   eax
c0017f56:	e8 de 86 fe ff       	call   c0000639 <memcmp>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	85 c0                	test   eax,eax
c0017f60:	75 21                	jne    c0017f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f6a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f6e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f72:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f75:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f7c:	89 c8                	mov    eax,ecx
c0017f7e:	40                   	inc    eax
c0017f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f83:	50                   	push   eax
c0017f84:	50                   	push   eax
c0017f85:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017f8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f91:	50                   	push   eax
c0017f92:	e8 2b 88 fe ff       	call   c00007c2 <strcmp>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	85 c0                	test   eax,eax
c0017f9c:	75 0f                	jne    c0017fad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f9e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fa1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fad:	50                   	push   eax
c0017fae:	50                   	push   eax
c0017faf:	68 ba 2c 02 c0       	push   0xc0022cba
c0017fb4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fbb:	50                   	push   eax
c0017fbc:	e8 01 88 fe ff       	call   c00007c2 <strcmp>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	85 c0                	test   eax,eax
c0017fc6:	75 0f                	jne    c0017fd7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017fc8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fcb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fd7:	43                   	inc    ebx
c0017fd8:	e9 c7 fe ff ff       	jmp    c0017ea4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fdd:	31 d2                	xor    edx,edx
c0017fdf:	50                   	push   eax
c0017fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fe4:	52                   	push   edx
c0017fe5:	50                   	push   eax
c0017fe6:	57                   	push   edi
c0017fe7:	e8 90 78 ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0017fec:	5a                   	pop    edx
c0017fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff1:	e8 fb 3f ff ff       	call   c000bff1 <malloc>
c0017ff6:	31 d2                	xor    edx,edx
c0017ff8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017ffc:	59                   	pop    ecx
c0017ffd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fff:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0018003:	53                   	push   ebx
c0018004:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018008:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001800c:	52                   	push   edx
c001800d:	50                   	push   eax
c001800e:	57                   	push   edi
c001800f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018012:	83 c4 14             	add    esp,0x14
c0018015:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018019:	e8 d3 3f ff ff       	call   c000bff1 <malloc>
c001801e:	31 d2                	xor    edx,edx
c0018020:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018024:	83 c4 0c             	add    esp,0xc
c0018027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001802b:	52                   	push   edx
c001802c:	50                   	push   eax
c001802d:	57                   	push   edi
c001802e:	e8 49 78 ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0018033:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018036:	31 d2                	xor    edx,edx
c0018038:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001803c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018040:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018042:	52                   	push   edx
c0018043:	50                   	push   eax
c0018044:	57                   	push   edi
c0018045:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018048:	83 c4 20             	add    esp,0x20
c001804b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018053:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018057:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001805b:	0f 84 54 03 00 00    	je     c00183b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0018061:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0018068:	31 d2                	xor    edx,edx
c001806a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001806e:	c1 e8 03             	shr    eax,0x3
c0018071:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018075:	50                   	push   eax
c0018076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001807a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001807e:	52                   	push   edx
c001807f:	50                   	push   eax
c0018080:	57                   	push   edi
c0018081:	e8 f6 77 ff ff       	call   c000f87c <File::seek(unsigned long long)>
c0018086:	58                   	pop    eax
c0018087:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0018092:	e8 5a 3f ff ff       	call   c000bff1 <malloc>
c0018097:	31 d2                	xor    edx,edx
c0018099:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001809d:	58                   	pop    eax
c001809e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00180a0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00180a4:	50                   	push   eax
c00180a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00180a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180ad:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00180b4:	52                   	push   edx
c00180b5:	50                   	push   eax
c00180b6:	57                   	push   edi
c00180b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180ba:	83 c4 20             	add    esp,0x20
c00180bd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180c9:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180cd:	0f 8d c6 02 00 00    	jge    c0018399 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180db:	31 db                	xor    ebx,ebx
c00180dd:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e8:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180f0:	c1 e8 08             	shr    eax,0x8
c00180f3:	89 c6                	mov    esi,eax
c00180f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180f9:	c1 e6 04             	shl    esi,0x4
c00180fc:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0018100:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018103:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018107:	85 c0                	test   eax,eax
c0018109:	0f 85 17 01 00 00    	jne    c0018226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001810f:	83 ec 0c             	sub    esp,0xc
c0018112:	b3 01                	mov    bl,0x1
c0018114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018118:	03 06                	add    eax,DWORD PTR [esi]
c001811a:	50                   	push   eax
c001811b:	e8 24 f8 ff ff       	call   c0017944 <Thr::getAddressOfKernelSymbol(char const*)>
c0018120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001812c:	0f 85 f4 00 00 00    	jne    c0018226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018132:	50                   	push   eax
c0018133:	50                   	push   eax
c0018134:	68 31 2d 02 c0       	push   0xc0022d31
c0018139:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001813d:	03 06                	add    eax,DWORD PTR [esi]
c001813f:	50                   	push   eax
c0018140:	e8 7d 86 fe ff       	call   c00007c2 <strcmp>
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	85 c0                	test   eax,eax
c001814a:	75 0a                	jne    c0018156 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001814c:	b8 1c f5 01 c0       	mov    eax,0xc001f51c
c0018151:	e9 ca 00 00 00       	jmp    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018156:	50                   	push   eax
c0018157:	50                   	push   eax
c0018158:	68 3b 2d 02 c0       	push   0xc0022d3b
c001815d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018161:	03 06                	add    eax,DWORD PTR [esi]
c0018163:	50                   	push   eax
c0018164:	e8 59 86 fe ff       	call   c00007c2 <strcmp>
c0018169:	83 c4 10             	add    esp,0x10
c001816c:	85 c0                	test   eax,eax
c001816e:	75 0a                	jne    c001817a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0018170:	b8 50 f2 01 c0       	mov    eax,0xc001f250
c0018175:	e9 a6 00 00 00       	jmp    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001817a:	53                   	push   ebx
c001817b:	53                   	push   ebx
c001817c:	68 44 2d 02 c0       	push   0xc0022d44
c0018181:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018185:	03 06                	add    eax,DWORD PTR [esi]
c0018187:	50                   	push   eax
c0018188:	e8 35 86 fe ff       	call   c00007c2 <strcmp>
c001818d:	83 c4 10             	add    esp,0x10
c0018190:	85 c0                	test   eax,eax
c0018192:	75 0a                	jne    c001819e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018194:	b8 1c f6 01 c0       	mov    eax,0xc001f61c
c0018199:	e9 82 00 00 00       	jmp    c0018220 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001819e:	51                   	push   ecx
c001819f:	51                   	push   ecx
c00181a0:	68 4e 2d 02 c0       	push   0xc0022d4e
c00181a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181a9:	03 06                	add    eax,DWORD PTR [esi]
c00181ab:	50                   	push   eax
c00181ac:	e8 11 86 fe ff       	call   c00007c2 <strcmp>
c00181b1:	83 c4 10             	add    esp,0x10
c00181b4:	85 c0                	test   eax,eax
c00181b6:	74 63                	je     c001821b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00181b8:	50                   	push   eax
c00181b9:	50                   	push   eax
c00181ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181be:	03 06                	add    eax,DWORD PTR [esi]
c00181c0:	50                   	push   eax
c00181c1:	68 57 2d 02 c0       	push   0xc0022d57
c00181c6:	e8 58 70 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00181cb:	58                   	pop    eax
c00181cc:	5a                   	pop    edx
c00181cd:	68 71 2d 02 c0       	push   0xc0022d71
c00181d2:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181d9:	53                   	push   ebx
c00181da:	e8 92 85 fe ff       	call   c0000771 <strcpy>
c00181df:	59                   	pop    ecx
c00181e0:	58                   	pop    eax
c00181e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181e5:	03 06                	add    eax,DWORD PTR [esi]
c00181e7:	50                   	push   eax
c00181e8:	53                   	push   ebx
c00181e9:	e8 3a 86 fe ff       	call   c0000828 <strcat>
c00181ee:	58                   	pop    eax
c00181ef:	5a                   	pop    edx
c00181f0:	68 07 2e 02 c0       	push   0xc0022e07
c00181f5:	53                   	push   ebx
c00181f6:	e8 2d 86 fe ff       	call   c0000828 <strcat>
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018203:	0f 84 4b 01 00 00    	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018209:	83 ec 0c             	sub    esp,0xc
c001820c:	53                   	push   ebx
c001820d:	e8 40 d8 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018212:	83 c4 10             	add    esp,0x10
c0018215:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018219:	eb 0b                	jmp    c0018226 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001821b:	b8 9c f3 01 c0       	mov    eax,0xc001f39c
c0018220:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018224:	b3 01                	mov    bl,0x1
c0018226:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001822b:	0f 85 80 00 00 00    	jne    c00182b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0018231:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018238:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001823c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0018240:	01 ce                	add    esi,ecx
c0018242:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001824a:	0f 94 c2             	sete   dl
c001824d:	8b 06                	mov    eax,DWORD PTR [esi]
c001824f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018257:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001825c:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0018260:	84 db                	test   bl,bl
c0018262:	74 31                	je     c0018295 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018264:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018268:	01 c3                	add    ebx,eax
c001826a:	84 d2                	test   dl,dl
c001826c:	75 0a                	jne    c0018278 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001826e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018272:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018276:	76 32                	jbe    c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018278:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001827d:	0f 84 d1 00 00 00    	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018283:	83 ec 0c             	sub    esp,0xc
c0018286:	68 88 2d 02 c0       	push   0xc0022d88
c001828b:	e8 c2 d7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018290:	83 c4 10             	add    esp,0x10
c0018293:	eb 15                	jmp    c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018295:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018298:	84 d2                	test   dl,dl
c001829a:	75 0e                	jne    c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001829c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182a0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182a4:	77 04                	ja     c00182aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00182a6:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00182aa:	89 1e                	mov    DWORD PTR [esi],ebx
c00182ac:	e9 df 00 00 00       	jmp    c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00182b1:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00182b6:	75 6e                	jne    c0018326 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00182b8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182bf:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182c3:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182c7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182cf:	74 17                	je     c00182e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182d1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182d9:	74 0d                	je     c00182e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182db:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182df:	83 e8 04             	sub    eax,0x4
c00182e2:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182e6:	76 17                	jbe    c00182ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182e8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182ed:	74 65                	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182ef:	83 ec 0c             	sub    esp,0xc
c00182f2:	68 a4 2d 02 c0       	push   0xc0022da4
c00182f7:	e8 56 d7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	8b 16                	mov    edx,DWORD PTR [esi]
c0018301:	84 db                	test   bl,bl
c0018303:	74 13                	je     c0018318 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0018305:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018309:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0018310:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018314:	01 d0                	add    eax,edx
c0018316:	eb 06                	jmp    c001831e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018318:	89 d0                	mov    eax,edx
c001831a:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001831e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018322:	89 06                	mov    DWORD PTR [esi],eax
c0018324:	eb 6a                	jmp    c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018326:	50                   	push   eax
c0018327:	50                   	push   eax
c0018328:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001832d:	50                   	push   eax
c001832e:	68 c0 2d 02 c0       	push   0xc0022dc0
c0018333:	e8 eb 6e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0018338:	83 c4 10             	add    esp,0x10
c001833b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018340:	74 12                	je     c0018354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018342:	83 ec 0c             	sub    esp,0xc
c0018345:	68 cb 2d 02 c0       	push   0xc0022dcb
c001834a:	e8 03 d7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	eb 3c                	jmp    c0018390 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018354:	83 ec 0c             	sub    esp,0xc
c0018357:	57                   	push   edi
c0018358:	e8 bf 74 ff ff       	call   c000f81c <File::close()>
c001835d:	8b 07                	mov    eax,DWORD PTR [edi]
c001835f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018362:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018365:	59                   	pop    ecx
c0018366:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001836a:	e8 92 3c ff ff       	call   c000c001 <free>
c001836f:	5b                   	pop    ebx
c0018370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018374:	e8 88 3c ff ff       	call   c000c001 <free>
c0018379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001837c:	e8 80 3c ff ff       	call   c000c001 <free>
c0018381:	5e                   	pop    esi
c0018382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018386:	e8 76 3c ff ff       	call   c000c001 <free>
c001838b:	83 c4 10             	add    esp,0x10
c001838e:	eb 21                	jmp    c00183b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0018390:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018394:	e9 2c fd ff ff       	jmp    c00180c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018399:	83 ec 0c             	sub    esp,0xc
c001839c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00183a0:	e8 5c 3c ff ff       	call   c000c001 <free>
c00183a5:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00183a9:	83 c4 10             	add    esp,0x10
c00183ac:	e9 a2 fc ff ff       	jmp    c0018053 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00183b1:	31 c0                	xor    eax,eax
c00183b3:	eb 32                	jmp    c00183e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00183b5:	83 ec 0c             	sub    esp,0xc
c00183b8:	57                   	push   edi
c00183b9:	e8 5e 74 ff ff       	call   c000f81c <File::close()>
c00183be:	8b 07                	mov    eax,DWORD PTR [edi]
c00183c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183c6:	58                   	pop    eax
c00183c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183cb:	e8 31 3c ff ff       	call   c000c001 <free>
c00183d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183d3:	e8 29 3c ff ff       	call   c000c001 <free>
c00183d8:	5a                   	pop    edx
c00183d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183dd:	e8 1f 3c ff ff       	call   c000c001 <free>
c00183e2:	83 c4 10             	add    esp,0x10
c00183e5:	b0 01                	mov    al,0x1
c00183e7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183ed:	5b                   	pop    ebx
c00183ee:	5e                   	pop    esi
c00183ef:	5f                   	pop    edi
c00183f0:	5d                   	pop    ebp
c00183f1:	c3                   	ret    

c00183f2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183f2:	56                   	push   esi
c00183f3:	31 d2                	xor    edx,edx
c00183f5:	53                   	push   ebx
c00183f6:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c00183fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018400:	39 d3                	cmp    ebx,edx
c0018402:	7e 1b                	jle    c001841f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0018404:	8b 04 95 20 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda9e0]
c001840b:	39 c8                	cmp    eax,ecx
c001840d:	77 0d                	ja     c001841c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001840f:	8b 34 95 20 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdabe0]
c0018416:	01 c6                	add    esi,eax
c0018418:	39 ce                	cmp    esi,ecx
c001841a:	77 05                	ja     c0018421 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001841c:	42                   	inc    edx
c001841d:	eb e1                	jmp    c0018400 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001841f:	31 c0                	xor    eax,eax
c0018421:	5b                   	pop    ebx
c0018422:	5e                   	pop    esi
c0018423:	c3                   	ret    

c0018424 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018424:	53                   	push   ebx
c0018425:	31 c0                	xor    eax,eax
c0018427:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001842b:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c0018431:	39 c3                	cmp    ebx,eax
c0018433:	7e 22                	jle    c0018457 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018435:	8b 14 85 20 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda9e0]
c001843c:	39 ca                	cmp    edx,ecx
c001843e:	77 14                	ja     c0018454 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018440:	03 14 85 20 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdabe0]
c0018447:	39 ca                	cmp    edx,ecx
c0018449:	76 09                	jbe    c0018454 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001844b:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0018452:	eb 05                	jmp    c0018459 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018454:	40                   	inc    eax
c0018455:	eb da                	jmp    c0018431 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018457:	31 c0                	xor    eax,eax
c0018459:	5b                   	pop    ebx
c001845a:	c3                   	ret    

c001845b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001845b:	53                   	push   ebx
c001845c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018460:	53                   	push   ebx
c0018461:	e8 8c ff ff ff       	call   c00183f2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018466:	5a                   	pop    edx
c0018467:	31 d2                	xor    edx,edx
c0018469:	85 c0                	test   eax,eax
c001846b:	74 04                	je     c0018471 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001846d:	89 da                	mov    edx,ebx
c001846f:	29 c2                	sub    edx,eax
c0018471:	89 d0                	mov    eax,edx
c0018473:	5b                   	pop    ebx
c0018474:	c3                   	ret    

c0018475 <Thr::loadDLL(char const*, bool)>:
c0018475:	55                   	push   ebp
c0018476:	57                   	push   edi
c0018477:	56                   	push   esi
c0018478:	53                   	push   ebx
c0018479:	81 ec 34 01 00 00    	sub    esp,0x134
c001847f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018486:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001848d:	56                   	push   esi
c001848e:	68 e3 2d 02 c0       	push   0xc0022de3
c0018493:	e8 8b 6d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0018498:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001849f:	e8 4a 6c ff ff       	call   c000f0ee <operator new(unsigned long)>
c00184a4:	83 c4 0c             	add    esp,0xc
c00184a7:	89 c3                	mov    ebx,eax
c00184a9:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c00184af:	56                   	push   esi
c00184b0:	50                   	push   eax
c00184b1:	e8 a4 72 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c00184b6:	83 c4 0c             	add    esp,0xc
c00184b9:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00184bd:	50                   	push   eax
c00184be:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184c2:	50                   	push   eax
c00184c3:	53                   	push   ebx
c00184c4:	e8 a1 75 ff ff       	call   c000fa6a <File::stat(unsigned long long*, bool*)>
c00184c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184d9:	75 0a                	jne    c00184e5 <Thr::loadDLL(char const*, bool)+0x70>
c00184db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184df:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184e3:	75 3c                	jne    c0018521 <Thr::loadDLL(char const*, bool)+0xac>
c00184e5:	89 e8                	mov    eax,ebp
c00184e7:	84 c0                	test   al,al
c00184e9:	0f 84 3d 01 00 00    	je     c001862c <Thr::loadDLL(char const*, bool)+0x1b7>
c00184ef:	50                   	push   eax
c00184f0:	50                   	push   eax
c00184f1:	68 f4 2d 02 c0       	push   0xc0022df4
c00184f6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184fa:	53                   	push   ebx
c00184fb:	e8 71 82 fe ff       	call   c0000771 <strcpy>
c0018500:	58                   	pop    eax
c0018501:	5a                   	pop    edx
c0018502:	56                   	push   esi
c0018503:	53                   	push   ebx
c0018504:	e8 1f 83 fe ff       	call   c0000828 <strcat>
c0018509:	59                   	pop    ecx
c001850a:	5f                   	pop    edi
c001850b:	68 07 2e 02 c0       	push   0xc0022e07
c0018510:	53                   	push   ebx
c0018511:	e8 12 83 fe ff       	call   c0000828 <strcat>
c0018516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018519:	e8 34 d5 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001851e:	83 c4 10             	add    esp,0x10
c0018521:	e8 6f 5e ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c0018526:	51                   	push   ecx
c0018527:	6a 03                	push   0x3
c0018529:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001852d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018531:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018537:	83 d3 00             	adc    ebx,0x0
c001853a:	89 ca                	mov    edx,ecx
c001853c:	89 d1                	mov    ecx,edx
c001853e:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018542:	51                   	push   ecx
c0018543:	50                   	push   eax
c0018544:	e8 8d 64 ff ff       	call   c000e9d6 <VAS::allocatePages(int, int)>
c0018549:	89 34 24             	mov    DWORD PTR [esp],esi
c001854c:	89 c3                	mov    ebx,eax
c001854e:	e8 9c 81 fe ff       	call   c00006ef <strlen>
c0018553:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c0018559:	40                   	inc    eax
c001855a:	89 04 24             	mov    DWORD PTR [esp],eax
c001855d:	e8 8f 3a ff ff       	call   c000bff1 <malloc>
c0018562:	89 04 bd 20 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda7e0],eax
c0018569:	5f                   	pop    edi
c001856a:	58                   	pop    eax
c001856b:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c0018570:	56                   	push   esi
c0018571:	ff 34 85 20 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda7e0]
c0018578:	e8 f4 81 fe ff       	call   c0000771 <strcpy>
c001857d:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c0018582:	8d 50 01             	lea    edx,[eax+0x1]
c0018585:	89 1c 85 20 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9e0],ebx
c001858c:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c0018592:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018596:	83 c4 0c             	add    esp,0xc
c0018599:	89 14 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],edx
c00185a0:	6a 01                	push   0x1
c00185a2:	53                   	push   ebx
c00185a3:	56                   	push   esi
c00185a4:	e8 ab f6 ff ff       	call   c0017c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00185a9:	83 c4 10             	add    esp,0x10
c00185ac:	89 c7                	mov    edi,eax
c00185ae:	fe c8                	dec    al
c00185b0:	74 16                	je     c00185c8 <Thr::loadDLL(char const*, bool)+0x153>
c00185b2:	89 e8                	mov    eax,ebp
c00185b4:	84 c0                	test   al,al
c00185b6:	74 10                	je     c00185c8 <Thr::loadDLL(char const*, bool)+0x153>
c00185b8:	83 ec 0c             	sub    esp,0xc
c00185bb:	68 09 2e 02 c0       	push   0xc0022e09
c00185c0:	e8 8d d4 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c00185c5:	83 c4 10             	add    esp,0x10
c00185c8:	31 f6                	xor    esi,esi
c00185ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185d2:	05 ff 0f 00 00       	add    eax,0xfff
c00185d7:	83 d2 00             	adc    edx,0x0
c00185da:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185de:	c1 ea 0c             	shr    edx,0xc
c00185e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185e9:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185ed:	ba 00 00 00 00       	mov    edx,0x0
c00185f2:	89 d0                	mov    eax,edx
c00185f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185f8:	73 2c                	jae    c0018626 <Thr::loadDLL(char const*, bool)+0x1b1>
c00185fa:	e8 96 5d ff ff       	call   c000e395 <Virt::getAKernelVAS()>
c00185ff:	89 f5                	mov    ebp,esi
c0018601:	c1 e5 0c             	shl    ebp,0xc
c0018604:	52                   	push   edx
c0018605:	52                   	push   edx
c0018606:	01 dd                	add    ebp,ebx
c0018608:	55                   	push   ebp
c0018609:	50                   	push   eax
c001860a:	e8 27 5f ff ff       	call   c000e536 <VAS::getPageTableEntry(unsigned long)>
c001860f:	83 c4 10             	add    esp,0x10
c0018612:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018615:	75 0c                	jne    c0018623 <Thr::loadDLL(char const*, bool)+0x1ae>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	55                   	push   ebp
c001861b:	e8 1a 3f ff ff       	call   c000c53a <Phys::freePage(unsigned long)>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	46                   	inc    esi
c0018624:	eb a4                	jmp    c00185ca <Thr::loadDLL(char const*, bool)+0x155>
c0018626:	89 f8                	mov    eax,edi
c0018628:	84 c0                	test   al,al
c001862a:	75 02                	jne    c001862e <Thr::loadDLL(char const*, bool)+0x1b9>
c001862c:	31 db                	xor    ebx,ebx
c001862e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018634:	89 d8                	mov    eax,ebx
c0018636:	5b                   	pop    ebx
c0018637:	5e                   	pop    esi
c0018638:	5f                   	pop    edi
c0018639:	5d                   	pop    ebp
c001863a:	c3                   	ret    

c001863b <Thr::executeDLL(unsigned long, void*)>:
c001863b:	56                   	push   esi
c001863c:	53                   	push   ebx
c001863d:	51                   	push   ecx
c001863e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018646:	85 db                	test   ebx,ebx
c0018648:	75 10                	jne    c001865a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001864a:	83 ec 0c             	sub    esp,0xc
c001864d:	68 28 2e 02 c0       	push   0xc0022e28
c0018652:	e8 fb d3 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018657:	83 c4 10             	add    esp,0x10
c001865a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001865e:	5a                   	pop    edx
c001865f:	89 d8                	mov    eax,ebx
c0018661:	5b                   	pop    ebx
c0018662:	5e                   	pop    esi
c0018663:	ff e0                	jmp    eax
c0018665:	90                   	nop

c0018666 <changeTSS>:
c0018666:	83 ec 0c             	sub    esp,0xc
c0018669:	e8 78 c2 ff ff       	call   c00148e6 <thisCPU()>
c001866e:	52                   	push   edx
c001866f:	05 7c 11 00 00       	add    eax,0x117c
c0018674:	52                   	push   edx
c0018675:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001867b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001867e:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018683:	c1 e1 15             	shl    ecx,0x15
c0018686:	29 ca                	sub    edx,ecx
c0018688:	52                   	push   edx
c0018689:	50                   	push   eax
c001868a:	e8 53 54 ff ff       	call   c000dae2 <TSS::setESP(unsigned long)>
c001868f:	83 c4 1c             	add    esp,0x1c
c0018692:	c3                   	ret    
c0018693:	90                   	nop

c0018694 <Process::addArgs(char**)>:
c0018694:	57                   	push   edi
c0018695:	56                   	push   esi
c0018696:	53                   	push   ebx
c0018697:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001869b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001869f:	85 ff                	test   edi,edi
c00186a1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00186ab:	74 45                	je     c00186f2 <Process::addArgs(char**)+0x5e>
c00186ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00186af:	85 c0                	test   eax,eax
c00186b1:	74 3f                	je     c00186f2 <Process::addArgs(char**)+0x5e>
c00186b3:	31 db                	xor    ebx,ebx
c00186b5:	83 ec 0c             	sub    esp,0xc
c00186b8:	50                   	push   eax
c00186b9:	e8 31 80 fe ff       	call   c00006ef <strlen>
c00186be:	40                   	inc    eax
c00186bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00186c2:	e8 2a 39 ff ff       	call   c000bff1 <malloc>
c00186c7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186ce:	5a                   	pop    edx
c00186cf:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186d2:	59                   	pop    ecx
c00186d3:	43                   	inc    ebx
c00186d4:	52                   	push   edx
c00186d5:	50                   	push   eax
c00186d6:	e8 96 80 fe ff       	call   c0000771 <strcpy>
c00186db:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186e1:	83 c4 10             	add    esp,0x10
c00186e4:	41                   	inc    ecx
c00186e5:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186eb:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186ee:	85 c0                	test   eax,eax
c00186f0:	75 c3                	jne    c00186b5 <Process::addArgs(char**)+0x21>
c00186f2:	5b                   	pop    ebx
c00186f3:	5e                   	pop    esi
c00186f4:	5f                   	pop    edi
c00186f5:	c3                   	ret    

c00186f6 <Process::Process(char const*, Process*, char**)>:
c00186f6:	56                   	push   esi
c00186f7:	53                   	push   ebx
c00186f8:	83 ec 14             	sub    esp,0x14
c00186fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ff:	05 0c 02 00 00       	add    eax,0x20c
c0018704:	bb 07 00 00 00       	mov    ebx,0x7
c0018709:	89 c6                	mov    esi,eax
c001870b:	85 db                	test   ebx,ebx
c001870d:	78 12                	js     c0018721 <Process::Process(char const*, Process*, char**)+0x2b>
c001870f:	83 ec 0c             	sub    esp,0xc
c0018712:	56                   	push   esi
c0018713:	e8 52 77 00 00       	call   c001fe6a <ThreadControlBlock::ThreadControlBlock()>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	83 c6 63             	add    esi,0x63
c001871e:	4b                   	dec    ebx
c001871f:	eb ea                	jmp    c001870b <Process::Process(char const*, Process*, char**)+0x15>
c0018721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018725:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001872c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018730:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018739:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c001873e:	8d 50 01             	lea    edx,[eax+0x1]
c0018741:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c0018747:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001874b:	89 02                	mov    DWORD PTR [edx],eax
c001874d:	83 ec 0c             	sub    esp,0xc
c0018750:	6a 10                	push   0x10
c0018752:	e8 97 69 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	89 c3                	mov    ebx,eax
c001875c:	83 ec 08             	sub    esp,0x8
c001875f:	6a 00                	push   0x0
c0018761:	53                   	push   ebx
c0018762:	e8 1b 66 ff ff       	call   c000ed82 <VAS::VAS(bool)>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876e:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018778:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018786:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001878a:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018794:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001879a:	85 c0                	test   eax,eax
c001879c:	74 42                	je     c00187e0 <Process::Process(char const*, Process*, char**)+0xea>
c001879e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187a8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00187ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187b2:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187bc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187cc:	05 0c 01 00 00       	add    eax,0x10c
c00187d1:	83 ec 08             	sub    esp,0x8
c00187d4:	52                   	push   edx
c00187d5:	50                   	push   eax
c00187d6:	e8 96 7f fe ff       	call   c0000771 <strcpy>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	eb 5c                	jmp    c001883c <Process::Process(char const*, Process*, char**)+0x146>
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	68 60 12 00 00       	push   0x1260
c00187e8:	e8 01 69 ff ff       	call   c000f0ee <operator new(unsigned long)>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	89 c3                	mov    ebx,eax
c00187f2:	83 ec 08             	sub    esp,0x8
c00187f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f9:	53                   	push   ebx
c00187fa:	e8 e1 4f ff ff       	call   c000d7e0 <VgaText::VgaText(char const*)>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018806:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001880c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018810:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018816:	83 ec 0c             	sub    esp,0xc
c0018819:	50                   	push   eax
c001881a:	e8 c0 43 ff ff       	call   c000cbdf <addToTerminalCycle(VgaText*)>
c001881f:	83 c4 10             	add    esp,0x10
c0018822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018826:	05 0c 01 00 00       	add    eax,0x10c
c001882b:	83 ec 08             	sub    esp,0x8
c001882e:	68 52 2e 02 c0       	push   0xc0022e52
c0018833:	50                   	push   eax
c0018834:	e8 38 7f fe ff       	call   c0000771 <strcpy>
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018840:	83 c0 0c             	add    eax,0xc
c0018843:	83 ec 08             	sub    esp,0x8
c0018846:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884a:	50                   	push   eax
c001884b:	e8 21 7f fe ff       	call   c0000771 <strcpy>
c0018850:	83 c4 10             	add    esp,0x10
c0018853:	83 ec 08             	sub    esp,0x8
c0018856:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001885a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885e:	e8 31 fe ff ff       	call   c0018694 <Process::addArgs(char**)>
c0018863:	83 c4 10             	add    esp,0x10
c0018866:	83 ec 08             	sub    esp,0x8
c0018869:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001886d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018871:	e8 a5 ee ff ff       	call   c001771b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018876:	83 c4 10             	add    esp,0x10
c0018879:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001887d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018881:	83 f0 01             	xor    eax,0x1
c0018884:	88 c2                	mov    dl,al
c0018886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001888a:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0018890:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018894:	25 ff 00 00 00       	and    eax,0xff
c0018899:	83 ec 08             	sub    esp,0x8
c001889c:	50                   	push   eax
c001889d:	68 50 2f 02 c0       	push   0xc0022f50
c00188a2:	e8 7c 69 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	90                   	nop
c00188ab:	83 c4 14             	add    esp,0x14
c00188ae:	5b                   	pop    ebx
c00188af:	5e                   	pop    esi
c00188b0:	c3                   	ret    
c00188b1:	90                   	nop

c00188b2 <Process::Process(bool, char const*, Process*, char**)>:
c00188b2:	56                   	push   esi
c00188b3:	53                   	push   ebx
c00188b4:	83 ec 14             	sub    esp,0x14
c00188b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188c3:	05 0c 02 00 00       	add    eax,0x20c
c00188c8:	bb 07 00 00 00       	mov    ebx,0x7
c00188cd:	89 c6                	mov    esi,eax
c00188cf:	85 db                	test   ebx,ebx
c00188d1:	78 12                	js     c00188e5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188d3:	83 ec 0c             	sub    esp,0xc
c00188d6:	56                   	push   esi
c00188d7:	e8 8e 75 00 00       	call   c001fe6a <ThreadControlBlock::ThreadControlBlock()>
c00188dc:	83 c4 10             	add    esp,0x10
c00188df:	83 c6 63             	add    esi,0x63
c00188e2:	4b                   	dec    ebx
c00188e3:	eb ea                	jmp    c00188cf <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e9:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188f4:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188fd:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c0018902:	8d 50 01             	lea    edx,[eax+0x1]
c0018905:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c001890b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001890f:	89 02                	mov    DWORD PTR [edx],eax
c0018911:	83 ec 0c             	sub    esp,0xc
c0018914:	6a 10                	push   0x10
c0018916:	e8 d3 67 ff ff       	call   c000f0ee <operator new(unsigned long)>
c001891b:	83 c4 10             	add    esp,0x10
c001891e:	89 c3                	mov    ebx,eax
c0018920:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018924:	25 ff 00 00 00       	and    eax,0xff
c0018929:	83 ec 08             	sub    esp,0x8
c001892c:	50                   	push   eax
c001892d:	53                   	push   ebx
c001892e:	e8 4f 64 ff ff       	call   c000ed82 <VAS::VAS(bool)>
c0018933:	83 c4 10             	add    esp,0x10
c0018936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018944:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001894e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018952:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018956:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001895c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018960:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018966:	85 c0                	test   eax,eax
c0018968:	74 42                	je     c00189ac <Process::Process(bool, char const*, Process*, char**)+0xfa>
c001896a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001896e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018974:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001897a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001897e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018988:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001898e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018998:	05 0c 01 00 00       	add    eax,0x10c
c001899d:	83 ec 08             	sub    esp,0x8
c00189a0:	52                   	push   edx
c00189a1:	50                   	push   eax
c00189a2:	e8 ca 7d fe ff       	call   c0000771 <strcpy>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	eb 5c                	jmp    c0018a08 <Process::Process(bool, char const*, Process*, char**)+0x156>
c00189ac:	83 ec 0c             	sub    esp,0xc
c00189af:	68 60 12 00 00       	push   0x1260
c00189b4:	e8 35 67 ff ff       	call   c000f0ee <operator new(unsigned long)>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	89 c3                	mov    ebx,eax
c00189be:	83 ec 08             	sub    esp,0x8
c00189c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189c5:	53                   	push   ebx
c00189c6:	e8 15 4e ff ff       	call   c000d7e0 <VgaText::VgaText(char const*)>
c00189cb:	83 c4 10             	add    esp,0x10
c00189ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189d2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189dc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189e2:	83 ec 0c             	sub    esp,0xc
c00189e5:	50                   	push   eax
c00189e6:	e8 f4 41 ff ff       	call   c000cbdf <addToTerminalCycle(VgaText*)>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189f2:	05 0c 01 00 00       	add    eax,0x10c
c00189f7:	83 ec 08             	sub    esp,0x8
c00189fa:	68 52 2e 02 c0       	push   0xc0022e52
c00189ff:	50                   	push   eax
c0018a00:	e8 6c 7d fe ff       	call   c0000771 <strcpy>
c0018a05:	83 c4 10             	add    esp,0x10
c0018a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a0c:	83 c0 0c             	add    eax,0xc
c0018a0f:	83 ec 08             	sub    esp,0x8
c0018a12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a16:	50                   	push   eax
c0018a17:	e8 55 7d fe ff       	call   c0000771 <strcpy>
c0018a1c:	83 c4 10             	add    esp,0x10
c0018a1f:	83 ec 08             	sub    esp,0x8
c0018a22:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a2a:	e8 65 fc ff ff       	call   c0018694 <Process::addArgs(char**)>
c0018a2f:	83 c4 10             	add    esp,0x10
c0018a32:	90                   	nop
c0018a33:	83 c4 14             	add    esp,0x14
c0018a36:	5b                   	pop    ebx
c0018a37:	5e                   	pop    esi
c0018a38:	c3                   	ret    

c0018a39 <disableIRQs()>:
c0018a39:	fa                   	cli    
c0018a3a:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a3f:	40                   	inc    eax
c0018a40:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a45:	c3                   	ret    

c0018a46 <getIRQNestingLevel()>:
c0018a46:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a4b:	c3                   	ret    

c0018a4c <enableIRQs()>:
c0018a4c:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a51:	48                   	dec    eax
c0018a52:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a57:	75 01                	jne    c0018a5a <enableIRQs()+0xe>
c0018a59:	fb                   	sti    
c0018a5a:	c3                   	ret    

c0018a5b <lockScheduler()>:
c0018a5b:	eb dc                	jmp    c0018a39 <disableIRQs()>

c0018a5d <unlockScheduler()>:
c0018a5d:	eb ed                	jmp    c0018a4c <enableIRQs()>

c0018a5f <userModeEntryPoint(void*)>:
c0018a5f:	83 ec 0c             	sub    esp,0xc
c0018a62:	e8 f6 ff ff ff       	call   c0018a5d <unlockScheduler()>
c0018a67:	fb                   	sti    
c0018a68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a70:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a7a:	83 c4 0c             	add    esp,0xc
c0018a7d:	e9 29 78 fe ff       	jmp    c00002ab <goToUsermode>

c0018a82 <lockStuff()>:
c0018a82:	e8 b2 ff ff ff       	call   c0018a39 <disableIRQs()>
c0018a87:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018a8c:	40                   	inc    eax
c0018a8d:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018a92:	c3                   	ret    

c0018a93 <taskStartupFunction>:
c0018a93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a98:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a9b:	c3                   	ret    

c0018a9c <updateTimeUsed()>:
c0018a9c:	57                   	push   edi
c0018a9d:	56                   	push   esi
c0018a9e:	53                   	push   ebx
c0018a9f:	e8 42 be ff ff       	call   c00148e6 <thisCPU()>
c0018aa4:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018aab:	74 49                	je     c0018af6 <updateTimeUsed()+0x5a>
c0018aad:	0f 31                	rdtsc  
c0018aaf:	89 c1                	mov    ecx,eax
c0018ab1:	a3 08 5c 02 c0       	mov    ds:0xc0025c08,eax
c0018ab6:	2b 0d f8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bf8
c0018abc:	a3 f8 5b 02 c0       	mov    ds:0xc0025bf8,eax
c0018ac1:	89 0d 00 5c 02 c0    	mov    DWORD PTR ds:0xc0025c00,ecx
c0018ac7:	89 d3                	mov    ebx,edx
c0018ac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ace:	89 15 0c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c0c,edx
c0018ad4:	1b 1d fc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bfc
c0018ada:	89 15 fc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bfc,edx
c0018ae0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018ae3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ae6:	01 f1                	add    ecx,esi
c0018ae8:	89 1d 04 5c 02 c0    	mov    DWORD PTR ds:0xc0025c04,ebx
c0018aee:	11 fb                	adc    ebx,edi
c0018af0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018af3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018af6:	5b                   	pop    ebx
c0018af7:	5e                   	pop    esi
c0018af8:	5f                   	pop    edi
c0018af9:	c3                   	ret    

c0018afa <switchToThread(ThreadControlBlock*)>:
c0018afa:	53                   	push   ebx
c0018afb:	83 ec 08             	sub    esp,0x8
c0018afe:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018b03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b07:	85 c0                	test   eax,eax
c0018b09:	75 36                	jne    c0018b41 <switchToThread(ThreadControlBlock*)+0x47>
c0018b0b:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018b0e:	80 fa ff             	cmp    dl,0xff
c0018b11:	74 2a                	je     c0018b3d <switchToThread(ThreadControlBlock*)+0x43>
c0018b13:	81 e2 ff 00 00 00    	and    edx,0xff
c0018b19:	b8 84 03 00 00       	mov    eax,0x384
c0018b1e:	29 d0                	sub    eax,edx
c0018b20:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b23:	c1 e0 10             	shl    eax,0x10
c0018b26:	01 c8                	add    eax,ecx
c0018b28:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b2b:	e8 6c ff ff ff       	call   c0018a9c <updateTimeUsed()>
c0018b30:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b34:	83 c4 08             	add    esp,0x8
c0018b37:	5b                   	pop    ebx
c0018b38:	e9 ac 77 fe ff       	jmp    c00002e9 <switchToThreadASM>
c0018b3d:	31 c0                	xor    eax,eax
c0018b3f:	eb e7                	jmp    c0018b28 <switchToThread(ThreadControlBlock*)+0x2e>
c0018b41:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018b4b:	83 c4 08             	add    esp,0x8
c0018b4e:	5b                   	pop    ebx
c0018b4f:	c3                   	ret    

c0018b50 <Semaphore::Semaphore(int)>:
c0018b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b58:	89 10                	mov    DWORD PTR [eax],edx
c0018b5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b5e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b74:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b7b:	90                   	nop
c0018b7c:	c3                   	ret    
c0018b7d:	90                   	nop

c0018b7e <Mutex::Mutex()>:
c0018b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b82:	6a 01                	push   0x1
c0018b84:	50                   	push   eax
c0018b85:	e8 c6 ff ff ff       	call   c0018b50 <Semaphore::Semaphore(int)>
c0018b8a:	83 c4 08             	add    esp,0x8
c0018b8d:	90                   	nop
c0018b8e:	c3                   	ret    
c0018b8f:	90                   	nop

c0018b90 <Process::createThread(void (*)(void*), void*, int)>:
c0018b90:	55                   	push   ebp
c0018b91:	31 c9                	xor    ecx,ecx
c0018b93:	57                   	push   edi
c0018b94:	56                   	push   esi
c0018b95:	53                   	push   ebx
c0018b96:	83 ec 1c             	sub    esp,0x1c
c0018b99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b9d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018ba4:	89 f2                	mov    edx,esi
c0018ba6:	31 c0                	xor    eax,eax
c0018ba8:	66 89 d0             	mov    ax,dx
c0018bab:	83 e2 01             	and    edx,0x1
c0018bae:	74 14                	je     c0018bc4 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018bb0:	d1 f8                	sar    eax,1
c0018bb2:	41                   	inc    ecx
c0018bb3:	89 c2                	mov    edx,eax
c0018bb5:	83 f9 10             	cmp    ecx,0x10
c0018bb8:	75 ec                	jne    c0018ba6 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018bba:	83 c4 1c             	add    esp,0x1c
c0018bbd:	31 c0                	xor    eax,eax
c0018bbf:	5b                   	pop    ebx
c0018bc0:	5e                   	pop    esi
c0018bc1:	5f                   	pop    edi
c0018bc2:	5d                   	pop    ebp
c0018bc3:	c3                   	ret    
c0018bc4:	b8 01 00 00 00       	mov    eax,0x1
c0018bc9:	d3 e0                	shl    eax,cl
c0018bcb:	09 c6                	or     esi,eax
c0018bcd:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bd3:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bda:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bdd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018be0:	89 f0                	mov    eax,esi
c0018be2:	c1 e0 05             	shl    eax,0x5
c0018be5:	01 c6                	add    esi,eax
c0018be7:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bea:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bf0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018bf4:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018bfa:	89 ca                	mov    edx,ecx
c0018bfc:	f7 da                	neg    edx
c0018bfe:	c1 e2 15             	shl    edx,0x15
c0018c01:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018c07:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018c0d:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018c13:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018c19:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c1d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c27:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c31:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c37:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c41:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c4b:	52                   	push   edx
c0018c4c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c53:	52                   	push   edx
c0018c54:	50                   	push   eax
c0018c55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c59:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c5e:	e8 5f 70 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c6a:	83 c4 1c             	add    esp,0x1c
c0018c6d:	5b                   	pop    ebx
c0018c6e:	5e                   	pop    esi
c0018c6f:	5f                   	pop    edi
c0018c70:	5d                   	pop    ebp
c0018c71:	c3                   	ret    

c0018c72 <Process::createUserThread()>:
c0018c72:	83 ec 0c             	sub    esp,0xc
c0018c75:	68 80 00 00 00       	push   0x80
c0018c7a:	6a 00                	push   0x0
c0018c7c:	68 5f 8a 01 c0       	push   0xc0018a5f
c0018c81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c85:	50                   	push   eax
c0018c86:	e8 05 ff ff ff       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c0018c8b:	83 c4 1c             	add    esp,0x1c
c0018c8e:	c3                   	ret    

c0018c8f <setupMultitasking(void (*)())>:
c0018c8f:	56                   	push   esi
c0018c90:	53                   	push   ebx
c0018c91:	51                   	push   ecx
c0018c92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c96:	eb 10                	jmp    c0018ca8 <setupMultitasking(void (*)())+0x19>
c0018c98:	83 ec 0c             	sub    esp,0xc
c0018c9b:	68 e8 5b 02 c0       	push   0xc0025be8
c0018ca0:	e8 6f 6f 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018ca5:	83 c4 10             	add    esp,0x10
c0018ca8:	83 ec 0c             	sub    esp,0xc
c0018cab:	68 e8 5b 02 c0       	push   0xc0025be8
c0018cb0:	e8 43 6f 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018cb5:	83 c4 10             	add    esp,0x10
c0018cb8:	84 c0                	test   al,al
c0018cba:	74 dc                	je     c0018c98 <setupMultitasking(void (*)())+0x9>
c0018cbc:	83 ec 0c             	sub    esp,0xc
c0018cbf:	68 3b 07 00 00       	push   0x73b
c0018cc4:	e8 25 64 ff ff       	call   c000f0ee <operator new(unsigned long)>
c0018cc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cd0:	6a 00                	push   0x0
c0018cd2:	68 56 2e 02 c0       	push   0xc0022e56
c0018cd7:	89 c3                	mov    ebx,eax
c0018cd9:	6a 01                	push   0x1
c0018cdb:	50                   	push   eax
c0018cdc:	e8 d1 fb ff ff       	call   c00188b2 <Process::Process(bool, char const*, Process*, char**)>
c0018ce1:	83 c4 18             	add    esp,0x18
c0018ce4:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018cea:	89 1d f4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bf4,ebx
c0018cf0:	50                   	push   eax
c0018cf1:	68 78 2f 02 c0       	push   0xc0022f78
c0018cf6:	e8 28 65 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0018cfb:	5a                   	pop    edx
c0018cfc:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018d02:	51                   	push   ecx
c0018d03:	e8 4b 46 ff ff       	call   c000d353 <setActiveTerminal(VgaText*)>
c0018d08:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018d0f:	83 c8 01             	or     eax,0x1
c0018d12:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018d19:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d1f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d22:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d2c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d32:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d3c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d46:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d4c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d52:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d5c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d62:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d6c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d76:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d7c:	58                   	pop    eax
c0018d7d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d83:	5a                   	pop    edx
c0018d84:	68 52 2e 02 c0       	push   0xc0022e52
c0018d89:	50                   	push   eax
c0018d8a:	e8 e2 79 fe ff       	call   c0000771 <strcpy>
c0018d8f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d96:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d9a:	83 c4 14             	add    esp,0x14
c0018d9d:	5b                   	pop    ebx
c0018d9e:	5e                   	pop    esi
c0018d9f:	e9 37 75 fe ff       	jmp    c00002db <switchToThreadASMFirstTime>

c0018da4 <schedule()>:
c0018da4:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018da9:	85 c0                	test   eax,eax
c0018dab:	74 0b                	je     c0018db8 <schedule()+0x14>
c0018dad:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018db7:	c3                   	ret    
c0018db8:	53                   	push   ebx
c0018db9:	83 ec 14             	sub    esp,0x14
c0018dbc:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dc1:	e8 32 6e 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	84 c0                	test   al,al
c0018dcb:	75 38                	jne    c0018e05 <schedule()+0x61>
c0018dcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dd5:	4a                   	dec    edx
c0018dd6:	74 32                	je     c0018e0a <schedule()+0x66>
c0018dd8:	83 ec 0c             	sub    esp,0xc
c0018ddb:	68 e8 5b 02 c0       	push   0xc0025be8
c0018de0:	e8 0b 6e 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018de5:	89 c3                	mov    ebx,eax
c0018de7:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0018dee:	e8 21 6e 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018df3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018dfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018dfd:	e8 f8 fc ff ff       	call   c0018afa <switchToThread(ThreadControlBlock*)>
c0018e02:	83 c4 10             	add    esp,0x10
c0018e05:	83 c4 08             	add    esp,0x8
c0018e08:	5b                   	pop    ebx
c0018e09:	c3                   	ret    
c0018e0a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018e11:	51                   	push   ecx
c0018e12:	51                   	push   ecx
c0018e13:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e19:	53                   	push   ebx
c0018e1a:	68 e8 5b 02 c0       	push   0xc0025be8
c0018e1f:	e8 9e 6e 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e24:	83 c4 10             	add    esp,0x10
c0018e27:	eb af                	jmp    c0018dd8 <schedule()+0x34>

c0018e29 <unlockStuff()>:
c0018e29:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018e2e:	48                   	dec    eax
c0018e2f:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018e34:	75 09                	jne    c0018e3f <unlockStuff()+0x16>
c0018e36:	a1 c4 5b 02 c0       	mov    eax,ds:0xc0025bc4
c0018e3b:	85 c0                	test   eax,eax
c0018e3d:	75 05                	jne    c0018e44 <unlockStuff()+0x1b>
c0018e3f:	e9 08 fc ff ff       	jmp    c0018a4c <enableIRQs()>
c0018e44:	83 ec 0c             	sub    esp,0xc
c0018e47:	c7 05 c4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x0
c0018e51:	e8 4e ff ff ff       	call   c0018da4 <schedule()>
c0018e56:	83 c4 0c             	add    esp,0xc
c0018e59:	e9 ee fb ff ff       	jmp    c0018a4c <enableIRQs()>

c0018e5e <Semaphore::tryAcquire()>:
c0018e5e:	83 ec 0c             	sub    esp,0xc
c0018e61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e65:	e8 18 fc ff ff       	call   c0018a82 <lockStuff()>
c0018e6a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e6d:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e6f:	7c 0b                	jl     c0018e7c <Semaphore::tryAcquire()+0x1e>
c0018e71:	e8 b3 ff ff ff       	call   c0018e29 <unlockStuff()>
c0018e76:	31 c0                	xor    eax,eax
c0018e78:	83 c4 0c             	add    esp,0xc
c0018e7b:	c3                   	ret    
c0018e7c:	40                   	inc    eax
c0018e7d:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e80:	e8 a4 ff ff ff       	call   c0018e29 <unlockStuff()>
c0018e85:	b0 01                	mov    al,0x1
c0018e87:	83 c4 0c             	add    esp,0xc
c0018e8a:	c3                   	ret    
c0018e8b:	90                   	nop

c0018e8c <Semaphore::assertLocked(char const*)>:
c0018e8c:	83 ec 0c             	sub    esp,0xc
c0018e8f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e93:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e97:	e8 e6 fb ff ff       	call   c0018a82 <lockStuff()>
c0018e9c:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e9e:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018ea1:	7c 05                	jl     c0018ea8 <Semaphore::assertLocked(char const*)+0x1c>
c0018ea3:	83 c4 0c             	add    esp,0xc
c0018ea6:	eb 81                	jmp    c0018e29 <unlockStuff()>
c0018ea8:	83 ec 0c             	sub    esp,0xc
c0018eab:	51                   	push   ecx
c0018eac:	e8 a1 cb ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0018eb1:	83 c4 10             	add    esp,0x10
c0018eb4:	83 c4 0c             	add    esp,0xc
c0018eb7:	e9 6d ff ff ff       	jmp    c0018e29 <unlockStuff()>

c0018ebc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018ebc:	83 ec 0c             	sub    esp,0xc
c0018ebf:	e8 82 fb ff ff       	call   c0018a46 <getIRQNestingLevel()>
c0018ec4:	52                   	push   edx
c0018ec5:	52                   	push   edx
c0018ec6:	50                   	push   eax
c0018ec7:	68 ac 2f 02 c0       	push   0xc0022fac
c0018ecc:	e8 52 63 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0018ed1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018eda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018edd:	e8 c2 fe ff ff       	call   c0018da4 <schedule()>
c0018ee2:	e8 76 fb ff ff       	call   c0018a5d <unlockScheduler()>
c0018ee7:	e8 5a fb ff ff       	call   c0018a46 <getIRQNestingLevel()>
c0018eec:	59                   	pop    ecx
c0018eed:	5a                   	pop    edx
c0018eee:	50                   	push   eax
c0018eef:	68 e0 2f 02 c0       	push   0xc0022fe0
c0018ef4:	e8 2a 63 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0018ef9:	83 c4 1c             	add    esp,0x1c
c0018efc:	c3                   	ret    

c0018efd <blockTask(TaskState)>:
c0018efd:	83 ec 0c             	sub    esp,0xc
c0018f00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f04:	e8 52 fb ff ff       	call   c0018a5b <lockScheduler()>
c0018f09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f0e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018f11:	e8 8e fe ff ff       	call   c0018da4 <schedule()>
c0018f16:	83 c4 0c             	add    esp,0xc
c0018f19:	e9 3f fb ff ff       	jmp    c0018a5d <unlockScheduler()>

c0018f1e <waitTask(int, int*, int)>:
c0018f1e:	83 ec 18             	sub    esp,0x18
c0018f21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f2a:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f36:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f39:	6a 07                	push   0x7
c0018f3b:	e8 bd ff ff ff       	call   c0018efd <blockTask(TaskState)>
c0018f40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f45:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f48:	83 c4 10             	add    esp,0x10
c0018f4b:	85 d2                	test   edx,edx
c0018f4d:	74 0a                	je     c0018f59 <waitTask(int, int*, int)+0x3b>
c0018f4f:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f52:	89 02                	mov    DWORD PTR [edx],eax
c0018f54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f59:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f5c:	83 c4 0c             	add    esp,0xc
c0018f5f:	c3                   	ret    

c0018f60 <nanoSleepUntil(unsigned long long)>:
c0018f60:	53                   	push   ebx
c0018f61:	83 ec 08             	sub    esp,0x8
c0018f64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f6c:	3b 0d 10 4e 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024e10
c0018f72:	89 d8                	mov    eax,ebx
c0018f74:	1b 05 14 4e 02 c0    	sbb    eax,DWORD PTR ds:0xc0024e14
c0018f7a:	73 05                	jae    c0018f81 <nanoSleepUntil(unsigned long long)+0x21>
c0018f7c:	83 c4 08             	add    esp,0x8
c0018f7f:	5b                   	pop    ebx
c0018f80:	c3                   	ret    
c0018f81:	e8 fc fa ff ff       	call   c0018a82 <lockStuff()>
c0018f86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f8b:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f8e:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f91:	51                   	push   ecx
c0018f92:	51                   	push   ecx
c0018f93:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f99:	53                   	push   ebx
c0018f9a:	68 dc 5b 02 c0       	push   0xc0025bdc
c0018f9f:	e8 1e 6d 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018fa4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018fab:	e8 4d ff ff ff       	call   c0018efd <blockTask(TaskState)>
c0018fb0:	83 c4 18             	add    esp,0x18
c0018fb3:	5b                   	pop    ebx
c0018fb4:	e9 70 fe ff ff       	jmp    c0018e29 <unlockStuff()>

c0018fb9 <nanoSleep(unsigned long long)>:
c0018fb9:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c0018fbe:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c0018fc4:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fc8:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fcc:	eb 92                	jmp    c0018f60 <nanoSleepUntil(unsigned long long)>

c0018fce <sleep(unsigned long long)>:
c0018fce:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fd3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fdb:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fdf:	01 ca                	add    edx,ecx
c0018fe1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fe5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fe9:	eb ce                	jmp    c0018fb9 <nanoSleep(unsigned long long)>
c0018feb:	90                   	nop

c0018fec <Semaphore::acquire()>:
c0018fec:	83 ec 0c             	sub    esp,0xc
c0018fef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ff3:	e8 8a fa ff ff       	call   c0018a82 <lockStuff()>
c0018ff8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018ffb:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018ffd:	7d 0c                	jge    c001900b <Semaphore::acquire()+0x1f>
c0018fff:	40                   	inc    eax
c0019000:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0019003:	83 c4 0c             	add    esp,0xc
c0019006:	e9 1e fe ff ff       	jmp    c0018e29 <unlockStuff()>
c001900b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019010:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019017:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001901a:	85 c0                	test   eax,eax
c001901c:	74 29                	je     c0019047 <Semaphore::acquire()+0x5b>
c001901e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0019021:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019027:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001902a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001902f:	83 ec 0c             	sub    esp,0xc
c0019032:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0019035:	6a 05                	push   0x5
c0019037:	e8 c1 fe ff ff       	call   c0018efd <blockTask(TaskState)>
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	83 c4 0c             	add    esp,0xc
c0019042:	e9 e2 fd ff ff       	jmp    c0018e29 <unlockStuff()>
c0019047:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001904c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001904f:	eb d9                	jmp    c001902a <Semaphore::acquire()+0x3e>

c0019051 <taskReturned>:
c0019051:	83 ec 18             	sub    esp,0x18
c0019054:	68 14 30 02 c0       	push   0xc0023014
c0019059:	e8 f4 c9 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001905e:	83 c4 10             	add    esp,0x10
c0019061:	83 ec 0c             	sub    esp,0xc
c0019064:	6a 02                	push   0x2
c0019066:	e8 92 fe ff ff       	call   c0018efd <blockTask(TaskState)>
c001906b:	e8 eb f9 ff ff       	call   c0018a5b <lockScheduler()>
c0019070:	e8 2f fd ff ff       	call   c0018da4 <schedule()>
c0019075:	e8 e3 f9 ff ff       	call   c0018a5d <unlockScheduler()>
c001907a:	83 c4 10             	add    esp,0x10
c001907d:	eb e2                	jmp    c0019061 <taskReturned+0x10>

c001907f <unblockTask(ThreadControlBlock*)>:
c001907f:	53                   	push   ebx
c0019080:	83 ec 08             	sub    esp,0x8
c0019083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019087:	e8 cf f9 ff ff       	call   c0018a5b <lockScheduler()>
c001908c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001908f:	85 c0                	test   eax,eax
c0019091:	74 5b                	je     c00190ee <unblockTask(ThreadControlBlock*)+0x6f>
c0019093:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019096:	48                   	dec    eax
c0019097:	74 30                	je     c00190c9 <unblockTask(ThreadControlBlock*)+0x4a>
c0019099:	83 ec 0c             	sub    esp,0xc
c001909c:	68 e8 5b 02 c0       	push   0xc0025be8
c00190a1:	e8 4a 6b 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00190a6:	83 c4 10             	add    esp,0x10
c00190a9:	85 c0                	test   eax,eax
c00190ab:	75 16                	jne    c00190c3 <unblockTask(ThreadControlBlock*)+0x44>
c00190ad:	eb 64                	jmp    c0019113 <unblockTask(ThreadControlBlock*)+0x94>
c00190af:	52                   	push   edx
c00190b0:	52                   	push   edx
c00190b1:	50                   	push   eax
c00190b2:	68 e8 5b 02 c0       	push   0xc0025be8
c00190b7:	e8 44 6e 00 00       	call   c001ff00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190bc:	83 c4 10             	add    esp,0x10
c00190bf:	85 c0                	test   eax,eax
c00190c1:	74 50                	je     c0019113 <unblockTask(ThreadControlBlock*)+0x94>
c00190c3:	39 c3                	cmp    ebx,eax
c00190c5:	75 e8                	jne    c00190af <unblockTask(ThreadControlBlock*)+0x30>
c00190c7:	eb 1c                	jmp    c00190e5 <unblockTask(ThreadControlBlock*)+0x66>
c00190c9:	83 ec 0c             	sub    esp,0xc
c00190cc:	68 04 31 02 c0       	push   0xc0023104
c00190d1:	e8 4d 61 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00190d6:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190dd:	e8 41 61 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	83 c4 08             	add    esp,0x8
c00190e8:	5b                   	pop    ebx
c00190e9:	e9 6f f9 ff ff       	jmp    c0018a5d <unlockScheduler()>
c00190ee:	83 ec 0c             	sub    esp,0xc
c00190f1:	68 48 30 02 c0       	push   0xc0023048
c00190f6:	e8 28 61 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00190fb:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c0019102:	e8 1c 61 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	83 c4 08             	add    esp,0x8
c001910d:	5b                   	pop    ebx
c001910e:	e9 4a f9 ff ff       	jmp    c0018a5d <unlockScheduler()>
c0019113:	50                   	push   eax
c0019114:	50                   	push   eax
c0019115:	53                   	push   ebx
c0019116:	68 e8 5b 02 c0       	push   0xc0025be8
c001911b:	e8 a2 6b 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	83 c4 08             	add    esp,0x8
c0019126:	5b                   	pop    ebx
c0019127:	e9 31 f9 ff ff       	jmp    c0018a5d <unlockScheduler()>

c001912c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001912c:	55                   	push   ebp
c001912d:	57                   	push   edi
c001912e:	56                   	push   esi
c001912f:	53                   	push   ebx
c0019130:	83 ec 1c             	sub    esp,0x1c
c0019133:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019137:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001913a:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0019140:	85 ed                	test   ebp,ebp
c0019142:	7e 21                	jle    c0019165 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0019144:	31 f6                	xor    esi,esi
c0019146:	83 ec 0c             	sub    esp,0xc
c0019149:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0019150:	46                   	inc    esi
c0019151:	57                   	push   edi
c0019152:	e8 aa 2e ff ff       	call   c000c001 <free>
c0019157:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001915a:	83 c4 10             	add    esp,0x10
c001915d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019163:	7f e1                	jg     c0019146 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019165:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001916f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019174:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019177:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001917a:	d3 c0                	rol    eax,cl
c001917c:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019183:	21 c1                	and    ecx,eax
c0019185:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c001918c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001918f:	89 f7                	mov    edi,esi
c0019191:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019199:	0f 85 4f 01 00 00    	jne    c00192ee <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c001919f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191a5:	85 c0                	test   eax,eax
c00191a7:	0f 84 aa 00 00 00    	je     c0019257 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191ad:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00191b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00191b4:	31 c9                	xor    ecx,ecx
c00191b6:	eb 10                	jmp    c00191c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00191b8:	41                   	inc    ecx
c00191b9:	83 f9 10             	cmp    ecx,0x10
c00191bc:	0f 84 95 00 00 00    	je     c0019257 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191c2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191c8:	31 d2                	xor    edx,edx
c00191ca:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191d1:	d3 fa                	sar    edx,cl
c00191d3:	83 e2 01             	and    edx,0x1
c00191d6:	74 e0                	je     c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191d8:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191db:	89 d5                	mov    ebp,edx
c00191dd:	c1 e5 05             	shl    ebp,0x5
c00191e0:	01 ea                	add    edx,ebp
c00191e2:	01 d0                	add    eax,edx
c00191e4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191ea:	83 fd 07             	cmp    ebp,0x7
c00191ed:	75 c9                	jne    c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191ef:	05 40 02 00 00       	add    eax,0x240
c00191f4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191f7:	83 fd ff             	cmp    ebp,0xffffffff
c00191fa:	0f 8c 07 01 00 00    	jl     c0019307 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c0019200:	0f 84 b4 01 00 00    	je     c00193ba <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c0019206:	85 ed                	test   ebp,ebp
c0019208:	0f 84 9b 01 00 00    	je     c00193a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c001920e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0019210:	75 a6                	jne    c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019212:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019218:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001921c:	01 d0                	add    eax,edx
c001921e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019222:	83 ec 0c             	sub    esp,0xc
c0019225:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001922b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001922e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019234:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001923b:	50                   	push   eax
c001923c:	e8 3e fe ff ff       	call   c001907f <unblockTask(ThreadControlBlock*)>
c0019241:	83 c4 10             	add    esp,0x10
c0019244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019248:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001924b:	41                   	inc    ecx
c001924c:	89 f7                	mov    edi,esi
c001924e:	83 f9 10             	cmp    ecx,0x10
c0019251:	0f 85 6b ff ff ff    	jne    c00191c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019257:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001925d:	85 c0                	test   eax,eax
c001925f:	74 5d                	je     c00192be <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019261:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019267:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001926d:	74 4f                	je     c00192be <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001926f:	83 ec 0c             	sub    esp,0xc
c0019272:	68 e8 5b 02 c0       	push   0xc0025be8
c0019277:	e8 74 69 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001927c:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019283:	89 c7                	mov    edi,eax
c0019285:	e8 6e 69 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	84 c0                	test   al,al
c001928f:	0f 84 e2 00 00 00    	je     c0019377 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019295:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019298:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001929e:	85 d2                	test   edx,edx
c00192a0:	74 0f                	je     c00192b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c00192a2:	83 ec 0c             	sub    esp,0xc
c00192a5:	8b 02                	mov    eax,DWORD PTR [edx]
c00192a7:	52                   	push   edx
c00192a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192ab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00192bb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192be:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192c4:	85 db                	test   ebx,ebx
c00192c6:	74 16                	je     c00192de <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192c8:	83 ec 0c             	sub    esp,0xc
c00192cb:	53                   	push   ebx
c00192cc:	e8 97 54 ff ff       	call   c000e768 <VAS::~VAS()>
c00192d1:	5a                   	pop    edx
c00192d2:	59                   	pop    ecx
c00192d3:	6a 10                	push   0x10
c00192d5:	53                   	push   ebx
c00192d6:	e8 22 5e ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	83 ec 0c             	sub    esp,0xc
c00192e1:	68 5d 2e 02 c0       	push   0xc0022e5d
c00192e6:	e8 38 5f ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	50                   	push   eax
c00192ef:	50                   	push   eax
c00192f0:	68 3b 07 00 00       	push   0x73b
c00192f5:	68 6b 2e 02 c0       	push   0xc0022e6b
c00192fa:	e8 24 5f ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00192ff:	83 c4 2c             	add    esp,0x2c
c0019302:	5b                   	pop    ebx
c0019303:	5e                   	pop    esi
c0019304:	5f                   	pop    edi
c0019305:	5d                   	pop    ebp
c0019306:	c3                   	ret    
c0019307:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001930b:	83 ec 0c             	sub    esp,0xc
c001930e:	68 48 31 02 c0       	push   0xc0023148
c0019313:	e8 3a c7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0019318:	83 c4 10             	add    esp,0x10
c001931b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001931e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019322:	89 f7                	mov    edi,esi
c0019324:	e9 8f fe ff ff       	jmp    c00191b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019329:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001932f:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019335:	75 1c                	jne    c0019353 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019337:	83 ec 0c             	sub    esp,0xc
c001933a:	68 b0 31 02 c0       	push   0xc00231b0
c001933f:	e8 df 5e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0019344:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001934b:	e8 ad fb ff ff       	call   c0018efd <blockTask(TaskState)>
c0019350:	83 c4 10             	add    esp,0x10
c0019353:	55                   	push   ebp
c0019354:	55                   	push   ebp
c0019355:	56                   	push   esi
c0019356:	68 e8 5b 02 c0       	push   0xc0025be8
c001935b:	e8 62 69 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019360:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019367:	e8 84 68 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001936c:	83 c4 10             	add    esp,0x10
c001936f:	39 f8                	cmp    eax,edi
c0019371:	0f 84 1e ff ff ff    	je     c0019295 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019377:	83 ec 0c             	sub    esp,0xc
c001937a:	68 e8 5b 02 c0       	push   0xc0025be8
c001937f:	e8 6c 68 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019384:	89 c6                	mov    esi,eax
c0019386:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c001938d:	e8 82 68 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019392:	83 c4 10             	add    esp,0x10
c0019395:	39 f3                	cmp    ebx,esi
c0019397:	74 ba                	je     c0019353 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019399:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001939c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001939f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00193a5:	75 ac                	jne    c0019353 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00193a7:	eb 80                	jmp    c0019329 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c00193a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193ad:	83 ec 0c             	sub    esp,0xc
c00193b0:	68 7c 31 02 c0       	push   0xc002317c
c00193b5:	e9 59 ff ff ff       	jmp    c0019313 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00193ba:	8b 36                	mov    esi,DWORD PTR [esi]
c00193bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193c0:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193c6:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193cc:	01 d7                	add    edi,edx
c00193ce:	89 f8                	mov    eax,edi
c00193d0:	e9 49 fe ff ff       	jmp    c001921e <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193d5 <cleanerTaskFunction(void*)>:
c00193d5:	53                   	push   ebx
c00193d6:	83 ec 08             	sub    esp,0x8
c00193d9:	e8 7f f6 ff ff       	call   c0018a5d <unlockScheduler()>
c00193de:	e8 78 f6 ff ff       	call   c0018a5b <lockScheduler()>
c00193e3:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c00193ea:	0f 85 8e 00 00 00    	jne    c001947e <cleanerTaskFunction(void*)+0xa9>
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	6a 02                	push   0x2
c00193f5:	e8 c2 fa ff ff       	call   c0018ebc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193fa:	83 c4 10             	add    esp,0x10
c00193fd:	c6 05 ac 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025bac,0x0
c0019404:	e8 79 f6 ff ff       	call   c0018a82 <lockStuff()>
c0019409:	e8 4d f6 ff ff       	call   c0018a5b <lockScheduler()>
c001940e:	83 ec 0c             	sub    esp,0xc
c0019411:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019416:	e8 dd 67 00 00       	call   c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	84 c0                	test   al,al
c0019420:	75 40                	jne    c0019462 <cleanerTaskFunction(void*)+0x8d>
c0019422:	83 ec 0c             	sub    esp,0xc
c0019425:	68 d0 5b 02 c0       	push   0xc0025bd0
c001942a:	e8 c1 67 00 00       	call   c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001942f:	89 c3                	mov    ebx,eax
c0019431:	c7 04 24 d0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bd0
c0019438:	e8 d7 67 00 00       	call   c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001943d:	c7 04 24 81 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e81
c0019444:	e8 da 5d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0019449:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001944c:	e8 db fc ff ff       	call   c001912c <cleanupTerminatedTask(ThreadControlBlock*)>
c0019451:	c7 04 24 9a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9a
c0019458:	e8 c6 5d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001945d:	83 c4 10             	add    esp,0x10
c0019460:	eb ac                	jmp    c001940e <cleanerTaskFunction(void*)+0x39>
c0019462:	e8 f6 f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019467:	e8 bd f9 ff ff       	call   c0018e29 <unlockStuff()>
c001946c:	e8 ea f5 ff ff       	call   c0018a5b <lockScheduler()>
c0019471:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c0019478:	0f 84 72 ff ff ff    	je     c00193f0 <cleanerTaskFunction(void*)+0x1b>
c001947e:	e8 da f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019483:	e9 75 ff ff ff       	jmp    c00193fd <cleanerTaskFunction(void*)+0x28>

c0019488 <terminateTask(int)>:
c0019488:	83 ec 14             	sub    esp,0x14
c001948b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019490:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019493:	83 c0 0c             	add    eax,0xc
c0019496:	50                   	push   eax
c0019497:	68 d8 31 02 c0       	push   0xc00231d8
c001949c:	e8 82 5d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00194a1:	e8 dc f5 ff ff       	call   c0018a82 <lockStuff()>
c00194a6:	e8 b0 f5 ff ff       	call   c0018a5b <lockScheduler()>
c00194ab:	c7 04 24 ad 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ead
c00194b2:	e8 6c 5d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00194b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194c0:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194c8:	59                   	pop    ecx
c00194c9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194cc:	5a                   	pop    edx
c00194cd:	50                   	push   eax
c00194ce:	68 d0 5b 02 c0       	push   0xc0025bd0
c00194d3:	e8 ea 67 00 00       	call   c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194dd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194e4:	c7 04 24 c7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec7
c00194eb:	e8 33 5d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c00194f0:	8b 0d a8 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba8
c00194f6:	83 c4 10             	add    esp,0x10
c00194f9:	85 c9                	test   ecx,ecx
c00194fb:	74 5b                	je     c0019558 <terminateTask(int)+0xd0>
c00194fd:	83 ec 0c             	sub    esp,0xc
c0019500:	68 e1 2e 02 c0       	push   0xc0022ee1
c0019505:	e8 19 5d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001950a:	58                   	pop    eax
c001950b:	8b 15 a8 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba8
c0019511:	52                   	push   edx
c0019512:	c6 05 ac 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025bac,0x1
c0019519:	e8 61 fb ff ff       	call   c001907f <unblockTask(ThreadControlBlock*)>
c001951e:	c7 04 24 fb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022efb
c0019525:	e8 f9 5c ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001952a:	83 c4 10             	add    esp,0x10
c001952d:	e8 2b f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019532:	e8 f2 f8 ff ff       	call   c0018e29 <unlockStuff()>
c0019537:	83 ec 0c             	sub    esp,0xc
c001953a:	68 33 2f 02 c0       	push   0xc0022f33
c001953f:	e8 df 5c ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	e8 0f f5 ff ff       	call   c0018a5b <lockScheduler()>
c001954c:	e8 53 f8 ff ff       	call   c0018da4 <schedule()>
c0019551:	e8 07 f5 ff ff       	call   c0018a5d <unlockScheduler()>
c0019556:	eb ef                	jmp    c0019547 <terminateTask(int)+0xbf>
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	68 15 2f 02 c0       	push   0xc0022f15
c0019560:	e8 be 5c ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	eb c3                	jmp    c001952d <terminateTask(int)+0xa5>

c001956a <Thr::terminateFromIRQ(int)>:
c001956a:	83 ec 18             	sub    esp,0x18
c001956d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019571:	50                   	push   eax
c0019572:	e8 11 ff ff ff       	call   c0019488 <terminateTask(int)>
c0019577:	90                   	nop

c0019578 <Semaphore::release()>:
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001957f:	e8 fe f4 ff ff       	call   c0018a82 <lockStuff()>
c0019584:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019587:	85 c0                	test   eax,eax
c0019589:	74 1a                	je     c00195a5 <Semaphore::release()+0x2d>
c001958b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001958e:	83 ec 0c             	sub    esp,0xc
c0019591:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019594:	50                   	push   eax
c0019595:	e8 e5 fa ff ff       	call   c001907f <unblockTask(ThreadControlBlock*)>
c001959a:	83 c4 10             	add    esp,0x10
c001959d:	83 c4 0c             	add    esp,0xc
c00195a0:	e9 84 f8 ff ff       	jmp    c0018e29 <unlockStuff()>
c00195a5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00195a8:	48                   	dec    eax
c00195a9:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c00195ac:	83 c4 0c             	add    esp,0xc
c00195af:	e9 75 f8 ff ff       	jmp    c0018e29 <unlockStuff()>

c00195b4 <__static_initialization_and_destruction_0(int, int)>:
c00195b4:	83 ec 0c             	sub    esp,0xc
c00195b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00195bc:	0f 85 88 00 00 00    	jne    c001964a <__static_initialization_and_destruction_0(int, int)+0x96>
c00195c2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195ca:	75 7e                	jne    c001964a <__static_initialization_and_destruction_0(int, int)+0x96>
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	68 e8 5b 02 c0       	push   0xc0025be8
c00195d4:	e8 cf 68 00 00       	call   c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195d9:	83 c4 10             	add    esp,0x10
c00195dc:	83 ec 04             	sub    esp,0x4
c00195df:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195e4:	68 e8 5b 02 c0       	push   0xc0025be8
c00195e9:	68 68 fe 01 c0       	push   0xc001fe68
c00195ee:	e8 86 5a ff ff       	call   c000f079 <__cxa_atexit>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	68 dc 5b 02 c0       	push   0xc0025bdc
c00195fe:	e8 a5 68 00 00       	call   c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019603:	83 c4 10             	add    esp,0x10
c0019606:	83 ec 04             	sub    esp,0x4
c0019609:	68 bc 3b 02 c0       	push   0xc0023bbc
c001960e:	68 dc 5b 02 c0       	push   0xc0025bdc
c0019613:	68 68 fe 01 c0       	push   0xc001fe68
c0019618:	e8 5c 5a ff ff       	call   c000f079 <__cxa_atexit>
c001961d:	83 c4 10             	add    esp,0x10
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019628:	e8 7b 68 00 00       	call   c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001962d:	83 c4 10             	add    esp,0x10
c0019630:	83 ec 04             	sub    esp,0x4
c0019633:	68 bc 3b 02 c0       	push   0xc0023bbc
c0019638:	68 d0 5b 02 c0       	push   0xc0025bd0
c001963d:	68 68 fe 01 c0       	push   0xc001fe68
c0019642:	e8 32 5a ff ff       	call   c000f079 <__cxa_atexit>
c0019647:	83 c4 10             	add    esp,0x10
c001964a:	90                   	nop
c001964b:	83 c4 0c             	add    esp,0xc
c001964e:	c3                   	ret    

c001964f <_GLOBAL__sub_I_kernelProcess>:
c001964f:	83 ec 0c             	sub    esp,0xc
c0019652:	83 ec 08             	sub    esp,0x8
c0019655:	68 ff ff 00 00       	push   0xffff
c001965a:	6a 01                	push   0x1
c001965c:	e8 53 ff ff ff       	call   c00195b4 <__static_initialization_and_destruction_0(int, int)>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	83 c4 0c             	add    esp,0xc
c0019667:	c3                   	ret    

c0019668 <Vm::vm8086EntryPoint(void*)>:
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	e8 ed f3 ff ff       	call   c0018a5d <unlockScheduler()>
c0019670:	fb                   	sti    
c0019671:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019676:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001967a:	52                   	push   edx
c001967b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001967f:	52                   	push   edx
c0019680:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019684:	52                   	push   edx
c0019685:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019689:	50                   	push   eax
c001968a:	e8 eb 6b fe ff       	call   c000027a <goToVM86>
c001968f:	83 c4 1c             	add    esp,0x1c
c0019692:	c3                   	ret    

c0019693 <Vm::inbv(unsigned short)>:
c0019693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019697:	ec                   	in     al,dx
c0019698:	c3                   	ret    

c0019699 <Vm::outbv(unsigned short, unsigned char)>:
c0019699:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001969d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a1:	ee                   	out    dx,al
c00196a2:	c3                   	ret    

c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>:
c00196a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00196a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00196ad:	c1 e0 04             	shl    eax,0x4
c00196b0:	01 d0                	add    eax,edx
c00196b2:	c3                   	ret    

c00196b3 <Vm::getSegment(unsigned int)>:
c00196b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196b7:	c1 e8 10             	shr    eax,0x10
c00196ba:	c3                   	ret    

c00196bb <Vm::getOffset(unsigned int)>:
c00196bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196bf:	c3                   	ret    

c00196c0 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196c0:	55                   	push   ebp
c00196c1:	57                   	push   edi
c00196c2:	56                   	push   esi
c00196c3:	53                   	push   ebx
c00196c4:	83 ec 2c             	sub    esp,0x2c
c00196c7:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196cb:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196d3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196d7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196db:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196df:	e8 77 f3 ff ff       	call   c0018a5b <lockScheduler()>
c00196e4:	68 80 00 00 00       	push   0x80
c00196e9:	6a 00                	push   0x0
c00196eb:	68 68 96 01 c0       	push   0xc0019668
c00196f0:	55                   	push   ebp
c00196f1:	e8 9a f4 ff ff       	call   c0018b90 <Process::createThread(void (*)(void*), void*, int)>
c00196f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196fa:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196fe:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0019702:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0019706:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001970a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001970e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019715:	e8 d4 59 ff ff       	call   c000f0ee <operator new(unsigned long)>
c001971a:	83 c4 0c             	add    esp,0xc
c001971d:	55                   	push   ebp
c001971e:	89 c3                	mov    ebx,eax
c0019720:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019724:	50                   	push   eax
c0019725:	e8 30 60 ff ff       	call   c000f75a <File::File(char const*, Process*)>
c001972a:	83 c4 0c             	add    esp,0xc
c001972d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019731:	50                   	push   eax
c0019732:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019736:	50                   	push   eax
c0019737:	53                   	push   ebx
c0019738:	e8 2d 63 ff ff       	call   c000fa6a <File::stat(unsigned long long*, bool*)>
c001973d:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0019741:	83 c4 10             	add    esp,0x10
c0019744:	84 d2                	test   dl,dl
c0019746:	74 1c                	je     c0019764 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019748:	83 ec 0c             	sub    esp,0xc
c001974b:	68 f7 31 02 c0       	push   0xc00231f7
c0019750:	e8 fd c2 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0019755:	e8 03 f3 ff ff       	call   c0018a5d <unlockScheduler()>
c001975a:	83 c4 10             	add    esp,0x10
c001975d:	31 d2                	xor    edx,edx
c001975f:	e9 81 00 00 00       	jmp    c00197e5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019764:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019768:	51                   	push   ecx
c0019769:	51                   	push   ecx
c001976a:	6a 01                	push   0x1
c001976c:	53                   	push   ebx
c001976d:	e8 4c 60 ff ff       	call   c000f7be <File::open(FileOpenMode)>
c0019772:	83 c4 10             	add    esp,0x10
c0019775:	85 c0                	test   eax,eax
c0019777:	74 1b                	je     c0019794 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019779:	83 ec 0c             	sub    esp,0xc
c001977c:	68 10 32 02 c0       	push   0xc0023210
c0019781:	e8 cc c2 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c0019786:	e8 d2 f2 ff ff       	call   c0018a5d <unlockScheduler()>
c001978b:	83 c4 10             	add    esp,0x10
c001978e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019792:	eb 51                	jmp    c00197e5 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019794:	83 ec 0c             	sub    esp,0xc
c0019797:	0f b7 ff             	movzx  edi,di
c001979a:	6a 07                	push   0x7
c001979c:	68 00 01 00 00       	push   0x100
c00197a1:	6a 00                	push   0x0
c00197a3:	6a 00                	push   0x0
c00197a5:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00197ab:	e8 16 54 ff ff       	call   c000ebc6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00197b0:	83 c4 18             	add    esp,0x18
c00197b3:	0f b7 f6             	movzx  esi,si
c00197b6:	57                   	push   edi
c00197b7:	56                   	push   esi
c00197b8:	e8 e6 fe ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c00197bd:	5a                   	pop    edx
c00197be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197c0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197c4:	51                   	push   ecx
c00197c5:	50                   	push   eax
c00197c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197ce:	53                   	push   ebx
c00197cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197d2:	83 c4 14             	add    esp,0x14
c00197d5:	53                   	push   ebx
c00197d6:	e8 41 60 ff ff       	call   c000f81c <File::close()>
c00197db:	e8 7d f2 ff ff       	call   c0018a5d <unlockScheduler()>
c00197e0:	83 c4 10             	add    esp,0x10
c00197e3:	b2 01                	mov    dl,0x1
c00197e5:	83 c4 2c             	add    esp,0x2c
c00197e8:	88 d0                	mov    al,dl
c00197ea:	5b                   	pop    ebx
c00197eb:	5e                   	pop    esi
c00197ec:	5f                   	pop    edi
c00197ed:	5d                   	pop    ebp
c00197ee:	c3                   	ret    

c00197ef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197ef:	57                   	push   edi
c00197f0:	56                   	push   esi
c00197f1:	53                   	push   ebx
c00197f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197fa:	83 e8 06             	sub    eax,0x6
c00197fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019801:	0f b7 c0             	movzx  eax,ax
c0019804:	50                   	push   eax
c0019805:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001980a:	50                   	push   eax
c001980b:	e8 93 fe ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c0019810:	5a                   	pop    edx
c0019811:	5e                   	pop    esi
c0019812:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019815:	8d 56 fa             	lea    edx,[esi-0x6]
c0019818:	81 e2 ff ff 00 00    	and    edx,0xffff
c001981e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019821:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019824:	83 c2 02             	add    edx,0x2
c0019827:	66 89 10             	mov    WORD PTR [eax],dx
c001982a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001982d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019831:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019834:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019838:	89 d6                	mov    esi,edx
c001983a:	66 81 e6 ff fd       	and    si,0xfdff
c001983f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019845:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019849:	74 07                	je     c0019852 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001984b:	89 d6                	mov    esi,edx
c001984d:	66 81 ce 00 02       	or     si,0x200
c0019852:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001985b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001985f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019867:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001986a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019872:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019875:	5b                   	pop    ebx
c0019876:	5e                   	pop    esi
c0019877:	5f                   	pop    edi
c0019878:	c3                   	ret    

c0019879 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019879:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001987e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019883:	c1 e0 04             	shl    eax,0x4
c0019886:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019889:	c3                   	ret    

c001988a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001988a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001988f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019894:	c1 e0 04             	shl    eax,0x4
c0019897:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001989b:	c3                   	ret    

c001989c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001989c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a6:	c1 e0 04             	shl    eax,0x4
c00198a9:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00198ac:	c3                   	ret    

c00198ad <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00198ad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198b2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198b7:	c1 e0 04             	shl    eax,0x4
c00198ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198be:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198c1:	c3                   	ret    

c00198c2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198c2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198c7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198cc:	c1 e0 04             	shl    eax,0x4
c00198cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198d3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198d7:	c3                   	ret    

c00198d8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198dd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198e2:	c1 e0 04             	shl    eax,0x4
c00198e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198e9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198ec:	c3                   	ret    

c00198ed <Vm::faultHandler(regs*)>:
c00198ed:	55                   	push   ebp
c00198ee:	57                   	push   edi
c00198ef:	56                   	push   esi
c00198f0:	53                   	push   ebx
c00198f1:	83 ec 1c             	sub    esp,0x1c
c00198f4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198f8:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198ff:	52                   	push   edx
c0019900:	0f b7 f0             	movzx  esi,ax
c0019903:	0f b7 c0             	movzx  eax,ax
c0019906:	50                   	push   eax
c0019907:	e8 97 fd ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c001990c:	5a                   	pop    edx
c001990d:	89 c7                	mov    edi,eax
c001990f:	59                   	pop    ecx
c0019910:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019913:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019917:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001991a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001991f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019923:	0f b7 c5             	movzx  eax,bp
c0019926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001992a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001992e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019932:	e8 6c fd ff ff       	call   c00196a3 <Vm::realToLinear(unsigned short, unsigned short)>
c0019937:	5a                   	pop    edx
c0019938:	59                   	pop    ecx
c0019939:	b1 06                	mov    cl,0x6
c001993b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019940:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019945:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019948:	80 fa 9d             	cmp    dl,0x9d
c001994b:	0f 84 1d 02 00 00    	je     c0019b6e <Vm::faultHandler(regs*)+0x281>
c0019951:	0f 87 8e 00 00 00    	ja     c00199e5 <Vm::faultHandler(regs*)+0xf8>
c0019957:	80 fa 66             	cmp    dl,0x66
c001995a:	0f 84 89 01 00 00    	je     c0019ae9 <Vm::faultHandler(regs*)+0x1fc>
c0019960:	77 44                	ja     c00199a6 <Vm::faultHandler(regs*)+0xb9>
c0019962:	80 fa 36             	cmp    dl,0x36
c0019965:	0f 84 74 01 00 00    	je     c0019adf <Vm::faultHandler(regs*)+0x1f2>
c001996b:	77 1a                	ja     c0019987 <Vm::faultHandler(regs*)+0x9a>
c001996d:	80 fa 26             	cmp    dl,0x26
c0019970:	0f 84 4b 01 00 00    	je     c0019ac1 <Vm::faultHandler(regs*)+0x1d4>
c0019976:	80 fa 2e             	cmp    dl,0x2e
c0019979:	0f 85 4a 05 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c001997f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019982:	31 c9                	xor    ecx,ecx
c0019984:	47                   	inc    edi
c0019985:	eb be                	jmp    c0019945 <Vm::faultHandler(regs*)+0x58>
c0019987:	80 fa 64             	cmp    dl,0x64
c001998a:	0f 84 3b 01 00 00    	je     c0019acb <Vm::faultHandler(regs*)+0x1de>
c0019990:	0f 87 3f 01 00 00    	ja     c0019ad5 <Vm::faultHandler(regs*)+0x1e8>
c0019996:	80 fa 3e             	cmp    dl,0x3e
c0019999:	0f 85 2a 05 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c001999f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199a2:	b1 01                	mov    cl,0x1
c00199a4:	eb de                	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c00199a6:	80 fa 6d             	cmp    dl,0x6d
c00199a9:	0f 84 bf 02 00 00    	je     c0019c6e <Vm::faultHandler(regs*)+0x381>
c00199af:	77 17                	ja     c00199c8 <Vm::faultHandler(regs*)+0xdb>
c00199b1:	80 fa 67             	cmp    dl,0x67
c00199b4:	0f 84 3c 01 00 00    	je     c0019af6 <Vm::faultHandler(regs*)+0x209>
c00199ba:	80 fa 6c             	cmp    dl,0x6c
c00199bd:	0f 84 5d 02 00 00    	je     c0019c20 <Vm::faultHandler(regs*)+0x333>
c00199c3:	e9 01 05 00 00       	jmp    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c00199c8:	80 fa 6f             	cmp    dl,0x6f
c00199cb:	0f 84 8b 03 00 00    	je     c0019d5c <Vm::faultHandler(regs*)+0x46f>
c00199d1:	0f 82 0f 03 00 00    	jb     c0019ce6 <Vm::faultHandler(regs*)+0x3f9>
c00199d7:	80 fa 9c             	cmp    dl,0x9c
c00199da:	0f 84 23 01 00 00    	je     c0019b03 <Vm::faultHandler(regs*)+0x216>
c00199e0:	e9 e4 04 00 00       	jmp    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c00199e5:	80 fa ec             	cmp    dl,0xec
c00199e8:	0f 84 7f 04 00 00    	je     c0019e6d <Vm::faultHandler(regs*)+0x580>
c00199ee:	77 7b                	ja     c0019a6b <Vm::faultHandler(regs*)+0x17e>
c00199f0:	80 fa e4             	cmp    dl,0xe4
c00199f3:	0f 84 fe 03 00 00    	je     c0019df7 <Vm::faultHandler(regs*)+0x50a>
c00199f9:	77 53                	ja     c0019a4e <Vm::faultHandler(regs*)+0x161>
c00199fb:	80 fa cd             	cmp    dl,0xcd
c00199fe:	0f 84 cd 01 00 00    	je     c0019bd1 <Vm::faultHandler(regs*)+0x2e4>
c0019a04:	80 fa cf             	cmp    dl,0xcf
c0019a07:	0f 85 bc 04 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019a0d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019a10:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019a13:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019a17:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019a1a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a1e:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a24:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a27:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a2b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a31:	66 c1 e8 09          	shr    ax,0x9
c0019a35:	83 e0 01             	and    eax,0x1
c0019a38:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a3b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a3e:	83 c0 06             	add    eax,0x6
c0019a41:	25 ff ff 00 00       	and    eax,0xffff
c0019a46:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a49:	e9 77 04 00 00       	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019a4e:	80 fa e6             	cmp    dl,0xe6
c0019a51:	0f 84 ea 03 00 00    	je     c0019e41 <Vm::faultHandler(regs*)+0x554>
c0019a57:	0f 82 b6 03 00 00    	jb     c0019e13 <Vm::faultHandler(regs*)+0x526>
c0019a5d:	80 fa e7             	cmp    dl,0xe7
c0019a60:	0f 84 f2 03 00 00    	je     c0019e58 <Vm::faultHandler(regs*)+0x56b>
c0019a66:	e9 5e 04 00 00       	jmp    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019a6b:	80 fa ef             	cmp    dl,0xef
c0019a6e:	0f 84 3c 04 00 00    	je     c0019eb0 <Vm::faultHandler(regs*)+0x5c3>
c0019a74:	77 28                	ja     c0019a9e <Vm::faultHandler(regs*)+0x1b1>
c0019a76:	80 fa ed             	cmp    dl,0xed
c0019a79:	0f 84 0a 04 00 00    	je     c0019e89 <Vm::faultHandler(regs*)+0x59c>
c0019a7f:	80 fa ee             	cmp    dl,0xee
c0019a82:	0f 85 41 04 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019a88:	50                   	push   eax
c0019a89:	50                   	push   eax
c0019a8a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a8e:	50                   	push   eax
c0019a8f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a93:	50                   	push   eax
c0019a94:	e8 00 fc ff ff       	call   c0019699 <Vm::outbv(unsigned short, unsigned char)>
c0019a99:	e9 0a 04 00 00       	jmp    c0019ea8 <Vm::faultHandler(regs*)+0x5bb>
c0019a9e:	80 fa fa             	cmp    dl,0xfa
c0019aa1:	0f 84 5d 01 00 00    	je     c0019c04 <Vm::faultHandler(regs*)+0x317>
c0019aa7:	80 fa fb             	cmp    dl,0xfb
c0019aaa:	0f 84 62 01 00 00    	je     c0019c12 <Vm::faultHandler(regs*)+0x325>
c0019ab0:	80 fa f3             	cmp    dl,0xf3
c0019ab3:	0f 85 10 04 00 00    	jne    c0019ec9 <Vm::faultHandler(regs*)+0x5dc>
c0019ab9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019abc:	e9 c3 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019ac1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac4:	b1 02                	mov    cl,0x2
c0019ac6:	e9 b9 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019acb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ace:	b1 03                	mov    cl,0x3
c0019ad0:	e9 af fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019ad5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ad8:	b1 04                	mov    cl,0x4
c0019ada:	e9 a5 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019adf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ae2:	b1 05                	mov    cl,0x5
c0019ae4:	e9 9b fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019ae9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aec:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019af1:	e9 8e fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019af6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019af9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019afe:	e9 81 fe ff ff       	jmp    c0019984 <Vm::faultHandler(regs*)+0x97>
c0019b03:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019b06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019b0a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b0f:	74 30                	je     c0019b41 <Vm::faultHandler(regs*)+0x254>
c0019b11:	83 e9 04             	sub    ecx,0x4
c0019b14:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b1a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b20:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b23:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b26:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b2c:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b30:	0f 84 8c 03 00 00    	je     c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019b36:	80 ce 02             	or     dh,0x2
c0019b39:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b3c:	e9 81 03 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019b41:	83 e9 02             	sub    ecx,0x2
c0019b44:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b4a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b4d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b51:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b57:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b5b:	74 05                	je     c0019b62 <Vm::faultHandler(regs*)+0x275>
c0019b5d:	80 ce 02             	or     dh,0x2
c0019b60:	eb 03                	jmp    c0019b65 <Vm::faultHandler(regs*)+0x278>
c0019b62:	80 e6 fd             	and    dh,0xfd
c0019b65:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b69:	e9 54 03 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019b6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b73:	74 2a                	je     c0019b9f <Vm::faultHandler(regs*)+0x2b2>
c0019b75:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b77:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b7d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b83:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b88:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b8e:	c1 e8 09             	shr    eax,0x9
c0019b91:	83 e0 01             	and    eax,0x1
c0019b94:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b97:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b9a:	83 c0 04             	add    eax,0x4
c0019b9d:	eb 25                	jmp    c0019bc4 <Vm::faultHandler(regs*)+0x2d7>
c0019b9f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019ba2:	81 ca 00 02 02 00    	or     edx,0x20200
c0019ba8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019bab:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019bae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019bb4:	66 c1 e8 09          	shr    ax,0x9
c0019bb8:	83 e0 01             	and    eax,0x1
c0019bbb:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019bbe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019bc1:	83 c0 02             	add    eax,0x2
c0019bc4:	25 ff ff 00 00       	and    eax,0xffff
c0019bc9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bcc:	e9 f1 02 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019bd1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bd5:	3c ff                	cmp    al,0xff
c0019bd7:	75 10                	jne    c0019be9 <Vm::faultHandler(regs*)+0x2fc>
c0019bd9:	83 ec 0c             	sub    esp,0xc
c0019bdc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bdf:	e8 86 f9 ff ff       	call   c001956a <Thr::terminateFromIRQ(int)>
c0019be4:	e9 c2 02 00 00       	jmp    c0019eab <Vm::faultHandler(regs*)+0x5be>
c0019be9:	83 ec 0c             	sub    esp,0xc
c0019bec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bf4:	57                   	push   edi
c0019bf5:	50                   	push   eax
c0019bf6:	53                   	push   ebx
c0019bf7:	e8 f3 fb ff ff       	call   c00197ef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019bfc:	83 c4 20             	add    esp,0x20
c0019bff:	e9 c1 02 00 00       	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019c04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c09:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019c0d:	e9 b0 02 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019c12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c17:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019c1b:	e9 a2 02 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019c20:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c25:	74 0d                	je     c0019c34 <Vm::faultHandler(regs*)+0x347>
c0019c27:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c2e:	0f 87 e9 02 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019c34:	83 ec 0c             	sub    esp,0xc
c0019c37:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c3a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c3e:	50                   	push   eax
c0019c3f:	e8 4f fa ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019c44:	83 c4 0c             	add    esp,0xc
c0019c47:	0f b6 c0             	movzx  eax,al
c0019c4a:	50                   	push   eax
c0019c4b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c4f:	0f b7 c9             	movzx  ecx,cx
c0019c52:	50                   	push   eax
c0019c53:	51                   	push   ecx
c0019c54:	e8 54 fc ff ff       	call   c00198ad <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c59:	83 c4 10             	add    esp,0x10
c0019c5c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c5f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c63:	74 03                	je     c0019c68 <Vm::faultHandler(regs*)+0x37b>
c0019c65:	48                   	dec    eax
c0019c66:	eb 01                	jmp    c0019c69 <Vm::faultHandler(regs*)+0x37c>
c0019c68:	40                   	inc    eax
c0019c69:	0f b7 c0             	movzx  eax,ax
c0019c6c:	eb 70                	jmp    c0019cde <Vm::faultHandler(regs*)+0x3f1>
c0019c6e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c71:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c74:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c79:	74 0c                	je     c0019c87 <Vm::faultHandler(regs*)+0x39a>
c0019c7b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c81:	0f 87 96 02 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019c87:	0f b7 c9             	movzx  ecx,cx
c0019c8a:	0f b7 f6             	movzx  esi,si
c0019c8d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c90:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c95:	74 20                	je     c0019cb7 <Vm::faultHandler(regs*)+0x3ca>
c0019c97:	ed                   	in     eax,dx
c0019c98:	55                   	push   ebp
c0019c99:	50                   	push   eax
c0019c9a:	51                   	push   ecx
c0019c9b:	56                   	push   esi
c0019c9c:	e8 37 fc ff ff       	call   c00198d8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019ca1:	83 c4 10             	add    esp,0x10
c0019ca4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ca7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cab:	74 05                	je     c0019cb2 <Vm::faultHandler(regs*)+0x3c5>
c0019cad:	83 e8 04             	sub    eax,0x4
c0019cb0:	eb 27                	jmp    c0019cd9 <Vm::faultHandler(regs*)+0x3ec>
c0019cb2:	83 c0 04             	add    eax,0x4
c0019cb5:	eb 22                	jmp    c0019cd9 <Vm::faultHandler(regs*)+0x3ec>
c0019cb7:	66 ed                	in     ax,dx
c0019cb9:	0f b7 c0             	movzx  eax,ax
c0019cbc:	57                   	push   edi
c0019cbd:	50                   	push   eax
c0019cbe:	51                   	push   ecx
c0019cbf:	56                   	push   esi
c0019cc0:	e8 fd fb ff ff       	call   c00198c2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ccb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019ccf:	74 05                	je     c0019cd6 <Vm::faultHandler(regs*)+0x3e9>
c0019cd1:	83 e8 02             	sub    eax,0x2
c0019cd4:	eb 03                	jmp    c0019cd9 <Vm::faultHandler(regs*)+0x3ec>
c0019cd6:	83 c0 02             	add    eax,0x2
c0019cd9:	25 ff ff 00 00       	and    eax,0xffff
c0019cde:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019ce1:	e9 dc 01 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019ce6:	49                   	dec    ecx
c0019ce7:	80 f9 05             	cmp    cl,0x5
c0019cea:	77 24                	ja     c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019cec:	0f b6 c9             	movzx  ecx,cl
c0019cef:	ff 24 8d 58 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcda8]
c0019cf6:	0f b7 f5             	movzx  esi,bp
c0019cf9:	eb 15                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019cfb:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019cff:	eb 0f                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019d01:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019d05:	eb 09                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019d07:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019d0b:	eb 03                	jmp    c0019d10 <Vm::faultHandler(regs*)+0x423>
c0019d0d:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019d10:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d13:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d18:	74 0b                	je     c0019d25 <Vm::faultHandler(regs*)+0x438>
c0019d1a:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d1f:	0f 87 f8 01 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019d25:	52                   	push   edx
c0019d26:	52                   	push   edx
c0019d27:	0f b7 c0             	movzx  eax,ax
c0019d2a:	50                   	push   eax
c0019d2b:	56                   	push   esi
c0019d2c:	e8 48 fb ff ff       	call   c0019879 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d31:	59                   	pop    ecx
c0019d32:	5e                   	pop    esi
c0019d33:	0f b6 c0             	movzx  eax,al
c0019d36:	50                   	push   eax
c0019d37:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d3b:	50                   	push   eax
c0019d3c:	e8 58 f9 ff ff       	call   c0019699 <Vm::outbv(unsigned short, unsigned char)>
c0019d41:	83 c4 10             	add    esp,0x10
c0019d44:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d47:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d4b:	74 03                	je     c0019d50 <Vm::faultHandler(regs*)+0x463>
c0019d4d:	48                   	dec    eax
c0019d4e:	eb 01                	jmp    c0019d51 <Vm::faultHandler(regs*)+0x464>
c0019d50:	40                   	inc    eax
c0019d51:	0f b7 c0             	movzx  eax,ax
c0019d54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d57:	e9 66 01 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019d5c:	49                   	dec    ecx
c0019d5d:	80 f9 05             	cmp    cl,0x5
c0019d60:	77 1f                	ja     c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d62:	0f b6 c9             	movzx  ecx,cl
c0019d65:	ff 24 8d 70 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcd90]
c0019d6c:	89 ee                	mov    esi,ebp
c0019d6e:	eb 11                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d70:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d73:	eb 0c                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d75:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d78:	eb 07                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d7a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d7d:	eb 02                	jmp    c0019d81 <Vm::faultHandler(regs*)+0x494>
c0019d7f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d81:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d84:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d89:	74 0c                	je     c0019d97 <Vm::faultHandler(regs*)+0x4aa>
c0019d8b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d91:	0f 87 86 01 00 00    	ja     c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019d97:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d9a:	0f b7 d6             	movzx  edx,si
c0019d9d:	81 e7 00 04 00 00    	and    edi,0x400
c0019da3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019da6:	0f b7 c1             	movzx  eax,cx
c0019da9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019dae:	74 1d                	je     c0019dcd <Vm::faultHandler(regs*)+0x4e0>
c0019db0:	55                   	push   ebp
c0019db1:	55                   	push   ebp
c0019db2:	50                   	push   eax
c0019db3:	52                   	push   edx
c0019db4:	e8 e3 fa ff ff       	call   c001989c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019db9:	83 c4 10             	add    esp,0x10
c0019dbc:	89 f2                	mov    edx,esi
c0019dbe:	ef                   	out    dx,eax
c0019dbf:	85 ff                	test   edi,edi
c0019dc1:	74 05                	je     c0019dc8 <Vm::faultHandler(regs*)+0x4db>
c0019dc3:	83 e9 04             	sub    ecx,0x4
c0019dc6:	eb 21                	jmp    c0019de9 <Vm::faultHandler(regs*)+0x4fc>
c0019dc8:	83 c1 04             	add    ecx,0x4
c0019dcb:	eb 1c                	jmp    c0019de9 <Vm::faultHandler(regs*)+0x4fc>
c0019dcd:	55                   	push   ebp
c0019dce:	55                   	push   ebp
c0019dcf:	50                   	push   eax
c0019dd0:	52                   	push   edx
c0019dd1:	e8 b4 fa ff ff       	call   c001988a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dd6:	83 c4 10             	add    esp,0x10
c0019dd9:	89 f2                	mov    edx,esi
c0019ddb:	66 ef                	out    dx,ax
c0019ddd:	85 ff                	test   edi,edi
c0019ddf:	74 05                	je     c0019de6 <Vm::faultHandler(regs*)+0x4f9>
c0019de1:	83 e9 02             	sub    ecx,0x2
c0019de4:	eb 03                	jmp    c0019de9 <Vm::faultHandler(regs*)+0x4fc>
c0019de6:	83 c1 02             	add    ecx,0x2
c0019de9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019def:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019df2:	e9 cb 00 00 00       	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019df7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019dfe:	83 ec 0c             	sub    esp,0xc
c0019e01:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e05:	50                   	push   eax
c0019e06:	e8 88 f8 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019e0b:	0f b6 c0             	movzx  eax,al
c0019e0e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e11:	eb 3f                	jmp    c0019e52 <Vm::faultHandler(regs*)+0x565>
c0019e13:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e18:	74 07                	je     c0019e21 <Vm::faultHandler(regs*)+0x534>
c0019e1a:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e1e:	ed                   	in     eax,dx
c0019e1f:	eb 14                	jmp    c0019e35 <Vm::faultHandler(regs*)+0x548>
c0019e21:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e24:	66 31 c9             	xor    cx,cx
c0019e27:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e2a:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e2e:	66 ed                	in     ax,dx
c0019e30:	0f b7 c0             	movzx  eax,ax
c0019e33:	09 c8                	or     eax,ecx
c0019e35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e38:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e3c:	e9 84 00 00 00       	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019e41:	52                   	push   edx
c0019e42:	52                   	push   edx
c0019e43:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e47:	50                   	push   eax
c0019e48:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e4c:	50                   	push   eax
c0019e4d:	e8 47 f8 ff ff       	call   c0019699 <Vm::outbv(unsigned short, unsigned char)>
c0019e52:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e56:	eb 53                	jmp    c0019eab <Vm::faultHandler(regs*)+0x5be>
c0019e58:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e5b:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e5f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e64:	74 03                	je     c0019e69 <Vm::faultHandler(regs*)+0x57c>
c0019e66:	ef                   	out    dx,eax
c0019e67:	eb cf                	jmp    c0019e38 <Vm::faultHandler(regs*)+0x54b>
c0019e69:	66 ef                	out    dx,ax
c0019e6b:	eb cb                	jmp    c0019e38 <Vm::faultHandler(regs*)+0x54b>
c0019e6d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e74:	83 ec 0c             	sub    esp,0xc
c0019e77:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e7b:	50                   	push   eax
c0019e7c:	e8 12 f8 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019e81:	0f b6 c0             	movzx  eax,al
c0019e84:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e87:	eb 1f                	jmp    c0019ea8 <Vm::faultHandler(regs*)+0x5bb>
c0019e89:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e8c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e91:	74 03                	je     c0019e96 <Vm::faultHandler(regs*)+0x5a9>
c0019e93:	ed                   	in     eax,dx
c0019e94:	eb 0d                	jmp    c0019ea3 <Vm::faultHandler(regs*)+0x5b6>
c0019e96:	66 ed                	in     ax,dx
c0019e98:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e9b:	66 31 d2             	xor    dx,dx
c0019e9e:	0f b7 c0             	movzx  eax,ax
c0019ea1:	09 d0                	or     eax,edx
c0019ea3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019ea6:	eb 1a                	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019ea8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019eab:	83 c4 10             	add    esp,0x10
c0019eae:	eb 15                	jmp    c0019ec5 <Vm::faultHandler(regs*)+0x5d8>
c0019eb0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019eb3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019eb6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ebb:	74 03                	je     c0019ec0 <Vm::faultHandler(regs*)+0x5d3>
c0019ebd:	ef                   	out    dx,eax
c0019ebe:	eb 02                	jmp    c0019ec2 <Vm::faultHandler(regs*)+0x5d5>
c0019ec0:	66 ef                	out    dx,ax
c0019ec2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ec5:	b0 01                	mov    al,0x1
c0019ec7:	eb 56                	jmp    c0019f1f <Vm::faultHandler(regs*)+0x632>
c0019ec9:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019ecd:	50                   	push   eax
c0019ece:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ed2:	50                   	push   eax
c0019ed3:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ed7:	50                   	push   eax
c0019ed8:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019edc:	50                   	push   eax
c0019edd:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ee1:	50                   	push   eax
c0019ee2:	52                   	push   edx
c0019ee3:	52                   	push   edx
c0019ee4:	68 29 32 02 c0       	push   0xc0023229
c0019ee9:	e8 35 53 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c0019eee:	83 c4 20             	add    esp,0x20
c0019ef1:	83 ec 0c             	sub    esp,0xc
c0019ef4:	6a 60                	push   0x60
c0019ef6:	e8 98 f7 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019efb:	83 c4 10             	add    esp,0x10
c0019efe:	3c 1c                	cmp    al,0x1c
c0019f00:	74 04                	je     c0019f06 <Vm::faultHandler(regs*)+0x619>
c0019f02:	3c 5a                	cmp    al,0x5a
c0019f04:	75 eb                	jne    c0019ef1 <Vm::faultHandler(regs*)+0x604>
c0019f06:	3c 1c                	cmp    al,0x1c
c0019f08:	74 04                	je     c0019f0e <Vm::faultHandler(regs*)+0x621>
c0019f0a:	3c 5a                	cmp    al,0x5a
c0019f0c:	75 0f                	jne    c0019f1d <Vm::faultHandler(regs*)+0x630>
c0019f0e:	83 ec 0c             	sub    esp,0xc
c0019f11:	6a 60                	push   0x60
c0019f13:	e8 7b f7 ff ff       	call   c0019693 <Vm::inbv(unsigned short)>
c0019f18:	83 c4 10             	add    esp,0x10
c0019f1b:	eb e9                	jmp    c0019f06 <Vm::faultHandler(regs*)+0x619>
c0019f1d:	31 c0                	xor    eax,eax
c0019f1f:	83 c4 1c             	add    esp,0x1c
c0019f22:	5b                   	pop    ebx
c0019f23:	5e                   	pop    esi
c0019f24:	5f                   	pop    edi
c0019f25:	5d                   	pop    ebp
c0019f26:	c3                   	ret    
c0019f27:	90                   	nop

c0019f28 <FAT::getName()>:
c0019f28:	b8 88 32 02 c0       	mov    eax,0xc0023288
c0019f2d:	c3                   	ret    

c0019f2e <FAT::tell(void*, unsigned long long*)>:
c0019f2e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f33:	75 06                	jne    c0019f3b <FAT::tell(void*, unsigned long long*)+0xd>
c0019f35:	b8 04 00 00 00       	mov    eax,0x4
c0019f3a:	c3                   	ret    
c0019f3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f40:	75 06                	jne    c0019f48 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f42:	b8 04 00 00 00       	mov    eax,0x4
c0019f47:	c3                   	ret    
c0019f48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f4c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f4f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f56:	89 01                	mov    DWORD PTR [ecx],eax
c0019f58:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f5b:	b8 00 00 00 00       	mov    eax,0x0
c0019f60:	c3                   	ret    
c0019f61:	90                   	nop

c0019f62 <FAT::stat(void*, unsigned long long*)>:
c0019f62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f67:	75 06                	jne    c0019f6f <FAT::stat(void*, unsigned long long*)+0xd>
c0019f69:	b8 04 00 00 00       	mov    eax,0x4
c0019f6e:	c3                   	ret    
c0019f6f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f74:	75 06                	jne    c0019f7c <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f76:	b8 04 00 00 00       	mov    eax,0x4
c0019f7b:	c3                   	ret    
c0019f7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f80:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f8a:	89 01                	mov    DWORD PTR [ecx],eax
c0019f8c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f8f:	b8 00 00 00 00       	mov    eax,0x0
c0019f94:	c3                   	ret    
c0019f95:	90                   	nop

c0019f96 <FAT::~FAT()>:
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c0019f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa2:	89 10                	mov    DWORD PTR [eax],edx
c0019fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	50                   	push   eax
c0019fac:	e8 a3 55 ff ff       	call   c000f554 <Filesystem::~Filesystem()>
c0019fb1:	83 c4 10             	add    esp,0x10
c0019fb4:	90                   	nop
c0019fb5:	83 c4 0c             	add    esp,0xc
c0019fb8:	c3                   	ret    
c0019fb9:	90                   	nop

c0019fba <FAT::~FAT()>:
c0019fba:	83 ec 0c             	sub    esp,0xc
c0019fbd:	83 ec 0c             	sub    esp,0xc
c0019fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fc4:	e8 cd ff ff ff       	call   c0019f96 <FAT::~FAT()>
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	83 ec 08             	sub    esp,0x8
c0019fcf:	6a 08                	push   0x8
c0019fd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fd5:	e8 23 51 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0019fda:	83 c4 10             	add    esp,0x10
c0019fdd:	83 c4 0c             	add    esp,0xc
c0019fe0:	c3                   	ret    
c0019fe1:	90                   	nop

c0019fe2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fe2:	83 ec 1c             	sub    esp,0x1c
c0019fe5:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fec:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019ff1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ff5:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c0019ffc:	83 f8 ff             	cmp    eax,0xffffffff
c0019fff:	75 34                	jne    c001a035 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001a001:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a005:	88 c2                	mov    dl,al
c001a007:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a00c:	01 d0                	add    eax,edx
c001a00e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a012:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a018:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a01c:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a023:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a028:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a02c:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a033:	eb 17                	jmp    c001a04c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a035:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a039:	88 c2                	mov    dl,al
c001a03b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a03f:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a046:	01 d0                	add    eax,edx
c001a048:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a04c:	83 ec 04             	sub    esp,0x4
c001a04f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a053:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a057:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a05b:	50                   	push   eax
c001a05c:	e8 84 ca fe ff       	call   c0006ae5 <f_getlabel>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a068:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a06d:	75 07                	jne    c001a076 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a06f:	b8 00 00 00 00       	mov    eax,0x0
c001a074:	eb 05                	jmp    c001a07b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a076:	b8 01 00 00 00       	mov    eax,0x1
c001a07b:	83 c4 1c             	add    esp,0x1c
c001a07e:	c3                   	ret    
c001a07f:	90                   	nop

c001a080 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a080:	57                   	push   edi
c001a081:	83 ec 58             	sub    esp,0x58
c001a084:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a08c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a090:	b8 00 00 00 00       	mov    eax,0x0
c001a095:	b9 0f 00 00 00       	mov    ecx,0xf
c001a09a:	fc                   	cld    
c001a09b:	89 d7                	mov    edi,edx
c001a09d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a09f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0a3:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0aa:	83 f8 ff             	cmp    eax,0xffffffff
c001a0ad:	75 34                	jne    c001a0e3 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a0af:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0b3:	88 c2                	mov    dl,al
c001a0b5:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0ba:	01 d0                	add    eax,edx
c001a0bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0c0:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a0c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0ca:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a0d1:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0d6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0da:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a0e1:	eb 17                	jmp    c001a0fa <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0e3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0e7:	88 c2                	mov    dl,al
c001a0e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0ed:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0f4:	01 d0                	add    eax,edx
c001a0f6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0fa:	83 ec 08             	sub    esp,0x8
c001a0fd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a101:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a105:	50                   	push   eax
c001a106:	e8 1d 67 fe ff       	call   c0000828 <strcat>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	83 ec 0c             	sub    esp,0xc
c001a111:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a115:	50                   	push   eax
c001a116:	e8 be cb fe ff       	call   c0006cd9 <f_setlabel>
c001a11b:	83 c4 10             	add    esp,0x10
c001a11e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a122:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a127:	75 07                	jne    c001a130 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a129:	b8 00 00 00 00       	mov    eax,0x0
c001a12e:	eb 05                	jmp    c001a135 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a130:	b8 01 00 00 00       	mov    eax,0x1
c001a135:	83 c4 58             	add    esp,0x58
c001a138:	5f                   	pop    edi
c001a139:	c3                   	ret    

c001a13a <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a13a:	83 ec 2c             	sub    esp,0x2c
c001a13d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a145:	83 ec 08             	sub    esp,0x8
c001a148:	68 ac 32 02 c0       	push   0xc00232ac
c001a14d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a151:	e8 6c 66 fe ff       	call   c00007c2 <strcmp>
c001a156:	83 c4 10             	add    esp,0x10
c001a159:	85 c0                	test   eax,eax
c001a15b:	0f 94 c0             	sete   al
c001a15e:	84 c0                	test   al,al
c001a160:	74 0d                	je     c001a16f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a162:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a16a:	e9 a6 00 00 00       	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a16f:	83 ec 08             	sub    esp,0x8
c001a172:	68 9e 32 02 c0       	push   0xc002329e
c001a177:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a17b:	e8 42 66 fe ff       	call   c00007c2 <strcmp>
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	85 c0                	test   eax,eax
c001a185:	0f 94 c0             	sete   al
c001a188:	84 c0                	test   al,al
c001a18a:	74 0a                	je     c001a196 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a18c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a194:	eb 7f                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a196:	83 ec 08             	sub    esp,0x8
c001a199:	68 a4 32 02 c0       	push   0xc00232a4
c001a19e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1a2:	e8 1b 66 fe ff       	call   c00007c2 <strcmp>
c001a1a7:	83 c4 10             	add    esp,0x10
c001a1aa:	85 c0                	test   eax,eax
c001a1ac:	0f 94 c0             	sete   al
c001a1af:	84 c0                	test   al,al
c001a1b1:	74 0a                	je     c001a1bd <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a1b3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a1bb:	eb 58                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1bd:	83 ec 08             	sub    esp,0x8
c001a1c0:	68 6c 05 02 c0       	push   0xc002056c
c001a1c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1c9:	e8 f4 65 fe ff       	call   c00007c2 <strcmp>
c001a1ce:	83 c4 10             	add    esp,0x10
c001a1d1:	85 c0                	test   eax,eax
c001a1d3:	0f 94 c0             	sete   al
c001a1d6:	84 c0                	test   al,al
c001a1d8:	74 0a                	je     c001a1e4 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1da:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1e2:	eb 31                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1e4:	83 ec 08             	sub    esp,0x8
c001a1e7:	68 aa 32 02 c0       	push   0xc00232aa
c001a1ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1f0:	e8 cd 65 fe ff       	call   c00007c2 <strcmp>
c001a1f5:	83 c4 10             	add    esp,0x10
c001a1f8:	85 c0                	test   eax,eax
c001a1fa:	0f 94 c0             	sete   al
c001a1fd:	84 c0                	test   al,al
c001a1ff:	74 0a                	je     c001a20b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a201:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a209:	eb 0a                	jmp    c001a215 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a20b:	b8 08 00 00 00       	mov    eax,0x8
c001a210:	e9 04 01 00 00       	jmp    c001a319 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a215:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a21c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a221:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a225:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a22c:	83 f8 ff             	cmp    eax,0xffffffff
c001a22f:	75 34                	jne    c001a265 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a231:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a235:	88 c2                	mov    dl,al
c001a237:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a23c:	01 d0                	add    eax,edx
c001a23e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a242:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a248:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a24c:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a253:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a258:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a25c:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a263:	eb 17                	jmp    c001a27c <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a265:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a269:	88 c2                	mov    dl,al
c001a26b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a26f:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a276:	01 d0                	add    eax,edx
c001a278:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a27c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a280:	88 04 24             	mov    BYTE PTR [esp],al
c001a283:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a287:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a28b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a293:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a298:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	68 00 20 00 00       	push   0x2000
c001a2a8:	e8 44 1d ff ff       	call   c000bff1 <malloc>
c001a2ad:	83 c4 10             	add    esp,0x10
c001a2b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2b4:	68 00 20 00 00       	push   0x2000
c001a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2c1:	50                   	push   eax
c001a2c2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2c6:	50                   	push   eax
c001a2c7:	e8 58 ce fe ff       	call   c0007124 <f_mkfs>
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2d8:	75 07                	jne    c001a2e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2da:	b8 00 00 00 00       	mov    eax,0x0
c001a2df:	eb 38                	jmp    c001a319 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2e1:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2e6:	75 17                	jne    c001a2ff <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2e8:	83 ec 0c             	sub    esp,0xc
c001a2eb:	68 dc 32 02 c0       	push   0xc00232dc
c001a2f0:	e8 2e 4f ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001a2f5:	83 c4 10             	add    esp,0x10
c001a2f8:	b8 09 00 00 00       	mov    eax,0x9
c001a2fd:	eb 1a                	jmp    c001a319 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a303:	83 ec 08             	sub    esp,0x8
c001a306:	50                   	push   eax
c001a307:	68 b0 32 02 c0       	push   0xc00232b0
c001a30c:	e8 12 4f ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001a311:	83 c4 10             	add    esp,0x10
c001a314:	b8 01 00 00 00       	mov    eax,0x1
c001a319:	83 c4 2c             	add    esp,0x2c
c001a31c:	c3                   	ret    
c001a31d:	90                   	nop

c001a31e <FAT::tryMount(LogicalDisk*, int)>:
c001a31e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a324:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a329:	83 f8 14             	cmp    eax,0x14
c001a32c:	75 17                	jne    c001a345 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a32e:	83 ec 0c             	sub    esp,0xc
c001a331:	68 c2 32 02 c0       	push   0xc00232c2
c001a336:	e8 17 b7 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	b0 00                	mov    al,0x0
c001a340:	e9 d7 01 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a345:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a34c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a352:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a358:	3d 00 02 00 00       	cmp    eax,0x200
c001a35d:	74 07                	je     c001a366 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a35f:	b0 00                	mov    al,0x0
c001a361:	e9 b6 01 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a366:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a36e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a375:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a37c:	83 f8 ff             	cmp    eax,0xffffffff
c001a37f:	74 07                	je     c001a388 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a381:	b0 01                	mov    al,0x1
c001a383:	e9 94 01 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a388:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a392:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a39a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a3a1:	88 c2                	mov    dl,al
c001a3a3:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3a8:	01 d0                	add    eax,edx
c001a3aa:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a3b1:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a3b7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3be:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a3c5:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3ca:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3d1:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a3d8:	83 ec 0c             	sub    esp,0xc
c001a3db:	68 54 02 00 00       	push   0x254
c001a3e0:	e8 0c 1c ff ff       	call   c000bff1 <malloc>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3ef:	83 ec 04             	sub    esp,0x4
c001a3f2:	6a 00                	push   0x0
c001a3f4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3fb:	50                   	push   eax
c001a3fc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a403:	e8 0b a9 fe ff       	call   c0004d13 <f_mount>
c001a408:	83 c4 10             	add    esp,0x10
c001a40b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a412:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a41a:	74 19                	je     c001a435 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a41c:	83 ec 0c             	sub    esp,0xc
c001a41f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a426:	e8 e6 1b ff ff       	call   c000c011 <rfree>
c001a42b:	83 c4 10             	add    esp,0x10
c001a42e:	b0 00                	mov    al,0x0
c001a430:	e9 e7 00 00 00       	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a435:	83 ec 04             	sub    esp,0x4
c001a438:	68 00 01 00 00       	push   0x100
c001a43d:	6a 00                	push   0x0
c001a43f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a446:	50                   	push   eax
c001a447:	e8 86 62 fe ff       	call   c00006d2 <memset>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	83 ec 08             	sub    esp,0x8
c001a452:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a459:	50                   	push   eax
c001a45a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a461:	50                   	push   eax
c001a462:	e8 c1 63 fe ff       	call   c0000828 <strcat>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	83 ec 08             	sub    esp,0x8
c001a46d:	68 d0 32 02 c0       	push   0xc00232d0
c001a472:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a479:	50                   	push   eax
c001a47a:	e8 a9 63 fe ff       	call   c0000828 <strcat>
c001a47f:	83 c4 10             	add    esp,0x10
c001a482:	83 ec 04             	sub    esp,0x4
c001a485:	6a 01                	push   0x1
c001a487:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a48e:	50                   	push   eax
c001a48f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a493:	50                   	push   eax
c001a494:	e8 dc a8 fe ff       	call   c0004d75 <f_open>
c001a499:	83 c4 10             	add    esp,0x10
c001a49c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a4a3:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a4aa:	85 c0                	test   eax,eax
c001a4ac:	74 0a                	je     c001a4b8 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a4ae:	78 2d                	js     c001a4dd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4b0:	83 e8 04             	sub    eax,0x4
c001a4b3:	83 f8 01             	cmp    eax,0x1
c001a4b6:	77 25                	ja     c001a4dd <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4b8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4c0:	83 ec 0c             	sub    esp,0xc
c001a4c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4c7:	50                   	push   eax
c001a4c8:	e8 fa b3 fe ff       	call   c00058c7 <f_close>
c001a4cd:	83 c4 10             	add    esp,0x10
c001a4d0:	90                   	nop
c001a4d1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4d9:	74 3a                	je     c001a515 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4db:	eb 2d                	jmp    c001a50a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4dd:	83 ec 0c             	sub    esp,0xc
c001a4e0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4e7:	e8 25 1b ff ff       	call   c000c011 <rfree>
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	83 ec 04             	sub    esp,0x4
c001a4f2:	6a 00                	push   0x0
c001a4f4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4fb:	50                   	push   eax
c001a4fc:	6a 00                	push   0x0
c001a4fe:	e8 10 a8 fe ff       	call   c0004d13 <f_mount>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	b0 00                	mov    al,0x0
c001a508:	eb 12                	jmp    c001a51c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a50a:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a50f:	40                   	inc    eax
c001a510:	a3 20 5c 02 c0       	mov    ds:0xc0025c20,eax
c001a515:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a51c:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a522:	c3                   	ret    
c001a523:	90                   	nop

c001a524 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a524:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a52a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a532:	74 0a                	je     c001a53e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a534:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a53c:	75 0a                	jne    c001a548 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a53e:	b8 04 00 00 00       	mov    eax,0x4
c001a543:	e9 dd 00 00 00       	jmp    c001a625 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a548:	83 ec 08             	sub    esp,0x8
c001a54b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a552:	50                   	push   eax
c001a553:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a55a:	e8 20 b9 fe ff       	call   c0005e7f <f_readdir>
c001a55f:	83 c4 10             	add    esp,0x10
c001a562:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a569:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a56f:	83 ec 0c             	sub    esp,0xc
c001a572:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a579:	83 c0 1a             	add    eax,0x1a
c001a57c:	50                   	push   eax
c001a57d:	e8 6d 61 fe ff       	call   c00006ef <strlen>
c001a582:	83 c4 10             	add    esp,0x10
c001a585:	ba 00 00 00 00       	mov    edx,0x0
c001a58a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a58e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a592:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a599:	25 ff 00 00 00       	and    eax,0xff
c001a59e:	83 e0 10             	and    eax,0x10
c001a5a1:	74 07                	je     c001a5aa <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a5a3:	b8 02 00 00 00       	mov    eax,0x2
c001a5a8:	eb 05                	jmp    c001a5af <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a5aa:	b8 01 00 00 00       	mov    eax,0x1
c001a5af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5b3:	83 ec 08             	sub    esp,0x8
c001a5b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5bd:	83 c0 1a             	add    eax,0x1a
c001a5c0:	50                   	push   eax
c001a5c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5c5:	83 c0 10             	add    eax,0x10
c001a5c8:	50                   	push   eax
c001a5c9:	e8 a3 61 fe ff       	call   c0000771 <strcpy>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	83 ec 04             	sub    esp,0x4
c001a5d4:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5db:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5df:	50                   	push   eax
c001a5e0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5e7:	e8 b0 60 fe ff       	call   c000069c <memcpy>
c001a5ec:	83 c4 10             	add    esp,0x10
c001a5ef:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5f6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5fc:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a603:	84 c0                	test   al,al
c001a605:	75 07                	jne    c001a60e <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a607:	b8 07 00 00 00       	mov    eax,0x7
c001a60c:	eb 17                	jmp    c001a625 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a60e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a615:	85 c0                	test   eax,eax
c001a617:	75 07                	jne    c001a620 <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a619:	b8 00 00 00 00       	mov    eax,0x0
c001a61e:	eb 05                	jmp    c001a625 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a620:	b8 01 00 00 00       	mov    eax,0x1
c001a625:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a62b:	c3                   	ret    

c001a62c <FAT::read(void*, unsigned long, void*, int*)>:
c001a62c:	83 ec 1c             	sub    esp,0x1c
c001a62f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a634:	74 07                	je     c001a63d <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a636:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a63b:	75 07                	jne    c001a644 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a63d:	b8 04 00 00 00       	mov    eax,0x4
c001a642:	eb 3d                	jmp    c001a681 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a644:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a648:	50                   	push   eax
c001a649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a64d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a651:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a655:	e8 57 ab fe ff       	call   c00051b1 <f_read>
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a661:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a665:	89 c2                	mov    edx,eax
c001a667:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a66b:	89 10                	mov    DWORD PTR [eax],edx
c001a66d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a671:	85 c0                	test   eax,eax
c001a673:	75 07                	jne    c001a67c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a675:	b8 00 00 00 00       	mov    eax,0x0
c001a67a:	eb 05                	jmp    c001a681 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a67c:	b8 01 00 00 00       	mov    eax,0x1
c001a681:	83 c4 1c             	add    esp,0x1c
c001a684:	c3                   	ret    
c001a685:	90                   	nop

c001a686 <FAT::write(void*, unsigned long, void*, int*)>:
c001a686:	83 ec 1c             	sub    esp,0x1c
c001a689:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a68e:	74 07                	je     c001a697 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a690:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a695:	75 07                	jne    c001a69e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a697:	b8 04 00 00 00       	mov    eax,0x4
c001a69c:	eb 3d                	jmp    c001a6db <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a69e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6a2:	50                   	push   eax
c001a6a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a6ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6af:	e8 7d ad fe ff       	call   c0005431 <f_write>
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6bf:	89 c2                	mov    edx,eax
c001a6c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6c5:	89 10                	mov    DWORD PTR [eax],edx
c001a6c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6cb:	85 c0                	test   eax,eax
c001a6cd:	75 07                	jne    c001a6d6 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6cf:	b8 00 00 00 00       	mov    eax,0x0
c001a6d4:	eb 05                	jmp    c001a6db <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6d6:	b8 01 00 00 00       	mov    eax,0x1
c001a6db:	83 c4 1c             	add    esp,0x1c
c001a6de:	c3                   	ret    
c001a6df:	90                   	nop

c001a6e0 <FAT::close(void*)>:
c001a6e0:	83 ec 1c             	sub    esp,0x1c
c001a6e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6e8:	75 07                	jne    c001a6f1 <FAT::close(void*)+0x11>
c001a6ea:	b8 04 00 00 00       	mov    eax,0x4
c001a6ef:	eb 36                	jmp    c001a727 <FAT::close(void*)+0x47>
c001a6f1:	83 ec 0c             	sub    esp,0xc
c001a6f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6f8:	e8 ca b1 fe ff       	call   c00058c7 <f_close>
c001a6fd:	83 c4 10             	add    esp,0x10
c001a700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a704:	83 ec 0c             	sub    esp,0xc
c001a707:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a70b:	e8 f1 18 ff ff       	call   c000c001 <free>
c001a710:	83 c4 10             	add    esp,0x10
c001a713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a717:	85 c0                	test   eax,eax
c001a719:	75 07                	jne    c001a722 <FAT::close(void*)+0x42>
c001a71b:	b8 00 00 00 00       	mov    eax,0x0
c001a720:	eb 05                	jmp    c001a727 <FAT::close(void*)+0x47>
c001a722:	b8 01 00 00 00       	mov    eax,0x1
c001a727:	83 c4 1c             	add    esp,0x1c
c001a72a:	c3                   	ret    
c001a72b:	90                   	nop

c001a72c <FAT::closeDir(void*)>:
c001a72c:	83 ec 1c             	sub    esp,0x1c
c001a72f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a734:	75 07                	jne    c001a73d <FAT::closeDir(void*)+0x11>
c001a736:	b8 04 00 00 00       	mov    eax,0x4
c001a73b:	eb 36                	jmp    c001a773 <FAT::closeDir(void*)+0x47>
c001a73d:	83 ec 0c             	sub    esp,0xc
c001a740:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a744:	e8 14 b7 fe ff       	call   c0005e5d <f_closedir>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a750:	83 ec 0c             	sub    esp,0xc
c001a753:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a757:	e8 a5 18 ff ff       	call   c000c001 <free>
c001a75c:	83 c4 10             	add    esp,0x10
c001a75f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a763:	85 c0                	test   eax,eax
c001a765:	75 07                	jne    c001a76e <FAT::closeDir(void*)+0x42>
c001a767:	b8 00 00 00 00       	mov    eax,0x0
c001a76c:	eb 05                	jmp    c001a773 <FAT::closeDir(void*)+0x47>
c001a76e:	b8 01 00 00 00       	mov    eax,0x1
c001a773:	83 c4 1c             	add    esp,0x1c
c001a776:	c3                   	ret    
c001a777:	90                   	nop

c001a778 <FAT::seek(void*, unsigned long long)>:
c001a778:	83 ec 2c             	sub    esp,0x2c
c001a77b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a783:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a787:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a78b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a790:	75 07                	jne    c001a799 <FAT::seek(void*, unsigned long long)+0x21>
c001a792:	b8 04 00 00 00       	mov    eax,0x4
c001a797:	eb 2f                	jmp    c001a7c8 <FAT::seek(void*, unsigned long long)+0x50>
c001a799:	83 ec 04             	sub    esp,0x4
c001a79c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a7a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a7a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a7a8:	e8 49 b1 fe ff       	call   c00058f6 <f_lseek>
c001a7ad:	83 c4 10             	add    esp,0x10
c001a7b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7b8:	85 c0                	test   eax,eax
c001a7ba:	75 07                	jne    c001a7c3 <FAT::seek(void*, unsigned long long)+0x4b>
c001a7bc:	b8 00 00 00 00       	mov    eax,0x0
c001a7c1:	eb 05                	jmp    c001a7c8 <FAT::seek(void*, unsigned long long)+0x50>
c001a7c3:	b8 01 00 00 00       	mov    eax,0x1
c001a7c8:	83 c4 2c             	add    esp,0x2c
c001a7cb:	c3                   	ret    

c001a7cc <fatWrapperReadDisk>:
c001a7cc:	83 ec 1c             	sub    esp,0x1c
c001a7cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7db:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7e6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7ea:	25 ff 00 00 00       	and    eax,0xff
c001a7ef:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a7f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7fa:	83 ec 0c             	sub    esp,0xc
c001a7fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a801:	52                   	push   edx
c001a802:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a80a:	50                   	push   eax
c001a80b:	e8 6e 80 ff ff       	call   c001287e <LogicalDisk::read(unsigned long long, int, void*)>
c001a810:	83 c4 20             	add    esp,0x20
c001a813:	83 c4 1c             	add    esp,0x1c
c001a816:	c3                   	ret    

c001a817 <fatWrapperWriteDisk>:
c001a817:	83 ec 1c             	sub    esp,0x1c
c001a81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a81e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a822:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a826:	89 04 24             	mov    DWORD PTR [esp],eax
c001a829:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a82d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a831:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a835:	25 ff 00 00 00       	and    eax,0xff
c001a83a:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a841:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a845:	83 ec 0c             	sub    esp,0xc
c001a848:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a84c:	52                   	push   edx
c001a84d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a851:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a855:	50                   	push   eax
c001a856:	e8 8f 80 ff ff       	call   c00128ea <LogicalDisk::write(unsigned long long, int, void*)>
c001a85b:	83 c4 20             	add    esp,0x20
c001a85e:	83 c4 1c             	add    esp,0x1c
c001a861:	c3                   	ret    

c001a862 <fatWrapperIoctl>:
c001a862:	53                   	push   ebx
c001a863:	83 ec 28             	sub    esp,0x28
c001a866:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a86a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a86e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a872:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a876:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a87b:	75 35                	jne    c001a8b2 <fatWrapperIoctl+0x50>
c001a87d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a881:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a885:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a889:	25 ff 00 00 00       	and    eax,0xff
c001a88e:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a895:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a89b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a8a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8a5:	66 89 02             	mov    WORD PTR [edx],ax
c001a8a8:	b8 00 00 00 00       	mov    eax,0x0
c001a8ad:	e9 bb 00 00 00       	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a8b2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a8b7:	75 73                	jne    c001a92c <fatWrapperIoctl+0xca>
c001a8b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8c1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8c5:	25 ff 00 00 00       	and    eax,0xff
c001a8ca:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a8d1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8d7:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8dd:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8e3:	89 c8                	mov    eax,ecx
c001a8e5:	89 da                	mov    edx,ebx
c001a8e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8eb:	c1 e0 0a             	shl    eax,0xa
c001a8ee:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8f2:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8f8:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c001a8ff:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a905:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a90b:	89 cb                	mov    ebx,ecx
c001a90d:	c1 fb 1f             	sar    ebx,0x1f
c001a910:	53                   	push   ebx
c001a911:	51                   	push   ecx
c001a912:	52                   	push   edx
c001a913:	50                   	push   eax
c001a914:	e8 03 4c 00 00       	call   c001f51c <__udivdi3>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a920:	89 01                	mov    DWORD PTR [ecx],eax
c001a922:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a925:	b8 00 00 00 00       	mov    eax,0x0
c001a92a:	eb 41                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a92c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a931:	75 07                	jne    c001a93a <fatWrapperIoctl+0xd8>
c001a933:	b8 00 00 00 00       	mov    eax,0x0
c001a938:	eb 33                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a93a:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a93f:	75 19                	jne    c001a95a <fatWrapperIoctl+0xf8>
c001a941:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a945:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a949:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a94d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a953:	b8 00 00 00 00       	mov    eax,0x0
c001a958:	eb 13                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a95a:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a95f:	75 07                	jne    c001a968 <fatWrapperIoctl+0x106>
c001a961:	b8 00 00 00 00       	mov    eax,0x0
c001a966:	eb 05                	jmp    c001a96d <fatWrapperIoctl+0x10b>
c001a968:	b8 04 00 00 00       	mov    eax,0x4
c001a96d:	83 c4 28             	add    esp,0x28
c001a970:	5b                   	pop    ebx
c001a971:	c3                   	ret    

c001a972 <FAT::FAT()>:
c001a972:	83 ec 1c             	sub    esp,0x1c
c001a975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a979:	83 ec 0c             	sub    esp,0xc
c001a97c:	50                   	push   eax
c001a97d:	e8 ae 4b ff ff       	call   c000f530 <Filesystem::Filesystem()>
c001a982:	83 c4 10             	add    esp,0x10
c001a985:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001a98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a98e:	89 10                	mov    DWORD PTR [eax],edx
c001a990:	c7 05 20 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c20,0x0
c001a99a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9a2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a9a7:	7f 15                	jg     c001a9be <FAT::FAT()+0x4c>
c001a9a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9ad:	c7 04 85 40 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3c0],0xffffffff
c001a9b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9bc:	eb e4                	jmp    c001a9a2 <FAT::FAT()+0x30>
c001a9be:	90                   	nop
c001a9bf:	83 c4 1c             	add    esp,0x1c
c001a9c2:	c3                   	ret    
c001a9c3:	90                   	nop

c001a9c4 <FAT::fixFilepath(char*)>:
c001a9c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c8:	8a 00                	mov    al,BYTE PTR [eax]
c001a9ca:	3c 40                	cmp    al,0x40
c001a9cc:	7e 2c                	jle    c001a9fa <FAT::fixFilepath(char*)+0x36>
c001a9ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d2:	8a 00                	mov    al,BYTE PTR [eax]
c001a9d4:	83 e8 41             	sub    eax,0x41
c001a9d7:	88 c2                	mov    dl,al
c001a9d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9dd:	88 10                	mov    BYTE PTR [eax],dl
c001a9df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e3:	8a 00                	mov    al,BYTE PTR [eax]
c001a9e5:	0f be c0             	movsx  eax,al
c001a9e8:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a9ef:	83 c0 30             	add    eax,0x30
c001a9f2:	88 c2                	mov    dl,al
c001a9f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9f8:	88 10                	mov    BYTE PTR [eax],dl
c001a9fa:	90                   	nop
c001a9fb:	c3                   	ret    

c001a9fc <FAT::open(char const*, void**, FileOpenMode)>:
c001a9fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa0a:	74 0a                	je     c001aa16 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001aa0c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa14:	75 0a                	jne    c001aa20 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001aa16:	b8 04 00 00 00       	mov    eax,0x4
c001aa1b:	e9 00 01 00 00       	jmp    c001ab20 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa20:	83 ec 08             	sub    esp,0x8
c001aa23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa2e:	50                   	push   eax
c001aa2f:	e8 3d 5d fe ff       	call   c0000771 <strcpy>
c001aa34:	83 c4 10             	add    esp,0x10
c001aa37:	83 ec 08             	sub    esp,0x8
c001aa3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa3e:	50                   	push   eax
c001aa3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa46:	e8 79 ff ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001aa4b:	83 c4 10             	add    esp,0x10
c001aa4e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa56:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa5d:	83 e0 01             	and    eax,0x1
c001aa60:	74 08                	je     c001aa6a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa62:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa6a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa71:	83 e0 04             	and    eax,0x4
c001aa74:	74 10                	je     c001aa86 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa76:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa7e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa8d:	83 e0 02             	and    eax,0x2
c001aa90:	74 08                	je     c001aa9a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa92:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aaa1:	83 e0 08             	and    eax,0x8
c001aaa4:	74 08                	je     c001aaae <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aaa6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aaae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aab5:	83 e0 10             	and    eax,0x10
c001aab8:	74 08                	je     c001aac2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aaba:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aac2:	83 ec 0c             	sub    esp,0xc
c001aac5:	68 50 02 00 00       	push   0x250
c001aaca:	e8 22 15 ff ff       	call   c000bff1 <malloc>
c001aacf:	83 c4 10             	add    esp,0x10
c001aad2:	89 c2                	mov    edx,eax
c001aad4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aadb:	89 10                	mov    DWORD PTR [eax],edx
c001aadd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aae4:	31 d2                	xor    edx,edx
c001aae6:	88 c2                	mov    dl,al
c001aae8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aaef:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaf1:	83 ec 04             	sub    esp,0x4
c001aaf4:	52                   	push   edx
c001aaf5:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aaf9:	52                   	push   edx
c001aafa:	50                   	push   eax
c001aafb:	e8 75 a2 fe ff       	call   c0004d75 <f_open>
c001ab00:	83 c4 10             	add    esp,0x10
c001ab03:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ab0a:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ab12:	74 07                	je     c001ab1b <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001ab14:	b8 01 00 00 00       	mov    eax,0x1
c001ab19:	eb 05                	jmp    c001ab20 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ab1b:	b8 00 00 00 00       	mov    eax,0x0
c001ab20:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab26:	c3                   	ret    
c001ab27:	90                   	nop

c001ab28 <FAT::openDir(char const*, void**)>:
c001ab28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab36:	74 0a                	je     c001ab42 <FAT::openDir(char const*, void**)+0x1a>
c001ab38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab40:	75 07                	jne    c001ab49 <FAT::openDir(char const*, void**)+0x21>
c001ab42:	b8 04 00 00 00       	mov    eax,0x4
c001ab47:	eb 7d                	jmp    c001abc6 <FAT::openDir(char const*, void**)+0x9e>
c001ab49:	83 ec 08             	sub    esp,0x8
c001ab4c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab53:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab57:	50                   	push   eax
c001ab58:	e8 14 5c fe ff       	call   c0000771 <strcpy>
c001ab5d:	83 c4 10             	add    esp,0x10
c001ab60:	83 ec 08             	sub    esp,0x8
c001ab63:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab67:	50                   	push   eax
c001ab68:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab6f:	e8 50 fe ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	83 ec 0c             	sub    esp,0xc
c001ab7a:	6a 4c                	push   0x4c
c001ab7c:	e8 70 14 ff ff       	call   c000bff1 <malloc>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	89 c2                	mov    edx,eax
c001ab86:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab8d:	89 10                	mov    DWORD PTR [eax],edx
c001ab8f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab98:	83 ec 08             	sub    esp,0x8
c001ab9b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab9f:	52                   	push   edx
c001aba0:	50                   	push   eax
c001aba1:	e8 b5 b1 fe ff       	call   c0005d5b <f_opendir>
c001aba6:	83 c4 10             	add    esp,0x10
c001aba9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001abb0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001abb8:	74 07                	je     c001abc1 <FAT::openDir(char const*, void**)+0x99>
c001abba:	b8 01 00 00 00       	mov    eax,0x1
c001abbf:	eb 05                	jmp    c001abc6 <FAT::openDir(char const*, void**)+0x9e>
c001abc1:	b8 00 00 00 00       	mov    eax,0x0
c001abc6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abcc:	c3                   	ret    
c001abcd:	90                   	nop

c001abce <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abce:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abd4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abdc:	75 0a                	jne    c001abe8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abde:	b8 04 00 00 00       	mov    eax,0x4
c001abe3:	e9 cb 00 00 00       	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abe8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abf0:	75 0a                	jne    c001abfc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abf2:	b8 04 00 00 00       	mov    eax,0x4
c001abf7:	e9 b7 00 00 00       	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abfc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ac04:	75 0a                	jne    c001ac10 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ac06:	b8 04 00 00 00       	mov    eax,0x4
c001ac0b:	e9 a3 00 00 00       	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac10:	83 ec 08             	sub    esp,0x8
c001ac13:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac1a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac21:	50                   	push   eax
c001ac22:	e8 4a 5b fe ff       	call   c0000771 <strcpy>
c001ac27:	83 c4 10             	add    esp,0x10
c001ac2a:	83 ec 08             	sub    esp,0x8
c001ac2d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac34:	50                   	push   eax
c001ac35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac3c:	e8 83 fd ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	83 ec 08             	sub    esp,0x8
c001ac47:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac4b:	50                   	push   eax
c001ac4c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac53:	50                   	push   eax
c001ac54:	e8 c1 b2 fe ff       	call   c0005f1a <f_stat>
c001ac59:	83 c4 10             	add    esp,0x10
c001ac5c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac63:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac6a:	85 c0                	test   eax,eax
c001ac6c:	74 07                	je     c001ac75 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac6e:	83 f8 04             	cmp    eax,0x4
c001ac71:	74 34                	je     c001aca7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac73:	eb 39                	jmp    c001acae <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac75:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac79:	25 ff 00 00 00       	and    eax,0xff
c001ac7e:	83 e0 10             	and    eax,0x10
c001ac81:	0f 95 c2             	setne  dl
c001ac84:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac8b:	88 10                	mov    BYTE PTR [eax],dl
c001ac8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac90:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac94:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac9b:	89 01                	mov    DWORD PTR [ecx],eax
c001ac9d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aca0:	b8 00 00 00 00       	mov    eax,0x0
c001aca5:	eb 0c                	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001aca7:	b8 02 00 00 00       	mov    eax,0x2
c001acac:	eb 05                	jmp    c001acb3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001acae:	b8 01 00 00 00       	mov    eax,0x1
c001acb3:	81 c4 2c 02 00 00    	add    esp,0x22c
c001acb9:	c3                   	ret    

c001acba <FAT::unlink(char const*)>:
c001acba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001acc0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acc8:	75 07                	jne    c001acd1 <FAT::unlink(char const*)+0x17>
c001acca:	b8 04 00 00 00       	mov    eax,0x4
c001accf:	eb 5c                	jmp    c001ad2d <FAT::unlink(char const*)+0x73>
c001acd1:	83 ec 08             	sub    esp,0x8
c001acd4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acdf:	50                   	push   eax
c001ace0:	e8 8c 5a fe ff       	call   c0000771 <strcpy>
c001ace5:	83 c4 10             	add    esp,0x10
c001ace8:	83 ec 08             	sub    esp,0x8
c001aceb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acef:	50                   	push   eax
c001acf0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acf7:	e8 c8 fc ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001acfc:	83 c4 10             	add    esp,0x10
c001acff:	83 ec 0c             	sub    esp,0xc
c001ad02:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad06:	50                   	push   eax
c001ad07:	e8 7d b5 fe ff       	call   c0006289 <f_unlink>
c001ad0c:	83 c4 10             	add    esp,0x10
c001ad0f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad16:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad1d:	85 c0                	test   eax,eax
c001ad1f:	75 07                	jne    c001ad28 <FAT::unlink(char const*)+0x6e>
c001ad21:	b8 00 00 00 00       	mov    eax,0x0
c001ad26:	eb 05                	jmp    c001ad2d <FAT::unlink(char const*)+0x73>
c001ad28:	b8 01 00 00 00       	mov    eax,0x1
c001ad2d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad33:	c3                   	ret    

c001ad34 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad34:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad3a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad41:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad48:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad4c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad50:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad58:	75 0a                	jne    c001ad64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad5a:	b8 04 00 00 00       	mov    eax,0x4
c001ad5f:	e9 43 01 00 00       	jmp    c001aea7 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad64:	83 ec 08             	sub    esp,0x8
c001ad67:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad6e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad72:	50                   	push   eax
c001ad73:	e8 f9 59 fe ff       	call   c0000771 <strcpy>
c001ad78:	83 c4 10             	add    esp,0x10
c001ad7b:	83 ec 08             	sub    esp,0x8
c001ad7e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad82:	50                   	push   eax
c001ad83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad8a:	e8 35 fc ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad9a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ada2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ada6:	25 ff 00 00 00       	and    eax,0xff
c001adab:	83 e0 01             	and    eax,0x1
c001adae:	74 08                	je     c001adb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001adb0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001adb8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adbc:	25 ff 00 00 00       	and    eax,0xff
c001adc1:	83 e0 02             	and    eax,0x2
c001adc4:	74 08                	je     c001adce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001adc6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adce:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001add2:	25 ff 00 00 00       	and    eax,0xff
c001add7:	83 e0 04             	and    eax,0x4
c001adda:	74 08                	je     c001ade4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001addc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ade4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ade8:	25 ff 00 00 00       	and    eax,0xff
c001aded:	83 e0 08             	and    eax,0x8
c001adf0:	74 08                	je     c001adfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001adf2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001adfa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adfe:	25 ff 00 00 00       	and    eax,0xff
c001ae03:	83 e0 01             	and    eax,0x1
c001ae06:	74 08                	je     c001ae10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001ae08:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ae10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae14:	25 ff 00 00 00       	and    eax,0xff
c001ae19:	83 e0 02             	and    eax,0x2
c001ae1c:	74 08                	je     c001ae26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae1e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae26:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae2a:	25 ff 00 00 00       	and    eax,0xff
c001ae2f:	83 e0 04             	and    eax,0x4
c001ae32:	74 08                	je     c001ae3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae34:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae3c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae40:	25 ff 00 00 00       	and    eax,0xff
c001ae45:	83 e0 08             	and    eax,0x8
c001ae48:	74 08                	je     c001ae52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae4a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae52:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae59:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae60:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae67:	31 d2                	xor    edx,edx
c001ae69:	88 c2                	mov    dl,al
c001ae6b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae72:	25 ff 00 00 00       	and    eax,0xff
c001ae77:	83 ec 04             	sub    esp,0x4
c001ae7a:	52                   	push   edx
c001ae7b:	50                   	push   eax
c001ae7c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae80:	50                   	push   eax
c001ae81:	e8 a3 ba fe ff       	call   c0006929 <f_chmod>
c001ae86:	83 c4 10             	add    esp,0x10
c001ae89:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae90:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae97:	85 c0                	test   eax,eax
c001ae99:	75 07                	jne    c001aea2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae9b:	b8 00 00 00 00       	mov    eax,0x0
c001aea0:	eb 05                	jmp    c001aea7 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001aea2:	b8 01 00 00 00       	mov    eax,0x1
c001aea7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aead:	c3                   	ret    

c001aeae <FAT::rename(char const*, char const*)>:
c001aeae:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aeb4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aebc:	74 0a                	je     c001aec8 <FAT::rename(char const*, char const*)+0x1a>
c001aebe:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aec6:	75 0a                	jne    c001aed2 <FAT::rename(char const*, char const*)+0x24>
c001aec8:	b8 04 00 00 00       	mov    eax,0x4
c001aecd:	e9 98 00 00 00       	jmp    c001af6a <FAT::rename(char const*, char const*)+0xbc>
c001aed2:	83 ec 08             	sub    esp,0x8
c001aed5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aedc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aee3:	50                   	push   eax
c001aee4:	e8 88 58 fe ff       	call   c0000771 <strcpy>
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	83 ec 08             	sub    esp,0x8
c001aeef:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aef6:	50                   	push   eax
c001aef7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aefe:	e8 c1 fa ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001af03:	83 c4 10             	add    esp,0x10
c001af06:	83 ec 08             	sub    esp,0x8
c001af09:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001af10:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af14:	50                   	push   eax
c001af15:	e8 57 58 fe ff       	call   c0000771 <strcpy>
c001af1a:	83 c4 10             	add    esp,0x10
c001af1d:	83 ec 08             	sub    esp,0x8
c001af20:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af24:	50                   	push   eax
c001af25:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af2c:	e8 93 fa ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001af31:	83 c4 10             	add    esp,0x10
c001af34:	83 ec 08             	sub    esp,0x8
c001af37:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af3b:	50                   	push   eax
c001af3c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af43:	50                   	push   eax
c001af44:	e8 ed b6 fe ff       	call   c0006636 <f_rename>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af53:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af5a:	85 c0                	test   eax,eax
c001af5c:	75 07                	jne    c001af65 <FAT::rename(char const*, char const*)+0xb7>
c001af5e:	b8 00 00 00 00       	mov    eax,0x0
c001af63:	eb 05                	jmp    c001af6a <FAT::rename(char const*, char const*)+0xbc>
c001af65:	b8 01 00 00 00       	mov    eax,0x1
c001af6a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af70:	c3                   	ret    
c001af71:	90                   	nop

c001af72 <FAT::mkdir(char const*)>:
c001af72:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af78:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af80:	75 07                	jne    c001af89 <FAT::mkdir(char const*)+0x17>
c001af82:	b8 04 00 00 00       	mov    eax,0x4
c001af87:	eb 5c                	jmp    c001afe5 <FAT::mkdir(char const*)+0x73>
c001af89:	83 ec 08             	sub    esp,0x8
c001af8c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af93:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af97:	50                   	push   eax
c001af98:	e8 d4 57 fe ff       	call   c0000771 <strcpy>
c001af9d:	83 c4 10             	add    esp,0x10
c001afa0:	83 ec 08             	sub    esp,0x8
c001afa3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001afa7:	50                   	push   eax
c001afa8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001afaf:	e8 10 fa ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001afb4:	83 c4 10             	add    esp,0x10
c001afb7:	83 ec 0c             	sub    esp,0xc
c001afba:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afbe:	50                   	push   eax
c001afbf:	e8 46 b4 fe ff       	call   c000640a <f_mkdir>
c001afc4:	83 c4 10             	add    esp,0x10
c001afc7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afce:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afd5:	85 c0                	test   eax,eax
c001afd7:	75 07                	jne    c001afe0 <FAT::mkdir(char const*)+0x6e>
c001afd9:	b8 00 00 00 00       	mov    eax,0x0
c001afde:	eb 05                	jmp    c001afe5 <FAT::mkdir(char const*)+0x73>
c001afe0:	b8 01 00 00 00       	mov    eax,0x1
c001afe5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afeb:	c3                   	ret    

c001afec <FAT::exists(char const*)>:
c001afec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aff2:	83 ec 08             	sub    esp,0x8
c001aff5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001affc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b000:	50                   	push   eax
c001b001:	e8 6b 57 fe ff       	call   c0000771 <strcpy>
c001b006:	83 c4 10             	add    esp,0x10
c001b009:	83 ec 08             	sub    esp,0x8
c001b00c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b010:	50                   	push   eax
c001b011:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b018:	e8 a7 f9 ff ff       	call   c001a9c4 <FAT::fixFilepath(char*)>
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	83 ec 08             	sub    esp,0x8
c001b023:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b02a:	50                   	push   eax
c001b02b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b02f:	50                   	push   eax
c001b030:	e8 e5 ae fe ff       	call   c0005f1a <f_stat>
c001b035:	83 c4 10             	add    esp,0x10
c001b038:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b03f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b046:	85 c0                	test   eax,eax
c001b048:	75 04                	jne    c001b04e <FAT::exists(char const*)+0x62>
c001b04a:	b0 01                	mov    al,0x1
c001b04c:	eb 02                	jmp    c001b050 <FAT::exists(char const*)+0x64>
c001b04e:	b0 00                	mov    al,0x0
c001b050:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b056:	c3                   	ret    
c001b057:	90                   	nop

c001b058 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b058:	b8 08 00 00 00       	mov    eax,0x8
c001b05d:	c3                   	ret    

c001b05e <ISO9660::seek(void*, unsigned long long)>:
c001b05e:	53                   	push   ebx
c001b05f:	b8 04 00 00 00       	mov    eax,0x4
c001b064:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b068:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b06c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b070:	85 d2                	test   edx,edx
c001b072:	74 17                	je     c001b08b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b074:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b077:	89 c8                	mov    eax,ecx
c001b079:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b07c:	b8 01 00 00 00       	mov    eax,0x1
c001b081:	73 08                	jae    c001b08b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b083:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b086:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b089:	31 c0                	xor    eax,eax
c001b08b:	5b                   	pop    ebx
c001b08c:	c3                   	ret    
c001b08d:	90                   	nop

c001b08e <ISO9660::tell(void*, unsigned long long*)>:
c001b08e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b096:	85 d2                	test   edx,edx
c001b098:	74 12                	je     c001b0ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b09a:	85 c0                	test   eax,eax
c001b09c:	74 0e                	je     c001b0ac <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b09e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b0a1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b0a4:	89 10                	mov    DWORD PTR [eax],edx
c001b0a6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0a9:	31 c0                	xor    eax,eax
c001b0ab:	c3                   	ret    
c001b0ac:	b8 04 00 00 00       	mov    eax,0x4
c001b0b1:	c3                   	ret    

c001b0b2 <ISO9660::getName()>:
c001b0b2:	b8 68 33 02 c0       	mov    eax,0xc0023368
c001b0b7:	c3                   	ret    

c001b0b8 <ISO9660::stat(void*, unsigned long long*)>:
c001b0b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0c0:	85 d2                	test   edx,edx
c001b0c2:	74 12                	je     c001b0d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0c4:	85 c0                	test   eax,eax
c001b0c6:	74 0e                	je     c001b0d6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0c8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0cb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0ce:	89 10                	mov    DWORD PTR [eax],edx
c001b0d0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0d3:	31 c0                	xor    eax,eax
c001b0d5:	c3                   	ret    
c001b0d6:	b8 04 00 00 00       	mov    eax,0x4
c001b0db:	c3                   	ret    

c001b0dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0dc:	b8 01 00 00 00       	mov    eax,0x1
c001b0e1:	c3                   	ret    

c001b0e2 <ISO9660::unlink(char const*)>:
c001b0e2:	b8 01 00 00 00       	mov    eax,0x1
c001b0e7:	c3                   	ret    

c001b0e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0e8:	b8 01 00 00 00       	mov    eax,0x1
c001b0ed:	c3                   	ret    

c001b0ee <ISO9660::rename(char const*, char const*)>:
c001b0ee:	b8 01 00 00 00       	mov    eax,0x1
c001b0f3:	c3                   	ret    

c001b0f4 <ISO9660::mkdir(char const*)>:
c001b0f4:	b8 01 00 00 00       	mov    eax,0x1
c001b0f9:	c3                   	ret    

c001b0fa <ISO9660::close(void*)>:
c001b0fa:	83 ec 0c             	sub    esp,0xc
c001b0fd:	b8 04 00 00 00       	mov    eax,0x4
c001b102:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b106:	85 d2                	test   edx,edx
c001b108:	74 0e                	je     c001b118 <ISO9660::close(void*)+0x1e>
c001b10a:	83 ec 0c             	sub    esp,0xc
c001b10d:	52                   	push   edx
c001b10e:	e8 ee 0e ff ff       	call   c000c001 <free>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	31 c0                	xor    eax,eax
c001b118:	83 c4 0c             	add    esp,0xc
c001b11b:	c3                   	ret    

c001b11c <ISO9660::closeDir(void*)>:
c001b11c:	83 ec 0c             	sub    esp,0xc
c001b11f:	b8 04 00 00 00       	mov    eax,0x4
c001b124:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b128:	85 d2                	test   edx,edx
c001b12a:	74 0e                	je     c001b13a <ISO9660::closeDir(void*)+0x1e>
c001b12c:	83 ec 0c             	sub    esp,0xc
c001b12f:	52                   	push   edx
c001b130:	e8 cc 0e ff ff       	call   c000c001 <free>
c001b135:	83 c4 10             	add    esp,0x10
c001b138:	31 c0                	xor    eax,eax
c001b13a:	83 c4 0c             	add    esp,0xc
c001b13d:	c3                   	ret    

c001b13e <ISO9660::~ISO9660()>:
c001b13e:	83 ec 0c             	sub    esp,0xc
c001b141:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001b146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b14a:	89 10                	mov    DWORD PTR [eax],edx
c001b14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b150:	83 ec 0c             	sub    esp,0xc
c001b153:	50                   	push   eax
c001b154:	e8 fb 43 ff ff       	call   c000f554 <Filesystem::~Filesystem()>
c001b159:	83 c4 10             	add    esp,0x10
c001b15c:	90                   	nop
c001b15d:	83 c4 0c             	add    esp,0xc
c001b160:	c3                   	ret    
c001b161:	90                   	nop

c001b162 <ISO9660::~ISO9660()>:
c001b162:	83 ec 0c             	sub    esp,0xc
c001b165:	83 ec 0c             	sub    esp,0xc
c001b168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b16c:	e8 cd ff ff ff       	call   c001b13e <ISO9660::~ISO9660()>
c001b171:	83 c4 10             	add    esp,0x10
c001b174:	83 ec 08             	sub    esp,0x8
c001b177:	6a 08                	push   0x8
c001b179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b17d:	e8 7b 3f ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001b182:	83 c4 10             	add    esp,0x10
c001b185:	83 c4 0c             	add    esp,0xc
c001b188:	c3                   	ret    

c001b189 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b189:	55                   	push   ebp
c001b18a:	31 c9                	xor    ecx,ecx
c001b18c:	57                   	push   edi
c001b18d:	56                   	push   esi
c001b18e:	53                   	push   ebx
c001b18f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b193:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b197:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b19b:	89 eb                	mov    ebx,ebp
c001b19d:	39 ce                	cmp    esi,ecx
c001b19f:	7e 17                	jle    c001b1b8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b1a1:	31 d2                	xor    edx,edx
c001b1a3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b1a7:	7d 13                	jge    c001b1bc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b1a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b1ad:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b1b0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b1b3:	75 0d                	jne    c001b1c2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b1b5:	42                   	inc    edx
c001b1b6:	eb eb                	jmp    c001b1a3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b1b8:	31 c0                	xor    eax,eax
c001b1ba:	eb 0a                	jmp    c001b1c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1bc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1c0:	eb 04                	jmp    c001b1c6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1c2:	41                   	inc    ecx
c001b1c3:	43                   	inc    ebx
c001b1c4:	eb d7                	jmp    c001b19d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1c6:	5b                   	pop    ebx
c001b1c7:	5e                   	pop    esi
c001b1c8:	5f                   	pop    edi
c001b1c9:	5d                   	pop    ebp
c001b1ca:	c3                   	ret    

c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1cb:	56                   	push   esi
c001b1cc:	53                   	push   ebx
c001b1cd:	52                   	push   edx
c001b1ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1da:	39 0d 20 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d20,ecx
c001b1e0:	75 08                	jne    c001b1ea <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1e2:	38 05 c8 41 02 c0    	cmp    BYTE PTR ds:0xc00241c8,al
c001b1e8:	74 2b                	je     c001b215 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1ea:	83 ec 0c             	sub    esp,0xc
c001b1ed:	31 db                	xor    ebx,ebx
c001b1ef:	a2 c8 41 02 c0       	mov    ds:0xc00241c8,al
c001b1f4:	89 0d 20 5d 02 c0    	mov    DWORD PTR ds:0xc0025d20,ecx
c001b1fa:	68 40 5d 02 c0       	push   0xc0025d40
c001b1ff:	6a 01                	push   0x1
c001b201:	53                   	push   ebx
c001b202:	0f be c0             	movsx  eax,al
c001b205:	51                   	push   ecx
c001b206:	ff 34 85 9c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb364]
c001b20d:	e8 6c 76 ff ff       	call   c001287e <LogicalDisk::read(unsigned long long, int, void*)>
c001b212:	83 c4 20             	add    esp,0x20
c001b215:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b21d:	c7 44 24 14 40 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d40
c001b225:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b229:	58                   	pop    eax
c001b22a:	5b                   	pop    ebx
c001b22b:	5e                   	pop    esi
c001b22c:	e9 6b 54 fe ff       	jmp    c000069c <memcpy>
c001b231:	90                   	nop

c001b232 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b232:	81 ec 10 08 00 00    	sub    esp,0x810
c001b238:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b23f:	83 c0 41             	add    eax,0x41
c001b242:	0f be c0             	movsx  eax,al
c001b245:	50                   	push   eax
c001b246:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b24a:	50                   	push   eax
c001b24b:	6a 10                	push   0x10
c001b24d:	e8 79 ff ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b252:	83 c4 10             	add    esp,0x10
c001b255:	31 c0                	xor    eax,eax
c001b257:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b25c:	75 1d                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b25e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b263:	75 16                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b265:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b26a:	75 0f                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b26c:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b271:	75 08                	jne    c001b27b <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b273:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b278:	0f 94 c0             	sete   al
c001b27b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b281:	c3                   	ret    

c001b282 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b282:	55                   	push   ebp
c001b283:	57                   	push   edi
c001b284:	56                   	push   esi
c001b285:	53                   	push   ebx
c001b286:	81 ec 34 08 00 00    	sub    esp,0x834
c001b28c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b293:	55                   	push   ebp
c001b294:	68 83 33 02 c0       	push   0xc0023383
c001b299:	e8 85 3f ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b2a9:	0f 84 06 02 00 00    	je     c001b4b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2af:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b2b7:	0f 84 f8 01 00 00    	je     c001b4b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2bd:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2c4:	b8 01 00 00 00       	mov    eax,0x1
c001b2c9:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2cd:	0f 85 e7 01 00 00    	jne    c001b4ba <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2d3:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2d6:	31 d2                	xor    edx,edx
c001b2d8:	89 e9                	mov    ecx,ebp
c001b2da:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2dd:	01 f1                	add    ecx,esi
c001b2df:	89 d3                	mov    ebx,edx
c001b2e1:	11 fb                	adc    ebx,edi
c001b2e3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2e7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2eb:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2f2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2f5:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2f8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2fc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b300:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b304:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b308:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b30c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b310:	72 19                	jb     c001b32b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b312:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b31a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b31e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b321:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b325:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b329:	eb 13                	jmp    c001b33e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b32b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b32f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b333:	29 f0                	sub    eax,esi
c001b335:	19 fa                	sbb    edx,edi
c001b337:	89 04 24             	mov    DWORD PTR [esp],eax
c001b33a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b33e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b345:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b348:	8b 00                	mov    eax,DWORD PTR [eax]
c001b34a:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b34e:	c1 e0 0b             	shl    eax,0xb
c001b351:	53                   	push   ebx
c001b352:	01 c6                	add    esi,eax
c001b354:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b35b:	11 d7                	adc    edi,edx
c001b35d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b361:	50                   	push   eax
c001b362:	89 fa                	mov    edx,edi
c001b364:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b368:	50                   	push   eax
c001b369:	89 f0                	mov    eax,esi
c001b36b:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b36f:	50                   	push   eax
c001b370:	e8 56 fe ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b375:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b37c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b380:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b384:	83 c4 10             	add    esp,0x10
c001b387:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b38a:	b8 00 08 00 00       	mov    eax,0x800
c001b38f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b395:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b399:	29 d0                	sub    eax,edx
c001b39b:	39 c1                	cmp    ecx,eax
c001b39d:	83 db 00             	sbb    ebx,0x0
c001b3a0:	7d 19                	jge    c001b3bb <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b3a2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b3a7:	75 16                	jne    c001b3bf <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b3a9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b3b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3b6:	e9 f6 00 00 00       	jmp    c001b4b1 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b3bb:	89 c5                	mov    ebp,eax
c001b3bd:	eb 03                	jmp    c001b3c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3bf:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3c2:	51                   	push   ecx
c001b3c3:	55                   	push   ebp
c001b3c4:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3c8:	50                   	push   eax
c001b3c9:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3d0:	e8 c7 52 fe ff       	call   c000069c <memcpy>
c001b3d5:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3dc:	01 e8                	add    eax,ebp
c001b3de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3e6:	89 e8                	mov    eax,ebp
c001b3e8:	99                   	cdq    
c001b3e9:	01 ee                	add    esi,ebp
c001b3eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3ef:	11 d7                	adc    edi,edx
c001b3f1:	29 e9                	sub    ecx,ebp
c001b3f3:	19 d3                	sbb    ebx,edx
c001b3f5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3f9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b405:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b408:	b8 00 00 00 00       	mov    eax,0x0
c001b40d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b411:	7d 3f                	jge    c001b452 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b413:	52                   	push   edx
c001b414:	89 fa                	mov    edx,edi
c001b416:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b41d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b421:	50                   	push   eax
c001b422:	89 f0                	mov    eax,esi
c001b424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b428:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b42c:	50                   	push   eax
c001b42d:	e8 99 fd ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b432:	81 c6 00 08 00 00    	add    esi,0x800
c001b438:	83 d7 00             	adc    edi,0x0
c001b43b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b443:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b44b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b450:	eb ab                	jmp    c001b3fd <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b456:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b459:	74 34                	je     c001b48f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b45b:	50                   	push   eax
c001b45c:	89 fa                	mov    edx,edi
c001b45e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b465:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b469:	50                   	push   eax
c001b46a:	89 f0                	mov    eax,esi
c001b46c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b470:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b474:	55                   	push   ebp
c001b475:	50                   	push   eax
c001b476:	e8 50 fd ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b47b:	83 c4 0c             	add    esp,0xc
c001b47e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b482:	55                   	push   ebp
c001b483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b487:	e8 10 52 fe ff       	call   c000069c <memcpy>
c001b48c:	83 c4 10             	add    esp,0x10
c001b48f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b496:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b49a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b49e:	89 38                	mov    DWORD PTR [eax],edi
c001b4a0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b4a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4ab:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b4ae:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b4b1:	31 c0                	xor    eax,eax
c001b4b3:	eb 05                	jmp    c001b4ba <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b4b5:	b8 04 00 00 00       	mov    eax,0x4
c001b4ba:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4c0:	5b                   	pop    ebx
c001b4c1:	5e                   	pop    esi
c001b4c2:	5f                   	pop    edi
c001b4c3:	5d                   	pop    ebp
c001b4c4:	c3                   	ret    
c001b4c5:	90                   	nop

c001b4c6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4c6:	55                   	push   ebp
c001b4c7:	57                   	push   edi
c001b4c8:	56                   	push   esi
c001b4c9:	53                   	push   ebx
c001b4ca:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4d0:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4d7:	85 f6                	test   esi,esi
c001b4d9:	0f 84 62 02 00 00    	je     c001b741 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4df:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4e7:	0f 84 54 02 00 00    	je     c001b741 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4ed:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4f0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4f3:	75 0a                	jne    c001b4ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4f5:	b8 07 00 00 00       	mov    eax,0x7
c001b4fa:	e9 47 02 00 00       	jmp    c001b746 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4ff:	50                   	push   eax
c001b500:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b504:	50                   	push   eax
c001b505:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b50c:	53                   	push   ebx
c001b50d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b50f:	c1 e0 0b             	shl    eax,0xb
c001b512:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b515:	c1 e8 0b             	shr    eax,0xb
c001b518:	50                   	push   eax
c001b519:	e8 ad fc ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b51e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	89 c1                	mov    ecx,eax
c001b526:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b529:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b52f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b532:	84 db                	test   bl,bl
c001b534:	0f 85 90 00 00 00    	jne    c001b5ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b53a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b540:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b546:	29 c7                	sub    edi,eax
c001b548:	89 fb                	mov    ebx,edi
c001b54a:	c1 fb 1f             	sar    ebx,0x1f
c001b54d:	01 f8                	add    eax,edi
c001b54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b553:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b556:	11 da                	adc    edx,ebx
c001b558:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b55b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b55e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b562:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b565:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b568:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b56b:	89 d8                	mov    eax,ebx
c001b56d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b571:	ba 00 00 00 00       	mov    edx,0x0
c001b576:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b57a:	b8 00 00 00 00       	mov    eax,0x0
c001b57f:	73 0b                	jae    c001b58c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b581:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b584:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b588:	29 f8                	sub    eax,edi
c001b58a:	19 da                	sbb    edx,ebx
c001b58c:	89 d3                	mov    ebx,edx
c001b58e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b591:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b594:	09 c3                	or     ebx,eax
c001b596:	0f 84 59 ff ff ff    	je     c001b4f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b59c:	55                   	push   ebp
c001b59d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b5a1:	50                   	push   eax
c001b5a2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b5a9:	53                   	push   ebx
c001b5aa:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5ac:	c1 e0 0b             	shl    eax,0xb
c001b5af:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b5b3:	c1 e8 0b             	shr    eax,0xb
c001b5b6:	50                   	push   eax
c001b5b7:	e8 0f fc ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5bf:	83 c4 10             	add    esp,0x10
c001b5c2:	25 ff 07 00 00       	and    eax,0x7ff
c001b5c7:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5ca:	57                   	push   edi
c001b5cb:	6a 28                	push   0x28
c001b5cd:	6a 00                	push   0x0
c001b5cf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5d3:	50                   	push   eax
c001b5d4:	e8 f9 50 fe ff       	call   c00006d2 <memset>
c001b5d9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5dc:	31 d2                	xor    edx,edx
c001b5de:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5e4:	89 f8                	mov    eax,edi
c001b5e6:	83 c0 21             	add    eax,0x21
c001b5e9:	83 d2 00             	adc    edx,0x0
c001b5ec:	89 c7                	mov    edi,eax
c001b5ee:	89 d5                	mov    ebp,edx
c001b5f0:	83 c4 10             	add    esp,0x10
c001b5f3:	31 c9                	xor    ecx,ecx
c001b5f5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5fc:	83 f9 28             	cmp    ecx,0x28
c001b5ff:	0f 94 c2             	sete   dl
c001b602:	88 04 24             	mov    BYTE PTR [esp],al
c001b605:	88 d0                	mov    al,dl
c001b607:	ba ff 07 00 00       	mov    edx,0x7ff
c001b60c:	39 fa                	cmp    edx,edi
c001b60e:	ba 00 00 00 00       	mov    edx,0x0
c001b613:	19 ea                	sbb    edx,ebp
c001b615:	0f 92 c2             	setb   dl
c001b618:	09 c2                	or     edx,eax
c001b61a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b61e:	0f 94 c0             	sete   al
c001b621:	08 d0                	or     al,dl
c001b623:	75 16                	jne    c001b63b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b625:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b629:	74 10                	je     c001b63b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b62b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b62e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b632:	41                   	inc    ecx
c001b633:	83 c7 01             	add    edi,0x1
c001b636:	83 d5 00             	adc    ebp,0x0
c001b639:	eb ba                	jmp    c001b5f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b63b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b649:	57                   	push   edi
c001b64a:	e8 a0 50 fe ff       	call   c00006ef <strlen>
c001b64f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b653:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b656:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b65d:	25 ff 07 00 00       	and    eax,0x7ff
c001b662:	01 c8                	add    eax,ecx
c001b664:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b66c:	5a                   	pop    edx
c001b66d:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b674:	59                   	pop    ecx
c001b675:	0f 95 c0             	setne  al
c001b678:	0f b6 c0             	movzx  eax,al
c001b67b:	40                   	inc    eax
c001b67c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b680:	57                   	push   edi
c001b681:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b685:	50                   	push   eax
c001b686:	e8 e6 50 fe ff       	call   c0000771 <strcpy>
c001b68b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b68f:	83 c4 10             	add    esp,0x10
c001b692:	84 c0                	test   al,al
c001b694:	75 21                	jne    c001b6b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b696:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b69e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6a6:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6ae:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b6b5:	eb 28                	jmp    c001b6df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6b7:	fe c8                	dec    al
c001b6b9:	75 24                	jne    c001b6df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6bb:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6c3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6cb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6d3:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6da:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6df:	50                   	push   eax
c001b6e0:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6e7:	0f b6 fb             	movzx  edi,bl
c001b6ea:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6ee:	31 db                	xor    ebx,ebx
c001b6f0:	50                   	push   eax
c001b6f1:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6f8:	e8 9f 4f fe ff       	call   c000069c <memcpy>
c001b6fd:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b704:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b70a:	89 f9                	mov    ecx,edi
c001b70c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b70f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b712:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b715:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b718:	83 c4 10             	add    esp,0x10
c001b71b:	39 c7                	cmp    edi,eax
c001b71d:	89 df                	mov    edi,ebx
c001b71f:	19 d7                	sbb    edi,edx
c001b721:	72 10                	jb     c001b733 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b723:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b72a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b731:	eb 0a                	jmp    c001b73d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b733:	29 c8                	sub    eax,ecx
c001b735:	19 da                	sbb    edx,ebx
c001b737:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b73a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b73d:	31 c0                	xor    eax,eax
c001b73f:	eb 05                	jmp    c001b746 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b741:	b8 04 00 00 00       	mov    eax,0x4
c001b746:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b74c:	5b                   	pop    ebx
c001b74d:	5e                   	pop    esi
c001b74e:	5f                   	pop    edi
c001b74f:	5d                   	pop    ebp
c001b750:	c3                   	ret    

c001b751 <readRoot(unsigned int*, unsigned int*, char)>:
c001b751:	81 ec 40 08 00 00    	sub    esp,0x840
c001b757:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b75f:	50                   	push   eax
c001b760:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b764:	50                   	push   eax
c001b765:	6a 10                	push   0x10
c001b767:	e8 5f fa ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b76c:	83 c4 0c             	add    esp,0xc
c001b76f:	6a 22                	push   0x22
c001b771:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b778:	50                   	push   eax
c001b779:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b77d:	50                   	push   eax
c001b77e:	e8 19 4f fe ff       	call   c000069c <memcpy>
c001b783:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b78a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b78e:	89 10                	mov    DWORD PTR [eax],edx
c001b790:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b797:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b79b:	89 10                	mov    DWORD PTR [eax],edx
c001b79d:	b0 01                	mov    al,0x1
c001b79f:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b7a5:	c3                   	ret    

c001b7a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b7a6:	55                   	push   ebp
c001b7a7:	57                   	push   edi
c001b7a8:	56                   	push   esi
c001b7a9:	53                   	push   ebx
c001b7aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7b0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b7b7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7c2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7c6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7ca:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7ce:	75 03                	jne    c001b7d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7d0:	83 c3 02             	add    ebx,0x2
c001b7d3:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7d6:	75 03                	jne    c001b7db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7d8:	43                   	inc    ebx
c001b7d9:	eb f8                	jmp    c001b7d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7db:	51                   	push   ecx
c001b7dc:	68 00 01 00 00       	push   0x100
c001b7e1:	6a 00                	push   0x0
c001b7e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7e7:	50                   	push   eax
c001b7e8:	e8 e5 4e fe ff       	call   c00006d2 <memset>
c001b7ed:	83 c4 10             	add    esp,0x10
c001b7f0:	31 d2                	xor    edx,edx
c001b7f2:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7f5:	84 c0                	test   al,al
c001b7f7:	74 21                	je     c001b81a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7f9:	3c 2f                	cmp    al,0x2f
c001b7fb:	75 0b                	jne    c001b808 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7fd:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b801:	bd 01 00 00 00       	mov    ebp,0x1
c001b806:	eb 14                	jmp    c001b81c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b808:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b80b:	80 f9 19             	cmp    cl,0x19
c001b80e:	77 03                	ja     c001b813 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b810:	83 e8 20             	sub    eax,0x20
c001b813:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b817:	42                   	inc    edx
c001b818:	eb d8                	jmp    c001b7f2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b81a:	31 ed                	xor    ebp,ebp
c001b81c:	83 ec 0c             	sub    esp,0xc
c001b81f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b826:	e8 c6 07 ff ff       	call   c000bff1 <malloc>
c001b82b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b832:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b838:	89 c6                	mov    esi,eax
c001b83a:	c1 ef 0b             	shr    edi,0xb
c001b83d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b844:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b848:	83 c4 10             	add    esp,0x10
c001b84b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b850:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b854:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b85b:	74 28                	je     c001b885 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b85d:	52                   	push   edx
c001b85e:	57                   	push   edi
c001b85f:	50                   	push   eax
c001b860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b864:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b86b:	e8 5b f9 ff ff       	call   c001b1cb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b870:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b874:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b87b:	05 00 08 00 00       	add    eax,0x800
c001b880:	83 c4 10             	add    esp,0x10
c001b883:	eb cb                	jmp    c001b850 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b885:	83 ec 0c             	sub    esp,0xc
c001b888:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b88c:	57                   	push   edi
c001b88d:	e8 5d 4e fe ff       	call   c00006ef <strlen>
c001b892:	50                   	push   eax
c001b893:	57                   	push   edi
c001b894:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b89b:	56                   	push   esi
c001b89c:	e8 e8 f8 ff ff       	call   c001b189 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b8a1:	83 c4 20             	add    esp,0x20
c001b8a4:	85 c0                	test   eax,eax
c001b8a6:	75 13                	jne    c001b8bb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b8a8:	83 ec 0c             	sub    esp,0xc
c001b8ab:	56                   	push   esi
c001b8ac:	e8 50 07 ff ff       	call   c000c001 <free>
c001b8b1:	83 c4 10             	add    esp,0x10
c001b8b4:	31 c0                	xor    eax,eax
c001b8b6:	e9 b3 00 00 00       	jmp    c001b96e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b8bb:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8bf:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8c3:	c1 e7 08             	shl    edi,0x8
c001b8c6:	c1 e2 10             	shl    edx,0x10
c001b8c9:	09 d7                	or     edi,edx
c001b8cb:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8cf:	09 d7                	or     edi,edx
c001b8d1:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8d5:	c1 e2 18             	shl    edx,0x18
c001b8d8:	09 d7                	or     edi,edx
c001b8da:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8de:	89 d1                	mov    ecx,edx
c001b8e0:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8e4:	c1 e1 08             	shl    ecx,0x8
c001b8e7:	c1 e2 10             	shl    edx,0x10
c001b8ea:	09 ca                	or     edx,ecx
c001b8ec:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8f0:	09 ca                	or     edx,ecx
c001b8f2:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8f6:	c1 e1 18             	shl    ecx,0x18
c001b8f9:	09 ca                	or     edx,ecx
c001b8fb:	89 e9                	mov    ecx,ebp
c001b8fd:	84 c9                	test   cl,cl
c001b8ff:	74 3c                	je     c001b93d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b901:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b905:	83 ec 0c             	sub    esp,0xc
c001b908:	56                   	push   esi
c001b909:	e8 f3 06 ff ff       	call   c000c001 <free>
c001b90e:	83 c4 0c             	add    esp,0xc
c001b911:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b918:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b91d:	50                   	push   eax
c001b91e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b925:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b92c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b930:	52                   	push   edx
c001b931:	57                   	push   edi
c001b932:	53                   	push   ebx
c001b933:	e8 6e fe ff ff       	call   c001b7a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b938:	83 c4 20             	add    esp,0x20
c001b93b:	eb 31                	jmp    c001b96e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b93d:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b944:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b947:	d0 e8                	shr    al,1
c001b949:	83 ec 0c             	sub    esp,0xc
c001b94c:	89 3b                	mov    DWORD PTR [ebx],edi
c001b94e:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b955:	83 e0 01             	and    eax,0x1
c001b958:	89 13                	mov    DWORD PTR [ebx],edx
c001b95a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b961:	89 03                	mov    DWORD PTR [ebx],eax
c001b963:	56                   	push   esi
c001b964:	e8 98 06 ff ff       	call   c000c001 <free>
c001b969:	83 c4 10             	add    esp,0x10
c001b96c:	b0 01                	mov    al,0x1
c001b96e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b974:	5b                   	pop    ebx
c001b975:	5e                   	pop    esi
c001b976:	5f                   	pop    edi
c001b977:	5d                   	pop    ebp
c001b978:	c3                   	ret    

c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b979:	55                   	push   ebp
c001b97a:	57                   	push   edi
c001b97b:	56                   	push   esi
c001b97c:	53                   	push   ebx
c001b97d:	83 ec 20             	sub    esp,0x20
c001b980:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b984:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b988:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b98d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b991:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b999:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b9a1:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b9a7:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b9ad:	57                   	push   edi
c001b9ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9b2:	50                   	push   eax
c001b9b3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9b7:	50                   	push   eax
c001b9b8:	e8 94 fd ff ff       	call   c001b751 <readRoot(unsigned int*, unsigned int*, char)>
c001b9bd:	5a                   	pop    edx
c001b9be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9c2:	e8 28 4d fe ff       	call   c00006ef <strlen>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	83 f8 03             	cmp    eax,0x3
c001b9cd:	77 17                	ja     c001b9e6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9d3:	89 03                	mov    DWORD PTR [ebx],eax
c001b9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9d9:	89 06                	mov    DWORD PTR [esi],eax
c001b9db:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9e2:	b0 01                	mov    al,0x1
c001b9e4:	eb 19                	jmp    c001b9ff <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9e6:	50                   	push   eax
c001b9e7:	55                   	push   ebp
c001b9e8:	57                   	push   edi
c001b9e9:	56                   	push   esi
c001b9ea:	53                   	push   ebx
c001b9eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9f7:	e8 aa fd ff ff       	call   c001b7a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9fc:	83 c4 20             	add    esp,0x20
c001b9ff:	83 c4 1c             	add    esp,0x1c
c001ba02:	5b                   	pop    ebx
c001ba03:	5e                   	pop    esi
c001ba04:	5f                   	pop    edi
c001ba05:	5d                   	pop    ebp
c001ba06:	c3                   	ret    
c001ba07:	90                   	nop

c001ba08 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ba08:	57                   	push   edi
c001ba09:	56                   	push   esi
c001ba0a:	53                   	push   ebx
c001ba0b:	83 ec 10             	sub    esp,0x10
c001ba0e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba12:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba16:	85 f6                	test   esi,esi
c001ba18:	74 7b                	je     c001ba95 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba1a:	85 ff                	test   edi,edi
c001ba1c:	74 77                	je     c001ba95 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba1e:	83 ec 0c             	sub    esp,0xc
c001ba21:	6a 1c                	push   0x1c
c001ba23:	e8 c9 05 ff ff       	call   c000bff1 <malloc>
c001ba28:	89 07                	mov    DWORD PTR [edi],eax
c001ba2a:	89 c3                	mov    ebx,eax
c001ba2c:	58                   	pop    eax
c001ba2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba31:	50                   	push   eax
c001ba32:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba35:	50                   	push   eax
c001ba36:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba3a:	50                   	push   eax
c001ba3b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba3f:	50                   	push   eax
c001ba40:	56                   	push   esi
c001ba41:	e8 33 ff ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba46:	83 c4 20             	add    esp,0x20
c001ba49:	84 c0                	test   al,al
c001ba4b:	74 07                	je     c001ba54 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba52:	74 0b                	je     c001ba5f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba54:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba58:	b8 01 00 00 00       	mov    eax,0x1
c001ba5d:	eb 3b                	jmp    c001ba9a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba63:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba67:	89 03                	mov    DWORD PTR [ebx],eax
c001ba69:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba74:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba7b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba82:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba85:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba8c:	8a 06                	mov    al,BYTE PTR [esi]
c001ba8e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba91:	31 c0                	xor    eax,eax
c001ba93:	eb 05                	jmp    c001ba9a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba95:	b8 04 00 00 00       	mov    eax,0x4
c001ba9a:	83 c4 10             	add    esp,0x10
c001ba9d:	5b                   	pop    ebx
c001ba9e:	5e                   	pop    esi
c001ba9f:	5f                   	pop    edi
c001baa0:	c3                   	ret    
c001baa1:	90                   	nop

c001baa2 <ISO9660::exists(char const*)>:
c001baa2:	83 ec 28             	sub    esp,0x28
c001baa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001baa9:	8d 54 24 18          	lea    edx,[esp+0x18]
c001baad:	52                   	push   edx
c001baae:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001bab1:	52                   	push   edx
c001bab2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001bab6:	52                   	push   edx
c001bab7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001babb:	52                   	push   edx
c001babc:	50                   	push   eax
c001babd:	e8 b7 fe ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bac2:	83 c4 3c             	add    esp,0x3c
c001bac5:	c3                   	ret    

c001bac6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bac6:	56                   	push   esi
c001bac7:	53                   	push   ebx
c001bac8:	83 ec 14             	sub    esp,0x14
c001bacb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bacf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bad3:	85 db                	test   ebx,ebx
c001bad5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bad9:	0f 94 c2             	sete   dl
c001badc:	85 f6                	test   esi,esi
c001bade:	0f 94 c0             	sete   al
c001bae1:	08 c2                	or     dl,al
c001bae3:	75 68                	jne    c001bb4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bae5:	85 c9                	test   ecx,ecx
c001bae7:	74 64                	je     c001bb4d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bae9:	83 ec 0c             	sub    esp,0xc
c001baec:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001baef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001baf5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bafc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb00:	50                   	push   eax
c001bb01:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001bb04:	50                   	push   eax
c001bb05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb09:	50                   	push   eax
c001bb0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb0e:	50                   	push   eax
c001bb0f:	51                   	push   ecx
c001bb10:	e8 64 fe ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb15:	83 c4 20             	add    esp,0x20
c001bb18:	ba 01 00 00 00       	mov    edx,0x1
c001bb1d:	84 c0                	test   al,al
c001bb1f:	74 31                	je     c001bb52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb2c:	89 03                	mov    DWORD PTR [ebx],eax
c001bb2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb32:	85 c0                	test   eax,eax
c001bb34:	ba 00 00 00 00       	mov    edx,0x0
c001bb39:	0f 95 06             	setne  BYTE PTR [esi]
c001bb3c:	74 14                	je     c001bb52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb3e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb44:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb4b:	eb 05                	jmp    c001bb52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb4d:	ba 04 00 00 00       	mov    edx,0x4
c001bb52:	83 c4 14             	add    esp,0x14
c001bb55:	89 d0                	mov    eax,edx
c001bb57:	5b                   	pop    ebx
c001bb58:	5e                   	pop    esi
c001bb59:	c3                   	ret    

c001bb5a <ISO9660::openDir(char const*, void**)>:
c001bb5a:	57                   	push   edi
c001bb5b:	56                   	push   esi
c001bb5c:	53                   	push   ebx
c001bb5d:	83 ec 10             	sub    esp,0x10
c001bb60:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb64:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb68:	85 f6                	test   esi,esi
c001bb6a:	0f 84 95 00 00 00    	je     c001bc05 <ISO9660::openDir(char const*, void**)+0xab>
c001bb70:	85 ff                	test   edi,edi
c001bb72:	0f 84 8d 00 00 00    	je     c001bc05 <ISO9660::openDir(char const*, void**)+0xab>
c001bb78:	83 ec 0c             	sub    esp,0xc
c001bb7b:	6a 1c                	push   0x1c
c001bb7d:	e8 6f 04 ff ff       	call   c000bff1 <malloc>
c001bb82:	89 07                	mov    DWORD PTR [edi],eax
c001bb84:	89 c3                	mov    ebx,eax
c001bb86:	59                   	pop    ecx
c001bb87:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb8b:	50                   	push   eax
c001bb8c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb8f:	50                   	push   eax
c001bb90:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb94:	50                   	push   eax
c001bb95:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb99:	50                   	push   eax
c001bb9a:	56                   	push   esi
c001bb9b:	e8 d9 fd ff ff       	call   c001b979 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bba0:	83 c4 20             	add    esp,0x20
c001bba3:	84 c0                	test   al,al
c001bba5:	74 07                	je     c001bbae <ISO9660::openDir(char const*, void**)+0x54>
c001bba7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bbac:	75 21                	jne    c001bbcf <ISO9660::openDir(char const*, void**)+0x75>
c001bbae:	52                   	push   edx
c001bbaf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bbb3:	0f b6 c0             	movzx  eax,al
c001bbb6:	50                   	push   eax
c001bbb7:	68 96 33 02 c0       	push   0xc0023396
c001bbbc:	e8 62 36 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001bbc1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	b8 01 00 00 00       	mov    eax,0x1
c001bbcd:	eb 3b                	jmp    c001bc0a <ISO9660::openDir(char const*, void**)+0xb0>
c001bbcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbd3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbd7:	89 03                	mov    DWORD PTR [ebx],eax
c001bbd9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbe4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbeb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbf2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbf5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbfc:	8a 06                	mov    al,BYTE PTR [esi]
c001bbfe:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bc01:	31 c0                	xor    eax,eax
c001bc03:	eb 05                	jmp    c001bc0a <ISO9660::openDir(char const*, void**)+0xb0>
c001bc05:	b8 04 00 00 00       	mov    eax,0x4
c001bc0a:	83 c4 10             	add    esp,0x10
c001bc0d:	5b                   	pop    ebx
c001bc0e:	5e                   	pop    esi
c001bc0f:	5f                   	pop    edi
c001bc10:	c3                   	ret    
c001bc11:	90                   	nop

c001bc12 <ISO9660::ISO9660()>:
c001bc12:	83 ec 0c             	sub    esp,0xc
c001bc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc19:	83 ec 0c             	sub    esp,0xc
c001bc1c:	50                   	push   eax
c001bc1d:	e8 0e 39 ff ff       	call   c000f530 <Filesystem::Filesystem()>
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001bc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2e:	89 10                	mov    DWORD PTR [eax],edx
c001bc30:	90                   	nop
c001bc31:	83 c4 0c             	add    esp,0xc
c001bc34:	c3                   	ret    
c001bc35:	90                   	nop

c001bc36 <SoundChannel::~SoundChannel()>:
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc40:	83 ec 0c             	sub    esp,0xc
c001bc43:	50                   	push   eax
c001bc44:	e8 b8 03 ff ff       	call   c000c001 <free>
c001bc49:	83 c4 10             	add    esp,0x10
c001bc4c:	90                   	nop
c001bc4d:	83 c4 0c             	add    esp,0xc
c001bc50:	c3                   	ret    
c001bc51:	90                   	nop

c001bc52 <SoundChannel::setSpeed(float)>:
c001bc52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc56:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc5a:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc5d:	c3                   	ret    

c001bc5e <SoundChannel::getSpeed()>:
c001bc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc62:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc65:	c3                   	ret    

c001bc66 <SoundChannel::setVolume(int)>:
c001bc66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc6a:	83 f8 64             	cmp    eax,0x64
c001bc6d:	7e 05                	jle    c001bc74 <SoundChannel::setVolume(int)+0xe>
c001bc6f:	b8 64 00 00 00       	mov    eax,0x64
c001bc74:	85 c0                	test   eax,eax
c001bc76:	79 02                	jns    c001bc7a <SoundChannel::setVolume(int)+0x14>
c001bc78:	31 c0                	xor    eax,eax
c001bc7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc7e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc81:	c3                   	ret    

c001bc82 <SoundChannel::getVolume()>:
c001bc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc86:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc89:	c3                   	ret    

c001bc8a <SoundChannel::pause()>:
c001bc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc8e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc92:	c3                   	ret    
c001bc93:	90                   	nop

c001bc94 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc94:	83 ec 1c             	sub    esp,0x1c
c001bc97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc9b:	e8 ea ff ff ff       	call   c001bc8a <SoundChannel::pause()>
c001bca0:	83 c4 04             	add    esp,0x4
c001bca3:	6a 50                	push   0x50
c001bca5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bca9:	e8 b8 ff ff ff       	call   c001bc66 <SoundChannel::setVolume(int)>
c001bcae:	83 c4 08             	add    esp,0x8
c001bcb1:	d9 e8                	fld1   
c001bcb3:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bcb7:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bcba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bcbe:	e8 8f ff ff ff       	call   c001bc52 <SoundChannel::setSpeed(float)>
c001bcc3:	83 c4 08             	add    esp,0x8
c001bcc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcce:	89 10                	mov    DWORD PTR [eax],edx
c001bcd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcd8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcdf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bce3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bce6:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bceb:	75 26                	jne    c001bd13 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf1:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcfa:	0f af c2             	imul   eax,edx
c001bcfd:	89 c2                	mov    edx,eax
c001bcff:	c1 fa 1f             	sar    edx,0x1f
c001bd02:	83 e2 03             	and    edx,0x3
c001bd05:	01 d0                	add    eax,edx
c001bd07:	c1 f8 02             	sar    eax,0x2
c001bd0a:	05 a0 0f 00 00       	add    eax,0xfa0
c001bd0f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd17:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bd1b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd22:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd2d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd38:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd3b:	c1 e0 02             	shl    eax,0x2
c001bd3e:	83 ec 0c             	sub    esp,0xc
c001bd41:	50                   	push   eax
c001bd42:	e8 aa 02 ff ff       	call   c000bff1 <malloc>
c001bd47:	83 c4 10             	add    esp,0x10
c001bd4a:	89 c2                	mov    edx,eax
c001bd4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd53:	83 ec 04             	sub    esp,0x4
c001bd56:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd5a:	50                   	push   eax
c001bd5b:	6a 01                	push   0x1
c001bd5d:	6a 04                	push   0x4
c001bd5f:	e8 96 cb fe ff       	call   c00088fa <src_new>
c001bd64:	83 c4 10             	add    esp,0x10
c001bd67:	89 c2                	mov    edx,eax
c001bd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd6d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd74:	85 c0                	test   eax,eax
c001bd76:	74 10                	je     c001bd88 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd78:	83 ec 0c             	sub    esp,0xc
c001bd7b:	68 18 34 02 c0       	push   0xc0023418
c001bd80:	e8 cd 9c ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	90                   	nop
c001bd89:	83 c4 1c             	add    esp,0x1c
c001bd8c:	c3                   	ret    
c001bd8d:	90                   	nop

c001bd8e <SoundChannel::play()>:
c001bd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd92:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd96:	c3                   	ret    
c001bd97:	90                   	nop

c001bd98 <SoundChannel::paused()>:
c001bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd9f:	c3                   	ret    

c001bda0 <SoundChannel::getSampleRate()>:
c001bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bda6:	c3                   	ret    
c001bda7:	90                   	nop

c001bda8 <SoundChannel::getBits()>:
c001bda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bdaf:	c3                   	ret    

c001bdb0 <SoundChannel::getBufferUsed()>:
c001bdb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdb4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bdb7:	c3                   	ret    

c001bdb8 <SoundChannel::getBufferSize()>:
c001bdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdbc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bdbf:	c3                   	ret    

c001bdc0 <SoundChannel::unbuffer(float*, int, int)>:
c001bdc0:	53                   	push   ebx
c001bdc1:	83 ec 40             	sub    esp,0x40
c001bdc4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdc8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdd0:	db 03                	fild   DWORD PTR [ebx]
c001bdd2:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bddd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bde0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bde4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bde8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdf4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdf8:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bdfb:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bdff:	50                   	push   eax
c001be00:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001be03:	e8 ac c7 fe ff       	call   c00085b4 <src_process>
c001be08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be0c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001be0f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001be12:	83 c4 0c             	add    esp,0xc
c001be15:	29 d0                	sub    eax,edx
c001be17:	c1 e0 02             	shl    eax,0x2
c001be1a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001be1d:	50                   	push   eax
c001be1e:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be21:	50                   	push   eax
c001be22:	51                   	push   ecx
c001be23:	e8 3c 48 fe ff       	call   c0000664 <memmove>
c001be28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be2c:	83 c4 48             	add    esp,0x48
c001be2f:	5b                   	pop    ebx
c001be30:	c3                   	ret    
c001be31:	90                   	nop

c001be32 <SoundChannel::buffer8(unsigned char*, int)>:
c001be32:	53                   	push   ebx
c001be33:	31 c0                	xor    eax,eax
c001be35:	83 ec 08             	sub    esp,0x8
c001be38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be3c:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be3f:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be42:	74 35                	je     c001be79 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be44:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be48:	7d 2f                	jge    c001be79 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be4e:	d9 05 34 34 02 c0    	fld    DWORD PTR ds:0xc0023434
c001be54:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be58:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be5d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be60:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be64:	40                   	inc    eax
c001be65:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be68:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be6b:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be6e:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be71:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be74:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be77:	eb c9                	jmp    c001be42 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be79:	83 c4 08             	add    esp,0x8
c001be7c:	5b                   	pop    ebx
c001be7d:	c3                   	ret    

c001be7e <SoundDevice::SoundDevice(char const*)>:
c001be7e:	83 ec 1c             	sub    esp,0x1c
c001be81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be85:	83 ec 08             	sub    esp,0x8
c001be88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be8c:	50                   	push   eax
c001be8d:	e8 96 49 ff ff       	call   c0010828 <Device::Device(char const*)>
c001be92:	83 c4 10             	add    esp,0x10
c001be95:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001be9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be9e:	89 10                	mov    DWORD PTR [eax],edx
c001bea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001beae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beb2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bebc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bec4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bec9:	7f 19                	jg     c001bee4 <SoundDevice::SoundDevice(char const*)+0x66>
c001becb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001becf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bed3:	83 c2 54             	add    edx,0x54
c001bed6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bede:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bee2:	eb e0                	jmp    c001bec4 <SoundDevice::SoundDevice(char const*)+0x46>
c001bee4:	90                   	nop
c001bee5:	83 c4 1c             	add    esp,0x1c
c001bee8:	c3                   	ret    
c001bee9:	90                   	nop

c001beea <SoundDevice::~SoundDevice()>:
c001beea:	53                   	push   ebx
c001beeb:	83 ec 18             	sub    esp,0x18
c001beee:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001bef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef7:	89 10                	mov    DWORD PTR [eax],edx
c001bef9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bf01:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bf06:	7f 46                	jg     c001bf4e <SoundDevice::~SoundDevice()+0x64>
c001bf08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf10:	83 c2 54             	add    edx,0x54
c001bf13:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bf17:	85 c0                	test   eax,eax
c001bf19:	74 2d                	je     c001bf48 <SoundDevice::~SoundDevice()+0x5e>
c001bf1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf23:	83 c2 54             	add    edx,0x54
c001bf26:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf2a:	85 db                	test   ebx,ebx
c001bf2c:	74 1a                	je     c001bf48 <SoundDevice::~SoundDevice()+0x5e>
c001bf2e:	83 ec 0c             	sub    esp,0xc
c001bf31:	53                   	push   ebx
c001bf32:	e8 ff fc ff ff       	call   c001bc36 <SoundChannel::~SoundChannel()>
c001bf37:	83 c4 10             	add    esp,0x10
c001bf3a:	83 ec 08             	sub    esp,0x8
c001bf3d:	6a 2c                	push   0x2c
c001bf3f:	53                   	push   ebx
c001bf40:	e8 b8 31 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001bf45:	83 c4 10             	add    esp,0x10
c001bf48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf4c:	eb b3                	jmp    c001bf01 <SoundDevice::~SoundDevice()+0x17>
c001bf4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf52:	83 ec 0c             	sub    esp,0xc
c001bf55:	50                   	push   eax
c001bf56:	e8 83 45 ff ff       	call   c00104de <Device::~Device()>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	90                   	nop
c001bf5f:	83 c4 18             	add    esp,0x18
c001bf62:	5b                   	pop    ebx
c001bf63:	c3                   	ret    

c001bf64 <SoundDevice::~SoundDevice()>:
c001bf64:	83 ec 0c             	sub    esp,0xc
c001bf67:	83 ec 0c             	sub    esp,0xc
c001bf6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf6e:	e8 77 ff ff ff       	call   c001beea <SoundDevice::~SoundDevice()>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	83 ec 08             	sub    esp,0x8
c001bf79:	68 e4 01 00 00       	push   0x1e4
c001bf7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf82:	e8 76 31 ff ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	83 c4 0c             	add    esp,0xc
c001bf8d:	c3                   	ret    

c001bf8e <SoundDevice::getFreeChannelNum()>:
c001bf8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf92:	31 c0                	xor    eax,eax
c001bf94:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf9c:	74 09                	je     c001bfa7 <SoundDevice::getFreeChannelNum()+0x19>
c001bf9e:	40                   	inc    eax
c001bf9f:	83 f8 20             	cmp    eax,0x20
c001bfa2:	75 f0                	jne    c001bf94 <SoundDevice::getFreeChannelNum()+0x6>
c001bfa4:	83 c8 ff             	or     eax,0xffffffff
c001bfa7:	c3                   	ret    

c001bfa8 <SoundDevice::addChannel(SoundChannel*)>:
c001bfa8:	56                   	push   esi
c001bfa9:	53                   	push   ebx
c001bfaa:	51                   	push   ecx
c001bfab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bfb3:	53                   	push   ebx
c001bfb4:	e8 d5 ff ff ff       	call   c001bf8e <SoundDevice::getFreeChannelNum()>
c001bfb9:	5a                   	pop    edx
c001bfba:	83 f8 ff             	cmp    eax,0xffffffff
c001bfbd:	74 51                	je     c001c010 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfbf:	85 f6                	test   esi,esi
c001bfc1:	74 4d                	je     c001c010 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfc3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfca:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfd1:	75 30                	jne    c001c003 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfd3:	83 ec 0c             	sub    esp,0xc
c001bfd6:	56                   	push   esi
c001bfd7:	e8 c4 fd ff ff       	call   c001bda0 <SoundChannel::getSampleRate()>
c001bfdc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfe2:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfe5:	e8 be fd ff ff       	call   c001bda8 <SoundChannel::getBits()>
c001bfea:	83 c4 0c             	add    esp,0xc
c001bfed:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bff3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bff5:	50                   	push   eax
c001bff6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bffc:	53                   	push   ebx
c001bffd:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001c000:	83 c4 10             	add    esp,0x10
c001c003:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001c009:	b8 01 00 00 00       	mov    eax,0x1
c001c00e:	eb 03                	jmp    c001c013 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001c010:	83 c8 ff             	or     eax,0xffffffff
c001c013:	5a                   	pop    edx
c001c014:	5b                   	pop    ebx
c001c015:	5e                   	pop    esi
c001c016:	c3                   	ret    
c001c017:	90                   	nop

c001c018 <SoundDevice::removeChannel(int)>:
c001c018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c01c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c020:	83 fa 1f             	cmp    edx,0x1f
c001c023:	77 23                	ja     c001c048 <SoundDevice::removeChannel(int)+0x30>
c001c025:	8d 14 90             	lea    edx,[eax+edx*4]
c001c028:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c02f:	74 17                	je     c001c048 <SoundDevice::removeChannel(int)+0x30>
c001c031:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c03b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c041:	75 05                	jne    c001c048 <SoundDevice::removeChannel(int)+0x30>
c001c043:	8b 00                	mov    eax,DWORD PTR [eax]
c001c045:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c048:	c3                   	ret    
c001c049:	90                   	nop

c001c04a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c04a:	56                   	push   esi
c001c04b:	53                   	push   ebx
c001c04c:	31 db                	xor    ebx,ebx
c001c04e:	83 ec 14             	sub    esp,0x14
c001c051:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c055:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c059:	7d 55                	jge    c001c0b0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c05b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c05f:	d9 e8                	fld1   
c001c061:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c064:	d8 0d 70 34 02 c0    	fmul   DWORD PTR ds:0xc0023470
c001c06a:	d8 0d 74 34 02 c0    	fmul   DWORD PTR ds:0xc0023474
c001c070:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c074:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c078:	d8 15 78 34 02 c0    	fcom   DWORD PTR ds:0xc0023478
c001c07e:	df e0                	fnstsw ax
c001c080:	9e                   	sahf   
c001c081:	72 08                	jb     c001c08b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c083:	dd d8                	fstp   st(0)
c001c085:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c089:	eb 22                	jmp    c001c0ad <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c08b:	d9 ee                	fldz   
c001c08d:	d8 d9                	fcomp  st(1)
c001c08f:	df e0                	fnstsw ax
c001c091:	9e                   	sahf   
c001c092:	72 08                	jb     c001c09c <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c094:	dd d8                	fstp   st(0)
c001c096:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c09a:	eb 11                	jmp    c001c0ad <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c09c:	83 ec 10             	sub    esp,0x10
c001c09f:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c0a2:	e8 c5 36 00 00       	call   c001f76c <lrintf>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c0ad:	43                   	inc    ebx
c001c0ae:	eb a5                	jmp    c001c055 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c0b0:	83 c4 14             	add    esp,0x14
c001c0b3:	5b                   	pop    ebx
c001c0b4:	5e                   	pop    esi
c001c0b5:	c3                   	ret    

c001c0b6 <SoundDevice::getAudio(int, float*, float*)>:
c001c0b6:	55                   	push   ebp
c001c0b7:	57                   	push   edi
c001c0b8:	56                   	push   esi
c001c0b9:	53                   	push   ebx
c001c0ba:	31 db                	xor    ebx,ebx
c001c0bc:	83 ec 20             	sub    esp,0x20
c001c0bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0c3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0c7:	c1 e0 02             	shl    eax,0x2
c001c0ca:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0ce:	50                   	push   eax
c001c0cf:	6a 00                	push   0x0
c001c0d1:	55                   	push   ebp
c001c0d2:	e8 fb 45 fe ff       	call   c00006d2 <memset>
c001c0d7:	83 c4 10             	add    esp,0x10
c001c0da:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0de:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0e5:	85 c0                	test   eax,eax
c001c0e7:	0f 84 8c 00 00 00    	je     c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0ed:	83 ec 0c             	sub    esp,0xc
c001c0f0:	50                   	push   eax
c001c0f1:	e8 a2 fc ff ff       	call   c001bd98 <SoundChannel::paused()>
c001c0f6:	83 c4 10             	add    esp,0x10
c001c0f9:	84 c0                	test   al,al
c001c0fb:	75 7c                	jne    c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0fd:	83 ec 0c             	sub    esp,0xc
c001c100:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c107:	e8 76 fb ff ff       	call   c001bc82 <SoundChannel::getVolume()>
c001c10c:	83 c4 10             	add    esp,0x10
c001c10f:	85 c0                	test   eax,eax
c001c111:	74 66                	je     c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c113:	83 ec 0c             	sub    esp,0xc
c001c116:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c11d:	e8 60 fb ff ff       	call   c001bc82 <SoundChannel::getVolume()>
c001c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c126:	d9 05 7c 34 02 c0    	fld    DWORD PTR ds:0xc002347c
c001c12c:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c130:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c134:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c138:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c13e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c142:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c149:	e8 72 fc ff ff       	call   c001bdc0 <SoundChannel::unbuffer(float*, int, int)>
c001c14e:	83 c4 20             	add    esp,0x20
c001c151:	31 d2                	xor    edx,edx
c001c153:	39 c2                	cmp    edx,eax
c001c155:	7d 1c                	jge    c001c173 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c157:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c15b:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c15f:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c162:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c168:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c16c:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c170:	42                   	inc    edx
c001c171:	eb e0                	jmp    c001c153 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c173:	39 c7                	cmp    edi,eax
c001c175:	7e 02                	jle    c001c179 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c177:	89 c7                	mov    edi,eax
c001c179:	43                   	inc    ebx
c001c17a:	83 fb 20             	cmp    ebx,0x20
c001c17d:	0f 85 5b ff ff ff    	jne    c001c0de <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c183:	83 c4 1c             	add    esp,0x1c
c001c186:	89 f8                	mov    eax,edi
c001c188:	5b                   	pop    ebx
c001c189:	5e                   	pop    esi
c001c18a:	5f                   	pop    edi
c001c18b:	5d                   	pop    ebp
c001c18c:	c3                   	ret    
c001c18d:	90                   	nop

c001c18e <PCI::open(int, int, void*)>:
c001c18e:	83 ec 18             	sub    esp,0x18
c001c191:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c195:	8b 10                	mov    edx,DWORD PTR [eax]
c001c197:	50                   	push   eax
c001c198:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c19b:	31 c0                	xor    eax,eax
c001c19d:	83 c4 1c             	add    esp,0x1c
c001c1a0:	c3                   	ret    
c001c1a1:	90                   	nop

c001c1a2 <PCI::close(int, int, void*)>:
c001c1a2:	31 c0                	xor    eax,eax
c001c1a4:	c3                   	ret    
c001c1a5:	90                   	nop

c001c1a6 <PCI::PCI()>:
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ad:	83 ec 08             	sub    esp,0x8
c001c1b0:	68 80 34 02 c0       	push   0xc0023480
c001c1b5:	50                   	push   eax
c001c1b6:	e8 f7 3c ff ff       	call   c000feb2 <Bus::Bus(char const*)>
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001c1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c7:	89 10                	mov    DWORD PTR [eax],edx
c001c1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1d3:	31 d2                	xor    edx,edx
c001c1d5:	88 c2                	mov    dl,al
c001c1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1db:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1ec:	31 d2                	xor    edx,edx
c001c1ee:	88 c2                	mov    dl,al
c001c1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c203:	8d 50 01             	lea    edx,[eax+0x1]
c001c206:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c20a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c210:	31 d2                	xor    edx,edx
c001c212:	88 c2                	mov    dl,al
c001c214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c218:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c21c:	83 c9 c0             	or     ecx,0xffffffc0
c001c21f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c223:	90                   	nop
c001c224:	83 c4 0c             	add    esp,0xc
c001c227:	c3                   	ret    

c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c228:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c22c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c231:	c1 e0 10             	shl    eax,0x10
c001c234:	89 ca                	mov    edx,ecx
c001c236:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c23c:	09 d0                	or     eax,edx
c001c23e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c243:	c1 e2 08             	shl    edx,0x8
c001c246:	09 d0                	or     eax,edx
c001c248:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c24d:	c1 e2 0b             	shl    edx,0xb
c001c250:	09 d0                	or     eax,edx
c001c252:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c257:	0d 00 00 00 80       	or     eax,0x80000000
c001c25c:	ef                   	out    dx,eax
c001c25d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c262:	ed                   	in     eax,dx
c001c263:	83 e1 02             	and    ecx,0x2
c001c266:	0f b6 c9             	movzx  ecx,cl
c001c269:	c1 e1 03             	shl    ecx,0x3
c001c26c:	d3 e8                	shr    eax,cl
c001c26e:	c3                   	ret    
c001c26f:	90                   	nop

c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c270:	6a 00                	push   0x0
c001c272:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c277:	50                   	push   eax
c001c278:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c27d:	50                   	push   eax
c001c27e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c283:	50                   	push   eax
c001c284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c288:	e8 9b ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c28d:	83 c4 14             	add    esp,0x14
c001c290:	c3                   	ret    
c001c291:	90                   	nop

c001c292 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c292:	6a 0e                	push   0xe
c001c294:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c299:	50                   	push   eax
c001c29a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c29f:	50                   	push   eax
c001c2a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2a5:	50                   	push   eax
c001c2a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c2aa:	e8 79 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2af:	83 c4 14             	add    esp,0x14
c001c2b2:	0f b6 c0             	movzx  eax,al
c001c2b5:	c3                   	ret    

c001c2b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c2b6:	55                   	push   ebp
c001c2b7:	57                   	push   edi
c001c2b8:	56                   	push   esi
c001c2b9:	53                   	push   ebx
c001c2ba:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2bf:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2c4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2c9:	6a 0a                	push   0xa
c001c2cb:	56                   	push   esi
c001c2cc:	55                   	push   ebp
c001c2cd:	57                   	push   edi
c001c2ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2d2:	e8 51 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2d7:	6a 0a                	push   0xa
c001c2d9:	89 c3                	mov    ebx,eax
c001c2db:	56                   	push   esi
c001c2dc:	55                   	push   ebp
c001c2dd:	57                   	push   edi
c001c2de:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2e2:	e8 41 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2e7:	83 c4 28             	add    esp,0x28
c001c2ea:	0f b6 db             	movzx  ebx,bl
c001c2ed:	25 00 ff 00 00       	and    eax,0xff00
c001c2f2:	09 d8                	or     eax,ebx
c001c2f4:	5b                   	pop    ebx
c001c2f5:	5e                   	pop    esi
c001c2f6:	5f                   	pop    edi
c001c2f7:	5d                   	pop    ebp
c001c2f8:	c3                   	ret    
c001c2f9:	90                   	nop

c001c2fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2fa:	6a 08                	push   0x8
c001c2fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c301:	50                   	push   eax
c001c302:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c307:	50                   	push   eax
c001c308:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c30d:	50                   	push   eax
c001c30e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c312:	e8 11 ff ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c317:	83 c4 14             	add    esp,0x14
c001c31a:	0f b6 c4             	movzx  eax,ah
c001c31d:	c3                   	ret    

c001c31e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c31e:	6a 08                	push   0x8
c001c320:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c325:	50                   	push   eax
c001c326:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c32b:	50                   	push   eax
c001c32c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c331:	50                   	push   eax
c001c332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c336:	e8 ed fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c33b:	83 c4 14             	add    esp,0x14
c001c33e:	c3                   	ret    
c001c33f:	90                   	nop

c001c340 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c340:	6a 3c                	push   0x3c
c001c342:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c347:	50                   	push   eax
c001c348:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c34d:	50                   	push   eax
c001c34e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c353:	50                   	push   eax
c001c354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c358:	e8 cb fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c35d:	83 c4 14             	add    esp,0x14
c001c360:	c3                   	ret    
c001c361:	90                   	nop

c001c362 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c362:	6a 18                	push   0x18
c001c364:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c369:	50                   	push   eax
c001c36a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c36f:	50                   	push   eax
c001c370:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c375:	50                   	push   eax
c001c376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c37a:	e8 a9 fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c37f:	83 c4 14             	add    esp,0x14
c001c382:	0f b6 c4             	movzx  eax,ah
c001c385:	c3                   	ret    

c001c386 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c386:	55                   	push   ebp
c001c387:	57                   	push   edi
c001c388:	56                   	push   esi
c001c389:	53                   	push   ebx
c001c38a:	50                   	push   eax
c001c38b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c38f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c394:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c39b:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c3a0:	8d 43 12             	lea    eax,[ebx+0x12]
c001c3a3:	83 c3 10             	add    ebx,0x10
c001c3a6:	0f b6 c0             	movzx  eax,al
c001c3a9:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c3ae:	50                   	push   eax
c001c3af:	51                   	push   ecx
c001c3b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3b4:	57                   	push   edi
c001c3b5:	55                   	push   ebp
c001c3b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c3ba:	e8 69 fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3bf:	0f b6 db             	movzx  ebx,bl
c001c3c2:	53                   	push   ebx
c001c3c3:	89 c6                	mov    esi,eax
c001c3c5:	c1 e6 10             	shl    esi,0x10
c001c3c8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3cc:	51                   	push   ecx
c001c3cd:	57                   	push   edi
c001c3ce:	55                   	push   ebp
c001c3cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3d3:	e8 50 fe ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3d8:	83 c4 2c             	add    esp,0x2c
c001c3db:	0f b7 c0             	movzx  eax,ax
c001c3de:	5b                   	pop    ebx
c001c3df:	09 f0                	or     eax,esi
c001c3e1:	5e                   	pop    esi
c001c3e2:	5f                   	pop    edi
c001c3e3:	5d                   	pop    ebp
c001c3e4:	c3                   	ret    
c001c3e5:	90                   	nop

c001c3e6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3e6:	53                   	push   ebx
c001c3e7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3ec:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3f1:	c1 e1 10             	shl    ecx,0x10
c001c3f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3f8:	25 fc 00 00 00       	and    eax,0xfc
c001c3fd:	09 c1                	or     ecx,eax
c001c3ff:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c404:	c1 e0 08             	shl    eax,0x8
c001c407:	09 c1                	or     ecx,eax
c001c409:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c40e:	c1 e0 0b             	shl    eax,0xb
c001c411:	09 c1                	or     ecx,eax
c001c413:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c419:	89 c8                	mov    eax,ecx
c001c41b:	ef                   	out    dx,eax
c001c41c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c421:	ed                   	in     eax,dx
c001c422:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c427:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c42c:	74 0a                	je     c001c438 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c42e:	0f b7 d8             	movzx  ebx,ax
c001c431:	89 d0                	mov    eax,edx
c001c433:	c1 e0 10             	shl    eax,0x10
c001c436:	eb 05                	jmp    c001c43d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c438:	66 31 c0             	xor    ax,ax
c001c43b:	89 d3                	mov    ebx,edx
c001c43d:	09 c3                	or     ebx,eax
c001c43f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c444:	89 c8                	mov    eax,ecx
c001c446:	ef                   	out    dx,eax
c001c447:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c44c:	89 d8                	mov    eax,ebx
c001c44e:	ef                   	out    dx,eax
c001c44f:	5b                   	pop    ebx
c001c450:	c3                   	ret    
c001c451:	90                   	nop

c001c452 <PCI::checkBus(unsigned char)>:
c001c452:	56                   	push   esi
c001c453:	31 f6                	xor    esi,esi
c001c455:	53                   	push   ebx
c001c456:	51                   	push   ecx
c001c457:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c45b:	52                   	push   edx
c001c45c:	56                   	push   esi
c001c45d:	46                   	inc    esi
c001c45e:	0f b6 c3             	movzx  eax,bl
c001c461:	50                   	push   eax
c001c462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c466:	e8 4d 03 00 00       	call   c001c7b8 <PCI::checkDevice(unsigned char, unsigned char)>
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	83 fe 20             	cmp    esi,0x20
c001c471:	75 e8                	jne    c001c45b <PCI::checkBus(unsigned char)+0x9>
c001c473:	58                   	pop    eax
c001c474:	5b                   	pop    ebx
c001c475:	5e                   	pop    esi
c001c476:	c3                   	ret    
c001c477:	90                   	nop

c001c478 <PCI::foundDevice(PCIDeviceInfo)>:
c001c478:	55                   	push   ebp
c001c479:	57                   	push   edi
c001c47a:	56                   	push   esi
c001c47b:	53                   	push   ebx
c001c47c:	83 ec 1c             	sub    esp,0x1c
c001c47f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c483:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c489:	0f 84 51 01 00 00    	je     c001c5e0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c48f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c493:	66 81 f9 06 04       	cmp    cx,0x406
c001c498:	75 2c                	jne    c001c4c6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c49a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c49f:	50                   	push   eax
c001c4a0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c4a5:	50                   	push   eax
c001c4a6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c4ab:	50                   	push   eax
c001c4ac:	56                   	push   esi
c001c4ad:	e8 b0 fe ff ff       	call   c001c362 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c4b2:	0f b6 c0             	movzx  eax,al
c001c4b5:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4bd:	83 c4 2c             	add    esp,0x2c
c001c4c0:	5b                   	pop    ebx
c001c4c1:	5e                   	pop    esi
c001c4c2:	5f                   	pop    edi
c001c4c3:	5d                   	pop    ebp
c001c4c4:	eb 8c                	jmp    c001c452 <PCI::checkBus(unsigned char)>
c001c4c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4ca:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4d4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4d8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4dc:	88 d3                	mov    bl,dl
c001c4de:	85 c0                	test   eax,eax
c001c4e0:	74 33                	je     c001c515 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4e5:	85 d2                	test   edx,edx
c001c4e7:	74 28                	je     c001c511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4e9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4ef:	31 ef                	xor    edi,ebp
c001c4f1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4f7:	75 18                	jne    c001c511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4fd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c503:	75 0c                	jne    c001c511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c505:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c50b:	0f 84 cf 00 00 00    	je     c001c5e0 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c511:	8b 00                	mov    eax,DWORD PTR [eax]
c001c513:	eb c9                	jmp    c001c4de <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c515:	66 81 f9 01 06       	cmp    cx,0x601
c001c51a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c51e:	75 18                	jne    c001c538 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c520:	83 ec 0c             	sub    esp,0xc
c001c523:	68 58 01 00 00       	push   0x158
c001c528:	e8 c1 2b ff ff       	call   c000f0ee <operator new(unsigned long)>
c001c52d:	59                   	pop    ecx
c001c52e:	89 c5                	mov    ebp,eax
c001c530:	5f                   	pop    edi
c001c531:	68 88 34 02 c0       	push   0xc0023488
c001c536:	eb 7d                	jmp    c001c5b5 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c538:	66 81 f9 01 01       	cmp    cx,0x101
c001c53d:	75 60                	jne    c001c59f <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c53f:	83 ec 0c             	sub    esp,0xc
c001c542:	68 70 02 00 00       	push   0x270
c001c547:	e8 a2 2b ff ff       	call   c000f0ee <operator new(unsigned long)>
c001c54c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c54f:	89 c5                	mov    ebp,eax
c001c551:	e8 26 03 00 00       	call   c001c87c <IDE::IDE()>
c001c556:	58                   	pop    eax
c001c557:	5a                   	pop    edx
c001c558:	55                   	push   ebp
c001c559:	56                   	push   esi
c001c55a:	e8 d9 40 ff ff       	call   c0010638 <Device::addChild(Device*)>
c001c55f:	83 ec 1c             	sub    esp,0x1c
c001c562:	b9 09 00 00 00       	mov    ecx,0x9
c001c567:	fc                   	cld    
c001c568:	89 e7                	mov    edi,esp
c001c56a:	89 de                	mov    esi,ebx
c001c56c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c56e:	55                   	push   ebp
c001c56f:	e8 a2 3f ff ff       	call   c0010516 <Device::preOpenPCI(PCIDeviceInfo)>
c001c574:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c577:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c57b:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c583:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c58b:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c593:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c596:	83 c4 4c             	add    esp,0x4c
c001c599:	5b                   	pop    ebx
c001c59a:	5e                   	pop    esi
c001c59b:	5f                   	pop    edi
c001c59c:	5d                   	pop    ebp
c001c59d:	ff e0                	jmp    eax
c001c59f:	83 ec 0c             	sub    esp,0xc
c001c5a2:	68 58 01 00 00       	push   0x158
c001c5a7:	e8 42 2b ff ff       	call   c000f0ee <operator new(unsigned long)>
c001c5ac:	59                   	pop    ecx
c001c5ad:	89 c5                	mov    ebp,eax
c001c5af:	5f                   	pop    edi
c001c5b0:	68 a7 34 02 c0       	push   0xc00234a7
c001c5b5:	55                   	push   ebp
c001c5b6:	e8 69 43 ff ff       	call   c0010924 <DriverlessDevice::DriverlessDevice(char const*)>
c001c5bb:	58                   	pop    eax
c001c5bc:	5a                   	pop    edx
c001c5bd:	55                   	push   ebp
c001c5be:	56                   	push   esi
c001c5bf:	e8 74 40 ff ff       	call   c0010638 <Device::addChild(Device*)>
c001c5c4:	b9 09 00 00 00       	mov    ecx,0x9
c001c5c9:	fc                   	cld    
c001c5ca:	89 df                	mov    edi,ebx
c001c5cc:	89 de                	mov    esi,ebx
c001c5ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5d0:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5d4:	83 c4 2c             	add    esp,0x2c
c001c5d7:	5b                   	pop    ebx
c001c5d8:	5e                   	pop    esi
c001c5d9:	5f                   	pop    edi
c001c5da:	5d                   	pop    ebp
c001c5db:	e9 36 3f ff ff       	jmp    c0010516 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5e0:	83 c4 1c             	add    esp,0x1c
c001c5e3:	5b                   	pop    ebx
c001c5e4:	5e                   	pop    esi
c001c5e5:	5f                   	pop    edi
c001c5e6:	5d                   	pop    ebp
c001c5e7:	c3                   	ret    

c001c5e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5e8:	55                   	push   ebp
c001c5e9:	57                   	push   edi
c001c5ea:	56                   	push   esi
c001c5eb:	53                   	push   ebx
c001c5ec:	83 ec 5c             	sub    esp,0x5c
c001c5ef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5f7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5ff:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c603:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c607:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c60c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c611:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c616:	6a 0c                	push   0xc
c001c618:	55                   	push   ebp
c001c619:	53                   	push   ebx
c001c61a:	57                   	push   edi
c001c61b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c622:	e8 01 fc ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c627:	83 c4 0c             	add    esp,0xc
c001c62a:	6a 00                	push   0x0
c001c62c:	68 c1 34 02 c0       	push   0xc00234c1
c001c631:	e8 ed 2b ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001c636:	55                   	push   ebp
c001c637:	53                   	push   ebx
c001c638:	57                   	push   edi
c001c639:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c640:	e8 71 fc ff ff       	call   c001c2b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c645:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c64a:	83 c4 20             	add    esp,0x20
c001c64d:	55                   	push   ebp
c001c64e:	53                   	push   ebx
c001c64f:	57                   	push   edi
c001c650:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c654:	e8 e7 fc ff ff       	call   c001c340 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c659:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c660:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c664:	55                   	push   ebp
c001c665:	53                   	push   ebx
c001c666:	57                   	push   edi
c001c667:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c66e:	e8 b5 fb ff ff       	call   c001c228 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c673:	0f b6 c4             	movzx  eax,ah
c001c676:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c67a:	83 c4 18             	add    esp,0x18
c001c67d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c681:	68 d5 34 02 c0       	push   0xc00234d5
c001c686:	e8 98 2b ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001c68b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c68f:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c693:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001c698:	83 c4 10             	add    esp,0x10
c001c69b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c6a1:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c6a8:	74 6c                	je     c001c716 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6aa:	31 f6                	xor    esi,esi
c001c6ac:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6b2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6b8:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6be:	7e 56                	jle    c001c716 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6c0:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6c3:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6ca:	39 cb                	cmp    ebx,ecx
c001c6cc:	75 45                	jne    c001c713 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6ce:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6d5:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6d9:	75 38                	jne    c001c713 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6db:	83 ec 0c             	sub    esp,0xc
c001c6de:	68 e4 34 02 c0       	push   0xc00234e4
c001c6e3:	e8 3b 2b ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001c6e8:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6ee:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6f4:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6fc:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c700:	52                   	push   edx
c001c701:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c705:	53                   	push   ebx
c001c706:	68 09 35 02 c0       	push   0xc0023509
c001c70b:	e8 13 2b ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001c710:	83 c4 20             	add    esp,0x20
c001c713:	46                   	inc    esi
c001c714:	eb 96                	jmp    c001c6ac <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c716:	31 d2                	xor    edx,edx
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	55                   	push   ebp
c001c71c:	53                   	push   ebx
c001c71d:	57                   	push   edi
c001c71e:	52                   	push   edx
c001c71f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c723:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c72a:	e8 57 fc ff ff       	call   c001c386 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c72f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c733:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c737:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c73b:	42                   	inc    edx
c001c73c:	83 c4 20             	add    esp,0x20
c001c73f:	83 fa 06             	cmp    edx,0x6
c001c742:	75 d4                	jne    c001c718 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c744:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c748:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c74c:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c750:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c754:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c758:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c75c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c761:	86 e0                	xchg   al,ah
c001c763:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c768:	55                   	push   ebp
c001c769:	53                   	push   ebx
c001c76a:	57                   	push   edi
c001c76b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c76f:	e8 86 fb ff ff       	call   c001c2fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c774:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c778:	55                   	push   ebp
c001c779:	53                   	push   ebx
c001c77a:	57                   	push   edi
c001c77b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c782:	e8 e9 fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c787:	83 ec 0c             	sub    esp,0xc
c001c78a:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c78f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c793:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c797:	b9 09 00 00 00       	mov    ecx,0x9
c001c79c:	fc                   	cld    
c001c79d:	89 e7                	mov    edi,esp
c001c79f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c7a1:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c7a8:	e8 cb fc ff ff       	call   c001c478 <PCI::foundDevice(PCIDeviceInfo)>
c001c7ad:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c7b3:	5b                   	pop    ebx
c001c7b4:	5e                   	pop    esi
c001c7b5:	5f                   	pop    edi
c001c7b6:	5d                   	pop    ebp
c001c7b7:	c3                   	ret    

c001c7b8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7b8:	55                   	push   ebp
c001c7b9:	57                   	push   edi
c001c7ba:	56                   	push   esi
c001c7bb:	53                   	push   ebx
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7c4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7c8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7cd:	6a 00                	push   0x0
c001c7cf:	56                   	push   esi
c001c7d0:	57                   	push   edi
c001c7d1:	55                   	push   ebp
c001c7d2:	e8 99 fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7d7:	6a 00                	push   0x0
c001c7d9:	56                   	push   esi
c001c7da:	57                   	push   edi
c001c7db:	55                   	push   ebp
c001c7dc:	e8 07 fe ff ff       	call   c001c5e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7e1:	83 c4 20             	add    esp,0x20
c001c7e4:	6a 00                	push   0x0
c001c7e6:	56                   	push   esi
c001c7e7:	57                   	push   edi
c001c7e8:	55                   	push   ebp
c001c7e9:	e8 a4 fa ff ff       	call   c001c292 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7ee:	83 c4 10             	add    esp,0x10
c001c7f1:	84 c0                	test   al,al
c001c7f3:	79 27                	jns    c001c81c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7f5:	bb 01 00 00 00       	mov    ebx,0x1
c001c7fa:	53                   	push   ebx
c001c7fb:	56                   	push   esi
c001c7fc:	57                   	push   edi
c001c7fd:	55                   	push   ebp
c001c7fe:	e8 6d fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c803:	83 c4 10             	add    esp,0x10
c001c806:	66 40                	inc    ax
c001c808:	74 0c                	je     c001c816 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c80a:	53                   	push   ebx
c001c80b:	56                   	push   esi
c001c80c:	57                   	push   edi
c001c80d:	55                   	push   ebp
c001c80e:	e8 d5 fd ff ff       	call   c001c5e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	43                   	inc    ebx
c001c817:	83 fb 08             	cmp    ebx,0x8
c001c81a:	75 de                	jne    c001c7fa <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c81c:	83 c4 0c             	add    esp,0xc
c001c81f:	5b                   	pop    ebx
c001c820:	5e                   	pop    esi
c001c821:	5f                   	pop    edi
c001c822:	5d                   	pop    ebp
c001c823:	c3                   	ret    

c001c824 <PCI::detect()>:
c001c824:	56                   	push   esi
c001c825:	53                   	push   ebx
c001c826:	53                   	push   ebx
c001c827:	31 db                	xor    ebx,ebx
c001c829:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c82d:	6a 00                	push   0x0
c001c82f:	6a 00                	push   0x0
c001c831:	6a 00                	push   0x0
c001c833:	56                   	push   esi
c001c834:	e8 59 fa ff ff       	call   c001c292 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	a8 80                	test   al,0x80
c001c83e:	75 21                	jne    c001c861 <PCI::detect()+0x3d>
c001c840:	51                   	push   ecx
c001c841:	51                   	push   ecx
c001c842:	6a 00                	push   0x0
c001c844:	56                   	push   esi
c001c845:	e8 08 fc ff ff       	call   c001c452 <PCI::checkBus(unsigned char)>
c001c84a:	83 c4 10             	add    esp,0x10
c001c84d:	eb 24                	jmp    c001c873 <PCI::detect()+0x4f>
c001c84f:	52                   	push   edx
c001c850:	52                   	push   edx
c001c851:	53                   	push   ebx
c001c852:	43                   	inc    ebx
c001c853:	56                   	push   esi
c001c854:	e8 f9 fb ff ff       	call   c001c452 <PCI::checkBus(unsigned char)>
c001c859:	83 c4 10             	add    esp,0x10
c001c85c:	83 fb 08             	cmp    ebx,0x8
c001c85f:	74 12                	je     c001c873 <PCI::detect()+0x4f>
c001c861:	53                   	push   ebx
c001c862:	6a 00                	push   0x0
c001c864:	6a 00                	push   0x0
c001c866:	56                   	push   esi
c001c867:	e8 04 fa ff ff       	call   c001c270 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c86c:	83 c4 10             	add    esp,0x10
c001c86f:	66 40                	inc    ax
c001c871:	74 dc                	je     c001c84f <PCI::detect()+0x2b>
c001c873:	58                   	pop    eax
c001c874:	5b                   	pop    ebx
c001c875:	5e                   	pop    esi
c001c876:	c3                   	ret    
c001c877:	90                   	nop

c001c878 <IDE::close(int, int, void*)>:
c001c878:	83 c8 ff             	or     eax,0xffffffff
c001c87b:	c3                   	ret    

c001c87c <IDE::IDE()>:
c001c87c:	83 ec 0c             	sub    esp,0xc
c001c87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c883:	83 ec 08             	sub    esp,0x8
c001c886:	68 50 35 02 c0       	push   0xc0023550
c001c88b:	50                   	push   eax
c001c88c:	e8 29 41 ff ff       	call   c00109ba <HardDiskController::HardDiskController(char const*)>
c001c891:	83 c4 10             	add    esp,0x10
c001c894:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89d:	89 10                	mov    DWORD PTR [eax],edx
c001c89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c8aa:	90                   	nop
c001c8ab:	83 c4 0c             	add    esp,0xc
c001c8ae:	c3                   	ret    
c001c8af:	90                   	nop

c001c8b0 <IDE::prepareInterrupt(unsigned char)>:
c001c8b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8b9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8c1:	c3                   	ret    

c001c8c2 <selectDrive(unsigned char, unsigned char)>:
c001c8c2:	c3                   	ret    
c001c8c3:	90                   	nop

c001c8c4 <IDE::getBase(unsigned char)>:
c001c8c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8cd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8d5:	c3                   	ret    

c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8d6:	55                   	push   ebp
c001c8d7:	57                   	push   edi
c001c8d8:	56                   	push   esi
c001c8d9:	53                   	push   ebx
c001c8da:	83 ec 1c             	sub    esp,0x1c
c001c8dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8e5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8ed:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8f0:	80 f9 03             	cmp    cl,0x3
c001c8f3:	77 51                	ja     c001c946 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8f5:	0f b6 f2             	movzx  esi,dl
c001c8f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8fc:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8ff:	0f b6 db             	movzx  ebx,bl
c001c902:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c906:	83 ca 80             	or     edx,0xffffff80
c001c909:	0f b6 d2             	movzx  edx,dl
c001c90c:	52                   	push   edx
c001c90d:	6a 0c                	push   0xc
c001c90f:	56                   	push   esi
c001c910:	57                   	push   edi
c001c911:	e8 c0 ff ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c916:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c91b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c91f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c923:	ee                   	out    dx,al
c001c924:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c929:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c92d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c931:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c935:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c93d:	83 c4 2c             	add    esp,0x2c
c001c940:	5b                   	pop    ebx
c001c941:	5e                   	pop    esi
c001c942:	5f                   	pop    edi
c001c943:	5d                   	pop    ebp
c001c944:	eb 90                	jmp    c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c946:	80 fb 07             	cmp    bl,0x7
c001c949:	77 12                	ja     c001c95d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c94b:	0f b6 d2             	movzx  edx,dl
c001c94e:	0f b6 db             	movzx  ebx,bl
c001c951:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c959:	89 da                	mov    edx,ebx
c001c95b:	eb 2f                	jmp    c001c98c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c95d:	80 fb 0d             	cmp    bl,0xd
c001c960:	77 13                	ja     c001c975 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c962:	0f b6 d2             	movzx  edx,dl
c001c965:	0f b6 db             	movzx  ebx,bl
c001c968:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c96f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c973:	eb 17                	jmp    c001c98c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c975:	80 fb 15             	cmp    bl,0x15
c001c978:	77 13                	ja     c001c98d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c97a:	0f b6 d2             	movzx  edx,dl
c001c97d:	0f b6 db             	movzx  ebx,bl
c001c980:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c988:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c98c:	ee                   	out    dx,al
c001c98d:	83 c4 1c             	add    esp,0x1c
c001c990:	5b                   	pop    ebx
c001c991:	5e                   	pop    esi
c001c992:	5f                   	pop    edi
c001c993:	5d                   	pop    ebp
c001c994:	c3                   	ret    
c001c995:	90                   	nop

c001c996 <IDE::read(unsigned char, unsigned char)>:
c001c996:	55                   	push   ebp
c001c997:	57                   	push   edi
c001c998:	56                   	push   esi
c001c999:	53                   	push   ebx
c001c99a:	83 ec 1c             	sub    esp,0x1c
c001c99d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c9a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9a5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c9a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c9ac:	3c 03                	cmp    al,0x3
c001c9ae:	77 43                	ja     c001c9f3 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c9b0:	0f b6 f2             	movzx  esi,dl
c001c9b3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c9b6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c9ba:	83 c8 80             	or     eax,0xffffff80
c001c9bd:	0f b6 c0             	movzx  eax,al
c001c9c0:	50                   	push   eax
c001c9c1:	6a 0c                	push   0xc
c001c9c3:	56                   	push   esi
c001c9c4:	57                   	push   edi
c001c9c5:	e8 0c ff ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ca:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9cf:	0f b6 c3             	movzx  eax,bl
c001c9d2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9d6:	ec                   	in     al,dx
c001c9d7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9dc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9e0:	52                   	push   edx
c001c9e1:	6a 0c                	push   0xc
c001c9e3:	56                   	push   esi
c001c9e4:	57                   	push   edi
c001c9e5:	e8 ec fe ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ea:	83 c4 20             	add    esp,0x20
c001c9ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9f1:	eb 49                	jmp    c001ca3c <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9f3:	80 fb 07             	cmp    bl,0x7
c001c9f6:	77 12                	ja     c001ca0a <IDE::read(unsigned char, unsigned char)+0x74>
c001c9f8:	0f b6 d2             	movzx  edx,dl
c001c9fb:	0f b6 c3             	movzx  eax,bl
c001c9fe:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ca06:	89 c2                	mov    edx,eax
c001ca08:	eb 31                	jmp    c001ca3b <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca0a:	80 fb 0d             	cmp    bl,0xd
c001ca0d:	77 13                	ja     c001ca22 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ca0f:	0f b6 d2             	movzx  edx,dl
c001ca12:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ca19:	0f b6 d3             	movzx  edx,bl
c001ca1c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca20:	eb 19                	jmp    c001ca3b <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca22:	31 c0                	xor    eax,eax
c001ca24:	80 fb 15             	cmp    bl,0x15
c001ca27:	77 13                	ja     c001ca3c <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca29:	0f b6 d2             	movzx  edx,dl
c001ca2c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca34:	0f b6 d3             	movzx  edx,bl
c001ca37:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca3b:	ec                   	in     al,dx
c001ca3c:	83 c4 1c             	add    esp,0x1c
c001ca3f:	5b                   	pop    ebx
c001ca40:	5e                   	pop    esi
c001ca41:	5f                   	pop    edi
c001ca42:	5d                   	pop    ebp
c001ca43:	c3                   	ret    

c001ca44 <IDE::waitInterrupt(unsigned char)>:
c001ca44:	57                   	push   edi
c001ca45:	56                   	push   esi
c001ca46:	31 f6                	xor    esi,esi
c001ca48:	53                   	push   ebx
c001ca49:	83 ec 10             	sub    esp,0x10
c001ca4c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca50:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca54:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca58:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca5d:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca64:	84 db                	test   bl,bl
c001ca66:	75 37                	jne    c001ca9f <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca68:	52                   	push   edx
c001ca69:	6a 0c                	push   0xc
c001ca6b:	50                   	push   eax
c001ca6c:	57                   	push   edi
c001ca6d:	e8 24 ff ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	a8 01                	test   al,0x1
c001ca77:	75 2e                	jne    c001caa7 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca79:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca7f:	75 16                	jne    c001ca97 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca81:	83 fe 32             	cmp    esi,0x32
c001ca84:	7e 11                	jle    c001ca97 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca86:	50                   	push   eax
c001ca87:	50                   	push   eax
c001ca88:	6a 00                	push   0x0
c001ca8a:	68 80 96 98 00       	push   0x989680
c001ca8f:	e8 25 c5 ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001ca94:	83 c4 10             	add    esp,0x10
c001ca97:	83 fe 3c             	cmp    esi,0x3c
c001ca9a:	74 0b                	je     c001caa7 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca9c:	46                   	inc    esi
c001ca9d:	eb b9                	jmp    c001ca58 <IDE::waitInterrupt(unsigned char)+0x14>
c001ca9f:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001caa7:	83 c4 10             	add    esp,0x10
c001caaa:	88 d8                	mov    al,bl
c001caac:	5b                   	pop    ebx
c001caad:	5e                   	pop    esi
c001caae:	5f                   	pop    edi
c001caaf:	c3                   	ret    

c001cab0 <ideChannel0IRQHandler(regs*, void*)>:
c001cab0:	83 ec 10             	sub    esp,0x10
c001cab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cab7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cabe:	6a 07                	push   0x7
c001cac0:	6a 00                	push   0x0
c001cac2:	50                   	push   eax
c001cac3:	e8 ce fe ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cac8:	83 c4 1c             	add    esp,0x1c
c001cacb:	c3                   	ret    

c001cacc <ideChannel1IRQHandler(regs*, void*)>:
c001cacc:	83 ec 10             	sub    esp,0x10
c001cacf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cad3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cada:	6a 07                	push   0x7
c001cadc:	6a 01                	push   0x1
c001cade:	50                   	push   eax
c001cadf:	e8 b2 fe ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cae4:	83 c4 1c             	add    esp,0x1c
c001cae7:	c3                   	ret    

c001cae8 <IDE::enableIRQs(unsigned char, bool)>:
c001cae8:	57                   	push   edi
c001cae9:	56                   	push   esi
c001caea:	be 04 00 00 00       	mov    esi,0x4
c001caef:	53                   	push   ebx
c001caf0:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001caf5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cafa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cafe:	0f 94 c0             	sete   al
c001cb01:	01 c0                	add    eax,eax
c001cb03:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001cb0a:	0f b6 c0             	movzx  eax,al
c001cb0d:	50                   	push   eax
c001cb0e:	6a 0c                	push   0xc
c001cb10:	57                   	push   edi
c001cb11:	53                   	push   ebx
c001cb12:	e8 bf fd ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb17:	83 c4 10             	add    esp,0x10
c001cb1a:	50                   	push   eax
c001cb1b:	6a 0c                	push   0xc
c001cb1d:	57                   	push   edi
c001cb1e:	53                   	push   ebx
c001cb1f:	e8 72 fe ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cb24:	83 c4 10             	add    esp,0x10
c001cb27:	4e                   	dec    esi
c001cb28:	75 f0                	jne    c001cb1a <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb2a:	5b                   	pop    ebx
c001cb2b:	5e                   	pop    esi
c001cb2c:	5f                   	pop    edi
c001cb2d:	c3                   	ret    

c001cb2e <IDE::open(int, int, void*)>:
c001cb2e:	55                   	push   ebp
c001cb2f:	57                   	push   edi
c001cb30:	56                   	push   esi
c001cb31:	53                   	push   ebx
c001cb32:	83 ec 1c             	sub    esp,0x1c
c001cb35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb39:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb42:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb4b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb52:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb59:	0f 85 b2 02 00 00    	jne    c001ce11 <IDE::open(int, int, void*)+0x2e3>
c001cb5f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb65:	88 04 24             	mov    BYTE PTR [esp],al
c001cb68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb6b:	83 e0 7f             	and    eax,0x7f
c001cb6e:	83 f8 05             	cmp    eax,0x5
c001cb71:	74 05                	je     c001cb78 <IDE::open(int, int, void*)+0x4a>
c001cb73:	83 f8 0f             	cmp    eax,0xf
c001cb76:	75 32                	jne    c001cbaa <IDE::open(int, int, void*)+0x7c>
c001cb78:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb7e:	83 e0 fc             	and    eax,0xfffffffc
c001cb81:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb88:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb8e:	83 e0 fc             	and    eax,0xfffffffc
c001cb91:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb98:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb9e:	83 e0 fc             	and    eax,0xfffffffc
c001cba1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cba8:	eb 14                	jmp    c001cbbe <IDE::open(int, int, void*)+0x90>
c001cbaa:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cbb4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbbe:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cbc5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbd0:	89 c6                	mov    esi,eax
c001cbd2:	89 e8                	mov    eax,ebp
c001cbd4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbd9:	c1 e6 10             	shl    esi,0x10
c001cbdc:	89 fa                	mov    edx,edi
c001cbde:	c1 e0 0b             	shl    eax,0xb
c001cbe1:	09 f0                	or     eax,esi
c001cbe3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbea:	c1 e6 08             	shl    esi,0x8
c001cbed:	09 c6                	or     esi,eax
c001cbef:	89 f0                	mov    eax,esi
c001cbf1:	0d 08 00 00 80       	or     eax,0x80000008
c001cbf6:	ef                   	out    dx,eax
c001cbf7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbfc:	89 ca                	mov    edx,ecx
c001cbfe:	ed                   	in     eax,dx
c001cbff:	c1 e8 10             	shr    eax,0x10
c001cc02:	3d ff ff 00 00       	cmp    eax,0xffff
c001cc07:	0f 84 f3 00 00 00    	je     c001cd00 <IDE::open(int, int, void*)+0x1d2>
c001cc0d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cc13:	89 fa                	mov    edx,edi
c001cc15:	89 f0                	mov    eax,esi
c001cc17:	ef                   	out    dx,eax
c001cc18:	b0 fe                	mov    al,0xfe
c001cc1a:	89 ca                	mov    edx,ecx
c001cc1c:	ee                   	out    dx,al
c001cc1d:	89 f0                	mov    eax,esi
c001cc1f:	89 fa                	mov    edx,edi
c001cc21:	ef                   	out    dx,eax
c001cc22:	89 ca                	mov    edx,ecx
c001cc24:	ed                   	in     eax,dx
c001cc25:	3c fe                	cmp    al,0xfe
c001cc27:	0f 85 a9 00 00 00    	jne    c001ccd6 <IDE::open(int, int, void*)+0x1a8>
c001cc2d:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001cc33:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc3a:	74 33                	je     c001cc6f <IDE::open(int, int, void*)+0x141>
c001cc3c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc42:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc46:	40                   	inc    eax
c001cc47:	83 ec 0c             	sub    esp,0xc
c001cc4a:	0f b6 c0             	movzx  eax,al
c001cc4d:	50                   	push   eax
c001cc4e:	55                   	push   ebp
c001cc4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc53:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc59:	51                   	push   ecx
c001cc5a:	e8 1d 72 ff ff       	call   c0013e7c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc5f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc64:	83 c4 1c             	add    esp,0x1c
c001cc67:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc6d:	eb 0a                	jmp    c001cc79 <IDE::open(int, int, void*)+0x14b>
c001cc6f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc79:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc80:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc87:	c1 e1 10             	shl    ecx,0x10
c001cc8a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc8f:	c1 e0 08             	shl    eax,0x8
c001cc92:	89 fa                	mov    edx,edi
c001cc94:	09 c1                	or     ecx,eax
c001cc96:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc9d:	c1 e0 0b             	shl    eax,0xb
c001cca0:	09 c1                	or     ecx,eax
c001cca2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cca8:	89 c8                	mov    eax,ecx
c001ccaa:	ef                   	out    dx,eax
c001ccab:	be fc 0c 00 00       	mov    esi,0xcfc
c001ccb0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001ccb6:	89 f2                	mov    edx,esi
c001ccb8:	ee                   	out    dx,al
c001ccb9:	89 c8                	mov    eax,ecx
c001ccbb:	89 fa                	mov    edx,edi
c001ccbd:	ef                   	out    dx,eax
c001ccbe:	89 f2                	mov    edx,esi
c001ccc0:	ed                   	in     eax,dx
c001ccc1:	0f b6 c0             	movzx  eax,al
c001ccc4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccca:	74 44                	je     c001cd10 <IDE::open(int, int, void*)+0x1e2>
c001cccc:	83 ec 0c             	sub    esp,0xc
c001cccf:	68 68 35 02 c0       	push   0xc0023568
c001ccd4:	eb 32                	jmp    c001cd08 <IDE::open(int, int, void*)+0x1da>
c001ccd6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ccdf:	75 15                	jne    c001ccf6 <IDE::open(int, int, void*)+0x1c8>
c001cce1:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cce5:	74 06                	je     c001cced <IDE::open(int, int, void*)+0x1bf>
c001cce7:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cceb:	75 09                	jne    c001ccf6 <IDE::open(int, int, void*)+0x1c8>
c001cced:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ccf4:	eb 1a                	jmp    c001cd10 <IDE::open(int, int, void*)+0x1e2>
c001ccf6:	83 ec 0c             	sub    esp,0xc
c001ccf9:	68 70 35 02 c0       	push   0xc0023570
c001ccfe:	eb 08                	jmp    c001cd08 <IDE::open(int, int, void*)+0x1da>
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	68 a1 35 02 c0       	push   0xc00235a1
c001cd08:	e8 45 8d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cd17:	79 1a                	jns    c001cd33 <IDE::open(int, int, void*)+0x205>
c001cd19:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd1f:	83 e0 fc             	and    eax,0xfffffffc
c001cd22:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd29:	83 c0 08             	add    eax,0x8
c001cd2c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd33:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd39:	89 c2                	mov    edx,eax
c001cd3b:	83 e2 0f             	and    edx,0xf
c001cd3e:	66 83 fa 08          	cmp    dx,0x8
c001cd42:	75 0a                	jne    c001cd4e <IDE::open(int, int, void*)+0x220>
c001cd44:	83 e8 02             	sub    eax,0x2
c001cd47:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd4e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd54:	89 c2                	mov    edx,eax
c001cd56:	83 e2 0f             	and    edx,0xf
c001cd59:	66 83 fa 08          	cmp    dx,0x8
c001cd5d:	75 0a                	jne    c001cd69 <IDE::open(int, int, void*)+0x23b>
c001cd5f:	83 e8 02             	sub    eax,0x2
c001cd62:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd69:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd70:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd77:	89 d0                	mov    eax,edx
c001cd79:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd7c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd80:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd84:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd87:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd8c:	0f b6 c9             	movzx  ecx,cl
c001cd8f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd96:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd99:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd9d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cda1:	8d 50 02             	lea    edx,[eax+0x2]
c001cda4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cda9:	0f b6 d2             	movzx  edx,dl
c001cdac:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cdb2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdb5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdb9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cdbd:	8d 48 03             	lea    ecx,[eax+0x3]
c001cdc0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdc5:	0f b6 c9             	movzx  ecx,cl
c001cdc8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdd1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdd5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdd9:	8d 50 04             	lea    edx,[eax+0x4]
c001cddc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cde2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cde7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cdee:	66 85 f6             	test   si,si
c001cdf1:	74 3e                	je     c001ce31 <IDE::open(int, int, void*)+0x303>
c001cdf3:	0f b6 d2             	movzx  edx,dl
c001cdf6:	83 c0 05             	add    eax,0x5
c001cdf9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdfc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ce00:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ce04:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ce0a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ce0f:	eb 20                	jmp    c001ce31 <IDE::open(int, int, void*)+0x303>
c001ce11:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ce1b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce25:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce2c:	e9 02 ff ff ff       	jmp    c001cd33 <IDE::open(int, int, void*)+0x205>
c001ce31:	52                   	push   edx
c001ce32:	52                   	push   edx
c001ce33:	6a 00                	push   0x0
c001ce35:	53                   	push   ebx
c001ce36:	e8 75 fa ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001ce3b:	59                   	pop    ecx
c001ce3c:	5e                   	pop    esi
c001ce3d:	6a 01                	push   0x1
c001ce3f:	53                   	push   ebx
c001ce40:	e8 6b fa ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001ce45:	83 c4 0c             	add    esp,0xc
c001ce48:	6a 00                	push   0x0
c001ce4a:	6a 00                	push   0x0
c001ce4c:	53                   	push   ebx
c001ce4d:	e8 96 fc ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001ce52:	83 c4 0c             	add    esp,0xc
c001ce55:	6a 00                	push   0x0
c001ce57:	6a 01                	push   0x1
c001ce59:	53                   	push   ebx
c001ce5a:	e8 89 fc ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001ce5f:	83 c4 10             	add    esp,0x10
c001ce62:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce69:	74 40                	je     c001ceab <IDE::open(int, int, void*)+0x37d>
c001ce6b:	83 ec 0c             	sub    esp,0xc
c001ce6e:	68 cb 35 02 c0       	push   0xc00235cb
c001ce73:	e8 ab 23 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001ce78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce7b:	6a 01                	push   0x1
c001ce7d:	68 b0 ca 01 c0       	push   0xc001cab0
c001ce82:	6a 0e                	push   0xe
c001ce84:	53                   	push   ebx
c001ce85:	e8 02 37 ff ff       	call   c001058c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce8a:	83 c4 14             	add    esp,0x14
c001ce8d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce93:	53                   	push   ebx
c001ce94:	6a 01                	push   0x1
c001ce96:	68 cc ca 01 c0       	push   0xc001cacc
c001ce9b:	6a 0f                	push   0xf
c001ce9d:	53                   	push   ebx
c001ce9e:	e8 e9 36 ff ff       	call   c001058c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cea3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cea9:	eb 4a                	jmp    c001cef5 <IDE::open(int, int, void*)+0x3c7>
c001ceab:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ceb5:	50                   	push   eax
c001ceb6:	6a 0f                	push   0xf
c001ceb8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cebe:	68 e7 35 02 c0       	push   0xc00235e7
c001cec3:	e8 5b 23 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001cec8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cecb:	6a 00                	push   0x0
c001cecd:	68 b0 ca 01 c0       	push   0xc001cab0
c001ced2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ced8:	53                   	push   ebx
c001ced9:	e8 ae 36 ff ff       	call   c001058c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cede:	83 c4 14             	add    esp,0x14
c001cee1:	53                   	push   ebx
c001cee2:	6a 00                	push   0x0
c001cee4:	68 cc ca 01 c0       	push   0xc001cacc
c001cee9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ceef:	53                   	push   ebx
c001cef0:	e8 97 36 ff ff       	call   c001058c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cef5:	83 c4 20             	add    esp,0x20
c001cef8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cefa:	83 ec 0c             	sub    esp,0xc
c001cefd:	53                   	push   ebx
c001cefe:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cf01:	83 c4 0c             	add    esp,0xc
c001cf04:	6a 07                	push   0x7
c001cf06:	6a 00                	push   0x0
c001cf08:	53                   	push   ebx
c001cf09:	e8 88 fa ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cf0e:	83 c4 0c             	add    esp,0xc
c001cf11:	6a 07                	push   0x7
c001cf13:	6a 01                	push   0x1
c001cf15:	53                   	push   ebx
c001cf16:	e8 7b fa ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001cf1b:	83 c4 0c             	add    esp,0xc
c001cf1e:	6a 01                	push   0x1
c001cf20:	6a 00                	push   0x0
c001cf22:	53                   	push   ebx
c001cf23:	e8 c0 fb ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001cf28:	83 c4 0c             	add    esp,0xc
c001cf2b:	6a 01                	push   0x1
c001cf2d:	6a 01                	push   0x1
c001cf2f:	53                   	push   ebx
c001cf30:	e8 b3 fb ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001cf35:	83 c4 2c             	add    esp,0x2c
c001cf38:	31 c0                	xor    eax,eax
c001cf3a:	5b                   	pop    ebx
c001cf3b:	5e                   	pop    esi
c001cf3c:	5f                   	pop    edi
c001cf3d:	5d                   	pop    ebp
c001cf3e:	c3                   	ret    
c001cf3f:	90                   	nop

c001cf40 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf40:	55                   	push   ebp
c001cf41:	57                   	push   edi
c001cf42:	56                   	push   esi
c001cf43:	53                   	push   ebx
c001cf44:	83 ec 1c             	sub    esp,0x1c
c001cf47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf53:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf57:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf5a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf5e:	80 fa 03             	cmp    dl,0x3
c001cf61:	77 5d                	ja     c001cfc0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf63:	0f b6 db             	movzx  ebx,bl
c001cf66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf6e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf71:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf75:	83 ca 80             	or     edx,0xffffff80
c001cf78:	0f b6 d2             	movzx  edx,dl
c001cf7b:	52                   	push   edx
c001cf7c:	6a 0c                	push   0xc
c001cf7e:	53                   	push   ebx
c001cf7f:	56                   	push   esi
c001cf80:	e8 51 f9 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf89:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf8e:	0f b6 c0             	movzx  eax,al
c001cf91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf95:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf99:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf9b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cfa0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cfa4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cfa8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cfac:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cfb4:	83 c4 2c             	add    esp,0x2c
c001cfb7:	5b                   	pop    ebx
c001cfb8:	5e                   	pop    esi
c001cfb9:	5f                   	pop    edi
c001cfba:	5d                   	pop    ebp
c001cfbb:	e9 16 f9 ff ff       	jmp    c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfc0:	3c 07                	cmp    al,0x7
c001cfc2:	77 10                	ja     c001cfd4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfc4:	0f b6 db             	movzx  ebx,bl
c001cfc7:	0f b6 d0             	movzx  edx,al
c001cfca:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfd2:	eb 2d                	jmp    c001d001 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfd4:	3c 0d                	cmp    al,0xd
c001cfd6:	77 13                	ja     c001cfeb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfd8:	0f b6 db             	movzx  ebx,bl
c001cfdb:	0f b6 c0             	movzx  eax,al
c001cfde:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfe5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfe9:	eb 16                	jmp    c001d001 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfeb:	3c 15                	cmp    al,0x15
c001cfed:	77 14                	ja     c001d003 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfef:	0f b6 db             	movzx  ebx,bl
c001cff2:	0f b6 c0             	movzx  eax,al
c001cff5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cffd:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001d001:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d003:	83 c4 1c             	add    esp,0x1c
c001d006:	5b                   	pop    ebx
c001d007:	5e                   	pop    esi
c001d008:	5f                   	pop    edi
c001d009:	5d                   	pop    ebp
c001d00a:	c3                   	ret    
c001d00b:	90                   	nop

c001d00c <IDE::detect()>:
c001d00c:	55                   	push   ebp
c001d00d:	57                   	push   edi
c001d00e:	56                   	push   esi
c001d00f:	53                   	push   ebx
c001d010:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d016:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001d01d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d024:	0f 85 c0 02 00 00    	jne    c001d2ea <IDE::detect()+0x2de>
c001d02a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d031:	31 f6                	xor    esi,esi
c001d033:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d03b:	31 ed                	xor    ebp,ebp
c001d03d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d041:	c1 e0 06             	shl    eax,0x6
c001d044:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d04c:	89 e8                	mov    eax,ebp
c001d04e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d052:	c1 e0 04             	shl    eax,0x4
c001d055:	83 c8 a0             	or     eax,0xffffffa0
c001d058:	0f b6 c0             	movzx  eax,al
c001d05b:	50                   	push   eax
c001d05c:	6a 06                	push   0x6
c001d05e:	56                   	push   esi
c001d05f:	53                   	push   ebx
c001d060:	e8 71 f8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d065:	83 c4 0c             	add    esp,0xc
c001d068:	6a 0c                	push   0xc
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	e8 25 f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d071:	83 c4 0c             	add    esp,0xc
c001d074:	6a 0c                	push   0xc
c001d076:	56                   	push   esi
c001d077:	53                   	push   ebx
c001d078:	e8 19 f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d07d:	83 c4 0c             	add    esp,0xc
c001d080:	6a 0c                	push   0xc
c001d082:	56                   	push   esi
c001d083:	53                   	push   ebx
c001d084:	e8 0d f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d089:	83 c4 0c             	add    esp,0xc
c001d08c:	6a 0c                	push   0xc
c001d08e:	56                   	push   esi
c001d08f:	53                   	push   ebx
c001d090:	e8 01 f9 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d095:	68 ec 00 00 00       	push   0xec
c001d09a:	6a 07                	push   0x7
c001d09c:	56                   	push   esi
c001d09d:	53                   	push   ebx
c001d09e:	e8 33 f8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0a3:	83 c4 1c             	add    esp,0x1c
c001d0a6:	6a 0c                	push   0xc
c001d0a8:	56                   	push   esi
c001d0a9:	53                   	push   ebx
c001d0aa:	e8 e7 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0af:	83 c4 0c             	add    esp,0xc
c001d0b2:	6a 0c                	push   0xc
c001d0b4:	56                   	push   esi
c001d0b5:	53                   	push   ebx
c001d0b6:	e8 db f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0bb:	83 c4 0c             	add    esp,0xc
c001d0be:	6a 0c                	push   0xc
c001d0c0:	56                   	push   esi
c001d0c1:	53                   	push   ebx
c001d0c2:	e8 cf f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0c7:	83 c4 0c             	add    esp,0xc
c001d0ca:	6a 0c                	push   0xc
c001d0cc:	56                   	push   esi
c001d0cd:	53                   	push   ebx
c001d0ce:	e8 c3 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0d3:	83 c4 0c             	add    esp,0xc
c001d0d6:	6a 0c                	push   0xc
c001d0d8:	56                   	push   esi
c001d0d9:	53                   	push   ebx
c001d0da:	e8 b7 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	84 c0                	test   al,al
c001d0e4:	0f 84 8b 01 00 00    	je     c001d275 <IDE::detect()+0x269>
c001d0ea:	31 ff                	xor    edi,edi
c001d0ec:	50                   	push   eax
c001d0ed:	6a 0c                	push   0xc
c001d0ef:	56                   	push   esi
c001d0f0:	53                   	push   ebx
c001d0f1:	e8 a0 f8 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	a8 01                	test   al,0x1
c001d0fb:	0f 85 8e 01 00 00    	jne    c001d28f <IDE::detect()+0x283>
c001d101:	84 c0                	test   al,al
c001d103:	78 04                	js     c001d109 <IDE::detect()+0xfd>
c001d105:	a8 08                	test   al,0x8
c001d107:	75 27                	jne    c001d130 <IDE::detect()+0x124>
c001d109:	47                   	inc    edi
c001d10a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d110:	7e da                	jle    c001d0ec <IDE::detect()+0xe0>
c001d112:	50                   	push   eax
c001d113:	50                   	push   eax
c001d114:	6a 00                	push   0x0
c001d116:	68 40 4b 4c 00       	push   0x4c4b40
c001d11b:	e8 99 be ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001d120:	83 c4 10             	add    esp,0x10
c001d123:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d129:	75 c1                	jne    c001d0ec <IDE::detect()+0xe0>
c001d12b:	e9 5f 01 00 00       	jmp    c001d28f <IDE::detect()+0x283>
c001d130:	31 c9                	xor    ecx,ecx
c001d132:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d136:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d13a:	83 ec 0c             	sub    esp,0xc
c001d13d:	68 80 00 00 00       	push   0x80
c001d142:	57                   	push   edi
c001d143:	6a 00                	push   0x0
c001d145:	56                   	push   esi
c001d146:	53                   	push   ebx
c001d147:	e8 f4 fd ff ff       	call   c001cf40 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d14c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d150:	c1 e0 06             	shl    eax,0x6
c001d153:	01 d8                	add    eax,ebx
c001d155:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d15a:	89 d1                	mov    ecx,edx
c001d15c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d163:	89 f2                	mov    edx,esi
c001d165:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d16c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d172:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d176:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d17c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d180:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d187:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d18f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d196:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d19e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d1a4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d1ab:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d1b1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1b5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d1b9:	83 c4 20             	add    esp,0x20
c001d1bc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1bf:	83 c7 02             	add    edi,0x2
c001d1c2:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1c8:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1cb:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1d1:	83 c0 02             	add    eax,0x2
c001d1d4:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1d8:	75 e2                	jne    c001d1bc <IDE::detect()+0x1b0>
c001d1da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1de:	c1 e0 06             	shl    eax,0x6
c001d1e1:	01 d8                	add    eax,ebx
c001d1e3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1e9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1f0:	66 c1 ea 09          	shr    dx,0x9
c001d1f4:	83 e2 01             	and    edx,0x1
c001d1f7:	84 c9                	test   cl,cl
c001d1f9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1ff:	75 2f                	jne    c001d230 <IDE::detect()+0x224>
c001d201:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d207:	85 c0                	test   eax,eax
c001d209:	74 66                	je     c001d271 <IDE::detect()+0x265>
c001d20b:	50                   	push   eax
c001d20c:	55                   	push   ebp
c001d20d:	56                   	push   esi
c001d20e:	68 03 36 02 c0       	push   0xc0023603
c001d213:	e8 0b 20 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d218:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d21f:	e8 ca 1e ff ff       	call   c000f0ee <operator new(unsigned long)>
c001d224:	89 c7                	mov    edi,eax
c001d226:	89 04 24             	mov    DWORD PTR [esp],eax
c001d229:	e8 f4 02 00 00       	call   c001d522 <ATA::ATA()>
c001d22e:	eb 28                	jmp    c001d258 <IDE::detect()+0x24c>
c001d230:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d236:	55                   	push   ebp
c001d237:	56                   	push   esi
c001d238:	68 32 36 02 c0       	push   0xc0023632
c001d23d:	e8 e1 1f ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d242:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d249:	e8 a0 1e ff ff       	call   c000f0ee <operator new(unsigned long)>
c001d24e:	89 c7                	mov    edi,eax
c001d250:	89 04 24             	mov    DWORD PTR [esp],eax
c001d253:	e8 1e 09 00 00       	call   c001db76 <ATAPI::ATAPI()>
c001d258:	5a                   	pop    edx
c001d259:	59                   	pop    ecx
c001d25a:	57                   	push   edi
c001d25b:	53                   	push   ebx
c001d25c:	e8 d7 33 ff ff       	call   c0010638 <Device::addChild(Device*)>
c001d261:	8b 07                	mov    eax,DWORD PTR [edi]
c001d263:	53                   	push   ebx
c001d264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d268:	6a 00                	push   0x0
c001d26a:	57                   	push   edi
c001d26b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d26e:	83 c4 20             	add    esp,0x20
c001d271:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d275:	4d                   	dec    ebp
c001d276:	74 0a                	je     c001d282 <IDE::detect()+0x276>
c001d278:	bd 01 00 00 00       	mov    ebp,0x1
c001d27d:	e9 bb fd ff ff       	jmp    c001d03d <IDE::detect()+0x31>
c001d282:	4e                   	dec    esi
c001d283:	74 65                	je     c001d2ea <IDE::detect()+0x2de>
c001d285:	be 01 00 00 00       	mov    esi,0x1
c001d28a:	e9 ac fd ff ff       	jmp    c001d03b <IDE::detect()+0x2f>
c001d28f:	50                   	push   eax
c001d290:	6a 04                	push   0x4
c001d292:	56                   	push   esi
c001d293:	53                   	push   ebx
c001d294:	e8 fd f6 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d299:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d29d:	83 c4 0c             	add    esp,0xc
c001d2a0:	6a 05                	push   0x5
c001d2a2:	56                   	push   esi
c001d2a3:	53                   	push   ebx
c001d2a4:	e8 ed f6 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d2b0:	80 fa 14             	cmp    dl,0x14
c001d2b3:	74 2f                	je     c001d2e4 <IDE::detect()+0x2d8>
c001d2b5:	80 fa 69             	cmp    dl,0x69
c001d2b8:	75 bb                	jne    c001d275 <IDE::detect()+0x269>
c001d2ba:	3c 96                	cmp    al,0x96
c001d2bc:	75 b7                	jne    c001d275 <IDE::detect()+0x269>
c001d2be:	68 a1 00 00 00       	push   0xa1
c001d2c3:	6a 07                	push   0x7
c001d2c5:	56                   	push   esi
c001d2c6:	53                   	push   ebx
c001d2c7:	e8 0a f6 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2cc:	5f                   	pop    edi
c001d2cd:	58                   	pop    eax
c001d2ce:	6a 00                	push   0x0
c001d2d0:	68 40 42 0f 00       	push   0xf4240
c001d2d5:	e8 df bc ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001d2da:	83 c4 10             	add    esp,0x10
c001d2dd:	b1 01                	mov    cl,0x1
c001d2df:	e9 4e fe ff ff       	jmp    c001d132 <IDE::detect()+0x126>
c001d2e4:	3c eb                	cmp    al,0xeb
c001d2e6:	75 cd                	jne    c001d2b5 <IDE::detect()+0x2a9>
c001d2e8:	eb d4                	jmp    c001d2be <IDE::detect()+0x2b2>
c001d2ea:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2f0:	5b                   	pop    ebx
c001d2f1:	5e                   	pop    esi
c001d2f2:	5f                   	pop    edi
c001d2f3:	5d                   	pop    ebp
c001d2f4:	c3                   	ret    
c001d2f5:	90                   	nop

c001d2f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2f6:	55                   	push   ebp
c001d2f7:	57                   	push   edi
c001d2f8:	56                   	push   esi
c001d2f9:	53                   	push   ebx
c001d2fa:	83 ec 1c             	sub    esp,0x1c
c001d2fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d301:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d305:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d309:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d30d:	88 c3                	mov    bl,al
c001d30f:	84 c0                	test   al,al
c001d311:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d315:	0f 84 67 01 00 00    	je     c001d482 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d31b:	83 ec 0c             	sub    esp,0xc
c001d31e:	68 63 36 02 c0       	push   0xc0023663
c001d323:	e8 fb 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d328:	83 c4 10             	add    esp,0x10
c001d32b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d32f:	3c 01                	cmp    al,0x1
c001d331:	75 17                	jne    c001d34a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d333:	83 ec 0c             	sub    esp,0xc
c001d336:	b3 13                	mov    bl,0x13
c001d338:	68 6f 36 02 c0       	push   0xc002366f
c001d33d:	e8 e1 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d342:	83 c4 10             	add    esp,0x10
c001d345:	e9 25 01 00 00       	jmp    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d34a:	3c 02                	cmp    al,0x2
c001d34c:	0f 85 ef 00 00 00    	jne    c001d441 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d352:	01 f6                	add    esi,esi
c001d354:	52                   	push   edx
c001d355:	09 ee                	or     esi,ebp
c001d357:	6a 01                	push   0x1
c001d359:	89 f0                	mov    eax,esi
c001d35b:	0f b6 f0             	movzx  esi,al
c001d35e:	c1 e6 06             	shl    esi,0x6
c001d361:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d369:	50                   	push   eax
c001d36a:	57                   	push   edi
c001d36b:	e8 26 f6 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d370:	83 c4 10             	add    esp,0x10
c001d373:	89 c6                	mov    esi,eax
c001d375:	a8 01                	test   al,0x1
c001d377:	74 12                	je     c001d38b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d379:	83 ec 0c             	sub    esp,0xc
c001d37c:	b3 07                	mov    bl,0x7
c001d37e:	68 84 36 02 c0       	push   0xc0023684
c001d383:	e8 9b 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d388:	83 c4 10             	add    esp,0x10
c001d38b:	f7 c6 02 00 00 00    	test   esi,0x2
c001d391:	74 12                	je     c001d3a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d393:	83 ec 0c             	sub    esp,0xc
c001d396:	b3 03                	mov    bl,0x3
c001d398:	68 a2 36 02 c0       	push   0xc00236a2
c001d39d:	e8 81 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	f7 c6 04 00 00 00    	test   esi,0x4
c001d3ab:	74 12                	je     c001d3bf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d3ad:	83 ec 0c             	sub    esp,0xc
c001d3b0:	b3 14                	mov    bl,0x14
c001d3b2:	68 c2 36 02 c0       	push   0xc00236c2
c001d3b7:	e8 67 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d3bc:	83 c4 10             	add    esp,0x10
c001d3bf:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3c5:	74 12                	je     c001d3d9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3c7:	83 ec 0c             	sub    esp,0xc
c001d3ca:	b3 03                	mov    bl,0x3
c001d3cc:	68 a2 36 02 c0       	push   0xc00236a2
c001d3d1:	e8 4d 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d3d6:	83 c4 10             	add    esp,0x10
c001d3d9:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3df:	74 12                	je     c001d3f3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3e1:	83 ec 0c             	sub    esp,0xc
c001d3e4:	b3 15                	mov    bl,0x15
c001d3e6:	68 da 36 02 c0       	push   0xc00236da
c001d3eb:	e8 33 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3f9:	74 12                	je     c001d40d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3fb:	83 ec 0c             	sub    esp,0xc
c001d3fe:	b3 03                	mov    bl,0x3
c001d400:	68 a2 36 02 c0       	push   0xc00236a2
c001d405:	e8 19 1e ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d40a:	83 c4 10             	add    esp,0x10
c001d40d:	f7 c6 40 00 00 00    	test   esi,0x40
c001d413:	74 12                	je     c001d427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	b3 16                	mov    bl,0x16
c001d41a:	68 f4 36 02 c0       	push   0xc00236f4
c001d41f:	e8 ff 1d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d424:	83 c4 10             	add    esp,0x10
c001d427:	89 f0                	mov    eax,esi
c001d429:	84 c0                	test   al,al
c001d42b:	79 42                	jns    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	b3 0d                	mov    bl,0xd
c001d432:	68 15 37 02 c0       	push   0xc0023715
c001d437:	e8 e7 1d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d43c:	83 c4 10             	add    esp,0x10
c001d43f:	eb 2e                	jmp    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d441:	3c 03                	cmp    al,0x3
c001d443:	75 14                	jne    c001d459 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	b3 17                	mov    bl,0x17
c001d44a:	68 29 37 02 c0       	push   0xc0023729
c001d44f:	e8 cf 1d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	eb 16                	jmp    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d459:	3c 04                	cmp    al,0x4
c001d45b:	75 12                	jne    c001d46f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d45d:	83 ec 0c             	sub    esp,0xc
c001d460:	b3 08                	mov    bl,0x8
c001d462:	68 3f 37 02 c0       	push   0xc002373f
c001d467:	e8 b7 1d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	50                   	push   eax
c001d470:	50                   	push   eax
c001d471:	0f b6 c3             	movzx  eax,bl
c001d474:	50                   	push   eax
c001d475:	68 57 37 02 c0       	push   0xc0023757
c001d47a:	e8 a4 1d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	83 c4 1c             	add    esp,0x1c
c001d485:	88 d8                	mov    al,bl
c001d487:	5b                   	pop    ebx
c001d488:	5e                   	pop    esi
c001d489:	5f                   	pop    edi
c001d48a:	5d                   	pop    ebp
c001d48b:	c3                   	ret    

c001d48c <IDE::polling(unsigned char, unsigned int)>:
c001d48c:	55                   	push   ebp
c001d48d:	bd 04 00 00 00       	mov    ebp,0x4
c001d492:	57                   	push   edi
c001d493:	56                   	push   esi
c001d494:	53                   	push   ebx
c001d495:	83 ec 0c             	sub    esp,0xc
c001d498:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d49c:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d4a0:	52                   	push   edx
c001d4a1:	6a 0c                	push   0xc
c001d4a3:	0f b6 f3             	movzx  esi,bl
c001d4a6:	56                   	push   esi
c001d4a7:	57                   	push   edi
c001d4a8:	e8 e9 f4 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d4ad:	83 c4 10             	add    esp,0x10
c001d4b0:	4d                   	dec    ebp
c001d4b1:	75 ed                	jne    c001d4a0 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d4b3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4b8:	50                   	push   eax
c001d4b9:	6a 0c                	push   0xc
c001d4bb:	56                   	push   esi
c001d4bc:	57                   	push   edi
c001d4bd:	e8 d4 f4 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d4c2:	83 c4 10             	add    esp,0x10
c001d4c5:	a8 01                	test   al,0x1
c001d4c7:	74 12                	je     c001d4db <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4c9:	83 ec 0c             	sub    esp,0xc
c001d4cc:	68 71 37 02 c0       	push   0xc0023771
c001d4d1:	e8 4d 1d ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	eb 17                	jmp    c001d4f2 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4db:	a8 20                	test   al,0x20
c001d4dd:	75 0f                	jne    c001d4ee <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4df:	4b                   	dec    ebx
c001d4e0:	74 10                	je     c001d4f2 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4e2:	84 c0                	test   al,al
c001d4e4:	78 d2                	js     c001d4b8 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4e6:	a8 08                	test   al,0x8
c001d4e8:	74 ce                	je     c001d4b8 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4ea:	31 c0                	xor    eax,eax
c001d4ec:	eb 06                	jmp    c001d4f4 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4ee:	b0 01                	mov    al,0x1
c001d4f0:	eb 02                	jmp    c001d4f4 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4f2:	b0 02                	mov    al,0x2
c001d4f4:	83 c4 0c             	add    esp,0xc
c001d4f7:	5b                   	pop    ebx
c001d4f8:	5e                   	pop    esi
c001d4f9:	5f                   	pop    edi
c001d4fa:	5d                   	pop    ebp
c001d4fb:	c3                   	ret    

c001d4fc <ATA::close(int, int, void*)>:
c001d4fc:	83 ec 0c             	sub    esp,0xc
c001d4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d503:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d509:	85 c0                	test   eax,eax
c001d50b:	74 0c                	je     c001d519 <ATA::close(int, int, void*)+0x1d>
c001d50d:	83 ec 0c             	sub    esp,0xc
c001d510:	8b 10                	mov    edx,DWORD PTR [eax]
c001d512:	50                   	push   eax
c001d513:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	31 c0                	xor    eax,eax
c001d51b:	83 c4 0c             	add    esp,0xc
c001d51e:	c3                   	ret    
c001d51f:	90                   	nop

c001d520 <ATA::powerSaving(PowerSavingLevel)>:
c001d520:	c3                   	ret    
c001d521:	90                   	nop

c001d522 <ATA::ATA()>:
c001d522:	83 ec 0c             	sub    esp,0xc
c001d525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d529:	83 ec 04             	sub    esp,0x4
c001d52c:	68 00 02 00 00       	push   0x200
c001d531:	68 b4 37 02 c0       	push   0xc00237b4
c001d536:	50                   	push   eax
c001d537:	e8 02 35 ff ff       	call   c0010a3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001d544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d548:	89 10                	mov    DWORD PTR [eax],edx
c001d54a:	90                   	nop
c001d54b:	83 c4 0c             	add    esp,0xc
c001d54e:	c3                   	ret    
c001d54f:	90                   	nop

c001d550 <ATA::flush(bool)>:
c001d550:	53                   	push   ebx
c001d551:	83 ec 08             	sub    esp,0x8
c001d554:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d559:	19 c0                	sbb    eax,eax
c001d55b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d55f:	83 e0 fd             	and    eax,0xfffffffd
c001d562:	05 ea 00 00 00       	add    eax,0xea
c001d567:	50                   	push   eax
c001d568:	6a 07                	push   0x7
c001d56a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d571:	50                   	push   eax
c001d572:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d578:	e8 59 f3 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d57d:	83 c4 0c             	add    esp,0xc
c001d580:	6a 00                	push   0x0
c001d582:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d589:	50                   	push   eax
c001d58a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d590:	e8 f7 fe ff ff       	call   c001d48c <IDE::polling(unsigned char, unsigned int)>
c001d595:	83 c4 18             	add    esp,0x18
c001d598:	5b                   	pop    ebx
c001d599:	c3                   	ret    

c001d59a <ATA::readyForCommand()>:
c001d59a:	56                   	push   esi
c001d59b:	53                   	push   ebx
c001d59c:	31 db                	xor    ebx,ebx
c001d59e:	50                   	push   eax
c001d59f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5a3:	50                   	push   eax
c001d5a4:	6a 0c                	push   0xc
c001d5a6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d5ad:	50                   	push   eax
c001d5ae:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5b4:	e8 dd f3 ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	a8 88                	test   al,0x88
c001d5be:	74 23                	je     c001d5e3 <ATA::readyForCommand()+0x49>
c001d5c0:	43                   	inc    ebx
c001d5c1:	83 fb 63             	cmp    ebx,0x63
c001d5c4:	7e dd                	jle    c001d5a3 <ATA::readyForCommand()+0x9>
c001d5c6:	51                   	push   ecx
c001d5c7:	51                   	push   ecx
c001d5c8:	6a 00                	push   0x0
c001d5ca:	68 40 42 0f 00       	push   0xf4240
c001d5cf:	e8 e5 b9 ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001d5d4:	83 c4 10             	add    esp,0x10
c001d5d7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5dd:	75 c4                	jne    c001d5a3 <ATA::readyForCommand()+0x9>
c001d5df:	31 c0                	xor    eax,eax
c001d5e1:	eb 02                	jmp    c001d5e5 <ATA::readyForCommand()+0x4b>
c001d5e3:	b0 01                	mov    al,0x1
c001d5e5:	5a                   	pop    edx
c001d5e6:	5b                   	pop    ebx
c001d5e7:	5e                   	pop    esi
c001d5e8:	c3                   	ret    
c001d5e9:	90                   	nop

c001d5ea <ATA::access(unsigned long long, int, void*, bool)>:
c001d5ea:	55                   	push   ebp
c001d5eb:	57                   	push   edi
c001d5ec:	56                   	push   esi
c001d5ed:	53                   	push   ebx
c001d5ee:	83 ec 2c             	sub    esp,0x2c
c001d5f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5f9:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5fc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d600:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d603:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d607:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d60b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d611:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d615:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d61b:	c1 e0 06             	shl    eax,0x6
c001d61e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d622:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d62a:	74 5d                	je     c001d689 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d62c:	89 fa                	mov    edx,edi
c001d62e:	89 f0                	mov    eax,esi
c001d630:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d634:	c1 ea 1c             	shr    edx,0x1c
c001d637:	89 d1                	mov    ecx,edx
c001d639:	09 c1                	or     ecx,eax
c001d63b:	74 25                	je     c001d662 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d63d:	31 ed                	xor    ebp,ebp
c001d63f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d646:	89 fa                	mov    edx,edi
c001d648:	89 f0                	mov    eax,esi
c001d64a:	0f ad d0             	shrd   eax,edx,cl
c001d64d:	d3 ea                	shr    edx,cl
c001d64f:	f6 c1 20             	test   cl,0x20
c001d652:	74 02                	je     c001d656 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d654:	89 d0                	mov    eax,edx
c001d656:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d65a:	45                   	inc    ebp
c001d65b:	83 fd 06             	cmp    ebp,0x6
c001d65e:	75 df                	jne    c001d63f <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d660:	eb 73                	jmp    c001d6d5 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d662:	89 f0                	mov    eax,esi
c001d664:	89 fa                	mov    edx,edi
c001d666:	0f ac d0 10          	shrd   eax,edx,0x10
c001d66a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d66f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d673:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d67a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d67f:	c1 ee 18             	shr    esi,0x18
c001d682:	bf 01 00 00 00       	mov    edi,0x1
c001d687:	eb 53                	jmp    c001d6dc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d689:	6a 00                	push   0x0
c001d68b:	6a 3f                	push   0x3f
c001d68d:	57                   	push   edi
c001d68e:	56                   	push   esi
c001d68f:	e8 88 1f 00 00       	call   c001f61c <__umoddi3>
c001d694:	83 c4 10             	add    esp,0x10
c001d697:	40                   	inc    eax
c001d698:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d69c:	6a 00                	push   0x0
c001d69e:	68 f0 03 00 00       	push   0x3f0
c001d6a3:	57                   	push   edi
c001d6a4:	56                   	push   esi
c001d6a5:	e8 72 1e 00 00       	call   c001f51c <__udivdi3>
c001d6aa:	83 c4 10             	add    esp,0x10
c001d6ad:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d6b2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d6b9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6be:	6a 00                	push   0x0
c001d6c0:	6a 3f                	push   0x3f
c001d6c2:	57                   	push   edi
c001d6c3:	31 ff                	xor    edi,edi
c001d6c5:	56                   	push   esi
c001d6c6:	e8 51 1e 00 00       	call   c001f51c <__udivdi3>
c001d6cb:	89 c6                	mov    esi,eax
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	83 e6 0f             	and    esi,0xf
c001d6d3:	eb 07                	jmp    c001d6dc <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6d5:	31 f6                	xor    esi,esi
c001d6d7:	bf 02 00 00 00       	mov    edi,0x2
c001d6dc:	50                   	push   eax
c001d6dd:	6a 00                	push   0x0
c001d6df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6e6:	50                   	push   eax
c001d6e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6eb:	e8 f8 f3 ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001d6f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6f3:	e8 a2 fe ff ff       	call   c001d59a <ATA::readyForCommand()>
c001d6f8:	83 c4 10             	add    esp,0x10
c001d6fb:	84 c0                	test   al,al
c001d6fd:	75 0a                	jne    c001d709 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6ff:	be 01 00 00 00       	mov    esi,0x1
c001d704:	e9 79 02 00 00       	jmp    c001d982 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d709:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d70f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d715:	c1 e0 04             	shl    eax,0x4
c001d718:	09 c6                	or     esi,eax
c001d71a:	89 f8                	mov    eax,edi
c001d71c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d723:	84 c0                	test   al,al
c001d725:	75 05                	jne    c001d72c <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d727:	83 ce a0             	or     esi,0xffffffa0
c001d72a:	eb 03                	jmp    c001d72f <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d72c:	83 ce e0             	or     esi,0xffffffe0
c001d72f:	89 f0                	mov    eax,esi
c001d731:	0f b6 f0             	movzx  esi,al
c001d734:	56                   	push   esi
c001d735:	6a 06                	push   0x6
c001d737:	51                   	push   ecx
c001d738:	52                   	push   edx
c001d739:	e8 98 f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d73e:	83 c4 10             	add    esp,0x10
c001d741:	6a 00                	push   0x0
c001d743:	6a 01                	push   0x1
c001d745:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d74c:	50                   	push   eax
c001d74d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d753:	e8 7e f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d758:	89 f8                	mov    eax,edi
c001d75a:	83 c4 10             	add    esp,0x10
c001d75d:	3c 02                	cmp    al,0x2
c001d75f:	75 6e                	jne    c001d7cf <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d761:	6a 00                	push   0x0
c001d763:	6a 08                	push   0x8
c001d765:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d76c:	50                   	push   eax
c001d76d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d773:	e8 5e f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d778:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d77d:	50                   	push   eax
c001d77e:	6a 09                	push   0x9
c001d780:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d787:	50                   	push   eax
c001d788:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d78e:	e8 43 f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d793:	83 c4 20             	add    esp,0x20
c001d796:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d79b:	50                   	push   eax
c001d79c:	6a 0a                	push   0xa
c001d79e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7a5:	50                   	push   eax
c001d7a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7ac:	e8 25 f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d7b6:	50                   	push   eax
c001d7b7:	6a 0b                	push   0xb
c001d7b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7c0:	50                   	push   eax
c001d7c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7c7:	e8 0a f1 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7cc:	83 c4 20             	add    esp,0x20
c001d7cf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7d4:	50                   	push   eax
c001d7d5:	6a 02                	push   0x2
c001d7d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7de:	50                   	push   eax
c001d7df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7e5:	e8 ec f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ea:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7ef:	50                   	push   eax
c001d7f0:	6a 03                	push   0x3
c001d7f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7f9:	50                   	push   eax
c001d7fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d800:	e8 d1 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d805:	83 c4 20             	add    esp,0x20
c001d808:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d80d:	50                   	push   eax
c001d80e:	6a 04                	push   0x4
c001d810:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d817:	50                   	push   eax
c001d818:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d81e:	e8 b3 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d823:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d828:	50                   	push   eax
c001d829:	6a 05                	push   0x5
c001d82b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d832:	50                   	push   eax
c001d833:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d839:	e8 98 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d83e:	83 c4 20             	add    esp,0x20
c001d841:	89 f8                	mov    eax,edi
c001d843:	3c 02                	cmp    al,0x2
c001d845:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d84a:	75 06                	jne    c001d852 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d84c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d850:	75 40                	jne    c001d892 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d852:	89 f8                	mov    eax,edi
c001d854:	3c 02                	cmp    al,0x2
c001d856:	0f 95 c1             	setne  cl
c001d859:	74 0b                	je     c001d866 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d85b:	b8 30 00 00 00       	mov    eax,0x30
c001d860:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d864:	75 31                	jne    c001d897 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d866:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d869:	83 f2 01             	xor    edx,0x1
c001d86c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d871:	74 09                	je     c001d87c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d873:	b8 24 00 00 00       	mov    eax,0x24
c001d878:	84 d2                	test   dl,dl
c001d87a:	75 1b                	jne    c001d897 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d87c:	84 c9                	test   cl,cl
c001d87e:	0f 84 7b fe ff ff    	je     c001d6ff <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d884:	b8 20 00 00 00       	mov    eax,0x20
c001d889:	84 d2                	test   dl,dl
c001d88b:	75 0a                	jne    c001d897 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d88d:	e9 6d fe ff ff       	jmp    c001d6ff <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d892:	b8 34 00 00 00       	mov    eax,0x34
c001d897:	50                   	push   eax
c001d898:	6a 07                	push   0x7
c001d89a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8a1:	50                   	push   eax
c001d8a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8a8:	e8 29 f0 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8ad:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d8b1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d8b5:	83 c4 10             	add    esp,0x10
c001d8b8:	85 f6                	test   esi,esi
c001d8ba:	0f 84 a9 00 00 00    	je     c001d969 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8c0:	50                   	push   eax
c001d8c1:	6a 01                	push   0x1
c001d8c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8ca:	50                   	push   eax
c001d8cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8d1:	e8 b6 fb ff ff       	call   c001d48c <IDE::polling(unsigned char, unsigned int)>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8df:	84 c0                	test   al,al
c001d8e1:	74 1d                	je     c001d900 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8e3:	0f b6 f0             	movzx  esi,al
c001d8e6:	56                   	push   esi
c001d8e7:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8ee:	0f b6 d2             	movzx  edx,dl
c001d8f1:	50                   	push   eax
c001d8f2:	52                   	push   edx
c001d8f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8f9:	e8 f8 f9 ff ff       	call   c001d2f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8fe:	eb 7f                	jmp    c001d97f <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d900:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d905:	74 41                	je     c001d948 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d907:	31 c9                	xor    ecx,ecx
c001d909:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d90d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d911:	50                   	push   eax
c001d912:	50                   	push   eax
c001d913:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d91a:	50                   	push   eax
c001d91b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d921:	e8 9e ef ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001d926:	89 c2                	mov    edx,eax
c001d928:	89 e8                	mov    eax,ebp
c001d92a:	66 ef                	out    dx,ax
c001d92c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d930:	83 c4 10             	add    esp,0x10
c001d933:	41                   	inc    ecx
c001d934:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d93a:	75 cd                	jne    c001d909 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d93c:	4e                   	dec    esi
c001d93d:	81 c7 00 02 00 00    	add    edi,0x200
c001d943:	e9 70 ff ff ff       	jmp    c001d8b8 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d948:	51                   	push   ecx
c001d949:	51                   	push   ecx
c001d94a:	0f b6 d2             	movzx  edx,dl
c001d94d:	52                   	push   edx
c001d94e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d954:	e8 6b ef ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001d959:	b9 00 01 00 00       	mov    ecx,0x100
c001d95e:	89 c2                	mov    edx,eax
c001d960:	fc                   	cld    
c001d961:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d964:	83 c4 10             	add    esp,0x10
c001d967:	eb d3                	jmp    c001d93c <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d969:	31 f6                	xor    esi,esi
c001d96b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d96f:	74 11                	je     c001d982 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d971:	50                   	push   eax
c001d972:	50                   	push   eax
c001d973:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d978:	50                   	push   eax
c001d979:	53                   	push   ebx
c001d97a:	e8 d1 fb ff ff       	call   c001d550 <ATA::flush(bool)>
c001d97f:	83 c4 10             	add    esp,0x10
c001d982:	83 c4 2c             	add    esp,0x2c
c001d985:	89 f0                	mov    eax,esi
c001d987:	5b                   	pop    ebx
c001d988:	5e                   	pop    esi
c001d989:	5f                   	pop    edi
c001d98a:	5d                   	pop    ebp
c001d98b:	c3                   	ret    

c001d98c <ATA::read(unsigned long long, int, void*)>:
c001d98c:	57                   	push   edi
c001d98d:	b8 04 00 00 00       	mov    eax,0x4
c001d992:	56                   	push   esi
c001d993:	53                   	push   ebx
c001d994:	83 ec 10             	sub    esp,0x10
c001d997:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d99b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d99f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9a3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9a7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d9aa:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d9b0:	77 3b                	ja     c001d9ed <ATA::read(unsigned long long, int, void*)+0x61>
c001d9b2:	b8 06 00 00 00       	mov    eax,0x6
c001d9b7:	85 d2                	test   edx,edx
c001d9b9:	74 32                	je     c001d9ed <ATA::read(unsigned long long, int, void*)+0x61>
c001d9bb:	50                   	push   eax
c001d9bc:	50                   	push   eax
c001d9bd:	6a 00                	push   0x0
c001d9bf:	52                   	push   edx
c001d9c0:	53                   	push   ebx
c001d9c1:	57                   	push   edi
c001d9c2:	56                   	push   esi
c001d9c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9c7:	e8 1e fc ff ff       	call   c001d5ea <ATA::access(unsigned long long, int, void*, bool)>
c001d9cc:	83 c4 20             	add    esp,0x20
c001d9cf:	85 c0                	test   eax,eax
c001d9d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9d5:	75 11                	jne    c001d9e8 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9d7:	01 1d 44 65 02 c0    	add    DWORD PTR ds:0xc0026544,ebx
c001d9dd:	e8 18 f6 fe ff       	call   c000cffa <VgaText::updateDiskUsage()>
c001d9e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9e6:	eb 05                	jmp    c001d9ed <ATA::read(unsigned long long, int, void*)+0x61>
c001d9e8:	b8 01 00 00 00       	mov    eax,0x1
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	5b                   	pop    ebx
c001d9f1:	5e                   	pop    esi
c001d9f2:	5f                   	pop    edi
c001d9f3:	c3                   	ret    

c001d9f4 <ATA::write(unsigned long long, int, void*)>:
c001d9f4:	57                   	push   edi
c001d9f5:	b8 04 00 00 00       	mov    eax,0x4
c001d9fa:	56                   	push   esi
c001d9fb:	53                   	push   ebx
c001d9fc:	83 ec 10             	sub    esp,0x10
c001d9ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001da03:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001da07:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001da0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001da0f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001da12:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001da18:	77 3b                	ja     c001da55 <ATA::write(unsigned long long, int, void*)+0x61>
c001da1a:	b8 06 00 00 00       	mov    eax,0x6
c001da1f:	85 d2                	test   edx,edx
c001da21:	74 32                	je     c001da55 <ATA::write(unsigned long long, int, void*)+0x61>
c001da23:	50                   	push   eax
c001da24:	50                   	push   eax
c001da25:	6a 01                	push   0x1
c001da27:	52                   	push   edx
c001da28:	53                   	push   ebx
c001da29:	57                   	push   edi
c001da2a:	56                   	push   esi
c001da2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da2f:	e8 b6 fb ff ff       	call   c001d5ea <ATA::access(unsigned long long, int, void*, bool)>
c001da34:	83 c4 20             	add    esp,0x20
c001da37:	85 c0                	test   eax,eax
c001da39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da3d:	75 11                	jne    c001da50 <ATA::write(unsigned long long, int, void*)+0x5c>
c001da3f:	01 1d 40 65 02 c0    	add    DWORD PTR ds:0xc0026540,ebx
c001da45:	e8 b0 f5 fe ff       	call   c000cffa <VgaText::updateDiskUsage()>
c001da4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da4e:	eb 05                	jmp    c001da55 <ATA::write(unsigned long long, int, void*)+0x61>
c001da50:	b8 01 00 00 00       	mov    eax,0x1
c001da55:	83 c4 10             	add    esp,0x10
c001da58:	5b                   	pop    ebx
c001da59:	5e                   	pop    esi
c001da5a:	5f                   	pop    edi
c001da5b:	c3                   	ret    

c001da5c <ATA::detectCHS()>:
c001da5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da60:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da66:	c1 e0 06             	shl    eax,0x6
c001da69:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da6f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da79:	c7 44 24 04 c3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237c3
c001da81:	e9 cc 7f ff ff       	jmp    c0015a52 <Krnl::panic(char const*)>

c001da86 <ATA::open(int, int, void*)>:
c001da86:	53                   	push   ebx
c001da87:	83 ec 08             	sub    esp,0x8
c001da8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da96:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da9c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001daa2:	c1 e0 06             	shl    eax,0x6
c001daa5:	01 d0                	add    eax,edx
c001daa7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001daae:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dab4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dabb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dac5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dacb:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dad2:	75 0c                	jne    c001dae0 <ATA::open(int, int, void*)+0x5a>
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	53                   	push   ebx
c001dad8:	e8 7f ff ff ff       	call   c001da5c <ATA::detectCHS()>
c001dadd:	83 c4 10             	add    esp,0x10
c001dae0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dae6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001daec:	c1 e0 06             	shl    eax,0x6
c001daef:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001daf6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db00:	d1 e8                	shr    eax,1
c001db02:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001db08:	6a 04                	push   0x4
c001db0a:	6a 0c                	push   0xc
c001db0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db13:	50                   	push   eax
c001db14:	52                   	push   edx
c001db15:	e8 bc ed ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db1a:	90                   	nop
c001db1b:	90                   	nop
c001db1c:	6a 00                	push   0x0
c001db1e:	6a 0c                	push   0xc
c001db20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db27:	50                   	push   eax
c001db28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db2e:	e8 a3 ed ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db33:	83 c4 14             	add    esp,0x14
c001db36:	53                   	push   ebx
c001db37:	e8 6a 2f ff ff       	call   c0010aa6 <PhysicalDisk::startCache()>
c001db3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db3f:	e8 3e 4f ff ff       	call   c0012a82 <createPartitionsForDisk(PhysicalDisk*)>
c001db44:	83 c4 18             	add    esp,0x18
c001db47:	31 c0                	xor    eax,eax
c001db49:	5b                   	pop    ebx
c001db4a:	c3                   	ret    
c001db4b:	90                   	nop

c001db4c <ATAPI::write(unsigned long long, int, void*)>:
c001db4c:	b8 03 00 00 00       	mov    eax,0x3
c001db51:	c3                   	ret    

c001db52 <ATAPI::close(int, int, void*)>:
c001db52:	83 ec 0c             	sub    esp,0xc
c001db55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db59:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db5f:	85 c0                	test   eax,eax
c001db61:	74 0c                	je     c001db6f <ATAPI::close(int, int, void*)+0x1d>
c001db63:	83 ec 0c             	sub    esp,0xc
c001db66:	8b 10                	mov    edx,DWORD PTR [eax]
c001db68:	50                   	push   eax
c001db69:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db6c:	83 c4 10             	add    esp,0x10
c001db6f:	31 c0                	xor    eax,eax
c001db71:	83 c4 0c             	add    esp,0xc
c001db74:	c3                   	ret    
c001db75:	90                   	nop

c001db76 <ATAPI::ATAPI()>:
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7d:	83 ec 04             	sub    esp,0x4
c001db80:	68 00 08 00 00       	push   0x800
c001db85:	68 0c 38 02 c0       	push   0xc002380c
c001db8a:	50                   	push   eax
c001db8b:	e8 ae 2e ff ff       	call   c0010a3e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001db98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db9c:	89 10                	mov    DWORD PTR [eax],edx
c001db9e:	90                   	nop
c001db9f:	83 c4 0c             	add    esp,0xc
c001dba2:	c3                   	ret    
c001dba3:	90                   	nop

c001dba4 <ATAPI::readyForCommand()>:
c001dba4:	56                   	push   esi
c001dba5:	53                   	push   ebx
c001dba6:	31 db                	xor    ebx,ebx
c001dba8:	50                   	push   eax
c001dba9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dbad:	50                   	push   eax
c001dbae:	6a 0c                	push   0xc
c001dbb0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dbb7:	50                   	push   eax
c001dbb8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dbbe:	e8 d3 ed ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001dbc3:	83 c4 10             	add    esp,0x10
c001dbc6:	a8 88                	test   al,0x88
c001dbc8:	74 23                	je     c001dbed <ATAPI::readyForCommand()+0x49>
c001dbca:	43                   	inc    ebx
c001dbcb:	83 fb 63             	cmp    ebx,0x63
c001dbce:	7e dd                	jle    c001dbad <ATAPI::readyForCommand()+0x9>
c001dbd0:	51                   	push   ecx
c001dbd1:	51                   	push   ecx
c001dbd2:	6a 00                	push   0x0
c001dbd4:	68 40 42 0f 00       	push   0xf4240
c001dbd9:	e8 db b3 ff ff       	call   c0018fb9 <nanoSleep(unsigned long long)>
c001dbde:	83 c4 10             	add    esp,0x10
c001dbe1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbe7:	75 c4                	jne    c001dbad <ATAPI::readyForCommand()+0x9>
c001dbe9:	31 c0                	xor    eax,eax
c001dbeb:	eb 02                	jmp    c001dbef <ATAPI::readyForCommand()+0x4b>
c001dbed:	b0 01                	mov    al,0x1
c001dbef:	5a                   	pop    edx
c001dbf0:	5b                   	pop    ebx
c001dbf1:	5e                   	pop    esi
c001dbf2:	c3                   	ret    
c001dbf3:	90                   	nop

c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbf4:	55                   	push   ebp
c001dbf5:	57                   	push   edi
c001dbf6:	56                   	push   esi
c001dbf7:	53                   	push   ebx
c001dbf8:	83 ec 20             	sub    esp,0x20
c001dbfb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbff:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dc03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc07:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dc0b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc0f:	6a 01                	push   0x1
c001dc11:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc18:	50                   	push   eax
c001dc19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc1f:	e8 c4 ee ff ff       	call   c001cae8 <IDE::enableIRQs(unsigned char, bool)>
c001dc24:	5e                   	pop    esi
c001dc25:	58                   	pop    eax
c001dc26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc2d:	50                   	push   eax
c001dc2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc34:	e8 77 ec ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001dc39:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc3c:	e8 63 ff ff ff       	call   c001dba4 <ATAPI::readyForCommand()>
c001dc41:	83 c4 10             	add    esp,0x10
c001dc44:	84 c0                	test   al,al
c001dc46:	75 0a                	jne    c001dc52 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc48:	bb 01 00 00 00       	mov    ebx,0x1
c001dc4d:	e9 57 02 00 00       	jmp    c001dea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc52:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc58:	c1 e0 04             	shl    eax,0x4
c001dc5b:	0f b6 c0             	movzx  eax,al
c001dc5e:	50                   	push   eax
c001dc5f:	6a 06                	push   0x6
c001dc61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc68:	50                   	push   eax
c001dc69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc6f:	e8 62 ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc74:	6a 00                	push   0x0
c001dc76:	6a 01                	push   0x1
c001dc78:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc7f:	50                   	push   eax
c001dc80:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc86:	e8 4b ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc8b:	83 c4 20             	add    esp,0x20
c001dc8e:	0f b6 c3             	movzx  eax,bl
c001dc91:	50                   	push   eax
c001dc92:	6a 04                	push   0x4
c001dc94:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc9b:	50                   	push   eax
c001dc9c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dca2:	0f b6 df             	movzx  ebx,bh
c001dca5:	e8 2c ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcaa:	53                   	push   ebx
c001dcab:	6a 05                	push   0x5
c001dcad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcb4:	50                   	push   eax
c001dcb5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcbb:	e8 16 ec ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcc0:	83 c4 20             	add    esp,0x20
c001dcc3:	68 a0 00 00 00       	push   0xa0
c001dcc8:	6a 07                	push   0x7
c001dcca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcd1:	50                   	push   eax
c001dcd2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcd8:	e8 f9 eb ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcdd:	83 c4 0c             	add    esp,0xc
c001dce0:	6a 01                	push   0x1
c001dce2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dce9:	50                   	push   eax
c001dcea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcf0:	e8 97 f7 ff ff       	call   c001d48c <IDE::polling(unsigned char, unsigned int)>
c001dcf5:	83 c4 10             	add    esp,0x10
c001dcf8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dcfe:	84 c0                	test   al,al
c001dd00:	74 23                	je     c001dd25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dd02:	0f b6 d8             	movzx  ebx,al
c001dd05:	53                   	push   ebx
c001dd06:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dd0d:	0f b6 d2             	movzx  edx,dl
c001dd10:	50                   	push   eax
c001dd11:	52                   	push   edx
c001dd12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd18:	e8 d9 f5 ff ff       	call   c001d2f6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dd1d:	83 c4 10             	add    esp,0x10
c001dd20:	e9 84 01 00 00       	jmp    c001dea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd25:	53                   	push   ebx
c001dd26:	53                   	push   ebx
c001dd27:	0f b6 d2             	movzx  edx,dl
c001dd2a:	52                   	push   edx
c001dd2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd31:	e8 8e eb ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001dd36:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd3a:	b9 06 00 00 00       	mov    ecx,0x6
c001dd3f:	89 c2                	mov    edx,eax
c001dd41:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd44:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd48:	83 c4 10             	add    esp,0x10
c001dd4b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd51:	85 db                	test   ebx,ebx
c001dd53:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd5a:	0f 84 ec 00 00 00    	je     c001de4c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd60:	51                   	push   ecx
c001dd61:	51                   	push   ecx
c001dd62:	52                   	push   edx
c001dd63:	50                   	push   eax
c001dd64:	e8 db ec ff ff       	call   c001ca44 <IDE::waitInterrupt(unsigned char)>
c001dd69:	83 c4 10             	add    esp,0x10
c001dd6c:	84 c0                	test   al,al
c001dd6e:	0f 84 d4 fe ff ff    	je     c001dc48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd74:	56                   	push   esi
c001dd75:	56                   	push   esi
c001dd76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd7d:	50                   	push   eax
c001dd7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd84:	e8 27 eb ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001dd89:	83 c4 0c             	add    esp,0xc
c001dd8c:	6a 04                	push   0x4
c001dd8e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd95:	50                   	push   eax
c001dd96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd9c:	e8 f5 eb ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001dda1:	83 c4 0c             	add    esp,0xc
c001dda4:	6a 05                	push   0x5
c001dda6:	89 c6                	mov    esi,eax
c001dda8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddaf:	50                   	push   eax
c001ddb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddb6:	e8 db eb ff ff       	call   c001c996 <IDE::read(unsigned char, unsigned char)>
c001ddbb:	89 f1                	mov    ecx,esi
c001ddbd:	0f b6 c0             	movzx  eax,al
c001ddc0:	c1 e0 08             	shl    eax,0x8
c001ddc3:	0f b6 f1             	movzx  esi,cl
c001ddc6:	09 c6                	or     esi,eax
c001ddc8:	d1 fe                	sar    esi,1
c001ddca:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddce:	83 c4 10             	add    esp,0x10
c001ddd1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddd6:	74 41                	je     c001de19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddd8:	31 c9                	xor    ecx,ecx
c001ddda:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dde0:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dde4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ddeb:	75 0a                	jne    c001ddf7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dded:	01 c9                	add    ecx,ecx
c001ddef:	01 cd                	add    ebp,ecx
c001ddf1:	4b                   	dec    ebx
c001ddf2:	e9 54 ff ff ff       	jmp    c001dd4b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ddf7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ddfc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de00:	51                   	push   ecx
c001de01:	51                   	push   ecx
c001de02:	52                   	push   edx
c001de03:	50                   	push   eax
c001de04:	e8 bb ea ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001de09:	89 c2                	mov    edx,eax
c001de0b:	89 f0                	mov    eax,esi
c001de0d:	66 ef                	out    dx,ax
c001de0f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de13:	83 c4 10             	add    esp,0x10
c001de16:	41                   	inc    ecx
c001de17:	eb c1                	jmp    c001ddda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001de19:	31 f6                	xor    esi,esi
c001de1b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de21:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de25:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de2c:	75 06                	jne    c001de34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de2e:	01 f6                	add    esi,esi
c001de30:	01 f5                	add    ebp,esi
c001de32:	eb bd                	jmp    c001ddf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de34:	51                   	push   ecx
c001de35:	51                   	push   ecx
c001de36:	52                   	push   edx
c001de37:	50                   	push   eax
c001de38:	e8 87 ea ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001de3d:	89 c2                	mov    edx,eax
c001de3f:	66 ed                	in     ax,dx
c001de41:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de46:	83 c4 10             	add    esp,0x10
c001de49:	46                   	inc    esi
c001de4a:	eb cf                	jmp    c001de1b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de4c:	51                   	push   ecx
c001de4d:	51                   	push   ecx
c001de4e:	52                   	push   edx
c001de4f:	50                   	push   eax
c001de50:	e8 ef eb ff ff       	call   c001ca44 <IDE::waitInterrupt(unsigned char)>
c001de55:	83 c4 10             	add    esp,0x10
c001de58:	84 c0                	test   al,al
c001de5a:	0f 84 e8 fd ff ff    	je     c001dc48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de60:	52                   	push   edx
c001de61:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de66:	52                   	push   edx
c001de67:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de6e:	50                   	push   eax
c001de6f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de75:	e8 36 ea ff ff       	call   c001c8b0 <IDE::prepareInterrupt(unsigned char)>
c001de7a:	83 c4 10             	add    esp,0x10
c001de7d:	50                   	push   eax
c001de7e:	50                   	push   eax
c001de7f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de86:	50                   	push   eax
c001de87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de8d:	e8 32 ea ff ff       	call   c001c8c4 <IDE::getBase(unsigned char)>
c001de92:	8d 50 07             	lea    edx,[eax+0x7]
c001de95:	ec                   	in     al,dx
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	a8 88                	test   al,0x88
c001de9b:	74 0a                	je     c001dea7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de9d:	4b                   	dec    ebx
c001de9e:	75 dd                	jne    c001de7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dea0:	bb 02 00 00 00       	mov    ebx,0x2
c001dea5:	eb 02                	jmp    c001dea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dea7:	31 db                	xor    ebx,ebx
c001dea9:	83 c4 1c             	add    esp,0x1c
c001deac:	89 d8                	mov    eax,ebx
c001deae:	5b                   	pop    ebx
c001deaf:	5e                   	pop    esi
c001deb0:	5f                   	pop    edi
c001deb1:	5d                   	pop    ebp
c001deb2:	c3                   	ret    
c001deb3:	90                   	nop

c001deb4 <ATAPI::diskRemoved()>:
c001deb4:	83 ec 18             	sub    esp,0x18
c001deb7:	68 17 38 02 c0       	push   0xc0023817
c001debc:	e8 62 13 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001dec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001decc:	83 c4 1c             	add    esp,0x1c
c001decf:	c3                   	ret    

c001ded0 <ATAPI::eject()>:
c001ded0:	57                   	push   edi
c001ded1:	b9 03 00 00 00       	mov    ecx,0x3
c001ded6:	53                   	push   ebx
c001ded7:	83 ec 14             	sub    esp,0x14
c001deda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dede:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dee2:	fc                   	cld    
c001dee3:	31 c0                	xor    eax,eax
c001dee5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dee7:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001deec:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001def1:	50                   	push   eax
c001def2:	50                   	push   eax
c001def3:	6a 00                	push   0x0
c001def5:	6a 00                	push   0x0
c001def7:	6a 00                	push   0x0
c001def9:	6a 02                	push   0x2
c001defb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001deff:	50                   	push   eax
c001df00:	53                   	push   ebx
c001df01:	e8 ee fc ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df06:	83 c4 14             	add    esp,0x14
c001df09:	53                   	push   ebx
c001df0a:	e8 a5 ff ff ff       	call   c001deb4 <ATAPI::diskRemoved()>
c001df0f:	83 c4 24             	add    esp,0x24
c001df12:	5b                   	pop    ebx
c001df13:	5f                   	pop    edi
c001df14:	c3                   	ret    
c001df15:	90                   	nop

c001df16 <ATAPI::diskInserted()>:
c001df16:	53                   	push   ebx
c001df17:	83 ec 14             	sub    esp,0x14
c001df1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df1e:	68 2d 38 02 c0       	push   0xc002382d
c001df23:	e8 fb 12 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001df28:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df32:	e8 6f 2b ff ff       	call   c0010aa6 <PhysicalDisk::startCache()>
c001df37:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df3b:	83 c4 18             	add    esp,0x18
c001df3e:	5b                   	pop    ebx
c001df3f:	e9 3e 4b ff ff       	jmp    c0012a82 <createPartitionsForDisk(PhysicalDisk*)>

c001df44 <ATAPI::detectMedia()>:
c001df44:	56                   	push   esi
c001df45:	53                   	push   ebx
c001df46:	83 ec 28             	sub    esp,0x28
c001df49:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df4d:	6a 0c                	push   0xc
c001df4f:	6a 00                	push   0x0
c001df51:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df55:	56                   	push   esi
c001df56:	e8 77 27 fe ff       	call   c00006d2 <memset>
c001df5b:	58                   	pop    eax
c001df5c:	5a                   	pop    edx
c001df5d:	6a 00                	push   0x0
c001df5f:	6a 00                	push   0x0
c001df61:	6a 00                	push   0x0
c001df63:	6a 00                	push   0x0
c001df65:	56                   	push   esi
c001df66:	53                   	push   ebx
c001df67:	e8 88 fc ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df6c:	83 c4 1c             	add    esp,0x1c
c001df6f:	6a 0c                	push   0xc
c001df71:	6a 00                	push   0x0
c001df73:	56                   	push   esi
c001df74:	e8 59 27 fe ff       	call   c00006d2 <memset>
c001df79:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df7e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df83:	59                   	pop    ecx
c001df84:	58                   	pop    eax
c001df85:	6a 01                	push   0x1
c001df87:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df8b:	50                   	push   eax
c001df8c:	6a 00                	push   0x0
c001df8e:	6a 12                	push   0x12
c001df90:	56                   	push   esi
c001df91:	53                   	push   ebx
c001df92:	e8 5d fc ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df97:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df9b:	83 c4 20             	add    esp,0x20
c001df9e:	83 e0 7f             	and    eax,0x7f
c001dfa1:	3c 70                	cmp    al,0x70
c001dfa3:	74 15                	je     c001dfba <ATAPI::detectMedia()+0x76>
c001dfa5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfac:	75 0c                	jne    c001dfba <ATAPI::detectMedia()+0x76>
c001dfae:	83 ec 0c             	sub    esp,0xc
c001dfb1:	53                   	push   ebx
c001dfb2:	e8 5f ff ff ff       	call   c001df16 <ATAPI::diskInserted()>
c001dfb7:	83 c4 10             	add    esp,0x10
c001dfba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfbe:	83 e0 0f             	and    eax,0xf
c001dfc1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfc6:	75 18                	jne    c001dfe0 <ATAPI::detectMedia()+0x9c>
c001dfc8:	3c 02                	cmp    al,0x2
c001dfca:	75 14                	jne    c001dfe0 <ATAPI::detectMedia()+0x9c>
c001dfcc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfd3:	74 24                	je     c001dff9 <ATAPI::detectMedia()+0xb5>
c001dfd5:	83 ec 0c             	sub    esp,0xc
c001dfd8:	53                   	push   ebx
c001dfd9:	e8 d6 fe ff ff       	call   c001deb4 <ATAPI::diskRemoved()>
c001dfde:	eb 16                	jmp    c001dff6 <ATAPI::detectMedia()+0xb2>
c001dfe0:	84 c0                	test   al,al
c001dfe2:	75 15                	jne    c001dff9 <ATAPI::detectMedia()+0xb5>
c001dfe4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfeb:	75 0c                	jne    c001dff9 <ATAPI::detectMedia()+0xb5>
c001dfed:	83 ec 0c             	sub    esp,0xc
c001dff0:	53                   	push   ebx
c001dff1:	e8 20 ff ff ff       	call   c001df16 <ATAPI::diskInserted()>
c001dff6:	83 c4 10             	add    esp,0x10
c001dff9:	83 c4 24             	add    esp,0x24
c001dffc:	5b                   	pop    ebx
c001dffd:	5e                   	pop    esi
c001dffe:	c3                   	ret    
c001dfff:	90                   	nop

c001e000 <ATAPI::open(int, int, void*)>:
c001e000:	53                   	push   ebx
c001e001:	83 ec 08             	sub    esp,0x8
c001e004:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e00c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e010:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e016:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e01c:	c1 e0 06             	shl    eax,0x6
c001e01f:	01 d0                	add    eax,edx
c001e021:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e028:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e02e:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e035:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e03f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e045:	6a 04                	push   0x4
c001e047:	6a 0c                	push   0xc
c001e049:	51                   	push   ecx
c001e04a:	52                   	push   edx
c001e04b:	e8 86 e8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e050:	90                   	nop
c001e051:	90                   	nop
c001e052:	6a 00                	push   0x0
c001e054:	6a 0c                	push   0xc
c001e056:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e05d:	50                   	push   eax
c001e05e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e064:	e8 6d e8 ff ff       	call   c001c8d6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e069:	83 c4 14             	add    esp,0x14
c001e06c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e073:	53                   	push   ebx
c001e074:	e8 cb fe ff ff       	call   c001df44 <ATAPI::detectMedia()>
c001e079:	83 c4 18             	add    esp,0x18
c001e07c:	31 c0                	xor    eax,eax
c001e07e:	5b                   	pop    ebx
c001e07f:	c3                   	ret    

c001e080 <ATAPI::read(unsigned long long, int, void*)>:
c001e080:	55                   	push   ebp
c001e081:	57                   	push   edi
c001e082:	56                   	push   esi
c001e083:	53                   	push   ebx
c001e084:	83 ec 1c             	sub    esp,0x1c
c001e087:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e08b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e08f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e093:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e09a:	74 3c                	je     c001e0d8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e09c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0a0:	b9 03 00 00 00       	mov    ecx,0x3
c001e0a5:	fc                   	cld    
c001e0a6:	31 c0                	xor    eax,eax
c001e0a8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0aa:	0f ce                	bswap  esi
c001e0ac:	89 e8                	mov    eax,ebp
c001e0ae:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e0b3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e0b7:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e0bb:	50                   	push   eax
c001e0bc:	50                   	push   eax
c001e0bd:	55                   	push   ebp
c001e0be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0c2:	c1 e5 0b             	shl    ebp,0xb
c001e0c5:	6a 00                	push   0x0
c001e0c7:	55                   	push   ebp
c001e0c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0cc:	50                   	push   eax
c001e0cd:	53                   	push   ebx
c001e0ce:	e8 21 fb ff ff       	call   c001dbf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0d3:	83 c4 20             	add    esp,0x20
c001e0d6:	eb 1a                	jmp    c001e0f2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	53                   	push   ebx
c001e0dc:	e8 63 fe ff ff       	call   c001df44 <ATAPI::detectMedia()>
c001e0e1:	83 c4 10             	add    esp,0x10
c001e0e4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0eb:	75 af                	jne    c001e09c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0ed:	b8 02 00 00 00       	mov    eax,0x2
c001e0f2:	83 c4 1c             	add    esp,0x1c
c001e0f5:	5b                   	pop    ebx
c001e0f6:	5e                   	pop    esi
c001e0f7:	5f                   	pop    edi
c001e0f8:	5d                   	pop    ebp
c001e0f9:	c3                   	ret    

c001e0fa <AVX::open(int, int, void*)>:
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	e8 96 10 00 00       	call   c001f198 <avxInit>
c001e102:	b8 00 00 00 00       	mov    eax,0x0
c001e107:	83 c4 0c             	add    esp,0xc
c001e10a:	c3                   	ret    
c001e10b:	90                   	nop

c001e10c <AVX::close(int, int, void*)>:
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	e8 85 10 00 00       	call   c001f199 <avxClose>
c001e114:	b8 00 00 00 00       	mov    eax,0x0
c001e119:	83 c4 0c             	add    esp,0xc
c001e11c:	c3                   	ret    
c001e11d:	90                   	nop

c001e11e <AVX::available()>:
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	e8 6a 10 00 00       	call   c001f190 <avxDetect>
c001e126:	85 c0                	test   eax,eax
c001e128:	0f 95 c0             	setne  al
c001e12b:	83 c4 0c             	add    esp,0xc
c001e12e:	c3                   	ret    
c001e12f:	90                   	nop

c001e130 <AVX::save(void*)>:
c001e130:	83 ec 0c             	sub    esp,0xc
c001e133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e137:	83 ec 0c             	sub    esp,0xc
c001e13a:	50                   	push   eax
c001e13b:	e8 56 10 00 00       	call   c001f196 <avxSave>
c001e140:	83 c4 10             	add    esp,0x10
c001e143:	90                   	nop
c001e144:	83 c4 0c             	add    esp,0xc
c001e147:	c3                   	ret    

c001e148 <AVX::load(void*)>:
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e14f:	83 ec 0c             	sub    esp,0xc
c001e152:	50                   	push   eax
c001e153:	e8 3f 10 00 00       	call   c001f197 <avxLoad>
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	90                   	nop
c001e15c:	83 c4 0c             	add    esp,0xc
c001e15f:	c3                   	ret    

c001e160 <AVX::AVX()>:
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e167:	83 ec 08             	sub    esp,0x8
c001e16a:	68 78 38 02 c0       	push   0xc0023878
c001e16f:	50                   	push   eax
c001e170:	e8 a7 29 ff ff       	call   c0010b1c <FPU::FPU(char const*)>
c001e175:	83 c4 10             	add    esp,0x10
c001e178:	ba 88 38 02 c0       	mov    edx,0xc0023888
c001e17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e181:	89 10                	mov    DWORD PTR [eax],edx
c001e183:	90                   	nop
c001e184:	83 c4 0c             	add    esp,0xc
c001e187:	c3                   	ret    

c001e188 <MMX::available()>:
c001e188:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e18d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e193:	83 e0 20             	and    eax,0x20
c001e196:	84 c0                	test   al,al
c001e198:	0f 95 c0             	setne  al
c001e19b:	c3                   	ret    

c001e19c <MMX::open(int, int, void*)>:
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	e8 68 10 00 00       	call   c001f20c <x87Init>
c001e1a4:	b8 00 00 00 00       	mov    eax,0x0
c001e1a9:	83 c4 0c             	add    esp,0xc
c001e1ac:	c3                   	ret    
c001e1ad:	90                   	nop

c001e1ae <MMX::close(int, int, void*)>:
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	e8 70 10 00 00       	call   c001f226 <x87Close>
c001e1b6:	b8 00 00 00 00       	mov    eax,0x0
c001e1bb:	83 c4 0c             	add    esp,0xc
c001e1be:	c3                   	ret    
c001e1bf:	90                   	nop

c001e1c0 <MMX::save(void*)>:
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1c7:	83 ec 0c             	sub    esp,0xc
c001e1ca:	50                   	push   eax
c001e1cb:	e8 31 10 00 00       	call   c001f201 <x87Save>
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	90                   	nop
c001e1d4:	83 c4 0c             	add    esp,0xc
c001e1d7:	c3                   	ret    

c001e1d8 <MMX::load(void*)>:
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1df:	83 ec 0c             	sub    esp,0xc
c001e1e2:	50                   	push   eax
c001e1e3:	e8 1f 10 00 00       	call   c001f207 <x87Load>
c001e1e8:	83 c4 10             	add    esp,0x10
c001e1eb:	90                   	nop
c001e1ec:	83 c4 0c             	add    esp,0xc
c001e1ef:	c3                   	ret    

c001e1f0 <MMX::MMX()>:
c001e1f0:	83 ec 0c             	sub    esp,0xc
c001e1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f7:	83 ec 08             	sub    esp,0x8
c001e1fa:	68 b8 38 02 c0       	push   0xc00238b8
c001e1ff:	50                   	push   eax
c001e200:	e8 17 29 ff ff       	call   c0010b1c <FPU::FPU(char const*)>
c001e205:	83 c4 10             	add    esp,0x10
c001e208:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c001e20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e211:	89 10                	mov    DWORD PTR [eax],edx
c001e213:	90                   	nop
c001e214:	83 c4 0c             	add    esp,0xc
c001e217:	c3                   	ret    

c001e218 <SSE::open(int, int, void*)>:
c001e218:	83 ec 0c             	sub    esp,0xc
c001e21b:	e8 a7 0f 00 00       	call   c001f1c7 <sseInit>
c001e220:	b8 00 00 00 00       	mov    eax,0x0
c001e225:	83 c4 0c             	add    esp,0xc
c001e228:	c3                   	ret    
c001e229:	90                   	nop

c001e22a <SSE::close(int, int, void*)>:
c001e22a:	83 ec 0c             	sub    esp,0xc
c001e22d:	e8 a5 0f 00 00       	call   c001f1d7 <sseClose>
c001e232:	b8 00 00 00 00       	mov    eax,0x0
c001e237:	83 c4 0c             	add    esp,0xc
c001e23a:	c3                   	ret    
c001e23b:	90                   	nop

c001e23c <SSE::available()>:
c001e23c:	83 ec 1c             	sub    esp,0x1c
c001e23f:	e8 5c 0f 00 00       	call   c001f1a0 <sseDetect>
c001e244:	85 c0                	test   eax,eax
c001e246:	0f 95 c0             	setne  al
c001e249:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e24d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e251:	83 c4 1c             	add    esp,0x1c
c001e254:	c3                   	ret    
c001e255:	90                   	nop

c001e256 <SSE::save(void*)>:
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e25d:	83 ec 0c             	sub    esp,0xc
c001e260:	50                   	push   eax
c001e261:	e8 55 0f 00 00       	call   c001f1bb <sseSave>
c001e266:	83 c4 10             	add    esp,0x10
c001e269:	90                   	nop
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    

c001e26e <SSE::load(void*)>:
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e275:	83 ec 0c             	sub    esp,0xc
c001e278:	50                   	push   eax
c001e279:	e8 43 0f 00 00       	call   c001f1c1 <sseLoad>
c001e27e:	83 c4 10             	add    esp,0x10
c001e281:	90                   	nop
c001e282:	83 c4 0c             	add    esp,0xc
c001e285:	c3                   	ret    

c001e286 <SSE::SSE()>:
c001e286:	83 ec 0c             	sub    esp,0xc
c001e289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28d:	83 ec 08             	sub    esp,0x8
c001e290:	68 f8 38 02 c0       	push   0xc00238f8
c001e295:	50                   	push   eax
c001e296:	e8 81 28 ff ff       	call   c0010b1c <FPU::FPU(char const*)>
c001e29b:	83 c4 10             	add    esp,0x10
c001e29e:	ba 08 39 02 c0       	mov    edx,0xc0023908
c001e2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a7:	89 10                	mov    DWORD PTR [eax],edx
c001e2a9:	90                   	nop
c001e2aa:	83 c4 0c             	add    esp,0xc
c001e2ad:	c3                   	ret    

c001e2ae <x87::open(int, int, void*)>:
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	e8 56 0f 00 00       	call   c001f20c <x87Init>
c001e2b6:	b8 00 00 00 00       	mov    eax,0x0
c001e2bb:	83 c4 0c             	add    esp,0xc
c001e2be:	c3                   	ret    
c001e2bf:	90                   	nop

c001e2c0 <x87::close(int, int, void*)>:
c001e2c0:	83 ec 0c             	sub    esp,0xc
c001e2c3:	e8 5e 0f 00 00       	call   c001f226 <x87Close>
c001e2c8:	b8 00 00 00 00       	mov    eax,0x0
c001e2cd:	83 c4 0c             	add    esp,0xc
c001e2d0:	c3                   	ret    
c001e2d1:	90                   	nop

c001e2d2 <x87::available()>:
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	e8 0c 0f 00 00       	call   c001f1e6 <x87Detect>
c001e2da:	85 c0                	test   eax,eax
c001e2dc:	0f 95 c0             	setne  al
c001e2df:	83 c4 0c             	add    esp,0xc
c001e2e2:	c3                   	ret    
c001e2e3:	90                   	nop

c001e2e4 <x87::save(void*)>:
c001e2e4:	83 ec 0c             	sub    esp,0xc
c001e2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2eb:	83 ec 0c             	sub    esp,0xc
c001e2ee:	50                   	push   eax
c001e2ef:	e8 0d 0f 00 00       	call   c001f201 <x87Save>
c001e2f4:	83 c4 10             	add    esp,0x10
c001e2f7:	90                   	nop
c001e2f8:	83 c4 0c             	add    esp,0xc
c001e2fb:	c3                   	ret    

c001e2fc <x87::load(void*)>:
c001e2fc:	83 ec 0c             	sub    esp,0xc
c001e2ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e303:	83 ec 0c             	sub    esp,0xc
c001e306:	50                   	push   eax
c001e307:	e8 fb 0e 00 00       	call   c001f207 <x87Load>
c001e30c:	83 c4 10             	add    esp,0x10
c001e30f:	90                   	nop
c001e310:	83 c4 0c             	add    esp,0xc
c001e313:	c3                   	ret    

c001e314 <x87::x87()>:
c001e314:	83 ec 0c             	sub    esp,0xc
c001e317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31b:	83 ec 08             	sub    esp,0x8
c001e31e:	68 38 39 02 c0       	push   0xc0023938
c001e323:	50                   	push   eax
c001e324:	e8 f3 27 ff ff       	call   c0010b1c <FPU::FPU(char const*)>
c001e329:	83 c4 10             	add    esp,0x10
c001e32c:	ba 48 39 02 c0       	mov    edx,0xc0023948
c001e331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e335:	89 10                	mov    DWORD PTR [eax],edx
c001e337:	90                   	nop
c001e338:	83 c4 0c             	add    esp,0xc
c001e33b:	c3                   	ret    

c001e33c <APIC::disable()>:
c001e33c:	90                   	nop
c001e33d:	c3                   	ret    

c001e33e <APIC::close(int, int, void*)>:
c001e33e:	55                   	push   ebp
c001e33f:	89 e5                	mov    ebp,esp
c001e341:	83 ec 08             	sub    esp,0x8
c001e344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e347:	8b 00                	mov    eax,DWORD PTR [eax]
c001e349:	83 c0 3c             	add    eax,0x3c
c001e34c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e354:	ff d0                	call   eax
c001e356:	83 c4 10             	add    esp,0x10
c001e359:	b8 00 00 00 00       	mov    eax,0x0
c001e35e:	c9                   	leave  
c001e35f:	c3                   	ret    

c001e360 <IOAPIC::close(int, int, void*)>:
c001e360:	b8 00 00 00 00       	mov    eax,0x0
c001e365:	c3                   	ret    

c001e366 <APIC::io_wait()>:
c001e366:	eb 00                	jmp    c001e368 <APIC::io_wait()+0x2>
c001e368:	eb 00                	jmp    c001e36a <APIC::io_wait()+0x4>
c001e36a:	90                   	nop
c001e36b:	c3                   	ret    

c001e36c <APIC::getBase()>:
c001e36c:	55                   	push   ebp
c001e36d:	89 e5                	mov    ebp,esp
c001e36f:	83 ec 18             	sub    esp,0x18
c001e372:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e377:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e37d:	83 e0 08             	and    eax,0x8
c001e380:	84 c0                	test   al,al
c001e382:	75 07                	jne    c001e38b <APIC::getBase()+0x1f>
c001e384:	b8 00 00 00 00       	mov    eax,0x0
c001e389:	eb 21                	jmp    c001e3ac <APIC::getBase()+0x40>
c001e38b:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e390:	83 ec 08             	sub    esp,0x8
c001e393:	6a 1b                	push   0x1b
c001e395:	50                   	push   eax
c001e396:	e8 f3 d1 fe ff       	call   c000b58e <Computer::rdmsr(unsigned int)>
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e3a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e3a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e3ac:	c9                   	leave  
c001e3ad:	c3                   	ret    

c001e3ae <APIC::eoi(unsigned char)>:
c001e3ae:	55                   	push   ebp
c001e3af:	89 e5                	mov    ebp,esp
c001e3b1:	83 ec 28             	sub    esp,0x28
c001e3b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3b7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e3ba:	83 ec 0c             	sub    esp,0xc
c001e3bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3c0:	e8 a7 ff ff ff       	call   c001e36c <APIC::getBase()>
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	05 b0 00 00 00       	add    eax,0xb0
c001e3cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3d3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3d9:	90                   	nop
c001e3da:	c9                   	leave  
c001e3db:	c3                   	ret    

c001e3dc <APIC::open(int, int, void*)>:
c001e3dc:	55                   	push   ebp
c001e3dd:	89 e5                	mov    ebp,esp
c001e3df:	57                   	push   edi
c001e3e0:	56                   	push   esi
c001e3e1:	53                   	push   ebx
c001e3e2:	83 ec 1c             	sub    esp,0x1c
c001e3e5:	83 ec 0c             	sub    esp,0xc
c001e3e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3eb:	e8 7c ff ff ff       	call   c001e36c <APIC::getBase()>
c001e3f0:	83 c4 10             	add    esp,0x10
c001e3f3:	05 f0 00 00 00       	add    eax,0xf0
c001e3f8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e401:	e8 66 ff ff ff       	call   c001e36c <APIC::getBase()>
c001e406:	83 c4 10             	add    esp,0x10
c001e409:	89 c2                	mov    edx,eax
c001e40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e40e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e414:	89 c7                	mov    edi,eax
c001e416:	81 e7 ff 00 00 00    	and    edi,0xff
c001e41c:	89 d0                	mov    eax,edx
c001e41e:	ba 00 00 00 00       	mov    edx,0x0
c001e423:	89 c1                	mov    ecx,eax
c001e425:	80 e5 ff             	and    ch,0xff
c001e428:	89 cb                	mov    ebx,ecx
c001e42a:	89 d0                	mov    eax,edx
c001e42c:	25 ff 00 00 00       	and    eax,0xff
c001e431:	89 c6                	mov    esi,eax
c001e433:	89 d8                	mov    eax,ebx
c001e435:	89 f2                	mov    edx,esi
c001e437:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e43a:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e43d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e441:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e445:	83 e0 00             	and    eax,0x0
c001e448:	09 d0                	or     eax,edx
c001e44a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e451:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e457:	8d 50 01             	lea    edx,[eax+0x1]
c001e45a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e45d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e463:	31 d2                	xor    edx,edx
c001e465:	88 c2                	mov    dl,al
c001e467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e46a:	83 c2 08             	add    edx,0x8
c001e46d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e471:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e477:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e47d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e481:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e484:	8b 00                	mov    eax,DWORD PTR [eax]
c001e486:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e489:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e490:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e493:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e496:	89 10                	mov    DWORD PTR [eax],edx
c001e498:	b8 00 00 00 00       	mov    eax,0x0
c001e49d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e4a0:	5b                   	pop    ebx
c001e4a1:	5e                   	pop    esi
c001e4a2:	5f                   	pop    edi
c001e4a3:	5d                   	pop    ebp
c001e4a4:	c3                   	ret    
c001e4a5:	90                   	nop

c001e4a6 <IOAPIC::IOAPIC()>:
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ad:	83 ec 08             	sub    esp,0x8
c001e4b0:	68 78 39 02 c0       	push   0xc0023978
c001e4b5:	50                   	push   eax
c001e4b6:	e8 6d 23 ff ff       	call   c0010828 <Device::Device(char const*)>
c001e4bb:	83 c4 10             	add    esp,0x10
c001e4be:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c001e4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c7:	89 10                	mov    DWORD PTR [eax],edx
c001e4c9:	90                   	nop
c001e4ca:	83 c4 0c             	add    esp,0xc
c001e4cd:	c3                   	ret    

c001e4ce <APIC::APIC()>:
c001e4ce:	53                   	push   ebx
c001e4cf:	83 ec 18             	sub    esp,0x18
c001e4d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4d6:	83 ec 08             	sub    esp,0x8
c001e4d9:	68 80 39 02 c0       	push   0xc0023980
c001e4de:	50                   	push   eax
c001e4df:	e8 92 2a ff ff       	call   c0010f76 <InterruptController::InterruptController(char const*)>
c001e4e4:	83 c4 10             	add    esp,0x10
c001e4e7:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c001e4ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4f0:	89 10                	mov    DWORD PTR [eax],edx
c001e4f2:	a0 a0 65 02 c0       	mov    al,ds:0xc00265a0
c001e4f7:	83 f0 01             	xor    eax,0x1
c001e4fa:	84 c0                	test   al,al
c001e4fc:	0f 84 a2 00 00 00    	je     c001e5a4 <APIC::APIC()+0xd6>
c001e502:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e507:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c001e50c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e510:	0f 83 87 00 00 00    	jae    c001e59d <APIC::APIC()+0xcf>
c001e516:	83 ec 0c             	sub    esp,0xc
c001e519:	68 68 01 00 00       	push   0x168
c001e51e:	e8 cb 0b ff ff       	call   c000f0ee <operator new(unsigned long)>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	89 c3                	mov    ebx,eax
c001e528:	83 ec 0c             	sub    esp,0xc
c001e52b:	53                   	push   ebx
c001e52c:	e8 75 ff ff ff       	call   c001e4a6 <IOAPIC::IOAPIC()>
c001e531:	83 c4 10             	add    esp,0x10
c001e534:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e538:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e53c:	25 ff 00 00 00       	and    eax,0xff
c001e541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e545:	89 14 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],edx
c001e54c:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e551:	40                   	inc    eax
c001e552:	a3 60 65 02 c0       	mov    ds:0xc0026560,eax
c001e557:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e55c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e562:	83 ec 08             	sub    esp,0x8
c001e565:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e569:	50                   	push   eax
c001e56a:	e8 c9 20 ff ff       	call   c0010638 <Device::addChild(Device*)>
c001e56f:	83 c4 10             	add    esp,0x10
c001e572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e576:	8b 00                	mov    eax,DWORD PTR [eax]
c001e578:	83 c0 08             	add    eax,0x8
c001e57b:	8b 10                	mov    edx,DWORD PTR [eax]
c001e57d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e581:	25 ff 00 00 00       	and    eax,0xff
c001e586:	6a 00                	push   0x0
c001e588:	6a 00                	push   0x0
c001e58a:	50                   	push   eax
c001e58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e58f:	ff d2                	call   edx
c001e591:	83 c4 10             	add    esp,0x10
c001e594:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e598:	e9 6a ff ff ff       	jmp    c001e507 <APIC::APIC()+0x39>
c001e59d:	c6 05 a0 65 02 c0 01 	mov    BYTE PTR ds:0xc00265a0,0x1
c001e5a4:	90                   	nop
c001e5a5:	83 c4 18             	add    esp,0x18
c001e5a8:	5b                   	pop    ebx
c001e5a9:	c3                   	ret    

c001e5aa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e5aa:	55                   	push   ebp
c001e5ab:	89 e5                	mov    ebp,esp
c001e5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e5b6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5b9:	72 1d                	jb     c001e5d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5be:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5cd:	01 d0                	add    eax,edx
c001e5cf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5d2:	73 04                	jae    c001e5d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5d4:	b0 01                	mov    al,0x1
c001e5d6:	eb 02                	jmp    c001e5da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5d8:	b0 00                	mov    al,0x0
c001e5da:	5d                   	pop    ebp
c001e5db:	c3                   	ret    

c001e5dc <IOAPIC::read(int)>:
c001e5dc:	55                   	push   ebp
c001e5dd:	89 e5                	mov    ebp,esp
c001e5df:	83 ec 10             	sub    esp,0x10
c001e5e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5f1:	31 d2                	xor    edx,edx
c001e5f3:	88 c2                	mov    dl,al
c001e5f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5f8:	89 10                	mov    DWORD PTR [eax],edx
c001e5fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5fd:	83 c0 10             	add    eax,0x10
c001e600:	8b 00                	mov    eax,DWORD PTR [eax]
c001e602:	c9                   	leave  
c001e603:	c3                   	ret    

c001e604 <IOAPIC::open(int, int, void*)>:
c001e604:	55                   	push   ebp
c001e605:	89 e5                	mov    ebp,esp
c001e607:	57                   	push   edi
c001e608:	56                   	push   esi
c001e609:	53                   	push   ebx
c001e60a:	83 ec 0c             	sub    esp,0xc
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	68 ab 39 02 c0       	push   0xc00239ab
c001e615:	e8 09 0c ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001e61a:	83 c4 10             	add    esp,0x10
c001e61d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e620:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e623:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e632:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c001e639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e645:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e64b:	8b 14 85 00 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf00]
c001e652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e655:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e65e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e667:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e66d:	89 c7                	mov    edi,eax
c001e66f:	81 e7 ff 00 00 00    	and    edi,0xff
c001e675:	89 d0                	mov    eax,edx
c001e677:	ba 00 00 00 00       	mov    edx,0x0
c001e67c:	89 c1                	mov    ecx,eax
c001e67e:	80 e5 ff             	and    ch,0xff
c001e681:	89 cb                	mov    ebx,ecx
c001e683:	89 d0                	mov    eax,edx
c001e685:	25 ff 00 00 00       	and    eax,0xff
c001e68a:	89 c6                	mov    esi,eax
c001e68c:	89 d8                	mov    eax,ebx
c001e68e:	89 f2                	mov    edx,esi
c001e690:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e693:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e696:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e69a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e69e:	83 e0 00             	and    eax,0x0
c001e6a1:	09 d0                	or     eax,edx
c001e6a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6aa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6b0:	8d 50 01             	lea    edx,[eax+0x1]
c001e6b3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6b6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e6bc:	31 d2                	xor    edx,edx
c001e6be:	88 c2                	mov    dl,al
c001e6c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6c3:	83 c2 08             	add    edx,0x8
c001e6c6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6ca:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6d0:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6d6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6da:	83 ec 08             	sub    esp,0x8
c001e6dd:	6a 01                	push   0x1
c001e6df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6e2:	e8 f5 fe ff ff       	call   c001e5dc <IOAPIC::read(int)>
c001e6e7:	83 c4 10             	add    esp,0x10
c001e6ea:	c1 f8 10             	sar    eax,0x10
c001e6ed:	25 ff 00 00 00       	and    eax,0xff
c001e6f2:	8d 50 01             	lea    edx,[eax+0x1]
c001e6f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6f8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6fe:	b8 00 00 00 00       	mov    eax,0x0
c001e703:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e706:	5b                   	pop    ebx
c001e707:	5e                   	pop    esi
c001e708:	5f                   	pop    edi
c001e709:	5d                   	pop    ebp
c001e70a:	c3                   	ret    
c001e70b:	90                   	nop

c001e70c <IOAPIC::write(int, int)>:
c001e70c:	55                   	push   ebp
c001e70d:	89 e5                	mov    ebp,esp
c001e70f:	83 ec 10             	sub    esp,0x10
c001e712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e715:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e71b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e71e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e721:	31 d2                	xor    edx,edx
c001e723:	88 c2                	mov    dl,al
c001e725:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e728:	89 10                	mov    DWORD PTR [eax],edx
c001e72a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e72d:	8d 50 10             	lea    edx,[eax+0x10]
c001e730:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e733:	89 02                	mov    DWORD PTR [edx],eax
c001e735:	90                   	nop
c001e736:	c9                   	leave  
c001e737:	c3                   	ret    

c001e738 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e738:	55                   	push   ebp
c001e739:	89 e5                	mov    ebp,esp
c001e73b:	83 ec 20             	sub    esp,0x20
c001e73e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e741:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e744:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e747:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e74a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e74d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e750:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e753:	88 d0                	mov    al,dl
c001e755:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e758:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e75b:	25 ff 00 00 00       	and    eax,0xff
c001e760:	83 c0 08             	add    eax,0x8
c001e763:	01 c0                	add    eax,eax
c001e765:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e768:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e76b:	25 ff 00 00 00       	and    eax,0xff
c001e770:	83 c0 08             	add    eax,0x8
c001e773:	01 c0                	add    eax,eax
c001e775:	40                   	inc    eax
c001e776:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e779:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e77c:	50                   	push   eax
c001e77d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e780:	e8 57 fe ff ff       	call   c001e5dc <IOAPIC::read(int)>
c001e785:	83 c4 08             	add    esp,0x8
c001e788:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e78b:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e792:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e795:	c1 e0 18             	shl    eax,0x18
c001e798:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e79b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e79e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e7a1:	52                   	push   edx
c001e7a2:	50                   	push   eax
c001e7a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7a6:	e8 61 ff ff ff       	call   c001e70c <IOAPIC::write(int, int)>
c001e7ab:	83 c4 0c             	add    esp,0xc
c001e7ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7b1:	50                   	push   eax
c001e7b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7b5:	e8 22 fe ff ff       	call   c001e5dc <IOAPIC::read(int)>
c001e7ba:	83 c4 08             	add    esp,0x8
c001e7bd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7c0:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7c7:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7ce:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7d5:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7dc:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7df:	25 ff 00 00 00       	and    eax,0xff
c001e7e4:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7e7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7ea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7ed:	52                   	push   edx
c001e7ee:	50                   	push   eax
c001e7ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7f2:	e8 15 ff ff ff       	call   c001e70c <IOAPIC::write(int, int)>
c001e7f7:	83 c4 0c             	add    esp,0xc
c001e7fa:	90                   	nop
c001e7fb:	c9                   	leave  
c001e7fc:	c3                   	ret    
c001e7fd:	90                   	nop

c001e7fe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7fe:	55                   	push   ebp
c001e7ff:	89 e5                	mov    ebp,esp
c001e801:	56                   	push   esi
c001e802:	53                   	push   ebx
c001e803:	83 ec 20             	sub    esp,0x20
c001e806:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e809:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e80c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e810:	74 2a                	je     c001e83c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e812:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e816:	7f 14                	jg     c001e82c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e818:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e81b:	05 00 3f 02 c0       	add    eax,0xc0023f00
c001e820:	8a 00                	mov    al,BYTE PTR [eax]
c001e822:	25 ff 00 00 00       	and    eax,0xff
c001e827:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e82a:	eb 10                	jmp    c001e83c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e82c:	83 ec 0c             	sub    esp,0xc
c001e82f:	68 bc 39 02 c0       	push   0xc00239bc
c001e834:	e8 19 72 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001e839:	83 c4 10             	add    esp,0x10
c001e83c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e840:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e845:	83 ec 08             	sub    esp,0x8
c001e848:	50                   	push   eax
c001e849:	68 f4 39 02 c0       	push   0xc00239f4
c001e84e:	e8 d0 09 ff ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001e853:	83 c4 10             	add    esp,0x10
c001e856:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e85d:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e862:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e865:	7d 64                	jge    c001e8cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e867:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e86a:	8b 04 85 80 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a80]
c001e871:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e874:	83 ec 08             	sub    esp,0x8
c001e877:	52                   	push   edx
c001e878:	50                   	push   eax
c001e879:	e8 2c fd ff ff       	call   c001e5aa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e87e:	83 c4 10             	add    esp,0x10
c001e881:	84 c0                	test   al,al
c001e883:	74 41                	je     c001e8c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e885:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e888:	8b 1c 85 80 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9a80]
c001e88f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e892:	83 c0 20             	add    eax,0x20
c001e895:	89 c6                	mov    esi,eax
c001e897:	81 e6 ff 00 00 00    	and    esi,0xff
c001e89d:	e8 41 60 ff ff       	call   c00148e3 <getCPUNumber()>
c001e8a2:	89 c2                	mov    edx,eax
c001e8a4:	c1 fa 1f             	sar    edx,0x1f
c001e8a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e8aa:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	56                   	push   esi
c001e8b4:	52                   	push   edx
c001e8b5:	50                   	push   eax
c001e8b6:	51                   	push   ecx
c001e8b7:	53                   	push   ebx
c001e8b8:	e8 7b fe ff ff       	call   c001e738 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e8bd:	83 c4 20             	add    esp,0x20
c001e8c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8c4:	eb 05                	jmp    c001e8cb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8c6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8c9:	eb 92                	jmp    c001e85d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8cb:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8ce:	83 f0 01             	xor    eax,0x1
c001e8d1:	84 c0                	test   al,al
c001e8d3:	74 10                	je     c001e8e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	68 0b 3a 02 c0       	push   0xc0023a0b
c001e8dd:	e8 70 71 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001e8e2:	83 c4 10             	add    esp,0x10
c001e8e5:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8e9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8f0:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8f4:	7f 65                	jg     c001e95b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8fc:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e903:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e906:	01 ca                	add    edx,ecx
c001e908:	83 c2 54             	add    edx,0x54
c001e90b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e90f:	85 c0                	test   eax,eax
c001e911:	75 43                	jne    c001e956 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e916:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e919:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e920:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e923:	01 ca                	add    edx,ecx
c001e925:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e928:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e92b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e92f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e932:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e935:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e93c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e93f:	01 ca                	add    edx,ecx
c001e941:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e947:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e94a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e94e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e951:	83 e8 20             	sub    eax,0x20
c001e954:	eb 1a                	jmp    c001e970 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e956:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e959:	eb 95                	jmp    c001e8f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e95b:	83 ec 0c             	sub    esp,0xc
c001e95e:	68 18 3a 02 c0       	push   0xc0023a18
c001e963:	e8 ea 70 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001e968:	83 c4 10             	add    esp,0x10
c001e96b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e970:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e973:	5b                   	pop    ebx
c001e974:	5e                   	pop    esi
c001e975:	5d                   	pop    ebp
c001e976:	c3                   	ret    
c001e977:	90                   	nop

c001e978 <PIC::disable()>:
c001e978:	55                   	push   ebp
c001e979:	89 e5                	mov    ebp,esp
c001e97b:	83 ec 10             	sub    esp,0x10
c001e97e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e984:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e988:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e98b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e98f:	ee                   	out    dx,al
c001e990:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e996:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e99a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e99d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e9a1:	ee                   	out    dx,al
c001e9a2:	90                   	nop
c001e9a3:	c9                   	leave  
c001e9a4:	c3                   	ret    
c001e9a5:	90                   	nop

c001e9a6 <PIC::close(int, int, void*)>:
c001e9a6:	55                   	push   ebp
c001e9a7:	89 e5                	mov    ebp,esp
c001e9a9:	83 ec 08             	sub    esp,0x8
c001e9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9af:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b1:	83 c0 3c             	add    eax,0x3c
c001e9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9bc:	ff d0                	call   eax
c001e9be:	83 c4 10             	add    esp,0x10
c001e9c1:	b8 00 00 00 00       	mov    eax,0x0
c001e9c6:	c9                   	leave  
c001e9c7:	c3                   	ret    

c001e9c8 <PIC::PIC()>:
c001e9c8:	83 ec 0c             	sub    esp,0xc
c001e9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cf:	83 ec 08             	sub    esp,0x8
c001e9d2:	68 c4 3a 02 c0       	push   0xc0023ac4
c001e9d7:	50                   	push   eax
c001e9d8:	e8 99 25 ff ff       	call   c0010f76 <InterruptController::InterruptController(char const*)>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c001e9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e9:	89 10                	mov    DWORD PTR [eax],edx
c001e9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9f5:	31 d2                	xor    edx,edx
c001e9f7:	88 c2                	mov    dl,al
c001e9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fd:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001ea04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea08:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea0e:	31 d2                	xor    edx,edx
c001ea10:	88 c2                	mov    dl,al
c001ea12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea16:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea25:	8d 50 01             	lea    edx,[eax+0x1]
c001ea28:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea2c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea32:	31 d2                	xor    edx,edx
c001ea34:	88 c2                	mov    dl,al
c001ea36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea3e:	83 e1 3f             	and    ecx,0x3f
c001ea41:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea4f:	31 d2                	xor    edx,edx
c001ea51:	88 c2                	mov    dl,al
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea68:	31 d2                	xor    edx,edx
c001ea6a:	88 c2                	mov    dl,al
c001ea6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea70:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea7f:	8d 50 01             	lea    edx,[eax+0x1]
c001ea82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea86:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea8c:	31 d2                	xor    edx,edx
c001ea8e:	88 c2                	mov    dl,al
c001ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea94:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea98:	83 e1 3f             	and    ecx,0x3f
c001ea9b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea9f:	90                   	nop
c001eaa0:	83 c4 0c             	add    esp,0xc
c001eaa3:	c3                   	ret    

c001eaa4 <PIC::ioWait()>:
c001eaa4:	eb 00                	jmp    c001eaa6 <PIC::ioWait()+0x2>
c001eaa6:	eb 00                	jmp    c001eaa8 <PIC::ioWait()+0x4>
c001eaa8:	90                   	nop
c001eaa9:	c3                   	ret    

c001eaaa <PIC::getIRQReg(int)>:
c001eaaa:	55                   	push   ebp
c001eaab:	89 e5                	mov    ebp,esp
c001eaad:	83 ec 10             	sub    esp,0x10
c001eab0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eab3:	25 ff 00 00 00       	and    eax,0xff
c001eab8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eabe:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eac1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eac4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eac8:	ee                   	out    dx,al
c001eac9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eacc:	25 ff 00 00 00       	and    eax,0xff
c001ead1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ead7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eada:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eadd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eae1:	ee                   	out    dx,al
c001eae2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001eae8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001eaec:	89 c2                	mov    edx,eax
c001eaee:	ec                   	in     al,dx
c001eaef:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eaf2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eaf5:	25 ff 00 00 00       	and    eax,0xff
c001eafa:	c1 e0 08             	shl    eax,0x8
c001eafd:	89 c1                	mov    ecx,eax
c001eaff:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eb05:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb09:	89 c2                	mov    edx,eax
c001eb0b:	ec                   	in     al,dx
c001eb0c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eb0f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eb12:	25 ff 00 00 00       	and    eax,0xff
c001eb17:	09 c8                	or     eax,ecx
c001eb19:	c9                   	leave  
c001eb1a:	c3                   	ret    
c001eb1b:	90                   	nop

c001eb1c <PIC::eoi(unsigned char)>:
c001eb1c:	55                   	push   ebp
c001eb1d:	89 e5                	mov    ebp,esp
c001eb1f:	83 ec 14             	sub    esp,0x14
c001eb22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb25:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb28:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb2c:	75 23                	jne    c001eb51 <PIC::eoi(unsigned char)+0x35>
c001eb2e:	6a 0b                	push   0xb
c001eb30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb33:	e8 72 ff ff ff       	call   c001eaaa <PIC::getIRQReg(int)>
c001eb38:	83 c4 08             	add    esp,0x8
c001eb3b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb3f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb43:	25 ff ff 00 00       	and    eax,0xffff
c001eb48:	25 80 00 00 00       	and    eax,0x80
c001eb4d:	85 c0                	test   eax,eax
c001eb4f:	74 5f                	je     c001ebb0 <PIC::eoi(unsigned char)+0x94>
c001eb51:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb55:	75 2d                	jne    c001eb84 <PIC::eoi(unsigned char)+0x68>
c001eb57:	6a 0b                	push   0xb
c001eb59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb5c:	e8 49 ff ff ff       	call   c001eaaa <PIC::getIRQReg(int)>
c001eb61:	83 c4 08             	add    esp,0x8
c001eb64:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb68:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb6b:	66 85 c0             	test   ax,ax
c001eb6e:	78 14                	js     c001eb84 <PIC::eoi(unsigned char)+0x68>
c001eb70:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb76:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb7a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb7d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb81:	ee                   	out    dx,al
c001eb82:	eb 2d                	jmp    c001ebb1 <PIC::eoi(unsigned char)+0x95>
c001eb84:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb88:	76 12                	jbe    c001eb9c <PIC::eoi(unsigned char)+0x80>
c001eb8a:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb90:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb94:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb97:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb9b:	ee                   	out    dx,al
c001eb9c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eba2:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eba6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eba9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ebad:	ee                   	out    dx,al
c001ebae:	eb 01                	jmp    c001ebb1 <PIC::eoi(unsigned char)+0x95>
c001ebb0:	90                   	nop
c001ebb1:	c9                   	leave  
c001ebb2:	c3                   	ret    
c001ebb3:	90                   	nop

c001ebb4 <PIC::remap()>:
c001ebb4:	55                   	push   ebp
c001ebb5:	89 e5                	mov    ebp,esp
c001ebb7:	83 ec 48             	sub    esp,0x48
c001ebba:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ebc1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebc8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebce:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebd1:	89 c2                	mov    edx,eax
c001ebd3:	ec                   	in     al,dx
c001ebd4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebd7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebda:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebdd:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebe3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebe6:	89 c2                	mov    edx,eax
c001ebe8:	ec                   	in     al,dx
c001ebe9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebec:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebef:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebf2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebf8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebfc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebff:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ec02:	ee                   	out    dx,al
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec09:	e8 96 fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ec17:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ec1b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec1e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec21:	ee                   	out    dx,al
c001ec22:	83 ec 0c             	sub    esp,0xc
c001ec25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec28:	e8 77 fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec33:	25 ff 00 00 00       	and    eax,0xff
c001ec38:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec3e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec41:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec44:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec47:	ee                   	out    dx,al
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec4e:	e8 51 fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec59:	25 ff 00 00 00       	and    eax,0xff
c001ec5e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec64:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec67:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec6d:	ee                   	out    dx,al
c001ec6e:	83 ec 0c             	sub    esp,0xc
c001ec71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec74:	e8 2b fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec79:	83 c4 10             	add    esp,0x10
c001ec7c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec82:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec86:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec89:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec8c:	ee                   	out    dx,al
c001ec8d:	83 ec 0c             	sub    esp,0xc
c001ec90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec93:	e8 0c fe ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ec98:	83 c4 10             	add    esp,0x10
c001ec9b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001eca1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001eca5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eca8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ecab:	ee                   	out    dx,al
c001ecac:	83 ec 0c             	sub    esp,0xc
c001ecaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecb2:	e8 ed fd ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ecb7:	83 c4 10             	add    esp,0x10
c001ecba:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ecc0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ecc4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ecc7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecca:	ee                   	out    dx,al
c001eccb:	83 ec 0c             	sub    esp,0xc
c001ecce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecd1:	e8 ce fd ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ecd6:	83 c4 10             	add    esp,0x10
c001ecd9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ecdf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ece3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ece6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ece9:	ee                   	out    dx,al
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecf0:	e8 af fd ff ff       	call   c001eaa4 <PIC::ioWait()>
c001ecf5:	83 c4 10             	add    esp,0x10
c001ecf8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ecfb:	25 ff 00 00 00       	and    eax,0xff
c001ed00:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ed06:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ed09:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ed0c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ed0f:	ee                   	out    dx,al
c001ed10:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ed13:	25 ff 00 00 00       	and    eax,0xff
c001ed18:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed1e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed21:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed24:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed27:	ee                   	out    dx,al
c001ed28:	90                   	nop
c001ed29:	c9                   	leave  
c001ed2a:	c3                   	ret    
c001ed2b:	90                   	nop

c001ed2c <PIC::open(int, int, void*)>:
c001ed2c:	55                   	push   ebp
c001ed2d:	89 e5                	mov    ebp,esp
c001ed2f:	83 ec 18             	sub    esp,0x18
c001ed32:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed38:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed3c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed3f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed43:	ee                   	out    dx,al
c001ed44:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed4a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed4e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed51:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed55:	ee                   	out    dx,al
c001ed56:	83 ec 0c             	sub    esp,0xc
c001ed59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed5c:	e8 53 fe ff ff       	call   c001ebb4 <PIC::remap()>
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	b8 00 00 00 00       	mov    eax,0x0
c001ed69:	c9                   	leave  
c001ed6a:	c3                   	ret    
c001ed6b:	90                   	nop

c001ed6c <APICTimer::close(int, int, void*)>:
c001ed6c:	b8 00 00 00 00       	mov    eax,0x0
c001ed71:	c3                   	ret    

c001ed72 <apicTimerHandler(regs*, void*)>:
c001ed72:	83 ec 0c             	sub    esp,0xc
c001ed75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed79:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed7b:	89 c2                	mov    edx,eax
c001ed7d:	c1 fa 1f             	sar    edx,0x1f
c001ed80:	52                   	push   edx
c001ed81:	50                   	push   eax
c001ed82:	6a 00                	push   0x0
c001ed84:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed89:	e8 8e 07 00 00       	call   c001f51c <__udivdi3>
c001ed8e:	83 c4 10             	add    esp,0x10
c001ed91:	83 ec 08             	sub    esp,0x8
c001ed94:	52                   	push   edx
c001ed95:	50                   	push   eax
c001ed96:	e8 08 40 ff ff       	call   c0012da3 <timerHandler(unsigned long long)>
c001ed9b:	83 c4 10             	add    esp,0x10
c001ed9e:	90                   	nop
c001ed9f:	83 c4 0c             	add    esp,0xc
c001eda2:	c3                   	ret    
c001eda3:	90                   	nop

c001eda4 <APICTimer::write(int)>:
c001eda4:	53                   	push   ebx
c001eda5:	83 ec 28             	sub    esp,0x28
c001eda8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001edac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001edb0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001edb6:	e8 2b 5b ff ff       	call   c00148e6 <thisCPU()>
c001edbb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edc1:	83 ec 0c             	sub    esp,0xc
c001edc4:	50                   	push   eax
c001edc5:	e8 a2 f5 ff ff       	call   c001e36c <APIC::getBase()>
c001edca:	83 c4 10             	add    esp,0x10
c001edcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edd1:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001edd6:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001eddc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ede0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ede4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ede8:	05 e0 03 00 00       	add    eax,0x3e0
c001eded:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001edf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edf7:	05 80 03 00 00       	add    eax,0x380
c001edfc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ee02:	fb                   	sti    
c001ee03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee0b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ee10:	83 d2 00             	adc    edx,0x0
c001ee13:	89 c1                	mov    ecx,eax
c001ee15:	89 d3                	mov    ebx,edx
c001ee17:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001ee1c:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001ee22:	39 c8                	cmp    eax,ecx
c001ee24:	89 d0                	mov    eax,edx
c001ee26:	19 d8                	sbb    eax,ebx
c001ee28:	73 02                	jae    c001ee2c <APICTimer::write(int)+0x88>
c001ee2a:	eb d7                	jmp    c001ee03 <APICTimer::write(int)+0x5f>
c001ee2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee30:	05 20 03 00 00       	add    eax,0x320
c001ee35:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee3f:	05 90 03 00 00       	add    eax,0x390
c001ee44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee46:	f7 d0                	not    eax
c001ee48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee4c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee54:	ba 00 00 00 00       	mov    edx,0x0
c001ee59:	f7 f3                	div    ebx
c001ee5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee63:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee69:	0d 00 00 02 00       	or     eax,0x20000
c001ee6e:	89 c2                	mov    edx,eax
c001ee70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee74:	05 20 03 00 00       	add    eax,0x320
c001ee79:	89 10                	mov    DWORD PTR [eax],edx
c001ee7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee7f:	05 e0 03 00 00       	add    eax,0x3e0
c001ee84:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee8e:	05 80 03 00 00       	add    eax,0x380
c001ee93:	89 c2                	mov    edx,eax
c001ee95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee99:	89 02                	mov    DWORD PTR [edx],eax
c001ee9b:	90                   	nop
c001ee9c:	83 c4 28             	add    esp,0x28
c001ee9f:	5b                   	pop    ebx
c001eea0:	c3                   	ret    
c001eea1:	90                   	nop

c001eea2 <APICTimer::open(int, int, void*)>:
c001eea2:	57                   	push   edi
c001eea3:	56                   	push   esi
c001eea4:	53                   	push   ebx
c001eea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea9:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeab:	83 c0 24             	add    eax,0x24
c001eeae:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeb0:	83 ec 08             	sub    esp,0x8
c001eeb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eebb:	ff d0                	call   eax
c001eebd:	83 c4 10             	add    esp,0x10
c001eec0:	e8 21 5a ff ff       	call   c00148e6 <thisCPU()>
c001eec5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eecb:	83 ec 0c             	sub    esp,0xc
c001eece:	50                   	push   eax
c001eecf:	e8 98 f4 ff ff       	call   c001e36c <APIC::getBase()>
c001eed4:	83 c4 10             	add    esp,0x10
c001eed7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eee7:	89 c7                	mov    edi,eax
c001eee9:	81 e7 ff 00 00 00    	and    edi,0xff
c001eeef:	89 d0                	mov    eax,edx
c001eef1:	ba 00 00 00 00       	mov    edx,0x0
c001eef6:	89 c1                	mov    ecx,eax
c001eef8:	80 e5 ff             	and    ch,0xff
c001eefb:	89 cb                	mov    ebx,ecx
c001eefd:	89 d0                	mov    eax,edx
c001eeff:	25 ff 00 00 00       	and    eax,0xff
c001ef04:	89 c6                	mov    esi,eax
c001ef06:	89 d8                	mov    eax,ebx
c001ef08:	89 f2                	mov    edx,esi
c001ef0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef0e:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ef11:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef15:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef19:	83 e0 00             	and    eax,0x0
c001ef1c:	09 d0                	or     eax,edx
c001ef1e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef26:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ef2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef33:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef39:	31 d2                	xor    edx,edx
c001ef3b:	88 c2                	mov    dl,al
c001ef3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef41:	83 c2 08             	add    edx,0x8
c001ef44:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef48:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef4e:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef54:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef6e:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef78:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef7e:	83 ec 0c             	sub    esp,0xc
c001ef81:	51                   	push   ecx
c001ef82:	6a 01                	push   0x1
c001ef84:	68 72 ed 01 c0       	push   0xc001ed72
c001ef89:	52                   	push   edx
c001ef8a:	50                   	push   eax
c001ef8b:	e8 fc 15 ff ff       	call   c001058c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef90:	83 c4 20             	add    esp,0x20
c001ef93:	89 c2                	mov    edx,eax
c001ef95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef99:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef9f:	b8 00 00 00 00       	mov    eax,0x0
c001efa4:	5b                   	pop    ebx
c001efa5:	5e                   	pop    esi
c001efa6:	5f                   	pop    edi
c001efa7:	c3                   	ret    

c001efa8 <APICTimer::APICTimer()>:
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efaf:	83 ec 08             	sub    esp,0x8
c001efb2:	68 30 3b 02 c0       	push   0xc0023b30
c001efb7:	50                   	push   eax
c001efb8:	e8 57 3d ff ff       	call   c0012d14 <Timer::Timer(char const*)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c001efc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc9:	89 10                	mov    DWORD PTR [eax],edx
c001efcb:	90                   	nop
c001efcc:	83 c4 0c             	add    esp,0xc
c001efcf:	c3                   	ret    

c001efd0 <PIT::write(int)>:
c001efd0:	83 ec 10             	sub    esp,0x10
c001efd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efe5:	a3 a4 65 02 c0       	mov    ds:0xc00265a4,eax
c001efea:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efef:	89 c2                	mov    edx,eax
c001eff1:	c1 fa 1f             	sar    edx,0x1f
c001eff4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001effc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f003:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f008:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f00c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f011:	ee                   	out    dx,al
c001f012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f016:	25 ff 00 00 00       	and    eax,0xff
c001f01b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f022:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f026:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f02a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f02f:	ee                   	out    dx,al
c001f030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f034:	c1 f8 08             	sar    eax,0x8
c001f037:	25 ff 00 00 00       	and    eax,0xff
c001f03c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f043:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f047:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f04b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f050:	ee                   	out    dx,al
c001f051:	90                   	nop
c001f052:	83 c4 10             	add    esp,0x10
c001f055:	c3                   	ret    

c001f056 <pitHandler(regs*, void*)>:
c001f056:	83 ec 0c             	sub    esp,0xc
c001f059:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c001f05e:	89 c2                	mov    edx,eax
c001f060:	c1 fa 1f             	sar    edx,0x1f
c001f063:	52                   	push   edx
c001f064:	50                   	push   eax
c001f065:	6a 00                	push   0x0
c001f067:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f06c:	e8 ab 04 00 00       	call   c001f51c <__udivdi3>
c001f071:	83 c4 10             	add    esp,0x10
c001f074:	83 ec 08             	sub    esp,0x8
c001f077:	52                   	push   edx
c001f078:	50                   	push   eax
c001f079:	e8 25 3d ff ff       	call   c0012da3 <timerHandler(unsigned long long)>
c001f07e:	83 c4 10             	add    esp,0x10
c001f081:	90                   	nop
c001f082:	83 c4 0c             	add    esp,0xc
c001f085:	c3                   	ret    

c001f086 <PIT::open(int, int, void*)>:
c001f086:	83 ec 0c             	sub    esp,0xc
c001f089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f08f:	83 c0 24             	add    eax,0x24
c001f092:	8b 00                	mov    eax,DWORD PTR [eax]
c001f094:	83 ec 08             	sub    esp,0x8
c001f097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09f:	ff d0                	call   eax
c001f0a1:	83 c4 10             	add    esp,0x10
c001f0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	6a 00                	push   0x0
c001f0ad:	6a 01                	push   0x1
c001f0af:	68 56 f0 01 c0       	push   0xc001f056
c001f0b4:	6a 00                	push   0x0
c001f0b6:	50                   	push   eax
c001f0b7:	e8 d0 14 ff ff       	call   c001058c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0bc:	83 c4 20             	add    esp,0x20
c001f0bf:	89 c2                	mov    edx,eax
c001f0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0cb:	b8 00 00 00 00       	mov    eax,0x0
c001f0d0:	83 c4 0c             	add    esp,0xc
c001f0d3:	c3                   	ret    

c001f0d4 <PIT::close(int, int, void*)>:
c001f0d4:	83 ec 0c             	sub    esp,0xc
c001f0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0db:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e9:	6a 01                	push   0x1
c001f0eb:	68 56 f0 01 c0       	push   0xc001f056
c001f0f0:	6a 00                	push   0x0
c001f0f2:	50                   	push   eax
c001f0f3:	e8 f2 14 ff ff       	call   c00105ea <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0f8:	83 c4 10             	add    esp,0x10
c001f0fb:	b8 00 00 00 00       	mov    eax,0x0
c001f100:	83 c4 0c             	add    esp,0xc
c001f103:	c3                   	ret    

c001f104 <PIT::PIT()>:
c001f104:	83 ec 0c             	sub    esp,0xc
c001f107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10b:	83 ec 08             	sub    esp,0x8
c001f10e:	68 6c 3b 02 c0       	push   0xc0023b6c
c001f113:	50                   	push   eax
c001f114:	e8 fb 3b ff ff       	call   c0012d14 <Timer::Timer(char const*)>
c001f119:	83 c4 10             	add    esp,0x10
c001f11c:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c001f121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f125:	89 10                	mov    DWORD PTR [eax],edx
c001f127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f131:	31 d2                	xor    edx,edx
c001f133:	88 c2                	mov    dl,al
c001f135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f139:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f144:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f14a:	31 d2                	xor    edx,edx
c001f14c:	88 c2                	mov    dl,al
c001f14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f152:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f161:	8d 50 01             	lea    edx,[eax+0x1]
c001f164:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f168:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f16e:	31 d2                	xor    edx,edx
c001f170:	88 c2                	mov    dl,al
c001f172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f176:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f17a:	83 e1 3f             	and    ecx,0x3f
c001f17d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f181:	90                   	nop
c001f182:	83 c4 0c             	add    esp,0xc
c001f185:	c3                   	ret    
c001f186:	66 90                	xchg   ax,ax
c001f188:	66 90                	xchg   ax,ax
c001f18a:	66 90                	xchg   ax,ax
c001f18c:	66 90                	xchg   ax,ax
c001f18e:	66 90                	xchg   ax,ax

c001f190 <avxDetect>:
c001f190:	b8 00 00 00 00       	mov    eax,0x0
c001f195:	c3                   	ret    

c001f196 <avxSave>:
c001f196:	c3                   	ret    

c001f197 <avxLoad>:
c001f197:	c3                   	ret    

c001f198 <avxInit>:
c001f198:	c3                   	ret    

c001f199 <avxClose>:
c001f199:	c3                   	ret    
c001f19a:	66 90                	xchg   ax,ax
c001f19c:	66 90                	xchg   ax,ax
c001f19e:	66 90                	xchg   ax,ax

c001f1a0 <sseDetect>:
c001f1a0:	b8 01 00 00 00       	mov    eax,0x1
c001f1a5:	0f a2                	cpuid  
c001f1a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f1ad:	74 06                	je     c001f1b5 <sseDetect.noSSE>
c001f1af:	b8 01 00 00 00       	mov    eax,0x1
c001f1b4:	c3                   	ret    

c001f1b5 <sseDetect.noSSE>:
c001f1b5:	b8 00 00 00 00       	mov    eax,0x0
c001f1ba:	c3                   	ret    

c001f1bb <sseSave>:
c001f1bb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1c0:	c3                   	ret    

c001f1c1 <sseLoad>:
c001f1c1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1c6:	c3                   	ret    

c001f1c7 <sseInit>:
c001f1c7:	e8 40 00 00 00       	call   c001f20c <x87Init>
c001f1cc:	0f 20 e0             	mov    eax,cr4
c001f1cf:	66 0d 00 06          	or     ax,0x600
c001f1d3:	0f 22 e0             	mov    cr4,eax
c001f1d6:	c3                   	ret    

c001f1d7 <sseClose>:
c001f1d7:	c3                   	ret    
c001f1d8:	66 90                	xchg   ax,ax
c001f1da:	66 90                	xchg   ax,ax
c001f1dc:	66 90                	xchg   ax,ax
c001f1de:	66 90                	xchg   ax,ax

c001f1e0 <value_37F>:
c001f1e0:	7f 03                	jg     c001f1e5 <value_37A+0x1>

c001f1e2 <value_37E>:
c001f1e2:	7e 03                	jle    c001f1e7 <x87Detect+0x1>

c001f1e4 <value_37A>:
c001f1e4:	7a 03                	jp     c001f1e9 <x87Detect+0x3>

c001f1e6 <x87Detect>:
c001f1e6:	b8 01 00 00 00       	mov    eax,0x1
c001f1eb:	0f a2                	cpuid  
c001f1ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1f3:	74 06                	je     c001f1fb <x87Detect.nox87>
c001f1f5:	b8 01 00 00 00       	mov    eax,0x1
c001f1fa:	c3                   	ret    

c001f1fb <x87Detect.nox87>:
c001f1fb:	b8 00 00 00 00       	mov    eax,0x0
c001f200:	c3                   	ret    

c001f201 <x87Save>:
c001f201:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f206:	c3                   	ret    

c001f207 <x87Load>:
c001f207:	dd 64 24 08          	frstor [esp+0x8]
c001f20b:	c3                   	ret    

c001f20c <x87Init>:
c001f20c:	9b db e3             	finit  
c001f20f:	0f 20 c0             	mov    eax,cr0
c001f212:	66 25 fb ff          	and    ax,0xfffb
c001f216:	66 0d 22 00          	or     ax,0x22
c001f21a:	0f 22 c0             	mov    cr0,eax
c001f21d:	0f 06                	clts   
c001f21f:	d9 2d e4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1e4
c001f225:	c3                   	ret    

c001f226 <x87Close>:
c001f226:	c3                   	ret    
c001f227:	90                   	nop

c001f228 <__do_global_ctors_aux>:
c001f228:	a1 08 03 02 c0       	mov    eax,ds:0xc0020308
c001f22d:	83 f8 ff             	cmp    eax,0xffffffff
c001f230:	74 1a                	je     c001f24c <__do_global_ctors_aux+0x24>
c001f232:	55                   	push   ebp
c001f233:	89 e5                	mov    ebp,esp
c001f235:	53                   	push   ebx
c001f236:	52                   	push   edx
c001f237:	bb 08 03 02 c0       	mov    ebx,0xc0020308
c001f23c:	ff d0                	call   eax
c001f23e:	83 eb 04             	sub    ebx,0x4
c001f241:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f243:	83 f8 ff             	cmp    eax,0xffffffff
c001f246:	75 f4                	jne    c001f23c <__do_global_ctors_aux+0x14>
c001f248:	58                   	pop    eax
c001f249:	5b                   	pop    ebx
c001f24a:	5d                   	pop    ebp
c001f24b:	c3                   	ret    
c001f24c:	c3                   	ret    
c001f24d:	66 90                	xchg   ax,ax
c001f24f:	90                   	nop

c001f250 <__divdi3>:
c001f250:	55                   	push   ebp
c001f251:	57                   	push   edi
c001f252:	56                   	push   esi
c001f253:	53                   	push   ebx
c001f254:	83 ec 1c             	sub    esp,0x1c
c001f257:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f25b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f25f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f262:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f266:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f26a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f26e:	85 db                	test   ebx,ebx
c001f270:	0f 88 8e 00 00 00    	js     c001f304 <__divdi3+0xb4>
c001f276:	89 dd                	mov    ebp,ebx
c001f278:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f280:	89 d3                	mov    ebx,edx
c001f282:	85 d2                	test   edx,edx
c001f284:	79 0d                	jns    c001f293 <__divdi3+0x43>
c001f286:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f28a:	f7 d8                	neg    eax
c001f28c:	83 d2 00             	adc    edx,0x0
c001f28f:	f7 da                	neg    edx
c001f291:	89 d3                	mov    ebx,edx
c001f293:	89 c7                	mov    edi,eax
c001f295:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f298:	85 db                	test   ebx,ebx
c001f29a:	75 48                	jne    c001f2e4 <__divdi3+0x94>
c001f29c:	39 ef                	cmp    edi,ebp
c001f29e:	76 24                	jbe    c001f2c4 <__divdi3+0x74>
c001f2a0:	89 ea                	mov    edx,ebp
c001f2a2:	f7 f7                	div    edi
c001f2a4:	89 c1                	mov    ecx,eax
c001f2a6:	31 f6                	xor    esi,esi
c001f2a8:	89 c8                	mov    eax,ecx
c001f2aa:	89 f2                	mov    edx,esi
c001f2ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2b0:	85 c9                	test   ecx,ecx
c001f2b2:	74 07                	je     c001f2bb <__divdi3+0x6b>
c001f2b4:	f7 d8                	neg    eax
c001f2b6:	83 d2 00             	adc    edx,0x0
c001f2b9:	f7 da                	neg    edx
c001f2bb:	83 c4 1c             	add    esp,0x1c
c001f2be:	5b                   	pop    ebx
c001f2bf:	5e                   	pop    esi
c001f2c0:	5f                   	pop    edi
c001f2c1:	5d                   	pop    ebp
c001f2c2:	c3                   	ret    
c001f2c3:	90                   	nop
c001f2c4:	85 ff                	test   edi,edi
c001f2c6:	75 0b                	jne    c001f2d3 <__divdi3+0x83>
c001f2c8:	b8 01 00 00 00       	mov    eax,0x1
c001f2cd:	31 d2                	xor    edx,edx
c001f2cf:	f7 f3                	div    ebx
c001f2d1:	89 c7                	mov    edi,eax
c001f2d3:	31 d2                	xor    edx,edx
c001f2d5:	89 e8                	mov    eax,ebp
c001f2d7:	f7 f7                	div    edi
c001f2d9:	89 c6                	mov    esi,eax
c001f2db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2de:	f7 f7                	div    edi
c001f2e0:	89 c1                	mov    ecx,eax
c001f2e2:	eb c4                	jmp    c001f2a8 <__divdi3+0x58>
c001f2e4:	39 eb                	cmp    ebx,ebp
c001f2e6:	77 3c                	ja     c001f324 <__divdi3+0xd4>
c001f2e8:	0f bd f3             	bsr    esi,ebx
c001f2eb:	83 f6 1f             	xor    esi,0x1f
c001f2ee:	75 40                	jne    c001f330 <__divdi3+0xe0>
c001f2f0:	39 eb                	cmp    ebx,ebp
c001f2f2:	72 09                	jb     c001f2fd <__divdi3+0xad>
c001f2f4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2f7:	0f 87 97 00 00 00    	ja     c001f394 <__divdi3+0x144>
c001f2fd:	b9 01 00 00 00       	mov    ecx,0x1
c001f302:	eb a4                	jmp    c001f2a8 <__divdi3+0x58>
c001f304:	f7 d9                	neg    ecx
c001f306:	83 d3 00             	adc    ebx,0x0
c001f309:	f7 db                	neg    ebx
c001f30b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f30e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f312:	89 dd                	mov    ebp,ebx
c001f314:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f31c:	e9 5f ff ff ff       	jmp    c001f280 <__divdi3+0x30>
c001f321:	8d 76 00             	lea    esi,[esi+0x0]
c001f324:	31 f6                	xor    esi,esi
c001f326:	31 c9                	xor    ecx,ecx
c001f328:	e9 7b ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f32d:	8d 76 00             	lea    esi,[esi+0x0]
c001f330:	b8 20 00 00 00       	mov    eax,0x20
c001f335:	29 f0                	sub    eax,esi
c001f337:	89 f1                	mov    ecx,esi
c001f339:	d3 e3                	shl    ebx,cl
c001f33b:	89 fa                	mov    edx,edi
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 ea                	shr    edx,cl
c001f341:	09 da                	or     edx,ebx
c001f343:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f347:	89 f1                	mov    ecx,esi
c001f349:	d3 e7                	shl    edi,cl
c001f34b:	89 eb                	mov    ebx,ebp
c001f34d:	88 c1                	mov    cl,al
c001f34f:	d3 eb                	shr    ebx,cl
c001f351:	89 f1                	mov    ecx,esi
c001f353:	d3 e5                	shl    ebp,cl
c001f355:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f358:	88 c1                	mov    cl,al
c001f35a:	d3 ea                	shr    edx,cl
c001f35c:	09 d5                	or     ebp,edx
c001f35e:	89 e8                	mov    eax,ebp
c001f360:	89 da                	mov    edx,ebx
c001f362:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f366:	89 d3                	mov    ebx,edx
c001f368:	89 c5                	mov    ebp,eax
c001f36a:	f7 e7                	mul    edi
c001f36c:	39 d3                	cmp    ebx,edx
c001f36e:	72 18                	jb     c001f388 <__divdi3+0x138>
c001f370:	74 0a                	je     c001f37c <__divdi3+0x12c>
c001f372:	89 e9                	mov    ecx,ebp
c001f374:	31 f6                	xor    esi,esi
c001f376:	e9 2d ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f37b:	90                   	nop
c001f37c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f37f:	89 f1                	mov    ecx,esi
c001f381:	d3 e7                	shl    edi,cl
c001f383:	39 c7                	cmp    edi,eax
c001f385:	73 eb                	jae    c001f372 <__divdi3+0x122>
c001f387:	90                   	nop
c001f388:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f38b:	31 f6                	xor    esi,esi
c001f38d:	e9 16 ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f392:	66 90                	xchg   ax,ax
c001f394:	31 c9                	xor    ecx,ecx
c001f396:	e9 0d ff ff ff       	jmp    c001f2a8 <__divdi3+0x58>
c001f39b:	90                   	nop

c001f39c <__moddi3>:
c001f39c:	55                   	push   ebp
c001f39d:	57                   	push   edi
c001f39e:	56                   	push   esi
c001f39f:	53                   	push   ebx
c001f3a0:	83 ec 2c             	sub    esp,0x2c
c001f3a3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f3a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f3ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f3af:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3b3:	85 db                	test   ebx,ebx
c001f3b5:	0f 88 85 00 00 00    	js     c001f440 <__moddi3+0xa4>
c001f3bb:	89 de                	mov    esi,ebx
c001f3bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3c5:	89 d7                	mov    edi,edx
c001f3c7:	85 d2                	test   edx,edx
c001f3c9:	79 09                	jns    c001f3d4 <__moddi3+0x38>
c001f3cb:	f7 d8                	neg    eax
c001f3cd:	83 d2 00             	adc    edx,0x0
c001f3d0:	f7 da                	neg    edx
c001f3d2:	89 d7                	mov    edi,edx
c001f3d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3d8:	89 cd                	mov    ebp,ecx
c001f3da:	85 ff                	test   edi,edi
c001f3dc:	75 52                	jne    c001f430 <__moddi3+0x94>
c001f3de:	89 c3                	mov    ebx,eax
c001f3e0:	39 f0                	cmp    eax,esi
c001f3e2:	76 24                	jbe    c001f408 <__moddi3+0x6c>
c001f3e4:	89 c8                	mov    eax,ecx
c001f3e6:	89 f2                	mov    edx,esi
c001f3e8:	f7 f3                	div    ebx
c001f3ea:	89 d6                	mov    esi,edx
c001f3ec:	89 f0                	mov    eax,esi
c001f3ee:	31 d2                	xor    edx,edx
c001f3f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3f4:	85 c9                	test   ecx,ecx
c001f3f6:	74 07                	je     c001f3ff <__moddi3+0x63>
c001f3f8:	f7 d8                	neg    eax
c001f3fa:	83 d2 00             	adc    edx,0x0
c001f3fd:	f7 da                	neg    edx
c001f3ff:	83 c4 2c             	add    esp,0x2c
c001f402:	5b                   	pop    ebx
c001f403:	5e                   	pop    esi
c001f404:	5f                   	pop    edi
c001f405:	5d                   	pop    ebp
c001f406:	c3                   	ret    
c001f407:	90                   	nop
c001f408:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f40c:	85 db                	test   ebx,ebx
c001f40e:	75 0d                	jne    c001f41d <__moddi3+0x81>
c001f410:	b8 01 00 00 00       	mov    eax,0x1
c001f415:	31 d2                	xor    edx,edx
c001f417:	f7 f7                	div    edi
c001f419:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f41d:	89 f0                	mov    eax,esi
c001f41f:	31 d2                	xor    edx,edx
c001f421:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f425:	f7 f7                	div    edi
c001f427:	89 e8                	mov    eax,ebp
c001f429:	f7 f7                	div    edi
c001f42b:	89 d6                	mov    esi,edx
c001f42d:	eb bd                	jmp    c001f3ec <__moddi3+0x50>
c001f42f:	90                   	nop
c001f430:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f434:	39 f7                	cmp    edi,esi
c001f436:	76 20                	jbe    c001f458 <__moddi3+0xbc>
c001f438:	89 c8                	mov    eax,ecx
c001f43a:	89 f2                	mov    edx,esi
c001f43c:	eb b2                	jmp    c001f3f0 <__moddi3+0x54>
c001f43e:	66 90                	xchg   ax,ax
c001f440:	f7 d9                	neg    ecx
c001f442:	83 d3 00             	adc    ebx,0x0
c001f445:	f7 db                	neg    ebx
c001f447:	89 de                	mov    esi,ebx
c001f449:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f451:	e9 6f ff ff ff       	jmp    c001f3c5 <__moddi3+0x29>
c001f456:	66 90                	xchg   ax,ax
c001f458:	0f bd c7             	bsr    eax,edi
c001f45b:	83 f0 1f             	xor    eax,0x1f
c001f45e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f462:	75 24                	jne    c001f488 <__moddi3+0xec>
c001f464:	39 f7                	cmp    edi,esi
c001f466:	72 06                	jb     c001f46e <__moddi3+0xd2>
c001f468:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f46c:	77 0c                	ja     c001f47a <__moddi3+0xde>
c001f46e:	89 e9                	mov    ecx,ebp
c001f470:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f474:	19 fe                	sbb    esi,edi
c001f476:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f47a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f47e:	89 f2                	mov    edx,esi
c001f480:	e9 6b ff ff ff       	jmp    c001f3f0 <__moddi3+0x54>
c001f485:	8d 76 00             	lea    esi,[esi+0x0]
c001f488:	b8 20 00 00 00       	mov    eax,0x20
c001f48d:	89 c2                	mov    edx,eax
c001f48f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f493:	29 da                	sub    edx,ebx
c001f495:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f499:	88 d9                	mov    cl,bl
c001f49b:	d3 e7                	shl    edi,cl
c001f49d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4a1:	88 d1                	mov    cl,dl
c001f4a3:	d3 e8                	shr    eax,cl
c001f4a5:	09 c7                	or     edi,eax
c001f4a7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f4ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f4af:	89 d8                	mov    eax,ebx
c001f4b1:	88 d9                	mov    cl,bl
c001f4b3:	d3 e7                	shl    edi,cl
c001f4b5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4b9:	89 f3                	mov    ebx,esi
c001f4bb:	88 d1                	mov    cl,dl
c001f4bd:	d3 eb                	shr    ebx,cl
c001f4bf:	89 c7                	mov    edi,eax
c001f4c1:	88 c1                	mov    cl,al
c001f4c3:	d3 e6                	shl    esi,cl
c001f4c5:	89 e8                	mov    eax,ebp
c001f4c7:	88 d1                	mov    cl,dl
c001f4c9:	d3 e8                	shr    eax,cl
c001f4cb:	09 f0                	or     eax,esi
c001f4cd:	89 f9                	mov    ecx,edi
c001f4cf:	d3 e5                	shl    ebp,cl
c001f4d1:	89 da                	mov    edx,ebx
c001f4d3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4d7:	89 d3                	mov    ebx,edx
c001f4d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4dd:	89 c6                	mov    esi,eax
c001f4df:	89 d1                	mov    ecx,edx
c001f4e1:	39 d3                	cmp    ebx,edx
c001f4e3:	72 27                	jb     c001f50c <__moddi3+0x170>
c001f4e5:	74 21                	je     c001f508 <__moddi3+0x16c>
c001f4e7:	29 f5                	sub    ebp,esi
c001f4e9:	19 cb                	sbb    ebx,ecx
c001f4eb:	89 de                	mov    esi,ebx
c001f4ed:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4f1:	d3 e6                	shl    esi,cl
c001f4f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4f7:	89 f9                	mov    ecx,edi
c001f4f9:	d3 ed                	shr    ebp,cl
c001f4fb:	09 ee                	or     esi,ebp
c001f4fd:	89 f0                	mov    eax,esi
c001f4ff:	d3 eb                	shr    ebx,cl
c001f501:	89 da                	mov    edx,ebx
c001f503:	e9 e8 fe ff ff       	jmp    c001f3f0 <__moddi3+0x54>
c001f508:	39 c5                	cmp    ebp,eax
c001f50a:	73 db                	jae    c001f4e7 <__moddi3+0x14b>
c001f50c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f510:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f514:	89 d1                	mov    ecx,edx
c001f516:	89 c6                	mov    esi,eax
c001f518:	eb cd                	jmp    c001f4e7 <__moddi3+0x14b>
c001f51a:	66 90                	xchg   ax,ax

c001f51c <__udivdi3>:
c001f51c:	55                   	push   ebp
c001f51d:	57                   	push   edi
c001f51e:	56                   	push   esi
c001f51f:	53                   	push   ebx
c001f520:	83 ec 1c             	sub    esp,0x1c
c001f523:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f527:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f52b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f52f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f533:	85 d2                	test   edx,edx
c001f535:	75 41                	jne    c001f578 <__udivdi3+0x5c>
c001f537:	39 f7                	cmp    edi,esi
c001f539:	76 15                	jbe    c001f550 <__udivdi3+0x34>
c001f53b:	89 e8                	mov    eax,ebp
c001f53d:	89 f2                	mov    edx,esi
c001f53f:	f7 f7                	div    edi
c001f541:	31 db                	xor    ebx,ebx
c001f543:	89 da                	mov    edx,ebx
c001f545:	83 c4 1c             	add    esp,0x1c
c001f548:	5b                   	pop    ebx
c001f549:	5e                   	pop    esi
c001f54a:	5f                   	pop    edi
c001f54b:	5d                   	pop    ebp
c001f54c:	c3                   	ret    
c001f54d:	8d 76 00             	lea    esi,[esi+0x0]
c001f550:	89 f9                	mov    ecx,edi
c001f552:	85 ff                	test   edi,edi
c001f554:	75 0b                	jne    c001f561 <__udivdi3+0x45>
c001f556:	b8 01 00 00 00       	mov    eax,0x1
c001f55b:	31 d2                	xor    edx,edx
c001f55d:	f7 f7                	div    edi
c001f55f:	89 c1                	mov    ecx,eax
c001f561:	31 d2                	xor    edx,edx
c001f563:	89 f0                	mov    eax,esi
c001f565:	f7 f1                	div    ecx
c001f567:	89 c3                	mov    ebx,eax
c001f569:	89 e8                	mov    eax,ebp
c001f56b:	f7 f1                	div    ecx
c001f56d:	89 da                	mov    edx,ebx
c001f56f:	83 c4 1c             	add    esp,0x1c
c001f572:	5b                   	pop    ebx
c001f573:	5e                   	pop    esi
c001f574:	5f                   	pop    edi
c001f575:	5d                   	pop    ebp
c001f576:	c3                   	ret    
c001f577:	90                   	nop
c001f578:	39 f2                	cmp    edx,esi
c001f57a:	77 1c                	ja     c001f598 <__udivdi3+0x7c>
c001f57c:	0f bd da             	bsr    ebx,edx
c001f57f:	83 f3 1f             	xor    ebx,0x1f
c001f582:	75 24                	jne    c001f5a8 <__udivdi3+0x8c>
c001f584:	39 f2                	cmp    edx,esi
c001f586:	72 08                	jb     c001f590 <__udivdi3+0x74>
c001f588:	39 ef                	cmp    edi,ebp
c001f58a:	0f 87 84 00 00 00    	ja     c001f614 <__udivdi3+0xf8>
c001f590:	b8 01 00 00 00       	mov    eax,0x1
c001f595:	eb ac                	jmp    c001f543 <__udivdi3+0x27>
c001f597:	90                   	nop
c001f598:	31 db                	xor    ebx,ebx
c001f59a:	31 c0                	xor    eax,eax
c001f59c:	89 da                	mov    edx,ebx
c001f59e:	83 c4 1c             	add    esp,0x1c
c001f5a1:	5b                   	pop    ebx
c001f5a2:	5e                   	pop    esi
c001f5a3:	5f                   	pop    edi
c001f5a4:	5d                   	pop    ebp
c001f5a5:	c3                   	ret    
c001f5a6:	66 90                	xchg   ax,ax
c001f5a8:	b8 20 00 00 00       	mov    eax,0x20
c001f5ad:	29 d8                	sub    eax,ebx
c001f5af:	88 d9                	mov    cl,bl
c001f5b1:	d3 e2                	shl    edx,cl
c001f5b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5b7:	89 fa                	mov    edx,edi
c001f5b9:	88 c1                	mov    cl,al
c001f5bb:	d3 ea                	shr    edx,cl
c001f5bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5c1:	09 d1                	or     ecx,edx
c001f5c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5c7:	88 d9                	mov    cl,bl
c001f5c9:	d3 e7                	shl    edi,cl
c001f5cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5cf:	89 f7                	mov    edi,esi
c001f5d1:	88 c1                	mov    cl,al
c001f5d3:	d3 ef                	shr    edi,cl
c001f5d5:	88 d9                	mov    cl,bl
c001f5d7:	d3 e6                	shl    esi,cl
c001f5d9:	89 ea                	mov    edx,ebp
c001f5db:	88 c1                	mov    cl,al
c001f5dd:	d3 ea                	shr    edx,cl
c001f5df:	09 d6                	or     esi,edx
c001f5e1:	89 f0                	mov    eax,esi
c001f5e3:	89 fa                	mov    edx,edi
c001f5e5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5e9:	89 d7                	mov    edi,edx
c001f5eb:	89 c6                	mov    esi,eax
c001f5ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5f1:	39 d7                	cmp    edi,edx
c001f5f3:	72 13                	jb     c001f608 <__udivdi3+0xec>
c001f5f5:	74 09                	je     c001f600 <__udivdi3+0xe4>
c001f5f7:	89 f0                	mov    eax,esi
c001f5f9:	31 db                	xor    ebx,ebx
c001f5fb:	e9 43 ff ff ff       	jmp    c001f543 <__udivdi3+0x27>
c001f600:	88 d9                	mov    cl,bl
c001f602:	d3 e5                	shl    ebp,cl
c001f604:	39 c5                	cmp    ebp,eax
c001f606:	73 ef                	jae    c001f5f7 <__udivdi3+0xdb>
c001f608:	8d 46 ff             	lea    eax,[esi-0x1]
c001f60b:	31 db                	xor    ebx,ebx
c001f60d:	e9 31 ff ff ff       	jmp    c001f543 <__udivdi3+0x27>
c001f612:	66 90                	xchg   ax,ax
c001f614:	31 c0                	xor    eax,eax
c001f616:	e9 28 ff ff ff       	jmp    c001f543 <__udivdi3+0x27>
c001f61b:	90                   	nop

c001f61c <__umoddi3>:
c001f61c:	55                   	push   ebp
c001f61d:	57                   	push   edi
c001f61e:	56                   	push   esi
c001f61f:	53                   	push   ebx
c001f620:	83 ec 1c             	sub    esp,0x1c
c001f623:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f627:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f62b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f62f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f633:	89 da                	mov    edx,ebx
c001f635:	85 c0                	test   eax,eax
c001f637:	75 37                	jne    c001f670 <__umoddi3+0x54>
c001f639:	39 df                	cmp    edi,ebx
c001f63b:	76 13                	jbe    c001f650 <__umoddi3+0x34>
c001f63d:	89 f0                	mov    eax,esi
c001f63f:	f7 f7                	div    edi
c001f641:	89 d0                	mov    eax,edx
c001f643:	31 d2                	xor    edx,edx
c001f645:	83 c4 1c             	add    esp,0x1c
c001f648:	5b                   	pop    ebx
c001f649:	5e                   	pop    esi
c001f64a:	5f                   	pop    edi
c001f64b:	5d                   	pop    ebp
c001f64c:	c3                   	ret    
c001f64d:	8d 76 00             	lea    esi,[esi+0x0]
c001f650:	89 fd                	mov    ebp,edi
c001f652:	85 ff                	test   edi,edi
c001f654:	75 0b                	jne    c001f661 <__umoddi3+0x45>
c001f656:	b8 01 00 00 00       	mov    eax,0x1
c001f65b:	31 d2                	xor    edx,edx
c001f65d:	f7 f7                	div    edi
c001f65f:	89 c5                	mov    ebp,eax
c001f661:	89 d8                	mov    eax,ebx
c001f663:	31 d2                	xor    edx,edx
c001f665:	f7 f5                	div    ebp
c001f667:	89 f0                	mov    eax,esi
c001f669:	f7 f5                	div    ebp
c001f66b:	89 d0                	mov    eax,edx
c001f66d:	eb d4                	jmp    c001f643 <__umoddi3+0x27>
c001f66f:	90                   	nop
c001f670:	89 f1                	mov    ecx,esi
c001f672:	39 d8                	cmp    eax,ebx
c001f674:	76 0a                	jbe    c001f680 <__umoddi3+0x64>
c001f676:	89 f0                	mov    eax,esi
c001f678:	83 c4 1c             	add    esp,0x1c
c001f67b:	5b                   	pop    ebx
c001f67c:	5e                   	pop    esi
c001f67d:	5f                   	pop    edi
c001f67e:	5d                   	pop    ebp
c001f67f:	c3                   	ret    
c001f680:	0f bd e8             	bsr    ebp,eax
c001f683:	83 f5 1f             	xor    ebp,0x1f
c001f686:	75 1c                	jne    c001f6a4 <__umoddi3+0x88>
c001f688:	39 d8                	cmp    eax,ebx
c001f68a:	72 04                	jb     c001f690 <__umoddi3+0x74>
c001f68c:	39 f7                	cmp    edi,esi
c001f68e:	77 08                	ja     c001f698 <__umoddi3+0x7c>
c001f690:	89 da                	mov    edx,ebx
c001f692:	29 fe                	sub    esi,edi
c001f694:	19 c2                	sbb    edx,eax
c001f696:	89 f1                	mov    ecx,esi
c001f698:	89 c8                	mov    eax,ecx
c001f69a:	83 c4 1c             	add    esp,0x1c
c001f69d:	5b                   	pop    ebx
c001f69e:	5e                   	pop    esi
c001f69f:	5f                   	pop    edi
c001f6a0:	5d                   	pop    ebp
c001f6a1:	c3                   	ret    
c001f6a2:	66 90                	xchg   ax,ax
c001f6a4:	ba 20 00 00 00       	mov    edx,0x20
c001f6a9:	29 ea                	sub    edx,ebp
c001f6ab:	89 e9                	mov    ecx,ebp
c001f6ad:	d3 e0                	shl    eax,cl
c001f6af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6b3:	89 f8                	mov    eax,edi
c001f6b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6b9:	88 d1                	mov    cl,dl
c001f6bb:	d3 e8                	shr    eax,cl
c001f6bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6c1:	09 c1                	or     ecx,eax
c001f6c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6c7:	89 e9                	mov    ecx,ebp
c001f6c9:	d3 e7                	shl    edi,cl
c001f6cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6cf:	89 d8                	mov    eax,ebx
c001f6d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6d5:	88 d1                	mov    cl,dl
c001f6d7:	d3 e8                	shr    eax,cl
c001f6d9:	89 c7                	mov    edi,eax
c001f6db:	89 e9                	mov    ecx,ebp
c001f6dd:	d3 e3                	shl    ebx,cl
c001f6df:	89 f0                	mov    eax,esi
c001f6e1:	88 d1                	mov    cl,dl
c001f6e3:	d3 e8                	shr    eax,cl
c001f6e5:	09 d8                	or     eax,ebx
c001f6e7:	89 e9                	mov    ecx,ebp
c001f6e9:	d3 e6                	shl    esi,cl
c001f6eb:	89 f3                	mov    ebx,esi
c001f6ed:	89 fa                	mov    edx,edi
c001f6ef:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6f3:	89 d1                	mov    ecx,edx
c001f6f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6f9:	89 c6                	mov    esi,eax
c001f6fb:	89 d7                	mov    edi,edx
c001f6fd:	39 d1                	cmp    ecx,edx
c001f6ff:	72 27                	jb     c001f728 <__umoddi3+0x10c>
c001f701:	74 21                	je     c001f724 <__umoddi3+0x108>
c001f703:	89 ca                	mov    edx,ecx
c001f705:	29 f3                	sub    ebx,esi
c001f707:	19 fa                	sbb    edx,edi
c001f709:	89 d0                	mov    eax,edx
c001f70b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f70f:	d3 e0                	shl    eax,cl
c001f711:	89 e9                	mov    ecx,ebp
c001f713:	d3 eb                	shr    ebx,cl
c001f715:	09 d8                	or     eax,ebx
c001f717:	d3 ea                	shr    edx,cl
c001f719:	83 c4 1c             	add    esp,0x1c
c001f71c:	5b                   	pop    ebx
c001f71d:	5e                   	pop    esi
c001f71e:	5f                   	pop    edi
c001f71f:	5d                   	pop    ebp
c001f720:	c3                   	ret    
c001f721:	8d 76 00             	lea    esi,[esi+0x0]
c001f724:	39 c3                	cmp    ebx,eax
c001f726:	73 db                	jae    c001f703 <__umoddi3+0xe7>
c001f728:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f72c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f730:	89 d7                	mov    edi,edx
c001f732:	89 c6                	mov    esi,eax
c001f734:	eb cd                	jmp    c001f703 <__umoddi3+0xe7>
c001f736:	66 90                	xchg   ax,ax
c001f738:	66 90                	xchg   ax,ax
c001f73a:	66 90                	xchg   ax,ax
c001f73c:	66 90                	xchg   ax,ax
c001f73e:	66 90                	xchg   ax,ax

c001f740 <fabs>:
c001f740:	83 ec 0c             	sub    esp,0xc
c001f743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f747:	89 04 24             	mov    DWORD PTR [esp],eax
c001f74a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f74e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f753:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f757:	dd 04 24             	fld    QWORD PTR [esp]
c001f75a:	83 c4 0c             	add    esp,0xc
c001f75d:	c3                   	ret    
c001f75e:	66 90                	xchg   ax,ax

c001f760 <lrint>:
c001f760:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f764:	83 ec 04             	sub    esp,0x4
c001f767:	db 1c 24             	fistp  DWORD PTR [esp]
c001f76a:	58                   	pop    eax
c001f76b:	c3                   	ret    

c001f76c <lrintf>:
c001f76c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f770:	83 ec 04             	sub    esp,0x4
c001f773:	db 1c 24             	fistp  DWORD PTR [esp]
c001f776:	58                   	pop    eax
c001f777:	c3                   	ret    

Disassembly of section .init:

c001f778 <_init>:
c001f778:	55                   	push   ebp
c001f779:	89 e5                	mov    ebp,esp
c001f77b:	e8 98 09 fe ff       	call   c0000118 <frame_dummy>
c001f780:	e8 a3 fa ff ff       	call   c001f228 <__do_global_ctors_aux>
c001f785:	5d                   	pop    ebp
c001f786:	c3                   	ret    

Disassembly of section .fini:

c001f787 <_fini>:
c001f787:	55                   	push   ebp
c001f788:	89 e5                	mov    ebp,esp
c001f78a:	e8 19 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f78f:	5d                   	pop    ebp
c001f790:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f792 <Computer::~Computer()>:
c001f792:	83 ec 0c             	sub    esp,0xc
c001f795:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	89 10                	mov    DWORD PTR [eax],edx
c001f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a4:	83 ec 0c             	sub    esp,0xc
c001f7a7:	50                   	push   eax
c001f7a8:	e8 31 0d ff ff       	call   c00104de <Device::~Device()>
c001f7ad:	83 c4 10             	add    esp,0x10
c001f7b0:	90                   	nop
c001f7b1:	83 c4 0c             	add    esp,0xc
c001f7b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f7b6 <Computer::~Computer()>:
c001f7b6:	83 ec 0c             	sub    esp,0xc
c001f7b9:	83 ec 0c             	sub    esp,0xc
c001f7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c0:	e8 cd ff ff ff       	call   c001f792 <Computer::~Computer()>
c001f7c5:	83 c4 10             	add    esp,0x10
c001f7c8:	83 ec 08             	sub    esp,0x8
c001f7cb:	68 ec 01 00 00       	push   0x1ec
c001f7d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d4:	e8 24 f9 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001f7d9:	83 c4 10             	add    esp,0x10
c001f7dc:	83 c4 0c             	add    esp,0xc
c001f7df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7e0 <idleCommon()>:
c001f7e0:	83 ec 0c             	sub    esp,0xc
c001f7e3:	e8 73 92 ff ff       	call   c0018a5b <lockScheduler()>
c001f7e8:	e8 b7 95 ff ff       	call   c0018da4 <schedule()>
c001f7ed:	83 c4 0c             	add    esp,0xc
c001f7f0:	e9 68 92 ff ff       	jmp    c0018a5d <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7f5 <CPU::readCR3()>:
c001f7f5:	83 ec 10             	sub    esp,0x10
c001f7f8:	0f 20 d8             	mov    eax,cr3
c001f7fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f807 <CPU::writeCR3(unsigned long)>:
c001f807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f80b:	0f 22 d8             	mov    cr3,eax
c001f80e:	90                   	nop
c001f80f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f810 <LinkedList<UnixFile>::~LinkedList()>:
c001f810:	90                   	nop
c001f811:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f812 <LinkedList<UnixFile>::LinkedList()>:
c001f812:	83 ec 0c             	sub    esp,0xc
c001f815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f819:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f823:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f839:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f843:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f855:	83 ec 0c             	sub    esp,0xc
c001f858:	68 9d 15 02 c0       	push   0xc002159d
c001f85d:	e8 c1 f9 fe ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001f862:	83 c4 10             	add    esp,0x10
c001f865:	90                   	nop
c001f866:	83 c4 0c             	add    esp,0xc
c001f869:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f86a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f872:	75 10                	jne    c001f884 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	68 b8 15 02 c0       	push   0xc00215b8
c001f87c:	e8 d1 61 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f881:	83 c4 10             	add    esp,0x10
c001f884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f888:	8b 00                	mov    eax,DWORD PTR [eax]
c001f88a:	85 c0                	test   eax,eax
c001f88c:	74 34                	je     c001f8c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f892:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f895:	85 c0                	test   eax,eax
c001f897:	74 29                	je     c001f8c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8a4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8c0:	eb 65                	jmp    c001f927 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c8:	85 c0                	test   eax,eax
c001f8ca:	75 4b                	jne    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8d3:	85 c0                	test   eax,eax
c001f8d5:	75 40                	jne    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8df:	89 10                	mov    DWORD PTR [eax],edx
c001f8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f901:	85 c0                	test   eax,eax
c001f903:	74 22                	je     c001f927 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f905:	83 ec 0c             	sub    esp,0xc
c001f908:	68 da 15 02 c0       	push   0xc00215da
c001f90d:	e8 40 61 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f912:	83 c4 10             	add    esp,0x10
c001f915:	eb 10                	jmp    c001f927 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f917:	83 ec 0c             	sub    esp,0xc
c001f91a:	68 e4 15 02 c0       	push   0xc00215e4
c001f91f:	e8 2e 61 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f924:	83 c4 10             	add    esp,0x10
c001f927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f92e:	8d 50 01             	lea    edx,[eax+0x1]
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f938:	90                   	nop
c001f939:	83 c4 0c             	add    esp,0xc
c001f93c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f93e <LinkedList<UnixFile>::getFirstElement()>:
c001f93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f942:	8b 00                	mov    eax,DWORD PTR [eax]
c001f944:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f946 <LinkedList<UnixFile>::removeFirst()>:
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f94f:	85 c0                	test   eax,eax
c001f951:	75 12                	jne    c001f965 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f953:	83 ec 0c             	sub    esp,0xc
c001f956:	68 f0 15 02 c0       	push   0xc00215f0
c001f95b:	e8 f2 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f960:	83 c4 10             	add    esp,0x10
c001f963:	eb 7e                	jmp    c001f9e3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f969:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f96c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96f:	85 c0                	test   eax,eax
c001f971:	74 10                	je     c001f983 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f973:	83 ec 0c             	sub    esp,0xc
c001f976:	68 3b 16 02 c0       	push   0xc002163b
c001f97b:	e8 d2 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f980:	83 c4 10             	add    esp,0x10
c001f983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f987:	8b 00                	mov    eax,DWORD PTR [eax]
c001f989:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f98c:	85 c0                	test   eax,eax
c001f98e:	75 33                	jne    c001f9c3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f994:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9ac:	83 f8 01             	cmp    eax,0x1
c001f9af:	74 21                	je     c001f9d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9b1:	83 ec 0c             	sub    esp,0xc
c001f9b4:	68 14 16 02 c0       	push   0xc0021614
c001f9b9:	e8 94 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001f9be:	83 c4 10             	add    esp,0x10
c001f9c1:	eb 0f                	jmp    c001f9d2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9c9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 10                	mov    DWORD PTR [eax],edx
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9d9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9e3:	83 c4 0c             	add    esp,0xc
c001f9e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9e8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9ef:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9f0 <DriverlessDevice::~DriverlessDevice()>:
c001f9f0:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001f9f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f9:	89 10                	mov    DWORD PTR [eax],edx
c001f9fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ff:	50                   	push   eax
c001fa00:	e8 d9 0a ff ff       	call   c00104de <Device::~Device()>
c001fa05:	83 c4 04             	add    esp,0x4
c001fa08:	90                   	nop
c001fa09:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fa0a <DriverlessDevice::~DriverlessDevice()>:
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	83 ec 0c             	sub    esp,0xc
c001fa10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa14:	e8 d7 ff ff ff       	call   c001f9f0 <DriverlessDevice::~DriverlessDevice()>
c001fa19:	83 c4 10             	add    esp,0x10
c001fa1c:	83 ec 08             	sub    esp,0x8
c001fa1f:	68 58 01 00 00       	push   0x158
c001fa24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa28:	e8 d0 f6 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001fa2d:	83 c4 10             	add    esp,0x10
c001fa30:	83 c4 0c             	add    esp,0xc
c001fa33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa34 <LinkedList<Device>::addElement(Device*)>:
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa3c:	75 10                	jne    c001fa4e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	68 b8 15 02 c0       	push   0xc00215b8
c001fa46:	e8 07 60 ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fa4b:	83 c4 10             	add    esp,0x10
c001fa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa52:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa54:	85 c0                	test   eax,eax
c001fa56:	74 3a                	je     c001fa92 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5f:	85 c0                	test   eax,eax
c001fa61:	74 2f                	je     c001fa92 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa86:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa90:	eb 68                	jmp    c001fafa <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa96:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa98:	85 c0                	test   eax,eax
c001fa9a:	75 4e                	jne    c001faea <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faa3:	85 c0                	test   eax,eax
c001faa5:	75 43                	jne    c001faea <LinkedList<Device>::addElement(Device*)+0xb6>
c001faa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faaf:	89 10                	mov    DWORD PTR [eax],edx
c001fab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fab9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fac3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001facd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fad4:	85 c0                	test   eax,eax
c001fad6:	74 22                	je     c001fafa <LinkedList<Device>::addElement(Device*)+0xc6>
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	68 da 15 02 c0       	push   0xc00215da
c001fae0:	e8 6d 5f ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fae5:	83 c4 10             	add    esp,0x10
c001fae8:	eb 10                	jmp    c001fafa <LinkedList<Device>::addElement(Device*)+0xc6>
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	68 e4 15 02 c0       	push   0xc00215e4
c001faf2:	e8 5b 5f ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fafe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb01:	8d 50 01             	lea    edx,[eax+0x1]
c001fb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb08:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb0b:	90                   	nop
c001fb0c:	83 c4 0c             	add    esp,0xc
c001fb0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fb10 <LinkedList<Device>::LinkedList()>:
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb53:	83 ec 0c             	sub    esp,0xc
c001fb56:	68 9d 15 02 c0       	push   0xc002159d
c001fb5b:	e8 c3 f6 fe ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001fb60:	83 c4 10             	add    esp,0x10
c001fb63:	90                   	nop
c001fb64:	83 c4 0c             	add    esp,0xc
c001fb67:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb68 <CPU::readCR0()>:
c001fb68:	83 ec 10             	sub    esp,0x10
c001fb6b:	0f 20 c0             	mov    eax,cr0
c001fb6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb76:	83 c4 10             	add    esp,0x10
c001fb79:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb7a <CPU::writeCR0(unsigned long)>:
c001fb7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7e:	0f 22 c0             	mov    cr0,eax
c001fb81:	90                   	nop
c001fb82:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb83 <CPU::readDR0()>:
c001fb83:	83 ec 10             	sub    esp,0x10
c001fb86:	0f 21 c0             	mov    eax,db0
c001fb89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb91:	83 c4 10             	add    esp,0x10
c001fb94:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb95 <CPU::readDR1()>:
c001fb95:	83 ec 10             	sub    esp,0x10
c001fb98:	0f 21 c8             	mov    eax,db1
c001fb9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba3:	83 c4 10             	add    esp,0x10
c001fba6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fba7 <CPU::readDR2()>:
c001fba7:	83 ec 10             	sub    esp,0x10
c001fbaa:	0f 21 d0             	mov    eax,db2
c001fbad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb5:	83 c4 10             	add    esp,0x10
c001fbb8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fbb9 <CPU::readDR3()>:
c001fbb9:	83 ec 10             	sub    esp,0x10
c001fbbc:	0f 21 d8             	mov    eax,db3
c001fbbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc7:	83 c4 10             	add    esp,0x10
c001fbca:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbcb <CPU::readDR6()>:
c001fbcb:	83 ec 10             	sub    esp,0x10
c001fbce:	0f 21 f0             	mov    eax,db6
c001fbd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbd9:	83 c4 10             	add    esp,0x10
c001fbdc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbdd <CPU::readDR7()>:
c001fbdd:	83 ec 10             	sub    esp,0x10
c001fbe0:	0f 21 f8             	mov    eax,db7
c001fbe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbf0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbf6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbf8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbfe:	85 c0                	test   eax,eax
c001fc00:	75 0e                	jne    c001fc10 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc09:	85 c0                	test   eax,eax
c001fc0b:	75 03                	jne    c001fc10 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc0d:	b0 01                	mov    al,0x1
c001fc0f:	c3                   	ret    
c001fc10:	b0 00                	mov    al,0x0
c001fc12:	90                   	nop
c001fc13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fc14 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc1d:	85 c0                	test   eax,eax
c001fc1f:	75 15                	jne    c001fc36 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc21:	83 ec 0c             	sub    esp,0xc
c001fc24:	68 f0 15 02 c0       	push   0xc00215f0
c001fc29:	e8 24 5e ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fc2e:	83 c4 10             	add    esp,0x10
c001fc31:	e9 88 00 00 00       	jmp    c001fcbe <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc40:	85 c0                	test   eax,eax
c001fc42:	0f 95 c0             	setne  al
c001fc45:	84 c0                	test   al,al
c001fc47:	74 10                	je     c001fc59 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc49:	83 ec 0c             	sub    esp,0xc
c001fc4c:	68 3b 16 02 c0       	push   0xc002163b
c001fc51:	e8 fc 5d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fc56:	83 c4 10             	add    esp,0x10
c001fc59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc62:	85 c0                	test   eax,eax
c001fc64:	0f 94 c0             	sete   al
c001fc67:	84 c0                	test   al,al
c001fc69:	74 33                	je     c001fc9e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc87:	83 f8 01             	cmp    eax,0x1
c001fc8a:	74 21                	je     c001fcad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	68 14 16 02 c0       	push   0xc0021614
c001fc94:	e8 b9 5d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	eb 0f                	jmp    c001fcad <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca2:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcab:	89 10                	mov    DWORD PTR [eax],edx
c001fcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcb4:	8d 50 ff             	lea    edx,[eax-0x1]
c001fcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcbe:	83 c4 0c             	add    esp,0xc
c001fcc1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fcc2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcca:	75 10                	jne    c001fcdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	68 b8 15 02 c0       	push   0xc00215b8
c001fcd4:	e8 79 5d ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fcd9:	83 c4 10             	add    esp,0x10
c001fcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce2:	85 c0                	test   eax,eax
c001fce4:	74 34                	je     c001fd1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fced:	85 c0                	test   eax,eax
c001fcef:	74 29                	je     c001fd1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcfc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd11:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd18:	eb 65                	jmp    c001fd7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd20:	85 c0                	test   eax,eax
c001fd22:	75 4b                	jne    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd2b:	85 c0                	test   eax,eax
c001fd2d:	75 40                	jne    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd37:	89 10                	mov    DWORD PTR [eax],edx
c001fd39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd41:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd4b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd59:	85 c0                	test   eax,eax
c001fd5b:	74 22                	je     c001fd7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd5d:	83 ec 0c             	sub    esp,0xc
c001fd60:	68 da 15 02 c0       	push   0xc00215da
c001fd65:	e8 e8 5c ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fd6a:	83 c4 10             	add    esp,0x10
c001fd6d:	eb 10                	jmp    c001fd7f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd6f:	83 ec 0c             	sub    esp,0xc
c001fd72:	68 e4 15 02 c0       	push   0xc00215e4
c001fd77:	e8 d6 5c ff ff       	call   c0015a52 <Krnl::panic(char const*)>
c001fd7c:	83 c4 10             	add    esp,0x10
c001fd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd86:	8d 50 01             	lea    edx,[eax+0x1]
c001fd89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd90:	90                   	nop
c001fd91:	83 c4 0c             	add    esp,0xc
c001fd94:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd96 <ACPI::~ACPI()>:
c001fd96:	83 ec 0c             	sub    esp,0xc
c001fd99:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001fd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda2:	89 10                	mov    DWORD PTR [eax],edx
c001fda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda8:	83 ec 0c             	sub    esp,0xc
c001fdab:	50                   	push   eax
c001fdac:	e8 2d 07 ff ff       	call   c00104de <Device::~Device()>
c001fdb1:	83 c4 10             	add    esp,0x10
c001fdb4:	90                   	nop
c001fdb5:	83 c4 0c             	add    esp,0xc
c001fdb8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fdba <ACPI::~ACPI()>:
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	83 ec 0c             	sub    esp,0xc
c001fdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc4:	e8 cd ff ff ff       	call   c001fd96 <ACPI::~ACPI()>
c001fdc9:	83 c4 10             	add    esp,0x10
c001fdcc:	83 ec 08             	sub    esp,0x8
c001fdcf:	68 68 22 00 00       	push   0x2268
c001fdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdd8:	e8 20 f3 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001fddd:	83 c4 10             	add    esp,0x10
c001fde0:	83 c4 0c             	add    esp,0xc
c001fde3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fde4 <CPU::~CPU()>:
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c001fdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf0:	89 10                	mov    DWORD PTR [eax],edx
c001fdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf6:	83 ec 0c             	sub    esp,0xc
c001fdf9:	50                   	push   eax
c001fdfa:	e8 df 06 ff ff       	call   c00104de <Device::~Device()>
c001fdff:	83 c4 10             	add    esp,0x10
c001fe02:	90                   	nop
c001fe03:	83 c4 0c             	add    esp,0xc
c001fe06:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fe08 <CPU::~CPU()>:
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	83 ec 0c             	sub    esp,0xc
c001fe0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe12:	e8 cd ff ff ff       	call   c001fde4 <CPU::~CPU()>
c001fe17:	83 c4 10             	add    esp,0x10
c001fe1a:	83 ec 08             	sub    esp,0x8
c001fe1d:	68 98 11 00 00       	push   0x1198
c001fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe26:	e8 d2 f2 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	83 c4 0c             	add    esp,0xc
c001fe31:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe32 <CPU::readCR4()>:
c001fe32:	83 ec 10             	sub    esp,0x10
c001fe35:	0f 20 e0             	mov    eax,cr4
c001fe38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe40:	83 c4 10             	add    esp,0x10
c001fe43:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe44 <CPU::writeDR7(unsigned long)>:
c001fe44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe48:	0f 23 f8             	mov    db7,eax
c001fe4b:	90                   	nop
c001fe4c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe4d <CPU::writeCR4(unsigned long)>:
c001fe4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe51:	0f 22 e0             	mov    cr4,eax
c001fe54:	90                   	nop
c001fe55:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe56 <CPU::readCR2()>:
c001fe56:	83 ec 10             	sub    esp,0x10
c001fe59:	0f 20 d0             	mov    eax,cr2
c001fe5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe64:	83 c4 10             	add    esp,0x10
c001fe67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe68 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe68:	90                   	nop
c001fe69:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe6a <ThreadControlBlock::ThreadControlBlock()>:
c001fe6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe6e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe79:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe84:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea2:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fea6:	90                   	nop
c001fea7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fea8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fea8:	83 ec 0c             	sub    esp,0xc
c001feab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001feb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	68 9d 15 02 c0       	push   0xc002159d
c001fef3:	e8 2b f3 fe ff       	call   c000f223 <Dbg::kprintf(char const*, ...)>
c001fef8:	83 c4 10             	add    esp,0x10
c001fefb:	90                   	nop
c001fefc:	83 c4 0c             	add    esp,0xc
c001feff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ff00 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ff00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ff07:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ff08 <PCI::~PCI()>:
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001ff10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff14:	89 10                	mov    DWORD PTR [eax],edx
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	83 ec 0c             	sub    esp,0xc
c001ff1d:	50                   	push   eax
c001ff1e:	e8 c5 ff fe ff       	call   c000fee8 <Bus::~Bus()>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	90                   	nop
c001ff27:	83 c4 0c             	add    esp,0xc
c001ff2a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff2c <PCI::~PCI()>:
c001ff2c:	83 ec 0c             	sub    esp,0xc
c001ff2f:	83 ec 0c             	sub    esp,0xc
c001ff32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff36:	e8 cd ff ff ff       	call   c001ff08 <PCI::~PCI()>
c001ff3b:	83 c4 10             	add    esp,0x10
c001ff3e:	83 ec 08             	sub    esp,0x8
c001ff41:	68 58 01 00 00       	push   0x158
c001ff46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff4a:	e8 ae f1 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	83 c4 0c             	add    esp,0xc
c001ff55:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff56 <IDE::~IDE()>:
c001ff56:	83 ec 0c             	sub    esp,0xc
c001ff59:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001ff5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff62:	89 10                	mov    DWORD PTR [eax],edx
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	83 ec 0c             	sub    esp,0xc
c001ff6b:	50                   	push   eax
c001ff6c:	e8 7f 0a ff ff       	call   c00109f0 <HardDiskController::~HardDiskController()>
c001ff71:	83 c4 10             	add    esp,0x10
c001ff74:	90                   	nop
c001ff75:	83 c4 0c             	add    esp,0xc
c001ff78:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff7a <IDE::~IDE()>:
c001ff7a:	83 ec 0c             	sub    esp,0xc
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff84:	e8 cd ff ff ff       	call   c001ff56 <IDE::~IDE()>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	83 ec 08             	sub    esp,0x8
c001ff8f:	68 70 02 00 00       	push   0x270
c001ff94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff98:	e8 60 f1 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001ff9d:	83 c4 10             	add    esp,0x10
c001ffa0:	83 c4 0c             	add    esp,0xc
c001ffa3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ffa4 <ATA::~ATA()>:
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001ffac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb0:	89 10                	mov    DWORD PTR [eax],edx
c001ffb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb6:	83 ec 0c             	sub    esp,0xc
c001ffb9:	50                   	push   eax
c001ffba:	e8 0f 0b ff ff       	call   c0010ace <PhysicalDisk::~PhysicalDisk()>
c001ffbf:	83 c4 10             	add    esp,0x10
c001ffc2:	90                   	nop
c001ffc3:	83 c4 0c             	add    esp,0xc
c001ffc6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffc8 <ATA::~ATA()>:
c001ffc8:	83 ec 0c             	sub    esp,0xc
c001ffcb:	83 ec 0c             	sub    esp,0xc
c001ffce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd2:	e8 cd ff ff ff       	call   c001ffa4 <ATA::~ATA()>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	83 ec 08             	sub    esp,0x8
c001ffdd:	68 7c 01 00 00       	push   0x17c
c001ffe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffe6:	e8 12 f1 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c001ffeb:	83 c4 10             	add    esp,0x10
c001ffee:	83 c4 0c             	add    esp,0xc
c001fff1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fff2 <ATAPI::~ATAPI()>:
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001fffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffe:	89 10                	mov    DWORD PTR [eax],edx
c0020000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020004:	83 ec 0c             	sub    esp,0xc
c0020007:	50                   	push   eax
c0020008:	e8 c1 0a ff ff       	call   c0010ace <PhysicalDisk::~PhysicalDisk()>
c002000d:	83 c4 10             	add    esp,0x10
c0020010:	90                   	nop
c0020011:	83 c4 0c             	add    esp,0xc
c0020014:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020016 <ATAPI::~ATAPI()>:
c0020016:	83 ec 0c             	sub    esp,0xc
c0020019:	83 ec 0c             	sub    esp,0xc
c002001c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020020:	e8 cd ff ff ff       	call   c001fff2 <ATAPI::~ATAPI()>
c0020025:	83 c4 10             	add    esp,0x10
c0020028:	83 ec 08             	sub    esp,0x8
c002002b:	68 80 01 00 00       	push   0x180
c0020030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020034:	e8 c4 f0 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0020039:	83 c4 10             	add    esp,0x10
c002003c:	83 c4 0c             	add    esp,0xc
c002003f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020040 <AVX::~AVX()>:
c0020040:	83 ec 0c             	sub    esp,0xc
c0020043:	ba 88 38 02 c0       	mov    edx,0xc0023888
c0020048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002004c:	89 10                	mov    DWORD PTR [eax],edx
c002004e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020052:	83 ec 0c             	sub    esp,0xc
c0020055:	50                   	push   eax
c0020056:	e8 f7 0a ff ff       	call   c0010b52 <FPU::~FPU()>
c002005b:	83 c4 10             	add    esp,0x10
c002005e:	90                   	nop
c002005f:	83 c4 0c             	add    esp,0xc
c0020062:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020064 <AVX::~AVX()>:
c0020064:	83 ec 0c             	sub    esp,0xc
c0020067:	83 ec 0c             	sub    esp,0xc
c002006a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002006e:	e8 cd ff ff ff       	call   c0020040 <AVX::~AVX()>
c0020073:	83 c4 10             	add    esp,0x10
c0020076:	83 ec 08             	sub    esp,0x8
c0020079:	68 58 01 00 00       	push   0x158
c002007e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020082:	e8 76 f0 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0020087:	83 c4 10             	add    esp,0x10
c002008a:	83 c4 0c             	add    esp,0xc
c002008d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002008e <MMX::~MMX()>:
c002008e:	83 ec 0c             	sub    esp,0xc
c0020091:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c0020096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009a:	89 10                	mov    DWORD PTR [eax],edx
c002009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a0:	83 ec 0c             	sub    esp,0xc
c00200a3:	50                   	push   eax
c00200a4:	e8 a9 0a ff ff       	call   c0010b52 <FPU::~FPU()>
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	90                   	nop
c00200ad:	83 c4 0c             	add    esp,0xc
c00200b0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00200b2 <MMX::~MMX()>:
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	83 ec 0c             	sub    esp,0xc
c00200b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200bc:	e8 cd ff ff ff       	call   c002008e <MMX::~MMX()>
c00200c1:	83 c4 10             	add    esp,0x10
c00200c4:	83 ec 08             	sub    esp,0x8
c00200c7:	68 58 01 00 00       	push   0x158
c00200cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200d0:	e8 28 f0 fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c00200d5:	83 c4 10             	add    esp,0x10
c00200d8:	83 c4 0c             	add    esp,0xc
c00200db:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200dc <SSE::~SSE()>:
c00200dc:	83 ec 0c             	sub    esp,0xc
c00200df:	ba 08 39 02 c0       	mov    edx,0xc0023908
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	89 10                	mov    DWORD PTR [eax],edx
c00200ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ee:	83 ec 0c             	sub    esp,0xc
c00200f1:	50                   	push   eax
c00200f2:	e8 5b 0a ff ff       	call   c0010b52 <FPU::~FPU()>
c00200f7:	83 c4 10             	add    esp,0x10
c00200fa:	90                   	nop
c00200fb:	83 c4 0c             	add    esp,0xc
c00200fe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0020100 <SSE::~SSE()>:
c0020100:	83 ec 0c             	sub    esp,0xc
c0020103:	83 ec 0c             	sub    esp,0xc
c0020106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010a:	e8 cd ff ff ff       	call   c00200dc <SSE::~SSE()>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	83 ec 08             	sub    esp,0x8
c0020115:	68 58 01 00 00       	push   0x158
c002011a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002011e:	e8 da ef fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0020123:	83 c4 10             	add    esp,0x10
c0020126:	83 c4 0c             	add    esp,0xc
c0020129:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002012a <x87::~x87()>:
c002012a:	83 ec 0c             	sub    esp,0xc
c002012d:	ba 48 39 02 c0       	mov    edx,0xc0023948
c0020132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020136:	89 10                	mov    DWORD PTR [eax],edx
c0020138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013c:	83 ec 0c             	sub    esp,0xc
c002013f:	50                   	push   eax
c0020140:	e8 0d 0a ff ff       	call   c0010b52 <FPU::~FPU()>
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	90                   	nop
c0020149:	83 c4 0c             	add    esp,0xc
c002014c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002014e <x87::~x87()>:
c002014e:	83 ec 0c             	sub    esp,0xc
c0020151:	83 ec 0c             	sub    esp,0xc
c0020154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020158:	e8 cd ff ff ff       	call   c002012a <x87::~x87()>
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	83 ec 08             	sub    esp,0x8
c0020163:	68 58 01 00 00       	push   0x158
c0020168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002016c:	e8 8c ef fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c0020171:	83 c4 10             	add    esp,0x10
c0020174:	83 c4 0c             	add    esp,0xc
c0020177:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020178 <IOAPIC::~IOAPIC()>:
c0020178:	83 ec 0c             	sub    esp,0xc
c002017b:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c0020180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020184:	89 10                	mov    DWORD PTR [eax],edx
c0020186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018a:	83 ec 0c             	sub    esp,0xc
c002018d:	50                   	push   eax
c002018e:	e8 4b 03 ff ff       	call   c00104de <Device::~Device()>
c0020193:	83 c4 10             	add    esp,0x10
c0020196:	90                   	nop
c0020197:	83 c4 0c             	add    esp,0xc
c002019a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002019c <IOAPIC::~IOAPIC()>:
c002019c:	83 ec 0c             	sub    esp,0xc
c002019f:	83 ec 0c             	sub    esp,0xc
c00201a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a6:	e8 cd ff ff ff       	call   c0020178 <IOAPIC::~IOAPIC()>
c00201ab:	83 c4 10             	add    esp,0x10
c00201ae:	83 ec 08             	sub    esp,0x8
c00201b1:	68 68 01 00 00       	push   0x168
c00201b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ba:	e8 3e ef fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c00201bf:	83 c4 10             	add    esp,0x10
c00201c2:	83 c4 0c             	add    esp,0xc
c00201c5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201c6 <APIC::~APIC()>:
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	89 10                	mov    DWORD PTR [eax],edx
c00201d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d8:	83 ec 0c             	sub    esp,0xc
c00201db:	50                   	push   eax
c00201dc:	e8 3b 0e ff ff       	call   c001101c <InterruptController::~InterruptController()>
c00201e1:	83 c4 10             	add    esp,0x10
c00201e4:	90                   	nop
c00201e5:	83 c4 0c             	add    esp,0xc
c00201e8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201ea <APIC::~APIC()>:
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	83 ec 0c             	sub    esp,0xc
c00201f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f4:	e8 cd ff ff ff       	call   c00201c6 <APIC::~APIC()>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	83 ec 08             	sub    esp,0x8
c00201ff:	68 58 21 00 00       	push   0x2158
c0020204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020208:	e8 f0 ee fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c002020d:	83 c4 10             	add    esp,0x10
c0020210:	83 c4 0c             	add    esp,0xc
c0020213:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020214 <PIC::~PIC()>:
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c002021c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020220:	89 10                	mov    DWORD PTR [eax],edx
c0020222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020226:	83 ec 0c             	sub    esp,0xc
c0020229:	50                   	push   eax
c002022a:	e8 ed 0d ff ff       	call   c001101c <InterruptController::~InterruptController()>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	90                   	nop
c0020233:	83 c4 0c             	add    esp,0xc
c0020236:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020238 <PIC::~PIC()>:
c0020238:	83 ec 0c             	sub    esp,0xc
c002023b:	83 ec 0c             	sub    esp,0xc
c002023e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020242:	e8 cd ff ff ff       	call   c0020214 <PIC::~PIC()>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	83 ec 08             	sub    esp,0x8
c002024d:	68 58 21 00 00       	push   0x2158
c0020252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020256:	e8 a2 ee fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c002025b:	83 c4 10             	add    esp,0x10
c002025e:	83 c4 0c             	add    esp,0xc
c0020261:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020262 <APICTimer::~APICTimer()>:
c0020262:	83 ec 0c             	sub    esp,0xc
c0020265:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	89 10                	mov    DWORD PTR [eax],edx
c0020270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020274:	83 ec 0c             	sub    esp,0xc
c0020277:	50                   	push   eax
c0020278:	e8 cd 2a ff ff       	call   c0012d4a <Timer::~Timer()>
c002027d:	83 c4 10             	add    esp,0x10
c0020280:	90                   	nop
c0020281:	83 c4 0c             	add    esp,0xc
c0020284:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020286 <APICTimer::~APICTimer()>:
c0020286:	83 ec 0c             	sub    esp,0xc
c0020289:	83 ec 0c             	sub    esp,0xc
c002028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020290:	e8 cd ff ff ff       	call   c0020262 <APICTimer::~APICTimer()>
c0020295:	83 c4 10             	add    esp,0x10
c0020298:	83 ec 08             	sub    esp,0x8
c002029b:	68 60 01 00 00       	push   0x160
c00202a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a4:	e8 54 ee fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c00202a9:	83 c4 10             	add    esp,0x10
c00202ac:	83 c4 0c             	add    esp,0xc
c00202af:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00202b0 <PIT::~PIT()>:
c00202b0:	83 ec 0c             	sub    esp,0xc
c00202b3:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c00202b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202bc:	89 10                	mov    DWORD PTR [eax],edx
c00202be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c2:	83 ec 0c             	sub    esp,0xc
c00202c5:	50                   	push   eax
c00202c6:	e8 7f 2a ff ff       	call   c0012d4a <Timer::~Timer()>
c00202cb:	83 c4 10             	add    esp,0x10
c00202ce:	90                   	nop
c00202cf:	83 c4 0c             	add    esp,0xc
c00202d2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202d4 <PIT::~PIT()>:
c00202d4:	83 ec 0c             	sub    esp,0xc
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202de:	e8 cd ff ff ff       	call   c00202b0 <PIT::~PIT()>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	83 ec 08             	sub    esp,0x8
c00202e9:	68 5c 01 00 00       	push   0x15c
c00202ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f2:	e8 06 ee fe ff       	call   c000f0fd <operator delete(void*, unsigned long)>
c00202f7:	83 c4 10             	add    esp,0x10
c00202fa:	83 c4 0c             	add    esp,0xc
c00202fd:	c3                   	ret    
