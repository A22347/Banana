
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ed be 00 00       	call   c000bf0d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 e5 01 00       	call   c001e538 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 f0 01 c0       	mov    ebx,0xc001f0c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb cc f0 01 c0    	cmp    ebx,0xc001f0cc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 2c 02 c0       	mov    eax,0xc0022ccc
c0000049:	3d cc 2c 02 c0       	cmp    eax,0xc0022ccc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 2c 02 c0       	push   0xc0022ccc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 2c 02 c0       	mov    eax,0xc0022ccc
c0000075:	2d cc 2c 02 c0       	sub    eax,0xc0022ccc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 2c 02 c0       	push   0xc0022ccc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e6c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d4 f0 01 c0       	mov    ebx,0xc001f0d4
c00000bb:	81 eb d0 f0 01 c0    	sub    ebx,0xc001f0d0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d0 f0 01 c0       	mov    esi,0xc001f0d0
c00000ca:	a1 70 2e 02 c0       	mov    eax,ds:0xc0022e70
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 2e 02 c0       	mov    ds:0xc0022e70,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 2e 02 c0       	mov    eax,ds:0xc0022e70
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 2c 02 c0       	push   0xc0022ccc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e6c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 2e 02 c0       	push   0xc0022e74
c000012c:	68 cc 2c 02 c0       	push   0xc0022ccc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 c5 e8 00 00       	call   c000eb24 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 e7 72 01 00       	call   c0017550 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 d3 76 01 00       	call   c0017963 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 79 7c 01 00       	call   c0017f12 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 a8 72 01 00       	call   c0017550 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 b0 32 02 c0 	lgdtd  ds:0xc00232b0
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 f1 09 01 c0       	mov    ecx,0xc00109f1
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 f1 09 01 c0       	mov    ecx,0xc00109f1
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 8c 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e8c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 8c 2e 02 c0       	mov    ds:0xc0022e8c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 8c 2e 02 c0       	mov    eax,ds:0xc0022e8c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 8c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e8c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 e0 f0 01 c0 02 	test   BYTE PTR [edx-0x3ffe0f20],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 e0 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0f20],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 e0 f0 01 c0 08 	test   BYTE PTR [edx-0x3ffe0f20],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 e0 f0 01 c0 04 	test   BYTE PTR [edi-0x3ffe0f20],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 e0 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0f20],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d a0 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ea0
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d a0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ea0,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 a4 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd15c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 a4 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd15c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d a0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ea0,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 cc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ecc,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d dc 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022edc
c0000b8d:	c7 42 0c d4 2e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022ed4
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 cc 2e 02 c0    	mov    DWORD PTR ds:0xc0022ecc,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 a0 2e 02 c0 02 	test   BYTE PTR ds:0xc0022ea0,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 fd ad 00 00       	call   c000ba6b <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 3f ad 00 00       	call   c000ba6b <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 29 ad 00 00       	call   c000ba6b <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 05 ad 00 00       	call   c000ba6b <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d a0 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022ea0
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 a4 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd15c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 a4 2e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd15c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 d4 2e 02 c0 	lea    edx,[eax*8-0x3ffdd12c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d e0 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ee0
c0000f0f:	81 fb d4 2e 02 c0    	cmp    ebx,0xc0022ed4
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d d4 2e 02 c0       	cmp    eax,0xc0022ed4
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d d0 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ed0,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 dc 2e 02 c0       	mov    ds:0xc0022edc,eax
c0000f4b:	a3 e0 2e 02 c0       	mov    ds:0xc0022ee0,eax
c0000f50:	a3 d0 2e 02 c0       	mov    ds:0xc0022ed0,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 d4 2e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022ed4
c0000f5e:	c7 40 0c d4 2e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022ed4
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 e0 2e 02 c0       	mov    ds:0xc0022ee0,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 d4 2e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022ed4
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 98 2e 02 c0 	lea    ebp,[edx*4-0x3ffdd168]
c0000faf:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 a0 2e 02 c0 	lea    ecx,[edx*4-0x3ffdd160]
c0000fca:	8b 14 95 a0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd160]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd d4 31 02 c0 	or     DWORD PTR [edi*4-0x3ffdce2c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 d4 2e 02 c0 	lea    eax,[eax*8-0x3ffdd12c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,ecx
c0001084:	89 0d e0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ee0,ecx
c000108a:	c7 41 08 d4 2e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022ed4
c0001091:	c7 41 0c d4 2e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022ed4
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd cc 2e 02 c0 	lea    edx,[ecx*8-0x3ffdd134]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d d4 31 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdce2c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d d4 31 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdce2c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 cc 2e 02 c0 	lea    edx,[eax*4-0x3ffdd134]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d d4 31 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdce2c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d dc 2e 02 c0    	mov    DWORD PTR ds:0xc0022edc,edi
c0001157:	89 3d e0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ee0,edi
c000115d:	c7 47 08 d4 2e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022ed4
c0001164:	c7 47 0c d4 2e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022ed4
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d d0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ed0,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 cc 2e 02 c0       	mov    eax,ds:0xc0022ecc
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d cc 2e 02 c0    	mov    DWORD PTR ds:0xc0022ecc,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba a0 2e 02 c0       	mov    edx,0xc0022ea0
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d a0 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022ea0,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d f4 31 02 c0    	mov    ebx,DWORD PTR ds:0xc00231f4
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 f4 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00231f4,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d f4 31 02 c0    	mov    DWORD PTR ds:0xc00231f4,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 cc 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ecc,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d cc 2e 02 c0    	mov    DWORD PTR ds:0xc0022ecc,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d a0 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022ea0,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 fc 31 02 c0    	push   DWORD PTR ds:0xc00231fc
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d a0 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022ea0,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 fc 31 02 c0       	mov    eax,ds:0xc00231fc
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d cc 2e 02 c0 00 	cmp    DWORD PTR ds:0xc0022ecc,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 cc 2e 02 c0       	mov    eax,ds:0xc0022ecc
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 a4 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd15c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 d4 2e 02 c0       	mov    eax,0xc0022ed4
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d cc 31 02 c0       	cmp    eax,0xc00231cc
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 08 32 02 c0       	mov    eax,ds:0xc0023208
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 f0 31 02 c0    	mov    esi,DWORD PTR ds:0xc00231f0
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 04 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023204
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 14 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023214
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 a0 2e 02 c0       	mov    eax,0xc0022ea0
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 e4 f1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0e1c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 a0 2e 02 c0       	mov    eax,ds:0xc0022ea0
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 a0 2e 02 c0       	mov    ds:0xc0022ea0,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d e4 31 02 c0    	mov    DWORD PTR ds:0xc00231e4,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d e8 31 02 c0    	mov    DWORD PTR ds:0xc00231e8,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d ec 31 02 c0    	mov    DWORD PTR ds:0xc00231ec,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 f4 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00231f4,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 c0 47 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb840]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 27 7d 01 00       	jmp    c0019680 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 c0 47 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb840]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 58 7d 01 00       	jmp    c00196c7 <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 c0 47 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb840]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 80 7d 01 00       	jmp    c001970e <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 6b c6 01 00       	call   c001e2dc <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 00 f3 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0d00]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 00 f3 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0d00]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 00 f2 01 c0       	mov    edx,0xc001f200
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 20 f3 01 c0       	mov    edx,0xc001f320
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba c0 1d 02 c0       	mov    edx,0xc0021dc0
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 2c f3 01 c0       	mov    edx,0xc001f32c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 10 f3 01 c0       	mov    edx,0xc001f310
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 40 32 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdcdc0]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 20 32 02 c0    	mov    ax,ds:0xc0023220
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 20 32 02 c0    	mov    ds:0xc0023220,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 68 b4 01 00       	call   c001e2dc <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 32 f3 01 c0       	mov    eax,0xc001f332
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 80 f2 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0d80]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 3b f3 01 c0       	mov    eax,0xc001f33b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 00 f3 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0d00]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 33 9e 01 00       	call   c001e2dc <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 10 f3 01 c0       	mov    edx,0xc001f310
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 00 f2 01 c0       	mov    edx,0xc001f200
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 10 f2 01 c0       	mov    edx,0xc001f210
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 40 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcdc0]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 40 32 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcdc0],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 fa 87 01 00       	call   c001e2dc <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 e0 87 01 00       	call   c001e2dc <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 57 f2 01 c0       	mov    eax,0xc001f257
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 50 f2 01 c0       	mov    eax,0xc001f250
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 40 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcdc0]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 40 f2 01 c0       	mov    esi,0xc001f240
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 23 6f 01 00       	call   c001e2dc <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 20 f3 01 c0       	mov    edx,0xc001f320
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 20 f2 01 c0       	mov    edx,0xc001f220
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 30 f2 01 c0       	mov    edx,0xc001f230
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 42 f3 01 c0       	mov    edx,0xc001f342
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 4e f3 01 c0       	mov    edx,0xc001f34e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 62 f3 01 c0       	mov    edx,0xc001f362
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 4e 3a 00 00       	call   c000bc1e <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 48 3a 00 00       	call   c000bc2e <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 80 f6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f680
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 80 f6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f680
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 80 f4 01 c0       	mov    eax,0xc001f480
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 c0 f3 01 c0       	mov    eax,0xc001f3c0
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 80 f3 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0c80]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 40 fc 01 c0    	fld    QWORD PTR ds:0xc001fc40
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 48 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc48
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 49 37 00 00       	call   c000bc2e <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 33 37 00 00       	call   c000bc2e <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 60 fc 01 c0    	fld    DWORD PTR ds:0xc001fc60
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 2b 5f 01 00       	call   c001e500 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 50 fc 01 c0    	fld    QWORD PTR ds:0xc001fc50
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d7 33 00 00       	call   c000bc4e <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 72 33 00 00       	call   c000bc2e <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 80 f7 01 c0       	mov    eax,0xc001f780
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 e0 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0420]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 64 fc 01 c0    	fld    DWORD PTR ds:0xc001fc64
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 68 fc 01 c0    	fld    DWORD PTR ds:0xc001fc68
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 58 fc 01 c0    	fcom   QWORD PTR ds:0xc001fc58
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 6c fc 01 c0    	fld    DWORD PTR ds:0xc001fc6c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 69 5a 01 00       	call   c001e520 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 70 fc 01 c0    	fld    DWORD PTR ds:0xc001fc70
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 68 fc 01 c0    	fld    DWORD PTR ds:0xc001fc68
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 58 fc 01 c0    	fcom   QWORD PTR ds:0xc001fc58
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 6c fc 01 c0    	fld    DWORD PTR ds:0xc001fc6c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 dd 59 01 00       	call   c001e520 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 40 fc 01 c0    	fld    QWORD PTR ds:0xc001fc40
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 48 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc48
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 6a 59 01 00       	call   c001e520 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 36 58 01 00       	call   c001e500 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d b8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fcb8
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 cf 57 01 00       	call   c001e520 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 5c 57 01 00       	call   c001e500 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d b8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fcb8
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 74 fc 01 c0       	mov    eax,0xc001fc74
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 88 fc 01 c0       	mov    eax,0xc001fc88
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 45 2d 00 00       	call   c000bc2e <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 47 2d 00 00       	call   c000bc4e <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 40 fc 01 c0    	fld    QWORD PTR ds:0xc001fc40
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 48 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc48
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 48 fe 01 c0    	fld    DWORD PTR ds:0xc001fe48
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 c0 fc 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0340]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 dc fc 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0324]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 f8 fc 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0308]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 4c fe 01 c0    	fld    DWORD PTR ds:0xc001fe4c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 ce 4a 01 00       	jmp    c001e520 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 ab 4a 01 00       	call   c001e520 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 50 fe 01 c0    	fld    DWORD PTR ds:0xc001fe50
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 56 48 01 00       	call   c001e520 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 21 48 01 00       	call   c001e520 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 b8 fc 01 c0    	fadd   QWORD PTR ds:0xc001fcb8
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 33 47 01 00       	call   c001e500 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 40 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe40
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 96 46 01 00       	call   c001e520 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 50 fe 01 c0    	fld    DWORD PTR ds:0xc001fe50
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 d2 45 01 00       	call   c001e520 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 9d 45 01 00       	call   c001e520 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 b8 fc 01 c0    	fadd   QWORD PTR ds:0xc001fcb8
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 af 44 01 00       	call   c001e500 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 40 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe40
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 17 44 01 00       	call   c001e520 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 50 fe 01 c0    	fld    DWORD PTR ds:0xc001fe50
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 53 43 01 00       	call   c001e520 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 1e 43 01 00       	call   c001e520 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 b8 fc 01 c0    	fadd   QWORD PTR ds:0xc001fcb8
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 30 42 01 00       	call   c001e500 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 40 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe40
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 98 41 01 00       	call   c001e520 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 50 fe 01 c0    	fld    DWORD PTR ds:0xc001fe50
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 d4 40 01 00       	call   c001e520 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 9f 40 01 00       	call   c001e520 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 b8 fc 01 c0    	fadd   QWORD PTR ds:0xc001fcb8
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 b1 3f 01 00       	call   c001e500 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 40 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe40
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 19 3f 01 00       	call   c001e520 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 50 fe 01 c0    	fld    DWORD PTR ds:0xc001fe50
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 55 3e 01 00       	call   c001e520 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 20 3e 01 00       	call   c001e520 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 b8 fc 01 c0    	fadd   QWORD PTR ds:0xc001fcb8
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 39 3d 01 00       	call   c001e500 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 40 fe 01 c0    	fcomp  QWORD PTR ds:0xc001fe40
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 9b 3c 01 00       	call   c001e520 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 20 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe02e0]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 14 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe02ec]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 48 13 00 00       	call   c000bc2e <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 40 fc 01 c0    	fld    QWORD PTR ds:0xc001fc40
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 48 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc48
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 2e 3b 01 00       	call   c001e520 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 02 3a 01 00       	call   c001e500 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d b8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fcb8
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 a7 39 01 00       	call   c001e520 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 34 39 01 00       	call   c001e500 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d b8 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fcb8
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 54 fe 01 c0       	mov    eax,0xc001fe54
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 65 fe 01 c0       	mov    eax,0xc001fe65
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 33 0f 00 00       	call   c000bc2e <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 35 0f 00 00       	call   c000bc4e <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 55 55 00 00       	call   c00102d0 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 9c fe 01 c0       	push   0xc001fe9c
c000adb1:	50                   	push   eax
c000adb2:	e8 93 55 00 00       	call   c001034a <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba 18 ff 01 c0       	mov    edx,0xc001ff18
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 24 ca 00 00       	call   c0017930 <lockScheduler()>
c000af0c:	e8 53 cd 00 00       	call   c0017c64 <schedule()>
c000af11:	e8 1c ca 00 00       	call   c0017932 <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 3c 3d 00 00       	call   c000ec60 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 f4 46 02 c0    	push   DWORD PTR ds:0xc00246f4
c000af33:	68 a5 fe 01 c0       	push   0xc001fea5
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 50 c8 00 00       	call   c0017790 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 ab b5 00 c0       	push   0xc000b5ab
c000af4f:	56                   	push   esi
c000af50:	e8 05 cb 00 00       	call   c0017a5a <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 93 82 01 c0       	push   0xc0018293
c000af5e:	ff 35 f4 46 02 c0    	push   DWORD PTR ds:0xc00246f4
c000af64:	e8 f1 ca 00 00       	call   c0017a5a <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 a8 46 02 c0       	mov    ds:0xc00246a8,eax
c000af71:	c6 05 ad 32 02 c0 01 	mov    BYTE PTR ds:0xc00232ad,0x1
c000af78:	e8 2d 41 00 00       	call   c000f0aa <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 6f b2 00 00       	call   c0016203 <setupSystemCalls()>
c000af94:	e8 0f 4c 00 00       	call   c000fba8 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 03 53 00 00       	call   c00102a4 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d a8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232a8
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 b2 fe 01 c0       	push   0xc001feb2
c000afb0:	e8 1d c4 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 67 c5 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 3c 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f3c
c000afc5:	e8 85 3d 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 e7 cd 00 00       	call   c0017dbe <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 c1 32 02 c0 04 	test   BYTE PTR ds:0xc00232c1,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 71 2f 01 00       	call   c001dfa6 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 b7 8b 00 00       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 90 8b 00 00       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 6e 8b 00 00       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 4c 8b 00 00       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 c0 32 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00232c0,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 75 8a 00 00       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 50 8a 00 00       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 f5 2d 01 00       	call   c001df60 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 c2 2d 01 00       	call   c001df50 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 6b 8a 00 00       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 ce fe 01 c0       	push   0xc001fece
c000b1e8:	e8 f7 97 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 d4 fe 01 c0       	push   0xc001fed4
c000b220:	e8 bf 97 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 c0 32 02 c0 04 	test   BYTE PTR ds:0xc00232c0,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 e0 26 02 c0 	sete   BYTE PTR ds:0xc00226e0
c000b284:	e8 d7 39 00 00       	call   c000ec60 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 b1 7f 00 00       	call   c0013244 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 b8 4e 00 00       	call   c001015a <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 a0 39 00 00       	call   c000ec60 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 28 8a 00 00       	call   c0013cf2 <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 81 4e 00 00       	call   c001015a <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 cd 53 00 00       	call   c00106c2 <setupFPU()>
c000b2f5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fb:	85 c0                	test   eax,eax
c000b2fd:	74 1f                	je     c000b31e <Computer::open(int, int, void*)+0xb6>
c000b2ff:	83 ec 08             	sub    esp,0x8
c000b302:	50                   	push   eax
c000b303:	53                   	push   ebx
c000b304:	e8 51 4e 00 00       	call   c001015a <Device::addChild(Device*)>
c000b309:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b311:	6a 00                	push   0x0
c000b313:	6a 00                	push   0x0
c000b315:	6a 00                	push   0x0
c000b317:	50                   	push   eax
c000b318:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b31b:	83 c4 20             	add    esp,0x20
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	68 dc af 00 c0       	push   0xc000afdc
c000b326:	e8 2f c8 00 00       	call   c0017b5a <setupMultitasking(void (*)())>
c000b32b:	83 c4 14             	add    esp,0x14
c000b32e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b333:	5b                   	pop    ebx
c000b334:	5e                   	pop    esi
c000b335:	c3                   	ret    

c000b336 <Computer::disableNMI()>:
c000b336:	6a 00                	push   0x0
c000b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b33c:	e8 0f ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b341:	58                   	pop    eax
c000b342:	5a                   	pop    edx
c000b343:	c3                   	ret    

c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b344:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b348:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b34f:	19 c0                	sbb    eax,eax
c000b351:	83 e0 80             	and    eax,0xffffff80
c000b354:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b358:	e6 70                	out    0x70,al
c000b35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b35e:	e6 71                	out    0x71,al
c000b360:	c3                   	ret    
c000b361:	90                   	nop

c000b362 <Computer::handleNMI()>:
c000b362:	56                   	push   esi
c000b363:	53                   	push   ebx
c000b364:	83 ec 10             	sub    esp,0x10
c000b367:	e4 92                	in     al,0x92
c000b369:	89 c6                	mov    esi,eax
c000b36b:	e4 61                	in     al,0x61
c000b36d:	68 da fe 01 c0       	push   0xc001feda
c000b372:	88 c3                	mov    bl,al
c000b374:	e8 d6 39 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000b379:	83 c4 10             	add    esp,0x10
c000b37c:	83 e6 10             	and    esi,0x10
c000b37f:	75 0d                	jne    c000b38e <Computer::handleNMI()+0x2c>
c000b381:	f6 c3 40             	test   bl,0x40
c000b384:	75 1d                	jne    c000b3a3 <Computer::handleNMI()+0x41>
c000b386:	84 db                	test   bl,bl
c000b388:	78 2d                	js     c000b3b7 <Computer::handleNMI()+0x55>
c000b38a:	58                   	pop    eax
c000b38b:	5b                   	pop    ebx
c000b38c:	5e                   	pop    esi
c000b38d:	c3                   	ret    
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	68 eb fe 01 c0       	push   0xc001feeb
c000b396:	e8 49 96 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000b39b:	83 c4 10             	add    esp,0x10
c000b39e:	f6 c3 40             	test   bl,0x40
c000b3a1:	74 e3                	je     c000b386 <Computer::handleNMI()+0x24>
c000b3a3:	83 ec 0c             	sub    esp,0xc
c000b3a6:	68 f8 fe 01 c0       	push   0xc001fef8
c000b3ab:	e8 34 96 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	84 db                	test   bl,bl
c000b3b5:	79 d3                	jns    c000b38a <Computer::handleNMI()+0x28>
c000b3b7:	c7 44 24 10 02 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ff02
c000b3bf:	5a                   	pop    edx
c000b3c0:	5b                   	pop    ebx
c000b3c1:	5e                   	pop    esi
c000b3c2:	e9 1d 96 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>
c000b3c7:	90                   	nop

c000b3c8 <Computer::setDiskActivityLight(int, bool)>:
c000b3c8:	56                   	push   esi
c000b3c9:	53                   	push   ebx
c000b3ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3ce:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3d3:	77 1b                	ja     c000b3f0 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3d5:	e4 92                	in     al,0x92
c000b3d7:	bb 40 00 00 00       	mov    ebx,0x40
c000b3dc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3e0:	89 da                	mov    edx,ebx
c000b3e2:	d3 e2                	shl    edx,cl
c000b3e4:	89 f1                	mov    ecx,esi
c000b3e6:	f7 d2                	not    edx
c000b3e8:	d3 e3                	shl    ebx,cl
c000b3ea:	21 d0                	and    eax,edx
c000b3ec:	09 d8                	or     eax,ebx
c000b3ee:	e6 92                	out    0x92,al
c000b3f0:	5b                   	pop    ebx
c000b3f1:	5e                   	pop    esi
c000b3f2:	c3                   	ret    
c000b3f3:	90                   	nop

c000b3f4 <GDTEntry::setBase(unsigned int)>:
c000b3f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3fc:	89 c1                	mov    ecx,eax
c000b3fe:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b402:	c1 e9 10             	shr    ecx,0x10
c000b405:	c1 e8 18             	shr    eax,0x18
c000b408:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b40b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b40e:	c3                   	ret    
c000b40f:	90                   	nop

c000b410 <GDTEntry::setLimit(unsigned int)>:
c000b410:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b418:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b41b:	66 89 01             	mov    WORD PTR [ecx],ax
c000b41e:	83 e2 f0             	and    edx,0xfffffff0
c000b421:	c1 e8 10             	shr    eax,0x10
c000b424:	83 e0 0f             	and    eax,0xf
c000b427:	09 d0                	or     eax,edx
c000b429:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b42c:	c3                   	ret    
c000b42d:	90                   	nop

c000b42e <GDT::GDT()>:
c000b42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b432:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b43c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b442:	90                   	nop
c000b443:	c3                   	ret    

c000b444 <GDT::addEntry(GDTEntry)>:
c000b444:	53                   	push   ebx
c000b445:	83 ec 0c             	sub    esp,0xc
c000b448:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b44c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b455:	52                   	push   edx
c000b456:	50                   	push   eax
c000b457:	68 3c ff 01 c0       	push   0xc001ff3c
c000b45c:	e8 ee 38 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000b461:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b46b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b46f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b473:	8d 50 01             	lea    edx,[eax+0x1]
c000b476:	c1 e0 03             	shl    eax,0x3
c000b479:	89 13                	mov    DWORD PTR [ebx],edx
c000b47b:	83 c4 18             	add    esp,0x18
c000b47e:	5b                   	pop    ebx
c000b47f:	c3                   	ret    

c000b480 <GDT::getNumberOfEntries()>:
c000b480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b484:	8b 00                	mov    eax,DWORD PTR [eax]
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <GDT::flush()>:
c000b488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b48e:	83 c0 04             	add    eax,0x4
c000b491:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b498:	a3 b2 32 02 c0       	mov    ds:0xc00232b2,eax
c000b49d:	66 89 15 b0 32 02 c0 	mov    WORD PTR ds:0xc00232b0,dx
c000b4a4:	e9 8a 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a9:	90                   	nop

c000b4aa <GDT::setup()>:
c000b4aa:	55                   	push   ebp
c000b4ab:	57                   	push   edi
c000b4ac:	56                   	push   esi
c000b4ad:	53                   	push   ebx
c000b4ae:	83 ec 3c             	sub    esp,0x3c
c000b4b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4b5:	6a 00                	push   0x0
c000b4b7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4bb:	53                   	push   ebx
c000b4bc:	e8 33 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4c1:	6a 00                	push   0x0
c000b4c3:	53                   	push   ebx
c000b4c4:	e8 47 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4c9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4d1:	6a 00                	push   0x0
c000b4d3:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 17 ff ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b4dd:	68 ff ff ff 00       	push   0xffffff
c000b4e2:	53                   	push   ebx
c000b4e3:	e8 28 ff ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b4e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4ec:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4f1:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4fa:	83 c4 20             	add    esp,0x20
c000b4fd:	6a 00                	push   0x0
c000b4ff:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b503:	53                   	push   ebx
c000b504:	e8 eb fe ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000b509:	68 ff ff ff 00       	push   0xffffff
c000b50e:	53                   	push   ebx
c000b50f:	e8 fc fe ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000b514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b518:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b51c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b520:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b524:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b528:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b52d:	0d 00 92 c0 00       	or     eax,0xc09200
c000b532:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b536:	89 d8                	mov    eax,ebx
c000b538:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b53c:	80 cc 60             	or     ah,0x60
c000b53f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	89 f8                	mov    eax,edi
c000b548:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54c:	80 cc 60             	or     ah,0x60
c000b54f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b553:	89 c7                	mov    edi,eax
c000b555:	55                   	push   ebp
c000b556:	e8 e9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b55b:	83 c4 0c             	add    esp,0xc
c000b55e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b562:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b566:	55                   	push   ebp
c000b567:	e8 d8 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b56c:	83 c4 0c             	add    esp,0xc
c000b56f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b577:	55                   	push   ebp
c000b578:	e8 c7 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b57d:	83 c4 0c             	add    esp,0xc
c000b580:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b584:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b588:	53                   	push   ebx
c000b589:	51                   	push   ecx
c000b58a:	55                   	push   ebp
c000b58b:	e8 b4 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b590:	83 c4 0c             	add    esp,0xc
c000b593:	57                   	push   edi
c000b594:	56                   	push   esi
c000b595:	55                   	push   ebp
c000b596:	e8 a9 fe ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000b59b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b59e:	e8 e5 fe ff ff       	call   c000b488 <GDT::flush()>
c000b5a3:	83 c4 4c             	add    esp,0x4c
c000b5a6:	5b                   	pop    ebx
c000b5a7:	5e                   	pop    esi
c000b5a8:	5f                   	pop    edi
c000b5a9:	5d                   	pop    ebp
c000b5aa:	c3                   	ret    

c000b5ab <idleFunction(void*)>:
c000b5ab:	53                   	push   ebx
c000b5ac:	83 ec 08             	sub    esp,0x8
c000b5af:	e8 7e c3 00 00       	call   c0017932 <unlockScheduler()>
c000b5b4:	e8 25 87 00 00       	call   c0013cde <thisCPU()>
c000b5b9:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5c0:	74 41                	je     c000b603 <idleFunction(void*)+0x58>
c000b5c2:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 33                	je     c000b603 <idleFunction(void*)+0x58>
c000b5d0:	31 db                	xor    ebx,ebx
c000b5d2:	52                   	push   edx
c000b5d3:	52                   	push   edx
c000b5d4:	68 e1 00 00 00       	push   0xe1
c000b5d9:	50                   	push   eax
c000b5da:	e8 e7 fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5df:	53                   	push   ebx
c000b5e0:	83 e0 02             	and    eax,0x2
c000b5e3:	50                   	push   eax
c000b5e4:	68 e1 00 00 00       	push   0xe1
c000b5e9:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c000b5ef:	e8 fe fb ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5f4:	83 c4 20             	add    esp,0x20
c000b5f7:	e8 54 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5fc:	e8 9f 2f 01 00       	call   c001e5a0 <idleCommon()>
c000b601:	eb f4                	jmp    c000b5f7 <idleFunction(void*)+0x4c>
c000b603:	fb                   	sti    
c000b604:	f4                   	hlt    
c000b605:	e8 96 2f 01 00       	call   c001e5a0 <idleCommon()>
c000b60a:	eb f7                	jmp    c000b603 <idleFunction(void*)+0x58>

c000b60c <IDTEntry::IDTEntry(bool)>:
c000b60c:	83 ec 04             	sub    esp,0x4
c000b60f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b613:	88 04 24             	mov    BYTE PTR [esp],al
c000b616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b62c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b62f:	83 e2 f0             	and    edx,0xfffffff0
c000b632:	83 ca 0e             	or     edx,0xe
c000b635:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b63f:	83 e2 ef             	and    edx,0xffffffef
c000b642:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b645:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b649:	74 04                	je     c000b64f <IDTEntry::IDTEntry(bool)+0x43>
c000b64b:	b2 03                	mov    dl,0x3
c000b64d:	eb 02                	jmp    c000b651 <IDTEntry::IDTEntry(bool)+0x45>
c000b64f:	b2 00                	mov    dl,0x0
c000b651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b655:	83 e2 03             	and    edx,0x3
c000b658:	88 d1                	mov    cl,dl
c000b65a:	c1 e1 05             	shl    ecx,0x5
c000b65d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b660:	83 e2 9f             	and    edx,0xffffff9f
c000b663:	09 ca                	or     edx,ecx
c000b665:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b668:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b66f:	83 ca 80             	or     edx,0xffffff80
c000b672:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b675:	90                   	nop
c000b676:	83 c4 04             	add    esp,0x4
c000b679:	c3                   	ret    

c000b67a <IDTEntry::setOffset(unsigned int)>:
c000b67a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	66 89 02             	mov    WORD PTR [edx],ax
c000b685:	c1 e8 10             	shr    eax,0x10
c000b688:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <IDT::IDT()>:
c000b68e:	90                   	nop
c000b68f:	c3                   	ret    

c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	83 c0 30             	add    eax,0x30
c000b697:	c3                   	ret    

c000b698 <IDT::addEntry(IDTEntry, int)>:
c000b698:	53                   	push   ebx
c000b699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b69d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6ac:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6b0:	5b                   	pop    ebx
c000b6b1:	c3                   	ret    

c000b6b2 <IDT::addEntry(int, void (*)(), bool)>:
c000b6b2:	53                   	push   ebx
c000b6b3:	83 ec 10             	sub    esp,0x10
c000b6b6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6bb:	50                   	push   eax
c000b6bc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6c0:	53                   	push   ebx
c000b6c1:	e8 46 ff ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000b6c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6ca:	53                   	push   ebx
c000b6cb:	e8 aa ff ff ff       	call   c000b67a <IDTEntry::setOffset(unsigned int)>
c000b6d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6e0:	e8 b3 ff ff ff       	call   c000b698 <IDT::addEntry(IDTEntry, int)>
c000b6e5:	83 c4 30             	add    esp,0x30
c000b6e8:	5b                   	pop    ebx
c000b6e9:	c3                   	ret    

c000b6ea <IDT::flush()>:
c000b6ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6ee:	66 c7 05 b8 32 02 c0 ff 07 	mov    WORD PTR ds:0xc00232b8,0x7ff
c000b6f7:	a3 ba 32 02 c0       	mov    ds:0xc00232ba,eax
c000b6fc:	0f 01 1d b8 32 02 c0 	lidtd  ds:0xc00232b8
c000b703:	c3                   	ret    

c000b704 <IDT::setup()>:
c000b704:	57                   	push   edi
c000b705:	56                   	push   esi
c000b706:	53                   	push   ebx
c000b707:	83 ec 10             	sub    esp,0x10
c000b70a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b70e:	6a 00                	push   0x0
c000b710:	68 53 03 00 c0       	push   0xc0000353
c000b715:	6a 00                	push   0x0
c000b717:	53                   	push   ebx
c000b718:	e8 95 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b71d:	6a 00                	push   0x0
c000b71f:	68 63 03 00 c0       	push   0xc0000363
c000b724:	6a 01                	push   0x1
c000b726:	53                   	push   ebx
c000b727:	e8 86 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b72c:	83 c4 20             	add    esp,0x20
c000b72f:	6a 00                	push   0x0
c000b731:	68 6d 03 00 c0       	push   0xc000036d
c000b736:	6a 02                	push   0x2
c000b738:	53                   	push   ebx
c000b739:	e8 74 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b73e:	6a 00                	push   0x0
c000b740:	68 77 03 00 c0       	push   0xc0000377
c000b745:	6a 03                	push   0x3
c000b747:	53                   	push   ebx
c000b748:	e8 65 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b74d:	83 c4 20             	add    esp,0x20
c000b750:	6a 00                	push   0x0
c000b752:	68 81 03 00 c0       	push   0xc0000381
c000b757:	6a 04                	push   0x4
c000b759:	53                   	push   ebx
c000b75a:	e8 53 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b75f:	6a 00                	push   0x0
c000b761:	68 8b 03 00 c0       	push   0xc000038b
c000b766:	6a 05                	push   0x5
c000b768:	53                   	push   ebx
c000b769:	e8 44 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b76e:	83 c4 20             	add    esp,0x20
c000b771:	6a 00                	push   0x0
c000b773:	68 95 03 00 c0       	push   0xc0000395
c000b778:	6a 06                	push   0x6
c000b77a:	53                   	push   ebx
c000b77b:	e8 32 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b780:	6a 00                	push   0x0
c000b782:	68 9f 03 00 c0       	push   0xc000039f
c000b787:	6a 07                	push   0x7
c000b789:	53                   	push   ebx
c000b78a:	e8 23 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b78f:	83 c4 20             	add    esp,0x20
c000b792:	6a 00                	push   0x0
c000b794:	68 a9 03 00 c0       	push   0xc00003a9
c000b799:	6a 08                	push   0x8
c000b79b:	53                   	push   ebx
c000b79c:	e8 11 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7a1:	6a 00                	push   0x0
c000b7a3:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a8:	6a 09                	push   0x9
c000b7aa:	53                   	push   ebx
c000b7ab:	e8 02 ff ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7b0:	83 c4 20             	add    esp,0x20
c000b7b3:	6a 00                	push   0x0
c000b7b5:	68 bb 03 00 c0       	push   0xc00003bb
c000b7ba:	6a 0a                	push   0xa
c000b7bc:	53                   	push   ebx
c000b7bd:	e8 f0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7c2:	6a 00                	push   0x0
c000b7c4:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c9:	6a 0b                	push   0xb
c000b7cb:	53                   	push   ebx
c000b7cc:	e8 e1 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7d1:	83 c4 20             	add    esp,0x20
c000b7d4:	6a 00                	push   0x0
c000b7d6:	68 cb 03 00 c0       	push   0xc00003cb
c000b7db:	6a 0c                	push   0xc
c000b7dd:	53                   	push   ebx
c000b7de:	e8 cf fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7e3:	6a 00                	push   0x0
c000b7e5:	68 d3 03 00 c0       	push   0xc00003d3
c000b7ea:	6a 0d                	push   0xd
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 c0 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b7f2:	83 c4 20             	add    esp,0x20
c000b7f5:	6a 00                	push   0x0
c000b7f7:	68 db 03 00 c0       	push   0xc00003db
c000b7fc:	6a 0e                	push   0xe
c000b7fe:	53                   	push   ebx
c000b7ff:	e8 ae fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b804:	6a 00                	push   0x0
c000b806:	68 e3 03 00 c0       	push   0xc00003e3
c000b80b:	6a 0f                	push   0xf
c000b80d:	53                   	push   ebx
c000b80e:	e8 9f fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b813:	83 c4 20             	add    esp,0x20
c000b816:	6a 00                	push   0x0
c000b818:	68 ed 03 00 c0       	push   0xc00003ed
c000b81d:	6a 10                	push   0x10
c000b81f:	53                   	push   ebx
c000b820:	e8 8d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b825:	6a 00                	push   0x0
c000b827:	68 f7 03 00 c0       	push   0xc00003f7
c000b82c:	6a 11                	push   0x11
c000b82e:	53                   	push   ebx
c000b82f:	e8 7e fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b834:	83 c4 20             	add    esp,0x20
c000b837:	6a 00                	push   0x0
c000b839:	68 01 04 00 c0       	push   0xc0000401
c000b83e:	6a 12                	push   0x12
c000b840:	53                   	push   ebx
c000b841:	e8 6c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b846:	6a 01                	push   0x1
c000b848:	68 0b 04 00 c0       	push   0xc000040b
c000b84d:	6a 60                	push   0x60
c000b84f:	53                   	push   ebx
c000b850:	e8 5d fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b855:	83 c4 20             	add    esp,0x20
c000b858:	6a 00                	push   0x0
c000b85a:	68 15 04 00 c0       	push   0xc0000415
c000b85f:	6a 20                	push   0x20
c000b861:	53                   	push   ebx
c000b862:	e8 4b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b867:	6a 00                	push   0x0
c000b869:	68 1f 04 00 c0       	push   0xc000041f
c000b86e:	6a 21                	push   0x21
c000b870:	53                   	push   ebx
c000b871:	e8 3c fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b876:	83 c4 20             	add    esp,0x20
c000b879:	6a 00                	push   0x0
c000b87b:	68 29 04 00 c0       	push   0xc0000429
c000b880:	6a 22                	push   0x22
c000b882:	53                   	push   ebx
c000b883:	e8 2a fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b888:	6a 00                	push   0x0
c000b88a:	68 33 04 00 c0       	push   0xc0000433
c000b88f:	6a 23                	push   0x23
c000b891:	53                   	push   ebx
c000b892:	e8 1b fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b897:	83 c4 20             	add    esp,0x20
c000b89a:	6a 00                	push   0x0
c000b89c:	68 3d 04 00 c0       	push   0xc000043d
c000b8a1:	6a 24                	push   0x24
c000b8a3:	53                   	push   ebx
c000b8a4:	e8 09 fe ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8a9:	6a 00                	push   0x0
c000b8ab:	68 47 04 00 c0       	push   0xc0000447
c000b8b0:	6a 25                	push   0x25
c000b8b2:	53                   	push   ebx
c000b8b3:	e8 fa fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8b8:	83 c4 20             	add    esp,0x20
c000b8bb:	6a 00                	push   0x0
c000b8bd:	68 51 04 00 c0       	push   0xc0000451
c000b8c2:	6a 26                	push   0x26
c000b8c4:	53                   	push   ebx
c000b8c5:	e8 e8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8ca:	6a 00                	push   0x0
c000b8cc:	68 5b 04 00 c0       	push   0xc000045b
c000b8d1:	6a 27                	push   0x27
c000b8d3:	53                   	push   ebx
c000b8d4:	e8 d9 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8d9:	83 c4 20             	add    esp,0x20
c000b8dc:	6a 00                	push   0x0
c000b8de:	68 65 04 00 c0       	push   0xc0000465
c000b8e3:	6a 28                	push   0x28
c000b8e5:	53                   	push   ebx
c000b8e6:	e8 c7 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8eb:	6a 00                	push   0x0
c000b8ed:	68 6f 04 00 c0       	push   0xc000046f
c000b8f2:	6a 29                	push   0x29
c000b8f4:	53                   	push   ebx
c000b8f5:	e8 b8 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b8fa:	83 c4 20             	add    esp,0x20
c000b8fd:	6a 00                	push   0x0
c000b8ff:	68 79 04 00 c0       	push   0xc0000479
c000b904:	6a 2a                	push   0x2a
c000b906:	53                   	push   ebx
c000b907:	e8 a6 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b90c:	6a 00                	push   0x0
c000b90e:	68 83 04 00 c0       	push   0xc0000483
c000b913:	6a 2b                	push   0x2b
c000b915:	53                   	push   ebx
c000b916:	e8 97 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b91b:	83 c4 20             	add    esp,0x20
c000b91e:	6a 00                	push   0x0
c000b920:	68 8d 04 00 c0       	push   0xc000048d
c000b925:	6a 2c                	push   0x2c
c000b927:	53                   	push   ebx
c000b928:	e8 85 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b92d:	6a 00                	push   0x0
c000b92f:	68 97 04 00 c0       	push   0xc0000497
c000b934:	6a 2d                	push   0x2d
c000b936:	53                   	push   ebx
c000b937:	e8 76 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b93c:	83 c4 20             	add    esp,0x20
c000b93f:	6a 00                	push   0x0
c000b941:	68 a1 04 00 c0       	push   0xc00004a1
c000b946:	6a 2e                	push   0x2e
c000b948:	53                   	push   ebx
c000b949:	e8 64 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b94e:	6a 00                	push   0x0
c000b950:	68 ab 04 00 c0       	push   0xc00004ab
c000b955:	6a 2f                	push   0x2f
c000b957:	53                   	push   ebx
c000b958:	e8 55 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b95d:	83 c4 20             	add    esp,0x20
c000b960:	6a 00                	push   0x0
c000b962:	68 b5 04 00 c0       	push   0xc00004b5
c000b967:	6a 30                	push   0x30
c000b969:	53                   	push   ebx
c000b96a:	e8 43 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b96f:	6a 00                	push   0x0
c000b971:	68 bf 04 00 c0       	push   0xc00004bf
c000b976:	6a 31                	push   0x31
c000b978:	53                   	push   ebx
c000b979:	e8 34 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b97e:	83 c4 20             	add    esp,0x20
c000b981:	6a 00                	push   0x0
c000b983:	68 c9 04 00 c0       	push   0xc00004c9
c000b988:	6a 32                	push   0x32
c000b98a:	53                   	push   ebx
c000b98b:	e8 22 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b990:	6a 00                	push   0x0
c000b992:	68 d3 04 00 c0       	push   0xc00004d3
c000b997:	6a 33                	push   0x33
c000b999:	53                   	push   ebx
c000b99a:	e8 13 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b99f:	83 c4 20             	add    esp,0x20
c000b9a2:	6a 00                	push   0x0
c000b9a4:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a9:	6a 34                	push   0x34
c000b9ab:	53                   	push   ebx
c000b9ac:	e8 01 fd ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9b1:	6a 00                	push   0x0
c000b9b3:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b8:	6a 35                	push   0x35
c000b9ba:	53                   	push   ebx
c000b9bb:	e8 f2 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9c0:	83 c4 20             	add    esp,0x20
c000b9c3:	6a 00                	push   0x0
c000b9c5:	68 f1 04 00 c0       	push   0xc00004f1
c000b9ca:	6a 36                	push   0x36
c000b9cc:	53                   	push   ebx
c000b9cd:	e8 e0 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9d2:	6a 00                	push   0x0
c000b9d4:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d9:	6a 37                	push   0x37
c000b9db:	53                   	push   ebx
c000b9dc:	e8 d1 fc ff ff       	call   c000b6b2 <IDT::addEntry(int, void (*)(), bool)>
c000b9e1:	83 c4 20             	add    esp,0x20
c000b9e4:	e8 9c 25 00 00       	call   c000df85 <Virt::getAKernelVAS()>
c000b9e9:	52                   	push   edx
c000b9ea:	6a 03                	push   0x3
c000b9ec:	6a 02                	push   0x2
c000b9ee:	50                   	push   eax
c000b9ef:	e8 5c 2b 00 00       	call   c000e550 <VAS::allocatePages(int, int)>
c000b9f4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9fb:	89 c6                	mov    esi,eax
c000b9fd:	e8 5e 32 00 00       	call   c000ec60 <operator new(unsigned long)>
c000ba02:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba08:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba0b:	89 c7                	mov    edi,eax
c000ba0d:	e8 b4 1c 00 00       	call   c000d6c6 <TSS::TSS()>
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	68 a9 03 00 c0       	push   0xc00003a9
c000ba1a:	56                   	push   esi
c000ba1b:	57                   	push   edi
c000ba1c:	e8 e5 1c 00 00       	call   c000d706 <TSS::setup(unsigned long, unsigned long)>
c000ba21:	59                   	pop    ecx
c000ba22:	89 c6                	mov    esi,eax
c000ba24:	5f                   	pop    edi
c000ba25:	6a 00                	push   0x0
c000ba27:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba2b:	50                   	push   eax
c000ba2c:	e8 db fb ff ff       	call   c000b60c <IDTEntry::IDTEntry(bool)>
c000ba31:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba35:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba3a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba41:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba4b:	80 ce 05             	or     dh,0x5
c000ba4e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba59:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba5f:	e8 86 fc ff ff       	call   c000b6ea <IDT::flush()>
c000ba64:	83 c4 20             	add    esp,0x20
c000ba67:	5b                   	pop    ebx
c000ba68:	5e                   	pop    esi
c000ba69:	5f                   	pop    edi
c000ba6a:	c3                   	ret    

c000ba6b <sbrk>:
c000ba6b:	55                   	push   ebp
c000ba6c:	57                   	push   edi
c000ba6d:	56                   	push   esi
c000ba6e:	53                   	push   ebx
c000ba6f:	83 ec 1c             	sub    esp,0x1c
c000ba72:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba76:	85 db                	test   ebx,ebx
c000ba78:	74 37                	je     c000bab1 <sbrk+0x46>
c000ba7a:	78 3f                	js     c000babb <sbrk+0x50>
c000ba7c:	e8 5d 82 00 00       	call   c0013cde <thisCPU()>
c000ba81:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba87:	83 e0 01             	and    eax,0x1
c000ba8a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba8e:	a1 d4 26 02 c0       	mov    eax,ds:0xc00226d4
c000ba93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba97:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	78 35                	js     c000bad6 <sbrk+0x6b>
c000baa1:	c1 f8 0c             	sar    eax,0xc
c000baa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa8:	89 c7                	mov    edi,eax
c000baaa:	be 00 00 00 00       	mov    esi,0x0
c000baaf:	eb 3c                	jmp    c000baed <sbrk+0x82>
c000bab1:	a1 d4 26 02 c0       	mov    eax,ds:0xc00226d4
c000bab6:	e9 ad 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000babb:	83 ec 08             	sub    esp,0x8
c000babe:	53                   	push   ebx
c000babf:	68 58 ff 01 c0       	push   0xc001ff58
c000bac4:	e8 86 32 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000bac9:	83 c4 10             	add    esp,0x10
c000bacc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bad1:	e9 92 00 00 00       	jmp    c000bb68 <sbrk+0xfd>
c000bad6:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000badc:	eb c3                	jmp    c000baa1 <sbrk+0x36>
c000bade:	81 05 d4 26 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00226d4,0x1000
c000bae8:	46                   	inc    esi
c000bae9:	39 f7                	cmp    edi,esi
c000baeb:	74 34                	je     c000bb21 <sbrk+0xb6>
c000baed:	e8 93 24 00 00       	call   c000df85 <Virt::getAKernelVAS()>
c000baf2:	89 c3                	mov    ebx,eax
c000baf4:	8b 2d d4 26 02 c0    	mov    ebp,DWORD PTR ds:0xc00226d4
c000bafa:	e8 c9 06 00 00       	call   c000c1c8 <Phys::allocatePage()>
c000baff:	68 01 04 00 00       	push   0x401
c000bb04:	55                   	push   ebp
c000bb05:	50                   	push   eax
c000bb06:	53                   	push   ebx
c000bb07:	e8 44 29 00 00       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb14:	74 c8                	je     c000bade <sbrk+0x73>
c000bb16:	8b 1d d4 26 02 c0    	mov    ebx,DWORD PTR ds:0xc00226d4
c000bb1c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb1f:	eb bd                	jmp    c000bade <sbrk+0x73>
c000bb21:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb26:	74 48                	je     c000bb70 <sbrk+0x105>
c000bb28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb2c:	89 d3                	mov    ebx,edx
c000bb2e:	c1 eb 0a             	shr    ebx,0xa
c000bb31:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb37:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb41:	c1 e0 0c             	shl    eax,0xc
c000bb44:	01 d0                	add    eax,edx
c000bb46:	c1 e8 0a             	shr    eax,0xa
c000bb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb4e:	2d 00 00 40 00       	sub    eax,0x400000
c000bb53:	39 c3                	cmp    ebx,eax
c000bb55:	77 0d                	ja     c000bb64 <sbrk+0xf9>
c000bb57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb60:	39 d8                	cmp    eax,ebx
c000bb62:	73 f3                	jae    c000bb57 <sbrk+0xec>
c000bb64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb68:	83 c4 1c             	add    esp,0x1c
c000bb6b:	5b                   	pop    ebx
c000bb6c:	5e                   	pop    esi
c000bb6d:	5f                   	pop    edi
c000bb6e:	5d                   	pop    ebp
c000bb6f:	c3                   	ret    
c000bb70:	e8 40 2a 01 00       	call   c001e5b5 <CPU::readCR3()>
c000bb75:	83 ec 0c             	sub    esp,0xc
c000bb78:	50                   	push   eax
c000bb79:	e8 49 2a 01 00       	call   c001e5c7 <CPU::writeCR3(unsigned long)>
c000bb7e:	83 c4 10             	add    esp,0x10
c000bb81:	eb e1                	jmp    c000bb64 <sbrk+0xf9>

c000bb83 <mmap>:
c000bb83:	83 ec 18             	sub    esp,0x18
c000bb86:	68 88 ff 01 c0       	push   0xc001ff88
c000bb8b:	e8 54 8e 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000bb90:	b8 00 00 00 00       	mov    eax,0x0
c000bb95:	83 c4 1c             	add    esp,0x1c
c000bb98:	c3                   	ret    

c000bb99 <munmap>:
c000bb99:	83 ec 18             	sub    esp,0x18
c000bb9c:	68 8d ff 01 c0       	push   0xc001ff8d
c000bba1:	e8 3e 8e 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000bba6:	b8 00 00 00 00       	mov    eax,0x0
c000bbab:	83 c4 1c             	add    esp,0x1c
c000bbae:	c3                   	ret    

c000bbaf <liballoc_lock()>:
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	e8 79 bd 00 00       	call   c0017930 <lockScheduler()>
c000bbb7:	b8 00 00 00 00       	mov    eax,0x0
c000bbbc:	83 c4 0c             	add    esp,0xc
c000bbbf:	c3                   	ret    

c000bbc0 <liballoc_unlock()>:
c000bbc0:	83 ec 0c             	sub    esp,0xc
c000bbc3:	e8 6a bd 00 00       	call   c0017932 <unlockScheduler()>
c000bbc8:	b8 00 00 00 00       	mov    eax,0x0
c000bbcd:	83 c4 0c             	add    esp,0xc
c000bbd0:	c3                   	ret    

c000bbd1 <liballoc_alloc(int)>:
c000bbd1:	83 ec 0c             	sub    esp,0xc
c000bbd4:	e8 ac 23 00 00       	call   c000df85 <Virt::getAKernelVAS()>
c000bbd9:	83 ec 04             	sub    esp,0x4
c000bbdc:	6a 01                	push   0x1
c000bbde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe2:	50                   	push   eax
c000bbe3:	e8 68 29 00 00       	call   c000e550 <VAS::allocatePages(int, int)>
c000bbe8:	83 c4 1c             	add    esp,0x1c
c000bbeb:	c3                   	ret    

c000bbec <liballoc_free(void*, int)>:
c000bbec:	83 ec 0c             	sub    esp,0xc
c000bbef:	e8 91 23 00 00       	call   c000df85 <Virt::getAKernelVAS()>
c000bbf4:	83 ec 08             	sub    esp,0x8
c000bbf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbfb:	50                   	push   eax
c000bbfc:	e8 71 26 00 00       	call   c000e272 <VAS::freeAllocatedPages(unsigned long)>
c000bc01:	b8 00 00 00 00       	mov    eax,0x0
c000bc06:	83 c4 1c             	add    esp,0x1c
c000bc09:	c3                   	ret    

c000bc0a <realloc>:
c000bc0a:	83 ec 14             	sub    esp,0x14
c000bc0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc15:	e8 67 57 ff ff       	call   c0001381 <dlrealloc>
c000bc1a:	83 c4 1c             	add    esp,0x1c
c000bc1d:	c3                   	ret    

c000bc1e <malloc>:
c000bc1e:	83 ec 18             	sub    esp,0x18
c000bc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc25:	e8 1a 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc2a:	83 c4 1c             	add    esp,0x1c
c000bc2d:	c3                   	ret    

c000bc2e <free>:
c000bc2e:	83 ec 18             	sub    esp,0x18
c000bc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc35:	e8 af 4e ff ff       	call   c0000ae9 <dlfree>
c000bc3a:	83 c4 1c             	add    esp,0x1c
c000bc3d:	c3                   	ret    

c000bc3e <rfree>:
c000bc3e:	83 ec 18             	sub    esp,0x18
c000bc41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc45:	e8 e4 ff ff ff       	call   c000bc2e <free>
c000bc4a:	83 c4 1c             	add    esp,0x1c
c000bc4d:	c3                   	ret    

c000bc4e <calloc>:
c000bc4e:	56                   	push   esi
c000bc4f:	53                   	push   ebx
c000bc50:	83 ec 10             	sub    esp,0x10
c000bc53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc57:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc5c:	53                   	push   ebx
c000bc5d:	e8 bc ff ff ff       	call   c000bc1e <malloc>
c000bc62:	89 c6                	mov    esi,eax
c000bc64:	83 c4 0c             	add    esp,0xc
c000bc67:	53                   	push   ebx
c000bc68:	6a 00                	push   0x0
c000bc6a:	50                   	push   eax
c000bc6b:	e8 98 49 ff ff       	call   c0000608 <memset>
c000bc70:	89 f0                	mov    eax,esi
c000bc72:	83 c4 14             	add    esp,0x14
c000bc75:	5b                   	pop    ebx
c000bc76:	5e                   	pop    esi
c000bc77:	c3                   	ret    

c000bc78 <hwTextMode_loadInData(VgaText*)>:
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc7f:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc85:	85 c0                	test   eax,eax
c000bc87:	7e 30                	jle    c000bcb9 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc89:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc8c:	31 f6                	xor    esi,esi
c000bc8e:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc91:	31 c0                	xor    eax,eax
c000bc93:	c1 e1 05             	shl    ecx,0x5
c000bc96:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc9c:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bca0:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bca4:	40                   	inc    eax
c000bca5:	83 f8 50             	cmp    eax,0x50
c000bca8:	75 f2                	jne    c000bc9c <hwTextMode_loadInData(VgaText*)+0x24>
c000bcaa:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcb0:	46                   	inc    esi
c000bcb1:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb7:	7f d5                	jg     c000bc8e <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb9:	5b                   	pop    ebx
c000bcba:	5e                   	pop    esi
c000bcbb:	5f                   	pop    edi
c000bcbc:	c3                   	ret    

c000bcbd <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcbd:	56                   	push   esi
c000bcbe:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcc3:	53                   	push   ebx
c000bcc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bccc:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcd2:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd8:	c1 e0 04             	shl    eax,0x4
c000bcdb:	83 e6 0f             	and    esi,0xf
c000bcde:	0f b6 c0             	movzx  eax,al
c000bce1:	41                   	inc    ecx
c000bce2:	09 f0                	or     eax,esi
c000bce4:	83 c2 02             	add    edx,0x2
c000bce7:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bceb:	c1 e0 08             	shl    eax,0x8
c000bcee:	09 f0                	or     eax,esi
c000bcf0:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcf4:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcfa:	75 d0                	jne    c000bccc <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcfc:	5b                   	pop    ebx
c000bcfd:	5e                   	pop    esi
c000bcfe:	c3                   	ret    

c000bcff <hwTextMode_showCursor(VgaText*, bool)>:
c000bcff:	56                   	push   esi
c000bd00:	53                   	push   ebx
c000bd01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd06:	74 38                	je     c000bd40 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd08:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd0d:	b0 0a                	mov    al,0xa
c000bd0f:	89 da                	mov    edx,ebx
c000bd11:	ee                   	out    dx,al
c000bd12:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd17:	89 ca                	mov    edx,ecx
c000bd19:	ec                   	in     al,dx
c000bd1a:	b2 0f                	mov    dl,0xf
c000bd1c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd20:	83 e0 c0             	and    eax,0xffffffc0
c000bd23:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd29:	09 d0                	or     eax,edx
c000bd2b:	89 ca                	mov    edx,ecx
c000bd2d:	ee                   	out    dx,al
c000bd2e:	b0 0b                	mov    al,0xb
c000bd30:	89 da                	mov    edx,ebx
c000bd32:	ee                   	out    dx,al
c000bd33:	89 ca                	mov    edx,ecx
c000bd35:	ec                   	in     al,dx
c000bd36:	83 e0 e0             	and    eax,0xffffffe0
c000bd39:	83 c8 0f             	or     eax,0xf
c000bd3c:	ee                   	out    dx,al
c000bd3d:	5b                   	pop    ebx
c000bd3e:	5e                   	pop    esi
c000bd3f:	c3                   	ret    
c000bd40:	b0 0a                	mov    al,0xa
c000bd42:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd47:	ee                   	out    dx,al
c000bd48:	b0 20                	mov    al,0x20
c000bd4a:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd4f:	ee                   	out    dx,al
c000bd50:	5b                   	pop    ebx
c000bd51:	5e                   	pop    esi
c000bd52:	c3                   	ret    

c000bd53 <hwTextMode_update(VgaText*)>:
c000bd53:	c3                   	ret    

c000bd54 <hwTextMode_updateCursor(VgaText*)>:
c000bd54:	56                   	push   esi
c000bd55:	b9 19 00 00 00       	mov    ecx,0x19
c000bd5a:	53                   	push   ebx
c000bd5b:	be d4 03 00 00       	mov    esi,0x3d4
c000bd60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd64:	89 f2                	mov    edx,esi
c000bd66:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd6c:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd72:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd75:	c1 e1 04             	shl    ecx,0x4
c000bd78:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd7e:	b0 0f                	mov    al,0xf
c000bd80:	ee                   	out    dx,al
c000bd81:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd86:	88 c8                	mov    al,cl
c000bd88:	89 da                	mov    edx,ebx
c000bd8a:	ee                   	out    dx,al
c000bd8b:	b0 0e                	mov    al,0xe
c000bd8d:	89 f2                	mov    edx,esi
c000bd8f:	ee                   	out    dx,al
c000bd90:	89 c8                	mov    eax,ecx
c000bd92:	89 da                	mov    edx,ebx
c000bd94:	66 c1 e8 08          	shr    ax,0x8
c000bd98:	ee                   	out    dx,al
c000bd99:	5b                   	pop    ebx
c000bd9a:	5e                   	pop    esi
c000bd9b:	c3                   	ret    

c000bd9c <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd9c:	ba da 03 00 00       	mov    edx,0x3da
c000bda1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda6:	75 18                	jne    c000bdc0 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 c8 08             	or     eax,0x8
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    
c000bdc0:	ec                   	in     al,dx
c000bdc1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc6:	b0 30                	mov    al,0x30
c000bdc8:	89 ca                	mov    edx,ecx
c000bdca:	ee                   	out    dx,al
c000bdcb:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdd0:	ec                   	in     al,dx
c000bdd1:	83 e0 f7             	and    eax,0xfffffff7
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	ee                   	out    dx,al
c000bdd7:	c3                   	ret    

c000bdd8 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd8:	55                   	push   ebp
c000bdd9:	bd 02 00 00 00       	mov    ebp,0x2
c000bdde:	57                   	push   edi
c000bddf:	56                   	push   esi
c000bde0:	53                   	push   ebx
c000bde1:	83 ec 1c             	sub    esp,0x1c
c000bde4:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdf0:	31 c0                	xor    eax,eax
c000bdf2:	eb 0b                	jmp    c000bdff <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdf4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdfa:	74 57                	je     c000be53 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdfc:	43                   	inc    ebx
c000bdfd:	89 f0                	mov    eax,esi
c000bdff:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000be05:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be0b:	88 13                	mov    BYTE PTR [ebx],dl
c000be0d:	8d 70 01             	lea    esi,[eax+0x1]
c000be10:	83 fd 18             	cmp    ebp,0x18
c000be13:	75 df                	jne    c000bdf4 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be15:	a8 01                	test   al,0x1
c000be17:	75 13                	jne    c000be2c <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be19:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be1c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be22:	75 d8                	jne    c000bdfc <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be24:	83 c4 1c             	add    esp,0x1c
c000be27:	5b                   	pop    ebx
c000be28:	5e                   	pop    esi
c000be29:	5f                   	pop    edi
c000be2a:	5d                   	pop    ebp
c000be2b:	c3                   	ret    
c000be2c:	83 ec 08             	sub    esp,0x8
c000be2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be33:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be3a:	50                   	push   eax
c000be3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be3f:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be46:	50                   	push   eax
c000be47:	e8 5a 0b 00 00       	call   c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	88 07                	mov    BYTE PTR [edi],al
c000be51:	eb c9                	jmp    c000be1c <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be53:	45                   	inc    ebp
c000be54:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be5c:	eb 8e                	jmp    c000bdec <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be5e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be5e:	56                   	push   esi
c000be5f:	53                   	push   ebx
c000be60:	83 ec 0c             	sub    esp,0xc
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be76:	50                   	push   eax
c000be77:	e8 2a 0b 00 00       	call   c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000be7c:	5a                   	pop    edx
c000be7d:	0f b6 c0             	movzx  eax,al
c000be80:	59                   	pop    ecx
c000be81:	50                   	push   eax
c000be82:	89 f0                	mov    eax,esi
c000be84:	0f be f0             	movsx  esi,al
c000be87:	56                   	push   esi
c000be88:	e8 bf 0b 00 00       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000be8d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be91:	ba 19 00 00 00       	mov    edx,0x19
c000be96:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be9c:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be9f:	8d 14 92             	lea    edx,[edx+edx*4]
c000bea2:	c1 e1 04             	shl    ecx,0x4
c000bea5:	c1 e2 04             	shl    edx,0x4
c000bea8:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000beac:	01 ca                	add    edx,ecx
c000beae:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb6:	83 c4 14             	add    esp,0x14
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	c3                   	ret    

c000bebc <setupTextMode()>:
c000bebc:	c7 05 58 33 02 c0 9c bd 00 c0 	mov    DWORD PTR ds:0xc0023358,0xc000bd9c
c000bec6:	c7 05 44 33 02 c0 78 bc 00 c0 	mov    DWORD PTR ds:0xc0023344,0xc000bc78
c000bed0:	c7 05 40 33 02 c0 bd bc 00 c0 	mov    DWORD PTR ds:0xc0023340,0xc000bcbd
c000beda:	c7 05 4c 33 02 c0 d8 bd 00 c0 	mov    DWORD PTR ds:0xc002334c,0xc000bdd8
c000bee4:	c7 05 54 33 02 c0 ff bc 00 c0 	mov    DWORD PTR ds:0xc0023354,0xc000bcff
c000beee:	c7 05 48 33 02 c0 53 bd 00 c0 	mov    DWORD PTR ds:0xc0023348,0xc000bd53
c000bef8:	c7 05 50 33 02 c0 54 bd 00 c0 	mov    DWORD PTR ds:0xc0023350,0xc000bd54
c000bf02:	c7 05 5c 33 02 c0 5e be 00 c0 	mov    DWORD PTR ds:0xc002335c,0xc000be5e
c000bf0c:	c3                   	ret    

c000bf0d <kernel_main>:
c000bf0d:	57                   	push   edi
c000bf0e:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf13:	56                   	push   esi
c000bf14:	31 f6                	xor    esi,esi
c000bf16:	53                   	push   ebx
c000bf17:	83 ec 10             	sub    esp,0x10
c000bf1a:	e8 e1 08 00 00       	call   c000c800 <installVgaTextImplementation()>
c000bf1f:	e8 98 ff ff ff       	call   c000bebc <setupTextMode()>
c000bf24:	89 f0                	mov    eax,esi
c000bf26:	89 fa                	mov    edx,edi
c000bf28:	ee                   	out    dx,al
c000bf29:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf2e:	b0 80                	mov    al,0x80
c000bf30:	89 da                	mov    edx,ebx
c000bf32:	ee                   	out    dx,al
c000bf33:	b1 03                	mov    cl,0x3
c000bf35:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf3a:	88 c8                	mov    al,cl
c000bf3c:	ee                   	out    dx,al
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	89 fa                	mov    edx,edi
c000bf41:	ee                   	out    dx,al
c000bf42:	88 c8                	mov    al,cl
c000bf44:	89 da                	mov    edx,ebx
c000bf46:	ee                   	out    dx,al
c000bf47:	b0 c7                	mov    al,0xc7
c000bf49:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf4e:	ee                   	out    dx,al
c000bf4f:	b0 0b                	mov    al,0xb
c000bf51:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf56:	ee                   	out    dx,al
c000bf57:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	05 ff 0f 00 00       	add    eax,0xfff
c000bf64:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf69:	50                   	push   eax
c000bf6a:	e8 4d 03 00 00       	call   c000c2bc <Phys::physicalMemorySetup(unsigned int)>
c000bf6f:	e8 92 1f 00 00       	call   c000df06 <Virt::virtualMemorySetup()>
c000bf74:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf7a:	83 c4 10             	add    esp,0x10
c000bf7d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf83:	75 0e                	jne    c000bf93 <kernel_main+0x86>
c000bf85:	89 d8                	mov    eax,ebx
c000bf87:	25 48 03 00 00       	and    eax,0x348
c000bf8c:	3d 00 03 00 00       	cmp    eax,0x300
c000bf91:	74 10                	je     c000bfa3 <kernel_main+0x96>
c000bf93:	83 ec 0c             	sub    esp,0xc
c000bf96:	68 7b 13 02 c0       	push   0xc002137b
c000bf9b:	e8 44 8a 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000bfa0:	83 c4 10             	add    esp,0x10
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	89 1d c0 32 02 c0    	mov    DWORD PTR ds:0xc00232c0,ebx
c000bfac:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfb0:	53                   	push   ebx
c000bfb1:	e8 fa 20 00 00       	call   c000e0b0 <VAS::VAS()>
c000bfb6:	89 1d 04 34 02 c0    	mov    DWORD PTR ds:0xc0023404,ebx
c000bfbc:	e8 5f 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfc1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc8:	e8 93 2c 00 00       	call   c000ec60 <operator new(unsigned long)>
c000bfcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd0:	89 c6                	mov    esi,eax
c000bfd2:	e8 cb ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd7:	6a 00                	push   0x0
c000bfd9:	89 35 a8 32 02 c0    	mov    DWORD PTR ds:0xc00232a8,esi
c000bfdf:	6a 00                	push   0x0
c000bfe1:	6a 00                	push   0x0
c000bfe3:	56                   	push   esi
c000bfe4:	e8 7f f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe9:	83 c4 14             	add    esp,0x14
c000bfec:	53                   	push   ebx
c000bfed:	e8 f2 22 00 00       	call   c000e2e4 <VAS::~VAS()>
c000bff2:	c7 04 24 94 ff 01 c0 	mov    DWORD PTR [esp],0xc001ff94
c000bff9:	e8 e6 89 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	5b                   	pop    ebx
c000c002:	5e                   	pop    esi
c000c003:	5f                   	pop    edi
c000c004:	c3                   	ret    

c000c005 <Phys::allocateDMA(unsigned long)>:
c000c005:	55                   	push   ebp
c000c006:	31 d2                	xor    edx,edx
c000c008:	57                   	push   edi
c000c009:	31 ed                	xor    ebp,ebp
c000c00b:	56                   	push   esi
c000c00c:	31 c9                	xor    ecx,ecx
c000c00e:	53                   	push   ebx
c000c00f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c013:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c019:	31 c0                	xor    eax,eax
c000c01b:	c1 ee 0c             	shr    esi,0xc
c000c01e:	eb 17                	jmp    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c020:	85 c9                	test   ecx,ecx
c000c022:	75 04                	jne    c000c028 <Phys::allocateDMA(unsigned long)+0x23>
c000c024:	89 d5                	mov    ebp,edx
c000c026:	89 d0                	mov    eax,edx
c000c028:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c02b:	39 de                	cmp    esi,ebx
c000c02d:	74 20                	je     c000c04f <Phys::allocateDMA(unsigned long)+0x4a>
c000c02f:	42                   	inc    edx
c000c030:	89 d9                	mov    ecx,ebx
c000c032:	83 fa 2f             	cmp    edx,0x2f
c000c035:	7f 11                	jg     c000c048 <Phys::allocateDMA(unsigned long)+0x43>
c000c037:	80 ba 00 33 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdcd00],0x0
c000c03e:	74 e0                	je     c000c020 <Phys::allocateDMA(unsigned long)+0x1b>
c000c040:	31 c9                	xor    ecx,ecx
c000c042:	42                   	inc    edx
c000c043:	83 fa 2f             	cmp    edx,0x2f
c000c046:	7e ef                	jle    c000c037 <Phys::allocateDMA(unsigned long)+0x32>
c000c048:	5b                   	pop    ebx
c000c049:	31 c0                	xor    eax,eax
c000c04b:	5e                   	pop    esi
c000c04c:	5f                   	pop    edi
c000c04d:	5d                   	pop    ebp
c000c04e:	c3                   	ret    
c000c04f:	8d 14 30             	lea    edx,[eax+esi*1]
c000c052:	89 d7                	mov    edi,edx
c000c054:	4f                   	dec    edi
c000c055:	79 03                	jns    c000c05a <Phys::allocateDMA(unsigned long)+0x55>
c000c057:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c05a:	c1 ff 04             	sar    edi,0x4
c000c05d:	89 c2                	mov    edx,eax
c000c05f:	c1 fa 04             	sar    edx,0x4
c000c062:	39 fa                	cmp    edx,edi
c000c064:	75 2f                	jne    c000c095 <Phys::allocateDMA(unsigned long)+0x90>
c000c066:	85 db                	test   ebx,ebx
c000c068:	74 1a                	je     c000c084 <Phys::allocateDMA(unsigned long)+0x7f>
c000c06a:	be 00 33 02 c0       	mov    esi,0xc0023300
c000c06f:	8d 90 00 33 02 c0    	lea    edx,[eax-0x3ffdcd00]
c000c075:	f7 d6                	not    esi
c000c077:	29 c6                	sub    esi,eax
c000c079:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c07c:	42                   	inc    edx
c000c07d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c080:	39 d9                	cmp    ecx,ebx
c000c082:	7f f5                	jg     c000c079 <Phys::allocateDMA(unsigned long)+0x74>
c000c084:	85 ff                	test   edi,edi
c000c086:	74 13                	je     c000c09b <Phys::allocateDMA(unsigned long)+0x96>
c000c088:	5b                   	pop    ebx
c000c089:	05 50 20 0c 00       	add    eax,0xc2050
c000c08e:	5e                   	pop    esi
c000c08f:	c1 e0 0c             	shl    eax,0xc
c000c092:	5f                   	pop    edi
c000c093:	5d                   	pop    ebp
c000c094:	c3                   	ret    
c000c095:	89 ea                	mov    edx,ebp
c000c097:	31 c9                	xor    ecx,ecx
c000c099:	eb a7                	jmp    c000c042 <Phys::allocateDMA(unsigned long)+0x3d>
c000c09b:	5b                   	pop    ebx
c000c09c:	c1 e0 0c             	shl    eax,0xc
c000c09f:	5e                   	pop    esi
c000c0a0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c0a5:	5f                   	pop    edi
c000c0a6:	5d                   	pop    ebp
c000c0a7:	c3                   	ret    

c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0b0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b6:	c1 e9 0c             	shr    ecx,0xc
c000c0b9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0be:	76 25                	jbe    c000c0e5 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0c0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0c5:	c1 e8 0c             	shr    eax,0xc
c000c0c8:	8d 50 10             	lea    edx,[eax+0x10]
c000c0cb:	85 c9                	test   ecx,ecx
c000c0cd:	74 15                	je     c000c0e4 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0cf:	8d 82 00 33 02 c0    	lea    eax,[edx-0x3ffdcd00]
c000c0d5:	8d 94 11 00 33 02 c0 	lea    edx,[ecx+edx*1-0x3ffdcd00]
c000c0dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0df:	40                   	inc    eax
c000c0e0:	39 d0                	cmp    eax,edx
c000c0e2:	75 f8                	jne    c000c0dc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0e4:	c3                   	ret    
c000c0e5:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0eb:	c1 ea 0c             	shr    edx,0xc
c000c0ee:	eb db                	jmp    c000c0cb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0f0 <Phys::setPageState(unsigned long, bool)>:
c000c0f0:	56                   	push   esi
c000c0f1:	ba 01 00 00 00       	mov    edx,0x1
c000c0f6:	53                   	push   ebx
c000c0f7:	8b 35 d8 26 02 c0    	mov    esi,DWORD PTR ds:0xc00226d8
c000c0fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c105:	89 c8                	mov    eax,ecx
c000c107:	83 e1 07             	and    ecx,0x7
c000c10a:	c1 e8 03             	shr    eax,0x3
c000c10d:	d3 e3                	shl    ebx,cl
c000c10f:	01 c6                	add    esi,eax
c000c111:	d3 e2                	shl    edx,cl
c000c113:	f7 d2                	not    edx
c000c115:	20 16                	and    BYTE PTR [esi],dl
c000c117:	03 05 d8 26 02 c0    	add    eax,DWORD PTR ds:0xc00226d8
c000c11d:	08 18                	or     BYTE PTR [eax],bl
c000c11f:	5b                   	pop    ebx
c000c120:	5e                   	pop    esi
c000c121:	c3                   	ret    

c000c122 <Phys::getPageState(unsigned long)>:
c000c122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c126:	8b 15 d8 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226d8
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	83 e1 07             	and    ecx,0x7
c000c131:	c1 e8 03             	shr    eax,0x3
c000c134:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c138:	d3 f8                	sar    eax,cl
c000c13a:	83 e0 01             	and    eax,0x1
c000c13d:	c3                   	ret    

c000c13e <Phys::freePage(unsigned long)>:
c000c13e:	53                   	push   ebx
c000c13f:	83 ec 08             	sub    esp,0x8
c000c142:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c146:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c14c:	76 57                	jbe    c000c1a5 <Phys::freePage(unsigned long)+0x67>
c000c14e:	c1 eb 0c             	shr    ebx,0xc
c000c151:	53                   	push   ebx
c000c152:	e8 cb ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c157:	5a                   	pop    edx
c000c158:	84 c0                	test   al,al
c000c15a:	74 5b                	je     c000c1b7 <Phys::freePage(unsigned long)+0x79>
c000c15c:	a1 ec 32 02 c0       	mov    eax,ds:0xc00232ec
c000c161:	48                   	dec    eax
c000c162:	a3 ec 32 02 c0       	mov    ds:0xc00232ec,eax
c000c167:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c16d:	c1 e0 02             	shl    eax,0x2
c000c170:	99                   	cdq    
c000c171:	f7 3d f0 32 02 c0    	idiv   DWORD PTR ds:0xc00232f0
c000c177:	39 05 e8 32 02 c0    	cmp    DWORD PTR ds:0xc00232e8,eax
c000c17d:	75 13                	jne    c000c192 <Phys::freePage(unsigned long)+0x54>
c000c17f:	83 ec 08             	sub    esp,0x8
c000c182:	6a 00                	push   0x0
c000c184:	53                   	push   ebx
c000c185:	e8 66 ff ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	83 c4 08             	add    esp,0x8
c000c190:	5b                   	pop    ebx
c000c191:	c3                   	ret    
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	a3 e8 32 02 c0       	mov    ds:0xc00232e8,eax
c000c19a:	50                   	push   eax
c000c19b:	e8 f4 09 00 00       	call   c000cb94 <VgaText::updateRAMUsageDisplay(int)>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	eb da                	jmp    c000c17f <Phys::freePage(unsigned long)+0x41>
c000c1a5:	68 00 10 00 00       	push   0x1000
c000c1aa:	53                   	push   ebx
c000c1ab:	e8 f8 fe ff ff       	call   c000c0a8 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1b0:	59                   	pop    ecx
c000c1b1:	5b                   	pop    ebx
c000c1b2:	83 c4 08             	add    esp,0x8
c000c1b5:	5b                   	pop    ebx
c000c1b6:	c3                   	ret    
c000c1b7:	c7 44 24 10 af ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ffaf
c000c1bf:	83 c4 08             	add    esp,0x8
c000c1c2:	5b                   	pop    ebx
c000c1c3:	e9 1c 88 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>

c000c1c8 <Phys::allocatePage()>:
c000c1c8:	56                   	push   esi
c000c1c9:	53                   	push   ebx
c000c1ca:	51                   	push   ecx
c000c1cb:	8b 35 e0 32 02 c0    	mov    esi,DWORD PTR ds:0xc00232e0
c000c1d1:	89 f3                	mov    ebx,esi
c000c1d3:	eb 0a                	jmp    c000c1df <Phys::allocatePage()+0x17>
c000c1d5:	89 1d e0 32 02 c0    	mov    DWORD PTR ds:0xc00232e0,ebx
c000c1db:	39 de                	cmp    esi,ebx
c000c1dd:	74 24                	je     c000c203 <Phys::allocatePage()+0x3b>
c000c1df:	53                   	push   ebx
c000c1e0:	e8 3d ff ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c1e5:	5a                   	pop    edx
c000c1e6:	84 c0                	test   al,al
c000c1e8:	74 4e                	je     c000c238 <Phys::allocatePage()+0x70>
c000c1ea:	43                   	inc    ebx
c000c1eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1f1:	75 e2                	jne    c000c1d5 <Phys::allocatePage()+0xd>
c000c1f3:	31 db                	xor    ebx,ebx
c000c1f5:	c7 05 e0 32 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00232e0,0x0
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 dc                	jne    c000c1df <Phys::allocatePage()+0x17>
c000c203:	83 ec 0c             	sub    esp,0xc
c000c206:	68 00 10 00 00       	push   0x1000
c000c20b:	e8 f5 fd ff ff       	call   c000c005 <Phys::allocateDMA(unsigned long)>
c000c210:	83 c4 10             	add    esp,0x10
c000c213:	85 c0                	test   eax,eax
c000c215:	75 56                	jne    c000c26d <Phys::allocatePage()+0xa5>
c000c217:	83 ec 0c             	sub    esp,0xc
c000c21a:	68 c5 ff 01 c0       	push   0xc001ffc5
c000c21f:	e8 c0 87 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000c224:	83 c4 10             	add    esp,0x10
c000c227:	8b 1d e0 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232e0
c000c22d:	53                   	push   ebx
c000c22e:	e8 ef fe ff ff       	call   c000c122 <Phys::getPageState(unsigned long)>
c000c233:	5a                   	pop    edx
c000c234:	84 c0                	test   al,al
c000c236:	75 b2                	jne    c000c1ea <Phys::allocatePage()+0x22>
c000c238:	6a 01                	push   0x1
c000c23a:	53                   	push   ebx
c000c23b:	e8 b0 fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c240:	a1 ec 32 02 c0       	mov    eax,ds:0xc00232ec
c000c245:	59                   	pop    ecx
c000c246:	40                   	inc    eax
c000c247:	5b                   	pop    ebx
c000c248:	a3 ec 32 02 c0       	mov    ds:0xc00232ec,eax
c000c24d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c250:	8d 04 80             	lea    eax,[eax+eax*4]
c000c253:	c1 e0 02             	shl    eax,0x2
c000c256:	99                   	cdq    
c000c257:	f7 3d f0 32 02 c0    	idiv   DWORD PTR ds:0xc00232f0
c000c25d:	39 05 e8 32 02 c0    	cmp    DWORD PTR ds:0xc00232e8,eax
c000c263:	75 0c                	jne    c000c271 <Phys::allocatePage()+0xa9>
c000c265:	a1 e0 32 02 c0       	mov    eax,ds:0xc00232e0
c000c26a:	c1 e0 0c             	shl    eax,0xc
c000c26d:	5a                   	pop    edx
c000c26e:	5b                   	pop    ebx
c000c26f:	5e                   	pop    esi
c000c270:	c3                   	ret    
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	a3 e8 32 02 c0       	mov    ds:0xc00232e8,eax
c000c279:	50                   	push   eax
c000c27a:	e8 15 09 00 00       	call   c000cb94 <VgaText::updateRAMUsageDisplay(int)>
c000c27f:	83 c4 10             	add    esp,0x10
c000c282:	eb e1                	jmp    c000c265 <Phys::allocatePage()+0x9d>

c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c284:	56                   	push   esi
c000c285:	53                   	push   ebx
c000c286:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c28a:	39 1d e4 32 02 c0    	cmp    DWORD PTR ds:0xc00232e4,ebx
c000c290:	73 06                	jae    c000c298 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c292:	89 1d e4 32 02 c0    	mov    DWORD PTR ds:0xc00232e4,ebx
c000c298:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c29c:	c1 eb 0c             	shr    ebx,0xc
c000c29f:	c1 e8 0c             	shr    eax,0xc
c000c2a2:	39 d8                	cmp    eax,ebx
c000c2a4:	73 13                	jae    c000c2b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a6:	6a 00                	push   0x0
c000c2a8:	8d 70 01             	lea    esi,[eax+0x1]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 3f fe ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2b1:	5a                   	pop    edx
c000c2b2:	89 f0                	mov    eax,esi
c000c2b4:	59                   	pop    ecx
c000c2b5:	39 f3                	cmp    ebx,esi
c000c2b7:	75 ed                	jne    c000c2a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b9:	5b                   	pop    ebx
c000c2ba:	5e                   	pop    esi
c000c2bb:	c3                   	ret    

c000c2bc <Phys::physicalMemorySetup(unsigned int)>:
c000c2bc:	55                   	push   ebp
c000c2bd:	57                   	push   edi
c000c2be:	56                   	push   esi
c000c2bf:	53                   	push   ebx
c000c2c0:	31 db                	xor    ebx,ebx
c000c2c2:	83 ec 40             	sub    esp,0x40
c000c2c5:	6a 30                	push   0x30
c000c2c7:	6a 00                	push   0x0
c000c2c9:	68 00 33 02 c0       	push   0xc0023300
c000c2ce:	e8 35 43 ff ff       	call   c0000608 <memset>
c000c2d3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c2d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2dc:	05 00 10 00 00       	add    eax,0x1000
c000c2e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c2e5:	83 c4 10             	add    esp,0x10
c000c2e8:	83 ec 08             	sub    esp,0x8
c000c2eb:	6a 01                	push   0x1
c000c2ed:	53                   	push   ebx
c000c2ee:	43                   	inc    ebx
c000c2ef:	e8 fc fd ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c2f4:	83 c4 10             	add    esp,0x10
c000c2f7:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2fd:	75 e9                	jne    c000c2e8 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2ff:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c306:	66 85 c0             	test   ax,ax
c000c309:	0f 84 8e 01 00 00    	je     c000c49d <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000c30f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c313:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c31b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c31f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c324:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c328:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c330:	eb 15                	jmp    c000c347 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000c332:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c336:	83 c3 18             	add    ebx,0x18
c000c339:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c33d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000c341:	0f 84 66 01 00 00    	je     c000c4ad <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c347:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c34a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c34d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c350:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c354:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c358:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c35a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c35d:	01 f0                	add    eax,esi
c000c35f:	55                   	push   ebp
c000c360:	11 fa                	adc    edx,edi
c000c362:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c366:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c36a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c36e:	56                   	push   esi
c000c36f:	68 00 00 02 c0       	push   0xc0020000
c000c374:	e8 d6 29 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000c379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c37d:	83 c4 10             	add    esp,0x10
c000c380:	09 f8                	or     eax,edi
c000c382:	0f 85 25 01 00 00    	jne    c000c4ad <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000c388:	4d                   	dec    ebp
c000c389:	75 a7                	jne    c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c38b:	ba 00 00 08 00       	mov    edx,0x80000
c000c390:	89 c1                	mov    ecx,eax
c000c392:	39 f2                	cmp    edx,esi
c000c394:	19 f9                	sbb    ecx,edi
c000c396:	0f 82 a7 00 00 00    	jb     c000c443 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c39c:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c3a0:	89 c1                	mov    ecx,eax
c000c3a2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c3a6:	0f 83 97 00 00 00    	jae    c000c443 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000c3ac:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c3b1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c3b5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c3b9:	39 fa                	cmp    edx,edi
c000c3bb:	19 e8                	sbb    eax,ebp
c000c3bd:	0f 82 14 01 00 00    	jb     c000c4d7 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000c3c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c3c7:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c3cb:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000c3d1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c3d6:	83 d5 ff             	adc    ebp,0xffffffff
c000c3d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c3dd:	31 c0                	xor    eax,eax
c000c3df:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c3e3:	39 fa                	cmp    edx,edi
c000c3e5:	89 c1                	mov    ecx,eax
c000c3e7:	19 e9                	sbb    ecx,ebp
c000c3e9:	0f 83 43 ff ff ff    	jae    c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c3ef:	be 00 00 08 00       	mov    esi,0x80000
c000c3f4:	50                   	push   eax
c000c3f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c3f9:	57                   	push   edi
c000c3fa:	56                   	push   esi
c000c3fb:	68 24 00 02 c0       	push   0xc0020024
c000c400:	e8 4a 29 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000c405:	5a                   	pop    edx
c000c406:	59                   	pop    ecx
c000c407:	57                   	push   edi
c000c408:	56                   	push   esi
c000c409:	e8 76 fe ff ff       	call   c000c284 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c40e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c412:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c416:	83 c4 0c             	add    esp,0xc
c000c419:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c41d:	03 05 f0 32 02 c0    	add    eax,DWORD PTR ds:0xc00232f0
c000c423:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c42a:	a3 f0 32 02 c0       	mov    ds:0xc00232f0,eax
c000c42f:	52                   	push   edx
c000c430:	50                   	push   eax
c000c431:	68 e1 ff 01 c0       	push   0xc001ffe1
c000c436:	e8 14 29 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000c43b:	83 c4 10             	add    esp,0x10
c000c43e:	e9 ef fe ff ff       	jmp    c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c443:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c447:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c44b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c44f:	39 ea                	cmp    edx,ebp
c000c451:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000c455:	0f 82 d7 fe ff ff    	jb     c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c45b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000c460:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000c464:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000c468:	0f 83 c4 fe ff ff    	jae    c000c332 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000c46e:	39 ee                	cmp    esi,ebp
c000c470:	89 f8                	mov    eax,edi
c000c472:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000c476:	0f 83 78 ff ff ff    	jae    c000c3f4 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c47c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c480:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c484:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c488:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c48c:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000c490:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c494:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c498:	e9 57 ff ff ff       	jmp    c000c3f4 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c49d:	83 ec 0c             	sub    esp,0xc
c000c4a0:	68 d3 ff 01 c0       	push   0xc001ffd3
c000c4a5:	e8 3a 85 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	bb 40 01 00 00       	mov    ebx,0x140
c000c4b2:	83 ec 08             	sub    esp,0x8
c000c4b5:	6a 00                	push   0x0
c000c4b7:	53                   	push   ebx
c000c4b8:	43                   	inc    ebx
c000c4b9:	e8 32 fc ff ff       	call   c000c0f0 <Phys::setPageState(unsigned long, bool)>
c000c4be:	ff 05 f0 32 02 c0    	inc    DWORD PTR ds:0xc00232f0
c000c4c4:	83 c4 10             	add    esp,0x10
c000c4c7:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c4cd:	75 e3                	jne    c000c4b2 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000c4cf:	83 c4 3c             	add    esp,0x3c
c000c4d2:	5b                   	pop    ebx
c000c4d3:	5e                   	pop    esi
c000c4d4:	5f                   	pop    edi
c000c4d5:	5d                   	pop    ebp
c000c4d6:	c3                   	ret    
c000c4d7:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000c4df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c4e7:	e9 d7 fe ff ff       	jmp    c000c3c3 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000c4ec <Pipe::isAtty()>:
c000c4ec:	31 c0                	xor    eax,eax
c000c4ee:	c3                   	ret    
c000c4ef:	90                   	nop

c000c4f0 <Pipe::~Pipe()>:
c000c4f0:	83 ec 0c             	sub    esp,0xc
c000c4f3:	ba 90 00 02 c0       	mov    edx,0xc0020090
c000c4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4fc:	89 10                	mov    DWORD PTR [eax],edx
c000c4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c502:	83 ec 0c             	sub    esp,0xc
c000c505:	50                   	push   eax
c000c506:	e8 5b 16 00 00       	call   c000db66 <UnixFile::~UnixFile()>
c000c50b:	83 c4 10             	add    esp,0x10
c000c50e:	90                   	nop
c000c50f:	83 c4 0c             	add    esp,0xc
c000c512:	c3                   	ret    
c000c513:	90                   	nop

c000c514 <Pipe::~Pipe()>:
c000c514:	83 ec 0c             	sub    esp,0xc
c000c517:	83 ec 0c             	sub    esp,0xc
c000c51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51e:	e8 cd ff ff ff       	call   c000c4f0 <Pipe::~Pipe()>
c000c523:	83 c4 10             	add    esp,0x10
c000c526:	83 ec 08             	sub    esp,0x8
c000c529:	6a 20                	push   0x20
c000c52b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52f:	e8 3b 27 00 00       	call   c000ec6f <operator delete(void*, unsigned long)>
c000c534:	83 c4 10             	add    esp,0x10
c000c537:	83 c4 0c             	add    esp,0xc
c000c53a:	c3                   	ret    
c000c53b:	90                   	nop

c000c53c <Pipe::read(unsigned long long, void*, int*)>:
c000c53c:	55                   	push   ebp
c000c53d:	57                   	push   edi
c000c53e:	56                   	push   esi
c000c53f:	53                   	push   ebx
c000c540:	83 ec 1c             	sub    esp,0x1c
c000c543:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c547:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c54b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c54f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c552:	89 c8                	mov    eax,ecx
c000c554:	99                   	cdq    
c000c555:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c559:	74 19                	je     c000c574 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c55b:	39 f9                	cmp    ecx,edi
c000c55d:	89 d1                	mov    ecx,edx
c000c55f:	19 f1                	sbb    ecx,esi
c000c561:	73 11                	jae    c000c574 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c563:	e8 c8 b3 00 00       	call   c0017930 <lockScheduler()>
c000c568:	e8 f7 b6 00 00       	call   c0017c64 <schedule()>
c000c56d:	e8 c0 b3 00 00       	call   c0017932 <unlockScheduler()>
c000c572:	eb db                	jmp    c000c54f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c574:	39 f8                	cmp    eax,edi
c000c576:	89 d1                	mov    ecx,edx
c000c578:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c57c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c580:	19 f1                	sbb    ecx,esi
c000c582:	73 08                	jae    c000c58c <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c58f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c592:	29 c6                	sub    esi,eax
c000c594:	89 f1                	mov    ecx,esi
c000c596:	c1 f9 1f             	sar    ecx,0x1f
c000c599:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c59d:	89 ca                	mov    edx,ecx
c000c59f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c5a3:	19 d1                	sbb    ecx,edx
c000c5a5:	73 04                	jae    c000c5ab <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c5a7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c5ab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c5af:	89 fd                	mov    ebp,edi
c000c5b1:	29 f5                	sub    ebp,esi
c000c5b3:	85 f6                	test   esi,esi
c000c5b5:	74 12                	je     c000c5c9 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c5b7:	52                   	push   edx
c000c5b8:	56                   	push   esi
c000c5b9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c5bc:	50                   	push   eax
c000c5bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c5c1:	e8 0c 40 ff ff       	call   c00005d2 <memcpy>
c000c5c6:	83 c4 10             	add    esp,0x10
c000c5c9:	85 ed                	test   ebp,ebp
c000c5cb:	74 12                	je     c000c5df <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c5cd:	50                   	push   eax
c000c5ce:	55                   	push   ebp
c000c5cf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c5d2:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c5d6:	56                   	push   esi
c000c5d7:	e8 f6 3f ff ff       	call   c00005d2 <memcpy>
c000c5dc:	83 c4 10             	add    esp,0x10
c000c5df:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c5e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c5e5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c5e8:	99                   	cdq    
c000c5e9:	89 f7                	mov    edi,esi
c000c5eb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c5ef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c5f3:	c1 ff 1f             	sar    edi,0x1f
c000c5f6:	57                   	push   edi
c000c5f7:	56                   	push   esi
c000c5f8:	52                   	push   edx
c000c5f9:	50                   	push   eax
c000c5fa:	e8 dd 1d 01 00       	call   c001e3dc <__umoddi3>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c605:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c60a:	75 10                	jne    c000c61c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c60c:	83 ec 0c             	sub    esp,0xc
c000c60f:	68 4d 00 02 c0       	push   0xc002004d
c000c614:	e8 cb 83 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000c619:	83 c4 10             	add    esp,0x10
c000c61c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c620:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c624:	89 10                	mov    DWORD PTR [eax],edx
c000c626:	83 c4 1c             	add    esp,0x1c
c000c629:	31 c0                	xor    eax,eax
c000c62b:	5b                   	pop    ebx
c000c62c:	5e                   	pop    esi
c000c62d:	5f                   	pop    edi
c000c62e:	5d                   	pop    ebp
c000c62f:	c3                   	ret    

c000c630 <Pipe::write(unsigned long long, void*, int*)>:
c000c630:	55                   	push   ebp
c000c631:	57                   	push   edi
c000c632:	56                   	push   esi
c000c633:	53                   	push   ebx
c000c634:	83 ec 1c             	sub    esp,0x1c
c000c637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c63b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c63f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c643:	89 04 24             	mov    DWORD PTR [esp],eax
c000c646:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c649:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c64c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c650:	89 de                	mov    esi,ebx
c000c652:	89 df                	mov    edi,ebx
c000c654:	c1 ff 1f             	sar    edi,0x1f
c000c657:	01 c6                	add    esi,eax
c000c659:	89 c8                	mov    eax,ecx
c000c65b:	11 d7                	adc    edi,edx
c000c65d:	99                   	cdq    
c000c65e:	39 f1                	cmp    ecx,esi
c000c660:	89 d0                	mov    eax,edx
c000c662:	19 f8                	sbb    eax,edi
c000c664:	b8 01 00 00 00       	mov    eax,0x1
c000c669:	0f 82 80 00 00 00    	jb     c000c6ef <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c66f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c672:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c675:	01 d8                	add    eax,ebx
c000c677:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c67b:	99                   	cdq    
c000c67c:	f7 f9                	idiv   ecx
c000c67e:	29 d1                	sub    ecx,edx
c000c680:	89 d7                	mov    edi,edx
c000c682:	89 c8                	mov    eax,ecx
c000c684:	99                   	cdq    
c000c685:	39 ce                	cmp    esi,ecx
c000c687:	19 d3                	sbb    ebx,edx
c000c689:	bb 00 00 00 00       	mov    ebx,0x0
c000c68e:	72 04                	jb     c000c694 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c690:	89 f3                	mov    ebx,esi
c000c692:	29 cb                	sub    ebx,ecx
c000c694:	89 f1                	mov    ecx,esi
c000c696:	29 d9                	sub    ecx,ebx
c000c698:	74 1a                	je     c000c6b4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c69a:	52                   	push   edx
c000c69b:	51                   	push   ecx
c000c69c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c6a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c6a4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c6a7:	57                   	push   edi
c000c6a8:	e8 25 3f ff ff       	call   c00005d2 <memcpy>
c000c6ad:	83 c4 10             	add    esp,0x10
c000c6b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c6b4:	85 db                	test   ebx,ebx
c000c6b6:	74 12                	je     c000c6ca <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c6b8:	50                   	push   eax
c000c6b9:	53                   	push   ebx
c000c6ba:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c6be:	51                   	push   ecx
c000c6bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c6c2:	e8 0b 3f ff ff       	call   c00005d2 <memcpy>
c000c6c7:	83 c4 10             	add    esp,0x10
c000c6ca:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c6cd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c6d2:	75 10                	jne    c000c6e4 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c6d4:	83 ec 0c             	sub    esp,0xc
c000c6d7:	68 69 00 02 c0       	push   0xc0020069
c000c6dc:	e8 03 83 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000c6e1:	83 c4 10             	add    esp,0x10
c000c6e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6e8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c6eb:	89 38                	mov    DWORD PTR [eax],edi
c000c6ed:	31 c0                	xor    eax,eax
c000c6ef:	83 c4 1c             	add    esp,0x1c
c000c6f2:	5b                   	pop    ebx
c000c6f3:	5e                   	pop    esi
c000c6f4:	5f                   	pop    edi
c000c6f5:	5d                   	pop    ebp
c000c6f6:	c3                   	ret    
c000c6f7:	90                   	nop

c000c6f8 <Pipe::Pipe(int)>:
c000c6f8:	83 ec 0c             	sub    esp,0xc
c000c6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ff:	83 ec 08             	sub    esp,0x8
c000c702:	6a 00                	push   0x0
c000c704:	50                   	push   eax
c000c705:	e8 ba 12 00 00       	call   c000d9c4 <UnixFile::UnixFile(int)>
c000c70a:	83 c4 10             	add    esp,0x10
c000c70d:	ba 90 00 02 c0       	mov    edx,0xc0020090
c000c712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c716:	89 10                	mov    DWORD PTR [eax],edx
c000c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c71c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c720:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c727:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c732:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 d8 f4 ff ff       	call   c000bc1e <malloc>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 c2                	mov    edx,eax
c000c74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c74f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c756:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c75a:	90                   	nop
c000c75b:	83 c4 0c             	add    esp,0xc
c000c75e:	c3                   	ret    
c000c75f:	90                   	nop

c000c760 <VgaText::isAtty()>:
c000c760:	b0 01                	mov    al,0x1
c000c762:	c3                   	ret    
c000c763:	90                   	nop

c000c764 <VgaText::~VgaText()>:
c000c764:	83 ec 0c             	sub    esp,0xc
c000c767:	ba 4c 01 02 c0       	mov    edx,0xc002014c
c000c76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c770:	89 10                	mov    DWORD PTR [eax],edx
c000c772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c776:	83 ec 0c             	sub    esp,0xc
c000c779:	50                   	push   eax
c000c77a:	e8 e7 13 00 00       	call   c000db66 <UnixFile::~UnixFile()>
c000c77f:	83 c4 10             	add    esp,0x10
c000c782:	90                   	nop
c000c783:	83 c4 0c             	add    esp,0xc
c000c786:	c3                   	ret    
c000c787:	90                   	nop

c000c788 <VgaText::~VgaText()>:
c000c788:	83 ec 0c             	sub    esp,0xc
c000c78b:	83 ec 0c             	sub    esp,0xc
c000c78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c792:	e8 cd ff ff ff       	call   c000c764 <VgaText::~VgaText()>
c000c797:	83 c4 10             	add    esp,0x10
c000c79a:	83 ec 08             	sub    esp,0x8
c000c79d:	68 60 12 00 00       	push   0x1260
c000c7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7a6:	e8 c4 24 00 00       	call   c000ec6f <operator delete(void*, unsigned long)>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	83 c4 0c             	add    esp,0xc
c000c7b1:	c3                   	ret    

c000c7b2 <VgaText::read(unsigned long long, void*, int*)>:
c000c7b2:	83 ec 10             	sub    esp,0x10
c000c7b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7c1:	e8 ca 50 00 00       	call   c0011890 <readKeyboard(VgaText*, char*, unsigned long)>
c000c7c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c7ca:	89 02                	mov    DWORD PTR [edx],eax
c000c7cc:	31 c0                	xor    eax,eax
c000c7ce:	83 c4 1c             	add    esp,0x1c
c000c7d1:	c3                   	ret    

c000c7d2 <setTerminalScrollLock(bool)>:
c000c7d2:	c3                   	ret    

c000c7d3 <addToTerminalCycle(VgaText*)>:
c000c7d3:	8b 15 60 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023360
c000c7d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7dd:	85 d2                	test   edx,edx
c000c7df:	75 0c                	jne    c000c7ed <addToTerminalCycle(VgaText*)+0x1a>
c000c7e1:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c7e7:	a3 60 33 02 c0       	mov    ds:0xc0023360,eax
c000c7ec:	c3                   	ret    
c000c7ed:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c7f3:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c7f9:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c7ff:	c3                   	ret    

c000c800 <installVgaTextImplementation()>:
c000c800:	83 ec 10             	sub    esp,0x10
c000c803:	6a 20                	push   0x20
c000c805:	6a 00                	push   0x0
c000c807:	68 40 33 02 c0       	push   0xc0023340
c000c80c:	e8 f7 3d ff ff       	call   c0000608 <memset>
c000c811:	83 c4 1c             	add    esp,0x1c
c000c814:	c3                   	ret    

c000c815 <scrollTerminalScrollLock(int)>:
c000c815:	c3                   	ret    

c000c816 <VgaText::load()>:
c000c816:	53                   	push   ebx
c000c817:	31 c0                	xor    eax,eax
c000c819:	83 ec 58             	sub    esp,0x58
c000c81c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c820:	89 e2                	mov    edx,esp
c000c822:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c826:	40                   	inc    eax
c000c827:	83 f8 50             	cmp    eax,0x50
c000c82a:	75 f6                	jne    c000c822 <VgaText::load()+0xc>
c000c82c:	31 c0                	xor    eax,eax
c000c82e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c835:	84 c9                	test   cl,cl
c000c837:	74 06                	je     c000c83f <VgaText::load()+0x29>
c000c839:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c83c:	40                   	inc    eax
c000c83d:	eb ef                	jmp    c000c82e <VgaText::load()+0x18>
c000c83f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c845:	85 c0                	test   eax,eax
c000c847:	74 09                	je     c000c852 <VgaText::load()+0x3c>
c000c849:	51                   	push   ecx
c000c84a:	51                   	push   ecx
c000c84b:	52                   	push   edx
c000c84c:	53                   	push   ebx
c000c84d:	ff d0                	call   eax
c000c84f:	83 c4 10             	add    esp,0x10
c000c852:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c858:	85 c0                	test   eax,eax
c000c85a:	74 09                	je     c000c865 <VgaText::load()+0x4f>
c000c85c:	83 ec 0c             	sub    esp,0xc
c000c85f:	53                   	push   ebx
c000c860:	ff d0                	call   eax
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	83 c4 58             	add    esp,0x58
c000c868:	5b                   	pop    ebx
c000c869:	c3                   	ret    

c000c86a <VgaText::updateCursor()>:
c000c86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c86e:	39 05 64 33 02 c0    	cmp    DWORD PTR ds:0xc0023364,eax
c000c874:	75 0c                	jne    c000c882 <VgaText::updateCursor()+0x18>
c000c876:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c87c:	85 c0                	test   eax,eax
c000c87e:	74 02                	je     c000c882 <VgaText::updateCursor()+0x18>
c000c880:	ff e0                	jmp    eax
c000c882:	c3                   	ret    
c000c883:	90                   	nop

c000c884 <VgaText::showCursor(bool)>:
c000c884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c888:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c88c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c892:	c3                   	ret    
c000c893:	90                   	nop

c000c894 <VgaText::disableBlink(bool)>:
c000c894:	56                   	push   esi
c000c895:	53                   	push   ebx
c000c896:	51                   	push   ecx
c000c897:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c89b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c89f:	39 1d 64 33 02 c0    	cmp    DWORD PTR ds:0xc0023364,ebx
c000c8a5:	75 18                	jne    c000c8bf <VgaText::disableBlink(bool)+0x2b>
c000c8a7:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c8ad:	85 c0                	test   eax,eax
c000c8af:	74 0e                	je     c000c8bf <VgaText::disableBlink(bool)+0x2b>
c000c8b1:	89 f1                	mov    ecx,esi
c000c8b3:	52                   	push   edx
c000c8b4:	52                   	push   edx
c000c8b5:	0f b6 d1             	movzx  edx,cl
c000c8b8:	52                   	push   edx
c000c8b9:	53                   	push   ebx
c000c8ba:	ff d0                	call   eax
c000c8bc:	83 c4 10             	add    esp,0x10
c000c8bf:	89 f0                	mov    eax,esi
c000c8c1:	83 f0 01             	xor    eax,0x1
c000c8c4:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c8ca:	58                   	pop    eax
c000c8cb:	5b                   	pop    ebx
c000c8cc:	5e                   	pop    esi
c000c8cd:	c3                   	ret    

c000c8ce <VgaText::doANSI_SGR(int)>:
c000c8ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8d6:	85 d2                	test   edx,edx
c000c8d8:	75 14                	jne    c000c8ee <VgaText::doANSI_SGR(int)+0x20>
c000c8da:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c8e0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8e6:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c8ec:	eb 65                	jmp    c000c953 <VgaText::doANSI_SGR(int)+0x85>
c000c8ee:	83 fa 07             	cmp    edx,0x7
c000c8f1:	75 14                	jne    c000c907 <VgaText::doANSI_SGR(int)+0x39>
c000c8f3:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c8f9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c8ff:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c905:	eb 4c                	jmp    c000c953 <VgaText::doANSI_SGR(int)+0x85>
c000c907:	83 fa 1b             	cmp    edx,0x1b
c000c90a:	74 ce                	je     c000c8da <VgaText::doANSI_SGR(int)+0xc>
c000c90c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c90f:	83 f9 07             	cmp    ecx,0x7
c000c912:	77 09                	ja     c000c91d <VgaText::doANSI_SGR(int)+0x4f>
c000c914:	8b 14 8d 00 27 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd900]
c000c91b:	eb 20                	jmp    c000c93d <VgaText::doANSI_SGR(int)+0x6f>
c000c91d:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c920:	83 f9 07             	cmp    ecx,0x7
c000c923:	77 09                	ja     c000c92e <VgaText::doANSI_SGR(int)+0x60>
c000c925:	8b 14 8d 00 27 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd900]
c000c92c:	eb 25                	jmp    c000c953 <VgaText::doANSI_SGR(int)+0x85>
c000c92e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c931:	83 f9 07             	cmp    ecx,0x7
c000c934:	77 0e                	ja     c000c944 <VgaText::doANSI_SGR(int)+0x76>
c000c936:	8b 14 95 b8 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdda48]
c000c93d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c943:	c3                   	ret    
c000c944:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c947:	83 f9 07             	cmp    ecx,0x7
c000c94a:	77 0d                	ja     c000c959 <VgaText::doANSI_SGR(int)+0x8b>
c000c94c:	8b 14 95 90 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdda70]
c000c953:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c959:	c3                   	ret    

c000c95a <VgaText::setDefaultBgColour(VgaColour)>:
c000c95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c95e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c962:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c968:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c96e:	c3                   	ret    
c000c96f:	90                   	nop

c000c970 <VgaText::setDefaultFgColour(VgaColour)>:
c000c970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c974:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c978:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c97e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c984:	c3                   	ret    
c000c985:	90                   	nop

c000c986 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c986:	53                   	push   ebx
c000c987:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c98b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c98f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c993:	51                   	push   ecx
c000c994:	e8 c1 ff ff ff       	call   c000c95a <VgaText::setDefaultBgColour(VgaColour)>
c000c999:	58                   	pop    eax
c000c99a:	5a                   	pop    edx
c000c99b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c99f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c9a3:	5b                   	pop    ebx
c000c9a4:	eb ca                	jmp    c000c970 <VgaText::setDefaultFgColour(VgaColour)>

c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>:
c000c9a6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c9aa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c9af:	83 e0 0f             	and    eax,0xf
c000c9b2:	c1 e2 04             	shl    edx,0x4
c000c9b5:	09 d0                	or     eax,edx
c000c9b7:	c3                   	ret    

c000c9b8 <VgaText::scrollScreen()>:
c000c9b8:	57                   	push   edi
c000c9b9:	56                   	push   esi
c000c9ba:	be 01 00 00 00       	mov    esi,0x1
c000c9bf:	53                   	push   ebx
c000c9c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9c4:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c9ca:	31 ff                	xor    edi,edi
c000c9cc:	01 d9                	add    ecx,ebx
c000c9ce:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c9d1:	83 fe 17             	cmp    esi,0x17
c000c9d4:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c9da:	75 28                	jne    c000ca04 <VgaText::scrollScreen()+0x4c>
c000c9dc:	f7 c7 01 00 00 00    	test   edi,0x1
c000c9e2:	74 1c                	je     c000ca00 <VgaText::scrollScreen()+0x48>
c000c9e4:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c9eb:	50                   	push   eax
c000c9ec:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c9f3:	50                   	push   eax
c000c9f4:	e8 ad ff ff ff       	call   c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000c9f9:	5a                   	pop    edx
c000c9fa:	5a                   	pop    edx
c000c9fb:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c9fe:	eb 04                	jmp    c000ca04 <VgaText::scrollScreen()+0x4c>
c000ca00:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ca04:	47                   	inc    edi
c000ca05:	41                   	inc    ecx
c000ca06:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ca0c:	75 c0                	jne    c000c9ce <VgaText::scrollScreen()+0x16>
c000ca0e:	46                   	inc    esi
c000ca0f:	83 fe 18             	cmp    esi,0x18
c000ca12:	75 b0                	jne    c000c9c4 <VgaText::scrollScreen()+0xc>
c000ca14:	39 1d 64 33 02 c0    	cmp    DWORD PTR ds:0xc0023364,ebx
c000ca1a:	75 24                	jne    c000ca40 <VgaText::scrollScreen()+0x88>
c000ca1c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ca23:	74 08                	je     c000ca2d <VgaText::scrollScreen()+0x75>
c000ca25:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ca2b:	eb 13                	jmp    c000ca40 <VgaText::scrollScreen()+0x88>
c000ca2d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ca33:	85 c0                	test   eax,eax
c000ca35:	74 09                	je     c000ca40 <VgaText::scrollScreen()+0x88>
c000ca37:	83 ec 0c             	sub    esp,0xc
c000ca3a:	53                   	push   ebx
c000ca3b:	ff d0                	call   eax
c000ca3d:	83 c4 10             	add    esp,0x10
c000ca40:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ca44:	5b                   	pop    ebx
c000ca45:	5e                   	pop    esi
c000ca46:	5f                   	pop    edi
c000ca47:	e9 1e fe ff ff       	jmp    c000c86a <VgaText::updateCursor()>

c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>:
c000ca4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ca51:	c1 e0 08             	shl    eax,0x8
c000ca54:	89 c2                	mov    edx,eax
c000ca56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ca5b:	09 d0                	or     eax,edx
c000ca5d:	c3                   	ret    

c000ca5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ca5e:	53                   	push   ebx
c000ca5f:	83 ec 08             	sub    esp,0x8
c000ca62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca66:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca6b:	50                   	push   eax
c000ca6c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ca71:	50                   	push   eax
c000ca72:	e8 2f ff ff ff       	call   c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000ca77:	5a                   	pop    edx
c000ca78:	0f b6 c0             	movzx  eax,al
c000ca7b:	5b                   	pop    ebx
c000ca7c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca81:	50                   	push   eax
c000ca82:	53                   	push   ebx
c000ca83:	e8 c4 ff ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000ca88:	5a                   	pop    edx
c000ca89:	5a                   	pop    edx
c000ca8a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca90:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca94:	0f b7 d2             	movzx  edx,dx
c000ca97:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca9c:	39 0d 64 33 02 c0    	cmp    DWORD PTR ds:0xc0023364,ecx
c000caa2:	75 14                	jne    c000cab8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000caa4:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000caaa:	85 c0                	test   eax,eax
c000caac:	74 0a                	je     c000cab8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000caae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cab2:	83 c4 08             	add    esp,0x8
c000cab5:	5b                   	pop    ebx
c000cab6:	ff e0                	jmp    eax
c000cab8:	83 c4 08             	add    esp,0x8
c000cabb:	5b                   	pop    ebx
c000cabc:	c3                   	ret    
c000cabd:	90                   	nop

c000cabe <VgaText::getCursorX()>:
c000cabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cac2:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cac8:	c3                   	ret    
c000cac9:	90                   	nop

c000caca <VgaText::getCursorY()>:
c000caca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cace:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cad4:	c3                   	ret    
c000cad5:	90                   	nop

c000cad6 <VgaText::setCursor(int, int)>:
c000cad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cada:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cade:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cae4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cae8:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000caee:	e9 77 fd ff ff       	jmp    c000c86a <VgaText::updateCursor()>
c000caf3:	90                   	nop

c000caf4 <VgaText::setCursorX(int)>:
c000caf4:	83 ec 10             	sub    esp,0x10
c000caf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cafb:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cb01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb05:	50                   	push   eax
c000cb06:	e8 cb ff ff ff       	call   c000cad6 <VgaText::setCursor(int, int)>
c000cb0b:	83 c4 1c             	add    esp,0x1c
c000cb0e:	c3                   	ret    
c000cb0f:	90                   	nop

c000cb10 <VgaText::setCursorY(int)>:
c000cb10:	83 ec 10             	sub    esp,0x10
c000cb13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb1b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cb21:	50                   	push   eax
c000cb22:	e8 af ff ff ff       	call   c000cad6 <VgaText::setCursor(int, int)>
c000cb27:	83 c4 1c             	add    esp,0x1c
c000cb2a:	c3                   	ret    
c000cb2b:	90                   	nop

c000cb2c <VgaText::incrementCursor(bool)>:
c000cb2c:	56                   	push   esi
c000cb2d:	53                   	push   ebx
c000cb2e:	51                   	push   ecx
c000cb2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb37:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cb3d:	40                   	inc    eax
c000cb3e:	83 f8 50             	cmp    eax,0x50
c000cb41:	74 08                	je     c000cb4b <VgaText::incrementCursor(bool)+0x1f>
c000cb43:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cb49:	eb 33                	jmp    c000cb7e <VgaText::incrementCursor(bool)+0x52>
c000cb4b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cb51:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cb5b:	8d 50 01             	lea    edx,[eax+0x1]
c000cb5e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cb64:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cb6a:	75 12                	jne    c000cb7e <VgaText::incrementCursor(bool)+0x52>
c000cb6c:	83 ec 0c             	sub    esp,0xc
c000cb6f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cb75:	53                   	push   ebx
c000cb76:	e8 3d fe ff ff       	call   c000c9b8 <VgaText::scrollScreen()>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	89 f0                	mov    eax,esi
c000cb80:	84 c0                	test   al,al
c000cb82:	74 0c                	je     c000cb90 <VgaText::incrementCursor(bool)+0x64>
c000cb84:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb88:	5a                   	pop    edx
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	e9 da fc ff ff       	jmp    c000c86a <VgaText::updateCursor()>
c000cb90:	58                   	pop    eax
c000cb91:	5b                   	pop    ebx
c000cb92:	5e                   	pop    esi
c000cb93:	c3                   	ret    

c000cb94 <VgaText::updateRAMUsageDisplay(int)>:
c000cb94:	53                   	push   ebx
c000cb95:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb9a:	6a 0f                	push   0xf
c000cb9c:	6a 00                	push   0x0
c000cb9e:	e8 03 fe ff ff       	call   c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000cba3:	5a                   	pop    edx
c000cba4:	59                   	pop    ecx
c000cba5:	0f b6 c8             	movzx  ecx,al
c000cba8:	51                   	push   ecx
c000cba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbad:	99                   	cdq    
c000cbae:	f7 fb                	idiv   ebx
c000cbb0:	89 d3                	mov    ebx,edx
c000cbb2:	83 c0 30             	add    eax,0x30
c000cbb5:	83 c3 30             	add    ebx,0x30
c000cbb8:	0f be c0             	movsx  eax,al
c000cbbb:	0f b6 db             	movzx  ebx,bl
c000cbbe:	50                   	push   eax
c000cbbf:	e8 88 fe ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cbc4:	5a                   	pop    edx
c000cbc5:	5a                   	pop    edx
c000cbc6:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cbcc:	51                   	push   ecx
c000cbcd:	53                   	push   ebx
c000cbce:	e8 79 fe ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cbd3:	5b                   	pop    ebx
c000cbd4:	5a                   	pop    edx
c000cbd5:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cbdb:	51                   	push   ecx
c000cbdc:	6a 25                	push   0x25
c000cbde:	e8 69 fe ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cbe3:	59                   	pop    ecx
c000cbe4:	5b                   	pop    ebx
c000cbe5:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cbeb:	5b                   	pop    ebx
c000cbec:	c3                   	ret    
c000cbed:	90                   	nop

c000cbee <VgaText::updateDiskUsage()>:
c000cbee:	55                   	push   ebp
c000cbef:	bd 10 27 00 00       	mov    ebp,0x2710
c000cbf4:	57                   	push   edi
c000cbf5:	56                   	push   esi
c000cbf6:	53                   	push   ebx
c000cbf7:	6a 0f                	push   0xf
c000cbf9:	6a 00                	push   0x0
c000cbfb:	e8 a6 fd ff ff       	call   c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000cc00:	5a                   	pop    edx
c000cc01:	0f b6 d8             	movzx  ebx,al
c000cc04:	59                   	pop    ecx
c000cc05:	a1 44 50 02 c0       	mov    eax,ds:0xc0025044
c000cc0a:	53                   	push   ebx
c000cc0b:	b9 0a 00 00 00       	mov    ecx,0xa
c000cc10:	99                   	cdq    
c000cc11:	f7 fd                	idiv   ebp
c000cc13:	99                   	cdq    
c000cc14:	f7 f9                	idiv   ecx
c000cc16:	8d 42 30             	lea    eax,[edx+0x30]
c000cc19:	0f b6 c0             	movzx  eax,al
c000cc1c:	50                   	push   eax
c000cc1d:	e8 2a fe ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cc22:	5e                   	pop    esi
c000cc23:	5f                   	pop    edi
c000cc24:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cc2a:	bf e8 03 00 00       	mov    edi,0x3e8
c000cc2f:	53                   	push   ebx
c000cc30:	a1 44 50 02 c0       	mov    eax,ds:0xc0025044
c000cc35:	99                   	cdq    
c000cc36:	f7 ff                	idiv   edi
c000cc38:	99                   	cdq    
c000cc39:	f7 f9                	idiv   ecx
c000cc3b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc3e:	0f b6 c0             	movzx  eax,al
c000cc41:	50                   	push   eax
c000cc42:	e8 05 fe ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cc47:	5a                   	pop    edx
c000cc48:	5e                   	pop    esi
c000cc49:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cc4f:	be 64 00 00 00       	mov    esi,0x64
c000cc54:	53                   	push   ebx
c000cc55:	a1 44 50 02 c0       	mov    eax,ds:0xc0025044
c000cc5a:	99                   	cdq    
c000cc5b:	f7 fe                	idiv   esi
c000cc5d:	99                   	cdq    
c000cc5e:	f7 f9                	idiv   ecx
c000cc60:	8d 42 30             	lea    eax,[edx+0x30]
c000cc63:	0f b6 c0             	movzx  eax,al
c000cc66:	50                   	push   eax
c000cc67:	e8 e0 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cc6c:	5a                   	pop    edx
c000cc6d:	5a                   	pop    edx
c000cc6e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cc74:	53                   	push   ebx
c000cc75:	a1 44 50 02 c0       	mov    eax,ds:0xc0025044
c000cc7a:	99                   	cdq    
c000cc7b:	f7 f9                	idiv   ecx
c000cc7d:	99                   	cdq    
c000cc7e:	f7 f9                	idiv   ecx
c000cc80:	8d 42 30             	lea    eax,[edx+0x30]
c000cc83:	0f b6 c0             	movzx  eax,al
c000cc86:	50                   	push   eax
c000cc87:	e8 c0 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cc8c:	5a                   	pop    edx
c000cc8d:	5a                   	pop    edx
c000cc8e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc94:	53                   	push   ebx
c000cc95:	a1 44 50 02 c0       	mov    eax,ds:0xc0025044
c000cc9a:	99                   	cdq    
c000cc9b:	f7 f9                	idiv   ecx
c000cc9d:	8d 42 30             	lea    eax,[edx+0x30]
c000cca0:	0f b6 c0             	movzx  eax,al
c000cca3:	50                   	push   eax
c000cca4:	e8 a3 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cca9:	5a                   	pop    edx
c000ccaa:	5a                   	pop    edx
c000ccab:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000ccb1:	53                   	push   ebx
c000ccb2:	a1 40 50 02 c0       	mov    eax,ds:0xc0025040
c000ccb7:	99                   	cdq    
c000ccb8:	f7 fd                	idiv   ebp
c000ccba:	99                   	cdq    
c000ccbb:	f7 f9                	idiv   ecx
c000ccbd:	8d 42 30             	lea    eax,[edx+0x30]
c000ccc0:	0f b6 c0             	movzx  eax,al
c000ccc3:	50                   	push   eax
c000ccc4:	e8 83 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000ccc9:	5d                   	pop    ebp
c000ccca:	5a                   	pop    edx
c000cccb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000ccd1:	53                   	push   ebx
c000ccd2:	a1 40 50 02 c0       	mov    eax,ds:0xc0025040
c000ccd7:	99                   	cdq    
c000ccd8:	f7 ff                	idiv   edi
c000ccda:	99                   	cdq    
c000ccdb:	f7 f9                	idiv   ecx
c000ccdd:	8d 42 30             	lea    eax,[edx+0x30]
c000cce0:	0f b6 c0             	movzx  eax,al
c000cce3:	50                   	push   eax
c000cce4:	e8 63 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cce9:	5f                   	pop    edi
c000ccea:	5d                   	pop    ebp
c000cceb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000ccf1:	53                   	push   ebx
c000ccf2:	a1 40 50 02 c0       	mov    eax,ds:0xc0025040
c000ccf7:	99                   	cdq    
c000ccf8:	f7 fe                	idiv   esi
c000ccfa:	99                   	cdq    
c000ccfb:	f7 f9                	idiv   ecx
c000ccfd:	8d 42 30             	lea    eax,[edx+0x30]
c000cd00:	0f b6 c0             	movzx  eax,al
c000cd03:	50                   	push   eax
c000cd04:	e8 43 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cd09:	5a                   	pop    edx
c000cd0a:	5e                   	pop    esi
c000cd0b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cd11:	53                   	push   ebx
c000cd12:	a1 40 50 02 c0       	mov    eax,ds:0xc0025040
c000cd17:	99                   	cdq    
c000cd18:	f7 f9                	idiv   ecx
c000cd1a:	99                   	cdq    
c000cd1b:	f7 f9                	idiv   ecx
c000cd1d:	8d 42 30             	lea    eax,[edx+0x30]
c000cd20:	0f b6 c0             	movzx  eax,al
c000cd23:	50                   	push   eax
c000cd24:	e8 23 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cd29:	5f                   	pop    edi
c000cd2a:	5d                   	pop    ebp
c000cd2b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000cd31:	53                   	push   ebx
c000cd32:	a1 40 50 02 c0       	mov    eax,ds:0xc0025040
c000cd37:	99                   	cdq    
c000cd38:	f7 f9                	idiv   ecx
c000cd3a:	83 c2 30             	add    edx,0x30
c000cd3d:	0f b6 d2             	movzx  edx,dl
c000cd40:	52                   	push   edx
c000cd41:	e8 06 fd ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000cd46:	5a                   	pop    edx
c000cd47:	59                   	pop    ecx
c000cd48:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000cd4e:	5b                   	pop    ebx
c000cd4f:	5e                   	pop    esi
c000cd50:	5f                   	pop    edi
c000cd51:	5d                   	pop    ebp
c000cd52:	c3                   	ret    
c000cd53:	90                   	nop

c000cd54 <VgaText::updateTitle()>:
c000cd54:	53                   	push   ebx
c000cd55:	31 c0                	xor    eax,eax
c000cd57:	83 ec 58             	sub    esp,0x58
c000cd5a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cd5e:	89 e1                	mov    ecx,esp
c000cd60:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000cd64:	40                   	inc    eax
c000cd65:	83 f8 50             	cmp    eax,0x50
c000cd68:	75 f6                	jne    c000cd60 <VgaText::updateTitle()+0xc>
c000cd6a:	31 c0                	xor    eax,eax
c000cd6c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000cd73:	84 db                	test   bl,bl
c000cd75:	74 06                	je     c000cd7d <VgaText::updateTitle()+0x29>
c000cd77:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cd7a:	40                   	inc    eax
c000cd7b:	eb ef                	jmp    c000cd6c <VgaText::updateTitle()+0x18>
c000cd7d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd83:	85 c0                	test   eax,eax
c000cd85:	74 09                	je     c000cd90 <VgaText::updateTitle()+0x3c>
c000cd87:	53                   	push   ebx
c000cd88:	53                   	push   ebx
c000cd89:	51                   	push   ecx
c000cd8a:	52                   	push   edx
c000cd8b:	ff d0                	call   eax
c000cd8d:	83 c4 10             	add    esp,0x10
c000cd90:	e8 59 fe ff ff       	call   c000cbee <VgaText::updateDiskUsage()>
c000cd95:	83 c4 58             	add    esp,0x58
c000cd98:	5b                   	pop    ebx
c000cd99:	c3                   	ret    

c000cd9a <VgaText::setTitleTextColour(VgaColour)>:
c000cd9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cda2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cda8:	eb aa                	jmp    c000cd54 <VgaText::updateTitle()>

c000cdaa <VgaText::setTitleColour(VgaColour)>:
c000cdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdb2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cdb8:	eb 9a                	jmp    c000cd54 <VgaText::updateTitle()>

c000cdba <VgaText::setTitle(char*)>:
c000cdba:	53                   	push   ebx
c000cdbb:	83 ec 10             	sub    esp,0x10
c000cdbe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc6:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cdcc:	50                   	push   eax
c000cdcd:	e8 d5 38 ff ff       	call   c00006a7 <strcpy>
c000cdd2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cdd6:	83 c4 18             	add    esp,0x18
c000cdd9:	5b                   	pop    ebx
c000cdda:	e9 75 ff ff ff       	jmp    c000cd54 <VgaText::updateTitle()>
c000cddf:	90                   	nop

c000cde0 <VgaText::decrementCursor(bool)>:
c000cde0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cde4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cde8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cdee:	85 c0                	test   eax,eax
c000cdf0:	74 07                	je     c000cdf9 <VgaText::decrementCursor(bool)+0x19>
c000cdf2:	48                   	dec    eax
c000cdf3:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cdf9:	84 c9                	test   cl,cl
c000cdfb:	74 09                	je     c000ce06 <VgaText::decrementCursor(bool)+0x26>
c000cdfd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ce01:	e9 64 fa ff ff       	jmp    c000c86a <VgaText::updateCursor()>
c000ce06:	c3                   	ret    
c000ce07:	90                   	nop

c000ce08 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ce08:	53                   	push   ebx
c000ce09:	83 ec 08             	sub    esp,0x8
c000ce0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ce1c:	3c 07                	cmp    al,0x7
c000ce1e:	75 2a                	jne    c000ce4a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ce20:	a1 0c 34 02 c0       	mov    eax,ds:0xc002340c
c000ce25:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ce2d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ce35:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ce3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce41:	83 c4 08             	add    esp,0x8
c000ce44:	5b                   	pop    ebx
c000ce45:	e9 f0 2c 00 00       	jmp    c000fb3a <Buzzer::beep(int, int, bool)>
c000ce4a:	3c 0d                	cmp    al,0xd
c000ce4c:	75 0c                	jne    c000ce5a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000ce4e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce58:	eb 3b                	jmp    c000ce95 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000ce5a:	3c 0a                	cmp    al,0xa
c000ce5c:	75 40                	jne    c000ce9e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000ce5e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ce64:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce6e:	8d 50 01             	lea    edx,[eax+0x1]
c000ce71:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000ce77:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ce7d:	75 12                	jne    c000ce91 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000ce7f:	83 ec 0c             	sub    esp,0xc
c000ce82:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce88:	53                   	push   ebx
c000ce89:	e8 2a fb ff ff       	call   c000c9b8 <VgaText::scrollScreen()>
c000ce8e:	83 c4 10             	add    esp,0x10
c000ce91:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce95:	83 c4 08             	add    esp,0x8
c000ce98:	5b                   	pop    ebx
c000ce99:	e9 cc f9 ff ff       	jmp    c000c86a <VgaText::updateCursor()>
c000ce9e:	3c 08                	cmp    al,0x8
c000cea0:	75 31                	jne    c000ced3 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000cea2:	50                   	push   eax
c000cea3:	50                   	push   eax
c000cea4:	6a 01                	push   0x1
c000cea6:	53                   	push   ebx
c000cea7:	e8 34 ff ff ff       	call   c000cde0 <VgaText::decrementCursor(bool)>
c000ceac:	5a                   	pop    edx
c000cead:	59                   	pop    ecx
c000ceae:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ceb4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ceba:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000cec0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000cec6:	6a 20                	push   0x20
c000cec8:	53                   	push   ebx
c000cec9:	e8 90 fb ff ff       	call   c000ca5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000cece:	83 c4 28             	add    esp,0x28
c000ced1:	5b                   	pop    ebx
c000ced2:	c3                   	ret    
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	0f be c0             	movsx  eax,al
c000ced9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cedf:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cee5:	51                   	push   ecx
c000cee6:	52                   	push   edx
c000cee7:	50                   	push   eax
c000cee8:	53                   	push   ebx
c000cee9:	e8 70 fb ff ff       	call   c000ca5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ceee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000cef2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000cefa:	83 c4 28             	add    esp,0x28
c000cefd:	5b                   	pop    ebx
c000cefe:	e9 29 fc ff ff       	jmp    c000cb2c <VgaText::incrementCursor(bool)>
c000cf03:	90                   	nop

c000cf04 <VgaText::isShowingCursor()>:
c000cf04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf08:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000cf0e:	c3                   	ret    
c000cf0f:	90                   	nop

c000cf10 <VgaText::isBlinkDisabled()>:
c000cf10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf14:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000cf1a:	83 f0 01             	xor    eax,0x1
c000cf1d:	c3                   	ret    

c000cf1e <VgaText::setCursorHeight(int)>:
c000cf1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf26:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000cf2c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000cf33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf37:	e9 48 f9 ff ff       	jmp    c000c884 <VgaText::showCursor(bool)>

c000cf3c <VgaText::getCursorHeight()>:
c000cf3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf40:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cf46:	c3                   	ret    

c000cf47 <setActiveTerminal(VgaText*)>:
c000cf47:	53                   	push   ebx
c000cf48:	83 ec 08             	sub    esp,0x8
c000cf4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf4f:	85 db                	test   ebx,ebx
c000cf51:	75 11                	jne    c000cf64 <setActiveTerminal(VgaText*)+0x1d>
c000cf53:	c7 44 24 10 a4 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc00200a4
c000cf5b:	83 c4 08             	add    esp,0x8
c000cf5e:	5b                   	pop    ebx
c000cf5f:	e9 80 7a 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>
c000cf64:	50                   	push   eax
c000cf65:	50                   	push   eax
c000cf66:	53                   	push   ebx
c000cf67:	68 b2 00 02 c0       	push   0xc00200b2
c000cf6c:	e8 de 1d 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000cf71:	a1 64 33 02 c0       	mov    eax,ds:0xc0023364
c000cf76:	83 c4 10             	add    esp,0x10
c000cf79:	85 c0                	test   eax,eax
c000cf7b:	74 0c                	je     c000cf89 <setActiveTerminal(VgaText*)+0x42>
c000cf7d:	83 ec 0c             	sub    esp,0xc
c000cf80:	50                   	push   eax
c000cf81:	e8 e4 f8 ff ff       	call   c000c86a <VgaText::updateCursor()>
c000cf86:	83 c4 10             	add    esp,0x10
c000cf89:	89 1d 64 33 02 c0    	mov    DWORD PTR ds:0xc0023364,ebx
c000cf8f:	51                   	push   ecx
c000cf90:	51                   	push   ecx
c000cf91:	53                   	push   ebx
c000cf92:	68 ca 00 02 c0       	push   0xc00200ca
c000cf97:	e8 b3 1d 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000cf9c:	83 c4 0c             	add    esp,0xc
c000cf9f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cfa5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cfab:	53                   	push   ebx
c000cfac:	e8 25 fb ff ff       	call   c000cad6 <VgaText::setCursor(int, int)>
c000cfb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfb4:	e8 57 ff ff ff       	call   c000cf10 <VgaText::isBlinkDisabled()>
c000cfb9:	5a                   	pop    edx
c000cfba:	0f b6 c0             	movzx  eax,al
c000cfbd:	59                   	pop    ecx
c000cfbe:	50                   	push   eax
c000cfbf:	53                   	push   ebx
c000cfc0:	e8 cf f8 ff ff       	call   c000c894 <VgaText::disableBlink(bool)>
c000cfc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfc8:	e8 6f ff ff ff       	call   c000cf3c <VgaText::getCursorHeight()>
c000cfcd:	5a                   	pop    edx
c000cfce:	59                   	pop    ecx
c000cfcf:	50                   	push   eax
c000cfd0:	53                   	push   ebx
c000cfd1:	e8 48 ff ff ff       	call   c000cf1e <VgaText::setCursorHeight(int)>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cfe0:	75 0a                	jne    c000cfec <setActiveTerminal(VgaText*)+0xa5>
c000cfe2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cfec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cff0:	83 c4 08             	add    esp,0x8
c000cff3:	5b                   	pop    ebx
c000cff4:	e9 1d f8 ff ff       	jmp    c000c816 <VgaText::load()>

c000cff9 <doTerminalCycle()>:
c000cff9:	83 ec 18             	sub    esp,0x18
c000cffc:	a1 60 33 02 c0       	mov    eax,ds:0xc0023360
c000d001:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d007:	50                   	push   eax
c000d008:	a3 60 33 02 c0       	mov    ds:0xc0023360,eax
c000d00d:	e8 35 ff ff ff       	call   c000cf47 <setActiveTerminal(VgaText*)>
c000d012:	83 c4 1c             	add    esp,0x1c
c000d015:	c3                   	ret    

c000d016 <VgaText::doUpdate()>:
c000d016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d020:	85 c0                	test   eax,eax
c000d022:	74 02                	je     c000d026 <VgaText::doUpdate()+0x10>
c000d024:	ff e0                	jmp    eax
c000d026:	c3                   	ret    
c000d027:	90                   	nop

c000d028 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d028:	55                   	push   ebp
c000d029:	57                   	push   edi
c000d02a:	56                   	push   esi
c000d02b:	53                   	push   ebx
c000d02c:	83 ec 1c             	sub    esp,0x1c
c000d02f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d033:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d038:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d03f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d042:	50                   	push   eax
c000d043:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d048:	50                   	push   eax
c000d049:	e8 58 f9 ff ff       	call   c000c9a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000d04e:	59                   	pop    ecx
c000d04f:	0f b6 c0             	movzx  eax,al
c000d052:	5b                   	pop    ebx
c000d053:	31 c9                	xor    ecx,ecx
c000d055:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d05d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d061:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d06b:	0f b7 db             	movzx  ebx,bx
c000d06e:	01 db                	add    ebx,ebx
c000d070:	01 fb                	add    ebx,edi
c000d072:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d075:	84 c0                	test   al,al
c000d077:	0f 84 38 01 00 00    	je     c000d1b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d07d:	3c 0d                	cmp    al,0xd
c000d07f:	75 0f                	jne    c000d090 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d081:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d08b:	e9 1f 01 00 00       	jmp    c000d1af <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d090:	3c 0a                	cmp    al,0xa
c000d092:	75 5b                	jne    c000d0ef <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d094:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d09a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d0a4:	8d 48 01             	lea    ecx,[eax+0x1]
c000d0a7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d0ad:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d0b3:	75 12                	jne    c000d0c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d0b5:	83 ec 0c             	sub    esp,0xc
c000d0b8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d0be:	55                   	push   ebp
c000d0bf:	e8 f4 f8 ff ff       	call   c000c9b8 <VgaText::scrollScreen()>
c000d0c4:	83 c4 10             	add    esp,0x10
c000d0c7:	83 ec 0c             	sub    esp,0xc
c000d0ca:	55                   	push   ebp
c000d0cb:	e8 9a f7 ff ff       	call   c000c86a <VgaText::updateCursor()>
c000d0d0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0d8:	83 c4 10             	add    esp,0x10
c000d0db:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0e1:	31 c9                	xor    ecx,ecx
c000d0e3:	0f b7 db             	movzx  ebx,bx
c000d0e6:	01 db                	add    ebx,ebx
c000d0e8:	01 fb                	add    ebx,edi
c000d0ea:	e9 c0 00 00 00       	jmp    c000d1af <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0ef:	3c 08                	cmp    al,0x8
c000d0f1:	75 4e                	jne    c000d141 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d0f3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d0f7:	53                   	push   ebx
c000d0f8:	53                   	push   ebx
c000d0f9:	6a 01                	push   0x1
c000d0fb:	55                   	push   ebp
c000d0fc:	e8 df fc ff ff       	call   c000cde0 <VgaText::decrementCursor(bool)>
c000d101:	58                   	pop    eax
c000d102:	5a                   	pop    edx
c000d103:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d109:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d10f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d115:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d11b:	6a 20                	push   0x20
c000d11d:	55                   	push   ebp
c000d11e:	e8 3b f9 ff ff       	call   c000ca5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d123:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d12b:	83 c4 20             	add    esp,0x20
c000d12e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d134:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d138:	0f b7 db             	movzx  ebx,bx
c000d13b:	01 db                	add    ebx,ebx
c000d13d:	01 fb                	add    ebx,edi
c000d13f:	eb 6e                	jmp    c000d1af <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d141:	51                   	push   ecx
c000d142:	51                   	push   ecx
c000d143:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d147:	50                   	push   eax
c000d148:	e8 ff f8 ff ff       	call   c000ca4c <VgaText::combineCharAndColour(char, unsigned char)>
c000d14d:	83 c4 10             	add    esp,0x10
c000d150:	66 89 03             	mov    WORD PTR [ebx],ax
c000d153:	39 2d 64 33 02 c0    	cmp    DWORD PTR ds:0xc0023364,ebp
c000d159:	75 2a                	jne    c000d185 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d15b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d161:	85 c0                	test   eax,eax
c000d163:	74 20                	je     c000d185 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d165:	52                   	push   edx
c000d166:	52                   	push   edx
c000d167:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d16d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d173:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d177:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d17b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d17e:	51                   	push   ecx
c000d17f:	55                   	push   ebp
c000d180:	ff d0                	call   eax
c000d182:	83 c4 20             	add    esp,0x20
c000d185:	83 c3 02             	add    ebx,0x2
c000d188:	50                   	push   eax
c000d189:	50                   	push   eax
c000d18a:	6a 00                	push   0x0
c000d18c:	55                   	push   ebp
c000d18d:	e8 9a f9 ff ff       	call   c000cb2c <VgaText::incrementCursor(bool)>
c000d192:	83 c4 10             	add    esp,0x10
c000d195:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d19c:	75 0f                	jne    c000d1ad <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d19e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d1a6:	0f b7 db             	movzx  ebx,bx
c000d1a9:	01 db                	add    ebx,ebx
c000d1ab:	01 fb                	add    ebx,edi
c000d1ad:	b1 01                	mov    cl,0x1
c000d1af:	46                   	inc    esi
c000d1b0:	e9 bd fe ff ff       	jmp    c000d072 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d1b5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1b9:	83 ec 0c             	sub    esp,0xc
c000d1bc:	55                   	push   ebp
c000d1bd:	e8 a8 f6 ff ff       	call   c000c86a <VgaText::updateCursor()>
c000d1c2:	83 c4 10             	add    esp,0x10
c000d1c5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1c9:	84 c9                	test   cl,cl
c000d1cb:	74 0c                	je     c000d1d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d1cd:	83 ec 0c             	sub    esp,0xc
c000d1d0:	55                   	push   ebp
c000d1d1:	e8 40 fe ff ff       	call   c000d016 <VgaText::doUpdate()>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d1e0:	83 c4 1c             	add    esp,0x1c
c000d1e3:	5b                   	pop    ebx
c000d1e4:	5e                   	pop    esi
c000d1e5:	5f                   	pop    edi
c000d1e6:	5d                   	pop    ebp
c000d1e7:	c3                   	ret    

c000d1e8 <VgaText::clearScreen()>:
c000d1e8:	57                   	push   edi
c000d1e9:	56                   	push   esi
c000d1ea:	31 f6                	xor    esi,esi
c000d1ec:	53                   	push   ebx
c000d1ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d1f1:	52                   	push   edx
c000d1f2:	6a 00                	push   0x0
c000d1f4:	6a 00                	push   0x0
c000d1f6:	53                   	push   ebx
c000d1f7:	e8 da f8 ff ff       	call   c000cad6 <VgaText::setCursor(int, int)>
c000d1fc:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d203:	83 c4 10             	add    esp,0x10
c000d206:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d20c:	7e 26                	jle    c000d234 <VgaText::clearScreen()+0x4c>
c000d20e:	31 ff                	xor    edi,edi
c000d210:	50                   	push   eax
c000d211:	50                   	push   eax
c000d212:	56                   	push   esi
c000d213:	57                   	push   edi
c000d214:	47                   	inc    edi
c000d215:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d21b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d221:	6a 20                	push   0x20
c000d223:	53                   	push   ebx
c000d224:	e8 35 f8 ff ff       	call   c000ca5e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d229:	83 c4 20             	add    esp,0x20
c000d22c:	83 ff 50             	cmp    edi,0x50
c000d22f:	75 df                	jne    c000d210 <VgaText::clearScreen()+0x28>
c000d231:	46                   	inc    esi
c000d232:	eb d2                	jmp    c000d206 <VgaText::clearScreen()+0x1e>
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	53                   	push   ebx
c000d238:	e8 d9 fd ff ff       	call   c000d016 <VgaText::doUpdate()>
c000d23d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d244:	83 c4 10             	add    esp,0x10
c000d247:	5b                   	pop    ebx
c000d248:	5e                   	pop    esi
c000d249:	5f                   	pop    edi
c000d24a:	c3                   	ret    
c000d24b:	90                   	nop

c000d24c <VgaText::putchar(char)>:
c000d24c:	56                   	push   esi
c000d24d:	53                   	push   ebx
c000d24e:	83 ec 14             	sub    esp,0x14
c000d251:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d255:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d259:	3c 5b                	cmp    al,0x5b
c000d25b:	75 21                	jne    c000d27e <VgaText::putchar(char)+0x32>
c000d25d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d264:	74 28                	je     c000d28e <VgaText::putchar(char)+0x42>
c000d266:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d26f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d279:	e9 e2 00 00 00       	jmp    c000d360 <VgaText::putchar(char)+0x114>
c000d27e:	3c 1b                	cmp    al,0x1b
c000d280:	75 0c                	jne    c000d28e <VgaText::putchar(char)+0x42>
c000d282:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d289:	e9 d2 00 00 00       	jmp    c000d360 <VgaText::putchar(char)+0x114>
c000d28e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d294:	84 c9                	test   cl,cl
c000d296:	0f 84 ab 00 00 00    	je     c000d347 <VgaText::putchar(char)+0xfb>
c000d29c:	8d 50 c0             	lea    edx,[eax-0x40]
c000d29f:	80 fa 3e             	cmp    dl,0x3e
c000d2a2:	0f 87 82 00 00 00    	ja     c000d32a <VgaText::putchar(char)+0xde>
c000d2a8:	3c 6d                	cmp    al,0x6d
c000d2aa:	75 4d                	jne    c000d2f9 <VgaText::putchar(char)+0xad>
c000d2ac:	31 f6                	xor    esi,esi
c000d2ae:	31 d2                	xor    edx,edx
c000d2b0:	31 c0                	xor    eax,eax
c000d2b2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d2b8:	7e 30                	jle    c000d2ea <VgaText::putchar(char)+0x9e>
c000d2ba:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d2c2:	80 fa 3b             	cmp    dl,0x3b
c000d2c5:	75 17                	jne    c000d2de <VgaText::putchar(char)+0x92>
c000d2c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d2cb:	50                   	push   eax
c000d2cc:	53                   	push   ebx
c000d2cd:	e8 fc f5 ff ff       	call   c000c8ce <VgaText::doANSI_SGR(int)>
c000d2d2:	59                   	pop    ecx
c000d2d3:	31 d2                	xor    edx,edx
c000d2d5:	58                   	pop    eax
c000d2d6:	31 c0                	xor    eax,eax
c000d2d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d2dc:	eb 09                	jmp    c000d2e7 <VgaText::putchar(char)+0x9b>
c000d2de:	6b c0 0a             	imul   eax,eax,0xa
c000d2e1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d2e5:	88 ca                	mov    dl,cl
c000d2e7:	46                   	inc    esi
c000d2e8:	eb c8                	jmp    c000d2b2 <VgaText::putchar(char)+0x66>
c000d2ea:	84 d2                	test   dl,dl
c000d2ec:	74 31                	je     c000d31f <VgaText::putchar(char)+0xd3>
c000d2ee:	50                   	push   eax
c000d2ef:	53                   	push   ebx
c000d2f0:	e8 d9 f5 ff ff       	call   c000c8ce <VgaText::doANSI_SGR(int)>
c000d2f5:	58                   	pop    eax
c000d2f6:	5a                   	pop    edx
c000d2f7:	eb 26                	jmp    c000d31f <VgaText::putchar(char)+0xd3>
c000d2f9:	3c 4a                	cmp    al,0x4a
c000d2fb:	75 22                	jne    c000d31f <VgaText::putchar(char)+0xd3>
c000d2fd:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d304:	75 19                	jne    c000d31f <VgaText::putchar(char)+0xd3>
c000d306:	83 ec 0c             	sub    esp,0xc
c000d309:	53                   	push   ebx
c000d30a:	e8 d9 fe ff ff       	call   c000d1e8 <VgaText::clearScreen()>
c000d30f:	83 c4 0c             	add    esp,0xc
c000d312:	6a 00                	push   0x0
c000d314:	6a 00                	push   0x0
c000d316:	53                   	push   ebx
c000d317:	e8 ba f7 ff ff       	call   c000cad6 <VgaText::setCursor(int, int)>
c000d31c:	83 c4 10             	add    esp,0x10
c000d31f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d328:	eb 36                	jmp    c000d360 <VgaText::putchar(char)+0x114>
c000d32a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d330:	83 fa 0e             	cmp    edx,0xe
c000d333:	7f 2b                	jg     c000d360 <VgaText::putchar(char)+0x114>
c000d335:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d338:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d33e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d345:	eb 19                	jmp    c000d360 <VgaText::putchar(char)+0x114>
c000d347:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d34d:	0f be c0             	movsx  eax,al
c000d350:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d356:	50                   	push   eax
c000d357:	53                   	push   ebx
c000d358:	e8 ab fa ff ff       	call   c000ce08 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d35d:	83 c4 10             	add    esp,0x10
c000d360:	83 c4 14             	add    esp,0x14
c000d363:	5b                   	pop    ebx
c000d364:	5e                   	pop    esi
c000d365:	c3                   	ret    

c000d366 <VgaText::puts(char const*)>:
c000d366:	53                   	push   ebx
c000d367:	83 ec 08             	sub    esp,0x8
c000d36a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d36e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d371:	84 c0                	test   al,al
c000d373:	74 12                	je     c000d387 <VgaText::puts(char const*)+0x21>
c000d375:	43                   	inc    ebx
c000d376:	51                   	push   ecx
c000d377:	51                   	push   ecx
c000d378:	50                   	push   eax
c000d379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37d:	e8 ca fe ff ff       	call   c000d24c <VgaText::putchar(char)>
c000d382:	83 c4 10             	add    esp,0x10
c000d385:	eb e7                	jmp    c000d36e <VgaText::puts(char const*)+0x8>
c000d387:	83 c4 08             	add    esp,0x8
c000d38a:	5b                   	pop    ebx
c000d38b:	c3                   	ret    

c000d38c <VgaText::putx(unsigned int)>:
c000d38c:	57                   	push   edi
c000d38d:	b9 11 00 00 00       	mov    ecx,0x11
c000d392:	56                   	push   esi
c000d393:	be e6 00 02 c0       	mov    esi,0xc00200e6
c000d398:	53                   	push   ebx
c000d399:	83 ec 20             	sub    esp,0x20
c000d39c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d3a0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d3a4:	fc                   	cld    
c000d3a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d3a7:	be 08 00 00 00       	mov    esi,0x8
c000d3ac:	50                   	push   eax
c000d3ad:	50                   	push   eax
c000d3ae:	89 d8                	mov    eax,ebx
c000d3b0:	c1 e3 04             	shl    ebx,0x4
c000d3b3:	c1 e8 1c             	shr    eax,0x1c
c000d3b6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d3bb:	50                   	push   eax
c000d3bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d3c0:	e8 87 fe ff ff       	call   c000d24c <VgaText::putchar(char)>
c000d3c5:	83 c4 10             	add    esp,0x10
c000d3c8:	4e                   	dec    esi
c000d3c9:	75 e1                	jne    c000d3ac <VgaText::putx(unsigned int)+0x20>
c000d3cb:	83 c4 20             	add    esp,0x20
c000d3ce:	5b                   	pop    ebx
c000d3cf:	5e                   	pop    esi
c000d3d0:	5f                   	pop    edi
c000d3d1:	c3                   	ret    

c000d3d2 <VgaText::VgaText(char const*)>:
c000d3d2:	57                   	push   edi
c000d3d3:	56                   	push   esi
c000d3d4:	53                   	push   ebx
c000d3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3d9:	83 ec 08             	sub    esp,0x8
c000d3dc:	6a 00                	push   0x0
c000d3de:	50                   	push   eax
c000d3df:	e8 e0 05 00 00       	call   c000d9c4 <UnixFile::UnixFile(int)>
c000d3e4:	83 c4 10             	add    esp,0x10
c000d3e7:	ba 4c 01 02 c0       	mov    edx,0xc002014c
c000d3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f0:	89 10                	mov    DWORD PTR [eax],edx
c000d3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f6:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d404:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d412:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d41d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d428:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d436:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d444:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d44f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d45a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d460:	bb 40 33 02 c0       	mov    ebx,0xc0023340
c000d465:	b8 08 00 00 00       	mov    eax,0x8
c000d46a:	fc                   	cld    
c000d46b:	89 d7                	mov    edi,edx
c000d46d:	89 de                	mov    esi,ebx
c000d46f:	89 c1                	mov    ecx,eax
c000d471:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	05 1e 10 00 00       	add    eax,0x101e
c000d47c:	83 ec 08             	sub    esp,0x8
c000d47f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d483:	50                   	push   eax
c000d484:	e8 1e 32 ff ff       	call   c00006a7 <strcpy>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d490:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d49e:	83 c0 0c             	add    eax,0xc
c000d4a1:	83 ec 04             	sub    esp,0x4
c000d4a4:	68 00 0f 00 00       	push   0xf00
c000d4a9:	6a 00                	push   0x0
c000d4ab:	50                   	push   eax
c000d4ac:	e8 57 31 ff ff       	call   c0000608 <memset>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	83 ec 04             	sub    esp,0x4
c000d4b7:	6a 00                	push   0x0
c000d4b9:	6a 07                	push   0x7
c000d4bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4bf:	e8 c2 f4 ff ff       	call   c000c986 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d4c4:	83 c4 10             	add    esp,0x10
c000d4c7:	83 ec 08             	sub    esp,0x8
c000d4ca:	6a 02                	push   0x2
c000d4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d0:	e8 49 fa ff ff       	call   c000cf1e <VgaText::setCursorHeight(int)>
c000d4d5:	83 c4 10             	add    esp,0x10
c000d4d8:	83 ec 04             	sub    esp,0x4
c000d4db:	6a 00                	push   0x0
c000d4dd:	6a 00                	push   0x0
c000d4df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4e3:	e8 ee f5 ff ff       	call   c000cad6 <VgaText::setCursor(int, int)>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	83 ec 08             	sub    esp,0x8
c000d4ee:	6a 01                	push   0x1
c000d4f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f4:	e8 8b f3 ff ff       	call   c000c884 <VgaText::showCursor(bool)>
c000d4f9:	83 c4 10             	add    esp,0x10
c000d4fc:	83 ec 08             	sub    esp,0x8
c000d4ff:	6a 01                	push   0x1
c000d501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d505:	e8 8a f3 ff ff       	call   c000c894 <VgaText::disableBlink(bool)>
c000d50a:	83 c4 10             	add    esp,0x10
c000d50d:	83 ec 0c             	sub    esp,0xc
c000d510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d514:	e8 cf fc ff ff       	call   c000d1e8 <VgaText::clearScreen()>
c000d519:	83 c4 10             	add    esp,0x10
c000d51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d520:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d52b:	05 9e 10 00 00       	add    eax,0x109e
c000d530:	83 ec 04             	sub    esp,0x4
c000d533:	68 96 00 00 00       	push   0x96
c000d538:	6a 00                	push   0x0
c000d53a:	50                   	push   eax
c000d53b:	e8 c8 30 ff ff       	call   c0000608 <memset>
c000d540:	83 c4 10             	add    esp,0x10
c000d543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d547:	05 34 11 00 00       	add    eax,0x1134
c000d54c:	83 ec 04             	sub    esp,0x4
c000d54f:	68 2c 01 00 00       	push   0x12c
c000d554:	6a 00                	push   0x0
c000d556:	50                   	push   eax
c000d557:	e8 ac 30 ff ff       	call   c0000608 <memset>
c000d55c:	83 c4 10             	add    esp,0x10
c000d55f:	90                   	nop
c000d560:	5b                   	pop    ebx
c000d561:	5e                   	pop    esi
c000d562:	5f                   	pop    edi
c000d563:	c3                   	ret    

c000d564 <VgaText::receiveKey(unsigned char)>:
c000d564:	55                   	push   ebp
c000d565:	57                   	push   edi
c000d566:	56                   	push   esi
c000d567:	53                   	push   ebx
c000d568:	83 ec 1c             	sub    esp,0x1c
c000d56b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d56f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d573:	84 db                	test   bl,bl
c000d575:	0f 84 c9 00 00 00    	je     c000d644 <VgaText::receiveKey(unsigned char)+0xe0>
c000d57b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d581:	80 fb 08             	cmp    bl,0x8
c000d584:	75 2c                	jne    c000d5b2 <VgaText::receiveKey(unsigned char)+0x4e>
c000d586:	83 ec 0c             	sub    esp,0xc
c000d589:	57                   	push   edi
c000d58a:	e8 96 30 ff ff       	call   c0000625 <strlen>
c000d58f:	83 c4 10             	add    esp,0x10
c000d592:	85 c0                	test   eax,eax
c000d594:	74 41                	je     c000d5d7 <VgaText::receiveKey(unsigned char)+0x73>
c000d596:	50                   	push   eax
c000d597:	50                   	push   eax
c000d598:	6a 08                	push   0x8
c000d59a:	56                   	push   esi
c000d59b:	e8 ac fc ff ff       	call   c000d24c <VgaText::putchar(char)>
c000d5a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d5a3:	e8 7d 30 ff ff       	call   c0000625 <strlen>
c000d5a8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d5b0:	eb 22                	jmp    c000d5d4 <VgaText::receiveKey(unsigned char)+0x70>
c000d5b2:	0f be c3             	movsx  eax,bl
c000d5b5:	52                   	push   edx
c000d5b6:	52                   	push   edx
c000d5b7:	50                   	push   eax
c000d5b8:	56                   	push   esi
c000d5b9:	e8 8e fc ff ff       	call   c000d24c <VgaText::putchar(char)>
c000d5be:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d5c2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d5c7:	59                   	pop    ecx
c000d5c8:	5d                   	pop    ebp
c000d5c9:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d5cd:	50                   	push   eax
c000d5ce:	57                   	push   edi
c000d5cf:	e8 8a 31 ff ff       	call   c000075e <strcat>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d5de:	75 05                	jne    c000d5e5 <VgaText::receiveKey(unsigned char)+0x81>
c000d5e0:	80 fb 0a             	cmp    bl,0xa
c000d5e3:	75 53                	jne    c000d638 <VgaText::receiveKey(unsigned char)+0xd4>
c000d5e5:	83 ec 0c             	sub    esp,0xc
c000d5e8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d5ee:	53                   	push   ebx
c000d5ef:	e8 31 30 ff ff       	call   c0000625 <strlen>
c000d5f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d5f7:	89 c5                	mov    ebp,eax
c000d5f9:	e8 27 30 ff ff       	call   c0000625 <strlen>
c000d5fe:	83 c4 10             	add    esp,0x10
c000d601:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d605:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d60a:	76 10                	jbe    c000d61c <VgaText::receiveKey(unsigned char)+0xb8>
c000d60c:	83 ec 0c             	sub    esp,0xc
c000d60f:	68 f7 00 02 c0       	push   0xc00200f7
c000d614:	e8 cb 73 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000d619:	83 c4 10             	add    esp,0x10
c000d61c:	50                   	push   eax
c000d61d:	50                   	push   eax
c000d61e:	57                   	push   edi
c000d61f:	53                   	push   ebx
c000d620:	e8 39 31 ff ff       	call   c000075e <strcat>
c000d625:	83 c4 0c             	add    esp,0xc
c000d628:	68 96 00 00 00       	push   0x96
c000d62d:	6a 00                	push   0x0
c000d62f:	57                   	push   edi
c000d630:	e8 d3 2f ff ff       	call   c0000608 <memset>
c000d635:	83 c4 10             	add    esp,0x10
c000d638:	83 ec 0c             	sub    esp,0xc
c000d63b:	56                   	push   esi
c000d63c:	e8 d5 f9 ff ff       	call   c000d016 <VgaText::doUpdate()>
c000d641:	83 c4 10             	add    esp,0x10
c000d644:	83 c4 1c             	add    esp,0x1c
c000d647:	5b                   	pop    ebx
c000d648:	5e                   	pop    esi
c000d649:	5f                   	pop    edi
c000d64a:	5d                   	pop    ebp
c000d64b:	c3                   	ret    

c000d64c <VgaText::write(unsigned long long, void*, int*)>:
c000d64c:	55                   	push   ebp
c000d64d:	57                   	push   edi
c000d64e:	56                   	push   esi
c000d64f:	53                   	push   ebx
c000d650:	83 ec 0c             	sub    esp,0xc
c000d653:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d657:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d65b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d65f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d666:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d669:	39 eb                	cmp    ebx,ebp
c000d66b:	74 13                	je     c000d680 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d66d:	43                   	inc    ebx
c000d66e:	50                   	push   eax
c000d66f:	50                   	push   eax
c000d670:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d674:	50                   	push   eax
c000d675:	56                   	push   esi
c000d676:	e8 d1 fb ff ff       	call   c000d24c <VgaText::putchar(char)>
c000d67b:	83 c4 10             	add    esp,0x10
c000d67e:	eb e9                	jmp    c000d669 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d680:	83 ec 0c             	sub    esp,0xc
c000d683:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d68a:	56                   	push   esi
c000d68b:	e8 86 f9 ff ff       	call   c000d016 <VgaText::doUpdate()>
c000d690:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d694:	89 38                	mov    DWORD PTR [eax],edi
c000d696:	83 c4 1c             	add    esp,0x1c
c000d699:	31 c0                	xor    eax,eax
c000d69b:	5b                   	pop    ebx
c000d69c:	5e                   	pop    esi
c000d69d:	5f                   	pop    edi
c000d69e:	5d                   	pop    ebp
c000d69f:	c3                   	ret    

c000d6a0 <newTerminal(char*)>:
c000d6a0:	83 ec 28             	sub    esp,0x28
c000d6a3:	68 60 12 00 00       	push   0x1260
c000d6a8:	e8 b3 15 00 00       	call   c000ec60 <operator new(unsigned long)>
c000d6ad:	5a                   	pop    edx
c000d6ae:	59                   	pop    ecx
c000d6af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d6b3:	50                   	push   eax
c000d6b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d6b8:	e8 15 fd ff ff       	call   c000d3d2 <VgaText::VgaText(char const*)>
c000d6bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d6c1:	83 c4 2c             	add    esp,0x2c
c000d6c4:	c3                   	ret    
c000d6c5:	90                   	nop

c000d6c6 <TSS::TSS()>:
c000d6c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d6d1:	90                   	nop
c000d6d2:	c3                   	ret    
c000d6d3:	90                   	nop

c000d6d4 <TSS::setESP(unsigned long)>:
c000d6d4:	55                   	push   ebp
c000d6d5:	89 e5                	mov    ebp,esp
c000d6d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6e0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6e3:	90                   	nop
c000d6e4:	5d                   	pop    ebp
c000d6e5:	c3                   	ret    

c000d6e6 <TSS::flush()>:
c000d6e6:	55                   	push   ebp
c000d6e7:	89 e5                	mov    ebp,esp
c000d6e9:	83 ec 10             	sub    esp,0x10
c000d6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6f1:	83 c8 03             	or     eax,0x3
c000d6f4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d6f8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d6fc:	66 89 d0             	mov    ax,dx
c000d6ff:	0f 00 d8             	ltr    ax
c000d702:	90                   	nop
c000d703:	c9                   	leave  
c000d704:	c3                   	ret    
c000d705:	90                   	nop

c000d706 <TSS::setup(unsigned long, unsigned long)>:
c000d706:	55                   	push   ebp
c000d707:	89 e5                	mov    ebp,esp
c000d709:	53                   	push   ebx
c000d70a:	83 ec 14             	sub    esp,0x14
c000d70d:	83 ec 0c             	sub    esp,0xc
c000d710:	6a 68                	push   0x68
c000d712:	e8 07 e5 ff ff       	call   c000bc1e <malloc>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 c2                	mov    edx,eax
c000d71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d725:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d728:	83 ec 04             	sub    esp,0x4
c000d72b:	6a 68                	push   0x68
c000d72d:	6a 00                	push   0x0
c000d72f:	50                   	push   eax
c000d730:	e8 d3 2e ff ff       	call   c0000608 <memset>
c000d735:	83 c4 10             	add    esp,0x10
c000d738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d73e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d747:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d74a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d753:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d756:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d759:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d75c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d762:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d76b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d76e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d777:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d77a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d786:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d792:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d795:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d79b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d79e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d7a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d7a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7aa:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d7b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b4:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d7b7:	e8 f9 0d 01 00       	call   c001e5b5 <CPU::readCR3()>
c000d7bc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d7bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7c5:	83 ec 08             	sub    esp,0x8
c000d7c8:	50                   	push   eax
c000d7c9:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d7cc:	50                   	push   eax
c000d7cd:	e8 22 dc ff ff       	call   c000b3f4 <GDTEntry::setBase(unsigned int)>
c000d7d2:	83 c4 10             	add    esp,0x10
c000d7d5:	83 ec 08             	sub    esp,0x8
c000d7d8:	6a 68                	push   0x68
c000d7da:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d7dd:	50                   	push   eax
c000d7de:	e8 2d dc ff ff       	call   c000b410 <GDTEntry::setLimit(unsigned int)>
c000d7e3:	83 c4 10             	add    esp,0x10
c000d7e6:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d7ea:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7ed:	83 e0 0f             	and    eax,0xf
c000d7f0:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d7f3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7f6:	83 c8 40             	or     eax,0x40
c000d7f9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d7fc:	e8 dd 64 00 00       	call   c0013cde <thisCPU()>
c000d801:	05 78 01 00 00       	add    eax,0x178
c000d806:	83 ec 04             	sub    esp,0x4
c000d809:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d80c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d80f:	50                   	push   eax
c000d810:	e8 2f dc ff ff       	call   c000b444 <GDT::addEntry(GDTEntry)>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	89 c2                	mov    edx,eax
c000d81a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81d:	89 10                	mov    DWORD PTR [eax],edx
c000d81f:	e8 ba 64 00 00       	call   c0013cde <thisCPU()>
c000d824:	05 78 01 00 00       	add    eax,0x178
c000d829:	83 ec 0c             	sub    esp,0xc
c000d82c:	50                   	push   eax
c000d82d:	e8 56 dc ff ff       	call   c000b488 <GDT::flush()>
c000d832:	83 c4 10             	add    esp,0x10
c000d835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d838:	8b 00                	mov    eax,DWORD PTR [eax]
c000d83a:	83 ec 08             	sub    esp,0x8
c000d83d:	50                   	push   eax
c000d83e:	68 60 01 02 c0       	push   0xc0020160
c000d843:	e8 07 15 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d84e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d850:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d853:	c9                   	leave  
c000d854:	c3                   	ret    
c000d855:	90                   	nop

c000d856 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d856:	55                   	push   ebp
c000d857:	57                   	push   edi
c000d858:	56                   	push   esi
c000d859:	53                   	push   ebx
c000d85a:	83 ec 0c             	sub    esp,0xc
c000d85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d861:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d865:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d868:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d86c:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d870:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d874:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d879:	75 08                	jne    c000d883 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d87b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d881:	eb 5e                	jmp    c000d8e1 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d883:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d888:	75 3d                	jne    c000d8c7 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d88a:	83 ec 0c             	sub    esp,0xc
c000d88d:	68 7e 01 02 c0       	push   0xc002017e
c000d892:	e8 b8 14 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000d897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d89c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d89f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8a5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8a7:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8ab:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8af:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8b3:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8bb:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d8be:	83 c4 1c             	add    esp,0x1c
c000d8c1:	5b                   	pop    ebx
c000d8c2:	5e                   	pop    esi
c000d8c3:	5f                   	pop    edi
c000d8c4:	5d                   	pop    ebp
c000d8c5:	ff e0                	jmp    eax
c000d8c7:	89 c2                	mov    edx,eax
c000d8c9:	83 e2 fd             	and    edx,0xfffffffd
c000d8cc:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000d8d2:	74 a7                	je     c000d87b <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d8d4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d8d9:	83 e0 ef             	and    eax,0xffffffef
c000d8dc:	83 f8 08             	cmp    eax,0x8
c000d8df:	76 9a                	jbe    c000d87b <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d8e1:	83 c4 0c             	add    esp,0xc
c000d8e4:	31 c0                	xor    eax,eax
c000d8e6:	5b                   	pop    ebx
c000d8e7:	5e                   	pop    esi
c000d8e8:	5f                   	pop    edi
c000d8e9:	5d                   	pop    ebp
c000d8ea:	c3                   	ret    
c000d8eb:	90                   	nop

c000d8ec <ReservedFilename::isAtty()>:
c000d8ec:	83 ec 18             	sub    esp,0x18
c000d8ef:	68 8b 01 02 c0       	push   0xc002018b
c000d8f4:	e8 56 14 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	31 c0                	xor    eax,eax
c000d8fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d902:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000d909:	75 12                	jne    c000d91d <ReservedFilename::isAtty()+0x31>
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	68 a1 01 02 c0       	push   0xc00201a1
c000d913:	e8 37 14 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	b0 01                	mov    al,0x1
c000d91d:	83 c4 0c             	add    esp,0xc
c000d920:	c3                   	ret    
c000d921:	90                   	nop

c000d922 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d922:	55                   	push   ebp
c000d923:	57                   	push   edi
c000d924:	56                   	push   esi
c000d925:	53                   	push   ebx
c000d926:	83 ec 0c             	sub    esp,0xc
c000d929:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d931:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d934:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d938:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d93c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d940:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d945:	75 08                	jne    c000d94f <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d947:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d94d:	eb 63                	jmp    c000d9b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d94f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d954:	75 3d                	jne    c000d993 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d956:	83 ec 0c             	sub    esp,0xc
c000d959:	68 b4 01 02 c0       	push   0xc00201b4
c000d95e:	e8 ec 13 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000d963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d968:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d96b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d971:	8b 10                	mov    edx,DWORD PTR [eax]
c000d973:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d977:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d97b:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d97f:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d983:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d987:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d98a:	83 c4 1c             	add    esp,0x1c
c000d98d:	5b                   	pop    ebx
c000d98e:	5e                   	pop    esi
c000d98f:	5f                   	pop    edi
c000d990:	5d                   	pop    ebp
c000d991:	ff e0                	jmp    eax
c000d993:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000d998:	75 04                	jne    c000d99e <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d99a:	89 33                	mov    DWORD PTR [ebx],esi
c000d99c:	eb 14                	jmp    c000d9b2 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d99e:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000d9a3:	74 a2                	je     c000d947 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d9a5:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d9aa:	83 e0 ef             	and    eax,0xffffffef
c000d9ad:	83 f8 08             	cmp    eax,0x8
c000d9b0:	76 95                	jbe    c000d947 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d9b2:	83 c4 0c             	add    esp,0xc
c000d9b5:	31 c0                	xor    eax,eax
c000d9b7:	5b                   	pop    ebx
c000d9b8:	5e                   	pop    esi
c000d9b9:	5f                   	pop    edi
c000d9ba:	5d                   	pop    ebp
c000d9bb:	c3                   	ret    

c000d9bc <UnixFile::getFileDescriptor()>:
c000d9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d9c3:	c3                   	ret    

c000d9c4 <UnixFile::UnixFile(int)>:
c000d9c4:	53                   	push   ebx
c000d9c5:	83 ec 18             	sub    esp,0x18
c000d9c8:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c000d9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d1:	89 10                	mov    DWORD PTR [eax],edx
c000d9d3:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000d9db:	0f 8f 4d 01 00 00    	jg     c000db2e <UnixFile::UnixFile(int)+0x16a>
c000d9e1:	a1 40 27 02 c0       	mov    eax,ds:0xc0022740
c000d9e6:	8d 50 01             	lea    edx,[eax+0x1]
c000d9e9:	89 15 40 27 02 c0    	mov    DWORD PTR ds:0xc0022740,edx
c000d9ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9f3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d9f6:	83 ec 08             	sub    esp,0x8
c000d9f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9fd:	68 f8 33 02 c0       	push   0xc00233f8
c000da02:	e8 23 0c 01 00       	call   c001e62a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000da07:	83 c4 10             	add    esp,0x10
c000da0a:	a0 f4 33 02 c0       	mov    al,ds:0xc00233f4
c000da0f:	83 f0 01             	xor    eax,0x1
c000da12:	84 c0                	test   al,al
c000da14:	0f 84 15 01 00 00    	je     c000db2f <UnixFile::UnixFile(int)+0x16b>
c000da1a:	c6 05 f4 33 02 c0 01 	mov    BYTE PTR ds:0xc00233f4,0x1
c000da21:	83 ec 0c             	sub    esp,0xc
c000da24:	6a 0c                	push   0xc
c000da26:	e8 35 12 00 00       	call   c000ec60 <operator new(unsigned long)>
c000da2b:	83 c4 10             	add    esp,0x10
c000da2e:	89 c3                	mov    ebx,eax
c000da30:	83 ec 08             	sub    esp,0x8
c000da33:	68 03 ff ff 0f       	push   0xfffff03
c000da38:	53                   	push   ebx
c000da39:	e8 f6 00 00 00       	call   c000db34 <ReservedFilename::ReservedFilename(int)>
c000da3e:	83 c4 10             	add    esp,0x10
c000da41:	89 1d ec 33 02 c0    	mov    DWORD PTR ds:0xc00233ec,ebx
c000da47:	83 ec 0c             	sub    esp,0xc
c000da4a:	6a 0c                	push   0xc
c000da4c:	e8 0f 12 00 00       	call   c000ec60 <operator new(unsigned long)>
c000da51:	83 c4 10             	add    esp,0x10
c000da54:	89 c3                	mov    ebx,eax
c000da56:	83 ec 08             	sub    esp,0x8
c000da59:	68 01 ff ff 0f       	push   0xfffff01
c000da5e:	53                   	push   ebx
c000da5f:	e8 d0 00 00 00       	call   c000db34 <ReservedFilename::ReservedFilename(int)>
c000da64:	83 c4 10             	add    esp,0x10
c000da67:	89 1d f0 33 02 c0    	mov    DWORD PTR ds:0xc00233f0,ebx
c000da6d:	83 ec 0c             	sub    esp,0xc
c000da70:	6a 0c                	push   0xc
c000da72:	e8 e9 11 00 00       	call   c000ec60 <operator new(unsigned long)>
c000da77:	83 c4 10             	add    esp,0x10
c000da7a:	89 c3                	mov    ebx,eax
c000da7c:	83 ec 08             	sub    esp,0x8
c000da7f:	68 00 ff ff 0f       	push   0xfffff00
c000da84:	53                   	push   ebx
c000da85:	e8 aa 00 00 00       	call   c000db34 <ReservedFilename::ReservedFilename(int)>
c000da8a:	83 c4 10             	add    esp,0x10
c000da8d:	89 1d e4 33 02 c0    	mov    DWORD PTR ds:0xc00233e4,ebx
c000da93:	83 ec 0c             	sub    esp,0xc
c000da96:	6a 0c                	push   0xc
c000da98:	e8 c3 11 00 00       	call   c000ec60 <operator new(unsigned long)>
c000da9d:	83 c4 10             	add    esp,0x10
c000daa0:	89 c3                	mov    ebx,eax
c000daa2:	83 ec 08             	sub    esp,0x8
c000daa5:	68 02 ff ff 0f       	push   0xfffff02
c000daaa:	53                   	push   ebx
c000daab:	e8 84 00 00 00       	call   c000db34 <ReservedFilename::ReservedFilename(int)>
c000dab0:	83 c4 10             	add    esp,0x10
c000dab3:	89 1d e8 33 02 c0    	mov    DWORD PTR ds:0xc00233e8,ebx
c000dab9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dac1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dac6:	7f 67                	jg     c000db2f <UnixFile::UnixFile(int)+0x16b>
c000dac8:	83 ec 0c             	sub    esp,0xc
c000dacb:	6a 0c                	push   0xc
c000dacd:	e8 8e 11 00 00       	call   c000ec60 <operator new(unsigned long)>
c000dad2:	83 c4 10             	add    esp,0x10
c000dad5:	89 c3                	mov    ebx,eax
c000dad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dadb:	05 10 ff ff 0f       	add    eax,0xfffff10
c000dae0:	83 ec 08             	sub    esp,0x8
c000dae3:	50                   	push   eax
c000dae4:	53                   	push   ebx
c000dae5:	e8 4a 00 00 00       	call   c000db34 <ReservedFilename::ReservedFilename(int)>
c000daea:	83 c4 10             	add    esp,0x10
c000daed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daf1:	89 1c 85 c0 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc40],ebx
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	6a 0c                	push   0xc
c000dafd:	e8 5e 11 00 00       	call   c000ec60 <operator new(unsigned long)>
c000db02:	83 c4 10             	add    esp,0x10
c000db05:	89 c3                	mov    ebx,eax
c000db07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db0b:	05 20 ff ff 0f       	add    eax,0xfffff20
c000db10:	83 ec 08             	sub    esp,0x8
c000db13:	50                   	push   eax
c000db14:	53                   	push   ebx
c000db15:	e8 1a 00 00 00       	call   c000db34 <ReservedFilename::ReservedFilename(int)>
c000db1a:	83 c4 10             	add    esp,0x10
c000db1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db21:	89 1c 85 80 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc80],ebx
c000db28:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db2c:	eb 93                	jmp    c000dac1 <UnixFile::UnixFile(int)+0xfd>
c000db2e:	90                   	nop
c000db2f:	83 c4 18             	add    esp,0x18
c000db32:	5b                   	pop    ebx
c000db33:	c3                   	ret    

c000db34 <ReservedFilename::ReservedFilename(int)>:
c000db34:	83 ec 0c             	sub    esp,0xc
c000db37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3b:	83 ec 08             	sub    esp,0x8
c000db3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db42:	50                   	push   eax
c000db43:	e8 7c fe ff ff       	call   c000d9c4 <UnixFile::UnixFile(int)>
c000db48:	83 c4 10             	add    esp,0x10
c000db4b:	ba ec 02 02 c0       	mov    edx,0xc00202ec
c000db50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db54:	89 10                	mov    DWORD PTR [eax],edx
c000db56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000db5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db61:	90                   	nop
c000db62:	83 c4 0c             	add    esp,0xc
c000db65:	c3                   	ret    

c000db66 <UnixFile::~UnixFile()>:
c000db66:	83 ec 1c             	sub    esp,0x1c
c000db69:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c000db6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db72:	89 10                	mov    DWORD PTR [eax],edx
c000db74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db7b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000db80:	7f 73                	jg     c000dbf5 <UnixFile::~UnixFile()+0x8f>
c000db82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db8a:	83 ec 0c             	sub    esp,0xc
c000db8d:	68 f8 33 02 c0       	push   0xc00233f8
c000db92:	e8 67 0b 01 00       	call   c001e6fe <LinkedList<UnixFile>::getFirstElement()>
c000db97:	83 c4 10             	add    esp,0x10
c000db9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	68 f8 33 02 c0       	push   0xc00233f8
c000dba6:	e8 5b 0b 01 00       	call   c001e706 <LinkedList<UnixFile>::removeFirst()>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbb2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dbb6:	74 40                	je     c000dbf8 <UnixFile::~UnixFile()+0x92>
c000dbb8:	83 ec 08             	sub    esp,0x8
c000dbbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dbbf:	68 f8 33 02 c0       	push   0xc00233f8
c000dbc4:	e8 61 0a 01 00       	call   c001e62a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbd0:	8d 50 01             	lea    edx,[eax+0x1]
c000dbd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbd7:	3d 88 13 00 00       	cmp    eax,0x1388
c000dbdc:	0f 94 c0             	sete   al
c000dbdf:	84 c0                	test   al,al
c000dbe1:	74 a7                	je     c000db8a <UnixFile::~UnixFile()+0x24>
c000dbe3:	83 ec 0c             	sub    esp,0xc
c000dbe6:	68 a8 02 02 c0       	push   0xc00202a8
c000dbeb:	e8 f4 6d 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000dbf0:	83 c4 10             	add    esp,0x10
c000dbf3:	eb 95                	jmp    c000db8a <UnixFile::~UnixFile()+0x24>
c000dbf5:	90                   	nop
c000dbf6:	eb 01                	jmp    c000dbf9 <UnixFile::~UnixFile()+0x93>
c000dbf8:	90                   	nop
c000dbf9:	90                   	nop
c000dbfa:	83 c4 1c             	add    esp,0x1c
c000dbfd:	c3                   	ret    

c000dbfe <UnixFile::~UnixFile()>:
c000dbfe:	83 ec 0c             	sub    esp,0xc
c000dc01:	83 ec 0c             	sub    esp,0xc
c000dc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc08:	e8 59 ff ff ff       	call   c000db66 <UnixFile::~UnixFile()>
c000dc0d:	83 c4 10             	add    esp,0x10
c000dc10:	83 ec 08             	sub    esp,0x8
c000dc13:	6a 0c                	push   0xc
c000dc15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc19:	e8 51 10 00 00       	call   c000ec6f <operator delete(void*, unsigned long)>
c000dc1e:	83 c4 10             	add    esp,0x10
c000dc21:	83 c4 0c             	add    esp,0xc
c000dc24:	c3                   	ret    
c000dc25:	90                   	nop

c000dc26 <ReservedFilename::~ReservedFilename()>:
c000dc26:	83 ec 0c             	sub    esp,0xc
c000dc29:	ba ec 02 02 c0       	mov    edx,0xc00202ec
c000dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc32:	89 10                	mov    DWORD PTR [eax],edx
c000dc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	50                   	push   eax
c000dc3c:	e8 25 ff ff ff       	call   c000db66 <UnixFile::~UnixFile()>
c000dc41:	83 c4 10             	add    esp,0x10
c000dc44:	90                   	nop
c000dc45:	83 c4 0c             	add    esp,0xc
c000dc48:	c3                   	ret    
c000dc49:	90                   	nop

c000dc4a <ReservedFilename::~ReservedFilename()>:
c000dc4a:	83 ec 0c             	sub    esp,0xc
c000dc4d:	83 ec 0c             	sub    esp,0xc
c000dc50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc54:	e8 cd ff ff ff       	call   c000dc26 <ReservedFilename::~ReservedFilename()>
c000dc59:	83 c4 10             	add    esp,0x10
c000dc5c:	83 ec 08             	sub    esp,0x8
c000dc5f:	6a 0c                	push   0xc
c000dc61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc65:	e8 05 10 00 00       	call   c000ec6f <operator delete(void*, unsigned long)>
c000dc6a:	83 c4 10             	add    esp,0x10
c000dc6d:	83 c4 0c             	add    esp,0xc
c000dc70:	c3                   	ret    

c000dc71 <getFromFileDescriptor(int)>:
c000dc71:	53                   	push   ebx
c000dc72:	83 ec 08             	sub    esp,0x8
c000dc75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc79:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dc7f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dc85:	7f 33                	jg     c000dcba <getFromFileDescriptor(int)+0x49>
c000dc87:	83 ec 0c             	sub    esp,0xc
c000dc8a:	68 f8 33 02 c0       	push   0xc00233f8
c000dc8f:	e8 6a 0a 01 00       	call   c001e6fe <LinkedList<UnixFile>::getFirstElement()>
c000dc94:	83 c4 10             	add    esp,0x10
c000dc97:	85 c0                	test   eax,eax
c000dc99:	75 07                	jne    c000dca2 <getFromFileDescriptor(int)+0x31>
c000dc9b:	31 c0                	xor    eax,eax
c000dc9d:	e9 98 00 00 00       	jmp    c000dd3a <getFromFileDescriptor(int)+0xc9>
c000dca2:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dca5:	0f 84 8f 00 00 00    	je     c000dd3a <getFromFileDescriptor(int)+0xc9>
c000dcab:	52                   	push   edx
c000dcac:	52                   	push   edx
c000dcad:	50                   	push   eax
c000dcae:	68 f8 33 02 c0       	push   0xc00233f8
c000dcb3:	e8 f0 0a 01 00       	call   c001e7a8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dcb8:	eb da                	jmp    c000dc94 <getFromFileDescriptor(int)+0x23>
c000dcba:	83 ec 0c             	sub    esp,0xc
c000dcbd:	68 c1 01 02 c0       	push   0xc00201c1
c000dcc2:	e8 88 10 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000dcc7:	83 c4 10             	add    esp,0x10
c000dcca:	a1 ec 33 02 c0       	mov    eax,ds:0xc00233ec
c000dccf:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dcd5:	74 63                	je     c000dd3a <getFromFileDescriptor(int)+0xc9>
c000dcd7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dcdd:	75 17                	jne    c000dcf6 <getFromFileDescriptor(int)+0x85>
c000dcdf:	83 ec 0c             	sub    esp,0xc
c000dce2:	68 e8 01 02 c0       	push   0xc00201e8
c000dce7:	e8 63 10 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000dcec:	a1 f0 33 02 c0       	mov    eax,ds:0xc00233f0
c000dcf1:	83 c4 10             	add    esp,0x10
c000dcf4:	eb 44                	jmp    c000dd3a <getFromFileDescriptor(int)+0xc9>
c000dcf6:	a1 e8 33 02 c0       	mov    eax,ds:0xc00233e8
c000dcfb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000dd01:	74 37                	je     c000dd3a <getFromFileDescriptor(int)+0xc9>
c000dd03:	a1 e4 33 02 c0       	mov    eax,ds:0xc00233e4
c000dd08:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000dd0e:	74 2a                	je     c000dd3a <getFromFileDescriptor(int)+0xc9>
c000dd10:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000dd16:	83 f8 08             	cmp    eax,0x8
c000dd19:	77 09                	ja     c000dd24 <getFromFileDescriptor(int)+0xb3>
c000dd1b:	8b 04 85 c0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc40]
c000dd22:	eb 16                	jmp    c000dd3a <getFromFileDescriptor(int)+0xc9>
c000dd24:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000dd2a:	83 fb 08             	cmp    ebx,0x8
c000dd2d:	0f 87 68 ff ff ff    	ja     c000dc9b <getFromFileDescriptor(int)+0x2a>
c000dd33:	8b 04 9d 80 33 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcc80]
c000dd3a:	83 c4 08             	add    esp,0x8
c000dd3d:	5b                   	pop    ebx
c000dd3e:	c3                   	ret    

c000dd3f <__static_initialization_and_destruction_0(int, int)>:
c000dd3f:	83 ec 0c             	sub    esp,0xc
c000dd42:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dd47:	75 34                	jne    c000dd7d <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dd49:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dd51:	75 2a                	jne    c000dd7d <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dd53:	83 ec 0c             	sub    esp,0xc
c000dd56:	68 f8 33 02 c0       	push   0xc00233f8
c000dd5b:	e8 72 08 01 00       	call   c001e5d2 <LinkedList<UnixFile>::LinkedList()>
c000dd60:	83 c4 10             	add    esp,0x10
c000dd63:	83 ec 04             	sub    esp,0x4
c000dd66:	68 d0 26 02 c0       	push   0xc00226d0
c000dd6b:	68 f8 33 02 c0       	push   0xc00233f8
c000dd70:	68 d0 e5 01 c0       	push   0xc001e5d0
c000dd75:	e8 71 0e 00 00       	call   c000ebeb <__cxa_atexit>
c000dd7a:	83 c4 10             	add    esp,0x10
c000dd7d:	90                   	nop
c000dd7e:	83 c4 0c             	add    esp,0xc
c000dd81:	c3                   	ret    

c000dd82 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dd82:	83 ec 0c             	sub    esp,0xc
c000dd85:	83 ec 08             	sub    esp,0x8
c000dd88:	68 ff ff 00 00       	push   0xffff
c000dd8d:	6a 01                	push   0x1
c000dd8f:	e8 ab ff ff ff       	call   c000dd3f <__static_initialization_and_destruction_0(int, int)>
c000dd94:	83 c4 10             	add    esp,0x10
c000dd97:	83 c4 0c             	add    esp,0xc
c000dd9a:	c3                   	ret    
c000dd9b:	90                   	nop

c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dd9c:	53                   	push   ebx
c000dd9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dda1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dda5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000ddab:	89 c8                	mov    eax,ecx
c000ddad:	d1 e8                	shr    eax,1
c000ddaf:	03 05 48 27 02 c0    	add    eax,DWORD PTR ds:0xc0022748
c000ddb5:	83 e1 01             	and    ecx,0x1
c000ddb8:	8a 10                	mov    dl,BYTE PTR [eax]
c000ddba:	75 09                	jne    c000ddc5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000ddbc:	83 e2 f0             	and    edx,0xfffffff0
c000ddbf:	09 da                	or     edx,ebx
c000ddc1:	88 10                	mov    BYTE PTR [eax],dl
c000ddc3:	5b                   	pop    ebx
c000ddc4:	c3                   	ret    
c000ddc5:	c1 e3 04             	shl    ebx,0x4
c000ddc8:	83 e2 0f             	and    edx,0xf
c000ddcb:	09 da                	or     edx,ebx
c000ddcd:	88 10                	mov    BYTE PTR [eax],dl
c000ddcf:	5b                   	pop    ebx
c000ddd0:	c3                   	ret    

c000ddd1 <Virt::getPageState(unsigned long)>:
c000ddd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddd5:	8b 0d 48 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022748
c000dddb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dde1:	89 d0                	mov    eax,edx
c000dde3:	d1 e8                	shr    eax,1
c000dde5:	83 e2 01             	and    edx,0x1
c000dde8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000ddeb:	75 04                	jne    c000ddf1 <Virt::getPageState(unsigned long)+0x20>
c000dded:	83 e0 0f             	and    eax,0xf
c000ddf0:	c3                   	ret    
c000ddf1:	c0 e8 04             	shr    al,0x4
c000ddf4:	c3                   	ret    

c000ddf5 <Virt::allocateKernelVirtualPages(int)>:
c000ddf5:	55                   	push   ebp
c000ddf6:	31 ed                	xor    ebp,ebp
c000ddf8:	57                   	push   edi
c000ddf9:	56                   	push   esi
c000ddfa:	53                   	push   ebx
c000ddfb:	31 db                	xor    ebx,ebx
c000ddfd:	83 ec 1c             	sub    esp,0x1c
c000de00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de04:	8b 3d 44 27 02 c0    	mov    edi,DWORD PTR ds:0xc0022744
c000de0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000de0f:	57                   	push   edi
c000de10:	e8 bc ff ff ff       	call   c000ddd1 <Virt::getPageState(unsigned long)>
c000de15:	5a                   	pop    edx
c000de16:	84 c0                	test   al,al
c000de18:	75 3a                	jne    c000de54 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000de1a:	85 db                	test   ebx,ebx
c000de1c:	75 02                	jne    c000de20 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000de1e:	89 fd                	mov    ebp,edi
c000de20:	43                   	inc    ebx
c000de21:	39 f3                	cmp    ebx,esi
c000de23:	74 5a                	je     c000de7f <Virt::allocateKernelVirtualPages(int)+0x8a>
c000de25:	47                   	inc    edi
c000de26:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000de2c:	76 31                	jbe    c000de5f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000de2e:	c7 05 44 27 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022744,0xc8000
c000de38:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000de3d:	75 28                	jne    c000de67 <Virt::allocateKernelVirtualPages(int)+0x72>
c000de3f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000de44:	bf 00 80 0c 00       	mov    edi,0xc8000
c000de49:	57                   	push   edi
c000de4a:	e8 82 ff ff ff       	call   c000ddd1 <Virt::getPageState(unsigned long)>
c000de4f:	5a                   	pop    edx
c000de50:	84 c0                	test   al,al
c000de52:	74 c6                	je     c000de1a <Virt::allocateKernelVirtualPages(int)+0x25>
c000de54:	31 db                	xor    ebx,ebx
c000de56:	47                   	inc    edi
c000de57:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000de5d:	77 cf                	ja     c000de2e <Virt::allocateKernelVirtualPages(int)+0x39>
c000de5f:	89 3d 44 27 02 c0    	mov    DWORD PTR ds:0xc0022744,edi
c000de65:	eb a8                	jmp    c000de0f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de67:	83 ec 0c             	sub    esp,0xc
c000de6a:	68 00 03 02 c0       	push   0xc0020300
c000de6f:	e8 70 6b 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000de74:	8b 3d 44 27 02 c0    	mov    edi,DWORD PTR ds:0xc0022744
c000de7a:	83 c4 10             	add    esp,0x10
c000de7d:	eb 90                	jmp    c000de0f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000de7f:	89 2d 44 27 02 c0    	mov    DWORD PTR ds:0xc0022744,ebp
c000de85:	4b                   	dec    ebx
c000de86:	74 5f                	je     c000dee7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000de88:	85 f6                	test   esi,esi
c000de8a:	74 3d                	je     c000dec9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de8c:	89 e8                	mov    eax,ebp
c000de8e:	31 db                	xor    ebx,ebx
c000de90:	8d 7e ff             	lea    edi,[esi-0x1]
c000de93:	eb 14                	jmp    c000dea9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000de95:	6a 01                	push   0x1
c000de97:	43                   	inc    ebx
c000de98:	50                   	push   eax
c000de99:	e8 fe fe ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de9e:	58                   	pop    eax
c000de9f:	39 f3                	cmp    ebx,esi
c000dea1:	5a                   	pop    edx
c000dea2:	74 25                	je     c000dec9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000dea4:	a1 44 27 02 c0       	mov    eax,ds:0xc0022744
c000dea9:	8d 50 01             	lea    edx,[eax+0x1]
c000deac:	85 db                	test   ebx,ebx
c000deae:	89 15 44 27 02 c0    	mov    DWORD PTR ds:0xc0022744,edx
c000deb4:	74 20                	je     c000ded6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000deb6:	39 df                	cmp    edi,ebx
c000deb8:	75 db                	jne    c000de95 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000deba:	6a 03                	push   0x3
c000debc:	43                   	inc    ebx
c000debd:	50                   	push   eax
c000debe:	e8 d9 fe ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dec3:	59                   	pop    ecx
c000dec4:	39 f3                	cmp    ebx,esi
c000dec6:	58                   	pop    eax
c000dec7:	75 db                	jne    c000dea4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dec9:	83 c4 1c             	add    esp,0x1c
c000decc:	89 e8                	mov    eax,ebp
c000dece:	5b                   	pop    ebx
c000decf:	c1 e0 0c             	shl    eax,0xc
c000ded2:	5e                   	pop    esi
c000ded3:	5f                   	pop    edi
c000ded4:	5d                   	pop    ebp
c000ded5:	c3                   	ret    
c000ded6:	6a 02                	push   0x2
c000ded8:	bb 01 00 00 00       	mov    ebx,0x1
c000dedd:	50                   	push   eax
c000dede:	e8 b9 fe ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dee3:	58                   	pop    eax
c000dee4:	5a                   	pop    edx
c000dee5:	eb bd                	jmp    c000dea4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dee7:	6a 04                	push   0x4
c000dee9:	8d 45 01             	lea    eax,[ebp+0x1]
c000deec:	55                   	push   ebp
c000deed:	a3 44 27 02 c0       	mov    ds:0xc0022744,eax
c000def2:	e8 a5 fe ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000def7:	59                   	pop    ecx
c000def8:	89 e8                	mov    eax,ebp
c000defa:	5b                   	pop    ebx
c000defb:	c1 e0 0c             	shl    eax,0xc
c000defe:	83 c4 1c             	add    esp,0x1c
c000df01:	5b                   	pop    ebx
c000df02:	5e                   	pop    esi
c000df03:	5f                   	pop    edi
c000df04:	5d                   	pop    ebp
c000df05:	c3                   	ret    

c000df06 <Virt::virtualMemorySetup()>:
c000df06:	53                   	push   ebx
c000df07:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000df0c:	83 ec 08             	sub    esp,0x8
c000df0f:	6a 0f                	push   0xf
c000df11:	53                   	push   ebx
c000df12:	43                   	inc    ebx
c000df13:	e8 84 fe ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df18:	59                   	pop    ecx
c000df19:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000df1f:	58                   	pop    eax
c000df20:	75 ed                	jne    c000df0f <Virt::virtualMemorySetup()+0x9>
c000df22:	83 ec 08             	sub    esp,0x8
c000df25:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000df2a:	68 00 00 00 c8       	push   0xc8000000
c000df2f:	68 87 04 02 c0       	push   0xc0020487
c000df34:	e8 16 0e 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000df39:	58                   	pop    eax
c000df3a:	5a                   	pop    edx
c000df3b:	68 00 f0 ff ef       	push   0xeffff000
c000df40:	68 9b 04 02 c0       	push   0xc002049b
c000df45:	e8 05 0e 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	83 ec 08             	sub    esp,0x8
c000df50:	6a 00                	push   0x0
c000df52:	53                   	push   ebx
c000df53:	43                   	inc    ebx
c000df54:	e8 43 fe ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df59:	83 c4 10             	add    esp,0x10
c000df5c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000df62:	75 e9                	jne    c000df4d <Virt::virtualMemorySetup()+0x47>
c000df64:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000df69:	83 ec 08             	sub    esp,0x8
c000df6c:	6a 0f                	push   0xf
c000df6e:	53                   	push   ebx
c000df6f:	43                   	inc    ebx
c000df70:	e8 27 fe ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df75:	83 c4 10             	add    esp,0x10
c000df78:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000df7e:	75 e9                	jne    c000df69 <Virt::virtualMemorySetup()+0x63>
c000df80:	83 c4 08             	add    esp,0x8
c000df83:	5b                   	pop    ebx
c000df84:	c3                   	ret    

c000df85 <Virt::getAKernelVAS()>:
c000df85:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c000df8a:	c3                   	ret    

c000df8b <Virt::setupPageSwapping(int)>:
c000df8b:	57                   	push   edi
c000df8c:	56                   	push   esi
c000df8d:	53                   	push   ebx
c000df8e:	83 ec 1c             	sub    esp,0x1c
c000df91:	68 14 01 00 00       	push   0x114
c000df96:	e8 c5 0c 00 00       	call   c000ec60 <operator new(unsigned long)>
c000df9b:	83 c4 0c             	add    esp,0xc
c000df9e:	89 c6                	mov    esi,eax
c000dfa0:	ff 35 f4 46 02 c0    	push   DWORD PTR ds:0xc00246f4
c000dfa6:	68 af 04 02 c0       	push   0xc00204af
c000dfab:	50                   	push   eax
c000dfac:	e8 cd 12 00 00       	call   c000f27e <File::File(char const*, Process*)>
c000dfb1:	89 34 24             	mov    DWORD PTR [esp],esi
c000dfb4:	e8 a1 14 00 00       	call   c000f45a <File::unlink()>
c000dfb9:	58                   	pop    eax
c000dfba:	5a                   	pop    edx
c000dfbb:	6a 12                	push   0x12
c000dfbd:	56                   	push   esi
c000dfbe:	e8 1f 13 00 00       	call   c000f2e2 <File::open(FileOpenMode)>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	85 c0                	test   eax,eax
c000dfc8:	0f 85 bf 00 00 00    	jne    c000e08d <Virt::setupPageSwapping(int)+0x102>
c000dfce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dfd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dfda:	c1 e3 08             	shl    ebx,0x8
c000dfdd:	83 ec 0c             	sub    esp,0xc
c000dfe0:	68 00 00 01 00       	push   0x10000
c000dfe5:	e8 34 dc ff ff       	call   c000bc1e <malloc>
c000dfea:	83 c4 0c             	add    esp,0xc
c000dfed:	89 c7                	mov    edi,eax
c000dfef:	68 00 00 01 00       	push   0x10000
c000dff4:	6a 00                	push   0x0
c000dff6:	50                   	push   eax
c000dff7:	e8 0c 26 ff ff       	call   c0000608 <memset>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	85 db                	test   ebx,ebx
c000e001:	79 03                	jns    c000e006 <Virt::setupPageSwapping(int)+0x7b>
c000e003:	83 c3 0f             	add    ebx,0xf
c000e006:	c1 fb 04             	sar    ebx,0x4
c000e009:	4b                   	dec    ebx
c000e00a:	83 fb ff             	cmp    ebx,0xffffffff
c000e00d:	74 4b                	je     c000e05a <Virt::setupPageSwapping(int)+0xcf>
c000e00f:	83 ec 0c             	sub    esp,0xc
c000e012:	8b 06                	mov    eax,DWORD PTR [esi]
c000e014:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e018:	52                   	push   edx
c000e019:	57                   	push   edi
c000e01a:	6a 00                	push   0x0
c000e01c:	68 00 00 01 00       	push   0x10000
c000e021:	56                   	push   esi
c000e022:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e025:	83 c4 20             	add    esp,0x20
c000e028:	85 c0                	test   eax,eax
c000e02a:	75 4e                	jne    c000e07a <Virt::setupPageSwapping(int)+0xef>
c000e02c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e030:	3d 00 00 01 00       	cmp    eax,0x10000
c000e035:	74 d2                	je     c000e009 <Virt::setupPageSwapping(int)+0x7e>
c000e037:	83 ec 08             	sub    esp,0x8
c000e03a:	4b                   	dec    ebx
c000e03b:	50                   	push   eax
c000e03c:	68 02 05 02 c0       	push   0xc0020502
c000e041:	e8 09 0d 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000e046:	c7 04 24 0b 05 02 c0 	mov    DWORD PTR [esp],0xc002050b
c000e04d:	e8 92 69 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e052:	83 c4 10             	add    esp,0x10
c000e055:	83 fb ff             	cmp    ebx,0xffffffff
c000e058:	75 b5                	jne    c000e00f <Virt::setupPageSwapping(int)+0x84>
c000e05a:	83 ec 0c             	sub    esp,0xc
c000e05d:	56                   	push   esi
c000e05e:	e8 dd 12 00 00       	call   c000f340 <File::close()>
c000e063:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e066:	e8 d3 db ff ff       	call   c000bc3e <rfree>
c000e06b:	89 34 24             	mov    DWORD PTR [esp],esi
c000e06e:	8b 06                	mov    eax,DWORD PTR [esi]
c000e070:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e073:	83 c4 20             	add    esp,0x20
c000e076:	5b                   	pop    ebx
c000e077:	5e                   	pop    esi
c000e078:	5f                   	pop    edi
c000e079:	c3                   	ret    
c000e07a:	83 ec 08             	sub    esp,0x8
c000e07d:	50                   	push   eax
c000e07e:	68 ea 04 02 c0       	push   0xc00204ea
c000e083:	e8 c7 0c 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	eb 9f                	jmp    c000e02c <Virt::setupPageSwapping(int)+0xa1>
c000e08d:	83 ec 08             	sub    esp,0x8
c000e090:	50                   	push   eax
c000e091:	68 c6 04 02 c0       	push   0xc00204c6
c000e096:	e8 b4 0c 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000e09b:	c7 04 24 cf 04 02 c0 	mov    DWORD PTR [esp],0xc00204cf
c000e0a2:	e8 3d 69 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	e9 1f ff ff ff       	jmp    c000dfce <Virt::setupPageSwapping(int)+0x43>
c000e0af:	90                   	nop

c000e0b0 <VAS::VAS()>:
c000e0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0bf:	a3 04 34 02 c0       	mov    ds:0xc0023404,eax
c000e0c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0c8:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0d0:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e0d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0d7:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e0de:	90                   	nop
c000e0df:	c3                   	ret    

c000e0e0 <VAS::VAS(VAS*)>:
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e0ee:	83 ec 0c             	sub    esp,0xc
c000e0f1:	68 20 03 02 c0       	push   0xc0020320
c000e0f6:	e8 e9 68 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e0fb:	83 c4 10             	add    esp,0x10
c000e0fe:	90                   	nop
c000e0ff:	83 c4 0c             	add    esp,0xc
c000e102:	c3                   	ret    
c000e103:	90                   	nop

c000e104 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e104:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e108:	89 c2                	mov    edx,eax
c000e10a:	c1 e8 0a             	shr    eax,0xa
c000e10d:	c1 ea 16             	shr    edx,0x16
c000e110:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e115:	19 c9                	sbb    ecx,ecx
c000e117:	c1 e2 0c             	shl    edx,0xc
c000e11a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e120:	25 fc 0f 00 00       	and    eax,0xffc
c000e125:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e12c:	01 d0                	add    eax,edx
c000e12e:	c3                   	ret    
c000e12f:	90                   	nop

c000e130 <VAS::getPageTableEntry(unsigned long)>:
c000e130:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e134:	89 ca                	mov    edx,ecx
c000e136:	c1 e9 0a             	shr    ecx,0xa
c000e139:	c1 ea 16             	shr    edx,0x16
c000e13c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e142:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e148:	c1 e0 0c             	shl    eax,0xc
c000e14b:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e14e:	c3                   	ret    

c000e14f <Virt::freeKernelVirtualPages(unsigned long)>:
c000e14f:	57                   	push   edi
c000e150:	56                   	push   esi
c000e151:	be 01 00 00 00       	mov    esi,0x1
c000e156:	53                   	push   ebx
c000e157:	83 ec 10             	sub    esp,0x10
c000e15a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e15e:	c1 eb 0c             	shr    ebx,0xc
c000e161:	eb 3f                	jmp    c000e1a2 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e163:	e8 1d fe ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c000e168:	83 ec 08             	sub    esp,0x8
c000e16b:	57                   	push   edi
c000e16c:	50                   	push   eax
c000e16d:	e8 be ff ff ff       	call   c000e130 <VAS::getPageTableEntry(unsigned long)>
c000e172:	83 c4 10             	add    esp,0x10
c000e175:	8b 00                	mov    eax,DWORD PTR [eax]
c000e177:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e17b:	f6 c4 04             	test   ah,0x4
c000e17e:	75 5f                	jne    c000e1df <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e180:	80 fa 04             	cmp    dl,0x4
c000e183:	74 78                	je     c000e1fd <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e185:	80 fa 02             	cmp    dl,0x2
c000e188:	0f 84 88 00 00 00    	je     c000e216 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e18e:	80 fa 03             	cmp    dl,0x3
c000e191:	0f 84 ad 00 00 00    	je     c000e244 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e197:	fe ca                	dec    dl
c000e199:	0f 84 92 00 00 00    	je     c000e231 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e19f:	43                   	inc    ebx
c000e1a0:	31 f6                	xor    esi,esi
c000e1a2:	53                   	push   ebx
c000e1a3:	e8 29 fc ff ff       	call   c000ddd1 <Virt::getPageState(unsigned long)>
c000e1a8:	5f                   	pop    edi
c000e1a9:	89 df                	mov    edi,ebx
c000e1ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e1af:	c1 e7 0c             	shl    edi,0xc
c000e1b2:	84 c0                	test   al,al
c000e1b4:	75 ad                	jne    c000e163 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e1b6:	83 ec 0c             	sub    esp,0xc
c000e1b9:	68 11 05 02 c0       	push   0xc0020511
c000e1be:	e8 21 68 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e1c3:	e8 bd fd ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c000e1c8:	5a                   	pop    edx
c000e1c9:	59                   	pop    ecx
c000e1ca:	57                   	push   edi
c000e1cb:	50                   	push   eax
c000e1cc:	e8 5f ff ff ff       	call   c000e130 <VAS::getPageTableEntry(unsigned long)>
c000e1d1:	83 c4 10             	add    esp,0x10
c000e1d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1d6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e1da:	f6 c4 04             	test   ah,0x4
c000e1dd:	74 c0                	je     c000e19f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e1df:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e1e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e1e8:	83 ec 0c             	sub    esp,0xc
c000e1eb:	50                   	push   eax
c000e1ec:	e8 4d df ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e1f1:	83 c4 10             	add    esp,0x10
c000e1f4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e1f8:	80 fa 04             	cmp    dl,0x4
c000e1fb:	75 88                	jne    c000e185 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e1fd:	89 f0                	mov    eax,esi
c000e1ff:	84 c0                	test   al,al
c000e201:	75 47                	jne    c000e24a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e203:	c7 44 24 20 44 03 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020344
c000e20b:	83 c4 10             	add    esp,0x10
c000e20e:	5b                   	pop    ebx
c000e20f:	5e                   	pop    esi
c000e210:	5f                   	pop    edi
c000e211:	e9 ce 67 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>
c000e216:	89 f0                	mov    eax,esi
c000e218:	84 c0                	test   al,al
c000e21a:	75 15                	jne    c000e231 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e21c:	83 ec 0c             	sub    esp,0xc
c000e21f:	68 2d 05 02 c0       	push   0xc002052d
c000e224:	e8 bb 67 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e229:	83 c4 10             	add    esp,0x10
c000e22c:	e9 6e ff ff ff       	jmp    c000e19f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e231:	83 ec 08             	sub    esp,0x8
c000e234:	6a 00                	push   0x0
c000e236:	53                   	push   ebx
c000e237:	e8 60 fb ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e23c:	83 c4 10             	add    esp,0x10
c000e23f:	e9 5b ff ff ff       	jmp    c000e19f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e244:	89 f0                	mov    eax,esi
c000e246:	84 c0                	test   al,al
c000e248:	75 15                	jne    c000e25f <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e24a:	83 ec 08             	sub    esp,0x8
c000e24d:	6a 00                	push   0x0
c000e24f:	53                   	push   ebx
c000e250:	e8 47 fb ff ff       	call   c000dd9c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e255:	83 c4 10             	add    esp,0x10
c000e258:	83 c4 10             	add    esp,0x10
c000e25b:	5b                   	pop    ebx
c000e25c:	5e                   	pop    esi
c000e25d:	5f                   	pop    edi
c000e25e:	c3                   	ret    
c000e25f:	c7 44 24 20 49 05 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020549
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	5b                   	pop    ebx
c000e26b:	5e                   	pop    esi
c000e26c:	5f                   	pop    edi
c000e26d:	e9 72 67 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>

c000e272 <VAS::freeAllocatedPages(unsigned long)>:
c000e272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e276:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e27a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e27e:	74 09                	je     c000e289 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e280:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e284:	e9 c6 fe ff ff       	jmp    c000e14f <Virt::freeKernelVirtualPages(unsigned long)>
c000e289:	c7 44 24 04 68 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020368
c000e291:	e9 b9 0a 00 00       	jmp    c000ed4f <Dbg::kprintf(char const*, ...)>

c000e296 <VAS::virtualToPhysical(unsigned long)>:
c000e296:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e29a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e29e:	e8 8d fe ff ff       	call   c000e130 <VAS::getPageTableEntry(unsigned long)>
c000e2a3:	5a                   	pop    edx
c000e2a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2a6:	59                   	pop    ecx
c000e2a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e2ac:	c3                   	ret    
c000e2ad:	90                   	nop

c000e2ae <VAS::mapOtherVASIn(bool, VAS*)>:
c000e2ae:	83 ec 0c             	sub    esp,0xc
c000e2b1:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e2b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2ba:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c1:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e2c4:	19 c0                	sbb    eax,eax
c000e2c6:	83 ca 03             	or     edx,0x3
c000e2c9:	83 e0 fc             	and    eax,0xfffffffc
c000e2cc:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e2d3:	e8 dd 02 01 00       	call   c001e5b5 <CPU::readCR3()>
c000e2d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2dc:	83 c4 0c             	add    esp,0xc
c000e2df:	e9 e3 02 01 00       	jmp    c001e5c7 <CPU::writeCR3(unsigned long)>

c000e2e4 <VAS::~VAS()>:
c000e2e4:	83 ec 2c             	sub    esp,0x2c
c000e2e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e2ef:	e8 3c 96 00 00       	call   c0017930 <lockScheduler()>
c000e2f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e2f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e2fe:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e304:	83 ec 04             	sub    esp,0x4
c000e307:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e30b:	6a 01                	push   0x1
c000e30d:	50                   	push   eax
c000e30e:	e8 9b ff ff ff       	call   c000e2ae <VAS::mapOtherVASIn(bool, VAS*)>
c000e313:	83 c4 10             	add    esp,0x10
c000e316:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e31e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e326:	0f 8f d7 00 00 00    	jg     c000e403 <VAS::~VAS()+0x11f>
c000e32c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e330:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e333:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e337:	c1 e2 02             	shl    edx,0x2
c000e33a:	01 d0                	add    eax,edx
c000e33c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e33e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e346:	83 e0 01             	and    eax,0x1
c000e349:	0f 84 ab 00 00 00    	je     c000e3fa <VAS::~VAS()+0x116>
c000e34f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e357:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e35f:	7f 75                	jg     c000e3d6 <VAS::~VAS()+0xf2>
c000e361:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e365:	c1 e0 0a             	shl    eax,0xa
c000e368:	89 c2                	mov    edx,eax
c000e36a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e36e:	01 d0                	add    eax,edx
c000e370:	c1 e0 0c             	shl    eax,0xc
c000e373:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e377:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e37e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e381:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e387:	83 ec 04             	sub    esp,0x4
c000e38a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e38e:	6a 01                	push   0x1
c000e390:	50                   	push   eax
c000e391:	e8 6e fd ff ff       	call   c000e104 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e396:	83 c4 10             	add    esp,0x10
c000e399:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e39d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e3a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ab:	25 01 04 00 00       	and    eax,0x401
c000e3b0:	3d 01 04 00 00       	cmp    eax,0x401
c000e3b5:	75 19                	jne    c000e3d0 <VAS::~VAS()+0xec>
c000e3b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e3c0:	83 ec 0c             	sub    esp,0xc
c000e3c3:	50                   	push   eax
c000e3c4:	e8 75 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e3c9:	83 c4 10             	add    esp,0x10
c000e3cc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e3d0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e3d4:	eb 81                	jmp    c000e357 <VAS::~VAS()+0x73>
c000e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3da:	25 00 04 00 00       	and    eax,0x400
c000e3df:	74 19                	je     c000e3fa <VAS::~VAS()+0x116>
c000e3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e3ea:	83 ec 0c             	sub    esp,0xc
c000e3ed:	50                   	push   eax
c000e3ee:	e8 4b dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e3f3:	83 c4 10             	add    esp,0x10
c000e3f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e3fa:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e3fe:	e9 1b ff ff ff       	jmp    c000e31e <VAS::~VAS()+0x3a>
c000e403:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e407:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e40a:	83 ec 0c             	sub    esp,0xc
c000e40d:	50                   	push   eax
c000e40e:	e8 3c fd ff ff       	call   c000e14f <Virt::freeKernelVirtualPages(unsigned long)>
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e41a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e41d:	83 ec 0c             	sub    esp,0xc
c000e420:	50                   	push   eax
c000e421:	e8 18 dd ff ff       	call   c000c13e <Phys::freePage(unsigned long)>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e42d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e431:	c1 e0 02             	shl    eax,0x2
c000e434:	83 ec 08             	sub    esp,0x8
c000e437:	50                   	push   eax
c000e438:	68 8c 03 02 c0       	push   0xc002038c
c000e43d:	e8 0d 09 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	e8 e8 94 00 00       	call   c0017932 <unlockScheduler()>
c000e44a:	90                   	nop
c000e44b:	83 c4 2c             	add    esp,0x2c
c000e44e:	c3                   	ret    
c000e44f:	90                   	nop

c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e450:	55                   	push   ebp
c000e451:	57                   	push   edi
c000e452:	56                   	push   esi
c000e453:	53                   	push   ebx
c000e454:	83 ec 1c             	sub    esp,0x1c
c000e457:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e45b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e45f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e465:	77 08                	ja     c000e46f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e467:	0f 20 d8             	mov    eax,cr3
c000e46a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e46d:	75 47                	jne    c000e4b6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e46f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e473:	09 d8                	or     eax,ebx
c000e475:	a9 ff 0f 00 00       	test   eax,0xfff
c000e47a:	75 57                	jne    c000e4d3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e47c:	89 de                	mov    esi,ebx
c000e47e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e481:	c1 ee 16             	shr    esi,0x16
c000e484:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e48b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e48f:	74 54                	je     c000e4e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e491:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e495:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e49b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e49f:	c1 e6 0c             	shl    esi,0xc
c000e4a2:	c1 eb 0a             	shr    ebx,0xa
c000e4a5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e4ab:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e4ae:	83 c4 1c             	add    esp,0x1c
c000e4b1:	5b                   	pop    ebx
c000e4b2:	5e                   	pop    esi
c000e4b3:	5f                   	pop    edi
c000e4b4:	5d                   	pop    ebp
c000e4b5:	c3                   	ret    
c000e4b6:	83 ec 0c             	sub    esp,0xc
c000e4b9:	68 ac 03 02 c0       	push   0xc00203ac
c000e4be:	e8 8c 08 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000e4c3:	83 c4 10             	add    esp,0x10
c000e4c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4ca:	09 d8                	or     eax,ebx
c000e4cc:	a9 ff 0f 00 00       	test   eax,0xfff
c000e4d1:	74 a9                	je     c000e47c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e4d3:	83 ec 0c             	sub    esp,0xc
c000e4d6:	68 14 04 02 c0       	push   0xc0020414
c000e4db:	e8 04 65 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e4e0:	83 c4 10             	add    esp,0x10
c000e4e3:	eb 97                	jmp    c000e47c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e4e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e4e9:	e8 da dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e4ee:	89 c5                	mov    ebp,eax
c000e4f0:	e8 90 fa ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e4fc:	6a 01                	push   0x1
c000e4fe:	e8 f2 f8 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c000e503:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e50a:	6a 01                	push   0x1
c000e50c:	50                   	push   eax
c000e50d:	55                   	push   ebp
c000e50e:	81 cd 07 04 00 00    	or     ebp,0x407
c000e514:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e518:	51                   	push   ecx
c000e519:	e8 1e 02 00 00       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e51e:	83 c4 1c             	add    esp,0x1c
c000e521:	68 00 10 00 00       	push   0x1000
c000e526:	6a 00                	push   0x0
c000e528:	50                   	push   eax
c000e529:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e52d:	e8 d6 20 ff ff       	call   c0000608 <memset>
c000e532:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e536:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e539:	e8 11 fc ff ff       	call   c000e14f <Virt::freeKernelVirtualPages(unsigned long)>
c000e53e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e542:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e545:	83 c4 10             	add    esp,0x10
c000e548:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e54b:	e9 41 ff ff ff       	jmp    c000e491 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e550 <VAS::allocatePages(int, int)>:
c000e550:	55                   	push   ebp
c000e551:	57                   	push   edi
c000e552:	56                   	push   esi
c000e553:	53                   	push   ebx
c000e554:	83 ec 1c             	sub    esp,0x1c
c000e557:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e55b:	e8 7e 57 00 00       	call   c0013cde <thisCPU()>
c000e560:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e566:	83 e0 01             	and    eax,0x1
c000e569:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e56d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e571:	0f 85 d7 00 00 00    	jne    c000e64e <VAS::allocatePages(int, int)+0xfe>
c000e577:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e57a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e57e:	85 c0                	test   eax,eax
c000e580:	0f 84 ac 00 00 00    	je     c000e632 <VAS::allocatePages(int, int)+0xe2>
c000e586:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e58a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e58e:	c1 e6 0c             	shl    esi,0xc
c000e591:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e595:	85 c0                	test   eax,eax
c000e597:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e59a:	7e 33                	jle    c000e5cf <VAS::allocatePages(int, int)+0x7f>
c000e59c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e5a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5a4:	81 cd 00 04 00 00    	or     ebp,0x400
c000e5aa:	e8 19 dc ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e5af:	55                   	push   ebp
c000e5b0:	53                   	push   ebx
c000e5b1:	50                   	push   eax
c000e5b2:	57                   	push   edi
c000e5b3:	e8 98 fe ff ff       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e5b8:	83 c4 10             	add    esp,0x10
c000e5bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5c0:	74 03                	je     c000e5c5 <VAS::allocatePages(int, int)+0x75>
c000e5c2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e5cb:	39 de                	cmp    esi,ebx
c000e5cd:	75 db                	jne    c000e5aa <VAS::allocatePages(int, int)+0x5a>
c000e5cf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5d4:	74 3f                	je     c000e615 <VAS::allocatePages(int, int)+0xc5>
c000e5d6:	c1 ee 0a             	shr    esi,0xa
c000e5d9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5dd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e5e3:	c1 eb 0a             	shr    ebx,0xa
c000e5e6:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e5ec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e5f2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e5f8:	39 f3                	cmp    ebx,esi
c000e5fa:	77 0d                	ja     c000e609 <VAS::allocatePages(int, int)+0xb9>
c000e5fc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5ff:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e605:	39 de                	cmp    esi,ebx
c000e607:	73 f3                	jae    c000e5fc <VAS::allocatePages(int, int)+0xac>
c000e609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e60d:	83 c4 1c             	add    esp,0x1c
c000e610:	5b                   	pop    ebx
c000e611:	5e                   	pop    esi
c000e612:	5f                   	pop    edi
c000e613:	5d                   	pop    ebp
c000e614:	c3                   	ret    
c000e615:	e8 9b ff 00 00       	call   c001e5b5 <CPU::readCR3()>
c000e61a:	83 ec 0c             	sub    esp,0xc
c000e61d:	50                   	push   eax
c000e61e:	e8 a4 ff 00 00       	call   c001e5c7 <CPU::writeCR3(unsigned long)>
c000e623:	83 c4 10             	add    esp,0x10
c000e626:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e62a:	83 c4 1c             	add    esp,0x1c
c000e62d:	5b                   	pop    ebx
c000e62e:	5e                   	pop    esi
c000e62f:	5f                   	pop    edi
c000e630:	5d                   	pop    ebp
c000e631:	c3                   	ret    
c000e632:	83 ec 0c             	sub    esp,0xc
c000e635:	68 38 04 02 c0       	push   0xc0020438
c000e63a:	e8 a5 63 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e63f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e642:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e646:	83 c4 10             	add    esp,0x10
c000e649:	e9 38 ff ff ff       	jmp    c000e586 <VAS::allocatePages(int, int)+0x36>
c000e64e:	83 ec 0c             	sub    esp,0xc
c000e651:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e655:	e8 9b f7 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c000e65a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e65e:	83 c4 10             	add    esp,0x10
c000e661:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e666:	0f 87 94 00 00 00    	ja     c000e700 <VAS::allocatePages(int, int)+0x1b0>
c000e66c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e670:	85 d2                	test   edx,edx
c000e672:	7e 3c                	jle    c000e6b0 <VAS::allocatePages(int, int)+0x160>
c000e674:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e678:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e67c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e680:	c1 e5 0c             	shl    ebp,0xc
c000e683:	81 ce 00 04 00 00    	or     esi,0x400
c000e689:	01 dd                	add    ebp,ebx
c000e68b:	e8 38 db ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e690:	56                   	push   esi
c000e691:	53                   	push   ebx
c000e692:	50                   	push   eax
c000e693:	57                   	push   edi
c000e694:	e8 b7 fd ff ff       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e699:	83 c4 10             	add    esp,0x10
c000e69c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6a1:	74 03                	je     c000e6a6 <VAS::allocatePages(int, int)+0x156>
c000e6a3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6a6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6ac:	39 dd                	cmp    ebp,ebx
c000e6ae:	75 db                	jne    c000e68b <VAS::allocatePages(int, int)+0x13b>
c000e6b0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6b5:	0f 84 5a ff ff ff    	je     c000e615 <VAS::allocatePages(int, int)+0xc5>
c000e6bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6c3:	89 d3                	mov    ebx,edx
c000e6c5:	c1 e0 0c             	shl    eax,0xc
c000e6c8:	c1 eb 0a             	shr    ebx,0xa
c000e6cb:	01 d0                	add    eax,edx
c000e6cd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e6d3:	c1 e8 0a             	shr    eax,0xa
c000e6d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e6dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6e1:	2d 00 00 40 00       	sub    eax,0x400000
c000e6e6:	39 c3                	cmp    ebx,eax
c000e6e8:	0f 87 1b ff ff ff    	ja     c000e609 <VAS::allocatePages(int, int)+0xb9>
c000e6ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6f7:	39 d8                	cmp    eax,ebx
c000e6f9:	73 f3                	jae    c000e6ee <VAS::allocatePages(int, int)+0x19e>
c000e6fb:	e9 09 ff ff ff       	jmp    c000e609 <VAS::allocatePages(int, int)+0xb9>
c000e700:	e8 d9 55 00 00       	call   c0013cde <thisCPU()>
c000e705:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e70c:	0f 84 5a ff ff ff    	je     c000e66c <VAS::allocatePages(int, int)+0x11c>
c000e712:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e71a:	e9 4d ff ff ff       	jmp    c000e66c <VAS::allocatePages(int, int)+0x11c>
c000e71f:	90                   	nop

c000e720 <VAS::setCPUSpecific(unsigned long)>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	6a 05                	push   0x5
c000e725:	68 00 00 40 c2       	push   0xc2400000
c000e72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e732:	e8 19 fd ff ff       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e737:	83 c4 1c             	add    esp,0x1c
c000e73a:	c3                   	ret    
c000e73b:	90                   	nop

c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e73c:	55                   	push   ebp
c000e73d:	57                   	push   edi
c000e73e:	56                   	push   esi
c000e73f:	53                   	push   ebx
c000e740:	83 ec 1c             	sub    esp,0x1c
c000e743:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e747:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e74b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e74f:	e8 8a 55 00 00       	call   c0013cde <thisCPU()>
c000e754:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e75a:	83 e0 01             	and    eax,0x1
c000e75d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e761:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e765:	85 c0                	test   eax,eax
c000e767:	7e 39                	jle    c000e7a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e769:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e76d:	89 f3                	mov    ebx,esi
c000e76f:	c1 e0 0c             	shl    eax,0xc
c000e772:	01 f0                	add    eax,esi
c000e774:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e778:	55                   	push   ebp
c000e779:	53                   	push   ebx
c000e77a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e77e:	29 f0                	sub    eax,esi
c000e780:	01 d8                	add    eax,ebx
c000e782:	50                   	push   eax
c000e783:	57                   	push   edi
c000e784:	e8 c7 fc ff ff       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e789:	83 c4 10             	add    esp,0x10
c000e78c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e791:	74 03                	je     c000e796 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e793:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e796:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e79c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e7a0:	75 d6                	jne    c000e778 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e7a2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e7a7:	74 42                	je     c000e7eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e7a9:	89 f3                	mov    ebx,esi
c000e7ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e7af:	c1 eb 0a             	shr    ebx,0xa
c000e7b2:	c1 e0 0c             	shl    eax,0xc
c000e7b5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e7bb:	01 f0                	add    eax,esi
c000e7bd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e7c3:	c1 e8 0a             	shr    eax,0xa
c000e7c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7cb:	2d 00 00 40 00       	sub    eax,0x400000
c000e7d0:	39 c3                	cmp    ebx,eax
c000e7d2:	77 0d                	ja     c000e7e1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e7d4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e7d7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e7dd:	39 d8                	cmp    eax,ebx
c000e7df:	73 f3                	jae    c000e7d4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e7e1:	83 c4 1c             	add    esp,0x1c
c000e7e4:	89 f0                	mov    eax,esi
c000e7e6:	5b                   	pop    ebx
c000e7e7:	5e                   	pop    esi
c000e7e8:	5f                   	pop    edi
c000e7e9:	5d                   	pop    ebp
c000e7ea:	c3                   	ret    
c000e7eb:	e8 c5 fd 00 00       	call   c001e5b5 <CPU::readCR3()>
c000e7f0:	83 ec 0c             	sub    esp,0xc
c000e7f3:	50                   	push   eax
c000e7f4:	e8 ce fd 00 00       	call   c001e5c7 <CPU::writeCR3(unsigned long)>
c000e7f9:	89 f0                	mov    eax,esi
c000e7fb:	83 c4 10             	add    esp,0x10
c000e7fe:	83 c4 1c             	add    esp,0x1c
c000e801:	5b                   	pop    ebx
c000e802:	5e                   	pop    esi
c000e803:	5f                   	pop    edi
c000e804:	5d                   	pop    ebp
c000e805:	c3                   	ret    

c000e806 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000e806:	55                   	push   ebp
c000e807:	57                   	push   edi
c000e808:	56                   	push   esi
c000e809:	53                   	push   ebx
c000e80a:	83 ec 1c             	sub    esp,0x1c
c000e80d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e811:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e815:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000e819:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e81d:	a9 ff 0f 00 00       	test   eax,0xfff
c000e822:	75 4a                	jne    c000e86e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000e824:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e828:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e82b:	c1 eb 16             	shr    ebx,0x16
c000e82e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000e835:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000e839:	74 4d                	je     c000e888 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000e83b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e83f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000e843:	c1 e8 0a             	shr    eax,0xa
c000e846:	80 fa 01             	cmp    dl,0x1
c000e849:	19 d2                	sbb    edx,edx
c000e84b:	c1 e3 0c             	shl    ebx,0xc
c000e84e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000e852:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000e858:	25 fc 0f 00 00       	and    eax,0xffc
c000e85d:	01 d8                	add    eax,ebx
c000e85f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000e866:	83 c4 1c             	add    esp,0x1c
c000e869:	5b                   	pop    ebx
c000e86a:	5e                   	pop    esi
c000e86b:	5f                   	pop    edi
c000e86c:	5d                   	pop    ebp
c000e86d:	c3                   	ret    
c000e86e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	68 64 04 02 c0       	push   0xc0020464
c000e87a:	e8 65 61 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e886:	eb 9c                	jmp    c000e824 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000e888:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e88c:	e8 37 d9 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e891:	89 c5                	mov    ebp,eax
c000e893:	e8 ed f6 ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c000e898:	83 ec 0c             	sub    esp,0xc
c000e89b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e89f:	6a 01                	push   0x1
c000e8a1:	e8 4f f5 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c000e8a6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8ad:	6a 01                	push   0x1
c000e8af:	50                   	push   eax
c000e8b0:	55                   	push   ebp
c000e8b1:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8b7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8bb:	51                   	push   ecx
c000e8bc:	e8 7b fe ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8c1:	83 c4 1c             	add    esp,0x1c
c000e8c4:	68 00 10 00 00       	push   0x1000
c000e8c9:	6a 00                	push   0x0
c000e8cb:	50                   	push   eax
c000e8cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8d0:	e8 33 1d ff ff       	call   c0000608 <memset>
c000e8d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8d9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8dc:	e8 6e f8 ff ff       	call   c000e14f <Virt::freeKernelVirtualPages(unsigned long)>
c000e8e1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8e4:	83 c4 10             	add    esp,0x10
c000e8e7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000e8ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8ee:	e9 48 ff ff ff       	jmp    c000e83b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000e8f3:	90                   	nop

c000e8f4 <VAS::VAS(bool)>:
c000e8f4:	53                   	push   ebx
c000e8f5:	83 ec 28             	sub    esp,0x28
c000e8f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e90b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e90f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000e913:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e916:	e8 ad d8 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000e91b:	89 c2                	mov    edx,eax
c000e91d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e921:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e924:	e8 5c f6 ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c000e929:	89 c3                	mov    ebx,eax
c000e92b:	83 ec 0c             	sub    esp,0xc
c000e92e:	6a 01                	push   0x1
c000e930:	e8 c0 f4 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	89 c2                	mov    edx,eax
c000e93a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e93e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e941:	83 ec 0c             	sub    esp,0xc
c000e944:	6a 03                	push   0x3
c000e946:	6a 01                	push   0x1
c000e948:	52                   	push   edx
c000e949:	50                   	push   eax
c000e94a:	53                   	push   ebx
c000e94b:	e8 ec fd ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e950:	83 c4 20             	add    esp,0x20
c000e953:	89 c2                	mov    edx,eax
c000e955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e959:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e95c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e964:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000e96c:	7f 1c                	jg     c000e98a <VAS::VAS(bool)+0x96>
c000e96e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e972:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e975:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e979:	c1 e2 02             	shl    edx,0x2
c000e97c:	01 d0                	add    eax,edx
c000e97e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000e984:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e988:	eb da                	jmp    c000e964 <VAS::VAS(bool)+0x70>
c000e98a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000e992:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000e99a:	7f 71                	jg     c000ea0d <VAS::VAS(bool)+0x119>
c000e99c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9a0:	2d 00 02 00 00       	sub    eax,0x200
c000e9a5:	c1 e0 0c             	shl    eax,0xc
c000e9a8:	83 c8 03             	or     eax,0x3
c000e9ab:	89 c3                	mov    ebx,eax
c000e9ad:	e8 2c 53 00 00       	call   c0013cde <thisCPU()>
c000e9b2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000e9b8:	83 e0 10             	and    eax,0x10
c000e9bb:	84 c0                	test   al,al
c000e9bd:	74 07                	je     c000e9c6 <VAS::VAS(bool)+0xd2>
c000e9bf:	b8 00 01 00 00       	mov    eax,0x100
c000e9c4:	eb 05                	jmp    c000e9cb <VAS::VAS(bool)+0xd7>
c000e9c6:	b8 00 00 00 00       	mov    eax,0x0
c000e9cb:	09 d8                	or     eax,ebx
c000e9cd:	89 c1                	mov    ecx,eax
c000e9cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e9d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9da:	c1 e2 02             	shl    edx,0x2
c000e9dd:	01 d0                	add    eax,edx
c000e9df:	89 ca                	mov    edx,ecx
c000e9e1:	89 10                	mov    DWORD PTR [eax],edx
c000e9e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9e7:	2d 40 03 00 00       	sub    eax,0x340
c000e9ec:	83 f8 7f             	cmp    eax,0x7f
c000e9ef:	77 16                	ja     c000ea07 <VAS::VAS(bool)+0x113>
c000e9f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e9f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9fc:	c1 e2 02             	shl    edx,0x2
c000e9ff:	01 d0                	add    eax,edx
c000ea01:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ea07:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ea0b:	eb 85                	jmp    c000e992 <VAS::VAS(bool)+0x9e>
c000ea0d:	e8 cc 52 00 00       	call   c0013cde <thisCPU()>
c000ea12:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ea18:	83 e0 10             	and    eax,0x10
c000ea1b:	84 c0                	test   al,al
c000ea1d:	74 07                	je     c000ea26 <VAS::VAS(bool)+0x132>
c000ea1f:	b8 03 41 00 00       	mov    eax,0x4103
c000ea24:	eb 05                	jmp    c000ea2b <VAS::VAS(bool)+0x137>
c000ea26:	b8 03 40 00 00       	mov    eax,0x4003
c000ea2b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ea2f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ea32:	81 c2 20 0c 00 00    	add    edx,0xc20
c000ea38:	89 02                	mov    DWORD PTR [edx],eax
c000ea3a:	e8 9f 52 00 00       	call   c0013cde <thisCPU()>
c000ea3f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ea45:	83 ec 08             	sub    esp,0x8
c000ea48:	50                   	push   eax
c000ea49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea4d:	e8 ce fc ff ff       	call   c000e720 <VAS::setCPUSpecific(unsigned long)>
c000ea52:	83 c4 10             	add    esp,0x10
c000ea55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea59:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ea5c:	e8 7d 52 00 00       	call   c0013cde <thisCPU()>
c000ea61:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ea67:	83 e0 10             	and    eax,0x10
c000ea6a:	84 c0                	test   al,al
c000ea6c:	74 07                	je     c000ea75 <VAS::VAS(bool)+0x181>
c000ea6e:	b8 00 01 00 00       	mov    eax,0x100
c000ea73:	eb 05                	jmp    c000ea7a <VAS::VAS(bool)+0x186>
c000ea75:	b8 00 00 00 00       	mov    eax,0x0
c000ea7a:	09 d8                	or     eax,ebx
c000ea7c:	89 c2                	mov    edx,eax
c000ea7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea85:	05 fc 0f 00 00       	add    eax,0xffc
c000ea8a:	83 ca 03             	or     edx,0x3
c000ea8d:	89 10                	mov    DWORD PTR [eax],edx
c000ea8f:	e8 4a 52 00 00       	call   c0013cde <thisCPU()>
c000ea94:	83 ec 0c             	sub    esp,0xc
c000ea97:	50                   	push   eax
c000ea98:	e8 9f 19 00 00       	call   c001043c <Device::getName()>
c000ea9d:	83 c4 10             	add    esp,0x10
c000eaa0:	83 ec 08             	sub    esp,0x8
c000eaa3:	68 63 05 02 c0       	push   0xc0020563
c000eaa8:	50                   	push   eax
c000eaa9:	e8 4a 1c ff ff       	call   c00006f8 <strcmp>
c000eaae:	83 c4 10             	add    esp,0x10
c000eab1:	85 c0                	test   eax,eax
c000eab3:	0f 94 c0             	sete   al
c000eab6:	84 c0                	test   al,al
c000eab8:	74 64                	je     c000eb1e <VAS::VAS(bool)+0x22a>
c000eaba:	e8 54 8e 00 00       	call   c0017913 <disableIRQs()>
c000eabf:	e8 1a 52 00 00       	call   c0013cde <thisCPU()>
c000eac4:	05 7c 09 00 00       	add    eax,0x97c
c000eac9:	83 ec 0c             	sub    esp,0xc
c000eacc:	50                   	push   eax
c000eacd:	e8 be cb ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eada:	89 c3                	mov    ebx,eax
c000eadc:	e8 fd 51 00 00       	call   c0013cde <thisCPU()>
c000eae1:	05 7c 09 00 00       	add    eax,0x97c
c000eae6:	83 ec 0c             	sub    esp,0xc
c000eae9:	50                   	push   eax
c000eaea:	e8 a1 cb ff ff       	call   c000b690 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eaef:	83 c4 10             	add    esp,0x10
c000eaf2:	83 ec 08             	sub    esp,0x8
c000eaf5:	50                   	push   eax
c000eaf6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eafa:	e8 31 f6 ff ff       	call   c000e130 <VAS::getPageTableEntry(unsigned long)>
c000eaff:	83 c4 10             	add    esp,0x10
c000eb02:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb04:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb09:	6a 11                	push   0x11
c000eb0b:	53                   	push   ebx
c000eb0c:	50                   	push   eax
c000eb0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb11:	e8 3a f9 ff ff       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb16:	83 c4 10             	add    esp,0x10
c000eb19:	e8 03 8e 00 00       	call   c0017921 <enableIRQs()>
c000eb1e:	90                   	nop
c000eb1f:	83 c4 28             	add    esp,0x28
c000eb22:	5b                   	pop    ebx
c000eb23:	c3                   	ret    

c000eb24 <mapVASFirstTime>:
c000eb24:	55                   	push   ebp
c000eb25:	57                   	push   edi
c000eb26:	56                   	push   esi
c000eb27:	53                   	push   ebx
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb30:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eb33:	4a                   	dec    edx
c000eb34:	0f 84 99 00 00 00    	je     c000ebd3 <mapVASFirstTime+0xaf>
c000eb3a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000eb3d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000eb40:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000eb45:	c1 e5 15             	shl    ebp,0x15
c000eb48:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000eb4d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000eb53:	29 eb                	sub    ebx,ebp
c000eb55:	29 ee                	sub    esi,ebp
c000eb57:	e8 6c d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	68 03 04 00 00       	push   0x403
c000eb64:	6a 01                	push   0x1
c000eb66:	53                   	push   ebx
c000eb67:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000eb6d:	50                   	push   eax
c000eb6e:	57                   	push   edi
c000eb6f:	e8 c8 fb ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb74:	83 c4 20             	add    esp,0x20
c000eb77:	39 f3                	cmp    ebx,esi
c000eb79:	75 dc                	jne    c000eb57 <mapVASFirstTime+0x33>
c000eb7b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000eb80:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000eb85:	29 ee                	sub    esi,ebp
c000eb87:	29 e8                	sub    eax,ebp
c000eb89:	89 c5                	mov    ebp,eax
c000eb8b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000eb8f:	19 db                	sbb    ebx,ebx
c000eb91:	e8 32 d6 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c000eb96:	83 e3 04             	and    ebx,0x4
c000eb99:	83 ec 0c             	sub    esp,0xc
c000eb9c:	81 c3 03 04 00 00    	add    ebx,0x403
c000eba2:	53                   	push   ebx
c000eba3:	6a 01                	push   0x1
c000eba5:	56                   	push   esi
c000eba6:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ebac:	50                   	push   eax
c000ebad:	57                   	push   edi
c000ebae:	e8 89 fb ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ebb3:	83 c4 20             	add    esp,0x20
c000ebb6:	39 f5                	cmp    ebp,esi
c000ebb8:	75 d1                	jne    c000eb8b <mapVASFirstTime+0x67>
c000ebba:	e8 f6 f9 00 00       	call   c001e5b5 <CPU::readCR3()>
c000ebbf:	83 ec 0c             	sub    esp,0xc
c000ebc2:	50                   	push   eax
c000ebc3:	e8 ff f9 00 00       	call   c001e5c7 <CPU::writeCR3(unsigned long)>
c000ebc8:	83 c4 10             	add    esp,0x10
c000ebcb:	83 c4 0c             	add    esp,0xc
c000ebce:	5b                   	pop    ebx
c000ebcf:	5e                   	pop    esi
c000ebd0:	5f                   	pop    edi
c000ebd1:	5d                   	pop    ebp
c000ebd2:	c3                   	ret    
c000ebd3:	83 ec 0c             	sub    esp,0xc
c000ebd6:	68 71 05 02 c0       	push   0xc0020571
c000ebdb:	e8 6f 01 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	83 c4 0c             	add    esp,0xc
c000ebe6:	5b                   	pop    ebx
c000ebe7:	5e                   	pop    esi
c000ebe8:	5f                   	pop    edi
c000ebe9:	5d                   	pop    ebp
c000ebea:	c3                   	ret    

c000ebeb <__cxa_atexit>:
c000ebeb:	31 c0                	xor    eax,eax
c000ebed:	c3                   	ret    

c000ebee <__cxa_finalize>:
c000ebee:	c3                   	ret    

c000ebef <__stack_chk_fail>:
c000ebef:	55                   	push   ebp
c000ebf0:	89 e5                	mov    ebp,esp
c000ebf2:	83 ec 10             	sub    esp,0x10
c000ebf5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ebf8:	68 8a 05 02 c0       	push   0xc002058a
c000ebfd:	e8 4d 01 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000ec02:	58                   	pop    eax
c000ec03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec06:	5a                   	pop    edx
c000ec07:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ec0a:	68 8a 05 02 c0       	push   0xc002058a
c000ec0f:	e8 3b 01 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000ec14:	59                   	pop    ecx
c000ec15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec18:	5a                   	pop    edx
c000ec19:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec1b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ec1e:	68 8a 05 02 c0       	push   0xc002058a
c000ec23:	e8 27 01 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000ec28:	59                   	pop    ecx
c000ec29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec2c:	5a                   	pop    edx
c000ec2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec31:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ec34:	68 8a 05 02 c0       	push   0xc002058a
c000ec39:	e8 11 01 00 00       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c000ec3e:	c7 04 24 92 05 02 c0 	mov    DWORD PTR [esp],0xc0020592
c000ec45:	e8 9a 5d 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	c9                   	leave  
c000ec4e:	c3                   	ret    

c000ec4f <__cxa_pure_virtual>:
c000ec4f:	83 ec 18             	sub    esp,0x18
c000ec52:	68 aa 05 02 c0       	push   0xc00205aa
c000ec57:	e8 88 5d 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000ec5c:	83 c4 1c             	add    esp,0x1c
c000ec5f:	c3                   	ret    

c000ec60 <operator new(unsigned long)>:
c000ec60:	e9 b9 cf ff ff       	jmp    c000bc1e <malloc>

c000ec65 <operator new[](unsigned long)>:
c000ec65:	e9 b4 cf ff ff       	jmp    c000bc1e <malloc>

c000ec6a <operator delete(void*)>:
c000ec6a:	e9 cf cf ff ff       	jmp    c000bc3e <rfree>

c000ec6f <operator delete(void*, unsigned long)>:
c000ec6f:	e9 ca cf ff ff       	jmp    c000bc3e <rfree>

c000ec74 <operator delete[](void*)>:
c000ec74:	e9 c5 cf ff ff       	jmp    c000bc3e <rfree>

c000ec79 <operator delete[](void*, unsigned long)>:
c000ec79:	e9 c0 cf ff ff       	jmp    c000bc3e <rfree>

c000ec7e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ec7e:	57                   	push   edi
c000ec7f:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ec84:	56                   	push   esi
c000ec85:	be c0 05 02 c0       	mov    esi,0xc00205c0
c000ec8a:	53                   	push   ebx
c000ec8b:	83 ec 40             	sub    esp,0x40
c000ec8e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ec92:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ec96:	fc                   	cld    
c000ec97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ec99:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ec9d:	83 f9 3e             	cmp    ecx,0x3e
c000eca0:	7e 05                	jle    c000eca7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000eca2:	b9 3e 00 00 00       	mov    ecx,0x3e
c000eca7:	89 df                	mov    edi,ebx
c000eca9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ecad:	eb 02                	jmp    c000ecb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ecaf:	89 c7                	mov    edi,eax
c000ecb1:	31 d2                	xor    edx,edx
c000ecb3:	46                   	inc    esi
c000ecb4:	89 f8                	mov    eax,edi
c000ecb6:	f7 f1                	div    ecx
c000ecb8:	39 cf                	cmp    edi,ecx
c000ecba:	73 f3                	jae    c000ecaf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ecbc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ecbf:	eb 02                	jmp    c000ecc3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ecc1:	89 c3                	mov    ebx,eax
c000ecc3:	31 d2                	xor    edx,edx
c000ecc5:	4e                   	dec    esi
c000ecc6:	89 d8                	mov    eax,ebx
c000ecc8:	f7 f1                	div    ecx
c000ecca:	39 cb                	cmp    ebx,ecx
c000eccc:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ecd0:	88 16                	mov    BYTE PTR [esi],dl
c000ecd2:	73 ed                	jae    c000ecc1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ecd4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ecd8:	83 c4 40             	add    esp,0x40
c000ecdb:	5b                   	pop    ebx
c000ecdc:	5e                   	pop    esi
c000ecdd:	5f                   	pop    edi
c000ecde:	c3                   	ret    

c000ecdf <Dbg::logc(char)>:
c000ecdf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ece3:	ba fd 03 00 00       	mov    edx,0x3fd
c000ece8:	ec                   	in     al,dx
c000ece9:	a8 20                	test   al,0x20
c000eceb:	74 fb                	je     c000ece8 <Dbg::logc(char)+0x9>
c000eced:	ba f8 03 00 00       	mov    edx,0x3f8
c000ecf2:	88 c8                	mov    al,cl
c000ecf4:	ee                   	out    dx,al
c000ecf5:	c3                   	ret    

c000ecf6 <Dbg::logs(char*)>:
c000ecf6:	53                   	push   ebx
c000ecf7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ecfb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ecfe:	84 c0                	test   al,al
c000ed00:	74 0f                	je     c000ed11 <Dbg::logs(char*)+0x1b>
c000ed02:	50                   	push   eax
c000ed03:	43                   	inc    ebx
c000ed04:	e8 d6 ff ff ff       	call   c000ecdf <Dbg::logc(char)>
c000ed09:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ed0c:	5a                   	pop    edx
c000ed0d:	84 c0                	test   al,al
c000ed0f:	75 f1                	jne    c000ed02 <Dbg::logs(char*)+0xc>
c000ed11:	5b                   	pop    ebx
c000ed12:	c3                   	ret    

c000ed13 <Dbg::logWriteInt(unsigned int)>:
c000ed13:	83 ec 10             	sub    esp,0x10
c000ed16:	6a 0a                	push   0xa
c000ed18:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ed1c:	50                   	push   eax
c000ed1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed21:	e8 58 ff ff ff       	call   c000ec7e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ed26:	50                   	push   eax
c000ed27:	e8 ca ff ff ff       	call   c000ecf6 <Dbg::logs(char*)>
c000ed2c:	83 c4 20             	add    esp,0x20
c000ed2f:	c3                   	ret    

c000ed30 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ed30:	83 ec 10             	sub    esp,0x10
c000ed33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed37:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ed3b:	50                   	push   eax
c000ed3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ed40:	e8 39 ff ff ff       	call   c000ec7e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ed45:	50                   	push   eax
c000ed46:	e8 ab ff ff ff       	call   c000ecf6 <Dbg::logs(char*)>
c000ed4b:	83 c4 20             	add    esp,0x20
c000ed4e:	c3                   	ret    

c000ed4f <Dbg::kprintf(char const*, ...)>:
c000ed4f:	55                   	push   ebp
c000ed50:	57                   	push   edi
c000ed51:	56                   	push   esi
c000ed52:	53                   	push   ebx
c000ed53:	83 ec 0c             	sub    esp,0xc
c000ed56:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ed5a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ed5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ed62:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ed65:	84 c0                	test   al,al
c000ed67:	74 4a                	je     c000edb3 <Dbg::kprintf(char const*, ...)+0x64>
c000ed69:	31 db                	xor    ebx,ebx
c000ed6b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ed6e:	3c 25                	cmp    al,0x25
c000ed70:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ed73:	0f 85 e4 00 00 00    	jne    c000ee5d <Dbg::kprintf(char const*, ...)+0x10e>
c000ed79:	83 c3 02             	add    ebx,0x2
c000ed7c:	8a 07                	mov    al,BYTE PTR [edi]
c000ed7e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ed81:	83 e8 25             	sub    eax,0x25
c000ed84:	3c 53                	cmp    al,0x53
c000ed86:	0f 87 ba 00 00 00    	ja     c000ee46 <Dbg::kprintf(char const*, ...)+0xf7>
c000ed8c:	0f b6 c0             	movzx  eax,al
c000ed8f:	ff 24 85 00 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa00]
c000ed96:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed9a:	89 c8                	mov    eax,ecx
c000ed9c:	83 c1 04             	add    ecx,0x4
c000ed9f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000eda3:	ff 30                	push   DWORD PTR [eax]
c000eda5:	e8 4c ff ff ff       	call   c000ecf6 <Dbg::logs(char*)>
c000edaa:	58                   	pop    eax
c000edab:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000edaf:	84 c0                	test   al,al
c000edb1:	75 b8                	jne    c000ed6b <Dbg::kprintf(char const*, ...)+0x1c>
c000edb3:	83 c4 0c             	add    esp,0xc
c000edb6:	5b                   	pop    ebx
c000edb7:	5e                   	pop    esi
c000edb8:	5f                   	pop    edi
c000edb9:	5d                   	pop    ebp
c000edba:	c3                   	ret    
c000edbb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000edbf:	89 d0                	mov    eax,edx
c000edc1:	83 c2 04             	add    edx,0x4
c000edc4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000edc8:	ff 30                	push   DWORD PTR [eax]
c000edca:	e8 44 ff ff ff       	call   c000ed13 <Dbg::logWriteInt(unsigned int)>
c000edcf:	58                   	pop    eax
c000edd0:	eb d9                	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000edd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000edd6:	89 d0                	mov    eax,edx
c000edd8:	83 c2 04             	add    edx,0x4
c000eddb:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000edde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ede2:	50                   	push   eax
c000ede3:	e8 f7 fe ff ff       	call   c000ecdf <Dbg::logc(char)>
c000ede8:	58                   	pop    eax
c000ede9:	eb c0                	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000edeb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edef:	89 c8                	mov    eax,ecx
c000edf1:	83 c1 04             	add    ecx,0x4
c000edf4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000edf8:	ff 30                	push   DWORD PTR [eax]
c000edfa:	e8 14 ff ff ff       	call   c000ed13 <Dbg::logWriteInt(unsigned int)>
c000edff:	5f                   	pop    edi
c000ee00:	eb a9                	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000ee02:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee06:	89 c8                	mov    eax,ecx
c000ee08:	83 c1 04             	add    ecx,0x4
c000ee0b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee0f:	6a 10                	push   0x10
c000ee11:	ff 30                	push   DWORD PTR [eax]
c000ee13:	e8 18 ff ff ff       	call   c000ed30 <Dbg::logWriteIntBase(unsigned int, int)>
c000ee18:	59                   	pop    ecx
c000ee19:	5f                   	pop    edi
c000ee1a:	eb 8f                	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000ee1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee20:	89 d0                	mov    eax,edx
c000ee22:	83 c2 08             	add    edx,0x8
c000ee25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ee29:	6a 10                	push   0x10
c000ee2b:	ff 30                	push   DWORD PTR [eax]
c000ee2d:	e8 fe fe ff ff       	call   c000ed30 <Dbg::logWriteIntBase(unsigned int, int)>
c000ee32:	58                   	pop    eax
c000ee33:	5a                   	pop    edx
c000ee34:	e9 72 ff ff ff       	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000ee39:	6a 25                	push   0x25
c000ee3b:	e8 9f fe ff ff       	call   c000ecdf <Dbg::logc(char)>
c000ee40:	58                   	pop    eax
c000ee41:	e9 65 ff ff ff       	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000ee46:	6a 25                	push   0x25
c000ee48:	e8 92 fe ff ff       	call   c000ecdf <Dbg::logc(char)>
c000ee4d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ee50:	50                   	push   eax
c000ee51:	e8 89 fe ff ff       	call   c000ecdf <Dbg::logc(char)>
c000ee56:	5a                   	pop    edx
c000ee57:	59                   	pop    ecx
c000ee58:	e9 4e ff ff ff       	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000ee5d:	50                   	push   eax
c000ee5e:	89 eb                	mov    ebx,ebp
c000ee60:	e8 7a fe ff ff       	call   c000ecdf <Dbg::logc(char)>
c000ee65:	89 fd                	mov    ebp,edi
c000ee67:	58                   	pop    eax
c000ee68:	e9 3e ff ff ff       	jmp    c000edab <Dbg::kprintf(char const*, ...)+0x5c>
c000ee6d:	90                   	nop

c000ee6e <File::read(unsigned long long, void*, int*)>:
c000ee6e:	53                   	push   ebx
c000ee6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ee77:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ee7e:	3c 19                	cmp    al,0x19
c000ee80:	77 35                	ja     c000eeb7 <File::read(unsigned long long, void*, int*)+0x49>
c000ee82:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c000ee89:	85 c0                	test   eax,eax
c000ee8b:	74 2a                	je     c000eeb7 <File::read(unsigned long long, void*, int*)+0x49>
c000ee8d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ee93:	85 c0                	test   eax,eax
c000ee95:	74 20                	je     c000eeb7 <File::read(unsigned long long, void*, int*)+0x49>
c000ee97:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ee9b:	74 21                	je     c000eebe <File::read(unsigned long long, void*, int*)+0x50>
c000ee9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee9f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000eea3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000eea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eeb1:	5b                   	pop    ebx
c000eeb2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000eeb5:	ff e0                	jmp    eax
c000eeb7:	b8 0b 00 00 00       	mov    eax,0xb
c000eebc:	eb 05                	jmp    c000eec3 <File::read(unsigned long long, void*, int*)+0x55>
c000eebe:	b8 05 00 00 00       	mov    eax,0x5
c000eec3:	5b                   	pop    ebx
c000eec4:	c3                   	ret    
c000eec5:	90                   	nop

c000eec6 <File::write(unsigned long long, void*, int*)>:
c000eec6:	53                   	push   ebx
c000eec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eecb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eecf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000eed6:	3c 19                	cmp    al,0x19
c000eed8:	77 35                	ja     c000ef0f <File::write(unsigned long long, void*, int*)+0x49>
c000eeda:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c000eee1:	85 c0                	test   eax,eax
c000eee3:	74 2a                	je     c000ef0f <File::write(unsigned long long, void*, int*)+0x49>
c000eee5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000eeeb:	85 c0                	test   eax,eax
c000eeed:	74 20                	je     c000ef0f <File::write(unsigned long long, void*, int*)+0x49>
c000eeef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000eef3:	74 21                	je     c000ef16 <File::write(unsigned long long, void*, int*)+0x50>
c000eef5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000eef7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000eefb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef09:	5b                   	pop    ebx
c000ef0a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ef0d:	ff e0                	jmp    eax
c000ef0f:	b8 0b 00 00 00       	mov    eax,0xb
c000ef14:	eb 05                	jmp    c000ef1b <File::write(unsigned long long, void*, int*)+0x55>
c000ef16:	b8 05 00 00 00       	mov    eax,0x5
c000ef1b:	5b                   	pop    ebx
c000ef1c:	c3                   	ret    
c000ef1d:	90                   	nop

c000ef1e <Directory::read(unsigned long long, void*, int*)>:
c000ef1e:	53                   	push   ebx
c000ef1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ef27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ef2e:	3c 19                	cmp    al,0x19
c000ef30:	77 35                	ja     c000ef67 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ef32:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c000ef39:	85 c0                	test   eax,eax
c000ef3b:	74 2a                	je     c000ef67 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ef3d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ef43:	85 c0                	test   eax,eax
c000ef45:	74 20                	je     c000ef67 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ef47:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ef4b:	74 21                	je     c000ef6e <Directory::read(unsigned long long, void*, int*)+0x50>
c000ef4d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ef53:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef61:	5b                   	pop    ebx
c000ef62:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ef65:	ff e0                	jmp    eax
c000ef67:	b8 0b 00 00 00       	mov    eax,0xb
c000ef6c:	eb 05                	jmp    c000ef73 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ef6e:	b8 05 00 00 00       	mov    eax,0x5
c000ef73:	5b                   	pop    ebx
c000ef74:	c3                   	ret    
c000ef75:	90                   	nop

c000ef76 <Directory::write(unsigned long long, void*, int*)>:
c000ef76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef7a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ef81:	b8 0b 00 00 00       	mov    eax,0xb
c000ef86:	80 fa 19             	cmp    dl,0x19
c000ef89:	77 18                	ja     c000efa3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ef8b:	8b 14 95 a0 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc760]
c000ef92:	85 d2                	test   edx,edx
c000ef94:	74 0d                	je     c000efa3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ef96:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ef9d:	19 c0                	sbb    eax,eax
c000ef9f:	83 e0 0a             	and    eax,0xa
c000efa2:	40                   	inc    eax
c000efa3:	c3                   	ret    

c000efa4 <File::isAtty()>:
c000efa4:	31 c0                	xor    eax,eax
c000efa6:	c3                   	ret    
c000efa7:	90                   	nop

c000efa8 <Directory::isAtty()>:
c000efa8:	31 c0                	xor    eax,eax
c000efaa:	c3                   	ret    
c000efab:	90                   	nop

c000efac <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000efac:	b8 0a 00 00 00       	mov    eax,0xa
c000efb1:	c3                   	ret    

c000efb2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000efb2:	b8 0a 00 00 00       	mov    eax,0xa
c000efb7:	c3                   	ret    

c000efb8 <File::~File()>:
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	ba bc 07 02 c0       	mov    edx,0xc00207bc
c000efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efc4:	89 10                	mov    DWORD PTR [eax],edx
c000efc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efca:	83 ec 0c             	sub    esp,0xc
c000efcd:	50                   	push   eax
c000efce:	e8 93 eb ff ff       	call   c000db66 <UnixFile::~UnixFile()>
c000efd3:	83 c4 10             	add    esp,0x10
c000efd6:	90                   	nop
c000efd7:	83 c4 0c             	add    esp,0xc
c000efda:	c3                   	ret    
c000efdb:	90                   	nop

c000efdc <File::~File()>:
c000efdc:	83 ec 0c             	sub    esp,0xc
c000efdf:	83 ec 0c             	sub    esp,0xc
c000efe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efe6:	e8 cd ff ff ff       	call   c000efb8 <File::~File()>
c000efeb:	83 c4 10             	add    esp,0x10
c000efee:	83 ec 08             	sub    esp,0x8
c000eff1:	68 14 01 00 00       	push   0x114
c000eff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000effa:	e8 70 fc ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c000efff:	83 c4 10             	add    esp,0x10
c000f002:	83 c4 0c             	add    esp,0xc
c000f005:	c3                   	ret    

c000f006 <Directory::~Directory()>:
c000f006:	83 ec 0c             	sub    esp,0xc
c000f009:	ba d8 07 02 c0       	mov    edx,0xc00207d8
c000f00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f012:	89 10                	mov    DWORD PTR [eax],edx
c000f014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f018:	83 ec 0c             	sub    esp,0xc
c000f01b:	50                   	push   eax
c000f01c:	e8 45 eb ff ff       	call   c000db66 <UnixFile::~UnixFile()>
c000f021:	83 c4 10             	add    esp,0x10
c000f024:	90                   	nop
c000f025:	83 c4 0c             	add    esp,0xc
c000f028:	c3                   	ret    
c000f029:	90                   	nop

c000f02a <Directory::~Directory()>:
c000f02a:	83 ec 0c             	sub    esp,0xc
c000f02d:	83 ec 0c             	sub    esp,0xc
c000f030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f034:	e8 cd ff ff ff       	call   c000f006 <Directory::~Directory()>
c000f039:	83 c4 10             	add    esp,0x10
c000f03c:	83 ec 08             	sub    esp,0x8
c000f03f:	68 14 01 00 00       	push   0x114
c000f044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f048:	e8 22 fc ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c000f04d:	83 c4 10             	add    esp,0x10
c000f050:	83 c4 0c             	add    esp,0xc
c000f053:	c3                   	ret    

c000f054 <Filesystem::Filesystem()>:
c000f054:	ba 58 07 02 c0       	mov    edx,0xc0020758
c000f059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05d:	89 10                	mov    DWORD PTR [eax],edx
c000f05f:	8b 15 08 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023408
c000f065:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f069:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f070:	a3 08 34 02 c0       	mov    ds:0xc0023408,eax
c000f075:	90                   	nop
c000f076:	c3                   	ret    
c000f077:	90                   	nop

c000f078 <Filesystem::~Filesystem()>:
c000f078:	ba 58 07 02 c0       	mov    edx,0xc0020758
c000f07d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f081:	89 10                	mov    DWORD PTR [eax],edx
c000f083:	90                   	nop
c000f084:	c3                   	ret    
c000f085:	90                   	nop

c000f086 <Filesystem::~Filesystem()>:
c000f086:	83 ec 0c             	sub    esp,0xc
c000f089:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f08d:	e8 e6 ff ff ff       	call   c000f078 <Filesystem::~Filesystem()>
c000f092:	83 c4 04             	add    esp,0x4
c000f095:	83 ec 08             	sub    esp,0x8
c000f098:	6a 08                	push   0x8
c000f09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f09e:	e8 cc fb ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	83 c4 0c             	add    esp,0xc
c000f0a9:	c3                   	ret    

c000f0aa <initVFS()>:
c000f0aa:	83 ec 18             	sub    esp,0x18
c000f0ad:	6a 08                	push   0x8
c000f0af:	e8 ac fb ff ff       	call   c000ec60 <operator new(unsigned long)>
c000f0b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0b7:	e8 56 a7 00 00       	call   c0019812 <FAT::FAT()>
c000f0bc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f0c3:	e8 98 fb ff ff       	call   c000ec60 <operator new(unsigned long)>
c000f0c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0cb:	e8 b8 b9 00 00       	call   c001aa88 <ISO9660::ISO9660()>
c000f0d0:	83 c4 1c             	add    esp,0x1c
c000f0d3:	c3                   	ret    

c000f0d4 <standardiseFiles(char*, char const*, char const*)>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	81 ec 10 04 00 00    	sub    esp,0x410
c000f0de:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f0e5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f0ec:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f0f3:	68 00 04 00 00       	push   0x400
c000f0f8:	6a 00                	push   0x0
c000f0fa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f0fe:	56                   	push   esi
c000f0ff:	e8 04 15 ff ff       	call   c0000608 <memset>
c000f104:	83 c4 10             	add    esp,0x10
c000f107:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f10b:	75 0b                	jne    c000f118 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f10d:	50                   	push   eax
c000f10e:	50                   	push   eax
c000f10f:	57                   	push   edi
c000f110:	56                   	push   esi
c000f111:	e8 91 15 ff ff       	call   c00006a7 <strcpy>
c000f116:	eb 41                	jmp    c000f159 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f118:	8a 07                	mov    al,BYTE PTR [edi]
c000f11a:	3c 5c                	cmp    al,0x5c
c000f11c:	74 04                	je     c000f122 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f11e:	3c 2f                	cmp    al,0x2f
c000f120:	75 18                	jne    c000f13a <standardiseFiles(char*, char const*, char const*)+0x66>
c000f122:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f125:	3c 60                	cmp    al,0x60
c000f127:	7e 03                	jle    c000f12c <standardiseFiles(char*, char const*, char const*)+0x58>
c000f129:	83 e8 20             	sub    eax,0x20
c000f12c:	88 04 24             	mov    BYTE PTR [esp],al
c000f12f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f136:	50                   	push   eax
c000f137:	50                   	push   eax
c000f138:	eb 18                	jmp    c000f152 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f13a:	50                   	push   eax
c000f13b:	50                   	push   eax
c000f13c:	55                   	push   ebp
c000f13d:	56                   	push   esi
c000f13e:	e8 64 15 ff ff       	call   c00006a7 <strcpy>
c000f143:	5a                   	pop    edx
c000f144:	59                   	pop    ecx
c000f145:	68 68 19 02 c0       	push   0xc0021968
c000f14a:	56                   	push   esi
c000f14b:	e8 0e 16 ff ff       	call   c000075e <strcat>
c000f150:	5d                   	pop    ebp
c000f151:	58                   	pop    eax
c000f152:	57                   	push   edi
c000f153:	56                   	push   esi
c000f154:	e8 05 16 ff ff       	call   c000075e <strcat>
c000f159:	83 c4 10             	add    esp,0x10
c000f15c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f15f:	3c 60                	cmp    al,0x60
c000f161:	7e 03                	jle    c000f166 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f163:	83 e8 20             	sub    eax,0x20
c000f166:	88 04 24             	mov    BYTE PTR [esp],al
c000f169:	88 03                	mov    BYTE PTR [ebx],al
c000f16b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f172:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f178:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f17c:	bf 03 00 00 00       	mov    edi,0x3
c000f181:	b8 03 00 00 00       	mov    eax,0x3
c000f186:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f189:	84 d2                	test   dl,dl
c000f18b:	0f 84 91 00 00 00    	je     c000f222 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f191:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f194:	80 fa 5c             	cmp    dl,0x5c
c000f197:	74 05                	je     c000f19e <standardiseFiles(char*, char const*, char const*)+0xca>
c000f199:	80 fa 2f             	cmp    dl,0x2f
c000f19c:	75 12                	jne    c000f1b0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f19e:	89 c5                	mov    ebp,eax
c000f1a0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f1a5:	74 09                	je     c000f1b0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f1a7:	40                   	inc    eax
c000f1a8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f1ac:	89 cf                	mov    edi,ecx
c000f1ae:	eb d6                	jmp    c000f186 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f1b0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f1b5:	75 5b                	jne    c000f212 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f1b7:	80 fa 2e             	cmp    dl,0x2e
c000f1ba:	75 56                	jne    c000f212 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f1bc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f1c0:	74 19                	je     c000f1db <standardiseFiles(char*, char const*, char const*)+0x107>
c000f1c2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f1c7:	74 53                	je     c000f21c <standardiseFiles(char*, char const*, char const*)+0x148>
c000f1c9:	89 f9                	mov    ecx,edi
c000f1cb:	41                   	inc    ecx
c000f1cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f1cf:	80 fa 2f             	cmp    dl,0x2f
c000f1d2:	74 f7                	je     c000f1cb <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f1d4:	80 fa 5c             	cmp    dl,0x5c
c000f1d7:	74 f2                	je     c000f1cb <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f1d9:	eb d1                	jmp    c000f1ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f1db:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f1e0:	74 3a                	je     c000f21c <standardiseFiles(char*, char const*, char const*)+0x148>
c000f1e2:	83 f8 03             	cmp    eax,0x3
c000f1e5:	74 c5                	je     c000f1ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f1e7:	41                   	inc    ecx
c000f1e8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f1eb:	80 fa 2f             	cmp    dl,0x2f
c000f1ee:	74 f7                	je     c000f1e7 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f1f0:	80 fa 5c             	cmp    dl,0x5c
c000f1f3:	74 f2                	je     c000f1e7 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f1f5:	48                   	dec    eax
c000f1f6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f1fa:	75 06                	jne    c000f202 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f1fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f200:	eb f3                	jmp    c000f1f5 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f202:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f206:	74 07                	je     c000f20f <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f208:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f20c:	48                   	dec    eax
c000f20d:	eb f3                	jmp    c000f202 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f20f:	40                   	inc    eax
c000f210:	eb 9a                	jmp    c000f1ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f212:	80 fa 2f             	cmp    dl,0x2f
c000f215:	74 95                	je     c000f1ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f217:	80 fa 5c             	cmp    dl,0x5c
c000f21a:	74 90                	je     c000f1ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f21c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f21f:	40                   	inc    eax
c000f220:	eb 8a                	jmp    c000f1ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f222:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f226:	83 ec 0c             	sub    esp,0xc
c000f229:	53                   	push   ebx
c000f22a:	e8 f6 13 ff ff       	call   c0000625 <strlen>
c000f22f:	83 c4 10             	add    esp,0x10
c000f232:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f237:	75 26                	jne    c000f25f <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f239:	83 ec 0c             	sub    esp,0xc
c000f23c:	53                   	push   ebx
c000f23d:	e8 e3 13 ff ff       	call   c0000625 <strlen>
c000f242:	83 c4 10             	add    esp,0x10
c000f245:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f24a:	74 26                	je     c000f272 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f24c:	83 ec 0c             	sub    esp,0xc
c000f24f:	53                   	push   ebx
c000f250:	e8 d0 13 ff ff       	call   c0000625 <strlen>
c000f255:	83 c4 10             	add    esp,0x10
c000f258:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f25d:	eb c7                	jmp    c000f226 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f25f:	83 ec 0c             	sub    esp,0xc
c000f262:	53                   	push   ebx
c000f263:	e8 bd 13 ff ff       	call   c0000625 <strlen>
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f270:	74 c7                	je     c000f239 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f272:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f278:	5b                   	pop    ebx
c000f279:	5e                   	pop    esi
c000f27a:	5f                   	pop    edi
c000f27b:	5d                   	pop    ebp
c000f27c:	c3                   	ret    
c000f27d:	90                   	nop

c000f27e <File::File(char const*, Process*)>:
c000f27e:	83 ec 0c             	sub    esp,0xc
c000f281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f285:	83 ec 08             	sub    esp,0x8
c000f288:	6a 00                	push   0x0
c000f28a:	50                   	push   eax
c000f28b:	e8 34 e7 ff ff       	call   c000d9c4 <UnixFile::UnixFile(int)>
c000f290:	83 c4 10             	add    esp,0x10
c000f293:	ba bc 07 02 c0       	mov    edx,0xc00207bc
c000f298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f29c:	89 10                	mov    DWORD PTR [eax],edx
c000f29e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ac:	83 c0 0d             	add    eax,0xd
c000f2af:	83 ec 04             	sub    esp,0x4
c000f2b2:	52                   	push   edx
c000f2b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2b7:	50                   	push   eax
c000f2b8:	e8 17 fe ff ff       	call   c000f0d4 <standardiseFiles(char*, char const*, char const*)>
c000f2bd:	83 c4 10             	add    esp,0x10
c000f2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2c4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f2c7:	8d 50 bf             	lea    edx,[eax-0x41]
c000f2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ce:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2d8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f2dc:	90                   	nop
c000f2dd:	83 c4 0c             	add    esp,0xc
c000f2e0:	c3                   	ret    
c000f2e1:	90                   	nop

c000f2e2 <File::open(FileOpenMode)>:
c000f2e2:	53                   	push   ebx
c000f2e3:	b8 0b 00 00 00       	mov    eax,0xb
c000f2e8:	83 ec 08             	sub    esp,0x8
c000f2eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2ef:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f2f6:	80 fa 19             	cmp    dl,0x19
c000f2f9:	77 40                	ja     c000f33b <File::open(FileOpenMode)+0x59>
c000f2fb:	8b 14 95 a0 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc760]
c000f302:	85 d2                	test   edx,edx
c000f304:	74 35                	je     c000f33b <File::open(FileOpenMode)+0x59>
c000f306:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f30c:	85 d2                	test   edx,edx
c000f30e:	74 2b                	je     c000f33b <File::open(FileOpenMode)+0x59>
c000f310:	b8 06 00 00 00       	mov    eax,0x6
c000f315:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f319:	75 20                	jne    c000f33b <File::open(FileOpenMode)+0x59>
c000f31b:	8b 02                	mov    eax,DWORD PTR [edx]
c000f31d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f323:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f327:	51                   	push   ecx
c000f328:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f32b:	51                   	push   ecx
c000f32c:	52                   	push   edx
c000f32d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f330:	83 c4 10             	add    esp,0x10
c000f333:	85 c0                	test   eax,eax
c000f335:	75 04                	jne    c000f33b <File::open(FileOpenMode)+0x59>
c000f337:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f33b:	83 c4 08             	add    esp,0x8
c000f33e:	5b                   	pop    ebx
c000f33f:	c3                   	ret    

c000f340 <File::close()>:
c000f340:	53                   	push   ebx
c000f341:	b8 0b 00 00 00       	mov    eax,0xb
c000f346:	83 ec 08             	sub    esp,0x8
c000f349:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f34d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f354:	80 fa 19             	cmp    dl,0x19
c000f357:	77 41                	ja     c000f39a <File::close()+0x5a>
c000f359:	8b 1c 95 a0 38 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc760]
c000f360:	85 db                	test   ebx,ebx
c000f362:	74 36                	je     c000f39a <File::close()+0x5a>
c000f364:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f36b:	74 2d                	je     c000f39a <File::close()+0x5a>
c000f36d:	b8 05 00 00 00       	mov    eax,0x5
c000f372:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f376:	74 22                	je     c000f39a <File::close()+0x5a>
c000f378:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f37c:	8b 04 95 a0 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc760]
c000f383:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f389:	53                   	push   ebx
c000f38a:	53                   	push   ebx
c000f38b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f38d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f393:	50                   	push   eax
c000f394:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f397:	83 c4 10             	add    esp,0x10
c000f39a:	83 c4 08             	add    esp,0x8
c000f39d:	5b                   	pop    ebx
c000f39e:	c3                   	ret    
c000f39f:	90                   	nop

c000f3a0 <File::seek(unsigned long long)>:
c000f3a0:	56                   	push   esi
c000f3a1:	53                   	push   ebx
c000f3a2:	b8 0b 00 00 00       	mov    eax,0xb
c000f3a7:	51                   	push   ecx
c000f3a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f3b0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f3b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f3bb:	80 fa 19             	cmp    dl,0x19
c000f3be:	77 31                	ja     c000f3f1 <File::seek(unsigned long long)+0x51>
c000f3c0:	8b 14 95 a0 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc760]
c000f3c7:	85 d2                	test   edx,edx
c000f3c9:	74 26                	je     c000f3f1 <File::seek(unsigned long long)+0x51>
c000f3cb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f3d1:	85 d2                	test   edx,edx
c000f3d3:	74 1c                	je     c000f3f1 <File::seek(unsigned long long)+0x51>
c000f3d5:	b8 05 00 00 00       	mov    eax,0x5
c000f3da:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f3de:	74 11                	je     c000f3f1 <File::seek(unsigned long long)+0x51>
c000f3e0:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3e2:	53                   	push   ebx
c000f3e3:	51                   	push   ecx
c000f3e4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f3ea:	52                   	push   edx
c000f3eb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f3ee:	83 c4 10             	add    esp,0x10
c000f3f1:	5a                   	pop    edx
c000f3f2:	5b                   	pop    ebx
c000f3f3:	5e                   	pop    esi
c000f3f4:	c3                   	ret    
c000f3f5:	90                   	nop

c000f3f6 <File::tell(unsigned long long*)>:
c000f3f6:	83 ec 0c             	sub    esp,0xc
c000f3f9:	b8 0b 00 00 00       	mov    eax,0xb
c000f3fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f402:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f409:	80 fa 19             	cmp    dl,0x19
c000f40c:	77 34                	ja     c000f442 <File::tell(unsigned long long*)+0x4c>
c000f40e:	8b 14 95 a0 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc760]
c000f415:	85 d2                	test   edx,edx
c000f417:	74 29                	je     c000f442 <File::tell(unsigned long long*)+0x4c>
c000f419:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f41f:	85 d2                	test   edx,edx
c000f421:	74 1f                	je     c000f442 <File::tell(unsigned long long*)+0x4c>
c000f423:	b8 05 00 00 00       	mov    eax,0x5
c000f428:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f42c:	74 14                	je     c000f442 <File::tell(unsigned long long*)+0x4c>
c000f42e:	50                   	push   eax
c000f42f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f435:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f43b:	52                   	push   edx
c000f43c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f43f:	83 c4 10             	add    esp,0x10
c000f442:	83 c4 0c             	add    esp,0xc
c000f445:	c3                   	ret    

c000f446 <File::rewind()>:
c000f446:	83 ec 10             	sub    esp,0x10
c000f449:	6a 00                	push   0x0
c000f44b:	6a 00                	push   0x0
c000f44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f451:	e8 4a ff ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c000f456:	83 c4 1c             	add    esp,0x1c
c000f459:	c3                   	ret    

c000f45a <File::unlink()>:
c000f45a:	83 ec 0c             	sub    esp,0xc
c000f45d:	b8 0b 00 00 00       	mov    eax,0xb
c000f462:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f466:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f46d:	80 f9 19             	cmp    cl,0x19
c000f470:	77 2f                	ja     c000f4a1 <File::unlink()+0x47>
c000f472:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f479:	85 c9                	test   ecx,ecx
c000f47b:	74 24                	je     c000f4a1 <File::unlink()+0x47>
c000f47d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f483:	85 c9                	test   ecx,ecx
c000f485:	74 1a                	je     c000f4a1 <File::unlink()+0x47>
c000f487:	b8 06 00 00 00       	mov    eax,0x6
c000f48c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f490:	75 0f                	jne    c000f4a1 <File::unlink()+0x47>
c000f492:	83 c2 0d             	add    edx,0xd
c000f495:	50                   	push   eax
c000f496:	50                   	push   eax
c000f497:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f499:	52                   	push   edx
c000f49a:	51                   	push   ecx
c000f49b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	83 c4 0c             	add    esp,0xc
c000f4a4:	c3                   	ret    
c000f4a5:	90                   	nop

c000f4a6 <File::rename(char const*)>:
c000f4a6:	83 ec 0c             	sub    esp,0xc
c000f4a9:	b8 0b 00 00 00       	mov    eax,0xb
c000f4ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f4b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f4b9:	80 f9 19             	cmp    cl,0x19
c000f4bc:	77 32                	ja     c000f4f0 <File::rename(char const*)+0x4a>
c000f4be:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f4c5:	85 c9                	test   ecx,ecx
c000f4c7:	74 27                	je     c000f4f0 <File::rename(char const*)+0x4a>
c000f4c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f4cf:	85 c9                	test   ecx,ecx
c000f4d1:	74 1d                	je     c000f4f0 <File::rename(char const*)+0x4a>
c000f4d3:	b8 06 00 00 00       	mov    eax,0x6
c000f4d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f4dc:	75 12                	jne    c000f4f0 <File::rename(char const*)+0x4a>
c000f4de:	83 c2 0d             	add    edx,0xd
c000f4e1:	50                   	push   eax
c000f4e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f4e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4e8:	52                   	push   edx
c000f4e9:	51                   	push   ecx
c000f4ea:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f4ed:	83 c4 10             	add    esp,0x10
c000f4f0:	83 c4 0c             	add    esp,0xc
c000f4f3:	c3                   	ret    

c000f4f4 <File::chfatattr(unsigned char, unsigned char)>:
c000f4f4:	57                   	push   edi
c000f4f5:	b8 0b 00 00 00       	mov    eax,0xb
c000f4fa:	56                   	push   esi
c000f4fb:	53                   	push   ebx
c000f4fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f500:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f504:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f50b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f50f:	80 f9 19             	cmp    cl,0x19
c000f512:	77 37                	ja     c000f54b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f514:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f51b:	85 c9                	test   ecx,ecx
c000f51d:	74 2c                	je     c000f54b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f51f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f525:	85 c9                	test   ecx,ecx
c000f527:	74 22                	je     c000f54b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f529:	b8 06 00 00 00       	mov    eax,0x6
c000f52e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f532:	75 17                	jne    c000f54b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f534:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f536:	89 f0                	mov    eax,esi
c000f538:	83 c2 0d             	add    edx,0xd
c000f53b:	0f b6 f0             	movzx  esi,al
c000f53e:	0f b6 db             	movzx  ebx,bl
c000f541:	56                   	push   esi
c000f542:	53                   	push   ebx
c000f543:	52                   	push   edx
c000f544:	51                   	push   ecx
c000f545:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f548:	83 c4 10             	add    esp,0x10
c000f54b:	5b                   	pop    ebx
c000f54c:	5e                   	pop    esi
c000f54d:	5f                   	pop    edi
c000f54e:	c3                   	ret    
c000f54f:	90                   	nop

c000f550 <File::exists()>:
c000f550:	83 ec 0c             	sub    esp,0xc
c000f553:	31 c0                	xor    eax,eax
c000f555:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f559:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f560:	80 f9 19             	cmp    cl,0x19
c000f563:	77 24                	ja     c000f589 <File::exists()+0x39>
c000f565:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f56c:	85 c9                	test   ecx,ecx
c000f56e:	74 19                	je     c000f589 <File::exists()+0x39>
c000f570:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f576:	85 c9                	test   ecx,ecx
c000f578:	74 0f                	je     c000f589 <File::exists()+0x39>
c000f57a:	83 c2 0d             	add    edx,0xd
c000f57d:	50                   	push   eax
c000f57e:	50                   	push   eax
c000f57f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f581:	52                   	push   edx
c000f582:	51                   	push   ecx
c000f583:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f586:	83 c4 10             	add    esp,0x10
c000f589:	83 c4 0c             	add    esp,0xc
c000f58c:	c3                   	ret    
c000f58d:	90                   	nop

c000f58e <File::stat(unsigned long long*, bool*)>:
c000f58e:	56                   	push   esi
c000f58f:	53                   	push   ebx
c000f590:	50                   	push   eax
c000f591:	b8 0b 00 00 00       	mov    eax,0xb
c000f596:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f59a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f59e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f5a5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f5a9:	80 f9 19             	cmp    cl,0x19
c000f5ac:	77 3d                	ja     c000f5eb <File::stat(unsigned long long*, bool*)+0x5d>
c000f5ae:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f5b5:	85 c9                	test   ecx,ecx
c000f5b7:	74 32                	je     c000f5eb <File::stat(unsigned long long*, bool*)+0x5d>
c000f5b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f5bf:	85 c9                	test   ecx,ecx
c000f5c1:	74 28                	je     c000f5eb <File::stat(unsigned long long*, bool*)+0x5d>
c000f5c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f5c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f5c9:	74 13                	je     c000f5de <File::stat(unsigned long long*, bool*)+0x50>
c000f5cb:	83 ec 04             	sub    esp,0x4
c000f5ce:	56                   	push   esi
c000f5cf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f5d5:	51                   	push   ecx
c000f5d6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f5d9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f5dc:	eb 0a                	jmp    c000f5e8 <File::stat(unsigned long long*, bool*)+0x5a>
c000f5de:	53                   	push   ebx
c000f5df:	83 c2 0d             	add    edx,0xd
c000f5e2:	56                   	push   esi
c000f5e3:	52                   	push   edx
c000f5e4:	51                   	push   ecx
c000f5e5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f5e8:	83 c4 10             	add    esp,0x10
c000f5eb:	5a                   	pop    edx
c000f5ec:	5b                   	pop    ebx
c000f5ed:	5e                   	pop    esi
c000f5ee:	c3                   	ret    

c000f5ef <getcwd(Process*, char*, int)>:
c000f5ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5f3:	31 c0                	xor    eax,eax
c000f5f5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f5f8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f5fc:	7d 15                	jge    c000f613 <getcwd(Process*, char*, int)+0x24>
c000f5fe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f602:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f609:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f60c:	84 c9                	test   cl,cl
c000f60e:	74 06                	je     c000f616 <getcwd(Process*, char*, int)+0x27>
c000f610:	40                   	inc    eax
c000f611:	eb e2                	jmp    c000f5f5 <getcwd(Process*, char*, int)+0x6>
c000f613:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f616:	31 c0                	xor    eax,eax
c000f618:	c3                   	ret    

c000f619 <setcwd(Process*, char*)>:
c000f619:	55                   	push   ebp
c000f61a:	57                   	push   edi
c000f61b:	56                   	push   esi
c000f61c:	53                   	push   ebx
c000f61d:	81 ec 20 02 00 00    	sub    esp,0x220
c000f623:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f62a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f630:	57                   	push   edi
c000f631:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f638:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f63c:	56                   	push   esi
c000f63d:	e8 92 fa ff ff       	call   c000f0d4 <standardiseFiles(char*, char const*, char const*)>
c000f642:	89 34 24             	mov    DWORD PTR [esp],esi
c000f645:	e8 db 0f ff ff       	call   c0000625 <strlen>
c000f64a:	83 c4 10             	add    esp,0x10
c000f64d:	83 f8 02             	cmp    eax,0x2
c000f650:	77 17                	ja     c000f669 <setcwd(Process*, char*)+0x50>
c000f652:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f657:	83 e8 41             	sub    eax,0x41
c000f65a:	83 f8 19             	cmp    eax,0x19
c000f65d:	76 24                	jbe    c000f683 <setcwd(Process*, char*)+0x6a>
c000f65f:	b8 03 00 00 00       	mov    eax,0x3
c000f664:	e9 cb 00 00 00       	jmp    c000f734 <setcwd(Process*, char*)+0x11b>
c000f669:	83 ec 0c             	sub    esp,0xc
c000f66c:	56                   	push   esi
c000f66d:	e8 b3 0f ff ff       	call   c0000625 <strlen>
c000f672:	83 c4 10             	add    esp,0x10
c000f675:	83 f8 03             	cmp    eax,0x3
c000f678:	75 33                	jne    c000f6ad <setcwd(Process*, char*)+0x94>
c000f67a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f67f:	75 2c                	jne    c000f6ad <setcwd(Process*, char*)+0x94>
c000f681:	eb cf                	jmp    c000f652 <setcwd(Process*, char*)+0x39>
c000f683:	8b 14 85 a0 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc760]
c000f68a:	b8 05 00 00 00       	mov    eax,0x5
c000f68f:	85 d2                	test   edx,edx
c000f691:	0f 84 9d 00 00 00    	je     c000f734 <setcwd(Process*, char*)+0x11b>
c000f697:	b8 06 00 00 00       	mov    eax,0x6
c000f69c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f6a3:	0f 84 8b 00 00 00    	je     c000f734 <setcwd(Process*, char*)+0x11b>
c000f6a9:	51                   	push   ecx
c000f6aa:	51                   	push   ecx
c000f6ab:	eb 7b                	jmp    c000f728 <setcwd(Process*, char*)+0x10f>
c000f6ad:	83 ec 0c             	sub    esp,0xc
c000f6b0:	68 14 01 00 00       	push   0x114
c000f6b5:	e8 a6 f5 ff ff       	call   c000ec60 <operator new(unsigned long)>
c000f6ba:	83 c4 0c             	add    esp,0xc
c000f6bd:	89 c3                	mov    ebx,eax
c000f6bf:	55                   	push   ebp
c000f6c0:	56                   	push   esi
c000f6c1:	50                   	push   eax
c000f6c2:	e8 b7 fb ff ff       	call   c000f27e <File::File(char const*, Process*)>
c000f6c7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f6cc:	83 c4 0c             	add    esp,0xc
c000f6cf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f6d3:	50                   	push   eax
c000f6d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f6d8:	50                   	push   eax
c000f6d9:	53                   	push   ebx
c000f6da:	e8 af fe ff ff       	call   c000f58e <File::stat(unsigned long long*, bool*)>
c000f6df:	83 c4 10             	add    esp,0x10
c000f6e2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f6e4:	83 f8 02             	cmp    eax,0x2
c000f6e7:	75 09                	jne    c000f6f2 <setcwd(Process*, char*)+0xd9>
c000f6e9:	83 ec 0c             	sub    esp,0xc
c000f6ec:	53                   	push   ebx
c000f6ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f6f0:	eb 0d                	jmp    c000f6ff <setcwd(Process*, char*)+0xe6>
c000f6f2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f6f5:	85 c0                	test   eax,eax
c000f6f7:	74 10                	je     c000f709 <setcwd(Process*, char*)+0xf0>
c000f6f9:	83 ec 0c             	sub    esp,0xc
c000f6fc:	53                   	push   ebx
c000f6fd:	ff d2                	call   edx
c000f6ff:	83 c4 10             	add    esp,0x10
c000f702:	b8 01 00 00 00       	mov    eax,0x1
c000f707:	eb 2b                	jmp    c000f734 <setcwd(Process*, char*)+0x11b>
c000f709:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f70e:	75 10                	jne    c000f720 <setcwd(Process*, char*)+0x107>
c000f710:	83 ec 0c             	sub    esp,0xc
c000f713:	53                   	push   ebx
c000f714:	ff d2                	call   edx
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	b8 02 00 00 00       	mov    eax,0x2
c000f71e:	eb 14                	jmp    c000f734 <setcwd(Process*, char*)+0x11b>
c000f720:	83 ec 0c             	sub    esp,0xc
c000f723:	53                   	push   ebx
c000f724:	ff d2                	call   edx
c000f726:	58                   	pop    eax
c000f727:	5a                   	pop    edx
c000f728:	56                   	push   esi
c000f729:	57                   	push   edi
c000f72a:	e8 78 0f ff ff       	call   c00006a7 <strcpy>
c000f72f:	83 c4 10             	add    esp,0x10
c000f732:	31 c0                	xor    eax,eax
c000f734:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f73a:	5b                   	pop    ebx
c000f73b:	5e                   	pop    esi
c000f73c:	5f                   	pop    edi
c000f73d:	5d                   	pop    ebp
c000f73e:	c3                   	ret    
c000f73f:	90                   	nop

c000f740 <Directory::Directory(char const*, Process*)>:
c000f740:	83 ec 0c             	sub    esp,0xc
c000f743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f747:	83 ec 08             	sub    esp,0x8
c000f74a:	6a 00                	push   0x0
c000f74c:	50                   	push   eax
c000f74d:	e8 72 e2 ff ff       	call   c000d9c4 <UnixFile::UnixFile(int)>
c000f752:	83 c4 10             	add    esp,0x10
c000f755:	ba d8 07 02 c0       	mov    edx,0xc00207d8
c000f75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f75e:	89 10                	mov    DWORD PTR [eax],edx
c000f760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f764:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f76e:	83 c0 0d             	add    eax,0xd
c000f771:	83 ec 04             	sub    esp,0x4
c000f774:	52                   	push   edx
c000f775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f779:	50                   	push   eax
c000f77a:	e8 55 f9 ff ff       	call   c000f0d4 <standardiseFiles(char*, char const*, char const*)>
c000f77f:	83 c4 10             	add    esp,0x10
c000f782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f786:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f789:	8d 50 bf             	lea    edx,[eax-0x41]
c000f78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f790:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f79a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f79e:	90                   	nop
c000f79f:	83 c4 0c             	add    esp,0xc
c000f7a2:	c3                   	ret    
c000f7a3:	90                   	nop

c000f7a4 <Directory::open()>:
c000f7a4:	53                   	push   ebx
c000f7a5:	b8 0b 00 00 00       	mov    eax,0xb
c000f7aa:	83 ec 08             	sub    esp,0x8
c000f7ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7b1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7b8:	80 fa 19             	cmp    dl,0x19
c000f7bb:	77 3d                	ja     c000f7fa <Directory::open()+0x56>
c000f7bd:	8b 14 95 a0 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc760]
c000f7c4:	85 d2                	test   edx,edx
c000f7c6:	74 32                	je     c000f7fa <Directory::open()+0x56>
c000f7c8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7ce:	85 d2                	test   edx,edx
c000f7d0:	74 28                	je     c000f7fa <Directory::open()+0x56>
c000f7d2:	b8 06 00 00 00       	mov    eax,0x6
c000f7d7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7db:	75 1d                	jne    c000f7fa <Directory::open()+0x56>
c000f7dd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7e3:	50                   	push   eax
c000f7e4:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7e6:	51                   	push   ecx
c000f7e7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7ea:	51                   	push   ecx
c000f7eb:	52                   	push   edx
c000f7ec:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000f7ef:	83 c4 10             	add    esp,0x10
c000f7f2:	85 c0                	test   eax,eax
c000f7f4:	75 04                	jne    c000f7fa <Directory::open()+0x56>
c000f7f6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f7fa:	83 c4 08             	add    esp,0x8
c000f7fd:	5b                   	pop    ebx
c000f7fe:	c3                   	ret    
c000f7ff:	90                   	nop

c000f800 <Directory::close()>:
c000f800:	53                   	push   ebx
c000f801:	b8 0b 00 00 00       	mov    eax,0xb
c000f806:	83 ec 08             	sub    esp,0x8
c000f809:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f80d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f814:	80 fa 19             	cmp    dl,0x19
c000f817:	77 41                	ja     c000f85a <Directory::close()+0x5a>
c000f819:	8b 1c 95 a0 38 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc760]
c000f820:	85 db                	test   ebx,ebx
c000f822:	74 36                	je     c000f85a <Directory::close()+0x5a>
c000f824:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f82b:	74 2d                	je     c000f85a <Directory::close()+0x5a>
c000f82d:	b8 05 00 00 00       	mov    eax,0x5
c000f832:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f836:	74 22                	je     c000f85a <Directory::close()+0x5a>
c000f838:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f83c:	8b 04 95 a0 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc760]
c000f843:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f849:	53                   	push   ebx
c000f84a:	53                   	push   ebx
c000f84b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f84d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f853:	50                   	push   eax
c000f854:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000f857:	83 c4 10             	add    esp,0x10
c000f85a:	83 c4 08             	add    esp,0x8
c000f85d:	5b                   	pop    ebx
c000f85e:	c3                   	ret    
c000f85f:	90                   	nop

c000f860 <Directory::unlink()>:
c000f860:	83 ec 0c             	sub    esp,0xc
c000f863:	b8 0b 00 00 00       	mov    eax,0xb
c000f868:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f86c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f873:	80 f9 19             	cmp    cl,0x19
c000f876:	77 2f                	ja     c000f8a7 <Directory::unlink()+0x47>
c000f878:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f87f:	85 c9                	test   ecx,ecx
c000f881:	74 24                	je     c000f8a7 <Directory::unlink()+0x47>
c000f883:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f889:	85 c9                	test   ecx,ecx
c000f88b:	74 1a                	je     c000f8a7 <Directory::unlink()+0x47>
c000f88d:	b8 06 00 00 00       	mov    eax,0x6
c000f892:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f896:	75 0f                	jne    c000f8a7 <Directory::unlink()+0x47>
c000f898:	83 c2 0d             	add    edx,0xd
c000f89b:	50                   	push   eax
c000f89c:	50                   	push   eax
c000f89d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f89f:	52                   	push   edx
c000f8a0:	51                   	push   ecx
c000f8a1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f8a4:	83 c4 10             	add    esp,0x10
c000f8a7:	83 c4 0c             	add    esp,0xc
c000f8aa:	c3                   	ret    
c000f8ab:	90                   	nop

c000f8ac <Directory::rename(char const*)>:
c000f8ac:	83 ec 0c             	sub    esp,0xc
c000f8af:	b8 0b 00 00 00       	mov    eax,0xb
c000f8b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8bf:	80 f9 19             	cmp    cl,0x19
c000f8c2:	77 32                	ja     c000f8f6 <Directory::rename(char const*)+0x4a>
c000f8c4:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f8cb:	85 c9                	test   ecx,ecx
c000f8cd:	74 27                	je     c000f8f6 <Directory::rename(char const*)+0x4a>
c000f8cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8d5:	85 c9                	test   ecx,ecx
c000f8d7:	74 1d                	je     c000f8f6 <Directory::rename(char const*)+0x4a>
c000f8d9:	b8 06 00 00 00       	mov    eax,0x6
c000f8de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8e2:	75 12                	jne    c000f8f6 <Directory::rename(char const*)+0x4a>
c000f8e4:	83 c2 0d             	add    edx,0xd
c000f8e7:	50                   	push   eax
c000f8e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8ee:	52                   	push   edx
c000f8ef:	51                   	push   ecx
c000f8f0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8f3:	83 c4 10             	add    esp,0x10
c000f8f6:	83 c4 0c             	add    esp,0xc
c000f8f9:	c3                   	ret    

c000f8fa <Directory::exists()>:
c000f8fa:	83 ec 0c             	sub    esp,0xc
c000f8fd:	31 c0                	xor    eax,eax
c000f8ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f903:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f90a:	80 f9 19             	cmp    cl,0x19
c000f90d:	77 24                	ja     c000f933 <Directory::exists()+0x39>
c000f90f:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f916:	85 c9                	test   ecx,ecx
c000f918:	74 19                	je     c000f933 <Directory::exists()+0x39>
c000f91a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f920:	85 c9                	test   ecx,ecx
c000f922:	74 0f                	je     c000f933 <Directory::exists()+0x39>
c000f924:	83 c2 0d             	add    edx,0xd
c000f927:	50                   	push   eax
c000f928:	50                   	push   eax
c000f929:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f92b:	52                   	push   edx
c000f92c:	51                   	push   ecx
c000f92d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f930:	83 c4 10             	add    esp,0x10
c000f933:	83 c4 0c             	add    esp,0xc
c000f936:	c3                   	ret    
c000f937:	90                   	nop

c000f938 <Directory::read(dirent*)>:
c000f938:	83 ec 1c             	sub    esp,0x1c
c000f93b:	b8 0b 00 00 00       	mov    eax,0xb
c000f940:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f944:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f94b:	80 fa 19             	cmp    dl,0x19
c000f94e:	77 30                	ja     c000f980 <Directory::read(dirent*)+0x48>
c000f950:	8b 14 95 a0 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc760]
c000f957:	85 d2                	test   edx,edx
c000f959:	74 25                	je     c000f980 <Directory::read(dirent*)+0x48>
c000f95b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f962:	74 1c                	je     c000f980 <Directory::read(dirent*)+0x48>
c000f964:	83 ec 0c             	sub    esp,0xc
c000f967:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f969:	8d 54 24 18          	lea    edx,[esp+0x18]
c000f96d:	52                   	push   edx
c000f96e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f972:	6a 00                	push   0x0
c000f974:	68 10 01 00 00       	push   0x110
c000f979:	51                   	push   ecx
c000f97a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000f97d:	83 c4 20             	add    esp,0x20
c000f980:	83 c4 1c             	add    esp,0x1c
c000f983:	c3                   	ret    

c000f984 <Directory::create()>:
c000f984:	83 ec 0c             	sub    esp,0xc
c000f987:	b8 0b 00 00 00       	mov    eax,0xb
c000f98c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f990:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f997:	80 f9 19             	cmp    cl,0x19
c000f99a:	77 2f                	ja     c000f9cb <Directory::create()+0x47>
c000f99c:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c000f9a3:	85 c9                	test   ecx,ecx
c000f9a5:	74 24                	je     c000f9cb <Directory::create()+0x47>
c000f9a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9ad:	85 c9                	test   ecx,ecx
c000f9af:	74 1a                	je     c000f9cb <Directory::create()+0x47>
c000f9b1:	b8 06 00 00 00       	mov    eax,0x6
c000f9b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9ba:	75 0f                	jne    c000f9cb <Directory::create()+0x47>
c000f9bc:	83 c2 0d             	add    edx,0xd
c000f9bf:	50                   	push   eax
c000f9c0:	50                   	push   eax
c000f9c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9c3:	52                   	push   edx
c000f9c4:	51                   	push   ecx
c000f9c5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000f9c8:	83 c4 10             	add    esp,0x10
c000f9cb:	83 c4 0c             	add    esp,0xc
c000f9ce:	c3                   	ret    
c000f9cf:	90                   	nop

c000f9d0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000f9d0:	b8 0a 00 00 00       	mov    eax,0xa
c000f9d5:	c3                   	ret    

c000f9d6 <Bus::Bus(char const*)>:
c000f9d6:	83 ec 0c             	sub    esp,0xc
c000f9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9dd:	83 ec 08             	sub    esp,0x8
c000f9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f9e4:	50                   	push   eax
c000f9e5:	e8 60 09 00 00       	call   c001034a <Device::Device(char const*)>
c000f9ea:	83 c4 10             	add    esp,0x10
c000f9ed:	ba f4 07 02 c0       	mov    edx,0xc00207f4
c000f9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f6:	89 10                	mov    DWORD PTR [eax],edx
c000f9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9fc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fa06:	90                   	nop
c000fa07:	83 c4 0c             	add    esp,0xc
c000fa0a:	c3                   	ret    
c000fa0b:	90                   	nop

c000fa0c <Bus::~Bus()>:
c000fa0c:	83 ec 0c             	sub    esp,0xc
c000fa0f:	ba f4 07 02 c0       	mov    edx,0xc00207f4
c000fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa18:	89 10                	mov    DWORD PTR [eax],edx
c000fa1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa1e:	83 ec 0c             	sub    esp,0xc
c000fa21:	50                   	push   eax
c000fa22:	e8 d5 05 00 00       	call   c000fffc <Device::~Device()>
c000fa27:	83 c4 10             	add    esp,0x10
c000fa2a:	90                   	nop
c000fa2b:	83 c4 0c             	add    esp,0xc
c000fa2e:	c3                   	ret    
c000fa2f:	90                   	nop

c000fa30 <Bus::~Bus()>:
c000fa30:	83 ec 0c             	sub    esp,0xc
c000fa33:	83 ec 0c             	sub    esp,0xc
c000fa36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa3a:	e8 cd ff ff ff       	call   c000fa0c <Bus::~Bus()>
c000fa3f:	83 c4 10             	add    esp,0x10
c000fa42:	83 ec 08             	sub    esp,0x8
c000fa45:	68 58 01 00 00       	push   0x158
c000fa4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa4e:	e8 1c f2 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c000fa53:	83 c4 10             	add    esp,0x10
c000fa56:	83 c4 0c             	add    esp,0xc
c000fa59:	c3                   	ret    

c000fa5a <Buzzer::Buzzer(char const*)>:
c000fa5a:	83 ec 0c             	sub    esp,0xc
c000fa5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa61:	83 ec 08             	sub    esp,0x8
c000fa64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa68:	50                   	push   eax
c000fa69:	e8 dc 08 00 00       	call   c001034a <Device::Device(char const*)>
c000fa6e:	83 c4 10             	add    esp,0x10
c000fa71:	ba 20 08 02 c0       	mov    edx,0xc0020820
c000fa76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa7a:	89 10                	mov    DWORD PTR [eax],edx
c000fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa80:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fa8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa8e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fa98:	90                   	nop
c000fa99:	83 c4 0c             	add    esp,0xc
c000fa9c:	c3                   	ret    
c000fa9d:	90                   	nop

c000fa9e <Buzzer::~Buzzer()>:
c000fa9e:	83 ec 0c             	sub    esp,0xc
c000faa1:	ba 20 08 02 c0       	mov    edx,0xc0020820
c000faa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faaa:	89 10                	mov    DWORD PTR [eax],edx
c000faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fab0:	83 ec 0c             	sub    esp,0xc
c000fab3:	50                   	push   eax
c000fab4:	e8 43 05 00 00       	call   c000fffc <Device::~Device()>
c000fab9:	83 c4 10             	add    esp,0x10
c000fabc:	90                   	nop
c000fabd:	83 c4 0c             	add    esp,0xc
c000fac0:	c3                   	ret    
c000fac1:	90                   	nop

c000fac2 <Buzzer::~Buzzer()>:
c000fac2:	83 ec 0c             	sub    esp,0xc
c000fac5:	83 ec 0c             	sub    esp,0xc
c000fac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000facc:	e8 cd ff ff ff       	call   c000fa9e <Buzzer::~Buzzer()>
c000fad1:	83 c4 10             	add    esp,0x10
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	68 5c 01 00 00       	push   0x15c
c000fadc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fae0:	e8 8a f1 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c000fae5:	83 c4 10             	add    esp,0x10
c000fae8:	83 c4 0c             	add    esp,0xc
c000faeb:	c3                   	ret    

c000faec <Buzzer::stop()>:
c000faec:	83 ec 14             	sub    esp,0x14
c000faef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000faf3:	8b 10                	mov    edx,DWORD PTR [eax]
c000faf5:	6a 00                	push   0x0
c000faf7:	50                   	push   eax
c000faf8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fafb:	83 c4 1c             	add    esp,0x1c
c000fafe:	c3                   	ret    

c000faff <beepThread(void*)>:
c000faff:	53                   	push   ebx
c000fb00:	83 ec 08             	sub    esp,0x8
c000fb03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb07:	e8 26 7e 00 00       	call   c0017932 <unlockScheduler()>
c000fb0c:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fb11:	52                   	push   edx
c000fb12:	52                   	push   edx
c000fb13:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fb19:	52                   	push   edx
c000fb1a:	50                   	push   eax
c000fb1b:	e8 58 83 00 00       	call   c0017e78 <nanoSleep(unsigned long long)>
c000fb20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb23:	e8 c4 ff ff ff       	call   c000faec <Buzzer::stop()>
c000fb28:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fb30:	83 c4 18             	add    esp,0x18
c000fb33:	5b                   	pop    ebx
c000fb34:	e9 85 82 00 00       	jmp    c0017dbe <blockTask(TaskState)>
c000fb39:	90                   	nop

c000fb3a <Buzzer::beep(int, int, bool)>:
c000fb3a:	57                   	push   edi
c000fb3b:	56                   	push   esi
c000fb3c:	53                   	push   ebx
c000fb3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb41:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fb45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fb49:	52                   	push   edx
c000fb4a:	52                   	push   edx
c000fb4b:	8b 06                	mov    eax,DWORD PTR [esi]
c000fb4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb51:	56                   	push   esi
c000fb52:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fb55:	83 c4 10             	add    esp,0x10
c000fb58:	89 f8                	mov    eax,edi
c000fb5a:	84 c0                	test   al,al
c000fb5c:	74 1f                	je     c000fb7d <Buzzer::beep(int, int, bool)+0x43>
c000fb5e:	50                   	push   eax
c000fb5f:	50                   	push   eax
c000fb60:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fb66:	99                   	cdq    
c000fb67:	52                   	push   edx
c000fb68:	50                   	push   eax
c000fb69:	e8 0a 83 00 00       	call   c0017e78 <nanoSleep(unsigned long long)>
c000fb6e:	83 c4 10             	add    esp,0x10
c000fb71:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb75:	5b                   	pop    ebx
c000fb76:	5e                   	pop    esi
c000fb77:	5f                   	pop    edi
c000fb78:	e9 6f ff ff ff       	jmp    c000faec <Buzzer::stop()>
c000fb7d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fb83:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c000fb88:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fb90:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb94:	c7 44 24 14 ff fa 00 c0 	mov    DWORD PTR [esp+0x14],0xc000faff
c000fb9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fba0:	5b                   	pop    ebx
c000fba1:	5e                   	pop    esi
c000fba2:	5f                   	pop    edi
c000fba3:	e9 b2 7e 00 00       	jmp    c0017a5a <Process::createThread(void (*)(void*), void*, int)>

c000fba8 <loadClockSettings()>:
c000fba8:	c7 05 14 34 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0023414,0xa
c000fbb2:	c6 05 11 34 02 c0 00 	mov    BYTE PTR ds:0xc0023411,0x0
c000fbb9:	c6 05 10 34 02 c0 01 	mov    BYTE PTR ds:0xc0023410,0x1
c000fbc0:	c3                   	ret    
c000fbc1:	90                   	nop

c000fbc2 <Clock::Clock(char const*)>:
c000fbc2:	83 ec 0c             	sub    esp,0xc
c000fbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbc9:	83 ec 08             	sub    esp,0x8
c000fbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbd0:	50                   	push   eax
c000fbd1:	e8 74 07 00 00       	call   c001034a <Device::Device(char const*)>
c000fbd6:	83 c4 10             	add    esp,0x10
c000fbd9:	ba 50 08 02 c0       	mov    edx,0xc0020850
c000fbde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbe2:	89 10                	mov    DWORD PTR [eax],edx
c000fbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbe8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fbf2:	90                   	nop
c000fbf3:	83 c4 0c             	add    esp,0xc
c000fbf6:	c3                   	ret    
c000fbf7:	90                   	nop

c000fbf8 <Clock::~Clock()>:
c000fbf8:	83 ec 0c             	sub    esp,0xc
c000fbfb:	ba 50 08 02 c0       	mov    edx,0xc0020850
c000fc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc04:	89 10                	mov    DWORD PTR [eax],edx
c000fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0a:	83 ec 0c             	sub    esp,0xc
c000fc0d:	50                   	push   eax
c000fc0e:	e8 e9 03 00 00       	call   c000fffc <Device::~Device()>
c000fc13:	83 c4 10             	add    esp,0x10
c000fc16:	90                   	nop
c000fc17:	83 c4 0c             	add    esp,0xc
c000fc1a:	c3                   	ret    
c000fc1b:	90                   	nop

c000fc1c <Clock::~Clock()>:
c000fc1c:	83 ec 0c             	sub    esp,0xc
c000fc1f:	83 ec 0c             	sub    esp,0xc
c000fc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc26:	e8 cd ff ff ff       	call   c000fbf8 <Clock::~Clock()>
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	83 ec 08             	sub    esp,0x8
c000fc31:	68 58 01 00 00       	push   0x158
c000fc36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc3a:	e8 30 f0 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c000fc3f:	83 c4 10             	add    esp,0x10
c000fc42:	83 c4 0c             	add    esp,0xc
c000fc45:	c3                   	ret    

c000fc46 <Clock::timeInSecondsLocal()>:
c000fc46:	53                   	push   ebx
c000fc47:	83 ec 14             	sub    esp,0x14
c000fc4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc4e:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc50:	50                   	push   eax
c000fc51:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fc54:	0f b6 0d 10 34 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023410
c000fc5b:	03 0d 14 34 02 c0    	add    ecx,DWORD PTR ds:0xc0023414
c000fc61:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fc67:	89 cb                	mov    ebx,ecx
c000fc69:	c1 fb 1f             	sar    ebx,0x1f
c000fc6c:	01 c8                	add    eax,ecx
c000fc6e:	11 da                	adc    edx,ebx
c000fc70:	83 c4 10             	add    esp,0x10
c000fc73:	31 c9                	xor    ecx,ecx
c000fc75:	80 3d 11 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023411,0x0
c000fc7c:	74 05                	je     c000fc83 <Clock::timeInSecondsLocal()+0x3d>
c000fc7e:	b9 08 07 00 00       	mov    ecx,0x708
c000fc83:	31 db                	xor    ebx,ebx
c000fc85:	01 c8                	add    eax,ecx
c000fc87:	11 da                	adc    edx,ebx
c000fc89:	83 c4 08             	add    esp,0x8
c000fc8c:	5b                   	pop    ebx
c000fc8d:	c3                   	ret    

c000fc8e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000fc8e:	57                   	push   edi
c000fc8f:	56                   	push   esi
c000fc90:	53                   	push   ebx
c000fc91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc99:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc9f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000fca2:	0f b6 05 10 34 02 c0 	movzx  eax,BYTE PTR ds:0xc0023410
c000fca9:	03 05 14 34 02 c0    	add    eax,DWORD PTR ds:0xc0023414
c000fcaf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000fcb5:	99                   	cdq    
c000fcb6:	29 c6                	sub    esi,eax
c000fcb8:	19 d7                	sbb    edi,edx
c000fcba:	89 f0                	mov    eax,esi
c000fcbc:	89 fa                	mov    edx,edi
c000fcbe:	31 f6                	xor    esi,esi
c000fcc0:	80 3d 11 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023411,0x0
c000fcc7:	74 05                	je     c000fcce <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000fcc9:	be 08 07 00 00       	mov    esi,0x708
c000fcce:	31 ff                	xor    edi,edi
c000fcd0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fcd4:	29 f0                	sub    eax,esi
c000fcd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fcda:	19 fa                	sbb    edx,edi
c000fcdc:	89 d8                	mov    eax,ebx
c000fcde:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fce2:	5b                   	pop    ebx
c000fce3:	5e                   	pop    esi
c000fce4:	5f                   	pop    edi
c000fce5:	ff e0                	jmp    eax

c000fce7 <datetimeToSeconds(datetime_t)>:
c000fce7:	55                   	push   ebp
c000fce8:	57                   	push   edi
c000fce9:	56                   	push   esi
c000fcea:	53                   	push   ebx
c000fceb:	83 ec 14             	sub    esp,0x14
c000fcee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fcf2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fcf6:	89 d3                	mov    ebx,edx
c000fcf8:	0f b6 c6             	movzx  eax,dh
c000fcfb:	c1 eb 10             	shr    ebx,0x10
c000fcfe:	48                   	dec    eax
c000fcff:	66 81 eb 6c 07       	sub    bx,0x76c
c000fd04:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fd08:	0f b6 f5             	movzx  esi,ch
c000fd0b:	89 cf                	mov    edi,ecx
c000fd0d:	6b f6 3c             	imul   esi,esi,0x3c
c000fd10:	c1 ef 10             	shr    edi,0x10
c000fd13:	0f b6 c9             	movzx  ecx,cl
c000fd16:	89 f8                	mov    eax,edi
c000fd18:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fd1e:	0f b6 f8             	movzx  edi,al
c000fd21:	0f b6 d2             	movzx  edx,dl
c000fd24:	01 fe                	add    esi,edi
c000fd26:	01 f1                	add    ecx,esi
c000fd28:	0f b7 f3             	movzx  esi,bx
c000fd2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fd2f:	c1 f9 1f             	sar    ecx,0x1f
c000fd32:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000fd37:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fd3b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000fd40:	8b 0c 8d a0 08 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf760]
c000fd47:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000fd4b:	76 29                	jbe    c000fd76 <datetimeToSeconds(datetime_t)+0x8f>
c000fd4d:	f6 c3 03             	test   bl,0x3
c000fd50:	75 24                	jne    c000fd76 <datetimeToSeconds(datetime_t)+0x8f>
c000fd52:	31 d2                	xor    edx,edx
c000fd54:	bf 64 00 00 00       	mov    edi,0x64
c000fd59:	89 d8                	mov    eax,ebx
c000fd5b:	66 f7 f7             	div    di
c000fd5e:	66 85 d2             	test   dx,dx
c000fd61:	75 12                	jne    c000fd75 <datetimeToSeconds(datetime_t)+0x8e>
c000fd63:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000fd69:	bf 90 01 00 00       	mov    edi,0x190
c000fd6e:	99                   	cdq    
c000fd6f:	f7 ff                	idiv   edi
c000fd71:	85 d2                	test   edx,edx
c000fd73:	75 01                	jne    c000fd76 <datetimeToSeconds(datetime_t)+0x8f>
c000fd75:	41                   	inc    ecx
c000fd76:	66 83 fb 46          	cmp    bx,0x46
c000fd7a:	76 45                	jbe    c000fdc1 <datetimeToSeconds(datetime_t)+0xda>
c000fd7c:	bb 46 00 00 00       	mov    ebx,0x46
c000fd81:	bf 64 00 00 00       	mov    edi,0x64
c000fd86:	bd 90 01 00 00       	mov    ebp,0x190
c000fd8b:	b8 6d 01 00 00       	mov    eax,0x16d
c000fd90:	f6 c3 03             	test   bl,0x3
c000fd93:	75 23                	jne    c000fdb8 <datetimeToSeconds(datetime_t)+0xd1>
c000fd95:	89 d8                	mov    eax,ebx
c000fd97:	99                   	cdq    
c000fd98:	f7 ff                	idiv   edi
c000fd9a:	b8 6e 01 00 00       	mov    eax,0x16e
c000fd9f:	85 d2                	test   edx,edx
c000fda1:	75 15                	jne    c000fdb8 <datetimeToSeconds(datetime_t)+0xd1>
c000fda3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000fda9:	99                   	cdq    
c000fdaa:	f7 fd                	idiv   ebp
c000fdac:	83 fa 01             	cmp    edx,0x1
c000fdaf:	19 c0                	sbb    eax,eax
c000fdb1:	f7 d0                	not    eax
c000fdb3:	05 6e 01 00 00       	add    eax,0x16e
c000fdb8:	01 c1                	add    ecx,eax
c000fdba:	43                   	inc    ebx
c000fdbb:	39 f3                	cmp    ebx,esi
c000fdbd:	7c cc                	jl     c000fd8b <datetimeToSeconds(datetime_t)+0xa4>
c000fdbf:	eb 35                	jmp    c000fdf6 <datetimeToSeconds(datetime_t)+0x10f>
c000fdc1:	74 33                	je     c000fdf6 <datetimeToSeconds(datetime_t)+0x10f>
c000fdc3:	b8 45 00 00 00       	mov    eax,0x45
c000fdc8:	89 c2                	mov    edx,eax
c000fdca:	83 e2 03             	and    edx,0x3
c000fdcd:	39 f0                	cmp    eax,esi
c000fdcf:	7e 0f                	jle    c000fde0 <datetimeToSeconds(datetime_t)+0xf9>
c000fdd1:	83 fa 01             	cmp    edx,0x1
c000fdd4:	19 d2                	sbb    edx,edx
c000fdd6:	48                   	dec    eax
c000fdd7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000fdde:	eb e8                	jmp    c000fdc8 <datetimeToSeconds(datetime_t)+0xe1>
c000fde0:	b8 6d 01 00 00       	mov    eax,0x16d
c000fde5:	85 d2                	test   edx,edx
c000fde7:	75 0b                	jne    c000fdf4 <datetimeToSeconds(datetime_t)+0x10d>
c000fde9:	66 83 fb 01          	cmp    bx,0x1
c000fded:	19 c0                	sbb    eax,eax
c000fdef:	05 6e 01 00 00       	add    eax,0x16e
c000fdf4:	29 c1                	sub    ecx,eax
c000fdf6:	b8 80 51 01 00       	mov    eax,0x15180
c000fdfb:	f7 e9                	imul   ecx
c000fdfd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe01:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fe05:	83 c4 14             	add    esp,0x14
c000fe08:	5b                   	pop    ebx
c000fe09:	5e                   	pop    esi
c000fe0a:	5f                   	pop    edi
c000fe0b:	5d                   	pop    ebp
c000fe0c:	c3                   	ret    
c000fe0d:	90                   	nop

c000fe0e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000fe0e:	57                   	push   edi
c000fe0f:	56                   	push   esi
c000fe10:	53                   	push   ebx
c000fe11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe15:	8b 06                	mov    eax,DWORD PTR [esi]
c000fe17:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000fe1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe22:	e8 c0 fe ff ff       	call   c000fce7 <datetimeToSeconds(datetime_t)>
c000fe27:	59                   	pop    ecx
c000fe28:	0f b6 0d 10 34 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023410
c000fe2f:	5b                   	pop    ebx
c000fe30:	03 0d 14 34 02 c0    	add    ecx,DWORD PTR ds:0xc0023414
c000fe36:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fe3c:	89 cb                	mov    ebx,ecx
c000fe3e:	c1 fb 1f             	sar    ebx,0x1f
c000fe41:	29 c8                	sub    eax,ecx
c000fe43:	19 da                	sbb    edx,ebx
c000fe45:	31 c9                	xor    ecx,ecx
c000fe47:	80 3d 11 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023411,0x0
c000fe4e:	74 05                	je     c000fe55 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000fe50:	b9 08 07 00 00       	mov    ecx,0x708
c000fe55:	31 db                	xor    ebx,ebx
c000fe57:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fe5b:	29 c8                	sub    eax,ecx
c000fe5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fe61:	19 da                	sbb    edx,ebx
c000fe63:	89 f8                	mov    eax,edi
c000fe65:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fe69:	5b                   	pop    ebx
c000fe6a:	5e                   	pop    esi
c000fe6b:	5f                   	pop    edi
c000fe6c:	ff e0                	jmp    eax

c000fe6e <secondsToDatetime(unsigned long long)>:
c000fe6e:	55                   	push   ebp
c000fe6f:	57                   	push   edi
c000fe70:	56                   	push   esi
c000fe71:	53                   	push   ebx
c000fe72:	83 ec 1c             	sub    esp,0x1c
c000fe75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fe79:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe7d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000fe81:	6a 00                	push   0x0
c000fe83:	68 80 51 01 00       	push   0x15180
c000fe88:	55                   	push   ebp
c000fe89:	57                   	push   edi
c000fe8a:	e8 4d e4 00 00       	call   c001e2dc <__udivdi3>
c000fe8f:	83 c4 10             	add    esp,0x10
c000fe92:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000fe98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe9c:	6a 00                	push   0x0
c000fe9e:	68 80 51 01 00       	push   0x15180
c000fea3:	55                   	push   ebp
c000fea4:	57                   	push   edi
c000fea5:	bf 10 0e 00 00       	mov    edi,0xe10
c000feaa:	e8 2d e5 00 00       	call   c001e3dc <__umoddi3>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	99                   	cdq    
c000feb3:	f7 ff                	idiv   edi
c000feb5:	bf 3c 00 00 00       	mov    edi,0x3c
c000feba:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000febd:	89 d0                	mov    eax,edx
c000febf:	99                   	cdq    
c000fec0:	f7 ff                	idiv   edi
c000fec2:	85 db                	test   ebx,ebx
c000fec4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000fec7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000feca:	79 11                	jns    c000fedd <secondsToDatetime(unsigned long long)+0x6f>
c000fecc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fed0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000fed6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000fedb:	eb 07                	jmp    c000fee4 <secondsToDatetime(unsigned long long)+0x76>
c000fedd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000fee2:	89 d8                	mov    eax,ebx
c000fee4:	bf b4 05 00 00       	mov    edi,0x5b4
c000fee9:	99                   	cdq    
c000feea:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000feef:	f7 f9                	idiv   ecx
c000fef1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000fef6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fefa:	31 d2                	xor    edx,edx
c000fefc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ff04:	01 c3                	add    ebx,eax
c000ff06:	89 d8                	mov    eax,ebx
c000ff08:	f7 f1                	div    ecx
c000ff0a:	31 d2                	xor    edx,edx
c000ff0c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ff0f:	89 d8                	mov    eax,ebx
c000ff11:	f7 f7                	div    edi
c000ff13:	31 d2                	xor    edx,edx
c000ff15:	29 c1                	sub    ecx,eax
c000ff17:	89 d8                	mov    eax,ebx
c000ff19:	f7 f5                	div    ebp
c000ff1b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ff20:	29 c1                	sub    ecx,eax
c000ff22:	31 d2                	xor    edx,edx
c000ff24:	89 c8                	mov    eax,ecx
c000ff26:	f7 f5                	div    ebp
c000ff28:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ff2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff31:	31 d2                	xor    edx,edx
c000ff33:	89 c8                	mov    eax,ecx
c000ff35:	f7 f5                	div    ebp
c000ff37:	31 d2                	xor    edx,edx
c000ff39:	01 c3                	add    ebx,eax
c000ff3b:	89 c8                	mov    eax,ecx
c000ff3d:	f7 f7                	div    edi
c000ff3f:	bf 99 00 00 00       	mov    edi,0x99
c000ff44:	29 c3                	sub    ebx,eax
c000ff46:	31 d2                	xor    edx,edx
c000ff48:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ff50:	29 c3                	sub    ebx,eax
c000ff52:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ff55:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ff58:	bb 05 00 00 00       	mov    ebx,0x5
c000ff5d:	83 c1 02             	add    ecx,0x2
c000ff60:	89 c8                	mov    eax,ecx
c000ff62:	f7 f7                	div    edi
c000ff64:	31 d2                	xor    edx,edx
c000ff66:	89 c7                	mov    edi,eax
c000ff68:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000ff6e:	83 c0 02             	add    eax,0x2
c000ff71:	f7 f3                	div    ebx
c000ff73:	89 eb                	mov    ebx,ebp
c000ff75:	29 c3                	sub    ebx,eax
c000ff77:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000ff7d:	88 1e                	mov    BYTE PTR [esi],bl
c000ff7f:	19 c0                	sbb    eax,eax
c000ff81:	31 d2                	xor    edx,edx
c000ff83:	83 e0 0c             	and    eax,0xc
c000ff86:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000ff8a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000ff92:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ff96:	83 f9 01             	cmp    ecx,0x1
c000ff99:	0f 96 c2             	setbe  dl
c000ff9c:	41                   	inc    ecx
c000ff9d:	01 d0                	add    eax,edx
c000ff9f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ffa2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ffa6:	83 c4 1c             	add    esp,0x1c
c000ffa9:	89 f0                	mov    eax,esi
c000ffab:	5b                   	pop    ebx
c000ffac:	5e                   	pop    esi
c000ffad:	5f                   	pop    edi
c000ffae:	5d                   	pop    ebp
c000ffaf:	c2 04 00             	ret    0x4

c000ffb2 <Clock::timeInDatetimeLocal()>:
c000ffb2:	53                   	push   ebx
c000ffb3:	83 ec 14             	sub    esp,0x14
c000ffb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ffba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ffbe:	e8 83 fc ff ff       	call   c000fc46 <Clock::timeInSecondsLocal()>
c000ffc3:	83 c4 0c             	add    esp,0xc
c000ffc6:	52                   	push   edx
c000ffc7:	50                   	push   eax
c000ffc8:	53                   	push   ebx
c000ffc9:	e8 a0 fe ff ff       	call   c000fe6e <secondsToDatetime(unsigned long long)>
c000ffce:	89 d8                	mov    eax,ebx
c000ffd0:	83 c4 14             	add    esp,0x14
c000ffd3:	5b                   	pop    ebx
c000ffd4:	c2 04 00             	ret    0x4
c000ffd7:	90                   	nop

c000ffd8 <Device::hibernate()>:
c000ffd8:	c3                   	ret    
c000ffd9:	90                   	nop

c000ffda <Device::wake()>:
c000ffda:	c3                   	ret    
c000ffdb:	90                   	nop

c000ffdc <Device::detect()>:
c000ffdc:	c3                   	ret    
c000ffdd:	90                   	nop

c000ffde <Device::disableLegacy()>:
c000ffde:	c3                   	ret    
c000ffdf:	90                   	nop

c000ffe0 <Device::powerSaving(PowerSavingLevel)>:
c000ffe0:	c3                   	ret    
c000ffe1:	90                   	nop

c000ffe2 <DriverlessDevice::close(int, int, void*)>:
c000ffe2:	31 c0                	xor    eax,eax
c000ffe4:	c3                   	ret    
c000ffe5:	90                   	nop

c000ffe6 <DriverlessDevice::detect()>:
c000ffe6:	c3                   	ret    
c000ffe7:	90                   	nop

c000ffe8 <DriverlessDevice::open(int, int, void*)>:
c000ffe8:	83 ec 18             	sub    esp,0x18
c000ffeb:	68 d0 08 02 c0       	push   0xc00208d0
c000fff0:	e8 ef 49 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c000fff5:	83 c8 ff             	or     eax,0xffffffff
c000fff8:	83 c4 1c             	add    esp,0x1c
c000fffb:	c3                   	ret    

c000fffc <Device::~Device()>:
c000fffc:	ba f8 08 02 c0       	mov    edx,0xc00208f8
c0010001:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010005:	89 10                	mov    DWORD PTR [eax],edx
c0010007:	90                   	nop
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <Device::~Device()>:
c001000a:	83 ec 0c             	sub    esp,0xc
c001000d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010011:	e8 e6 ff ff ff       	call   c000fffc <Device::~Device()>
c0010016:	83 c4 04             	add    esp,0x4
c0010019:	83 ec 08             	sub    esp,0x8
c001001c:	68 58 01 00 00       	push   0x158
c0010021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010025:	e8 45 ec ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001002a:	83 c4 10             	add    esp,0x10
c001002d:	83 c4 0c             	add    esp,0xc
c0010030:	c3                   	ret    
c0010031:	90                   	nop

c0010032 <Device::findAndLoadDriver()>:
c0010032:	c3                   	ret    
c0010033:	90                   	nop

c0010034 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010034:	57                   	push   edi
c0010035:	b9 09 00 00 00       	mov    ecx,0x9
c001003a:	56                   	push   esi
c001003b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001003f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010043:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001004d:	81 c7 18 01 00 00    	add    edi,0x118
c0010053:	fc                   	cld    
c0010054:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010056:	5e                   	pop    esi
c0010057:	5f                   	pop    edi
c0010058:	c3                   	ret    
c0010059:	90                   	nop

c001005a <Device::preOpenACPI(void*, char*, char*)>:
c001005a:	56                   	push   esi
c001005b:	53                   	push   ebx
c001005c:	83 ec 08             	sub    esp,0x8
c001005f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010063:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010067:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010071:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010075:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001007b:	6a 1e                	push   0x1e
c001007d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010083:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010087:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001008d:	50                   	push   eax
c001008e:	e8 3f 05 ff ff       	call   c00005d2 <memcpy>
c0010093:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010097:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001009b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00100a3:	83 c4 14             	add    esp,0x14
c00100a6:	5b                   	pop    ebx
c00100a7:	5e                   	pop    esi
c00100a8:	e9 25 05 ff ff       	jmp    c00005d2 <memcpy>
c00100ad:	90                   	nop

c00100ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00100ae:	55                   	push   ebp
c00100af:	57                   	push   edi
c00100b0:	56                   	push   esi
c00100b1:	53                   	push   ebx
c00100b2:	83 ec 0c             	sub    esp,0xc
c00100b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00100b9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00100bd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00100c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100c5:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00100ca:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00100d1:	75 0b                	jne    c00100de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00100d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00100d9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00100dc:	eb 24                	jmp    c0010102 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00100de:	e8 fb 3b 00 00       	call   c0013cde <thisCPU()>
c00100e3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00100e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00100eb:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00100ef:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00100f3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00100f7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00100fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ff:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010102:	83 c4 0c             	add    esp,0xc
c0010105:	5b                   	pop    ebx
c0010106:	5e                   	pop    esi
c0010107:	5f                   	pop    edi
c0010108:	5d                   	pop    ebp
c0010109:	ff e0                	jmp    eax
c001010b:	90                   	nop

c001010c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001010c:	57                   	push   edi
c001010d:	56                   	push   esi
c001010e:	53                   	push   ebx
c001010f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010113:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010117:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001011b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010120:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010127:	75 0b                	jne    c0010134 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0010129:	8b 00                	mov    eax,DWORD PTR [eax]
c001012b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001012f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010132:	eb 20                	jmp    c0010154 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010134:	e8 a5 3b 00 00       	call   c0013cde <thisCPU()>
c0010139:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001013f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010141:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010145:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010149:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001014d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010151:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010154:	5b                   	pop    ebx
c0010155:	5e                   	pop    esi
c0010156:	5f                   	pop    edi
c0010157:	ff e0                	jmp    eax
c0010159:	90                   	nop

c001015a <Device::addChild(Device*)>:
c001015a:	53                   	push   ebx
c001015b:	83 ec 08             	sub    esp,0x8
c001015e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010162:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010166:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001016c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010172:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010174:	85 d2                	test   edx,edx
c0010176:	74 04                	je     c001017c <Device::addChild(Device*)+0x22>
c0010178:	89 d3                	mov    ebx,edx
c001017a:	eb f6                	jmp    c0010172 <Device::addChild(Device*)+0x18>
c001017c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001017f:	83 ec 0c             	sub    esp,0xc
c0010182:	6a 08                	push   0x8
c0010184:	e8 d7 ea ff ff       	call   c000ec60 <operator new(unsigned long)>
c0010189:	89 03                	mov    DWORD PTR [ebx],eax
c001018b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010191:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010198:	83 c4 18             	add    esp,0x18
c001019b:	5b                   	pop    ebx
c001019c:	c3                   	ret    
c001019d:	90                   	nop

c001019e <Device::removeAllChildren()>:
c001019e:	56                   	push   esi
c001019f:	53                   	push   ebx
c00101a0:	52                   	push   edx
c00101a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101a5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00101ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00101ae:	74 17                	je     c00101c7 <Device::removeAllChildren()+0x29>
c00101b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00101b3:	85 c0                	test   eax,eax
c00101b5:	74 0c                	je     c00101c3 <Device::removeAllChildren()+0x25>
c00101b7:	83 ec 0c             	sub    esp,0xc
c00101ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00101bc:	50                   	push   eax
c00101bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00101c0:	83 c4 10             	add    esp,0x10
c00101c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00101c5:	eb e4                	jmp    c00101ab <Device::removeAllChildren()+0xd>
c00101c7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00101cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00101d3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00101d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00101e0:	58                   	pop    eax
c00101e1:	5b                   	pop    ebx
c00101e2:	5e                   	pop    esi
c00101e3:	c3                   	ret    

c00101e4 <Device::hibernateAll()>:
c00101e4:	53                   	push   ebx
c00101e5:	83 ec 14             	sub    esp,0x14
c00101e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00101ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00101ee:	53                   	push   ebx
c00101ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00101f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00101f8:	83 c4 10             	add    esp,0x10
c00101fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00101fe:	74 0f                	je     c001020f <Device::hibernateAll()+0x2b>
c0010200:	83 ec 0c             	sub    esp,0xc
c0010203:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010206:	e8 d9 ff ff ff       	call   c00101e4 <Device::hibernateAll()>
c001020b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001020d:	eb e9                	jmp    c00101f8 <Device::hibernateAll()+0x14>
c001020f:	83 c4 08             	add    esp,0x8
c0010212:	5b                   	pop    ebx
c0010213:	c3                   	ret    

c0010214 <Device::wakeAll()>:
c0010214:	53                   	push   ebx
c0010215:	83 ec 14             	sub    esp,0x14
c0010218:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001021c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001021e:	53                   	push   ebx
c001021f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010222:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010228:	83 c4 10             	add    esp,0x10
c001022b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001022e:	74 0f                	je     c001023f <Device::wakeAll()+0x2b>
c0010230:	83 ec 0c             	sub    esp,0xc
c0010233:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010236:	e8 d9 ff ff ff       	call   c0010214 <Device::wakeAll()>
c001023b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001023d:	eb e9                	jmp    c0010228 <Device::wakeAll()+0x14>
c001023f:	83 c4 08             	add    esp,0x8
c0010242:	5b                   	pop    ebx
c0010243:	c3                   	ret    

c0010244 <Device::detectAll()>:
c0010244:	53                   	push   ebx
c0010245:	83 ec 14             	sub    esp,0x14
c0010248:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001024c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001024e:	53                   	push   ebx
c001024f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010252:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010258:	83 c4 10             	add    esp,0x10
c001025b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001025e:	74 0f                	je     c001026f <Device::detectAll()+0x2b>
c0010260:	83 ec 0c             	sub    esp,0xc
c0010263:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010266:	e8 d9 ff ff ff       	call   c0010244 <Device::detectAll()>
c001026b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001026d:	eb e9                	jmp    c0010258 <Device::detectAll()+0x14>
c001026f:	83 c4 08             	add    esp,0x8
c0010272:	5b                   	pop    ebx
c0010273:	c3                   	ret    

c0010274 <Device::disableLegacyAll()>:
c0010274:	53                   	push   ebx
c0010275:	83 ec 14             	sub    esp,0x14
c0010278:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001027c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001027e:	53                   	push   ebx
c001027f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010282:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010288:	83 c4 10             	add    esp,0x10
c001028b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001028e:	74 0f                	je     c001029f <Device::disableLegacyAll()+0x2b>
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010296:	e8 d9 ff ff ff       	call   c0010274 <Device::disableLegacyAll()>
c001029b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001029d:	eb e9                	jmp    c0010288 <Device::disableLegacyAll()+0x14>
c001029f:	83 c4 08             	add    esp,0x8
c00102a2:	5b                   	pop    ebx
c00102a3:	c3                   	ret    

c00102a4 <Device::loadDriversForAll()>:
c00102a4:	53                   	push   ebx
c00102a5:	83 ec 08             	sub    esp,0x8
c00102a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ac:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00102b2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00102b4:	85 db                	test   ebx,ebx
c00102b6:	74 12                	je     c00102ca <Device::loadDriversForAll()+0x26>
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00102be:	e8 e1 ff ff ff       	call   c00102a4 <Device::loadDriversForAll()>
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	89 d8                	mov    eax,ebx
c00102c8:	eb e8                	jmp    c00102b2 <Device::loadDriversForAll()+0xe>
c00102ca:	83 c4 08             	add    esp,0x8
c00102cd:	5b                   	pop    ebx
c00102ce:	c3                   	ret    
c00102cf:	90                   	nop

c00102d0 <Device::closeAll()>:
c00102d0:	53                   	push   ebx
c00102d1:	83 ec 08             	sub    esp,0x8
c00102d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102da:	6a 00                	push   0x0
c00102dc:	6a 00                	push   0x0
c00102de:	6a 00                	push   0x0
c00102e0:	53                   	push   ebx
c00102e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00102e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00102ea:	83 c4 10             	add    esp,0x10
c00102ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00102f0:	74 0f                	je     c0010301 <Device::closeAll()+0x31>
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00102f8:	e8 d3 ff ff ff       	call   c00102d0 <Device::closeAll()>
c00102fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00102ff:	eb e9                	jmp    c00102ea <Device::closeAll()+0x1a>
c0010301:	83 c4 08             	add    esp,0x8
c0010304:	5b                   	pop    ebx
c0010305:	c3                   	ret    

c0010306 <Device::powerSavingAll(PowerSavingLevel)>:
c0010306:	56                   	push   esi
c0010307:	53                   	push   ebx
c0010308:	83 ec 0c             	sub    esp,0xc
c001030b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001030f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010313:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010315:	56                   	push   esi
c0010316:	53                   	push   ebx
c0010317:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001031a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010320:	83 c4 10             	add    esp,0x10
c0010323:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010326:	74 0f                	je     c0010337 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0010328:	52                   	push   edx
c0010329:	52                   	push   edx
c001032a:	56                   	push   esi
c001032b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001032e:	e8 d3 ff ff ff       	call   c0010306 <Device::powerSavingAll(PowerSavingLevel)>
c0010333:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010335:	eb e9                	jmp    c0010320 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010337:	58                   	pop    eax
c0010338:	5b                   	pop    ebx
c0010339:	5e                   	pop    esi
c001033a:	c3                   	ret    
c001033b:	90                   	nop

c001033c <Device::setName(char const*)>:
c001033c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010344:	e9 5e 03 ff ff       	jmp    c00006a7 <strcpy>
c0010349:	90                   	nop

c001034a <Device::Device(char const*)>:
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	ba f8 08 02 c0       	mov    edx,0xc00208f8
c0010352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010356:	89 10                	mov    DWORD PTR [eax],edx
c0010358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001035c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001036a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010378:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010386:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010390:	83 ec 08             	sub    esp,0x8
c0010393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001039b:	e8 9c ff ff ff       	call   c001033c <Device::setName(char const*)>
c00103a0:	83 c4 10             	add    esp,0x10
c00103a3:	83 ec 0c             	sub    esp,0xc
c00103a6:	6a 08                	push   0x8
c00103a8:	e8 b3 e8 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00103ad:	83 c4 10             	add    esp,0x10
c00103b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103c1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00103c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103cb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00103d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103db:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00103e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ec:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00103f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00103fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010402:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001040c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010410:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001041a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001041e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001042c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010436:	90                   	nop
c0010437:	83 c4 0c             	add    esp,0xc
c001043a:	c3                   	ret    
c001043b:	90                   	nop

c001043c <Device::getName()>:
c001043c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010440:	05 d0 00 00 00       	add    eax,0xd0
c0010445:	c3                   	ret    

c0010446 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044d:	83 ec 08             	sub    esp,0x8
c0010450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010454:	50                   	push   eax
c0010455:	e8 f0 fe ff ff       	call   c001034a <Device::Device(char const*)>
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	ba 24 09 02 c0       	mov    edx,0xc0020924
c0010462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010466:	89 10                	mov    DWORD PTR [eax],edx
c0010468:	90                   	nop
c0010469:	83 c4 0c             	add    esp,0xc
c001046c:	c3                   	ret    
c001046d:	90                   	nop

c001046e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001046e:	57                   	push   edi
c001046f:	56                   	push   esi
c0010470:	53                   	push   ebx
c0010471:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010475:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010479:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001047d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010483:	75 0c                	jne    c0010491 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010485:	52                   	push   edx
c0010486:	52                   	push   edx
c0010487:	53                   	push   ebx
c0010488:	56                   	push   esi
c0010489:	e8 66 e3 00 00       	call   c001e7f4 <LinkedList<Device>::addElement(Device*)>
c001048e:	83 c4 10             	add    esp,0x10
c0010491:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010497:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001049a:	74 12                	je     c00104ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001049c:	50                   	push   eax
c001049d:	57                   	push   edi
c001049e:	56                   	push   esi
c001049f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104a2:	e8 c7 ff ff ff       	call   c001046e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00104a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	eb e9                	jmp    c0010497 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00104ae:	5b                   	pop    ebx
c00104af:	5e                   	pop    esi
c00104b0:	5f                   	pop    edi
c00104b1:	c3                   	ret    

c00104b2 <getDevicesOfType(DeviceType)>:
c00104b2:	53                   	push   ebx
c00104b3:	83 ec 14             	sub    esp,0x14
c00104b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104ba:	53                   	push   ebx
c00104bb:	e8 10 e4 00 00       	call   c001e8d0 <LinkedList<Device>::LinkedList()>
c00104c0:	83 c4 0c             	add    esp,0xc
c00104c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104c7:	53                   	push   ebx
c00104c8:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c00104ce:	e8 9b ff ff ff       	call   c001046e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00104d3:	89 d8                	mov    eax,ebx
c00104d5:	83 c4 18             	add    esp,0x18
c00104d8:	5b                   	pop    ebx
c00104d9:	c2 04 00             	ret    0x4

c00104dc <HardDiskController::HardDiskController(char const*)>:
c00104dc:	83 ec 0c             	sub    esp,0xc
c00104df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e3:	83 ec 08             	sub    esp,0x8
c00104e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ea:	50                   	push   eax
c00104eb:	e8 5a fe ff ff       	call   c001034a <Device::Device(char const*)>
c00104f0:	83 c4 10             	add    esp,0x10
c00104f3:	ba 50 09 02 c0       	mov    edx,0xc0020950
c00104f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fc:	89 10                	mov    DWORD PTR [eax],edx
c00104fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010502:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001050c:	90                   	nop
c001050d:	83 c4 0c             	add    esp,0xc
c0010510:	c3                   	ret    
c0010511:	90                   	nop

c0010512 <HardDiskController::~HardDiskController()>:
c0010512:	83 ec 0c             	sub    esp,0xc
c0010515:	ba 50 09 02 c0       	mov    edx,0xc0020950
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	89 10                	mov    DWORD PTR [eax],edx
c0010520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010524:	83 ec 0c             	sub    esp,0xc
c0010527:	50                   	push   eax
c0010528:	e8 cf fa ff ff       	call   c000fffc <Device::~Device()>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	90                   	nop
c0010531:	83 c4 0c             	add    esp,0xc
c0010534:	c3                   	ret    
c0010535:	90                   	nop

c0010536 <HardDiskController::~HardDiskController()>:
c0010536:	83 ec 0c             	sub    esp,0xc
c0010539:	83 ec 0c             	sub    esp,0xc
c001053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010540:	e8 cd ff ff ff       	call   c0010512 <HardDiskController::~HardDiskController()>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	83 ec 08             	sub    esp,0x8
c001054b:	68 58 01 00 00       	push   0x158
c0010550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010554:	e8 16 e7 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c0010559:	83 c4 10             	add    esp,0x10
c001055c:	83 c4 0c             	add    esp,0xc
c001055f:	c3                   	ret    

c0010560 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010567:	83 ec 08             	sub    esp,0x8
c001056a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056e:	50                   	push   eax
c001056f:	e8 d6 fd ff ff       	call   c001034a <Device::Device(char const*)>
c0010574:	83 c4 10             	add    esp,0x10
c0010577:	ba 7c 09 02 c0       	mov    edx,0xc002097c
c001057c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010580:	89 10                	mov    DWORD PTR [eax],edx
c0010582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010586:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001058d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010591:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00105a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00105b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00105c2:	90                   	nop
c00105c3:	83 c4 0c             	add    esp,0xc
c00105c6:	c3                   	ret    
c00105c7:	90                   	nop

c00105c8 <PhysicalDisk::startCache()>:
c00105c8:	56                   	push   esi
c00105c9:	53                   	push   ebx
c00105ca:	83 ec 10             	sub    esp,0x10
c00105cd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105d1:	6a 30                	push   0x30
c00105d3:	e8 88 e6 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00105d8:	89 c6                	mov    esi,eax
c00105da:	58                   	pop    eax
c00105db:	5a                   	pop    edx
c00105dc:	53                   	push   ebx
c00105dd:	56                   	push   esi
c00105de:	e8 6d 1e 00 00       	call   c0012450 <VCache::VCache(PhysicalDisk*)>
c00105e3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00105e9:	83 c4 14             	add    esp,0x14
c00105ec:	5b                   	pop    ebx
c00105ed:	5e                   	pop    esi
c00105ee:	c3                   	ret    
c00105ef:	90                   	nop

c00105f0 <PhysicalDisk::~PhysicalDisk()>:
c00105f0:	83 ec 0c             	sub    esp,0xc
c00105f3:	ba 7c 09 02 c0       	mov    edx,0xc002097c
c00105f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fc:	89 10                	mov    DWORD PTR [eax],edx
c00105fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010602:	83 ec 0c             	sub    esp,0xc
c0010605:	50                   	push   eax
c0010606:	e8 f1 f9 ff ff       	call   c000fffc <Device::~Device()>
c001060b:	83 c4 10             	add    esp,0x10
c001060e:	90                   	nop
c001060f:	83 c4 0c             	add    esp,0xc
c0010612:	c3                   	ret    
c0010613:	90                   	nop

c0010614 <PhysicalDisk::~PhysicalDisk()>:
c0010614:	83 ec 0c             	sub    esp,0xc
c0010617:	83 ec 0c             	sub    esp,0xc
c001061a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001061e:	e8 cd ff ff ff       	call   c00105f0 <PhysicalDisk::~PhysicalDisk()>
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	83 ec 08             	sub    esp,0x8
c0010629:	68 6c 01 00 00       	push   0x16c
c001062e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010632:	e8 38 e6 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	83 c4 0c             	add    esp,0xc
c001063d:	c3                   	ret    

c001063e <FPU::FPU(char const*)>:
c001063e:	83 ec 0c             	sub    esp,0xc
c0010641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010645:	83 ec 08             	sub    esp,0x8
c0010648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001064c:	50                   	push   eax
c001064d:	e8 f8 fc ff ff       	call   c001034a <Device::Device(char const*)>
c0010652:	83 c4 10             	add    esp,0x10
c0010655:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c001065a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001065e:	89 10                	mov    DWORD PTR [eax],edx
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001066e:	90                   	nop
c001066f:	83 c4 0c             	add    esp,0xc
c0010672:	c3                   	ret    
c0010673:	90                   	nop

c0010674 <FPU::~FPU()>:
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c001067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010680:	89 10                	mov    DWORD PTR [eax],edx
c0010682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010686:	83 ec 0c             	sub    esp,0xc
c0010689:	50                   	push   eax
c001068a:	e8 6d f9 ff ff       	call   c000fffc <Device::~Device()>
c001068f:	83 c4 10             	add    esp,0x10
c0010692:	90                   	nop
c0010693:	83 c4 0c             	add    esp,0xc
c0010696:	c3                   	ret    
c0010697:	90                   	nop

c0010698 <FPU::~FPU()>:
c0010698:	83 ec 0c             	sub    esp,0xc
c001069b:	83 ec 0c             	sub    esp,0xc
c001069e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a2:	e8 cd ff ff ff       	call   c0010674 <FPU::~FPU()>
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	83 ec 08             	sub    esp,0x8
c00106ad:	68 58 01 00 00       	push   0x158
c00106b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b6:	e8 b4 e5 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c00106bb:	83 c4 10             	add    esp,0x10
c00106be:	83 c4 0c             	add    esp,0xc
c00106c1:	c3                   	ret    

c00106c2 <setupFPU()>:
c00106c2:	53                   	push   ebx
c00106c3:	83 ec 08             	sub    esp,0x8
c00106c6:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00106cb:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c00106d2:	74 19                	je     c00106ed <setupFPU()+0x2b>
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	68 58 01 00 00       	push   0x158
c00106dc:	e8 7f e5 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00106e1:	89 c3                	mov    ebx,eax
c00106e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00106e6:	e8 b9 c8 00 00       	call   c001cfa4 <AVX::AVX()>
c00106eb:	eb 5b                	jmp    c0010748 <setupFPU()+0x86>
c00106ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00106f3:	84 c0                	test   al,al
c00106f5:	79 19                	jns    c0010710 <setupFPU()+0x4e>
c00106f7:	83 ec 0c             	sub    esp,0xc
c00106fa:	68 58 01 00 00       	push   0x158
c00106ff:	e8 5c e5 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0010704:	89 c3                	mov    ebx,eax
c0010706:	89 04 24             	mov    DWORD PTR [esp],eax
c0010709:	e8 bc c9 00 00       	call   c001d0ca <SSE::SSE()>
c001070e:	eb 38                	jmp    c0010748 <setupFPU()+0x86>
c0010710:	a8 20                	test   al,0x20
c0010712:	74 19                	je     c001072d <setupFPU()+0x6b>
c0010714:	83 ec 0c             	sub    esp,0xc
c0010717:	68 58 01 00 00       	push   0x158
c001071c:	e8 3f e5 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0010721:	89 c3                	mov    ebx,eax
c0010723:	89 04 24             	mov    DWORD PTR [esp],eax
c0010726:	e8 09 c9 00 00       	call   c001d034 <MMX::MMX()>
c001072b:	eb 1b                	jmp    c0010748 <setupFPU()+0x86>
c001072d:	a8 10                	test   al,0x10
c001072f:	74 1c                	je     c001074d <setupFPU()+0x8b>
c0010731:	83 ec 0c             	sub    esp,0xc
c0010734:	68 58 01 00 00       	push   0x158
c0010739:	e8 22 e5 ff ff       	call   c000ec60 <operator new(unsigned long)>
c001073e:	89 c3                	mov    ebx,eax
c0010740:	89 04 24             	mov    DWORD PTR [esp],eax
c0010743:	e8 10 ca 00 00       	call   c001d158 <x87::x87()>
c0010748:	83 c4 10             	add    esp,0x10
c001074b:	eb 2c                	jmp    c0010779 <setupFPU()+0xb7>
c001074d:	83 ec 0c             	sub    esp,0xc
c0010750:	31 db                	xor    ebx,ebx
c0010752:	68 a8 09 02 c0       	push   0xc00209a8
c0010757:	e8 f3 e5 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001075c:	e8 7d 35 00 00       	call   c0013cde <thisCPU()>
c0010761:	e8 78 35 00 00       	call   c0013cde <thisCPU()>
c0010766:	e8 bd e1 00 00       	call   c001e928 <CPU::readCR0()>
c001076b:	83 c8 04             	or     eax,0x4
c001076e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010771:	e8 c4 e1 00 00       	call   c001e93a <CPU::writeCR0(unsigned long)>
c0010776:	83 c4 10             	add    esp,0x10
c0010779:	89 d8                	mov    eax,ebx
c001077b:	83 c4 08             	add    esp,0x8
c001077e:	5b                   	pop    ebx
c001077f:	c3                   	ret    

c0010780 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010784:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010788:	c1 e0 04             	shl    eax,0x4
c001078b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001078f:	8d 50 10             	lea    edx,[eax+0x10]
c0010792:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010798:	74 08                	je     c00107a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001079a:	83 c0 04             	add    eax,0x4
c001079d:	39 d0                	cmp    eax,edx
c001079f:	75 f1                	jne    c0010792 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00107a1:	c3                   	ret    
c00107a2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00107ac:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00107b6:	eb e2                	jmp    c001079a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00107b8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00107b8:	57                   	push   edi
c00107b9:	31 c0                	xor    eax,eax
c00107bb:	56                   	push   esi
c00107bc:	53                   	push   ebx
c00107bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107c5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00107c9:	89 da                	mov    edx,ebx
c00107cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00107cf:	c1 e2 04             	shl    edx,0x4
c00107d2:	01 ca                	add    edx,ecx
c00107d4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00107dc:	74 16                	je     c00107f4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00107de:	40                   	inc    eax
c00107df:	83 f8 04             	cmp    eax,0x4
c00107e2:	75 f0                	jne    c00107d4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00107e4:	c7 44 24 10 ec 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc00209ec
c00107ec:	5b                   	pop    ebx
c00107ed:	5e                   	pop    esi
c00107ee:	5f                   	pop    edi
c00107ef:	e9 f0 41 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>
c00107f4:	8d 04 98             	lea    eax,[eax+ebx*4]
c00107f7:	8d 04 81             	lea    eax,[ecx+eax*4]
c00107fa:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010800:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010806:	5b                   	pop    ebx
c0010807:	5e                   	pop    esi
c0010808:	5f                   	pop    edi
c0010809:	c3                   	ret    

c001080a <doubleFault(regs*, void*)>:
c001080a:	c7 44 24 04 1c 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b1c
c0010812:	e9 cd 41 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>
c0010817:	90                   	nop

c0010818 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010818:	56                   	push   esi
c0010819:	53                   	push   ebx
c001081a:	50                   	push   eax
c001081b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001081f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010823:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010828:	75 35                	jne    c001085f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001082a:	8d 43 20             	lea    eax,[ebx+0x20]
c001082d:	31 d2                	xor    edx,edx
c001082f:	89 c1                	mov    ecx,eax
c0010831:	c1 e1 04             	shl    ecx,0x4
c0010834:	01 f1                	add    ecx,esi
c0010836:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001083e:	74 3e                	je     c001087e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010840:	42                   	inc    edx
c0010841:	83 fa 04             	cmp    edx,0x4
c0010844:	75 f0                	jne    c0010836 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010846:	83 ec 0c             	sub    esp,0xc
c0010849:	68 60 0a 02 c0       	push   0xc0020a60
c001084e:	e8 91 41 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001085b:	5a                   	pop    edx
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	c3                   	ret    
c001085f:	83 ec 0c             	sub    esp,0xc
c0010862:	56                   	push   esi
c0010863:	e8 d4 fb ff ff       	call   c001043c <Device::getName()>
c0010868:	83 c4 10             	add    esp,0x10
c001086b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001086e:	75 ba                	jne    c001082a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010870:	83 fb 0f             	cmp    ebx,0xf
c0010873:	7f 29                	jg     c001089e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010875:	0f b6 9b 00 2a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd600]
c001087c:	eb ac                	jmp    c001082a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001087e:	8d 04 82             	lea    eax,[edx+eax*4]
c0010881:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010885:	8d 04 86             	lea    eax,[esi+eax*4]
c0010888:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001088e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010892:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010898:	89 d8                	mov    eax,ebx
c001089a:	5a                   	pop    edx
c001089b:	5b                   	pop    ebx
c001089c:	5e                   	pop    esi
c001089d:	c3                   	ret    
c001089e:	83 ec 0c             	sub    esp,0xc
c00108a1:	68 28 0a 02 c0       	push   0xc0020a28
c00108a6:	e8 39 41 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c00108ab:	83 c4 10             	add    esp,0x10
c00108ae:	e9 77 ff ff ff       	jmp    c001082a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00108b3:	90                   	nop

c00108b4 <InterruptController::clearAllHandlers(int, bool)>:
c00108b4:	56                   	push   esi
c00108b5:	53                   	push   ebx
c00108b6:	52                   	push   edx
c00108b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108bf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00108c4:	75 61                	jne    c0010927 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00108c6:	8d 46 20             	lea    eax,[esi+0x20]
c00108c9:	c1 e6 04             	shl    esi,0x4
c00108cc:	c1 e0 04             	shl    eax,0x4
c00108cf:	01 de                	add    esi,ebx
c00108d1:	01 d8                	add    eax,ebx
c00108d3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00108dd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00108e7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00108f1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00108fb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010905:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001090f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010919:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010923:	58                   	pop    eax
c0010924:	5b                   	pop    ebx
c0010925:	5e                   	pop    esi
c0010926:	c3                   	ret    
c0010927:	83 ec 0c             	sub    esp,0xc
c001092a:	53                   	push   ebx
c001092b:	e8 0c fb ff ff       	call   c001043c <Device::getName()>
c0010930:	83 c4 10             	add    esp,0x10
c0010933:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010936:	75 8e                	jne    c00108c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010938:	83 fe 0f             	cmp    esi,0xf
c001093b:	7f 09                	jg     c0010946 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001093d:	0f b6 b6 00 2a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd600]
c0010944:	eb 80                	jmp    c00108c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010946:	83 ec 0c             	sub    esp,0xc
c0010949:	68 9c 0a 02 c0       	push   0xc0020a9c
c001094e:	e8 91 40 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	e9 6b ff ff ff       	jmp    c00108c6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001095b:	90                   	nop

c001095c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001095c:	56                   	push   esi
c001095d:	53                   	push   ebx
c001095e:	52                   	push   edx
c001095f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010963:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010967:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001096c:	75 3a                	jne    c00109a8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001096e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010972:	8d 50 20             	lea    edx,[eax+0x20]
c0010975:	c1 e2 04             	shl    edx,0x4
c0010978:	8d 04 16             	lea    eax,[esi+edx*1]
c001097b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001097f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010985:	74 0b                	je     c0010992 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010987:	83 c0 04             	add    eax,0x4
c001098a:	39 d0                	cmp    eax,edx
c001098c:	75 f1                	jne    c001097f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001098e:	58                   	pop    eax
c001098f:	5b                   	pop    ebx
c0010990:	5e                   	pop    esi
c0010991:	c3                   	ret    
c0010992:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001099c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00109a6:	eb df                	jmp    c0010987 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	56                   	push   esi
c00109ac:	e8 8b fa ff ff       	call   c001043c <Device::getName()>
c00109b1:	83 c4 10             	add    esp,0x10
c00109b4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00109b7:	75 b5                	jne    c001096e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00109b9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00109be:	7f 11                	jg     c00109d1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00109c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109c4:	0f b6 80 00 2a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd600]
c00109cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109cf:	eb 9d                	jmp    c001096e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00109d1:	83 ec 0c             	sub    esp,0xc
c00109d4:	68 9c 0a 02 c0       	push   0xc0020a9c
c00109d9:	e8 06 40 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c00109de:	83 c4 10             	add    esp,0x10
c00109e1:	eb 8b                	jmp    c001096e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00109e3 <nmiHandler(regs*, void*)>:
c00109e3:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00109e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109ec:	e9 71 a9 ff ff       	jmp    c000b362 <Computer::handleNMI()>

c00109f1 <int_handler>:
c00109f1:	55                   	push   ebp
c00109f2:	57                   	push   edi
c00109f3:	56                   	push   esi
c00109f4:	53                   	push   ebx
c00109f5:	83 ec 0c             	sub    esp,0xc
c00109f8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00109fc:	80 3d f0 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023cf0,0x0
c0010a03:	74 0b                	je     c0010a10 <int_handler+0x1f>
c0010a05:	fa                   	cli    
c0010a06:	f4                   	hlt    
c0010a07:	80 3d f0 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023cf0,0x0
c0010a0e:	75 f5                	jne    c0010a05 <int_handler+0x14>
c0010a10:	e8 c9 32 00 00       	call   c0013cde <thisCPU()>
c0010a15:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010a18:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010a1e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010a21:	83 f8 17             	cmp    eax,0x17
c0010a24:	77 13                	ja     c0010a39 <int_handler+0x48>
c0010a26:	83 ec 08             	sub    esp,0x8
c0010a29:	8b 17                	mov    edx,DWORD PTR [edi]
c0010a2b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010a2e:	0f b6 c0             	movzx  eax,al
c0010a31:	50                   	push   eax
c0010a32:	57                   	push   edi
c0010a33:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010a36:	83 c4 10             	add    esp,0x10
c0010a39:	83 c3 15             	add    ebx,0x15
c0010a3c:	c1 e3 04             	shl    ebx,0x4
c0010a3f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010a43:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010a4a:	31 db                	xor    ebx,ebx
c0010a4c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010a50:	85 c0                	test   eax,eax
c0010a52:	74 13                	je     c0010a67 <int_handler+0x76>
c0010a54:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010a57:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010a5b:	74 1c                	je     c0010a79 <int_handler+0x88>
c0010a5d:	83 ec 08             	sub    esp,0x8
c0010a60:	52                   	push   edx
c0010a61:	56                   	push   esi
c0010a62:	ff d0                	call   eax
c0010a64:	83 c4 10             	add    esp,0x10
c0010a67:	43                   	inc    ebx
c0010a68:	83 fb 04             	cmp    ebx,0x4
c0010a6b:	75 df                	jne    c0010a4c <int_handler+0x5b>
c0010a6d:	83 c4 0c             	add    esp,0xc
c0010a70:	31 c0                	xor    eax,eax
c0010a72:	5b                   	pop    ebx
c0010a73:	31 d2                	xor    edx,edx
c0010a75:	5e                   	pop    esi
c0010a76:	5f                   	pop    edi
c0010a77:	5d                   	pop    ebp
c0010a78:	c3                   	ret    
c0010a79:	83 ec 08             	sub    esp,0x8
c0010a7c:	52                   	push   edx
c0010a7d:	56                   	push   esi
c0010a7e:	ff d0                	call   eax
c0010a80:	83 c4 10             	add    esp,0x10
c0010a83:	83 c4 0c             	add    esp,0xc
c0010a86:	5b                   	pop    ebx
c0010a87:	5e                   	pop    esi
c0010a88:	5f                   	pop    edi
c0010a89:	5d                   	pop    ebp
c0010a8a:	c3                   	ret    
c0010a8b:	90                   	nop

c0010a8c <InterruptController::InterruptController(char const*)>:
c0010a8c:	83 ec 1c             	sub    esp,0x1c
c0010a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a93:	83 ec 08             	sub    esp,0x8
c0010a96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010a9a:	50                   	push   eax
c0010a9b:	e8 aa f8 ff ff       	call   c001034a <Device::Device(char const*)>
c0010aa0:	83 c4 10             	add    esp,0x10
c0010aa3:	ba b8 0c 02 c0       	mov    edx,0xc0020cb8
c0010aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aac:	89 10                	mov    DWORD PTR [eax],edx
c0010aae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010abc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ac4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010acc:	7f 5e                	jg     c0010b2c <InterruptController::InterruptController(char const*)+0xa0>
c0010ace:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ad6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010adb:	7f 49                	jg     c0010b26 <InterruptController::InterruptController(char const*)+0x9a>
c0010add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ae1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ae5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010aec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010af0:	01 ca                	add    edx,ecx
c0010af2:	83 c2 54             	add    edx,0x54
c0010af5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010b0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b10:	01 ca                	add    edx,ecx
c0010b12:	81 c2 54 04 00 00    	add    edx,0x454
c0010b18:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010b20:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010b24:	eb b0                	jmp    c0010ad6 <InterruptController::InterruptController(char const*)+0x4a>
c0010b26:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010b2a:	eb 98                	jmp    c0010ac4 <InterruptController::InterruptController(char const*)+0x38>
c0010b2c:	90                   	nop
c0010b2d:	83 c4 1c             	add    esp,0x1c
c0010b30:	c3                   	ret    
c0010b31:	90                   	nop

c0010b32 <InterruptController::~InterruptController()>:
c0010b32:	83 ec 0c             	sub    esp,0xc
c0010b35:	ba b8 0c 02 c0       	mov    edx,0xc0020cb8
c0010b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3e:	89 10                	mov    DWORD PTR [eax],edx
c0010b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b44:	83 ec 0c             	sub    esp,0xc
c0010b47:	50                   	push   eax
c0010b48:	e8 af f4 ff ff       	call   c000fffc <Device::~Device()>
c0010b4d:	83 c4 10             	add    esp,0x10
c0010b50:	90                   	nop
c0010b51:	83 c4 0c             	add    esp,0xc
c0010b54:	c3                   	ret    
c0010b55:	90                   	nop

c0010b56 <InterruptController::~InterruptController()>:
c0010b56:	83 ec 0c             	sub    esp,0xc
c0010b59:	83 ec 0c             	sub    esp,0xc
c0010b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b60:	e8 cd ff ff ff       	call   c0010b32 <InterruptController::~InterruptController()>
c0010b65:	83 c4 10             	add    esp,0x10
c0010b68:	83 ec 08             	sub    esp,0x8
c0010b6b:	68 58 21 00 00       	push   0x2158
c0010b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b74:	e8 f6 e0 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c0010b79:	83 c4 10             	add    esp,0x10
c0010b7c:	83 c4 0c             	add    esp,0xc
c0010b7f:	c3                   	ret    

c0010b80 <displayDebugInfo(regs*)>:
c0010b80:	55                   	push   ebp
c0010b81:	57                   	push   edi
c0010b82:	56                   	push   esi
c0010b83:	53                   	push   ebx
c0010b84:	83 ec 24             	sub    esp,0x24
c0010b87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010b8b:	0f 20 c2             	mov    edx,cr0
c0010b8e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010b92:	0f 20 d7             	mov    edi,cr2
c0010b95:	0f 20 de             	mov    esi,cr3
c0010b98:	0f 20 e5             	mov    ebp,cr4
c0010b9b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010b9e:	68 29 0b 02 c0       	push   0xc0020b29
c0010ba3:	e8 a7 e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010ba8:	58                   	pop    eax
c0010ba9:	5a                   	pop    edx
c0010baa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010bad:	68 34 0b 02 c0       	push   0xc0020b34
c0010bb2:	e8 98 e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010bb7:	59                   	pop    ecx
c0010bb8:	58                   	pop    eax
c0010bb9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010bbc:	68 3f 0b 02 c0       	push   0xc0020b3f
c0010bc1:	e8 89 e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010bc6:	58                   	pop    eax
c0010bc7:	5a                   	pop    edx
c0010bc8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bcb:	68 4a 0b 02 c0       	push   0xc0020b4a
c0010bd0:	e8 7a e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010bd5:	59                   	pop    ecx
c0010bd6:	58                   	pop    eax
c0010bd7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bda:	68 55 0b 02 c0       	push   0xc0020b55
c0010bdf:	e8 6b e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010be4:	58                   	pop    eax
c0010be5:	5a                   	pop    edx
c0010be6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010be9:	68 60 0b 02 c0       	push   0xc0020b60
c0010bee:	e8 5c e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010bf3:	59                   	pop    ecx
c0010bf4:	58                   	pop    eax
c0010bf5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010bf8:	68 7a 0b 02 c0       	push   0xc0020b7a
c0010bfd:	e8 4d e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010c02:	58                   	pop    eax
c0010c03:	5a                   	pop    edx
c0010c04:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c07:	68 6b 0b 02 c0       	push   0xc0020b6b
c0010c0c:	e8 3e e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010c11:	59                   	pop    ecx
c0010c12:	58                   	pop    eax
c0010c13:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010c16:	68 76 0b 02 c0       	push   0xc0020b76
c0010c1b:	e8 2f e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010c20:	58                   	pop    eax
c0010c21:	5a                   	pop    edx
c0010c22:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010c25:	68 85 0b 02 c0       	push   0xc0020b85
c0010c2a:	e8 20 e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010c2f:	59                   	pop    ecx
c0010c30:	58                   	pop    eax
c0010c31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c34:	68 90 0b 02 c0       	push   0xc0020b90
c0010c39:	e8 11 e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010c3e:	58                   	pop    eax
c0010c3f:	5a                   	pop    edx
c0010c40:	57                   	push   edi
c0010c41:	68 9b 0b 02 c0       	push   0xc0020b9b
c0010c46:	e8 04 e1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010c4b:	59                   	pop    ecx
c0010c4c:	58                   	pop    eax
c0010c4d:	56                   	push   esi
c0010c4e:	68 a6 0b 02 c0       	push   0xc0020ba6
c0010c53:	e8 f7 e0 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010c58:	58                   	pop    eax
c0010c59:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010c5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c64:	e8 de c2 ff ff       	call   c000cf47 <setActiveTerminal(VgaText*)>
c0010c69:	58                   	pop    eax
c0010c6a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010c6d:	5a                   	pop    edx
c0010c6e:	c1 e0 05             	shl    eax,0x5
c0010c71:	05 60 27 02 c0       	add    eax,0xc0022760
c0010c76:	50                   	push   eax
c0010c77:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010c7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c82:	e8 df c6 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010c87:	59                   	pop    ecx
c0010c88:	58                   	pop    eax
c0010c89:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010c8e:	68 b1 0b 02 c0       	push   0xc0020bb1
c0010c93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010c99:	e8 c8 c6 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010c9e:	58                   	pop    eax
c0010c9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ca4:	5a                   	pop    edx
c0010ca5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010ca8:	83 c0 0c             	add    eax,0xc
c0010cab:	50                   	push   eax
c0010cac:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010cb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cb7:	e8 aa c6 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010cbc:	59                   	pop    ecx
c0010cbd:	58                   	pop    eax
c0010cbe:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010cc3:	68 ba 0b 02 c0       	push   0xc0020bba
c0010cc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cce:	e8 93 c6 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010cd3:	58                   	pop    eax
c0010cd4:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010cd9:	5a                   	pop    edx
c0010cda:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010cdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ce3:	e8 a4 c6 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010ce8:	59                   	pop    ecx
c0010ce9:	58                   	pop    eax
c0010cea:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010cef:	68 c2 0b 02 c0       	push   0xc0020bc2
c0010cf4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cfa:	e8 67 c6 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010cff:	58                   	pop    eax
c0010d00:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d05:	5a                   	pop    edx
c0010d06:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010d09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d0f:	e8 78 c6 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010d14:	59                   	pop    ecx
c0010d15:	58                   	pop    eax
c0010d16:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d1b:	68 ca 0b 02 c0       	push   0xc0020bca
c0010d20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d26:	e8 3b c6 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010d2b:	58                   	pop    eax
c0010d2c:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d31:	5a                   	pop    edx
c0010d32:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010d35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d3b:	e8 4c c6 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010d40:	59                   	pop    ecx
c0010d41:	58                   	pop    eax
c0010d42:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d47:	68 d2 0b 02 c0       	push   0xc0020bd2
c0010d4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d52:	e8 0f c6 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010d57:	58                   	pop    eax
c0010d58:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d5d:	5a                   	pop    edx
c0010d5e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010d61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d67:	e8 20 c6 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010d6c:	59                   	pop    ecx
c0010d6d:	58                   	pop    eax
c0010d6e:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d73:	68 da 0b 02 c0       	push   0xc0020bda
c0010d78:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d7e:	e8 e3 c5 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010d83:	58                   	pop    eax
c0010d84:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d89:	5a                   	pop    edx
c0010d8a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010d8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d93:	e8 f4 c5 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010d98:	59                   	pop    ecx
c0010d99:	58                   	pop    eax
c0010d9a:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010d9f:	68 e2 0b 02 c0       	push   0xc0020be2
c0010da4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010daa:	e8 b7 c5 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010daf:	58                   	pop    eax
c0010db0:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010db5:	5a                   	pop    edx
c0010db6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0010db9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dbf:	e8 c8 c5 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010dc4:	59                   	pop    ecx
c0010dc5:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010dca:	5b                   	pop    ebx
c0010dcb:	68 ea 0b 02 c0       	push   0xc0020bea
c0010dd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dd6:	e8 8b c5 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010ddb:	58                   	pop    eax
c0010ddc:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010de1:	5a                   	pop    edx
c0010de2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010de6:	52                   	push   edx
c0010de7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ded:	e8 9a c5 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010df2:	59                   	pop    ecx
c0010df3:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010df8:	5b                   	pop    ebx
c0010df9:	68 f3 0b 02 c0       	push   0xc0020bf3
c0010dfe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e04:	e8 5d c5 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010e09:	58                   	pop    eax
c0010e0a:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010e0f:	5a                   	pop    edx
c0010e10:	57                   	push   edi
c0010e11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e17:	e8 70 c5 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010e1c:	59                   	pop    ecx
c0010e1d:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010e22:	5b                   	pop    ebx
c0010e23:	68 fb 0b 02 c0       	push   0xc0020bfb
c0010e28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e2e:	e8 33 c5 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010e33:	5f                   	pop    edi
c0010e34:	58                   	pop    eax
c0010e35:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010e3a:	56                   	push   esi
c0010e3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e41:	e8 46 c5 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010e46:	58                   	pop    eax
c0010e47:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010e4c:	5a                   	pop    edx
c0010e4d:	68 03 0c 02 c0       	push   0xc0020c03
c0010e52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e58:	e8 09 c5 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010e5d:	59                   	pop    ecx
c0010e5e:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010e63:	5b                   	pop    ebx
c0010e64:	55                   	push   ebp
c0010e65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e6b:	e8 1c c5 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010e70:	5e                   	pop    esi
c0010e71:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010e76:	5f                   	pop    edi
c0010e77:	68 0b 0c 02 c0       	push   0xc0020c0b
c0010e7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e82:	e8 df c4 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010e87:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010e8c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010e92:	e8 ac da 00 00       	call   c001e943 <CPU::readDR0()>
c0010e97:	5d                   	pop    ebp
c0010e98:	5a                   	pop    edx
c0010e99:	50                   	push   eax
c0010e9a:	53                   	push   ebx
c0010e9b:	e8 ec c4 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010ea0:	59                   	pop    ecx
c0010ea1:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010ea6:	5b                   	pop    ebx
c0010ea7:	68 14 0c 02 c0       	push   0xc0020c14
c0010eac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eb2:	e8 af c4 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010eb7:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010ebc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010ec2:	e8 8e da 00 00       	call   c001e955 <CPU::readDR1()>
c0010ec7:	5e                   	pop    esi
c0010ec8:	5f                   	pop    edi
c0010ec9:	50                   	push   eax
c0010eca:	53                   	push   ebx
c0010ecb:	e8 bc c4 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010ed0:	5d                   	pop    ebp
c0010ed1:	58                   	pop    eax
c0010ed2:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010ed7:	68 1c 0c 02 c0       	push   0xc0020c1c
c0010edc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ee2:	e8 7f c4 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010ee7:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010eec:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010ef2:	e8 70 da 00 00       	call   c001e967 <CPU::readDR2()>
c0010ef7:	5a                   	pop    edx
c0010ef8:	59                   	pop    ecx
c0010ef9:	50                   	push   eax
c0010efa:	53                   	push   ebx
c0010efb:	e8 8c c4 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010f00:	5b                   	pop    ebx
c0010f01:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010f06:	5e                   	pop    esi
c0010f07:	68 24 0c 02 c0       	push   0xc0020c24
c0010f0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f12:	e8 4f c4 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010f17:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010f1c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f22:	e8 52 da 00 00       	call   c001e979 <CPU::readDR3()>
c0010f27:	5f                   	pop    edi
c0010f28:	5d                   	pop    ebp
c0010f29:	50                   	push   eax
c0010f2a:	53                   	push   ebx
c0010f2b:	e8 5c c4 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010f30:	58                   	pop    eax
c0010f31:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010f36:	5a                   	pop    edx
c0010f37:	68 2c 0c 02 c0       	push   0xc0020c2c
c0010f3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f42:	e8 1f c4 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010f47:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010f4c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f52:	e8 34 da 00 00       	call   c001e98b <CPU::readDR6()>
c0010f57:	59                   	pop    ecx
c0010f58:	5e                   	pop    esi
c0010f59:	50                   	push   eax
c0010f5a:	53                   	push   ebx
c0010f5b:	e8 2c c4 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010f60:	5f                   	pop    edi
c0010f61:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010f66:	5d                   	pop    ebp
c0010f67:	68 34 0c 02 c0       	push   0xc0020c34
c0010f6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f72:	e8 ef c3 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0010f77:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0010f7c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f82:	e8 16 da 00 00       	call   c001e99d <CPU::readDR7()>
c0010f87:	5a                   	pop    edx
c0010f88:	59                   	pop    ecx
c0010f89:	50                   	push   eax
c0010f8a:	53                   	push   ebx
c0010f8b:	e8 fc c3 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0010f90:	fa                   	cli    
c0010f91:	f4                   	hlt    
c0010f92:	83 c4 10             	add    esp,0x10
c0010f95:	eb fe                	jmp    c0010f95 <displayDebugInfo(regs*)+0x415>

c0010f97 <x87EmulHandler(regs*, void*)>:
c0010f97:	53                   	push   ebx
c0010f98:	83 ec 08             	sub    esp,0x8
c0010f9b:	a1 34 34 02 c0       	mov    eax,ds:0xc0023434
c0010fa0:	85 c0                	test   eax,eax
c0010fa2:	74 15                	je     c0010fb9 <x87EmulHandler(regs*, void*)+0x22>
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fab:	ff d0                	call   eax
c0010fad:	83 c4 10             	add    esp,0x10
c0010fb0:	84 c0                	test   al,al
c0010fb2:	74 2f                	je     c0010fe3 <x87EmulHandler(regs*, void*)+0x4c>
c0010fb4:	83 c4 08             	add    esp,0x8
c0010fb7:	5b                   	pop    ebx
c0010fb8:	c3                   	ret    
c0010fb9:	83 ec 08             	sub    esp,0x8
c0010fbc:	8b 1d a8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232a8
c0010fc2:	6a 01                	push   0x1
c0010fc4:	68 3c 0c 02 c0       	push   0xc0020c3c
c0010fc9:	e8 04 64 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c0010fce:	5a                   	pop    edx
c0010fcf:	59                   	pop    ecx
c0010fd0:	53                   	push   ebx
c0010fd1:	50                   	push   eax
c0010fd2:	e8 4e 65 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c0010fd7:	a1 34 34 02 c0       	mov    eax,ds:0xc0023434
c0010fdc:	83 c4 10             	add    esp,0x10
c0010fdf:	85 c0                	test   eax,eax
c0010fe1:	75 c1                	jne    c0010fa4 <x87EmulHandler(regs*, void*)+0xd>
c0010fe3:	83 ec 0c             	sub    esp,0xc
c0010fe6:	68 59 0c 02 c0       	push   0xc0020c59
c0010feb:	e8 5f dd ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0010ff0:	58                   	pop    eax
c0010ff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff5:	e8 86 fb ff ff       	call   c0010b80 <displayDebugInfo(regs*)>

c0010ffa <gpFault(regs*, void*)>:
c0010ffa:	53                   	push   ebx
c0010ffb:	83 ec 14             	sub    esp,0x14
c0010ffe:	c7 05 30 34 02 c0 a3 87 01 c0 	mov    DWORD PTR ds:0xc0023430,0xc00187a3
c0011008:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001100c:	53                   	push   ebx
c001100d:	e8 91 77 00 00       	call   c00187a3 <Vm::faultHandler(regs*)>
c0011012:	83 c4 10             	add    esp,0x10
c0011015:	84 c0                	test   al,al
c0011017:	74 05                	je     c001101e <gpFault(regs*, void*)+0x24>
c0011019:	83 c4 08             	add    esp,0x8
c001101c:	5b                   	pop    ebx
c001101d:	c3                   	ret    
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	68 59 0c 02 c0       	push   0xc0020c59
c0011026:	e8 24 dd ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001102b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001102e:	e8 4d fb ff ff       	call   c0010b80 <displayDebugInfo(regs*)>

c0011033 <pgFault(regs*, void*)>:
c0011033:	83 ec 18             	sub    esp,0x18
c0011036:	68 74 0c 02 c0       	push   0xc0020c74
c001103b:	e8 0f dd ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0011040:	58                   	pop    eax
c0011041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011045:	e8 36 fb ff ff       	call   c0010b80 <displayDebugInfo(regs*)>

c001104a <otherISRHandler(regs*, void*)>:
c001104a:	53                   	push   ebx
c001104b:	83 ec 0c             	sub    esp,0xc
c001104e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011052:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011055:	50                   	push   eax
c0011056:	50                   	push   eax
c0011057:	68 81 0c 02 c0       	push   0xc0020c81
c001105c:	e8 ee dc ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0011061:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011064:	e8 17 fb ff ff       	call   c0010b80 <displayDebugInfo(regs*)>

c0011069 <opcodeFault(regs*, void*)>:
c0011069:	53                   	push   ebx
c001106a:	83 ec 08             	sub    esp,0x8
c001106d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011071:	e8 68 2c 00 00       	call   c0013cde <thisCPU()>
c0011076:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c001107d:	74 16                	je     c0011095 <opcodeFault(regs*, void*)+0x2c>
c001107f:	83 ec 0c             	sub    esp,0xc
c0011082:	68 d8 0a 02 c0       	push   0xc0020ad8
c0011087:	e8 c3 dc ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001108c:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011090:	83 c4 18             	add    esp,0x18
c0011093:	5b                   	pop    ebx
c0011094:	c3                   	ret    
c0011095:	83 ec 0c             	sub    esp,0xc
c0011098:	68 9e 0c 02 c0       	push   0xc0020c9e
c001109d:	e8 ad dc ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00110a2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00110a5:	c1 e0 04             	shl    eax,0x4
c00110a8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00110ab:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00110af:	89 14 24             	mov    DWORD PTR [esp],edx
c00110b2:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00110b6:	52                   	push   edx
c00110b7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00110bb:	52                   	push   edx
c00110bc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00110bf:	50                   	push   eax
c00110c0:	68 fc 0a 02 c0       	push   0xc0020afc
c00110c5:	e8 85 dc ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00110ca:	83 c4 14             	add    esp,0x14
c00110cd:	53                   	push   ebx
c00110ce:	e8 ad fa ff ff       	call   c0010b80 <displayDebugInfo(regs*)>

c00110d3 <displayProgramFault(char const*)>:
c00110d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110db:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00110e1:	85 c0                	test   eax,eax
c00110e3:	74 15                	je     c00110fa <displayProgramFault(char const*)+0x27>
c00110e5:	83 ec 0c             	sub    esp,0xc
c00110e8:	6a 04                	push   0x4
c00110ea:	6a 0f                	push   0xf
c00110ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f0:	50                   	push   eax
c00110f1:	e8 32 bf ff ff       	call   c000d028 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00110f6:	83 c4 1c             	add    esp,0x1c
c00110f9:	c3                   	ret    
c00110fa:	c3                   	ret    
c00110fb:	90                   	nop

c00110fc <InterruptController::convertLegacyIRQNumber(int)>:
c00110fc:	53                   	push   ebx
c00110fd:	83 ec 14             	sub    esp,0x14
c0011100:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011108:	e8 2f f3 ff ff       	call   c001043c <Device::getName()>
c001110d:	83 c4 10             	add    esp,0x10
c0011110:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011113:	74 07                	je     c001111c <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0011115:	89 d8                	mov    eax,ebx
c0011117:	83 c4 08             	add    esp,0x8
c001111a:	5b                   	pop    ebx
c001111b:	c3                   	ret    
c001111c:	83 fb 0f             	cmp    ebx,0xf
c001111f:	7f 0e                	jg     c001112f <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0011121:	0f b6 9b 00 2a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd600]
c0011128:	83 c4 08             	add    esp,0x8
c001112b:	89 d8                	mov    eax,ebx
c001112d:	5b                   	pop    ebx
c001112e:	c3                   	ret    
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	68 28 0a 02 c0       	push   0xc0020a28
c0011137:	e8 a8 38 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c001113c:	89 d8                	mov    eax,ebx
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	83 c4 08             	add    esp,0x8
c0011144:	5b                   	pop    ebx
c0011145:	c3                   	ret    

c0011146 <setupInterruptController()>:
c0011146:	56                   	push   esi
c0011147:	53                   	push   ebx
c0011148:	51                   	push   ecx
c0011149:	e8 8d 2b 00 00       	call   c0013cdb <getCPUNumber()>
c001114e:	85 c0                	test   eax,eax
c0011150:	0f 85 10 02 00 00    	jne    c0011366 <setupInterruptController()+0x220>
c0011156:	83 ec 0c             	sub    esp,0xc
c0011159:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c001115e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011164:	68 58 21 00 00       	push   0x2158
c0011169:	83 e0 01             	and    eax,0x1
c001116c:	89 c6                	mov    esi,eax
c001116e:	e8 ed da ff ff       	call   c000ec60 <operator new(unsigned long)>
c0011173:	89 04 24             	mov    DWORD PTR [esp],eax
c0011176:	89 c3                	mov    ebx,eax
c0011178:	e8 47 c6 00 00       	call   c001d7c4 <PIC::PIC()>
c001117d:	6a 00                	push   0x0
c001117f:	6a 00                	push   0x0
c0011181:	6a 00                	push   0x0
c0011183:	53                   	push   ebx
c0011184:	e8 7f c9 00 00       	call   c001db08 <PIC::open(int, int, void*)>
c0011189:	83 c4 20             	add    esp,0x20
c001118c:	89 f0                	mov    eax,esi
c001118e:	84 c0                	test   al,al
c0011190:	0f 85 92 01 00 00    	jne    c0011328 <setupInterruptController()+0x1e2>
c0011196:	83 ec 08             	sub    esp,0x8
c0011199:	53                   	push   ebx
c001119a:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c00111a0:	e8 b5 ef ff ff       	call   c001015a <Device::addChild(Device*)>
c00111a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111a7:	6a 00                	push   0x0
c00111a9:	68 4a 10 01 c0       	push   0xc001104a
c00111ae:	6a 00                	push   0x0
c00111b0:	53                   	push   ebx
c00111b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111b4:	83 c4 20             	add    esp,0x20
c00111b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111b9:	6a 00                	push   0x0
c00111bb:	68 4a 10 01 c0       	push   0xc001104a
c00111c0:	6a 01                	push   0x1
c00111c2:	53                   	push   ebx
c00111c3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c8:	6a 00                	push   0x0
c00111ca:	68 e3 09 01 c0       	push   0xc00109e3
c00111cf:	6a 02                	push   0x2
c00111d1:	53                   	push   ebx
c00111d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111d5:	83 c4 20             	add    esp,0x20
c00111d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111da:	6a 00                	push   0x0
c00111dc:	68 4a 10 01 c0       	push   0xc001104a
c00111e1:	6a 03                	push   0x3
c00111e3:	53                   	push   ebx
c00111e4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111e9:	6a 00                	push   0x0
c00111eb:	68 4a 10 01 c0       	push   0xc001104a
c00111f0:	6a 04                	push   0x4
c00111f2:	53                   	push   ebx
c00111f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111f6:	83 c4 20             	add    esp,0x20
c00111f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111fb:	6a 00                	push   0x0
c00111fd:	68 4a 10 01 c0       	push   0xc001104a
c0011202:	6a 05                	push   0x5
c0011204:	53                   	push   ebx
c0011205:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011208:	8b 03                	mov    eax,DWORD PTR [ebx]
c001120a:	6a 00                	push   0x0
c001120c:	68 69 10 01 c0       	push   0xc0011069
c0011211:	6a 06                	push   0x6
c0011213:	53                   	push   ebx
c0011214:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011217:	83 c4 20             	add    esp,0x20
c001121a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001121c:	6a 00                	push   0x0
c001121e:	68 97 0f 01 c0       	push   0xc0010f97
c0011223:	6a 07                	push   0x7
c0011225:	53                   	push   ebx
c0011226:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011229:	8b 03                	mov    eax,DWORD PTR [ebx]
c001122b:	6a 00                	push   0x0
c001122d:	68 0a 08 01 c0       	push   0xc001080a
c0011232:	6a 08                	push   0x8
c0011234:	53                   	push   ebx
c0011235:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011238:	83 c4 20             	add    esp,0x20
c001123b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001123d:	6a 00                	push   0x0
c001123f:	68 4a 10 01 c0       	push   0xc001104a
c0011244:	6a 09                	push   0x9
c0011246:	53                   	push   ebx
c0011247:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001124a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001124c:	6a 00                	push   0x0
c001124e:	68 4a 10 01 c0       	push   0xc001104a
c0011253:	6a 0a                	push   0xa
c0011255:	53                   	push   ebx
c0011256:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011259:	83 c4 20             	add    esp,0x20
c001125c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001125e:	6a 00                	push   0x0
c0011260:	68 4a 10 01 c0       	push   0xc001104a
c0011265:	6a 0b                	push   0xb
c0011267:	53                   	push   ebx
c0011268:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001126b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001126d:	6a 00                	push   0x0
c001126f:	68 4a 10 01 c0       	push   0xc001104a
c0011274:	6a 0c                	push   0xc
c0011276:	53                   	push   ebx
c0011277:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001127a:	83 c4 20             	add    esp,0x20
c001127d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001127f:	6a 00                	push   0x0
c0011281:	68 fa 0f 01 c0       	push   0xc0010ffa
c0011286:	6a 0d                	push   0xd
c0011288:	53                   	push   ebx
c0011289:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001128c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001128e:	6a 00                	push   0x0
c0011290:	68 33 10 01 c0       	push   0xc0011033
c0011295:	6a 0e                	push   0xe
c0011297:	53                   	push   ebx
c0011298:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001129b:	83 c4 20             	add    esp,0x20
c001129e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112a0:	6a 00                	push   0x0
c00112a2:	68 4a 10 01 c0       	push   0xc001104a
c00112a7:	6a 0f                	push   0xf
c00112a9:	53                   	push   ebx
c00112aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112af:	6a 00                	push   0x0
c00112b1:	68 4a 10 01 c0       	push   0xc001104a
c00112b6:	6a 10                	push   0x10
c00112b8:	53                   	push   ebx
c00112b9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112bc:	83 c4 20             	add    esp,0x20
c00112bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112c1:	6a 00                	push   0x0
c00112c3:	68 4a 10 01 c0       	push   0xc001104a
c00112c8:	6a 11                	push   0x11
c00112ca:	53                   	push   ebx
c00112cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112d0:	6a 00                	push   0x0
c00112d2:	68 4a 10 01 c0       	push   0xc001104a
c00112d7:	6a 12                	push   0x12
c00112d9:	53                   	push   ebx
c00112da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112dd:	83 c4 20             	add    esp,0x20
c00112e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e2:	6a 00                	push   0x0
c00112e4:	68 4a 10 01 c0       	push   0xc001104a
c00112e9:	6a 13                	push   0x13
c00112eb:	53                   	push   ebx
c00112ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112f1:	6a 00                	push   0x0
c00112f3:	68 4a 10 01 c0       	push   0xc001104a
c00112f8:	6a 14                	push   0x14
c00112fa:	53                   	push   ebx
c00112fb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112fe:	83 c4 20             	add    esp,0x20
c0011301:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011303:	6a 00                	push   0x0
c0011305:	68 4a 10 01 c0       	push   0xc001104a
c001130a:	6a 1e                	push   0x1e
c001130c:	53                   	push   ebx
c001130d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011310:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011312:	6a 00                	push   0x0
c0011314:	68 bc 63 01 c0       	push   0xc00163bc
c0011319:	6a 60                	push   0x60
c001131b:	53                   	push   ebx
c001131c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001131f:	83 c4 20             	add    esp,0x20
c0011322:	89 d8                	mov    eax,ebx
c0011324:	5a                   	pop    edx
c0011325:	5b                   	pop    ebx
c0011326:	5e                   	pop    esi
c0011327:	c3                   	ret    
c0011328:	8b 03                	mov    eax,DWORD PTR [ebx]
c001132a:	6a 00                	push   0x0
c001132c:	6a 00                	push   0x0
c001132e:	6a 00                	push   0x0
c0011330:	53                   	push   ebx
c0011331:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011336:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011339:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001133c:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0011343:	e8 18 d9 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0011348:	89 04 24             	mov    DWORD PTR [esp],eax
c001134b:	89 c3                	mov    ebx,eax
c001134d:	e8 b0 bf 00 00       	call   c001d302 <APIC::APIC()>
c0011352:	6a 00                	push   0x0
c0011354:	6a 00                	push   0x0
c0011356:	6a 00                	push   0x0
c0011358:	53                   	push   ebx
c0011359:	e8 c2 be 00 00       	call   c001d220 <APIC::open(int, int, void*)>
c001135e:	83 c4 20             	add    esp,0x20
c0011361:	e9 30 fe ff ff       	jmp    c0011196 <setupInterruptController()+0x50>
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	68 58 21 00 00       	push   0x2158
c001136e:	e8 ed d8 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0011373:	89 04 24             	mov    DWORD PTR [esp],eax
c0011376:	89 c3                	mov    ebx,eax
c0011378:	e8 85 bf 00 00       	call   c001d302 <APIC::APIC()>
c001137d:	6a 00                	push   0x0
c001137f:	6a 00                	push   0x0
c0011381:	6a 00                	push   0x0
c0011383:	53                   	push   ebx
c0011384:	e8 97 be 00 00       	call   c001d220 <APIC::open(int, int, void*)>
c0011389:	83 c4 18             	add    esp,0x18
c001138c:	53                   	push   ebx
c001138d:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c0011393:	e8 c2 ed ff ff       	call   c001015a <Device::addChild(Device*)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	89 d8                	mov    eax,ebx
c001139d:	5a                   	pop    edx
c001139e:	5b                   	pop    ebx
c001139f:	5e                   	pop    esi
c00113a0:	c3                   	ret    
c00113a1:	90                   	nop

c00113a2 <startGUI(void*)>:
c00113a2:	55                   	push   ebp
c00113a3:	89 e5                	mov    ebp,esp
c00113a5:	53                   	push   ebx
c00113a6:	83 ec 04             	sub    esp,0x4
c00113a9:	e8 84 65 00 00       	call   c0017932 <unlockScheduler()>
c00113ae:	e8 68 65 00 00       	call   c001791b <getIRQNestingLevel()>
c00113b3:	83 ec 08             	sub    esp,0x8
c00113b6:	50                   	push   eax
c00113b7:	68 f8 0c 02 c0       	push   0xc0020cf8
c00113bc:	e8 8e d9 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	8b 1d a8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232a8
c00113ca:	83 ec 08             	sub    esp,0x8
c00113cd:	6a 01                	push   0x1
c00113cf:	68 12 0d 02 c0       	push   0xc0020d12
c00113d4:	e8 f9 5f 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c00113d9:	83 c4 10             	add    esp,0x10
c00113dc:	83 ec 08             	sub    esp,0x8
c00113df:	53                   	push   ebx
c00113e0:	50                   	push   eax
c00113e1:	e8 3f 61 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c00113e6:	83 c4 10             	add    esp,0x10
c00113e9:	8b 1d a8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232a8
c00113ef:	83 ec 08             	sub    esp,0x8
c00113f2:	6a 01                	push   0x1
c00113f4:	68 2c 0d 02 c0       	push   0xc0020d2c
c00113f9:	e8 d4 5f 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c00113fe:	83 c4 10             	add    esp,0x10
c0011401:	83 ec 08             	sub    esp,0x8
c0011404:	53                   	push   ebx
c0011405:	50                   	push   eax
c0011406:	e8 1a 61 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c001140b:	83 c4 10             	add    esp,0x10
c001140e:	90                   	nop
c001140f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011412:	c9                   	leave  
c0011413:	c3                   	ret    

c0011414 <sendKeyToTerminal(unsigned char)>:
c0011414:	55                   	push   ebp
c0011415:	89 e5                	mov    ebp,esp
c0011417:	83 ec 28             	sub    esp,0x28
c001141a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011420:	a1 64 33 02 c0       	mov    eax,ds:0xc0023364
c0011425:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011429:	83 ec 08             	sub    esp,0x8
c001142c:	52                   	push   edx
c001142d:	50                   	push   eax
c001142e:	e8 31 c1 ff ff       	call   c000d564 <VgaText::receiveKey(unsigned char)>
c0011433:	83 c4 10             	add    esp,0x10
c0011436:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001143a:	75 41                	jne    c001147d <sendKeyToTerminal(unsigned char)+0x69>
c001143c:	e8 16 65 00 00       	call   c0017957 <lockStuff()>
c0011441:	a1 40 34 02 c0       	mov    eax,ds:0xc0023440
c0011446:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011449:	c7 05 40 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023440,0x0
c0011453:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011457:	74 1f                	je     c0011478 <sendKeyToTerminal(unsigned char)+0x64>
c0011459:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001145c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001145f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011462:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011465:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001146e:	e8 cd 6a 00 00       	call   c0017f40 <unblockTask(ThreadControlBlock*)>
c0011473:	83 c4 10             	add    esp,0x10
c0011476:	eb db                	jmp    c0011453 <sendKeyToTerminal(unsigned char)+0x3f>
c0011478:	e8 6c 68 00 00       	call   c0017ce9 <unlockStuff()>
c001147d:	90                   	nop
c001147e:	c9                   	leave  
c001147f:	c3                   	ret    

c0011480 <sendKeyboardToken(KeyboardToken)>:
c0011480:	55                   	push   ebp
c0011481:	89 e5                	mov    ebp,esp
c0011483:	83 ec 18             	sub    esp,0x18
c0011486:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148c:	0f b7 c0             	movzx  eax,ax
c001148f:	83 f2 01             	xor    edx,0x1
c0011492:	88 90 60 34 02 c0    	mov    BYTE PTR [eax-0x3ffdcba0],dl
c0011498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001149b:	66 3d 03 02          	cmp    ax,0x203
c001149f:	75 07                	jne    c00114a8 <sendKeyboardToken(KeyboardToken)+0x28>
c00114a1:	a0 60 35 02 c0       	mov    al,ds:0xc0023560
c00114a6:	84 c0                	test   al,al
c00114a8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00114ac:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00114af:	a0 68 38 02 c0       	mov    al,ds:0xc0023868
c00114b4:	38 c2                	cmp    dl,al
c00114b6:	74 1c                	je     c00114d4 <sendKeyboardToken(KeyboardToken)+0x54>
c00114b8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00114bb:	a2 68 38 02 c0       	mov    ds:0xc0023868,al
c00114c0:	a0 68 38 02 c0       	mov    al,ds:0xc0023868
c00114c5:	0f b6 c0             	movzx  eax,al
c00114c8:	83 ec 0c             	sub    esp,0xc
c00114cb:	50                   	push   eax
c00114cc:	e8 01 b3 ff ff       	call   c000c7d2 <setTerminalScrollLock(bool)>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00114d7:	84 c0                	test   al,al
c00114d9:	0f 84 ae 00 00 00    	je     c001158d <sendKeyboardToken(KeyboardToken)+0x10d>
c00114df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e2:	66 3d 10 03          	cmp    ax,0x310
c00114e6:	75 06                	jne    c00114ee <sendKeyboardToken(KeyboardToken)+0x6e>
c00114e8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00114ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f1:	66 3d 11 03          	cmp    ax,0x311
c00114f5:	75 06                	jne    c00114fd <sendKeyboardToken(KeyboardToken)+0x7d>
c00114f7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	66 3d 12 03          	cmp    ax,0x312
c0011504:	75 06                	jne    c001150c <sendKeyboardToken(KeyboardToken)+0x8c>
c0011506:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001150c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150f:	66 3d 13 03          	cmp    ax,0x313
c0011513:	75 06                	jne    c001151b <sendKeyboardToken(KeyboardToken)+0x9b>
c0011515:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001151b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151e:	66 3d 14 03          	cmp    ax,0x314
c0011522:	75 06                	jne    c001152a <sendKeyboardToken(KeyboardToken)+0xaa>
c0011524:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001152a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152d:	66 3d 15 03          	cmp    ax,0x315
c0011531:	75 06                	jne    c0011539 <sendKeyboardToken(KeyboardToken)+0xb9>
c0011533:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	66 3d 16 03          	cmp    ax,0x316
c0011540:	75 06                	jne    c0011548 <sendKeyboardToken(KeyboardToken)+0xc8>
c0011542:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154b:	66 3d 17 03          	cmp    ax,0x317
c001154f:	75 06                	jne    c0011557 <sendKeyboardToken(KeyboardToken)+0xd7>
c0011551:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155a:	66 3d 18 03          	cmp    ax,0x318
c001155e:	75 06                	jne    c0011566 <sendKeyboardToken(KeyboardToken)+0xe6>
c0011560:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011569:	66 3d 19 03          	cmp    ax,0x319
c001156d:	75 06                	jne    c0011575 <sendKeyboardToken(KeyboardToken)+0xf5>
c001156f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	66 3d 1a 03          	cmp    ax,0x31a
c001157c:	0f 85 c9 00 00 00    	jne    c001164b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011582:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011588:	e9 be 00 00 00       	jmp    c001164b <sendKeyboardToken(KeyboardToken)+0x1cb>
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	66 3d 10 03          	cmp    ax,0x310
c0011594:	75 0a                	jne    c00115a0 <sendKeyboardToken(KeyboardToken)+0x120>
c0011596:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001159c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a3:	66 3d 11 03          	cmp    ax,0x311
c00115a7:	75 0a                	jne    c00115b3 <sendKeyboardToken(KeyboardToken)+0x133>
c00115a9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00115af:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b6:	66 3d 12 03          	cmp    ax,0x312
c00115ba:	75 0a                	jne    c00115c6 <sendKeyboardToken(KeyboardToken)+0x146>
c00115bc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00115c2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c9:	66 3d 13 03          	cmp    ax,0x313
c00115cd:	75 0a                	jne    c00115d9 <sendKeyboardToken(KeyboardToken)+0x159>
c00115cf:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00115d5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115dc:	66 3d 14 03          	cmp    ax,0x314
c00115e0:	75 0a                	jne    c00115ec <sendKeyboardToken(KeyboardToken)+0x16c>
c00115e2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00115e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ef:	66 3d 15 03          	cmp    ax,0x315
c00115f3:	75 0a                	jne    c00115ff <sendKeyboardToken(KeyboardToken)+0x17f>
c00115f5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00115fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011602:	66 3d 16 03          	cmp    ax,0x316
c0011606:	75 0a                	jne    c0011612 <sendKeyboardToken(KeyboardToken)+0x192>
c0011608:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001160e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011615:	66 3d 17 03          	cmp    ax,0x317
c0011619:	75 0a                	jne    c0011625 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001161b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011621:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011628:	66 3d 18 03          	cmp    ax,0x318
c001162c:	75 0a                	jne    c0011638 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001162e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011634:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001163b:	66 3d 19 03          	cmp    ax,0x319
c001163f:	75 0a                	jne    c001164b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011641:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011647:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001164b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164e:	66 3d 00 02          	cmp    ax,0x200
c0011652:	75 2a                	jne    c001167e <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011654:	a0 60 38 02 c0       	mov    al,ds:0xc0023860
c0011659:	83 f0 01             	xor    eax,0x1
c001165c:	84 c0                	test   al,al
c001165e:	74 1e                	je     c001167e <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011660:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0011665:	6a 01                	push   0x1
c0011667:	6a 00                	push   0x0
c0011669:	68 a2 13 01 c0       	push   0xc00113a2
c001166e:	50                   	push   eax
c001166f:	e8 e6 63 00 00       	call   c0017a5a <Process::createThread(void (*)(void*), void*, int)>
c0011674:	83 c4 10             	add    esp,0x10
c0011677:	c6 05 60 38 02 c0 01 	mov    BYTE PTR ds:0xc0023860,0x1
c001167e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011681:	66 3d 1d 03          	cmp    ax,0x31d
c0011685:	75 06                	jne    c001168d <sendKeyboardToken(KeyboardToken)+0x20d>
c0011687:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001168d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011690:	66 3d 1c 03          	cmp    ax,0x31c
c0011694:	75 06                	jne    c001169c <sendKeyboardToken(KeyboardToken)+0x21c>
c0011696:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001169c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169f:	66 3d 1b 03          	cmp    ax,0x31b
c00116a3:	75 06                	jne    c00116ab <sendKeyboardToken(KeyboardToken)+0x22b>
c00116a5:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00116ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ae:	66 3d 1e 03          	cmp    ax,0x31e
c00116b2:	75 06                	jne    c00116ba <sendKeyboardToken(KeyboardToken)+0x23a>
c00116b4:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00116ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116bd:	66 3d 1f 03          	cmp    ax,0x31f
c00116c1:	75 06                	jne    c00116c9 <sendKeyboardToken(KeyboardToken)+0x249>
c00116c3:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00116c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116cc:	66 3d 1a 03          	cmp    ax,0x31a
c00116d0:	75 06                	jne    c00116d8 <sendKeyboardToken(KeyboardToken)+0x258>
c00116d2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00116d8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00116dc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00116df:	83 f0 01             	xor    eax,0x1
c00116e2:	84 c0                	test   al,al
c00116e4:	74 77                	je     c001175d <sendKeyboardToken(KeyboardToken)+0x2dd>
c00116e6:	a0 61 35 02 c0       	mov    al,ds:0xc0023561
c00116eb:	84 c0                	test   al,al
c00116ed:	74 41                	je     c0011730 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00116ef:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00116f3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00116f7:	74 2b                	je     c0011724 <sendKeyboardToken(KeyboardToken)+0x2a4>
c00116f9:	8b 15 64 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023864
c00116ff:	89 d0                	mov    eax,edx
c0011701:	c1 e0 02             	shl    eax,0x2
c0011704:	01 d0                	add    eax,edx
c0011706:	01 c0                	add    eax,eax
c0011708:	a3 64 38 02 c0       	mov    ds:0xc0023864,eax
c001170d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011710:	0f b7 c0             	movzx  eax,ax
c0011713:	8d 50 d0             	lea    edx,[eax-0x30]
c0011716:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c001171b:	01 d0                	add    eax,edx
c001171d:	a3 64 38 02 c0       	mov    ds:0xc0023864,eax
c0011722:	eb 6d                	jmp    c0011791 <sendKeyboardToken(KeyboardToken)+0x311>
c0011724:	c7 05 64 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023864,0x0
c001172e:	eb 61                	jmp    c0011791 <sendKeyboardToken(KeyboardToken)+0x311>
c0011730:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c0011735:	85 c0                	test   eax,eax
c0011737:	74 18                	je     c0011751 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0011739:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c001173e:	0f b6 c0             	movzx  eax,al
c0011741:	83 ec 0c             	sub    esp,0xc
c0011744:	50                   	push   eax
c0011745:	e8 ca fc ff ff       	call   c0011414 <sendKeyToTerminal(unsigned char)>
c001174a:	83 c4 10             	add    esp,0x10
c001174d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011751:	c7 05 64 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023864,0x0
c001175b:	eb 34                	jmp    c0011791 <sendKeyboardToken(KeyboardToken)+0x311>
c001175d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011760:	66 3d 01 01          	cmp    ax,0x101
c0011764:	75 2b                	jne    c0011791 <sendKeyboardToken(KeyboardToken)+0x311>
c0011766:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c001176b:	85 c0                	test   eax,eax
c001176d:	74 18                	je     c0011787 <sendKeyboardToken(KeyboardToken)+0x307>
c001176f:	a1 64 38 02 c0       	mov    eax,ds:0xc0023864
c0011774:	0f b6 c0             	movzx  eax,al
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	50                   	push   eax
c001177b:	e8 94 fc ff ff       	call   c0011414 <sendKeyToTerminal(unsigned char)>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011787:	c7 05 64 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023864,0x0
c0011791:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011794:	83 f0 01             	xor    eax,0x1
c0011797:	84 c0                	test   al,al
c0011799:	74 4c                	je     c00117e7 <sendKeyboardToken(KeyboardToken)+0x367>
c001179b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001179e:	83 f0 01             	xor    eax,0x1
c00117a1:	84 c0                	test   al,al
c00117a3:	74 42                	je     c00117e7 <sendKeyboardToken(KeyboardToken)+0x367>
c00117a5:	a0 60 35 02 c0       	mov    al,ds:0xc0023560
c00117aa:	83 f0 01             	xor    eax,0x1
c00117ad:	84 c0                	test   al,al
c00117af:	74 36                	je     c00117e7 <sendKeyboardToken(KeyboardToken)+0x367>
c00117b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b4:	66 83 f8 1f          	cmp    ax,0x1f
c00117b8:	76 09                	jbe    c00117c3 <sendKeyboardToken(KeyboardToken)+0x343>
c00117ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bd:	66 83 f8 7e          	cmp    ax,0x7e
c00117c1:	76 12                	jbe    c00117d5 <sendKeyboardToken(KeyboardToken)+0x355>
c00117c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c6:	66 83 f8 0a          	cmp    ax,0xa
c00117ca:	74 09                	je     c00117d5 <sendKeyboardToken(KeyboardToken)+0x355>
c00117cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cf:	66 83 f8 08          	cmp    ax,0x8
c00117d3:	75 12                	jne    c00117e7 <sendKeyboardToken(KeyboardToken)+0x367>
c00117d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d8:	0f b6 c0             	movzx  eax,al
c00117db:	83 ec 0c             	sub    esp,0xc
c00117de:	50                   	push   eax
c00117df:	e8 30 fc ff ff       	call   c0011414 <sendKeyToTerminal(unsigned char)>
c00117e4:	83 c4 10             	add    esp,0x10
c00117e7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00117ea:	83 f0 01             	xor    eax,0x1
c00117ed:	84 c0                	test   al,al
c00117ef:	74 4f                	je     c0011840 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00117f4:	83 f0 01             	xor    eax,0x1
c00117f7:	84 c0                	test   al,al
c00117f9:	74 45                	je     c0011840 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117fb:	a0 60 35 02 c0       	mov    al,ds:0xc0023560
c0011800:	84 c0                	test   al,al
c0011802:	74 3c                	je     c0011840 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011807:	66 83 f8 3f          	cmp    ax,0x3f
c001180b:	76 33                	jbe    c0011840 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001180d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011810:	66 83 f8 7f          	cmp    ax,0x7f
c0011814:	77 2a                	ja     c0011840 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011819:	88 c2                	mov    dl,al
c001181b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001181e:	66 83 f8 5f          	cmp    ax,0x5f
c0011822:	76 04                	jbe    c0011828 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011824:	b0 20                	mov    al,0x20
c0011826:	eb 02                	jmp    c001182a <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011828:	b0 00                	mov    al,0x0
c001182a:	29 c2                	sub    edx,eax
c001182c:	88 d0                	mov    al,dl
c001182e:	83 e8 40             	sub    eax,0x40
c0011831:	0f b6 c0             	movzx  eax,al
c0011834:	83 ec 0c             	sub    esp,0xc
c0011837:	50                   	push   eax
c0011838:	e8 d7 fb ff ff       	call   c0011414 <sendKeyToTerminal(unsigned char)>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011843:	66 3d 00 03          	cmp    ax,0x300
c0011847:	75 0f                	jne    c0011858 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011849:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001184c:	83 f0 01             	xor    eax,0x1
c001184f:	84 c0                	test   al,al
c0011851:	74 05                	je     c0011858 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011853:	e8 a1 b7 ff ff       	call   c000cff9 <doTerminalCycle()>
c0011858:	90                   	nop
c0011859:	c9                   	leave  
c001185a:	c3                   	ret    

c001185b <clearInternalKeybuffer(VgaText*)>:
c001185b:	55                   	push   ebp
c001185c:	89 e5                	mov    ebp,esp
c001185e:	83 ec 08             	sub    esp,0x8
c0011861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011864:	05 34 11 00 00       	add    eax,0x1134
c0011869:	83 ec 0c             	sub    esp,0xc
c001186c:	50                   	push   eax
c001186d:	e8 b3 ed fe ff       	call   c0000625 <strlen>
c0011872:	83 c4 10             	add    esp,0x10
c0011875:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011878:	81 c2 34 11 00 00    	add    edx,0x1134
c001187e:	83 ec 04             	sub    esp,0x4
c0011881:	50                   	push   eax
c0011882:	6a 00                	push   0x0
c0011884:	52                   	push   edx
c0011885:	e8 7e ed fe ff       	call   c0000608 <memset>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	90                   	nop
c001188e:	c9                   	leave  
c001188f:	c3                   	ret    

c0011890 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011890:	55                   	push   ebp
c0011891:	89 e5                	mov    ebp,esp
c0011893:	83 ec 18             	sub    esp,0x18
c0011896:	fb                   	sti    
c0011897:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001189e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00118a2:	74 77                	je     c001191b <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c00118a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00118ad:	84 c0                	test   al,al
c00118af:	75 02                	jne    c00118b3 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c00118b1:	eb f1                	jmp    c00118a4 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c00118b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00118b6:	8d 50 01             	lea    edx,[eax+0x1]
c00118b9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00118bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00118bf:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00118c5:	88 10                	mov    BYTE PTR [eax],dl
c00118c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ca:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00118d0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00118d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d6:	05 34 11 00 00       	add    eax,0x1134
c00118db:	83 ec 0c             	sub    esp,0xc
c00118de:	50                   	push   eax
c00118df:	e8 41 ed fe ff       	call   c0000625 <strlen>
c00118e4:	83 c4 10             	add    esp,0x10
c00118e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00118ea:	81 c2 34 11 00 00    	add    edx,0x1134
c00118f0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00118f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00118f6:	81 c2 34 11 00 00    	add    edx,0x1134
c00118fc:	83 ec 04             	sub    esp,0x4
c00118ff:	50                   	push   eax
c0011900:	51                   	push   ecx
c0011901:	52                   	push   edx
c0011902:	e8 93 ec fe ff       	call   c000059a <memmove>
c0011907:	83 c4 10             	add    esp,0x10
c001190a:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001190d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011910:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011914:	75 88                	jne    c001189e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011916:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011919:	eb 03                	jmp    c001191e <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c001191b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001191e:	c9                   	leave  
c001191f:	c3                   	ret    

c0011920 <Keyboard::Keyboard(char const*)>:
c0011920:	83 ec 0c             	sub    esp,0xc
c0011923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011927:	83 ec 08             	sub    esp,0x8
c001192a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001192e:	50                   	push   eax
c001192f:	e8 16 ea ff ff       	call   c001034a <Device::Device(char const*)>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	ba 50 0d 02 c0       	mov    edx,0xc0020d50
c001193c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011940:	89 10                	mov    DWORD PTR [eax],edx
c0011942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011946:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011950:	c6 05 44 34 02 c0 01 	mov    BYTE PTR ds:0xc0023444,0x1
c0011957:	90                   	nop
c0011958:	83 c4 0c             	add    esp,0xc
c001195b:	c3                   	ret    

c001195c <Keyboard::~Keyboard()>:
c001195c:	83 ec 0c             	sub    esp,0xc
c001195f:	ba 50 0d 02 c0       	mov    edx,0xc0020d50
c0011964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011968:	89 10                	mov    DWORD PTR [eax],edx
c001196a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001196e:	83 ec 0c             	sub    esp,0xc
c0011971:	50                   	push   eax
c0011972:	e8 85 e6 ff ff       	call   c000fffc <Device::~Device()>
c0011977:	83 c4 10             	add    esp,0x10
c001197a:	90                   	nop
c001197b:	83 c4 0c             	add    esp,0xc
c001197e:	c3                   	ret    
c001197f:	90                   	nop

c0011980 <Keyboard::~Keyboard()>:
c0011980:	83 ec 0c             	sub    esp,0xc
c0011983:	83 ec 0c             	sub    esp,0xc
c0011986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001198a:	e8 cd ff ff ff       	call   c001195c <Keyboard::~Keyboard()>
c001198f:	83 c4 10             	add    esp,0x10
c0011992:	83 ec 08             	sub    esp,0x8
c0011995:	68 5c 01 00 00       	push   0x15c
c001199a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001199e:	e8 cc d2 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	83 c4 0c             	add    esp,0xc
c00119a9:	c3                   	ret    

c00119aa <LogicalDisk::close(int, int, void*)>:
c00119aa:	83 c8 ff             	or     eax,0xffffffff
c00119ad:	c3                   	ret    

c00119ae <LogicalDisk::~LogicalDisk()>:
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	ba 00 0e 02 c0       	mov    edx,0xc0020e00
c00119b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ba:	89 10                	mov    DWORD PTR [eax],edx
c00119bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119c0:	83 ec 0c             	sub    esp,0xc
c00119c3:	50                   	push   eax
c00119c4:	e8 33 e6 ff ff       	call   c000fffc <Device::~Device()>
c00119c9:	83 c4 10             	add    esp,0x10
c00119cc:	90                   	nop
c00119cd:	83 c4 0c             	add    esp,0xc
c00119d0:	c3                   	ret    
c00119d1:	90                   	nop

c00119d2 <LogicalDisk::~LogicalDisk()>:
c00119d2:	83 ec 0c             	sub    esp,0xc
c00119d5:	83 ec 0c             	sub    esp,0xc
c00119d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dc:	e8 cd ff ff ff       	call   c00119ae <LogicalDisk::~LogicalDisk()>
c00119e1:	83 c4 10             	add    esp,0x10
c00119e4:	83 ec 08             	sub    esp,0x8
c00119e7:	68 74 01 00 00       	push   0x174
c00119ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f0:	e8 7a d2 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	83 c4 0c             	add    esp,0xc
c00119fb:	c3                   	ret    

c00119fc <LogicalDisk::open(int, int, void*)>:
c00119fc:	83 ec 18             	sub    esp,0x18
c00119ff:	68 7c 0d 02 c0       	push   0xc0020d7c
c0011a04:	e8 db 2f 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c0011a09:	83 c8 ff             	or     eax,0xffffffff
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	c3                   	ret    

c0011a10 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011a10:	53                   	push   ebx
c0011a11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a1d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011a23:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011a29:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011a2f:	77 10                	ja     c0011a41 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011a31:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011a37:	89 d3                	mov    ebx,edx
c0011a39:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011a3f:	72 05                	jb     c0011a46 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011a41:	83 c8 ff             	or     eax,0xffffffff
c0011a44:	89 c2                	mov    edx,eax
c0011a46:	5b                   	pop    ebx
c0011a47:	c3                   	ret    

c0011a48 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011a48:	56                   	push   esi
c0011a49:	83 c8 ff             	or     eax,0xffffffff
c0011a4c:	53                   	push   ebx
c0011a4d:	89 c2                	mov    edx,eax
c0011a4f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011a53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011a57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011a5b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011a61:	77 27                	ja     c0011a8a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011a63:	89 d8                	mov    eax,ebx
c0011a65:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011a6b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011a71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a76:	89 c2                	mov    edx,eax
c0011a78:	73 10                	jae    c0011a8a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011a7a:	89 c8                	mov    eax,ecx
c0011a7c:	89 da                	mov    edx,ebx
c0011a7e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011a84:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011a8a:	5b                   	pop    ebx
c0011a8b:	5e                   	pop    esi
c0011a8c:	c3                   	ret    
c0011a8d:	90                   	nop

c0011a8e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011a8e:	83 ec 1c             	sub    esp,0x1c
c0011a91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011aa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aa5:	89 04 24             	mov    DWORD PTR [esp],eax
c0011aa8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011aac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ab4:	83 ec 08             	sub    esp,0x8
c0011ab7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011abb:	50                   	push   eax
c0011abc:	e8 89 e8 ff ff       	call   c001034a <Device::Device(char const*)>
c0011ac1:	83 c4 10             	add    esp,0x10
c0011ac4:	ba 00 0e 02 c0       	mov    edx,0xc0020e00
c0011ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011acd:	89 10                	mov    DWORD PTR [eax],edx
c0011acf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ad3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011ada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ade:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ae9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011af3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011af7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011aff:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011b05:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011b0b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011b16:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011b1c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b26:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b2a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b34:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011b3e:	90                   	nop
c0011b3f:	83 c4 1c             	add    esp,0x1c
c0011b42:	c3                   	ret    
c0011b43:	90                   	nop

c0011b44 <LogicalDisk::assignDriveLetter()>:
c0011b44:	55                   	push   ebp
c0011b45:	57                   	push   edi
c0011b46:	56                   	push   esi
c0011b47:	53                   	push   ebx
c0011b48:	83 ec 14             	sub    esp,0x14
c0011b4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b4f:	8b 3d 80 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023880
c0011b55:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011b5b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011b5f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011b65:	8b 3d 84 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023884
c0011b6b:	3c 01                	cmp    al,0x1
c0011b6d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011b71:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011b75:	19 c0                	sbb    eax,eax
c0011b77:	83 e0 02             	and    eax,0x2
c0011b7a:	83 c0 41             	add    eax,0x41
c0011b7d:	0f be e8             	movsx  ebp,al
c0011b80:	3c 43                	cmp    al,0x43
c0011b82:	75 10                	jne    c0011b94 <LogicalDisk::assignDriveLetter()+0x50>
c0011b84:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011b8b:	75 5d                	jne    c0011bea <LogicalDisk::assignDriveLetter()+0xa6>
c0011b8d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011b92:	75 56                	jne    c0011bea <LogicalDisk::assignDriveLetter()+0xa6>
c0011b94:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011b97:	ba 01 00 00 00       	mov    edx,0x1
c0011b9c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011ba0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011ba4:	d3 e2                	shl    edx,cl
c0011ba6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011baa:	89 d7                	mov    edi,edx
c0011bac:	89 d6                	mov    esi,edx
c0011bae:	c1 ff 1f             	sar    edi,0x1f
c0011bb1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011bb5:	21 f9                	and    ecx,edi
c0011bb7:	09 d1                	or     ecx,edx
c0011bb9:	75 2f                	jne    c0011bea <LogicalDisk::assignDriveLetter()+0xa6>
c0011bbb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011bbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011bc3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011bc9:	09 f2                	or     edx,esi
c0011bcb:	89 15 80 38 02 c0    	mov    DWORD PTR ds:0xc0023880,edx
c0011bd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bd5:	09 fa                	or     edx,edi
c0011bd7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011bdb:	89 15 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,edx
c0011be1:	89 1c bd a0 38 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc760],ebx
c0011be8:	eb 08                	jmp    c0011bf2 <LogicalDisk::assignDriveLetter()+0xae>
c0011bea:	45                   	inc    ebp
c0011beb:	40                   	inc    eax
c0011bec:	3c 5b                	cmp    al,0x5b
c0011bee:	75 90                	jne    c0011b80 <LogicalDisk::assignDriveLetter()+0x3c>
c0011bf0:	31 c0                	xor    eax,eax
c0011bf2:	83 c4 14             	add    esp,0x14
c0011bf5:	5b                   	pop    ebx
c0011bf6:	5e                   	pop    esi
c0011bf7:	5f                   	pop    edi
c0011bf8:	5d                   	pop    ebp
c0011bf9:	c3                   	ret    

c0011bfa <LogicalDisk::mount()>:
c0011bfa:	56                   	push   esi
c0011bfb:	53                   	push   ebx
c0011bfc:	51                   	push   ecx
c0011bfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c01:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c0011c07:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011c11:	85 db                	test   ebx,ebx
c0011c13:	74 50                	je     c0011c65 <LogicalDisk::mount()+0x6b>
c0011c15:	e8 01 5d 00 00       	call   c001791b <getIRQNestingLevel()>
c0011c1a:	52                   	push   edx
c0011c1b:	52                   	push   edx
c0011c1c:	50                   	push   eax
c0011c1d:	68 a0 0d 02 c0       	push   0xc0020da0
c0011c22:	e8 28 d1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0011c27:	83 c4 0c             	add    esp,0xc
c0011c2a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011c31:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c33:	83 e8 41             	sub    eax,0x41
c0011c36:	50                   	push   eax
c0011c37:	56                   	push   esi
c0011c38:	53                   	push   ebx
c0011c39:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c3c:	83 c4 10             	add    esp,0x10
c0011c3f:	84 c0                	test   al,al
c0011c41:	74 08                	je     c0011c4b <LogicalDisk::mount()+0x51>
c0011c43:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011c49:	eb 1c                	jmp    c0011c67 <LogicalDisk::mount()+0x6d>
c0011c4b:	e8 cb 5c 00 00       	call   c001791b <getIRQNestingLevel()>
c0011c50:	51                   	push   ecx
c0011c51:	51                   	push   ecx
c0011c52:	50                   	push   eax
c0011c53:	68 bb 0d 02 c0       	push   0xc0020dbb
c0011c58:	e8 f2 d0 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0011c5d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	eb ac                	jmp    c0011c11 <LogicalDisk::mount()+0x17>
c0011c65:	31 c0                	xor    eax,eax
c0011c67:	5a                   	pop    edx
c0011c68:	5b                   	pop    ebx
c0011c69:	5e                   	pop    esi
c0011c6a:	c3                   	ret    
c0011c6b:	90                   	nop

c0011c6c <LogicalDisk::unmount()>:
c0011c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c70:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011c7a:	c3                   	ret    
c0011c7b:	90                   	nop

c0011c7c <LogicalDisk::unassignDriveLetter()>:
c0011c7c:	57                   	push   edi
c0011c7d:	56                   	push   esi
c0011c7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c82:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011c89:	84 c9                	test   cl,cl
c0011c8b:	75 0f                	jne    c0011c9c <LogicalDisk::unassignDriveLetter()+0x20>
c0011c8d:	c7 44 24 0c d6 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020dd6
c0011c95:	5e                   	pop    esi
c0011c96:	5f                   	pop    edi
c0011c97:	e9 48 2d 00 00       	jmp    c00149e4 <Krnl::panic(char const*)>
c0011c9c:	83 e9 41             	sub    ecx,0x41
c0011c9f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011ca6:	b8 01 00 00 00       	mov    eax,0x1
c0011cab:	c7 04 8d a0 38 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc760],0x0
c0011cb6:	d3 e0                	shl    eax,cl
c0011cb8:	89 c7                	mov    edi,eax
c0011cba:	f7 d0                	not    eax
c0011cbc:	c1 ff 1f             	sar    edi,0x1f
c0011cbf:	21 05 80 38 02 c0    	and    DWORD PTR ds:0xc0023880,eax
c0011cc5:	89 fe                	mov    esi,edi
c0011cc7:	f7 d6                	not    esi
c0011cc9:	21 35 84 38 02 c0    	and    DWORD PTR ds:0xc0023884,esi
c0011ccf:	5e                   	pop    esi
c0011cd0:	5f                   	pop    edi
c0011cd1:	c3                   	ret    

c0011cd2 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011cd2:	57                   	push   edi
c0011cd3:	56                   	push   esi
c0011cd4:	53                   	push   ebx
c0011cd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cdd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ce5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011ceb:	77 41                	ja     c0011d2e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011ced:	99                   	cdq    
c0011cee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011cf4:	01 c8                	add    eax,ecx
c0011cf6:	11 da                	adc    edx,ebx
c0011cf8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011cfe:	19 d7                	sbb    edi,edx
c0011d00:	72 33                	jb     c0011d35 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011d02:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011d08:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011d0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d12:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011d16:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011d1c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	5f                   	pop    edi
c0011d29:	e9 9a 09 00 00       	jmp    c00126c8 <VCache::read(unsigned long long, int, void*)>
c0011d2e:	b8 05 00 00 00       	mov    eax,0x5
c0011d33:	eb 05                	jmp    c0011d3a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011d35:	b8 07 00 00 00       	mov    eax,0x7
c0011d3a:	5b                   	pop    ebx
c0011d3b:	5e                   	pop    esi
c0011d3c:	5f                   	pop    edi
c0011d3d:	c3                   	ret    

c0011d3e <LogicalDisk::write(unsigned long long, int, void*)>:
c0011d3e:	57                   	push   edi
c0011d3f:	56                   	push   esi
c0011d40:	53                   	push   ebx
c0011d41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d51:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d57:	77 41                	ja     c0011d9a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011d59:	99                   	cdq    
c0011d5a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011d60:	01 c8                	add    eax,ecx
c0011d62:	11 da                	adc    edx,ebx
c0011d64:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011d6a:	19 d7                	sbb    edi,edx
c0011d6c:	72 33                	jb     c0011da1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0011d6e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011d74:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011d7a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d7e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011d82:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011d88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d92:	5b                   	pop    ebx
c0011d93:	5e                   	pop    esi
c0011d94:	5f                   	pop    edi
c0011d95:	e9 4a 08 00 00       	jmp    c00125e4 <VCache::write(unsigned long long, int, void*)>
c0011d9a:	b8 05 00 00 00       	mov    eax,0x5
c0011d9f:	eb 05                	jmp    c0011da6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0011da1:	b8 07 00 00 00       	mov    eax,0x7
c0011da6:	5b                   	pop    ebx
c0011da7:	5e                   	pop    esi
c0011da8:	5f                   	pop    edi
c0011da9:	c3                   	ret    

c0011daa <Mouse::Mouse(char const*)>:
c0011daa:	83 ec 0c             	sub    esp,0xc
c0011dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db1:	83 ec 08             	sub    esp,0x8
c0011db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011db8:	50                   	push   eax
c0011db9:	e8 8c e5 ff ff       	call   c001034a <Device::Device(char const*)>
c0011dbe:	83 c4 10             	add    esp,0x10
c0011dc1:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0011dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dca:	89 10                	mov    DWORD PTR [eax],edx
c0011dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dd0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0011dda:	90                   	nop
c0011ddb:	83 c4 0c             	add    esp,0xc
c0011dde:	c3                   	ret    
c0011ddf:	90                   	nop

c0011de0 <Mouse::~Mouse()>:
c0011de0:	83 ec 0c             	sub    esp,0xc
c0011de3:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c0011de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dec:	89 10                	mov    DWORD PTR [eax],edx
c0011dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	50                   	push   eax
c0011df6:	e8 01 e2 ff ff       	call   c000fffc <Device::~Device()>
c0011dfb:	83 c4 10             	add    esp,0x10
c0011dfe:	90                   	nop
c0011dff:	83 c4 0c             	add    esp,0xc
c0011e02:	c3                   	ret    
c0011e03:	90                   	nop

c0011e04 <Mouse::~Mouse()>:
c0011e04:	83 ec 0c             	sub    esp,0xc
c0011e07:	83 ec 0c             	sub    esp,0xc
c0011e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e0e:	e8 cd ff ff ff       	call   c0011de0 <Mouse::~Mouse()>
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	83 ec 08             	sub    esp,0x8
c0011e19:	68 58 01 00 00       	push   0x158
c0011e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e22:	e8 48 ce ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	83 c4 0c             	add    esp,0xc
c0011e2d:	c3                   	ret    

c0011e2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011e2e:	55                   	push   ebp
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	81 ec 28 01 00 00    	sub    esp,0x128
c0011e38:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011e3f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011e46:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0011e4d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0011e54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e58:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011e5c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011e63:	e8 d4 e5 ff ff       	call   c001043c <Device::getName()>
c0011e68:	5a                   	pop    edx
c0011e69:	59                   	pop    ecx
c0011e6a:	50                   	push   eax
c0011e6b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011e6f:	55                   	push   ebp
c0011e70:	e8 32 e8 fe ff       	call   c00006a7 <strcpy>
c0011e75:	5b                   	pop    ebx
c0011e76:	58                   	pop    eax
c0011e77:	68 50 0e 02 c0       	push   0xc0020e50
c0011e7c:	55                   	push   ebp
c0011e7d:	e8 dc e8 fe ff       	call   c000075e <strcat>
c0011e82:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0011e89:	e8 d2 cd ff ff       	call   c000ec60 <operator new(unsigned long)>
c0011e8e:	83 c4 0c             	add    esp,0xc
c0011e91:	89 c3                	mov    ebx,eax
c0011e93:	57                   	push   edi
c0011e94:	56                   	push   esi
c0011e95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e9d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0011ea4:	55                   	push   ebp
c0011ea5:	50                   	push   eax
c0011ea6:	e8 e3 fb ff ff       	call   c0011a8e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0011eab:	83 c4 14             	add    esp,0x14
c0011eae:	53                   	push   ebx
c0011eaf:	e8 90 fc ff ff       	call   c0011b44 <LogicalDisk::assignDriveLetter()>
c0011eb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011eb7:	e8 3e fd ff ff       	call   c0011bfa <LogicalDisk::mount()>
c0011ebc:	58                   	pop    eax
c0011ebd:	5a                   	pop    edx
c0011ebe:	53                   	push   ebx
c0011ebf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011ec6:	e8 8f e2 ff ff       	call   c001015a <Device::addChild(Device*)>
c0011ecb:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011ed1:	5b                   	pop    ebx
c0011ed2:	5e                   	pop    esi
c0011ed3:	5f                   	pop    edi
c0011ed4:	5d                   	pop    ebp
c0011ed5:	c3                   	ret    

c0011ed6 <createPartitionsForDisk(PhysicalDisk*)>:
c0011ed6:	55                   	push   ebp
c0011ed7:	57                   	push   edi
c0011ed8:	56                   	push   esi
c0011ed9:	53                   	push   ebx
c0011eda:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0011ee0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0011ee7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011eed:	3d 00 02 00 00       	cmp    eax,0x200
c0011ef2:	74 27                	je     c0011f1b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0011ef4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0011efa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0011f00:	83 ec 10             	sub    esp,0x10
c0011f03:	0f a4 f7 0a          	shld   edi,esi,0xa
c0011f07:	99                   	cdq    
c0011f08:	c1 e6 0a             	shl    esi,0xa
c0011f0b:	52                   	push   edx
c0011f0c:	89 fd                	mov    ebp,edi
c0011f0e:	50                   	push   eax
c0011f0f:	55                   	push   ebp
c0011f10:	56                   	push   esi
c0011f11:	e8 c6 c3 00 00       	call   c001e2dc <__udivdi3>
c0011f16:	e9 b1 00 00 00       	jmp    c0011fcc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011f1b:	83 ec 0c             	sub    esp,0xc
c0011f1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f20:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0011f24:	56                   	push   esi
c0011f25:	6a 01                	push   0x1
c0011f27:	6a 00                	push   0x0
c0011f29:	6a 00                	push   0x0
c0011f2b:	53                   	push   ebx
c0011f2c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011f2f:	83 c4 20             	add    esp,0x20
c0011f32:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0011f3a:	75 0a                	jne    c0011f46 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0011f3c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0011f44:	74 2c                	je     c0011f72 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0011f46:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011f4c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011f52:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011f58:	83 ec 10             	sub    esp,0x10
c0011f5b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011f5f:	89 f7                	mov    edi,esi
c0011f61:	c1 e0 0a             	shl    eax,0xa
c0011f64:	c1 ff 1f             	sar    edi,0x1f
c0011f67:	57                   	push   edi
c0011f68:	56                   	push   esi
c0011f69:	52                   	push   edx
c0011f6a:	50                   	push   eax
c0011f6b:	e8 6c c3 00 00       	call   c001e2dc <__udivdi3>
c0011f70:	eb 5a                	jmp    c0011fcc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011f72:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0011f79:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0011f80:	83 e1 7f             	and    ecx,0x7f
c0011f83:	83 e0 7f             	and    eax,0x7f
c0011f86:	01 c1                	add    ecx,eax
c0011f88:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0011f8f:	83 e0 7f             	and    eax,0x7f
c0011f92:	01 c1                	add    ecx,eax
c0011f94:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0011f9b:	83 e0 7f             	and    eax,0x7f
c0011f9e:	00 c1                	add    cl,al
c0011fa0:	74 41                	je     c0011fe3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0011fa2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011fa8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011fae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011fb4:	83 ec 10             	sub    esp,0x10
c0011fb7:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011fbb:	89 f7                	mov    edi,esi
c0011fbd:	c1 e0 0a             	shl    eax,0xa
c0011fc0:	c1 ff 1f             	sar    edi,0x1f
c0011fc3:	57                   	push   edi
c0011fc4:	56                   	push   esi
c0011fc5:	52                   	push   edx
c0011fc6:	50                   	push   eax
c0011fc7:	e8 10 c3 00 00       	call   c001e2dc <__udivdi3>
c0011fcc:	83 c4 14             	add    esp,0x14
c0011fcf:	52                   	push   edx
c0011fd0:	50                   	push   eax
c0011fd1:	6a 00                	push   0x0
c0011fd3:	6a 00                	push   0x0
c0011fd5:	53                   	push   ebx
c0011fd6:	e8 53 fe ff ff       	call   c0011e2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0011fdb:	83 c4 20             	add    esp,0x20
c0011fde:	e9 79 01 00 00       	jmp    c001215c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0011fe3:	89 f0                	mov    eax,esi
c0011fe5:	31 f6                	xor    esi,esi
c0011fe7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0011fee:	75 02                	jne    c0011ff2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0011ff0:	89 f1                	mov    ecx,esi
c0011ff2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0011ff9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012000:	c1 e2 08             	shl    edx,0x8
c0012003:	c1 e7 10             	shl    edi,0x10
c0012006:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001200e:	09 fa                	or     edx,edi
c0012010:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012018:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001201f:	83 c0 10             	add    eax,0x10
c0012022:	09 fa                	or     edx,edi
c0012024:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001202b:	c1 e7 18             	shl    edi,0x18
c001202e:	09 fa                	or     edx,edi
c0012030:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012037:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001203b:	c1 e7 10             	shl    edi,0x10
c001203e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012045:	c1 e2 08             	shl    edx,0x8
c0012048:	09 fa                	or     edx,edi
c001204a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012051:	09 fa                	or     edx,edi
c0012053:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001205a:	c1 e7 18             	shl    edi,0x18
c001205d:	09 fa                	or     edx,edi
c001205f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012063:	46                   	inc    esi
c0012064:	83 fe 04             	cmp    esi,0x4
c0012067:	0f 85 7a ff ff ff    	jne    c0011fe7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001206d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012071:	83 f0 01             	xor    eax,0x1
c0012074:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012078:	75 57                	jne    c00120d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001207a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001207e:	83 f0 01             	xor    eax,0x1
c0012081:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012085:	75 4a                	jne    c00120d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012087:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001208b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012093:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001209b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00120a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00120a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00120ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00120b1:	89 f7                	mov    edi,esi
c00120b3:	c1 e0 0a             	shl    eax,0xa
c00120b6:	c1 ff 1f             	sar    edi,0x1f
c00120b9:	57                   	push   edi
c00120ba:	56                   	push   esi
c00120bb:	52                   	push   edx
c00120bc:	50                   	push   eax
c00120bd:	e8 1a c2 00 00       	call   c001e2dc <__udivdi3>
c00120c2:	83 c4 10             	add    esp,0x10
c00120c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00120c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00120d1:	84 c9                	test   cl,cl
c00120d3:	74 53                	je     c0012128 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00120d5:	0f b6 c9             	movzx  ecx,cl
c00120d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00120e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00120e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00120f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00120f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012100:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012104:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012108:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001210c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012110:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012114:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012118:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001211c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012120:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012124:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012128:	31 ed                	xor    ebp,ebp
c001212a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001212e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012132:	89 f8                	mov    eax,edi
c0012134:	09 f0                	or     eax,esi
c0012136:	74 1e                	je     c0012156 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012138:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001213c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012140:	89 d1                	mov    ecx,edx
c0012142:	09 c1                	or     ecx,eax
c0012144:	74 10                	je     c0012156 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012146:	83 ec 0c             	sub    esp,0xc
c0012149:	57                   	push   edi
c001214a:	56                   	push   esi
c001214b:	52                   	push   edx
c001214c:	50                   	push   eax
c001214d:	53                   	push   ebx
c001214e:	e8 db fc ff ff       	call   c0011e2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012153:	83 c4 20             	add    esp,0x20
c0012156:	45                   	inc    ebp
c0012157:	83 fd 04             	cmp    ebp,0x4
c001215a:	75 ce                	jne    c001212a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001215c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012162:	5b                   	pop    ebx
c0012163:	5e                   	pop    esi
c0012164:	5f                   	pop    edi
c0012165:	5d                   	pop    ebp
c0012166:	c3                   	ret    
c0012167:	90                   	nop

c0012168 <Timer::Timer(char const*)>:
c0012168:	83 ec 0c             	sub    esp,0xc
c001216b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216f:	83 ec 08             	sub    esp,0x8
c0012172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012176:	50                   	push   eax
c0012177:	e8 ce e1 ff ff       	call   c001034a <Device::Device(char const*)>
c001217c:	83 c4 10             	add    esp,0x10
c001217f:	ba 64 0e 02 c0       	mov    edx,0xc0020e64
c0012184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012188:	89 10                	mov    DWORD PTR [eax],edx
c001218a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001218e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012198:	90                   	nop
c0012199:	83 c4 0c             	add    esp,0xc
c001219c:	c3                   	ret    
c001219d:	90                   	nop

c001219e <Timer::~Timer()>:
c001219e:	83 ec 0c             	sub    esp,0xc
c00121a1:	ba 64 0e 02 c0       	mov    edx,0xc0020e64
c00121a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121aa:	89 10                	mov    DWORD PTR [eax],edx
c00121ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121b0:	83 ec 0c             	sub    esp,0xc
c00121b3:	50                   	push   eax
c00121b4:	e8 43 de ff ff       	call   c000fffc <Device::~Device()>
c00121b9:	83 c4 10             	add    esp,0x10
c00121bc:	90                   	nop
c00121bd:	83 c4 0c             	add    esp,0xc
c00121c0:	c3                   	ret    
c00121c1:	90                   	nop

c00121c2 <Timer::~Timer()>:
c00121c2:	83 ec 0c             	sub    esp,0xc
c00121c5:	83 ec 0c             	sub    esp,0xc
c00121c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121cc:	e8 cd ff ff ff       	call   c001219e <Timer::~Timer()>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	83 ec 08             	sub    esp,0x8
c00121d7:	68 5c 01 00 00       	push   0x15c
c00121dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121e0:	e8 8a ca ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c00121e5:	83 c4 10             	add    esp,0x10
c00121e8:	83 c4 0c             	add    esp,0xc
c00121eb:	c3                   	ret    

c00121ec <Timer::read()>:
c00121ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00121f6:	c3                   	ret    

c00121f7 <timerHandler(unsigned long long)>:
c00121f7:	55                   	push   ebp
c00121f8:	57                   	push   edi
c00121f9:	56                   	push   esi
c00121fa:	53                   	push   ebx
c00121fb:	83 ec 0c             	sub    esp,0xc
c00121fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012202:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012206:	01 35 10 39 02 c0    	add    DWORD PTR ds:0xc0023910,esi
c001220c:	11 3d 14 39 02 c0    	adc    DWORD PTR ds:0xc0023914,edi
c0012212:	80 3d ad 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232ad,0x0
c0012219:	0f 84 07 01 00 00    	je     c0012326 <timerHandler(unsigned long long)+0x12f>
c001221f:	e8 33 57 00 00       	call   c0017957 <lockStuff()>
c0012224:	83 ec 0c             	sub    esp,0xc
c0012227:	68 dc 46 02 c0       	push   0xc00246dc
c001222c:	e8 7f c7 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012231:	c7 04 24 dc 46 02 c0 	mov    DWORD PTR [esp],0xc00246dc
c0012238:	89 c3                	mov    ebx,eax
c001223a:	e8 79 c7 00 00       	call   c001e9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	84 c0                	test   al,al
c0012244:	74 60                	je     c00122a6 <timerHandler(unsigned long long)+0xaf>
c0012246:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001224c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001224f:	85 c0                	test   eax,eax
c0012251:	0f 85 91 00 00 00    	jne    c00122e8 <timerHandler(unsigned long long)+0xf1>
c0012257:	e9 be 00 00 00       	jmp    c001231a <timerHandler(unsigned long long)+0x123>
c001225c:	83 ec 0c             	sub    esp,0xc
c001225f:	55                   	push   ebp
c0012260:	e8 db 5c 00 00       	call   c0017f40 <unblockTask(ThreadControlBlock*)>
c0012265:	83 c4 10             	add    esp,0x10
c0012268:	39 eb                	cmp    ebx,ebp
c001226a:	75 12                	jne    c001227e <timerHandler(unsigned long long)+0x87>
c001226c:	83 ec 0c             	sub    esp,0xc
c001226f:	68 dc 46 02 c0       	push   0xc00246dc
c0012274:	e8 37 c7 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012279:	89 c3                	mov    ebx,eax
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	83 ec 0c             	sub    esp,0xc
c0012281:	68 dc 46 02 c0       	push   0xc00246dc
c0012286:	e8 2d c7 00 00       	call   c001e9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	84 c0                	test   al,al
c0012290:	75 b4                	jne    c0012246 <timerHandler(unsigned long long)+0x4f>
c0012292:	83 ec 0c             	sub    esp,0xc
c0012295:	68 dc 46 02 c0       	push   0xc00246dc
c001229a:	e8 11 c7 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001229f:	83 c4 10             	add    esp,0x10
c00122a2:	39 d8                	cmp    eax,ebx
c00122a4:	74 a0                	je     c0012246 <timerHandler(unsigned long long)+0x4f>
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	68 dc 46 02 c0       	push   0xc00246dc
c00122ae:	e8 fd c6 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00122b3:	c7 04 24 dc 46 02 c0 	mov    DWORD PTR [esp],0xc00246dc
c00122ba:	89 c5                	mov    ebp,eax
c00122bc:	e8 13 c7 00 00       	call   c001e9d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00122c1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00122c4:	83 c4 10             	add    esp,0x10
c00122c7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00122ca:	39 15 10 39 02 c0    	cmp    DWORD PTR ds:0xc0023910,edx
c00122d0:	a1 14 39 02 c0       	mov    eax,ds:0xc0023914
c00122d5:	19 c8                	sbb    eax,ecx
c00122d7:	73 83                	jae    c001225c <timerHandler(unsigned long long)+0x65>
c00122d9:	50                   	push   eax
c00122da:	50                   	push   eax
c00122db:	55                   	push   ebp
c00122dc:	68 dc 46 02 c0       	push   0xc00246dc
c00122e1:	e8 9c c7 00 00       	call   c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00122e6:	eb 93                	jmp    c001227b <timerHandler(unsigned long long)+0x84>
c00122e8:	80 3d ac 32 02 c0 00 	cmp    BYTE PTR ds:0xc00232ac,0x0
c00122ef:	74 29                	je     c001231a <timerHandler(unsigned long long)+0x123>
c00122f1:	39 c6                	cmp    esi,eax
c00122f3:	bb 00 00 00 00       	mov    ebx,0x0
c00122f8:	19 df                	sbb    edi,ebx
c00122fa:	72 19                	jb     c0012315 <timerHandler(unsigned long long)+0x11e>
c00122fc:	e8 2f 56 00 00       	call   c0017930 <lockScheduler()>
c0012301:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012306:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012309:	e8 56 59 00 00       	call   c0017c64 <schedule()>
c001230e:	e8 1f 56 00 00       	call   c0017932 <unlockScheduler()>
c0012313:	eb 05                	jmp    c001231a <timerHandler(unsigned long long)+0x123>
c0012315:	29 f0                	sub    eax,esi
c0012317:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001231a:	83 c4 0c             	add    esp,0xc
c001231d:	5b                   	pop    ebx
c001231e:	5e                   	pop    esi
c001231f:	5f                   	pop    edi
c0012320:	5d                   	pop    ebp
c0012321:	e9 c3 59 00 00       	jmp    c0017ce9 <unlockStuff()>
c0012326:	83 c4 0c             	add    esp,0xc
c0012329:	5b                   	pop    ebx
c001232a:	5e                   	pop    esi
c001232b:	5f                   	pop    edi
c001232c:	5d                   	pop    ebp
c001232d:	c3                   	ret    

c001232e <setupTimer(int)>:
c001232e:	57                   	push   edi
c001232f:	56                   	push   esi
c0012330:	53                   	push   ebx
c0012331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012335:	e8 a1 19 00 00       	call   c0013cdb <getCPUNumber()>
c001233a:	85 c0                	test   eax,eax
c001233c:	74 32                	je     c0012370 <setupTimer(int)+0x42>
c001233e:	83 ec 0c             	sub    esp,0xc
c0012341:	68 60 01 00 00       	push   0x160
c0012346:	e8 15 c9 ff ff       	call   c000ec60 <operator new(unsigned long)>
c001234b:	89 04 24             	mov    DWORD PTR [esp],eax
c001234e:	89 c3                	mov    ebx,eax
c0012350:	e8 1d ba 00 00       	call   c001dd72 <APICTimer::APICTimer()>
c0012355:	6a 00                	push   0x0
c0012357:	6a 00                	push   0x0
c0012359:	56                   	push   esi
c001235a:	53                   	push   ebx
c001235b:	e8 1a b9 00 00       	call   c001dc7a <APICTimer::open(int, int, void*)>
c0012360:	83 c4 20             	add    esp,0x20
c0012363:	e8 76 19 00 00       	call   c0013cde <thisCPU()>
c0012368:	56                   	push   esi
c0012369:	56                   	push   esi
c001236a:	53                   	push   ebx
c001236b:	e9 96 00 00 00       	jmp    c0012406 <setupTimer(int)+0xd8>
c0012370:	e8 69 19 00 00       	call   c0013cde <thisCPU()>
c0012375:	83 ec 0c             	sub    esp,0xc
c0012378:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001237e:	e8 b9 e0 ff ff       	call   c001043c <Device::getName()>
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012389:	0f 85 87 00 00 00    	jne    c0012416 <setupTimer(int)+0xe8>
c001238f:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012394:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001239b:	74 79                	je     c0012416 <setupTimer(int)+0xe8>
c001239d:	83 ec 0c             	sub    esp,0xc
c00123a0:	68 5c 01 00 00       	push   0x15c
c00123a5:	e8 b6 c8 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00123aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00123ad:	89 c3                	mov    ebx,eax
c00123af:	e8 0e bb 00 00       	call   c001dec2 <PIT::PIT()>
c00123b4:	59                   	pop    ecx
c00123b5:	5f                   	pop    edi
c00123b6:	53                   	push   ebx
c00123b7:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c00123bd:	e8 98 dd ff ff       	call   c001015a <Device::addChild(Device*)>
c00123c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123c4:	6a 00                	push   0x0
c00123c6:	6a 00                	push   0x0
c00123c8:	56                   	push   esi
c00123c9:	53                   	push   ebx
c00123ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123cd:	83 c4 14             	add    esp,0x14
c00123d0:	68 60 01 00 00       	push   0x160
c00123d5:	e8 86 c8 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00123da:	89 04 24             	mov    DWORD PTR [esp],eax
c00123dd:	89 c7                	mov    edi,eax
c00123df:	e8 8e b9 00 00       	call   c001dd72 <APICTimer::APICTimer()>
c00123e4:	6a 00                	push   0x0
c00123e6:	6a 00                	push   0x0
c00123e8:	56                   	push   esi
c00123e9:	57                   	push   edi
c00123ea:	e8 8b b8 00 00       	call   c001dc7a <APICTimer::open(int, int, void*)>
c00123ef:	83 c4 20             	add    esp,0x20
c00123f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123f4:	6a 00                	push   0x0
c00123f6:	6a 00                	push   0x0
c00123f8:	6a 00                	push   0x0
c00123fa:	53                   	push   ebx
c00123fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123fe:	e8 db 18 00 00       	call   c0013cde <thisCPU()>
c0012403:	5a                   	pop    edx
c0012404:	59                   	pop    ecx
c0012405:	57                   	push   edi
c0012406:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001240c:	e8 49 dd ff ff       	call   c001015a <Device::addChild(Device*)>
c0012411:	83 c4 10             	add    esp,0x10
c0012414:	eb 33                	jmp    c0012449 <setupTimer(int)+0x11b>
c0012416:	83 ec 0c             	sub    esp,0xc
c0012419:	68 5c 01 00 00       	push   0x15c
c001241e:	e8 3d c8 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0012423:	89 04 24             	mov    DWORD PTR [esp],eax
c0012426:	89 c3                	mov    ebx,eax
c0012428:	e8 95 ba 00 00       	call   c001dec2 <PIT::PIT()>
c001242d:	58                   	pop    eax
c001242e:	5a                   	pop    edx
c001242f:	53                   	push   ebx
c0012430:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c0012436:	e8 1f dd ff ff       	call   c001015a <Device::addChild(Device*)>
c001243b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001243d:	6a 00                	push   0x0
c001243f:	6a 00                	push   0x0
c0012441:	56                   	push   esi
c0012442:	53                   	push   ebx
c0012443:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012446:	83 c4 20             	add    esp,0x20
c0012449:	89 d8                	mov    eax,ebx
c001244b:	5b                   	pop    ebx
c001244c:	5e                   	pop    esi
c001244d:	5f                   	pop    edi
c001244e:	c3                   	ret    
c001244f:	90                   	nop

c0012450 <VCache::VCache(PhysicalDisk*)>:
c0012450:	53                   	push   ebx
c0012451:	83 ec 08             	sub    esp,0x8
c0012454:	ba 94 0e 02 c0       	mov    edx,0xc0020e94
c0012459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001245d:	89 10                	mov    DWORD PTR [eax],edx
c001245f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012463:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001246a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001246e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012479:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012480:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012492:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001249d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00124a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00124ac:	83 ec 0c             	sub    esp,0xc
c00124af:	6a 10                	push   0x10
c00124b1:	e8 aa c7 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00124b6:	83 c4 10             	add    esp,0x10
c00124b9:	89 c3                	mov    ebx,eax
c00124bb:	83 ec 0c             	sub    esp,0xc
c00124be:	53                   	push   ebx
c00124bf:	e8 84 55 00 00       	call   c0017a48 <Mutex::Mutex()>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00124ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124dd:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00124e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124e8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00124f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124f9:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00124ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012505:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012509:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001250c:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001250f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012513:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001251b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012521:	c1 e0 06             	shl    eax,0x6
c0012524:	83 ec 0c             	sub    esp,0xc
c0012527:	50                   	push   eax
c0012528:	e8 f1 96 ff ff       	call   c000bc1e <malloc>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	89 c2                	mov    edx,eax
c0012532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012536:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012539:	90                   	nop
c001253a:	83 c4 08             	add    esp,0x8
c001253d:	5b                   	pop    ebx
c001253e:	c3                   	ret    
c001253f:	90                   	nop

c0012540 <VCache::writeWriteBuffer()>:
c0012540:	53                   	push   ebx
c0012541:	83 ec 14             	sub    esp,0x14
c0012544:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012548:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001254b:	8b 10                	mov    edx,DWORD PTR [eax]
c001254d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012550:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012553:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012556:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012559:	50                   	push   eax
c001255a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001255d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012564:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001256b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001256f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012576:	83 c4 28             	add    esp,0x28
c0012579:	5b                   	pop    ebx
c001257a:	c3                   	ret    
c001257b:	90                   	nop

c001257c <VCache::~VCache()>:
c001257c:	83 ec 0c             	sub    esp,0xc
c001257f:	ba 94 0e 02 c0       	mov    edx,0xc0020e94
c0012584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012588:	89 10                	mov    DWORD PTR [eax],edx
c001258a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001258e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012591:	84 c0                	test   al,al
c0012593:	74 0f                	je     c00125a4 <VCache::~VCache()+0x28>
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259c:	e8 9f ff ff ff       	call   c0012540 <VCache::writeWriteBuffer()>
c00125a1:	83 c4 10             	add    esp,0x10
c00125a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00125ab:	83 ec 0c             	sub    esp,0xc
c00125ae:	50                   	push   eax
c00125af:	e8 7a 96 ff ff       	call   c000bc2e <free>
c00125b4:	83 c4 10             	add    esp,0x10
c00125b7:	90                   	nop
c00125b8:	83 c4 0c             	add    esp,0xc
c00125bb:	c3                   	ret    

c00125bc <VCache::~VCache()>:
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	83 ec 0c             	sub    esp,0xc
c00125c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125c6:	e8 b1 ff ff ff       	call   c001257c <VCache::~VCache()>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	83 ec 08             	sub    esp,0x8
c00125d1:	6a 30                	push   0x30
c00125d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125d7:	e8 93 c6 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c00125dc:	83 c4 10             	add    esp,0x10
c00125df:	83 c4 0c             	add    esp,0xc
c00125e2:	c3                   	ret    
c00125e3:	90                   	nop

c00125e4 <VCache::write(unsigned long long, int, void*)>:
c00125e4:	55                   	push   ebp
c00125e5:	57                   	push   edi
c00125e6:	56                   	push   esi
c00125e7:	53                   	push   ebx
c00125e8:	83 ec 28             	sub    esp,0x28
c00125eb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00125ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00125f3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00125f7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00125fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00125fe:	e8 a7 58 00 00       	call   c0017eaa <Semaphore::acquire()>
c0012603:	83 c4 10             	add    esp,0x10
c0012606:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001260a:	74 66                	je     c0012672 <VCache::write(unsigned long long, int, void*)+0x8e>
c001260c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001260f:	99                   	cdq    
c0012610:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012614:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0012617:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001261a:	89 c1                	mov    ecx,eax
c001261c:	89 d0                	mov    eax,edx
c001261e:	31 f1                	xor    ecx,esi
c0012620:	31 f8                	xor    eax,edi
c0012622:	89 ca                	mov    edx,ecx
c0012624:	09 c2                	or     edx,eax
c0012626:	75 3e                	jne    c0012666 <VCache::write(unsigned long long, int, void*)+0x82>
c0012628:	83 fd 01             	cmp    ebp,0x1
c001262b:	75 39                	jne    c0012666 <VCache::write(unsigned long long, int, void*)+0x82>
c001262d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012630:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012636:	51                   	push   ecx
c0012637:	50                   	push   eax
c0012638:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001263c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012640:	0f af c8             	imul   ecx,eax
c0012643:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012646:	51                   	push   ecx
c0012647:	e8 86 df fe ff       	call   c00005d2 <memcpy>
c001264c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001264f:	83 c4 10             	add    esp,0x10
c0012652:	40                   	inc    eax
c0012653:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012656:	83 f8 40             	cmp    eax,0x40
c0012659:	75 57                	jne    c00126b2 <VCache::write(unsigned long long, int, void*)+0xce>
c001265b:	83 ec 0c             	sub    esp,0xc
c001265e:	53                   	push   ebx
c001265f:	e8 dc fe ff ff       	call   c0012540 <VCache::writeWriteBuffer()>
c0012664:	eb 34                	jmp    c001269a <VCache::write(unsigned long long, int, void*)+0xb6>
c0012666:	83 ec 0c             	sub    esp,0xc
c0012669:	53                   	push   ebx
c001266a:	e8 d1 fe ff ff       	call   c0012540 <VCache::writeWriteBuffer()>
c001266f:	83 c4 10             	add    esp,0x10
c0012672:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012675:	83 fd 3f             	cmp    ebp,0x3f
c0012678:	7f 25                	jg     c001269f <VCache::write(unsigned long long, int, void*)+0xbb>
c001267a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001267d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012680:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012683:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012687:	52                   	push   edx
c0012688:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001268e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012692:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012695:	e8 38 df fe ff       	call   c00005d2 <memcpy>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	eb 13                	jmp    c00126b2 <VCache::write(unsigned long long, int, void*)+0xce>
c001269f:	83 ec 0c             	sub    esp,0xc
c00126a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00126a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00126a8:	55                   	push   ebp
c00126a9:	57                   	push   edi
c00126aa:	56                   	push   esi
c00126ab:	50                   	push   eax
c00126ac:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00126af:	83 c4 20             	add    esp,0x20
c00126b2:	83 ec 0c             	sub    esp,0xc
c00126b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00126b8:	e8 75 5d 00 00       	call   c0018432 <Semaphore::release()>
c00126bd:	83 c4 2c             	add    esp,0x2c
c00126c0:	31 c0                	xor    eax,eax
c00126c2:	5b                   	pop    ebx
c00126c3:	5e                   	pop    esi
c00126c4:	5f                   	pop    edi
c00126c5:	5d                   	pop    ebp
c00126c6:	c3                   	ret    
c00126c7:	90                   	nop

c00126c8 <VCache::read(unsigned long long, int, void*)>:
c00126c8:	57                   	push   edi
c00126c9:	56                   	push   esi
c00126ca:	53                   	push   ebx
c00126cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00126d7:	83 ec 0c             	sub    esp,0xc
c00126da:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00126dd:	e8 c8 57 00 00       	call   c0017eaa <Semaphore::acquire()>
c00126e2:	83 c4 10             	add    esp,0x10
c00126e5:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00126e9:	74 0c                	je     c00126f7 <VCache::read(unsigned long long, int, void*)+0x2f>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	53                   	push   ebx
c00126ef:	e8 4c fe ff ff       	call   c0012540 <VCache::writeWriteBuffer()>
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00126ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012703:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012707:	57                   	push   edi
c0012708:	56                   	push   esi
c0012709:	50                   	push   eax
c001270a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001270d:	83 c4 14             	add    esp,0x14
c0012710:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012713:	e8 1a 5d 00 00       	call   c0018432 <Semaphore::release()>
c0012718:	83 c4 10             	add    esp,0x10
c001271b:	31 c0                	xor    eax,eax
c001271d:	5b                   	pop    ebx
c001271e:	5e                   	pop    esi
c001271f:	5f                   	pop    edi
c0012720:	c3                   	ret    
c0012721:	90                   	nop

c0012722 <Video::putrect(int, int, int, int, unsigned int)>:
c0012722:	55                   	push   ebp
c0012723:	57                   	push   edi
c0012724:	56                   	push   esi
c0012725:	53                   	push   ebx
c0012726:	83 ec 1c             	sub    esp,0x1c
c0012729:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001272d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012731:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012735:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012739:	01 e8                	add    eax,ebp
c001273b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001273f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012743:	01 df                	add    edi,ebx
c0012745:	39 fb                	cmp    ebx,edi
c0012747:	7d 1b                	jge    c0012764 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012749:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001274d:	7d 12                	jge    c0012761 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001274f:	8b 16                	mov    edx,DWORD PTR [esi]
c0012751:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012755:	53                   	push   ebx
c0012756:	55                   	push   ebp
c0012757:	45                   	inc    ebp
c0012758:	56                   	push   esi
c0012759:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001275c:	83 c4 10             	add    esp,0x10
c001275f:	eb e8                	jmp    c0012749 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012761:	43                   	inc    ebx
c0012762:	eb e1                	jmp    c0012745 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012764:	83 c4 1c             	add    esp,0x1c
c0012767:	5b                   	pop    ebx
c0012768:	5e                   	pop    esi
c0012769:	5f                   	pop    edi
c001276a:	5d                   	pop    ebp
c001276b:	c3                   	ret    

c001276c <Video::blit(unsigned int*, int, int, int, int)>:
c001276c:	55                   	push   ebp
c001276d:	57                   	push   edi
c001276e:	56                   	push   esi
c001276f:	53                   	push   ebx
c0012770:	83 ec 1c             	sub    esp,0x1c
c0012773:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012777:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001277b:	85 c0                	test   eax,eax
c001277d:	79 02                	jns    c0012781 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001277f:	31 c0                	xor    eax,eax
c0012781:	c1 e0 02             	shl    eax,0x2
c0012784:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001278c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012790:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012794:	39 d8                	cmp    eax,ebx
c0012796:	7e 49                	jle    c00127e1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012798:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001279e:	7c 41                	jl     c00127e1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00127a0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00127a8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00127ac:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00127b0:	39 f9                	cmp    ecx,edi
c00127b2:	7e 22                	jle    c00127d6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00127b4:	83 c5 04             	add    ebp,0x4
c00127b7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00127bd:	7c 14                	jl     c00127d3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00127bf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00127c1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00127c4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127cc:	56                   	push   esi
c00127cd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00127d0:	83 c4 10             	add    esp,0x10
c00127d3:	47                   	inc    edi
c00127d4:	eb d2                	jmp    c00127a8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00127d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127da:	43                   	inc    ebx
c00127db:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00127df:	eb ab                	jmp    c001278c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00127e1:	83 c4 1c             	add    esp,0x1c
c00127e4:	5b                   	pop    ebx
c00127e5:	5e                   	pop    esi
c00127e6:	5f                   	pop    edi
c00127e7:	5d                   	pop    ebp
c00127e8:	c3                   	ret    
c00127e9:	90                   	nop

c00127ea <Video::clearScreen(unsigned int)>:
c00127ea:	57                   	push   edi
c00127eb:	56                   	push   esi
c00127ec:	53                   	push   ebx
c00127ed:	31 db                	xor    ebx,ebx
c00127ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127f3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00127f9:	7e 1f                	jle    c001281a <Video::clearScreen(unsigned int)+0x30>
c00127fb:	31 ff                	xor    edi,edi
c00127fd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012803:	7e 12                	jle    c0012817 <Video::clearScreen(unsigned int)+0x2d>
c0012805:	8b 06                	mov    eax,DWORD PTR [esi]
c0012807:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001280b:	53                   	push   ebx
c001280c:	57                   	push   edi
c001280d:	47                   	inc    edi
c001280e:	56                   	push   esi
c001280f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012812:	83 c4 10             	add    esp,0x10
c0012815:	eb e6                	jmp    c00127fd <Video::clearScreen(unsigned int)+0x13>
c0012817:	43                   	inc    ebx
c0012818:	eb d9                	jmp    c00127f3 <Video::clearScreen(unsigned int)+0x9>
c001281a:	5b                   	pop    ebx
c001281b:	5e                   	pop    esi
c001281c:	5f                   	pop    edi
c001281d:	c3                   	ret    

c001281e <Video::putpixel(int, int, unsigned int)>:
c001281e:	c7 44 24 04 9c 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020e9c
c0012826:	e9 24 c5 ff ff       	jmp    c000ed4f <Dbg::kprintf(char const*, ...)>
c001282b:	90                   	nop

c001282c <Video::Video(char const*)>:
c001282c:	83 ec 0c             	sub    esp,0xc
c001282f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012833:	83 ec 08             	sub    esp,0x8
c0012836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001283a:	50                   	push   eax
c001283b:	e8 0a db ff ff       	call   c001034a <Device::Device(char const*)>
c0012840:	83 c4 10             	add    esp,0x10
c0012843:	ba b4 0e 02 c0       	mov    edx,0xc0020eb4
c0012848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284c:	89 10                	mov    DWORD PTR [eax],edx
c001284e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012852:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001285c:	90                   	nop
c001285d:	83 c4 0c             	add    esp,0xc
c0012860:	c3                   	ret    
c0012861:	90                   	nop

c0012862 <Video::~Video()>:
c0012862:	83 ec 0c             	sub    esp,0xc
c0012865:	ba b4 0e 02 c0       	mov    edx,0xc0020eb4
c001286a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286e:	89 10                	mov    DWORD PTR [eax],edx
c0012870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012874:	83 ec 0c             	sub    esp,0xc
c0012877:	50                   	push   eax
c0012878:	e8 7f d7 ff ff       	call   c000fffc <Device::~Device()>
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	90                   	nop
c0012881:	83 c4 0c             	add    esp,0xc
c0012884:	c3                   	ret    
c0012885:	90                   	nop

c0012886 <Video::~Video()>:
c0012886:	83 ec 0c             	sub    esp,0xc
c0012889:	83 ec 0c             	sub    esp,0xc
c001288c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012890:	e8 cd ff ff ff       	call   c0012862 <Video::~Video()>
c0012895:	83 c4 10             	add    esp,0x10
c0012898:	83 ec 08             	sub    esp,0x8
c001289b:	68 64 01 00 00       	push   0x164
c00128a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a4:	e8 c6 c3 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	83 c4 0c             	add    esp,0xc
c00128af:	c3                   	ret    

c00128b0 <Video::isMonochrome()>:
c00128b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00128ba:	c3                   	ret    
c00128bb:	90                   	nop

c00128bc <Video::getWidth()>:
c00128bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128c6:	c3                   	ret    
c00128c7:	90                   	nop

c00128c8 <Video::getHeight()>:
c00128c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128cc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128d2:	c3                   	ret    
c00128d3:	90                   	nop

c00128d4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00128d4:	55                   	push   ebp
c00128d5:	57                   	push   edi
c00128d6:	56                   	push   esi
c00128d7:	53                   	push   ebx
c00128d8:	83 ec 2c             	sub    esp,0x2c
c00128db:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00128df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00128e3:	83 f8 01             	cmp    eax,0x1
c00128e6:	19 c9                	sbb    ecx,ecx
c00128e8:	31 db                	xor    ebx,ebx
c00128ea:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00128ee:	89 cd                	mov    ebp,ecx
c00128f0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00128f8:	f7 d5                	not    ebp
c00128fa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012900:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012904:	01 d8                	add    eax,ebx
c0012906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001290a:	56                   	push   esi
c001290b:	e8 b8 ff ff ff       	call   c00128c8 <Video::getHeight()>
c0012910:	59                   	pop    ecx
c0012911:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012915:	7e 70                	jle    c0012987 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012917:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001291b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001291f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012922:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012926:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001292a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012931:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012935:	89 f8                	mov    eax,edi
c0012937:	83 c0 20             	add    eax,0x20
c001293a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001293e:	56                   	push   esi
c001293f:	e8 78 ff ff ff       	call   c00128bc <Video::getWidth()>
c0012944:	5a                   	pop    edx
c0012945:	39 c7                	cmp    edi,eax
c0012947:	7d 34                	jge    c001297d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012949:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001294e:	74 05                	je     c0012955 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012950:	8b 06                	mov    eax,DWORD PTR [esi]
c0012952:	55                   	push   ebp
c0012953:	eb 0d                	jmp    c0012962 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012955:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001295a:	74 12                	je     c001296e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001295c:	8b 06                	mov    eax,DWORD PTR [esi]
c001295e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012962:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012966:	57                   	push   edi
c0012967:	56                   	push   esi
c0012968:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001296b:	83 c4 10             	add    esp,0x10
c001296e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012972:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012976:	47                   	inc    edi
c0012977:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001297b:	75 c1                	jne    c001293e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001297d:	43                   	inc    ebx
c001297e:	83 fb 20             	cmp    ebx,0x20
c0012981:	0f 85 79 ff ff ff    	jne    c0012900 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012987:	83 c4 2c             	add    esp,0x2c
c001298a:	5b                   	pop    ebx
c001298b:	5e                   	pop    esi
c001298c:	5f                   	pop    edi
c001298d:	5d                   	pop    ebp
c001298e:	c3                   	ret    
c001298f:	90                   	nop

c0012990 <ACPI::close(int, int, void*)>:
c0012990:	83 ec 1c             	sub    esp,0x1c
c0012993:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001299b:	74 0a                	je     c00129a7 <ACPI::close(int, int, void*)+0x17>
c001299d:	b8 00 00 00 00       	mov    eax,0x0
c00129a2:	e9 9a 00 00 00       	jmp    c0012a41 <ACPI::close(int, int, void*)+0xb1>
c00129a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00129ac:	75 37                	jne    c00129e5 <ACPI::close(int, int, void*)+0x55>
c00129ae:	83 ec 0c             	sub    esp,0xc
c00129b1:	68 ec 0e 02 c0       	push   0xc0020eec
c00129b6:	e8 94 c3 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	a1 28 39 02 c0       	mov    eax,ds:0xc0023928
c00129c3:	85 c0                	test   eax,eax
c00129c5:	74 07                	je     c00129ce <ACPI::close(int, int, void*)+0x3e>
c00129c7:	a1 28 39 02 c0       	mov    eax,ds:0xc0023928
c00129cc:	ff d0                	call   eax
c00129ce:	83 ec 0c             	sub    esp,0xc
c00129d1:	68 c0 0f 02 c0       	push   0xc0020fc0
c00129d6:	e8 09 20 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00129e3:	eb 5c                	jmp    c0012a41 <ACPI::close(int, int, void*)+0xb1>
c00129e5:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00129ea:	75 50                	jne    c0012a3c <ACPI::close(int, int, void*)+0xac>
c00129ec:	a1 24 39 02 c0       	mov    eax,ds:0xc0023924
c00129f1:	85 c0                	test   eax,eax
c00129f3:	74 07                	je     c00129fc <ACPI::close(int, int, void*)+0x6c>
c00129f5:	a1 24 39 02 c0       	mov    eax,ds:0xc0023924
c00129fa:	ff d0                	call   eax
c00129fc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012a01:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012a06:	83 e0 02             	and    eax,0x2
c0012a09:	74 1c                	je     c0012a27 <ACPI::close(int, int, void*)+0x97>
c0012a0b:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012a12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a16:	89 c2                	mov    edx,eax
c0012a18:	ec                   	in     al,dx
c0012a19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012a1d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012a21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012a25:	eb da                	jmp    c0012a01 <ACPI::close(int, int, void*)+0x71>
c0012a27:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012a2e:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012a33:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012a37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a3b:	ee                   	out    dx,al
c0012a3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a41:	83 c4 1c             	add    esp,0x1c
c0012a44:	c3                   	ret    

c0012a45 <findRSDP()>:
c0012a45:	83 ec 1c             	sub    esp,0x1c
c0012a48:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012a4d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012a53:	83 e0 04             	and    eax,0x4
c0012a56:	84 c0                	test   al,al
c0012a58:	75 07                	jne    c0012a61 <findRSDP()+0x1c>
c0012a5a:	b8 00 00 00 00       	mov    eax,0x0
c0012a5f:	eb 6a                	jmp    c0012acb <findRSDP()+0x86>
c0012a61:	a1 f0 32 02 c0       	mov    eax,ds:0xc00232f0
c0012a66:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012a6b:	7f 1b                	jg     c0012a88 <findRSDP()+0x43>
c0012a6d:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012a72:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012a78:	83 e2 fb             	and    edx,0xfffffffb
c0012a7b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012a81:	b8 00 00 00 00       	mov    eax,0x0
c0012a86:	eb 43                	jmp    c0012acb <findRSDP()+0x86>
c0012a88:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012a90:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012a98:	77 2c                	ja     c0012ac6 <findRSDP()+0x81>
c0012a9a:	83 ec 04             	sub    esp,0x4
c0012a9d:	6a 08                	push   0x8
c0012a9f:	68 f9 0e 02 c0       	push   0xc0020ef9
c0012aa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012aa8:	e8 c2 da fe ff       	call   c000056f <memcmp>
c0012aad:	83 c4 10             	add    esp,0x10
c0012ab0:	85 c0                	test   eax,eax
c0012ab2:	0f 94 c0             	sete   al
c0012ab5:	84 c0                	test   al,al
c0012ab7:	74 06                	je     c0012abf <findRSDP()+0x7a>
c0012ab9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012abd:	eb 0c                	jmp    c0012acb <findRSDP()+0x86>
c0012abf:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012ac4:	eb ca                	jmp    c0012a90 <findRSDP()+0x4b>
c0012ac6:	b8 00 00 00 00       	mov    eax,0x0
c0012acb:	83 c4 1c             	add    esp,0x1c
c0012ace:	c3                   	ret    

c0012acf <loadACPITables(unsigned char*)>:
c0012acf:	56                   	push   esi
c0012ad0:	53                   	push   ebx
c0012ad1:	83 ec 44             	sub    esp,0x44
c0012ad4:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012ad9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012adf:	83 e0 04             	and    eax,0x4
c0012ae2:	84 c0                	test   al,al
c0012ae4:	0f 84 05 02 00 00    	je     c0012cef <loadACPITables(unsigned char*)+0x220>
c0012aea:	a0 40 3b 02 c0       	mov    al,ds:0xc0023b40
c0012aef:	84 c0                	test   al,al
c0012af1:	74 75                	je     c0012b68 <loadACPITables(unsigned char*)+0x99>
c0012af3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012af7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b02:	83 e8 24             	sub    eax,0x24
c0012b05:	c1 e8 03             	shr    eax,0x3
c0012b08:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012b0c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012b14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b18:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012b1c:	0f 8d b2 00 00 00    	jge    c0012bd4 <loadACPITables(unsigned char*)+0x105>
c0012b22:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b26:	83 c0 24             	add    eax,0x24
c0012b29:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012b2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b31:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012b35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b39:	c1 e0 03             	shl    eax,0x3
c0012b3c:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012b40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b44:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b49:	89 c1                	mov    ecx,eax
c0012b4b:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c0012b50:	8d 50 01             	lea    edx,[eax+0x1]
c0012b53:	89 15 2c 39 02 c0    	mov    DWORD PTR ds:0xc002392c,edx
c0012b59:	89 ca                	mov    edx,ecx
c0012b5b:	89 14 c5 44 39 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc6bc],edx
c0012b62:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012b66:	eb ac                	jmp    c0012b14 <loadACPITables(unsigned char*)+0x45>
c0012b68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b77:	83 e8 24             	sub    eax,0x24
c0012b7a:	c1 e8 02             	shr    eax,0x2
c0012b7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b81:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012b89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012b8d:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012b91:	7d 41                	jge    c0012bd4 <loadACPITables(unsigned char*)+0x105>
c0012b93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b97:	83 c0 24             	add    eax,0x24
c0012b9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ba2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012ba6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012baa:	c1 e0 02             	shl    eax,0x2
c0012bad:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012bb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bb5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012bb7:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c0012bbc:	8d 50 01             	lea    edx,[eax+0x1]
c0012bbf:	89 15 2c 39 02 c0    	mov    DWORD PTR ds:0xc002392c,edx
c0012bc5:	89 ca                	mov    edx,ecx
c0012bc7:	89 14 c5 44 39 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc6bc],edx
c0012bce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012bd2:	eb b5                	jmp    c0012b89 <loadACPITables(unsigned char*)+0xba>
c0012bd4:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012bdc:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c0012be1:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012be5:	0f 8d 05 01 00 00    	jge    c0012cf0 <loadACPITables(unsigned char*)+0x221>
c0012beb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bef:	8b 04 c5 44 39 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc6bc]
c0012bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c06:	25 ff 0f 00 00       	and    eax,0xfff
c0012c0b:	89 c6                	mov    esi,eax
c0012c0d:	e8 73 b3 ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c0012c12:	89 c3                	mov    ebx,eax
c0012c14:	83 ec 0c             	sub    esp,0xc
c0012c17:	6a 01                	push   0x1
c0012c19:	e8 d7 b1 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c25:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012c2b:	83 ec 0c             	sub    esp,0xc
c0012c2e:	6a 01                	push   0x1
c0012c30:	6a 01                	push   0x1
c0012c32:	50                   	push   eax
c0012c33:	52                   	push   edx
c0012c34:	53                   	push   ebx
c0012c35:	e8 02 bb ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c3a:	83 c4 20             	add    esp,0x20
c0012c3d:	09 f0                	or     eax,esi
c0012c3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c47:	c1 e0 03             	shl    eax,0x3
c0012c4a:	05 40 39 02 c0       	add    eax,0xc0023940
c0012c4f:	83 ec 04             	sub    esp,0x4
c0012c52:	6a 04                	push   0x4
c0012c54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c58:	50                   	push   eax
c0012c59:	e8 74 d9 fe ff       	call   c00005d2 <memcpy>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c70:	05 00 10 00 00       	add    eax,0x1000
c0012c75:	c1 e8 0c             	shr    eax,0xc
c0012c78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c87:	25 ff 0f 00 00       	and    eax,0xfff
c0012c8c:	89 c6                	mov    esi,eax
c0012c8e:	e8 f2 b2 ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c0012c93:	89 c3                	mov    ebx,eax
c0012c95:	83 ec 0c             	sub    esp,0xc
c0012c98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c9c:	e8 54 b1 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ca8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012cae:	83 ec 0c             	sub    esp,0xc
c0012cb1:	6a 01                	push   0x1
c0012cb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cb7:	50                   	push   eax
c0012cb8:	52                   	push   edx
c0012cb9:	53                   	push   ebx
c0012cba:	e8 7d ba ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cbf:	83 c4 20             	add    esp,0x20
c0012cc2:	09 f0                	or     eax,esi
c0012cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012cc8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012ccb:	83 ec 0c             	sub    esp,0xc
c0012cce:	50                   	push   eax
c0012ccf:	e8 7b b4 ff ff       	call   c000e14f <Virt::freeKernelVirtualPages(unsigned long)>
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cdf:	89 14 c5 44 39 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc6bc],edx
c0012ce6:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012cea:	e9 ed fe ff ff       	jmp    c0012bdc <loadACPITables(unsigned char*)+0x10d>
c0012cef:	90                   	nop
c0012cf0:	83 c4 44             	add    esp,0x44
c0012cf3:	5b                   	pop    ebx
c0012cf4:	5e                   	pop    esi
c0012cf5:	c3                   	ret    

c0012cf6 <findRSDT(unsigned char*)>:
c0012cf6:	56                   	push   esi
c0012cf7:	53                   	push   ebx
c0012cf8:	83 ec 44             	sub    esp,0x44
c0012cfb:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012d00:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d06:	83 e0 04             	and    eax,0x4
c0012d09:	84 c0                	test   al,al
c0012d0b:	75 0a                	jne    c0012d17 <findRSDT(unsigned char*)+0x21>
c0012d0d:	b8 00 00 00 00       	mov    eax,0x0
c0012d12:	e9 f7 00 00 00       	jmp    c0012e0e <findRSDT(unsigned char*)+0x118>
c0012d17:	83 ec 04             	sub    esp,0x4
c0012d1a:	6a 24                	push   0x24
c0012d1c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012d20:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012d24:	50                   	push   eax
c0012d25:	e8 a8 d8 fe ff       	call   c00005d2 <memcpy>
c0012d2a:	83 c4 10             	add    esp,0x10
c0012d2d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012d31:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012d35:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012d3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012d45:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d55:	25 ff 0f 00 00       	and    eax,0xfff
c0012d5a:	89 c6                	mov    esi,eax
c0012d5c:	e8 24 b2 ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c0012d61:	89 c3                	mov    ebx,eax
c0012d63:	83 ec 0c             	sub    esp,0xc
c0012d66:	6a 02                	push   0x2
c0012d68:	e8 88 b0 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c0012d6d:	83 c4 10             	add    esp,0x10
c0012d70:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012d74:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012d7a:	83 ec 0c             	sub    esp,0xc
c0012d7d:	6a 01                	push   0x1
c0012d7f:	6a 02                	push   0x2
c0012d81:	50                   	push   eax
c0012d82:	52                   	push   edx
c0012d83:	53                   	push   ebx
c0012d84:	e8 b3 b9 ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d89:	83 c4 20             	add    esp,0x20
c0012d8c:	09 f0                	or     eax,esi
c0012d8e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d96:	25 ff 0f 00 00       	and    eax,0xfff
c0012d9b:	89 c6                	mov    esi,eax
c0012d9d:	e8 e3 b1 ff ff       	call   c000df85 <Virt::getAKernelVAS()>
c0012da2:	89 c3                	mov    ebx,eax
c0012da4:	83 ec 0c             	sub    esp,0xc
c0012da7:	6a 02                	push   0x2
c0012da9:	e8 47 b0 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012db5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012dbb:	83 ec 0c             	sub    esp,0xc
c0012dbe:	6a 01                	push   0x1
c0012dc0:	6a 02                	push   0x2
c0012dc2:	50                   	push   eax
c0012dc3:	52                   	push   edx
c0012dc4:	53                   	push   ebx
c0012dc5:	e8 72 b9 ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dca:	83 c4 20             	add    esp,0x20
c0012dcd:	09 f0                	or     eax,esi
c0012dcf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012dd3:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0012dd8:	75 11                	jne    c0012deb <findRSDT(unsigned char*)+0xf5>
c0012dda:	c6 05 40 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023b40,0x0
c0012de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012de5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012de9:	eb 1f                	jmp    c0012e0a <findRSDT(unsigned char*)+0x114>
c0012deb:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0012df0:	75 11                	jne    c0012e03 <findRSDT(unsigned char*)+0x10d>
c0012df2:	c6 05 40 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023b40,0x1
c0012df9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012dfd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012e01:	eb 07                	jmp    c0012e0a <findRSDT(unsigned char*)+0x114>
c0012e03:	b8 00 00 00 00       	mov    eax,0x0
c0012e08:	eb 04                	jmp    c0012e0e <findRSDT(unsigned char*)+0x118>
c0012e0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012e0e:	83 c4 44             	add    esp,0x44
c0012e11:	5b                   	pop    ebx
c0012e12:	5e                   	pop    esi
c0012e13:	c3                   	ret    

c0012e14 <findDataTable(unsigned char*, char*)>:
c0012e14:	83 ec 1c             	sub    esp,0x1c
c0012e17:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012e1c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012e22:	83 e0 04             	and    eax,0x4
c0012e25:	84 c0                	test   al,al
c0012e27:	75 07                	jne    c0012e30 <findDataTable(unsigned char*, char*)+0x1c>
c0012e29:	b8 00 00 00 00       	mov    eax,0x0
c0012e2e:	eb 7c                	jmp    c0012eac <findDataTable(unsigned char*, char*)+0x98>
c0012e30:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012e38:	a1 2c 39 02 c0       	mov    eax,ds:0xc002392c
c0012e3d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012e41:	7d 3a                	jge    c0012e7d <findDataTable(unsigned char*, char*)+0x69>
c0012e43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e47:	c1 e0 03             	shl    eax,0x3
c0012e4a:	05 40 39 02 c0       	add    eax,0xc0023940
c0012e4f:	83 ec 04             	sub    esp,0x4
c0012e52:	6a 04                	push   0x4
c0012e54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e58:	50                   	push   eax
c0012e59:	e8 11 d7 fe ff       	call   c000056f <memcmp>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	85 c0                	test   eax,eax
c0012e63:	0f 94 c0             	sete   al
c0012e66:	84 c0                	test   al,al
c0012e68:	74 0d                	je     c0012e77 <findDataTable(unsigned char*, char*)+0x63>
c0012e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e6e:	8b 04 c5 44 39 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc6bc]
c0012e75:	eb 35                	jmp    c0012eac <findDataTable(unsigned char*, char*)+0x98>
c0012e77:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012e7b:	eb bb                	jmp    c0012e38 <findDataTable(unsigned char*, char*)+0x24>
c0012e7d:	a0 40 3b 02 c0       	mov    al,ds:0xc0023b40
c0012e82:	84 c0                	test   al,al
c0012e84:	74 07                	je     c0012e8d <findDataTable(unsigned char*, char*)+0x79>
c0012e86:	b8 58 00 00 00       	mov    eax,0x58
c0012e8b:	eb 05                	jmp    c0012e92 <findDataTable(unsigned char*, char*)+0x7e>
c0012e8d:	b8 52 00 00 00       	mov    eax,0x52
c0012e92:	83 ec 04             	sub    esp,0x4
c0012e95:	50                   	push   eax
c0012e96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e9a:	68 e4 0f 02 c0       	push   0xc0020fe4
c0012e9f:	e8 ab be ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0012ea4:	83 c4 10             	add    esp,0x10
c0012ea7:	b8 00 00 00 00       	mov    eax,0x0
c0012eac:	83 c4 1c             	add    esp,0x1c
c0012eaf:	c3                   	ret    

c0012eb0 <scanMADT()>:
c0012eb0:	83 ec 2c             	sub    esp,0x2c
c0012eb3:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012eb8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ebe:	83 e0 04             	and    eax,0x4
c0012ec1:	84 c0                	test   al,al
c0012ec3:	0f 84 73 03 00 00    	je     c001323c <scanMADT()+0x38c>
c0012ec9:	e8 77 fb ff ff       	call   c0012a45 <findRSDP()>
c0012ece:	a3 4c 3b 02 c0       	mov    ds:0xc0023b4c,eax
c0012ed3:	a1 4c 3b 02 c0       	mov    eax,ds:0xc0023b4c
c0012ed8:	85 c0                	test   eax,eax
c0012eda:	75 19                	jne    c0012ef5 <scanMADT()+0x45>
c0012edc:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012ee1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012ee7:	83 e2 fb             	and    edx,0xfffffffb
c0012eea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012ef0:	e9 4b 03 00 00       	jmp    c0013240 <scanMADT()+0x390>
c0012ef5:	a1 4c 3b 02 c0       	mov    eax,ds:0xc0023b4c
c0012efa:	83 ec 0c             	sub    esp,0xc
c0012efd:	50                   	push   eax
c0012efe:	e8 f3 fd ff ff       	call   c0012cf6 <findRSDT(unsigned char*)>
c0012f03:	83 c4 10             	add    esp,0x10
c0012f06:	a3 48 3b 02 c0       	mov    ds:0xc0023b48,eax
c0012f0b:	a1 48 3b 02 c0       	mov    eax,ds:0xc0023b48
c0012f10:	85 c0                	test   eax,eax
c0012f12:	75 19                	jne    c0012f2d <scanMADT()+0x7d>
c0012f14:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012f19:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012f1f:	83 e2 fb             	and    edx,0xfffffffb
c0012f22:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012f28:	e9 13 03 00 00       	jmp    c0013240 <scanMADT()+0x390>
c0012f2d:	a1 48 3b 02 c0       	mov    eax,ds:0xc0023b48
c0012f32:	83 ec 0c             	sub    esp,0xc
c0012f35:	50                   	push   eax
c0012f36:	e8 94 fb ff ff       	call   c0012acf <loadACPITables(unsigned char*)>
c0012f3b:	83 c4 10             	add    esp,0x10
c0012f3e:	a1 48 3b 02 c0       	mov    eax,ds:0xc0023b48
c0012f43:	83 ec 08             	sub    esp,0x8
c0012f46:	68 02 0f 02 c0       	push   0xc0020f02
c0012f4b:	50                   	push   eax
c0012f4c:	e8 c3 fe ff ff       	call   c0012e14 <findDataTable(unsigned char*, char*)>
c0012f51:	83 c4 10             	add    esp,0x10
c0012f54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012f5d:	75 19                	jne    c0012f78 <scanMADT()+0xc8>
c0012f5f:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0012f64:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012f6a:	83 e2 fe             	and    edx,0xfffffffe
c0012f6d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012f73:	e9 c8 02 00 00       	jmp    c0013240 <scanMADT()+0x390>
c0012f78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012f80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f87:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0012f8b:	0f 87 af 02 00 00    	ja     c0013240 <scanMADT()+0x390>
c0012f91:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0012f99:	0f 87 a1 02 00 00    	ja     c0013240 <scanMADT()+0x390>
c0012f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fa3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012fa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fab:	8d 50 01             	lea    edx,[eax+0x1]
c0012fae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012fb2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012fb6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012fba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0012fbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc2:	8d 50 01             	lea    edx,[eax+0x1]
c0012fc5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012fc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012fcd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012fd1:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0012fd5:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0012fda:	0f 86 5f 02 00 00    	jbe    c001323f <scanMADT()+0x38f>
c0012fe0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0012fe5:	75 57                	jne    c001303e <scanMADT()+0x18e>
c0012fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012feb:	8d 50 01             	lea    edx,[eax+0x1]
c0012fee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012ff2:	8a 15 80 3c 02 c0    	mov    dl,BYTE PTR ds:0xc0023c80
c0012ff8:	0f b6 d2             	movzx  edx,dl
c0012ffb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012fff:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013003:	88 82 c0 3c 02 c0    	mov    BYTE PTR [edx-0x3ffdc340],al
c0013009:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001300d:	8d 50 01             	lea    edx,[eax+0x1]
c0013010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013014:	8a 15 80 3c 02 c0    	mov    dl,BYTE PTR ds:0xc0023c80
c001301a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001301d:	88 0d 80 3c 02 c0    	mov    BYTE PTR ds:0xc0023c80,cl
c0013023:	0f b6 d2             	movzx  edx,dl
c0013026:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001302a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001302e:	88 82 a0 3c 02 c0    	mov    BYTE PTR [edx-0x3ffdc360],al
c0013034:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013039:	e9 ea 01 00 00       	jmp    c0013228 <scanMADT()+0x378>
c001303e:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013043:	0f 85 14 01 00 00    	jne    c001315d <scanMADT()+0x2ad>
c0013049:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001304d:	8d 50 01             	lea    edx,[eax+0x1]
c0013050:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013054:	8a 15 50 3b 02 c0    	mov    dl,BYTE PTR ds:0xc0023b50
c001305a:	0f b6 d2             	movzx  edx,dl
c001305d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013061:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013065:	88 82 60 3b 02 c0    	mov    BYTE PTR [edx-0x3ffdc4a0],al
c001306b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001306f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013077:	01 d0                	add    eax,edx
c0013079:	83 c0 2c             	add    eax,0x2c
c001307c:	8a 00                	mov    al,BYTE PTR [eax]
c001307e:	0f b6 d0             	movzx  edx,al
c0013081:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013085:	8d 48 01             	lea    ecx,[eax+0x1]
c0013088:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001308c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013090:	0f b6 c0             	movzx  eax,al
c0013093:	c1 e0 08             	shl    eax,0x8
c0013096:	89 d1                	mov    ecx,edx
c0013098:	09 c1                	or     ecx,eax
c001309a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001309e:	8d 50 02             	lea    edx,[eax+0x2]
c00130a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00130a9:	0f b6 c0             	movzx  eax,al
c00130ac:	c1 e0 10             	shl    eax,0x10
c00130af:	09 c1                	or     ecx,eax
c00130b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130b5:	8d 50 03             	lea    edx,[eax+0x3]
c00130b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130bc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00130c0:	0f b6 c0             	movzx  eax,al
c00130c3:	c1 e0 18             	shl    eax,0x18
c00130c6:	09 c1                	or     ecx,eax
c00130c8:	89 ca                	mov    edx,ecx
c00130ca:	a0 50 3b 02 c0       	mov    al,ds:0xc0023b50
c00130cf:	0f b6 c0             	movzx  eax,al
c00130d2:	89 14 85 80 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc480],edx
c00130d9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00130de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130e6:	01 d0                	add    eax,edx
c00130e8:	83 c0 2c             	add    eax,0x2c
c00130eb:	8a 00                	mov    al,BYTE PTR [eax]
c00130ed:	0f b6 d0             	movzx  edx,al
c00130f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130f4:	8d 48 01             	lea    ecx,[eax+0x1]
c00130f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130fb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00130ff:	0f b6 c0             	movzx  eax,al
c0013102:	c1 e0 08             	shl    eax,0x8
c0013105:	89 d1                	mov    ecx,edx
c0013107:	09 c1                	or     ecx,eax
c0013109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001310d:	8d 50 02             	lea    edx,[eax+0x2]
c0013110:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013114:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013118:	0f b6 c0             	movzx  eax,al
c001311b:	c1 e0 10             	shl    eax,0x10
c001311e:	09 c1                	or     ecx,eax
c0013120:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013124:	8d 50 03             	lea    edx,[eax+0x3]
c0013127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001312b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001312f:	0f b6 c0             	movzx  eax,al
c0013132:	c1 e0 18             	shl    eax,0x18
c0013135:	09 c1                	or     ecx,eax
c0013137:	89 ca                	mov    edx,ecx
c0013139:	a0 50 3b 02 c0       	mov    al,ds:0xc0023b50
c001313e:	0f b6 c0             	movzx  eax,al
c0013141:	89 14 85 00 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc400],edx
c0013148:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001314d:	a0 50 3b 02 c0       	mov    al,ds:0xc0023b50
c0013152:	40                   	inc    eax
c0013153:	a2 50 3b 02 c0       	mov    ds:0xc0023b50,al
c0013158:	e9 cb 00 00 00       	jmp    c0013228 <scanMADT()+0x378>
c001315d:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013162:	0f 85 a6 00 00 00    	jne    c001320e <scanMADT()+0x35e>
c0013168:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001316c:	8d 50 01             	lea    edx,[eax+0x1]
c001316f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013173:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013177:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001317b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001317f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013183:	8d 50 01             	lea    edx,[eax+0x1]
c0013186:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001318a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001318e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013192:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013196:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001319a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001319e:	01 d0                	add    eax,edx
c00131a0:	83 c0 2c             	add    eax,0x2c
c00131a3:	8a 00                	mov    al,BYTE PTR [eax]
c00131a5:	0f b6 d0             	movzx  edx,al
c00131a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ac:	8d 48 01             	lea    ecx,[eax+0x1]
c00131af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131b3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00131b7:	0f b6 c0             	movzx  eax,al
c00131ba:	c1 e0 08             	shl    eax,0x8
c00131bd:	89 d1                	mov    ecx,edx
c00131bf:	09 c1                	or     ecx,eax
c00131c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131c5:	8d 50 02             	lea    edx,[eax+0x2]
c00131c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131cc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131d0:	0f b6 c0             	movzx  eax,al
c00131d3:	c1 e0 10             	shl    eax,0x10
c00131d6:	09 c1                	or     ecx,eax
c00131d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131dc:	8d 50 03             	lea    edx,[eax+0x3]
c00131df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131e3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131e7:	0f b6 c0             	movzx  eax,al
c00131ea:	c1 e0 18             	shl    eax,0x18
c00131ed:	09 c8                	or     eax,ecx
c00131ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131f3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00131f8:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00131fd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013202:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013206:	88 90 00 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd600],dl
c001320c:	eb 1a                	jmp    c0013228 <scanMADT()+0x378>
c001320e:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013213:	75 07                	jne    c001321c <scanMADT()+0x36c>
c0013215:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001321a:	eb 0c                	jmp    c0013228 <scanMADT()+0x378>
c001321c:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013221:	75 05                	jne    c0013228 <scanMADT()+0x378>
c0013223:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013228:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c001322d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013231:	01 d0                	add    eax,edx
c0013233:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013237:	e9 44 fd ff ff       	jmp    c0012f80 <scanMADT()+0xd0>
c001323c:	90                   	nop
c001323d:	eb 01                	jmp    c0013240 <scanMADT()+0x390>
c001323f:	90                   	nop
c0013240:	83 c4 2c             	add    esp,0x2c
c0013243:	c3                   	ret    

c0013244 <ACPI::ACPI()>:
c0013244:	83 ec 0c             	sub    esp,0xc
c0013247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001324b:	83 ec 08             	sub    esp,0x8
c001324e:	68 07 0f 02 c0       	push   0xc0020f07
c0013253:	50                   	push   eax
c0013254:	e8 f1 d0 ff ff       	call   c001034a <Device::Device(char const*)>
c0013259:	83 c4 10             	add    esp,0x10
c001325c:	ba b0 10 02 c0       	mov    edx,0xc00210b0
c0013261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013265:	89 10                	mov    DWORD PTR [eax],edx
c0013267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013276:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013284:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001328e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013292:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013299:	e8 12 fc ff ff       	call   c0012eb0 <scanMADT()>
c001329e:	90                   	nop
c001329f:	83 c4 0c             	add    esp,0xc
c00132a2:	c3                   	ret    
c00132a3:	90                   	nop

c00132a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00132a4:	83 ec 2c             	sub    esp,0x2c
c00132a7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00132ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132af:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00132b3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00132b7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00132bc:	88 d0                	mov    al,dl
c00132be:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00132c2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00132c7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00132cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132d3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00132d9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00132dd:	0f 8d 97 00 00 00    	jge    c001337a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00132e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132eb:	83 c2 2a             	add    edx,0x2a
c00132ee:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00132f2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00132f7:	75 78                	jne    c0013371 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00132f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013301:	83 c2 2a             	add    edx,0x2a
c0013304:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013308:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001330c:	75 63                	jne    c0013371 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001330e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013313:	74 3a                	je     c001334f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013315:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013319:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001331d:	83 c2 2a             	add    edx,0x2a
c0013320:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013328:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001332b:	39 c2                	cmp    edx,eax
c001332d:	74 10                	je     c001333f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001332f:	83 ec 0c             	sub    esp,0xc
c0013332:	68 14 10 02 c0       	push   0xc0021014
c0013337:	e8 a8 16 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	83 ec 0c             	sub    esp,0xc
c0013342:	68 0c 0f 02 c0       	push   0xc0020f0c
c0013347:	e8 98 16 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c001334c:	83 c4 10             	add    esp,0x10
c001334f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013353:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013357:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001335b:	83 c2 2a             	add    edx,0x2a
c001335e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013362:	8b 02                	mov    eax,DWORD PTR [edx]
c0013364:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013367:	89 01                	mov    DWORD PTR [ecx],eax
c0013369:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001336c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013371:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013375:	e9 55 ff ff ff       	jmp    c00132cf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001337a:	90                   	nop
c001337b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001337f:	83 c4 2c             	add    esp,0x2c
c0013382:	c2 04 00             	ret    0x4
c0013385:	90                   	nop

c0013386 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013386:	56                   	push   esi
c0013387:	53                   	push   ebx
c0013388:	83 ec 14             	sub    esp,0x14
c001338b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001338f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013393:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013397:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001339c:	88 c8                	mov    al,cl
c001339e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00133a2:	88 d0                	mov    al,dl
c00133a4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00133a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ac:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00133b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133b6:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00133bc:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00133c1:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00133c6:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00133cb:	83 ec 04             	sub    esp,0x4
c00133ce:	56                   	push   esi
c00133cf:	53                   	push   ebx
c00133d0:	51                   	push   ecx
c00133d1:	52                   	push   edx
c00133d2:	50                   	push   eax
c00133d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133d7:	68 44 10 02 c0       	push   0xc0021044
c00133dc:	e8 6e b9 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00133e1:	83 c4 20             	add    esp,0x20
c00133e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133e8:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00133ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133f2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00133f5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00133f9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00133fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013401:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013407:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001340b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001340e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013412:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013417:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001341b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013421:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013425:	8d 48 01             	lea    ecx,[eax+0x1]
c0013428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001342c:	83 c2 2a             	add    edx,0x2a
c001342f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013437:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001343d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013441:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013444:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013448:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001344c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013450:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013456:	8d 50 01             	lea    edx,[eax+0x1]
c0013459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001345d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013467:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001346d:	3d 00 08 00 00       	cmp    eax,0x800
c0013472:	75 10                	jne    c0013484 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	68 1b 0f 02 c0       	push   0xc0020f1b
c001347c:	e8 63 15 00 00       	call   c00149e4 <Krnl::panic(char const*)>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	90                   	nop
c0013485:	83 c4 14             	add    esp,0x14
c0013488:	5b                   	pop    ebx
c0013489:	5e                   	pop    esi
c001348a:	c3                   	ret    
c001348b:	90                   	nop

c001348c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001348c:	b8 00 00 00 00       	mov    eax,0x0
c0013491:	c3                   	ret    

c0013492 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013492:	83 ec 1c             	sub    esp,0x1c
c0013495:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013499:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001349c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134a0:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00134a5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00134aa:	83 ec 08             	sub    esp,0x8
c00134ad:	52                   	push   edx
c00134ae:	50                   	push   eax
c00134af:	e8 82 7d ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00134bb:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00134c0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00134c5:	83 ec 04             	sub    esp,0x4
c00134c8:	6a 01                	push   0x1
c00134ca:	52                   	push   edx
c00134cb:	50                   	push   eax
c00134cc:	e8 73 7e ff ff       	call   c000b344 <Computer::writeCMOS(unsigned char, unsigned char)>
c00134d1:	83 c4 10             	add    esp,0x10
c00134d4:	90                   	nop
c00134d5:	83 c4 1c             	add    esp,0x1c
c00134d8:	c3                   	ret    
c00134d9:	90                   	nop

c00134da <ACPI::open(int, int, void*)>:
c00134da:	53                   	push   ebx
c00134db:	83 ec 18             	sub    esp,0x18
c00134de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134e2:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00134e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134ed:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00134f3:	84 c0                	test   al,al
c00134f5:	74 60                	je     c0013557 <ACPI::open(int, int, void*)+0x7d>
c00134f7:	83 ec 0c             	sub    esp,0xc
c00134fa:	68 58 01 00 00       	push   0x158
c00134ff:	e8 5c b7 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	89 c3                	mov    ebx,eax
c0013509:	83 ec 0c             	sub    esp,0xc
c001350c:	53                   	push   ebx
c001350d:	e8 0e 7b 00 00       	call   c001b020 <PCI::PCI()>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001351d:	83 ec 08             	sub    esp,0x8
c0013520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013524:	50                   	push   eax
c0013525:	e8 30 cc ff ff       	call   c001015a <Device::addChild(Device*)>
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013531:	8b 00                	mov    eax,DWORD PTR [eax]
c0013533:	83 c0 08             	add    eax,0x8
c0013536:	8b 00                	mov    eax,DWORD PTR [eax]
c0013538:	6a 00                	push   0x0
c001353a:	6a 00                	push   0x0
c001353c:	6a 00                	push   0x0
c001353e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013542:	ff d0                	call   eax
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	83 ec 0c             	sub    esp,0xc
c001354a:	68 38 0f 02 c0       	push   0xc0020f38
c001354f:	e8 fb b7 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	83 ec 0c             	sub    esp,0xc
c001355a:	68 43 0f 02 c0       	push   0xc0020f43
c001355f:	e8 a9 33 00 00       	call   c001690d <Thr::loadKernelSymbolTable(char const*)>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	8b 1d a8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232a8
c001356d:	83 ec 08             	sub    esp,0x8
c0013570:	6a 01                	push   0x1
c0013572:	68 61 0f 02 c0       	push   0xc0020f61
c0013577:	e8 56 3e 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c001357c:	83 c4 10             	add    esp,0x10
c001357f:	83 ec 08             	sub    esp,0x8
c0013582:	53                   	push   ebx
c0013583:	50                   	push   eax
c0013584:	e8 9c 3f 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c0013589:	83 c4 10             	add    esp,0x10
c001358c:	8b 1d a8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232a8
c0013592:	83 ec 08             	sub    esp,0x8
c0013595:	6a 01                	push   0x1
c0013597:	68 7e 0f 02 c0       	push   0xc0020f7e
c001359c:	e8 31 3e 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c00135a1:	83 c4 10             	add    esp,0x10
c00135a4:	83 ec 08             	sub    esp,0x8
c00135a7:	53                   	push   ebx
c00135a8:	50                   	push   eax
c00135a9:	e8 77 3f 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c00135ae:	83 c4 10             	add    esp,0x10
c00135b1:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00135b6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135bc:	83 e0 04             	and    eax,0x4
c00135bf:	84 c0                	test   al,al
c00135c1:	0f 84 cf 00 00 00    	je     c0013696 <ACPI::open(int, int, void*)+0x1bc>
c00135c7:	83 ec 0c             	sub    esp,0xc
c00135ca:	68 14 01 00 00       	push   0x114
c00135cf:	e8 8c b6 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00135d4:	83 c4 10             	add    esp,0x10
c00135d7:	89 c3                	mov    ebx,eax
c00135d9:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c00135de:	83 ec 04             	sub    esp,0x4
c00135e1:	50                   	push   eax
c00135e2:	68 9b 0f 02 c0       	push   0xc0020f9b
c00135e7:	53                   	push   ebx
c00135e8:	e8 91 bc ff ff       	call   c000f27e <File::File(char const*, Process*)>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00135f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135f9:	74 17                	je     c0013612 <ACPI::open(int, int, void*)+0x138>
c00135fb:	83 ec 0c             	sub    esp,0xc
c00135fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013602:	e8 49 bf ff ff       	call   c000f550 <File::exists()>
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	84 c0                	test   al,al
c001360c:	74 04                	je     c0013612 <ACPI::open(int, int, void*)+0x138>
c001360e:	b0 01                	mov    al,0x1
c0013610:	eb 02                	jmp    c0013614 <ACPI::open(int, int, void*)+0x13a>
c0013612:	b0 00                	mov    al,0x0
c0013614:	84 c0                	test   al,al
c0013616:	74 25                	je     c001363d <ACPI::open(int, int, void*)+0x163>
c0013618:	8b 1d a8 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232a8
c001361e:	83 ec 08             	sub    esp,0x8
c0013621:	6a 01                	push   0x1
c0013623:	68 9b 0f 02 c0       	push   0xc0020f9b
c0013628:	e8 a5 3d 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c001362d:	83 c4 10             	add    esp,0x10
c0013630:	83 ec 08             	sub    esp,0x8
c0013633:	53                   	push   ebx
c0013634:	50                   	push   eax
c0013635:	e8 eb 3e 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c001363a:	83 c4 10             	add    esp,0x10
c001363d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013642:	74 1e                	je     c0013662 <ACPI::open(int, int, void*)+0x188>
c0013644:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013649:	74 17                	je     c0013662 <ACPI::open(int, int, void*)+0x188>
c001364b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001364f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013651:	83 c0 08             	add    eax,0x8
c0013654:	8b 00                	mov    eax,DWORD PTR [eax]
c0013656:	83 ec 0c             	sub    esp,0xc
c0013659:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001365d:	ff d0                	call   eax
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	a1 48 3b 02 c0       	mov    eax,ds:0xc0023b48
c0013667:	83 ec 08             	sub    esp,0x8
c001366a:	68 b8 0f 02 c0       	push   0xc0020fb8
c001366f:	50                   	push   eax
c0013670:	e8 9f f7 ff ff       	call   c0012e14 <findDataTable(unsigned char*, char*)>
c0013675:	83 c4 10             	add    esp,0x10
c0013678:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001367c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013681:	74 13                	je     c0013696 <ACPI::open(int, int, void*)+0x1bc>
c0013683:	83 ec 08             	sub    esp,0x8
c0013686:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001368a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001368e:	e8 ff fd ff ff       	call   c0013492 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013693:	83 c4 10             	add    esp,0x10
c0013696:	b8 00 00 00 00       	mov    eax,0x0
c001369b:	83 c4 18             	add    esp,0x18
c001369e:	5b                   	pop    ebx
c001369f:	c3                   	ret    

c00136a0 <ACPI::sleep()>:
c00136a0:	83 ec 0c             	sub    esp,0xc
c00136a3:	a1 20 39 02 c0       	mov    eax,ds:0xc0023920
c00136a8:	85 c0                	test   eax,eax
c00136aa:	74 07                	je     c00136b3 <ACPI::sleep()+0x13>
c00136ac:	a1 20 39 02 c0       	mov    eax,ds:0xc0023920
c00136b1:	ff d0                	call   eax
c00136b3:	90                   	nop
c00136b4:	83 c4 0c             	add    esp,0xc
c00136b7:	c3                   	ret    

c00136b8 <CPU::close(int, int, void*)>:
c00136b8:	31 c0                	xor    eax,eax
c00136ba:	c3                   	ret    

c00136bb <lookupAMDCPUName(unsigned char, unsigned char)>:
c00136bb:	55                   	push   ebp
c00136bc:	57                   	push   edi
c00136bd:	56                   	push   esi
c00136be:	53                   	push   ebx
c00136bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00136c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136c7:	89 ce                	mov    esi,ecx
c00136c9:	89 d5                	mov    ebp,edx
c00136cb:	80 f9 04             	cmp    cl,0x4
c00136ce:	75 28                	jne    c00136f8 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c00136d0:	8d 42 f9             	lea    eax,[edx-0x7]
c00136d3:	3c 03                	cmp    al,0x3
c00136d5:	0f 86 63 01 00 00    	jbe    c001383e <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00136db:	80 fa 03             	cmp    dl,0x3
c00136de:	0f 84 5a 01 00 00    	je     c001383e <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c00136e4:	8d 7a f2             	lea    edi,[edx-0xe]
c00136e7:	b8 d0 2b 02 c0       	mov    eax,0xc0022bd0
c00136ec:	89 fb                	mov    ebx,edi
c00136ee:	80 fb 01             	cmp    bl,0x1
c00136f1:	77 4e                	ja     c0013741 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00136f3:	e9 52 01 00 00       	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00136f8:	80 f9 05             	cmp    cl,0x5
c00136fb:	75 4d                	jne    c001374a <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00136fd:	b8 e0 2b 02 c0       	mov    eax,0xc0022be0
c0013702:	80 fa 03             	cmp    dl,0x3
c0013705:	0f 86 3f 01 00 00    	jbe    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001370b:	8d 7a fa             	lea    edi,[edx-0x6]
c001370e:	b8 f0 2b 02 c0       	mov    eax,0xc0022bf0
c0013713:	89 fb                	mov    ebx,edi
c0013715:	80 fb 01             	cmp    bl,0x1
c0013718:	0f 86 2c 01 00 00    	jbe    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001371e:	b8 00 2c 02 c0       	mov    eax,0xc0022c00
c0013723:	80 fa 08             	cmp    dl,0x8
c0013726:	0f 84 1e 01 00 00    	je     c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001372c:	89 d7                	mov    edi,edx
c001372e:	b8 10 2c 02 c0       	mov    eax,0xc0022c10
c0013733:	83 e7 fb             	and    edi,0xfffffffb
c0013736:	89 fb                	mov    ebx,edi
c0013738:	80 fb 09             	cmp    bl,0x9
c001373b:	0f 84 09 01 00 00    	je     c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013741:	31 c0                	xor    eax,eax
c0013743:	89 eb                	mov    ebx,ebp
c0013745:	0f b6 fb             	movzx  edi,bl
c0013748:	eb 30                	jmp    c001377a <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c001374a:	31 c0                	xor    eax,eax
c001374c:	80 f9 06             	cmp    cl,0x6
c001374f:	75 f2                	jne    c0013743 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013751:	80 fa 0a             	cmp    dl,0xa
c0013754:	77 ed                	ja     c0013743 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013756:	bf de 05 00 00       	mov    edi,0x5de
c001375b:	0f a3 d7             	bt     edi,edx
c001375e:	73 e3                	jae    c0013743 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0013760:	b8 20 2c 02 c0       	mov    eax,0xc0022c20
c0013765:	e9 e0 00 00 00       	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001376a:	39 c7                	cmp    edi,eax
c001376c:	0f 84 d3 00 00 00    	je     c0013845 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013772:	40                   	inc    eax
c0013773:	3d d0 00 00 00       	cmp    eax,0xd0
c0013778:	74 09                	je     c0013783 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c001377a:	89 f3                	mov    ebx,esi
c001377c:	80 fb 0f             	cmp    bl,0xf
c001377f:	75 f1                	jne    c0013772 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013781:	eb e7                	jmp    c001376a <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013783:	80 f9 10             	cmp    cl,0x10
c0013786:	75 14                	jne    c001379c <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013788:	8d 42 fc             	lea    eax,[edx-0x4]
c001378b:	83 e0 fb             	and    eax,0xfffffffb
c001378e:	3c 02                	cmp    al,0x2
c0013790:	76 34                	jbe    c00137c6 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013792:	b8 29 12 02 c0       	mov    eax,0xc0021229
c0013797:	80 fa 02             	cmp    dl,0x2
c001379a:	eb 24                	jmp    c00137c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c001379c:	80 f9 11             	cmp    cl,0x11
c001379f:	75 13                	jne    c00137b4 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c00137a1:	b8 29 12 02 c0       	mov    eax,0xc0021229
c00137a6:	80 fa 03             	cmp    dl,0x3
c00137a9:	0f 85 9b 00 00 00    	jne    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137af:	e9 91 00 00 00       	jmp    c0013845 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00137b4:	80 f9 12             	cmp    cl,0x12
c00137b7:	75 14                	jne    c00137cd <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c00137b9:	b8 29 12 02 c0       	mov    eax,0xc0021229
c00137be:	fe ca                	dec    dl
c00137c0:	0f 85 84 00 00 00    	jne    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137c6:	b8 40 2c 02 c0       	mov    eax,0xc0022c40
c00137cb:	eb 7d                	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137cd:	80 f9 14             	cmp    cl,0x14
c00137d0:	75 12                	jne    c00137e4 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00137d2:	4a                   	dec    edx
c00137d3:	b8 29 12 02 c0       	mov    eax,0xc0021229
c00137d8:	80 fa 01             	cmp    dl,0x1
c00137db:	77 6d                	ja     c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137dd:	b8 50 2c 02 c0       	mov    eax,0xc0022c50
c00137e2:	eb 66                	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137e4:	80 f9 15             	cmp    cl,0x15
c00137e7:	75 31                	jne    c001381a <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c00137e9:	b8 60 2c 02 c0       	mov    eax,0xc0022c60
c00137ee:	80 fa 01             	cmp    dl,0x1
c00137f1:	74 57                	je     c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137f3:	b8 29 12 02 c0       	mov    eax,0xc0021229
c00137f8:	80 fa 13             	cmp    dl,0x13
c00137fb:	76 0c                	jbe    c0013809 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c00137fd:	80 fa 30             	cmp    dl,0x30
c0013800:	75 48                	jne    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013802:	b8 80 2c 02 c0       	mov    eax,0xc0022c80
c0013807:	eb 41                	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013809:	b9 04 00 09 00       	mov    ecx,0x90004
c001380e:	0f a3 d1             	bt     ecx,edx
c0013811:	73 37                	jae    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013813:	b8 70 2c 02 c0       	mov    eax,0xc0022c70
c0013818:	eb 30                	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001381a:	b8 29 12 02 c0       	mov    eax,0xc0021229
c001381f:	80 f9 16             	cmp    cl,0x16
c0013822:	75 26                	jne    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013824:	b8 90 2c 02 c0       	mov    eax,0xc0022c90
c0013829:	84 d2                	test   dl,dl
c001382b:	74 1d                	je     c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001382d:	b8 29 12 02 c0       	mov    eax,0xc0021229
c0013832:	80 fa 30             	cmp    dl,0x30
c0013835:	75 13                	jne    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013837:	b8 a0 2c 02 c0       	mov    eax,0xc0022ca0
c001383c:	eb 0c                	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001383e:	b8 c0 2b 02 c0       	mov    eax,0xc0022bc0
c0013843:	eb 05                	jmp    c001384a <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013845:	b8 30 2c 02 c0       	mov    eax,0xc0022c30
c001384a:	5b                   	pop    ebx
c001384b:	5e                   	pop    esi
c001384c:	5f                   	pop    edi
c001384d:	5d                   	pop    ebp
c001384e:	c3                   	ret    

c001384f <lookupIntelCPUName(unsigned char, unsigned char)>:
c001384f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013853:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013857:	80 f9 04             	cmp    cl,0x4
c001385a:	75 6b                	jne    c00138c7 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001385c:	b8 20 2a 02 c0       	mov    eax,0xc0022a20
c0013861:	80 fa 01             	cmp    dl,0x1
c0013864:	0f 86 92 02 00 00    	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001386a:	b8 30 2a 02 c0       	mov    eax,0xc0022a30
c001386f:	80 fa 02             	cmp    dl,0x2
c0013872:	0f 84 84 02 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013878:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c001387d:	80 fa 03             	cmp    dl,0x3
c0013880:	0f 84 76 02 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013886:	b8 50 2a 02 c0       	mov    eax,0xc0022a50
c001388b:	80 fa 04             	cmp    dl,0x4
c001388e:	0f 84 68 02 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013894:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0013899:	80 fa 05             	cmp    dl,0x5
c001389c:	0f 84 5a 02 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138a2:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c00138a7:	80 fa 07             	cmp    dl,0x7
c00138aa:	0f 84 4c 02 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138b0:	83 ea 08             	sub    edx,0x8
c00138b3:	b8 29 12 02 c0       	mov    eax,0xc0021229
c00138b8:	80 fa 01             	cmp    dl,0x1
c00138bb:	0f 87 3b 02 00 00    	ja     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138c1:	b8 70 2a 02 c0       	mov    eax,0xc0022a70
c00138c6:	c3                   	ret    
c00138c7:	80 f9 05             	cmp    cl,0x5
c00138ca:	75 45                	jne    c0013911 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c00138cc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00138cf:	b8 80 2a 02 c0       	mov    eax,0xc0022a80
c00138d4:	80 f9 02             	cmp    cl,0x2
c00138d7:	0f 86 1f 02 00 00    	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138dd:	80 fa 04             	cmp    dl,0x4
c00138e0:	0f 84 f3 01 00 00    	je     c0013ad9 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c00138e6:	80 fa 07             	cmp    dl,0x7
c00138e9:	0f 84 0d 02 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138ef:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c00138f4:	80 fa 08             	cmp    dl,0x8
c00138f7:	0f 84 ff 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138fd:	b8 29 12 02 c0       	mov    eax,0xc0021229
c0013902:	80 fa 09             	cmp    dl,0x9
c0013905:	0f 85 f1 01 00 00    	jne    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001390b:	b8 a0 2a 02 c0       	mov    eax,0xc0022aa0
c0013910:	c3                   	ret    
c0013911:	80 f9 06             	cmp    cl,0x6
c0013914:	0f 85 85 01 00 00    	jne    c0013a9f <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c001391a:	b8 b0 2a 02 c0       	mov    eax,0xc0022ab0
c001391f:	80 fa 01             	cmp    dl,0x1
c0013922:	0f 84 d4 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013928:	8d 42 fb             	lea    eax,[edx-0x5]
c001392b:	3c 01                	cmp    al,0x1
c001392d:	0f 86 ac 01 00 00    	jbe    c0013adf <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013933:	80 fa 03             	cmp    dl,0x3
c0013936:	0f 84 a3 01 00 00    	je     c0013adf <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c001393c:	8d 4a f9             	lea    ecx,[edx-0x7]
c001393f:	b8 d0 2a 02 c0       	mov    eax,0xc0022ad0
c0013944:	80 f9 01             	cmp    cl,0x1
c0013947:	0f 86 af 01 00 00    	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001394d:	80 fa 09             	cmp    dl,0x9
c0013950:	0f 84 8f 01 00 00    	je     c0013ae5 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013956:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013959:	80 f9 01             	cmp    cl,0x1
c001395c:	0f 86 9a 01 00 00    	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013962:	b8 e0 2a 02 c0       	mov    eax,0xc0022ae0
c0013967:	80 fa 0d             	cmp    dl,0xd
c001396a:	0f 84 8c 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013970:	b8 f0 2a 02 c0       	mov    eax,0xc0022af0
c0013975:	80 fa 0e             	cmp    dl,0xe
c0013978:	0f 84 7e 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001397e:	b8 00 2b 02 c0       	mov    eax,0xc0022b00
c0013983:	80 fa 0f             	cmp    dl,0xf
c0013986:	0f 84 70 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001398c:	b8 e0 2a 02 c0       	mov    eax,0xc0022ae0
c0013991:	80 fa 15             	cmp    dl,0x15
c0013994:	0f 84 62 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001399a:	8d 4a ea             	lea    ecx,[edx-0x16]
c001399d:	b8 00 2b 02 c0       	mov    eax,0xc0022b00
c00139a2:	80 f9 01             	cmp    cl,0x1
c00139a5:	0f 86 51 01 00 00    	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139ab:	80 fa 1a             	cmp    dl,0x1a
c00139ae:	0f 84 37 01 00 00    	je     c0013aeb <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c00139b4:	80 fa 1c             	cmp    dl,0x1c
c00139b7:	0f 84 34 01 00 00    	je     c0013af1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c00139bd:	80 fa 1d             	cmp    dl,0x1d
c00139c0:	0f 84 36 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139c6:	b8 30 2b 02 c0       	mov    eax,0xc0022b30
c00139cb:	80 fa 25             	cmp    dl,0x25
c00139ce:	0f 84 28 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139d4:	8d 4a da             	lea    ecx,[edx-0x26]
c00139d7:	b8 20 2b 02 c0       	mov    eax,0xc0022b20
c00139dc:	80 f9 01             	cmp    cl,0x1
c00139df:	0f 86 17 01 00 00    	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139e5:	b8 40 2b 02 c0       	mov    eax,0xc0022b40
c00139ea:	80 fa 2a             	cmp    dl,0x2a
c00139ed:	0f 84 09 01 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139f3:	b8 30 2b 02 c0       	mov    eax,0xc0022b30
c00139f8:	80 fa 2c             	cmp    dl,0x2c
c00139fb:	0f 84 fb 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a01:	b8 40 2b 02 c0       	mov    eax,0xc0022b40
c0013a06:	80 fa 2d             	cmp    dl,0x2d
c0013a09:	0f 84 ed 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a0f:	b8 10 2b 02 c0       	mov    eax,0xc0022b10
c0013a14:	80 fa 2e             	cmp    dl,0x2e
c0013a17:	0f 84 df 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a1d:	b8 30 2b 02 c0       	mov    eax,0xc0022b30
c0013a22:	80 fa 2f             	cmp    dl,0x2f
c0013a25:	0f 84 d1 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a2b:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013a2e:	b8 20 2b 02 c0       	mov    eax,0xc0022b20
c0013a33:	80 f9 01             	cmp    cl,0x1
c0013a36:	0f 86 c0 00 00 00    	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a3c:	b8 50 2b 02 c0       	mov    eax,0xc0022b50
c0013a41:	80 fa 37             	cmp    dl,0x37
c0013a44:	0f 84 b2 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a4a:	b8 60 2b 02 c0       	mov    eax,0xc0022b60
c0013a4f:	80 fa 3a             	cmp    dl,0x3a
c0013a52:	0f 84 a4 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a58:	b8 70 2b 02 c0       	mov    eax,0xc0022b70
c0013a5d:	80 fa 3c             	cmp    dl,0x3c
c0013a60:	0f 84 96 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a66:	b8 80 2b 02 c0       	mov    eax,0xc0022b80
c0013a6b:	80 fa 3d             	cmp    dl,0x3d
c0013a6e:	0f 84 88 00 00 00    	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a74:	b8 60 2b 02 c0       	mov    eax,0xc0022b60
c0013a79:	80 fa 3e             	cmp    dl,0x3e
c0013a7c:	74 7e                	je     c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a7e:	8d 42 bb             	lea    eax,[edx-0x45]
c0013a81:	3c 01                	cmp    al,0x1
c0013a83:	76 72                	jbe    c0013af7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013a85:	80 fa 3f             	cmp    dl,0x3f
c0013a88:	74 6d                	je     c0013af7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013a8a:	80 fa 4a             	cmp    dl,0x4a
c0013a8d:	74 0a                	je     c0013a99 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013a8f:	b8 29 12 02 c0       	mov    eax,0xc0021229
c0013a94:	80 fa 4d             	cmp    dl,0x4d
c0013a97:	75 63                	jne    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a99:	b8 50 2b 02 c0       	mov    eax,0xc0022b50
c0013a9e:	c3                   	ret    
c0013a9f:	b8 29 12 02 c0       	mov    eax,0xc0021229
c0013aa4:	80 f9 0b             	cmp    cl,0xb
c0013aa7:	75 0a                	jne    c0013ab3 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013aa9:	fe ca                	dec    dl
c0013aab:	75 4f                	jne    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013aad:	b8 90 2b 02 c0       	mov    eax,0xc0022b90
c0013ab2:	c3                   	ret    
c0013ab3:	80 f9 0f             	cmp    cl,0xf
c0013ab6:	75 44                	jne    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ab8:	b8 a0 2b 02 c0       	mov    eax,0xc0022ba0
c0013abd:	80 fa 02             	cmp    dl,0x2
c0013ac0:	76 3a                	jbe    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ac2:	8d 42 fd             	lea    eax,[edx-0x3]
c0013ac5:	3c 01                	cmp    al,0x1
c0013ac7:	76 0a                	jbe    c0013ad3 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013ac9:	b8 29 12 02 c0       	mov    eax,0xc0021229
c0013ace:	80 fa 06             	cmp    dl,0x6
c0013ad1:	75 29                	jne    c0013afc <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ad3:	b8 b0 2b 02 c0       	mov    eax,0xc0022bb0
c0013ad8:	c3                   	ret    
c0013ad9:	b8 90 2a 02 c0       	mov    eax,0xc0022a90
c0013ade:	c3                   	ret    
c0013adf:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0013ae4:	c3                   	ret    
c0013ae5:	b8 e0 2a 02 c0       	mov    eax,0xc0022ae0
c0013aea:	c3                   	ret    
c0013aeb:	b8 10 2b 02 c0       	mov    eax,0xc0022b10
c0013af0:	c3                   	ret    
c0013af1:	b8 20 2b 02 c0       	mov    eax,0xc0022b20
c0013af6:	c3                   	ret    
c0013af7:	b8 70 2b 02 c0       	mov    eax,0xc0022b70
c0013afc:	c3                   	ret    

c0013afd <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013afd:	60                   	pusha  
c0013afe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b0a:	9c                   	pushf  
c0013b0b:	fa                   	cli    
c0013b0c:	0f 09                	wbinvd 
c0013b0e:	0f 30                	wrmsr  
c0013b10:	9d                   	popf   
c0013b11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b15:	89 02                	mov    DWORD PTR [edx],eax
c0013b17:	61                   	popa   
c0013b18:	c3                   	ret    

c0013b19 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013b19:	60                   	pusha  
c0013b1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013b1e:	9c                   	pushf  
c0013b1f:	fa                   	cli    
c0013b20:	0f 09                	wbinvd 
c0013b22:	31 c0                	xor    eax,eax
c0013b24:	31 d2                	xor    edx,edx
c0013b26:	0f 32                	rdmsr  
c0013b28:	9d                   	popf   
c0013b29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b2d:	89 02                	mov    DWORD PTR [edx],eax
c0013b2f:	61                   	popa   
c0013b30:	c3                   	ret    

c0013b31 <AMD_K6_writeback(int, int, int)>:
c0013b31:	56                   	push   esi
c0013b32:	53                   	push   ebx
c0013b33:	83 ec 10             	sub    esp,0x10
c0013b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b3a:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013b3f:	75 5d                	jne    c0013b9e <AMD_K6_writeback(int, int, int)+0x6d>
c0013b41:	83 f8 08             	cmp    eax,0x8
c0013b44:	75 09                	jne    c0013b4f <AMD_K6_writeback(int, int, int)+0x1e>
c0013b46:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013b4b:	7e 13                	jle    c0013b60 <AMD_K6_writeback(int, int, int)+0x2f>
c0013b4d:	eb 30                	jmp    c0013b7f <AMD_K6_writeback(int, int, int)+0x4e>
c0013b4f:	83 f8 06             	cmp    eax,0x6
c0013b52:	7c 4a                	jl     c0013b9e <AMD_K6_writeback(int, int, int)+0x6d>
c0013b54:	83 f8 07             	cmp    eax,0x7
c0013b57:	7e 07                	jle    c0013b60 <AMD_K6_writeback(int, int, int)+0x2f>
c0013b59:	83 f8 09             	cmp    eax,0x9
c0013b5c:	74 21                	je     c0013b7f <AMD_K6_writeback(int, int, int)+0x4e>
c0013b5e:	eb 3e                	jmp    c0013b9e <AMD_K6_writeback(int, int, int)+0x6d>
c0013b60:	89 e6                	mov    esi,esp
c0013b62:	8b 1d e4 32 02 c0    	mov    ebx,DWORD PTR ds:0xc00232e4
c0013b68:	56                   	push   esi
c0013b69:	c1 eb 15             	shr    ebx,0x15
c0013b6c:	68 82 00 00 c0       	push   0xc0000082
c0013b71:	83 e3 7e             	and    ebx,0x7e
c0013b74:	e8 a0 ff ff ff       	call   c0013b19 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013b79:	56                   	push   esi
c0013b7a:	6a 00                	push   0x0
c0013b7c:	53                   	push   ebx
c0013b7d:	eb 12                	jmp    c0013b91 <AMD_K6_writeback(int, int, int)+0x60>
c0013b7f:	89 e3                	mov    ebx,esp
c0013b81:	53                   	push   ebx
c0013b82:	68 82 00 00 c0       	push   0xc0000082
c0013b87:	e8 8d ff ff ff       	call   c0013b19 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013b8c:	53                   	push   ebx
c0013b8d:	6a 00                	push   0x0
c0013b8f:	6a 00                	push   0x0
c0013b91:	68 82 00 00 c0       	push   0xc0000082
c0013b96:	e8 62 ff ff ff       	call   c0013afd <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013b9b:	83 c4 18             	add    esp,0x18
c0013b9e:	83 c4 10             	add    esp,0x10
c0013ba1:	5b                   	pop    ebx
c0013ba2:	5e                   	pop    esi
c0013ba3:	c3                   	ret    

c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013ba4:	55                   	push   ebp
c0013ba5:	57                   	push   edi
c0013ba6:	56                   	push   esi
c0013ba7:	53                   	push   ebx
c0013ba8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013bb0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bb4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013bb8:	39 05 c0 2c 02 c0    	cmp    DWORD PTR ds:0xc0022cc0,eax
c0013bbe:	75 23                	jne    c0013be3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013bc0:	a1 ec 3c 02 c0       	mov    eax,ds:0xc0023cec
c0013bc5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013bc9:	89 06                	mov    DWORD PTR [esi],eax
c0013bcb:	a1 e8 3c 02 c0       	mov    eax,ds:0xc0023ce8
c0013bd0:	89 07                	mov    DWORD PTR [edi],eax
c0013bd2:	a1 e4 3c 02 c0       	mov    eax,ds:0xc0023ce4
c0013bd7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013bda:	a1 e0 3c 02 c0       	mov    eax,ds:0xc0023ce0
c0013bdf:	89 02                	mov    DWORD PTR [edx],eax
c0013be1:	eb 3f                	jmp    c0013c22 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013be3:	31 c9                	xor    ecx,ecx
c0013be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013be9:	0f a2                	cpuid  
c0013beb:	89 06                	mov    DWORD PTR [esi],eax
c0013bed:	89 1f                	mov    DWORD PTR [edi],ebx
c0013bef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013bf3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013bf6:	89 10                	mov    DWORD PTR [eax],edx
c0013bf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bfc:	a3 c0 2c 02 c0       	mov    ds:0xc0022cc0,eax
c0013c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c03:	a3 ec 3c 02 c0       	mov    ds:0xc0023cec,eax
c0013c08:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c0a:	a3 e8 3c 02 c0       	mov    ds:0xc0023ce8,eax
c0013c0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013c12:	a3 e4 3c 02 c0       	mov    ds:0xc0023ce4,eax
c0013c17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c1d:	a3 e0 3c 02 c0       	mov    ds:0xc0023ce0,eax
c0013c22:	5b                   	pop    ebx
c0013c23:	5e                   	pop    esi
c0013c24:	5f                   	pop    edi
c0013c25:	5d                   	pop    ebp
c0013c26:	c3                   	ret    

c0013c27 <cpuidCheckEDX(unsigned int)>:
c0013c27:	83 ec 10             	sub    esp,0x10
c0013c2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c2e:	50                   	push   eax
c0013c2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c33:	50                   	push   eax
c0013c34:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c38:	50                   	push   eax
c0013c39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c3d:	50                   	push   eax
c0013c3e:	6a 01                	push   0x1
c0013c40:	e8 5f ff ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c49:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013c4d:	0f 95 c0             	setne  al
c0013c50:	83 c4 24             	add    esp,0x24
c0013c53:	c3                   	ret    

c0013c54 <cpuidCheckECX(unsigned int)>:
c0013c54:	83 ec 10             	sub    esp,0x10
c0013c57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c5b:	50                   	push   eax
c0013c5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c60:	50                   	push   eax
c0013c61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c65:	50                   	push   eax
c0013c66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c6a:	50                   	push   eax
c0013c6b:	6a 01                	push   0x1
c0013c6d:	e8 32 ff ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c76:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013c7a:	0f 95 c0             	setne  al
c0013c7d:	83 c4 24             	add    esp,0x24
c0013c80:	c3                   	ret    

c0013c81 <cpuidCheckExtendedEBX(unsigned int)>:
c0013c81:	83 ec 10             	sub    esp,0x10
c0013c84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c88:	50                   	push   eax
c0013c89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c8d:	50                   	push   eax
c0013c8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c92:	50                   	push   eax
c0013c93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c97:	50                   	push   eax
c0013c98:	6a 07                	push   0x7
c0013c9a:	e8 05 ff ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ca3:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013ca7:	0f 95 c0             	setne  al
c0013caa:	83 c4 24             	add    esp,0x24
c0013cad:	c3                   	ret    

c0013cae <cpuidCheckExtendedECX(unsigned int)>:
c0013cae:	83 ec 10             	sub    esp,0x10
c0013cb1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cb5:	50                   	push   eax
c0013cb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cba:	50                   	push   eax
c0013cbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cbf:	50                   	push   eax
c0013cc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013cc4:	50                   	push   eax
c0013cc5:	6a 07                	push   0x7
c0013cc7:	e8 d8 fe ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ccc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013cd0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013cd4:	0f 95 c0             	setne  al
c0013cd7:	83 c4 24             	add    esp,0x24
c0013cda:	c3                   	ret    

c0013cdb <getCPUNumber()>:
c0013cdb:	31 c0                	xor    eax,eax
c0013cdd:	c3                   	ret    

c0013cde <thisCPU()>:
c0013cde:	e8 f8 ff ff ff       	call   c0013cdb <getCPUNumber()>
c0013ce3:	8b 15 a8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232a8
c0013ce9:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013cf0:	c3                   	ret    
c0013cf1:	90                   	nop

c0013cf2 <CPU::CPU()>:
c0013cf2:	83 ec 0c             	sub    esp,0xc
c0013cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cf9:	83 ec 08             	sub    esp,0x8
c0013cfc:	68 29 12 02 c0       	push   0xc0021229
c0013d01:	50                   	push   eax
c0013d02:	e8 43 c6 ff ff       	call   c001034a <Device::Device(char const*)>
c0013d07:	83 c4 10             	add    esp,0x10
c0013d0a:	ba 00 13 02 c0       	mov    edx,0xc0021300
c0013d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d13:	89 10                	mov    DWORD PTR [eax],edx
c0013d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d19:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d27:	05 78 01 00 00       	add    eax,0x178
c0013d2c:	83 ec 0c             	sub    esp,0xc
c0013d2f:	50                   	push   eax
c0013d30:	e8 f9 76 ff ff       	call   c000b42e <GDT::GDT()>
c0013d35:	83 c4 10             	add    esp,0x10
c0013d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3c:	05 7c 09 00 00       	add    eax,0x97c
c0013d41:	83 ec 0c             	sub    esp,0xc
c0013d44:	50                   	push   eax
c0013d45:	e8 44 79 ff ff       	call   c000b68e <IDT::IDT()>
c0013d4a:	83 c4 10             	add    esp,0x10
c0013d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d51:	05 7c 11 00 00       	add    eax,0x117c
c0013d56:	83 ec 0c             	sub    esp,0xc
c0013d59:	50                   	push   eax
c0013d5a:	e8 67 99 ff ff       	call   c000d6c6 <TSS::TSS()>
c0013d5f:	83 c4 10             	add    esp,0x10
c0013d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d66:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d71:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013d7b:	90                   	nop
c0013d7c:	83 c4 0c             	add    esp,0xc
c0013d7f:	c3                   	ret    

c0013d80 <CPU::displayFeatures()>:
c0013d80:	c3                   	ret    
c0013d81:	90                   	nop

c0013d82 <CPU::detectFeatures()>:
c0013d82:	55                   	push   ebp
c0013d83:	57                   	push   edi
c0013d84:	56                   	push   esi
c0013d85:	53                   	push   ebx
c0013d86:	83 ec 50             	sub    esp,0x50
c0013d89:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013d8d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013d97:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013d9e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0013da4:	6a 0d                	push   0xd
c0013da6:	6a 00                	push   0x0
c0013da8:	57                   	push   edi
c0013da9:	e8 5a c8 fe ff       	call   c0000608 <memset>
c0013dae:	83 c4 10             	add    esp,0x10
c0013db1:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0013db6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013dbd:	0f 84 20 09 00 00    	je     c00146e3 <CPU::detectFeatures()+0x961>
c0013dc3:	83 ec 0c             	sub    esp,0xc
c0013dc6:	6a 10                	push   0x10
c0013dc8:	e8 5a fe ff ff       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c0013dcd:	83 e0 01             	and    eax,0x1
c0013dd0:	8d 14 00             	lea    edx,[eax+eax*1]
c0013dd3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013dd9:	83 e0 fd             	and    eax,0xfffffffd
c0013ddc:	09 d0                	or     eax,edx
c0013dde:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013de4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013deb:	e8 37 fe ff ff       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c0013df0:	83 e0 01             	and    eax,0x1
c0013df3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013dfa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e00:	83 e0 fb             	and    eax,0xfffffffb
c0013e03:	09 d0                	or     eax,edx
c0013e05:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e0b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013e12:	e8 10 fe ff ff       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c0013e17:	83 e0 01             	and    eax,0x1
c0013e1a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013e21:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e27:	83 e0 f7             	and    eax,0xfffffff7
c0013e2a:	09 d0                	or     eax,edx
c0013e2c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e32:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013e39:	e8 e9 fd ff ff       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c0013e3e:	83 e0 01             	and    eax,0x1
c0013e41:	c1 e0 04             	shl    eax,0x4
c0013e44:	88 c2                	mov    dl,al
c0013e46:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e4c:	83 e0 ef             	and    eax,0xffffffef
c0013e4f:	09 d0                	or     eax,edx
c0013e51:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e57:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013e5e:	e8 c4 fd ff ff       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c0013e63:	83 e0 01             	and    eax,0x1
c0013e66:	c1 e0 05             	shl    eax,0x5
c0013e69:	88 c2                	mov    dl,al
c0013e6b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013e71:	83 e0 df             	and    eax,0xffffffdf
c0013e74:	09 d0                	or     eax,edx
c0013e76:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013e7c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013e83:	e8 9f fd ff ff       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c0013e88:	83 e0 01             	and    eax,0x1
c0013e8b:	8d 14 00             	lea    edx,[eax+eax*1]
c0013e8e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013e94:	83 e0 fd             	and    eax,0xfffffffd
c0013e97:	09 d0                	or     eax,edx
c0013e99:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013e9f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013ea6:	e8 7c fd ff ff       	call   c0013c27 <cpuidCheckEDX(unsigned int)>
c0013eab:	83 e0 01             	and    eax,0x1
c0013eae:	c1 e0 06             	shl    eax,0x6
c0013eb1:	88 c2                	mov    dl,al
c0013eb3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013eb9:	83 e0 bf             	and    eax,0xffffffbf
c0013ebc:	09 d0                	or     eax,edx
c0013ebe:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013ec4:	58                   	pop    eax
c0013ec5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013ec9:	56                   	push   esi
c0013eca:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013ece:	55                   	push   ebp
c0013ecf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013ed3:	50                   	push   eax
c0013ed4:	8d 54 24 28          	lea    edx,[esp+0x28]
c0013ed8:	52                   	push   edx
c0013ed9:	6a 00                	push   0x0
c0013edb:	e8 c4 fc ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ee0:	83 c4 1c             	add    esp,0x1c
c0013ee3:	6a 04                	push   0x4
c0013ee5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013ee9:	50                   	push   eax
c0013eea:	57                   	push   edi
c0013eeb:	e8 e2 c6 fe ff       	call   c00005d2 <memcpy>
c0013ef0:	83 c4 0c             	add    esp,0xc
c0013ef3:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0013ef9:	6a 04                	push   0x4
c0013efb:	56                   	push   esi
c0013efc:	50                   	push   eax
c0013efd:	e8 d0 c6 fe ff       	call   c00005d2 <memcpy>
c0013f02:	83 c4 0c             	add    esp,0xc
c0013f05:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0013f0b:	6a 04                	push   0x4
c0013f0d:	55                   	push   ebp
c0013f0e:	50                   	push   eax
c0013f0f:	e8 be c6 fe ff       	call   c00005d2 <memcpy>
c0013f14:	58                   	pop    eax
c0013f15:	5a                   	pop    edx
c0013f16:	68 d4 10 02 c0       	push   0xc00210d4
c0013f1b:	57                   	push   edi
c0013f1c:	e8 d7 c7 fe ff       	call   c00006f8 <strcmp>
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	85 c0                	test   eax,eax
c0013f26:	75 0f                	jne    c0013f37 <CPU::detectFeatures()+0x1b5>
c0013f28:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013f32:	e9 22 02 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0013f37:	50                   	push   eax
c0013f38:	50                   	push   eax
c0013f39:	68 e1 10 02 c0       	push   0xc00210e1
c0013f3e:	57                   	push   edi
c0013f3f:	e8 b4 c7 fe ff       	call   c00006f8 <strcmp>
c0013f44:	83 c4 10             	add    esp,0x10
c0013f47:	85 c0                	test   eax,eax
c0013f49:	74 dd                	je     c0013f28 <CPU::detectFeatures()+0x1a6>
c0013f4b:	51                   	push   ecx
c0013f4c:	51                   	push   ecx
c0013f4d:	68 ee 10 02 c0       	push   0xc00210ee
c0013f52:	57                   	push   edi
c0013f53:	e8 a0 c7 fe ff       	call   c00006f8 <strcmp>
c0013f58:	83 c4 10             	add    esp,0x10
c0013f5b:	85 c0                	test   eax,eax
c0013f5d:	74 2a                	je     c0013f89 <CPU::detectFeatures()+0x207>
c0013f5f:	52                   	push   edx
c0013f60:	52                   	push   edx
c0013f61:	68 fb 10 02 c0       	push   0xc00210fb
c0013f66:	57                   	push   edi
c0013f67:	e8 8c c7 fe ff       	call   c00006f8 <strcmp>
c0013f6c:	83 c4 10             	add    esp,0x10
c0013f6f:	85 c0                	test   eax,eax
c0013f71:	74 16                	je     c0013f89 <CPU::detectFeatures()+0x207>
c0013f73:	50                   	push   eax
c0013f74:	50                   	push   eax
c0013f75:	68 08 11 02 c0       	push   0xc0021108
c0013f7a:	57                   	push   edi
c0013f7b:	e8 78 c7 fe ff       	call   c00006f8 <strcmp>
c0013f80:	83 c4 10             	add    esp,0x10
c0013f83:	85 c0                	test   eax,eax
c0013f85:	74 48                	je     c0013fcf <CPU::detectFeatures()+0x24d>
c0013f87:	eb 0f                	jmp    c0013f98 <CPU::detectFeatures()+0x216>
c0013f89:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013f93:	e9 c1 01 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0013f98:	50                   	push   eax
c0013f99:	50                   	push   eax
c0013f9a:	68 15 11 02 c0       	push   0xc0021115
c0013f9f:	57                   	push   edi
c0013fa0:	e8 53 c7 fe ff       	call   c00006f8 <strcmp>
c0013fa5:	83 c4 10             	add    esp,0x10
c0013fa8:	85 c0                	test   eax,eax
c0013faa:	74 23                	je     c0013fcf <CPU::detectFeatures()+0x24d>
c0013fac:	50                   	push   eax
c0013fad:	50                   	push   eax
c0013fae:	68 22 11 02 c0       	push   0xc0021122
c0013fb3:	57                   	push   edi
c0013fb4:	e8 3f c7 fe ff       	call   c00006f8 <strcmp>
c0013fb9:	83 c4 10             	add    esp,0x10
c0013fbc:	85 c0                	test   eax,eax
c0013fbe:	75 1e                	jne    c0013fde <CPU::detectFeatures()+0x25c>
c0013fc0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013fca:	e9 8a 01 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0013fcf:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013fd9:	e9 7b 01 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0013fde:	50                   	push   eax
c0013fdf:	50                   	push   eax
c0013fe0:	68 2f 11 02 c0       	push   0xc002112f
c0013fe5:	57                   	push   edi
c0013fe6:	e8 0d c7 fe ff       	call   c00006f8 <strcmp>
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	85 c0                	test   eax,eax
c0013ff0:	75 0f                	jne    c0014001 <CPU::detectFeatures()+0x27f>
c0013ff2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013ffc:	e9 58 01 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0014001:	50                   	push   eax
c0014002:	50                   	push   eax
c0014003:	68 ee 10 02 c0       	push   0xc00210ee
c0014008:	57                   	push   edi
c0014009:	e8 ea c6 fe ff       	call   c00006f8 <strcmp>
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	85 c0                	test   eax,eax
c0014013:	75 0f                	jne    c0014024 <CPU::detectFeatures()+0x2a2>
c0014015:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001401f:	e9 35 01 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0014024:	50                   	push   eax
c0014025:	50                   	push   eax
c0014026:	68 3c 11 02 c0       	push   0xc002113c
c001402b:	57                   	push   edi
c001402c:	e8 c7 c6 fe ff       	call   c00006f8 <strcmp>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	85 c0                	test   eax,eax
c0014036:	75 0f                	jne    c0014047 <CPU::detectFeatures()+0x2c5>
c0014038:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014042:	e9 12 01 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0014047:	51                   	push   ecx
c0014048:	51                   	push   ecx
c0014049:	68 49 11 02 c0       	push   0xc0021149
c001404e:	57                   	push   edi
c001404f:	e8 a4 c6 fe ff       	call   c00006f8 <strcmp>
c0014054:	83 c4 10             	add    esp,0x10
c0014057:	85 c0                	test   eax,eax
c0014059:	75 0f                	jne    c001406a <CPU::detectFeatures()+0x2e8>
c001405b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014065:	e9 ef 00 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c001406a:	52                   	push   edx
c001406b:	52                   	push   edx
c001406c:	68 56 11 02 c0       	push   0xc0021156
c0014071:	57                   	push   edi
c0014072:	e8 81 c6 fe ff       	call   c00006f8 <strcmp>
c0014077:	83 c4 10             	add    esp,0x10
c001407a:	85 c0                	test   eax,eax
c001407c:	75 0f                	jne    c001408d <CPU::detectFeatures()+0x30b>
c001407e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014088:	e9 cc 00 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c001408d:	50                   	push   eax
c001408e:	50                   	push   eax
c001408f:	68 63 11 02 c0       	push   0xc0021163
c0014094:	57                   	push   edi
c0014095:	e8 5e c6 fe ff       	call   c00006f8 <strcmp>
c001409a:	83 c4 10             	add    esp,0x10
c001409d:	85 c0                	test   eax,eax
c001409f:	75 0f                	jne    c00140b0 <CPU::detectFeatures()+0x32e>
c00140a1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00140ab:	e9 a9 00 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c00140b0:	50                   	push   eax
c00140b1:	50                   	push   eax
c00140b2:	68 70 11 02 c0       	push   0xc0021170
c00140b7:	57                   	push   edi
c00140b8:	e8 3b c6 fe ff       	call   c00006f8 <strcmp>
c00140bd:	83 c4 10             	add    esp,0x10
c00140c0:	85 c0                	test   eax,eax
c00140c2:	75 0f                	jne    c00140d3 <CPU::detectFeatures()+0x351>
c00140c4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00140ce:	e9 86 00 00 00       	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c00140d3:	50                   	push   eax
c00140d4:	50                   	push   eax
c00140d5:	68 7d 11 02 c0       	push   0xc002117d
c00140da:	57                   	push   edi
c00140db:	e8 18 c6 fe ff       	call   c00006f8 <strcmp>
c00140e0:	83 c4 10             	add    esp,0x10
c00140e3:	85 c0                	test   eax,eax
c00140e5:	75 0c                	jne    c00140f3 <CPU::detectFeatures()+0x371>
c00140e7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00140f1:	eb 66                	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c00140f3:	50                   	push   eax
c00140f4:	50                   	push   eax
c00140f5:	68 8a 11 02 c0       	push   0xc002118a
c00140fa:	57                   	push   edi
c00140fb:	e8 f8 c5 fe ff       	call   c00006f8 <strcmp>
c0014100:	83 c4 10             	add    esp,0x10
c0014103:	85 c0                	test   eax,eax
c0014105:	75 0c                	jne    c0014113 <CPU::detectFeatures()+0x391>
c0014107:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014111:	eb 46                	jmp    c0014159 <CPU::detectFeatures()+0x3d7>
c0014113:	50                   	push   eax
c0014114:	50                   	push   eax
c0014115:	68 97 11 02 c0       	push   0xc0021197
c001411a:	57                   	push   edi
c001411b:	e8 d8 c5 fe ff       	call   c00006f8 <strcmp>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	85 c0                	test   eax,eax
c0014125:	74 e0                	je     c0014107 <CPU::detectFeatures()+0x385>
c0014127:	50                   	push   eax
c0014128:	50                   	push   eax
c0014129:	68 a4 11 02 c0       	push   0xc00211a4
c001412e:	57                   	push   edi
c001412f:	e8 c4 c5 fe ff       	call   c00006f8 <strcmp>
c0014134:	83 c4 10             	add    esp,0x10
c0014137:	85 c0                	test   eax,eax
c0014139:	74 cc                	je     c0014107 <CPU::detectFeatures()+0x385>
c001413b:	51                   	push   ecx
c001413c:	51                   	push   ecx
c001413d:	68 b1 11 02 c0       	push   0xc00211b1
c0014142:	57                   	push   edi
c0014143:	e8 b0 c5 fe ff       	call   c00006f8 <strcmp>
c0014148:	83 c4 10             	add    esp,0x10
c001414b:	85 c0                	test   eax,eax
c001414d:	74 b8                	je     c0014107 <CPU::detectFeatures()+0x385>
c001414f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014159:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001415e:	0f 86 be 00 00 00    	jbe    c0014222 <CPU::detectFeatures()+0x4a0>
c0014164:	83 ec 0c             	sub    esp,0xc
c0014167:	68 80 00 00 00       	push   0x80
c001416c:	e8 10 fb ff ff       	call   c0013c81 <cpuidCheckExtendedEBX(unsigned int)>
c0014171:	83 e0 01             	and    eax,0x1
c0014174:	c1 e0 06             	shl    eax,0x6
c0014177:	88 c2                	mov    dl,al
c0014179:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001417f:	83 e0 bf             	and    eax,0xffffffbf
c0014182:	09 d0                	or     eax,edx
c0014184:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001418a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014191:	e8 eb fa ff ff       	call   c0013c81 <cpuidCheckExtendedEBX(unsigned int)>
c0014196:	83 e0 01             	and    eax,0x1
c0014199:	c1 e0 04             	shl    eax,0x4
c001419c:	88 c2                	mov    dl,al
c001419e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00141a4:	83 e0 ef             	and    eax,0xffffffef
c00141a7:	09 d0                	or     eax,edx
c00141a9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00141af:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00141b6:	e8 c6 fa ff ff       	call   c0013c81 <cpuidCheckExtendedEBX(unsigned int)>
c00141bb:	c1 e0 07             	shl    eax,0x7
c00141be:	88 c2                	mov    dl,al
c00141c0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00141c6:	83 e0 7f             	and    eax,0x7f
c00141c9:	09 d0                	or     eax,edx
c00141cb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00141d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00141d8:	e8 d1 fa ff ff       	call   c0013cae <cpuidCheckExtendedECX(unsigned int)>
c00141dd:	83 e0 01             	and    eax,0x1
c00141e0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00141e7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00141ed:	83 e0 f7             	and    eax,0xfffffff7
c00141f0:	09 d0                	or     eax,edx
c00141f2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00141f8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00141ff:	e8 aa fa ff ff       	call   c0013cae <cpuidCheckExtendedECX(unsigned int)>
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	83 e0 01             	and    eax,0x1
c001420a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014211:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014217:	83 e0 fb             	and    eax,0xfffffffb
c001421a:	09 d0                	or     eax,edx
c001421c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014222:	83 ec 0c             	sub    esp,0xc
c0014225:	56                   	push   esi
c0014226:	55                   	push   ebp
c0014227:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001422b:	57                   	push   edi
c001422c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014230:	50                   	push   eax
c0014231:	6a 01                	push   0x1
c0014233:	e8 6c f9 ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014238:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001423c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014242:	88 ca                	mov    dl,cl
c0014244:	83 e0 f0             	and    eax,0xfffffff0
c0014247:	83 e2 0f             	and    edx,0xf
c001424a:	09 d0                	or     eax,edx
c001424c:	88 ca                	mov    dl,cl
c001424e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0014254:	c0 ea 04             	shr    dl,0x4
c0014257:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001425b:	0f b6 c2             	movzx  eax,dl
c001425e:	83 c4 20             	add    esp,0x20
c0014261:	c1 e0 06             	shl    eax,0x6
c0014264:	89 c5                	mov    ebp,eax
c0014266:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001426c:	66 25 3f c0          	and    ax,0xc03f
c0014270:	09 e8                	or     eax,ebp
c0014272:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014279:	89 c8                	mov    eax,ecx
c001427b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014281:	c1 e8 08             	shr    eax,0x8
c0014284:	83 e2 3f             	and    edx,0x3f
c0014287:	83 e0 0f             	and    eax,0xf
c001428a:	89 c5                	mov    ebp,eax
c001428c:	c1 e5 06             	shl    ebp,0x6
c001428f:	09 d5                	or     ebp,edx
c0014291:	89 ea                	mov    edx,ebp
c0014293:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014299:	88 c2                	mov    dl,al
c001429b:	c0 ea 02             	shr    dl,0x2
c001429e:	89 d5                	mov    ebp,edx
c00142a0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00142a6:	83 e2 c0             	and    edx,0xffffffc0
c00142a9:	09 d5                	or     ebp,edx
c00142ab:	89 ea                	mov    edx,ebp
c00142ad:	89 cd                	mov    ebp,ecx
c00142af:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00142b5:	c1 ed 0c             	shr    ebp,0xc
c00142b8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00142be:	83 e5 03             	and    ebp,0x3
c00142c1:	83 e2 cf             	and    edx,0xffffffcf
c00142c4:	c1 e5 04             	shl    ebp,0x4
c00142c7:	09 d5                	or     ebp,edx
c00142c9:	3c 06                	cmp    al,0x6
c00142cb:	89 ea                	mov    edx,ebp
c00142cd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00142d3:	74 04                	je     c00142d9 <CPU::detectFeatures()+0x557>
c00142d5:	3c 0f                	cmp    al,0xf
c00142d7:	75 5c                	jne    c0014335 <CPU::detectFeatures()+0x5b3>
c00142d9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00142dd:	89 cd                	mov    ebp,ecx
c00142df:	c1 ed 10             	shr    ebp,0x10
c00142e2:	c1 e5 04             	shl    ebp,0x4
c00142e5:	09 ea                	or     edx,ebp
c00142e7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00142ed:	0f b6 d2             	movzx  edx,dl
c00142f0:	66 81 e5 3f c0       	and    bp,0xc03f
c00142f5:	c1 e2 06             	shl    edx,0x6
c00142f8:	09 ea                	or     edx,ebp
c00142fa:	3c 0f                	cmp    al,0xf
c00142fc:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014303:	75 30                	jne    c0014335 <CPU::detectFeatures()+0x5b3>
c0014305:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001430b:	c1 e9 14             	shr    ecx,0x14
c001430e:	83 e0 3f             	and    eax,0x3f
c0014311:	83 c1 0f             	add    ecx,0xf
c0014314:	88 ca                	mov    dl,cl
c0014316:	c0 e9 02             	shr    cl,0x2
c0014319:	c1 e2 06             	shl    edx,0x6
c001431c:	09 d0                	or     eax,edx
c001431e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014324:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001432a:	83 e0 c0             	and    eax,0xffffffc0
c001432d:	09 c1                	or     ecx,eax
c001432f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014335:	83 ec 0c             	sub    esp,0xc
c0014338:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001433f:	56                   	push   esi
c0014340:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014344:	50                   	push   eax
c0014345:	57                   	push   edi
c0014346:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001434a:	55                   	push   ebp
c001434b:	68 00 00 00 80       	push   0x80000000
c0014350:	e8 4f f8 ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014355:	83 c4 20             	add    esp,0x20
c0014358:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014360:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014364:	76 1e                	jbe    c0014384 <CPU::detectFeatures()+0x602>
c0014366:	83 ec 0c             	sub    esp,0xc
c0014369:	56                   	push   esi
c001436a:	50                   	push   eax
c001436b:	57                   	push   edi
c001436c:	55                   	push   ebp
c001436d:	68 01 00 00 80       	push   0x80000001
c0014372:	e8 2d f8 ff ff       	call   c0013ba4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014377:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014381:	83 c4 20             	add    esp,0x20
c0014384:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001438a:	83 f8 01             	cmp    eax,0x1
c001438d:	75 6f                	jne    c00143fe <CPU::detectFeatures()+0x67c>
c001438f:	51                   	push   ecx
c0014390:	51                   	push   ecx
c0014391:	68 bd 11 02 c0       	push   0xc00211bd
c0014396:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001439a:	56                   	push   esi
c001439b:	e8 07 c3 fe ff       	call   c00006a7 <strcpy>
c00143a0:	5f                   	pop    edi
c00143a1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00143a7:	5d                   	pop    ebp
c00143a8:	66 c1 e8 06          	shr    ax,0x6
c00143ac:	0f b6 c0             	movzx  eax,al
c00143af:	50                   	push   eax
c00143b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00143b6:	c1 e8 0e             	shr    eax,0xe
c00143b9:	0f b6 c0             	movzx  eax,al
c00143bc:	50                   	push   eax
c00143bd:	e8 8d f4 ff ff       	call   c001384f <lookupIntelCPUName(unsigned char, unsigned char)>
c00143c2:	5a                   	pop    edx
c00143c3:	59                   	pop    ecx
c00143c4:	50                   	push   eax
c00143c5:	56                   	push   esi
c00143c6:	e8 93 c3 fe ff       	call   c000075e <strcat>
c00143cb:	5f                   	pop    edi
c00143cc:	5d                   	pop    ebp
c00143cd:	56                   	push   esi
c00143ce:	53                   	push   ebx
c00143cf:	e8 68 bf ff ff       	call   c001033c <Device::setName(char const*)>
c00143d4:	58                   	pop    eax
c00143d5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00143db:	5a                   	pop    edx
c00143dc:	68 c4 11 02 c0       	push   0xc00211c4
c00143e1:	50                   	push   eax
c00143e2:	e8 11 c3 fe ff       	call   c00006f8 <strcmp>
c00143e7:	83 c4 10             	add    esp,0x10
c00143ea:	85 c0                	test   eax,eax
c00143ec:	0f 85 73 03 00 00    	jne    c0014765 <CPU::detectFeatures()+0x9e3>
c00143f2:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00143f9:	e9 67 03 00 00       	jmp    c0014765 <CPU::detectFeatures()+0x9e3>
c00143fe:	83 f8 02             	cmp    eax,0x2
c0014401:	0f 85 b5 00 00 00    	jne    c00144bc <CPU::detectFeatures()+0x73a>
c0014407:	57                   	push   edi
c0014408:	57                   	push   edi
c0014409:	68 d6 11 02 c0       	push   0xc00211d6
c001440e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014412:	56                   	push   esi
c0014413:	e8 8f c2 fe ff       	call   c00006a7 <strcpy>
c0014418:	5d                   	pop    ebp
c0014419:	58                   	pop    eax
c001441a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014420:	66 c1 e8 06          	shr    ax,0x6
c0014424:	0f b6 c0             	movzx  eax,al
c0014427:	50                   	push   eax
c0014428:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001442e:	c1 e8 0e             	shr    eax,0xe
c0014431:	0f b6 c0             	movzx  eax,al
c0014434:	50                   	push   eax
c0014435:	e8 81 f2 ff ff       	call   c00136bb <lookupAMDCPUName(unsigned char, unsigned char)>
c001443a:	5a                   	pop    edx
c001443b:	59                   	pop    ecx
c001443c:	50                   	push   eax
c001443d:	56                   	push   esi
c001443e:	e8 1b c3 fe ff       	call   c000075e <strcat>
c0014443:	5f                   	pop    edi
c0014444:	5d                   	pop    ebp
c0014445:	56                   	push   esi
c0014446:	53                   	push   ebx
c0014447:	e8 f0 be ff ff       	call   c001033c <Device::setName(char const*)>
c001444c:	58                   	pop    eax
c001444d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014453:	5a                   	pop    edx
c0014454:	68 db 11 02 c0       	push   0xc00211db
c0014459:	50                   	push   eax
c001445a:	e8 99 c2 fe ff       	call   c00006f8 <strcmp>
c001445f:	83 c4 10             	add    esp,0x10
c0014462:	85 c0                	test   eax,eax
c0014464:	75 20                	jne    c0014486 <CPU::detectFeatures()+0x704>
c0014466:	8b 15 a8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232a8
c001446c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014472:	a8 01                	test   al,0x1
c0014474:	74 10                	je     c0014486 <CPU::detectFeatures()+0x704>
c0014476:	83 e0 fe             	and    eax,0xfffffffe
c0014479:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001447f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014486:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001448c:	c1 e8 0e             	shr    eax,0xe
c001448f:	3c 05                	cmp    al,0x5
c0014491:	0f 85 ce 02 00 00    	jne    c0014765 <CPU::detectFeatures()+0x9e3>
c0014497:	56                   	push   esi
c0014498:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001449e:	83 e0 0f             	and    eax,0xf
c00144a1:	50                   	push   eax
c00144a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144a8:	66 c1 e8 06          	shr    ax,0x6
c00144ac:	0f b6 c0             	movzx  eax,al
c00144af:	50                   	push   eax
c00144b0:	6a 05                	push   0x5
c00144b2:	e8 7a f6 ff ff       	call   c0013b31 <AMD_K6_writeback(int, int, int)>
c00144b7:	e9 1f 02 00 00       	jmp    c00146db <CPU::detectFeatures()+0x959>
c00144bc:	8d 50 fd             	lea    edx,[eax-0x3]
c00144bf:	83 fa 01             	cmp    edx,0x1
c00144c2:	76 09                	jbe    c00144cd <CPU::detectFeatures()+0x74b>
c00144c4:	83 f8 06             	cmp    eax,0x6
c00144c7:	0f 85 91 01 00 00    	jne    c001465e <CPU::detectFeatures()+0x8dc>
c00144cd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00144d3:	c1 ea 0e             	shr    edx,0xe
c00144d6:	80 fa 05             	cmp    dl,0x5
c00144d9:	75 7b                	jne    c0014556 <CPU::detectFeatures()+0x7d4>
c00144db:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00144e1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00144e6:	66 81 fa 00 01       	cmp    dx,0x100
c00144eb:	75 0c                	jne    c00144f9 <CPU::detectFeatures()+0x777>
c00144ed:	51                   	push   ecx
c00144ee:	51                   	push   ecx
c00144ef:	68 e2 11 02 c0       	push   0xc00211e2
c00144f4:	e9 dc 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00144f9:	66 81 fa 00 02       	cmp    dx,0x200
c00144fe:	75 0c                	jne    c001450c <CPU::detectFeatures()+0x78a>
c0014500:	52                   	push   edx
c0014501:	52                   	push   edx
c0014502:	68 f5 11 02 c0       	push   0xc00211f5
c0014507:	e9 c9 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c001450c:	66 81 fa 40 02       	cmp    dx,0x240
c0014511:	75 0c                	jne    c001451f <CPU::detectFeatures()+0x79d>
c0014513:	50                   	push   eax
c0014514:	50                   	push   eax
c0014515:	68 07 12 02 c0       	push   0xc0021207
c001451a:	e9 b6 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c001451f:	83 f8 06             	cmp    eax,0x6
c0014522:	75 0c                	jne    c0014530 <CPU::detectFeatures()+0x7ae>
c0014524:	50                   	push   eax
c0014525:	50                   	push   eax
c0014526:	68 19 12 02 c0       	push   0xc0021219
c001452b:	e9 a5 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c0014530:	83 f8 04             	cmp    eax,0x4
c0014533:	75 0c                	jne    c0014541 <CPU::detectFeatures()+0x7bf>
c0014535:	50                   	push   eax
c0014536:	50                   	push   eax
c0014537:	68 25 12 02 c0       	push   0xc0021225
c001453c:	e9 94 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c0014541:	83 f8 03             	cmp    eax,0x3
c0014544:	0f 85 1b 02 00 00    	jne    c0014765 <CPU::detectFeatures()+0x9e3>
c001454a:	50                   	push   eax
c001454b:	50                   	push   eax
c001454c:	68 2d 12 02 c0       	push   0xc002122d
c0014551:	e9 7f 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c0014556:	80 fa 06             	cmp    dl,0x6
c0014559:	0f 85 db 00 00 00    	jne    c001463a <CPU::detectFeatures()+0x8b8>
c001455f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014565:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001456a:	66 81 fa 80 01       	cmp    dx,0x180
c001456f:	75 0c                	jne    c001457d <CPU::detectFeatures()+0x7fb>
c0014571:	50                   	push   eax
c0014572:	50                   	push   eax
c0014573:	68 38 12 02 c0       	push   0xc0021238
c0014578:	e9 58 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c001457d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014583:	66 f7 c1 80 ff       	test   cx,0xff80
c0014588:	75 0c                	jne    c0014596 <CPU::detectFeatures()+0x814>
c001458a:	50                   	push   eax
c001458b:	50                   	push   eax
c001458c:	68 48 12 02 c0       	push   0xc0021248
c0014591:	e9 3f 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c0014596:	66 81 fa 40 02       	cmp    dx,0x240
c001459b:	75 0c                	jne    c00145a9 <CPU::detectFeatures()+0x827>
c001459d:	55                   	push   ebp
c001459e:	55                   	push   ebp
c001459f:	68 4f 12 02 c0       	push   0xc002124f
c00145a4:	e9 2c 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00145a9:	66 81 fa 80 02       	cmp    dx,0x280
c00145ae:	75 0c                	jne    c00145bc <CPU::detectFeatures()+0x83a>
c00145b0:	57                   	push   edi
c00145b1:	57                   	push   edi
c00145b2:	68 58 12 02 c0       	push   0xc0021258
c00145b7:	e9 19 01 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00145bc:	66 81 fa 40 03       	cmp    dx,0x340
c00145c1:	74 ed                	je     c00145b0 <CPU::detectFeatures()+0x82e>
c00145c3:	66 81 fa c0 03       	cmp    dx,0x3c0
c00145c8:	75 0c                	jne    c00145d6 <CPU::detectFeatures()+0x854>
c00145ca:	56                   	push   esi
c00145cb:	56                   	push   esi
c00145cc:	68 5f 12 02 c0       	push   0xc002125f
c00145d1:	e9 ff 00 00 00       	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00145d6:	83 f8 06             	cmp    eax,0x6
c00145d9:	0f 84 45 ff ff ff    	je     c0014524 <CPU::detectFeatures()+0x7a2>
c00145df:	83 f8 04             	cmp    eax,0x4
c00145e2:	0f 84 4d ff ff ff    	je     c0014535 <CPU::detectFeatures()+0x7b3>
c00145e8:	83 f8 03             	cmp    eax,0x3
c00145eb:	0f 85 74 01 00 00    	jne    c0014765 <CPU::detectFeatures()+0x9e3>
c00145f1:	51                   	push   ecx
c00145f2:	51                   	push   ecx
c00145f3:	68 68 12 02 c0       	push   0xc0021268
c00145f8:	53                   	push   ebx
c00145f9:	e8 3e bd ff ff       	call   c001033c <Device::setName(char const*)>
c00145fe:	b1 c1                	mov    cl,0xc1
c0014600:	88 c8                	mov    al,cl
c0014602:	e6 22                	out    0x22,al
c0014604:	e4 23                	in     al,0x23
c0014606:	88 c2                	mov    dl,al
c0014608:	88 c8                	mov    al,cl
c001460a:	e6 22                	out    0x22,al
c001460c:	88 d0                	mov    al,dl
c001460e:	83 c8 10             	or     eax,0x10
c0014611:	e6 23                	out    0x23,al
c0014613:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001461a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001461d:	89 d0                	mov    eax,edx
c001461f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014625:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014629:	40                   	inc    eax
c001462a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014630:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014635:	e9 a1 00 00 00       	jmp    c00146db <CPU::detectFeatures()+0x959>
c001463a:	83 f8 06             	cmp    eax,0x6
c001463d:	0f 84 e1 fe ff ff    	je     c0014524 <CPU::detectFeatures()+0x7a2>
c0014643:	83 f8 04             	cmp    eax,0x4
c0014646:	0f 84 e9 fe ff ff    	je     c0014535 <CPU::detectFeatures()+0x7b3>
c001464c:	83 f8 03             	cmp    eax,0x3
c001464f:	0f 85 10 01 00 00    	jne    c0014765 <CPU::detectFeatures()+0x9e3>
c0014655:	52                   	push   edx
c0014656:	52                   	push   edx
c0014657:	68 73 12 02 c0       	push   0xc0021273
c001465c:	eb 77                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c001465e:	83 f8 07             	cmp    eax,0x7
c0014661:	75 09                	jne    c001466c <CPU::detectFeatures()+0x8ea>
c0014663:	50                   	push   eax
c0014664:	50                   	push   eax
c0014665:	68 7d 12 02 c0       	push   0xc002127d
c001466a:	eb 69                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c001466c:	83 f8 0a             	cmp    eax,0xa
c001466f:	75 09                	jne    c001467a <CPU::detectFeatures()+0x8f8>
c0014671:	50                   	push   eax
c0014672:	50                   	push   eax
c0014673:	68 88 12 02 c0       	push   0xc0021288
c0014678:	eb 5b                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c001467a:	83 f8 0b             	cmp    eax,0xb
c001467d:	75 09                	jne    c0014688 <CPU::detectFeatures()+0x906>
c001467f:	50                   	push   eax
c0014680:	50                   	push   eax
c0014681:	68 90 12 02 c0       	push   0xc0021290
c0014686:	eb 4d                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c0014688:	83 f8 08             	cmp    eax,0x8
c001468b:	75 09                	jne    c0014696 <CPU::detectFeatures()+0x914>
c001468d:	50                   	push   eax
c001468e:	50                   	push   eax
c001468f:	68 99 12 02 c0       	push   0xc0021299
c0014694:	eb 3f                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c0014696:	83 f8 09             	cmp    eax,0x9
c0014699:	75 09                	jne    c00146a4 <CPU::detectFeatures()+0x922>
c001469b:	50                   	push   eax
c001469c:	50                   	push   eax
c001469d:	68 a1 12 02 c0       	push   0xc00212a1
c00146a2:	eb 31                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00146a4:	83 f8 05             	cmp    eax,0x5
c00146a7:	75 09                	jne    c00146b2 <CPU::detectFeatures()+0x930>
c00146a9:	50                   	push   eax
c00146aa:	50                   	push   eax
c00146ab:	68 a9 12 02 c0       	push   0xc00212a9
c00146b0:	eb 23                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00146b2:	83 f8 0c             	cmp    eax,0xc
c00146b5:	75 09                	jne    c00146c0 <CPU::detectFeatures()+0x93e>
c00146b7:	55                   	push   ebp
c00146b8:	55                   	push   ebp
c00146b9:	68 b7 12 02 c0       	push   0xc00212b7
c00146be:	eb 15                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00146c0:	83 f8 0d             	cmp    eax,0xd
c00146c3:	75 09                	jne    c00146ce <CPU::detectFeatures()+0x94c>
c00146c5:	57                   	push   edi
c00146c6:	57                   	push   edi
c00146c7:	68 c2 12 02 c0       	push   0xc00212c2
c00146cc:	eb 07                	jmp    c00146d5 <CPU::detectFeatures()+0x953>
c00146ce:	56                   	push   esi
c00146cf:	56                   	push   esi
c00146d0:	68 d6 12 02 c0       	push   0xc00212d6
c00146d5:	53                   	push   ebx
c00146d6:	e8 61 bc ff ff       	call   c001033c <Device::setName(char const*)>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	e9 82 00 00 00       	jmp    c0014765 <CPU::detectFeatures()+0x9e3>
c00146e3:	51                   	push   ecx
c00146e4:	51                   	push   ecx
c00146e5:	68 22 11 02 c0       	push   0xc0021122
c00146ea:	57                   	push   edi
c00146eb:	e8 b7 bf fe ff       	call   c00006a7 <strcpy>
c00146f0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00146fa:	e8 80 ba fe ff       	call   c000017f <is486>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	85 c0                	test   eax,eax
c0014704:	74 2d                	je     c0014733 <CPU::detectFeatures()+0x9b1>
c0014706:	52                   	push   edx
c0014707:	52                   	push   edx
c0014708:	68 e2 12 02 c0       	push   0xc00212e2
c001470d:	53                   	push   ebx
c001470e:	e8 29 bc ff ff       	call   c001033c <Device::setName(char const*)>
c0014713:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001471a:	e8 09 a2 00 00       	call   c001e928 <CPU::readCR0()>
c001471f:	83 c4 10             	add    esp,0x10
c0014722:	83 e0 14             	and    eax,0x14
c0014725:	83 f8 04             	cmp    eax,0x4
c0014728:	75 1f                	jne    c0014749 <CPU::detectFeatures()+0x9c7>
c001472a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014731:	eb 32                	jmp    c0014765 <CPU::detectFeatures()+0x9e3>
c0014733:	50                   	push   eax
c0014734:	50                   	push   eax
c0014735:	68 ed 12 02 c0       	push   0xc00212ed
c001473a:	53                   	push   ebx
c001473b:	e8 fc bb ff ff       	call   c001033c <Device::setName(char const*)>
c0014740:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014747:	eb d1                	jmp    c001471a <CPU::detectFeatures()+0x998>
c0014749:	e8 0c ba fe ff       	call   c000015a <hasLegacyFPU>
c001474e:	83 e0 01             	and    eax,0x1
c0014751:	8d 14 00             	lea    edx,[eax+eax*1]
c0014754:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001475a:	83 e0 fd             	and    eax,0xfffffffd
c001475d:	09 d0                	or     eax,edx
c001475f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014765:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001476c:	83 c4 4c             	add    esp,0x4c
c001476f:	5b                   	pop    ebx
c0014770:	5e                   	pop    esi
c0014771:	5f                   	pop    edi
c0014772:	5d                   	pop    ebp
c0014773:	c3                   	ret    

c0014774 <CPU::setupSMEP()>:
c0014774:	83 ec 0c             	sub    esp,0xc
c0014777:	e8 76 a4 00 00       	call   c001ebf2 <CPU::readCR4()>
c001477c:	0d 00 00 10 00       	or     eax,0x100000
c0014781:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014785:	83 c4 0c             	add    esp,0xc
c0014788:	e9 80 a4 00 00       	jmp    c001ec0d <CPU::writeCR4(unsigned long)>
c001478d:	90                   	nop

c001478e <CPU::setupUMIP()>:
c001478e:	83 ec 0c             	sub    esp,0xc
c0014791:	e8 5c a4 00 00       	call   c001ebf2 <CPU::readCR4()>
c0014796:	80 cc 08             	or     ah,0x8
c0014799:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001479d:	83 c4 0c             	add    esp,0xc
c00147a0:	e9 68 a4 00 00       	jmp    c001ec0d <CPU::writeCR4(unsigned long)>
c00147a5:	90                   	nop

c00147a6 <CPU::setupTSC()>:
c00147a6:	83 ec 0c             	sub    esp,0xc
c00147a9:	e8 44 a4 00 00       	call   c001ebf2 <CPU::readCR4()>
c00147ae:	83 c8 04             	or     eax,0x4
c00147b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147b5:	83 c4 0c             	add    esp,0xc
c00147b8:	e9 50 a4 00 00       	jmp    c001ec0d <CPU::writeCR4(unsigned long)>
c00147bd:	90                   	nop

c00147be <CPU::setupLargePages()>:
c00147be:	83 ec 0c             	sub    esp,0xc
c00147c1:	e8 2c a4 00 00       	call   c001ebf2 <CPU::readCR4()>
c00147c6:	83 c8 10             	or     eax,0x10
c00147c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147cd:	83 c4 0c             	add    esp,0xc
c00147d0:	e9 38 a4 00 00       	jmp    c001ec0d <CPU::writeCR4(unsigned long)>
c00147d5:	90                   	nop

c00147d6 <CPU::setupPAT()>:
c00147d6:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00147db:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00147e2:	74 2c                	je     c0014810 <CPU::setupPAT()+0x3a>
c00147e4:	53                   	push   ebx
c00147e5:	83 ec 10             	sub    esp,0x10
c00147e8:	68 77 02 00 00       	push   0x277
c00147ed:	50                   	push   eax
c00147ee:	e8 d3 69 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c00147f3:	83 e2 f8             	and    edx,0xfffffff8
c00147f6:	83 ca 01             	or     edx,0x1
c00147f9:	52                   	push   edx
c00147fa:	50                   	push   eax
c00147fb:	68 77 02 00 00       	push   0x277
c0014800:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c0014806:	e8 e7 69 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c001480b:	83 c4 28             	add    esp,0x28
c001480e:	5b                   	pop    ebx
c001480f:	c3                   	ret    
c0014810:	c3                   	ret    
c0014811:	90                   	nop

c0014812 <CPU::setupMTRR()>:
c0014812:	c3                   	ret    
c0014813:	90                   	nop

c0014814 <CPU::setupGlobalPages()>:
c0014814:	83 ec 0c             	sub    esp,0xc
c0014817:	e8 d6 a3 00 00       	call   c001ebf2 <CPU::readCR4()>
c001481c:	0c 80                	or     al,0x80
c001481e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014822:	83 c4 0c             	add    esp,0xc
c0014825:	e9 e3 a3 00 00       	jmp    c001ec0d <CPU::writeCR4(unsigned long)>

c001482a <CPU::allowUsermodeDataAccess()>:
c001482a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001482e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014835:	74 03                	je     c001483a <CPU::allowUsermodeDataAccess()+0x10>
c0014837:	0f 01 cb             	stac   
c001483a:	c3                   	ret    
c001483b:	90                   	nop

c001483c <CPU::prohibitUsermodeDataAccess()>:
c001483c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014840:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014847:	74 03                	je     c001484c <CPU::prohibitUsermodeDataAccess()+0x10>
c0014849:	0f 01 ca             	clac   
c001484c:	c3                   	ret    
c001484d:	90                   	nop

c001484e <CPU::setupSMAP()>:
c001484e:	53                   	push   ebx
c001484f:	83 ec 08             	sub    esp,0x8
c0014852:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014856:	e8 97 a3 00 00       	call   c001ebf2 <CPU::readCR4()>
c001485b:	83 ec 0c             	sub    esp,0xc
c001485e:	0d 00 00 20 00       	or     eax,0x200000
c0014863:	50                   	push   eax
c0014864:	e8 a4 a3 00 00       	call   c001ec0d <CPU::writeCR4(unsigned long)>
c0014869:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001486d:	83 c4 18             	add    esp,0x18
c0014870:	5b                   	pop    ebx
c0014871:	eb c9                	jmp    c001483c <CPU::prohibitUsermodeDataAccess()>
c0014873:	90                   	nop

c0014874 <CPU::setupFeatures()>:
c0014874:	53                   	push   ebx
c0014875:	83 ec 08             	sub    esp,0x8
c0014878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001487c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014883:	74 0c                	je     c0014891 <CPU::setupFeatures()+0x1d>
c0014885:	83 ec 0c             	sub    esp,0xc
c0014888:	53                   	push   ebx
c0014889:	e8 e6 fe ff ff       	call   c0014774 <CPU::setupSMEP()>
c001488e:	83 c4 10             	add    esp,0x10
c0014891:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014898:	74 0c                	je     c00148a6 <CPU::setupFeatures()+0x32>
c001489a:	83 ec 0c             	sub    esp,0xc
c001489d:	53                   	push   ebx
c001489e:	e8 ab ff ff ff       	call   c001484e <CPU::setupSMAP()>
c00148a3:	83 c4 10             	add    esp,0x10
c00148a6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00148ad:	74 0c                	je     c00148bb <CPU::setupFeatures()+0x47>
c00148af:	83 ec 0c             	sub    esp,0xc
c00148b2:	53                   	push   ebx
c00148b3:	e8 d6 fe ff ff       	call   c001478e <CPU::setupUMIP()>
c00148b8:	83 c4 10             	add    esp,0x10
c00148bb:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00148c2:	74 0c                	je     c00148d0 <CPU::setupFeatures()+0x5c>
c00148c4:	83 ec 0c             	sub    esp,0xc
c00148c7:	53                   	push   ebx
c00148c8:	e8 d9 fe ff ff       	call   c00147a6 <CPU::setupTSC()>
c00148cd:	83 c4 10             	add    esp,0x10
c00148d0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00148d7:	74 0c                	je     c00148e5 <CPU::setupFeatures()+0x71>
c00148d9:	83 ec 0c             	sub    esp,0xc
c00148dc:	53                   	push   ebx
c00148dd:	e8 dc fe ff ff       	call   c00147be <CPU::setupLargePages()>
c00148e2:	83 c4 10             	add    esp,0x10
c00148e5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00148ec:	74 0c                	je     c00148fa <CPU::setupFeatures()+0x86>
c00148ee:	83 ec 0c             	sub    esp,0xc
c00148f1:	53                   	push   ebx
c00148f2:	e8 1d ff ff ff       	call   c0014814 <CPU::setupGlobalPages()>
c00148f7:	83 c4 10             	add    esp,0x10
c00148fa:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014901:	74 0d                	je     c0014910 <CPU::setupFeatures()+0x9c>
c0014903:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014907:	83 c4 08             	add    esp,0x8
c001490a:	5b                   	pop    ebx
c001490b:	e9 c6 fe ff ff       	jmp    c00147d6 <CPU::setupPAT()>
c0014910:	83 c4 08             	add    esp,0x8
c0014913:	5b                   	pop    ebx
c0014914:	c3                   	ret    
c0014915:	90                   	nop

c0014916 <CPU::open(int, int, void*)>:
c0014916:	57                   	push   edi
c0014917:	56                   	push   esi
c0014918:	53                   	push   ebx
c0014919:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001491d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014921:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014927:	83 ec 0c             	sub    esp,0xc
c001492a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014930:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014936:	50                   	push   eax
c0014937:	e8 6e 6b ff ff       	call   c000b4aa <GDT::setup()>
c001493c:	83 c4 0c             	add    esp,0xc
c001493f:	6a 00                	push   0x0
c0014941:	68 ef be ad de       	push   0xdeadbeef
c0014946:	57                   	push   edi
c0014947:	e8 ba 8d ff ff       	call   c000d706 <TSS::setup(unsigned long, unsigned long)>
c001494c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001494f:	e8 92 8d ff ff       	call   c000d6e6 <TSS::flush()>
c0014954:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001495a:	89 04 24             	mov    DWORD PTR [esp],eax
c001495d:	e8 a2 6d ff ff       	call   c000b704 <IDT::setup()>
c0014962:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014969:	e8 96 a2 00 00       	call   c001ec04 <CPU::writeDR7(unsigned long)>
c001496e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014978:	e8 4b 78 ff ff       	call   c000c1c8 <Phys::allocatePage()>
c001497d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014983:	89 30                	mov    DWORD PTR [eax],esi
c0014985:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001498b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001498e:	58                   	pop    eax
c001498f:	5a                   	pop    edx
c0014990:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014996:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001499a:	e8 81 9d ff ff       	call   c000e720 <VAS::setCPUSpecific(unsigned long)>
c001499f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149a2:	e8 db f3 ff ff       	call   c0013d82 <CPU::detectFeatures()>
c00149a7:	e8 9a c7 ff ff       	call   c0011146 <setupInterruptController()>
c00149ac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00149b2:	a1 c0 32 02 c0       	mov    eax,ds:0xc00232c0
c00149b7:	83 e0 10             	and    eax,0x10
c00149ba:	83 f8 01             	cmp    eax,0x1
c00149bd:	19 c0                	sbb    eax,eax
c00149bf:	83 e0 46             	and    eax,0x46
c00149c2:	83 c0 1e             	add    eax,0x1e
c00149c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00149c8:	e8 61 d9 ff ff       	call   c001232e <setupTimer(int)>
c00149cd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00149d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149d6:	e8 99 fe ff ff       	call   c0014874 <CPU::setupFeatures()>
c00149db:	83 c4 10             	add    esp,0x10
c00149de:	31 c0                	xor    eax,eax
c00149e0:	5b                   	pop    ebx
c00149e1:	5e                   	pop    esi
c00149e2:	5f                   	pop    edi
c00149e3:	c3                   	ret    

c00149e4 <Krnl::panic(char const*)>:
c00149e4:	55                   	push   ebp
c00149e5:	89 e5                	mov    ebp,esp
c00149e7:	53                   	push   ebx
c00149e8:	83 ec 0c             	sub    esp,0xc
c00149eb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00149ee:	fa                   	cli    
c00149ef:	c6 05 f0 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023cf0,0x1
c00149f6:	53                   	push   ebx
c00149f7:	c6 05 e0 26 02 c0 00 	mov    BYTE PTR ds:0xc00226e0,0x0
c00149fe:	68 24 13 02 c0       	push   0xc0021324
c0014a03:	e8 47 a3 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0014a08:	58                   	pop    eax
c0014a09:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a14:	e8 2e 85 ff ff       	call   c000cf47 <setActiveTerminal(VgaText*)>
c0014a19:	83 c4 0c             	add    esp,0xc
c0014a1c:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a21:	6a 01                	push   0x1
c0014a23:	6a 0f                	push   0xf
c0014a25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a2b:	e8 56 7f ff ff       	call   c000c986 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a30:	5a                   	pop    edx
c0014a31:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3c:	e8 a7 87 ff ff       	call   c000d1e8 <VgaText::clearScreen()>
c0014a41:	59                   	pop    ecx
c0014a42:	58                   	pop    eax
c0014a43:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a48:	68 3d 13 02 c0       	push   0xc002133d
c0014a4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a53:	e8 0e 89 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014a58:	58                   	pop    eax
c0014a59:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a5e:	5a                   	pop    edx
c0014a5f:	68 dc 13 02 c0       	push   0xc00213dc
c0014a64:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6a:	e8 f7 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014a6f:	59                   	pop    ecx
c0014a70:	58                   	pop    eax
c0014a71:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a76:	68 59 13 02 c0       	push   0xc0021359
c0014a7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a81:	e8 e0 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014a86:	58                   	pop    eax
c0014a87:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a8c:	5a                   	pop    edx
c0014a8d:	53                   	push   ebx
c0014a8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a94:	e8 cd 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014a99:	59                   	pop    ecx
c0014a9a:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014a9f:	5b                   	pop    ebx
c0014aa0:	68 79 13 02 c0       	push   0xc0021379
c0014aa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aab:	e8 b6 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014ab0:	58                   	pop    eax
c0014ab1:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014ab6:	5a                   	pop    edx
c0014ab7:	68 18 14 02 c0       	push   0xc0021418
c0014abc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac2:	e8 9f 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014ac7:	59                   	pop    ecx
c0014ac8:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014acd:	5b                   	pop    ebx
c0014ace:	68 59 13 02 c0       	push   0xc0021359
c0014ad3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad9:	e8 88 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014ade:	58                   	pop    eax
c0014adf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ae4:	5a                   	pop    edx
c0014ae5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ae8:	83 c0 0c             	add    eax,0xc
c0014aeb:	50                   	push   eax
c0014aec:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014af1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af7:	e8 6a 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014afc:	59                   	pop    ecx
c0014afd:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014b02:	5b                   	pop    ebx
c0014b03:	68 78 13 02 c0       	push   0xc0021378
c0014b08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b0e:	e8 53 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014b13:	58                   	pop    eax
c0014b14:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014b19:	5a                   	pop    edx
c0014b1a:	68 44 14 02 c0       	push   0xc0021444
c0014b1f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b25:	e8 3c 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014b2a:	59                   	pop    ecx
c0014b2b:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014b30:	5b                   	pop    ebx
c0014b31:	68 84 14 02 c0       	push   0xc0021484
c0014b36:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3c:	e8 25 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014b41:	58                   	pop    eax
c0014b42:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014b47:	5a                   	pop    edx
c0014b48:	68 64 13 02 c0       	push   0xc0021364
c0014b4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b53:	e8 0e 88 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014b58:	59                   	pop    ecx
c0014b59:	5b                   	pop    ebx
c0014b5a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b5d:	68 7c 13 02 c0       	push   0xc002137c
c0014b62:	e8 e8 a1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0014b67:	58                   	pop    eax
c0014b68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b6b:	5a                   	pop    edx
c0014b6c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b6f:	68 85 13 02 c0       	push   0xc0021385
c0014b74:	e8 d6 a1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0014b79:	59                   	pop    ecx
c0014b7a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b7d:	5b                   	pop    ebx
c0014b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b80:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b83:	68 9d 0b 02 c0       	push   0xc0020b9d
c0014b88:	e8 c2 a1 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0014b8d:	58                   	pop    eax
c0014b8e:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014b93:	5a                   	pop    edx
c0014b94:	68 c8 14 02 c0       	push   0xc00214c8
c0014b99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9f:	e8 c2 87 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014ba4:	59                   	pop    ecx
c0014ba5:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014baa:	5b                   	pop    ebx
c0014bab:	68 8e 13 02 c0       	push   0xc002138e
c0014bb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb6:	e8 ab 87 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014bbb:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014bc0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014bc6:	e8 5d 9d 00 00       	call   c001e928 <CPU::readCR0()>
c0014bcb:	5a                   	pop    edx
c0014bcc:	59                   	pop    ecx
c0014bcd:	50                   	push   eax
c0014bce:	53                   	push   ebx
c0014bcf:	e8 b8 87 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0014bd4:	5b                   	pop    ebx
c0014bd5:	58                   	pop    eax
c0014bd6:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014bdb:	68 98 13 02 c0       	push   0xc0021398
c0014be0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be6:	e8 7b 87 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014beb:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014bf0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014bf6:	e8 1b a0 00 00       	call   c001ec16 <CPU::readCR2()>
c0014bfb:	5a                   	pop    edx
c0014bfc:	59                   	pop    ecx
c0014bfd:	50                   	push   eax
c0014bfe:	53                   	push   ebx
c0014bff:	e8 88 87 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0014c04:	5b                   	pop    ebx
c0014c05:	58                   	pop    eax
c0014c06:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014c0b:	68 a2 13 02 c0       	push   0xc00213a2
c0014c10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c16:	e8 4b 87 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014c1b:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014c20:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014c26:	e8 8a 99 00 00       	call   c001e5b5 <CPU::readCR3()>
c0014c2b:	5a                   	pop    edx
c0014c2c:	59                   	pop    ecx
c0014c2d:	50                   	push   eax
c0014c2e:	53                   	push   ebx
c0014c2f:	e8 58 87 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0014c34:	5b                   	pop    ebx
c0014c35:	58                   	pop    eax
c0014c36:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014c3b:	68 b5 13 02 c0       	push   0xc00213b5
c0014c40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c46:	e8 1b 87 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014c4b:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014c50:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014c56:	e8 97 9f 00 00       	call   c001ebf2 <CPU::readCR4()>
c0014c5b:	5a                   	pop    edx
c0014c5c:	59                   	pop    ecx
c0014c5d:	50                   	push   eax
c0014c5e:	53                   	push   ebx
c0014c5f:	e8 28 87 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0014c64:	5b                   	pop    ebx
c0014c65:	58                   	pop    eax
c0014c66:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014c6b:	68 bf 13 02 c0       	push   0xc00213bf
c0014c70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c76:	e8 eb 86 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014c7b:	5a                   	pop    edx
c0014c7c:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014c81:	59                   	pop    ecx
c0014c82:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014c88:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c8b:	50                   	push   eax
c0014c8c:	e8 fb 86 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0014c91:	5b                   	pop    ebx
c0014c92:	58                   	pop    eax
c0014c93:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014c98:	68 d6 13 02 c0       	push   0xc00213d6
c0014c9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca3:	e8 be 86 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014ca8:	5a                   	pop    edx
c0014ca9:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014cae:	59                   	pop    ecx
c0014caf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014cb5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cb8:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014cbb:	50                   	push   eax
c0014cbc:	e8 cb 86 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0014cc1:	5b                   	pop    ebx
c0014cc2:	58                   	pop    eax
c0014cc3:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014cc8:	68 d6 13 02 c0       	push   0xc00213d6
c0014ccd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd3:	e8 8e 86 ff ff       	call   c000d366 <VgaText::puts(char const*)>
c0014cd8:	59                   	pop    ecx
c0014cd9:	a1 f4 46 02 c0       	mov    eax,ds:0xc00246f4
c0014cde:	5b                   	pop    ebx
c0014cdf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014ce5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014ce8:	8b 12                	mov    edx,DWORD PTR [edx]
c0014cea:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014ced:	50                   	push   eax
c0014cee:	e8 99 86 ff ff       	call   c000d38c <VgaText::putx(unsigned int)>
c0014cf3:	83 c4 10             	add    esp,0x10
c0014cf6:	b2 fe                	mov    dl,0xfe
c0014cf8:	e4 60                	in     al,0x60
c0014cfa:	3c 1c                	cmp    al,0x1c
c0014cfc:	74 04                	je     c0014d02 <Krnl::panic(char const*)+0x31e>
c0014cfe:	3c 5a                	cmp    al,0x5a
c0014d00:	75 f6                	jne    c0014cf8 <Krnl::panic(char const*)+0x314>
c0014d02:	e4 64                	in     al,0x64
c0014d04:	a8 02                	test   al,0x2
c0014d06:	75 fa                	jne    c0014d02 <Krnl::panic(char const*)+0x31e>
c0014d08:	88 d0                	mov    al,dl
c0014d0a:	e6 64                	out    0x64,al
c0014d0c:	fa                   	cli    
c0014d0d:	f4                   	hlt    
c0014d0e:	eb e8                	jmp    c0014cf8 <Krnl::panic(char const*)+0x314>

c0014d10 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014d10:	55                   	push   ebp
c0014d11:	57                   	push   edi
c0014d12:	56                   	push   esi
c0014d13:	53                   	push   ebx
c0014d14:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014d1a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014d21:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014d23:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014d26:	80 fb 40             	cmp    bl,0x40
c0014d29:	75 1b                	jne    c0014d46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014d2b:	8a 16                	mov    dl,BYTE PTR [esi]
c0014d2d:	84 d2                	test   dl,dl
c0014d2f:	0f 84 f1 00 00 00    	je     c0014e26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d35:	8d 46 01             	lea    eax,[esi+0x1]
c0014d38:	80 fa 3a             	cmp    dl,0x3a
c0014d3b:	74 04                	je     c0014d41 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014d3d:	89 c6                	mov    esi,eax
c0014d3f:	eb ea                	jmp    c0014d2b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014d41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014d44:	89 c6                	mov    esi,eax
c0014d46:	50                   	push   eax
c0014d47:	6a 40                	push   0x40
c0014d49:	6a 00                	push   0x0
c0014d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d4f:	50                   	push   eax
c0014d50:	e8 b3 b8 fe ff       	call   c0000608 <memset>
c0014d55:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014d5c:	31 c0                	xor    eax,eax
c0014d5e:	83 c4 10             	add    esp,0x10
c0014d61:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014d63:	84 c9                	test   cl,cl
c0014d65:	0f 84 bb 00 00 00    	je     c0014e26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d6b:	3d c7 00 00 00       	cmp    eax,0xc7
c0014d70:	0f 8f b0 00 00 00    	jg     c0014e26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d76:	80 f9 0a             	cmp    cl,0xa
c0014d79:	0f 85 98 00 00 00    	jne    c0014e17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014d7f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014d84:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014d88:	a8 df                	test   al,0xdf
c0014d8a:	0f 94 c1             	sete   cl
c0014d8d:	3c 23                	cmp    al,0x23
c0014d8f:	0f 94 c2             	sete   dl
c0014d92:	08 d1                	or     cl,dl
c0014d94:	75 4a                	jne    c0014de0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d96:	8d 50 f7             	lea    edx,[eax-0x9]
c0014d99:	80 fa 01             	cmp    dl,0x1
c0014d9c:	76 42                	jbe    c0014de0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d9e:	3c 5b                	cmp    al,0x5b
c0014da0:	75 42                	jne    c0014de4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014da2:	80 fb 40             	cmp    bl,0x40
c0014da5:	75 39                	jne    c0014de0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014da7:	83 ec 0c             	sub    esp,0xc
c0014daa:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014dae:	52                   	push   edx
c0014daf:	e8 71 b8 fe ff       	call   c0000625 <strlen>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	83 f8 3f             	cmp    eax,0x3f
c0014dba:	77 6a                	ja     c0014e26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014dbc:	50                   	push   eax
c0014dbd:	50                   	push   eax
c0014dbe:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014dc2:	52                   	push   edx
c0014dc3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014dc7:	52                   	push   edx
c0014dc8:	e8 da b8 fe ff       	call   c00006a7 <strcpy>
c0014dcd:	58                   	pop    eax
c0014dce:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014dd2:	52                   	push   edx
c0014dd3:	e8 4d b8 fe ff       	call   c0000625 <strlen>
c0014dd8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014ddd:	83 c4 10             	add    esp,0x10
c0014de0:	31 d2                	xor    edx,edx
c0014de2:	eb 3a                	jmp    c0014e1e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014de4:	80 fb 40             	cmp    bl,0x40
c0014de7:	74 06                	je     c0014def <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014de9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014ded:	eb 20                	jmp    c0014e0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014def:	50                   	push   eax
c0014df0:	50                   	push   eax
c0014df1:	55                   	push   ebp
c0014df2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014df6:	50                   	push   eax
c0014df7:	e8 fc b8 fe ff       	call   c00006f8 <strcmp>
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	85 c0                	test   eax,eax
c0014e01:	75 dd                	jne    c0014de0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e03:	eb e4                	jmp    c0014de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014e05:	8d 50 01             	lea    edx,[eax+0x1]
c0014e08:	80 f9 3d             	cmp    cl,0x3d
c0014e0b:	74 1d                	je     c0014e2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014e0d:	89 d0                	mov    eax,edx
c0014e0f:	8a 08                	mov    cl,BYTE PTR [eax]
c0014e11:	84 c9                	test   cl,cl
c0014e13:	75 f0                	jne    c0014e05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014e15:	eb 0f                	jmp    c0014e26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014e17:	8d 50 01             	lea    edx,[eax+0x1]
c0014e1a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014e1e:	47                   	inc    edi
c0014e1f:	89 d0                	mov    eax,edx
c0014e21:	e9 3b ff ff ff       	jmp    c0014d61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014e26:	31 c0                	xor    eax,eax
c0014e28:	eb 33                	jmp    c0014e5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014e2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e2e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014e31:	50                   	push   eax
c0014e32:	50                   	push   eax
c0014e33:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014e37:	50                   	push   eax
c0014e38:	56                   	push   esi
c0014e39:	e8 ba b8 fe ff       	call   c00006f8 <strcmp>
c0014e3e:	83 c4 10             	add    esp,0x10
c0014e41:	85 c0                	test   eax,eax
c0014e43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e47:	75 97                	jne    c0014de0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014e49:	51                   	push   ecx
c0014e4a:	51                   	push   ecx
c0014e4b:	52                   	push   edx
c0014e4c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014e53:	e8 4f b8 fe ff       	call   c00006a7 <strcpy>
c0014e58:	83 c4 10             	add    esp,0x10
c0014e5b:	b0 01                	mov    al,0x1
c0014e5d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e63:	5b                   	pop    ebx
c0014e64:	5e                   	pop    esi
c0014e65:	5f                   	pop    edi
c0014e66:	5d                   	pop    ebp
c0014e67:	c3                   	ret    

c0014e68 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014e68:	57                   	push   edi
c0014e69:	56                   	push   esi
c0014e6a:	53                   	push   ebx
c0014e6b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0014e71:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0014e78:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0014e7f:	53                   	push   ebx
c0014e80:	e8 a0 b7 fe ff       	call   c0000625 <strlen>
c0014e85:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e88:	89 c7                	mov    edi,eax
c0014e8a:	e8 96 b7 fe ff       	call   c0000625 <strlen>
c0014e8f:	83 c4 10             	add    esp,0x10
c0014e92:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014e96:	31 ff                	xor    edi,edi
c0014e98:	3d ff 00 00 00       	cmp    eax,0xff
c0014e9d:	0f 87 18 01 00 00    	ja     c0014fbb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014ea3:	51                   	push   ecx
c0014ea4:	51                   	push   ecx
c0014ea5:	56                   	push   esi
c0014ea6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0014eaa:	56                   	push   esi
c0014eab:	e8 f7 b7 fe ff       	call   c00006a7 <strcpy>
c0014eb0:	58                   	pop    eax
c0014eb1:	5a                   	pop    edx
c0014eb2:	68 68 19 02 c0       	push   0xc0021968
c0014eb7:	56                   	push   esi
c0014eb8:	e8 a1 b8 fe ff       	call   c000075e <strcat>
c0014ebd:	59                   	pop    ecx
c0014ebe:	58                   	pop    eax
c0014ebf:	53                   	push   ebx
c0014ec0:	56                   	push   esi
c0014ec1:	e8 98 b8 fe ff       	call   c000075e <strcat>
c0014ec6:	58                   	pop    eax
c0014ec7:	5a                   	pop    edx
c0014ec8:	68 ee 14 02 c0       	push   0xc00214ee
c0014ecd:	56                   	push   esi
c0014ece:	e8 8b b8 fe ff       	call   c000075e <strcat>
c0014ed3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014eda:	e8 81 9d ff ff       	call   c000ec60 <operator new(unsigned long)>
c0014edf:	83 c4 0c             	add    esp,0xc
c0014ee2:	89 c3                	mov    ebx,eax
c0014ee4:	ff 35 f4 46 02 c0    	push   DWORD PTR ds:0xc00246f4
c0014eea:	56                   	push   esi
c0014eeb:	50                   	push   eax
c0014eec:	e8 8d a3 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0014ef1:	59                   	pop    ecx
c0014ef2:	5e                   	pop    esi
c0014ef3:	6a 01                	push   0x1
c0014ef5:	53                   	push   ebx
c0014ef6:	e8 e7 a3 ff ff       	call   c000f2e2 <File::open(FileOpenMode)>
c0014efb:	83 c4 10             	add    esp,0x10
c0014efe:	85 c0                	test   eax,eax
c0014f00:	74 08                	je     c0014f0a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0014f02:	83 ec 0c             	sub    esp,0xc
c0014f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f07:	53                   	push   ebx
c0014f08:	eb 2e                	jmp    c0014f38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0014f0a:	52                   	push   edx
c0014f0b:	8d 44 24 07          	lea    eax,[esp+0x7]
c0014f0f:	50                   	push   eax
c0014f10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014f14:	50                   	push   eax
c0014f15:	53                   	push   ebx
c0014f16:	e8 73 a6 ff ff       	call   c000f58e <File::stat(unsigned long long*, bool*)>
c0014f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f1f:	83 c4 10             	add    esp,0x10
c0014f22:	89 c1                	mov    ecx,eax
c0014f24:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0014f28:	75 13                	jne    c0014f3d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0014f2a:	83 ec 0c             	sub    esp,0xc
c0014f2d:	53                   	push   ebx
c0014f2e:	e8 0d a4 ff ff       	call   c000f340 <File::close()>
c0014f33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f3b:	eb 7b                	jmp    c0014fb8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0014f3d:	83 ec 0c             	sub    esp,0xc
c0014f40:	50                   	push   eax
c0014f41:	e8 d8 6c ff ff       	call   c000bc1e <malloc>
c0014f46:	89 c6                	mov    esi,eax
c0014f48:	58                   	pop    eax
c0014f49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0014f4f:	52                   	push   edx
c0014f50:	56                   	push   esi
c0014f51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f59:	53                   	push   ebx
c0014f5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f5d:	83 c4 20             	add    esp,0x20
c0014f60:	85 c0                	test   eax,eax
c0014f62:	75 0a                	jne    c0014f6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f68:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014f6c:	74 18                	je     c0014f86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0014f6e:	83 ec 0c             	sub    esp,0xc
c0014f71:	31 ff                	xor    edi,edi
c0014f73:	53                   	push   ebx
c0014f74:	e8 c7 a3 ff ff       	call   c000f340 <File::close()>
c0014f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f81:	83 c4 10             	add    esp,0x10
c0014f84:	eb 35                	jmp    c0014fbb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014f86:	83 ec 0c             	sub    esp,0xc
c0014f89:	53                   	push   ebx
c0014f8a:	e8 b1 a3 ff ff       	call   c000f340 <File::close()>
c0014f8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f97:	83 c4 0c             	add    esp,0xc
c0014f9a:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014fa1:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014fa8:	56                   	push   esi
c0014fa9:	e8 62 fd ff ff       	call   c0014d10 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014fae:	89 34 24             	mov    DWORD PTR [esp],esi
c0014fb1:	89 c7                	mov    edi,eax
c0014fb3:	e8 76 6c ff ff       	call   c000bc2e <free>
c0014fb8:	83 c4 10             	add    esp,0x10
c0014fbb:	81 c4 10 01 00 00    	add    esp,0x110
c0014fc1:	89 f8                	mov    eax,edi
c0014fc3:	5b                   	pop    ebx
c0014fc4:	5e                   	pop    esi
c0014fc5:	5f                   	pop    edi
c0014fc6:	c3                   	ret    

c0014fc7 <Reg::getLine(char*, char*, char*)>:
c0014fc7:	57                   	push   edi
c0014fc8:	56                   	push   esi
c0014fc9:	53                   	push   ebx
c0014fca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014fd2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014fd6:	57                   	push   edi
c0014fd7:	56                   	push   esi
c0014fd8:	53                   	push   ebx
c0014fd9:	68 f3 14 02 c0       	push   0xc00214f3
c0014fde:	e8 85 fe ff ff       	call   c0014e68 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014fe3:	83 c4 10             	add    esp,0x10
c0014fe6:	84 c0                	test   al,al
c0014fe8:	75 10                	jne    c0014ffa <Reg::getLine(char*, char*, char*)+0x33>
c0014fea:	57                   	push   edi
c0014feb:	56                   	push   esi
c0014fec:	53                   	push   ebx
c0014fed:	68 18 15 02 c0       	push   0xc0021518
c0014ff2:	e8 71 fe ff ff       	call   c0014e68 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	5b                   	pop    ebx
c0014ffb:	5e                   	pop    esi
c0014ffc:	5f                   	pop    edi
c0014ffd:	c3                   	ret    

c0014ffe <Reg::readInt(char*, char*, int*)>:
c0014ffe:	55                   	push   ebp
c0014fff:	57                   	push   edi
c0015000:	56                   	push   esi
c0015001:	53                   	push   ebx
c0015002:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015008:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001500c:	57                   	push   edi
c001500d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015014:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001501b:	e8 a7 ff ff ff       	call   c0014fc7 <Reg::getLine(char*, char*, char*)>
c0015020:	83 c4 10             	add    esp,0x10
c0015023:	84 c0                	test   al,al
c0015025:	0f 84 b3 00 00 00    	je     c00150de <Reg::readInt(char*, char*, int*)+0xe0>
c001502b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001502f:	80 fa 2b             	cmp    dl,0x2b
c0015032:	74 0c                	je     c0015040 <Reg::readInt(char*, char*, int*)+0x42>
c0015034:	80 fa 2d             	cmp    dl,0x2d
c0015037:	75 0e                	jne    c0015047 <Reg::readInt(char*, char*, int*)+0x49>
c0015039:	ba 01 00 00 00       	mov    edx,0x1
c001503e:	eb 0b                	jmp    c001504b <Reg::readInt(char*, char*, int*)+0x4d>
c0015040:	ba 01 00 00 00       	mov    edx,0x1
c0015045:	eb 02                	jmp    c0015049 <Reg::readInt(char*, char*, int*)+0x4b>
c0015047:	31 d2                	xor    edx,edx
c0015049:	31 c0                	xor    eax,eax
c001504b:	be 0a 00 00 00       	mov    esi,0xa
c0015050:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015055:	75 20                	jne    c0015077 <Reg::readInt(char*, char*, int*)+0x79>
c0015057:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001505b:	80 f9 78             	cmp    cl,0x78
c001505e:	75 0a                	jne    c001506a <Reg::readInt(char*, char*, int*)+0x6c>
c0015060:	83 c2 02             	add    edx,0x2
c0015063:	be 10 00 00 00       	mov    esi,0x10
c0015068:	eb 0d                	jmp    c0015077 <Reg::readInt(char*, char*, int*)+0x79>
c001506a:	80 f9 62             	cmp    cl,0x62
c001506d:	75 08                	jne    c0015077 <Reg::readInt(char*, char*, int*)+0x79>
c001506f:	83 c2 02             	add    edx,0x2
c0015072:	be 02 00 00 00       	mov    esi,0x2
c0015077:	01 d7                	add    edi,edx
c0015079:	31 d2                	xor    edx,edx
c001507b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001507d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015081:	80 fb 0d             	cmp    bl,0xd
c0015084:	0f 94 c3             	sete   bl
c0015087:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001508c:	0f 94 c1             	sete   cl
c001508f:	08 cb                	or     bl,cl
c0015091:	75 3a                	jne    c00150cd <Reg::readInt(char*, char*, int*)+0xcf>
c0015093:	0f af d6             	imul   edx,esi
c0015096:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001509b:	83 fe 10             	cmp    esi,0x10
c001509e:	75 26                	jne    c00150c6 <Reg::readInt(char*, char*, int*)+0xc8>
c00150a0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00150a4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00150a7:	89 e9                	mov    ecx,ebp
c00150a9:	80 f9 05             	cmp    cl,0x5
c00150ac:	77 06                	ja     c00150b4 <Reg::readInt(char*, char*, int*)+0xb6>
c00150ae:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00150b2:	eb 16                	jmp    c00150ca <Reg::readInt(char*, char*, int*)+0xcc>
c00150b4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00150b8:	83 e9 61             	sub    ecx,0x61
c00150bb:	80 f9 05             	cmp    cl,0x5
c00150be:	77 06                	ja     c00150c6 <Reg::readInt(char*, char*, int*)+0xc8>
c00150c0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00150c4:	eb 04                	jmp    c00150ca <Reg::readInt(char*, char*, int*)+0xcc>
c00150c6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00150ca:	47                   	inc    edi
c00150cb:	eb ae                	jmp    c001507b <Reg::readInt(char*, char*, int*)+0x7d>
c00150cd:	84 c0                	test   al,al
c00150cf:	74 02                	je     c00150d3 <Reg::readInt(char*, char*, int*)+0xd5>
c00150d1:	f7 da                	neg    edx
c00150d3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00150da:	89 10                	mov    DWORD PTR [eax],edx
c00150dc:	88 d8                	mov    al,bl
c00150de:	81 c4 ec 00 00 00    	add    esp,0xec
c00150e4:	5b                   	pop    ebx
c00150e5:	5e                   	pop    esi
c00150e6:	5f                   	pop    edi
c00150e7:	5d                   	pop    ebp
c00150e8:	c3                   	ret    

c00150e9 <Reg::readString(char*, char*, char*, int)>:
c00150e9:	57                   	push   edi
c00150ea:	56                   	push   esi
c00150eb:	53                   	push   ebx
c00150ec:	81 ec d4 00 00 00    	sub    esp,0xd4
c00150f2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00150f9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00150fd:	57                   	push   edi
c00150fe:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015105:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001510c:	e8 b6 fe ff ff       	call   c0014fc7 <Reg::getLine(char*, char*, char*)>
c0015111:	83 c4 10             	add    esp,0x10
c0015114:	89 c6                	mov    esi,eax
c0015116:	84 c0                	test   al,al
c0015118:	74 44                	je     c001515e <Reg::readString(char*, char*, char*, int)+0x75>
c001511a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015121:	31 c0                	xor    eax,eax
c0015123:	4a                   	dec    edx
c0015124:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015127:	84 c9                	test   cl,cl
c0015129:	74 0f                	je     c001513a <Reg::readString(char*, char*, char*, int)+0x51>
c001512b:	39 c2                	cmp    edx,eax
c001512d:	7e 0b                	jle    c001513a <Reg::readString(char*, char*, char*, int)+0x51>
c001512f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015132:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015137:	40                   	inc    eax
c0015138:	eb ea                	jmp    c0015124 <Reg::readString(char*, char*, char*, int)+0x3b>
c001513a:	83 ec 0c             	sub    esp,0xc
c001513d:	53                   	push   ebx
c001513e:	e8 e2 b4 fe ff       	call   c0000625 <strlen>
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001514b:	75 11                	jne    c001515e <Reg::readString(char*, char*, char*, int)+0x75>
c001514d:	83 ec 0c             	sub    esp,0xc
c0015150:	53                   	push   ebx
c0015151:	e8 cf b4 fe ff       	call   c0000625 <strlen>
c0015156:	83 c4 10             	add    esp,0x10
c0015159:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001515e:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015164:	89 f0                	mov    eax,esi
c0015166:	5b                   	pop    ebx
c0015167:	5e                   	pop    esi
c0015168:	5f                   	pop    edi
c0015169:	c3                   	ret    

c001516a <Reg::readBool(char*, char*, bool*)>:
c001516a:	83 ec 20             	sub    esp,0x20
c001516d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015171:	50                   	push   eax
c0015172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001517a:	e8 7f fe ff ff       	call   c0014ffe <Reg::readInt(char*, char*, int*)>
c001517f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015184:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015188:	0f 95 02             	setne  BYTE PTR [edx]
c001518b:	83 c4 2c             	add    esp,0x2c
c001518e:	c3                   	ret    

c001518f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001518f:	53                   	push   ebx
c0015190:	83 ec 1c             	sub    esp,0x1c
c0015193:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015197:	8d 44 24 13          	lea    eax,[esp+0x13]
c001519b:	50                   	push   eax
c001519c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151a4:	e8 c1 ff ff ff       	call   c001516a <Reg::readBool(char*, char*, bool*)>
c00151a9:	83 c4 10             	add    esp,0x10
c00151ac:	84 c0                	test   al,al
c00151ae:	74 04                	je     c00151b4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00151b0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00151b4:	88 d8                	mov    al,bl
c00151b6:	83 c4 18             	add    esp,0x18
c00151b9:	5b                   	pop    ebx
c00151ba:	c3                   	ret    

c00151bb <Reg::readIntWithDefault(char*, char*, int)>:
c00151bb:	53                   	push   ebx
c00151bc:	83 ec 1c             	sub    esp,0x1c
c00151bf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00151c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151c7:	50                   	push   eax
c00151c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151d0:	e8 29 fe ff ff       	call   c0014ffe <Reg::readInt(char*, char*, int*)>
c00151d5:	83 c4 10             	add    esp,0x10
c00151d8:	84 c0                	test   al,al
c00151da:	74 04                	je     c00151e0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00151dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00151e0:	89 d8                	mov    eax,ebx
c00151e2:	83 c4 18             	add    esp,0x18
c00151e5:	5b                   	pop    ebx
c00151e6:	c3                   	ret    

c00151e7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00151e7:	56                   	push   esi
c00151e8:	53                   	push   ebx
c00151e9:	51                   	push   ecx
c00151ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00151ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00151f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151f6:	56                   	push   esi
c00151f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151ff:	e8 e5 fe ff ff       	call   c00150e9 <Reg::readString(char*, char*, char*, int)>
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	84 c0                	test   al,al
c0015209:	74 02                	je     c001520d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001520b:	89 f3                	mov    ebx,esi
c001520d:	89 d8                	mov    eax,ebx
c001520f:	5a                   	pop    edx
c0015210:	5b                   	pop    ebx
c0015211:	5e                   	pop    esi
c0015212:	c3                   	ret    

c0015213 <Sys::exit(regs*)>:
c0015213:	83 ec 18             	sub    esp,0x18
c0015216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001521a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001521d:	e8 24 31 00 00       	call   c0018346 <terminateTask(int)>
c0015222:	83 c8 ff             	or     eax,0xffffffff
c0015225:	83 c4 1c             	add    esp,0x1c
c0015228:	89 c2                	mov    edx,eax
c001522a:	c3                   	ret    

c001522b <Sys::loadDLL(regs*)>:
c001522b:	56                   	push   esi
c001522c:	53                   	push   ebx
c001522d:	31 d2                	xor    edx,edx
c001522f:	51                   	push   ecx
c0015230:	b8 01 00 00 00       	mov    eax,0x1
c0015235:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015239:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001523d:	74 7d                	je     c00152bc <Sys::loadDLL(regs*)+0x91>
c001523f:	83 ec 0c             	sub    esp,0xc
c0015242:	68 14 01 00 00       	push   0x114
c0015247:	e8 14 9a ff ff       	call   c000ec60 <operator new(unsigned long)>
c001524c:	83 c4 0c             	add    esp,0xc
c001524f:	89 c3                	mov    ebx,eax
c0015251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015256:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015259:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001525c:	53                   	push   ebx
c001525d:	e8 1c a0 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0015262:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015265:	e8 e6 a2 ff ff       	call   c000f550 <File::exists()>
c001526a:	83 c4 10             	add    esp,0x10
c001526d:	84 c0                	test   al,al
c001526f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015271:	75 11                	jne    c0015284 <Sys::loadDLL(regs*)+0x59>
c0015273:	83 ec 0c             	sub    esp,0xc
c0015276:	53                   	push   ebx
c0015277:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001527a:	83 c4 10             	add    esp,0x10
c001527d:	b8 03 00 00 00       	mov    eax,0x3
c0015282:	eb 36                	jmp    c00152ba <Sys::loadDLL(regs*)+0x8f>
c0015284:	83 ec 0c             	sub    esp,0xc
c0015287:	53                   	push   ebx
c0015288:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001528b:	58                   	pop    eax
c001528c:	5a                   	pop    edx
c001528d:	6a 00                	push   0x0
c001528f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015292:	e8 3b 21 00 00       	call   c00173d2 <Thr::loadDLL(char const*, bool)>
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	89 c1                	mov    ecx,eax
c001529c:	31 d2                	xor    edx,edx
c001529e:	b8 04 00 00 00       	mov    eax,0x4
c00152a3:	85 c9                	test   ecx,ecx
c00152a5:	74 15                	je     c00152bc <Sys::loadDLL(regs*)+0x91>
c00152a7:	53                   	push   ebx
c00152a8:	53                   	push   ebx
c00152a9:	ff 35 a8 32 02 c0    	push   DWORD PTR ds:0xc00232a8
c00152af:	51                   	push   ecx
c00152b0:	e8 70 22 00 00       	call   c0017525 <Thr::executeDLL(unsigned long, void*)>
c00152b5:	83 c4 10             	add    esp,0x10
c00152b8:	31 c0                	xor    eax,eax
c00152ba:	31 d2                	xor    edx,edx
c00152bc:	59                   	pop    ecx
c00152bd:	5b                   	pop    ebx
c00152be:	5e                   	pop    esi
c00152bf:	c3                   	ret    

c00152c0 <Sys::read(regs*)>:
c00152c0:	57                   	push   edi
c00152c1:	56                   	push   esi
c00152c2:	53                   	push   ebx
c00152c3:	83 ec 10             	sub    esp,0x10
c00152c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00152cd:	83 f8 02             	cmp    eax,0x2
c00152d0:	77 10                	ja     c00152e2 <Sys::read(regs*)+0x22>
c00152d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152d7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152da:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00152e0:	eb 0e                	jmp    c00152f0 <Sys::read(regs*)+0x30>
c00152e2:	83 ec 0c             	sub    esp,0xc
c00152e5:	50                   	push   eax
c00152e6:	e8 86 89 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c00152eb:	83 c4 10             	add    esp,0x10
c00152ee:	89 c1                	mov    ecx,eax
c00152f0:	83 c8 ff             	or     eax,0xffffffff
c00152f3:	85 c9                	test   ecx,ecx
c00152f5:	89 c2                	mov    edx,eax
c00152f7:	74 28                	je     c0015321 <Sys::read(regs*)+0x61>
c00152f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015301:	31 ff                	xor    edi,edi
c0015303:	83 ec 0c             	sub    esp,0xc
c0015306:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015308:	8d 54 24 18          	lea    edx,[esp+0x18]
c001530c:	52                   	push   edx
c001530d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015310:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015313:	57                   	push   edi
c0015314:	56                   	push   esi
c0015315:	51                   	push   ecx
c0015316:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015319:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001531d:	83 c4 20             	add    esp,0x20
c0015320:	99                   	cdq    
c0015321:	83 c4 10             	add    esp,0x10
c0015324:	5b                   	pop    ebx
c0015325:	5e                   	pop    esi
c0015326:	5f                   	pop    edi
c0015327:	c3                   	ret    

c0015328 <Sys::sbrk(regs*)>:
c0015328:	56                   	push   esi
c0015329:	53                   	push   ebx
c001532a:	83 ec 0c             	sub    esp,0xc
c001532d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015336:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015339:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001533f:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
c0015342:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015345:	68 33 15 02 c0       	push   0xc0021533
c001534a:	e8 00 9a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001534f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	85 c9                	test   ecx,ecx
c0015357:	74 02                	je     c001535b <Sys::sbrk(regs*)+0x33>
c0015359:	79 06                	jns    c0015361 <Sys::sbrk(regs*)+0x39>
c001535b:	89 f0                	mov    eax,esi
c001535d:	31 d2                	xor    edx,edx
c001535f:	eb 37                	jmp    c0015398 <Sys::sbrk(regs*)+0x70>
c0015361:	83 c8 ff             	or     eax,0xffffffff
c0015364:	81 f9 00 00 00 04    	cmp    ecx,0x4000000
c001536a:	89 c2                	mov    edx,eax
c001536c:	77 2a                	ja     c0015398 <Sys::sbrk(regs*)+0x70>
c001536e:	8d 91 ff 0f 00 00    	lea    edx,[ecx+0xfff]
c0015374:	c1 ea 0c             	shr    edx,0xc
c0015377:	53                   	push   ebx
c0015378:	68 07 04 00 00       	push   0x407
c001537d:	52                   	push   edx
c001537e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015383:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015386:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001538c:	e8 bf 91 ff ff       	call   c000e550 <VAS::allocatePages(int, int)>
c0015391:	89 f0                	mov    eax,esi
c0015393:	31 d2                	xor    edx,edx
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	59                   	pop    ecx
c0015399:	5b                   	pop    ebx
c001539a:	5e                   	pop    esi
c001539b:	c3                   	ret    

c001539c <Sys::write(regs*)>:
c001539c:	57                   	push   edi
c001539d:	56                   	push   esi
c001539e:	53                   	push   ebx
c001539f:	83 ec 18             	sub    esp,0x18
c00153a2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00153a6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00153a9:	68 4f 15 02 c0       	push   0xc002154f
c00153ae:	e8 9c 99 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c00153ba:	77 10                	ja     c00153cc <Sys::write(regs*)+0x30>
c00153bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153c4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00153ca:	eb 1b                	jmp    c00153e7 <Sys::write(regs*)+0x4b>
c00153cc:	83 ec 0c             	sub    esp,0xc
c00153cf:	68 6e 15 02 c0       	push   0xc002156e
c00153d4:	e8 76 99 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00153d9:	58                   	pop    eax
c00153da:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00153dd:	e8 8f 88 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c00153e2:	83 c4 10             	add    esp,0x10
c00153e5:	89 c1                	mov    ecx,eax
c00153e7:	83 c8 ff             	or     eax,0xffffffff
c00153ea:	85 c9                	test   ecx,ecx
c00153ec:	89 c2                	mov    edx,eax
c00153ee:	74 28                	je     c0015418 <Sys::write(regs*)+0x7c>
c00153f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00153f8:	31 ff                	xor    edi,edi
c00153fa:	83 ec 0c             	sub    esp,0xc
c00153fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00153ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015403:	52                   	push   edx
c0015404:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015407:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001540a:	57                   	push   edi
c001540b:	56                   	push   esi
c001540c:	51                   	push   ecx
c001540d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015410:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015414:	83 c4 20             	add    esp,0x20
c0015417:	99                   	cdq    
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	5b                   	pop    ebx
c001541c:	5e                   	pop    esi
c001541d:	5f                   	pop    edi
c001541e:	c3                   	ret    

c001541f <Sys::yield(regs*)>:
c001541f:	83 ec 0c             	sub    esp,0xc
c0015422:	e8 09 25 00 00       	call   c0017930 <lockScheduler()>
c0015427:	e8 38 28 00 00       	call   c0017c64 <schedule()>
c001542c:	e8 01 25 00 00       	call   c0017932 <unlockScheduler()>
c0015431:	31 c0                	xor    eax,eax
c0015433:	31 d2                	xor    edx,edx
c0015435:	83 c4 0c             	add    esp,0xc
c0015438:	c3                   	ret    

c0015439 <sysCallGetPID(regs*)>:
c0015439:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001543e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015441:	8b 00                	mov    eax,DWORD PTR [eax]
c0015443:	99                   	cdq    
c0015444:	c3                   	ret    

c0015445 <sysCallSeekDir(regs*)>:
c0015445:	31 c0                	xor    eax,eax
c0015447:	31 d2                	xor    edx,edx
c0015449:	c3                   	ret    

c001544a <sysCallTellDir(regs*)>:
c001544a:	31 c0                	xor    eax,eax
c001544c:	31 d2                	xor    edx,edx
c001544e:	c3                   	ret    

c001544f <sysCallVerify(regs*)>:
c001544f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015453:	31 d2                	xor    edx,edx
c0015455:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015458:	c3                   	ret    

c0015459 <sysCallFork(regs*)>:
c0015459:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001545e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015463:	c3                   	ret    

c0015464 <sysCallExecve(regs*)>:
c0015464:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015469:	ba ff ff ff ff       	mov    edx,0xffffffff
c001546e:	c3                   	ret    

c001546f <sysFormatDisk(regs*)>:
c001546f:	56                   	push   esi
c0015470:	53                   	push   ebx
c0015471:	53                   	push   ebx
c0015472:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015476:	8b 1d 08 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023408
c001547c:	eb 25                	jmp    c00154a3 <sysFormatDisk(regs*)+0x34>
c001547e:	83 ec 0c             	sub    esp,0xc
c0015481:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015484:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015486:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015489:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001548c:	50                   	push   eax
c001548d:	ff 34 85 a0 38 02 c0 	push   DWORD PTR [eax*4-0x3ffdc760]
c0015494:	53                   	push   ebx
c0015495:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015498:	83 c4 20             	add    esp,0x20
c001549b:	83 f8 08             	cmp    eax,0x8
c001549e:	75 12                	jne    c00154b2 <sysFormatDisk(regs*)+0x43>
c00154a0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00154a3:	85 db                	test   ebx,ebx
c00154a5:	75 d7                	jne    c001547e <sysFormatDisk(regs*)+0xf>
c00154a7:	59                   	pop    ecx
c00154a8:	b8 03 00 00 00       	mov    eax,0x3
c00154ad:	31 d2                	xor    edx,edx
c00154af:	5b                   	pop    ebx
c00154b0:	5e                   	pop    esi
c00154b1:	c3                   	ret    
c00154b2:	85 c0                	test   eax,eax
c00154b4:	74 1b                	je     c00154d1 <sysFormatDisk(regs*)+0x62>
c00154b6:	83 f8 09             	cmp    eax,0x9
c00154b9:	74 0b                	je     c00154c6 <sysFormatDisk(regs*)+0x57>
c00154bb:	59                   	pop    ecx
c00154bc:	b8 02 00 00 00       	mov    eax,0x2
c00154c1:	31 d2                	xor    edx,edx
c00154c3:	5b                   	pop    ebx
c00154c4:	5e                   	pop    esi
c00154c5:	c3                   	ret    
c00154c6:	59                   	pop    ecx
c00154c7:	b8 01 00 00 00       	mov    eax,0x1
c00154cc:	31 d2                	xor    edx,edx
c00154ce:	5b                   	pop    ebx
c00154cf:	5e                   	pop    esi
c00154d0:	c3                   	ret    
c00154d1:	59                   	pop    ecx
c00154d2:	31 c0                	xor    eax,eax
c00154d4:	31 d2                	xor    edx,edx
c00154d6:	5b                   	pop    ebx
c00154d7:	5e                   	pop    esi
c00154d8:	c3                   	ret    

c00154d9 <sysSetDiskVolumeLabel(regs*)>:
c00154d9:	56                   	push   esi
c00154da:	53                   	push   ebx
c00154db:	53                   	push   ebx
c00154dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00154e3:	83 f8 19             	cmp    eax,0x19
c00154e6:	77 29                	ja     c0015511 <sysSetDiskVolumeLabel(regs*)+0x38>
c00154e8:	8b 0c 85 a0 38 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc760]
c00154ef:	85 c9                	test   ecx,ecx
c00154f1:	74 1e                	je     c0015511 <sysSetDiskVolumeLabel(regs*)+0x38>
c00154f3:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00154f6:	85 d2                	test   edx,edx
c00154f8:	74 17                	je     c0015511 <sysSetDiskVolumeLabel(regs*)+0x38>
c00154fa:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015500:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015502:	52                   	push   edx
c0015503:	50                   	push   eax
c0015504:	51                   	push   ecx
c0015505:	53                   	push   ebx
c0015506:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	99                   	cdq    
c001550d:	59                   	pop    ecx
c001550e:	5b                   	pop    ebx
c001550f:	5e                   	pop    esi
c0015510:	c3                   	ret    
c0015511:	59                   	pop    ecx
c0015512:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015517:	ba ff ff ff ff       	mov    edx,0xffffffff
c001551c:	5b                   	pop    ebx
c001551d:	5e                   	pop    esi
c001551e:	c3                   	ret    

c001551f <sysGetDiskVolumeLabel(regs*)>:
c001551f:	57                   	push   edi
c0015520:	56                   	push   esi
c0015521:	53                   	push   ebx
c0015522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015526:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015529:	83 fa 19             	cmp    edx,0x19
c001552c:	77 34                	ja     c0015562 <sysGetDiskVolumeLabel(regs*)+0x43>
c001552e:	8b 0c 95 a0 38 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc760]
c0015535:	85 c9                	test   ecx,ecx
c0015537:	74 29                	je     c0015562 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015539:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001553c:	85 db                	test   ebx,ebx
c001553e:	74 22                	je     c0015562 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015540:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015543:	85 c0                	test   eax,eax
c0015545:	74 1b                	je     c0015562 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015547:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015552:	50                   	push   eax
c0015553:	53                   	push   ebx
c0015554:	52                   	push   edx
c0015555:	51                   	push   ecx
c0015556:	56                   	push   esi
c0015557:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001555a:	83 c4 20             	add    esp,0x20
c001555d:	99                   	cdq    
c001555e:	5b                   	pop    ebx
c001555f:	5e                   	pop    esi
c0015560:	5f                   	pop    edi
c0015561:	c3                   	ret    
c0015562:	5b                   	pop    ebx
c0015563:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015568:	ba ff ff ff ff       	mov    edx,0xffffffff
c001556d:	5e                   	pop    esi
c001556e:	5f                   	pop    edi
c001556f:	c3                   	ret    

c0015570 <sysShutdown(regs*)>:
c0015570:	83 ec 0c             	sub    esp,0xc
c0015573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015577:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001557a:	85 c0                	test   eax,eax
c001557c:	74 18                	je     c0015596 <sysShutdown(regs*)+0x26>
c001557e:	83 f8 01             	cmp    eax,0x1
c0015581:	74 38                	je     c00155bb <sysShutdown(regs*)+0x4b>
c0015583:	83 f8 02             	cmp    eax,0x2
c0015586:	74 24                	je     c00155ac <sysShutdown(regs*)+0x3c>
c0015588:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001558d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015592:	83 c4 0c             	add    esp,0xc
c0015595:	c3                   	ret    
c0015596:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c001559b:	8b 10                	mov    edx,DWORD PTR [eax]
c001559d:	6a 00                	push   0x0
c001559f:	6a 00                	push   0x0
c00155a1:	6a 00                	push   0x0
c00155a3:	50                   	push   eax
c00155a4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	eb dc                	jmp    c0015588 <sysShutdown(regs*)+0x18>
c00155ac:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c00155b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00155b3:	6a 00                	push   0x0
c00155b5:	6a 00                	push   0x0
c00155b7:	6a 01                	push   0x1
c00155b9:	eb e8                	jmp    c00155a3 <sysShutdown(regs*)+0x33>
c00155bb:	a1 20 39 02 c0       	mov    eax,ds:0xc0023920
c00155c0:	85 c0                	test   eax,eax
c00155c2:	74 02                	je     c00155c6 <sysShutdown(regs*)+0x56>
c00155c4:	ff d0                	call   eax
c00155c6:	31 c0                	xor    eax,eax
c00155c8:	31 d2                	xor    edx,edx
c00155ca:	83 c4 0c             	add    esp,0xc
c00155cd:	c3                   	ret    

c00155ce <sysCallGetCwd(regs*)>:
c00155ce:	83 ec 10             	sub    esp,0x10
c00155d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00155d5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00155d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00155db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155e3:	e8 07 a0 ff ff       	call   c000f5ef <getcwd(Process*, char*, int)>
c00155e8:	83 c4 1c             	add    esp,0x1c
c00155eb:	99                   	cdq    
c00155ec:	c3                   	ret    

c00155ed <sysCallSetCwd(regs*)>:
c00155ed:	83 ec 14             	sub    esp,0x14
c00155f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155f4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00155f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155fc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155ff:	e8 15 a0 ff ff       	call   c000f619 <setcwd(Process*, char*)>
c0015604:	83 c4 1c             	add    esp,0x1c
c0015607:	99                   	cdq    
c0015608:	c3                   	ret    

c0015609 <sysCallRealpath(regs*)>:
c0015609:	83 ec 0c             	sub    esp,0xc
c001560c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015610:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015613:	85 d2                	test   edx,edx
c0015615:	74 07                	je     c001561e <sysCallRealpath(regs*)+0x15>
c0015617:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001561a:	85 c0                	test   eax,eax
c001561c:	75 0b                	jne    c0015629 <sysCallRealpath(regs*)+0x20>
c001561e:	b8 01 00 00 00       	mov    eax,0x1
c0015623:	31 d2                	xor    edx,edx
c0015625:	83 c4 0c             	add    esp,0xc
c0015628:	c3                   	ret    
c0015629:	51                   	push   ecx
c001562a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015630:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015633:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015639:	51                   	push   ecx
c001563a:	52                   	push   edx
c001563b:	50                   	push   eax
c001563c:	e8 93 9a ff ff       	call   c000f0d4 <standardiseFiles(char*, char const*, char const*)>
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	31 c0                	xor    eax,eax
c0015646:	31 d2                	xor    edx,edx
c0015648:	83 c4 0c             	add    esp,0xc
c001564b:	c3                   	ret    

c001564c <sysCallGetArgc(regs*)>:
c001564c:	83 ec 14             	sub    esp,0x14
c001564f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015654:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015657:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001565d:	68 8d 15 02 c0       	push   0xc002158d
c0015662:	e8 e8 96 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0015667:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001566c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001566f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015675:	83 c4 1c             	add    esp,0x1c
c0015678:	99                   	cdq    
c0015679:	c3                   	ret    

c001567a <sysCallReadDir(regs*)>:
c001567a:	53                   	push   ebx
c001567b:	83 ec 18             	sub    esp,0x18
c001567e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015682:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015685:	83 f8 02             	cmp    eax,0x2
c0015688:	76 53                	jbe    c00156dd <sysCallReadDir(regs*)+0x63>
c001568a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001568d:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0015693:	77 4f                	ja     c00156e4 <sysCallReadDir(regs*)+0x6a>
c0015695:	83 ec 0c             	sub    esp,0xc
c0015698:	50                   	push   eax
c0015699:	e8 d3 85 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	85 c0                	test   eax,eax
c00156a3:	74 50                	je     c00156f5 <sysCallReadDir(regs*)+0x7b>
c00156a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00156ad:	83 ec 0c             	sub    esp,0xc
c00156b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00156b2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00156b6:	51                   	push   ecx
c00156b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00156ba:	6a 00                	push   0x0
c00156bc:	68 10 01 00 00       	push   0x110
c00156c1:	50                   	push   eax
c00156c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00156c5:	83 c4 20             	add    esp,0x20
c00156c8:	85 c0                	test   eax,eax
c00156ca:	74 38                	je     c0015704 <sysCallReadDir(regs*)+0x8a>
c00156cc:	83 f8 07             	cmp    eax,0x7
c00156cf:	74 0c                	je     c00156dd <sysCallReadDir(regs*)+0x63>
c00156d1:	b8 02 00 00 00       	mov    eax,0x2
c00156d6:	31 d2                	xor    edx,edx
c00156d8:	83 c4 18             	add    esp,0x18
c00156db:	5b                   	pop    ebx
c00156dc:	c3                   	ret    
c00156dd:	b8 01 00 00 00       	mov    eax,0x1
c00156e2:	eb f2                	jmp    c00156d6 <sysCallReadDir(regs*)+0x5c>
c00156e4:	83 ec 08             	sub    esp,0x8
c00156e7:	52                   	push   edx
c00156e8:	68 8c 16 02 c0       	push   0xc002168c
c00156ed:	e8 5d 96 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00156f2:	83 c4 10             	add    esp,0x10
c00156f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00156fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156ff:	83 c4 18             	add    esp,0x18
c0015702:	5b                   	pop    ebx
c0015703:	c3                   	ret    
c0015704:	31 c0                	xor    eax,eax
c0015706:	eb ce                	jmp    c00156d6 <sysCallReadDir(regs*)+0x5c>

c0015708 <sysCallIsATTY(regs*)>:
c0015708:	83 ec 0c             	sub    esp,0xc
c001570b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001570f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015712:	83 f8 02             	cmp    eax,0x2
c0015715:	76 07                	jbe    c001571e <sysCallIsATTY(regs*)+0x16>
c0015717:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001571c:	75 26                	jne    c0015744 <sysCallIsATTY(regs*)+0x3c>
c001571e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015723:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015726:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001572c:	85 c0                	test   eax,eax
c001572e:	74 24                	je     c0015754 <sysCallIsATTY(regs*)+0x4c>
c0015730:	83 ec 0c             	sub    esp,0xc
c0015733:	8b 10                	mov    edx,DWORD PTR [eax]
c0015735:	50                   	push   eax
c0015736:	ff 12                	call   DWORD PTR [edx]
c0015738:	31 d2                	xor    edx,edx
c001573a:	0f b6 c0             	movzx  eax,al
c001573d:	83 c4 10             	add    esp,0x10
c0015740:	83 c4 0c             	add    esp,0xc
c0015743:	c3                   	ret    
c0015744:	83 ec 0c             	sub    esp,0xc
c0015747:	50                   	push   eax
c0015748:	e8 24 85 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	85 c0                	test   eax,eax
c0015752:	75 dc                	jne    c0015730 <sysCallIsATTY(regs*)+0x28>
c0015754:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015759:	ba ff ff ff ff       	mov    edx,0xffffffff
c001575e:	83 c4 0c             	add    esp,0xc
c0015761:	c3                   	ret    

c0015762 <sysCallSeek(regs*)>:
c0015762:	53                   	push   ebx
c0015763:	83 ec 08             	sub    esp,0x8
c0015766:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001576a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001576d:	83 f8 02             	cmp    eax,0x2
c0015770:	76 4a                	jbe    c00157bc <sysCallSeek(regs*)+0x5a>
c0015772:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015777:	77 32                	ja     c00157ab <sysCallSeek(regs*)+0x49>
c0015779:	83 ec 0c             	sub    esp,0xc
c001577c:	50                   	push   eax
c001577d:	e8 ef 84 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c0015782:	83 c4 0c             	add    esp,0xc
c0015785:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015788:	31 db                	xor    ebx,ebx
c001578a:	53                   	push   ebx
c001578b:	51                   	push   ecx
c001578c:	50                   	push   eax
c001578d:	e8 0e 9c ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0015792:	83 c4 10             	add    esp,0x10
c0015795:	85 c0                	test   eax,eax
c0015797:	0f 95 c0             	setne  al
c001579a:	31 d2                	xor    edx,edx
c001579c:	0f b6 c0             	movzx  eax,al
c001579f:	f7 d8                	neg    eax
c00157a1:	83 d2 00             	adc    edx,0x0
c00157a4:	83 c4 08             	add    esp,0x8
c00157a7:	f7 da                	neg    edx
c00157a9:	5b                   	pop    ebx
c00157aa:	c3                   	ret    
c00157ab:	83 ec 08             	sub    esp,0x8
c00157ae:	50                   	push   eax
c00157af:	68 98 15 02 c0       	push   0xc0021598
c00157b4:	e8 96 95 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00157b9:	83 c4 10             	add    esp,0x10
c00157bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157c6:	83 c4 08             	add    esp,0x8
c00157c9:	5b                   	pop    ebx
c00157ca:	c3                   	ret    

c00157cb <sysCallTell(regs*)>:
c00157cb:	53                   	push   ebx
c00157cc:	83 ec 08             	sub    esp,0x8
c00157cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00157d6:	83 f8 02             	cmp    eax,0x2
c00157d9:	76 5e                	jbe    c0015839 <sysCallTell(regs*)+0x6e>
c00157db:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00157e0:	77 2d                	ja     c001580f <sysCallTell(regs*)+0x44>
c00157e2:	83 ec 0c             	sub    esp,0xc
c00157e5:	50                   	push   eax
c00157e6:	e8 86 84 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c00157eb:	5a                   	pop    edx
c00157ec:	59                   	pop    ecx
c00157ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00157f0:	50                   	push   eax
c00157f1:	e8 00 9c ff ff       	call   c000f3f6 <File::tell(unsigned long long*)>
c00157f6:	83 c4 10             	add    esp,0x10
c00157f9:	85 c0                	test   eax,eax
c00157fb:	0f 95 c0             	setne  al
c00157fe:	31 d2                	xor    edx,edx
c0015800:	0f b6 c0             	movzx  eax,al
c0015803:	f7 d8                	neg    eax
c0015805:	83 d2 00             	adc    edx,0x0
c0015808:	83 c4 08             	add    esp,0x8
c001580b:	f7 da                	neg    edx
c001580d:	5b                   	pop    ebx
c001580e:	c3                   	ret    
c001580f:	83 ec 08             	sub    esp,0x8
c0015812:	50                   	push   eax
c0015813:	68 b2 15 02 c0       	push   0xc00215b2
c0015818:	e8 32 95 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001581d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015820:	83 c4 10             	add    esp,0x10
c0015823:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015829:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015830:	31 d2                	xor    edx,edx
c0015832:	31 c0                	xor    eax,eax
c0015834:	83 c4 08             	add    esp,0x8
c0015837:	5b                   	pop    ebx
c0015838:	c3                   	ret    
c0015839:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001583e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015843:	83 c4 08             	add    esp,0x8
c0015846:	5b                   	pop    ebx
c0015847:	c3                   	ret    

c0015848 <sysCallSizeFromFilename(regs*)>:
c0015848:	57                   	push   edi
c0015849:	56                   	push   esi
c001584a:	53                   	push   ebx
c001584b:	83 ec 10             	sub    esp,0x10
c001584e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015852:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015855:	83 fb 02             	cmp    ebx,0x2
c0015858:	0f 86 8a 00 00 00    	jbe    c00158e8 <sysCallSizeFromFilename(regs*)+0xa0>
c001585e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015864:	77 56                	ja     c00158bc <sysCallSizeFromFilename(regs*)+0x74>
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	68 14 01 00 00       	push   0x114
c001586e:	e8 ed 93 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015873:	83 c4 0c             	add    esp,0xc
c0015876:	89 c7                	mov    edi,eax
c0015878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001587d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015880:	53                   	push   ebx
c0015881:	57                   	push   edi
c0015882:	e8 f7 99 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0015887:	83 c4 0c             	add    esp,0xc
c001588a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001588e:	50                   	push   eax
c001588f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015892:	57                   	push   edi
c0015893:	e8 f6 9c ff ff       	call   c000f58e <File::stat(unsigned long long*, bool*)>
c0015898:	89 3c 24             	mov    DWORD PTR [esp],edi
c001589b:	89 c3                	mov    ebx,eax
c001589d:	8b 07                	mov    eax,DWORD PTR [edi]
c001589f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	31 c0                	xor    eax,eax
c00158a7:	85 db                	test   ebx,ebx
c00158a9:	0f 95 c0             	setne  al
c00158ac:	31 d2                	xor    edx,edx
c00158ae:	f7 d8                	neg    eax
c00158b0:	83 d2 00             	adc    edx,0x0
c00158b3:	83 c4 10             	add    esp,0x10
c00158b6:	f7 da                	neg    edx
c00158b8:	5b                   	pop    ebx
c00158b9:	5e                   	pop    esi
c00158ba:	5f                   	pop    edi
c00158bb:	c3                   	ret    
c00158bc:	83 ec 08             	sub    esp,0x8
c00158bf:	53                   	push   ebx
c00158c0:	68 cc 15 02 c0       	push   0xc00215cc
c00158c5:	e8 85 94 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00158ca:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00158cd:	83 c4 10             	add    esp,0x10
c00158d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00158d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158dd:	31 d2                	xor    edx,edx
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	31 c0                	xor    eax,eax
c00158e4:	5b                   	pop    ebx
c00158e5:	5e                   	pop    esi
c00158e6:	5f                   	pop    edi
c00158e7:	c3                   	ret    
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158f0:	5b                   	pop    ebx
c00158f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158f6:	5e                   	pop    esi
c00158f7:	5f                   	pop    edi
c00158f8:	c3                   	ret    

c00158f9 <sysCallSize(regs*)>:
c00158f9:	53                   	push   ebx
c00158fa:	83 ec 18             	sub    esp,0x18
c00158fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015901:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015904:	83 f8 02             	cmp    eax,0x2
c0015907:	76 64                	jbe    c001596d <sysCallSize(regs*)+0x74>
c0015909:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001590e:	77 33                	ja     c0015943 <sysCallSize(regs*)+0x4a>
c0015910:	83 ec 0c             	sub    esp,0xc
c0015913:	50                   	push   eax
c0015914:	e8 58 83 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c0015919:	83 c4 0c             	add    esp,0xc
c001591c:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015920:	52                   	push   edx
c0015921:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015924:	50                   	push   eax
c0015925:	e8 64 9c ff ff       	call   c000f58e <File::stat(unsigned long long*, bool*)>
c001592a:	83 c4 10             	add    esp,0x10
c001592d:	85 c0                	test   eax,eax
c001592f:	0f 95 c0             	setne  al
c0015932:	31 d2                	xor    edx,edx
c0015934:	0f b6 c0             	movzx  eax,al
c0015937:	f7 d8                	neg    eax
c0015939:	83 d2 00             	adc    edx,0x0
c001593c:	83 c4 18             	add    esp,0x18
c001593f:	f7 da                	neg    edx
c0015941:	5b                   	pop    ebx
c0015942:	c3                   	ret    
c0015943:	83 ec 08             	sub    esp,0x8
c0015946:	50                   	push   eax
c0015947:	68 cc 15 02 c0       	push   0xc00215cc
c001594c:	e8 fe 93 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0015951:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015954:	83 c4 10             	add    esp,0x10
c0015957:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001595d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015964:	31 d2                	xor    edx,edx
c0015966:	31 c0                	xor    eax,eax
c0015968:	83 c4 18             	add    esp,0x18
c001596b:	5b                   	pop    ebx
c001596c:	c3                   	ret    
c001596d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015972:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015977:	83 c4 18             	add    esp,0x18
c001597a:	5b                   	pop    ebx
c001597b:	c3                   	ret    

c001597c <sysCallClose(regs*)>:
c001597c:	53                   	push   ebx
c001597d:	83 ec 08             	sub    esp,0x8
c0015980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015984:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015987:	83 f8 02             	cmp    eax,0x2
c001598a:	76 50                	jbe    c00159dc <sysCallClose(regs*)+0x60>
c001598c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015991:	74 58                	je     c00159eb <sysCallClose(regs*)+0x6f>
c0015993:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015998:	74 60                	je     c00159fa <sysCallClose(regs*)+0x7e>
c001599a:	77 2f                	ja     c00159cb <sysCallClose(regs*)+0x4f>
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	50                   	push   eax
c00159a0:	e8 cc 82 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c00159a5:	89 c3                	mov    ebx,eax
c00159a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00159aa:	e8 91 99 ff ff       	call   c000f340 <File::close()>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	85 db                	test   ebx,ebx
c00159b4:	74 0c                	je     c00159c2 <sysCallClose(regs*)+0x46>
c00159b6:	83 ec 0c             	sub    esp,0xc
c00159b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159bb:	53                   	push   ebx
c00159bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159bf:	83 c4 10             	add    esp,0x10
c00159c2:	31 c0                	xor    eax,eax
c00159c4:	31 d2                	xor    edx,edx
c00159c6:	83 c4 08             	add    esp,0x8
c00159c9:	5b                   	pop    ebx
c00159ca:	c3                   	ret    
c00159cb:	83 ec 08             	sub    esp,0x8
c00159ce:	50                   	push   eax
c00159cf:	68 b0 16 02 c0       	push   0xc00216b0
c00159d4:	e8 76 93 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00159d9:	83 c4 10             	add    esp,0x10
c00159dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159e6:	83 c4 08             	add    esp,0x8
c00159e9:	5b                   	pop    ebx
c00159ea:	c3                   	ret    
c00159eb:	83 ec 0c             	sub    esp,0xc
c00159ee:	68 e7 15 02 c0       	push   0xc00215e7
c00159f3:	e8 57 93 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00159f8:	eb c5                	jmp    c00159bf <sysCallClose(regs*)+0x43>
c00159fa:	83 ec 0c             	sub    esp,0xc
c00159fd:	68 f5 15 02 c0       	push   0xc00215f5
c0015a02:	eb ef                	jmp    c00159f3 <sysCallClose(regs*)+0x77>

c0015a04 <sysCallOpenDir(regs*)>:
c0015a04:	56                   	push   esi
c0015a05:	53                   	push   ebx
c0015a06:	53                   	push   ebx
c0015a07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a0b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015a0e:	85 f6                	test   esi,esi
c0015a10:	74 51                	je     c0015a63 <sysCallOpenDir(regs*)+0x5f>
c0015a12:	83 ec 0c             	sub    esp,0xc
c0015a15:	68 14 01 00 00       	push   0x114
c0015a1a:	e8 41 92 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015a1f:	83 c4 0c             	add    esp,0xc
c0015a22:	89 c6                	mov    esi,eax
c0015a24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a29:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a2f:	56                   	push   esi
c0015a30:	e8 0b 9d ff ff       	call   c000f740 <Directory::Directory(char const*, Process*)>
c0015a35:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a38:	e8 67 9d ff ff       	call   c000f7a4 <Directory::open()>
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	85 c0                	test   eax,eax
c0015a42:	75 1f                	jne    c0015a63 <sysCallOpenDir(regs*)+0x5f>
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	56                   	push   esi
c0015a48:	e8 6f 7f ff ff       	call   c000d9bc <UnixFile::getFileDescriptor()>
c0015a4d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015a50:	83 c4 10             	add    esp,0x10
c0015a53:	89 02                	mov    DWORD PTR [edx],eax
c0015a55:	c1 f8 1f             	sar    eax,0x1f
c0015a58:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a5b:	31 c0                	xor    eax,eax
c0015a5d:	59                   	pop    ecx
c0015a5e:	31 d2                	xor    edx,edx
c0015a60:	5b                   	pop    ebx
c0015a61:	5e                   	pop    esi
c0015a62:	c3                   	ret    
c0015a63:	59                   	pop    ecx
c0015a64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a69:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a6e:	5b                   	pop    ebx
c0015a6f:	5e                   	pop    esi
c0015a70:	c3                   	ret    

c0015a71 <sysCallMakeDir(regs*)>:
c0015a71:	56                   	push   esi
c0015a72:	53                   	push   ebx
c0015a73:	83 ec 10             	sub    esp,0x10
c0015a76:	68 14 01 00 00       	push   0x114
c0015a7b:	e8 e0 91 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015a80:	83 c4 0c             	add    esp,0xc
c0015a83:	89 c3                	mov    ebx,eax
c0015a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a8a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a91:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015a94:	53                   	push   ebx
c0015a95:	e8 a6 9c ff ff       	call   c000f740 <Directory::Directory(char const*, Process*)>
c0015a9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a9d:	e8 e2 9e ff ff       	call   c000f984 <Directory::create()>
c0015aa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015aa5:	89 c6                	mov    esi,eax
c0015aa7:	e8 54 9d ff ff       	call   c000f800 <Directory::close()>
c0015aac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ab1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ab4:	31 c0                	xor    eax,eax
c0015ab6:	85 f6                	test   esi,esi
c0015ab8:	0f 95 c0             	setne  al
c0015abb:	31 d2                	xor    edx,edx
c0015abd:	f7 d8                	neg    eax
c0015abf:	83 d2 00             	adc    edx,0x0
c0015ac2:	83 c4 14             	add    esp,0x14
c0015ac5:	f7 da                	neg    edx
c0015ac7:	5b                   	pop    ebx
c0015ac8:	5e                   	pop    esi
c0015ac9:	c3                   	ret    

c0015aca <sysCallCloseDir(regs*)>:
c0015aca:	53                   	push   ebx
c0015acb:	83 ec 08             	sub    esp,0x8
c0015ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ad2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ad5:	83 f8 02             	cmp    eax,0x2
c0015ad8:	76 47                	jbe    c0015b21 <sysCallCloseDir(regs*)+0x57>
c0015ada:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015adf:	77 2f                	ja     c0015b10 <sysCallCloseDir(regs*)+0x46>
c0015ae1:	83 ec 0c             	sub    esp,0xc
c0015ae4:	50                   	push   eax
c0015ae5:	e8 87 81 ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c0015aea:	89 c3                	mov    ebx,eax
c0015aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0015aef:	e8 0c 9d ff ff       	call   c000f800 <Directory::close()>
c0015af4:	83 c4 10             	add    esp,0x10
c0015af7:	85 db                	test   ebx,ebx
c0015af9:	74 0c                	je     c0015b07 <sysCallCloseDir(regs*)+0x3d>
c0015afb:	83 ec 0c             	sub    esp,0xc
c0015afe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b00:	53                   	push   ebx
c0015b01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b04:	83 c4 10             	add    esp,0x10
c0015b07:	31 c0                	xor    eax,eax
c0015b09:	31 d2                	xor    edx,edx
c0015b0b:	83 c4 08             	add    esp,0x8
c0015b0e:	5b                   	pop    ebx
c0015b0f:	c3                   	ret    
c0015b10:	83 ec 08             	sub    esp,0x8
c0015b13:	50                   	push   eax
c0015b14:	68 d8 16 02 c0       	push   0xc00216d8
c0015b19:	e8 31 92 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b26:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b2b:	83 c4 08             	add    esp,0x8
c0015b2e:	5b                   	pop    ebx
c0015b2f:	c3                   	ret    

c0015b30 <sysCallWait(regs*)>:
c0015b30:	83 ec 10             	sub    esp,0x10
c0015b33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b37:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015b3a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b3d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015b40:	e8 9a 22 00 00       	call   c0017ddf <waitTask(int, int*, int)>
c0015b45:	83 c4 1c             	add    esp,0x1c
c0015b48:	99                   	cdq    
c0015b49:	c3                   	ret    

c0015b4a <sysCallRmdir(regs*)>:
c0015b4a:	56                   	push   esi
c0015b4b:	53                   	push   ebx
c0015b4c:	83 ec 10             	sub    esp,0x10
c0015b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b53:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015b56:	68 14 01 00 00       	push   0x114
c0015b5b:	e8 00 91 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015b60:	83 c4 0c             	add    esp,0xc
c0015b63:	89 c3                	mov    ebx,eax
c0015b65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b6a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015b6d:	56                   	push   esi
c0015b6e:	53                   	push   ebx
c0015b6f:	e8 0a 97 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0015b74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b77:	e8 de 98 ff ff       	call   c000f45a <File::unlink()>
c0015b7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b7f:	89 c6                	mov    esi,eax
c0015b81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b86:	31 c0                	xor    eax,eax
c0015b88:	85 f6                	test   esi,esi
c0015b8a:	0f 95 c0             	setne  al
c0015b8d:	31 d2                	xor    edx,edx
c0015b8f:	f7 d8                	neg    eax
c0015b91:	83 d2 00             	adc    edx,0x0
c0015b94:	83 c4 14             	add    esp,0x14
c0015b97:	f7 da                	neg    edx
c0015b99:	5b                   	pop    ebx
c0015b9a:	5e                   	pop    esi
c0015b9b:	c3                   	ret    

c0015b9c <sysCallUnlink(regs*)>:
c0015b9c:	56                   	push   esi
c0015b9d:	53                   	push   ebx
c0015b9e:	83 ec 10             	sub    esp,0x10
c0015ba1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ba5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015ba8:	68 14 01 00 00       	push   0x114
c0015bad:	e8 ae 90 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015bb2:	83 c4 0c             	add    esp,0xc
c0015bb5:	89 c3                	mov    ebx,eax
c0015bb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bbc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015bbf:	56                   	push   esi
c0015bc0:	53                   	push   ebx
c0015bc1:	e8 b8 96 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0015bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bc9:	e8 8c 98 ff ff       	call   c000f45a <File::unlink()>
c0015bce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bd1:	89 c6                	mov    esi,eax
c0015bd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bd8:	31 c0                	xor    eax,eax
c0015bda:	85 f6                	test   esi,esi
c0015bdc:	0f 95 c0             	setne  al
c0015bdf:	31 d2                	xor    edx,edx
c0015be1:	f7 d8                	neg    eax
c0015be3:	83 d2 00             	adc    edx,0x0
c0015be6:	83 c4 14             	add    esp,0x14
c0015be9:	f7 da                	neg    edx
c0015beb:	5b                   	pop    ebx
c0015bec:	5e                   	pop    esi
c0015bed:	c3                   	ret    

c0015bee <sysCallGetArgv(regs*)>:
c0015bee:	83 ec 0c             	sub    esp,0xc
c0015bf1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bf5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015bf8:	85 c0                	test   eax,eax
c0015bfa:	78 2b                	js     c0015c27 <sysCallGetArgv(regs*)+0x39>
c0015bfc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c02:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015c05:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015c0b:	7d 1a                	jge    c0015c27 <sysCallGetArgv(regs*)+0x39>
c0015c0d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015c14:	85 c0                	test   eax,eax
c0015c16:	74 17                	je     c0015c2f <sysCallGetArgv(regs*)+0x41>
c0015c18:	83 ec 08             	sub    esp,0x8
c0015c1b:	50                   	push   eax
c0015c1c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015c1f:	e8 83 aa fe ff       	call   c00006a7 <strcpy>
c0015c24:	83 c4 10             	add    esp,0x10
c0015c27:	31 c0                	xor    eax,eax
c0015c29:	31 d2                	xor    edx,edx
c0015c2b:	83 c4 0c             	add    esp,0xc
c0015c2e:	c3                   	ret    
c0015c2f:	b8 01 00 00 00       	mov    eax,0x1
c0015c34:	31 d2                	xor    edx,edx
c0015c36:	83 c4 0c             	add    esp,0xc
c0015c39:	c3                   	ret    

c0015c3a <sysCallTTYName(regs*)>:
c0015c3a:	56                   	push   esi
c0015c3b:	53                   	push   ebx
c0015c3c:	53                   	push   ebx
c0015c3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c41:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015c44:	85 c0                	test   eax,eax
c0015c46:	74 5f                	je     c0015ca7 <sysCallTTYName(regs*)+0x6d>
c0015c48:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015c4b:	83 f8 02             	cmp    eax,0x2
c0015c4e:	77 3e                	ja     c0015c8e <sysCallTTYName(regs*)+0x54>
c0015c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015c58:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c5e:	85 db                	test   ebx,ebx
c0015c60:	74 45                	je     c0015ca7 <sysCallTTYName(regs*)+0x6d>
c0015c62:	83 ec 0c             	sub    esp,0xc
c0015c65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c67:	53                   	push   ebx
c0015c68:	ff 10                	call   DWORD PTR [eax]
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	84 c0                	test   al,al
c0015c6f:	74 41                	je     c0015cb2 <sysCallTTYName(regs*)+0x78>
c0015c71:	83 ec 08             	sub    esp,0x8
c0015c74:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015c7a:	53                   	push   ebx
c0015c7b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015c7e:	e8 24 aa fe ff       	call   c00006a7 <strcpy>
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	31 c0                	xor    eax,eax
c0015c88:	59                   	pop    ecx
c0015c89:	31 d2                	xor    edx,edx
c0015c8b:	5b                   	pop    ebx
c0015c8c:	5e                   	pop    esi
c0015c8d:	c3                   	ret    
c0015c8e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015c93:	74 bb                	je     c0015c50 <sysCallTTYName(regs*)+0x16>
c0015c95:	83 ec 0c             	sub    esp,0xc
c0015c98:	50                   	push   eax
c0015c99:	e8 d3 7f ff ff       	call   c000dc71 <getFromFileDescriptor(int)>
c0015c9e:	83 c4 10             	add    esp,0x10
c0015ca1:	89 c3                	mov    ebx,eax
c0015ca3:	85 db                	test   ebx,ebx
c0015ca5:	75 bb                	jne    c0015c62 <sysCallTTYName(regs*)+0x28>
c0015ca7:	59                   	pop    ecx
c0015ca8:	b8 01 00 00 00       	mov    eax,0x1
c0015cad:	31 d2                	xor    edx,edx
c0015caf:	5b                   	pop    ebx
c0015cb0:	5e                   	pop    esi
c0015cb1:	c3                   	ret    
c0015cb2:	59                   	pop    ecx
c0015cb3:	b8 02 00 00 00       	mov    eax,0x2
c0015cb8:	31 d2                	xor    edx,edx
c0015cba:	5b                   	pop    ebx
c0015cbb:	5e                   	pop    esi
c0015cbc:	c3                   	ret    

c0015cbd <sysCallGetEnv(regs*)>:
c0015cbd:	57                   	push   edi
c0015cbe:	56                   	push   esi
c0015cbf:	53                   	push   ebx
c0015cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cc4:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015cc7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015cca:	57                   	push   edi
c0015ccb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015cce:	56                   	push   esi
c0015ccf:	68 fc 16 02 c0       	push   0xc00216fc
c0015cd4:	e8 76 90 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0015cd9:	83 c4 10             	add    esp,0x10
c0015cdc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015cdf:	85 c9                	test   ecx,ecx
c0015ce1:	75 0c                	jne    c0015cef <sysCallGetEnv(regs*)+0x32>
c0015ce3:	85 f6                	test   esi,esi
c0015ce5:	74 11                	je     c0015cf8 <sysCallGetEnv(regs*)+0x3b>
c0015ce7:	5b                   	pop    ebx
c0015ce8:	31 c0                	xor    eax,eax
c0015cea:	31 d2                	xor    edx,edx
c0015cec:	5e                   	pop    esi
c0015ced:	5f                   	pop    edi
c0015cee:	c3                   	ret    
c0015cef:	85 f6                	test   esi,esi
c0015cf1:	74 2b                	je     c0015d1e <sysCallGetEnv(regs*)+0x61>
c0015cf3:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0015cf6:	eb ef                	jmp    c0015ce7 <sysCallGetEnv(regs*)+0x2a>
c0015cf8:	83 ec 0c             	sub    esp,0xc
c0015cfb:	68 30 17 02 c0       	push   0xc0021730
c0015d00:	e8 20 a9 fe ff       	call   c0000625 <strlen>
c0015d05:	89 c3                	mov    ebx,eax
c0015d07:	58                   	pop    eax
c0015d08:	5a                   	pop    edx
c0015d09:	53                   	push   ebx
c0015d0a:	68 03 16 02 c0       	push   0xc0021603
c0015d0f:	e8 3b 90 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0015d14:	89 d8                	mov    eax,ebx
c0015d16:	83 c4 10             	add    esp,0x10
c0015d19:	99                   	cdq    
c0015d1a:	5b                   	pop    ebx
c0015d1b:	5e                   	pop    esi
c0015d1c:	5f                   	pop    edi
c0015d1d:	c3                   	ret    
c0015d1e:	83 ec 08             	sub    esp,0x8
c0015d21:	68 30 17 02 c0       	push   0xc0021730
c0015d26:	57                   	push   edi
c0015d27:	e8 7b a9 fe ff       	call   c00006a7 <strcpy>
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	eb b6                	jmp    c0015ce7 <sysCallGetEnv(regs*)+0x2a>

c0015d31 <sysCallUSleep(regs*)>:
c0015d31:	83 ec 14             	sub    esp,0x14
c0015d34:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015d39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d3d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015d44:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015d47:	01 ca                	add    edx,ecx
c0015d49:	52                   	push   edx
c0015d4a:	50                   	push   eax
c0015d4b:	e8 28 21 00 00       	call   c0017e78 <nanoSleep(unsigned long long)>
c0015d50:	31 c0                	xor    eax,eax
c0015d52:	31 d2                	xor    edx,edx
c0015d54:	83 c4 1c             	add    esp,0x1c
c0015d57:	c3                   	ret    

c0015d58 <sysCallSpawn(regs*)>:
c0015d58:	56                   	push   esi
c0015d59:	53                   	push   ebx
c0015d5a:	53                   	push   ebx
c0015d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d5f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015d62:	85 f6                	test   esi,esi
c0015d64:	75 08                	jne    c0015d6e <sysCallSpawn(regs*)+0x16>
c0015d66:	59                   	pop    ecx
c0015d67:	31 c0                	xor    eax,eax
c0015d69:	31 d2                	xor    edx,edx
c0015d6b:	5b                   	pop    ebx
c0015d6c:	5e                   	pop    esi
c0015d6d:	c3                   	ret    
c0015d6e:	83 ec 0c             	sub    esp,0xc
c0015d71:	68 3b 07 00 00       	push   0x73b
c0015d76:	e8 e5 8e ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015d7b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015d7e:	89 c6                	mov    esi,eax
c0015d80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d85:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015d88:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d8b:	56                   	push   esi
c0015d8c:	e8 47 18 00 00       	call   c00175d8 <Process::Process(char const*, Process*, char**)>
c0015d91:	83 c4 20             	add    esp,0x20
c0015d94:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015d9b:	75 c9                	jne    c0015d66 <sysCallSpawn(regs*)+0xe>
c0015d9d:	83 ec 0c             	sub    esp,0xc
c0015da0:	56                   	push   esi
c0015da1:	e8 98 1d 00 00       	call   c0017b3e <Process::createUserThread()>
c0015da6:	8b 06                	mov    eax,DWORD PTR [esi]
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	99                   	cdq    
c0015dac:	59                   	pop    ecx
c0015dad:	5b                   	pop    ebx
c0015dae:	5e                   	pop    esi
c0015daf:	c3                   	ret    

c0015db0 <sysAppSettings(regs*)>:
c0015db0:	53                   	push   ebx
c0015db1:	83 ec 08             	sub    esp,0x8
c0015db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015db8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015dbb:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0015dc1:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015dc6:	66 3d c0 09          	cmp    ax,0x9c0
c0015dca:	75 2f                	jne    c0015dfb <sysAppSettings(regs*)+0x4b>
c0015dcc:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0015dd2:	83 e0 1f             	and    eax,0x1f
c0015dd5:	3c 01                	cmp    al,0x1
c0015dd7:	74 2e                	je     c0015e07 <sysAppSettings(regs*)+0x57>
c0015dd9:	3c 07                	cmp    al,0x7
c0015ddb:	0f 84 bd 00 00 00    	je     c0015e9e <sysAppSettings(regs*)+0xee>
c0015de1:	84 c0                	test   al,al
c0015de3:	0f 84 dc 00 00 00    	je     c0015ec5 <sysAppSettings(regs*)+0x115>
c0015de9:	3c 08                	cmp    al,0x8
c0015deb:	74 6d                	je     c0015e5a <sysAppSettings(regs*)+0xaa>
c0015ded:	0f b6 c0             	movzx  eax,al
c0015df0:	83 c4 08             	add    esp,0x8
c0015df3:	05 e8 03 00 00       	add    eax,0x3e8
c0015df8:	5b                   	pop    ebx
c0015df9:	99                   	cdq    
c0015dfa:	c3                   	ret    
c0015dfb:	b8 01 00 00 00       	mov    eax,0x1
c0015e00:	31 d2                	xor    edx,edx
c0015e02:	83 c4 08             	add    esp,0x8
c0015e05:	5b                   	pop    ebx
c0015e06:	c3                   	ret    
c0015e07:	51                   	push   ecx
c0015e08:	68 00 01 00 00       	push   0x100
c0015e0d:	6a 00                	push   0x0
c0015e0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e17:	83 c0 0c             	add    eax,0xc
c0015e1a:	50                   	push   eax
c0015e1b:	e8 e8 a7 fe ff       	call   c0000608 <memset>
c0015e20:	83 c4 0c             	add    esp,0xc
c0015e23:	68 ff 00 00 00       	push   0xff
c0015e28:	53                   	push   ebx
c0015e29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e31:	83 c0 0c             	add    eax,0xc
c0015e34:	50                   	push   eax
c0015e35:	e8 98 a7 fe ff       	call   c00005d2 <memcpy>
c0015e3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e3f:	5b                   	pop    ebx
c0015e40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e43:	5a                   	pop    edx
c0015e44:	8d 50 0c             	lea    edx,[eax+0xc]
c0015e47:	52                   	push   edx
c0015e48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015e4e:	e8 67 6f ff ff       	call   c000cdba <VgaText::setTitle(char*)>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	31 c0                	xor    eax,eax
c0015e58:	eb a6                	jmp    c0015e00 <sysAppSettings(regs*)+0x50>
c0015e5a:	83 ec 08             	sub    esp,0x8
c0015e5d:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015e63:	83 e0 0f             	and    eax,0xf
c0015e66:	50                   	push   eax
c0015e67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015e75:	e8 30 6f ff ff       	call   c000cdaa <VgaText::setTitleColour(VgaColour)>
c0015e7a:	58                   	pop    eax
c0015e7b:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015e81:	5a                   	pop    edx
c0015e82:	c1 e8 04             	shr    eax,0x4
c0015e85:	83 e0 0f             	and    eax,0xf
c0015e88:	50                   	push   eax
c0015e89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e91:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015e97:	e8 fe 6e ff ff       	call   c000cd9a <VgaText::setTitleTextColour(VgaColour)>
c0015e9c:	eb b5                	jmp    c0015e53 <sysAppSettings(regs*)+0xa3>
c0015e9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ea3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015ea6:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0015eac:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0015eb2:	c0 e8 06             	shr    al,0x6
c0015eb5:	83 e0 01             	and    eax,0x1
c0015eb8:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0015ebe:	31 c0                	xor    eax,eax
c0015ec0:	e9 3b ff ff ff       	jmp    c0015e00 <sysAppSettings(regs*)+0x50>
c0015ec5:	b8 02 00 00 00       	mov    eax,0x2
c0015eca:	e9 31 ff ff ff       	jmp    c0015e00 <sysAppSettings(regs*)+0x50>

c0015ecf <sysSetFatAttrib(regs*)>:
c0015ecf:	57                   	push   edi
c0015ed0:	56                   	push   esi
c0015ed1:	53                   	push   ebx
c0015ed2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ed6:	83 ec 0c             	sub    esp,0xc
c0015ed9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015edc:	68 14 01 00 00       	push   0x114
c0015ee1:	e8 7a 8d ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015ee6:	83 c4 0c             	add    esp,0xc
c0015ee9:	89 c3                	mov    ebx,eax
c0015eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ef3:	57                   	push   edi
c0015ef4:	53                   	push   ebx
c0015ef5:	e8 84 93 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0015efa:	83 c4 0c             	add    esp,0xc
c0015efd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015f00:	0f b6 d4             	movzx  edx,ah
c0015f03:	0f b6 c0             	movzx  eax,al
c0015f06:	52                   	push   edx
c0015f07:	50                   	push   eax
c0015f08:	53                   	push   ebx
c0015f09:	e8 e6 95 ff ff       	call   c000f4f4 <File::chfatattr(unsigned char, unsigned char)>
c0015f0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f11:	89 c6                	mov    esi,eax
c0015f13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f18:	83 c4 10             	add    esp,0x10
c0015f1b:	31 c0                	xor    eax,eax
c0015f1d:	5b                   	pop    ebx
c0015f1e:	85 f6                	test   esi,esi
c0015f20:	5e                   	pop    esi
c0015f21:	0f 95 c0             	setne  al
c0015f24:	5f                   	pop    edi
c0015f25:	31 d2                	xor    edx,edx
c0015f27:	f7 d8                	neg    eax
c0015f29:	83 d2 00             	adc    edx,0x0
c0015f2c:	f7 da                	neg    edx
c0015f2e:	c3                   	ret    

c0015f2f <sysPanic(regs*)>:
c0015f2f:	83 ec 18             	sub    esp,0x18
c0015f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f36:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015f39:	e8 a6 ea ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0015f3e:	c7 04 24 17 16 02 c0 	mov    DWORD PTR [esp],0xc0021617
c0015f45:	e8 9a ea ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0015f4a:	b8 01 00 00 00       	mov    eax,0x1
c0015f4f:	31 d2                	xor    edx,edx
c0015f51:	83 c4 1c             	add    esp,0x1c
c0015f54:	c3                   	ret    

c0015f55 <sysPipe(regs*)>:
c0015f55:	57                   	push   edi
c0015f56:	56                   	push   esi
c0015f57:	53                   	push   ebx
c0015f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f5c:	83 ec 0c             	sub    esp,0xc
c0015f5f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015f62:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015f65:	6a 20                	push   0x20
c0015f67:	e8 f4 8c ff ff       	call   c000ec60 <operator new(unsigned long)>
c0015f6c:	89 c3                	mov    ebx,eax
c0015f6e:	58                   	pop    eax
c0015f6f:	5a                   	pop    edx
c0015f70:	68 00 50 00 00       	push   0x5000
c0015f75:	53                   	push   ebx
c0015f76:	e8 7d 67 ff ff       	call   c000c6f8 <Pipe::Pipe(int)>
c0015f7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f7e:	e8 39 7a ff ff       	call   c000d9bc <UnixFile::getFileDescriptor()>
c0015f83:	89 07                	mov    DWORD PTR [edi],eax
c0015f85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f88:	e8 2f 7a ff ff       	call   c000d9bc <UnixFile::getFileDescriptor()>
c0015f8d:	83 c4 10             	add    esp,0x10
c0015f90:	89 06                	mov    DWORD PTR [esi],eax
c0015f92:	31 d2                	xor    edx,edx
c0015f94:	5b                   	pop    ebx
c0015f95:	31 c0                	xor    eax,eax
c0015f97:	5e                   	pop    esi
c0015f98:	5f                   	pop    edi
c0015f99:	c3                   	ret    

c0015f9a <sysGetUnixTime(regs*)>:
c0015f9a:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c0015f9f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015fa5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fa9:	e9 98 9c ff ff       	jmp    c000fc46 <Clock::timeInSecondsLocal()>

c0015fae <string_ends_with(char const*, char const*)>:
c0015fae:	57                   	push   edi
c0015faf:	56                   	push   esi
c0015fb0:	53                   	push   ebx
c0015fb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fb5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015fb9:	83 ec 0c             	sub    esp,0xc
c0015fbc:	53                   	push   ebx
c0015fbd:	e8 63 a6 fe ff       	call   c0000625 <strlen>
c0015fc2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015fc5:	89 c6                	mov    esi,eax
c0015fc7:	e8 59 a6 fe ff       	call   c0000625 <strlen>
c0015fcc:	83 c4 10             	add    esp,0x10
c0015fcf:	39 c6                	cmp    esi,eax
c0015fd1:	7d 06                	jge    c0015fd9 <string_ends_with(char const*, char const*)+0x2b>
c0015fd3:	5b                   	pop    ebx
c0015fd4:	31 c0                	xor    eax,eax
c0015fd6:	5e                   	pop    esi
c0015fd7:	5f                   	pop    edi
c0015fd8:	c3                   	ret    
c0015fd9:	83 ec 08             	sub    esp,0x8
c0015fdc:	29 c6                	sub    esi,eax
c0015fde:	57                   	push   edi
c0015fdf:	01 f3                	add    ebx,esi
c0015fe1:	53                   	push   ebx
c0015fe2:	e8 11 a7 fe ff       	call   c00006f8 <strcmp>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	85 c0                	test   eax,eax
c0015fec:	5b                   	pop    ebx
c0015fed:	0f 94 c0             	sete   al
c0015ff0:	5e                   	pop    esi
c0015ff1:	0f b6 c0             	movzx  eax,al
c0015ff4:	5f                   	pop    edi
c0015ff5:	c3                   	ret    

c0015ff6 <sysCallOpen(regs*)>:
c0015ff6:	56                   	push   esi
c0015ff7:	53                   	push   ebx
c0015ff8:	81 ec 04 01 00 00    	sub    esp,0x104
c0015ffe:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016005:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016008:	85 c9                	test   ecx,ecx
c001600a:	0f 84 b3 00 00 00    	je     c00160c3 <sysCallOpen(regs*)+0xcd>
c0016010:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016013:	85 c0                	test   eax,eax
c0016015:	0f 84 a8 00 00 00    	je     c00160c3 <sysCallOpen(regs*)+0xcd>
c001601b:	52                   	push   edx
c001601c:	68 26 16 02 c0       	push   0xc0021626
c0016021:	50                   	push   eax
c0016022:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016026:	56                   	push   esi
c0016027:	e8 a8 90 ff ff       	call   c000f0d4 <standardiseFiles(char*, char const*, char const*)>
c001602c:	89 34 24             	mov    DWORD PTR [esp],esi
c001602f:	e8 f1 a5 fe ff       	call   c0000625 <strlen>
c0016034:	83 c4 10             	add    esp,0x10
c0016037:	48                   	dec    eax
c0016038:	74 1d                	je     c0016057 <sysCallOpen(regs*)+0x61>
c001603a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001603d:	eb 0f                	jmp    c001604e <sysCallOpen(regs*)+0x58>
c001603f:	80 fa 3a             	cmp    dl,0x3a
c0016042:	74 0f                	je     c0016053 <sysCallOpen(regs*)+0x5d>
c0016044:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016048:	48                   	dec    eax
c0016049:	74 0c                	je     c0016057 <sysCallOpen(regs*)+0x61>
c001604b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001604e:	80 fa 2e             	cmp    dl,0x2e
c0016051:	75 ec                	jne    c001603f <sysCallOpen(regs*)+0x49>
c0016053:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016057:	83 ec 08             	sub    esp,0x8
c001605a:	68 2a 16 02 c0       	push   0xc002162a
c001605f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016062:	e8 47 ff ff ff       	call   c0015fae <string_ends_with(char const*, char const*)>
c0016067:	83 c4 10             	add    esp,0x10
c001606a:	85 c0                	test   eax,eax
c001606c:	75 17                	jne    c0016085 <sysCallOpen(regs*)+0x8f>
c001606e:	83 ec 08             	sub    esp,0x8
c0016071:	68 4b 16 02 c0       	push   0xc002164b
c0016076:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016079:	e8 30 ff ff ff       	call   c0015fae <string_ends_with(char const*, char const*)>
c001607e:	83 c4 10             	add    esp,0x10
c0016081:	85 c0                	test   eax,eax
c0016083:	74 51                	je     c00160d6 <sysCallOpen(regs*)+0xe0>
c0016085:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016088:	83 ec 08             	sub    esp,0x8
c001608b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016091:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016098:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001609b:	ff 30                	push   DWORD PTR [eax]
c001609d:	68 2f 16 02 c0       	push   0xc002162f
c00160a2:	e8 a8 8c ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00160a7:	c7 04 24 3e 16 02 c0 	mov    DWORD PTR [esp],0xc002163e
c00160ae:	e8 9c 8c ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00160b3:	83 c4 10             	add    esp,0x10
c00160b6:	81 c4 04 01 00 00    	add    esp,0x104
c00160bc:	31 c0                	xor    eax,eax
c00160be:	31 d2                	xor    edx,edx
c00160c0:	5b                   	pop    ebx
c00160c1:	5e                   	pop    esi
c00160c2:	c3                   	ret    
c00160c3:	81 c4 04 01 00 00    	add    esp,0x104
c00160c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160d3:	5b                   	pop    ebx
c00160d4:	5e                   	pop    esi
c00160d5:	c3                   	ret    
c00160d6:	83 ec 08             	sub    esp,0x8
c00160d9:	68 2b 16 02 c0       	push   0xc002162b
c00160de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160e1:	e8 12 a6 fe ff       	call   c00006f8 <strcmp>
c00160e6:	83 c4 10             	add    esp,0x10
c00160e9:	85 c0                	test   eax,eax
c00160eb:	74 98                	je     c0016085 <sysCallOpen(regs*)+0x8f>
c00160ed:	83 ec 08             	sub    esp,0x8
c00160f0:	68 2a 16 02 c0       	push   0xc002162a
c00160f5:	56                   	push   esi
c00160f6:	e8 b3 fe ff ff       	call   c0015fae <string_ends_with(char const*, char const*)>
c00160fb:	83 c4 10             	add    esp,0x10
c00160fe:	85 c0                	test   eax,eax
c0016100:	75 83                	jne    c0016085 <sysCallOpen(regs*)+0x8f>
c0016102:	83 ec 08             	sub    esp,0x8
c0016105:	68 50 16 02 c0       	push   0xc0021650
c001610a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001610d:	e8 9c fe ff ff       	call   c0015fae <string_ends_with(char const*, char const*)>
c0016112:	83 c4 10             	add    esp,0x10
c0016115:	85 c0                	test   eax,eax
c0016117:	0f 85 d1 00 00 00    	jne    c00161ee <sysCallOpen(regs*)+0x1f8>
c001611d:	83 ec 08             	sub    esp,0x8
c0016120:	68 55 16 02 c0       	push   0xc0021655
c0016125:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016128:	e8 81 fe ff ff       	call   c0015fae <string_ends_with(char const*, char const*)>
c001612d:	83 c4 10             	add    esp,0x10
c0016130:	85 c0                	test   eax,eax
c0016132:	0f 85 b6 00 00 00    	jne    c00161ee <sysCallOpen(regs*)+0x1f8>
c0016138:	83 ec 08             	sub    esp,0x8
c001613b:	68 51 16 02 c0       	push   0xc0021651
c0016140:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016143:	e8 b0 a5 fe ff       	call   c00006f8 <strcmp>
c0016148:	83 c4 10             	add    esp,0x10
c001614b:	85 c0                	test   eax,eax
c001614d:	0f 84 9b 00 00 00    	je     c00161ee <sysCallOpen(regs*)+0x1f8>
c0016153:	83 ec 08             	sub    esp,0x8
c0016156:	68 50 16 02 c0       	push   0xc0021650
c001615b:	56                   	push   esi
c001615c:	e8 4d fe ff ff       	call   c0015fae <string_ends_with(char const*, char const*)>
c0016161:	83 c4 10             	add    esp,0x10
c0016164:	85 c0                	test   eax,eax
c0016166:	0f 85 82 00 00 00    	jne    c00161ee <sysCallOpen(regs*)+0x1f8>
c001616c:	83 ec 0c             	sub    esp,0xc
c001616f:	68 14 01 00 00       	push   0x114
c0016174:	e8 e7 8a ff ff       	call   c000ec60 <operator new(unsigned long)>
c0016179:	83 c4 0c             	add    esp,0xc
c001617c:	89 c6                	mov    esi,eax
c001617e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016183:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016186:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016189:	56                   	push   esi
c001618a:	e8 ef 90 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c001618f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016192:	83 c4 10             	add    esp,0x10
c0016195:	0f b6 c2             	movzx  eax,dl
c0016198:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001619b:	89 d0                	mov    eax,edx
c001619d:	83 e0 01             	and    eax,0x1
c00161a0:	f6 c2 02             	test   dl,0x2
c00161a3:	74 03                	je     c00161a8 <sysCallOpen(regs*)+0x1b2>
c00161a5:	83 c8 02             	or     eax,0x2
c00161a8:	f6 c2 04             	test   dl,0x4
c00161ab:	74 03                	je     c00161b0 <sysCallOpen(regs*)+0x1ba>
c00161ad:	83 c8 04             	or     eax,0x4
c00161b0:	f6 c2 08             	test   dl,0x8
c00161b3:	74 03                	je     c00161b8 <sysCallOpen(regs*)+0x1c2>
c00161b5:	83 c8 0a             	or     eax,0xa
c00161b8:	83 e2 10             	and    edx,0x10
c00161bb:	74 03                	je     c00161c0 <sysCallOpen(regs*)+0x1ca>
c00161bd:	83 c8 12             	or     eax,0x12
c00161c0:	83 ec 08             	sub    esp,0x8
c00161c3:	50                   	push   eax
c00161c4:	56                   	push   esi
c00161c5:	e8 18 91 ff ff       	call   c000f2e2 <File::open(FileOpenMode)>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	85 c0                	test   eax,eax
c00161cf:	0f 85 ee fe ff ff    	jne    c00160c3 <sysCallOpen(regs*)+0xcd>
c00161d5:	83 ec 0c             	sub    esp,0xc
c00161d8:	56                   	push   esi
c00161d9:	e8 de 77 ff ff       	call   c000d9bc <UnixFile::getFileDescriptor()>
c00161de:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00161e1:	89 02                	mov    DWORD PTR [edx],eax
c00161e3:	c1 f8 1f             	sar    eax,0x1f
c00161e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00161e9:	e9 c5 fe ff ff       	jmp    c00160b3 <sysCallOpen(regs*)+0xbd>
c00161ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161f1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00161f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161fe:	e9 b3 fe ff ff       	jmp    c00160b6 <sysCallOpen(regs*)+0xc0>

c0016203 <setupSystemCalls()>:
c0016203:	c7 05 00 3d 02 c0 1f 54 01 c0 	mov    DWORD PTR ds:0xc0023d00,0xc001541f
c001620d:	c7 05 04 3d 02 c0 13 52 01 c0 	mov    DWORD PTR ds:0xc0023d04,0xc0015213
c0016217:	c7 05 08 3d 02 c0 28 53 01 c0 	mov    DWORD PTR ds:0xc0023d08,0xc0015328
c0016221:	c7 05 0c 3d 02 c0 9c 53 01 c0 	mov    DWORD PTR ds:0xc0023d0c,0xc001539c
c001622b:	c7 05 10 3d 02 c0 c0 52 01 c0 	mov    DWORD PTR ds:0xc0023d10,0xc00152c0
c0016235:	c7 05 14 3d 02 c0 39 54 01 c0 	mov    DWORD PTR ds:0xc0023d14,0xc0015439
c001623f:	c7 05 18 3d 02 c0 ce 55 01 c0 	mov    DWORD PTR ds:0xc0023d18,0xc00155ce
c0016249:	c7 05 1c 3d 02 c0 ed 55 01 c0 	mov    DWORD PTR ds:0xc0023d1c,0xc00155ed
c0016253:	c7 05 24 3d 02 c0 7c 59 01 c0 	mov    DWORD PTR ds:0xc0023d24,0xc001597c
c001625d:	c7 05 20 3d 02 c0 f6 5f 01 c0 	mov    DWORD PTR ds:0xc0023d20,0xc0015ff6
c0016267:	c7 05 28 3d 02 c0 04 5a 01 c0 	mov    DWORD PTR ds:0xc0023d28,0xc0015a04
c0016271:	c7 05 2c 3d 02 c0 7a 56 01 c0 	mov    DWORD PTR ds:0xc0023d2c,0xc001567a
c001627b:	c7 05 30 3d 02 c0 45 54 01 c0 	mov    DWORD PTR ds:0xc0023d30,0xc0015445
c0016285:	c7 05 34 3d 02 c0 4a 54 01 c0 	mov    DWORD PTR ds:0xc0023d34,0xc001544a
c001628f:	c7 05 38 3d 02 c0 71 5a 01 c0 	mov    DWORD PTR ds:0xc0023d38,0xc0015a71
c0016299:	c7 05 3c 3d 02 c0 ca 5a 01 c0 	mov    DWORD PTR ds:0xc0023d3c,0xc0015aca
c00162a3:	c7 05 40 3d 02 c0 62 57 01 c0 	mov    DWORD PTR ds:0xc0023d40,0xc0015762
c00162ad:	c7 05 44 3d 02 c0 cb 57 01 c0 	mov    DWORD PTR ds:0xc0023d44,0xc00157cb
c00162b7:	c7 05 48 3d 02 c0 f9 58 01 c0 	mov    DWORD PTR ds:0xc0023d48,0xc00158f9
c00162c1:	c7 05 4c 3d 02 c0 4f 54 01 c0 	mov    DWORD PTR ds:0xc0023d4c,0xc001544f
c00162cb:	c7 05 50 3d 02 c0 30 5b 01 c0 	mov    DWORD PTR ds:0xc0023d50,0xc0015b30
c00162d5:	c7 05 54 3d 02 c0 59 54 01 c0 	mov    DWORD PTR ds:0xc0023d54,0xc0015459
c00162df:	c7 05 58 3d 02 c0 64 54 01 c0 	mov    DWORD PTR ds:0xc0023d58,0xc0015464
c00162e9:	c7 05 5c 3d 02 c0 4a 5b 01 c0 	mov    DWORD PTR ds:0xc0023d5c,0xc0015b4a
c00162f3:	c7 05 60 3d 02 c0 9c 5b 01 c0 	mov    DWORD PTR ds:0xc0023d60,0xc0015b9c
c00162fd:	c7 05 64 3d 02 c0 4c 56 01 c0 	mov    DWORD PTR ds:0xc0023d64,0xc001564c
c0016307:	c7 05 68 3d 02 c0 ee 5b 01 c0 	mov    DWORD PTR ds:0xc0023d68,0xc0015bee
c0016311:	c7 05 6c 3d 02 c0 09 56 01 c0 	mov    DWORD PTR ds:0xc0023d6c,0xc0015609
c001631b:	c7 05 70 3d 02 c0 3a 5c 01 c0 	mov    DWORD PTR ds:0xc0023d70,0xc0015c3a
c0016325:	c7 05 74 3d 02 c0 08 57 01 c0 	mov    DWORD PTR ds:0xc0023d74,0xc0015708
c001632f:	c7 05 78 3d 02 c0 31 5d 01 c0 	mov    DWORD PTR ds:0xc0023d78,0xc0015d31
c0016339:	c7 05 7c 3d 02 c0 48 58 01 c0 	mov    DWORD PTR ds:0xc0023d7c,0xc0015848
c0016343:	c7 05 80 3d 02 c0 58 5d 01 c0 	mov    DWORD PTR ds:0xc0023d80,0xc0015d58
c001634d:	c7 05 84 3d 02 c0 bd 5c 01 c0 	mov    DWORD PTR ds:0xc0023d84,0xc0015cbd
c0016357:	c7 05 88 3d 02 c0 b0 5d 01 c0 	mov    DWORD PTR ds:0xc0023d88,0xc0015db0
c0016361:	c7 05 8c 3d 02 c0 6f 54 01 c0 	mov    DWORD PTR ds:0xc0023d8c,0xc001546f
c001636b:	c7 05 90 3d 02 c0 d9 54 01 c0 	mov    DWORD PTR ds:0xc0023d90,0xc00154d9
c0016375:	c7 05 94 3d 02 c0 1f 55 01 c0 	mov    DWORD PTR ds:0xc0023d94,0xc001551f
c001637f:	c7 05 98 3d 02 c0 cf 5e 01 c0 	mov    DWORD PTR ds:0xc0023d98,0xc0015ecf
c0016389:	c7 05 9c 3d 02 c0 2f 5f 01 c0 	mov    DWORD PTR ds:0xc0023d9c,0xc0015f2f
c0016393:	c7 05 a0 3d 02 c0 70 55 01 c0 	mov    DWORD PTR ds:0xc0023da0,0xc0015570
c001639d:	c7 05 a4 3d 02 c0 55 5f 01 c0 	mov    DWORD PTR ds:0xc0023da4,0xc0015f55
c00163a7:	c7 05 a8 3d 02 c0 9a 5f 01 c0 	mov    DWORD PTR ds:0xc0023da8,0xc0015f9a
c00163b1:	c7 05 ac 3d 02 c0 2b 52 01 c0 	mov    DWORD PTR ds:0xc0023dac,0xc001522b
c00163bb:	c3                   	ret    

c00163bc <systemCall(regs*, void*)>:
c00163bc:	53                   	push   ebx
c00163bd:	83 ec 08             	sub    esp,0x8
c00163c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163c4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00163c7:	83 f8 7f             	cmp    eax,0x7f
c00163ca:	77 30                	ja     c00163fc <systemCall(regs*, void*)+0x40>
c00163cc:	83 3c 85 00 3d 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdc300],0x0
c00163d4:	74 26                	je     c00163fc <systemCall(regs*, void*)+0x40>
c00163d6:	51                   	push   ecx
c00163d7:	51                   	push   ecx
c00163d8:	50                   	push   eax
c00163d9:	68 5a 16 02 c0       	push   0xc002165a
c00163de:	e8 6c 89 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00163e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00163e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163e9:	ff 14 85 00 3d 02 c0 	call   DWORD PTR [eax*4-0x3ffdc300]
c00163f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00163f3:	c7 04 24 68 16 02 c0 	mov    DWORD PTR [esp],0xc0021668
c00163fa:	eb 08                	jmp    c0016404 <systemCall(regs*, void*)+0x48>
c00163fc:	52                   	push   edx
c00163fd:	52                   	push   edx
c00163fe:	50                   	push   eax
c00163ff:	68 77 16 02 c0       	push   0xc0021677
c0016404:	e8 46 89 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0016409:	83 c4 10             	add    esp,0x10
c001640c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016411:	31 d2                	xor    edx,edx
c0016413:	83 c4 08             	add    esp,0x8
c0016416:	5b                   	pop    ebx
c0016417:	c3                   	ret    

c0016418 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016418:	55                   	push   ebp
c0016419:	89 e5                	mov    ebp,esp
c001641b:	57                   	push   edi
c001641c:	56                   	push   esi
c001641d:	53                   	push   ebx
c001641e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016424:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016427:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001642a:	85 c0                	test   eax,eax
c001642c:	0f 95 c1             	setne  cl
c001642f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016433:	0f 94 c2             	sete   dl
c0016436:	84 d1                	test   cl,dl
c0016438:	74 26                	je     c0016460 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001643a:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016441:	74 1d                	je     c0016460 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016443:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0016446:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001644c:	89 d6                	mov    esi,edx
c001644e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016454:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001645a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001645d:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c0016460:	83 ec 0c             	sub    esp,0xc
c0016463:	05 ff 0f 00 00       	add    eax,0xfff
c0016468:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001646b:	6a 01                	push   0x1
c001646d:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016473:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016479:	e8 77 79 ff ff       	call   c000ddf5 <Virt::allocateKernelVirtualPages(int)>
c001647e:	83 c4 10             	add    esp,0x10
c0016481:	89 c6                	mov    esi,eax
c0016483:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016489:	0f 86 21 01 00 00    	jbe    c00165b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001648f:	c1 eb 0c             	shr    ebx,0xc
c0016492:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001649c:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c00164a2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00164a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00164a8:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c00164ae:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c00164b1:	29 d8                	sub    eax,ebx
c00164b3:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c00164b9:	0f 83 f4 00 00 00    	jae    c00165b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c00164bf:	83 ec 0c             	sub    esp,0xc
c00164c2:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00164c8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00164cb:	3d 00 10 00 00       	cmp    eax,0x1000
c00164d0:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00164d2:	52                   	push   edx
c00164d3:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00164d9:	52                   	push   edx
c00164da:	76 05                	jbe    c00164e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00164dc:	b8 00 10 00 00       	mov    eax,0x1000
c00164e1:	31 d2                	xor    edx,edx
c00164e3:	52                   	push   edx
c00164e4:	50                   	push   eax
c00164e5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00164e8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00164eb:	83 c4 20             	add    esp,0x20
c00164ee:	85 c0                	test   eax,eax
c00164f0:	74 1f                	je     c0016511 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00164f2:	51                   	push   ecx
c00164f3:	51                   	push   ecx
c00164f4:	50                   	push   eax
c00164f5:	68 7c 17 02 c0       	push   0xc002177c
c00164fa:	e8 50 88 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00164ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0016502:	e8 48 7c ff ff       	call   c000e14f <Virt::freeKernelVirtualPages(unsigned long)>
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	31 c0                	xor    eax,eax
c001650c:	e9 7c 01 00 00       	jmp    c001668d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0016511:	e8 1a 14 00 00       	call   c0017930 <lockScheduler()>
c0016516:	e8 ad 5c ff ff       	call   c000c1c8 <Phys::allocatePage()>
c001651b:	6a 07                	push   0x7
c001651d:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016523:	56                   	push   esi
c0016524:	50                   	push   eax
c0016525:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001652b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001652e:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016534:	e8 17 7f ff ff       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016539:	83 c4 0c             	add    esp,0xc
c001653c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016542:	6a 00                	push   0x0
c0016544:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001654a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001654d:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016553:	e8 56 7d ff ff       	call   c000e2ae <VAS::mapOtherVASIn(bool, VAS*)>
c0016558:	58                   	pop    eax
c0016559:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001655f:	5a                   	pop    edx
c0016560:	68 07 04 00 00       	push   0x407
c0016565:	53                   	push   ebx
c0016566:	81 c3 00 10 00 00    	add    ebx,0x1000
c001656c:	50                   	push   eax
c001656d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016573:	6a 00                	push   0x0
c0016575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001657a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001657d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016583:	e8 7e 82 ff ff       	call   c000e806 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016588:	83 c4 1c             	add    esp,0x1c
c001658b:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016591:	68 00 10 00 00       	push   0x1000
c0016596:	50                   	push   eax
c0016597:	56                   	push   esi
c0016598:	e8 35 a0 fe ff       	call   c00005d2 <memcpy>
c001659d:	e8 90 13 00 00       	call   c0017932 <unlockScheduler()>
c00165a2:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c00165a8:	83 c4 10             	add    esp,0x10
c00165ab:	e9 f5 fe ff ff       	jmp    c00164a5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c00165b0:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00165b3:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c00165bd:	0f 86 bc 00 00 00    	jbe    c001667f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c00165c3:	e8 68 13 00 00       	call   c0017930 <lockScheduler()>
c00165c8:	51                   	push   ecx
c00165c9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00165cf:	6a 00                	push   0x0
c00165d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165d9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00165df:	e8 ca 7c ff ff       	call   c000e2ae <VAS::mapOtherVASIn(bool, VAS*)>
c00165e4:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	c1 e8 0c             	shr    eax,0xc
c00165f0:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00165fa:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016600:	e8 c3 5b ff ff       	call   c000c1c8 <Phys::allocatePage()>
c0016605:	6a 07                	push   0x7
c0016607:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001660d:	56                   	push   esi
c001660e:	50                   	push   eax
c001660f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016615:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016618:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001661e:	e8 2d 7e ff ff       	call   c000e450 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016623:	58                   	pop    eax
c0016624:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001662a:	5a                   	pop    edx
c001662b:	68 07 04 00 00       	push   0x407
c0016630:	53                   	push   ebx
c0016631:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016637:	50                   	push   eax
c0016638:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001663e:	6a 00                	push   0x0
c0016640:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016645:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016648:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001664e:	e8 b3 81 ff ff       	call   c000e806 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016653:	83 c4 1c             	add    esp,0x1c
c0016656:	68 00 10 00 00       	push   0x1000
c001665b:	6a 00                	push   0x0
c001665d:	56                   	push   esi
c001665e:	e8 a5 9f fe ff       	call   c0000608 <memset>
c0016663:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016669:	83 c4 10             	add    esp,0x10
c001666c:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016672:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016678:	77 86                	ja     c0016600 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001667a:	e8 b3 12 00 00       	call   c0017932 <unlockScheduler()>
c001667f:	83 ec 0c             	sub    esp,0xc
c0016682:	56                   	push   esi
c0016683:	e8 c7 7a ff ff       	call   c000e14f <Virt::freeKernelVirtualPages(unsigned long)>
c0016688:	83 c4 10             	add    esp,0x10
c001668b:	b0 01                	mov    al,0x1
c001668d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0016690:	5b                   	pop    ebx
c0016691:	5e                   	pop    esi
c0016692:	5f                   	pop    edi
c0016693:	5d                   	pop    ebp
c0016694:	c3                   	ret    

c0016695 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016695:	55                   	push   ebp
c0016696:	57                   	push   edi
c0016697:	56                   	push   esi
c0016698:	53                   	push   ebx
c0016699:	83 ec 48             	sub    esp,0x48
c001669c:	68 14 01 00 00       	push   0x114
c00166a1:	e8 ba 85 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00166a6:	83 c4 0c             	add    esp,0xc
c00166a9:	89 c6                	mov    esi,eax
c00166ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00166af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00166b3:	50                   	push   eax
c00166b4:	e8 c5 8b ff ff       	call   c000f27e <File::File(char const*, Process*)>
c00166b9:	58                   	pop    eax
c00166ba:	5a                   	pop    edx
c00166bb:	6a 01                	push   0x1
c00166bd:	56                   	push   esi
c00166be:	e8 1f 8c ff ff       	call   c000f2e2 <File::open(FileOpenMode)>
c00166c3:	83 c4 10             	add    esp,0x10
c00166c6:	85 c0                	test   eax,eax
c00166c8:	0f 85 47 01 00 00    	jne    c0016815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00166ce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00166d6:	83 ec 0c             	sub    esp,0xc
c00166d9:	6a 34                	push   0x34
c00166db:	e8 3e 55 ff ff       	call   c000bc1e <malloc>
c00166e0:	89 c3                	mov    ebx,eax
c00166e2:	58                   	pop    eax
c00166e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00166e5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00166e9:	57                   	push   edi
c00166ea:	53                   	push   ebx
c00166eb:	6a 00                	push   0x0
c00166ed:	6a 34                	push   0x34
c00166ef:	56                   	push   esi
c00166f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00166f3:	83 c4 20             	add    esp,0x20
c00166f6:	85 c0                	test   eax,eax
c00166f8:	0f 85 17 01 00 00    	jne    c0016815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00166fe:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016704:	0f 85 0b 01 00 00    	jne    c0016815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001670a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001670d:	85 c0                	test   eax,eax
c001670f:	0f 84 00 01 00 00    	je     c0016815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016715:	31 d2                	xor    edx,edx
c0016717:	55                   	push   ebp
c0016718:	52                   	push   edx
c0016719:	50                   	push   eax
c001671a:	56                   	push   esi
c001671b:	e8 80 8c ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016720:	83 c4 10             	add    esp,0x10
c0016723:	85 c0                	test   eax,eax
c0016725:	0f 85 ea 00 00 00    	jne    c0016815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001672b:	83 ec 0c             	sub    esp,0xc
c001672e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016731:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016739:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001673d:	0f af c2             	imul   eax,edx
c0016740:	50                   	push   eax
c0016741:	e8 d8 54 ff ff       	call   c000bc1e <malloc>
c0016746:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016749:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001674d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001674f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016753:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016757:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001675b:	0f af c2             	imul   eax,edx
c001675e:	99                   	cdq    
c001675f:	52                   	push   edx
c0016760:	50                   	push   eax
c0016761:	56                   	push   esi
c0016762:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016765:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016768:	83 c4 20             	add    esp,0x20
c001676b:	85 c0                	test   eax,eax
c001676d:	0f 84 a2 00 00 00    	je     c0016815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016773:	31 d2                	xor    edx,edx
c0016775:	51                   	push   ecx
c0016776:	52                   	push   edx
c0016777:	50                   	push   eax
c0016778:	56                   	push   esi
c0016779:	e8 22 8c ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	85 c0                	test   eax,eax
c0016783:	0f 85 8c 00 00 00    	jne    c0016815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016789:	83 ec 0c             	sub    esp,0xc
c001678c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016790:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016794:	31 ed                	xor    ebp,ebp
c0016796:	0f af c2             	imul   eax,edx
c0016799:	50                   	push   eax
c001679a:	e8 7f 54 ff ff       	call   c000bc1e <malloc>
c001679f:	89 3c 24             	mov    DWORD PTR [esp],edi
c00167a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167a6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00167a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ac:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00167b0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00167b4:	0f af c2             	imul   eax,edx
c00167b7:	99                   	cdq    
c00167b8:	52                   	push   edx
c00167b9:	50                   	push   eax
c00167ba:	56                   	push   esi
c00167bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00167be:	83 c4 20             	add    esp,0x20
c00167c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167c9:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00167cd:	0f 86 80 00 00 00    	jbe    c0016853 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00167d3:	0f b7 fd             	movzx  edi,bp
c00167d6:	c1 e7 05             	shl    edi,0x5
c00167d9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00167dd:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00167e0:	75 6b                	jne    c001684d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00167e2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00167e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167e9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00167ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167f0:	52                   	push   edx
c00167f1:	31 d2                	xor    edx,edx
c00167f3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00167f6:	52                   	push   edx
c00167f7:	50                   	push   eax
c00167f8:	56                   	push   esi
c00167f9:	e8 a2 8b ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c00167fe:	83 c4 10             	add    esp,0x10
c0016801:	85 c0                	test   eax,eax
c0016803:	74 17                	je     c001681c <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016805:	83 ec 0c             	sub    esp,0xc
c0016808:	68 a7 17 02 c0       	push   0xc00217a7
c001680d:	e8 3d 85 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0016812:	83 c4 10             	add    esp,0x10
c0016815:	31 c0                	xor    eax,eax
c0016817:	e9 87 00 00 00       	jmp    c00168a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001681c:	83 ec 0c             	sub    esp,0xc
c001681f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016822:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016825:	50                   	push   eax
c0016826:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001682a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001682e:	56                   	push   esi
c001682f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016833:	e8 e0 fb ff ff       	call   c0016418 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016838:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001683c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016840:	83 c4 20             	add    esp,0x20
c0016843:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016847:	73 04                	jae    c001684d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001684d:	45                   	inc    ebp
c001684e:	e9 76 ff ff ff       	jmp    c00167c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016853:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016857:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001685b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001685f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016865:	83 ec 0c             	sub    esp,0xc
c0016868:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001686e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016873:	05 00 10 00 00       	add    eax,0x1000
c0016878:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001687b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001687f:	e8 aa 53 ff ff       	call   c000bc2e <free>
c0016884:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016887:	e8 a2 53 ff ff       	call   c000bc2e <free>
c001688c:	58                   	pop    eax
c001688d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016891:	e8 98 53 ff ff       	call   c000bc2e <free>
c0016896:	89 34 24             	mov    DWORD PTR [esp],esi
c0016899:	e8 a2 8a ff ff       	call   c000f340 <File::close()>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	b0 01                	mov    al,0x1
c00168a3:	83 c4 3c             	add    esp,0x3c
c00168a6:	5b                   	pop    ebx
c00168a7:	5e                   	pop    esi
c00168a8:	5f                   	pop    edi
c00168a9:	5d                   	pop    ebp
c00168aa:	c3                   	ret    

c00168ab <Thr::runtimeReferenceHelper()>:
c00168ab:	83 ec 18             	sub    esp,0x18
c00168ae:	68 af 17 02 c0       	push   0xc00217af
c00168b3:	e8 97 84 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00168b8:	fa                   	cli    
c00168b9:	83 c4 10             	add    esp,0x10
c00168bc:	eb fe                	jmp    c00168bc <Thr::runtimeReferenceHelper()+0x11>

c00168be <Thr::getAddressOfKernelSymbol(char const*)>:
c00168be:	57                   	push   edi
c00168bf:	56                   	push   esi
c00168c0:	53                   	push   ebx
c00168c1:	31 db                	xor    ebx,ebx
c00168c3:	39 1d a0 46 02 c0    	cmp    DWORD PTR ds:0xc00246a0,ebx
c00168c9:	7e 3c                	jle    c0016907 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00168cb:	8b 34 9d 20 46 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb9e0]
c00168d2:	31 ff                	xor    edi,edi
c00168d4:	39 3c 9d 20 45 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdbae0],edi
c00168db:	7e 27                	jle    c0016904 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00168dd:	50                   	push   eax
c00168de:	50                   	push   eax
c00168df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00168e5:	03 04 9d a0 45 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdba60]
c00168ec:	50                   	push   eax
c00168ed:	e8 06 9e fe ff       	call   c00006f8 <strcmp>
c00168f2:	83 c4 10             	add    esp,0x10
c00168f5:	85 c0                	test   eax,eax
c00168f7:	75 05                	jne    c00168fe <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00168f9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00168fc:	eb 0b                	jmp    c0016909 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00168fe:	83 c6 10             	add    esi,0x10
c0016901:	47                   	inc    edi
c0016902:	eb d0                	jmp    c00168d4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016904:	43                   	inc    ebx
c0016905:	eb bc                	jmp    c00168c3 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016907:	31 c0                	xor    eax,eax
c0016909:	5b                   	pop    ebx
c001690a:	5e                   	pop    esi
c001690b:	5f                   	pop    edi
c001690c:	c3                   	ret    

c001690d <Thr::loadKernelSymbolTable(char const*)>:
c001690d:	55                   	push   ebp
c001690e:	57                   	push   edi
c001690f:	56                   	push   esi
c0016910:	53                   	push   ebx
c0016911:	83 ec 68             	sub    esp,0x68
c0016914:	8b 35 f4 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f4
c001691a:	68 14 01 00 00       	push   0x114
c001691f:	e8 3c 83 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0016924:	83 c4 0c             	add    esp,0xc
c0016927:	89 c3                	mov    ebx,eax
c0016929:	56                   	push   esi
c001692a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001692e:	50                   	push   eax
c001692f:	e8 4a 89 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0016934:	5e                   	pop    esi
c0016935:	5f                   	pop    edi
c0016936:	6a 01                	push   0x1
c0016938:	53                   	push   ebx
c0016939:	e8 a4 89 ff ff       	call   c000f2e2 <File::open(FileOpenMode)>
c001693e:	83 c4 10             	add    esp,0x10
c0016941:	31 d2                	xor    edx,edx
c0016943:	85 c0                	test   eax,eax
c0016945:	0f 85 79 02 00 00    	jne    c0016bc4 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001694b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016953:	83 ec 0c             	sub    esp,0xc
c0016956:	6a 34                	push   0x34
c0016958:	e8 c1 52 ff ff       	call   c000bc1e <malloc>
c001695d:	59                   	pop    ecx
c001695e:	89 c7                	mov    edi,eax
c0016960:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016964:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016966:	56                   	push   esi
c0016967:	57                   	push   edi
c0016968:	6a 00                	push   0x0
c001696a:	6a 34                	push   0x34
c001696c:	53                   	push   ebx
c001696d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016970:	83 c4 20             	add    esp,0x20
c0016973:	85 c0                	test   eax,eax
c0016975:	74 17                	je     c001698e <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016977:	83 ec 0c             	sub    esp,0xc
c001697a:	68 d1 17 02 c0       	push   0xc00217d1
c001697f:	e8 60 e0 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0016984:	83 c4 10             	add    esp,0x10
c0016987:	31 d2                	xor    edx,edx
c0016989:	e9 36 02 00 00       	jmp    c0016bc4 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001698e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016994:	75 e1                	jne    c0016977 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016996:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016999:	85 c0                	test   eax,eax
c001699b:	74 da                	je     c0016977 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001699d:	52                   	push   edx
c001699e:	31 d2                	xor    edx,edx
c00169a0:	52                   	push   edx
c00169a1:	50                   	push   eax
c00169a2:	53                   	push   ebx
c00169a3:	e8 f8 89 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c00169a8:	83 c4 10             	add    esp,0x10
c00169ab:	85 c0                	test   eax,eax
c00169ad:	75 c8                	jne    c0016977 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00169b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00169ba:	31 ed                	xor    ebp,ebp
c00169bc:	0f af c2             	imul   eax,edx
c00169bf:	50                   	push   eax
c00169c0:	e8 59 52 ff ff       	call   c000bc1e <malloc>
c00169c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00169c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00169cc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00169ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00169d2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00169d6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00169da:	0f af c2             	imul   eax,edx
c00169dd:	99                   	cdq    
c00169de:	52                   	push   edx
c00169df:	50                   	push   eax
c00169e0:	53                   	push   ebx
c00169e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169e4:	83 c4 20             	add    esp,0x20
c00169e7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00169ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00169f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00169ff:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a07:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016a0b:	0f 86 aa 00 00 00    	jbe    c0016abb <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016a11:	0f b7 f5             	movzx  esi,bp
c0016a14:	6b f6 28             	imul   esi,esi,0x28
c0016a17:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016a1b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016a1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a22:	50                   	push   eax
c0016a23:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016a27:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016a2b:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a2d:	6b c0 28             	imul   eax,eax,0x28
c0016a30:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016a34:	89 d0                	mov    eax,edx
c0016a36:	31 d2                	xor    edx,edx
c0016a38:	52                   	push   edx
c0016a39:	50                   	push   eax
c0016a3a:	53                   	push   ebx
c0016a3b:	e8 60 89 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016a40:	83 c4 0c             	add    esp,0xc
c0016a43:	6a 20                	push   0x20
c0016a45:	6a 00                	push   0x0
c0016a47:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016a4b:	52                   	push   edx
c0016a4c:	e8 b7 9b fe ff       	call   c0000608 <memset>
c0016a51:	58                   	pop    eax
c0016a52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a54:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016a58:	51                   	push   ecx
c0016a59:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016a5d:	52                   	push   edx
c0016a5e:	6a 00                	push   0x0
c0016a60:	6a 1f                	push   0x1f
c0016a62:	53                   	push   ebx
c0016a63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a66:	83 c4 18             	add    esp,0x18
c0016a69:	68 e8 17 02 c0       	push   0xc00217e8
c0016a6e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016a72:	52                   	push   edx
c0016a73:	e8 80 9c fe ff       	call   c00006f8 <strcmp>
c0016a78:	83 c4 10             	add    esp,0x10
c0016a7b:	85 c0                	test   eax,eax
c0016a7d:	75 0f                	jne    c0016a8e <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016a7f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016a82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a8e:	50                   	push   eax
c0016a8f:	50                   	push   eax
c0016a90:	68 f0 17 02 c0       	push   0xc00217f0
c0016a95:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016a99:	50                   	push   eax
c0016a9a:	e8 59 9c fe ff       	call   c00006f8 <strcmp>
c0016a9f:	83 c4 10             	add    esp,0x10
c0016aa2:	85 c0                	test   eax,eax
c0016aa4:	75 0f                	jne    c0016ab5 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016aa6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016aa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016aad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ab1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ab5:	45                   	inc    ebp
c0016ab6:	e9 4c ff ff ff       	jmp    c0016a07 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016abb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016ac0:	75 10                	jne    c0016ad2 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016ac2:	83 ec 0c             	sub    esp,0xc
c0016ac5:	68 f8 17 02 c0       	push   0xc00217f8
c0016aca:	e8 15 df ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016ad7:	75 10                	jne    c0016ae9 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016ad9:	83 ec 0c             	sub    esp,0xc
c0016adc:	68 f8 17 02 c0       	push   0xc00217f8
c0016ae1:	e8 fe de ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0016ae6:	83 c4 10             	add    esp,0x10
c0016ae9:	31 d2                	xor    edx,edx
c0016aeb:	50                   	push   eax
c0016aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016af0:	52                   	push   edx
c0016af1:	50                   	push   eax
c0016af2:	53                   	push   ebx
c0016af3:	e8 a8 88 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016af8:	5a                   	pop    edx
c0016af9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016afd:	e8 1c 51 ff ff       	call   c000bc1e <malloc>
c0016b02:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b0a:	89 c1                	mov    ecx,eax
c0016b0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016b10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b14:	5e                   	pop    esi
c0016b15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b17:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016b1b:	55                   	push   ebp
c0016b1c:	51                   	push   ecx
c0016b1d:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016b21:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b29:	53                   	push   ebx
c0016b2a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b2d:	83 c4 14             	add    esp,0x14
c0016b30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016b34:	e8 e5 50 ff ff       	call   c000bc1e <malloc>
c0016b39:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b3c:	89 c6                	mov    esi,eax
c0016b3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b40:	56                   	push   esi
c0016b41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b49:	53                   	push   ebx
c0016b4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b51:	8b 15 a0 46 02 c0    	mov    edx,DWORD PTR ds:0xc00246a0
c0016b57:	83 c4 1c             	add    esp,0x1c
c0016b5a:	c1 e8 04             	shr    eax,0x4
c0016b5d:	89 04 95 20 45 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbae0],eax
c0016b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b68:	31 d2                	xor    edx,edx
c0016b6a:	52                   	push   edx
c0016b6b:	50                   	push   eax
c0016b6c:	53                   	push   ebx
c0016b6d:	e8 2e 88 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016b72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b75:	31 d2                	xor    edx,edx
c0016b77:	56                   	push   esi
c0016b78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b7c:	52                   	push   edx
c0016b7d:	50                   	push   eax
c0016b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b80:	53                   	push   ebx
c0016b81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b84:	83 c4 14             	add    esp,0x14
c0016b87:	53                   	push   ebx
c0016b88:	e8 b3 87 ff ff       	call   c000f340 <File::close()>
c0016b8d:	5d                   	pop    ebp
c0016b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b92:	e8 97 50 ff ff       	call   c000bc2e <free>
c0016b97:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016b9a:	e8 8f 50 ff ff       	call   c000bc2e <free>
c0016b9f:	a1 a0 46 02 c0       	mov    eax,ds:0xc00246a0
c0016ba4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016ba8:	8d 50 01             	lea    edx,[eax+0x1]
c0016bab:	89 0c 85 20 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb9e0],ecx
c0016bb2:	89 15 a0 46 02 c0    	mov    DWORD PTR ds:0xc00246a0,edx
c0016bb8:	89 34 85 a0 45 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba60],esi
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	b2 01                	mov    dl,0x1
c0016bc4:	83 c4 5c             	add    esp,0x5c
c0016bc7:	88 d0                	mov    al,dl
c0016bc9:	5b                   	pop    ebx
c0016bca:	5e                   	pop    esi
c0016bcb:	5f                   	pop    edi
c0016bcc:	5d                   	pop    ebp
c0016bcd:	c3                   	ret    

c0016bce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016bce:	55                   	push   ebp
c0016bcf:	57                   	push   edi
c0016bd0:	56                   	push   esi
c0016bd1:	53                   	push   ebx
c0016bd2:	81 ec 68 03 00 00    	sub    esp,0x368
c0016bd8:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016bdf:	8b 1d f4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246f4
c0016be5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016be9:	68 14 01 00 00       	push   0x114
c0016bee:	e8 6d 80 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0016bf3:	83 c4 0c             	add    esp,0xc
c0016bf6:	89 c5                	mov    ebp,eax
c0016bf8:	53                   	push   ebx
c0016bf9:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016c00:	50                   	push   eax
c0016c01:	e8 78 86 ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0016c06:	58                   	pop    eax
c0016c07:	5a                   	pop    edx
c0016c08:	6a 01                	push   0x1
c0016c0a:	55                   	push   ebp
c0016c0b:	e8 d2 86 ff ff       	call   c000f2e2 <File::open(FileOpenMode)>
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	85 c0                	test   eax,eax
c0016c15:	0f 85 f2 06 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c1b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016c23:	83 ec 0c             	sub    esp,0xc
c0016c26:	6a 34                	push   0x34
c0016c28:	e8 f1 4f ff ff       	call   c000bc1e <malloc>
c0016c2d:	89 c7                	mov    edi,eax
c0016c2f:	58                   	pop    eax
c0016c30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016c33:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016c37:	53                   	push   ebx
c0016c38:	57                   	push   edi
c0016c39:	6a 00                	push   0x0
c0016c3b:	6a 34                	push   0x34
c0016c3d:	55                   	push   ebp
c0016c3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c41:	83 c4 20             	add    esp,0x20
c0016c44:	85 c0                	test   eax,eax
c0016c46:	0f 85 c1 06 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c4c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016c52:	0f 85 b5 06 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c58:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016c5b:	85 c0                	test   eax,eax
c0016c5d:	0f 84 aa 06 00 00    	je     c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c63:	31 d2                	xor    edx,edx
c0016c65:	56                   	push   esi
c0016c66:	52                   	push   edx
c0016c67:	50                   	push   eax
c0016c68:	55                   	push   ebp
c0016c69:	e8 32 87 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016c6e:	83 c4 10             	add    esp,0x10
c0016c71:	85 c0                	test   eax,eax
c0016c73:	0f 85 94 06 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016c79:	83 ec 0c             	sub    esp,0xc
c0016c7c:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016c7f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016c87:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c8b:	0f af c2             	imul   eax,edx
c0016c8e:	50                   	push   eax
c0016c8f:	e8 8a 4f ff ff       	call   c000bc1e <malloc>
c0016c94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c9b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ca6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016caa:	0f af c2             	imul   eax,edx
c0016cad:	99                   	cdq    
c0016cae:	52                   	push   edx
c0016caf:	50                   	push   eax
c0016cb0:	55                   	push   ebp
c0016cb1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cb4:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016cb7:	83 c4 20             	add    esp,0x20
c0016cba:	85 c0                	test   eax,eax
c0016cbc:	0f 84 4b 06 00 00    	je     c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016cc2:	31 d2                	xor    edx,edx
c0016cc4:	51                   	push   ecx
c0016cc5:	52                   	push   edx
c0016cc6:	50                   	push   eax
c0016cc7:	55                   	push   ebp
c0016cc8:	e8 d3 86 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016ccd:	83 c4 10             	add    esp,0x10
c0016cd0:	85 c0                	test   eax,eax
c0016cd2:	0f 85 35 06 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016cd8:	83 ec 0c             	sub    esp,0xc
c0016cdb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016cdf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016ce3:	31 f6                	xor    esi,esi
c0016ce5:	0f af c2             	imul   eax,edx
c0016ce8:	50                   	push   eax
c0016ce9:	e8 30 4f ff ff       	call   c000bc1e <malloc>
c0016cee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016cf1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016cf5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016cf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016cfc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016d00:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016d04:	0f af c2             	imul   eax,edx
c0016d07:	99                   	cdq    
c0016d08:	52                   	push   edx
c0016d09:	50                   	push   eax
c0016d0a:	55                   	push   ebp
c0016d0b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d0e:	83 c4 20             	add    esp,0x20
c0016d11:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016d15:	0f 86 8a 00 00 00    	jbe    c0016da5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016d1b:	0f b7 de             	movzx  ebx,si
c0016d1e:	c1 e3 05             	shl    ebx,0x5
c0016d21:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016d25:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016d28:	75 75                	jne    c0016d9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016d2a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016d34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d38:	52                   	push   edx
c0016d39:	31 d2                	xor    edx,edx
c0016d3b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016d3e:	52                   	push   edx
c0016d3f:	50                   	push   eax
c0016d40:	55                   	push   ebp
c0016d41:	e8 5a 86 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016d46:	83 c4 10             	add    esp,0x10
c0016d49:	85 c0                	test   eax,eax
c0016d4b:	0f 85 bc 05 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016d51:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016d58:	31 d2                	xor    edx,edx
c0016d5a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016d5e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016d61:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016d65:	83 ec 0c             	sub    esp,0xc
c0016d68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d6c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016d73:	50                   	push   eax
c0016d74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d7c:	52                   	push   edx
c0016d7d:	50                   	push   eax
c0016d7e:	55                   	push   ebp
c0016d7f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d82:	83 c4 1c             	add    esp,0x1c
c0016d85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016d88:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016d8b:	50                   	push   eax
c0016d8c:	6a 00                	push   0x0
c0016d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d92:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016d96:	50                   	push   eax
c0016d97:	e8 6c 98 fe ff       	call   c0000608 <memset>
c0016d9c:	83 c4 10             	add    esp,0x10
c0016d9f:	46                   	inc    esi
c0016da0:	e9 6c ff ff ff       	jmp    c0016d11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016da5:	31 db                	xor    ebx,ebx
c0016da7:	50                   	push   eax
c0016da8:	68 00 01 00 00       	push   0x100
c0016dad:	6a 00                	push   0x0
c0016daf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016db3:	50                   	push   eax
c0016db4:	e8 4f 98 fe ff       	call   c0000608 <memset>
c0016db9:	83 c4 0c             	add    esp,0xc
c0016dbc:	68 00 01 00 00       	push   0x100
c0016dc1:	6a 00                	push   0x0
c0016dc3:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016dca:	50                   	push   eax
c0016dcb:	e8 38 98 fe ff       	call   c0000608 <memset>
c0016dd0:	83 c4 10             	add    esp,0x10
c0016dd3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ddb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016de3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016deb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016df3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016dfb:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016dff:	0f 86 30 01 00 00    	jbe    c0016f35 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016e05:	0f b7 f3             	movzx  esi,bx
c0016e08:	6b f6 28             	imul   esi,esi,0x28
c0016e0b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016e0f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016e12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e16:	50                   	push   eax
c0016e17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e1b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016e1f:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e21:	6b d2 28             	imul   edx,edx,0x28
c0016e24:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016e28:	31 d2                	xor    edx,edx
c0016e2a:	52                   	push   edx
c0016e2b:	50                   	push   eax
c0016e2c:	55                   	push   ebp
c0016e2d:	e8 6e 85 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016e32:	83 c4 0c             	add    esp,0xc
c0016e35:	6a 20                	push   0x20
c0016e37:	6a 00                	push   0x0
c0016e39:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016e40:	51                   	push   ecx
c0016e41:	e8 c2 97 fe ff       	call   c0000608 <memset>
c0016e46:	58                   	pop    eax
c0016e47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016e4e:	52                   	push   edx
c0016e4f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016e56:	51                   	push   ecx
c0016e57:	6a 00                	push   0x0
c0016e59:	6a 1f                	push   0x1f
c0016e5b:	55                   	push   ebp
c0016e5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e5f:	83 c4 1c             	add    esp,0x1c
c0016e62:	6a 09                	push   0x9
c0016e64:	68 12 18 02 c0       	push   0xc0021812
c0016e69:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016e70:	51                   	push   ecx
c0016e71:	e8 f9 96 fe ff       	call   c000056f <memcmp>
c0016e76:	83 c4 10             	add    esp,0x10
c0016e79:	85 c0                	test   eax,eax
c0016e7b:	75 21                	jne    c0016e9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016e7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e81:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016e85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e89:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016e8d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016e90:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016e97:	89 c8                	mov    eax,ecx
c0016e99:	40                   	inc    eax
c0016e9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e9e:	50                   	push   eax
c0016e9f:	6a 09                	push   0x9
c0016ea1:	68 1c 18 02 c0       	push   0xc002181c
c0016ea6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016ead:	50                   	push   eax
c0016eae:	e8 bc 96 fe ff       	call   c000056f <memcmp>
c0016eb3:	83 c4 10             	add    esp,0x10
c0016eb6:	85 c0                	test   eax,eax
c0016eb8:	75 21                	jne    c0016edb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ebe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ec6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016eca:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ecd:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016ed4:	89 c8                	mov    eax,ecx
c0016ed6:	40                   	inc    eax
c0016ed7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016edb:	50                   	push   eax
c0016edc:	50                   	push   eax
c0016edd:	68 e8 17 02 c0       	push   0xc00217e8
c0016ee2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016ee9:	50                   	push   eax
c0016eea:	e8 09 98 fe ff       	call   c00006f8 <strcmp>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	85 c0                	test   eax,eax
c0016ef4:	75 0f                	jne    c0016f05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0016ef6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ef9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f05:	50                   	push   eax
c0016f06:	50                   	push   eax
c0016f07:	68 f0 17 02 c0       	push   0xc00217f0
c0016f0c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f13:	50                   	push   eax
c0016f14:	e8 df 97 fe ff       	call   c00006f8 <strcmp>
c0016f19:	83 c4 10             	add    esp,0x10
c0016f1c:	85 c0                	test   eax,eax
c0016f1e:	75 0f                	jne    c0016f2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016f20:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f2b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f2f:	43                   	inc    ebx
c0016f30:	e9 c6 fe ff ff       	jmp    c0016dfb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0016f35:	31 d2                	xor    edx,edx
c0016f37:	50                   	push   eax
c0016f38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f3c:	52                   	push   edx
c0016f3d:	50                   	push   eax
c0016f3e:	55                   	push   ebp
c0016f3f:	e8 5c 84 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016f44:	5a                   	pop    edx
c0016f45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f49:	e8 d0 4c ff ff       	call   c000bc1e <malloc>
c0016f4e:	31 d2                	xor    edx,edx
c0016f50:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0016f54:	59                   	pop    ecx
c0016f55:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f58:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016f5c:	53                   	push   ebx
c0016f5d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f65:	52                   	push   edx
c0016f66:	50                   	push   eax
c0016f67:	55                   	push   ebp
c0016f68:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f6b:	83 c4 14             	add    esp,0x14
c0016f6e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f72:	e8 a7 4c ff ff       	call   c000bc1e <malloc>
c0016f77:	31 d2                	xor    edx,edx
c0016f79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f7d:	83 c4 0c             	add    esp,0xc
c0016f80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f84:	52                   	push   edx
c0016f85:	50                   	push   eax
c0016f86:	55                   	push   ebp
c0016f87:	e8 14 84 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016f8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f8f:	31 d2                	xor    edx,edx
c0016f91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f95:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f9c:	52                   	push   edx
c0016f9d:	50                   	push   eax
c0016f9e:	55                   	push   ebp
c0016f9f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fa2:	83 c4 20             	add    esp,0x20
c0016fa5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016fad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fb1:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0016fb5:	0f 84 56 03 00 00    	je     c0017311 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c0016fbb:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0016fc2:	31 d2                	xor    edx,edx
c0016fc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fc8:	c1 e8 03             	shr    eax,0x3
c0016fcb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016fcf:	50                   	push   eax
c0016fd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fd4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0016fd8:	52                   	push   edx
c0016fd9:	50                   	push   eax
c0016fda:	55                   	push   ebp
c0016fdb:	e8 c0 83 ff ff       	call   c000f3a0 <File::seek(unsigned long long)>
c0016fe0:	58                   	pop    eax
c0016fe1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016fe5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0016fec:	e8 2d 4c ff ff       	call   c000bc1e <malloc>
c0016ff1:	31 d2                	xor    edx,edx
c0016ff3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016ff7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ffa:	58                   	pop    eax
c0016ffb:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016fff:	50                   	push   eax
c0017000:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017004:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017008:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001700f:	52                   	push   edx
c0017010:	50                   	push   eax
c0017011:	55                   	push   ebp
c0017012:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017015:	83 c4 20             	add    esp,0x20
c0017018:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017020:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017024:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017028:	0f 8d c7 02 00 00    	jge    c00172f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001702e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017032:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017036:	31 db                	xor    ebx,ebx
c0017038:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001703b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001703f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017043:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017047:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001704b:	c1 e8 08             	shr    eax,0x8
c001704e:	89 c6                	mov    esi,eax
c0017050:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017054:	c1 e6 04             	shl    esi,0x4
c0017057:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001705b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001705e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017062:	85 c0                	test   eax,eax
c0017064:	0f 85 17 01 00 00    	jne    c0017181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001706a:	83 ec 0c             	sub    esp,0xc
c001706d:	b3 01                	mov    bl,0x1
c001706f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017073:	03 06                	add    eax,DWORD PTR [esi]
c0017075:	50                   	push   eax
c0017076:	e8 43 f8 ff ff       	call   c00168be <Thr::getAddressOfKernelSymbol(char const*)>
c001707b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001707f:	83 c4 10             	add    esp,0x10
c0017082:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017087:	0f 85 f4 00 00 00    	jne    c0017181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001708d:	50                   	push   eax
c001708e:	50                   	push   eax
c001708f:	68 26 18 02 c0       	push   0xc0021826
c0017094:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017098:	03 06                	add    eax,DWORD PTR [esi]
c001709a:	50                   	push   eax
c001709b:	e8 58 96 fe ff       	call   c00006f8 <strcmp>
c00170a0:	83 c4 10             	add    esp,0x10
c00170a3:	85 c0                	test   eax,eax
c00170a5:	75 0a                	jne    c00170b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c00170a7:	b8 dc e2 01 c0       	mov    eax,0xc001e2dc
c00170ac:	e9 ca 00 00 00       	jmp    c001717b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00170b1:	50                   	push   eax
c00170b2:	50                   	push   eax
c00170b3:	68 30 18 02 c0       	push   0xc0021830
c00170b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170bc:	03 06                	add    eax,DWORD PTR [esi]
c00170be:	50                   	push   eax
c00170bf:	e8 34 96 fe ff       	call   c00006f8 <strcmp>
c00170c4:	83 c4 10             	add    esp,0x10
c00170c7:	85 c0                	test   eax,eax
c00170c9:	75 0a                	jne    c00170d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c00170cb:	b8 10 e0 01 c0       	mov    eax,0xc001e010
c00170d0:	e9 a6 00 00 00       	jmp    c001717b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00170d5:	53                   	push   ebx
c00170d6:	53                   	push   ebx
c00170d7:	68 39 18 02 c0       	push   0xc0021839
c00170dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00170e0:	03 06                	add    eax,DWORD PTR [esi]
c00170e2:	50                   	push   eax
c00170e3:	e8 10 96 fe ff       	call   c00006f8 <strcmp>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	85 c0                	test   eax,eax
c00170ed:	75 0a                	jne    c00170f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c00170ef:	b8 dc e3 01 c0       	mov    eax,0xc001e3dc
c00170f4:	e9 82 00 00 00       	jmp    c001717b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00170f9:	51                   	push   ecx
c00170fa:	51                   	push   ecx
c00170fb:	68 43 18 02 c0       	push   0xc0021843
c0017100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017104:	03 06                	add    eax,DWORD PTR [esi]
c0017106:	50                   	push   eax
c0017107:	e8 ec 95 fe ff       	call   c00006f8 <strcmp>
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	85 c0                	test   eax,eax
c0017111:	74 63                	je     c0017176 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c0017113:	50                   	push   eax
c0017114:	50                   	push   eax
c0017115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017119:	03 06                	add    eax,DWORD PTR [esi]
c001711b:	50                   	push   eax
c001711c:	68 4c 18 02 c0       	push   0xc002184c
c0017121:	e8 29 7c ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017126:	58                   	pop    eax
c0017127:	5a                   	pop    edx
c0017128:	68 66 18 02 c0       	push   0xc0021866
c001712d:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017134:	53                   	push   ebx
c0017135:	e8 6d 95 fe ff       	call   c00006a7 <strcpy>
c001713a:	59                   	pop    ecx
c001713b:	58                   	pop    eax
c001713c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017140:	03 06                	add    eax,DWORD PTR [esi]
c0017142:	50                   	push   eax
c0017143:	53                   	push   ebx
c0017144:	e8 15 96 fe ff       	call   c000075e <strcat>
c0017149:	58                   	pop    eax
c001714a:	5a                   	pop    edx
c001714b:	68 fc 18 02 c0       	push   0xc00218fc
c0017150:	53                   	push   ebx
c0017151:	e8 08 96 fe ff       	call   c000075e <strcat>
c0017156:	83 c4 10             	add    esp,0x10
c0017159:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001715e:	0f 84 4b 01 00 00    	je     c00172af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017164:	83 ec 0c             	sub    esp,0xc
c0017167:	53                   	push   ebx
c0017168:	e8 77 d8 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001716d:	83 c4 10             	add    esp,0x10
c0017170:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017174:	eb 0b                	jmp    c0017181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017176:	b8 5c e1 01 c0       	mov    eax,0xc001e15c
c001717b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001717f:	b3 01                	mov    bl,0x1
c0017181:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017186:	0f 85 80 00 00 00    	jne    c001720c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001718c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017193:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017197:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001719b:	01 ce                	add    esi,ecx
c001719d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00171a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00171a7:	0f 94 c2             	sete   dl
c00171aa:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00171b2:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c00171b7:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c00171bb:	84 db                	test   bl,bl
c00171bd:	74 31                	je     c00171f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c00171bf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00171c3:	01 c3                	add    ebx,eax
c00171c5:	84 d2                	test   dl,dl
c00171c7:	75 0a                	jne    c00171d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c00171c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00171cd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00171d1:	76 32                	jbe    c0017205 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00171d3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00171d8:	0f 84 d1 00 00 00    	je     c00172af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	68 7d 18 02 c0       	push   0xc002187d
c00171e6:	e8 f9 d7 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c00171eb:	83 c4 10             	add    esp,0x10
c00171ee:	eb 15                	jmp    c0017205 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00171f0:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c00171f3:	84 d2                	test   dl,dl
c00171f5:	75 0e                	jne    c0017205 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c00171f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00171fb:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00171ff:	77 04                	ja     c0017205 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017201:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017205:	89 1e                	mov    DWORD PTR [esi],ebx
c0017207:	e9 e0 00 00 00       	jmp    c00172ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001720c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017211:	75 6e                	jne    c0017281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c0017213:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001721a:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001721e:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017222:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001722a:	74 17                	je     c0017243 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001722c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017234:	74 0d                	je     c0017243 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0017236:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001723a:	83 e8 04             	sub    eax,0x4
c001723d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017241:	76 17                	jbe    c001725a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c0017243:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017248:	74 65                	je     c00172af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001724a:	83 ec 0c             	sub    esp,0xc
c001724d:	68 99 18 02 c0       	push   0xc0021899
c0017252:	e8 8d d7 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0017257:	83 c4 10             	add    esp,0x10
c001725a:	8b 16                	mov    edx,DWORD PTR [esi]
c001725c:	84 db                	test   bl,bl
c001725e:	74 13                	je     c0017273 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0017260:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017264:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001726b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001726f:	01 d0                	add    eax,edx
c0017271:	eb 06                	jmp    c0017279 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017273:	89 d0                	mov    eax,edx
c0017275:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017279:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001727d:	89 06                	mov    DWORD PTR [esi],eax
c001727f:	eb 6b                	jmp    c00172ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017281:	50                   	push   eax
c0017282:	50                   	push   eax
c0017283:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017288:	50                   	push   eax
c0017289:	68 b5 18 02 c0       	push   0xc00218b5
c001728e:	e8 bc 7a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017293:	83 c4 10             	add    esp,0x10
c0017296:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001729b:	74 12                	je     c00172af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001729d:	83 ec 0c             	sub    esp,0xc
c00172a0:	68 c0 18 02 c0       	push   0xc00218c0
c00172a5:	e8 3a d7 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c00172aa:	83 c4 10             	add    esp,0x10
c00172ad:	eb 3d                	jmp    c00172ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c00172af:	83 ec 0c             	sub    esp,0xc
c00172b2:	55                   	push   ebp
c00172b3:	e8 88 80 ff ff       	call   c000f340 <File::close()>
c00172b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00172c1:	59                   	pop    ecx
c00172c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172c6:	e8 63 49 ff ff       	call   c000bc2e <free>
c00172cb:	5b                   	pop    ebx
c00172cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172d0:	e8 59 49 ff ff       	call   c000bc2e <free>
c00172d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00172d8:	e8 51 49 ff ff       	call   c000bc2e <free>
c00172dd:	5e                   	pop    esi
c00172de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00172e2:	e8 47 49 ff ff       	call   c000bc2e <free>
c00172e7:	83 c4 10             	add    esp,0x10
c00172ea:	eb 21                	jmp    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c00172ec:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00172f0:	e9 2b fd ff ff       	jmp    c0017020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00172f5:	83 ec 0c             	sub    esp,0xc
c00172f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00172fc:	e8 2d 49 ff ff       	call   c000bc2e <free>
c0017301:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	e9 a0 fc ff ff       	jmp    c0016fad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001730d:	31 c0                	xor    eax,eax
c001730f:	eb 33                	jmp    c0017344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c0017311:	83 ec 0c             	sub    esp,0xc
c0017314:	55                   	push   ebp
c0017315:	e8 26 80 ff ff       	call   c000f340 <File::close()>
c001731a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001731d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017320:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017323:	58                   	pop    eax
c0017324:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017328:	e8 01 49 ff ff       	call   c000bc2e <free>
c001732d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017330:	e8 f9 48 ff ff       	call   c000bc2e <free>
c0017335:	5a                   	pop    edx
c0017336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001733a:	e8 ef 48 ff ff       	call   c000bc2e <free>
c001733f:	83 c4 10             	add    esp,0x10
c0017342:	b0 01                	mov    al,0x1
c0017344:	81 c4 5c 03 00 00    	add    esp,0x35c
c001734a:	5b                   	pop    ebx
c001734b:	5e                   	pop    esi
c001734c:	5f                   	pop    edi
c001734d:	5d                   	pop    ebp
c001734e:	c3                   	ret    

c001734f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001734f:	56                   	push   esi
c0017350:	31 d2                	xor    edx,edx
c0017352:	53                   	push   ebx
c0017353:	8b 1d 00 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f00
c0017359:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001735d:	39 d3                	cmp    ebx,edx
c001735f:	7e 1b                	jle    c001737c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017361:	8b 04 95 20 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbee0]
c0017368:	39 c8                	cmp    eax,ecx
c001736a:	77 0d                	ja     c0017379 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001736c:	8b 34 95 20 3f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc0e0]
c0017373:	01 c6                	add    esi,eax
c0017375:	39 ce                	cmp    esi,ecx
c0017377:	77 05                	ja     c001737e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017379:	42                   	inc    edx
c001737a:	eb e1                	jmp    c001735d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001737c:	31 c0                	xor    eax,eax
c001737e:	5b                   	pop    ebx
c001737f:	5e                   	pop    esi
c0017380:	c3                   	ret    

c0017381 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017381:	53                   	push   ebx
c0017382:	31 c0                	xor    eax,eax
c0017384:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017388:	8b 1d 00 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023f00
c001738e:	39 c3                	cmp    ebx,eax
c0017390:	7e 22                	jle    c00173b4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017392:	8b 14 85 20 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbee0]
c0017399:	39 ca                	cmp    edx,ecx
c001739b:	77 14                	ja     c00173b1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001739d:	03 14 85 20 3f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc0e0]
c00173a4:	39 ca                	cmp    edx,ecx
c00173a6:	76 09                	jbe    c00173b1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00173a8:	8b 04 85 20 43 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbce0]
c00173af:	eb 05                	jmp    c00173b6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00173b1:	40                   	inc    eax
c00173b2:	eb da                	jmp    c001738e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00173b4:	31 c0                	xor    eax,eax
c00173b6:	5b                   	pop    ebx
c00173b7:	c3                   	ret    

c00173b8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00173b8:	53                   	push   ebx
c00173b9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00173bd:	53                   	push   ebx
c00173be:	e8 8c ff ff ff       	call   c001734f <Thr::getDriverBaseFromAddress(unsigned long)>
c00173c3:	5a                   	pop    edx
c00173c4:	31 d2                	xor    edx,edx
c00173c6:	85 c0                	test   eax,eax
c00173c8:	74 04                	je     c00173ce <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00173ca:	89 da                	mov    edx,ebx
c00173cc:	29 c2                	sub    edx,eax
c00173ce:	89 d0                	mov    eax,edx
c00173d0:	5b                   	pop    ebx
c00173d1:	c3                   	ret    

c00173d2 <Thr::loadDLL(char const*, bool)>:
c00173d2:	55                   	push   ebp
c00173d3:	57                   	push   edi
c00173d4:	56                   	push   esi
c00173d5:	53                   	push   ebx
c00173d6:	81 ec 24 01 00 00    	sub    esp,0x124
c00173dc:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00173e3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00173ea:	56                   	push   esi
c00173eb:	68 d8 18 02 c0       	push   0xc00218d8
c00173f0:	e8 5a 79 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00173f5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00173fc:	e8 5f 78 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0017401:	83 c4 0c             	add    esp,0xc
c0017404:	89 c3                	mov    ebx,eax
c0017406:	ff 35 f4 46 02 c0    	push   DWORD PTR ds:0xc00246f4
c001740c:	56                   	push   esi
c001740d:	50                   	push   eax
c001740e:	e8 6b 7e ff ff       	call   c000f27e <File::File(char const*, Process*)>
c0017413:	83 c4 0c             	add    esp,0xc
c0017416:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001741a:	50                   	push   eax
c001741b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001741f:	50                   	push   eax
c0017420:	53                   	push   ebx
c0017421:	e8 68 81 ff ff       	call   c000f58e <File::stat(unsigned long long*, bool*)>
c0017426:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017428:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001742b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001742e:	83 c4 10             	add    esp,0x10
c0017431:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0017436:	75 0a                	jne    c0017442 <Thr::loadDLL(char const*, bool)+0x70>
c0017438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001743c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0017440:	75 3e                	jne    c0017480 <Thr::loadDLL(char const*, bool)+0xae>
c0017442:	89 f8                	mov    eax,edi
c0017444:	31 db                	xor    ebx,ebx
c0017446:	84 c0                	test   al,al
c0017448:	0f 84 ca 00 00 00    	je     c0017518 <Thr::loadDLL(char const*, bool)+0x146>
c001744e:	50                   	push   eax
c001744f:	50                   	push   eax
c0017450:	68 e9 18 02 c0       	push   0xc00218e9
c0017455:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0017459:	53                   	push   ebx
c001745a:	e8 48 92 fe ff       	call   c00006a7 <strcpy>
c001745f:	58                   	pop    eax
c0017460:	5a                   	pop    edx
c0017461:	56                   	push   esi
c0017462:	53                   	push   ebx
c0017463:	e8 f6 92 fe ff       	call   c000075e <strcat>
c0017468:	59                   	pop    ecx
c0017469:	5d                   	pop    ebp
c001746a:	68 fc 18 02 c0       	push   0xc00218fc
c001746f:	53                   	push   ebx
c0017470:	e8 e9 92 fe ff       	call   c000075e <strcat>
c0017475:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017478:	e8 67 d5 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001747d:	83 c4 10             	add    esp,0x10
c0017480:	83 ec 0c             	sub    esp,0xc
c0017483:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017487:	e8 92 47 ff ff       	call   c000bc1e <malloc>
c001748c:	89 34 24             	mov    DWORD PTR [esp],esi
c001748f:	89 c3                	mov    ebx,eax
c0017491:	e8 8f 91 fe ff       	call   c0000625 <strlen>
c0017496:	8b 2d 00 3f 02 c0    	mov    ebp,DWORD PTR ds:0xc0023f00
c001749c:	40                   	inc    eax
c001749d:	89 04 24             	mov    DWORD PTR [esp],eax
c00174a0:	e8 79 47 ff ff       	call   c000bc1e <malloc>
c00174a5:	89 04 ad 20 43 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdbce0],eax
c00174ac:	58                   	pop    eax
c00174ad:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c00174b2:	5a                   	pop    edx
c00174b3:	56                   	push   esi
c00174b4:	ff 34 85 20 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce0]
c00174bb:	e8 e7 91 fe ff       	call   c00006a7 <strcpy>
c00174c0:	a1 00 3f 02 c0       	mov    eax,ds:0xc0023f00
c00174c5:	8d 50 01             	lea    edx,[eax+0x1]
c00174c8:	89 1c 85 20 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbee0],ebx
c00174cf:	89 15 00 3f 02 c0    	mov    DWORD PTR ds:0xc0023f00,edx
c00174d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00174d9:	59                   	pop    ecx
c00174da:	89 14 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],edx
c00174e1:	5d                   	pop    ebp
c00174e2:	53                   	push   ebx
c00174e3:	68 fe 18 02 c0       	push   0xc00218fe
c00174e8:	e8 62 78 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00174ed:	83 c4 0c             	add    esp,0xc
c00174f0:	6a 01                	push   0x1
c00174f2:	53                   	push   ebx
c00174f3:	56                   	push   esi
c00174f4:	e8 d5 f6 ff ff       	call   c0016bce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	84 c0                	test   al,al
c00174fe:	75 18                	jne    c0017518 <Thr::loadDLL(char const*, bool)+0x146>
c0017500:	31 db                	xor    ebx,ebx
c0017502:	89 f8                	mov    eax,edi
c0017504:	84 c0                	test   al,al
c0017506:	74 10                	je     c0017518 <Thr::loadDLL(char const*, bool)+0x146>
c0017508:	83 ec 0c             	sub    esp,0xc
c001750b:	68 1d 19 02 c0       	push   0xc002191d
c0017510:	e8 cf d4 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	81 c4 1c 01 00 00    	add    esp,0x11c
c001751e:	89 d8                	mov    eax,ebx
c0017520:	5b                   	pop    ebx
c0017521:	5e                   	pop    esi
c0017522:	5f                   	pop    edi
c0017523:	5d                   	pop    ebp
c0017524:	c3                   	ret    

c0017525 <Thr::executeDLL(unsigned long, void*)>:
c0017525:	56                   	push   esi
c0017526:	53                   	push   ebx
c0017527:	51                   	push   ecx
c0017528:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001752c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017530:	85 db                	test   ebx,ebx
c0017532:	75 10                	jne    c0017544 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	68 3c 19 02 c0       	push   0xc002193c
c001753c:	e8 a3 d4 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017548:	89 d8                	mov    eax,ebx
c001754a:	5a                   	pop    edx
c001754b:	5b                   	pop    ebx
c001754c:	5e                   	pop    esi
c001754d:	ff e0                	jmp    eax
c001754f:	90                   	nop

c0017550 <changeTSS>:
c0017550:	83 ec 0c             	sub    esp,0xc
c0017553:	e8 86 c7 ff ff       	call   c0013cde <thisCPU()>
c0017558:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001755e:	83 ec 08             	sub    esp,0x8
c0017561:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0017564:	05 7c 11 00 00       	add    eax,0x117c
c0017569:	c1 e1 15             	shl    ecx,0x15
c001756c:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017571:	29 ca                	sub    edx,ecx
c0017573:	52                   	push   edx
c0017574:	50                   	push   eax
c0017575:	e8 5a 61 ff ff       	call   c000d6d4 <TSS::setESP(unsigned long)>
c001757a:	83 c4 1c             	add    esp,0x1c
c001757d:	c3                   	ret    

c001757e <Process::addArgs(char**)>:
c001757e:	57                   	push   edi
c001757f:	56                   	push   esi
c0017580:	53                   	push   ebx
c0017581:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017585:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017589:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0017593:	85 ff                	test   edi,edi
c0017595:	74 3d                	je     c00175d4 <Process::addArgs(char**)+0x56>
c0017597:	8b 07                	mov    eax,DWORD PTR [edi]
c0017599:	85 c0                	test   eax,eax
c001759b:	74 37                	je     c00175d4 <Process::addArgs(char**)+0x56>
c001759d:	31 db                	xor    ebx,ebx
c001759f:	83 ec 0c             	sub    esp,0xc
c00175a2:	50                   	push   eax
c00175a3:	e8 7d 90 fe ff       	call   c0000625 <strlen>
c00175a8:	40                   	inc    eax
c00175a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00175ac:	e8 6d 46 ff ff       	call   c000bc1e <malloc>
c00175b1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00175b8:	5a                   	pop    edx
c00175b9:	59                   	pop    ecx
c00175ba:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00175bd:	43                   	inc    ebx
c00175be:	50                   	push   eax
c00175bf:	e8 e3 90 fe ff       	call   c00006a7 <strcpy>
c00175c4:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00175ca:	83 c4 10             	add    esp,0x10
c00175cd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00175d0:	85 c0                	test   eax,eax
c00175d2:	75 cb                	jne    c001759f <Process::addArgs(char**)+0x21>
c00175d4:	5b                   	pop    ebx
c00175d5:	5e                   	pop    esi
c00175d6:	5f                   	pop    edi
c00175d7:	c3                   	ret    

c00175d8 <Process::Process(char const*, Process*, char**)>:
c00175d8:	56                   	push   esi
c00175d9:	53                   	push   ebx
c00175da:	83 ec 14             	sub    esp,0x14
c00175dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175e1:	05 0c 02 00 00       	add    eax,0x20c
c00175e6:	bb 07 00 00 00       	mov    ebx,0x7
c00175eb:	89 c6                	mov    esi,eax
c00175ed:	85 db                	test   ebx,ebx
c00175ef:	78 12                	js     c0017603 <Process::Process(char const*, Process*, char**)+0x2b>
c00175f1:	83 ec 0c             	sub    esp,0xc
c00175f4:	56                   	push   esi
c00175f5:	e8 30 76 00 00       	call   c001ec2a <ThreadControlBlock::ThreadControlBlock()>
c00175fa:	83 c4 10             	add    esp,0x10
c00175fd:	83 c6 63             	add    esi,0x63
c0017600:	4b                   	dec    ebx
c0017601:	eb ea                	jmp    c00175ed <Process::Process(char const*, Process*, char**)+0x15>
c0017603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017607:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001760e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017612:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001761b:	a1 c4 2c 02 c0       	mov    eax,ds:0xc0022cc4
c0017620:	8d 50 01             	lea    edx,[eax+0x1]
c0017623:	89 15 c4 2c 02 c0    	mov    DWORD PTR ds:0xc0022cc4,edx
c0017629:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001762d:	89 02                	mov    DWORD PTR [edx],eax
c001762f:	83 ec 0c             	sub    esp,0xc
c0017632:	6a 10                	push   0x10
c0017634:	e8 27 76 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0017639:	83 c4 10             	add    esp,0x10
c001763c:	89 c3                	mov    ebx,eax
c001763e:	83 ec 08             	sub    esp,0x8
c0017641:	6a 00                	push   0x0
c0017643:	53                   	push   ebx
c0017644:	e8 ab 72 ff ff       	call   c000e8f4 <VAS::VAS(bool)>
c0017649:	83 c4 10             	add    esp,0x10
c001764c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017650:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001765a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017668:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001766c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017676:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001767c:	85 c0                	test   eax,eax
c001767e:	74 42                	je     c00176c2 <Process::Process(char const*, Process*, char**)+0xea>
c0017680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017684:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001768a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017694:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001769a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001769e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00176a4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00176aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ae:	05 0c 01 00 00       	add    eax,0x10c
c00176b3:	83 ec 08             	sub    esp,0x8
c00176b6:	52                   	push   edx
c00176b7:	50                   	push   eax
c00176b8:	e8 ea 8f fe ff       	call   c00006a7 <strcpy>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	eb 5c                	jmp    c001771e <Process::Process(char const*, Process*, char**)+0x146>
c00176c2:	83 ec 0c             	sub    esp,0xc
c00176c5:	68 60 12 00 00       	push   0x1260
c00176ca:	e8 91 75 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	89 c3                	mov    ebx,eax
c00176d4:	83 ec 08             	sub    esp,0x8
c00176d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176db:	53                   	push   ebx
c00176dc:	e8 f1 5c ff ff       	call   c000d3d2 <VgaText::VgaText(char const*)>
c00176e1:	83 c4 10             	add    esp,0x10
c00176e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00176ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00176f8:	83 ec 0c             	sub    esp,0xc
c00176fb:	50                   	push   eax
c00176fc:	e8 d2 50 ff ff       	call   c000c7d3 <addToTerminalCycle(VgaText*)>
c0017701:	83 c4 10             	add    esp,0x10
c0017704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017708:	05 0c 01 00 00       	add    eax,0x10c
c001770d:	83 ec 08             	sub    esp,0x8
c0017710:	68 66 19 02 c0       	push   0xc0021966
c0017715:	50                   	push   eax
c0017716:	e8 8c 8f fe ff       	call   c00006a7 <strcpy>
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017722:	83 c0 0c             	add    eax,0xc
c0017725:	83 ec 08             	sub    esp,0x8
c0017728:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001772c:	50                   	push   eax
c001772d:	e8 75 8f fe ff       	call   c00006a7 <strcpy>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	83 ec 08             	sub    esp,0x8
c0017738:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001773c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017740:	e8 39 fe ff ff       	call   c001757e <Process::addArgs(char**)>
c0017745:	83 c4 10             	add    esp,0x10
c0017748:	83 ec 08             	sub    esp,0x8
c001774b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001774f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017753:	e8 3d ef ff ff       	call   c0016695 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017758:	83 c4 10             	add    esp,0x10
c001775b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001775f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017763:	83 f0 01             	xor    eax,0x1
c0017766:	88 c2                	mov    dl,al
c0017768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001776c:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c0017772:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017777:	83 ec 08             	sub    esp,0x8
c001777a:	50                   	push   eax
c001777b:	68 64 1a 02 c0       	push   0xc0021a64
c0017780:	e8 ca 75 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017785:	83 c4 10             	add    esp,0x10
c0017788:	90                   	nop
c0017789:	83 c4 14             	add    esp,0x14
c001778c:	5b                   	pop    ebx
c001778d:	5e                   	pop    esi
c001778e:	c3                   	ret    
c001778f:	90                   	nop

c0017790 <Process::Process(bool, char const*, Process*, char**)>:
c0017790:	56                   	push   esi
c0017791:	53                   	push   ebx
c0017792:	83 ec 14             	sub    esp,0x14
c0017795:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017799:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001779d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a1:	05 0c 02 00 00       	add    eax,0x20c
c00177a6:	bb 07 00 00 00       	mov    ebx,0x7
c00177ab:	89 c6                	mov    esi,eax
c00177ad:	85 db                	test   ebx,ebx
c00177af:	78 12                	js     c00177c3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00177b1:	83 ec 0c             	sub    esp,0xc
c00177b4:	56                   	push   esi
c00177b5:	e8 70 74 00 00       	call   c001ec2a <ThreadControlBlock::ThreadControlBlock()>
c00177ba:	83 c4 10             	add    esp,0x10
c00177bd:	83 c6 63             	add    esi,0x63
c00177c0:	4b                   	dec    ebx
c00177c1:	eb ea                	jmp    c00177ad <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00177c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177c7:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00177ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177d2:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00177db:	a1 c4 2c 02 c0       	mov    eax,ds:0xc0022cc4
c00177e0:	8d 50 01             	lea    edx,[eax+0x1]
c00177e3:	89 15 c4 2c 02 c0    	mov    DWORD PTR ds:0xc0022cc4,edx
c00177e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177ed:	89 02                	mov    DWORD PTR [edx],eax
c00177ef:	83 ec 0c             	sub    esp,0xc
c00177f2:	6a 10                	push   0x10
c00177f4:	e8 67 74 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00177f9:	83 c4 10             	add    esp,0x10
c00177fc:	89 c3                	mov    ebx,eax
c00177fe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017803:	83 ec 08             	sub    esp,0x8
c0017806:	50                   	push   eax
c0017807:	53                   	push   ebx
c0017808:	e8 e7 70 ff ff       	call   c000e8f4 <VAS::VAS(bool)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017814:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001781a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001781e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001782c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017830:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001783a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017840:	85 c0                	test   eax,eax
c0017842:	74 42                	je     c0017886 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017848:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001784e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017858:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001785e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017862:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017868:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001786e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017872:	05 0c 01 00 00       	add    eax,0x10c
c0017877:	83 ec 08             	sub    esp,0x8
c001787a:	52                   	push   edx
c001787b:	50                   	push   eax
c001787c:	e8 26 8e fe ff       	call   c00006a7 <strcpy>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	eb 5c                	jmp    c00178e2 <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017886:	83 ec 0c             	sub    esp,0xc
c0017889:	68 60 12 00 00       	push   0x1260
c001788e:	e8 cd 73 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0017893:	83 c4 10             	add    esp,0x10
c0017896:	89 c3                	mov    ebx,eax
c0017898:	83 ec 08             	sub    esp,0x8
c001789b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001789f:	53                   	push   ebx
c00178a0:	e8 2d 5b ff ff       	call   c000d3d2 <VgaText::VgaText(char const*)>
c00178a5:	83 c4 10             	add    esp,0x10
c00178a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00178b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00178bc:	83 ec 0c             	sub    esp,0xc
c00178bf:	50                   	push   eax
c00178c0:	e8 0e 4f ff ff       	call   c000c7d3 <addToTerminalCycle(VgaText*)>
c00178c5:	83 c4 10             	add    esp,0x10
c00178c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cc:	05 0c 01 00 00       	add    eax,0x10c
c00178d1:	83 ec 08             	sub    esp,0x8
c00178d4:	68 66 19 02 c0       	push   0xc0021966
c00178d9:	50                   	push   eax
c00178da:	e8 c8 8d fe ff       	call   c00006a7 <strcpy>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e6:	83 c0 0c             	add    eax,0xc
c00178e9:	83 ec 08             	sub    esp,0x8
c00178ec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00178f0:	50                   	push   eax
c00178f1:	e8 b1 8d fe ff       	call   c00006a7 <strcpy>
c00178f6:	83 c4 10             	add    esp,0x10
c00178f9:	83 ec 08             	sub    esp,0x8
c00178fc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017900:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017904:	e8 75 fc ff ff       	call   c001757e <Process::addArgs(char**)>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	90                   	nop
c001790d:	83 c4 14             	add    esp,0x14
c0017910:	5b                   	pop    ebx
c0017911:	5e                   	pop    esi
c0017912:	c3                   	ret    

c0017913 <disableIRQs()>:
c0017913:	fa                   	cli    
c0017914:	ff 05 cc 46 02 c0    	inc    DWORD PTR ds:0xc00246cc
c001791a:	c3                   	ret    

c001791b <getIRQNestingLevel()>:
c001791b:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c0017920:	c3                   	ret    

c0017921 <enableIRQs()>:
c0017921:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c0017926:	48                   	dec    eax
c0017927:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c001792c:	75 01                	jne    c001792f <enableIRQs()+0xe>
c001792e:	fb                   	sti    
c001792f:	c3                   	ret    

c0017930 <lockScheduler()>:
c0017930:	eb e1                	jmp    c0017913 <disableIRQs()>

c0017932 <unlockScheduler()>:
c0017932:	eb ed                	jmp    c0017921 <enableIRQs()>

c0017934 <userModeEntryPoint(void*)>:
c0017934:	83 ec 0c             	sub    esp,0xc
c0017937:	e8 f6 ff ff ff       	call   c0017932 <unlockScheduler()>
c001793c:	fb                   	sti    
c001793d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017945:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001794b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001794f:	83 c4 0c             	add    esp,0xc
c0017952:	e9 8f 88 fe ff       	jmp    c00001e6 <goToUsermode>

c0017957 <lockStuff()>:
c0017957:	e8 b7 ff ff ff       	call   c0017913 <disableIRQs()>
c001795c:	ff 05 c8 46 02 c0    	inc    DWORD PTR ds:0xc00246c8
c0017962:	c3                   	ret    

c0017963 <taskStartupFunction>:
c0017963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017968:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001796b:	c3                   	ret    

c001796c <updateTimeUsed()>:
c001796c:	57                   	push   edi
c001796d:	56                   	push   esi
c001796e:	53                   	push   ebx
c001796f:	e8 6a c3 ff ff       	call   c0013cde <thisCPU()>
c0017974:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001797b:	74 49                	je     c00179c6 <updateTimeUsed()+0x5a>
c001797d:	0f 31                	rdtsc  
c001797f:	89 c1                	mov    ecx,eax
c0017981:	a3 08 47 02 c0       	mov    ds:0xc0024708,eax
c0017986:	2b 0d f8 46 02 c0    	sub    ecx,DWORD PTR ds:0xc00246f8
c001798c:	89 d3                	mov    ebx,edx
c001798e:	89 0d 00 47 02 c0    	mov    DWORD PTR ds:0xc0024700,ecx
c0017994:	1b 1d fc 46 02 c0    	sbb    ebx,DWORD PTR ds:0xc00246fc
c001799a:	a3 f8 46 02 c0       	mov    ds:0xc00246f8,eax
c001799f:	89 1d 04 47 02 c0    	mov    DWORD PTR ds:0xc0024704,ebx
c00179a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179aa:	89 15 0c 47 02 c0    	mov    DWORD PTR ds:0xc002470c,edx
c00179b0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00179b3:	89 15 fc 46 02 c0    	mov    DWORD PTR ds:0xc00246fc,edx
c00179b9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c00179bc:	01 f1                	add    ecx,esi
c00179be:	11 fb                	adc    ebx,edi
c00179c0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c00179c3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00179c6:	5b                   	pop    ebx
c00179c7:	5e                   	pop    esi
c00179c8:	5f                   	pop    edi
c00179c9:	c3                   	ret    

c00179ca <switchToThread(ThreadControlBlock*)>:
c00179ca:	53                   	push   ebx
c00179cb:	83 ec 08             	sub    esp,0x8
c00179ce:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c00179d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00179d7:	85 c0                	test   eax,eax
c00179d9:	75 30                	jne    c0017a0b <switchToThread(ThreadControlBlock*)+0x41>
c00179db:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c00179de:	3c ff                	cmp    al,0xff
c00179e0:	74 25                	je     c0017a07 <switchToThread(ThreadControlBlock*)+0x3d>
c00179e2:	0f b6 d0             	movzx  edx,al
c00179e5:	b8 84 03 00 00       	mov    eax,0x384
c00179ea:	29 d0                	sub    eax,edx
c00179ec:	c1 e0 10             	shl    eax,0x10
c00179ef:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00179f2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00179f5:	e8 72 ff ff ff       	call   c001796c <updateTimeUsed()>
c00179fa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00179fe:	83 c4 08             	add    esp,0x8
c0017a01:	5b                   	pop    ebx
c0017a02:	e9 18 88 fe ff       	jmp    c000021f <switchToThreadASM>
c0017a07:	31 c0                	xor    eax,eax
c0017a09:	eb e7                	jmp    c00179f2 <switchToThread(ThreadControlBlock*)+0x28>
c0017a0b:	c7 05 c4 46 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00246c4,0x1
c0017a15:	83 c4 08             	add    esp,0x8
c0017a18:	5b                   	pop    ebx
c0017a19:	c3                   	ret    

c0017a1a <Semaphore::Semaphore(int)>:
c0017a1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a22:	89 10                	mov    DWORD PTR [eax],edx
c0017a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a28:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017a2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a3e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017a45:	90                   	nop
c0017a46:	c3                   	ret    
c0017a47:	90                   	nop

c0017a48 <Mutex::Mutex()>:
c0017a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a4c:	6a 01                	push   0x1
c0017a4e:	50                   	push   eax
c0017a4f:	e8 c6 ff ff ff       	call   c0017a1a <Semaphore::Semaphore(int)>
c0017a54:	83 c4 08             	add    esp,0x8
c0017a57:	90                   	nop
c0017a58:	c3                   	ret    
c0017a59:	90                   	nop

c0017a5a <Process::createThread(void (*)(void*), void*, int)>:
c0017a5a:	55                   	push   ebp
c0017a5b:	31 c9                	xor    ecx,ecx
c0017a5d:	57                   	push   edi
c0017a5e:	56                   	push   esi
c0017a5f:	53                   	push   ebx
c0017a60:	83 ec 1c             	sub    esp,0x1c
c0017a63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017a67:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017a6e:	89 f2                	mov    edx,esi
c0017a70:	0f b7 c2             	movzx  eax,dx
c0017a73:	83 e2 01             	and    edx,0x1
c0017a76:	74 14                	je     c0017a8c <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017a78:	d1 f8                	sar    eax,1
c0017a7a:	41                   	inc    ecx
c0017a7b:	89 c2                	mov    edx,eax
c0017a7d:	83 f9 10             	cmp    ecx,0x10
c0017a80:	75 ee                	jne    c0017a70 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017a82:	83 c4 1c             	add    esp,0x1c
c0017a85:	31 c0                	xor    eax,eax
c0017a87:	5b                   	pop    ebx
c0017a88:	5e                   	pop    esi
c0017a89:	5f                   	pop    edi
c0017a8a:	5d                   	pop    ebp
c0017a8b:	c3                   	ret    
c0017a8c:	83 ec 08             	sub    esp,0x8
c0017a8f:	b8 01 00 00 00       	mov    eax,0x1
c0017a94:	d3 e0                	shl    eax,cl
c0017a96:	09 c6                	or     esi,eax
c0017a98:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017a9e:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017aa5:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017aa8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017aab:	01 ce                	add    esi,ecx
c0017aad:	89 f0                	mov    eax,esi
c0017aaf:	c1 e0 05             	shl    eax,0x5
c0017ab2:	01 c6                	add    esi,eax
c0017ab4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017ab7:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017abd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017ac3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017ac7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017acd:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017ad3:	89 ca                	mov    edx,ecx
c0017ad5:	f7 da                	neg    edx
c0017ad7:	c1 e2 15             	shl    edx,0x15
c0017ada:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017ae0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017ae6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017aea:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017af4:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017afa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017afe:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017b04:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017b0e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017b18:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017b1f:	50                   	push   eax
c0017b20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b24:	68 e8 46 02 c0       	push   0xc00246e8
c0017b29:	e8 54 6f 00 00       	call   c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b2e:	83 c4 10             	add    esp,0x10
c0017b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b35:	83 c4 1c             	add    esp,0x1c
c0017b38:	5b                   	pop    ebx
c0017b39:	5e                   	pop    esi
c0017b3a:	5f                   	pop    edi
c0017b3b:	5d                   	pop    ebp
c0017b3c:	c3                   	ret    
c0017b3d:	90                   	nop

c0017b3e <Process::createUserThread()>:
c0017b3e:	83 ec 0c             	sub    esp,0xc
c0017b41:	68 80 00 00 00       	push   0x80
c0017b46:	6a 00                	push   0x0
c0017b48:	68 34 79 01 c0       	push   0xc0017934
c0017b4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b51:	e8 04 ff ff ff       	call   c0017a5a <Process::createThread(void (*)(void*), void*, int)>
c0017b56:	83 c4 1c             	add    esp,0x1c
c0017b59:	c3                   	ret    

c0017b5a <setupMultitasking(void (*)())>:
c0017b5a:	56                   	push   esi
c0017b5b:	53                   	push   ebx
c0017b5c:	53                   	push   ebx
c0017b5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017b61:	eb 10                	jmp    c0017b73 <setupMultitasking(void (*)())+0x19>
c0017b63:	83 ec 0c             	sub    esp,0xc
c0017b66:	68 e8 46 02 c0       	push   0xc00246e8
c0017b6b:	e8 64 6e 00 00       	call   c001e9d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	83 ec 0c             	sub    esp,0xc
c0017b76:	68 e8 46 02 c0       	push   0xc00246e8
c0017b7b:	e8 38 6e 00 00       	call   c001e9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	84 c0                	test   al,al
c0017b85:	74 dc                	je     c0017b63 <setupMultitasking(void (*)())+0x9>
c0017b87:	83 ec 0c             	sub    esp,0xc
c0017b8a:	68 3b 07 00 00       	push   0x73b
c0017b8f:	e8 cc 70 ff ff       	call   c000ec60 <operator new(unsigned long)>
c0017b94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017b9b:	89 c3                	mov    ebx,eax
c0017b9d:	6a 00                	push   0x0
c0017b9f:	68 6a 19 02 c0       	push   0xc002196a
c0017ba4:	6a 01                	push   0x1
c0017ba6:	50                   	push   eax
c0017ba7:	e8 e4 fb ff ff       	call   c0017790 <Process::Process(bool, char const*, Process*, char**)>
c0017bac:	83 c4 18             	add    esp,0x18
c0017baf:	89 1d f4 46 02 c0    	mov    DWORD PTR ds:0xc00246f4,ebx
c0017bb5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017bbb:	68 8c 1a 02 c0       	push   0xc0021a8c
c0017bc0:	e8 8a 71 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017bc5:	58                   	pop    eax
c0017bc6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017bcc:	e8 76 53 ff ff       	call   c000cf47 <setActiveTerminal(VgaText*)>
c0017bd1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017bd9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017bdf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017be2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017bec:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017bf2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017bf8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017c02:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017c0c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017c16:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017c1c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017c22:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017c2c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017c32:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017c3c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017c42:	5a                   	pop    edx
c0017c43:	59                   	pop    ecx
c0017c44:	68 66 19 02 c0       	push   0xc0021966
c0017c49:	50                   	push   eax
c0017c4a:	e8 58 8a fe ff       	call   c00006a7 <strcpy>
c0017c4f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017c56:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017c5a:	83 c4 14             	add    esp,0x14
c0017c5d:	5b                   	pop    ebx
c0017c5e:	5e                   	pop    esi
c0017c5f:	e9 ad 85 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017c64 <schedule()>:
c0017c64:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c0017c69:	85 c0                	test   eax,eax
c0017c6b:	74 0b                	je     c0017c78 <schedule()+0x14>
c0017c6d:	c7 05 c4 46 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00246c4,0x1
c0017c77:	c3                   	ret    
c0017c78:	53                   	push   ebx
c0017c79:	83 ec 14             	sub    esp,0x14
c0017c7c:	68 e8 46 02 c0       	push   0xc00246e8
c0017c81:	e8 32 6d 00 00       	call   c001e9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017c86:	83 c4 10             	add    esp,0x10
c0017c89:	84 c0                	test   al,al
c0017c8b:	75 38                	jne    c0017cc5 <schedule()+0x61>
c0017c8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c92:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017c95:	4a                   	dec    edx
c0017c96:	74 32                	je     c0017cca <schedule()+0x66>
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	68 e8 46 02 c0       	push   0xc00246e8
c0017ca0:	e8 0b 6d 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017ca5:	c7 04 24 e8 46 02 c0 	mov    DWORD PTR [esp],0xc00246e8
c0017cac:	89 c3                	mov    ebx,eax
c0017cae:	e8 21 6d 00 00       	call   c001e9d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017cb3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017cba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017cbd:	e8 08 fd ff ff       	call   c00179ca <switchToThread(ThreadControlBlock*)>
c0017cc2:	83 c4 10             	add    esp,0x10
c0017cc5:	83 c4 08             	add    esp,0x8
c0017cc8:	5b                   	pop    ebx
c0017cc9:	c3                   	ret    
c0017cca:	83 ec 08             	sub    esp,0x8
c0017ccd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017cd4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017cda:	68 e8 46 02 c0       	push   0xc00246e8
c0017cdf:	e8 9e 6d 00 00       	call   c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017ce4:	83 c4 10             	add    esp,0x10
c0017ce7:	eb af                	jmp    c0017c98 <schedule()+0x34>

c0017ce9 <unlockStuff()>:
c0017ce9:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c0017cee:	48                   	dec    eax
c0017cef:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c0017cf4:	75 09                	jne    c0017cff <unlockStuff()+0x16>
c0017cf6:	a1 c4 46 02 c0       	mov    eax,ds:0xc00246c4
c0017cfb:	85 c0                	test   eax,eax
c0017cfd:	75 05                	jne    c0017d04 <unlockStuff()+0x1b>
c0017cff:	e9 1d fc ff ff       	jmp    c0017921 <enableIRQs()>
c0017d04:	83 ec 0c             	sub    esp,0xc
c0017d07:	c7 05 c4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246c4,0x0
c0017d11:	e8 4e ff ff ff       	call   c0017c64 <schedule()>
c0017d16:	83 c4 0c             	add    esp,0xc
c0017d19:	e9 03 fc ff ff       	jmp    c0017921 <enableIRQs()>

c0017d1e <Semaphore::tryAcquire()>:
c0017d1e:	83 ec 0c             	sub    esp,0xc
c0017d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d25:	e8 2d fc ff ff       	call   c0017957 <lockStuff()>
c0017d2a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d2d:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017d2f:	7c 0b                	jl     c0017d3c <Semaphore::tryAcquire()+0x1e>
c0017d31:	e8 b3 ff ff ff       	call   c0017ce9 <unlockStuff()>
c0017d36:	31 c0                	xor    eax,eax
c0017d38:	83 c4 0c             	add    esp,0xc
c0017d3b:	c3                   	ret    
c0017d3c:	42                   	inc    edx
c0017d3d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017d40:	e8 a4 ff ff ff       	call   c0017ce9 <unlockStuff()>
c0017d45:	b0 01                	mov    al,0x1
c0017d47:	83 c4 0c             	add    esp,0xc
c0017d4a:	c3                   	ret    
c0017d4b:	90                   	nop

c0017d4c <Semaphore::assertLocked(char const*)>:
c0017d4c:	83 ec 0c             	sub    esp,0xc
c0017d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d53:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d57:	e8 fb fb ff ff       	call   c0017957 <lockStuff()>
c0017d5c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017d5e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0017d61:	7c 05                	jl     c0017d68 <Semaphore::assertLocked(char const*)+0x1c>
c0017d63:	83 c4 0c             	add    esp,0xc
c0017d66:	eb 81                	jmp    c0017ce9 <unlockStuff()>
c0017d68:	83 ec 0c             	sub    esp,0xc
c0017d6b:	52                   	push   edx
c0017d6c:	e8 73 cc ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	83 c4 0c             	add    esp,0xc
c0017d77:	e9 6d ff ff ff       	jmp    c0017ce9 <unlockStuff()>

c0017d7c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017d7c:	83 ec 0c             	sub    esp,0xc
c0017d7f:	e8 97 fb ff ff       	call   c001791b <getIRQNestingLevel()>
c0017d84:	83 ec 08             	sub    esp,0x8
c0017d87:	50                   	push   eax
c0017d88:	68 c0 1a 02 c0       	push   0xc0021ac0
c0017d8d:	e8 bd 6f ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017d92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d9b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017d9e:	e8 c1 fe ff ff       	call   c0017c64 <schedule()>
c0017da3:	e8 8a fb ff ff       	call   c0017932 <unlockScheduler()>
c0017da8:	e8 6e fb ff ff       	call   c001791b <getIRQNestingLevel()>
c0017dad:	5a                   	pop    edx
c0017dae:	59                   	pop    ecx
c0017daf:	50                   	push   eax
c0017db0:	68 f4 1a 02 c0       	push   0xc0021af4
c0017db5:	e8 95 6f ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017dba:	83 c4 1c             	add    esp,0x1c
c0017dbd:	c3                   	ret    

c0017dbe <blockTask(TaskState)>:
c0017dbe:	83 ec 0c             	sub    esp,0xc
c0017dc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017dc5:	e8 66 fb ff ff       	call   c0017930 <lockScheduler()>
c0017dca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dcf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017dd2:	e8 8d fe ff ff       	call   c0017c64 <schedule()>
c0017dd7:	83 c4 0c             	add    esp,0xc
c0017dda:	e9 53 fb ff ff       	jmp    c0017932 <unlockScheduler()>

c0017ddf <waitTask(int, int*, int)>:
c0017ddf:	83 ec 18             	sub    esp,0x18
c0017de2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017de7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017deb:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017dee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017df2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017df7:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017dfa:	6a 07                	push   0x7
c0017dfc:	e8 bd ff ff ff       	call   c0017dbe <blockTask(TaskState)>
c0017e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017e0c:	85 d2                	test   edx,edx
c0017e0e:	74 0a                	je     c0017e1a <waitTask(int, int*, int)+0x3b>
c0017e10:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017e13:	89 02                	mov    DWORD PTR [edx],eax
c0017e15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e1a:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017e1d:	83 c4 0c             	add    esp,0xc
c0017e20:	c3                   	ret    

c0017e21 <nanoSleepUntil(unsigned long long)>:
c0017e21:	83 ec 0c             	sub    esp,0xc
c0017e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e2c:	3b 05 10 39 02 c0    	cmp    eax,DWORD PTR ds:0xc0023910
c0017e32:	89 d1                	mov    ecx,edx
c0017e34:	1b 0d 14 39 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023914
c0017e3a:	73 04                	jae    c0017e40 <nanoSleepUntil(unsigned long long)+0x1f>
c0017e3c:	83 c4 0c             	add    esp,0xc
c0017e3f:	c3                   	ret    
c0017e40:	e8 12 fb ff ff       	call   c0017957 <lockStuff()>
c0017e45:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017e4b:	83 ec 08             	sub    esp,0x8
c0017e4e:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017e51:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017e54:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017e5a:	68 dc 46 02 c0       	push   0xc00246dc
c0017e5f:	e8 1e 6c 00 00       	call   c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e64:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017e6b:	e8 4e ff ff ff       	call   c0017dbe <blockTask(TaskState)>
c0017e70:	83 c4 1c             	add    esp,0x1c
c0017e73:	e9 71 fe ff ff       	jmp    c0017ce9 <unlockStuff()>

c0017e78 <nanoSleep(unsigned long long)>:
c0017e78:	a1 10 39 02 c0       	mov    eax,ds:0xc0023910
c0017e7d:	8b 15 14 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023914
c0017e83:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017e87:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017e8b:	eb 94                	jmp    c0017e21 <nanoSleepUntil(unsigned long long)>

c0017e8d <sleep(unsigned long long)>:
c0017e8d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0017e95:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0017e9a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017e9e:	01 ca                	add    edx,ecx
c0017ea0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ea4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017ea8:	eb ce                	jmp    c0017e78 <nanoSleep(unsigned long long)>

c0017eaa <Semaphore::acquire()>:
c0017eaa:	83 ec 0c             	sub    esp,0xc
c0017ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eb1:	e8 a1 fa ff ff       	call   c0017957 <lockStuff()>
c0017eb6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017eb9:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017ebb:	7d 0c                	jge    c0017ec9 <Semaphore::acquire()+0x1f>
c0017ebd:	42                   	inc    edx
c0017ebe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017ec1:	83 c4 0c             	add    esp,0xc
c0017ec4:	e9 20 fe ff ff       	jmp    c0017ce9 <unlockStuff()>
c0017ec9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017ecf:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0017ed6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017ed9:	85 d2                	test   edx,edx
c0017edb:	74 2a                	je     c0017f07 <Semaphore::acquire()+0x5d>
c0017edd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0017ee0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017ee6:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0017ee9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017eef:	83 ec 0c             	sub    esp,0xc
c0017ef2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017ef5:	6a 05                	push   0x5
c0017ef7:	e8 c2 fe ff ff       	call   c0017dbe <blockTask(TaskState)>
c0017efc:	83 c4 10             	add    esp,0x10
c0017eff:	83 c4 0c             	add    esp,0xc
c0017f02:	e9 e2 fd ff ff       	jmp    c0017ce9 <unlockStuff()>
c0017f07:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017f0d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017f10:	eb d7                	jmp    c0017ee9 <Semaphore::acquire()+0x3f>

c0017f12 <taskReturned>:
c0017f12:	83 ec 18             	sub    esp,0x18
c0017f15:	68 28 1b 02 c0       	push   0xc0021b28
c0017f1a:	e8 c5 ca ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c0017f1f:	83 c4 10             	add    esp,0x10
c0017f22:	83 ec 0c             	sub    esp,0xc
c0017f25:	6a 02                	push   0x2
c0017f27:	e8 92 fe ff ff       	call   c0017dbe <blockTask(TaskState)>
c0017f2c:	e8 ff f9 ff ff       	call   c0017930 <lockScheduler()>
c0017f31:	e8 2e fd ff ff       	call   c0017c64 <schedule()>
c0017f36:	e8 f7 f9 ff ff       	call   c0017932 <unlockScheduler()>
c0017f3b:	83 c4 10             	add    esp,0x10
c0017f3e:	eb e2                	jmp    c0017f22 <taskReturned+0x10>

c0017f40 <unblockTask(ThreadControlBlock*)>:
c0017f40:	53                   	push   ebx
c0017f41:	83 ec 08             	sub    esp,0x8
c0017f44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017f48:	e8 e3 f9 ff ff       	call   c0017930 <lockScheduler()>
c0017f4d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017f50:	85 c0                	test   eax,eax
c0017f52:	74 5c                	je     c0017fb0 <unblockTask(ThreadControlBlock*)+0x70>
c0017f54:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017f57:	48                   	dec    eax
c0017f58:	74 31                	je     c0017f8b <unblockTask(ThreadControlBlock*)+0x4b>
c0017f5a:	83 ec 0c             	sub    esp,0xc
c0017f5d:	68 e8 46 02 c0       	push   0xc00246e8
c0017f62:	e8 49 6a 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f67:	83 c4 10             	add    esp,0x10
c0017f6a:	85 c0                	test   eax,eax
c0017f6c:	75 17                	jne    c0017f85 <unblockTask(ThreadControlBlock*)+0x45>
c0017f6e:	eb 65                	jmp    c0017fd5 <unblockTask(ThreadControlBlock*)+0x95>
c0017f70:	83 ec 08             	sub    esp,0x8
c0017f73:	50                   	push   eax
c0017f74:	68 e8 46 02 c0       	push   0xc00246e8
c0017f79:	e8 42 6d 00 00       	call   c001ecc0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017f7e:	83 c4 10             	add    esp,0x10
c0017f81:	85 c0                	test   eax,eax
c0017f83:	74 50                	je     c0017fd5 <unblockTask(ThreadControlBlock*)+0x95>
c0017f85:	39 c3                	cmp    ebx,eax
c0017f87:	75 e7                	jne    c0017f70 <unblockTask(ThreadControlBlock*)+0x30>
c0017f89:	eb 1c                	jmp    c0017fa7 <unblockTask(ThreadControlBlock*)+0x67>
c0017f8b:	83 ec 0c             	sub    esp,0xc
c0017f8e:	68 18 1c 02 c0       	push   0xc0021c18
c0017f93:	e8 b7 6d ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017f98:	c7 04 24 a4 1b 02 c0 	mov    DWORD PTR [esp],0xc0021ba4
c0017f9f:	e8 ab 6d ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017fa4:	83 c4 10             	add    esp,0x10
c0017fa7:	83 c4 08             	add    esp,0x8
c0017faa:	5b                   	pop    ebx
c0017fab:	e9 82 f9 ff ff       	jmp    c0017932 <unlockScheduler()>
c0017fb0:	83 ec 0c             	sub    esp,0xc
c0017fb3:	68 5c 1b 02 c0       	push   0xc0021b5c
c0017fb8:	e8 92 6d ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017fbd:	c7 04 24 a4 1b 02 c0 	mov    DWORD PTR [esp],0xc0021ba4
c0017fc4:	e8 86 6d ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0017fc9:	83 c4 10             	add    esp,0x10
c0017fcc:	83 c4 08             	add    esp,0x8
c0017fcf:	5b                   	pop    ebx
c0017fd0:	e9 5d f9 ff ff       	jmp    c0017932 <unlockScheduler()>
c0017fd5:	83 ec 08             	sub    esp,0x8
c0017fd8:	53                   	push   ebx
c0017fd9:	68 e8 46 02 c0       	push   0xc00246e8
c0017fde:	e8 9f 6a 00 00       	call   c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017fe3:	83 c4 10             	add    esp,0x10
c0017fe6:	83 c4 08             	add    esp,0x8
c0017fe9:	5b                   	pop    ebx
c0017fea:	e9 43 f9 ff ff       	jmp    c0017932 <unlockScheduler()>

c0017fef <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017fef:	55                   	push   ebp
c0017ff0:	57                   	push   edi
c0017ff1:	56                   	push   esi
c0017ff2:	53                   	push   ebx
c0017ff3:	83 ec 1c             	sub    esp,0x1c
c0017ff6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017ffa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017ffd:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018003:	85 c9                	test   ecx,ecx
c0018005:	7e 20                	jle    c0018027 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0018007:	31 f6                	xor    esi,esi
c0018009:	83 ec 0c             	sub    esp,0xc
c001800c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018013:	46                   	inc    esi
c0018014:	e8 15 3c ff ff       	call   c000bc2e <free>
c0018019:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001801c:	83 c4 10             	add    esp,0x10
c001801f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018025:	7f e2                	jg     c0018009 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018027:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018031:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018036:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018039:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001803c:	d3 c0                	rol    eax,cl
c001803e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0018045:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018048:	89 f7                	mov    edi,esi
c001804a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018052:	0f 85 4f 01 00 00    	jne    c00181a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0018058:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001805e:	85 c0                	test   eax,eax
c0018060:	0f 84 aa 00 00 00    	je     c0018110 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0018066:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018069:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001806d:	31 c9                	xor    ecx,ecx
c001806f:	eb 10                	jmp    c0018081 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0018071:	41                   	inc    ecx
c0018072:	83 f9 10             	cmp    ecx,0x10
c0018075:	0f 84 95 00 00 00    	je     c0018110 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001807b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018081:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0018088:	d3 fa                	sar    edx,cl
c001808a:	83 e2 01             	and    edx,0x1
c001808d:	74 e2                	je     c0018071 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001808f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018092:	01 ca                	add    edx,ecx
c0018094:	89 d5                	mov    ebp,edx
c0018096:	c1 e5 05             	shl    ebp,0x5
c0018099:	01 ea                	add    edx,ebp
c001809b:	01 d0                	add    eax,edx
c001809d:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00180a3:	83 fd 07             	cmp    ebp,0x7
c00180a6:	75 c9                	jne    c0018071 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00180a8:	05 40 02 00 00       	add    eax,0x240
c00180ad:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00180b0:	83 fd ff             	cmp    ebp,0xffffffff
c00180b3:	0f 8c 08 01 00 00    	jl     c00181c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c00180b9:	0f 84 b9 01 00 00    	je     c0018278 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c00180bf:	85 ed                	test   ebp,ebp
c00180c1:	0f 84 a0 01 00 00    	je     c0018267 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c00180c7:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00180c9:	75 a6                	jne    c0018071 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00180cb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00180d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00180d5:	01 d0                	add    eax,edx
c00180d7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00180db:	83 ec 0c             	sub    esp,0xc
c00180de:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00180e4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00180e7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00180ed:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00180f4:	50                   	push   eax
c00180f5:	e8 46 fe ff ff       	call   c0017f40 <unblockTask(ThreadControlBlock*)>
c00180fa:	83 c4 10             	add    esp,0x10
c00180fd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018100:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018104:	89 f7                	mov    edi,esi
c0018106:	41                   	inc    ecx
c0018107:	83 f9 10             	cmp    ecx,0x10
c001810a:	0f 85 6b ff ff ff    	jne    c001807b <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018110:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018116:	85 c0                	test   eax,eax
c0018118:	74 5d                	je     c0018177 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001811a:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018120:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018126:	74 4f                	je     c0018177 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	68 e8 46 02 c0       	push   0xc00246e8
c0018130:	e8 7b 68 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018135:	c7 04 24 e8 46 02 c0 	mov    DWORD PTR [esp],0xc00246e8
c001813c:	89 c7                	mov    edi,eax
c001813e:	e8 75 68 00 00       	call   c001e9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018143:	83 c4 10             	add    esp,0x10
c0018146:	84 c0                	test   al,al
c0018148:	0f 84 e4 00 00 00    	je     c0018232 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001814e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018151:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018157:	85 d2                	test   edx,edx
c0018159:	74 0f                	je     c001816a <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001815b:	83 ec 0c             	sub    esp,0xc
c001815e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018160:	52                   	push   edx
c0018161:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018164:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018167:	83 c4 10             	add    esp,0x10
c001816a:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018174:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018177:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001817d:	85 db                	test   ebx,ebx
c001817f:	74 16                	je     c0018197 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0018181:	83 ec 0c             	sub    esp,0xc
c0018184:	53                   	push   ebx
c0018185:	e8 5a 61 ff ff       	call   c000e2e4 <VAS::~VAS()>
c001818a:	58                   	pop    eax
c001818b:	5a                   	pop    edx
c001818c:	6a 10                	push   0x10
c001818e:	53                   	push   ebx
c001818f:	e8 db 6a ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c0018194:	83 c4 10             	add    esp,0x10
c0018197:	83 ec 0c             	sub    esp,0xc
c001819a:	68 71 19 02 c0       	push   0xc0021971
c001819f:	e8 ab 6b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00181a4:	83 c4 10             	add    esp,0x10
c00181a7:	83 ec 08             	sub    esp,0x8
c00181aa:	68 3b 07 00 00       	push   0x73b
c00181af:	68 7f 19 02 c0       	push   0xc002197f
c00181b4:	e8 96 6b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00181b9:	83 c4 2c             	add    esp,0x2c
c00181bc:	5b                   	pop    ebx
c00181bd:	5e                   	pop    esi
c00181be:	5f                   	pop    edi
c00181bf:	5d                   	pop    ebp
c00181c0:	c3                   	ret    
c00181c1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00181c5:	83 ec 0c             	sub    esp,0xc
c00181c8:	68 5c 1c 02 c0       	push   0xc0021c5c
c00181cd:	e8 12 c8 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c00181d2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	89 f7                	mov    edi,esi
c00181da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181de:	e9 8e fe ff ff       	jmp    c0018071 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00181e3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00181e9:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00181ef:	75 1c                	jne    c001820d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00181f1:	83 ec 0c             	sub    esp,0xc
c00181f4:	68 c4 1c 02 c0       	push   0xc0021cc4
c00181f9:	e8 51 6b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00181fe:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018205:	e8 b4 fb ff ff       	call   c0017dbe <blockTask(TaskState)>
c001820a:	83 c4 10             	add    esp,0x10
c001820d:	83 ec 08             	sub    esp,0x8
c0018210:	56                   	push   esi
c0018211:	68 e8 46 02 c0       	push   0xc00246e8
c0018216:	e8 67 68 00 00       	call   c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001821b:	c7 04 24 e8 46 02 c0 	mov    DWORD PTR [esp],0xc00246e8
c0018222:	e8 89 67 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	39 f8                	cmp    eax,edi
c001822c:	0f 84 1c ff ff ff    	je     c001814e <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0018232:	83 ec 0c             	sub    esp,0xc
c0018235:	68 e8 46 02 c0       	push   0xc00246e8
c001823a:	e8 71 67 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001823f:	c7 04 24 e8 46 02 c0 	mov    DWORD PTR [esp],0xc00246e8
c0018246:	89 c6                	mov    esi,eax
c0018248:	e8 87 67 00 00       	call   c001e9d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001824d:	83 c4 10             	add    esp,0x10
c0018250:	39 f3                	cmp    ebx,esi
c0018252:	74 b9                	je     c001820d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018254:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018257:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001825a:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018260:	75 ab                	jne    c001820d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018262:	e9 7c ff ff ff       	jmp    c00181e3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018267:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001826b:	83 ec 0c             	sub    esp,0xc
c001826e:	68 90 1c 02 c0       	push   0xc0021c90
c0018273:	e9 55 ff ff ff       	jmp    c00181cd <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c0018278:	8b 36                	mov    esi,DWORD PTR [esi]
c001827a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001827e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018281:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018284:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001828a:	01 d7                	add    edi,edx
c001828c:	89 f8                	mov    eax,edi
c001828e:	e9 44 fe ff ff       	jmp    c00180d7 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018293 <cleanerTaskFunction(void*)>:
c0018293:	53                   	push   ebx
c0018294:	83 ec 08             	sub    esp,0x8
c0018297:	e8 96 f6 ff ff       	call   c0017932 <unlockScheduler()>
c001829c:	e8 8f f6 ff ff       	call   c0017930 <lockScheduler()>
c00182a1:	80 3d ac 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246ac,0x0
c00182a8:	0f 85 8e 00 00 00    	jne    c001833c <cleanerTaskFunction(void*)+0xa9>
c00182ae:	83 ec 0c             	sub    esp,0xc
c00182b1:	6a 02                	push   0x2
c00182b3:	e8 c4 fa ff ff       	call   c0017d7c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00182b8:	83 c4 10             	add    esp,0x10
c00182bb:	c6 05 ac 46 02 c0 00 	mov    BYTE PTR ds:0xc00246ac,0x0
c00182c2:	e8 90 f6 ff ff       	call   c0017957 <lockStuff()>
c00182c7:	e8 64 f6 ff ff       	call   c0017930 <lockScheduler()>
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	68 d0 46 02 c0       	push   0xc00246d0
c00182d4:	e8 df 66 00 00       	call   c001e9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00182d9:	83 c4 10             	add    esp,0x10
c00182dc:	84 c0                	test   al,al
c00182de:	75 40                	jne    c0018320 <cleanerTaskFunction(void*)+0x8d>
c00182e0:	83 ec 0c             	sub    esp,0xc
c00182e3:	68 d0 46 02 c0       	push   0xc00246d0
c00182e8:	e8 c3 66 00 00       	call   c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00182ed:	c7 04 24 d0 46 02 c0 	mov    DWORD PTR [esp],0xc00246d0
c00182f4:	89 c3                	mov    ebx,eax
c00182f6:	e8 d9 66 00 00       	call   c001e9d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00182fb:	c7 04 24 95 19 02 c0 	mov    DWORD PTR [esp],0xc0021995
c0018302:	e8 48 6a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0018307:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001830a:	e8 e0 fc ff ff       	call   c0017fef <cleanupTerminatedTask(ThreadControlBlock*)>
c001830f:	c7 04 24 ae 19 02 c0 	mov    DWORD PTR [esp],0xc00219ae
c0018316:	e8 34 6a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	eb ac                	jmp    c00182cc <cleanerTaskFunction(void*)+0x39>
c0018320:	e8 0d f6 ff ff       	call   c0017932 <unlockScheduler()>
c0018325:	e8 bf f9 ff ff       	call   c0017ce9 <unlockStuff()>
c001832a:	e8 01 f6 ff ff       	call   c0017930 <lockScheduler()>
c001832f:	80 3d ac 46 02 c0 00 	cmp    BYTE PTR ds:0xc00246ac,0x0
c0018336:	0f 84 72 ff ff ff    	je     c00182ae <cleanerTaskFunction(void*)+0x1b>
c001833c:	e8 f1 f5 ff ff       	call   c0017932 <unlockScheduler()>
c0018341:	e9 75 ff ff ff       	jmp    c00182bb <cleanerTaskFunction(void*)+0x28>

c0018346 <terminateTask(int)>:
c0018346:	83 ec 14             	sub    esp,0x14
c0018349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001834e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018351:	83 c0 0c             	add    eax,0xc
c0018354:	50                   	push   eax
c0018355:	68 ec 1c 02 c0       	push   0xc0021cec
c001835a:	e8 f0 69 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001835f:	e8 f3 f5 ff ff       	call   c0017957 <lockStuff()>
c0018364:	e8 c7 f5 ff ff       	call   c0017930 <lockScheduler()>
c0018369:	c7 04 24 c1 19 02 c0 	mov    DWORD PTR [esp],0xc00219c1
c0018370:	e8 da 69 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0018375:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018379:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001837e:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018386:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018389:	5a                   	pop    edx
c001838a:	59                   	pop    ecx
c001838b:	50                   	push   eax
c001838c:	68 d0 46 02 c0       	push   0xc00246d0
c0018391:	e8 ec 66 00 00       	call   c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018396:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001839b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00183a2:	c7 04 24 db 19 02 c0 	mov    DWORD PTR [esp],0xc00219db
c00183a9:	e8 a1 69 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	a1 a8 46 02 c0       	mov    eax,ds:0xc00246a8
c00183b6:	85 c0                	test   eax,eax
c00183b8:	74 5a                	je     c0018414 <terminateTask(int)+0xce>
c00183ba:	83 ec 0c             	sub    esp,0xc
c00183bd:	68 f5 19 02 c0       	push   0xc00219f5
c00183c2:	e8 88 69 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00183c7:	58                   	pop    eax
c00183c8:	c6 05 ac 46 02 c0 01 	mov    BYTE PTR ds:0xc00246ac,0x1
c00183cf:	ff 35 a8 46 02 c0    	push   DWORD PTR ds:0xc00246a8
c00183d5:	e8 66 fb ff ff       	call   c0017f40 <unblockTask(ThreadControlBlock*)>
c00183da:	c7 04 24 0f 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a0f
c00183e1:	e8 69 69 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	e8 44 f5 ff ff       	call   c0017932 <unlockScheduler()>
c00183ee:	e8 f6 f8 ff ff       	call   c0017ce9 <unlockStuff()>
c00183f3:	83 ec 0c             	sub    esp,0xc
c00183f6:	68 47 1a 02 c0       	push   0xc0021a47
c00183fb:	e8 4f 69 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	e8 28 f5 ff ff       	call   c0017930 <lockScheduler()>
c0018408:	e8 57 f8 ff ff       	call   c0017c64 <schedule()>
c001840d:	e8 20 f5 ff ff       	call   c0017932 <unlockScheduler()>
c0018412:	eb ef                	jmp    c0018403 <terminateTask(int)+0xbd>
c0018414:	83 ec 0c             	sub    esp,0xc
c0018417:	68 29 1a 02 c0       	push   0xc0021a29
c001841c:	e8 2e 69 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0018421:	83 c4 10             	add    esp,0x10
c0018424:	eb c3                	jmp    c00183e9 <terminateTask(int)+0xa3>

c0018426 <Thr::terminateFromIRQ(int)>:
c0018426:	83 ec 18             	sub    esp,0x18
c0018429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001842d:	e8 14 ff ff ff       	call   c0018346 <terminateTask(int)>

c0018432 <Semaphore::release()>:
c0018432:	83 ec 0c             	sub    esp,0xc
c0018435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018439:	e8 19 f5 ff ff       	call   c0017957 <lockStuff()>
c001843e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018441:	85 d2                	test   edx,edx
c0018443:	74 1a                	je     c001845f <Semaphore::release()+0x2d>
c0018445:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0018448:	83 ec 0c             	sub    esp,0xc
c001844b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001844e:	52                   	push   edx
c001844f:	e8 ec fa ff ff       	call   c0017f40 <unblockTask(ThreadControlBlock*)>
c0018454:	83 c4 10             	add    esp,0x10
c0018457:	83 c4 0c             	add    esp,0xc
c001845a:	e9 8a f8 ff ff       	jmp    c0017ce9 <unlockStuff()>
c001845f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c0018462:	83 c4 0c             	add    esp,0xc
c0018465:	e9 7f f8 ff ff       	jmp    c0017ce9 <unlockStuff()>

c001846a <__static_initialization_and_destruction_0(int, int)>:
c001846a:	83 ec 0c             	sub    esp,0xc
c001846d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018472:	0f 85 88 00 00 00    	jne    c0018500 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018478:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018480:	75 7e                	jne    c0018500 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018482:	83 ec 0c             	sub    esp,0xc
c0018485:	68 e8 46 02 c0       	push   0xc00246e8
c001848a:	e8 d9 67 00 00       	call   c001ec68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	83 ec 04             	sub    esp,0x4
c0018495:	68 d0 26 02 c0       	push   0xc00226d0
c001849a:	68 e8 46 02 c0       	push   0xc00246e8
c001849f:	68 28 ec 01 c0       	push   0xc001ec28
c00184a4:	e8 42 67 ff ff       	call   c000ebeb <__cxa_atexit>
c00184a9:	83 c4 10             	add    esp,0x10
c00184ac:	83 ec 0c             	sub    esp,0xc
c00184af:	68 dc 46 02 c0       	push   0xc00246dc
c00184b4:	e8 af 67 00 00       	call   c001ec68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00184b9:	83 c4 10             	add    esp,0x10
c00184bc:	83 ec 04             	sub    esp,0x4
c00184bf:	68 d0 26 02 c0       	push   0xc00226d0
c00184c4:	68 dc 46 02 c0       	push   0xc00246dc
c00184c9:	68 28 ec 01 c0       	push   0xc001ec28
c00184ce:	e8 18 67 ff ff       	call   c000ebeb <__cxa_atexit>
c00184d3:	83 c4 10             	add    esp,0x10
c00184d6:	83 ec 0c             	sub    esp,0xc
c00184d9:	68 d0 46 02 c0       	push   0xc00246d0
c00184de:	e8 85 67 00 00       	call   c001ec68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00184e3:	83 c4 10             	add    esp,0x10
c00184e6:	83 ec 04             	sub    esp,0x4
c00184e9:	68 d0 26 02 c0       	push   0xc00226d0
c00184ee:	68 d0 46 02 c0       	push   0xc00246d0
c00184f3:	68 28 ec 01 c0       	push   0xc001ec28
c00184f8:	e8 ee 66 ff ff       	call   c000ebeb <__cxa_atexit>
c00184fd:	83 c4 10             	add    esp,0x10
c0018500:	90                   	nop
c0018501:	83 c4 0c             	add    esp,0xc
c0018504:	c3                   	ret    

c0018505 <_GLOBAL__sub_I_kernelProcess>:
c0018505:	83 ec 0c             	sub    esp,0xc
c0018508:	83 ec 08             	sub    esp,0x8
c001850b:	68 ff ff 00 00       	push   0xffff
c0018510:	6a 01                	push   0x1
c0018512:	e8 53 ff ff ff       	call   c001846a <__static_initialization_and_destruction_0(int, int)>
c0018517:	83 c4 10             	add    esp,0x10
c001851a:	83 c4 0c             	add    esp,0xc
c001851d:	c3                   	ret    

c001851e <Vm::vm8086EntryPoint(void*)>:
c001851e:	83 ec 0c             	sub    esp,0xc
c0018521:	e8 0c f4 ff ff       	call   c0017932 <unlockScheduler()>
c0018526:	fb                   	sti    
c0018527:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001852c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018530:	52                   	push   edx
c0018531:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018535:	52                   	push   edx
c0018536:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001853a:	52                   	push   edx
c001853b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001853f:	50                   	push   eax
c0018540:	e8 70 7c fe ff       	call   c00001b5 <goToVM86>
c0018545:	83 c4 1c             	add    esp,0x1c
c0018548:	c3                   	ret    

c0018549 <Vm::inbv(unsigned short)>:
c0018549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001854d:	ec                   	in     al,dx
c001854e:	c3                   	ret    

c001854f <Vm::outbv(unsigned short, unsigned char)>:
c001854f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018557:	ee                   	out    dx,al
c0018558:	c3                   	ret    

c0018559 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018559:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001855e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018563:	c1 e0 04             	shl    eax,0x4
c0018566:	01 d0                	add    eax,edx
c0018568:	c3                   	ret    

c0018569 <Vm::getSegment(unsigned int)>:
c0018569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001856d:	c1 e8 10             	shr    eax,0x10
c0018570:	c3                   	ret    

c0018571 <Vm::getOffset(unsigned int)>:
c0018571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018575:	c3                   	ret    

c0018576 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018576:	55                   	push   ebp
c0018577:	57                   	push   edi
c0018578:	56                   	push   esi
c0018579:	53                   	push   ebx
c001857a:	83 ec 2c             	sub    esp,0x2c
c001857d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018581:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018585:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018589:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001858d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018591:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018595:	e8 96 f3 ff ff       	call   c0017930 <lockScheduler()>
c001859a:	68 80 00 00 00       	push   0x80
c001859f:	6a 00                	push   0x0
c00185a1:	68 1e 85 01 c0       	push   0xc001851e
c00185a6:	55                   	push   ebp
c00185a7:	e8 ae f4 ff ff       	call   c0017a5a <Process::createThread(void (*)(void*), void*, int)>
c00185ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185b0:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00185b4:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00185b8:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00185bc:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00185c0:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00185c4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185cb:	e8 90 66 ff ff       	call   c000ec60 <operator new(unsigned long)>
c00185d0:	83 c4 0c             	add    esp,0xc
c00185d3:	89 c3                	mov    ebx,eax
c00185d5:	55                   	push   ebp
c00185d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185da:	50                   	push   eax
c00185db:	e8 9e 6c ff ff       	call   c000f27e <File::File(char const*, Process*)>
c00185e0:	83 c4 0c             	add    esp,0xc
c00185e3:	8d 44 24 17          	lea    eax,[esp+0x17]
c00185e7:	50                   	push   eax
c00185e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185ec:	50                   	push   eax
c00185ed:	53                   	push   ebx
c00185ee:	e8 9b 6f ff ff       	call   c000f58e <File::stat(unsigned long long*, bool*)>
c00185f3:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00185f7:	83 c4 10             	add    esp,0x10
c00185fa:	84 d2                	test   dl,dl
c00185fc:	74 1c                	je     c001861a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00185fe:	83 ec 0c             	sub    esp,0xc
c0018601:	68 0b 1d 02 c0       	push   0xc0021d0b
c0018606:	e8 d9 c3 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001860b:	e8 22 f3 ff ff       	call   c0017932 <unlockScheduler()>
c0018610:	83 c4 10             	add    esp,0x10
c0018613:	31 d2                	xor    edx,edx
c0018615:	e9 81 00 00 00       	jmp    c001869b <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001861a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001861e:	51                   	push   ecx
c001861f:	51                   	push   ecx
c0018620:	6a 01                	push   0x1
c0018622:	53                   	push   ebx
c0018623:	e8 ba 6c ff ff       	call   c000f2e2 <File::open(FileOpenMode)>
c0018628:	83 c4 10             	add    esp,0x10
c001862b:	85 c0                	test   eax,eax
c001862d:	74 1b                	je     c001864a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001862f:	83 ec 0c             	sub    esp,0xc
c0018632:	68 24 1d 02 c0       	push   0xc0021d24
c0018637:	e8 a8 c3 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001863c:	e8 f1 f2 ff ff       	call   c0017932 <unlockScheduler()>
c0018641:	83 c4 10             	add    esp,0x10
c0018644:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018648:	eb 51                	jmp    c001869b <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001864a:	83 ec 0c             	sub    esp,0xc
c001864d:	0f b7 ff             	movzx  edi,di
c0018650:	6a 07                	push   0x7
c0018652:	0f b7 f6             	movzx  esi,si
c0018655:	68 00 01 00 00       	push   0x100
c001865a:	6a 00                	push   0x0
c001865c:	6a 00                	push   0x0
c001865e:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018664:	e8 d3 60 ff ff       	call   c000e73c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018669:	83 c4 18             	add    esp,0x18
c001866c:	57                   	push   edi
c001866d:	56                   	push   esi
c001866e:	e8 e6 fe ff ff       	call   c0018559 <Vm::realToLinear(unsigned short, unsigned short)>
c0018673:	5a                   	pop    edx
c0018674:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018676:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001867a:	51                   	push   ecx
c001867b:	50                   	push   eax
c001867c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018680:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018684:	53                   	push   ebx
c0018685:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018688:	83 c4 14             	add    esp,0x14
c001868b:	53                   	push   ebx
c001868c:	e8 af 6c ff ff       	call   c000f340 <File::close()>
c0018691:	e8 9c f2 ff ff       	call   c0017932 <unlockScheduler()>
c0018696:	83 c4 10             	add    esp,0x10
c0018699:	b2 01                	mov    dl,0x1
c001869b:	83 c4 2c             	add    esp,0x2c
c001869e:	88 d0                	mov    al,dl
c00186a0:	5b                   	pop    ebx
c00186a1:	5e                   	pop    esi
c00186a2:	5f                   	pop    edi
c00186a3:	5d                   	pop    ebp
c00186a4:	c3                   	ret    

c00186a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00186a5:	57                   	push   edi
c00186a6:	56                   	push   esi
c00186a7:	53                   	push   ebx
c00186a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00186b4:	83 e8 06             	sub    eax,0x6
c00186b7:	0f b7 c0             	movzx  eax,ax
c00186ba:	50                   	push   eax
c00186bb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00186c0:	50                   	push   eax
c00186c1:	e8 93 fe ff ff       	call   c0018559 <Vm::realToLinear(unsigned short, unsigned short)>
c00186c6:	5a                   	pop    edx
c00186c7:	5e                   	pop    esi
c00186c8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00186cb:	8d 56 fa             	lea    edx,[esi-0x6]
c00186ce:	81 e2 ff ff 00 00    	and    edx,0xffff
c00186d4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00186d7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00186da:	83 c2 02             	add    edx,0x2
c00186dd:	66 89 10             	mov    WORD PTR [eax],dx
c00186e0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00186e3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00186e7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00186ea:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00186ee:	89 d6                	mov    esi,edx
c00186f0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00186f6:	66 81 e6 ff fd       	and    si,0xfdff
c00186fb:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00186ff:	74 07                	je     c0018708 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018701:	89 d6                	mov    esi,edx
c0018703:	66 81 ce 00 02       	or     si,0x200
c0018708:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001870c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018711:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018715:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001871d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018720:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018728:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001872b:	5b                   	pop    ebx
c001872c:	5e                   	pop    esi
c001872d:	5f                   	pop    edi
c001872e:	c3                   	ret    

c001872f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001872f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018734:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018739:	c1 e0 04             	shl    eax,0x4
c001873c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001873f:	c3                   	ret    

c0018740 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018740:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018745:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001874a:	c1 e0 04             	shl    eax,0x4
c001874d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018751:	c3                   	ret    

c0018752 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018752:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018757:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001875c:	c1 e0 04             	shl    eax,0x4
c001875f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018762:	c3                   	ret    

c0018763 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018763:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018768:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001876d:	c1 e0 04             	shl    eax,0x4
c0018770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018774:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018777:	c3                   	ret    

c0018778 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018778:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001877d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018782:	c1 e0 04             	shl    eax,0x4
c0018785:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018789:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001878d:	c3                   	ret    

c001878e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001878e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018793:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018798:	c1 e0 04             	shl    eax,0x4
c001879b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001879f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00187a2:	c3                   	ret    

c00187a3 <Vm::faultHandler(regs*)>:
c00187a3:	55                   	push   ebp
c00187a4:	57                   	push   edi
c00187a5:	56                   	push   esi
c00187a6:	53                   	push   ebx
c00187a7:	83 ec 1c             	sub    esp,0x1c
c00187aa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00187ae:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00187b1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00187b5:	0f b7 f0             	movzx  esi,ax
c00187b8:	52                   	push   edx
c00187b9:	0f b7 c0             	movzx  eax,ax
c00187bc:	50                   	push   eax
c00187bd:	e8 97 fd ff ff       	call   c0018559 <Vm::realToLinear(unsigned short, unsigned short)>
c00187c2:	5a                   	pop    edx
c00187c3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00187c6:	59                   	pop    ecx
c00187c7:	89 c7                	mov    edi,eax
c00187c9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00187cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187d9:	0f b7 c5             	movzx  eax,bp
c00187dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00187e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187e8:	e8 6c fd ff ff       	call   c0018559 <Vm::realToLinear(unsigned short, unsigned short)>
c00187ed:	5a                   	pop    edx
c00187ee:	59                   	pop    ecx
c00187ef:	b1 06                	mov    cl,0x6
c00187f1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00187f6:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00187fb:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00187fe:	80 fa 9d             	cmp    dl,0x9d
c0018801:	0f 84 1d 02 00 00    	je     c0018a24 <Vm::faultHandler(regs*)+0x281>
c0018807:	0f 87 8e 00 00 00    	ja     c001889b <Vm::faultHandler(regs*)+0xf8>
c001880d:	80 fa 66             	cmp    dl,0x66
c0018810:	0f 84 89 01 00 00    	je     c001899f <Vm::faultHandler(regs*)+0x1fc>
c0018816:	77 44                	ja     c001885c <Vm::faultHandler(regs*)+0xb9>
c0018818:	80 fa 36             	cmp    dl,0x36
c001881b:	0f 84 74 01 00 00    	je     c0018995 <Vm::faultHandler(regs*)+0x1f2>
c0018821:	77 1a                	ja     c001883d <Vm::faultHandler(regs*)+0x9a>
c0018823:	80 fa 26             	cmp    dl,0x26
c0018826:	0f 84 4b 01 00 00    	je     c0018977 <Vm::faultHandler(regs*)+0x1d4>
c001882c:	80 fa 2e             	cmp    dl,0x2e
c001882f:	0f 85 4a 05 00 00    	jne    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c0018835:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018838:	31 c9                	xor    ecx,ecx
c001883a:	47                   	inc    edi
c001883b:	eb be                	jmp    c00187fb <Vm::faultHandler(regs*)+0x58>
c001883d:	80 fa 64             	cmp    dl,0x64
c0018840:	0f 84 3b 01 00 00    	je     c0018981 <Vm::faultHandler(regs*)+0x1de>
c0018846:	0f 87 3f 01 00 00    	ja     c001898b <Vm::faultHandler(regs*)+0x1e8>
c001884c:	80 fa 3e             	cmp    dl,0x3e
c001884f:	0f 85 2a 05 00 00    	jne    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c0018855:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018858:	b1 01                	mov    cl,0x1
c001885a:	eb de                	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c001885c:	80 fa 6d             	cmp    dl,0x6d
c001885f:	0f 84 bf 02 00 00    	je     c0018b24 <Vm::faultHandler(regs*)+0x381>
c0018865:	77 17                	ja     c001887e <Vm::faultHandler(regs*)+0xdb>
c0018867:	80 fa 67             	cmp    dl,0x67
c001886a:	0f 84 3c 01 00 00    	je     c00189ac <Vm::faultHandler(regs*)+0x209>
c0018870:	80 fa 6c             	cmp    dl,0x6c
c0018873:	0f 84 5d 02 00 00    	je     c0018ad6 <Vm::faultHandler(regs*)+0x333>
c0018879:	e9 01 05 00 00       	jmp    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c001887e:	80 fa 6f             	cmp    dl,0x6f
c0018881:	0f 84 8b 03 00 00    	je     c0018c12 <Vm::faultHandler(regs*)+0x46f>
c0018887:	0f 82 0f 03 00 00    	jb     c0018b9c <Vm::faultHandler(regs*)+0x3f9>
c001888d:	80 fa 9c             	cmp    dl,0x9c
c0018890:	0f 84 23 01 00 00    	je     c00189b9 <Vm::faultHandler(regs*)+0x216>
c0018896:	e9 e4 04 00 00       	jmp    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c001889b:	80 fa ec             	cmp    dl,0xec
c001889e:	0f 84 7f 04 00 00    	je     c0018d23 <Vm::faultHandler(regs*)+0x580>
c00188a4:	77 7b                	ja     c0018921 <Vm::faultHandler(regs*)+0x17e>
c00188a6:	80 fa e4             	cmp    dl,0xe4
c00188a9:	0f 84 fe 03 00 00    	je     c0018cad <Vm::faultHandler(regs*)+0x50a>
c00188af:	77 53                	ja     c0018904 <Vm::faultHandler(regs*)+0x161>
c00188b1:	80 fa cd             	cmp    dl,0xcd
c00188b4:	0f 84 cd 01 00 00    	je     c0018a87 <Vm::faultHandler(regs*)+0x2e4>
c00188ba:	80 fa cf             	cmp    dl,0xcf
c00188bd:	0f 85 bc 04 00 00    	jne    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c00188c3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188c6:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00188c9:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00188cd:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00188d0:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00188d4:	81 ca 00 02 02 00    	or     edx,0x20200
c00188da:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188dd:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00188e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188e7:	66 c1 e8 09          	shr    ax,0x9
c00188eb:	83 e0 01             	and    eax,0x1
c00188ee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188f1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188f4:	83 c0 06             	add    eax,0x6
c00188f7:	25 ff ff 00 00       	and    eax,0xffff
c00188fc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00188ff:	e9 77 04 00 00       	jmp    c0018d7b <Vm::faultHandler(regs*)+0x5d8>
c0018904:	80 fa e6             	cmp    dl,0xe6
c0018907:	0f 84 ea 03 00 00    	je     c0018cf7 <Vm::faultHandler(regs*)+0x554>
c001890d:	0f 82 b6 03 00 00    	jb     c0018cc9 <Vm::faultHandler(regs*)+0x526>
c0018913:	80 fa e7             	cmp    dl,0xe7
c0018916:	0f 84 f2 03 00 00    	je     c0018d0e <Vm::faultHandler(regs*)+0x56b>
c001891c:	e9 5e 04 00 00       	jmp    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c0018921:	80 fa ef             	cmp    dl,0xef
c0018924:	0f 84 3c 04 00 00    	je     c0018d66 <Vm::faultHandler(regs*)+0x5c3>
c001892a:	77 28                	ja     c0018954 <Vm::faultHandler(regs*)+0x1b1>
c001892c:	80 fa ed             	cmp    dl,0xed
c001892f:	0f 84 0a 04 00 00    	je     c0018d3f <Vm::faultHandler(regs*)+0x59c>
c0018935:	80 fa ee             	cmp    dl,0xee
c0018938:	0f 85 41 04 00 00    	jne    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c001893e:	50                   	push   eax
c001893f:	50                   	push   eax
c0018940:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018944:	50                   	push   eax
c0018945:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018949:	50                   	push   eax
c001894a:	e8 00 fc ff ff       	call   c001854f <Vm::outbv(unsigned short, unsigned char)>
c001894f:	e9 0a 04 00 00       	jmp    c0018d5e <Vm::faultHandler(regs*)+0x5bb>
c0018954:	80 fa fa             	cmp    dl,0xfa
c0018957:	0f 84 5d 01 00 00    	je     c0018aba <Vm::faultHandler(regs*)+0x317>
c001895d:	80 fa fb             	cmp    dl,0xfb
c0018960:	0f 84 62 01 00 00    	je     c0018ac8 <Vm::faultHandler(regs*)+0x325>
c0018966:	80 fa f3             	cmp    dl,0xf3
c0018969:	0f 85 10 04 00 00    	jne    c0018d7f <Vm::faultHandler(regs*)+0x5dc>
c001896f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018972:	e9 c3 fe ff ff       	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c0018977:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001897a:	b1 02                	mov    cl,0x2
c001897c:	e9 b9 fe ff ff       	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c0018981:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018984:	b1 03                	mov    cl,0x3
c0018986:	e9 af fe ff ff       	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c001898b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001898e:	b1 04                	mov    cl,0x4
c0018990:	e9 a5 fe ff ff       	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c0018995:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018998:	b1 05                	mov    cl,0x5
c001899a:	e9 9b fe ff ff       	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c001899f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00189a2:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00189a7:	e9 8e fe ff ff       	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c00189ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00189af:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00189b4:	e9 81 fe ff ff       	jmp    c001883a <Vm::faultHandler(regs*)+0x97>
c00189b9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00189bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189c0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189c5:	74 30                	je     c00189f7 <Vm::faultHandler(regs*)+0x254>
c00189c7:	83 e9 04             	sub    ecx,0x4
c00189ca:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00189d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00189d6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00189d9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00189dc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189e2:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00189e6:	0f 84 8c 03 00 00    	je     c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c00189ec:	80 ce 02             	or     dh,0x2
c00189ef:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00189f2:	e9 81 03 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c00189f7:	83 e9 02             	sub    ecx,0x2
c00189fa:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018a00:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018a03:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a07:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018a0d:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018a11:	74 05                	je     c0018a18 <Vm::faultHandler(regs*)+0x275>
c0018a13:	80 ce 02             	or     dh,0x2
c0018a16:	eb 03                	jmp    c0018a1b <Vm::faultHandler(regs*)+0x278>
c0018a18:	80 e6 fd             	and    dh,0xfd
c0018a1b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a1f:	e9 54 03 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018a24:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a29:	74 2a                	je     c0018a55 <Vm::faultHandler(regs*)+0x2b2>
c0018a2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0018a2d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018a33:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a39:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a3e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a44:	c1 e8 09             	shr    eax,0x9
c0018a47:	83 e0 01             	and    eax,0x1
c0018a4a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a4d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a50:	83 c0 04             	add    eax,0x4
c0018a53:	eb 25                	jmp    c0018a7a <Vm::faultHandler(regs*)+0x2d7>
c0018a55:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018a58:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a5e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a61:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018a64:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a6a:	66 c1 e8 09          	shr    ax,0x9
c0018a6e:	83 e0 01             	and    eax,0x1
c0018a71:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a74:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a77:	83 c0 02             	add    eax,0x2
c0018a7a:	25 ff ff 00 00       	and    eax,0xffff
c0018a7f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018a82:	e9 f1 02 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018a87:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a8b:	3c ff                	cmp    al,0xff
c0018a8d:	75 10                	jne    c0018a9f <Vm::faultHandler(regs*)+0x2fc>
c0018a8f:	83 ec 0c             	sub    esp,0xc
c0018a92:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018a95:	e8 8c f9 ff ff       	call   c0018426 <Thr::terminateFromIRQ(int)>
c0018a9a:	e9 c2 02 00 00       	jmp    c0018d61 <Vm::faultHandler(regs*)+0x5be>
c0018a9f:	83 ec 0c             	sub    esp,0xc
c0018aa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018aaa:	57                   	push   edi
c0018aab:	50                   	push   eax
c0018aac:	53                   	push   ebx
c0018aad:	e8 f3 fb ff ff       	call   c00186a5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018ab2:	83 c4 20             	add    esp,0x20
c0018ab5:	e9 c1 02 00 00       	jmp    c0018d7b <Vm::faultHandler(regs*)+0x5d8>
c0018aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018abf:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018ac3:	e9 b0 02 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018ac8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018acd:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018ad1:	e9 a2 02 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018ad6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018adb:	74 0d                	je     c0018aea <Vm::faultHandler(regs*)+0x347>
c0018add:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018ae4:	0f 87 e9 02 00 00    	ja     c0018dd3 <Vm::faultHandler(regs*)+0x630>
c0018aea:	83 ec 0c             	sub    esp,0xc
c0018aed:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018af0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018af4:	50                   	push   eax
c0018af5:	e8 4f fa ff ff       	call   c0018549 <Vm::inbv(unsigned short)>
c0018afa:	83 c4 0c             	add    esp,0xc
c0018afd:	0f b6 c0             	movzx  eax,al
c0018b00:	0f b7 c9             	movzx  ecx,cx
c0018b03:	50                   	push   eax
c0018b04:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018b08:	50                   	push   eax
c0018b09:	51                   	push   ecx
c0018b0a:	e8 54 fc ff ff       	call   c0018763 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018b0f:	83 c4 10             	add    esp,0x10
c0018b12:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b15:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b19:	74 03                	je     c0018b1e <Vm::faultHandler(regs*)+0x37b>
c0018b1b:	48                   	dec    eax
c0018b1c:	eb 01                	jmp    c0018b1f <Vm::faultHandler(regs*)+0x37c>
c0018b1e:	40                   	inc    eax
c0018b1f:	0f b7 c0             	movzx  eax,ax
c0018b22:	eb 70                	jmp    c0018b94 <Vm::faultHandler(regs*)+0x3f1>
c0018b24:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018b27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018b2a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b2f:	74 0c                	je     c0018b3d <Vm::faultHandler(regs*)+0x39a>
c0018b31:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018b37:	0f 87 96 02 00 00    	ja     c0018dd3 <Vm::faultHandler(regs*)+0x630>
c0018b3d:	0f b7 c9             	movzx  ecx,cx
c0018b40:	0f b7 f6             	movzx  esi,si
c0018b43:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018b46:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b4b:	74 20                	je     c0018b6d <Vm::faultHandler(regs*)+0x3ca>
c0018b4d:	ed                   	in     eax,dx
c0018b4e:	55                   	push   ebp
c0018b4f:	50                   	push   eax
c0018b50:	51                   	push   ecx
c0018b51:	56                   	push   esi
c0018b52:	e8 37 fc ff ff       	call   c001878e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018b57:	83 c4 10             	add    esp,0x10
c0018b5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b5d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b61:	74 05                	je     c0018b68 <Vm::faultHandler(regs*)+0x3c5>
c0018b63:	83 e8 04             	sub    eax,0x4
c0018b66:	eb 27                	jmp    c0018b8f <Vm::faultHandler(regs*)+0x3ec>
c0018b68:	83 c0 04             	add    eax,0x4
c0018b6b:	eb 22                	jmp    c0018b8f <Vm::faultHandler(regs*)+0x3ec>
c0018b6d:	66 ed                	in     ax,dx
c0018b6f:	0f b7 c0             	movzx  eax,ax
c0018b72:	57                   	push   edi
c0018b73:	50                   	push   eax
c0018b74:	51                   	push   ecx
c0018b75:	56                   	push   esi
c0018b76:	e8 fd fb ff ff       	call   c0018778 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b81:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b85:	74 05                	je     c0018b8c <Vm::faultHandler(regs*)+0x3e9>
c0018b87:	83 e8 02             	sub    eax,0x2
c0018b8a:	eb 03                	jmp    c0018b8f <Vm::faultHandler(regs*)+0x3ec>
c0018b8c:	83 c0 02             	add    eax,0x2
c0018b8f:	25 ff ff 00 00       	and    eax,0xffff
c0018b94:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018b97:	e9 dc 01 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018b9c:	49                   	dec    ecx
c0018b9d:	80 f9 05             	cmp    cl,0x5
c0018ba0:	77 24                	ja     c0018bc6 <Vm::faultHandler(regs*)+0x423>
c0018ba2:	0f b6 c9             	movzx  ecx,cl
c0018ba5:	ff 24 8d 6c 1d 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde294]
c0018bac:	0f b7 f5             	movzx  esi,bp
c0018baf:	eb 15                	jmp    c0018bc6 <Vm::faultHandler(regs*)+0x423>
c0018bb1:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018bb5:	eb 0f                	jmp    c0018bc6 <Vm::faultHandler(regs*)+0x423>
c0018bb7:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018bbb:	eb 09                	jmp    c0018bc6 <Vm::faultHandler(regs*)+0x423>
c0018bbd:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018bc1:	eb 03                	jmp    c0018bc6 <Vm::faultHandler(regs*)+0x423>
c0018bc3:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018bc6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018bc9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018bce:	74 0b                	je     c0018bdb <Vm::faultHandler(regs*)+0x438>
c0018bd0:	3d ff ff 00 00       	cmp    eax,0xffff
c0018bd5:	0f 87 f8 01 00 00    	ja     c0018dd3 <Vm::faultHandler(regs*)+0x630>
c0018bdb:	0f b7 c0             	movzx  eax,ax
c0018bde:	52                   	push   edx
c0018bdf:	52                   	push   edx
c0018be0:	50                   	push   eax
c0018be1:	56                   	push   esi
c0018be2:	e8 48 fb ff ff       	call   c001872f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018be7:	59                   	pop    ecx
c0018be8:	0f b6 c0             	movzx  eax,al
c0018beb:	5e                   	pop    esi
c0018bec:	50                   	push   eax
c0018bed:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018bf1:	50                   	push   eax
c0018bf2:	e8 58 f9 ff ff       	call   c001854f <Vm::outbv(unsigned short, unsigned char)>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018bfd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018c01:	74 03                	je     c0018c06 <Vm::faultHandler(regs*)+0x463>
c0018c03:	48                   	dec    eax
c0018c04:	eb 01                	jmp    c0018c07 <Vm::faultHandler(regs*)+0x464>
c0018c06:	40                   	inc    eax
c0018c07:	0f b7 c0             	movzx  eax,ax
c0018c0a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018c0d:	e9 66 01 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018c12:	49                   	dec    ecx
c0018c13:	80 f9 05             	cmp    cl,0x5
c0018c16:	77 1f                	ja     c0018c37 <Vm::faultHandler(regs*)+0x494>
c0018c18:	0f b6 c9             	movzx  ecx,cl
c0018c1b:	ff 24 8d 84 1d 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde27c]
c0018c22:	89 ee                	mov    esi,ebp
c0018c24:	eb 11                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x494>
c0018c26:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018c29:	eb 0c                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x494>
c0018c2b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018c2e:	eb 07                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x494>
c0018c30:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018c33:	eb 02                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x494>
c0018c35:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018c37:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018c3a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018c3f:	74 0c                	je     c0018c4d <Vm::faultHandler(regs*)+0x4aa>
c0018c41:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018c47:	0f 87 86 01 00 00    	ja     c0018dd3 <Vm::faultHandler(regs*)+0x630>
c0018c4d:	0f b7 d6             	movzx  edx,si
c0018c50:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018c53:	0f b7 c1             	movzx  eax,cx
c0018c56:	81 e7 00 04 00 00    	and    edi,0x400
c0018c5c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018c5f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c64:	74 1d                	je     c0018c83 <Vm::faultHandler(regs*)+0x4e0>
c0018c66:	55                   	push   ebp
c0018c67:	55                   	push   ebp
c0018c68:	50                   	push   eax
c0018c69:	52                   	push   edx
c0018c6a:	e8 e3 fa ff ff       	call   c0018752 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018c6f:	83 c4 10             	add    esp,0x10
c0018c72:	89 f2                	mov    edx,esi
c0018c74:	ef                   	out    dx,eax
c0018c75:	85 ff                	test   edi,edi
c0018c77:	74 05                	je     c0018c7e <Vm::faultHandler(regs*)+0x4db>
c0018c79:	83 e9 04             	sub    ecx,0x4
c0018c7c:	eb 21                	jmp    c0018c9f <Vm::faultHandler(regs*)+0x4fc>
c0018c7e:	83 c1 04             	add    ecx,0x4
c0018c81:	eb 1c                	jmp    c0018c9f <Vm::faultHandler(regs*)+0x4fc>
c0018c83:	55                   	push   ebp
c0018c84:	55                   	push   ebp
c0018c85:	50                   	push   eax
c0018c86:	52                   	push   edx
c0018c87:	e8 b4 fa ff ff       	call   c0018740 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018c8c:	83 c4 10             	add    esp,0x10
c0018c8f:	89 f2                	mov    edx,esi
c0018c91:	66 ef                	out    dx,ax
c0018c93:	85 ff                	test   edi,edi
c0018c95:	74 05                	je     c0018c9c <Vm::faultHandler(regs*)+0x4f9>
c0018c97:	83 e9 02             	sub    ecx,0x2
c0018c9a:	eb 03                	jmp    c0018c9f <Vm::faultHandler(regs*)+0x4fc>
c0018c9c:	83 c1 02             	add    ecx,0x2
c0018c9f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018ca5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018ca8:	e9 cb 00 00 00       	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018cad:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018cb4:	83 ec 0c             	sub    esp,0xc
c0018cb7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018cbb:	50                   	push   eax
c0018cbc:	e8 88 f8 ff ff       	call   c0018549 <Vm::inbv(unsigned short)>
c0018cc1:	0f b6 c0             	movzx  eax,al
c0018cc4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018cc7:	eb 3f                	jmp    c0018d08 <Vm::faultHandler(regs*)+0x565>
c0018cc9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cce:	74 07                	je     c0018cd7 <Vm::faultHandler(regs*)+0x534>
c0018cd0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018cd4:	ed                   	in     eax,dx
c0018cd5:	eb 14                	jmp    c0018ceb <Vm::faultHandler(regs*)+0x548>
c0018cd7:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018cda:	66 31 c9             	xor    cx,cx
c0018cdd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018ce0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018ce4:	66 ed                	in     ax,dx
c0018ce6:	0f b7 c0             	movzx  eax,ax
c0018ce9:	09 c8                	or     eax,ecx
c0018ceb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018cee:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018cf2:	e9 84 00 00 00       	jmp    c0018d7b <Vm::faultHandler(regs*)+0x5d8>
c0018cf7:	52                   	push   edx
c0018cf8:	52                   	push   edx
c0018cf9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018cfd:	50                   	push   eax
c0018cfe:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d02:	50                   	push   eax
c0018d03:	e8 47 f8 ff ff       	call   c001854f <Vm::outbv(unsigned short, unsigned char)>
c0018d08:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018d0c:	eb 53                	jmp    c0018d61 <Vm::faultHandler(regs*)+0x5be>
c0018d0e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018d11:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018d15:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d1a:	74 03                	je     c0018d1f <Vm::faultHandler(regs*)+0x57c>
c0018d1c:	ef                   	out    dx,eax
c0018d1d:	eb cf                	jmp    c0018cee <Vm::faultHandler(regs*)+0x54b>
c0018d1f:	66 ef                	out    dx,ax
c0018d21:	eb cb                	jmp    c0018cee <Vm::faultHandler(regs*)+0x54b>
c0018d23:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018d2a:	83 ec 0c             	sub    esp,0xc
c0018d2d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018d31:	50                   	push   eax
c0018d32:	e8 12 f8 ff ff       	call   c0018549 <Vm::inbv(unsigned short)>
c0018d37:	0f b6 c0             	movzx  eax,al
c0018d3a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018d3d:	eb 1f                	jmp    c0018d5e <Vm::faultHandler(regs*)+0x5bb>
c0018d3f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d42:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d47:	74 03                	je     c0018d4c <Vm::faultHandler(regs*)+0x5a9>
c0018d49:	ed                   	in     eax,dx
c0018d4a:	eb 0d                	jmp    c0018d59 <Vm::faultHandler(regs*)+0x5b6>
c0018d4c:	66 ed                	in     ax,dx
c0018d4e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018d51:	0f b7 c0             	movzx  eax,ax
c0018d54:	66 31 d2             	xor    dx,dx
c0018d57:	09 d0                	or     eax,edx
c0018d59:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018d5c:	eb 1a                	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018d5e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d61:	83 c4 10             	add    esp,0x10
c0018d64:	eb 15                	jmp    c0018d7b <Vm::faultHandler(regs*)+0x5d8>
c0018d66:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018d69:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d6c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d71:	74 03                	je     c0018d76 <Vm::faultHandler(regs*)+0x5d3>
c0018d73:	ef                   	out    dx,eax
c0018d74:	eb 02                	jmp    c0018d78 <Vm::faultHandler(regs*)+0x5d5>
c0018d76:	66 ef                	out    dx,ax
c0018d78:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d7b:	b0 01                	mov    al,0x1
c0018d7d:	eb 56                	jmp    c0018dd5 <Vm::faultHandler(regs*)+0x632>
c0018d7f:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018d83:	50                   	push   eax
c0018d84:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018d88:	50                   	push   eax
c0018d89:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018d8d:	50                   	push   eax
c0018d8e:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018d92:	50                   	push   eax
c0018d93:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d97:	50                   	push   eax
c0018d98:	52                   	push   edx
c0018d99:	52                   	push   edx
c0018d9a:	68 3d 1d 02 c0       	push   0xc0021d3d
c0018d9f:	e8 ab 5f ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c0018da4:	83 c4 20             	add    esp,0x20
c0018da7:	83 ec 0c             	sub    esp,0xc
c0018daa:	6a 60                	push   0x60
c0018dac:	e8 98 f7 ff ff       	call   c0018549 <Vm::inbv(unsigned short)>
c0018db1:	83 c4 10             	add    esp,0x10
c0018db4:	3c 1c                	cmp    al,0x1c
c0018db6:	74 04                	je     c0018dbc <Vm::faultHandler(regs*)+0x619>
c0018db8:	3c 5a                	cmp    al,0x5a
c0018dba:	75 eb                	jne    c0018da7 <Vm::faultHandler(regs*)+0x604>
c0018dbc:	3c 5a                	cmp    al,0x5a
c0018dbe:	74 04                	je     c0018dc4 <Vm::faultHandler(regs*)+0x621>
c0018dc0:	3c 1c                	cmp    al,0x1c
c0018dc2:	75 0f                	jne    c0018dd3 <Vm::faultHandler(regs*)+0x630>
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	6a 60                	push   0x60
c0018dc9:	e8 7b f7 ff ff       	call   c0018549 <Vm::inbv(unsigned short)>
c0018dce:	83 c4 10             	add    esp,0x10
c0018dd1:	eb e9                	jmp    c0018dbc <Vm::faultHandler(regs*)+0x619>
c0018dd3:	31 c0                	xor    eax,eax
c0018dd5:	83 c4 1c             	add    esp,0x1c
c0018dd8:	5b                   	pop    ebx
c0018dd9:	5e                   	pop    esi
c0018dda:	5f                   	pop    edi
c0018ddb:	5d                   	pop    ebp
c0018ddc:	c3                   	ret    
c0018ddd:	90                   	nop

c0018dde <FAT::getName()>:
c0018dde:	b8 9c 1d 02 c0       	mov    eax,0xc0021d9c
c0018de3:	c3                   	ret    

c0018de4 <FAT::tell(void*, unsigned long long*)>:
c0018de4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018de9:	75 06                	jne    c0018df1 <FAT::tell(void*, unsigned long long*)+0xd>
c0018deb:	b8 04 00 00 00       	mov    eax,0x4
c0018df0:	c3                   	ret    
c0018df1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018df6:	75 06                	jne    c0018dfe <FAT::tell(void*, unsigned long long*)+0x1a>
c0018df8:	b8 04 00 00 00       	mov    eax,0x4
c0018dfd:	c3                   	ret    
c0018dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e02:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018e05:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e0c:	89 01                	mov    DWORD PTR [ecx],eax
c0018e0e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e11:	b8 00 00 00 00       	mov    eax,0x0
c0018e16:	c3                   	ret    
c0018e17:	90                   	nop

c0018e18 <FAT::stat(void*, unsigned long long*)>:
c0018e18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e1d:	75 06                	jne    c0018e25 <FAT::stat(void*, unsigned long long*)+0xd>
c0018e1f:	b8 04 00 00 00       	mov    eax,0x4
c0018e24:	c3                   	ret    
c0018e25:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e2a:	75 06                	jne    c0018e32 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018e2c:	b8 04 00 00 00       	mov    eax,0x4
c0018e31:	c3                   	ret    
c0018e32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e36:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018e39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e40:	89 01                	mov    DWORD PTR [ecx],eax
c0018e42:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e45:	b8 00 00 00 00       	mov    eax,0x0
c0018e4a:	c3                   	ret    
c0018e4b:	90                   	nop

c0018e4c <FAT::~FAT()>:
c0018e4c:	83 ec 0c             	sub    esp,0xc
c0018e4f:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c0018e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e58:	89 10                	mov    DWORD PTR [eax],edx
c0018e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e5e:	83 ec 0c             	sub    esp,0xc
c0018e61:	50                   	push   eax
c0018e62:	e8 11 62 ff ff       	call   c000f078 <Filesystem::~Filesystem()>
c0018e67:	83 c4 10             	add    esp,0x10
c0018e6a:	90                   	nop
c0018e6b:	83 c4 0c             	add    esp,0xc
c0018e6e:	c3                   	ret    
c0018e6f:	90                   	nop

c0018e70 <FAT::~FAT()>:
c0018e70:	83 ec 0c             	sub    esp,0xc
c0018e73:	83 ec 0c             	sub    esp,0xc
c0018e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e7a:	e8 cd ff ff ff       	call   c0018e4c <FAT::~FAT()>
c0018e7f:	83 c4 10             	add    esp,0x10
c0018e82:	83 ec 08             	sub    esp,0x8
c0018e85:	6a 08                	push   0x8
c0018e87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e8b:	e8 df 5d ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c0018e90:	83 c4 10             	add    esp,0x10
c0018e93:	83 c4 0c             	add    esp,0xc
c0018e96:	c3                   	ret    
c0018e97:	90                   	nop

c0018e98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018e98:	83 ec 1c             	sub    esp,0x1c
c0018e9b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018ea2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018ea7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018eab:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c0018eb2:	83 f8 ff             	cmp    eax,0xffffffff
c0018eb5:	75 34                	jne    c0018eeb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018eb7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ebb:	88 c2                	mov    dl,al
c0018ebd:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c0018ec2:	01 d0                	add    eax,edx
c0018ec4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ec8:	8b 15 20 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024720
c0018ece:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ed2:	89 14 85 40 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb8c0],edx
c0018ed9:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c0018ede:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ee2:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c0018ee9:	eb 17                	jmp    c0018f02 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018eeb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018eef:	88 c2                	mov    dl,al
c0018ef1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ef5:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c0018efc:	01 d0                	add    eax,edx
c0018efe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f02:	83 ec 04             	sub    esp,0x4
c0018f05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f0d:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018f11:	50                   	push   eax
c0018f12:	e8 4e db fe ff       	call   c0006a65 <f_getlabel>
c0018f17:	83 c4 10             	add    esp,0x10
c0018f1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f23:	75 07                	jne    c0018f2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018f25:	b8 00 00 00 00       	mov    eax,0x0
c0018f2a:	eb 05                	jmp    c0018f31 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018f2c:	b8 01 00 00 00       	mov    eax,0x1
c0018f31:	83 c4 1c             	add    esp,0x1c
c0018f34:	c3                   	ret    
c0018f35:	90                   	nop

c0018f36 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018f36:	57                   	push   edi
c0018f37:	83 ec 58             	sub    esp,0x58
c0018f3a:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018f42:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f46:	b9 0f 00 00 00       	mov    ecx,0xf
c0018f4b:	b8 00 00 00 00       	mov    eax,0x0
c0018f50:	fc                   	cld    
c0018f51:	89 d7                	mov    edi,edx
c0018f53:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018f55:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f59:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c0018f60:	83 f8 ff             	cmp    eax,0xffffffff
c0018f63:	75 34                	jne    c0018f99 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018f65:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f69:	88 c2                	mov    dl,al
c0018f6b:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c0018f70:	01 d0                	add    eax,edx
c0018f72:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f76:	8b 15 20 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024720
c0018f7c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f80:	89 14 85 40 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb8c0],edx
c0018f87:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c0018f8c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018f90:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c0018f97:	eb 17                	jmp    c0018fb0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018f99:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f9d:	88 c2                	mov    dl,al
c0018f9f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018fa3:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c0018faa:	01 d0                	add    eax,edx
c0018fac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018fb0:	83 ec 08             	sub    esp,0x8
c0018fb3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018fb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fbb:	50                   	push   eax
c0018fbc:	e8 9d 77 fe ff       	call   c000075e <strcat>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	83 ec 0c             	sub    esp,0xc
c0018fc7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fcb:	50                   	push   eax
c0018fcc:	e8 82 dc fe ff       	call   c0006c53 <f_setlabel>
c0018fd1:	83 c4 10             	add    esp,0x10
c0018fd4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018fd8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018fdd:	75 07                	jne    c0018fe6 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018fdf:	b8 00 00 00 00       	mov    eax,0x0
c0018fe4:	eb 05                	jmp    c0018feb <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018fe6:	b8 01 00 00 00       	mov    eax,0x1
c0018feb:	83 c4 58             	add    esp,0x58
c0018fee:	5f                   	pop    edi
c0018fef:	c3                   	ret    

c0018ff0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018ff0:	83 ec 2c             	sub    esp,0x2c
c0018ff3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018ffb:	83 ec 08             	sub    esp,0x8
c0018ffe:	68 c0 1d 02 c0       	push   0xc0021dc0
c0019003:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019007:	e8 ec 76 fe ff       	call   c00006f8 <strcmp>
c001900c:	83 c4 10             	add    esp,0x10
c001900f:	85 c0                	test   eax,eax
c0019011:	0f 94 c0             	sete   al
c0019014:	84 c0                	test   al,al
c0019016:	74 0d                	je     c0019025 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019018:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019020:	e9 a6 00 00 00       	jmp    c00190cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019025:	83 ec 08             	sub    esp,0x8
c0019028:	68 b2 1d 02 c0       	push   0xc0021db2
c001902d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019031:	e8 c2 76 fe ff       	call   c00006f8 <strcmp>
c0019036:	83 c4 10             	add    esp,0x10
c0019039:	85 c0                	test   eax,eax
c001903b:	0f 94 c0             	sete   al
c001903e:	84 c0                	test   al,al
c0019040:	74 0a                	je     c001904c <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019042:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001904a:	eb 7f                	jmp    c00190cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001904c:	83 ec 08             	sub    esp,0x8
c001904f:	68 b8 1d 02 c0       	push   0xc0021db8
c0019054:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019058:	e8 9b 76 fe ff       	call   c00006f8 <strcmp>
c001905d:	83 c4 10             	add    esp,0x10
c0019060:	85 c0                	test   eax,eax
c0019062:	0f 94 c0             	sete   al
c0019065:	84 c0                	test   al,al
c0019067:	74 0a                	je     c0019073 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019069:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019071:	eb 58                	jmp    c00190cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019073:	83 ec 08             	sub    esp,0x8
c0019076:	68 2c f3 01 c0       	push   0xc001f32c
c001907b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001907f:	e8 74 76 fe ff       	call   c00006f8 <strcmp>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	85 c0                	test   eax,eax
c0019089:	0f 94 c0             	sete   al
c001908c:	84 c0                	test   al,al
c001908e:	74 0a                	je     c001909a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019090:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019098:	eb 31                	jmp    c00190cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001909a:	83 ec 08             	sub    esp,0x8
c001909d:	68 be 1d 02 c0       	push   0xc0021dbe
c00190a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190a6:	e8 4d 76 fe ff       	call   c00006f8 <strcmp>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	85 c0                	test   eax,eax
c00190b0:	0f 94 c0             	sete   al
c00190b3:	84 c0                	test   al,al
c00190b5:	74 0a                	je     c00190c1 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00190b7:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00190bf:	eb 0a                	jmp    c00190cb <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00190c1:	b8 08 00 00 00       	mov    eax,0x8
c00190c6:	e9 04 01 00 00       	jmp    c00191cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190cb:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00190d2:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00190d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190db:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c00190e2:	83 f8 ff             	cmp    eax,0xffffffff
c00190e5:	75 34                	jne    c001911b <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00190e7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00190eb:	88 c2                	mov    dl,al
c00190ed:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c00190f2:	01 d0                	add    eax,edx
c00190f4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00190f8:	8b 15 20 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024720
c00190fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019102:	89 14 85 40 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb8c0],edx
c0019109:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c001910e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019112:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c0019119:	eb 17                	jmp    c0019132 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001911b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001911f:	88 c2                	mov    dl,al
c0019121:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019125:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c001912c:	01 d0                	add    eax,edx
c001912e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019132:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019136:	88 04 24             	mov    BYTE PTR [esp],al
c0019139:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001913d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019141:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019149:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001914e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019156:	83 ec 0c             	sub    esp,0xc
c0019159:	68 00 20 00 00       	push   0x2000
c001915e:	e8 bb 2a ff ff       	call   c000bc1e <malloc>
c0019163:	83 c4 10             	add    esp,0x10
c0019166:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001916a:	68 00 20 00 00       	push   0x2000
c001916f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019173:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019177:	50                   	push   eax
c0019178:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001917c:	50                   	push   eax
c001917d:	e8 1c df fe ff       	call   c000709e <f_mkfs>
c0019182:	83 c4 10             	add    esp,0x10
c0019185:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019189:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001918e:	75 07                	jne    c0019197 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019190:	b8 00 00 00 00       	mov    eax,0x0
c0019195:	eb 38                	jmp    c00191cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019197:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001919c:	75 17                	jne    c00191b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001919e:	83 ec 0c             	sub    esp,0xc
c00191a1:	68 f0 1d 02 c0       	push   0xc0021df0
c00191a6:	e8 a4 5b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00191ab:	83 c4 10             	add    esp,0x10
c00191ae:	b8 09 00 00 00       	mov    eax,0x9
c00191b3:	eb 1a                	jmp    c00191cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00191b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191b9:	83 ec 08             	sub    esp,0x8
c00191bc:	50                   	push   eax
c00191bd:	68 c4 1d 02 c0       	push   0xc0021dc4
c00191c2:	e8 88 5b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	b8 01 00 00 00       	mov    eax,0x1
c00191cf:	83 c4 2c             	add    esp,0x2c
c00191d2:	c3                   	ret    
c00191d3:	90                   	nop

c00191d4 <FAT::tryMount(LogicalDisk*, int)>:
c00191d4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00191da:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c00191df:	83 f8 14             	cmp    eax,0x14
c00191e2:	75 17                	jne    c00191fb <FAT::tryMount(LogicalDisk*, int)+0x27>
c00191e4:	83 ec 0c             	sub    esp,0xc
c00191e7:	68 d6 1d 02 c0       	push   0xc0021dd6
c00191ec:	e8 f3 b7 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	b0 00                	mov    al,0x0
c00191f6:	e9 d7 01 00 00       	jmp    c00193d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00191fb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019202:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019208:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001920e:	3d 00 02 00 00       	cmp    eax,0x200
c0019213:	74 07                	je     c001921c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019215:	b0 00                	mov    al,0x0
c0019217:	e9 b6 01 00 00       	jmp    c00193d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001921c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019224:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001922b:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c0019232:	83 f8 ff             	cmp    eax,0xffffffff
c0019235:	74 07                	je     c001923e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019237:	b0 01                	mov    al,0x1
c0019239:	e9 94 01 00 00       	jmp    c00193d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001923e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019248:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019250:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019257:	88 c2                	mov    dl,al
c0019259:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c001925e:	01 d0                	add    eax,edx
c0019260:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019267:	8b 15 20 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024720
c001926d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019274:	89 14 85 40 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb8c0],edx
c001927b:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c0019280:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019287:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c001928e:	83 ec 0c             	sub    esp,0xc
c0019291:	68 54 02 00 00       	push   0x254
c0019296:	e8 83 29 ff ff       	call   c000bc1e <malloc>
c001929b:	83 c4 10             	add    esp,0x10
c001929e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00192a5:	83 ec 04             	sub    esp,0x4
c00192a8:	6a 00                	push   0x0
c00192aa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00192b1:	50                   	push   eax
c00192b2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192b9:	e8 9e b9 fe ff       	call   c0004c5c <f_mount>
c00192be:	83 c4 10             	add    esp,0x10
c00192c1:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00192c8:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00192d0:	74 19                	je     c00192eb <FAT::tryMount(LogicalDisk*, int)+0x117>
c00192d2:	83 ec 0c             	sub    esp,0xc
c00192d5:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192dc:	e8 5d 29 ff ff       	call   c000bc3e <rfree>
c00192e1:	83 c4 10             	add    esp,0x10
c00192e4:	b0 00                	mov    al,0x0
c00192e6:	e9 e7 00 00 00       	jmp    c00193d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192eb:	83 ec 04             	sub    esp,0x4
c00192ee:	68 00 01 00 00       	push   0x100
c00192f3:	6a 00                	push   0x0
c00192f5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00192fc:	50                   	push   eax
c00192fd:	e8 06 73 fe ff       	call   c0000608 <memset>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	83 ec 08             	sub    esp,0x8
c0019308:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001930f:	50                   	push   eax
c0019310:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019317:	50                   	push   eax
c0019318:	e8 41 74 fe ff       	call   c000075e <strcat>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	83 ec 08             	sub    esp,0x8
c0019323:	68 e4 1d 02 c0       	push   0xc0021de4
c0019328:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001932f:	50                   	push   eax
c0019330:	e8 29 74 fe ff       	call   c000075e <strcat>
c0019335:	83 c4 10             	add    esp,0x10
c0019338:	83 ec 04             	sub    esp,0x4
c001933b:	6a 01                	push   0x1
c001933d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019344:	50                   	push   eax
c0019345:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019349:	50                   	push   eax
c001934a:	e8 6f b9 fe ff       	call   c0004cbe <f_open>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019359:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019360:	85 c0                	test   eax,eax
c0019362:	74 0a                	je     c001936e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019364:	78 2d                	js     c0019393 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019366:	83 e8 04             	sub    eax,0x4
c0019369:	83 f8 01             	cmp    eax,0x1
c001936c:	77 25                	ja     c0019393 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001936e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019376:	83 ec 0c             	sub    esp,0xc
c0019379:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001937d:	50                   	push   eax
c001937e:	e8 8d c4 fe ff       	call   c0005810 <f_close>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	90                   	nop
c0019387:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001938f:	74 3a                	je     c00193cb <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019391:	eb 2d                	jmp    c00193c0 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019393:	83 ec 0c             	sub    esp,0xc
c0019396:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001939d:	e8 9c 28 ff ff       	call   c000bc3e <rfree>
c00193a2:	83 c4 10             	add    esp,0x10
c00193a5:	83 ec 04             	sub    esp,0x4
c00193a8:	6a 00                	push   0x0
c00193aa:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00193b1:	50                   	push   eax
c00193b2:	6a 00                	push   0x0
c00193b4:	e8 a3 b8 fe ff       	call   c0004c5c <f_mount>
c00193b9:	83 c4 10             	add    esp,0x10
c00193bc:	b0 00                	mov    al,0x0
c00193be:	eb 12                	jmp    c00193d2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00193c0:	a1 20 47 02 c0       	mov    eax,ds:0xc0024720
c00193c5:	40                   	inc    eax
c00193c6:	a3 20 47 02 c0       	mov    ds:0xc0024720,eax
c00193cb:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00193d2:	81 c4 6c 03 00 00    	add    esp,0x36c
c00193d8:	c3                   	ret    
c00193d9:	90                   	nop

c00193da <FAT::readDir(void*, unsigned long, void*, int*)>:
c00193da:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00193e0:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00193e8:	74 0a                	je     c00193f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00193ea:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00193f2:	75 0a                	jne    c00193fe <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00193f4:	b8 04 00 00 00       	mov    eax,0x4
c00193f9:	e9 db 00 00 00       	jmp    c00194d9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00193fe:	83 ec 08             	sub    esp,0x8
c0019401:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019408:	50                   	push   eax
c0019409:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019410:	e8 05 ca fe ff       	call   c0005e1a <f_readdir>
c0019415:	83 c4 10             	add    esp,0x10
c0019418:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001941f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019425:	83 ec 0c             	sub    esp,0xc
c0019428:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001942f:	83 c0 1a             	add    eax,0x1a
c0019432:	50                   	push   eax
c0019433:	e8 ed 71 fe ff       	call   c0000625 <strlen>
c0019438:	83 c4 10             	add    esp,0x10
c001943b:	ba 00 00 00 00       	mov    edx,0x0
c0019440:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019444:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019448:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001944f:	0f b6 c0             	movzx  eax,al
c0019452:	83 e0 10             	and    eax,0x10
c0019455:	74 07                	je     c001945e <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0019457:	b8 02 00 00 00       	mov    eax,0x2
c001945c:	eb 05                	jmp    c0019463 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001945e:	b8 01 00 00 00       	mov    eax,0x1
c0019463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019467:	83 ec 08             	sub    esp,0x8
c001946a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019471:	83 c0 1a             	add    eax,0x1a
c0019474:	50                   	push   eax
c0019475:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019479:	83 c0 10             	add    eax,0x10
c001947c:	50                   	push   eax
c001947d:	e8 25 72 fe ff       	call   c00006a7 <strcpy>
c0019482:	83 c4 10             	add    esp,0x10
c0019485:	83 ec 04             	sub    esp,0x4
c0019488:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001948f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019493:	50                   	push   eax
c0019494:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001949b:	e8 32 71 fe ff       	call   c00005d2 <memcpy>
c00194a0:	83 c4 10             	add    esp,0x10
c00194a3:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00194aa:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00194b0:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00194b7:	84 c0                	test   al,al
c00194b9:	75 07                	jne    c00194c2 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00194bb:	b8 07 00 00 00       	mov    eax,0x7
c00194c0:	eb 17                	jmp    c00194d9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00194c2:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00194c9:	85 c0                	test   eax,eax
c00194cb:	75 07                	jne    c00194d4 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00194cd:	b8 00 00 00 00       	mov    eax,0x0
c00194d2:	eb 05                	jmp    c00194d9 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00194d4:	b8 01 00 00 00       	mov    eax,0x1
c00194d9:	81 c4 3c 02 00 00    	add    esp,0x23c
c00194df:	c3                   	ret    

c00194e0 <FAT::read(void*, unsigned long, void*, int*)>:
c00194e0:	83 ec 1c             	sub    esp,0x1c
c00194e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194e8:	74 07                	je     c00194f1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00194ea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194ef:	75 07                	jne    c00194f8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00194f1:	b8 04 00 00 00       	mov    eax,0x4
c00194f6:	eb 3d                	jmp    c0019535 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00194f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194fc:	50                   	push   eax
c00194fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019501:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019505:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019509:	e8 ec bb fe ff       	call   c00050fa <f_read>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019519:	89 c2                	mov    edx,eax
c001951b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001951f:	89 10                	mov    DWORD PTR [eax],edx
c0019521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019525:	85 c0                	test   eax,eax
c0019527:	75 07                	jne    c0019530 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019529:	b8 00 00 00 00       	mov    eax,0x0
c001952e:	eb 05                	jmp    c0019535 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019530:	b8 01 00 00 00       	mov    eax,0x1
c0019535:	83 c4 1c             	add    esp,0x1c
c0019538:	c3                   	ret    
c0019539:	90                   	nop

c001953a <FAT::write(void*, unsigned long, void*, int*)>:
c001953a:	83 ec 1c             	sub    esp,0x1c
c001953d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019542:	74 07                	je     c001954b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019544:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019549:	75 07                	jne    c0019552 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001954b:	b8 04 00 00 00       	mov    eax,0x4
c0019550:	eb 3d                	jmp    c001958f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019552:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019556:	50                   	push   eax
c0019557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001955b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001955f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019563:	e8 12 be fe ff       	call   c000537a <f_write>
c0019568:	83 c4 10             	add    esp,0x10
c001956b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001956f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019573:	89 c2                	mov    edx,eax
c0019575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019579:	89 10                	mov    DWORD PTR [eax],edx
c001957b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001957f:	85 c0                	test   eax,eax
c0019581:	75 07                	jne    c001958a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019583:	b8 00 00 00 00       	mov    eax,0x0
c0019588:	eb 05                	jmp    c001958f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001958a:	b8 01 00 00 00       	mov    eax,0x1
c001958f:	83 c4 1c             	add    esp,0x1c
c0019592:	c3                   	ret    
c0019593:	90                   	nop

c0019594 <FAT::close(void*)>:
c0019594:	83 ec 1c             	sub    esp,0x1c
c0019597:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001959c:	75 07                	jne    c00195a5 <FAT::close(void*)+0x11>
c001959e:	b8 04 00 00 00       	mov    eax,0x4
c00195a3:	eb 36                	jmp    c00195db <FAT::close(void*)+0x47>
c00195a5:	83 ec 0c             	sub    esp,0xc
c00195a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ac:	e8 5f c2 fe ff       	call   c0005810 <f_close>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195bf:	e8 6a 26 ff ff       	call   c000bc2e <free>
c00195c4:	83 c4 10             	add    esp,0x10
c00195c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195cb:	85 c0                	test   eax,eax
c00195cd:	75 07                	jne    c00195d6 <FAT::close(void*)+0x42>
c00195cf:	b8 00 00 00 00       	mov    eax,0x0
c00195d4:	eb 05                	jmp    c00195db <FAT::close(void*)+0x47>
c00195d6:	b8 01 00 00 00       	mov    eax,0x1
c00195db:	83 c4 1c             	add    esp,0x1c
c00195de:	c3                   	ret    
c00195df:	90                   	nop

c00195e0 <FAT::closeDir(void*)>:
c00195e0:	83 ec 1c             	sub    esp,0x1c
c00195e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195e8:	75 07                	jne    c00195f1 <FAT::closeDir(void*)+0x11>
c00195ea:	b8 04 00 00 00       	mov    eax,0x4
c00195ef:	eb 36                	jmp    c0019627 <FAT::closeDir(void*)+0x47>
c00195f1:	83 ec 0c             	sub    esp,0xc
c00195f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195f8:	e8 fb c7 fe ff       	call   c0005df8 <f_closedir>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019604:	83 ec 0c             	sub    esp,0xc
c0019607:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001960b:	e8 1e 26 ff ff       	call   c000bc2e <free>
c0019610:	83 c4 10             	add    esp,0x10
c0019613:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019617:	85 c0                	test   eax,eax
c0019619:	75 07                	jne    c0019622 <FAT::closeDir(void*)+0x42>
c001961b:	b8 00 00 00 00       	mov    eax,0x0
c0019620:	eb 05                	jmp    c0019627 <FAT::closeDir(void*)+0x47>
c0019622:	b8 01 00 00 00       	mov    eax,0x1
c0019627:	83 c4 1c             	add    esp,0x1c
c001962a:	c3                   	ret    
c001962b:	90                   	nop

c001962c <FAT::seek(void*, unsigned long long)>:
c001962c:	83 ec 2c             	sub    esp,0x2c
c001962f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019637:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001963b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001963f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019644:	75 07                	jne    c001964d <FAT::seek(void*, unsigned long long)+0x21>
c0019646:	b8 04 00 00 00       	mov    eax,0x4
c001964b:	eb 2f                	jmp    c001967c <FAT::seek(void*, unsigned long long)+0x50>
c001964d:	83 ec 04             	sub    esp,0x4
c0019650:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019654:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019658:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001965c:	e8 de c1 fe ff       	call   c000583f <f_lseek>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001966c:	85 c0                	test   eax,eax
c001966e:	75 07                	jne    c0019677 <FAT::seek(void*, unsigned long long)+0x4b>
c0019670:	b8 00 00 00 00       	mov    eax,0x0
c0019675:	eb 05                	jmp    c001967c <FAT::seek(void*, unsigned long long)+0x50>
c0019677:	b8 01 00 00 00       	mov    eax,0x1
c001967c:	83 c4 2c             	add    esp,0x2c
c001967f:	c3                   	ret    

c0019680 <fatWrapperReadDisk>:
c0019680:	83 ec 1c             	sub    esp,0x1c
c0019683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019687:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001968b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001968f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019692:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001969a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001969f:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c00196a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196aa:	83 ec 0c             	sub    esp,0xc
c00196ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196b1:	52                   	push   edx
c00196b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ba:	50                   	push   eax
c00196bb:	e8 12 86 ff ff       	call   c0011cd2 <LogicalDisk::read(unsigned long long, int, void*)>
c00196c0:	83 c4 20             	add    esp,0x20
c00196c3:	83 c4 1c             	add    esp,0x1c
c00196c6:	c3                   	ret    

c00196c7 <fatWrapperWriteDisk>:
c00196c7:	83 ec 1c             	sub    esp,0x1c
c00196ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00196d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00196dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196e1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196e6:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c00196ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196f1:	83 ec 0c             	sub    esp,0xc
c00196f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196f8:	52                   	push   edx
c00196f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019701:	50                   	push   eax
c0019702:	e8 37 86 ff ff       	call   c0011d3e <LogicalDisk::write(unsigned long long, int, void*)>
c0019707:	83 c4 20             	add    esp,0x20
c001970a:	83 c4 1c             	add    esp,0x1c
c001970d:	c3                   	ret    

c001970e <fatWrapperIoctl>:
c001970e:	53                   	push   ebx
c001970f:	83 ec 28             	sub    esp,0x28
c0019712:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019716:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001971a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001971e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019722:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019727:	75 31                	jne    c001975a <fatWrapperIoctl+0x4c>
c0019729:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001972d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019731:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019736:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c001973d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019743:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019749:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001974d:	66 89 02             	mov    WORD PTR [edx],ax
c0019750:	b8 00 00 00 00       	mov    eax,0x0
c0019755:	e9 b2 00 00 00       	jmp    c001980c <fatWrapperIoctl+0xfe>
c001975a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001975f:	75 6a                	jne    c00197cb <fatWrapperIoctl+0xbd>
c0019761:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019765:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019769:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001976e:	8b 04 85 a0 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc760]
c0019775:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001977b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019781:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019787:	89 c8                	mov    eax,ecx
c0019789:	89 da                	mov    edx,ebx
c001978b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001978f:	c1 e0 0a             	shl    eax,0xa
c0019792:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019797:	8b 0c 8d a0 38 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc760]
c001979e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00197a4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00197aa:	89 cb                	mov    ebx,ecx
c00197ac:	c1 fb 1f             	sar    ebx,0x1f
c00197af:	53                   	push   ebx
c00197b0:	51                   	push   ecx
c00197b1:	52                   	push   edx
c00197b2:	50                   	push   eax
c00197b3:	e8 24 4b 00 00       	call   c001e2dc <__udivdi3>
c00197b8:	83 c4 10             	add    esp,0x10
c00197bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00197bf:	89 01                	mov    DWORD PTR [ecx],eax
c00197c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00197c4:	b8 00 00 00 00       	mov    eax,0x0
c00197c9:	eb 41                	jmp    c001980c <fatWrapperIoctl+0xfe>
c00197cb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00197d0:	75 07                	jne    c00197d9 <fatWrapperIoctl+0xcb>
c00197d2:	b8 00 00 00 00       	mov    eax,0x0
c00197d7:	eb 33                	jmp    c001980c <fatWrapperIoctl+0xfe>
c00197d9:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00197de:	75 19                	jne    c00197f9 <fatWrapperIoctl+0xeb>
c00197e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197ec:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00197f2:	b8 00 00 00 00       	mov    eax,0x0
c00197f7:	eb 13                	jmp    c001980c <fatWrapperIoctl+0xfe>
c00197f9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00197fe:	75 07                	jne    c0019807 <fatWrapperIoctl+0xf9>
c0019800:	b8 00 00 00 00       	mov    eax,0x0
c0019805:	eb 05                	jmp    c001980c <fatWrapperIoctl+0xfe>
c0019807:	b8 04 00 00 00       	mov    eax,0x4
c001980c:	83 c4 28             	add    esp,0x28
c001980f:	5b                   	pop    ebx
c0019810:	c3                   	ret    
c0019811:	90                   	nop

c0019812 <FAT::FAT()>:
c0019812:	83 ec 1c             	sub    esp,0x1c
c0019815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019819:	83 ec 0c             	sub    esp,0xc
c001981c:	50                   	push   eax
c001981d:	e8 32 58 ff ff       	call   c000f054 <Filesystem::Filesystem()>
c0019822:	83 c4 10             	add    esp,0x10
c0019825:	ba 20 1e 02 c0       	mov    edx,0xc0021e20
c001982a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001982e:	89 10                	mov    DWORD PTR [eax],edx
c0019830:	c7 05 20 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024720,0x0
c001983a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019842:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019847:	7f 15                	jg     c001985e <FAT::FAT()+0x4c>
c0019849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001984d:	c7 04 85 40 47 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb8c0],0xffffffff
c0019858:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001985c:	eb e4                	jmp    c0019842 <FAT::FAT()+0x30>
c001985e:	90                   	nop
c001985f:	83 c4 1c             	add    esp,0x1c
c0019862:	c3                   	ret    
c0019863:	90                   	nop

c0019864 <FAT::fixFilepath(char*)>:
c0019864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019868:	8a 00                	mov    al,BYTE PTR [eax]
c001986a:	3c 40                	cmp    al,0x40
c001986c:	7e 2c                	jle    c001989a <FAT::fixFilepath(char*)+0x36>
c001986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019872:	8a 00                	mov    al,BYTE PTR [eax]
c0019874:	83 e8 41             	sub    eax,0x41
c0019877:	88 c2                	mov    dl,al
c0019879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001987d:	88 10                	mov    BYTE PTR [eax],dl
c001987f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019883:	8a 00                	mov    al,BYTE PTR [eax]
c0019885:	0f be c0             	movsx  eax,al
c0019888:	8b 04 85 40 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8c0]
c001988f:	83 c0 30             	add    eax,0x30
c0019892:	88 c2                	mov    dl,al
c0019894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019898:	88 10                	mov    BYTE PTR [eax],dl
c001989a:	90                   	nop
c001989b:	c3                   	ret    

c001989c <FAT::open(char const*, void**, FileOpenMode)>:
c001989c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198aa:	74 0a                	je     c00198b6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00198ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198b4:	75 0a                	jne    c00198c0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00198b6:	b8 04 00 00 00       	mov    eax,0x4
c00198bb:	e9 fd 00 00 00       	jmp    c00199bd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00198c0:	83 ec 08             	sub    esp,0x8
c00198c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198ce:	50                   	push   eax
c00198cf:	e8 d3 6d fe ff       	call   c00006a7 <strcpy>
c00198d4:	83 c4 10             	add    esp,0x10
c00198d7:	83 ec 08             	sub    esp,0x8
c00198da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198de:	50                   	push   eax
c00198df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198e6:	e8 79 ff ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c00198eb:	83 c4 10             	add    esp,0x10
c00198ee:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00198f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198fd:	83 e0 01             	and    eax,0x1
c0019900:	74 08                	je     c001990a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019902:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001990a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019911:	83 e0 04             	and    eax,0x4
c0019914:	74 10                	je     c0019926 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019916:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001991e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019926:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001992d:	83 e0 02             	and    eax,0x2
c0019930:	74 08                	je     c001993a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019932:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001993a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019941:	83 e0 08             	and    eax,0x8
c0019944:	74 08                	je     c001994e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019946:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001994e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019955:	83 e0 10             	and    eax,0x10
c0019958:	74 08                	je     c0019962 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001995a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019962:	83 ec 0c             	sub    esp,0xc
c0019965:	68 50 02 00 00       	push   0x250
c001996a:	e8 af 22 ff ff       	call   c000bc1e <malloc>
c001996f:	83 c4 10             	add    esp,0x10
c0019972:	89 c2                	mov    edx,eax
c0019974:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001997b:	89 10                	mov    DWORD PTR [eax],edx
c001997d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019985:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001998c:	8b 00                	mov    eax,DWORD PTR [eax]
c001998e:	83 ec 04             	sub    esp,0x4
c0019991:	52                   	push   edx
c0019992:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019996:	52                   	push   edx
c0019997:	50                   	push   eax
c0019998:	e8 21 b3 fe ff       	call   c0004cbe <f_open>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00199a7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00199af:	74 07                	je     c00199b8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00199b1:	b8 01 00 00 00       	mov    eax,0x1
c00199b6:	eb 05                	jmp    c00199bd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00199b8:	b8 00 00 00 00       	mov    eax,0x0
c00199bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199c3:	c3                   	ret    

c00199c4 <FAT::openDir(char const*, void**)>:
c00199c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199d2:	74 0a                	je     c00199de <FAT::openDir(char const*, void**)+0x1a>
c00199d4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199dc:	75 07                	jne    c00199e5 <FAT::openDir(char const*, void**)+0x21>
c00199de:	b8 04 00 00 00       	mov    eax,0x4
c00199e3:	eb 7d                	jmp    c0019a62 <FAT::openDir(char const*, void**)+0x9e>
c00199e5:	83 ec 08             	sub    esp,0x8
c00199e8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199f3:	50                   	push   eax
c00199f4:	e8 ae 6c fe ff       	call   c00006a7 <strcpy>
c00199f9:	83 c4 10             	add    esp,0x10
c00199fc:	83 ec 08             	sub    esp,0x8
c00199ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a03:	50                   	push   eax
c0019a04:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a0b:	e8 54 fe ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	83 ec 0c             	sub    esp,0xc
c0019a16:	6a 4c                	push   0x4c
c0019a18:	e8 01 22 ff ff       	call   c000bc1e <malloc>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	89 c2                	mov    edx,eax
c0019a22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a29:	89 10                	mov    DWORD PTR [eax],edx
c0019a2b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a34:	83 ec 08             	sub    esp,0x8
c0019a37:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a3b:	52                   	push   edx
c0019a3c:	50                   	push   eax
c0019a3d:	e8 b4 c2 fe ff       	call   c0005cf6 <f_opendir>
c0019a42:	83 c4 10             	add    esp,0x10
c0019a45:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a4c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a54:	74 07                	je     c0019a5d <FAT::openDir(char const*, void**)+0x99>
c0019a56:	b8 01 00 00 00       	mov    eax,0x1
c0019a5b:	eb 05                	jmp    c0019a62 <FAT::openDir(char const*, void**)+0x9e>
c0019a5d:	b8 00 00 00 00       	mov    eax,0x0
c0019a62:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a68:	c3                   	ret    
c0019a69:	90                   	nop

c0019a6a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a6a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a70:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a78:	75 0a                	jne    c0019a84 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019a7a:	b8 04 00 00 00       	mov    eax,0x4
c0019a7f:	e9 c9 00 00 00       	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a84:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a8c:	75 0a                	jne    c0019a98 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019a8e:	b8 04 00 00 00       	mov    eax,0x4
c0019a93:	e9 b5 00 00 00       	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a98:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019aa0:	75 0a                	jne    c0019aac <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019aa2:	b8 04 00 00 00       	mov    eax,0x4
c0019aa7:	e9 a1 00 00 00       	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019aac:	83 ec 08             	sub    esp,0x8
c0019aaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ab6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019abd:	50                   	push   eax
c0019abe:	e8 e4 6b fe ff       	call   c00006a7 <strcpy>
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	83 ec 08             	sub    esp,0x8
c0019ac9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ad0:	50                   	push   eax
c0019ad1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ad8:	e8 87 fd ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019add:	83 c4 10             	add    esp,0x10
c0019ae0:	83 ec 08             	sub    esp,0x8
c0019ae3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ae7:	50                   	push   eax
c0019ae8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019aef:	50                   	push   eax
c0019af0:	e8 c0 c3 fe ff       	call   c0005eb5 <f_stat>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019aff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b06:	85 c0                	test   eax,eax
c0019b08:	74 07                	je     c0019b11 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019b0a:	83 f8 04             	cmp    eax,0x4
c0019b0d:	74 32                	je     c0019b41 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019b0f:	eb 37                	jmp    c0019b48 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019b11:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b15:	0f b6 c0             	movzx  eax,al
c0019b18:	83 e0 10             	and    eax,0x10
c0019b1b:	0f 95 c2             	setne  dl
c0019b1e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b25:	88 10                	mov    BYTE PTR [eax],dl
c0019b27:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019b2a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b2e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b35:	89 01                	mov    DWORD PTR [ecx],eax
c0019b37:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b3a:	b8 00 00 00 00       	mov    eax,0x0
c0019b3f:	eb 0c                	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b41:	b8 02 00 00 00       	mov    eax,0x2
c0019b46:	eb 05                	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b48:	b8 01 00 00 00       	mov    eax,0x1
c0019b4d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b53:	c3                   	ret    

c0019b54 <FAT::unlink(char const*)>:
c0019b54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b62:	75 07                	jne    c0019b6b <FAT::unlink(char const*)+0x17>
c0019b64:	b8 04 00 00 00       	mov    eax,0x4
c0019b69:	eb 5c                	jmp    c0019bc7 <FAT::unlink(char const*)+0x73>
c0019b6b:	83 ec 08             	sub    esp,0x8
c0019b6e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b79:	50                   	push   eax
c0019b7a:	e8 28 6b fe ff       	call   c00006a7 <strcpy>
c0019b7f:	83 c4 10             	add    esp,0x10
c0019b82:	83 ec 08             	sub    esp,0x8
c0019b85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b89:	50                   	push   eax
c0019b8a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b91:	e8 ce fc ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019b96:	83 c4 10             	add    esp,0x10
c0019b99:	83 ec 0c             	sub    esp,0xc
c0019b9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ba0:	50                   	push   eax
c0019ba1:	e8 61 c6 fe ff       	call   c0006207 <f_unlink>
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019bb0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019bb7:	85 c0                	test   eax,eax
c0019bb9:	75 07                	jne    c0019bc2 <FAT::unlink(char const*)+0x6e>
c0019bbb:	b8 00 00 00 00       	mov    eax,0x0
c0019bc0:	eb 05                	jmp    c0019bc7 <FAT::unlink(char const*)+0x73>
c0019bc2:	b8 01 00 00 00       	mov    eax,0x1
c0019bc7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bcd:	c3                   	ret    

c0019bce <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019bce:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019bd4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019bdb:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019be2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019be6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bea:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019bf2:	75 0a                	jne    c0019bfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019bf4:	b8 04 00 00 00       	mov    eax,0x4
c0019bf9:	e9 1c 01 00 00       	jmp    c0019d1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019bfe:	83 ec 08             	sub    esp,0x8
c0019c01:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c0c:	50                   	push   eax
c0019c0d:	e8 95 6a fe ff       	call   c00006a7 <strcpy>
c0019c12:	83 c4 10             	add    esp,0x10
c0019c15:	83 ec 08             	sub    esp,0x8
c0019c18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c1c:	50                   	push   eax
c0019c1d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c24:	e8 3b fc ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c34:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c41:	83 e0 01             	and    eax,0x1
c0019c44:	74 08                	je     c0019c4e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019c46:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019c4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c53:	83 e0 02             	and    eax,0x2
c0019c56:	74 08                	je     c0019c60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019c58:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019c60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c65:	83 e0 04             	and    eax,0x4
c0019c68:	74 08                	je     c0019c72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019c6a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019c72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c77:	83 e0 08             	and    eax,0x8
c0019c7a:	74 08                	je     c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019c7c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019c84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c89:	83 e0 01             	and    eax,0x1
c0019c8c:	74 08                	je     c0019c96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c8e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019c96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c9b:	83 e0 02             	and    eax,0x2
c0019c9e:	74 08                	je     c0019ca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019ca0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019ca8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cad:	83 e0 04             	and    eax,0x4
c0019cb0:	74 08                	je     c0019cba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019cb2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019cba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cbf:	83 e0 08             	and    eax,0x8
c0019cc2:	74 08                	je     c0019ccc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019cc4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019ccc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cd3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019cda:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019ce2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019cea:	83 ec 04             	sub    esp,0x4
c0019ced:	52                   	push   edx
c0019cee:	50                   	push   eax
c0019cef:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cf3:	50                   	push   eax
c0019cf4:	e8 b0 cb fe ff       	call   c00068a9 <f_chmod>
c0019cf9:	83 c4 10             	add    esp,0x10
c0019cfc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d03:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d0a:	85 c0                	test   eax,eax
c0019d0c:	75 07                	jne    c0019d15 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019d0e:	b8 00 00 00 00       	mov    eax,0x0
c0019d13:	eb 05                	jmp    c0019d1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019d15:	b8 01 00 00 00       	mov    eax,0x1
c0019d1a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop

c0019d22 <FAT::rename(char const*, char const*)>:
c0019d22:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d28:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d30:	74 0a                	je     c0019d3c <FAT::rename(char const*, char const*)+0x1a>
c0019d32:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d3a:	75 0a                	jne    c0019d46 <FAT::rename(char const*, char const*)+0x24>
c0019d3c:	b8 04 00 00 00       	mov    eax,0x4
c0019d41:	e9 98 00 00 00       	jmp    c0019dde <FAT::rename(char const*, char const*)+0xbc>
c0019d46:	83 ec 08             	sub    esp,0x8
c0019d49:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d50:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d57:	50                   	push   eax
c0019d58:	e8 4a 69 fe ff       	call   c00006a7 <strcpy>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	83 ec 08             	sub    esp,0x8
c0019d63:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d6a:	50                   	push   eax
c0019d6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d72:	e8 ed fa ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019d77:	83 c4 10             	add    esp,0x10
c0019d7a:	83 ec 08             	sub    esp,0x8
c0019d7d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d88:	50                   	push   eax
c0019d89:	e8 19 69 fe ff       	call   c00006a7 <strcpy>
c0019d8e:	83 c4 10             	add    esp,0x10
c0019d91:	83 ec 08             	sub    esp,0x8
c0019d94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d98:	50                   	push   eax
c0019d99:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019da0:	e8 bf fa ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	83 ec 08             	sub    esp,0x8
c0019dab:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019daf:	50                   	push   eax
c0019db0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019db7:	50                   	push   eax
c0019db8:	e8 f9 c7 fe ff       	call   c00065b6 <f_rename>
c0019dbd:	83 c4 10             	add    esp,0x10
c0019dc0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019dc7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019dce:	85 c0                	test   eax,eax
c0019dd0:	75 07                	jne    c0019dd9 <FAT::rename(char const*, char const*)+0xb7>
c0019dd2:	b8 00 00 00 00       	mov    eax,0x0
c0019dd7:	eb 05                	jmp    c0019dde <FAT::rename(char const*, char const*)+0xbc>
c0019dd9:	b8 01 00 00 00       	mov    eax,0x1
c0019dde:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019de4:	c3                   	ret    
c0019de5:	90                   	nop

c0019de6 <FAT::mkdir(char const*)>:
c0019de6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019df4:	75 07                	jne    c0019dfd <FAT::mkdir(char const*)+0x17>
c0019df6:	b8 04 00 00 00       	mov    eax,0x4
c0019dfb:	eb 5c                	jmp    c0019e59 <FAT::mkdir(char const*)+0x73>
c0019dfd:	83 ec 08             	sub    esp,0x8
c0019e00:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e0b:	50                   	push   eax
c0019e0c:	e8 96 68 fe ff       	call   c00006a7 <strcpy>
c0019e11:	83 c4 10             	add    esp,0x10
c0019e14:	83 ec 08             	sub    esp,0x8
c0019e17:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e1b:	50                   	push   eax
c0019e1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e23:	e8 3c fa ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	83 ec 0c             	sub    esp,0xc
c0019e2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e32:	50                   	push   eax
c0019e33:	e8 52 c5 fe ff       	call   c000638a <f_mkdir>
c0019e38:	83 c4 10             	add    esp,0x10
c0019e3b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e42:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e49:	85 c0                	test   eax,eax
c0019e4b:	75 07                	jne    c0019e54 <FAT::mkdir(char const*)+0x6e>
c0019e4d:	b8 00 00 00 00       	mov    eax,0x0
c0019e52:	eb 05                	jmp    c0019e59 <FAT::mkdir(char const*)+0x73>
c0019e54:	b8 01 00 00 00       	mov    eax,0x1
c0019e59:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e5f:	c3                   	ret    

c0019e60 <FAT::exists(char const*)>:
c0019e60:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e66:	83 ec 08             	sub    esp,0x8
c0019e69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e74:	50                   	push   eax
c0019e75:	e8 2d 68 fe ff       	call   c00006a7 <strcpy>
c0019e7a:	83 c4 10             	add    esp,0x10
c0019e7d:	83 ec 08             	sub    esp,0x8
c0019e80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019e84:	50                   	push   eax
c0019e85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e8c:	e8 d3 f9 ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019e91:	83 c4 10             	add    esp,0x10
c0019e94:	83 ec 08             	sub    esp,0x8
c0019e97:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0019e9e:	50                   	push   eax
c0019e9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019ea3:	50                   	push   eax
c0019ea4:	e8 0c c0 fe ff       	call   c0005eb5 <f_stat>
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019eb3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019eba:	85 c0                	test   eax,eax
c0019ebc:	75 04                	jne    c0019ec2 <FAT::exists(char const*)+0x62>
c0019ebe:	b0 01                	mov    al,0x1
c0019ec0:	eb 02                	jmp    c0019ec4 <FAT::exists(char const*)+0x64>
c0019ec2:	b0 00                	mov    al,0x0
c0019ec4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019eca:	c3                   	ret    
c0019ecb:	90                   	nop

c0019ecc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019ecc:	b8 08 00 00 00       	mov    eax,0x8
c0019ed1:	c3                   	ret    

c0019ed2 <ISO9660::seek(void*, unsigned long long)>:
c0019ed2:	53                   	push   ebx
c0019ed3:	b8 04 00 00 00       	mov    eax,0x4
c0019ed8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019edc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ee0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019ee4:	85 d2                	test   edx,edx
c0019ee6:	74 17                	je     c0019eff <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019ee8:	89 c8                	mov    eax,ecx
c0019eea:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019eed:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019ef0:	b8 01 00 00 00       	mov    eax,0x1
c0019ef5:	73 08                	jae    c0019eff <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019ef7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019efa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019efd:	31 c0                	xor    eax,eax
c0019eff:	5b                   	pop    ebx
c0019f00:	c3                   	ret    
c0019f01:	90                   	nop

c0019f02 <ISO9660::tell(void*, unsigned long long*)>:
c0019f02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f0a:	85 d2                	test   edx,edx
c0019f0c:	74 12                	je     c0019f20 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019f0e:	85 c0                	test   eax,eax
c0019f10:	74 0e                	je     c0019f20 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019f12:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019f15:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019f18:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019f1b:	89 10                	mov    DWORD PTR [eax],edx
c0019f1d:	31 c0                	xor    eax,eax
c0019f1f:	c3                   	ret    
c0019f20:	b8 04 00 00 00       	mov    eax,0x4
c0019f25:	c3                   	ret    

c0019f26 <ISO9660::getName()>:
c0019f26:	b8 7c 1e 02 c0       	mov    eax,0xc0021e7c
c0019f2b:	c3                   	ret    

c0019f2c <ISO9660::stat(void*, unsigned long long*)>:
c0019f2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f34:	85 d2                	test   edx,edx
c0019f36:	74 12                	je     c0019f4a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019f38:	85 c0                	test   eax,eax
c0019f3a:	74 0e                	je     c0019f4a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019f3c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019f3f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019f42:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019f45:	89 10                	mov    DWORD PTR [eax],edx
c0019f47:	31 c0                	xor    eax,eax
c0019f49:	c3                   	ret    
c0019f4a:	b8 04 00 00 00       	mov    eax,0x4
c0019f4f:	c3                   	ret    

c0019f50 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019f50:	b8 01 00 00 00       	mov    eax,0x1
c0019f55:	c3                   	ret    

c0019f56 <ISO9660::unlink(char const*)>:
c0019f56:	b8 01 00 00 00       	mov    eax,0x1
c0019f5b:	c3                   	ret    

c0019f5c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019f5c:	b8 01 00 00 00       	mov    eax,0x1
c0019f61:	c3                   	ret    

c0019f62 <ISO9660::rename(char const*, char const*)>:
c0019f62:	b8 01 00 00 00       	mov    eax,0x1
c0019f67:	c3                   	ret    

c0019f68 <ISO9660::mkdir(char const*)>:
c0019f68:	b8 01 00 00 00       	mov    eax,0x1
c0019f6d:	c3                   	ret    

c0019f6e <ISO9660::close(void*)>:
c0019f6e:	83 ec 0c             	sub    esp,0xc
c0019f71:	b8 04 00 00 00       	mov    eax,0x4
c0019f76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f7a:	85 d2                	test   edx,edx
c0019f7c:	74 0e                	je     c0019f8c <ISO9660::close(void*)+0x1e>
c0019f7e:	83 ec 0c             	sub    esp,0xc
c0019f81:	52                   	push   edx
c0019f82:	e8 a7 1c ff ff       	call   c000bc2e <free>
c0019f87:	83 c4 10             	add    esp,0x10
c0019f8a:	31 c0                	xor    eax,eax
c0019f8c:	83 c4 0c             	add    esp,0xc
c0019f8f:	c3                   	ret    

c0019f90 <ISO9660::closeDir(void*)>:
c0019f90:	83 ec 0c             	sub    esp,0xc
c0019f93:	b8 04 00 00 00       	mov    eax,0x4
c0019f98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f9c:	85 d2                	test   edx,edx
c0019f9e:	74 0e                	je     c0019fae <ISO9660::closeDir(void*)+0x1e>
c0019fa0:	83 ec 0c             	sub    esp,0xc
c0019fa3:	52                   	push   edx
c0019fa4:	e8 85 1c ff ff       	call   c000bc2e <free>
c0019fa9:	83 c4 10             	add    esp,0x10
c0019fac:	31 c0                	xor    eax,eax
c0019fae:	83 c4 0c             	add    esp,0xc
c0019fb1:	c3                   	ret    

c0019fb2 <ISO9660::~ISO9660()>:
c0019fb2:	83 ec 0c             	sub    esp,0xc
c0019fb5:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c0019fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fbe:	89 10                	mov    DWORD PTR [eax],edx
c0019fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fc4:	83 ec 0c             	sub    esp,0xc
c0019fc7:	50                   	push   eax
c0019fc8:	e8 ab 50 ff ff       	call   c000f078 <Filesystem::~Filesystem()>
c0019fcd:	83 c4 10             	add    esp,0x10
c0019fd0:	90                   	nop
c0019fd1:	83 c4 0c             	add    esp,0xc
c0019fd4:	c3                   	ret    
c0019fd5:	90                   	nop

c0019fd6 <ISO9660::~ISO9660()>:
c0019fd6:	83 ec 0c             	sub    esp,0xc
c0019fd9:	83 ec 0c             	sub    esp,0xc
c0019fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fe0:	e8 cd ff ff ff       	call   c0019fb2 <ISO9660::~ISO9660()>
c0019fe5:	83 c4 10             	add    esp,0x10
c0019fe8:	83 ec 08             	sub    esp,0x8
c0019feb:	6a 08                	push   0x8
c0019fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ff1:	e8 79 4c ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c0019ff6:	83 c4 10             	add    esp,0x10
c0019ff9:	83 c4 0c             	add    esp,0xc
c0019ffc:	c3                   	ret    

c0019ffd <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019ffd:	55                   	push   ebp
c0019ffe:	31 c9                	xor    ecx,ecx
c001a000:	57                   	push   edi
c001a001:	56                   	push   esi
c001a002:	53                   	push   ebx
c001a003:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a007:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a00b:	89 eb                	mov    ebx,ebp
c001a00d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a011:	39 ce                	cmp    esi,ecx
c001a013:	7e 17                	jle    c001a02c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a015:	31 d2                	xor    edx,edx
c001a017:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a01b:	7d 13                	jge    c001a030 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a01d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a021:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a024:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a027:	75 0d                	jne    c001a036 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a029:	42                   	inc    edx
c001a02a:	eb eb                	jmp    c001a017 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a02c:	31 c0                	xor    eax,eax
c001a02e:	eb 0a                	jmp    c001a03a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a030:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a034:	eb 04                	jmp    c001a03a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a036:	41                   	inc    ecx
c001a037:	43                   	inc    ebx
c001a038:	eb d7                	jmp    c001a011 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a03a:	5b                   	pop    ebx
c001a03b:	5e                   	pop    esi
c001a03c:	5f                   	pop    edi
c001a03d:	5d                   	pop    ebp
c001a03e:	c3                   	ret    

c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a03f:	56                   	push   esi
c001a040:	53                   	push   ebx
c001a041:	52                   	push   edx
c001a042:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a046:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a04a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a04e:	39 0d 20 48 02 c0    	cmp    DWORD PTR ds:0xc0024820,ecx
c001a054:	75 08                	jne    c001a05e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a056:	38 05 c8 2c 02 c0    	cmp    BYTE PTR ds:0xc0022cc8,al
c001a05c:	74 2b                	je     c001a089 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a05e:	83 ec 0c             	sub    esp,0xc
c001a061:	a2 c8 2c 02 c0       	mov    ds:0xc0022cc8,al
c001a066:	68 40 48 02 c0       	push   0xc0024840
c001a06b:	0f be c0             	movsx  eax,al
c001a06e:	6a 01                	push   0x1
c001a070:	89 0d 20 48 02 c0    	mov    DWORD PTR ds:0xc0024820,ecx
c001a076:	31 db                	xor    ebx,ebx
c001a078:	53                   	push   ebx
c001a079:	51                   	push   ecx
c001a07a:	ff 34 85 9c 37 02 c0 	push   DWORD PTR [eax*4-0x3ffdc864]
c001a081:	e8 4c 7c ff ff       	call   c0011cd2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a086:	83 c4 20             	add    esp,0x20
c001a089:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a091:	c7 44 24 14 40 48 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024840
c001a099:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a09d:	58                   	pop    eax
c001a09e:	5b                   	pop    ebx
c001a09f:	5e                   	pop    esi
c001a0a0:	e9 2d 65 fe ff       	jmp    c00005d2 <memcpy>
c001a0a5:	90                   	nop

c001a0a6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a0a6:	81 ec 10 08 00 00    	sub    esp,0x810
c001a0ac:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a0b3:	83 c0 41             	add    eax,0x41
c001a0b6:	0f be c0             	movsx  eax,al
c001a0b9:	50                   	push   eax
c001a0ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0be:	50                   	push   eax
c001a0bf:	6a 10                	push   0x10
c001a0c1:	e8 79 ff ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0c6:	83 c4 10             	add    esp,0x10
c001a0c9:	31 c0                	xor    eax,eax
c001a0cb:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a0d0:	75 1d                	jne    c001a0ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a0d2:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a0d7:	75 16                	jne    c001a0ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a0d9:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a0de:	75 0f                	jne    c001a0ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a0e0:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a0e5:	75 08                	jne    c001a0ef <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a0e7:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a0ec:	0f 94 c0             	sete   al
c001a0ef:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a0f5:	c3                   	ret    

c001a0f6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a0f6:	55                   	push   ebp
c001a0f7:	57                   	push   edi
c001a0f8:	56                   	push   esi
c001a0f9:	53                   	push   ebx
c001a0fa:	81 ec 34 08 00 00    	sub    esp,0x834
c001a100:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a107:	55                   	push   ebp
c001a108:	68 97 1e 02 c0       	push   0xc0021e97
c001a10d:	e8 3d 4c ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001a112:	83 c4 10             	add    esp,0x10
c001a115:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a11d:	0f 84 06 02 00 00    	je     c001a329 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a123:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a12b:	0f 84 f8 01 00 00    	je     c001a329 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a131:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a138:	b8 01 00 00 00       	mov    eax,0x1
c001a13d:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a141:	0f 85 e7 01 00 00    	jne    c001a32e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a147:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a14a:	31 d2                	xor    edx,edx
c001a14c:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a14f:	89 e9                	mov    ecx,ebp
c001a151:	89 d3                	mov    ebx,edx
c001a153:	01 f1                	add    ecx,esi
c001a155:	11 fb                	adc    ebx,edi
c001a157:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a15b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a15f:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a166:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a169:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a16c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a170:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a174:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a178:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a17c:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a180:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a184:	72 19                	jb     c001a19f <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a186:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a18e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a192:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a19d:	eb 13                	jmp    c001a1b2 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a19f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a1a7:	29 f0                	sub    eax,esi
c001a1a9:	19 fa                	sbb    edx,edi
c001a1ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a1b2:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a1b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1be:	53                   	push   ebx
c001a1bf:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a1c3:	c1 e0 0b             	shl    eax,0xb
c001a1c6:	01 c6                	add    esi,eax
c001a1c8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a1cf:	11 d7                	adc    edi,edx
c001a1d1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a1d5:	89 fa                	mov    edx,edi
c001a1d7:	50                   	push   eax
c001a1d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a1dc:	50                   	push   eax
c001a1dd:	89 f0                	mov    eax,esi
c001a1df:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a1e3:	50                   	push   eax
c001a1e4:	e8 56 fe ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a1e9:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a1f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1f4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a1f7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a1fb:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a201:	83 c4 10             	add    esp,0x10
c001a204:	b8 00 08 00 00       	mov    eax,0x800
c001a209:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a20d:	29 d0                	sub    eax,edx
c001a20f:	39 c1                	cmp    ecx,eax
c001a211:	83 db 00             	sbb    ebx,0x0
c001a214:	7d 19                	jge    c001a22f <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a216:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a21b:	75 16                	jne    c001a233 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a21d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a224:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a22a:	e9 f6 00 00 00       	jmp    c001a325 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a22f:	89 c5                	mov    ebp,eax
c001a231:	eb 03                	jmp    c001a236 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a233:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a236:	51                   	push   ecx
c001a237:	55                   	push   ebp
c001a238:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a23c:	50                   	push   eax
c001a23d:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a244:	e8 89 63 fe ff       	call   c00005d2 <memcpy>
c001a249:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a24d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a251:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a258:	01 e8                	add    eax,ebp
c001a25a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a25e:	89 e8                	mov    eax,ebp
c001a260:	99                   	cdq    
c001a261:	01 ee                	add    esi,ebp
c001a263:	11 d7                	adc    edi,edx
c001a265:	29 e9                	sub    ecx,ebp
c001a267:	19 d3                	sbb    ebx,edx
c001a269:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a26d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a271:	83 c4 10             	add    esp,0x10
c001a274:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a279:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a27c:	b8 00 00 00 00       	mov    eax,0x0
c001a281:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a285:	7d 3f                	jge    c001a2c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a287:	52                   	push   edx
c001a288:	89 fa                	mov    edx,edi
c001a28a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a291:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a295:	50                   	push   eax
c001a296:	89 f0                	mov    eax,esi
c001a298:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a29c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a2a0:	50                   	push   eax
c001a2a1:	e8 99 fd ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a2a6:	81 c6 00 08 00 00    	add    esi,0x800
c001a2ac:	83 d7 00             	adc    edi,0x0
c001a2af:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a2b7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a2bf:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a2c4:	eb ab                	jmp    c001a271 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a2c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2ca:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a2cd:	74 34                	je     c001a303 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a2cf:	89 fa                	mov    edx,edi
c001a2d1:	50                   	push   eax
c001a2d2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a2d9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a2dd:	50                   	push   eax
c001a2de:	89 f0                	mov    eax,esi
c001a2e0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2e4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a2e8:	55                   	push   ebp
c001a2e9:	50                   	push   eax
c001a2ea:	e8 50 fd ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a2ef:	83 c4 0c             	add    esp,0xc
c001a2f2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a2f6:	55                   	push   ebp
c001a2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2fb:	e8 d2 62 fe ff       	call   c00005d2 <memcpy>
c001a300:	83 c4 10             	add    esp,0x10
c001a303:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a30a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a30e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a312:	89 38                	mov    DWORD PTR [eax],edi
c001a314:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a31b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a31f:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a322:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a325:	31 c0                	xor    eax,eax
c001a327:	eb 05                	jmp    c001a32e <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a329:	b8 04 00 00 00       	mov    eax,0x4
c001a32e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a334:	5b                   	pop    ebx
c001a335:	5e                   	pop    esi
c001a336:	5f                   	pop    edi
c001a337:	5d                   	pop    ebp
c001a338:	c3                   	ret    
c001a339:	90                   	nop

c001a33a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a33a:	55                   	push   ebp
c001a33b:	57                   	push   edi
c001a33c:	56                   	push   esi
c001a33d:	53                   	push   ebx
c001a33e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a344:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a34b:	85 f6                	test   esi,esi
c001a34d:	0f 84 64 02 00 00    	je     c001a5b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a353:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a35b:	0f 84 56 02 00 00    	je     c001a5b7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a361:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a364:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a367:	75 0a                	jne    c001a373 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a369:	b8 07 00 00 00       	mov    eax,0x7
c001a36e:	e9 49 02 00 00       	jmp    c001a5bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a373:	50                   	push   eax
c001a374:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a378:	50                   	push   eax
c001a379:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a380:	53                   	push   ebx
c001a381:	8b 06                	mov    eax,DWORD PTR [esi]
c001a383:	c1 e0 0b             	shl    eax,0xb
c001a386:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a389:	c1 e8 0b             	shr    eax,0xb
c001a38c:	50                   	push   eax
c001a38d:	e8 ad fc ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a392:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a395:	83 c4 10             	add    esp,0x10
c001a398:	89 c1                	mov    ecx,eax
c001a39a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a39d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a3a3:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a3a6:	84 db                	test   bl,bl
c001a3a8:	0f 85 90 00 00 00    	jne    c001a43e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a3ae:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a3b4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a3ba:	29 c7                	sub    edi,eax
c001a3bc:	89 fb                	mov    ebx,edi
c001a3be:	c1 fb 1f             	sar    ebx,0x1f
c001a3c1:	01 f8                	add    eax,edi
c001a3c3:	11 da                	adc    edx,ebx
c001a3c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a3c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a3cd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a3d0:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a3d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a3d6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a3d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a3e0:	89 d8                	mov    eax,ebx
c001a3e2:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a3e5:	ba 00 00 00 00       	mov    edx,0x0
c001a3ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a3ee:	b8 00 00 00 00       	mov    eax,0x0
c001a3f3:	73 0b                	jae    c001a400 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a3f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a3f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3fc:	29 f8                	sub    eax,edi
c001a3fe:	19 da                	sbb    edx,ebx
c001a400:	89 d3                	mov    ebx,edx
c001a402:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a405:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a408:	09 c3                	or     ebx,eax
c001a40a:	0f 84 59 ff ff ff    	je     c001a369 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a410:	55                   	push   ebp
c001a411:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a415:	50                   	push   eax
c001a416:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a41d:	53                   	push   ebx
c001a41e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a420:	c1 e0 0b             	shl    eax,0xb
c001a423:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a427:	c1 e8 0b             	shr    eax,0xb
c001a42a:	50                   	push   eax
c001a42b:	e8 0f fc ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a430:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a433:	83 c4 10             	add    esp,0x10
c001a436:	25 ff 07 00 00       	and    eax,0x7ff
c001a43b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a43e:	57                   	push   edi
c001a43f:	6a 28                	push   0x28
c001a441:	6a 00                	push   0x0
c001a443:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a447:	50                   	push   eax
c001a448:	e8 bb 61 fe ff       	call   c0000608 <memset>
c001a44d:	31 d2                	xor    edx,edx
c001a44f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a452:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a458:	89 f8                	mov    eax,edi
c001a45a:	83 c0 21             	add    eax,0x21
c001a45d:	83 d2 00             	adc    edx,0x0
c001a460:	89 c7                	mov    edi,eax
c001a462:	89 d5                	mov    ebp,edx
c001a464:	83 c4 10             	add    esp,0x10
c001a467:	31 c9                	xor    ecx,ecx
c001a469:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a470:	83 f9 28             	cmp    ecx,0x28
c001a473:	88 04 24             	mov    BYTE PTR [esp],al
c001a476:	0f 94 c2             	sete   dl
c001a479:	88 d0                	mov    al,dl
c001a47b:	ba ff 07 00 00       	mov    edx,0x7ff
c001a480:	39 fa                	cmp    edx,edi
c001a482:	ba 00 00 00 00       	mov    edx,0x0
c001a487:	19 ea                	sbb    edx,ebp
c001a489:	0f 92 c2             	setb   dl
c001a48c:	09 c2                	or     edx,eax
c001a48e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a492:	0f 94 c0             	sete   al
c001a495:	08 d0                	or     al,dl
c001a497:	75 16                	jne    c001a4af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a499:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a49d:	74 10                	je     c001a4af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a49f:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a4a2:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a4a6:	41                   	inc    ecx
c001a4a7:	83 c7 01             	add    edi,0x1
c001a4aa:	83 d5 00             	adc    ebp,0x0
c001a4ad:	eb ba                	jmp    c001a469 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a4af:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a4b6:	83 ec 0c             	sub    esp,0xc
c001a4b9:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a4bd:	57                   	push   edi
c001a4be:	e8 62 61 fe ff       	call   c0000625 <strlen>
c001a4c3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a4cb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a4cf:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a4d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a4d9:	5a                   	pop    edx
c001a4da:	25 ff 07 00 00       	and    eax,0x7ff
c001a4df:	01 c8                	add    eax,ecx
c001a4e1:	59                   	pop    ecx
c001a4e2:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a4e8:	83 e0 02             	and    eax,0x2
c001a4eb:	3c 01                	cmp    al,0x1
c001a4ed:	19 c0                	sbb    eax,eax
c001a4ef:	83 c0 02             	add    eax,0x2
c001a4f2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a4f6:	57                   	push   edi
c001a4f7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a4fb:	50                   	push   eax
c001a4fc:	e8 a6 61 fe ff       	call   c00006a7 <strcpy>
c001a501:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a505:	83 c4 10             	add    esp,0x10
c001a508:	84 c0                	test   al,al
c001a50a:	75 21                	jne    c001a52d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a50c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a514:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a51c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a524:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a52b:	eb 28                	jmp    c001a555 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a52d:	fe c8                	dec    al
c001a52f:	75 24                	jne    c001a555 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a531:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a539:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a541:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a549:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a550:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a555:	0f b6 fb             	movzx  edi,bl
c001a558:	31 db                	xor    ebx,ebx
c001a55a:	50                   	push   eax
c001a55b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a562:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a566:	50                   	push   eax
c001a567:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a56e:	e8 5f 60 fe ff       	call   c00005d2 <memcpy>
c001a573:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a57a:	89 f9                	mov    ecx,edi
c001a57c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a582:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a585:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a588:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a58b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a58e:	83 c4 10             	add    esp,0x10
c001a591:	39 c7                	cmp    edi,eax
c001a593:	89 df                	mov    edi,ebx
c001a595:	19 d7                	sbb    edi,edx
c001a597:	72 10                	jb     c001a5a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001a599:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a5a0:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a5a7:	eb 0a                	jmp    c001a5b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001a5a9:	29 c8                	sub    eax,ecx
c001a5ab:	19 da                	sbb    edx,ebx
c001a5ad:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a5b0:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a5b3:	31 c0                	xor    eax,eax
c001a5b5:	eb 05                	jmp    c001a5bc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a5b7:	b8 04 00 00 00       	mov    eax,0x4
c001a5bc:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a5c2:	5b                   	pop    ebx
c001a5c3:	5e                   	pop    esi
c001a5c4:	5f                   	pop    edi
c001a5c5:	5d                   	pop    ebp
c001a5c6:	c3                   	ret    

c001a5c7 <readRoot(unsigned int*, unsigned int*, char)>:
c001a5c7:	81 ec 40 08 00 00    	sub    esp,0x840
c001a5cd:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a5d5:	50                   	push   eax
c001a5d6:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a5da:	50                   	push   eax
c001a5db:	6a 10                	push   0x10
c001a5dd:	e8 5d fa ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a5e2:	83 c4 0c             	add    esp,0xc
c001a5e5:	6a 22                	push   0x22
c001a5e7:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a5ee:	50                   	push   eax
c001a5ef:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a5f3:	50                   	push   eax
c001a5f4:	e8 d9 5f fe ff       	call   c00005d2 <memcpy>
c001a5f9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a600:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a604:	89 10                	mov    DWORD PTR [eax],edx
c001a606:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a60d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a611:	89 10                	mov    DWORD PTR [eax],edx
c001a613:	b0 01                	mov    al,0x1
c001a615:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a61b:	c3                   	ret    

c001a61c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a61c:	55                   	push   ebp
c001a61d:	57                   	push   edi
c001a61e:	56                   	push   esi
c001a61f:	53                   	push   ebx
c001a620:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a626:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a62d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a634:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a638:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a63c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a640:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a644:	75 03                	jne    c001a649 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a646:	83 c3 02             	add    ebx,0x2
c001a649:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a64c:	75 03                	jne    c001a651 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a64e:	43                   	inc    ebx
c001a64f:	eb f8                	jmp    c001a649 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a651:	51                   	push   ecx
c001a652:	68 00 01 00 00       	push   0x100
c001a657:	6a 00                	push   0x0
c001a659:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a65d:	50                   	push   eax
c001a65e:	e8 a5 5f fe ff       	call   c0000608 <memset>
c001a663:	83 c4 10             	add    esp,0x10
c001a666:	31 d2                	xor    edx,edx
c001a668:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a66b:	84 c0                	test   al,al
c001a66d:	74 21                	je     c001a690 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a66f:	3c 2f                	cmp    al,0x2f
c001a671:	75 0b                	jne    c001a67e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a673:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a677:	bd 01 00 00 00       	mov    ebp,0x1
c001a67c:	eb 14                	jmp    c001a692 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a67e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a681:	80 f9 19             	cmp    cl,0x19
c001a684:	77 03                	ja     c001a689 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a686:	83 e8 20             	sub    eax,0x20
c001a689:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a68d:	42                   	inc    edx
c001a68e:	eb d8                	jmp    c001a668 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a690:	31 ed                	xor    ebp,ebp
c001a692:	83 ec 0c             	sub    esp,0xc
c001a695:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a69c:	e8 7d 15 ff ff       	call   c000bc1e <malloc>
c001a6a1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a6a8:	89 c6                	mov    esi,eax
c001a6aa:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a6b0:	c1 ef 0b             	shr    edi,0xb
c001a6b3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a6ba:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a6be:	83 c4 10             	add    esp,0x10
c001a6c1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a6c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a6ca:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a6d1:	74 28                	je     c001a6fb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a6d3:	52                   	push   edx
c001a6d4:	57                   	push   edi
c001a6d5:	50                   	push   eax
c001a6d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6da:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a6e1:	e8 59 f9 ff ff       	call   c001a03f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a6e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6ea:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a6f1:	05 00 08 00 00       	add    eax,0x800
c001a6f6:	83 c4 10             	add    esp,0x10
c001a6f9:	eb cb                	jmp    c001a6c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a6fb:	83 ec 0c             	sub    esp,0xc
c001a6fe:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a702:	57                   	push   edi
c001a703:	e8 1d 5f fe ff       	call   c0000625 <strlen>
c001a708:	50                   	push   eax
c001a709:	57                   	push   edi
c001a70a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a711:	56                   	push   esi
c001a712:	e8 e6 f8 ff ff       	call   c0019ffd <__memmem(unsigned char*, int, unsigned char*, int)>
c001a717:	83 c4 20             	add    esp,0x20
c001a71a:	85 c0                	test   eax,eax
c001a71c:	75 13                	jne    c001a731 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a71e:	83 ec 0c             	sub    esp,0xc
c001a721:	56                   	push   esi
c001a722:	e8 07 15 ff ff       	call   c000bc2e <free>
c001a727:	83 c4 10             	add    esp,0x10
c001a72a:	31 c0                	xor    eax,eax
c001a72c:	e9 b3 00 00 00       	jmp    c001a7e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a731:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a735:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a739:	c1 e7 08             	shl    edi,0x8
c001a73c:	c1 e2 10             	shl    edx,0x10
c001a73f:	09 d7                	or     edi,edx
c001a741:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a745:	09 d7                	or     edi,edx
c001a747:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a74b:	c1 e2 18             	shl    edx,0x18
c001a74e:	09 d7                	or     edi,edx
c001a750:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a754:	89 d1                	mov    ecx,edx
c001a756:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a75a:	c1 e1 08             	shl    ecx,0x8
c001a75d:	c1 e2 10             	shl    edx,0x10
c001a760:	09 ca                	or     edx,ecx
c001a762:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a766:	09 ca                	or     edx,ecx
c001a768:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a76c:	c1 e1 18             	shl    ecx,0x18
c001a76f:	09 ca                	or     edx,ecx
c001a771:	89 e9                	mov    ecx,ebp
c001a773:	84 c9                	test   cl,cl
c001a775:	74 3c                	je     c001a7b3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a777:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a77b:	83 ec 0c             	sub    esp,0xc
c001a77e:	56                   	push   esi
c001a77f:	e8 aa 14 ff ff       	call   c000bc2e <free>
c001a784:	83 c4 0c             	add    esp,0xc
c001a787:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a78e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a793:	50                   	push   eax
c001a794:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a79b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a7a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7a6:	52                   	push   edx
c001a7a7:	57                   	push   edi
c001a7a8:	53                   	push   ebx
c001a7a9:	e8 6e fe ff ff       	call   c001a61c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a7ae:	83 c4 20             	add    esp,0x20
c001a7b1:	eb 31                	jmp    c001a7e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a7b3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a7b6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a7bd:	d0 e8                	shr    al,1
c001a7bf:	89 3b                	mov    DWORD PTR [ebx],edi
c001a7c1:	83 e0 01             	and    eax,0x1
c001a7c4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a7cb:	83 ec 0c             	sub    esp,0xc
c001a7ce:	89 13                	mov    DWORD PTR [ebx],edx
c001a7d0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a7d7:	89 03                	mov    DWORD PTR [ebx],eax
c001a7d9:	56                   	push   esi
c001a7da:	e8 4f 14 ff ff       	call   c000bc2e <free>
c001a7df:	83 c4 10             	add    esp,0x10
c001a7e2:	b0 01                	mov    al,0x1
c001a7e4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a7ea:	5b                   	pop    ebx
c001a7eb:	5e                   	pop    esi
c001a7ec:	5f                   	pop    edi
c001a7ed:	5d                   	pop    ebp
c001a7ee:	c3                   	ret    

c001a7ef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a7ef:	55                   	push   ebp
c001a7f0:	57                   	push   edi
c001a7f1:	56                   	push   esi
c001a7f2:	53                   	push   ebx
c001a7f3:	83 ec 20             	sub    esp,0x20
c001a7f6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a7fa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a7fe:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a802:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a80a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a812:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a817:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a81d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a823:	57                   	push   edi
c001a824:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a828:	50                   	push   eax
c001a829:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a82d:	50                   	push   eax
c001a82e:	e8 94 fd ff ff       	call   c001a5c7 <readRoot(unsigned int*, unsigned int*, char)>
c001a833:	5a                   	pop    edx
c001a834:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a838:	e8 e8 5d fe ff       	call   c0000625 <strlen>
c001a83d:	83 c4 10             	add    esp,0x10
c001a840:	83 f8 03             	cmp    eax,0x3
c001a843:	77 17                	ja     c001a85c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a849:	89 03                	mov    DWORD PTR [ebx],eax
c001a84b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a84f:	89 06                	mov    DWORD PTR [esi],eax
c001a851:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a858:	b0 01                	mov    al,0x1
c001a85a:	eb 19                	jmp    c001a875 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a85c:	50                   	push   eax
c001a85d:	55                   	push   ebp
c001a85e:	57                   	push   edi
c001a85f:	56                   	push   esi
c001a860:	53                   	push   ebx
c001a861:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a865:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a869:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a86d:	e8 aa fd ff ff       	call   c001a61c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a872:	83 c4 20             	add    esp,0x20
c001a875:	83 c4 1c             	add    esp,0x1c
c001a878:	5b                   	pop    ebx
c001a879:	5e                   	pop    esi
c001a87a:	5f                   	pop    edi
c001a87b:	5d                   	pop    ebp
c001a87c:	c3                   	ret    
c001a87d:	90                   	nop

c001a87e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a87e:	57                   	push   edi
c001a87f:	56                   	push   esi
c001a880:	53                   	push   ebx
c001a881:	83 ec 10             	sub    esp,0x10
c001a884:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a888:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a88c:	85 ff                	test   edi,edi
c001a88e:	74 7b                	je     c001a90b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a890:	85 f6                	test   esi,esi
c001a892:	74 77                	je     c001a90b <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a894:	83 ec 0c             	sub    esp,0xc
c001a897:	6a 1c                	push   0x1c
c001a899:	e8 80 13 ff ff       	call   c000bc1e <malloc>
c001a89e:	89 07                	mov    DWORD PTR [edi],eax
c001a8a0:	89 c3                	mov    ebx,eax
c001a8a2:	58                   	pop    eax
c001a8a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8a7:	50                   	push   eax
c001a8a8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a8ab:	50                   	push   eax
c001a8ac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8b0:	50                   	push   eax
c001a8b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8b5:	50                   	push   eax
c001a8b6:	56                   	push   esi
c001a8b7:	e8 33 ff ff ff       	call   c001a7ef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8bc:	83 c4 20             	add    esp,0x20
c001a8bf:	84 c0                	test   al,al
c001a8c1:	74 07                	je     c001a8ca <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a8c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a8c8:	74 0b                	je     c001a8d5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a8ca:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a8ce:	b8 01 00 00 00       	mov    eax,0x1
c001a8d3:	eb 3b                	jmp    c001a910 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a8d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a8dd:	89 03                	mov    DWORD PTR [ebx],eax
c001a8df:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a8e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a8f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8f8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a8fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a902:	8a 06                	mov    al,BYTE PTR [esi]
c001a904:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a907:	31 c0                	xor    eax,eax
c001a909:	eb 05                	jmp    c001a910 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a90b:	b8 04 00 00 00       	mov    eax,0x4
c001a910:	83 c4 10             	add    esp,0x10
c001a913:	5b                   	pop    ebx
c001a914:	5e                   	pop    esi
c001a915:	5f                   	pop    edi
c001a916:	c3                   	ret    
c001a917:	90                   	nop

c001a918 <ISO9660::exists(char const*)>:
c001a918:	83 ec 28             	sub    esp,0x28
c001a91b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a91f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a923:	52                   	push   edx
c001a924:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a927:	52                   	push   edx
c001a928:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a92c:	52                   	push   edx
c001a92d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a931:	52                   	push   edx
c001a932:	50                   	push   eax
c001a933:	e8 b7 fe ff ff       	call   c001a7ef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a938:	83 c4 3c             	add    esp,0x3c
c001a93b:	c3                   	ret    

c001a93c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a93c:	56                   	push   esi
c001a93d:	53                   	push   ebx
c001a93e:	83 ec 14             	sub    esp,0x14
c001a941:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a945:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a949:	85 db                	test   ebx,ebx
c001a94b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a94f:	0f 94 c2             	sete   dl
c001a952:	85 f6                	test   esi,esi
c001a954:	0f 94 c0             	sete   al
c001a957:	08 c2                	or     dl,al
c001a959:	75 68                	jne    c001a9c3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a95b:	85 c9                	test   ecx,ecx
c001a95d:	74 64                	je     c001a9c3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a95f:	83 ec 0c             	sub    esp,0xc
c001a962:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a965:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a969:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a96f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a976:	50                   	push   eax
c001a977:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a97a:	50                   	push   eax
c001a97b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a97f:	50                   	push   eax
c001a980:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a984:	50                   	push   eax
c001a985:	51                   	push   ecx
c001a986:	e8 64 fe ff ff       	call   c001a7ef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a98b:	83 c4 20             	add    esp,0x20
c001a98e:	ba 01 00 00 00       	mov    edx,0x1
c001a993:	84 c0                	test   al,al
c001a995:	74 31                	je     c001a9c8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a997:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a99b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a9a2:	89 03                	mov    DWORD PTR [ebx],eax
c001a9a4:	ba 00 00 00 00       	mov    edx,0x0
c001a9a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9ad:	85 c0                	test   eax,eax
c001a9af:	0f 95 06             	setne  BYTE PTR [esi]
c001a9b2:	74 14                	je     c001a9c8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a9b4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a9ba:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a9c1:	eb 05                	jmp    c001a9c8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a9c3:	ba 04 00 00 00       	mov    edx,0x4
c001a9c8:	83 c4 14             	add    esp,0x14
c001a9cb:	89 d0                	mov    eax,edx
c001a9cd:	5b                   	pop    ebx
c001a9ce:	5e                   	pop    esi
c001a9cf:	c3                   	ret    

c001a9d0 <ISO9660::openDir(char const*, void**)>:
c001a9d0:	57                   	push   edi
c001a9d1:	56                   	push   esi
c001a9d2:	53                   	push   ebx
c001a9d3:	83 ec 10             	sub    esp,0x10
c001a9d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a9da:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a9de:	85 ff                	test   edi,edi
c001a9e0:	0f 84 95 00 00 00    	je     c001aa7b <ISO9660::openDir(char const*, void**)+0xab>
c001a9e6:	85 f6                	test   esi,esi
c001a9e8:	0f 84 8d 00 00 00    	je     c001aa7b <ISO9660::openDir(char const*, void**)+0xab>
c001a9ee:	83 ec 0c             	sub    esp,0xc
c001a9f1:	6a 1c                	push   0x1c
c001a9f3:	e8 26 12 ff ff       	call   c000bc1e <malloc>
c001a9f8:	89 07                	mov    DWORD PTR [edi],eax
c001a9fa:	89 c3                	mov    ebx,eax
c001a9fc:	59                   	pop    ecx
c001a9fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa01:	50                   	push   eax
c001aa02:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001aa05:	50                   	push   eax
c001aa06:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa0a:	50                   	push   eax
c001aa0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa0f:	50                   	push   eax
c001aa10:	56                   	push   esi
c001aa11:	e8 d9 fd ff ff       	call   c001a7ef <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001aa16:	83 c4 20             	add    esp,0x20
c001aa19:	84 c0                	test   al,al
c001aa1b:	74 07                	je     c001aa24 <ISO9660::openDir(char const*, void**)+0x54>
c001aa1d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aa22:	75 21                	jne    c001aa45 <ISO9660::openDir(char const*, void**)+0x75>
c001aa24:	0f b6 c0             	movzx  eax,al
c001aa27:	52                   	push   edx
c001aa28:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa2c:	50                   	push   eax
c001aa2d:	68 aa 1e 02 c0       	push   0xc0021eaa
c001aa32:	e8 18 43 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001aa37:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001aa3b:	83 c4 10             	add    esp,0x10
c001aa3e:	b8 01 00 00 00       	mov    eax,0x1
c001aa43:	eb 3b                	jmp    c001aa80 <ISO9660::openDir(char const*, void**)+0xb0>
c001aa45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa49:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001aa4d:	89 03                	mov    DWORD PTR [ebx],eax
c001aa4f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001aa56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa5a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001aa61:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aa68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001aa6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001aa72:	8a 06                	mov    al,BYTE PTR [esi]
c001aa74:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001aa77:	31 c0                	xor    eax,eax
c001aa79:	eb 05                	jmp    c001aa80 <ISO9660::openDir(char const*, void**)+0xb0>
c001aa7b:	b8 04 00 00 00       	mov    eax,0x4
c001aa80:	83 c4 10             	add    esp,0x10
c001aa83:	5b                   	pop    ebx
c001aa84:	5e                   	pop    esi
c001aa85:	5f                   	pop    edi
c001aa86:	c3                   	ret    
c001aa87:	90                   	nop

c001aa88 <ISO9660::ISO9660()>:
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa8f:	83 ec 0c             	sub    esp,0xc
c001aa92:	50                   	push   eax
c001aa93:	e8 bc 45 ff ff       	call   c000f054 <Filesystem::Filesystem()>
c001aa98:	83 c4 10             	add    esp,0x10
c001aa9b:	ba d0 1e 02 c0       	mov    edx,0xc0021ed0
c001aaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaa4:	89 10                	mov    DWORD PTR [eax],edx
c001aaa6:	90                   	nop
c001aaa7:	83 c4 0c             	add    esp,0xc
c001aaaa:	c3                   	ret    
c001aaab:	90                   	nop

c001aaac <SoundChannel::~SoundChannel()>:
c001aaac:	83 ec 0c             	sub    esp,0xc
c001aaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aab3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aab6:	83 ec 0c             	sub    esp,0xc
c001aab9:	50                   	push   eax
c001aaba:	e8 6f 11 ff ff       	call   c000bc2e <free>
c001aabf:	83 c4 10             	add    esp,0x10
c001aac2:	90                   	nop
c001aac3:	83 c4 0c             	add    esp,0xc
c001aac6:	c3                   	ret    
c001aac7:	90                   	nop

c001aac8 <SoundChannel::setSpeed(float)>:
c001aac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aacc:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001aad0:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001aad3:	c3                   	ret    

c001aad4 <SoundChannel::getSpeed()>:
c001aad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aad8:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aadb:	c3                   	ret    

c001aadc <SoundChannel::setVolume(int)>:
c001aadc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aae0:	83 f8 64             	cmp    eax,0x64
c001aae3:	7e 05                	jle    c001aaea <SoundChannel::setVolume(int)+0xe>
c001aae5:	b8 64 00 00 00       	mov    eax,0x64
c001aaea:	85 c0                	test   eax,eax
c001aaec:	79 02                	jns    c001aaf0 <SoundChannel::setVolume(int)+0x14>
c001aaee:	31 c0                	xor    eax,eax
c001aaf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aaf4:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001aaf7:	c3                   	ret    

c001aaf8 <SoundChannel::getVolume()>:
c001aaf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aafc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aaff:	c3                   	ret    

c001ab00 <SoundChannel::pause()>:
c001ab00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab04:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001ab08:	c3                   	ret    
c001ab09:	90                   	nop

c001ab0a <SoundChannel::SoundChannel(int, int, int, int)>:
c001ab0a:	83 ec 1c             	sub    esp,0x1c
c001ab0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab11:	e8 ea ff ff ff       	call   c001ab00 <SoundChannel::pause()>
c001ab16:	83 c4 04             	add    esp,0x4
c001ab19:	6a 50                	push   0x50
c001ab1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ab1f:	e8 b8 ff ff ff       	call   c001aadc <SoundChannel::setVolume(int)>
c001ab24:	83 c4 08             	add    esp,0x8
c001ab27:	d9 e8                	fld1   
c001ab29:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001ab2d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ab30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ab34:	e8 8f ff ff ff       	call   c001aac8 <SoundChannel::setSpeed(float)>
c001ab39:	83 c4 08             	add    esp,0x8
c001ab3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab40:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab44:	89 10                	mov    DWORD PTR [eax],edx
c001ab46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab4e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ab51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab55:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab59:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ab5c:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001ab61:	75 23                	jne    c001ab86 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001ab63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab67:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ab70:	0f af c2             	imul   eax,edx
c001ab73:	85 c0                	test   eax,eax
c001ab75:	79 03                	jns    c001ab7a <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ab77:	83 c0 03             	add    eax,0x3
c001ab7a:	c1 f8 02             	sar    eax,0x2
c001ab7d:	05 a0 0f 00 00       	add    eax,0xfa0
c001ab82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ab86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab8e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ab91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab95:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ab9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aba0:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001aba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abab:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abae:	c1 e0 02             	shl    eax,0x2
c001abb1:	83 ec 0c             	sub    esp,0xc
c001abb4:	50                   	push   eax
c001abb5:	e8 64 10 ff ff       	call   c000bc1e <malloc>
c001abba:	83 c4 10             	add    esp,0x10
c001abbd:	89 c2                	mov    edx,eax
c001abbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001abc6:	83 ec 04             	sub    esp,0x4
c001abc9:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abcd:	50                   	push   eax
c001abce:	6a 01                	push   0x1
c001abd0:	6a 04                	push   0x4
c001abd2:	e8 74 dc fe ff       	call   c000884b <src_new>
c001abd7:	83 c4 10             	add    esp,0x10
c001abda:	89 c2                	mov    edx,eax
c001abdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001abe3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abe7:	85 c0                	test   eax,eax
c001abe9:	74 10                	je     c001abfb <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001abeb:	83 ec 0c             	sub    esp,0xc
c001abee:	68 2c 1f 02 c0       	push   0xc0021f2c
c001abf3:	e8 ec 9d ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001abf8:	83 c4 10             	add    esp,0x10
c001abfb:	90                   	nop
c001abfc:	83 c4 1c             	add    esp,0x1c
c001abff:	c3                   	ret    

c001ac00 <SoundChannel::play()>:
c001ac00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac04:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001ac08:	c3                   	ret    
c001ac09:	90                   	nop

c001ac0a <SoundChannel::paused()>:
c001ac0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac0e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001ac11:	c3                   	ret    

c001ac12 <SoundChannel::getSampleRate()>:
c001ac12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac16:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac18:	c3                   	ret    
c001ac19:	90                   	nop

c001ac1a <SoundChannel::getBits()>:
c001ac1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ac21:	c3                   	ret    

c001ac22 <SoundChannel::getBufferUsed()>:
c001ac22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac26:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ac29:	c3                   	ret    

c001ac2a <SoundChannel::getBufferSize()>:
c001ac2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac2e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac31:	c3                   	ret    

c001ac32 <SoundChannel::unbuffer(float*, int, int)>:
c001ac32:	53                   	push   ebx
c001ac33:	83 ec 40             	sub    esp,0x40
c001ac36:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ac3a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ac42:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ac45:	db 03                	fild   DWORD PTR [ebx]
c001ac47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac4b:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001ac4f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ac52:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ac55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac59:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ac5d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac65:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac71:	50                   	push   eax
c001ac72:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ac75:	e8 8b d8 fe ff       	call   c0008505 <src_process>
c001ac7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ac7e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ac81:	83 c4 0c             	add    esp,0xc
c001ac84:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac87:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ac8a:	29 d0                	sub    eax,edx
c001ac8c:	c1 e0 02             	shl    eax,0x2
c001ac8f:	50                   	push   eax
c001ac90:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ac93:	50                   	push   eax
c001ac94:	51                   	push   ecx
c001ac95:	e8 00 59 fe ff       	call   c000059a <memmove>
c001ac9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac9e:	83 c4 48             	add    esp,0x48
c001aca1:	5b                   	pop    ebx
c001aca2:	c3                   	ret    
c001aca3:	90                   	nop

c001aca4 <SoundChannel::buffer8(unsigned char*, int)>:
c001aca4:	53                   	push   ebx
c001aca5:	31 c0                	xor    eax,eax
c001aca7:	83 ec 08             	sub    esp,0x8
c001acaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acae:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001acb1:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001acb4:	74 35                	je     c001aceb <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001acb6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001acba:	7d 2f                	jge    c001aceb <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001acbc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001acc0:	d9 05 48 1f 02 c0    	fld    DWORD PTR ds:0xc0021f48
c001acc6:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001acca:	40                   	inc    eax
c001accb:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001acd0:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001acd3:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001acd7:	8d 59 01             	lea    ebx,[ecx+0x1]
c001acda:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001acdd:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ace0:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ace3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ace6:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ace9:	eb c9                	jmp    c001acb4 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001aceb:	83 c4 08             	add    esp,0x8
c001acee:	5b                   	pop    ebx
c001acef:	c3                   	ret    

c001acf0 <SoundDevice::SoundDevice(char const*)>:
c001acf0:	83 ec 1c             	sub    esp,0x1c
c001acf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acf7:	83 ec 08             	sub    esp,0x8
c001acfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acfe:	50                   	push   eax
c001acff:	e8 46 56 ff ff       	call   c001034a <Device::Device(char const*)>
c001ad04:	83 c4 10             	add    esp,0x10
c001ad07:	ba 54 1f 02 c0       	mov    edx,0xc0021f54
c001ad0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad10:	89 10                	mov    DWORD PTR [eax],edx
c001ad12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad16:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ad20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad24:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ad2e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad36:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ad3b:	7f 19                	jg     c001ad56 <SoundDevice::SoundDevice(char const*)+0x66>
c001ad3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad45:	83 c2 54             	add    edx,0x54
c001ad48:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ad50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad54:	eb e0                	jmp    c001ad36 <SoundDevice::SoundDevice(char const*)+0x46>
c001ad56:	90                   	nop
c001ad57:	83 c4 1c             	add    esp,0x1c
c001ad5a:	c3                   	ret    
c001ad5b:	90                   	nop

c001ad5c <SoundDevice::~SoundDevice()>:
c001ad5c:	53                   	push   ebx
c001ad5d:	83 ec 18             	sub    esp,0x18
c001ad60:	ba 54 1f 02 c0       	mov    edx,0xc0021f54
c001ad65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad69:	89 10                	mov    DWORD PTR [eax],edx
c001ad6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad73:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ad78:	7f 46                	jg     c001adc0 <SoundDevice::~SoundDevice()+0x64>
c001ad7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad82:	83 c2 54             	add    edx,0x54
c001ad85:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ad89:	85 c0                	test   eax,eax
c001ad8b:	74 2d                	je     c001adba <SoundDevice::~SoundDevice()+0x5e>
c001ad8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad95:	83 c2 54             	add    edx,0x54
c001ad98:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ad9c:	85 db                	test   ebx,ebx
c001ad9e:	74 1a                	je     c001adba <SoundDevice::~SoundDevice()+0x5e>
c001ada0:	83 ec 0c             	sub    esp,0xc
c001ada3:	53                   	push   ebx
c001ada4:	e8 03 fd ff ff       	call   c001aaac <SoundChannel::~SoundChannel()>
c001ada9:	83 c4 10             	add    esp,0x10
c001adac:	83 ec 08             	sub    esp,0x8
c001adaf:	6a 2c                	push   0x2c
c001adb1:	53                   	push   ebx
c001adb2:	e8 b8 3e ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001adb7:	83 c4 10             	add    esp,0x10
c001adba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001adbe:	eb b3                	jmp    c001ad73 <SoundDevice::~SoundDevice()+0x17>
c001adc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adc4:	83 ec 0c             	sub    esp,0xc
c001adc7:	50                   	push   eax
c001adc8:	e8 2f 52 ff ff       	call   c000fffc <Device::~Device()>
c001adcd:	83 c4 10             	add    esp,0x10
c001add0:	90                   	nop
c001add1:	83 c4 18             	add    esp,0x18
c001add4:	5b                   	pop    ebx
c001add5:	c3                   	ret    

c001add6 <SoundDevice::~SoundDevice()>:
c001add6:	83 ec 0c             	sub    esp,0xc
c001add9:	83 ec 0c             	sub    esp,0xc
c001addc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ade0:	e8 77 ff ff ff       	call   c001ad5c <SoundDevice::~SoundDevice()>
c001ade5:	83 c4 10             	add    esp,0x10
c001ade8:	83 ec 08             	sub    esp,0x8
c001adeb:	68 e4 01 00 00       	push   0x1e4
c001adf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adf4:	e8 76 3e ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001adf9:	83 c4 10             	add    esp,0x10
c001adfc:	83 c4 0c             	add    esp,0xc
c001adff:	c3                   	ret    

c001ae00 <SoundDevice::getFreeChannelNum()>:
c001ae00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ae04:	31 c0                	xor    eax,eax
c001ae06:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ae0e:	74 09                	je     c001ae19 <SoundDevice::getFreeChannelNum()+0x19>
c001ae10:	40                   	inc    eax
c001ae11:	83 f8 20             	cmp    eax,0x20
c001ae14:	75 f0                	jne    c001ae06 <SoundDevice::getFreeChannelNum()+0x6>
c001ae16:	83 c8 ff             	or     eax,0xffffffff
c001ae19:	c3                   	ret    

c001ae1a <SoundDevice::addChannel(SoundChannel*)>:
c001ae1a:	56                   	push   esi
c001ae1b:	53                   	push   ebx
c001ae1c:	51                   	push   ecx
c001ae1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae25:	53                   	push   ebx
c001ae26:	e8 d5 ff ff ff       	call   c001ae00 <SoundDevice::getFreeChannelNum()>
c001ae2b:	5a                   	pop    edx
c001ae2c:	83 f8 ff             	cmp    eax,0xffffffff
c001ae2f:	74 51                	je     c001ae82 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ae31:	85 f6                	test   esi,esi
c001ae33:	74 4d                	je     c001ae82 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ae35:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ae3c:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ae43:	75 30                	jne    c001ae75 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ae45:	83 ec 0c             	sub    esp,0xc
c001ae48:	56                   	push   esi
c001ae49:	e8 c4 fd ff ff       	call   c001ac12 <SoundChannel::getSampleRate()>
c001ae4e:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ae54:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae57:	e8 be fd ff ff       	call   c001ac1a <SoundChannel::getBits()>
c001ae5c:	83 c4 0c             	add    esp,0xc
c001ae5f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ae65:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae67:	50                   	push   eax
c001ae68:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ae6e:	53                   	push   ebx
c001ae6f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ae72:	83 c4 10             	add    esp,0x10
c001ae75:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ae7b:	b8 01 00 00 00       	mov    eax,0x1
c001ae80:	eb 03                	jmp    c001ae85 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ae82:	83 c8 ff             	or     eax,0xffffffff
c001ae85:	5a                   	pop    edx
c001ae86:	5b                   	pop    ebx
c001ae87:	5e                   	pop    esi
c001ae88:	c3                   	ret    
c001ae89:	90                   	nop

c001ae8a <SoundDevice::removeChannel(int)>:
c001ae8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae92:	83 fa 1f             	cmp    edx,0x1f
c001ae95:	77 23                	ja     c001aeba <SoundDevice::removeChannel(int)+0x30>
c001ae97:	8d 14 90             	lea    edx,[eax+edx*4]
c001ae9a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001aea1:	74 17                	je     c001aeba <SoundDevice::removeChannel(int)+0x30>
c001aea3:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001aead:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001aeb3:	75 05                	jne    c001aeba <SoundDevice::removeChannel(int)+0x30>
c001aeb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeb7:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001aeba:	c3                   	ret    
c001aebb:	90                   	nop

c001aebc <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001aebc:	56                   	push   esi
c001aebd:	53                   	push   ebx
c001aebe:	31 db                	xor    ebx,ebx
c001aec0:	83 ec 14             	sub    esp,0x14
c001aec3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001aec7:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001aecb:	7d 55                	jge    c001af22 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001aecd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aed1:	d9 e8                	fld1   
c001aed3:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001aed6:	d8 0d 84 1f 02 c0    	fmul   DWORD PTR ds:0xc0021f84
c001aedc:	d8 0d 88 1f 02 c0    	fmul   DWORD PTR ds:0xc0021f88
c001aee2:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001aee6:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001aeea:	d8 15 8c 1f 02 c0    	fcom   DWORD PTR ds:0xc0021f8c
c001aef0:	df e0                	fnstsw ax
c001aef2:	9e                   	sahf   
c001aef3:	72 08                	jb     c001aefd <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001aef5:	dd d8                	fstp   st(0)
c001aef7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001aefb:	eb 22                	jmp    c001af1f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aefd:	d9 ee                	fldz   
c001aeff:	d8 d9                	fcomp  st(1)
c001af01:	df e0                	fnstsw ax
c001af03:	9e                   	sahf   
c001af04:	72 08                	jb     c001af0e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001af06:	dd d8                	fstp   st(0)
c001af08:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001af0c:	eb 11                	jmp    c001af1f <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001af0e:	83 ec 10             	sub    esp,0x10
c001af11:	d9 1c 24             	fstp   DWORD PTR [esp]
c001af14:	e8 13 36 00 00       	call   c001e52c <lrintf>
c001af19:	83 c4 10             	add    esp,0x10
c001af1c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001af1f:	43                   	inc    ebx
c001af20:	eb a5                	jmp    c001aec7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001af22:	83 c4 14             	add    esp,0x14
c001af25:	5b                   	pop    ebx
c001af26:	5e                   	pop    esi
c001af27:	c3                   	ret    

c001af28 <SoundDevice::getAudio(int, float*, float*)>:
c001af28:	55                   	push   ebp
c001af29:	57                   	push   edi
c001af2a:	56                   	push   esi
c001af2b:	53                   	push   ebx
c001af2c:	31 db                	xor    ebx,ebx
c001af2e:	83 ec 20             	sub    esp,0x20
c001af31:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af35:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001af39:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001af3d:	c1 e0 02             	shl    eax,0x2
c001af40:	50                   	push   eax
c001af41:	6a 00                	push   0x0
c001af43:	55                   	push   ebp
c001af44:	e8 bf 56 fe ff       	call   c0000608 <memset>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001af50:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001af57:	85 c0                	test   eax,eax
c001af59:	0f 84 94 00 00 00    	je     c001aff3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af5f:	83 ec 0c             	sub    esp,0xc
c001af62:	50                   	push   eax
c001af63:	e8 a2 fc ff ff       	call   c001ac0a <SoundChannel::paused()>
c001af68:	83 c4 10             	add    esp,0x10
c001af6b:	84 c0                	test   al,al
c001af6d:	0f 85 80 00 00 00    	jne    c001aff3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af73:	83 ec 0c             	sub    esp,0xc
c001af76:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af7d:	e8 76 fb ff ff       	call   c001aaf8 <SoundChannel::getVolume()>
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	85 c0                	test   eax,eax
c001af87:	74 6a                	je     c001aff3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af89:	83 ec 0c             	sub    esp,0xc
c001af8c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af93:	e8 60 fb ff ff       	call   c001aaf8 <SoundChannel::getVolume()>
c001af98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af9c:	d9 05 90 1f 02 c0    	fld    DWORD PTR ds:0xc0021f90
c001afa2:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001afa6:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001afaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001afae:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001afb4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001afb8:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001afbf:	e8 6e fc ff ff       	call   c001ac32 <SoundChannel::unbuffer(float*, int, int)>
c001afc4:	83 c4 20             	add    esp,0x20
c001afc7:	31 d2                	xor    edx,edx
c001afc9:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001afcd:	39 c2                	cmp    edx,eax
c001afcf:	7d 1a                	jge    c001afeb <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001afd1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001afd5:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001afd8:	d8 c9                	fmul   st,st(1)
c001afda:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001afe0:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001afe4:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001afe8:	42                   	inc    edx
c001afe9:	eb e2                	jmp    c001afcd <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001afeb:	dd d8                	fstp   st(0)
c001afed:	39 c7                	cmp    edi,eax
c001afef:	7e 02                	jle    c001aff3 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aff1:	89 c7                	mov    edi,eax
c001aff3:	43                   	inc    ebx
c001aff4:	83 fb 20             	cmp    ebx,0x20
c001aff7:	0f 85 53 ff ff ff    	jne    c001af50 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001affd:	83 c4 1c             	add    esp,0x1c
c001b000:	89 f8                	mov    eax,edi
c001b002:	5b                   	pop    ebx
c001b003:	5e                   	pop    esi
c001b004:	5f                   	pop    edi
c001b005:	5d                   	pop    ebp
c001b006:	c3                   	ret    
c001b007:	90                   	nop

c001b008 <PCI::open(int, int, void*)>:
c001b008:	83 ec 18             	sub    esp,0x18
c001b00b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b00f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b011:	50                   	push   eax
c001b012:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b015:	31 c0                	xor    eax,eax
c001b017:	83 c4 1c             	add    esp,0x1c
c001b01a:	c3                   	ret    
c001b01b:	90                   	nop

c001b01c <PCI::close(int, int, void*)>:
c001b01c:	31 c0                	xor    eax,eax
c001b01e:	c3                   	ret    
c001b01f:	90                   	nop

c001b020 <PCI::PCI()>:
c001b020:	83 ec 0c             	sub    esp,0xc
c001b023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b027:	83 ec 08             	sub    esp,0x8
c001b02a:	68 94 1f 02 c0       	push   0xc0021f94
c001b02f:	50                   	push   eax
c001b030:	e8 a1 49 ff ff       	call   c000f9d6 <Bus::Bus(char const*)>
c001b035:	83 c4 10             	add    esp,0x10
c001b038:	ba 40 20 02 c0       	mov    edx,0xc0022040
c001b03d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b041:	89 10                	mov    DWORD PTR [eax],edx
c001b043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b047:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b04d:	0f b6 d0             	movzx  edx,al
c001b050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b054:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b05f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b065:	0f b6 d0             	movzx  edx,al
c001b068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b06c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b075:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b07b:	8d 50 01             	lea    edx,[eax+0x1]
c001b07e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b082:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b088:	0f b6 d0             	movzx  edx,al
c001b08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b08f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b093:	83 c9 c0             	or     ecx,0xffffffc0
c001b096:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b09a:	90                   	nop
c001b09b:	83 c4 0c             	add    esp,0xc
c001b09e:	c3                   	ret    
c001b09f:	90                   	nop

c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b0a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b0a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b0a9:	89 ca                	mov    edx,ecx
c001b0ab:	c1 e0 10             	shl    eax,0x10
c001b0ae:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b0b4:	09 d0                	or     eax,edx
c001b0b6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b0bb:	c1 e2 08             	shl    edx,0x8
c001b0be:	09 d0                	or     eax,edx
c001b0c0:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b0c5:	c1 e2 0b             	shl    edx,0xb
c001b0c8:	09 d0                	or     eax,edx
c001b0ca:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0cf:	0d 00 00 00 80       	or     eax,0x80000000
c001b0d4:	ef                   	out    dx,eax
c001b0d5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0da:	ed                   	in     eax,dx
c001b0db:	83 e1 02             	and    ecx,0x2
c001b0de:	0f b6 c9             	movzx  ecx,cl
c001b0e1:	c1 e1 03             	shl    ecx,0x3
c001b0e4:	d3 e8                	shr    eax,cl
c001b0e6:	c3                   	ret    
c001b0e7:	90                   	nop

c001b0e8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b0e8:	6a 00                	push   0x0
c001b0ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0ef:	50                   	push   eax
c001b0f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0f5:	50                   	push   eax
c001b0f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0fb:	50                   	push   eax
c001b0fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b100:	e8 9b ff ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b105:	83 c4 14             	add    esp,0x14
c001b108:	c3                   	ret    
c001b109:	90                   	nop

c001b10a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b10a:	6a 0e                	push   0xe
c001b10c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b111:	50                   	push   eax
c001b112:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b117:	50                   	push   eax
c001b118:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b11d:	50                   	push   eax
c001b11e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b122:	e8 79 ff ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b127:	83 c4 14             	add    esp,0x14
c001b12a:	0f b6 c0             	movzx  eax,al
c001b12d:	c3                   	ret    

c001b12e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b12e:	55                   	push   ebp
c001b12f:	57                   	push   edi
c001b130:	56                   	push   esi
c001b131:	53                   	push   ebx
c001b132:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b137:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b13c:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b141:	6a 0a                	push   0xa
c001b143:	56                   	push   esi
c001b144:	55                   	push   ebp
c001b145:	57                   	push   edi
c001b146:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b14a:	e8 51 ff ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b14f:	6a 0a                	push   0xa
c001b151:	89 c3                	mov    ebx,eax
c001b153:	56                   	push   esi
c001b154:	0f b6 db             	movzx  ebx,bl
c001b157:	55                   	push   ebp
c001b158:	57                   	push   edi
c001b159:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b15d:	e8 3e ff ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b162:	83 c4 28             	add    esp,0x28
c001b165:	25 00 ff 00 00       	and    eax,0xff00
c001b16a:	09 d8                	or     eax,ebx
c001b16c:	5b                   	pop    ebx
c001b16d:	5e                   	pop    esi
c001b16e:	5f                   	pop    edi
c001b16f:	5d                   	pop    ebp
c001b170:	c3                   	ret    
c001b171:	90                   	nop

c001b172 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b172:	6a 08                	push   0x8
c001b174:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b179:	50                   	push   eax
c001b17a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b17f:	50                   	push   eax
c001b180:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b185:	50                   	push   eax
c001b186:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b18a:	e8 11 ff ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b18f:	83 c4 14             	add    esp,0x14
c001b192:	0f b6 c4             	movzx  eax,ah
c001b195:	c3                   	ret    

c001b196 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b196:	6a 08                	push   0x8
c001b198:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b19d:	50                   	push   eax
c001b19e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1a3:	50                   	push   eax
c001b1a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1a9:	50                   	push   eax
c001b1aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1ae:	e8 ed fe ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1b3:	83 c4 14             	add    esp,0x14
c001b1b6:	c3                   	ret    
c001b1b7:	90                   	nop

c001b1b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b1b8:	6a 3c                	push   0x3c
c001b1ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1bf:	50                   	push   eax
c001b1c0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1c5:	50                   	push   eax
c001b1c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1cb:	50                   	push   eax
c001b1cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1d0:	e8 cb fe ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1d5:	83 c4 14             	add    esp,0x14
c001b1d8:	c3                   	ret    
c001b1d9:	90                   	nop

c001b1da <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b1da:	6a 18                	push   0x18
c001b1dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1e1:	50                   	push   eax
c001b1e2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1e7:	50                   	push   eax
c001b1e8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b1ed:	50                   	push   eax
c001b1ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1f2:	e8 a9 fe ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1f7:	83 c4 14             	add    esp,0x14
c001b1fa:	0f b6 c4             	movzx  eax,ah
c001b1fd:	c3                   	ret    

c001b1fe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b1fe:	55                   	push   ebp
c001b1ff:	57                   	push   edi
c001b200:	56                   	push   esi
c001b201:	53                   	push   ebx
c001b202:	50                   	push   eax
c001b203:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b207:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b20c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b211:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b216:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b21d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b220:	83 c3 10             	add    ebx,0x10
c001b223:	0f b6 c0             	movzx  eax,al
c001b226:	0f b6 db             	movzx  ebx,bl
c001b229:	50                   	push   eax
c001b22a:	51                   	push   ecx
c001b22b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b22f:	57                   	push   edi
c001b230:	55                   	push   ebp
c001b231:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b235:	e8 66 fe ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b23a:	53                   	push   ebx
c001b23b:	89 c6                	mov    esi,eax
c001b23d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b241:	c1 e6 10             	shl    esi,0x10
c001b244:	51                   	push   ecx
c001b245:	57                   	push   edi
c001b246:	55                   	push   ebp
c001b247:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b24b:	e8 50 fe ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b250:	83 c4 2c             	add    esp,0x2c
c001b253:	0f b7 c0             	movzx  eax,ax
c001b256:	5b                   	pop    ebx
c001b257:	09 f0                	or     eax,esi
c001b259:	5e                   	pop    esi
c001b25a:	5f                   	pop    edi
c001b25b:	5d                   	pop    ebp
c001b25c:	c3                   	ret    
c001b25d:	90                   	nop

c001b25e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b25e:	53                   	push   ebx
c001b25f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b264:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b26d:	c1 e1 10             	shl    ecx,0x10
c001b270:	25 fc 00 00 00       	and    eax,0xfc
c001b275:	09 c1                	or     ecx,eax
c001b277:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b27c:	c1 e0 08             	shl    eax,0x8
c001b27f:	09 c1                	or     ecx,eax
c001b281:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b286:	c1 e0 0b             	shl    eax,0xb
c001b289:	09 c1                	or     ecx,eax
c001b28b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b291:	89 c8                	mov    eax,ecx
c001b293:	ef                   	out    dx,eax
c001b294:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b299:	ed                   	in     eax,dx
c001b29a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b29f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b2a4:	74 0a                	je     c001b2b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b2a6:	0f b7 d8             	movzx  ebx,ax
c001b2a9:	89 d0                	mov    eax,edx
c001b2ab:	c1 e0 10             	shl    eax,0x10
c001b2ae:	eb 05                	jmp    c001b2b5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b2b0:	66 31 c0             	xor    ax,ax
c001b2b3:	89 d3                	mov    ebx,edx
c001b2b5:	09 c3                	or     ebx,eax
c001b2b7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2bc:	89 c8                	mov    eax,ecx
c001b2be:	ef                   	out    dx,eax
c001b2bf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b2c4:	89 d8                	mov    eax,ebx
c001b2c6:	ef                   	out    dx,eax
c001b2c7:	5b                   	pop    ebx
c001b2c8:	c3                   	ret    
c001b2c9:	90                   	nop

c001b2ca <PCI::checkBus(unsigned char)>:
c001b2ca:	56                   	push   esi
c001b2cb:	53                   	push   ebx
c001b2cc:	31 db                	xor    ebx,ebx
c001b2ce:	51                   	push   ecx
c001b2cf:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b2d4:	52                   	push   edx
c001b2d5:	53                   	push   ebx
c001b2d6:	43                   	inc    ebx
c001b2d7:	56                   	push   esi
c001b2d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2dc:	e8 4d 03 00 00       	call   c001b62e <PCI::checkDevice(unsigned char, unsigned char)>
c001b2e1:	83 c4 10             	add    esp,0x10
c001b2e4:	83 fb 20             	cmp    ebx,0x20
c001b2e7:	75 eb                	jne    c001b2d4 <PCI::checkBus(unsigned char)+0xa>
c001b2e9:	58                   	pop    eax
c001b2ea:	5b                   	pop    ebx
c001b2eb:	5e                   	pop    esi
c001b2ec:	c3                   	ret    
c001b2ed:	90                   	nop

c001b2ee <PCI::foundDevice(PCIDeviceInfo)>:
c001b2ee:	55                   	push   ebp
c001b2ef:	57                   	push   edi
c001b2f0:	56                   	push   esi
c001b2f1:	53                   	push   ebx
c001b2f2:	83 ec 1c             	sub    esp,0x1c
c001b2f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2f9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b2ff:	0f 84 51 01 00 00    	je     c001b456 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b305:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b309:	66 81 f9 06 04       	cmp    cx,0x406
c001b30e:	75 2c                	jne    c001b33c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b310:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b315:	50                   	push   eax
c001b316:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b31b:	50                   	push   eax
c001b31c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b321:	50                   	push   eax
c001b322:	56                   	push   esi
c001b323:	e8 b2 fe ff ff       	call   c001b1da <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b328:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b32c:	0f b6 c0             	movzx  eax,al
c001b32f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b333:	83 c4 2c             	add    esp,0x2c
c001b336:	5b                   	pop    ebx
c001b337:	5e                   	pop    esi
c001b338:	5f                   	pop    edi
c001b339:	5d                   	pop    ebp
c001b33a:	eb 8e                	jmp    c001b2ca <PCI::checkBus(unsigned char)>
c001b33c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b340:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b346:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b34a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b34e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b352:	88 d3                	mov    bl,dl
c001b354:	85 c0                	test   eax,eax
c001b356:	74 33                	je     c001b38b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b358:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b35b:	85 d2                	test   edx,edx
c001b35d:	74 28                	je     c001b387 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b35f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b365:	31 ef                	xor    edi,ebp
c001b367:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b36d:	75 18                	jne    c001b387 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b36f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b373:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b379:	75 0c                	jne    c001b387 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b37b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b381:	0f 84 cf 00 00 00    	je     c001b456 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b387:	8b 00                	mov    eax,DWORD PTR [eax]
c001b389:	eb c9                	jmp    c001b354 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b38b:	66 81 f9 01 06       	cmp    cx,0x601
c001b390:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b394:	75 18                	jne    c001b3ae <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b396:	83 ec 0c             	sub    esp,0xc
c001b399:	68 58 01 00 00       	push   0x158
c001b39e:	e8 bd 38 ff ff       	call   c000ec60 <operator new(unsigned long)>
c001b3a3:	59                   	pop    ecx
c001b3a4:	89 c5                	mov    ebp,eax
c001b3a6:	5f                   	pop    edi
c001b3a7:	68 9c 1f 02 c0       	push   0xc0021f9c
c001b3ac:	eb 7d                	jmp    c001b42b <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b3ae:	66 81 f9 01 01       	cmp    cx,0x101
c001b3b3:	75 60                	jne    c001b415 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b3b5:	83 ec 0c             	sub    esp,0xc
c001b3b8:	68 70 02 00 00       	push   0x270
c001b3bd:	e8 9e 38 ff ff       	call   c000ec60 <operator new(unsigned long)>
c001b3c2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3c5:	89 c5                	mov    ebp,eax
c001b3c7:	e8 26 03 00 00       	call   c001b6f2 <IDE::IDE()>
c001b3cc:	58                   	pop    eax
c001b3cd:	5a                   	pop    edx
c001b3ce:	55                   	push   ebp
c001b3cf:	56                   	push   esi
c001b3d0:	e8 85 4d ff ff       	call   c001015a <Device::addChild(Device*)>
c001b3d5:	83 ec 1c             	sub    esp,0x1c
c001b3d8:	b9 09 00 00 00       	mov    ecx,0x9
c001b3dd:	fc                   	cld    
c001b3de:	89 e7                	mov    edi,esp
c001b3e0:	89 de                	mov    esi,ebx
c001b3e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b3e4:	55                   	push   ebp
c001b3e5:	e8 4a 4c ff ff       	call   c0010034 <Device::preOpenPCI(PCIDeviceInfo)>
c001b3ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b3ed:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b3f1:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b3f9:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b401:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b409:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b40c:	83 c4 4c             	add    esp,0x4c
c001b40f:	5b                   	pop    ebx
c001b410:	5e                   	pop    esi
c001b411:	5f                   	pop    edi
c001b412:	5d                   	pop    ebp
c001b413:	ff e0                	jmp    eax
c001b415:	83 ec 0c             	sub    esp,0xc
c001b418:	68 58 01 00 00       	push   0x158
c001b41d:	e8 3e 38 ff ff       	call   c000ec60 <operator new(unsigned long)>
c001b422:	59                   	pop    ecx
c001b423:	89 c5                	mov    ebp,eax
c001b425:	5f                   	pop    edi
c001b426:	68 bb 1f 02 c0       	push   0xc0021fbb
c001b42b:	55                   	push   ebp
c001b42c:	e8 15 50 ff ff       	call   c0010446 <DriverlessDevice::DriverlessDevice(char const*)>
c001b431:	58                   	pop    eax
c001b432:	5a                   	pop    edx
c001b433:	55                   	push   ebp
c001b434:	56                   	push   esi
c001b435:	e8 20 4d ff ff       	call   c001015a <Device::addChild(Device*)>
c001b43a:	b9 09 00 00 00       	mov    ecx,0x9
c001b43f:	fc                   	cld    
c001b440:	89 df                	mov    edi,ebx
c001b442:	89 de                	mov    esi,ebx
c001b444:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b446:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b44a:	83 c4 2c             	add    esp,0x2c
c001b44d:	5b                   	pop    ebx
c001b44e:	5e                   	pop    esi
c001b44f:	5f                   	pop    edi
c001b450:	5d                   	pop    ebp
c001b451:	e9 de 4b ff ff       	jmp    c0010034 <Device::preOpenPCI(PCIDeviceInfo)>
c001b456:	83 c4 1c             	add    esp,0x1c
c001b459:	5b                   	pop    ebx
c001b45a:	5e                   	pop    esi
c001b45b:	5f                   	pop    edi
c001b45c:	5d                   	pop    ebp
c001b45d:	c3                   	ret    

c001b45e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b45e:	55                   	push   ebp
c001b45f:	57                   	push   edi
c001b460:	56                   	push   esi
c001b461:	53                   	push   ebx
c001b462:	83 ec 5c             	sub    esp,0x5c
c001b465:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b469:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b46d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b471:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b476:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b47a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b47e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b483:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b487:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b48c:	6a 0c                	push   0xc
c001b48e:	55                   	push   ebp
c001b48f:	53                   	push   ebx
c001b490:	57                   	push   edi
c001b491:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b498:	e8 03 fc ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b49d:	83 c4 0c             	add    esp,0xc
c001b4a0:	6a 00                	push   0x0
c001b4a2:	68 d5 1f 02 c0       	push   0xc0021fd5
c001b4a7:	e8 a3 38 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001b4ac:	55                   	push   ebp
c001b4ad:	53                   	push   ebx
c001b4ae:	57                   	push   edi
c001b4af:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b4b6:	e8 73 fc ff ff       	call   c001b12e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b4bb:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b4c0:	83 c4 20             	add    esp,0x20
c001b4c3:	55                   	push   ebp
c001b4c4:	53                   	push   ebx
c001b4c5:	57                   	push   edi
c001b4c6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b4ca:	e8 e9 fc ff ff       	call   c001b1b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b4cf:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b4d6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4da:	55                   	push   ebp
c001b4db:	53                   	push   ebx
c001b4dc:	57                   	push   edi
c001b4dd:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b4e4:	e8 b7 fb ff ff       	call   c001b0a0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4e9:	0f b6 c4             	movzx  eax,ah
c001b4ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b4f0:	83 c4 18             	add    esp,0x18
c001b4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b4f7:	68 e9 1f 02 c0       	push   0xc0021fe9
c001b4fc:	e8 4e 38 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001b501:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b505:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b509:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c001b50e:	83 c4 10             	add    esp,0x10
c001b511:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b517:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b51e:	74 6c                	je     c001b58c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b520:	31 f6                	xor    esi,esi
c001b522:	8b 15 a8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232a8
c001b528:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b52e:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b534:	7e 56                	jle    c001b58c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b536:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b539:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b540:	39 cb                	cmp    ebx,ecx
c001b542:	75 45                	jne    c001b589 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b544:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b54b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b54f:	75 38                	jne    c001b589 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b551:	83 ec 0c             	sub    esp,0xc
c001b554:	68 f8 1f 02 c0       	push   0xc0021ff8
c001b559:	e8 f1 37 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001b55e:	8b 15 a8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232a8
c001b564:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b56a:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b572:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b576:	52                   	push   edx
c001b577:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b57b:	53                   	push   ebx
c001b57c:	68 1d 20 02 c0       	push   0xc002201d
c001b581:	e8 c9 37 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001b586:	83 c4 20             	add    esp,0x20
c001b589:	46                   	inc    esi
c001b58a:	eb 96                	jmp    c001b522 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b58c:	31 d2                	xor    edx,edx
c001b58e:	83 ec 0c             	sub    esp,0xc
c001b591:	55                   	push   ebp
c001b592:	53                   	push   ebx
c001b593:	57                   	push   edi
c001b594:	52                   	push   edx
c001b595:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b599:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b5a0:	e8 59 fc ff ff       	call   c001b1fe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a5:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b5a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b5ad:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b5b1:	42                   	inc    edx
c001b5b2:	83 c4 20             	add    esp,0x20
c001b5b5:	83 fa 06             	cmp    edx,0x6
c001b5b8:	75 d4                	jne    c001b58e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b5ba:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b5be:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b5c2:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b5c6:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b5ca:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b5ce:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b5d2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b5d7:	86 e0                	xchg   al,ah
c001b5d9:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b5de:	55                   	push   ebp
c001b5df:	53                   	push   ebx
c001b5e0:	57                   	push   edi
c001b5e1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b5e5:	e8 88 fb ff ff       	call   c001b172 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b5ea:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b5ee:	55                   	push   ebp
c001b5ef:	53                   	push   ebx
c001b5f0:	57                   	push   edi
c001b5f1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b5f8:	e8 eb fa ff ff       	call   c001b0e8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5fd:	83 ec 0c             	sub    esp,0xc
c001b600:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b605:	b9 09 00 00 00       	mov    ecx,0x9
c001b60a:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b60e:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b612:	fc                   	cld    
c001b613:	89 e7                	mov    edi,esp
c001b615:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b617:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b61e:	e8 cb fc ff ff       	call   c001b2ee <PCI::foundDevice(PCIDeviceInfo)>
c001b623:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b629:	5b                   	pop    ebx
c001b62a:	5e                   	pop    esi
c001b62b:	5f                   	pop    edi
c001b62c:	5d                   	pop    ebp
c001b62d:	c3                   	ret    

c001b62e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b62e:	55                   	push   ebp
c001b62f:	57                   	push   edi
c001b630:	56                   	push   esi
c001b631:	53                   	push   ebx
c001b632:	83 ec 0c             	sub    esp,0xc
c001b635:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b639:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b63e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b643:	6a 00                	push   0x0
c001b645:	56                   	push   esi
c001b646:	57                   	push   edi
c001b647:	55                   	push   ebp
c001b648:	e8 9b fa ff ff       	call   c001b0e8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b64d:	6a 00                	push   0x0
c001b64f:	56                   	push   esi
c001b650:	57                   	push   edi
c001b651:	55                   	push   ebp
c001b652:	e8 07 fe ff ff       	call   c001b45e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b657:	83 c4 20             	add    esp,0x20
c001b65a:	6a 00                	push   0x0
c001b65c:	56                   	push   esi
c001b65d:	57                   	push   edi
c001b65e:	55                   	push   ebp
c001b65f:	e8 a6 fa ff ff       	call   c001b10a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b664:	83 c4 10             	add    esp,0x10
c001b667:	84 c0                	test   al,al
c001b669:	79 27                	jns    c001b692 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b66b:	bb 01 00 00 00       	mov    ebx,0x1
c001b670:	53                   	push   ebx
c001b671:	56                   	push   esi
c001b672:	57                   	push   edi
c001b673:	55                   	push   ebp
c001b674:	e8 6f fa ff ff       	call   c001b0e8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b679:	83 c4 10             	add    esp,0x10
c001b67c:	66 40                	inc    ax
c001b67e:	74 0c                	je     c001b68c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b680:	53                   	push   ebx
c001b681:	56                   	push   esi
c001b682:	57                   	push   edi
c001b683:	55                   	push   ebp
c001b684:	e8 d5 fd ff ff       	call   c001b45e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b689:	83 c4 10             	add    esp,0x10
c001b68c:	43                   	inc    ebx
c001b68d:	83 fb 08             	cmp    ebx,0x8
c001b690:	75 de                	jne    c001b670 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b692:	83 c4 0c             	add    esp,0xc
c001b695:	5b                   	pop    ebx
c001b696:	5e                   	pop    esi
c001b697:	5f                   	pop    edi
c001b698:	5d                   	pop    ebp
c001b699:	c3                   	ret    

c001b69a <PCI::detect()>:
c001b69a:	56                   	push   esi
c001b69b:	53                   	push   ebx
c001b69c:	53                   	push   ebx
c001b69d:	31 db                	xor    ebx,ebx
c001b69f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6a3:	6a 00                	push   0x0
c001b6a5:	6a 00                	push   0x0
c001b6a7:	6a 00                	push   0x0
c001b6a9:	56                   	push   esi
c001b6aa:	e8 5b fa ff ff       	call   c001b10a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6af:	83 c4 10             	add    esp,0x10
c001b6b2:	a8 80                	test   al,0x80
c001b6b4:	75 21                	jne    c001b6d7 <PCI::detect()+0x3d>
c001b6b6:	51                   	push   ecx
c001b6b7:	51                   	push   ecx
c001b6b8:	6a 00                	push   0x0
c001b6ba:	56                   	push   esi
c001b6bb:	e8 0a fc ff ff       	call   c001b2ca <PCI::checkBus(unsigned char)>
c001b6c0:	83 c4 10             	add    esp,0x10
c001b6c3:	eb 24                	jmp    c001b6e9 <PCI::detect()+0x4f>
c001b6c5:	52                   	push   edx
c001b6c6:	52                   	push   edx
c001b6c7:	53                   	push   ebx
c001b6c8:	43                   	inc    ebx
c001b6c9:	56                   	push   esi
c001b6ca:	e8 fb fb ff ff       	call   c001b2ca <PCI::checkBus(unsigned char)>
c001b6cf:	83 c4 10             	add    esp,0x10
c001b6d2:	83 fb 08             	cmp    ebx,0x8
c001b6d5:	74 12                	je     c001b6e9 <PCI::detect()+0x4f>
c001b6d7:	53                   	push   ebx
c001b6d8:	6a 00                	push   0x0
c001b6da:	6a 00                	push   0x0
c001b6dc:	56                   	push   esi
c001b6dd:	e8 06 fa ff ff       	call   c001b0e8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6e2:	83 c4 10             	add    esp,0x10
c001b6e5:	66 40                	inc    ax
c001b6e7:	74 dc                	je     c001b6c5 <PCI::detect()+0x2b>
c001b6e9:	58                   	pop    eax
c001b6ea:	5b                   	pop    ebx
c001b6eb:	5e                   	pop    esi
c001b6ec:	c3                   	ret    
c001b6ed:	90                   	nop

c001b6ee <IDE::close(int, int, void*)>:
c001b6ee:	83 c8 ff             	or     eax,0xffffffff
c001b6f1:	c3                   	ret    

c001b6f2 <IDE::IDE()>:
c001b6f2:	83 ec 0c             	sub    esp,0xc
c001b6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6f9:	83 ec 08             	sub    esp,0x8
c001b6fc:	68 64 20 02 c0       	push   0xc0022064
c001b701:	50                   	push   eax
c001b702:	e8 d5 4d ff ff       	call   c00104dc <HardDiskController::HardDiskController(char const*)>
c001b707:	83 c4 10             	add    esp,0x10
c001b70a:	ba a4 22 02 c0       	mov    edx,0xc00222a4
c001b70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b713:	89 10                	mov    DWORD PTR [eax],edx
c001b715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b719:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b720:	90                   	nop
c001b721:	83 c4 0c             	add    esp,0xc
c001b724:	c3                   	ret    
c001b725:	90                   	nop

c001b726 <IDE::prepareInterrupt(unsigned char)>:
c001b726:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b72b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b72f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b737:	c3                   	ret    

c001b738 <selectDrive(unsigned char, unsigned char)>:
c001b738:	c3                   	ret    
c001b739:	90                   	nop

c001b73a <IDE::getBase(unsigned char)>:
c001b73a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b73f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b743:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b74b:	c3                   	ret    

c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b74c:	55                   	push   ebp
c001b74d:	57                   	push   edi
c001b74e:	56                   	push   esi
c001b74f:	53                   	push   ebx
c001b750:	83 ec 1c             	sub    esp,0x1c
c001b753:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b757:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b75b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b75e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b762:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b766:	80 f9 03             	cmp    cl,0x3
c001b769:	77 51                	ja     c001b7bc <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b76b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b76f:	0f b6 f2             	movzx  esi,dl
c001b772:	0f b6 db             	movzx  ebx,bl
c001b775:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b778:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b77c:	83 ca 80             	or     edx,0xffffff80
c001b77f:	0f b6 d2             	movzx  edx,dl
c001b782:	52                   	push   edx
c001b783:	6a 0c                	push   0xc
c001b785:	56                   	push   esi
c001b786:	57                   	push   edi
c001b787:	e8 c0 ff ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b78c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b795:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b799:	ee                   	out    dx,al
c001b79a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b79f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b7a3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b7a7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7ab:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7b3:	83 c4 2c             	add    esp,0x2c
c001b7b6:	5b                   	pop    ebx
c001b7b7:	5e                   	pop    esi
c001b7b8:	5f                   	pop    edi
c001b7b9:	5d                   	pop    ebp
c001b7ba:	eb 90                	jmp    c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7bc:	80 fb 07             	cmp    bl,0x7
c001b7bf:	77 12                	ja     c001b7d3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b7c1:	0f b6 d2             	movzx  edx,dl
c001b7c4:	0f b6 db             	movzx  ebx,bl
c001b7c7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b7cf:	89 da                	mov    edx,ebx
c001b7d1:	eb 2f                	jmp    c001b802 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b7d3:	80 fb 0d             	cmp    bl,0xd
c001b7d6:	77 13                	ja     c001b7eb <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b7d8:	0f b6 d2             	movzx  edx,dl
c001b7db:	0f b6 db             	movzx  ebx,bl
c001b7de:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b7e5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b7e9:	eb 17                	jmp    c001b802 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b7eb:	80 fb 15             	cmp    bl,0x15
c001b7ee:	77 13                	ja     c001b803 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b7f0:	0f b6 d2             	movzx  edx,dl
c001b7f3:	0f b6 db             	movzx  ebx,bl
c001b7f6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b7fe:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b802:	ee                   	out    dx,al
c001b803:	83 c4 1c             	add    esp,0x1c
c001b806:	5b                   	pop    ebx
c001b807:	5e                   	pop    esi
c001b808:	5f                   	pop    edi
c001b809:	5d                   	pop    ebp
c001b80a:	c3                   	ret    
c001b80b:	90                   	nop

c001b80c <IDE::read(unsigned char, unsigned char)>:
c001b80c:	55                   	push   ebp
c001b80d:	57                   	push   edi
c001b80e:	56                   	push   esi
c001b80f:	53                   	push   ebx
c001b810:	83 ec 1c             	sub    esp,0x1c
c001b813:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b817:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b81b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b81e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b822:	3c 03                	cmp    al,0x3
c001b824:	77 43                	ja     c001b869 <IDE::read(unsigned char, unsigned char)+0x5d>
c001b826:	0f b6 f2             	movzx  esi,dl
c001b829:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b82c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b830:	83 c8 80             	or     eax,0xffffff80
c001b833:	0f b6 c0             	movzx  eax,al
c001b836:	50                   	push   eax
c001b837:	6a 0c                	push   0xc
c001b839:	56                   	push   esi
c001b83a:	57                   	push   edi
c001b83b:	e8 0c ff ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b840:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b845:	0f b6 c3             	movzx  eax,bl
c001b848:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b84c:	ec                   	in     al,dx
c001b84d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b851:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b856:	52                   	push   edx
c001b857:	6a 0c                	push   0xc
c001b859:	56                   	push   esi
c001b85a:	57                   	push   edi
c001b85b:	e8 ec fe ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b860:	83 c4 20             	add    esp,0x20
c001b863:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b867:	eb 49                	jmp    c001b8b2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b869:	80 fb 07             	cmp    bl,0x7
c001b86c:	77 12                	ja     c001b880 <IDE::read(unsigned char, unsigned char)+0x74>
c001b86e:	0f b6 d2             	movzx  edx,dl
c001b871:	0f b6 c3             	movzx  eax,bl
c001b874:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b87c:	89 c2                	mov    edx,eax
c001b87e:	eb 31                	jmp    c001b8b1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b880:	80 fb 0d             	cmp    bl,0xd
c001b883:	77 13                	ja     c001b898 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b885:	0f b6 d2             	movzx  edx,dl
c001b888:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b88f:	0f b6 d3             	movzx  edx,bl
c001b892:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b896:	eb 19                	jmp    c001b8b1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b898:	31 c0                	xor    eax,eax
c001b89a:	80 fb 15             	cmp    bl,0x15
c001b89d:	77 13                	ja     c001b8b2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b89f:	0f b6 d2             	movzx  edx,dl
c001b8a2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b8aa:	0f b6 d3             	movzx  edx,bl
c001b8ad:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8b1:	ec                   	in     al,dx
c001b8b2:	83 c4 1c             	add    esp,0x1c
c001b8b5:	5b                   	pop    ebx
c001b8b6:	5e                   	pop    esi
c001b8b7:	5f                   	pop    edi
c001b8b8:	5d                   	pop    ebp
c001b8b9:	c3                   	ret    

c001b8ba <IDE::waitInterrupt(unsigned char)>:
c001b8ba:	55                   	push   ebp
c001b8bb:	57                   	push   edi
c001b8bc:	56                   	push   esi
c001b8bd:	53                   	push   ebx
c001b8be:	31 db                	xor    ebx,ebx
c001b8c0:	83 ec 0c             	sub    esp,0xc
c001b8c3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b8c7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b8cc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b8d4:	89 e8                	mov    eax,ebp
c001b8d6:	84 c0                	test   al,al
c001b8d8:	75 34                	jne    c001b90e <IDE::waitInterrupt(unsigned char)+0x54>
c001b8da:	52                   	push   edx
c001b8db:	6a 0c                	push   0xc
c001b8dd:	56                   	push   esi
c001b8de:	57                   	push   edi
c001b8df:	e8 28 ff ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001b8e4:	83 c4 10             	add    esp,0x10
c001b8e7:	a8 01                	test   al,0x1
c001b8e9:	75 2b                	jne    c001b916 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b8eb:	f6 c3 04             	test   bl,0x4
c001b8ee:	75 16                	jne    c001b906 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b8f0:	83 fb 32             	cmp    ebx,0x32
c001b8f3:	7e 11                	jle    c001b906 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b8f5:	50                   	push   eax
c001b8f6:	50                   	push   eax
c001b8f7:	6a 00                	push   0x0
c001b8f9:	68 80 96 98 00       	push   0x989680
c001b8fe:	e8 75 c5 ff ff       	call   c0017e78 <nanoSleep(unsigned long long)>
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	83 fb 3c             	cmp    ebx,0x3c
c001b909:	74 0b                	je     c001b916 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b90b:	43                   	inc    ebx
c001b90c:	eb be                	jmp    c001b8cc <IDE::waitInterrupt(unsigned char)+0x12>
c001b90e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b916:	83 c4 0c             	add    esp,0xc
c001b919:	89 e8                	mov    eax,ebp
c001b91b:	5b                   	pop    ebx
c001b91c:	5e                   	pop    esi
c001b91d:	5f                   	pop    edi
c001b91e:	5d                   	pop    ebp
c001b91f:	c3                   	ret    

c001b920 <ideChannel0IRQHandler(regs*, void*)>:
c001b920:	83 ec 10             	sub    esp,0x10
c001b923:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b927:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b92e:	6a 07                	push   0x7
c001b930:	6a 00                	push   0x0
c001b932:	50                   	push   eax
c001b933:	e8 d4 fe ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001b938:	83 c4 1c             	add    esp,0x1c
c001b93b:	c3                   	ret    

c001b93c <ideChannel1IRQHandler(regs*, void*)>:
c001b93c:	83 ec 10             	sub    esp,0x10
c001b93f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b943:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b94a:	6a 07                	push   0x7
c001b94c:	6a 01                	push   0x1
c001b94e:	50                   	push   eax
c001b94f:	e8 b8 fe ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001b954:	83 c4 1c             	add    esp,0x1c
c001b957:	c3                   	ret    

c001b958 <IDE::enableIRQs(unsigned char, bool)>:
c001b958:	57                   	push   edi
c001b959:	56                   	push   esi
c001b95a:	be 04 00 00 00       	mov    esi,0x4
c001b95f:	53                   	push   ebx
c001b960:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b969:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b96e:	0f 94 c0             	sete   al
c001b971:	d1 e0                	shl    eax,1
c001b973:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b97a:	0f b6 c0             	movzx  eax,al
c001b97d:	50                   	push   eax
c001b97e:	6a 0c                	push   0xc
c001b980:	57                   	push   edi
c001b981:	53                   	push   ebx
c001b982:	e8 c5 fd ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b987:	83 c4 10             	add    esp,0x10
c001b98a:	50                   	push   eax
c001b98b:	6a 0c                	push   0xc
c001b98d:	57                   	push   edi
c001b98e:	53                   	push   ebx
c001b98f:	e8 78 fe ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001b994:	83 c4 10             	add    esp,0x10
c001b997:	4e                   	dec    esi
c001b998:	75 f0                	jne    c001b98a <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b99a:	5b                   	pop    ebx
c001b99b:	5e                   	pop    esi
c001b99c:	5f                   	pop    edi
c001b99d:	c3                   	ret    

c001b99e <IDE::open(int, int, void*)>:
c001b99e:	55                   	push   ebp
c001b99f:	57                   	push   edi
c001b9a0:	56                   	push   esi
c001b9a1:	53                   	push   ebx
c001b9a2:	83 ec 1c             	sub    esp,0x1c
c001b9a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9a9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9b2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b9bb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b9c2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b9c9:	0f 85 b0 02 00 00    	jne    c001bc7f <IDE::open(int, int, void*)+0x2e1>
c001b9cf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b9d5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001b9d9:	83 e0 7f             	and    eax,0x7f
c001b9dc:	3c 05                	cmp    al,0x5
c001b9de:	74 04                	je     c001b9e4 <IDE::open(int, int, void*)+0x46>
c001b9e0:	3c 0f                	cmp    al,0xf
c001b9e2:	75 32                	jne    c001ba16 <IDE::open(int, int, void*)+0x78>
c001b9e4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b9ea:	83 e0 fc             	and    eax,0xfffffffc
c001b9ed:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b9f4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b9fa:	83 e0 fc             	and    eax,0xfffffffc
c001b9fd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba04:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba0a:	83 e0 fc             	and    eax,0xfffffffc
c001ba0d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba14:	eb 14                	jmp    c001ba2a <IDE::open(int, int, void*)+0x8c>
c001ba16:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba20:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba2a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ba31:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba3c:	89 c6                	mov    esi,eax
c001ba3e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba43:	c1 e6 10             	shl    esi,0x10
c001ba46:	89 e8                	mov    eax,ebp
c001ba48:	89 fa                	mov    edx,edi
c001ba4a:	c1 e0 0b             	shl    eax,0xb
c001ba4d:	09 f0                	or     eax,esi
c001ba4f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ba56:	c1 e6 08             	shl    esi,0x8
c001ba59:	09 c6                	or     esi,eax
c001ba5b:	89 f0                	mov    eax,esi
c001ba5d:	0d 08 00 00 80       	or     eax,0x80000008
c001ba62:	ef                   	out    dx,eax
c001ba63:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ba68:	89 ca                	mov    edx,ecx
c001ba6a:	ed                   	in     eax,dx
c001ba6b:	c1 e8 10             	shr    eax,0x10
c001ba6e:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba73:	0f 84 f5 00 00 00    	je     c001bb6e <IDE::open(int, int, void*)+0x1d0>
c001ba79:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ba7f:	89 fa                	mov    edx,edi
c001ba81:	89 f0                	mov    eax,esi
c001ba83:	ef                   	out    dx,eax
c001ba84:	b0 fe                	mov    al,0xfe
c001ba86:	89 ca                	mov    edx,ecx
c001ba88:	ee                   	out    dx,al
c001ba89:	89 f0                	mov    eax,esi
c001ba8b:	89 fa                	mov    edx,edi
c001ba8d:	ef                   	out    dx,eax
c001ba8e:	89 ca                	mov    edx,ecx
c001ba90:	ed                   	in     eax,dx
c001ba91:	3c fe                	cmp    al,0xfe
c001ba93:	0f 85 a9 00 00 00    	jne    c001bb42 <IDE::open(int, int, void*)+0x1a4>
c001ba99:	8b 15 a8 32 02 c0    	mov    edx,DWORD PTR ds:0xc00232a8
c001ba9f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001baa6:	74 33                	je     c001badb <IDE::open(int, int, void*)+0x13d>
c001baa8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001baae:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bab2:	40                   	inc    eax
c001bab3:	83 ec 0c             	sub    esp,0xc
c001bab6:	0f b6 c0             	movzx  eax,al
c001bab9:	50                   	push   eax
c001baba:	55                   	push   ebp
c001babb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001babf:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bac5:	51                   	push   ecx
c001bac6:	e8 d9 77 ff ff       	call   c00132a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bacb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bad0:	83 c4 1c             	add    esp,0x1c
c001bad3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bad9:	eb 0a                	jmp    c001bae5 <IDE::open(int, int, void*)+0x147>
c001badb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bae5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001baec:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001baf3:	c1 e1 10             	shl    ecx,0x10
c001baf6:	c1 e0 08             	shl    eax,0x8
c001baf9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bafe:	09 c1                	or     ecx,eax
c001bb00:	89 fa                	mov    edx,edi
c001bb02:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb09:	c1 e0 0b             	shl    eax,0xb
c001bb0c:	09 c1                	or     ecx,eax
c001bb0e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb14:	89 c8                	mov    eax,ecx
c001bb16:	ef                   	out    dx,eax
c001bb17:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb1c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bb22:	89 f2                	mov    edx,esi
c001bb24:	ee                   	out    dx,al
c001bb25:	89 c8                	mov    eax,ecx
c001bb27:	89 fa                	mov    edx,edi
c001bb29:	ef                   	out    dx,eax
c001bb2a:	89 f2                	mov    edx,esi
c001bb2c:	ed                   	in     eax,dx
c001bb2d:	0f b6 c0             	movzx  eax,al
c001bb30:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bb36:	74 46                	je     c001bb7e <IDE::open(int, int, void*)+0x1e0>
c001bb38:	83 ec 0c             	sub    esp,0xc
c001bb3b:	68 7c 20 02 c0       	push   0xc002207c
c001bb40:	eb 34                	jmp    c001bb76 <IDE::open(int, int, void*)+0x1d8>
c001bb42:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb4b:	75 17                	jne    c001bb64 <IDE::open(int, int, void*)+0x1c6>
c001bb4d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bb52:	74 07                	je     c001bb5b <IDE::open(int, int, void*)+0x1bd>
c001bb54:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bb59:	75 09                	jne    c001bb64 <IDE::open(int, int, void*)+0x1c6>
c001bb5b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bb62:	eb 1a                	jmp    c001bb7e <IDE::open(int, int, void*)+0x1e0>
c001bb64:	83 ec 0c             	sub    esp,0xc
c001bb67:	68 84 20 02 c0       	push   0xc0022084
c001bb6c:	eb 08                	jmp    c001bb76 <IDE::open(int, int, void*)+0x1d8>
c001bb6e:	83 ec 0c             	sub    esp,0xc
c001bb71:	68 b5 20 02 c0       	push   0xc00220b5
c001bb76:	e8 69 8e ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001bb7b:	83 c4 10             	add    esp,0x10
c001bb7e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bb85:	79 1a                	jns    c001bba1 <IDE::open(int, int, void*)+0x203>
c001bb87:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bb8d:	83 e0 fc             	and    eax,0xfffffffc
c001bb90:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bb97:	83 c0 08             	add    eax,0x8
c001bb9a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bba1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bba7:	89 c2                	mov    edx,eax
c001bba9:	83 e2 0f             	and    edx,0xf
c001bbac:	66 83 fa 08          	cmp    dx,0x8
c001bbb0:	75 0a                	jne    c001bbbc <IDE::open(int, int, void*)+0x21e>
c001bbb2:	83 e8 02             	sub    eax,0x2
c001bbb5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbbc:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bbc2:	89 c2                	mov    edx,eax
c001bbc4:	83 e2 0f             	and    edx,0xf
c001bbc7:	66 83 fa 08          	cmp    dx,0x8
c001bbcb:	75 0a                	jne    c001bbd7 <IDE::open(int, int, void*)+0x239>
c001bbcd:	83 e8 02             	sub    eax,0x2
c001bbd0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bbd7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bbde:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bbe5:	89 d0                	mov    eax,edx
c001bbe7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bbea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bbee:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bbf2:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bbf5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bbfa:	0f b6 c9             	movzx  ecx,cl
c001bbfd:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc04:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc07:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc0b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc0f:	8d 50 02             	lea    edx,[eax+0x2]
c001bc12:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bc17:	0f b6 d2             	movzx  edx,dl
c001bc1a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc20:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc23:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc27:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc2b:	8d 48 03             	lea    ecx,[eax+0x3]
c001bc2e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bc33:	0f b6 c9             	movzx  ecx,cl
c001bc36:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bc3c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc3f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc43:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bc47:	8d 50 04             	lea    edx,[eax+0x4]
c001bc4a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bc50:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bc55:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bc5c:	66 85 f6             	test   si,si
c001bc5f:	74 3e                	je     c001bc9f <IDE::open(int, int, void*)+0x301>
c001bc61:	0f b6 d2             	movzx  edx,dl
c001bc64:	83 c0 05             	add    eax,0x5
c001bc67:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc6a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc6e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bc72:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bc78:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bc7d:	eb 20                	jmp    c001bc9f <IDE::open(int, int, void*)+0x301>
c001bc7f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bc89:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bc93:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bc9a:	e9 02 ff ff ff       	jmp    c001bba1 <IDE::open(int, int, void*)+0x203>
c001bc9f:	52                   	push   edx
c001bca0:	52                   	push   edx
c001bca1:	6a 00                	push   0x0
c001bca3:	53                   	push   ebx
c001bca4:	e8 7d fa ff ff       	call   c001b726 <IDE::prepareInterrupt(unsigned char)>
c001bca9:	59                   	pop    ecx
c001bcaa:	5e                   	pop    esi
c001bcab:	6a 01                	push   0x1
c001bcad:	53                   	push   ebx
c001bcae:	e8 73 fa ff ff       	call   c001b726 <IDE::prepareInterrupt(unsigned char)>
c001bcb3:	83 c4 0c             	add    esp,0xc
c001bcb6:	6a 00                	push   0x0
c001bcb8:	6a 00                	push   0x0
c001bcba:	53                   	push   ebx
c001bcbb:	e8 98 fc ff ff       	call   c001b958 <IDE::enableIRQs(unsigned char, bool)>
c001bcc0:	83 c4 0c             	add    esp,0xc
c001bcc3:	6a 00                	push   0x0
c001bcc5:	6a 01                	push   0x1
c001bcc7:	53                   	push   ebx
c001bcc8:	e8 8b fc ff ff       	call   c001b958 <IDE::enableIRQs(unsigned char, bool)>
c001bccd:	83 c4 10             	add    esp,0x10
c001bcd0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bcd7:	74 40                	je     c001bd19 <IDE::open(int, int, void*)+0x37b>
c001bcd9:	83 ec 0c             	sub    esp,0xc
c001bcdc:	68 df 20 02 c0       	push   0xc00220df
c001bce1:	e8 69 30 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001bce6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bce9:	6a 01                	push   0x1
c001bceb:	68 20 b9 01 c0       	push   0xc001b920
c001bcf0:	6a 0e                	push   0xe
c001bcf2:	53                   	push   ebx
c001bcf3:	e8 b6 43 ff ff       	call   c00100ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bcf8:	83 c4 14             	add    esp,0x14
c001bcfb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd01:	53                   	push   ebx
c001bd02:	6a 01                	push   0x1
c001bd04:	68 3c b9 01 c0       	push   0xc001b93c
c001bd09:	6a 0f                	push   0xf
c001bd0b:	53                   	push   ebx
c001bd0c:	e8 9d 43 ff ff       	call   c00100ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd11:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bd17:	eb 4a                	jmp    c001bd63 <IDE::open(int, int, void*)+0x3c5>
c001bd19:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bd23:	50                   	push   eax
c001bd24:	6a 0f                	push   0xf
c001bd26:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bd2c:	68 fb 20 02 c0       	push   0xc00220fb
c001bd31:	e8 19 30 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001bd36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd39:	6a 00                	push   0x0
c001bd3b:	68 20 b9 01 c0       	push   0xc001b920
c001bd40:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bd46:	53                   	push   ebx
c001bd47:	e8 62 43 ff ff       	call   c00100ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd4c:	83 c4 14             	add    esp,0x14
c001bd4f:	53                   	push   ebx
c001bd50:	6a 00                	push   0x0
c001bd52:	68 3c b9 01 c0       	push   0xc001b93c
c001bd57:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bd5d:	53                   	push   ebx
c001bd5e:	e8 4b 43 ff ff       	call   c00100ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd63:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd65:	83 c4 20             	add    esp,0x20
c001bd68:	83 ec 0c             	sub    esp,0xc
c001bd6b:	53                   	push   ebx
c001bd6c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bd6f:	83 c4 0c             	add    esp,0xc
c001bd72:	6a 07                	push   0x7
c001bd74:	6a 00                	push   0x0
c001bd76:	53                   	push   ebx
c001bd77:	e8 90 fa ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bd7c:	83 c4 0c             	add    esp,0xc
c001bd7f:	6a 07                	push   0x7
c001bd81:	6a 01                	push   0x1
c001bd83:	53                   	push   ebx
c001bd84:	e8 83 fa ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bd89:	83 c4 0c             	add    esp,0xc
c001bd8c:	6a 01                	push   0x1
c001bd8e:	6a 00                	push   0x0
c001bd90:	53                   	push   ebx
c001bd91:	e8 c2 fb ff ff       	call   c001b958 <IDE::enableIRQs(unsigned char, bool)>
c001bd96:	83 c4 0c             	add    esp,0xc
c001bd99:	6a 01                	push   0x1
c001bd9b:	6a 01                	push   0x1
c001bd9d:	53                   	push   ebx
c001bd9e:	e8 b5 fb ff ff       	call   c001b958 <IDE::enableIRQs(unsigned char, bool)>
c001bda3:	83 c4 2c             	add    esp,0x2c
c001bda6:	31 c0                	xor    eax,eax
c001bda8:	5b                   	pop    ebx
c001bda9:	5e                   	pop    esi
c001bdaa:	5f                   	pop    edi
c001bdab:	5d                   	pop    ebp
c001bdac:	c3                   	ret    
c001bdad:	90                   	nop

c001bdae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bdae:	55                   	push   ebp
c001bdaf:	57                   	push   edi
c001bdb0:	56                   	push   esi
c001bdb1:	53                   	push   ebx
c001bdb2:	83 ec 1c             	sub    esp,0x1c
c001bdb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bdb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bdbd:	8d 50 f8             	lea    edx,[eax-0x8]
c001bdc0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bdc4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bdc8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bdcc:	80 fa 03             	cmp    dl,0x3
c001bdcf:	77 5d                	ja     c001be2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001bdd1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bdd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bdd9:	0f b6 db             	movzx  ebx,bl
c001bddc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bddf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001bde3:	83 ca 80             	or     edx,0xffffff80
c001bde6:	0f b6 d2             	movzx  edx,dl
c001bde9:	52                   	push   edx
c001bdea:	6a 0c                	push   0xc
c001bdec:	53                   	push   ebx
c001bded:	56                   	push   esi
c001bdee:	e8 59 f9 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bdf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdfc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be00:	0f b6 c0             	movzx  eax,al
c001be03:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001be07:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be09:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be0e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be12:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be16:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be1a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be22:	83 c4 2c             	add    esp,0x2c
c001be25:	5b                   	pop    ebx
c001be26:	5e                   	pop    esi
c001be27:	5f                   	pop    edi
c001be28:	5d                   	pop    ebp
c001be29:	e9 1e f9 ff ff       	jmp    c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be2e:	3c 07                	cmp    al,0x7
c001be30:	77 10                	ja     c001be42 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001be32:	0f b6 db             	movzx  ebx,bl
c001be35:	0f b6 d0             	movzx  edx,al
c001be38:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001be40:	eb 2d                	jmp    c001be6f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001be42:	3c 0d                	cmp    al,0xd
c001be44:	77 13                	ja     c001be59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001be46:	0f b6 db             	movzx  ebx,bl
c001be49:	0f b6 c0             	movzx  eax,al
c001be4c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001be53:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001be57:	eb 16                	jmp    c001be6f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001be59:	3c 15                	cmp    al,0x15
c001be5b:	77 14                	ja     c001be71 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001be5d:	0f b6 db             	movzx  ebx,bl
c001be60:	0f b6 c0             	movzx  eax,al
c001be63:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001be6b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001be6f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be71:	83 c4 1c             	add    esp,0x1c
c001be74:	5b                   	pop    ebx
c001be75:	5e                   	pop    esi
c001be76:	5f                   	pop    edi
c001be77:	5d                   	pop    ebp
c001be78:	c3                   	ret    
c001be79:	90                   	nop

c001be7a <IDE::detect()>:
c001be7a:	55                   	push   ebp
c001be7b:	57                   	push   edi
c001be7c:	56                   	push   esi
c001be7d:	53                   	push   ebx
c001be7e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001be84:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001be8b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001be92:	0f 85 be 02 00 00    	jne    c001c156 <IDE::detect()+0x2dc>
c001be98:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001be9f:	31 f6                	xor    esi,esi
c001bea1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bea9:	31 ed                	xor    ebp,ebp
c001beab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beaf:	c1 e0 06             	shl    eax,0x6
c001beb2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001beba:	89 e8                	mov    eax,ebp
c001bebc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bec0:	c1 e0 04             	shl    eax,0x4
c001bec3:	83 c8 a0             	or     eax,0xffffffa0
c001bec6:	0f b6 c0             	movzx  eax,al
c001bec9:	50                   	push   eax
c001beca:	6a 06                	push   0x6
c001becc:	56                   	push   esi
c001becd:	53                   	push   ebx
c001bece:	e8 79 f8 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bed3:	83 c4 0c             	add    esp,0xc
c001bed6:	6a 0c                	push   0xc
c001bed8:	56                   	push   esi
c001bed9:	53                   	push   ebx
c001beda:	e8 2d f9 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bedf:	83 c4 0c             	add    esp,0xc
c001bee2:	6a 0c                	push   0xc
c001bee4:	56                   	push   esi
c001bee5:	53                   	push   ebx
c001bee6:	e8 21 f9 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001beeb:	83 c4 0c             	add    esp,0xc
c001beee:	6a 0c                	push   0xc
c001bef0:	56                   	push   esi
c001bef1:	53                   	push   ebx
c001bef2:	e8 15 f9 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bef7:	83 c4 0c             	add    esp,0xc
c001befa:	6a 0c                	push   0xc
c001befc:	56                   	push   esi
c001befd:	53                   	push   ebx
c001befe:	e8 09 f9 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bf03:	68 ec 00 00 00       	push   0xec
c001bf08:	6a 07                	push   0x7
c001bf0a:	56                   	push   esi
c001bf0b:	53                   	push   ebx
c001bf0c:	e8 3b f8 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf11:	83 c4 1c             	add    esp,0x1c
c001bf14:	6a 0c                	push   0xc
c001bf16:	56                   	push   esi
c001bf17:	53                   	push   ebx
c001bf18:	e8 ef f8 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bf1d:	83 c4 0c             	add    esp,0xc
c001bf20:	6a 0c                	push   0xc
c001bf22:	56                   	push   esi
c001bf23:	53                   	push   ebx
c001bf24:	e8 e3 f8 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bf29:	83 c4 0c             	add    esp,0xc
c001bf2c:	6a 0c                	push   0xc
c001bf2e:	56                   	push   esi
c001bf2f:	53                   	push   ebx
c001bf30:	e8 d7 f8 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bf35:	83 c4 0c             	add    esp,0xc
c001bf38:	6a 0c                	push   0xc
c001bf3a:	56                   	push   esi
c001bf3b:	53                   	push   ebx
c001bf3c:	e8 cb f8 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bf41:	83 c4 0c             	add    esp,0xc
c001bf44:	6a 0c                	push   0xc
c001bf46:	56                   	push   esi
c001bf47:	53                   	push   ebx
c001bf48:	e8 bf f8 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bf4d:	83 c4 10             	add    esp,0x10
c001bf50:	84 c0                	test   al,al
c001bf52:	0f 84 8b 01 00 00    	je     c001c0e3 <IDE::detect()+0x269>
c001bf58:	31 ff                	xor    edi,edi
c001bf5a:	50                   	push   eax
c001bf5b:	6a 0c                	push   0xc
c001bf5d:	56                   	push   esi
c001bf5e:	53                   	push   ebx
c001bf5f:	e8 a8 f8 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001bf64:	83 c4 10             	add    esp,0x10
c001bf67:	a8 01                	test   al,0x1
c001bf69:	0f 85 8e 01 00 00    	jne    c001c0fd <IDE::detect()+0x283>
c001bf6f:	84 c0                	test   al,al
c001bf71:	78 04                	js     c001bf77 <IDE::detect()+0xfd>
c001bf73:	a8 08                	test   al,0x8
c001bf75:	75 27                	jne    c001bf9e <IDE::detect()+0x124>
c001bf77:	47                   	inc    edi
c001bf78:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bf7e:	7e da                	jle    c001bf5a <IDE::detect()+0xe0>
c001bf80:	50                   	push   eax
c001bf81:	50                   	push   eax
c001bf82:	6a 00                	push   0x0
c001bf84:	68 40 4b 4c 00       	push   0x4c4b40
c001bf89:	e8 ea be ff ff       	call   c0017e78 <nanoSleep(unsigned long long)>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bf97:	75 c1                	jne    c001bf5a <IDE::detect()+0xe0>
c001bf99:	e9 5f 01 00 00       	jmp    c001c0fd <IDE::detect()+0x283>
c001bf9e:	31 c9                	xor    ecx,ecx
c001bfa0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bfa4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	68 80 00 00 00       	push   0x80
c001bfb0:	57                   	push   edi
c001bfb1:	6a 00                	push   0x0
c001bfb3:	56                   	push   esi
c001bfb4:	53                   	push   ebx
c001bfb5:	e8 f4 fd ff ff       	call   c001bdae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bfba:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001bfbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bfc3:	89 d1                	mov    ecx,edx
c001bfc5:	c1 e0 06             	shl    eax,0x6
c001bfc8:	01 d8                	add    eax,ebx
c001bfca:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001bfd1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001bfd8:	89 f2                	mov    edx,esi
c001bfda:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001bfe0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001bfe4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001bfea:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bfee:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001bff5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001bffd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c004:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c00c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c012:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c019:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c01f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c023:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c027:	83 c4 20             	add    esp,0x20
c001c02a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c02d:	83 c0 02             	add    eax,0x2
c001c030:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c036:	83 c7 02             	add    edi,0x2
c001c039:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c03c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c042:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c046:	75 e2                	jne    c001c02a <IDE::detect()+0x1b0>
c001c048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c04c:	c1 e0 06             	shl    eax,0x6
c001c04f:	01 d8                	add    eax,ebx
c001c051:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c057:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c05e:	66 c1 ea 09          	shr    dx,0x9
c001c062:	83 e2 01             	and    edx,0x1
c001c065:	84 c9                	test   cl,cl
c001c067:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c06d:	75 2f                	jne    c001c09e <IDE::detect()+0x224>
c001c06f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c075:	85 c0                	test   eax,eax
c001c077:	74 66                	je     c001c0df <IDE::detect()+0x265>
c001c079:	50                   	push   eax
c001c07a:	55                   	push   ebp
c001c07b:	56                   	push   esi
c001c07c:	68 17 21 02 c0       	push   0xc0022117
c001c081:	e8 c9 2c ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c086:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c08d:	e8 ce 2b ff ff       	call   c000ec60 <operator new(unsigned long)>
c001c092:	89 c7                	mov    edi,eax
c001c094:	89 04 24             	mov    DWORD PTR [esp],eax
c001c097:	e8 e8 02 00 00       	call   c001c384 <ATA::ATA()>
c001c09c:	eb 28                	jmp    c001c0c6 <IDE::detect()+0x24c>
c001c09e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c0a4:	55                   	push   ebp
c001c0a5:	56                   	push   esi
c001c0a6:	68 46 21 02 c0       	push   0xc0022146
c001c0ab:	e8 9f 2c ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c0b0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c0b7:	e8 a4 2b ff ff       	call   c000ec60 <operator new(unsigned long)>
c001c0bc:	89 c7                	mov    edi,eax
c001c0be:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0c1:	e8 ee 08 00 00       	call   c001c9b4 <ATAPI::ATAPI()>
c001c0c6:	5a                   	pop    edx
c001c0c7:	59                   	pop    ecx
c001c0c8:	57                   	push   edi
c001c0c9:	53                   	push   ebx
c001c0ca:	e8 8b 40 ff ff       	call   c001015a <Device::addChild(Device*)>
c001c0cf:	8b 07                	mov    eax,DWORD PTR [edi]
c001c0d1:	53                   	push   ebx
c001c0d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0d6:	6a 00                	push   0x0
c001c0d8:	57                   	push   edi
c001c0d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0dc:	83 c4 20             	add    esp,0x20
c001c0df:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c0e3:	4d                   	dec    ebp
c001c0e4:	74 0a                	je     c001c0f0 <IDE::detect()+0x276>
c001c0e6:	bd 01 00 00 00       	mov    ebp,0x1
c001c0eb:	e9 bb fd ff ff       	jmp    c001beab <IDE::detect()+0x31>
c001c0f0:	4e                   	dec    esi
c001c0f1:	74 63                	je     c001c156 <IDE::detect()+0x2dc>
c001c0f3:	be 01 00 00 00       	mov    esi,0x1
c001c0f8:	e9 ac fd ff ff       	jmp    c001bea9 <IDE::detect()+0x2f>
c001c0fd:	50                   	push   eax
c001c0fe:	6a 04                	push   0x4
c001c100:	56                   	push   esi
c001c101:	53                   	push   ebx
c001c102:	e8 05 f7 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001c107:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c10b:	83 c4 0c             	add    esp,0xc
c001c10e:	6a 05                	push   0x5
c001c110:	56                   	push   esi
c001c111:	53                   	push   ebx
c001c112:	e8 f5 f6 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001c117:	83 c4 10             	add    esp,0x10
c001c11a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c11e:	80 fa 14             	cmp    dl,0x14
c001c121:	75 04                	jne    c001c127 <IDE::detect()+0x2ad>
c001c123:	3c eb                	cmp    al,0xeb
c001c125:	eb 07                	jmp    c001c12e <IDE::detect()+0x2b4>
c001c127:	3c 96                	cmp    al,0x96
c001c129:	75 b8                	jne    c001c0e3 <IDE::detect()+0x269>
c001c12b:	80 fa 69             	cmp    dl,0x69
c001c12e:	75 b3                	jne    c001c0e3 <IDE::detect()+0x269>
c001c130:	68 a1 00 00 00       	push   0xa1
c001c135:	6a 07                	push   0x7
c001c137:	56                   	push   esi
c001c138:	53                   	push   ebx
c001c139:	e8 0e f6 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c13e:	5f                   	pop    edi
c001c13f:	58                   	pop    eax
c001c140:	6a 00                	push   0x0
c001c142:	68 40 42 0f 00       	push   0xf4240
c001c147:	e8 2c bd ff ff       	call   c0017e78 <nanoSleep(unsigned long long)>
c001c14c:	83 c4 10             	add    esp,0x10
c001c14f:	b1 01                	mov    cl,0x1
c001c151:	e9 4a fe ff ff       	jmp    c001bfa0 <IDE::detect()+0x126>
c001c156:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c15c:	5b                   	pop    ebx
c001c15d:	5e                   	pop    esi
c001c15e:	5f                   	pop    edi
c001c15f:	5d                   	pop    ebp
c001c160:	c3                   	ret    
c001c161:	90                   	nop

c001c162 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c162:	55                   	push   ebp
c001c163:	57                   	push   edi
c001c164:	56                   	push   esi
c001c165:	53                   	push   ebx
c001c166:	83 ec 1c             	sub    esp,0x1c
c001c169:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c16d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c171:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c175:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c179:	88 c3                	mov    bl,al
c001c17b:	84 c0                	test   al,al
c001c17d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c181:	0f 84 67 01 00 00    	je     c001c2ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c187:	83 ec 0c             	sub    esp,0xc
c001c18a:	68 77 21 02 c0       	push   0xc0022177
c001c18f:	e8 bb 2b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c194:	83 c4 10             	add    esp,0x10
c001c197:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c19b:	3c 01                	cmp    al,0x1
c001c19d:	75 17                	jne    c001c1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c19f:	83 ec 0c             	sub    esp,0xc
c001c1a2:	b3 13                	mov    bl,0x13
c001c1a4:	68 83 21 02 c0       	push   0xc0022183
c001c1a9:	e8 a1 2b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	e9 25 01 00 00       	jmp    c001c2db <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c1b6:	3c 02                	cmp    al,0x2
c001c1b8:	0f 85 ef 00 00 00    	jne    c001c2ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c1be:	d1 e6                	shl    esi,1
c001c1c0:	09 ee                	or     esi,ebp
c001c1c2:	52                   	push   edx
c001c1c3:	89 f0                	mov    eax,esi
c001c1c5:	6a 01                	push   0x1
c001c1c7:	0f b6 f0             	movzx  esi,al
c001c1ca:	c1 e6 06             	shl    esi,0x6
c001c1cd:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c1d5:	50                   	push   eax
c001c1d6:	57                   	push   edi
c001c1d7:	e8 30 f6 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001c1dc:	83 c4 10             	add    esp,0x10
c001c1df:	89 c6                	mov    esi,eax
c001c1e1:	a8 01                	test   al,0x1
c001c1e3:	74 12                	je     c001c1f7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c1e5:	83 ec 0c             	sub    esp,0xc
c001c1e8:	b3 07                	mov    bl,0x7
c001c1ea:	68 98 21 02 c0       	push   0xc0022198
c001c1ef:	e8 5b 2b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c1f4:	83 c4 10             	add    esp,0x10
c001c1f7:	f7 c6 02 00 00 00    	test   esi,0x2
c001c1fd:	74 12                	je     c001c211 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c1ff:	83 ec 0c             	sub    esp,0xc
c001c202:	b3 03                	mov    bl,0x3
c001c204:	68 b6 21 02 c0       	push   0xc00221b6
c001c209:	e8 41 2b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c20e:	83 c4 10             	add    esp,0x10
c001c211:	f7 c6 04 00 00 00    	test   esi,0x4
c001c217:	74 12                	je     c001c22b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c219:	83 ec 0c             	sub    esp,0xc
c001c21c:	b3 14                	mov    bl,0x14
c001c21e:	68 d6 21 02 c0       	push   0xc00221d6
c001c223:	e8 27 2b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c228:	83 c4 10             	add    esp,0x10
c001c22b:	f7 c6 08 00 00 00    	test   esi,0x8
c001c231:	74 12                	je     c001c245 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c233:	83 ec 0c             	sub    esp,0xc
c001c236:	b3 03                	mov    bl,0x3
c001c238:	68 b6 21 02 c0       	push   0xc00221b6
c001c23d:	e8 0d 2b ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c242:	83 c4 10             	add    esp,0x10
c001c245:	f7 c6 10 00 00 00    	test   esi,0x10
c001c24b:	74 12                	je     c001c25f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c24d:	83 ec 0c             	sub    esp,0xc
c001c250:	b3 15                	mov    bl,0x15
c001c252:	68 ee 21 02 c0       	push   0xc00221ee
c001c257:	e8 f3 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	f7 c6 20 00 00 00    	test   esi,0x20
c001c265:	74 12                	je     c001c279 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c267:	83 ec 0c             	sub    esp,0xc
c001c26a:	b3 03                	mov    bl,0x3
c001c26c:	68 b6 21 02 c0       	push   0xc00221b6
c001c271:	e8 d9 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c276:	83 c4 10             	add    esp,0x10
c001c279:	f7 c6 40 00 00 00    	test   esi,0x40
c001c27f:	74 12                	je     c001c293 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c281:	83 ec 0c             	sub    esp,0xc
c001c284:	b3 16                	mov    bl,0x16
c001c286:	68 08 22 02 c0       	push   0xc0022208
c001c28b:	e8 bf 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c290:	83 c4 10             	add    esp,0x10
c001c293:	89 f0                	mov    eax,esi
c001c295:	84 c0                	test   al,al
c001c297:	79 42                	jns    c001c2db <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c299:	83 ec 0c             	sub    esp,0xc
c001c29c:	b3 0d                	mov    bl,0xd
c001c29e:	68 29 22 02 c0       	push   0xc0022229
c001c2a3:	e8 a7 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c2a8:	83 c4 10             	add    esp,0x10
c001c2ab:	eb 2e                	jmp    c001c2db <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c2ad:	3c 03                	cmp    al,0x3
c001c2af:	75 14                	jne    c001c2c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c2b1:	83 ec 0c             	sub    esp,0xc
c001c2b4:	b3 17                	mov    bl,0x17
c001c2b6:	68 3d 22 02 c0       	push   0xc002223d
c001c2bb:	e8 8f 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c2c0:	83 c4 10             	add    esp,0x10
c001c2c3:	eb 16                	jmp    c001c2db <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c2c5:	3c 04                	cmp    al,0x4
c001c2c7:	75 12                	jne    c001c2db <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c2c9:	83 ec 0c             	sub    esp,0xc
c001c2cc:	b3 08                	mov    bl,0x8
c001c2ce:	68 53 22 02 c0       	push   0xc0022253
c001c2d3:	e8 77 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c2d8:	83 c4 10             	add    esp,0x10
c001c2db:	50                   	push   eax
c001c2dc:	50                   	push   eax
c001c2dd:	0f b6 c3             	movzx  eax,bl
c001c2e0:	50                   	push   eax
c001c2e1:	68 6b 22 02 c0       	push   0xc002226b
c001c2e6:	e8 64 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c2eb:	83 c4 10             	add    esp,0x10
c001c2ee:	83 c4 1c             	add    esp,0x1c
c001c2f1:	88 d8                	mov    al,bl
c001c2f3:	5b                   	pop    ebx
c001c2f4:	5e                   	pop    esi
c001c2f5:	5f                   	pop    edi
c001c2f6:	5d                   	pop    ebp
c001c2f7:	c3                   	ret    

c001c2f8 <IDE::polling(unsigned char, unsigned int)>:
c001c2f8:	57                   	push   edi
c001c2f9:	56                   	push   esi
c001c2fa:	53                   	push   ebx
c001c2fb:	bb 04 00 00 00       	mov    ebx,0x4
c001c300:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c304:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c309:	52                   	push   edx
c001c30a:	6a 0c                	push   0xc
c001c30c:	56                   	push   esi
c001c30d:	57                   	push   edi
c001c30e:	e8 f9 f4 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001c313:	83 c4 10             	add    esp,0x10
c001c316:	4b                   	dec    ebx
c001c317:	75 f0                	jne    c001c309 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c319:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c31e:	50                   	push   eax
c001c31f:	6a 0c                	push   0xc
c001c321:	56                   	push   esi
c001c322:	57                   	push   edi
c001c323:	e8 e4 f4 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	a8 01                	test   al,0x1
c001c32d:	74 12                	je     c001c341 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c32f:	83 ec 0c             	sub    esp,0xc
c001c332:	68 85 22 02 c0       	push   0xc0022285
c001c337:	e8 13 2a ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001c33c:	83 c4 10             	add    esp,0x10
c001c33f:	eb 17                	jmp    c001c358 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c341:	a8 20                	test   al,0x20
c001c343:	75 0f                	jne    c001c354 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c345:	4b                   	dec    ebx
c001c346:	74 10                	je     c001c358 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c348:	84 c0                	test   al,al
c001c34a:	78 d2                	js     c001c31e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c34c:	a8 08                	test   al,0x8
c001c34e:	74 ce                	je     c001c31e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c350:	31 c0                	xor    eax,eax
c001c352:	eb 06                	jmp    c001c35a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c354:	b0 01                	mov    al,0x1
c001c356:	eb 02                	jmp    c001c35a <IDE::polling(unsigned char, unsigned int)+0x62>
c001c358:	b0 02                	mov    al,0x2
c001c35a:	5b                   	pop    ebx
c001c35b:	5e                   	pop    esi
c001c35c:	5f                   	pop    edi
c001c35d:	c3                   	ret    

c001c35e <ATA::close(int, int, void*)>:
c001c35e:	83 ec 0c             	sub    esp,0xc
c001c361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c365:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c36b:	85 c0                	test   eax,eax
c001c36d:	74 0c                	je     c001c37b <ATA::close(int, int, void*)+0x1d>
c001c36f:	83 ec 0c             	sub    esp,0xc
c001c372:	8b 10                	mov    edx,DWORD PTR [eax]
c001c374:	50                   	push   eax
c001c375:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c378:	83 c4 10             	add    esp,0x10
c001c37b:	31 c0                	xor    eax,eax
c001c37d:	83 c4 0c             	add    esp,0xc
c001c380:	c3                   	ret    
c001c381:	90                   	nop

c001c382 <ATA::powerSaving(PowerSavingLevel)>:
c001c382:	c3                   	ret    
c001c383:	90                   	nop

c001c384 <ATA::ATA()>:
c001c384:	83 ec 0c             	sub    esp,0xc
c001c387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38b:	83 ec 04             	sub    esp,0x4
c001c38e:	68 00 02 00 00       	push   0x200
c001c393:	68 c8 22 02 c0       	push   0xc00222c8
c001c398:	50                   	push   eax
c001c399:	e8 c2 41 ff ff       	call   c0010560 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c39e:	83 c4 10             	add    esp,0x10
c001c3a1:	ba f4 22 02 c0       	mov    edx,0xc00222f4
c001c3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3aa:	89 10                	mov    DWORD PTR [eax],edx
c001c3ac:	90                   	nop
c001c3ad:	83 c4 0c             	add    esp,0xc
c001c3b0:	c3                   	ret    
c001c3b1:	90                   	nop

c001c3b2 <ATA::flush(bool)>:
c001c3b2:	53                   	push   ebx
c001c3b3:	83 ec 08             	sub    esp,0x8
c001c3b6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c3bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3bf:	19 c0                	sbb    eax,eax
c001c3c1:	83 e0 fd             	and    eax,0xfffffffd
c001c3c4:	05 ea 00 00 00       	add    eax,0xea
c001c3c9:	50                   	push   eax
c001c3ca:	6a 07                	push   0x7
c001c3cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3d3:	50                   	push   eax
c001c3d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3da:	e8 6d f3 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3df:	83 c4 0c             	add    esp,0xc
c001c3e2:	6a 00                	push   0x0
c001c3e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3eb:	50                   	push   eax
c001c3ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3f2:	e8 01 ff ff ff       	call   c001c2f8 <IDE::polling(unsigned char, unsigned int)>
c001c3f7:	83 c4 18             	add    esp,0x18
c001c3fa:	5b                   	pop    ebx
c001c3fb:	c3                   	ret    

c001c3fc <ATA::readyForCommand()>:
c001c3fc:	56                   	push   esi
c001c3fd:	53                   	push   ebx
c001c3fe:	31 db                	xor    ebx,ebx
c001c400:	50                   	push   eax
c001c401:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c405:	50                   	push   eax
c001c406:	6a 0c                	push   0xc
c001c408:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c40f:	50                   	push   eax
c001c410:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c416:	e8 f1 f3 ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	a8 88                	test   al,0x88
c001c420:	74 23                	je     c001c445 <ATA::readyForCommand()+0x49>
c001c422:	43                   	inc    ebx
c001c423:	83 fb 63             	cmp    ebx,0x63
c001c426:	7e dd                	jle    c001c405 <ATA::readyForCommand()+0x9>
c001c428:	51                   	push   ecx
c001c429:	51                   	push   ecx
c001c42a:	6a 00                	push   0x0
c001c42c:	68 40 42 0f 00       	push   0xf4240
c001c431:	e8 42 ba ff ff       	call   c0017e78 <nanoSleep(unsigned long long)>
c001c436:	83 c4 10             	add    esp,0x10
c001c439:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c43f:	75 c4                	jne    c001c405 <ATA::readyForCommand()+0x9>
c001c441:	31 c0                	xor    eax,eax
c001c443:	eb 02                	jmp    c001c447 <ATA::readyForCommand()+0x4b>
c001c445:	b0 01                	mov    al,0x1
c001c447:	5a                   	pop    edx
c001c448:	5b                   	pop    ebx
c001c449:	5e                   	pop    esi
c001c44a:	c3                   	ret    
c001c44b:	90                   	nop

c001c44c <ATA::access(unsigned long long, int, void*, bool)>:
c001c44c:	55                   	push   ebp
c001c44d:	57                   	push   edi
c001c44e:	56                   	push   esi
c001c44f:	53                   	push   ebx
c001c450:	83 ec 2c             	sub    esp,0x2c
c001c453:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c457:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c45b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c45f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c463:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c467:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c46b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c46f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c475:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c479:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c47f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c483:	c1 e0 06             	shl    eax,0x6
c001c486:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c48e:	74 5d                	je     c001c4ed <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c490:	89 fa                	mov    edx,edi
c001c492:	89 f0                	mov    eax,esi
c001c494:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c498:	c1 ea 1c             	shr    edx,0x1c
c001c49b:	89 d1                	mov    ecx,edx
c001c49d:	09 c1                	or     ecx,eax
c001c49f:	74 25                	je     c001c4c6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c4a1:	31 ed                	xor    ebp,ebp
c001c4a3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c4aa:	89 fa                	mov    edx,edi
c001c4ac:	89 f0                	mov    eax,esi
c001c4ae:	0f ad d0             	shrd   eax,edx,cl
c001c4b1:	d3 ea                	shr    edx,cl
c001c4b3:	f6 c1 20             	test   cl,0x20
c001c4b6:	74 02                	je     c001c4ba <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c4b8:	89 d0                	mov    eax,edx
c001c4ba:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c4be:	45                   	inc    ebp
c001c4bf:	83 fd 06             	cmp    ebp,0x6
c001c4c2:	75 df                	jne    c001c4a3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c4c4:	eb 76                	jmp    c001c53c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c4c6:	89 f0                	mov    eax,esi
c001c4c8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c4cd:	89 fa                	mov    edx,edi
c001c4cf:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c4d6:	0f ac d0 10          	shrd   eax,edx,0x10
c001c4da:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c4df:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c4e3:	c1 ee 18             	shr    esi,0x18
c001c4e6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c4eb:	eb 56                	jmp    c001c543 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c4ed:	6a 00                	push   0x0
c001c4ef:	6a 3f                	push   0x3f
c001c4f1:	57                   	push   edi
c001c4f2:	56                   	push   esi
c001c4f3:	e8 e4 1e 00 00       	call   c001e3dc <__umoddi3>
c001c4f8:	83 c4 10             	add    esp,0x10
c001c4fb:	40                   	inc    eax
c001c4fc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c500:	6a 00                	push   0x0
c001c502:	68 f0 03 00 00       	push   0x3f0
c001c507:	57                   	push   edi
c001c508:	56                   	push   esi
c001c509:	e8 ce 1d 00 00       	call   c001e2dc <__udivdi3>
c001c50e:	83 c4 10             	add    esp,0x10
c001c511:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c516:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c51d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c522:	6a 00                	push   0x0
c001c524:	6a 3f                	push   0x3f
c001c526:	57                   	push   edi
c001c527:	56                   	push   esi
c001c528:	e8 af 1d 00 00       	call   c001e2dc <__udivdi3>
c001c52d:	83 c4 10             	add    esp,0x10
c001c530:	89 c6                	mov    esi,eax
c001c532:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c537:	83 e6 0f             	and    esi,0xf
c001c53a:	eb 07                	jmp    c001c543 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c53c:	31 f6                	xor    esi,esi
c001c53e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c543:	bf 01 00 00 00       	mov    edi,0x1
c001c548:	50                   	push   eax
c001c549:	6a 00                	push   0x0
c001c54b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c552:	50                   	push   eax
c001c553:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c557:	e8 fc f3 ff ff       	call   c001b958 <IDE::enableIRQs(unsigned char, bool)>
c001c55c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c55f:	e8 98 fe ff ff       	call   c001c3fc <ATA::readyForCommand()>
c001c564:	83 c4 10             	add    esp,0x10
c001c567:	84 c0                	test   al,al
c001c569:	0f 84 50 02 00 00    	je     c001c7bf <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c56f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c575:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c57b:	c1 e0 04             	shl    eax,0x4
c001c57e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c585:	09 c6                	or     esi,eax
c001c587:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c58c:	75 05                	jne    c001c593 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c58e:	83 ce a0             	or     esi,0xffffffa0
c001c591:	eb 03                	jmp    c001c596 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c593:	83 ce e0             	or     esi,0xffffffe0
c001c596:	89 f0                	mov    eax,esi
c001c598:	0f b6 f0             	movzx  esi,al
c001c59b:	56                   	push   esi
c001c59c:	6a 06                	push   0x6
c001c59e:	51                   	push   ecx
c001c59f:	52                   	push   edx
c001c5a0:	e8 a7 f1 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5a5:	83 c4 10             	add    esp,0x10
c001c5a8:	6a 00                	push   0x0
c001c5aa:	6a 01                	push   0x1
c001c5ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5b3:	50                   	push   eax
c001c5b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5ba:	e8 8d f1 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5bf:	83 c4 10             	add    esp,0x10
c001c5c2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c5c7:	75 6e                	jne    c001c637 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c5c9:	6a 00                	push   0x0
c001c5cb:	6a 08                	push   0x8
c001c5cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5d4:	50                   	push   eax
c001c5d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5db:	e8 6c f1 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5e0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c5e5:	50                   	push   eax
c001c5e6:	6a 09                	push   0x9
c001c5e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c5ef:	50                   	push   eax
c001c5f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c5f6:	e8 51 f1 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5fb:	83 c4 20             	add    esp,0x20
c001c5fe:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c603:	50                   	push   eax
c001c604:	6a 0a                	push   0xa
c001c606:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c60d:	50                   	push   eax
c001c60e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c614:	e8 33 f1 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c619:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c61e:	50                   	push   eax
c001c61f:	6a 0b                	push   0xb
c001c621:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c628:	50                   	push   eax
c001c629:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c62f:	e8 18 f1 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c634:	83 c4 20             	add    esp,0x20
c001c637:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c63c:	50                   	push   eax
c001c63d:	6a 02                	push   0x2
c001c63f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c646:	50                   	push   eax
c001c647:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c64d:	e8 fa f0 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c652:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c657:	50                   	push   eax
c001c658:	6a 03                	push   0x3
c001c65a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c661:	50                   	push   eax
c001c662:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c668:	e8 df f0 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c66d:	83 c4 20             	add    esp,0x20
c001c670:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c675:	50                   	push   eax
c001c676:	6a 04                	push   0x4
c001c678:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c67f:	50                   	push   eax
c001c680:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c686:	e8 c1 f0 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c68b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c690:	50                   	push   eax
c001c691:	6a 05                	push   0x5
c001c693:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c69a:	50                   	push   eax
c001c69b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6a1:	e8 a6 f0 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6a6:	83 c4 20             	add    esp,0x20
c001c6a9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c6ae:	0f 94 c0             	sete   al
c001c6b1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c6b6:	74 09                	je     c001c6c1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c6b8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c6bf:	eb 07                	jmp    c001c6c8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c6c1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c6c8:	0f b6 c0             	movzx  eax,al
c001c6cb:	50                   	push   eax
c001c6cc:	6a 07                	push   0x7
c001c6ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6d5:	50                   	push   eax
c001c6d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6dc:	e8 6b f0 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6e1:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c6e5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c6e9:	83 c4 10             	add    esp,0x10
c001c6ec:	85 f6                	test   esi,esi
c001c6ee:	0f 84 ac 00 00 00    	je     c001c7a0 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c6f4:	50                   	push   eax
c001c6f5:	6a 01                	push   0x1
c001c6f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6fe:	50                   	push   eax
c001c6ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c705:	e8 ee fb ff ff       	call   c001c2f8 <IDE::polling(unsigned char, unsigned int)>
c001c70a:	83 c4 10             	add    esp,0x10
c001c70d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c713:	84 c0                	test   al,al
c001c715:	74 20                	je     c001c737 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c717:	0f b6 f8             	movzx  edi,al
c001c71a:	0f b6 d2             	movzx  edx,dl
c001c71d:	57                   	push   edi
c001c71e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c725:	50                   	push   eax
c001c726:	52                   	push   edx
c001c727:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c72d:	e8 30 fa ff ff       	call   c001c162 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c732:	e9 85 00 00 00       	jmp    c001c7bc <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c737:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c73c:	74 41                	je     c001c77f <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c73e:	31 c9                	xor    ecx,ecx
c001c740:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c744:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c748:	50                   	push   eax
c001c749:	50                   	push   eax
c001c74a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c751:	50                   	push   eax
c001c752:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c758:	e8 dd ef ff ff       	call   c001b73a <IDE::getBase(unsigned char)>
c001c75d:	89 c2                	mov    edx,eax
c001c75f:	89 e8                	mov    eax,ebp
c001c761:	66 ef                	out    dx,ax
c001c763:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c767:	83 c4 10             	add    esp,0x10
c001c76a:	41                   	inc    ecx
c001c76b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c771:	75 cd                	jne    c001c740 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c773:	4e                   	dec    esi
c001c774:	81 c7 00 02 00 00    	add    edi,0x200
c001c77a:	e9 6d ff ff ff       	jmp    c001c6ec <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c77f:	0f b6 d2             	movzx  edx,dl
c001c782:	51                   	push   ecx
c001c783:	51                   	push   ecx
c001c784:	52                   	push   edx
c001c785:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c78b:	e8 aa ef ff ff       	call   c001b73a <IDE::getBase(unsigned char)>
c001c790:	b9 00 01 00 00       	mov    ecx,0x100
c001c795:	89 c2                	mov    edx,eax
c001c797:	fc                   	cld    
c001c798:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c79b:	83 c4 10             	add    esp,0x10
c001c79e:	eb d3                	jmp    c001c773 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c7a0:	31 ff                	xor    edi,edi
c001c7a2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c7a7:	74 16                	je     c001c7bf <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c7a9:	50                   	push   eax
c001c7aa:	50                   	push   eax
c001c7ab:	31 c0                	xor    eax,eax
c001c7ad:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c7b2:	0f 94 c0             	sete   al
c001c7b5:	50                   	push   eax
c001c7b6:	53                   	push   ebx
c001c7b7:	e8 f6 fb ff ff       	call   c001c3b2 <ATA::flush(bool)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	83 c4 2c             	add    esp,0x2c
c001c7c2:	89 f8                	mov    eax,edi
c001c7c4:	5b                   	pop    ebx
c001c7c5:	5e                   	pop    esi
c001c7c6:	5f                   	pop    edi
c001c7c7:	5d                   	pop    ebp
c001c7c8:	c3                   	ret    
c001c7c9:	90                   	nop

c001c7ca <ATA::read(unsigned long long, int, void*)>:
c001c7ca:	57                   	push   edi
c001c7cb:	b8 04 00 00 00       	mov    eax,0x4
c001c7d0:	56                   	push   esi
c001c7d1:	53                   	push   ebx
c001c7d2:	83 ec 10             	sub    esp,0x10
c001c7d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c7d9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c7dd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c7e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c7e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c7e8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c7ee:	77 3b                	ja     c001c82b <ATA::read(unsigned long long, int, void*)+0x61>
c001c7f0:	b8 06 00 00 00       	mov    eax,0x6
c001c7f5:	85 d2                	test   edx,edx
c001c7f7:	74 32                	je     c001c82b <ATA::read(unsigned long long, int, void*)+0x61>
c001c7f9:	50                   	push   eax
c001c7fa:	50                   	push   eax
c001c7fb:	6a 00                	push   0x0
c001c7fd:	52                   	push   edx
c001c7fe:	53                   	push   ebx
c001c7ff:	57                   	push   edi
c001c800:	56                   	push   esi
c001c801:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c805:	e8 42 fc ff ff       	call   c001c44c <ATA::access(unsigned long long, int, void*, bool)>
c001c80a:	83 c4 20             	add    esp,0x20
c001c80d:	85 c0                	test   eax,eax
c001c80f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c813:	75 11                	jne    c001c826 <ATA::read(unsigned long long, int, void*)+0x5c>
c001c815:	01 1d 44 50 02 c0    	add    DWORD PTR ds:0xc0025044,ebx
c001c81b:	e8 ce 03 ff ff       	call   c000cbee <VgaText::updateDiskUsage()>
c001c820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c824:	eb 05                	jmp    c001c82b <ATA::read(unsigned long long, int, void*)+0x61>
c001c826:	b8 01 00 00 00       	mov    eax,0x1
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	5b                   	pop    ebx
c001c82f:	5e                   	pop    esi
c001c830:	5f                   	pop    edi
c001c831:	c3                   	ret    

c001c832 <ATA::write(unsigned long long, int, void*)>:
c001c832:	57                   	push   edi
c001c833:	b8 04 00 00 00       	mov    eax,0x4
c001c838:	56                   	push   esi
c001c839:	53                   	push   ebx
c001c83a:	83 ec 10             	sub    esp,0x10
c001c83d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c841:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c845:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c848:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c84c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c850:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c856:	77 3b                	ja     c001c893 <ATA::write(unsigned long long, int, void*)+0x61>
c001c858:	b8 06 00 00 00       	mov    eax,0x6
c001c85d:	85 d2                	test   edx,edx
c001c85f:	74 32                	je     c001c893 <ATA::write(unsigned long long, int, void*)+0x61>
c001c861:	50                   	push   eax
c001c862:	50                   	push   eax
c001c863:	6a 01                	push   0x1
c001c865:	52                   	push   edx
c001c866:	53                   	push   ebx
c001c867:	57                   	push   edi
c001c868:	56                   	push   esi
c001c869:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c86d:	e8 da fb ff ff       	call   c001c44c <ATA::access(unsigned long long, int, void*, bool)>
c001c872:	83 c4 20             	add    esp,0x20
c001c875:	85 c0                	test   eax,eax
c001c877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c87b:	75 11                	jne    c001c88e <ATA::write(unsigned long long, int, void*)+0x5c>
c001c87d:	01 1d 40 50 02 c0    	add    DWORD PTR ds:0xc0025040,ebx
c001c883:	e8 66 03 ff ff       	call   c000cbee <VgaText::updateDiskUsage()>
c001c888:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c88c:	eb 05                	jmp    c001c893 <ATA::write(unsigned long long, int, void*)+0x61>
c001c88e:	b8 01 00 00 00       	mov    eax,0x1
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	5b                   	pop    ebx
c001c897:	5e                   	pop    esi
c001c898:	5f                   	pop    edi
c001c899:	c3                   	ret    

c001c89a <ATA::detectCHS()>:
c001c89a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c89e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c8a4:	c1 e0 06             	shl    eax,0x6
c001c8a7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c8ad:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c8b7:	c7 44 24 04 d7 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc00222d7
c001c8bf:	e9 20 81 ff ff       	jmp    c00149e4 <Krnl::panic(char const*)>

c001c8c4 <ATA::open(int, int, void*)>:
c001c8c4:	53                   	push   ebx
c001c8c5:	83 ec 08             	sub    esp,0x8
c001c8c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8d4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c8da:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c8e0:	c1 e0 06             	shl    eax,0x6
c001c8e3:	01 d0                	add    eax,edx
c001c8e5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c8ec:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c8f2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c8f9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c903:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c909:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c910:	75 0c                	jne    c001c91e <ATA::open(int, int, void*)+0x5a>
c001c912:	83 ec 0c             	sub    esp,0xc
c001c915:	53                   	push   ebx
c001c916:	e8 7f ff ff ff       	call   c001c89a <ATA::detectCHS()>
c001c91b:	83 c4 10             	add    esp,0x10
c001c91e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c924:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c92a:	c1 e0 06             	shl    eax,0x6
c001c92d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c934:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c93e:	d1 e8                	shr    eax,1
c001c940:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c946:	6a 04                	push   0x4
c001c948:	6a 0c                	push   0xc
c001c94a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c951:	50                   	push   eax
c001c952:	52                   	push   edx
c001c953:	e8 f4 ed ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c958:	90                   	nop
c001c959:	90                   	nop
c001c95a:	6a 00                	push   0x0
c001c95c:	6a 0c                	push   0xc
c001c95e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c965:	50                   	push   eax
c001c966:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c96c:	e8 db ed ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c971:	83 c4 14             	add    esp,0x14
c001c974:	53                   	push   ebx
c001c975:	e8 4e 3c ff ff       	call   c00105c8 <PhysicalDisk::startCache()>
c001c97a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c97d:	e8 54 55 ff ff       	call   c0011ed6 <createPartitionsForDisk(PhysicalDisk*)>
c001c982:	31 c0                	xor    eax,eax
c001c984:	83 c4 18             	add    esp,0x18
c001c987:	5b                   	pop    ebx
c001c988:	c3                   	ret    
c001c989:	90                   	nop

c001c98a <ATAPI::write(unsigned long long, int, void*)>:
c001c98a:	b8 03 00 00 00       	mov    eax,0x3
c001c98f:	c3                   	ret    

c001c990 <ATAPI::close(int, int, void*)>:
c001c990:	83 ec 0c             	sub    esp,0xc
c001c993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c997:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c99d:	85 c0                	test   eax,eax
c001c99f:	74 0c                	je     c001c9ad <ATAPI::close(int, int, void*)+0x1d>
c001c9a1:	83 ec 0c             	sub    esp,0xc
c001c9a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9a6:	50                   	push   eax
c001c9a7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9aa:	83 c4 10             	add    esp,0x10
c001c9ad:	31 c0                	xor    eax,eax
c001c9af:	83 c4 0c             	add    esp,0xc
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <ATAPI::ATAPI()>:
c001c9b4:	83 ec 0c             	sub    esp,0xc
c001c9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bb:	83 ec 04             	sub    esp,0x4
c001c9be:	68 00 08 00 00       	push   0x800
c001c9c3:	68 20 23 02 c0       	push   0xc0022320
c001c9c8:	50                   	push   eax
c001c9c9:	e8 92 3b ff ff       	call   c0010560 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c9ce:	83 c4 10             	add    esp,0x10
c001c9d1:	ba 60 23 02 c0       	mov    edx,0xc0022360
c001c9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9da:	89 10                	mov    DWORD PTR [eax],edx
c001c9dc:	90                   	nop
c001c9dd:	83 c4 0c             	add    esp,0xc
c001c9e0:	c3                   	ret    
c001c9e1:	90                   	nop

c001c9e2 <ATAPI::readyForCommand()>:
c001c9e2:	56                   	push   esi
c001c9e3:	53                   	push   ebx
c001c9e4:	31 db                	xor    ebx,ebx
c001c9e6:	50                   	push   eax
c001c9e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9eb:	50                   	push   eax
c001c9ec:	6a 0c                	push   0xc
c001c9ee:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c9f5:	50                   	push   eax
c001c9f6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c9fc:	e8 0b ee ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001ca01:	83 c4 10             	add    esp,0x10
c001ca04:	a8 88                	test   al,0x88
c001ca06:	74 23                	je     c001ca2b <ATAPI::readyForCommand()+0x49>
c001ca08:	43                   	inc    ebx
c001ca09:	83 fb 63             	cmp    ebx,0x63
c001ca0c:	7e dd                	jle    c001c9eb <ATAPI::readyForCommand()+0x9>
c001ca0e:	51                   	push   ecx
c001ca0f:	51                   	push   ecx
c001ca10:	6a 00                	push   0x0
c001ca12:	68 40 42 0f 00       	push   0xf4240
c001ca17:	e8 5c b4 ff ff       	call   c0017e78 <nanoSleep(unsigned long long)>
c001ca1c:	83 c4 10             	add    esp,0x10
c001ca1f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ca25:	75 c4                	jne    c001c9eb <ATAPI::readyForCommand()+0x9>
c001ca27:	31 c0                	xor    eax,eax
c001ca29:	eb 02                	jmp    c001ca2d <ATAPI::readyForCommand()+0x4b>
c001ca2b:	b0 01                	mov    al,0x1
c001ca2d:	5a                   	pop    edx
c001ca2e:	5b                   	pop    ebx
c001ca2f:	5e                   	pop    esi
c001ca30:	c3                   	ret    
c001ca31:	90                   	nop

c001ca32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ca32:	55                   	push   ebp
c001ca33:	57                   	push   edi
c001ca34:	56                   	push   esi
c001ca35:	53                   	push   ebx
c001ca36:	83 ec 20             	sub    esp,0x20
c001ca39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ca3d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ca41:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ca45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca49:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ca4d:	6a 01                	push   0x1
c001ca4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca56:	50                   	push   eax
c001ca57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca5d:	e8 f6 ee ff ff       	call   c001b958 <IDE::enableIRQs(unsigned char, bool)>
c001ca62:	5e                   	pop    esi
c001ca63:	58                   	pop    eax
c001ca64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca6b:	50                   	push   eax
c001ca6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca72:	e8 af ec ff ff       	call   c001b726 <IDE::prepareInterrupt(unsigned char)>
c001ca77:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca7a:	e8 63 ff ff ff       	call   c001c9e2 <ATAPI::readyForCommand()>
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	84 c0                	test   al,al
c001ca84:	75 0a                	jne    c001ca90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ca86:	bb 01 00 00 00       	mov    ebx,0x1
c001ca8b:	e9 57 02 00 00       	jmp    c001cce7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ca90:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ca96:	c1 e0 04             	shl    eax,0x4
c001ca99:	0f b6 c0             	movzx  eax,al
c001ca9c:	50                   	push   eax
c001ca9d:	6a 06                	push   0x6
c001ca9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caa6:	50                   	push   eax
c001caa7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caad:	e8 9a ec ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab2:	6a 00                	push   0x0
c001cab4:	6a 01                	push   0x1
c001cab6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cabd:	50                   	push   eax
c001cabe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cac4:	e8 83 ec ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cac9:	83 c4 20             	add    esp,0x20
c001cacc:	0f b6 c3             	movzx  eax,bl
c001cacf:	0f b6 df             	movzx  ebx,bh
c001cad2:	50                   	push   eax
c001cad3:	6a 04                	push   0x4
c001cad5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cadc:	50                   	push   eax
c001cadd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cae3:	e8 64 ec ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cae8:	53                   	push   ebx
c001cae9:	6a 05                	push   0x5
c001caeb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caf2:	50                   	push   eax
c001caf3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caf9:	e8 4e ec ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cafe:	83 c4 20             	add    esp,0x20
c001cb01:	68 a0 00 00 00       	push   0xa0
c001cb06:	6a 07                	push   0x7
c001cb08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb0f:	50                   	push   eax
c001cb10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb16:	e8 31 ec ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb1b:	83 c4 0c             	add    esp,0xc
c001cb1e:	6a 01                	push   0x1
c001cb20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb27:	50                   	push   eax
c001cb28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb2e:	e8 c5 f7 ff ff       	call   c001c2f8 <IDE::polling(unsigned char, unsigned int)>
c001cb33:	83 c4 10             	add    esp,0x10
c001cb36:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cb3c:	84 c0                	test   al,al
c001cb3e:	74 23                	je     c001cb63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cb40:	0f b6 d8             	movzx  ebx,al
c001cb43:	0f b6 d2             	movzx  edx,dl
c001cb46:	53                   	push   ebx
c001cb47:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cb4e:	50                   	push   eax
c001cb4f:	52                   	push   edx
c001cb50:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb56:	e8 07 f6 ff ff       	call   c001c162 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	e9 84 01 00 00       	jmp    c001cce7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cb63:	0f b6 d2             	movzx  edx,dl
c001cb66:	53                   	push   ebx
c001cb67:	53                   	push   ebx
c001cb68:	52                   	push   edx
c001cb69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb6f:	e8 c6 eb ff ff       	call   c001b73a <IDE::getBase(unsigned char)>
c001cb74:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cb78:	b9 06 00 00 00       	mov    ecx,0x6
c001cb7d:	89 c2                	mov    edx,eax
c001cb7f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cb82:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cb86:	83 c4 10             	add    esp,0x10
c001cb89:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cb8f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cb96:	85 db                	test   ebx,ebx
c001cb98:	0f 84 ec 00 00 00    	je     c001cc8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cb9e:	51                   	push   ecx
c001cb9f:	51                   	push   ecx
c001cba0:	52                   	push   edx
c001cba1:	50                   	push   eax
c001cba2:	e8 13 ed ff ff       	call   c001b8ba <IDE::waitInterrupt(unsigned char)>
c001cba7:	83 c4 10             	add    esp,0x10
c001cbaa:	84 c0                	test   al,al
c001cbac:	0f 84 d4 fe ff ff    	je     c001ca86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cbb2:	56                   	push   esi
c001cbb3:	56                   	push   esi
c001cbb4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbbb:	50                   	push   eax
c001cbbc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbc2:	e8 5f eb ff ff       	call   c001b726 <IDE::prepareInterrupt(unsigned char)>
c001cbc7:	83 c4 0c             	add    esp,0xc
c001cbca:	6a 04                	push   0x4
c001cbcc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbd3:	50                   	push   eax
c001cbd4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbda:	e8 2d ec ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001cbdf:	83 c4 0c             	add    esp,0xc
c001cbe2:	89 c6                	mov    esi,eax
c001cbe4:	6a 05                	push   0x5
c001cbe6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cbed:	50                   	push   eax
c001cbee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cbf4:	e8 13 ec ff ff       	call   c001b80c <IDE::read(unsigned char, unsigned char)>
c001cbf9:	89 f1                	mov    ecx,esi
c001cbfb:	0f b6 c0             	movzx  eax,al
c001cbfe:	0f b6 f1             	movzx  esi,cl
c001cc01:	c1 e0 08             	shl    eax,0x8
c001cc04:	09 c6                	or     esi,eax
c001cc06:	d1 fe                	sar    esi,1
c001cc08:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cc0c:	83 c4 10             	add    esp,0x10
c001cc0f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cc14:	74 41                	je     c001cc57 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cc16:	31 c9                	xor    ecx,ecx
c001cc18:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cc1e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cc25:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cc29:	75 0a                	jne    c001cc35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cc2b:	01 c9                	add    ecx,ecx
c001cc2d:	01 cd                	add    ebp,ecx
c001cc2f:	4b                   	dec    ebx
c001cc30:	e9 54 ff ff ff       	jmp    c001cb89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cc35:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cc3a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cc3e:	51                   	push   ecx
c001cc3f:	51                   	push   ecx
c001cc40:	52                   	push   edx
c001cc41:	50                   	push   eax
c001cc42:	e8 f3 ea ff ff       	call   c001b73a <IDE::getBase(unsigned char)>
c001cc47:	89 c2                	mov    edx,eax
c001cc49:	89 f0                	mov    eax,esi
c001cc4b:	66 ef                	out    dx,ax
c001cc4d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc51:	83 c4 10             	add    esp,0x10
c001cc54:	41                   	inc    ecx
c001cc55:	eb c1                	jmp    c001cc18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001cc57:	31 f6                	xor    esi,esi
c001cc59:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cc5f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cc66:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cc6a:	75 06                	jne    c001cc72 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001cc6c:	01 f6                	add    esi,esi
c001cc6e:	01 f5                	add    ebp,esi
c001cc70:	eb bd                	jmp    c001cc2f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001cc72:	51                   	push   ecx
c001cc73:	51                   	push   ecx
c001cc74:	52                   	push   edx
c001cc75:	50                   	push   eax
c001cc76:	e8 bf ea ff ff       	call   c001b73a <IDE::getBase(unsigned char)>
c001cc7b:	89 c2                	mov    edx,eax
c001cc7d:	66 ed                	in     ax,dx
c001cc7f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cc84:	83 c4 10             	add    esp,0x10
c001cc87:	46                   	inc    esi
c001cc88:	eb cf                	jmp    c001cc59 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001cc8a:	51                   	push   ecx
c001cc8b:	51                   	push   ecx
c001cc8c:	52                   	push   edx
c001cc8d:	50                   	push   eax
c001cc8e:	e8 27 ec ff ff       	call   c001b8ba <IDE::waitInterrupt(unsigned char)>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	84 c0                	test   al,al
c001cc98:	0f 84 e8 fd ff ff    	je     c001ca86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cc9e:	bb a0 86 01 00       	mov    ebx,0x186a0
c001cca3:	52                   	push   edx
c001cca4:	52                   	push   edx
c001cca5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ccac:	50                   	push   eax
c001ccad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ccb3:	e8 6e ea ff ff       	call   c001b726 <IDE::prepareInterrupt(unsigned char)>
c001ccb8:	83 c4 10             	add    esp,0x10
c001ccbb:	50                   	push   eax
c001ccbc:	50                   	push   eax
c001ccbd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ccc4:	50                   	push   eax
c001ccc5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cccb:	e8 6a ea ff ff       	call   c001b73a <IDE::getBase(unsigned char)>
c001ccd0:	8d 50 07             	lea    edx,[eax+0x7]
c001ccd3:	ec                   	in     al,dx
c001ccd4:	83 c4 10             	add    esp,0x10
c001ccd7:	a8 88                	test   al,0x88
c001ccd9:	74 0a                	je     c001cce5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ccdb:	4b                   	dec    ebx
c001ccdc:	75 dd                	jne    c001ccbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ccde:	bb 02 00 00 00       	mov    ebx,0x2
c001cce3:	eb 02                	jmp    c001cce7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cce5:	31 db                	xor    ebx,ebx
c001cce7:	83 c4 1c             	add    esp,0x1c
c001ccea:	89 d8                	mov    eax,ebx
c001ccec:	5b                   	pop    ebx
c001cced:	5e                   	pop    esi
c001ccee:	5f                   	pop    edi
c001ccef:	5d                   	pop    ebp
c001ccf0:	c3                   	ret    
c001ccf1:	90                   	nop

c001ccf2 <ATAPI::diskRemoved()>:
c001ccf2:	83 ec 18             	sub    esp,0x18
c001ccf5:	68 2b 23 02 c0       	push   0xc002232b
c001ccfa:	e8 50 20 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001ccff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd03:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cd0a:	83 c4 1c             	add    esp,0x1c
c001cd0d:	c3                   	ret    

c001cd0e <ATAPI::eject()>:
c001cd0e:	57                   	push   edi
c001cd0f:	b9 03 00 00 00       	mov    ecx,0x3
c001cd14:	53                   	push   ebx
c001cd15:	83 ec 14             	sub    esp,0x14
c001cd18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd1c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd20:	fc                   	cld    
c001cd21:	31 c0                	xor    eax,eax
c001cd23:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd25:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cd2a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cd2f:	50                   	push   eax
c001cd30:	50                   	push   eax
c001cd31:	6a 00                	push   0x0
c001cd33:	6a 00                	push   0x0
c001cd35:	6a 00                	push   0x0
c001cd37:	6a 02                	push   0x2
c001cd39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd3d:	50                   	push   eax
c001cd3e:	53                   	push   ebx
c001cd3f:	e8 ee fc ff ff       	call   c001ca32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd44:	83 c4 14             	add    esp,0x14
c001cd47:	53                   	push   ebx
c001cd48:	e8 a5 ff ff ff       	call   c001ccf2 <ATAPI::diskRemoved()>
c001cd4d:	83 c4 24             	add    esp,0x24
c001cd50:	5b                   	pop    ebx
c001cd51:	5f                   	pop    edi
c001cd52:	c3                   	ret    
c001cd53:	90                   	nop

c001cd54 <ATAPI::diskInserted()>:
c001cd54:	53                   	push   ebx
c001cd55:	83 ec 14             	sub    esp,0x14
c001cd58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cd5c:	68 41 23 02 c0       	push   0xc0022341
c001cd61:	e8 e9 1f ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001cd66:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001cd6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd70:	e8 53 38 ff ff       	call   c00105c8 <PhysicalDisk::startCache()>
c001cd75:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001cd79:	83 c4 18             	add    esp,0x18
c001cd7c:	5b                   	pop    ebx
c001cd7d:	e9 54 51 ff ff       	jmp    c0011ed6 <createPartitionsForDisk(PhysicalDisk*)>

c001cd82 <ATAPI::detectMedia()>:
c001cd82:	56                   	push   esi
c001cd83:	53                   	push   ebx
c001cd84:	83 ec 28             	sub    esp,0x28
c001cd87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd8b:	6a 0c                	push   0xc
c001cd8d:	6a 00                	push   0x0
c001cd8f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cd93:	56                   	push   esi
c001cd94:	e8 6f 38 fe ff       	call   c0000608 <memset>
c001cd99:	58                   	pop    eax
c001cd9a:	5a                   	pop    edx
c001cd9b:	6a 00                	push   0x0
c001cd9d:	6a 00                	push   0x0
c001cd9f:	6a 00                	push   0x0
c001cda1:	6a 00                	push   0x0
c001cda3:	56                   	push   esi
c001cda4:	53                   	push   ebx
c001cda5:	e8 88 fc ff ff       	call   c001ca32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cdaa:	83 c4 1c             	add    esp,0x1c
c001cdad:	6a 0c                	push   0xc
c001cdaf:	6a 00                	push   0x0
c001cdb1:	56                   	push   esi
c001cdb2:	e8 51 38 fe ff       	call   c0000608 <memset>
c001cdb7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cdbc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cdc1:	59                   	pop    ecx
c001cdc2:	58                   	pop    eax
c001cdc3:	6a 01                	push   0x1
c001cdc5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cdc9:	50                   	push   eax
c001cdca:	6a 00                	push   0x0
c001cdcc:	6a 12                	push   0x12
c001cdce:	56                   	push   esi
c001cdcf:	53                   	push   ebx
c001cdd0:	e8 5d fc ff ff       	call   c001ca32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cdd5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cdd9:	83 c4 20             	add    esp,0x20
c001cddc:	83 e0 7f             	and    eax,0x7f
c001cddf:	3c 70                	cmp    al,0x70
c001cde1:	74 15                	je     c001cdf8 <ATAPI::detectMedia()+0x76>
c001cde3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdea:	75 0c                	jne    c001cdf8 <ATAPI::detectMedia()+0x76>
c001cdec:	83 ec 0c             	sub    esp,0xc
c001cdef:	53                   	push   ebx
c001cdf0:	e8 5f ff ff ff       	call   c001cd54 <ATAPI::diskInserted()>
c001cdf5:	83 c4 10             	add    esp,0x10
c001cdf8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cdfc:	83 e0 0f             	and    eax,0xf
c001cdff:	3c 02                	cmp    al,0x2
c001ce01:	75 1b                	jne    c001ce1e <ATAPI::detectMedia()+0x9c>
c001ce03:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ce08:	75 2d                	jne    c001ce37 <ATAPI::detectMedia()+0xb5>
c001ce0a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ce11:	74 24                	je     c001ce37 <ATAPI::detectMedia()+0xb5>
c001ce13:	83 ec 0c             	sub    esp,0xc
c001ce16:	53                   	push   ebx
c001ce17:	e8 d6 fe ff ff       	call   c001ccf2 <ATAPI::diskRemoved()>
c001ce1c:	eb 16                	jmp    c001ce34 <ATAPI::detectMedia()+0xb2>
c001ce1e:	84 c0                	test   al,al
c001ce20:	75 15                	jne    c001ce37 <ATAPI::detectMedia()+0xb5>
c001ce22:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ce29:	75 0c                	jne    c001ce37 <ATAPI::detectMedia()+0xb5>
c001ce2b:	83 ec 0c             	sub    esp,0xc
c001ce2e:	53                   	push   ebx
c001ce2f:	e8 20 ff ff ff       	call   c001cd54 <ATAPI::diskInserted()>
c001ce34:	83 c4 10             	add    esp,0x10
c001ce37:	83 c4 24             	add    esp,0x24
c001ce3a:	5b                   	pop    ebx
c001ce3b:	5e                   	pop    esi
c001ce3c:	c3                   	ret    
c001ce3d:	90                   	nop

c001ce3e <ATAPI::open(int, int, void*)>:
c001ce3e:	53                   	push   ebx
c001ce3f:	83 ec 08             	sub    esp,0x8
c001ce42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce4e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce54:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ce5a:	c1 e0 06             	shl    eax,0x6
c001ce5d:	01 d0                	add    eax,edx
c001ce5f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ce66:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ce6c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ce73:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ce7d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ce83:	6a 04                	push   0x4
c001ce85:	6a 0c                	push   0xc
c001ce87:	51                   	push   ecx
c001ce88:	52                   	push   edx
c001ce89:	e8 be e8 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce8e:	90                   	nop
c001ce8f:	90                   	nop
c001ce90:	6a 00                	push   0x0
c001ce92:	6a 0c                	push   0xc
c001ce94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce9b:	50                   	push   eax
c001ce9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cea2:	e8 a5 e8 ff ff       	call   c001b74c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cea7:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ceae:	83 c4 14             	add    esp,0x14
c001ceb1:	53                   	push   ebx
c001ceb2:	e8 cb fe ff ff       	call   c001cd82 <ATAPI::detectMedia()>
c001ceb7:	31 c0                	xor    eax,eax
c001ceb9:	83 c4 18             	add    esp,0x18
c001cebc:	5b                   	pop    ebx
c001cebd:	c3                   	ret    

c001cebe <ATAPI::read(unsigned long long, int, void*)>:
c001cebe:	55                   	push   ebp
c001cebf:	57                   	push   edi
c001cec0:	56                   	push   esi
c001cec1:	53                   	push   ebx
c001cec2:	83 ec 1c             	sub    esp,0x1c
c001cec5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cec9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cecd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ced1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ced8:	74 41                	je     c001cf1b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ceda:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cede:	b9 03 00 00 00       	mov    ecx,0x3
c001cee3:	fc                   	cld    
c001cee4:	31 c0                	xor    eax,eax
c001cee6:	86 fb                	xchg   bl,bh
c001cee8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ceea:	c1 c3 10             	rol    ebx,0x10
c001ceed:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cef2:	89 e8                	mov    eax,ebp
c001cef4:	86 fb                	xchg   bl,bh
c001cef6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cefa:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001cefe:	50                   	push   eax
c001ceff:	50                   	push   eax
c001cf00:	55                   	push   ebp
c001cf01:	c1 e5 0b             	shl    ebp,0xb
c001cf04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf08:	6a 00                	push   0x0
c001cf0a:	55                   	push   ebp
c001cf0b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cf0f:	50                   	push   eax
c001cf10:	56                   	push   esi
c001cf11:	e8 1c fb ff ff       	call   c001ca32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cf16:	83 c4 20             	add    esp,0x20
c001cf19:	eb 1a                	jmp    c001cf35 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001cf1b:	83 ec 0c             	sub    esp,0xc
c001cf1e:	56                   	push   esi
c001cf1f:	e8 5e fe ff ff       	call   c001cd82 <ATAPI::detectMedia()>
c001cf24:	83 c4 10             	add    esp,0x10
c001cf27:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cf2e:	75 aa                	jne    c001ceda <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cf30:	b8 02 00 00 00       	mov    eax,0x2
c001cf35:	83 c4 1c             	add    esp,0x1c
c001cf38:	5b                   	pop    ebx
c001cf39:	5e                   	pop    esi
c001cf3a:	5f                   	pop    edi
c001cf3b:	5d                   	pop    ebp
c001cf3c:	c3                   	ret    
c001cf3d:	90                   	nop

c001cf3e <AVX::open(int, int, void*)>:
c001cf3e:	83 ec 0c             	sub    esp,0xc
c001cf41:	e8 12 10 00 00       	call   c001df58 <avxInit>
c001cf46:	b8 00 00 00 00       	mov    eax,0x0
c001cf4b:	83 c4 0c             	add    esp,0xc
c001cf4e:	c3                   	ret    
c001cf4f:	90                   	nop

c001cf50 <AVX::close(int, int, void*)>:
c001cf50:	83 ec 0c             	sub    esp,0xc
c001cf53:	e8 01 10 00 00       	call   c001df59 <avxClose>
c001cf58:	b8 00 00 00 00       	mov    eax,0x0
c001cf5d:	83 c4 0c             	add    esp,0xc
c001cf60:	c3                   	ret    
c001cf61:	90                   	nop

c001cf62 <AVX::available()>:
c001cf62:	83 ec 0c             	sub    esp,0xc
c001cf65:	e8 e6 0f 00 00       	call   c001df50 <avxDetect>
c001cf6a:	85 c0                	test   eax,eax
c001cf6c:	0f 95 c0             	setne  al
c001cf6f:	83 c4 0c             	add    esp,0xc
c001cf72:	c3                   	ret    
c001cf73:	90                   	nop

c001cf74 <AVX::save(void*)>:
c001cf74:	83 ec 0c             	sub    esp,0xc
c001cf77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf7b:	83 ec 0c             	sub    esp,0xc
c001cf7e:	50                   	push   eax
c001cf7f:	e8 d2 0f 00 00       	call   c001df56 <avxSave>
c001cf84:	83 c4 10             	add    esp,0x10
c001cf87:	90                   	nop
c001cf88:	83 c4 0c             	add    esp,0xc
c001cf8b:	c3                   	ret    

c001cf8c <AVX::load(void*)>:
c001cf8c:	83 ec 0c             	sub    esp,0xc
c001cf8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf93:	83 ec 0c             	sub    esp,0xc
c001cf96:	50                   	push   eax
c001cf97:	e8 bb 0f 00 00       	call   c001df57 <avxLoad>
c001cf9c:	83 c4 10             	add    esp,0x10
c001cf9f:	90                   	nop
c001cfa0:	83 c4 0c             	add    esp,0xc
c001cfa3:	c3                   	ret    

c001cfa4 <AVX::AVX()>:
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfab:	83 ec 08             	sub    esp,0x8
c001cfae:	68 8c 23 02 c0       	push   0xc002238c
c001cfb3:	50                   	push   eax
c001cfb4:	e8 85 36 ff ff       	call   c001063e <FPU::FPU(char const*)>
c001cfb9:	83 c4 10             	add    esp,0x10
c001cfbc:	ba 9c 23 02 c0       	mov    edx,0xc002239c
c001cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc5:	89 10                	mov    DWORD PTR [eax],edx
c001cfc7:	90                   	nop
c001cfc8:	83 c4 0c             	add    esp,0xc
c001cfcb:	c3                   	ret    

c001cfcc <MMX::available()>:
c001cfcc:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c001cfd1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cfd7:	83 e0 20             	and    eax,0x20
c001cfda:	84 c0                	test   al,al
c001cfdc:	0f 95 c0             	setne  al
c001cfdf:	c3                   	ret    

c001cfe0 <MMX::open(int, int, void*)>:
c001cfe0:	83 ec 0c             	sub    esp,0xc
c001cfe3:	e8 e4 0f 00 00       	call   c001dfcc <x87Init>
c001cfe8:	b8 00 00 00 00       	mov    eax,0x0
c001cfed:	83 c4 0c             	add    esp,0xc
c001cff0:	c3                   	ret    
c001cff1:	90                   	nop

c001cff2 <MMX::close(int, int, void*)>:
c001cff2:	83 ec 0c             	sub    esp,0xc
c001cff5:	e8 ec 0f 00 00       	call   c001dfe6 <x87Close>
c001cffa:	b8 00 00 00 00       	mov    eax,0x0
c001cfff:	83 c4 0c             	add    esp,0xc
c001d002:	c3                   	ret    
c001d003:	90                   	nop

c001d004 <MMX::save(void*)>:
c001d004:	83 ec 0c             	sub    esp,0xc
c001d007:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d00b:	83 ec 0c             	sub    esp,0xc
c001d00e:	50                   	push   eax
c001d00f:	e8 ad 0f 00 00       	call   c001dfc1 <x87Save>
c001d014:	83 c4 10             	add    esp,0x10
c001d017:	90                   	nop
c001d018:	83 c4 0c             	add    esp,0xc
c001d01b:	c3                   	ret    

c001d01c <MMX::load(void*)>:
c001d01c:	83 ec 0c             	sub    esp,0xc
c001d01f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d023:	83 ec 0c             	sub    esp,0xc
c001d026:	50                   	push   eax
c001d027:	e8 9b 0f 00 00       	call   c001dfc7 <x87Load>
c001d02c:	83 c4 10             	add    esp,0x10
c001d02f:	90                   	nop
c001d030:	83 c4 0c             	add    esp,0xc
c001d033:	c3                   	ret    

c001d034 <MMX::MMX()>:
c001d034:	83 ec 0c             	sub    esp,0xc
c001d037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d03b:	83 ec 08             	sub    esp,0x8
c001d03e:	68 cc 23 02 c0       	push   0xc00223cc
c001d043:	50                   	push   eax
c001d044:	e8 f5 35 ff ff       	call   c001063e <FPU::FPU(char const*)>
c001d049:	83 c4 10             	add    esp,0x10
c001d04c:	ba dc 23 02 c0       	mov    edx,0xc00223dc
c001d051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d055:	89 10                	mov    DWORD PTR [eax],edx
c001d057:	90                   	nop
c001d058:	83 c4 0c             	add    esp,0xc
c001d05b:	c3                   	ret    

c001d05c <SSE::open(int, int, void*)>:
c001d05c:	83 ec 0c             	sub    esp,0xc
c001d05f:	e8 23 0f 00 00       	call   c001df87 <sseInit>
c001d064:	b8 00 00 00 00       	mov    eax,0x0
c001d069:	83 c4 0c             	add    esp,0xc
c001d06c:	c3                   	ret    
c001d06d:	90                   	nop

c001d06e <SSE::close(int, int, void*)>:
c001d06e:	83 ec 0c             	sub    esp,0xc
c001d071:	e8 21 0f 00 00       	call   c001df97 <sseClose>
c001d076:	b8 00 00 00 00       	mov    eax,0x0
c001d07b:	83 c4 0c             	add    esp,0xc
c001d07e:	c3                   	ret    
c001d07f:	90                   	nop

c001d080 <SSE::available()>:
c001d080:	83 ec 1c             	sub    esp,0x1c
c001d083:	e8 d8 0e 00 00       	call   c001df60 <sseDetect>
c001d088:	85 c0                	test   eax,eax
c001d08a:	0f 95 c0             	setne  al
c001d08d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d091:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d095:	83 c4 1c             	add    esp,0x1c
c001d098:	c3                   	ret    
c001d099:	90                   	nop

c001d09a <SSE::save(void*)>:
c001d09a:	83 ec 0c             	sub    esp,0xc
c001d09d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0a1:	83 ec 0c             	sub    esp,0xc
c001d0a4:	50                   	push   eax
c001d0a5:	e8 d1 0e 00 00       	call   c001df7b <sseSave>
c001d0aa:	83 c4 10             	add    esp,0x10
c001d0ad:	90                   	nop
c001d0ae:	83 c4 0c             	add    esp,0xc
c001d0b1:	c3                   	ret    

c001d0b2 <SSE::load(void*)>:
c001d0b2:	83 ec 0c             	sub    esp,0xc
c001d0b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d0b9:	83 ec 0c             	sub    esp,0xc
c001d0bc:	50                   	push   eax
c001d0bd:	e8 bf 0e 00 00       	call   c001df81 <sseLoad>
c001d0c2:	83 c4 10             	add    esp,0x10
c001d0c5:	90                   	nop
c001d0c6:	83 c4 0c             	add    esp,0xc
c001d0c9:	c3                   	ret    

c001d0ca <SSE::SSE()>:
c001d0ca:	83 ec 0c             	sub    esp,0xc
c001d0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d1:	83 ec 08             	sub    esp,0x8
c001d0d4:	68 0c 24 02 c0       	push   0xc002240c
c001d0d9:	50                   	push   eax
c001d0da:	e8 5f 35 ff ff       	call   c001063e <FPU::FPU(char const*)>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	ba 1c 24 02 c0       	mov    edx,0xc002241c
c001d0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0eb:	89 10                	mov    DWORD PTR [eax],edx
c001d0ed:	90                   	nop
c001d0ee:	83 c4 0c             	add    esp,0xc
c001d0f1:	c3                   	ret    

c001d0f2 <x87::open(int, int, void*)>:
c001d0f2:	83 ec 0c             	sub    esp,0xc
c001d0f5:	e8 d2 0e 00 00       	call   c001dfcc <x87Init>
c001d0fa:	b8 00 00 00 00       	mov    eax,0x0
c001d0ff:	83 c4 0c             	add    esp,0xc
c001d102:	c3                   	ret    
c001d103:	90                   	nop

c001d104 <x87::close(int, int, void*)>:
c001d104:	83 ec 0c             	sub    esp,0xc
c001d107:	e8 da 0e 00 00       	call   c001dfe6 <x87Close>
c001d10c:	b8 00 00 00 00       	mov    eax,0x0
c001d111:	83 c4 0c             	add    esp,0xc
c001d114:	c3                   	ret    
c001d115:	90                   	nop

c001d116 <x87::available()>:
c001d116:	83 ec 0c             	sub    esp,0xc
c001d119:	e8 88 0e 00 00       	call   c001dfa6 <x87Detect>
c001d11e:	85 c0                	test   eax,eax
c001d120:	0f 95 c0             	setne  al
c001d123:	83 c4 0c             	add    esp,0xc
c001d126:	c3                   	ret    
c001d127:	90                   	nop

c001d128 <x87::save(void*)>:
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d12f:	83 ec 0c             	sub    esp,0xc
c001d132:	50                   	push   eax
c001d133:	e8 89 0e 00 00       	call   c001dfc1 <x87Save>
c001d138:	83 c4 10             	add    esp,0x10
c001d13b:	90                   	nop
c001d13c:	83 c4 0c             	add    esp,0xc
c001d13f:	c3                   	ret    

c001d140 <x87::load(void*)>:
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d147:	83 ec 0c             	sub    esp,0xc
c001d14a:	50                   	push   eax
c001d14b:	e8 77 0e 00 00       	call   c001dfc7 <x87Load>
c001d150:	83 c4 10             	add    esp,0x10
c001d153:	90                   	nop
c001d154:	83 c4 0c             	add    esp,0xc
c001d157:	c3                   	ret    

c001d158 <x87::x87()>:
c001d158:	83 ec 0c             	sub    esp,0xc
c001d15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d15f:	83 ec 08             	sub    esp,0x8
c001d162:	68 4c 24 02 c0       	push   0xc002244c
c001d167:	50                   	push   eax
c001d168:	e8 d1 34 ff ff       	call   c001063e <FPU::FPU(char const*)>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001d175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d179:	89 10                	mov    DWORD PTR [eax],edx
c001d17b:	90                   	nop
c001d17c:	83 c4 0c             	add    esp,0xc
c001d17f:	c3                   	ret    

c001d180 <APIC::disable()>:
c001d180:	90                   	nop
c001d181:	c3                   	ret    

c001d182 <APIC::close(int, int, void*)>:
c001d182:	55                   	push   ebp
c001d183:	89 e5                	mov    ebp,esp
c001d185:	83 ec 08             	sub    esp,0x8
c001d188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d18b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d18d:	83 c0 3c             	add    eax,0x3c
c001d190:	8b 00                	mov    eax,DWORD PTR [eax]
c001d192:	83 ec 0c             	sub    esp,0xc
c001d195:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d198:	ff d0                	call   eax
c001d19a:	83 c4 10             	add    esp,0x10
c001d19d:	b8 00 00 00 00       	mov    eax,0x0
c001d1a2:	c9                   	leave  
c001d1a3:	c3                   	ret    

c001d1a4 <IOAPIC::close(int, int, void*)>:
c001d1a4:	b8 00 00 00 00       	mov    eax,0x0
c001d1a9:	c3                   	ret    

c001d1aa <APIC::io_wait()>:
c001d1aa:	eb 00                	jmp    c001d1ac <APIC::io_wait()+0x2>
c001d1ac:	eb 00                	jmp    c001d1ae <APIC::io_wait()+0x4>
c001d1ae:	90                   	nop
c001d1af:	c3                   	ret    

c001d1b0 <APIC::getBase()>:
c001d1b0:	55                   	push   ebp
c001d1b1:	89 e5                	mov    ebp,esp
c001d1b3:	83 ec 18             	sub    esp,0x18
c001d1b6:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c001d1bb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d1c1:	83 e0 08             	and    eax,0x8
c001d1c4:	84 c0                	test   al,al
c001d1c6:	75 07                	jne    c001d1cf <APIC::getBase()+0x1f>
c001d1c8:	b8 00 00 00 00       	mov    eax,0x0
c001d1cd:	eb 21                	jmp    c001d1f0 <APIC::getBase()+0x40>
c001d1cf:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c001d1d4:	83 ec 08             	sub    esp,0x8
c001d1d7:	6a 1b                	push   0x1b
c001d1d9:	50                   	push   eax
c001d1da:	e8 e7 df fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001d1df:	83 c4 10             	add    esp,0x10
c001d1e2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d1e5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d1e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d1eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1f0:	c9                   	leave  
c001d1f1:	c3                   	ret    

c001d1f2 <APIC::eoi(unsigned char)>:
c001d1f2:	55                   	push   ebp
c001d1f3:	89 e5                	mov    ebp,esp
c001d1f5:	83 ec 28             	sub    esp,0x28
c001d1f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d1fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d1fe:	83 ec 0c             	sub    esp,0xc
c001d201:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d204:	e8 a7 ff ff ff       	call   c001d1b0 <APIC::getBase()>
c001d209:	83 c4 10             	add    esp,0x10
c001d20c:	05 b0 00 00 00       	add    eax,0xb0
c001d211:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d214:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d217:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d21d:	90                   	nop
c001d21e:	c9                   	leave  
c001d21f:	c3                   	ret    

c001d220 <APIC::open(int, int, void*)>:
c001d220:	55                   	push   ebp
c001d221:	89 e5                	mov    ebp,esp
c001d223:	57                   	push   edi
c001d224:	56                   	push   esi
c001d225:	53                   	push   ebx
c001d226:	83 ec 1c             	sub    esp,0x1c
c001d229:	83 ec 0c             	sub    esp,0xc
c001d22c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d22f:	e8 7c ff ff ff       	call   c001d1b0 <APIC::getBase()>
c001d234:	83 c4 10             	add    esp,0x10
c001d237:	05 f0 00 00 00       	add    eax,0xf0
c001d23c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d23f:	83 ec 0c             	sub    esp,0xc
c001d242:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d245:	e8 66 ff ff ff       	call   c001d1b0 <APIC::getBase()>
c001d24a:	83 c4 10             	add    esp,0x10
c001d24d:	89 c2                	mov    edx,eax
c001d24f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d252:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d258:	0f b6 f8             	movzx  edi,al
c001d25b:	89 d0                	mov    eax,edx
c001d25d:	ba 00 00 00 00       	mov    edx,0x0
c001d262:	89 c1                	mov    ecx,eax
c001d264:	80 e5 ff             	and    ch,0xff
c001d267:	89 cb                	mov    ebx,ecx
c001d269:	0f b6 f2             	movzx  esi,dl
c001d26c:	89 d8                	mov    eax,ebx
c001d26e:	89 f2                	mov    edx,esi
c001d270:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d273:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d276:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d27a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d27e:	83 e0 00             	and    eax,0x0
c001d281:	09 d0                	or     eax,edx
c001d283:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d28a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d290:	8d 50 01             	lea    edx,[eax+0x1]
c001d293:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d296:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d29c:	0f b6 d0             	movzx  edx,al
c001d29f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2a2:	83 c2 08             	add    edx,0x8
c001d2a5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d2a9:	0f b6 c9             	movzx  ecx,cl
c001d2ac:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d2b2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d2b6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d2b9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2bb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d2be:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d2c5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d2c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d2cb:	89 10                	mov    DWORD PTR [eax],edx
c001d2cd:	b8 00 00 00 00       	mov    eax,0x0
c001d2d2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d2d5:	5b                   	pop    ebx
c001d2d6:	5e                   	pop    esi
c001d2d7:	5f                   	pop    edi
c001d2d8:	5d                   	pop    ebp
c001d2d9:	c3                   	ret    

c001d2da <IOAPIC::IOAPIC()>:
c001d2da:	83 ec 0c             	sub    esp,0xc
c001d2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2e1:	83 ec 08             	sub    esp,0x8
c001d2e4:	68 8c 24 02 c0       	push   0xc002248c
c001d2e9:	50                   	push   eax
c001d2ea:	e8 5b 30 ff ff       	call   c001034a <Device::Device(char const*)>
c001d2ef:	83 c4 10             	add    esp,0x10
c001d2f2:	ba b4 25 02 c0       	mov    edx,0xc00225b4
c001d2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2fb:	89 10                	mov    DWORD PTR [eax],edx
c001d2fd:	90                   	nop
c001d2fe:	83 c4 0c             	add    esp,0xc
c001d301:	c3                   	ret    

c001d302 <APIC::APIC()>:
c001d302:	53                   	push   ebx
c001d303:	83 ec 18             	sub    esp,0x18
c001d306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d30a:	83 ec 08             	sub    esp,0x8
c001d30d:	68 94 24 02 c0       	push   0xc0022494
c001d312:	50                   	push   eax
c001d313:	e8 74 37 ff ff       	call   c0010a8c <InterruptController::InterruptController(char const*)>
c001d318:	83 c4 10             	add    esp,0x10
c001d31b:	ba 6c 25 02 c0       	mov    edx,0xc002256c
c001d320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d324:	89 10                	mov    DWORD PTR [eax],edx
c001d326:	a0 a0 50 02 c0       	mov    al,ds:0xc00250a0
c001d32b:	83 f0 01             	xor    eax,0x1
c001d32e:	84 c0                	test   al,al
c001d330:	0f 84 96 00 00 00    	je     c001d3cc <APIC::APIC()+0xca>
c001d336:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d33b:	a0 50 3b 02 c0       	mov    al,ds:0xc0023b50
c001d340:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d344:	73 7f                	jae    c001d3c5 <APIC::APIC()+0xc3>
c001d346:	83 ec 0c             	sub    esp,0xc
c001d349:	68 68 01 00 00       	push   0x168
c001d34e:	e8 0d 19 ff ff       	call   c000ec60 <operator new(unsigned long)>
c001d353:	83 c4 10             	add    esp,0x10
c001d356:	89 c3                	mov    ebx,eax
c001d358:	83 ec 0c             	sub    esp,0xc
c001d35b:	53                   	push   ebx
c001d35c:	e8 79 ff ff ff       	call   c001d2da <IOAPIC::IOAPIC()>
c001d361:	83 c4 10             	add    esp,0x10
c001d364:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d368:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d36d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d371:	89 14 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],edx
c001d378:	a1 60 50 02 c0       	mov    eax,ds:0xc0025060
c001d37d:	40                   	inc    eax
c001d37e:	a3 60 50 02 c0       	mov    ds:0xc0025060,eax
c001d383:	a1 a8 32 02 c0       	mov    eax,ds:0xc00232a8
c001d388:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d38e:	83 ec 08             	sub    esp,0x8
c001d391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d395:	50                   	push   eax
c001d396:	e8 bf 2d ff ff       	call   c001015a <Device::addChild(Device*)>
c001d39b:	83 c4 10             	add    esp,0x10
c001d39e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3a4:	83 c0 08             	add    eax,0x8
c001d3a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d3a9:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d3ae:	6a 00                	push   0x0
c001d3b0:	6a 00                	push   0x0
c001d3b2:	52                   	push   edx
c001d3b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3b7:	ff d0                	call   eax
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d3c0:	e9 76 ff ff ff       	jmp    c001d33b <APIC::APIC()+0x39>
c001d3c5:	c6 05 a0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250a0,0x1
c001d3cc:	90                   	nop
c001d3cd:	83 c4 18             	add    esp,0x18
c001d3d0:	5b                   	pop    ebx
c001d3d1:	c3                   	ret    

c001d3d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d3d2:	55                   	push   ebp
c001d3d3:	89 e5                	mov    ebp,esp
c001d3d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d3de:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d3e1:	72 1d                	jb     c001d400 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d3e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3e6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3ef:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d3f5:	01 d0                	add    eax,edx
c001d3f7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d3fa:	73 04                	jae    c001d400 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d3fc:	b0 01                	mov    al,0x1
c001d3fe:	eb 02                	jmp    c001d402 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d400:	b0 00                	mov    al,0x0
c001d402:	5d                   	pop    ebp
c001d403:	c3                   	ret    

c001d404 <IOAPIC::read(int)>:
c001d404:	55                   	push   ebp
c001d405:	89 e5                	mov    ebp,esp
c001d407:	83 ec 10             	sub    esp,0x10
c001d40a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d40d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d413:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d416:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d419:	0f b6 d0             	movzx  edx,al
c001d41c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d41f:	89 10                	mov    DWORD PTR [eax],edx
c001d421:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d424:	83 c0 10             	add    eax,0x10
c001d427:	8b 00                	mov    eax,DWORD PTR [eax]
c001d429:	c9                   	leave  
c001d42a:	c3                   	ret    
c001d42b:	90                   	nop

c001d42c <IOAPIC::open(int, int, void*)>:
c001d42c:	55                   	push   ebp
c001d42d:	89 e5                	mov    ebp,esp
c001d42f:	57                   	push   edi
c001d430:	56                   	push   esi
c001d431:	53                   	push   ebx
c001d432:	83 ec 0c             	sub    esp,0xc
c001d435:	83 ec 0c             	sub    esp,0xc
c001d438:	68 bf 24 02 c0       	push   0xc00224bf
c001d43d:	e8 0d 19 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001d442:	83 c4 10             	add    esp,0x10
c001d445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d448:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d44b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d454:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d45a:	8b 14 85 80 3b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc480]
c001d461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d464:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d46d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d473:	8b 14 85 00 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc400]
c001d47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d47d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d486:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d48c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d48f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d495:	0f b6 f8             	movzx  edi,al
c001d498:	89 d0                	mov    eax,edx
c001d49a:	ba 00 00 00 00       	mov    edx,0x0
c001d49f:	89 c1                	mov    ecx,eax
c001d4a1:	80 e5 ff             	and    ch,0xff
c001d4a4:	89 cb                	mov    ebx,ecx
c001d4a6:	0f b6 f2             	movzx  esi,dl
c001d4a9:	89 d8                	mov    eax,ebx
c001d4ab:	89 f2                	mov    edx,esi
c001d4ad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d4b0:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d4b3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d4b7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d4bb:	83 e0 00             	and    eax,0x0
c001d4be:	09 d0                	or     eax,edx
c001d4c0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d4cd:	8d 50 01             	lea    edx,[eax+0x1]
c001d4d0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d4d3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d4d9:	0f b6 d0             	movzx  edx,al
c001d4dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4df:	83 c2 08             	add    edx,0x8
c001d4e2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d4e6:	0f b6 c9             	movzx  ecx,cl
c001d4e9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d4ef:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d4f3:	83 ec 08             	sub    esp,0x8
c001d4f6:	6a 01                	push   0x1
c001d4f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4fb:	e8 04 ff ff ff       	call   c001d404 <IOAPIC::read(int)>
c001d500:	83 c4 10             	add    esp,0x10
c001d503:	c1 f8 10             	sar    eax,0x10
c001d506:	0f b6 c0             	movzx  eax,al
c001d509:	8d 50 01             	lea    edx,[eax+0x1]
c001d50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d50f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d515:	b8 00 00 00 00       	mov    eax,0x0
c001d51a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d51d:	5b                   	pop    ebx
c001d51e:	5e                   	pop    esi
c001d51f:	5f                   	pop    edi
c001d520:	5d                   	pop    ebp
c001d521:	c3                   	ret    

c001d522 <IOAPIC::write(int, int)>:
c001d522:	55                   	push   ebp
c001d523:	89 e5                	mov    ebp,esp
c001d525:	83 ec 10             	sub    esp,0x10
c001d528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d52b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d531:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d534:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d537:	0f b6 d0             	movzx  edx,al
c001d53a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d53d:	89 10                	mov    DWORD PTR [eax],edx
c001d53f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d542:	8d 50 10             	lea    edx,[eax+0x10]
c001d545:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d548:	89 02                	mov    DWORD PTR [edx],eax
c001d54a:	90                   	nop
c001d54b:	c9                   	leave  
c001d54c:	c3                   	ret    
c001d54d:	90                   	nop

c001d54e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d54e:	55                   	push   ebp
c001d54f:	89 e5                	mov    ebp,esp
c001d551:	83 ec 20             	sub    esp,0x20
c001d554:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d557:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d55a:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d55d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d560:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d563:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d566:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d569:	88 d0                	mov    al,dl
c001d56b:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d56e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d572:	83 c0 08             	add    eax,0x8
c001d575:	01 c0                	add    eax,eax
c001d577:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d57a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d57e:	83 c0 08             	add    eax,0x8
c001d581:	01 c0                	add    eax,eax
c001d583:	40                   	inc    eax
c001d584:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d587:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d58a:	50                   	push   eax
c001d58b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d58e:	e8 71 fe ff ff       	call   c001d404 <IOAPIC::read(int)>
c001d593:	83 c4 08             	add    esp,0x8
c001d596:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d599:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d5a0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d5a3:	c1 e0 18             	shl    eax,0x18
c001d5a6:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d5a9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d5ac:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d5af:	52                   	push   edx
c001d5b0:	50                   	push   eax
c001d5b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5b4:	e8 69 ff ff ff       	call   c001d522 <IOAPIC::write(int, int)>
c001d5b9:	83 c4 0c             	add    esp,0xc
c001d5bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d5bf:	50                   	push   eax
c001d5c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5c3:	e8 3c fe ff ff       	call   c001d404 <IOAPIC::read(int)>
c001d5c8:	83 c4 08             	add    esp,0x8
c001d5cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d5ce:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d5d5:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d5dc:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d5e3:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d5ea:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d5ee:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d5f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d5f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d5f7:	52                   	push   edx
c001d5f8:	50                   	push   eax
c001d5f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5fc:	e8 21 ff ff ff       	call   c001d522 <IOAPIC::write(int, int)>
c001d601:	83 c4 0c             	add    esp,0xc
c001d604:	90                   	nop
c001d605:	c9                   	leave  
c001d606:	c3                   	ret    
c001d607:	90                   	nop

c001d608 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d608:	55                   	push   ebp
c001d609:	89 e5                	mov    ebp,esp
c001d60b:	56                   	push   esi
c001d60c:	53                   	push   ebx
c001d60d:	83 ec 20             	sub    esp,0x20
c001d610:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d613:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d616:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d61a:	74 28                	je     c001d644 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d61c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d620:	7f 12                	jg     c001d634 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d622:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d625:	05 00 2a 02 c0       	add    eax,0xc0022a00
c001d62a:	8a 00                	mov    al,BYTE PTR [eax]
c001d62c:	0f b6 c0             	movzx  eax,al
c001d62f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d632:	eb 10                	jmp    c001d644 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d634:	83 ec 0c             	sub    esp,0xc
c001d637:	68 d0 24 02 c0       	push   0xc00224d0
c001d63c:	e8 a3 73 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001d641:	83 c4 10             	add    esp,0x10
c001d644:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d648:	a1 60 50 02 c0       	mov    eax,ds:0xc0025060
c001d64d:	83 ec 08             	sub    esp,0x8
c001d650:	50                   	push   eax
c001d651:	68 08 25 02 c0       	push   0xc0022508
c001d656:	e8 f4 16 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001d65b:	83 c4 10             	add    esp,0x10
c001d65e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d665:	a1 60 50 02 c0       	mov    eax,ds:0xc0025060
c001d66a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d66d:	7d 58                	jge    c001d6c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d66f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d672:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c001d679:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d67c:	83 ec 08             	sub    esp,0x8
c001d67f:	52                   	push   edx
c001d680:	50                   	push   eax
c001d681:	e8 4c fd ff ff       	call   c001d3d2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d686:	83 c4 10             	add    esp,0x10
c001d689:	84 c0                	test   al,al
c001d68b:	74 35                	je     c001d6c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d68d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d690:	8b 1c 85 80 50 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdaf80]
c001d697:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d69a:	83 c0 20             	add    eax,0x20
c001d69d:	0f b6 f0             	movzx  esi,al
c001d6a0:	e8 36 66 ff ff       	call   c0013cdb <getCPUNumber()>
c001d6a5:	99                   	cdq    
c001d6a6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d6a9:	0f b6 c9             	movzx  ecx,cl
c001d6ac:	83 ec 0c             	sub    esp,0xc
c001d6af:	56                   	push   esi
c001d6b0:	52                   	push   edx
c001d6b1:	50                   	push   eax
c001d6b2:	51                   	push   ecx
c001d6b3:	53                   	push   ebx
c001d6b4:	e8 95 fe ff ff       	call   c001d54e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d6b9:	83 c4 20             	add    esp,0x20
c001d6bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d6c0:	eb 05                	jmp    c001d6c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d6c2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d6c5:	eb 9e                	jmp    c001d665 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d6c7:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d6ca:	83 f0 01             	xor    eax,0x1
c001d6cd:	84 c0                	test   al,al
c001d6cf:	74 10                	je     c001d6e1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d6d1:	83 ec 0c             	sub    esp,0xc
c001d6d4:	68 1f 25 02 c0       	push   0xc002251f
c001d6d9:	e8 06 73 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001d6de:	83 c4 10             	add    esp,0x10
c001d6e1:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d6e5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d6ec:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d6f0:	7f 65                	jg     c001d757 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d6f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d6f8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d6ff:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d702:	01 ca                	add    edx,ecx
c001d704:	83 c2 54             	add    edx,0x54
c001d707:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d70b:	85 c0                	test   eax,eax
c001d70d:	75 43                	jne    c001d752 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d70f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d712:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d715:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d71c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d71f:	01 ca                	add    edx,ecx
c001d721:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d724:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d727:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d72b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d72e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d731:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d738:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d73b:	01 ca                	add    edx,ecx
c001d73d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d743:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d746:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d74a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d74d:	83 e8 20             	sub    eax,0x20
c001d750:	eb 1a                	jmp    c001d76c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d752:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d755:	eb 95                	jmp    c001d6ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d757:	83 ec 0c             	sub    esp,0xc
c001d75a:	68 2c 25 02 c0       	push   0xc002252c
c001d75f:	e8 80 72 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001d764:	83 c4 10             	add    esp,0x10
c001d767:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d76c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d76f:	5b                   	pop    ebx
c001d770:	5e                   	pop    esi
c001d771:	5d                   	pop    ebp
c001d772:	c3                   	ret    
c001d773:	90                   	nop

c001d774 <PIC::disable()>:
c001d774:	55                   	push   ebp
c001d775:	89 e5                	mov    ebp,esp
c001d777:	83 ec 10             	sub    esp,0x10
c001d77a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d780:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d784:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d787:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d78b:	ee                   	out    dx,al
c001d78c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d792:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d796:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d799:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d79d:	ee                   	out    dx,al
c001d79e:	90                   	nop
c001d79f:	c9                   	leave  
c001d7a0:	c3                   	ret    
c001d7a1:	90                   	nop

c001d7a2 <PIC::close(int, int, void*)>:
c001d7a2:	55                   	push   ebp
c001d7a3:	89 e5                	mov    ebp,esp
c001d7a5:	83 ec 08             	sub    esp,0x8
c001d7a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7ad:	83 c0 3c             	add    eax,0x3c
c001d7b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7b2:	83 ec 0c             	sub    esp,0xc
c001d7b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d7b8:	ff d0                	call   eax
c001d7ba:	83 c4 10             	add    esp,0x10
c001d7bd:	b8 00 00 00 00       	mov    eax,0x0
c001d7c2:	c9                   	leave  
c001d7c3:	c3                   	ret    

c001d7c4 <PIC::PIC()>:
c001d7c4:	83 ec 0c             	sub    esp,0xc
c001d7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7cb:	83 ec 08             	sub    esp,0x8
c001d7ce:	68 d8 25 02 c0       	push   0xc00225d8
c001d7d3:	50                   	push   eax
c001d7d4:	e8 b3 32 ff ff       	call   c0010a8c <InterruptController::InterruptController(char const*)>
c001d7d9:	83 c4 10             	add    esp,0x10
c001d7dc:	ba 04 26 02 c0       	mov    edx,0xc0022604
c001d7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7e5:	89 10                	mov    DWORD PTR [eax],edx
c001d7e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d7f1:	0f b6 d0             	movzx  edx,al
c001d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d803:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d809:	0f b6 d0             	movzx  edx,al
c001d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d810:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d819:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d81f:	8d 50 01             	lea    edx,[eax+0x1]
c001d822:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d826:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d82c:	0f b6 d0             	movzx  edx,al
c001d82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d833:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d837:	83 e1 3f             	and    ecx,0x3f
c001d83a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d842:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d848:	0f b6 d0             	movzx  edx,al
c001d84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d84f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d860:	0f b6 d0             	movzx  edx,al
c001d863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d867:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d870:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d876:	8d 50 01             	lea    edx,[eax+0x1]
c001d879:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d87d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d883:	0f b6 d0             	movzx  edx,al
c001d886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d88a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d88e:	83 e1 3f             	and    ecx,0x3f
c001d891:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d895:	90                   	nop
c001d896:	83 c4 0c             	add    esp,0xc
c001d899:	c3                   	ret    

c001d89a <PIC::ioWait()>:
c001d89a:	eb 00                	jmp    c001d89c <PIC::ioWait()+0x2>
c001d89c:	eb 00                	jmp    c001d89e <PIC::ioWait()+0x4>
c001d89e:	90                   	nop
c001d89f:	c3                   	ret    

c001d8a0 <PIC::getIRQReg(int)>:
c001d8a0:	55                   	push   ebp
c001d8a1:	89 e5                	mov    ebp,esp
c001d8a3:	83 ec 10             	sub    esp,0x10
c001d8a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8a9:	0f b6 c0             	movzx  eax,al
c001d8ac:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d8b2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d8b5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d8b8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d8bc:	ee                   	out    dx,al
c001d8bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8c0:	0f b6 c0             	movzx  eax,al
c001d8c3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d8c9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d8cc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d8cf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d8d3:	ee                   	out    dx,al
c001d8d4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d8da:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d8de:	89 c2                	mov    edx,eax
c001d8e0:	ec                   	in     al,dx
c001d8e1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d8e4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d8e7:	0f b6 c0             	movzx  eax,al
c001d8ea:	c1 e0 08             	shl    eax,0x8
c001d8ed:	89 c1                	mov    ecx,eax
c001d8ef:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d8f5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d8f9:	89 c2                	mov    edx,eax
c001d8fb:	ec                   	in     al,dx
c001d8fc:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d8ff:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d902:	0f b6 c0             	movzx  eax,al
c001d905:	09 c8                	or     eax,ecx
c001d907:	c9                   	leave  
c001d908:	c3                   	ret    
c001d909:	90                   	nop

c001d90a <PIC::eoi(unsigned char)>:
c001d90a:	55                   	push   ebp
c001d90b:	89 e5                	mov    ebp,esp
c001d90d:	83 ec 14             	sub    esp,0x14
c001d910:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d913:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d916:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d91a:	75 1e                	jne    c001d93a <PIC::eoi(unsigned char)+0x30>
c001d91c:	6a 0b                	push   0xb
c001d91e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d921:	e8 7a ff ff ff       	call   c001d8a0 <PIC::getIRQReg(int)>
c001d926:	83 c4 08             	add    esp,0x8
c001d929:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d92d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d931:	25 80 00 00 00       	and    eax,0x80
c001d936:	85 c0                	test   eax,eax
c001d938:	74 5f                	je     c001d999 <PIC::eoi(unsigned char)+0x8f>
c001d93a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d93e:	75 2d                	jne    c001d96d <PIC::eoi(unsigned char)+0x63>
c001d940:	6a 0b                	push   0xb
c001d942:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d945:	e8 56 ff ff ff       	call   c001d8a0 <PIC::getIRQReg(int)>
c001d94a:	83 c4 08             	add    esp,0x8
c001d94d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d951:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d954:	66 85 c0             	test   ax,ax
c001d957:	78 14                	js     c001d96d <PIC::eoi(unsigned char)+0x63>
c001d959:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001d95f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001d963:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d966:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d96a:	ee                   	out    dx,al
c001d96b:	eb 2d                	jmp    c001d99a <PIC::eoi(unsigned char)+0x90>
c001d96d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d971:	76 12                	jbe    c001d985 <PIC::eoi(unsigned char)+0x7b>
c001d973:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d979:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001d97d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d980:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d984:	ee                   	out    dx,al
c001d985:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d98b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001d98f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d992:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d996:	ee                   	out    dx,al
c001d997:	eb 01                	jmp    c001d99a <PIC::eoi(unsigned char)+0x90>
c001d999:	90                   	nop
c001d99a:	c9                   	leave  
c001d99b:	c3                   	ret    

c001d99c <PIC::remap()>:
c001d99c:	55                   	push   ebp
c001d99d:	89 e5                	mov    ebp,esp
c001d99f:	83 ec 48             	sub    esp,0x48
c001d9a2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001d9a9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001d9b0:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001d9b6:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001d9b9:	89 c2                	mov    edx,eax
c001d9bb:	ec                   	in     al,dx
c001d9bc:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001d9bf:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001d9c2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001d9c5:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001d9cb:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001d9ce:	89 c2                	mov    edx,eax
c001d9d0:	ec                   	in     al,dx
c001d9d1:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001d9d4:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001d9d7:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001d9da:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001d9e0:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001d9e4:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001d9e7:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001d9ea:	ee                   	out    dx,al
c001d9eb:	83 ec 0c             	sub    esp,0xc
c001d9ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9f1:	e8 a4 fe ff ff       	call   c001d89a <PIC::ioWait()>
c001d9f6:	83 c4 10             	add    esp,0x10
c001d9f9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001d9ff:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001da03:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001da06:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001da09:	ee                   	out    dx,al
c001da0a:	83 ec 0c             	sub    esp,0xc
c001da0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da10:	e8 85 fe ff ff       	call   c001d89a <PIC::ioWait()>
c001da15:	83 c4 10             	add    esp,0x10
c001da18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001da1b:	0f b6 c0             	movzx  eax,al
c001da1e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001da24:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001da27:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001da2a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001da2d:	ee                   	out    dx,al
c001da2e:	83 ec 0c             	sub    esp,0xc
c001da31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da34:	e8 61 fe ff ff       	call   c001d89a <PIC::ioWait()>
c001da39:	83 c4 10             	add    esp,0x10
c001da3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da3f:	0f b6 c0             	movzx  eax,al
c001da42:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001da48:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001da4b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001da4e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001da51:	ee                   	out    dx,al
c001da52:	83 ec 0c             	sub    esp,0xc
c001da55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da58:	e8 3d fe ff ff       	call   c001d89a <PIC::ioWait()>
c001da5d:	83 c4 10             	add    esp,0x10
c001da60:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001da66:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001da6a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001da6d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001da70:	ee                   	out    dx,al
c001da71:	83 ec 0c             	sub    esp,0xc
c001da74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da77:	e8 1e fe ff ff       	call   c001d89a <PIC::ioWait()>
c001da7c:	83 c4 10             	add    esp,0x10
c001da7f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001da85:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001da89:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001da8c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001da8f:	ee                   	out    dx,al
c001da90:	83 ec 0c             	sub    esp,0xc
c001da93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da96:	e8 ff fd ff ff       	call   c001d89a <PIC::ioWait()>
c001da9b:	83 c4 10             	add    esp,0x10
c001da9e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001daa4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001daa8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001daab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001daae:	ee                   	out    dx,al
c001daaf:	83 ec 0c             	sub    esp,0xc
c001dab2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dab5:	e8 e0 fd ff ff       	call   c001d89a <PIC::ioWait()>
c001daba:	83 c4 10             	add    esp,0x10
c001dabd:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001dac3:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001dac7:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001daca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dacd:	ee                   	out    dx,al
c001dace:	83 ec 0c             	sub    esp,0xc
c001dad1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dad4:	e8 c1 fd ff ff       	call   c001d89a <PIC::ioWait()>
c001dad9:	83 c4 10             	add    esp,0x10
c001dadc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001dae0:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001dae6:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001dae9:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001daec:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001daef:	ee                   	out    dx,al
c001daf0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001daf4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dafa:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dafd:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001db00:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db03:	ee                   	out    dx,al
c001db04:	90                   	nop
c001db05:	c9                   	leave  
c001db06:	c3                   	ret    
c001db07:	90                   	nop

c001db08 <PIC::open(int, int, void*)>:
c001db08:	55                   	push   ebp
c001db09:	89 e5                	mov    ebp,esp
c001db0b:	83 ec 18             	sub    esp,0x18
c001db0e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001db14:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001db18:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001db1b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001db1f:	ee                   	out    dx,al
c001db20:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001db26:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001db2a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001db2d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001db31:	ee                   	out    dx,al
c001db32:	83 ec 0c             	sub    esp,0xc
c001db35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db38:	e8 5f fe ff ff       	call   c001d99c <PIC::remap()>
c001db3d:	83 c4 10             	add    esp,0x10
c001db40:	b8 00 00 00 00       	mov    eax,0x0
c001db45:	c9                   	leave  
c001db46:	c3                   	ret    
c001db47:	90                   	nop

c001db48 <APICTimer::close(int, int, void*)>:
c001db48:	b8 00 00 00 00       	mov    eax,0x0
c001db4d:	c3                   	ret    

c001db4e <apicTimerHandler(regs*, void*)>:
c001db4e:	83 ec 0c             	sub    esp,0xc
c001db51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db55:	8b 00                	mov    eax,DWORD PTR [eax]
c001db57:	99                   	cdq    
c001db58:	52                   	push   edx
c001db59:	50                   	push   eax
c001db5a:	6a 00                	push   0x0
c001db5c:	68 00 ca 9a 3b       	push   0x3b9aca00
c001db61:	e8 76 07 00 00       	call   c001e2dc <__udivdi3>
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	83 ec 08             	sub    esp,0x8
c001db6c:	52                   	push   edx
c001db6d:	50                   	push   eax
c001db6e:	e8 84 46 ff ff       	call   c00121f7 <timerHandler(unsigned long long)>
c001db73:	83 c4 10             	add    esp,0x10
c001db76:	90                   	nop
c001db77:	83 c4 0c             	add    esp,0xc
c001db7a:	c3                   	ret    
c001db7b:	90                   	nop

c001db7c <APICTimer::write(int)>:
c001db7c:	53                   	push   ebx
c001db7d:	83 ec 28             	sub    esp,0x28
c001db80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001db88:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db8e:	e8 4b 61 ff ff       	call   c0013cde <thisCPU()>
c001db93:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001db99:	83 ec 0c             	sub    esp,0xc
c001db9c:	50                   	push   eax
c001db9d:	e8 0e f6 ff ff       	call   c001d1b0 <APIC::getBase()>
c001dba2:	83 c4 10             	add    esp,0x10
c001dba5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dba9:	a1 10 39 02 c0       	mov    eax,ds:0xc0023910
c001dbae:	8b 15 14 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023914
c001dbb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dbb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001dbbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbc0:	05 e0 03 00 00       	add    eax,0x3e0
c001dbc5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dbcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dbcf:	05 80 03 00 00       	add    eax,0x380
c001dbd4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001dbda:	fb                   	sti    
c001dbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbe3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001dbe8:	83 d2 00             	adc    edx,0x0
c001dbeb:	89 c1                	mov    ecx,eax
c001dbed:	89 d3                	mov    ebx,edx
c001dbef:	a1 10 39 02 c0       	mov    eax,ds:0xc0023910
c001dbf4:	8b 15 14 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023914
c001dbfa:	39 c8                	cmp    eax,ecx
c001dbfc:	89 d0                	mov    eax,edx
c001dbfe:	19 d8                	sbb    eax,ebx
c001dc00:	73 02                	jae    c001dc04 <APICTimer::write(int)+0x88>
c001dc02:	eb d7                	jmp    c001dbdb <APICTimer::write(int)+0x5f>
c001dc04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc08:	05 20 03 00 00       	add    eax,0x320
c001dc0d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dc13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc17:	05 90 03 00 00       	add    eax,0x390
c001dc1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc1e:	f7 d0                	not    eax
c001dc20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc24:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc2c:	ba 00 00 00 00       	mov    edx,0x0
c001dc31:	f7 f3                	div    ebx
c001dc33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc3b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dc41:	0d 00 00 02 00       	or     eax,0x20000
c001dc46:	89 c2                	mov    edx,eax
c001dc48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc4c:	05 20 03 00 00       	add    eax,0x320
c001dc51:	89 10                	mov    DWORD PTR [eax],edx
c001dc53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc57:	05 e0 03 00 00       	add    eax,0x3e0
c001dc5c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001dc62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc66:	05 80 03 00 00       	add    eax,0x380
c001dc6b:	89 c2                	mov    edx,eax
c001dc6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dc71:	89 02                	mov    DWORD PTR [edx],eax
c001dc73:	90                   	nop
c001dc74:	83 c4 28             	add    esp,0x28
c001dc77:	5b                   	pop    ebx
c001dc78:	c3                   	ret    
c001dc79:	90                   	nop

c001dc7a <APICTimer::open(int, int, void*)>:
c001dc7a:	57                   	push   edi
c001dc7b:	56                   	push   esi
c001dc7c:	53                   	push   ebx
c001dc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc81:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc83:	83 c0 24             	add    eax,0x24
c001dc86:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc88:	83 ec 08             	sub    esp,0x8
c001dc8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc93:	ff d0                	call   eax
c001dc95:	83 c4 10             	add    esp,0x10
c001dc98:	e8 41 60 ff ff       	call   c0013cde <thisCPU()>
c001dc9d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dca3:	83 ec 0c             	sub    esp,0xc
c001dca6:	50                   	push   eax
c001dca7:	e8 04 f5 ff ff       	call   c001d1b0 <APIC::getBase()>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001dcb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dcbf:	0f b6 f8             	movzx  edi,al
c001dcc2:	89 d0                	mov    eax,edx
c001dcc4:	ba 00 00 00 00       	mov    edx,0x0
c001dcc9:	89 c1                	mov    ecx,eax
c001dccb:	80 e5 ff             	and    ch,0xff
c001dcce:	89 cb                	mov    ebx,ecx
c001dcd0:	0f b6 f2             	movzx  esi,dl
c001dcd3:	89 d8                	mov    eax,ebx
c001dcd5:	89 f2                	mov    edx,esi
c001dcd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcdb:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dcde:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dce2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dce6:	83 e0 00             	and    eax,0x0
c001dce9:	09 d0                	or     eax,edx
c001dceb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dcf9:	8d 50 01             	lea    edx,[eax+0x1]
c001dcfc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd00:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dd06:	0f b6 d0             	movzx  edx,al
c001dd09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0d:	83 c2 08             	add    edx,0x8
c001dd10:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dd14:	0f b6 c9             	movzx  ecx,cl
c001dd17:	81 c9 00 00 01 00    	or     ecx,0x10000
c001dd1d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd25:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd29:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd37:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dd3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd41:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dd47:	83 ec 0c             	sub    esp,0xc
c001dd4a:	51                   	push   ecx
c001dd4b:	6a 01                	push   0x1
c001dd4d:	68 4e db 01 c0       	push   0xc001db4e
c001dd52:	52                   	push   edx
c001dd53:	50                   	push   eax
c001dd54:	e8 55 23 ff ff       	call   c00100ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd59:	83 c4 20             	add    esp,0x20
c001dd5c:	89 c2                	mov    edx,eax
c001dd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd62:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd68:	b8 00 00 00 00       	mov    eax,0x0
c001dd6d:	5b                   	pop    ebx
c001dd6e:	5e                   	pop    esi
c001dd6f:	5f                   	pop    edi
c001dd70:	c3                   	ret    
c001dd71:	90                   	nop

c001dd72 <APICTimer::APICTimer()>:
c001dd72:	83 ec 0c             	sub    esp,0xc
c001dd75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd79:	83 ec 08             	sub    esp,0x8
c001dd7c:	68 44 26 02 c0       	push   0xc0022644
c001dd81:	50                   	push   eax
c001dd82:	e8 e1 43 ff ff       	call   c0012168 <Timer::Timer(char const*)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	ba 58 26 02 c0       	mov    edx,0xc0022658
c001dd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd93:	89 10                	mov    DWORD PTR [eax],edx
c001dd95:	90                   	nop
c001dd96:	83 c4 0c             	add    esp,0xc
c001dd99:	c3                   	ret    

c001dd9a <PIT::write(int)>:
c001dd9a:	83 ec 10             	sub    esp,0x10
c001dd9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dda1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dda5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddaf:	a3 a4 50 02 c0       	mov    ds:0xc00250a4,eax
c001ddb4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ddb9:	99                   	cdq    
c001ddba:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ddbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddc2:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ddc9:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ddce:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ddd2:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ddd7:	ee                   	out    dx,al
c001ddd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dddc:	0f b6 c0             	movzx  eax,al
c001dddf:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dde6:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ddea:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ddee:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ddf3:	ee                   	out    dx,al
c001ddf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddf8:	c1 f8 08             	sar    eax,0x8
c001ddfb:	0f b6 c0             	movzx  eax,al
c001ddfe:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001de05:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de09:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de0d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001de12:	ee                   	out    dx,al
c001de13:	90                   	nop
c001de14:	83 c4 10             	add    esp,0x10
c001de17:	c3                   	ret    

c001de18 <pitHandler(regs*, void*)>:
c001de18:	83 ec 0c             	sub    esp,0xc
c001de1b:	a1 a4 50 02 c0       	mov    eax,ds:0xc00250a4
c001de20:	99                   	cdq    
c001de21:	52                   	push   edx
c001de22:	50                   	push   eax
c001de23:	6a 00                	push   0x0
c001de25:	68 00 ca 9a 3b       	push   0x3b9aca00
c001de2a:	e8 ad 04 00 00       	call   c001e2dc <__udivdi3>
c001de2f:	83 c4 10             	add    esp,0x10
c001de32:	83 ec 08             	sub    esp,0x8
c001de35:	52                   	push   edx
c001de36:	50                   	push   eax
c001de37:	e8 bb 43 ff ff       	call   c00121f7 <timerHandler(unsigned long long)>
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	90                   	nop
c001de40:	83 c4 0c             	add    esp,0xc
c001de43:	c3                   	ret    

c001de44 <PIT::open(int, int, void*)>:
c001de44:	83 ec 0c             	sub    esp,0xc
c001de47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de4d:	83 c0 24             	add    eax,0x24
c001de50:	8b 00                	mov    eax,DWORD PTR [eax]
c001de52:	83 ec 08             	sub    esp,0x8
c001de55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de5d:	ff d0                	call   eax
c001de5f:	83 c4 10             	add    esp,0x10
c001de62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de66:	83 ec 0c             	sub    esp,0xc
c001de69:	6a 00                	push   0x0
c001de6b:	6a 01                	push   0x1
c001de6d:	68 18 de 01 c0       	push   0xc001de18
c001de72:	6a 00                	push   0x0
c001de74:	50                   	push   eax
c001de75:	e8 34 22 ff ff       	call   c00100ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001de7a:	83 c4 20             	add    esp,0x20
c001de7d:	89 c2                	mov    edx,eax
c001de7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de83:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001de89:	b8 00 00 00 00       	mov    eax,0x0
c001de8e:	83 c4 0c             	add    esp,0xc
c001de91:	c3                   	ret    

c001de92 <PIT::close(int, int, void*)>:
c001de92:	83 ec 0c             	sub    esp,0xc
c001de95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de99:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea7:	6a 01                	push   0x1
c001dea9:	68 18 de 01 c0       	push   0xc001de18
c001deae:	6a 00                	push   0x0
c001deb0:	50                   	push   eax
c001deb1:	e8 56 22 ff ff       	call   c001010c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	b8 00 00 00 00       	mov    eax,0x0
c001debe:	83 c4 0c             	add    esp,0xc
c001dec1:	c3                   	ret    

c001dec2 <PIT::PIT()>:
c001dec2:	83 ec 0c             	sub    esp,0xc
c001dec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec9:	83 ec 08             	sub    esp,0x8
c001decc:	68 80 26 02 c0       	push   0xc0022680
c001ded1:	50                   	push   eax
c001ded2:	e8 91 42 ff ff       	call   c0012168 <Timer::Timer(char const*)>
c001ded7:	83 c4 10             	add    esp,0x10
c001deda:	ba a8 26 02 c0       	mov    edx,0xc00226a8
c001dedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee3:	89 10                	mov    DWORD PTR [eax],edx
c001dee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001deef:	0f b6 d0             	movzx  edx,al
c001def2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def6:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001defd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df07:	0f b6 d0             	movzx  edx,al
c001df0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001df13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df17:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001df1d:	8d 50 01             	lea    edx,[eax+0x1]
c001df20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df24:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001df2a:	0f b6 d0             	movzx  edx,al
c001df2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df31:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001df35:	83 e1 3f             	and    ecx,0x3f
c001df38:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001df3c:	90                   	nop
c001df3d:	83 c4 0c             	add    esp,0xc
c001df40:	c3                   	ret    
c001df41:	66 90                	xchg   ax,ax
c001df43:	66 90                	xchg   ax,ax
c001df45:	66 90                	xchg   ax,ax
c001df47:	66 90                	xchg   ax,ax
c001df49:	66 90                	xchg   ax,ax
c001df4b:	66 90                	xchg   ax,ax
c001df4d:	66 90                	xchg   ax,ax
c001df4f:	90                   	nop

c001df50 <avxDetect>:
c001df50:	b8 00 00 00 00       	mov    eax,0x0
c001df55:	c3                   	ret    

c001df56 <avxSave>:
c001df56:	c3                   	ret    

c001df57 <avxLoad>:
c001df57:	c3                   	ret    

c001df58 <avxInit>:
c001df58:	c3                   	ret    

c001df59 <avxClose>:
c001df59:	c3                   	ret    
c001df5a:	66 90                	xchg   ax,ax
c001df5c:	66 90                	xchg   ax,ax
c001df5e:	66 90                	xchg   ax,ax

c001df60 <sseDetect>:
c001df60:	b8 01 00 00 00       	mov    eax,0x1
c001df65:	0f a2                	cpuid  
c001df67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001df6d:	74 06                	je     c001df75 <sseDetect.noSSE>
c001df6f:	b8 01 00 00 00       	mov    eax,0x1
c001df74:	c3                   	ret    

c001df75 <sseDetect.noSSE>:
c001df75:	b8 00 00 00 00       	mov    eax,0x0
c001df7a:	c3                   	ret    

c001df7b <sseSave>:
c001df7b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001df80:	c3                   	ret    

c001df81 <sseLoad>:
c001df81:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001df86:	c3                   	ret    

c001df87 <sseInit>:
c001df87:	e8 40 00 00 00       	call   c001dfcc <x87Init>
c001df8c:	0f 20 e0             	mov    eax,cr4
c001df8f:	66 0d 00 06          	or     ax,0x600
c001df93:	0f 22 e0             	mov    cr4,eax
c001df96:	c3                   	ret    

c001df97 <sseClose>:
c001df97:	c3                   	ret    
c001df98:	66 90                	xchg   ax,ax
c001df9a:	66 90                	xchg   ax,ax
c001df9c:	66 90                	xchg   ax,ax
c001df9e:	66 90                	xchg   ax,ax

c001dfa0 <value_37F>:
c001dfa0:	7f 03                	jg     c001dfa5 <value_37A+0x1>

c001dfa2 <value_37E>:
c001dfa2:	7e 03                	jle    c001dfa7 <x87Detect+0x1>

c001dfa4 <value_37A>:
c001dfa4:	7a 03                	jp     c001dfa9 <x87Detect+0x3>

c001dfa6 <x87Detect>:
c001dfa6:	b8 01 00 00 00       	mov    eax,0x1
c001dfab:	0f a2                	cpuid  
c001dfad:	f7 c2 01 00 00 00    	test   edx,0x1
c001dfb3:	74 06                	je     c001dfbb <x87Detect.nox87>
c001dfb5:	b8 01 00 00 00       	mov    eax,0x1
c001dfba:	c3                   	ret    

c001dfbb <x87Detect.nox87>:
c001dfbb:	b8 00 00 00 00       	mov    eax,0x0
c001dfc0:	c3                   	ret    

c001dfc1 <x87Save>:
c001dfc1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001dfc6:	c3                   	ret    

c001dfc7 <x87Load>:
c001dfc7:	dd 64 24 08          	frstor [esp+0x8]
c001dfcb:	c3                   	ret    

c001dfcc <x87Init>:
c001dfcc:	9b db e3             	finit  
c001dfcf:	0f 20 c0             	mov    eax,cr0
c001dfd2:	66 25 fb ff          	and    ax,0xfffb
c001dfd6:	66 0d 22 00          	or     ax,0x22
c001dfda:	0f 22 c0             	mov    cr0,eax
c001dfdd:	0f 06                	clts   
c001dfdf:	d9 2d a4 df 01 c0    	fldcw  WORD PTR ds:0xc001dfa4
c001dfe5:	c3                   	ret    

c001dfe6 <x87Close>:
c001dfe6:	c3                   	ret    
c001dfe7:	90                   	nop

c001dfe8 <__do_global_ctors_aux>:
c001dfe8:	a1 c8 f0 01 c0       	mov    eax,ds:0xc001f0c8
c001dfed:	83 f8 ff             	cmp    eax,0xffffffff
c001dff0:	74 1a                	je     c001e00c <__do_global_ctors_aux+0x24>
c001dff2:	55                   	push   ebp
c001dff3:	89 e5                	mov    ebp,esp
c001dff5:	53                   	push   ebx
c001dff6:	52                   	push   edx
c001dff7:	bb c8 f0 01 c0       	mov    ebx,0xc001f0c8
c001dffc:	ff d0                	call   eax
c001dffe:	83 eb 04             	sub    ebx,0x4
c001e001:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e003:	83 f8 ff             	cmp    eax,0xffffffff
c001e006:	75 f4                	jne    c001dffc <__do_global_ctors_aux+0x14>
c001e008:	58                   	pop    eax
c001e009:	5b                   	pop    ebx
c001e00a:	5d                   	pop    ebp
c001e00b:	c3                   	ret    
c001e00c:	c3                   	ret    
c001e00d:	66 90                	xchg   ax,ax
c001e00f:	90                   	nop

c001e010 <__divdi3>:
c001e010:	55                   	push   ebp
c001e011:	57                   	push   edi
c001e012:	56                   	push   esi
c001e013:	53                   	push   ebx
c001e014:	83 ec 1c             	sub    esp,0x1c
c001e017:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e01b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e01f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e022:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e026:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e02a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e02e:	85 db                	test   ebx,ebx
c001e030:	0f 88 8e 00 00 00    	js     c001e0c4 <__divdi3+0xb4>
c001e036:	89 dd                	mov    ebp,ebx
c001e038:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e040:	89 d3                	mov    ebx,edx
c001e042:	85 d2                	test   edx,edx
c001e044:	79 0d                	jns    c001e053 <__divdi3+0x43>
c001e046:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e04a:	f7 d8                	neg    eax
c001e04c:	83 d2 00             	adc    edx,0x0
c001e04f:	f7 da                	neg    edx
c001e051:	89 d3                	mov    ebx,edx
c001e053:	89 c7                	mov    edi,eax
c001e055:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e058:	85 db                	test   ebx,ebx
c001e05a:	75 48                	jne    c001e0a4 <__divdi3+0x94>
c001e05c:	39 ef                	cmp    edi,ebp
c001e05e:	76 24                	jbe    c001e084 <__divdi3+0x74>
c001e060:	89 ea                	mov    edx,ebp
c001e062:	f7 f7                	div    edi
c001e064:	89 c1                	mov    ecx,eax
c001e066:	31 f6                	xor    esi,esi
c001e068:	89 c8                	mov    eax,ecx
c001e06a:	89 f2                	mov    edx,esi
c001e06c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e070:	85 c9                	test   ecx,ecx
c001e072:	74 07                	je     c001e07b <__divdi3+0x6b>
c001e074:	f7 d8                	neg    eax
c001e076:	83 d2 00             	adc    edx,0x0
c001e079:	f7 da                	neg    edx
c001e07b:	83 c4 1c             	add    esp,0x1c
c001e07e:	5b                   	pop    ebx
c001e07f:	5e                   	pop    esi
c001e080:	5f                   	pop    edi
c001e081:	5d                   	pop    ebp
c001e082:	c3                   	ret    
c001e083:	90                   	nop
c001e084:	85 ff                	test   edi,edi
c001e086:	75 0b                	jne    c001e093 <__divdi3+0x83>
c001e088:	b8 01 00 00 00       	mov    eax,0x1
c001e08d:	31 d2                	xor    edx,edx
c001e08f:	f7 f3                	div    ebx
c001e091:	89 c7                	mov    edi,eax
c001e093:	31 d2                	xor    edx,edx
c001e095:	89 e8                	mov    eax,ebp
c001e097:	f7 f7                	div    edi
c001e099:	89 c6                	mov    esi,eax
c001e09b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e09e:	f7 f7                	div    edi
c001e0a0:	89 c1                	mov    ecx,eax
c001e0a2:	eb c4                	jmp    c001e068 <__divdi3+0x58>
c001e0a4:	39 eb                	cmp    ebx,ebp
c001e0a6:	77 3c                	ja     c001e0e4 <__divdi3+0xd4>
c001e0a8:	0f bd f3             	bsr    esi,ebx
c001e0ab:	83 f6 1f             	xor    esi,0x1f
c001e0ae:	75 40                	jne    c001e0f0 <__divdi3+0xe0>
c001e0b0:	39 eb                	cmp    ebx,ebp
c001e0b2:	72 09                	jb     c001e0bd <__divdi3+0xad>
c001e0b4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e0b7:	0f 87 97 00 00 00    	ja     c001e154 <__divdi3+0x144>
c001e0bd:	b9 01 00 00 00       	mov    ecx,0x1
c001e0c2:	eb a4                	jmp    c001e068 <__divdi3+0x58>
c001e0c4:	f7 d9                	neg    ecx
c001e0c6:	83 d3 00             	adc    ebx,0x0
c001e0c9:	f7 db                	neg    ebx
c001e0cb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e0ce:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e0d2:	89 dd                	mov    ebp,ebx
c001e0d4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e0dc:	e9 5f ff ff ff       	jmp    c001e040 <__divdi3+0x30>
c001e0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e0e4:	31 f6                	xor    esi,esi
c001e0e6:	31 c9                	xor    ecx,ecx
c001e0e8:	e9 7b ff ff ff       	jmp    c001e068 <__divdi3+0x58>
c001e0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001e0f0:	b8 20 00 00 00       	mov    eax,0x20
c001e0f5:	29 f0                	sub    eax,esi
c001e0f7:	89 f1                	mov    ecx,esi
c001e0f9:	d3 e3                	shl    ebx,cl
c001e0fb:	89 fa                	mov    edx,edi
c001e0fd:	88 c1                	mov    cl,al
c001e0ff:	d3 ea                	shr    edx,cl
c001e101:	09 da                	or     edx,ebx
c001e103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e107:	89 f1                	mov    ecx,esi
c001e109:	d3 e7                	shl    edi,cl
c001e10b:	89 eb                	mov    ebx,ebp
c001e10d:	88 c1                	mov    cl,al
c001e10f:	d3 eb                	shr    ebx,cl
c001e111:	89 f1                	mov    ecx,esi
c001e113:	d3 e5                	shl    ebp,cl
c001e115:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e118:	88 c1                	mov    cl,al
c001e11a:	d3 ea                	shr    edx,cl
c001e11c:	09 d5                	or     ebp,edx
c001e11e:	89 e8                	mov    eax,ebp
c001e120:	89 da                	mov    edx,ebx
c001e122:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e126:	89 d3                	mov    ebx,edx
c001e128:	89 c5                	mov    ebp,eax
c001e12a:	f7 e7                	mul    edi
c001e12c:	39 d3                	cmp    ebx,edx
c001e12e:	72 18                	jb     c001e148 <__divdi3+0x138>
c001e130:	74 0a                	je     c001e13c <__divdi3+0x12c>
c001e132:	89 e9                	mov    ecx,ebp
c001e134:	31 f6                	xor    esi,esi
c001e136:	e9 2d ff ff ff       	jmp    c001e068 <__divdi3+0x58>
c001e13b:	90                   	nop
c001e13c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e13f:	89 f1                	mov    ecx,esi
c001e141:	d3 e7                	shl    edi,cl
c001e143:	39 c7                	cmp    edi,eax
c001e145:	73 eb                	jae    c001e132 <__divdi3+0x122>
c001e147:	90                   	nop
c001e148:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e14b:	31 f6                	xor    esi,esi
c001e14d:	e9 16 ff ff ff       	jmp    c001e068 <__divdi3+0x58>
c001e152:	66 90                	xchg   ax,ax
c001e154:	31 c9                	xor    ecx,ecx
c001e156:	e9 0d ff ff ff       	jmp    c001e068 <__divdi3+0x58>
c001e15b:	90                   	nop

c001e15c <__moddi3>:
c001e15c:	55                   	push   ebp
c001e15d:	57                   	push   edi
c001e15e:	56                   	push   esi
c001e15f:	53                   	push   ebx
c001e160:	83 ec 2c             	sub    esp,0x2c
c001e163:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e167:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e16b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e16f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e173:	85 db                	test   ebx,ebx
c001e175:	0f 88 85 00 00 00    	js     c001e200 <__moddi3+0xa4>
c001e17b:	89 de                	mov    esi,ebx
c001e17d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e185:	89 d7                	mov    edi,edx
c001e187:	85 d2                	test   edx,edx
c001e189:	79 09                	jns    c001e194 <__moddi3+0x38>
c001e18b:	f7 d8                	neg    eax
c001e18d:	83 d2 00             	adc    edx,0x0
c001e190:	f7 da                	neg    edx
c001e192:	89 d7                	mov    edi,edx
c001e194:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e198:	89 cd                	mov    ebp,ecx
c001e19a:	85 ff                	test   edi,edi
c001e19c:	75 52                	jne    c001e1f0 <__moddi3+0x94>
c001e19e:	89 c3                	mov    ebx,eax
c001e1a0:	39 f0                	cmp    eax,esi
c001e1a2:	76 24                	jbe    c001e1c8 <__moddi3+0x6c>
c001e1a4:	89 c8                	mov    eax,ecx
c001e1a6:	89 f2                	mov    edx,esi
c001e1a8:	f7 f3                	div    ebx
c001e1aa:	89 d6                	mov    esi,edx
c001e1ac:	89 f0                	mov    eax,esi
c001e1ae:	31 d2                	xor    edx,edx
c001e1b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1b4:	85 c9                	test   ecx,ecx
c001e1b6:	74 07                	je     c001e1bf <__moddi3+0x63>
c001e1b8:	f7 d8                	neg    eax
c001e1ba:	83 d2 00             	adc    edx,0x0
c001e1bd:	f7 da                	neg    edx
c001e1bf:	83 c4 2c             	add    esp,0x2c
c001e1c2:	5b                   	pop    ebx
c001e1c3:	5e                   	pop    esi
c001e1c4:	5f                   	pop    edi
c001e1c5:	5d                   	pop    ebp
c001e1c6:	c3                   	ret    
c001e1c7:	90                   	nop
c001e1c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e1cc:	85 db                	test   ebx,ebx
c001e1ce:	75 0d                	jne    c001e1dd <__moddi3+0x81>
c001e1d0:	b8 01 00 00 00       	mov    eax,0x1
c001e1d5:	31 d2                	xor    edx,edx
c001e1d7:	f7 f7                	div    edi
c001e1d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1dd:	89 f0                	mov    eax,esi
c001e1df:	31 d2                	xor    edx,edx
c001e1e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e1e5:	f7 f7                	div    edi
c001e1e7:	89 e8                	mov    eax,ebp
c001e1e9:	f7 f7                	div    edi
c001e1eb:	89 d6                	mov    esi,edx
c001e1ed:	eb bd                	jmp    c001e1ac <__moddi3+0x50>
c001e1ef:	90                   	nop
c001e1f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e1f4:	39 f7                	cmp    edi,esi
c001e1f6:	76 20                	jbe    c001e218 <__moddi3+0xbc>
c001e1f8:	89 c8                	mov    eax,ecx
c001e1fa:	89 f2                	mov    edx,esi
c001e1fc:	eb b2                	jmp    c001e1b0 <__moddi3+0x54>
c001e1fe:	66 90                	xchg   ax,ax
c001e200:	f7 d9                	neg    ecx
c001e202:	83 d3 00             	adc    ebx,0x0
c001e205:	f7 db                	neg    ebx
c001e207:	89 de                	mov    esi,ebx
c001e209:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e211:	e9 6f ff ff ff       	jmp    c001e185 <__moddi3+0x29>
c001e216:	66 90                	xchg   ax,ax
c001e218:	0f bd c7             	bsr    eax,edi
c001e21b:	83 f0 1f             	xor    eax,0x1f
c001e21e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e222:	75 24                	jne    c001e248 <__moddi3+0xec>
c001e224:	39 f7                	cmp    edi,esi
c001e226:	72 06                	jb     c001e22e <__moddi3+0xd2>
c001e228:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e22c:	77 0c                	ja     c001e23a <__moddi3+0xde>
c001e22e:	89 e9                	mov    ecx,ebp
c001e230:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e234:	19 fe                	sbb    esi,edi
c001e236:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e23a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e23e:	89 f2                	mov    edx,esi
c001e240:	e9 6b ff ff ff       	jmp    c001e1b0 <__moddi3+0x54>
c001e245:	8d 76 00             	lea    esi,[esi+0x0]
c001e248:	b8 20 00 00 00       	mov    eax,0x20
c001e24d:	89 c2                	mov    edx,eax
c001e24f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e253:	29 da                	sub    edx,ebx
c001e255:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e259:	88 d9                	mov    cl,bl
c001e25b:	d3 e7                	shl    edi,cl
c001e25d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e261:	88 d1                	mov    cl,dl
c001e263:	d3 e8                	shr    eax,cl
c001e265:	09 c7                	or     edi,eax
c001e267:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e26b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e26f:	89 d8                	mov    eax,ebx
c001e271:	88 d9                	mov    cl,bl
c001e273:	d3 e7                	shl    edi,cl
c001e275:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e279:	89 f3                	mov    ebx,esi
c001e27b:	88 d1                	mov    cl,dl
c001e27d:	d3 eb                	shr    ebx,cl
c001e27f:	89 c7                	mov    edi,eax
c001e281:	88 c1                	mov    cl,al
c001e283:	d3 e6                	shl    esi,cl
c001e285:	89 e8                	mov    eax,ebp
c001e287:	88 d1                	mov    cl,dl
c001e289:	d3 e8                	shr    eax,cl
c001e28b:	09 f0                	or     eax,esi
c001e28d:	89 f9                	mov    ecx,edi
c001e28f:	d3 e5                	shl    ebp,cl
c001e291:	89 da                	mov    edx,ebx
c001e293:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e297:	89 d3                	mov    ebx,edx
c001e299:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e29d:	89 c6                	mov    esi,eax
c001e29f:	89 d1                	mov    ecx,edx
c001e2a1:	39 d3                	cmp    ebx,edx
c001e2a3:	72 27                	jb     c001e2cc <__moddi3+0x170>
c001e2a5:	74 21                	je     c001e2c8 <__moddi3+0x16c>
c001e2a7:	29 f5                	sub    ebp,esi
c001e2a9:	19 cb                	sbb    ebx,ecx
c001e2ab:	89 de                	mov    esi,ebx
c001e2ad:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e2b1:	d3 e6                	shl    esi,cl
c001e2b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e2b7:	89 f9                	mov    ecx,edi
c001e2b9:	d3 ed                	shr    ebp,cl
c001e2bb:	09 ee                	or     esi,ebp
c001e2bd:	89 f0                	mov    eax,esi
c001e2bf:	d3 eb                	shr    ebx,cl
c001e2c1:	89 da                	mov    edx,ebx
c001e2c3:	e9 e8 fe ff ff       	jmp    c001e1b0 <__moddi3+0x54>
c001e2c8:	39 c5                	cmp    ebp,eax
c001e2ca:	73 db                	jae    c001e2a7 <__moddi3+0x14b>
c001e2cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e2d0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e2d4:	89 d1                	mov    ecx,edx
c001e2d6:	89 c6                	mov    esi,eax
c001e2d8:	eb cd                	jmp    c001e2a7 <__moddi3+0x14b>
c001e2da:	66 90                	xchg   ax,ax

c001e2dc <__udivdi3>:
c001e2dc:	55                   	push   ebp
c001e2dd:	57                   	push   edi
c001e2de:	56                   	push   esi
c001e2df:	53                   	push   ebx
c001e2e0:	83 ec 1c             	sub    esp,0x1c
c001e2e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e2e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e2eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e2ef:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e2f3:	85 d2                	test   edx,edx
c001e2f5:	75 41                	jne    c001e338 <__udivdi3+0x5c>
c001e2f7:	39 f7                	cmp    edi,esi
c001e2f9:	76 15                	jbe    c001e310 <__udivdi3+0x34>
c001e2fb:	89 e8                	mov    eax,ebp
c001e2fd:	89 f2                	mov    edx,esi
c001e2ff:	f7 f7                	div    edi
c001e301:	31 db                	xor    ebx,ebx
c001e303:	89 da                	mov    edx,ebx
c001e305:	83 c4 1c             	add    esp,0x1c
c001e308:	5b                   	pop    ebx
c001e309:	5e                   	pop    esi
c001e30a:	5f                   	pop    edi
c001e30b:	5d                   	pop    ebp
c001e30c:	c3                   	ret    
c001e30d:	8d 76 00             	lea    esi,[esi+0x0]
c001e310:	89 f9                	mov    ecx,edi
c001e312:	85 ff                	test   edi,edi
c001e314:	75 0b                	jne    c001e321 <__udivdi3+0x45>
c001e316:	b8 01 00 00 00       	mov    eax,0x1
c001e31b:	31 d2                	xor    edx,edx
c001e31d:	f7 f7                	div    edi
c001e31f:	89 c1                	mov    ecx,eax
c001e321:	31 d2                	xor    edx,edx
c001e323:	89 f0                	mov    eax,esi
c001e325:	f7 f1                	div    ecx
c001e327:	89 c3                	mov    ebx,eax
c001e329:	89 e8                	mov    eax,ebp
c001e32b:	f7 f1                	div    ecx
c001e32d:	89 da                	mov    edx,ebx
c001e32f:	83 c4 1c             	add    esp,0x1c
c001e332:	5b                   	pop    ebx
c001e333:	5e                   	pop    esi
c001e334:	5f                   	pop    edi
c001e335:	5d                   	pop    ebp
c001e336:	c3                   	ret    
c001e337:	90                   	nop
c001e338:	39 f2                	cmp    edx,esi
c001e33a:	77 1c                	ja     c001e358 <__udivdi3+0x7c>
c001e33c:	0f bd da             	bsr    ebx,edx
c001e33f:	83 f3 1f             	xor    ebx,0x1f
c001e342:	75 24                	jne    c001e368 <__udivdi3+0x8c>
c001e344:	39 f2                	cmp    edx,esi
c001e346:	72 08                	jb     c001e350 <__udivdi3+0x74>
c001e348:	39 ef                	cmp    edi,ebp
c001e34a:	0f 87 84 00 00 00    	ja     c001e3d4 <__udivdi3+0xf8>
c001e350:	b8 01 00 00 00       	mov    eax,0x1
c001e355:	eb ac                	jmp    c001e303 <__udivdi3+0x27>
c001e357:	90                   	nop
c001e358:	31 db                	xor    ebx,ebx
c001e35a:	31 c0                	xor    eax,eax
c001e35c:	89 da                	mov    edx,ebx
c001e35e:	83 c4 1c             	add    esp,0x1c
c001e361:	5b                   	pop    ebx
c001e362:	5e                   	pop    esi
c001e363:	5f                   	pop    edi
c001e364:	5d                   	pop    ebp
c001e365:	c3                   	ret    
c001e366:	66 90                	xchg   ax,ax
c001e368:	b8 20 00 00 00       	mov    eax,0x20
c001e36d:	29 d8                	sub    eax,ebx
c001e36f:	88 d9                	mov    cl,bl
c001e371:	d3 e2                	shl    edx,cl
c001e373:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e377:	89 fa                	mov    edx,edi
c001e379:	88 c1                	mov    cl,al
c001e37b:	d3 ea                	shr    edx,cl
c001e37d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e381:	09 d1                	or     ecx,edx
c001e383:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e387:	88 d9                	mov    cl,bl
c001e389:	d3 e7                	shl    edi,cl
c001e38b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e38f:	89 f7                	mov    edi,esi
c001e391:	88 c1                	mov    cl,al
c001e393:	d3 ef                	shr    edi,cl
c001e395:	88 d9                	mov    cl,bl
c001e397:	d3 e6                	shl    esi,cl
c001e399:	89 ea                	mov    edx,ebp
c001e39b:	88 c1                	mov    cl,al
c001e39d:	d3 ea                	shr    edx,cl
c001e39f:	09 d6                	or     esi,edx
c001e3a1:	89 f0                	mov    eax,esi
c001e3a3:	89 fa                	mov    edx,edi
c001e3a5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e3a9:	89 d7                	mov    edi,edx
c001e3ab:	89 c6                	mov    esi,eax
c001e3ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e3b1:	39 d7                	cmp    edi,edx
c001e3b3:	72 13                	jb     c001e3c8 <__udivdi3+0xec>
c001e3b5:	74 09                	je     c001e3c0 <__udivdi3+0xe4>
c001e3b7:	89 f0                	mov    eax,esi
c001e3b9:	31 db                	xor    ebx,ebx
c001e3bb:	e9 43 ff ff ff       	jmp    c001e303 <__udivdi3+0x27>
c001e3c0:	88 d9                	mov    cl,bl
c001e3c2:	d3 e5                	shl    ebp,cl
c001e3c4:	39 c5                	cmp    ebp,eax
c001e3c6:	73 ef                	jae    c001e3b7 <__udivdi3+0xdb>
c001e3c8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e3cb:	31 db                	xor    ebx,ebx
c001e3cd:	e9 31 ff ff ff       	jmp    c001e303 <__udivdi3+0x27>
c001e3d2:	66 90                	xchg   ax,ax
c001e3d4:	31 c0                	xor    eax,eax
c001e3d6:	e9 28 ff ff ff       	jmp    c001e303 <__udivdi3+0x27>
c001e3db:	90                   	nop

c001e3dc <__umoddi3>:
c001e3dc:	55                   	push   ebp
c001e3dd:	57                   	push   edi
c001e3de:	56                   	push   esi
c001e3df:	53                   	push   ebx
c001e3e0:	83 ec 1c             	sub    esp,0x1c
c001e3e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e3e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e3ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e3f3:	89 da                	mov    edx,ebx
c001e3f5:	85 c0                	test   eax,eax
c001e3f7:	75 37                	jne    c001e430 <__umoddi3+0x54>
c001e3f9:	39 df                	cmp    edi,ebx
c001e3fb:	76 13                	jbe    c001e410 <__umoddi3+0x34>
c001e3fd:	89 f0                	mov    eax,esi
c001e3ff:	f7 f7                	div    edi
c001e401:	89 d0                	mov    eax,edx
c001e403:	31 d2                	xor    edx,edx
c001e405:	83 c4 1c             	add    esp,0x1c
c001e408:	5b                   	pop    ebx
c001e409:	5e                   	pop    esi
c001e40a:	5f                   	pop    edi
c001e40b:	5d                   	pop    ebp
c001e40c:	c3                   	ret    
c001e40d:	8d 76 00             	lea    esi,[esi+0x0]
c001e410:	89 fd                	mov    ebp,edi
c001e412:	85 ff                	test   edi,edi
c001e414:	75 0b                	jne    c001e421 <__umoddi3+0x45>
c001e416:	b8 01 00 00 00       	mov    eax,0x1
c001e41b:	31 d2                	xor    edx,edx
c001e41d:	f7 f7                	div    edi
c001e41f:	89 c5                	mov    ebp,eax
c001e421:	89 d8                	mov    eax,ebx
c001e423:	31 d2                	xor    edx,edx
c001e425:	f7 f5                	div    ebp
c001e427:	89 f0                	mov    eax,esi
c001e429:	f7 f5                	div    ebp
c001e42b:	89 d0                	mov    eax,edx
c001e42d:	eb d4                	jmp    c001e403 <__umoddi3+0x27>
c001e42f:	90                   	nop
c001e430:	89 f1                	mov    ecx,esi
c001e432:	39 d8                	cmp    eax,ebx
c001e434:	76 0a                	jbe    c001e440 <__umoddi3+0x64>
c001e436:	89 f0                	mov    eax,esi
c001e438:	83 c4 1c             	add    esp,0x1c
c001e43b:	5b                   	pop    ebx
c001e43c:	5e                   	pop    esi
c001e43d:	5f                   	pop    edi
c001e43e:	5d                   	pop    ebp
c001e43f:	c3                   	ret    
c001e440:	0f bd e8             	bsr    ebp,eax
c001e443:	83 f5 1f             	xor    ebp,0x1f
c001e446:	75 1c                	jne    c001e464 <__umoddi3+0x88>
c001e448:	39 d8                	cmp    eax,ebx
c001e44a:	72 04                	jb     c001e450 <__umoddi3+0x74>
c001e44c:	39 f7                	cmp    edi,esi
c001e44e:	77 08                	ja     c001e458 <__umoddi3+0x7c>
c001e450:	89 da                	mov    edx,ebx
c001e452:	29 fe                	sub    esi,edi
c001e454:	19 c2                	sbb    edx,eax
c001e456:	89 f1                	mov    ecx,esi
c001e458:	89 c8                	mov    eax,ecx
c001e45a:	83 c4 1c             	add    esp,0x1c
c001e45d:	5b                   	pop    ebx
c001e45e:	5e                   	pop    esi
c001e45f:	5f                   	pop    edi
c001e460:	5d                   	pop    ebp
c001e461:	c3                   	ret    
c001e462:	66 90                	xchg   ax,ax
c001e464:	ba 20 00 00 00       	mov    edx,0x20
c001e469:	29 ea                	sub    edx,ebp
c001e46b:	89 e9                	mov    ecx,ebp
c001e46d:	d3 e0                	shl    eax,cl
c001e46f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e473:	89 f8                	mov    eax,edi
c001e475:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e479:	88 d1                	mov    cl,dl
c001e47b:	d3 e8                	shr    eax,cl
c001e47d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e481:	09 c1                	or     ecx,eax
c001e483:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e487:	89 e9                	mov    ecx,ebp
c001e489:	d3 e7                	shl    edi,cl
c001e48b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e48f:	89 d8                	mov    eax,ebx
c001e491:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e495:	88 d1                	mov    cl,dl
c001e497:	d3 e8                	shr    eax,cl
c001e499:	89 c7                	mov    edi,eax
c001e49b:	89 e9                	mov    ecx,ebp
c001e49d:	d3 e3                	shl    ebx,cl
c001e49f:	89 f0                	mov    eax,esi
c001e4a1:	88 d1                	mov    cl,dl
c001e4a3:	d3 e8                	shr    eax,cl
c001e4a5:	09 d8                	or     eax,ebx
c001e4a7:	89 e9                	mov    ecx,ebp
c001e4a9:	d3 e6                	shl    esi,cl
c001e4ab:	89 f3                	mov    ebx,esi
c001e4ad:	89 fa                	mov    edx,edi
c001e4af:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e4b3:	89 d1                	mov    ecx,edx
c001e4b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e4b9:	89 c6                	mov    esi,eax
c001e4bb:	89 d7                	mov    edi,edx
c001e4bd:	39 d1                	cmp    ecx,edx
c001e4bf:	72 27                	jb     c001e4e8 <__umoddi3+0x10c>
c001e4c1:	74 21                	je     c001e4e4 <__umoddi3+0x108>
c001e4c3:	89 ca                	mov    edx,ecx
c001e4c5:	29 f3                	sub    ebx,esi
c001e4c7:	19 fa                	sbb    edx,edi
c001e4c9:	89 d0                	mov    eax,edx
c001e4cb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e4cf:	d3 e0                	shl    eax,cl
c001e4d1:	89 e9                	mov    ecx,ebp
c001e4d3:	d3 eb                	shr    ebx,cl
c001e4d5:	09 d8                	or     eax,ebx
c001e4d7:	d3 ea                	shr    edx,cl
c001e4d9:	83 c4 1c             	add    esp,0x1c
c001e4dc:	5b                   	pop    ebx
c001e4dd:	5e                   	pop    esi
c001e4de:	5f                   	pop    edi
c001e4df:	5d                   	pop    ebp
c001e4e0:	c3                   	ret    
c001e4e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e4e4:	39 c3                	cmp    ebx,eax
c001e4e6:	73 db                	jae    c001e4c3 <__umoddi3+0xe7>
c001e4e8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e4ec:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e4f0:	89 d7                	mov    edi,edx
c001e4f2:	89 c6                	mov    esi,eax
c001e4f4:	eb cd                	jmp    c001e4c3 <__umoddi3+0xe7>
c001e4f6:	66 90                	xchg   ax,ax
c001e4f8:	66 90                	xchg   ax,ax
c001e4fa:	66 90                	xchg   ax,ax
c001e4fc:	66 90                	xchg   ax,ax
c001e4fe:	66 90                	xchg   ax,ax

c001e500 <fabs>:
c001e500:	83 ec 0c             	sub    esp,0xc
c001e503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e507:	89 04 24             	mov    DWORD PTR [esp],eax
c001e50a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e50e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e513:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e517:	dd 04 24             	fld    QWORD PTR [esp]
c001e51a:	83 c4 0c             	add    esp,0xc
c001e51d:	c3                   	ret    
c001e51e:	66 90                	xchg   ax,ax

c001e520 <lrint>:
c001e520:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e524:	83 ec 04             	sub    esp,0x4
c001e527:	db 1c 24             	fistp  DWORD PTR [esp]
c001e52a:	58                   	pop    eax
c001e52b:	c3                   	ret    

c001e52c <lrintf>:
c001e52c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e530:	83 ec 04             	sub    esp,0x4
c001e533:	db 1c 24             	fistp  DWORD PTR [esp]
c001e536:	58                   	pop    eax
c001e537:	c3                   	ret    

Disassembly of section .init:

c001e538 <_init>:
c001e538:	55                   	push   ebp
c001e539:	89 e5                	mov    ebp,esp
c001e53b:	e8 d8 1b fe ff       	call   c0000118 <frame_dummy>
c001e540:	e8 a3 fa ff ff       	call   c001dfe8 <__do_global_ctors_aux>
c001e545:	5d                   	pop    ebp
c001e546:	c3                   	ret    

Disassembly of section .fini:

c001e547 <_fini>:
c001e547:	55                   	push   ebp
c001e548:	89 e5                	mov    ebp,esp
c001e54a:	e8 59 1b fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e54f:	5d                   	pop    ebp
c001e550:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e552 <Computer::~Computer()>:
c001e552:	83 ec 0c             	sub    esp,0xc
c001e555:	ba 18 ff 01 c0       	mov    edx,0xc001ff18
c001e55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e55e:	89 10                	mov    DWORD PTR [eax],edx
c001e560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e564:	83 ec 0c             	sub    esp,0xc
c001e567:	50                   	push   eax
c001e568:	e8 8f 1a ff ff       	call   c000fffc <Device::~Device()>
c001e56d:	83 c4 10             	add    esp,0x10
c001e570:	90                   	nop
c001e571:	83 c4 0c             	add    esp,0xc
c001e574:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e576 <Computer::~Computer()>:
c001e576:	83 ec 0c             	sub    esp,0xc
c001e579:	83 ec 0c             	sub    esp,0xc
c001e57c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e580:	e8 cd ff ff ff       	call   c001e552 <Computer::~Computer()>
c001e585:	83 c4 10             	add    esp,0x10
c001e588:	83 ec 08             	sub    esp,0x8
c001e58b:	68 ec 01 00 00       	push   0x1ec
c001e590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e594:	e8 d6 06 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001e599:	83 c4 10             	add    esp,0x10
c001e59c:	83 c4 0c             	add    esp,0xc
c001e59f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e5a0 <idleCommon()>:
c001e5a0:	83 ec 0c             	sub    esp,0xc
c001e5a3:	e8 88 93 ff ff       	call   c0017930 <lockScheduler()>
c001e5a8:	e8 b7 96 ff ff       	call   c0017c64 <schedule()>
c001e5ad:	83 c4 0c             	add    esp,0xc
c001e5b0:	e9 7d 93 ff ff       	jmp    c0017932 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e5b5 <CPU::readCR3()>:
c001e5b5:	83 ec 10             	sub    esp,0x10
c001e5b8:	0f 20 d8             	mov    eax,cr3
c001e5bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5c3:	83 c4 10             	add    esp,0x10
c001e5c6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e5c7 <CPU::writeCR3(unsigned long)>:
c001e5c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5cb:	0f 22 d8             	mov    cr3,eax
c001e5ce:	90                   	nop
c001e5cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e5d0 <LinkedList<UnixFile>::~LinkedList()>:
c001e5d0:	90                   	nop
c001e5d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e5d2 <LinkedList<UnixFile>::LinkedList()>:
c001e5d2:	83 ec 0c             	sub    esp,0xc
c001e5d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e603:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e60e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e615:	83 ec 0c             	sub    esp,0xc
c001e618:	68 01 02 02 c0       	push   0xc0020201
c001e61d:	e8 2d 07 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001e622:	83 c4 10             	add    esp,0x10
c001e625:	90                   	nop
c001e626:	83 c4 0c             	add    esp,0xc
c001e629:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e62a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e62a:	83 ec 0c             	sub    esp,0xc
c001e62d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e632:	75 10                	jne    c001e644 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e634:	83 ec 0c             	sub    esp,0xc
c001e637:	68 1c 02 02 c0       	push   0xc002021c
c001e63c:	e8 a3 63 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e641:	83 c4 10             	add    esp,0x10
c001e644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e648:	8b 00                	mov    eax,DWORD PTR [eax]
c001e64a:	85 c0                	test   eax,eax
c001e64c:	74 34                	je     c001e682 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e655:	85 c0                	test   eax,eax
c001e657:	74 29                	je     c001e682 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e65d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e664:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e66b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e66f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e676:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e679:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e680:	eb 65                	jmp    c001e6e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e686:	8b 00                	mov    eax,DWORD PTR [eax]
c001e688:	85 c0                	test   eax,eax
c001e68a:	75 4b                	jne    c001e6d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e693:	85 c0                	test   eax,eax
c001e695:	75 40                	jne    c001e6d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e69f:	89 10                	mov    DWORD PTR [eax],edx
c001e6a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6b3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6c1:	85 c0                	test   eax,eax
c001e6c3:	74 22                	je     c001e6e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e6c5:	83 ec 0c             	sub    esp,0xc
c001e6c8:	68 3e 02 02 c0       	push   0xc002023e
c001e6cd:	e8 12 63 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e6d2:	83 c4 10             	add    esp,0x10
c001e6d5:	eb 10                	jmp    c001e6e7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e6d7:	83 ec 0c             	sub    esp,0xc
c001e6da:	68 48 02 02 c0       	push   0xc0020248
c001e6df:	e8 00 63 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e6e4:	83 c4 10             	add    esp,0x10
c001e6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6ee:	8d 50 01             	lea    edx,[eax+0x1]
c001e6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e6f8:	90                   	nop
c001e6f9:	83 c4 0c             	add    esp,0xc
c001e6fc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e6fe <LinkedList<UnixFile>::getFirstElement()>:
c001e6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e702:	8b 00                	mov    eax,DWORD PTR [eax]
c001e704:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e706 <LinkedList<UnixFile>::removeFirst()>:
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e70d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e70f:	85 c0                	test   eax,eax
c001e711:	75 12                	jne    c001e725 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e713:	83 ec 0c             	sub    esp,0xc
c001e716:	68 54 02 02 c0       	push   0xc0020254
c001e71b:	e8 c4 62 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e720:	83 c4 10             	add    esp,0x10
c001e723:	eb 7e                	jmp    c001e7a3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e729:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e72c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e72f:	85 c0                	test   eax,eax
c001e731:	74 10                	je     c001e743 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e733:	83 ec 0c             	sub    esp,0xc
c001e736:	68 9f 02 02 c0       	push   0xc002029f
c001e73b:	e8 a4 62 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e740:	83 c4 10             	add    esp,0x10
c001e743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e747:	8b 00                	mov    eax,DWORD PTR [eax]
c001e749:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e74c:	85 c0                	test   eax,eax
c001e74e:	75 33                	jne    c001e783 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e754:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e75e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e769:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e76c:	83 f8 01             	cmp    eax,0x1
c001e76f:	74 21                	je     c001e792 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e771:	83 ec 0c             	sub    esp,0xc
c001e774:	68 78 02 02 c0       	push   0xc0020278
c001e779:	e8 66 62 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e77e:	83 c4 10             	add    esp,0x10
c001e781:	eb 0f                	jmp    c001e792 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e787:	8b 00                	mov    eax,DWORD PTR [eax]
c001e789:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e790:	89 10                	mov    DWORD PTR [eax],edx
c001e792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e796:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e799:	8d 50 ff             	lea    edx,[eax-0x1]
c001e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e7a3:	83 c4 0c             	add    esp,0xc
c001e7a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e7a8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e7a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e7b0 <DriverlessDevice::~DriverlessDevice()>:
c001e7b0:	ba 24 09 02 c0       	mov    edx,0xc0020924
c001e7b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7b9:	89 10                	mov    DWORD PTR [eax],edx
c001e7bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7bf:	50                   	push   eax
c001e7c0:	e8 37 18 ff ff       	call   c000fffc <Device::~Device()>
c001e7c5:	83 c4 04             	add    esp,0x4
c001e7c8:	90                   	nop
c001e7c9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e7ca <DriverlessDevice::~DriverlessDevice()>:
c001e7ca:	83 ec 0c             	sub    esp,0xc
c001e7cd:	83 ec 0c             	sub    esp,0xc
c001e7d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7d4:	e8 d7 ff ff ff       	call   c001e7b0 <DriverlessDevice::~DriverlessDevice()>
c001e7d9:	83 c4 10             	add    esp,0x10
c001e7dc:	83 ec 08             	sub    esp,0x8
c001e7df:	68 58 01 00 00       	push   0x158
c001e7e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e8:	e8 82 04 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001e7ed:	83 c4 10             	add    esp,0x10
c001e7f0:	83 c4 0c             	add    esp,0xc
c001e7f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e7f4 <LinkedList<Device>::addElement(Device*)>:
c001e7f4:	83 ec 0c             	sub    esp,0xc
c001e7f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e7fc:	75 10                	jne    c001e80e <LinkedList<Device>::addElement(Device*)+0x1a>
c001e7fe:	83 ec 0c             	sub    esp,0xc
c001e801:	68 1c 02 02 c0       	push   0xc002021c
c001e806:	e8 d9 61 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e812:	8b 00                	mov    eax,DWORD PTR [eax]
c001e814:	85 c0                	test   eax,eax
c001e816:	74 3a                	je     c001e852 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e81c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e81f:	85 c0                	test   eax,eax
c001e821:	74 2f                	je     c001e852 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e827:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e82a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e82e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e838:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e83c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e843:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e846:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e850:	eb 68                	jmp    c001e8ba <LinkedList<Device>::addElement(Device*)+0xc6>
c001e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e856:	8b 00                	mov    eax,DWORD PTR [eax]
c001e858:	85 c0                	test   eax,eax
c001e85a:	75 4e                	jne    c001e8aa <LinkedList<Device>::addElement(Device*)+0xb6>
c001e85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e860:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e863:	85 c0                	test   eax,eax
c001e865:	75 43                	jne    c001e8aa <LinkedList<Device>::addElement(Device*)+0xb6>
c001e867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e86b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e86f:	89 10                	mov    DWORD PTR [eax],edx
c001e871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e875:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e879:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e883:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e891:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e894:	85 c0                	test   eax,eax
c001e896:	74 22                	je     c001e8ba <LinkedList<Device>::addElement(Device*)+0xc6>
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	68 3e 02 02 c0       	push   0xc002023e
c001e8a0:	e8 3f 61 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	eb 10                	jmp    c001e8ba <LinkedList<Device>::addElement(Device*)+0xc6>
c001e8aa:	83 ec 0c             	sub    esp,0xc
c001e8ad:	68 48 02 02 c0       	push   0xc0020248
c001e8b2:	e8 2d 61 ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e8b7:	83 c4 10             	add    esp,0x10
c001e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8c1:	8d 50 01             	lea    edx,[eax+0x1]
c001e8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8cb:	90                   	nop
c001e8cc:	83 c4 0c             	add    esp,0xc
c001e8cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e8d0 <LinkedList<Device>::LinkedList()>:
c001e8d0:	83 ec 0c             	sub    esp,0xc
c001e8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e901:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	68 01 02 02 c0       	push   0xc0020201
c001e91b:	e8 2f 04 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	90                   	nop
c001e924:	83 c4 0c             	add    esp,0xc
c001e927:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e928 <CPU::readCR0()>:
c001e928:	83 ec 10             	sub    esp,0x10
c001e92b:	0f 20 c0             	mov    eax,cr0
c001e92e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e936:	83 c4 10             	add    esp,0x10
c001e939:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001e93a <CPU::writeCR0(unsigned long)>:
c001e93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e93e:	0f 22 c0             	mov    cr0,eax
c001e941:	90                   	nop
c001e942:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001e943 <CPU::readDR0()>:
c001e943:	83 ec 10             	sub    esp,0x10
c001e946:	0f 21 c0             	mov    eax,db0
c001e949:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e94d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001e955 <CPU::readDR1()>:
c001e955:	83 ec 10             	sub    esp,0x10
c001e958:	0f 21 c8             	mov    eax,db1
c001e95b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e95f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e963:	83 c4 10             	add    esp,0x10
c001e966:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001e967 <CPU::readDR2()>:
c001e967:	83 ec 10             	sub    esp,0x10
c001e96a:	0f 21 d0             	mov    eax,db2
c001e96d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e975:	83 c4 10             	add    esp,0x10
c001e978:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001e979 <CPU::readDR3()>:
c001e979:	83 ec 10             	sub    esp,0x10
c001e97c:	0f 21 d8             	mov    eax,db3
c001e97f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001e98b <CPU::readDR6()>:
c001e98b:	83 ec 10             	sub    esp,0x10
c001e98e:	0f 21 f0             	mov    eax,db6
c001e991:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001e99d <CPU::readDR7()>:
c001e99d:	83 ec 10             	sub    esp,0x10
c001e9a0:	0f 21 f8             	mov    eax,db7
c001e9a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9ab:	83 c4 10             	add    esp,0x10
c001e9ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e9b0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e9b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e9b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9be:	85 c0                	test   eax,eax
c001e9c0:	75 0e                	jne    c001e9d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9c9:	85 c0                	test   eax,eax
c001e9cb:	75 03                	jne    c001e9d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e9cd:	b0 01                	mov    al,0x1
c001e9cf:	c3                   	ret    
c001e9d0:	b0 00                	mov    al,0x0
c001e9d2:	90                   	nop
c001e9d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e9d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9db:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9dd:	85 c0                	test   eax,eax
c001e9df:	75 15                	jne    c001e9f6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	68 54 02 02 c0       	push   0xc0020254
c001e9e9:	e8 f6 5f ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	e9 88 00 00 00       	jmp    c001ea7e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e9f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ea00:	85 c0                	test   eax,eax
c001ea02:	0f 95 c0             	setne  al
c001ea05:	84 c0                	test   al,al
c001ea07:	74 10                	je     c001ea19 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ea09:	83 ec 0c             	sub    esp,0xc
c001ea0c:	68 9f 02 02 c0       	push   0xc002029f
c001ea11:	e8 ce 5f ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001ea16:	83 c4 10             	add    esp,0x10
c001ea19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ea22:	85 c0                	test   eax,eax
c001ea24:	0f 94 c0             	sete   al
c001ea27:	84 c0                	test   al,al
c001ea29:	74 33                	je     c001ea5e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ea2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea47:	83 f8 01             	cmp    eax,0x1
c001ea4a:	74 21                	je     c001ea6d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ea4c:	83 ec 0c             	sub    esp,0xc
c001ea4f:	68 78 02 02 c0       	push   0xc0020278
c001ea54:	e8 8b 5f ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001ea59:	83 c4 10             	add    esp,0x10
c001ea5c:	eb 0f                	jmp    c001ea6d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea62:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea64:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6b:	89 10                	mov    DWORD PTR [eax],edx
c001ea6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea74:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea7e:	83 c4 0c             	add    esp,0xc
c001ea81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ea82 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ea82:	83 ec 0c             	sub    esp,0xc
c001ea85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea8a:	75 10                	jne    c001ea9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	68 1c 02 02 c0       	push   0xc002021c
c001ea94:	e8 4b 5f ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa2:	85 c0                	test   eax,eax
c001eaa4:	74 34                	je     c001eada <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eaa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaad:	85 c0                	test   eax,eax
c001eaaf:	74 29                	je     c001eada <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eabc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eac7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ead8:	eb 65                	jmp    c001eb3f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eade:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae0:	85 c0                	test   eax,eax
c001eae2:	75 4b                	jne    c001eb2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaeb:	85 c0                	test   eax,eax
c001eaed:	75 40                	jne    c001eb2f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eaef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaf7:	89 10                	mov    DWORD PTR [eax],edx
c001eaf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb01:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb0b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb16:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb19:	85 c0                	test   eax,eax
c001eb1b:	74 22                	je     c001eb3f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb1d:	83 ec 0c             	sub    esp,0xc
c001eb20:	68 3e 02 02 c0       	push   0xc002023e
c001eb25:	e8 ba 5e ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001eb2a:	83 c4 10             	add    esp,0x10
c001eb2d:	eb 10                	jmp    c001eb3f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb2f:	83 ec 0c             	sub    esp,0xc
c001eb32:	68 48 02 02 c0       	push   0xc0020248
c001eb37:	e8 a8 5e ff ff       	call   c00149e4 <Krnl::panic(char const*)>
c001eb3c:	83 c4 10             	add    esp,0x10
c001eb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb46:	8d 50 01             	lea    edx,[eax+0x1]
c001eb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb50:	90                   	nop
c001eb51:	83 c4 0c             	add    esp,0xc
c001eb54:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001eb56 <ACPI::~ACPI()>:
c001eb56:	83 ec 0c             	sub    esp,0xc
c001eb59:	ba b0 10 02 c0       	mov    edx,0xc00210b0
c001eb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb62:	89 10                	mov    DWORD PTR [eax],edx
c001eb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	50                   	push   eax
c001eb6c:	e8 8b 14 ff ff       	call   c000fffc <Device::~Device()>
c001eb71:	83 c4 10             	add    esp,0x10
c001eb74:	90                   	nop
c001eb75:	83 c4 0c             	add    esp,0xc
c001eb78:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eb7a <ACPI::~ACPI()>:
c001eb7a:	83 ec 0c             	sub    esp,0xc
c001eb7d:	83 ec 0c             	sub    esp,0xc
c001eb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb84:	e8 cd ff ff ff       	call   c001eb56 <ACPI::~ACPI()>
c001eb89:	83 c4 10             	add    esp,0x10
c001eb8c:	83 ec 08             	sub    esp,0x8
c001eb8f:	68 68 22 00 00       	push   0x2268
c001eb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb98:	e8 d2 00 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001eb9d:	83 c4 10             	add    esp,0x10
c001eba0:	83 c4 0c             	add    esp,0xc
c001eba3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eba4 <CPU::~CPU()>:
c001eba4:	83 ec 0c             	sub    esp,0xc
c001eba7:	ba 00 13 02 c0       	mov    edx,0xc0021300
c001ebac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb0:	89 10                	mov    DWORD PTR [eax],edx
c001ebb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb6:	83 ec 0c             	sub    esp,0xc
c001ebb9:	50                   	push   eax
c001ebba:	e8 3d 14 ff ff       	call   c000fffc <Device::~Device()>
c001ebbf:	83 c4 10             	add    esp,0x10
c001ebc2:	90                   	nop
c001ebc3:	83 c4 0c             	add    esp,0xc
c001ebc6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ebc8 <CPU::~CPU()>:
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	83 ec 0c             	sub    esp,0xc
c001ebce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebd2:	e8 cd ff ff ff       	call   c001eba4 <CPU::~CPU()>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	83 ec 08             	sub    esp,0x8
c001ebdd:	68 98 11 00 00       	push   0x1198
c001ebe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebe6:	e8 84 00 ff ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001ebeb:	83 c4 10             	add    esp,0x10
c001ebee:	83 c4 0c             	add    esp,0xc
c001ebf1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001ebf2 <CPU::readCR4()>:
c001ebf2:	83 ec 10             	sub    esp,0x10
c001ebf5:	0f 20 e0             	mov    eax,cr4
c001ebf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec00:	83 c4 10             	add    esp,0x10
c001ec03:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001ec04 <CPU::writeDR7(unsigned long)>:
c001ec04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec08:	0f 23 f8             	mov    db7,eax
c001ec0b:	90                   	nop
c001ec0c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001ec0d <CPU::writeCR4(unsigned long)>:
c001ec0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec11:	0f 22 e0             	mov    cr4,eax
c001ec14:	90                   	nop
c001ec15:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001ec16 <CPU::readCR2()>:
c001ec16:	83 ec 10             	sub    esp,0x10
c001ec19:	0f 20 d0             	mov    eax,cr2
c001ec1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec24:	83 c4 10             	add    esp,0x10
c001ec27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ec28 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ec28:	90                   	nop
c001ec29:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ec2a <ThreadControlBlock::ThreadControlBlock()>:
c001ec2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec2e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ec35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec39:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ec40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec44:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ec4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ec56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec5a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec62:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ec66:	90                   	nop
c001ec67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ec68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ec68:	83 ec 0c             	sub    esp,0xc
c001ec6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecab:	83 ec 0c             	sub    esp,0xc
c001ecae:	68 01 02 02 c0       	push   0xc0020201
c001ecb3:	e8 97 00 ff ff       	call   c000ed4f <Dbg::kprintf(char const*, ...)>
c001ecb8:	83 c4 10             	add    esp,0x10
c001ecbb:	90                   	nop
c001ecbc:	83 c4 0c             	add    esp,0xc
c001ecbf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ecc0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ecc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecc4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ecc7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ecc8 <PCI::~PCI()>:
c001ecc8:	83 ec 0c             	sub    esp,0xc
c001eccb:	ba 40 20 02 c0       	mov    edx,0xc0022040
c001ecd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd4:	89 10                	mov    DWORD PTR [eax],edx
c001ecd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecda:	83 ec 0c             	sub    esp,0xc
c001ecdd:	50                   	push   eax
c001ecde:	e8 29 0d ff ff       	call   c000fa0c <Bus::~Bus()>
c001ece3:	83 c4 10             	add    esp,0x10
c001ece6:	90                   	nop
c001ece7:	83 c4 0c             	add    esp,0xc
c001ecea:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ecec <PCI::~PCI()>:
c001ecec:	83 ec 0c             	sub    esp,0xc
c001ecef:	83 ec 0c             	sub    esp,0xc
c001ecf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecf6:	e8 cd ff ff ff       	call   c001ecc8 <PCI::~PCI()>
c001ecfb:	83 c4 10             	add    esp,0x10
c001ecfe:	83 ec 08             	sub    esp,0x8
c001ed01:	68 58 01 00 00       	push   0x158
c001ed06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed0a:	e8 60 ff fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001ed0f:	83 c4 10             	add    esp,0x10
c001ed12:	83 c4 0c             	add    esp,0xc
c001ed15:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ed16 <IDE::~IDE()>:
c001ed16:	83 ec 0c             	sub    esp,0xc
c001ed19:	ba a4 22 02 c0       	mov    edx,0xc00222a4
c001ed1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed22:	89 10                	mov    DWORD PTR [eax],edx
c001ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed28:	83 ec 0c             	sub    esp,0xc
c001ed2b:	50                   	push   eax
c001ed2c:	e8 e1 17 ff ff       	call   c0010512 <HardDiskController::~HardDiskController()>
c001ed31:	83 c4 10             	add    esp,0x10
c001ed34:	90                   	nop
c001ed35:	83 c4 0c             	add    esp,0xc
c001ed38:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ed3a <IDE::~IDE()>:
c001ed3a:	83 ec 0c             	sub    esp,0xc
c001ed3d:	83 ec 0c             	sub    esp,0xc
c001ed40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed44:	e8 cd ff ff ff       	call   c001ed16 <IDE::~IDE()>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	83 ec 08             	sub    esp,0x8
c001ed4f:	68 70 02 00 00       	push   0x270
c001ed54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed58:	e8 12 ff fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001ed5d:	83 c4 10             	add    esp,0x10
c001ed60:	83 c4 0c             	add    esp,0xc
c001ed63:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ed64 <ATA::~ATA()>:
c001ed64:	83 ec 0c             	sub    esp,0xc
c001ed67:	ba f4 22 02 c0       	mov    edx,0xc00222f4
c001ed6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed70:	89 10                	mov    DWORD PTR [eax],edx
c001ed72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed76:	83 ec 0c             	sub    esp,0xc
c001ed79:	50                   	push   eax
c001ed7a:	e8 71 18 ff ff       	call   c00105f0 <PhysicalDisk::~PhysicalDisk()>
c001ed7f:	83 c4 10             	add    esp,0x10
c001ed82:	90                   	nop
c001ed83:	83 c4 0c             	add    esp,0xc
c001ed86:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ed88 <ATA::~ATA()>:
c001ed88:	83 ec 0c             	sub    esp,0xc
c001ed8b:	83 ec 0c             	sub    esp,0xc
c001ed8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed92:	e8 cd ff ff ff       	call   c001ed64 <ATA::~ATA()>
c001ed97:	83 c4 10             	add    esp,0x10
c001ed9a:	83 ec 08             	sub    esp,0x8
c001ed9d:	68 7c 01 00 00       	push   0x17c
c001eda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eda6:	e8 c4 fe fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001edab:	83 c4 10             	add    esp,0x10
c001edae:	83 c4 0c             	add    esp,0xc
c001edb1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001edb2 <ATAPI::~ATAPI()>:
c001edb2:	83 ec 0c             	sub    esp,0xc
c001edb5:	ba 60 23 02 c0       	mov    edx,0xc0022360
c001edba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbe:	89 10                	mov    DWORD PTR [eax],edx
c001edc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc4:	83 ec 0c             	sub    esp,0xc
c001edc7:	50                   	push   eax
c001edc8:	e8 23 18 ff ff       	call   c00105f0 <PhysicalDisk::~PhysicalDisk()>
c001edcd:	83 c4 10             	add    esp,0x10
c001edd0:	90                   	nop
c001edd1:	83 c4 0c             	add    esp,0xc
c001edd4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001edd6 <ATAPI::~ATAPI()>:
c001edd6:	83 ec 0c             	sub    esp,0xc
c001edd9:	83 ec 0c             	sub    esp,0xc
c001eddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ede0:	e8 cd ff ff ff       	call   c001edb2 <ATAPI::~ATAPI()>
c001ede5:	83 c4 10             	add    esp,0x10
c001ede8:	83 ec 08             	sub    esp,0x8
c001edeb:	68 80 01 00 00       	push   0x180
c001edf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edf4:	e8 76 fe fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001edf9:	83 c4 10             	add    esp,0x10
c001edfc:	83 c4 0c             	add    esp,0xc
c001edff:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ee00 <AVX::~AVX()>:
c001ee00:	83 ec 0c             	sub    esp,0xc
c001ee03:	ba 9c 23 02 c0       	mov    edx,0xc002239c
c001ee08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee0c:	89 10                	mov    DWORD PTR [eax],edx
c001ee0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee12:	83 ec 0c             	sub    esp,0xc
c001ee15:	50                   	push   eax
c001ee16:	e8 59 18 ff ff       	call   c0010674 <FPU::~FPU()>
c001ee1b:	83 c4 10             	add    esp,0x10
c001ee1e:	90                   	nop
c001ee1f:	83 c4 0c             	add    esp,0xc
c001ee22:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ee24 <AVX::~AVX()>:
c001ee24:	83 ec 0c             	sub    esp,0xc
c001ee27:	83 ec 0c             	sub    esp,0xc
c001ee2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee2e:	e8 cd ff ff ff       	call   c001ee00 <AVX::~AVX()>
c001ee33:	83 c4 10             	add    esp,0x10
c001ee36:	83 ec 08             	sub    esp,0x8
c001ee39:	68 58 01 00 00       	push   0x158
c001ee3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee42:	e8 28 fe fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001ee47:	83 c4 10             	add    esp,0x10
c001ee4a:	83 c4 0c             	add    esp,0xc
c001ee4d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ee4e <MMX::~MMX()>:
c001ee4e:	83 ec 0c             	sub    esp,0xc
c001ee51:	ba dc 23 02 c0       	mov    edx,0xc00223dc
c001ee56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5a:	89 10                	mov    DWORD PTR [eax],edx
c001ee5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee60:	83 ec 0c             	sub    esp,0xc
c001ee63:	50                   	push   eax
c001ee64:	e8 0b 18 ff ff       	call   c0010674 <FPU::~FPU()>
c001ee69:	83 c4 10             	add    esp,0x10
c001ee6c:	90                   	nop
c001ee6d:	83 c4 0c             	add    esp,0xc
c001ee70:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ee72 <MMX::~MMX()>:
c001ee72:	83 ec 0c             	sub    esp,0xc
c001ee75:	83 ec 0c             	sub    esp,0xc
c001ee78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee7c:	e8 cd ff ff ff       	call   c001ee4e <MMX::~MMX()>
c001ee81:	83 c4 10             	add    esp,0x10
c001ee84:	83 ec 08             	sub    esp,0x8
c001ee87:	68 58 01 00 00       	push   0x158
c001ee8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee90:	e8 da fd fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001ee95:	83 c4 10             	add    esp,0x10
c001ee98:	83 c4 0c             	add    esp,0xc
c001ee9b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ee9c <SSE::~SSE()>:
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	ba 1c 24 02 c0       	mov    edx,0xc002241c
c001eea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea8:	89 10                	mov    DWORD PTR [eax],edx
c001eeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeae:	83 ec 0c             	sub    esp,0xc
c001eeb1:	50                   	push   eax
c001eeb2:	e8 bd 17 ff ff       	call   c0010674 <FPU::~FPU()>
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	90                   	nop
c001eebb:	83 c4 0c             	add    esp,0xc
c001eebe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001eec0 <SSE::~SSE()>:
c001eec0:	83 ec 0c             	sub    esp,0xc
c001eec3:	83 ec 0c             	sub    esp,0xc
c001eec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeca:	e8 cd ff ff ff       	call   c001ee9c <SSE::~SSE()>
c001eecf:	83 c4 10             	add    esp,0x10
c001eed2:	83 ec 08             	sub    esp,0x8
c001eed5:	68 58 01 00 00       	push   0x158
c001eeda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eede:	e8 8c fd fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001eee3:	83 c4 10             	add    esp,0x10
c001eee6:	83 c4 0c             	add    esp,0xc
c001eee9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001eeea <x87::~x87()>:
c001eeea:	83 ec 0c             	sub    esp,0xc
c001eeed:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001eef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef6:	89 10                	mov    DWORD PTR [eax],edx
c001eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	50                   	push   eax
c001ef00:	e8 6f 17 ff ff       	call   c0010674 <FPU::~FPU()>
c001ef05:	83 c4 10             	add    esp,0x10
c001ef08:	90                   	nop
c001ef09:	83 c4 0c             	add    esp,0xc
c001ef0c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001ef0e <x87::~x87()>:
c001ef0e:	83 ec 0c             	sub    esp,0xc
c001ef11:	83 ec 0c             	sub    esp,0xc
c001ef14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef18:	e8 cd ff ff ff       	call   c001eeea <x87::~x87()>
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	83 ec 08             	sub    esp,0x8
c001ef23:	68 58 01 00 00       	push   0x158
c001ef28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef2c:	e8 3e fd fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001ef31:	83 c4 10             	add    esp,0x10
c001ef34:	83 c4 0c             	add    esp,0xc
c001ef37:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ef38 <IOAPIC::~IOAPIC()>:
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	ba b4 25 02 c0       	mov    edx,0xc00225b4
c001ef40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef44:	89 10                	mov    DWORD PTR [eax],edx
c001ef46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	50                   	push   eax
c001ef4e:	e8 a9 10 ff ff       	call   c000fffc <Device::~Device()>
c001ef53:	83 c4 10             	add    esp,0x10
c001ef56:	90                   	nop
c001ef57:	83 c4 0c             	add    esp,0xc
c001ef5a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ef5c <IOAPIC::~IOAPIC()>:
c001ef5c:	83 ec 0c             	sub    esp,0xc
c001ef5f:	83 ec 0c             	sub    esp,0xc
c001ef62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef66:	e8 cd ff ff ff       	call   c001ef38 <IOAPIC::~IOAPIC()>
c001ef6b:	83 c4 10             	add    esp,0x10
c001ef6e:	83 ec 08             	sub    esp,0x8
c001ef71:	68 68 01 00 00       	push   0x168
c001ef76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef7a:	e8 f0 fc fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001ef7f:	83 c4 10             	add    esp,0x10
c001ef82:	83 c4 0c             	add    esp,0xc
c001ef85:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001ef86 <APIC::~APIC()>:
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	ba 6c 25 02 c0       	mov    edx,0xc002256c
c001ef8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef92:	89 10                	mov    DWORD PTR [eax],edx
c001ef94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	50                   	push   eax
c001ef9c:	e8 91 1b ff ff       	call   c0010b32 <InterruptController::~InterruptController()>
c001efa1:	83 c4 10             	add    esp,0x10
c001efa4:	90                   	nop
c001efa5:	83 c4 0c             	add    esp,0xc
c001efa8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001efaa <APIC::~APIC()>:
c001efaa:	83 ec 0c             	sub    esp,0xc
c001efad:	83 ec 0c             	sub    esp,0xc
c001efb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb4:	e8 cd ff ff ff       	call   c001ef86 <APIC::~APIC()>
c001efb9:	83 c4 10             	add    esp,0x10
c001efbc:	83 ec 08             	sub    esp,0x8
c001efbf:	68 58 21 00 00       	push   0x2158
c001efc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc8:	e8 a2 fc fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001efcd:	83 c4 10             	add    esp,0x10
c001efd0:	83 c4 0c             	add    esp,0xc
c001efd3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001efd4 <PIC::~PIC()>:
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	ba 04 26 02 c0       	mov    edx,0xc0022604
c001efdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe0:	89 10                	mov    DWORD PTR [eax],edx
c001efe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	50                   	push   eax
c001efea:	e8 43 1b ff ff       	call   c0010b32 <InterruptController::~InterruptController()>
c001efef:	83 c4 10             	add    esp,0x10
c001eff2:	90                   	nop
c001eff3:	83 c4 0c             	add    esp,0xc
c001eff6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001eff8 <PIC::~PIC()>:
c001eff8:	83 ec 0c             	sub    esp,0xc
c001effb:	83 ec 0c             	sub    esp,0xc
c001effe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f002:	e8 cd ff ff ff       	call   c001efd4 <PIC::~PIC()>
c001f007:	83 c4 10             	add    esp,0x10
c001f00a:	83 ec 08             	sub    esp,0x8
c001f00d:	68 58 21 00 00       	push   0x2158
c001f012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f016:	e8 54 fc fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001f01b:	83 c4 10             	add    esp,0x10
c001f01e:	83 c4 0c             	add    esp,0xc
c001f021:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f022 <APICTimer::~APICTimer()>:
c001f022:	83 ec 0c             	sub    esp,0xc
c001f025:	ba 58 26 02 c0       	mov    edx,0xc0022658
c001f02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02e:	89 10                	mov    DWORD PTR [eax],edx
c001f030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	50                   	push   eax
c001f038:	e8 61 31 ff ff       	call   c001219e <Timer::~Timer()>
c001f03d:	83 c4 10             	add    esp,0x10
c001f040:	90                   	nop
c001f041:	83 c4 0c             	add    esp,0xc
c001f044:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f046 <APICTimer::~APICTimer()>:
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	83 ec 0c             	sub    esp,0xc
c001f04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f050:	e8 cd ff ff ff       	call   c001f022 <APICTimer::~APICTimer()>
c001f055:	83 c4 10             	add    esp,0x10
c001f058:	83 ec 08             	sub    esp,0x8
c001f05b:	68 60 01 00 00       	push   0x160
c001f060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f064:	e8 06 fc fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001f069:	83 c4 10             	add    esp,0x10
c001f06c:	83 c4 0c             	add    esp,0xc
c001f06f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f070 <PIT::~PIT()>:
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	ba a8 26 02 c0       	mov    edx,0xc00226a8
c001f078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07c:	89 10                	mov    DWORD PTR [eax],edx
c001f07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f082:	83 ec 0c             	sub    esp,0xc
c001f085:	50                   	push   eax
c001f086:	e8 13 31 ff ff       	call   c001219e <Timer::~Timer()>
c001f08b:	83 c4 10             	add    esp,0x10
c001f08e:	90                   	nop
c001f08f:	83 c4 0c             	add    esp,0xc
c001f092:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f094 <PIT::~PIT()>:
c001f094:	83 ec 0c             	sub    esp,0xc
c001f097:	83 ec 0c             	sub    esp,0xc
c001f09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09e:	e8 cd ff ff ff       	call   c001f070 <PIT::~PIT()>
c001f0a3:	83 c4 10             	add    esp,0x10
c001f0a6:	83 ec 08             	sub    esp,0x8
c001f0a9:	68 5c 01 00 00       	push   0x15c
c001f0ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b2:	e8 b8 fb fe ff       	call   c000ec6f <operator delete(void*, unsigned long)>
c001f0b7:	83 c4 10             	add    esp,0x10
c001f0ba:	83 c4 0c             	add    esp,0xc
c001f0bd:	c3                   	ret    
