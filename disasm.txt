
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 2f f4 00 00       	call   c000f44f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 40 02 00       	call   c0024118 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 4c 02 c0       	mov    ebx,0xc0024ca2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ac 4c 02 c0    	cmp    ebx,0xc0024cac
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 0c 8a 02 c0       	mov    eax,0xc0028a0c
c0000049:	3d 0c 8a 02 c0       	cmp    eax,0xc0028a0c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 0c 8a 02 c0       	push   0xc0028a0c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 0c 8a 02 c0       	mov    eax,0xc0028a0c
c0000075:	2d 0c 8a 02 c0       	sub    eax,0xc0028a0c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 0c 8a 02 c0       	push   0xc0028a0c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 3c 90 02 c0 00 	cmp    BYTE PTR ds:0xc002903c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b4 4c 02 c0       	mov    ebx,0xc0024cb4
c00000bb:	81 eb b0 4c 02 c0    	sub    ebx,0xc0024cb0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b0 4c 02 c0       	mov    esi,0xc0024cb0
c00000ca:	a1 40 90 02 c0       	mov    eax,ds:0xc0029040
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 40 90 02 c0       	mov    ds:0xc0029040,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 40 90 02 c0       	mov    eax,ds:0xc0029040
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 0c 8a 02 c0       	push   0xc0028a0c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 3c 90 02 c0 01 	mov    BYTE PTR ds:0xc002903c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 44 90 02 c0       	push   0xc0029044
c000012c:	68 0c 8a 02 c0       	push   0xc0028a0c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 03                	jne    c000018f <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]

c000018f <voodooXADD.usermode>:
c000018f:	89 35 2a 02 00 c0    	mov    DWORD PTR ds:0xc000022a,esi
c0000195:	89 25 26 02 00 c0    	mov    DWORD PTR ds:0xc0000226,esp
c000019b:	60                   	pusha  
c000019c:	b0 90                	mov    al,0x90
c000019e:	b9 20 00 00 00       	mov    ecx,0x20
c00001a3:	bf fd 01 00 c0       	mov    edi,0xc00001fd
c00001a8:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001aa:	61                   	popa   
c00001ab:	60                   	pusha  
c00001ac:	89 d6                	mov    esi,edx
c00001ae:	bf fd 01 00 c0       	mov    edi,0xc00001fd
c00001b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001b5:	61                   	popa   
c00001b6:	60                   	pusha  
c00001b7:	89 d6                	mov    esi,edx
c00001b9:	bf 0d 02 00 c0       	mov    edi,0xc000020d
c00001be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c0:	61                   	popa   
c00001c1:	b1 90                	mov    cl,0x90
c00001c3:	85 db                	test   ebx,ebx
c00001c5:	74 06                	je     c00001cd <voodooXADD.skipChange>
c00001c7:	8a 8b fc 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe04]

c00001cd <voodooXADD.skipChange>:
c00001cd:	88 8b fd 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe03],cl
c00001d3:	80 ab fe 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe02],0x3a
c00001da:	88 8b 0d 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdf3],cl
c00001e0:	80 ab 0e 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdf2],0xbe
c00001e7:	89 c4                	mov    esp,eax
c00001e9:	81 c4 10 00 00 00    	add    esp,0x10
c00001ef:	5f                   	pop    edi
c00001f0:	5e                   	pop    esi
c00001f1:	5d                   	pop    ebp
c00001f2:	5b                   	pop    ebx
c00001f3:	5b                   	pop    ebx
c00001f4:	5a                   	pop    edx
c00001f5:	59                   	pop    ecx
c00001f6:	58                   	pop    eax
c00001f7:	8b 25 2a 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022a

c00001fd <voodooXADD.helper>:
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	8b 25 26 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000226
c0000223:	61                   	popa   
c0000224:	c9                   	leave  
c0000225:	c3                   	ret    

c0000226 <voodooXADD.oldStack>:
c0000226:	00 00                	add    BYTE PTR [eax],al
	...

c000022a <voodooXADD.newStack>:
c000022a:	00 00                	add    BYTE PTR [eax],al
	...

c000022e <doTPAUSE>:
c000022e:	fb                   	sti    
c000022f:	31 c0                	xor    eax,eax
c0000231:	31 d2                	xor    edx,edx
c0000233:	66 0f ae f0          	tpause eax
c0000237:	c3                   	ret    

c0000238 <hasLegacyFPU>:
c0000238:	0f 20 c2             	mov    edx,cr0
c000023b:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000241:	0f 22 c2             	mov    cr0,edx
c0000244:	db e3                	fninit 
c0000246:	dd 3d 5b 02 00 c0    	fnstsw WORD PTR ds:0xc000025b
c000024c:	31 c0                	xor    eax,eax
c000024e:	66 81 3d 5b 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000025b,0x0
c0000257:	75 01                	jne    c000025a <hasLegacyFPU.nofpu>

c0000259 <hasLegacyFPU.hasfpu>:
c0000259:	40                   	inc    eax

c000025a <hasLegacyFPU.nofpu>:
c000025a:	c3                   	ret    

c000025b <testword>:
c000025b:	aa                   	stos   BYTE PTR es:[edi],al
c000025c:	55                   	push   ebp

c000025d <is486>:
c000025d:	0f 09                	wbinvd 
c000025f:	31 c0                	xor    eax,eax
c0000261:	40                   	inc    eax
c0000262:	c3                   	ret    
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	31 c0                	xor    eax,eax
c0000292:	c3                   	ret    

c0000293 <goToVM86>:
c0000293:	fa                   	cli    
c0000294:	55                   	push   ebp
c0000295:	89 e5                	mov    ebp,esp
c0000297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000029a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c000029d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a3:	25 ff ff 00 00       	and    eax,0xffff
c00002a8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ae:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002b4:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002ba:	52                   	push   edx
c00002bb:	51                   	push   ecx
c00002bc:	68 02 02 02 00       	push   0x20202
c00002c1:	53                   	push   ebx
c00002c2:	50                   	push   eax
c00002c3:	cf                   	iret   

c00002c4 <goToUsermode>:
c00002c4:	fa                   	cli    
c00002c5:	55                   	push   ebp
c00002c6:	89 e5                	mov    ebp,esp
c00002c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002cb:	66 b8 23 00          	mov    ax,0x23
c00002cf:	66 8e d8             	mov    ds,ax
c00002d2:	66 8e c0             	mov    es,ax
c00002d5:	66 8e e0             	mov    fs,ax
c00002d8:	66 8e e8             	mov    gs,ax
c00002db:	89 e0                	mov    eax,esp
c00002dd:	68 23 00 00 00       	push   0x23
c00002e2:	50                   	push   eax
c00002e3:	68 02 02 00 00       	push   0x202
c00002e8:	68 1b 00 00 00       	push   0x1b
c00002ed:	53                   	push   ebx
c00002ee:	cf                   	iret   

c00002ef <switchToThreadASMFirstTime>:
c00002ef:	9c                   	pushf  
c00002f0:	fa                   	cli    
c00002f1:	50                   	push   eax
c00002f2:	53                   	push   ebx
c00002f3:	51                   	push   ecx
c00002f4:	52                   	push   edx
c00002f5:	56                   	push   esi
c00002f6:	57                   	push   edi
c00002f7:	55                   	push   ebp
c00002f8:	e9 11 00 00 00       	jmp    c000030e <commonThreadSwitch>

c00002fd <switchToThreadASM>:
c00002fd:	9c                   	pushf  
c00002fe:	50                   	push   eax
c00002ff:	53                   	push   ebx
c0000300:	51                   	push   ecx
c0000301:	52                   	push   edx
c0000302:	56                   	push   esi
c0000303:	57                   	push   edi
c0000304:	55                   	push   ebp
c0000305:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000030b:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000030e <commonThreadSwitch>:
c000030e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000312:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000318:	8b 06                	mov    eax,DWORD PTR [esi]
c000031a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000031d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000320:	0f 20 d9             	mov    ecx,cr3
c0000323:	39 c8                	cmp    eax,ecx
c0000325:	74 03                	je     c000032a <commonThreadSwitch.doneVAS>
c0000327:	0f 22 d8             	mov    cr3,eax

c000032a <commonThreadSwitch.doneVAS>:
c000032a:	85 d2                	test   edx,edx
c000032c:	74 4e                	je     c000037c <commonThreadSwitch.notFirstTime>
c000032e:	fa                   	cli    
c000032f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000332:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000337:	60                   	pusha  
c0000338:	e8 e9 1c 01 00       	call   c0012026 <mapVASFirstTime>
c000033d:	61                   	popa   
c000033e:	89 c4                	mov    esp,eax
c0000340:	56                   	push   esi
c0000341:	52                   	push   edx
c0000342:	e8 3b b2 01 00       	call   c001b582 <changeTSS>
c0000347:	5a                   	pop    edx
c0000348:	5e                   	pop    esi
c0000349:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000350:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000356:	74 39                	je     c0000391 <commonThreadSwitch.cameOffAFork>
c0000358:	5d                   	pop    ebp
c0000359:	5f                   	pop    edi
c000035a:	5e                   	pop    esi
c000035b:	59                   	pop    ecx
c000035c:	59                   	pop    ecx
c000035d:	5b                   	pop    ebx
c000035e:	58                   	pop    eax
c000035f:	81 c4 04 00 00 00    	add    esp,0x4
c0000365:	6a 02                	push   0x2
c0000367:	9d                   	popf   
c0000368:	52                   	push   edx
c0000369:	e8 27 b6 01 00       	call   c001b995 <taskStartupFunction>
c000036e:	5a                   	pop    edx
c000036f:	50                   	push   eax
c0000370:	ff d2                	call   edx
c0000372:	e8 cd bb 01 00       	call   c001bf44 <taskReturned>
c0000377:	e9 fb ff ff ff       	jmp    c0000377 <commonThreadSwitch.doneVAS+0x4d>

c000037c <commonThreadSwitch.notFirstTime>:
c000037c:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000037f:	56                   	push   esi
c0000380:	52                   	push   edx
c0000381:	e8 fc b1 01 00       	call   c001b582 <changeTSS>
c0000386:	5a                   	pop    edx
c0000387:	5e                   	pop    esi
c0000388:	5d                   	pop    ebp
c0000389:	5f                   	pop    edi
c000038a:	5e                   	pop    esi
c000038b:	5a                   	pop    edx
c000038c:	59                   	pop    ecx
c000038d:	5b                   	pop    ebx
c000038e:	58                   	pop    eax
c000038f:	9d                   	popf   
c0000390:	c3                   	ret    

c0000391 <commonThreadSwitch.cameOffAFork>:
c0000391:	31 c0                	xor    eax,eax
c0000393:	31 d2                	xor    edx,edx
c0000395:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000398:	e9 a2 02 00 00       	jmp    c000063f <offAForkJumpThingy>

c000039d <detectCPUID>:
c000039d:	9c                   	pushf  
c000039e:	9c                   	pushf  
c000039f:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003a6:	9d                   	popf   
c00003a7:	9c                   	pushf  
c00003a8:	58                   	pop    eax
c00003a9:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003ac:	9d                   	popf   
c00003ad:	25 00 00 20 00       	and    eax,0x200000
c00003b2:	c3                   	ret    

c00003b3 <asmQuickAcquireLock>:
c00003b3:	55                   	push   ebp
c00003b4:	89 e5                	mov    ebp,esp
c00003b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b9 <asmQuickAcquireLock.retry>:
c00003b9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003be:	72 02                	jb     c00003c2 <asmQuickAcquireLock.spin_with_pause>
c00003c0:	fa                   	cli    
c00003c1:	c3                   	ret    

c00003c2 <asmQuickAcquireLock.spin_with_pause>:
c00003c2:	f3 90                	pause  
c00003c4:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003ca:	75 f6                	jne    c00003c2 <asmQuickAcquireLock.spin_with_pause>
c00003cc:	e9 e8 ff ff ff       	jmp    c00003b9 <asmQuickAcquireLock.retry>

c00003d1 <asmQuickReleaseLock>:
c00003d1:	55                   	push   ebp
c00003d2:	89 e5                	mov    ebp,esp
c00003d4:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock>:
c00003dd:	55                   	push   ebp
c00003de:	89 e5                	mov    ebp,esp
c00003e0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e3 <asmAcquireLock.retry>:
c00003e3:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003e8:	72 05                	jb     c00003ef <asmAcquireLock.spin_with_pause>
c00003ea:	9c                   	pushf  
c00003eb:	58                   	pop    eax
c00003ec:	fa                   	cli    
c00003ed:	5d                   	pop    ebp
c00003ee:	c3                   	ret    

c00003ef <asmAcquireLock.spin_with_pause>:
c00003ef:	f3 90                	pause  
c00003f1:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003f7:	75 f6                	jne    c00003ef <asmAcquireLock.spin_with_pause>
c00003f9:	e9 e5 ff ff ff       	jmp    c00003e3 <asmAcquireLock.retry>

c00003fe <asmReleaseLock>:
c00003fe:	55                   	push   ebp
c00003ff:	89 e5                	mov    ebp,esp
c0000401:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000404:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000040d:	52                   	push   edx
c000040e:	9d                   	popf   
c000040f:	5d                   	pop    ebp
c0000410:	c3                   	ret    

c0000411 <loadGDT>:
c0000411:	0f 01 15 70 94 02 c0 	lgdtd  ds:0xc0029470
c0000418:	66 b8 10 00          	mov    ax,0x10
c000041c:	66 8e d8             	mov    ds,ax
c000041f:	66 8e c0             	mov    es,ax
c0000422:	66 8e e0             	mov    fs,ax
c0000425:	66 8e e8             	mov    gs,ax
c0000428:	66 8e d0             	mov    ss,ax
c000042b:	e9 00 00 00 00       	jmp    c0000430 <flush2>

c0000430 <flush2>:
c0000430:	c3                   	ret    

c0000431 <isr0>:
c0000431:	fa                   	cli    
c0000432:	68 00 00 00 00       	push   0x0
c0000437:	68 00 00 00 00       	push   0x0
c000043c:	e9 a2 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000441 <isr1>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 01                	push   0x1
c0000446:	e9 98 01 00 00       	jmp    c00005e3 <int_common_stub>

c000044b <isr2>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 02                	push   0x2
c0000450:	e9 8e 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000455 <isr3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 03                	push   0x3
c000045a:	e9 84 01 00 00       	jmp    c00005e3 <int_common_stub>

c000045f <isr4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 04                	push   0x4
c0000464:	e9 7a 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000469 <isr5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 05                	push   0x5
c000046e:	e9 70 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000473 <isr6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 06                	push   0x6
c0000478:	e9 66 01 00 00       	jmp    c00005e3 <int_common_stub>

c000047d <isr7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 07                	push   0x7
c0000482:	e9 5c 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000487 <isr8>:
c0000487:	fa                   	cli    
c0000488:	6a 08                	push   0x8
c000048a:	e9 54 01 00 00       	jmp    c00005e3 <int_common_stub>

c000048f <isr9>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 09                	push   0x9
c0000494:	e9 4a 01 00 00       	jmp    c00005e3 <int_common_stub>

c0000499 <isr10>:
c0000499:	fa                   	cli    
c000049a:	6a 0a                	push   0xa
c000049c:	e9 42 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004a1 <isr11>:
c00004a1:	fa                   	cli    
c00004a2:	6a 0b                	push   0xb
c00004a4:	e9 3a 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004a9 <isr12>:
c00004a9:	fa                   	cli    
c00004aa:	6a 0c                	push   0xc
c00004ac:	e9 32 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004b1 <isr13>:
c00004b1:	fa                   	cli    
c00004b2:	6a 0d                	push   0xd
c00004b4:	e9 2a 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004b9 <isr14>:
c00004b9:	fa                   	cli    
c00004ba:	6a 0e                	push   0xe
c00004bc:	e9 22 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004c1 <isr15>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 0f                	push   0xf
c00004c6:	e9 18 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004cb <isr16>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 10                	push   0x10
c00004d0:	e9 0e 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004d5 <isr17>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 11                	push   0x11
c00004da:	e9 04 01 00 00       	jmp    c00005e3 <int_common_stub>

c00004df <isr18>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 12                	push   0x12
c00004e4:	e9 fa 00 00 00       	jmp    c00005e3 <int_common_stub>

c00004e9 <isr96>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 60                	push   0x60
c00004ee:	e9 20 01 00 00       	jmp    c0000613 <syscall_common_stub>

c00004f3 <irq0>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 20                	push   0x20
c00004f8:	e9 e6 00 00 00       	jmp    c00005e3 <int_common_stub>

c00004fd <irq1>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 21                	push   0x21
c0000502:	e9 dc 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000507 <irq2>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 22                	push   0x22
c000050c:	e9 d2 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000511 <irq3>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 23                	push   0x23
c0000516:	e9 c8 00 00 00       	jmp    c00005e3 <int_common_stub>

c000051b <irq4>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 24                	push   0x24
c0000520:	e9 be 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000525 <irq5>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 25                	push   0x25
c000052a:	e9 b4 00 00 00       	jmp    c00005e3 <int_common_stub>

c000052f <irq6>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 26                	push   0x26
c0000534:	e9 aa 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000539 <irq7>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 27                	push   0x27
c000053e:	e9 a0 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000543 <irq8>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 28                	push   0x28
c0000548:	e9 96 00 00 00       	jmp    c00005e3 <int_common_stub>

c000054d <irq9>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 29                	push   0x29
c0000552:	e9 8c 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000557 <irq10>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 2a                	push   0x2a
c000055c:	e9 82 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000561 <irq11>:
c0000561:	fa                   	cli    
c0000562:	6a 00                	push   0x0
c0000564:	6a 2b                	push   0x2b
c0000566:	e9 78 00 00 00       	jmp    c00005e3 <int_common_stub>

c000056b <irq12>:
c000056b:	fa                   	cli    
c000056c:	6a 00                	push   0x0
c000056e:	6a 2c                	push   0x2c
c0000570:	e9 6e 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000575 <irq13>:
c0000575:	fa                   	cli    
c0000576:	6a 00                	push   0x0
c0000578:	6a 2d                	push   0x2d
c000057a:	e9 64 00 00 00       	jmp    c00005e3 <int_common_stub>

c000057f <irq14>:
c000057f:	fa                   	cli    
c0000580:	6a 00                	push   0x0
c0000582:	6a 2e                	push   0x2e
c0000584:	e9 5a 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000589 <irq15>:
c0000589:	fa                   	cli    
c000058a:	6a 00                	push   0x0
c000058c:	6a 2f                	push   0x2f
c000058e:	e9 50 00 00 00       	jmp    c00005e3 <int_common_stub>

c0000593 <irq16>:
c0000593:	fa                   	cli    
c0000594:	6a 00                	push   0x0
c0000596:	6a 30                	push   0x30
c0000598:	e9 46 00 00 00       	jmp    c00005e3 <int_common_stub>

c000059d <irq17>:
c000059d:	fa                   	cli    
c000059e:	6a 00                	push   0x0
c00005a0:	6a 31                	push   0x31
c00005a2:	e9 3c 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005a7 <irq18>:
c00005a7:	fa                   	cli    
c00005a8:	6a 00                	push   0x0
c00005aa:	6a 32                	push   0x32
c00005ac:	e9 32 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005b1 <irq19>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 33                	push   0x33
c00005b6:	e9 28 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005bb <irq20>:
c00005bb:	fa                   	cli    
c00005bc:	6a 00                	push   0x0
c00005be:	6a 34                	push   0x34
c00005c0:	e9 1e 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005c5 <irq21>:
c00005c5:	fa                   	cli    
c00005c6:	6a 00                	push   0x0
c00005c8:	6a 35                	push   0x35
c00005ca:	e9 14 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005cf <irq22>:
c00005cf:	fa                   	cli    
c00005d0:	6a 00                	push   0x0
c00005d2:	6a 36                	push   0x36
c00005d4:	e9 0a 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005d9 <irq23>:
c00005d9:	fa                   	cli    
c00005da:	6a 00                	push   0x0
c00005dc:	6a 37                	push   0x37
c00005de:	e9 00 00 00 00       	jmp    c00005e3 <int_common_stub>

c00005e3 <int_common_stub>:
c00005e3:	60                   	pusha  
c00005e4:	1e                   	push   ds
c00005e5:	06                   	push   es
c00005e6:	0f a0                	push   fs
c00005e8:	0f a8                	push   gs
c00005ea:	66 b8 10 00          	mov    ax,0x10
c00005ee:	66 8e d8             	mov    ds,ax
c00005f1:	66 8e c0             	mov    es,ax
c00005f4:	66 8e e0             	mov    fs,ax
c00005f7:	66 8e e8             	mov    gs,ax
c00005fa:	89 e1                	mov    ecx,esp
c00005fc:	51                   	push   ecx
c00005fd:	b9 ff 3e 01 c0       	mov    ecx,0xc0013eff
c0000602:	ff d1                	call   ecx
c0000604:	59                   	pop    ecx
c0000605:	0f a9                	pop    gs
c0000607:	0f a1                	pop    fs
c0000609:	07                   	pop    es
c000060a:	1f                   	pop    ds
c000060b:	61                   	popa   
c000060c:	81 c4 08 00 00 00    	add    esp,0x8
c0000612:	cf                   	iret   

c0000613 <syscall_common_stub>:
c0000613:	60                   	pusha  
c0000614:	1e                   	push   ds
c0000615:	06                   	push   es
c0000616:	0f a0                	push   fs
c0000618:	0f a8                	push   gs
c000061a:	66 b8 10 00          	mov    ax,0x10
c000061e:	66 8e d8             	mov    ds,ax
c0000621:	66 8e c0             	mov    es,ax
c0000624:	66 8e e0             	mov    fs,ax
c0000627:	66 8e e8             	mov    gs,ax
c000062a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000630:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000633:	89 e1                	mov    ecx,esp
c0000635:	51                   	push   ecx
c0000636:	fb                   	sti    
c0000637:	b9 ff 3e 01 c0       	mov    ecx,0xc0013eff
c000063c:	ff d1                	call   ecx
c000063e:	59                   	pop    ecx

c000063f <offAForkJumpThingy>:
c000063f:	0f a9                	pop    gs
c0000641:	0f a1                	pop    fs
c0000643:	07                   	pop    es
c0000644:	1f                   	pop    ds
c0000645:	61                   	popa   
c0000646:	81 c4 08 00 00 00    	add    esp,0x8
c000064c:	cf                   	iret   

c000064d <memcmp>:
c000064d:	56                   	push   esi
c000064e:	53                   	push   ebx
c000064f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000653:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000657:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000065b:	01 d6                	add    esi,edx
c000065d:	39 f2                	cmp    edx,esi
c000065f:	74 0e                	je     c000066f <memcmp+0x22>
c0000661:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000664:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000667:	38 c8                	cmp    al,cl
c0000669:	75 08                	jne    c0000673 <memcmp+0x26>
c000066b:	42                   	inc    edx
c000066c:	43                   	inc    ebx
c000066d:	eb ee                	jmp    c000065d <memcmp+0x10>
c000066f:	31 c0                	xor    eax,eax
c0000671:	eb 02                	jmp    c0000675 <memcmp+0x28>
c0000673:	29 c8                	sub    eax,ecx
c0000675:	5b                   	pop    ebx
c0000676:	5e                   	pop    esi
c0000677:	c3                   	ret    

c0000678 <memmove>:
c0000678:	56                   	push   esi
c0000679:	53                   	push   ebx
c000067a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000067e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000682:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000686:	39 c8                	cmp    eax,ecx
c0000688:	73 12                	jae    c000069c <memmove+0x24>
c000068a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000068d:	89 c3                	mov    ebx,eax
c000068f:	39 f1                	cmp    ecx,esi
c0000691:	74 1a                	je     c00006ad <memmove+0x35>
c0000693:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000695:	43                   	inc    ebx
c0000696:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000699:	41                   	inc    ecx
c000069a:	eb f3                	jmp    c000068f <memmove+0x17>
c000069c:	76 0f                	jbe    c00006ad <memmove+0x35>
c000069e:	85 d2                	test   edx,edx
c00006a0:	74 0b                	je     c00006ad <memmove+0x35>
c00006a2:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00006a6:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00006aa:	4a                   	dec    edx
c00006ab:	eb f1                	jmp    c000069e <memmove+0x26>
c00006ad:	5b                   	pop    ebx
c00006ae:	5e                   	pop    esi
c00006af:	c3                   	ret    

c00006b0 <memcpy>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006bb:	89 da                	mov    edx,ebx
c00006bd:	89 d9                	mov    ecx,ebx
c00006bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006c3:	83 e2 fc             	and    edx,0xfffffffc
c00006c6:	c1 e9 02             	shr    ecx,0x2
c00006c9:	89 c7                	mov    edi,eax
c00006cb:	fc                   	cld    
c00006cc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006ce:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006d1:	01 c2                	add    edx,eax
c00006d3:	01 de                	add    esi,ebx
c00006d5:	39 f1                	cmp    ecx,esi
c00006d7:	74 09                	je     c00006e2 <memcpy+0x32>
c00006d9:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006db:	42                   	inc    edx
c00006dc:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006df:	41                   	inc    ecx
c00006e0:	eb f3                	jmp    c00006d5 <memcpy+0x25>
c00006e2:	5b                   	pop    ebx
c00006e3:	5e                   	pop    esi
c00006e4:	5f                   	pop    edi
c00006e5:	c3                   	ret    

c00006e6 <memset>:
c00006e6:	53                   	push   ebx
c00006e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006ef:	89 c2                	mov    edx,eax
c00006f1:	01 c1                	add    ecx,eax
c00006f3:	39 ca                	cmp    edx,ecx
c00006f5:	74 0a                	je     c0000701 <memset+0x1b>
c00006f7:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006fb:	42                   	inc    edx
c00006fc:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ff:	eb f2                	jmp    c00006f3 <memset+0xd>
c0000701:	5b                   	pop    ebx
c0000702:	c3                   	ret    

c0000703 <strlen>:
c0000703:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000707:	31 c0                	xor    eax,eax
c0000709:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000070d:	74 03                	je     c0000712 <strlen+0xf>
c000070f:	40                   	inc    eax
c0000710:	eb f7                	jmp    c0000709 <strlen+0x6>
c0000712:	c3                   	ret    

c0000713 <strpbrk>:
c0000713:	53                   	push   ebx
c0000714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000718:	8a 08                	mov    cl,BYTE PTR [eax]
c000071a:	84 c9                	test   cl,cl
c000071c:	74 14                	je     c0000732 <strpbrk+0x1f>
c000071e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000722:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000724:	84 db                	test   bl,bl
c0000726:	74 07                	je     c000072f <strpbrk+0x1c>
c0000728:	38 cb                	cmp    bl,cl
c000072a:	74 08                	je     c0000734 <strpbrk+0x21>
c000072c:	42                   	inc    edx
c000072d:	eb f3                	jmp    c0000722 <strpbrk+0xf>
c000072f:	40                   	inc    eax
c0000730:	eb e6                	jmp    c0000718 <strpbrk+0x5>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	c3                   	ret    

c0000736 <strtok>:
c0000736:	56                   	push   esi
c0000737:	53                   	push   ebx
c0000738:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000073c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000740:	85 db                	test   ebx,ebx
c0000742:	75 0e                	jne    c0000752 <strtok+0x1c>
c0000744:	8b 1d 5c 90 02 c0    	mov    ebx,DWORD PTR ds:0xc002905c
c000074a:	85 db                	test   ebx,ebx
c000074c:	75 04                	jne    c0000752 <strtok+0x1c>
c000074e:	31 db                	xor    ebx,ebx
c0000750:	eb 2e                	jmp    c0000780 <strtok+0x4a>
c0000752:	56                   	push   esi
c0000753:	53                   	push   ebx
c0000754:	e8 ba ff ff ff       	call   c0000713 <strpbrk>
c0000759:	5a                   	pop    edx
c000075a:	a3 5c 90 02 c0       	mov    ds:0xc002905c,eax
c000075f:	59                   	pop    ecx
c0000760:	a1 5c 90 02 c0       	mov    eax,ds:0xc002905c
c0000765:	39 d8                	cmp    eax,ebx
c0000767:	75 07                	jne    c0000770 <strtok+0x3a>
c0000769:	43                   	inc    ebx
c000076a:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000076e:	eb e2                	jmp    c0000752 <strtok+0x1c>
c0000770:	85 c0                	test   eax,eax
c0000772:	74 da                	je     c000074e <strtok+0x18>
c0000774:	8d 50 01             	lea    edx,[eax+0x1]
c0000777:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000077a:	89 15 5c 90 02 c0    	mov    DWORD PTR ds:0xc002905c,edx
c0000780:	89 d8                	mov    eax,ebx
c0000782:	5b                   	pop    ebx
c0000783:	5e                   	pop    esi
c0000784:	c3                   	ret    

c0000785 <strcpy>:
c0000785:	53                   	push   ebx
c0000786:	31 d2                	xor    edx,edx
c0000788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000078c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000790:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000793:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000796:	84 c9                	test   cl,cl
c0000798:	74 06                	je     c00007a0 <strcpy+0x1b>
c000079a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000079d:	42                   	inc    edx
c000079e:	eb ec                	jmp    c000078c <strcpy+0x7>
c00007a0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00007a3:	5b                   	pop    ebx
c00007a4:	c3                   	ret    

c00007a5 <strncpy>:
c00007a5:	56                   	push   esi
c00007a6:	53                   	push   ebx
c00007a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007af:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007b3:	89 c3                	mov    ebx,eax
c00007b5:	85 c9                	test   ecx,ecx
c00007b7:	74 1a                	je     c00007d3 <strncpy+0x2e>
c00007b9:	46                   	inc    esi
c00007ba:	43                   	inc    ebx
c00007bb:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007be:	49                   	dec    ecx
c00007bf:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007c2:	84 d2                	test   dl,dl
c00007c4:	75 ef                	jne    c00007b5 <strncpy+0x10>
c00007c6:	31 d2                	xor    edx,edx
c00007c8:	39 d1                	cmp    ecx,edx
c00007ca:	74 07                	je     c00007d3 <strncpy+0x2e>
c00007cc:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007d0:	42                   	inc    edx
c00007d1:	eb f5                	jmp    c00007c8 <strncpy+0x23>
c00007d3:	5b                   	pop    ebx
c00007d4:	5e                   	pop    esi
c00007d5:	c3                   	ret    

c00007d6 <strcmp>:
c00007d6:	31 c9                	xor    ecx,ecx
c00007d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007e0:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007e4:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007e8:	38 d0                	cmp    al,dl
c00007ea:	75 08                	jne    c00007f4 <strcmp+0x1e>
c00007ec:	41                   	inc    ecx
c00007ed:	84 c0                	test   al,al
c00007ef:	75 e7                	jne    c00007d8 <strcmp+0x2>
c00007f1:	31 c0                	xor    eax,eax
c00007f3:	c3                   	ret    
c00007f4:	29 d0                	sub    eax,edx
c00007f6:	c3                   	ret    

c00007f7 <strchr>:
c00007f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007fb:	8a 10                	mov    dl,BYTE PTR [eax]
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 09                	je     c000080a <strchr+0x13>
c0000801:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000805:	74 05                	je     c000080c <strchr+0x15>
c0000807:	40                   	inc    eax
c0000808:	eb f1                	jmp    c00007fb <strchr+0x4>
c000080a:	31 c0                	xor    eax,eax
c000080c:	c3                   	ret    

c000080d <strncmp>:
c000080d:	56                   	push   esi
c000080e:	53                   	push   ebx
c000080f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000081b:	01 d6                	add    esi,edx
c000081d:	39 f2                	cmp    edx,esi
c000081f:	74 12                	je     c0000833 <strncmp+0x26>
c0000821:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000824:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000827:	38 c8                	cmp    al,cl
c0000829:	75 0c                	jne    c0000837 <strncmp+0x2a>
c000082b:	42                   	inc    edx
c000082c:	84 c0                	test   al,al
c000082e:	74 03                	je     c0000833 <strncmp+0x26>
c0000830:	43                   	inc    ebx
c0000831:	eb ea                	jmp    c000081d <strncmp+0x10>
c0000833:	31 c0                	xor    eax,eax
c0000835:	eb 02                	jmp    c0000839 <strncmp+0x2c>
c0000837:	29 c8                	sub    eax,ecx
c0000839:	5b                   	pop    ebx
c000083a:	5e                   	pop    esi
c000083b:	c3                   	ret    

c000083c <strcat>:
c000083c:	53                   	push   ebx
c000083d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000841:	89 c1                	mov    ecx,eax
c0000843:	8d 51 01             	lea    edx,[ecx+0x1]
c0000846:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000084a:	74 04                	je     c0000850 <strcat+0x14>
c000084c:	89 d1                	mov    ecx,edx
c000084e:	eb f3                	jmp    c0000843 <strcat+0x7>
c0000850:	31 d2                	xor    edx,edx
c0000852:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000856:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000859:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000085c:	42                   	inc    edx
c000085d:	84 db                	test   bl,bl
c000085f:	75 f1                	jne    c0000852 <strcat+0x16>
c0000861:	5b                   	pop    ebx
c0000862:	c3                   	ret    

c0000863 <strncat>:
c0000863:	56                   	push   esi
c0000864:	53                   	push   ebx
c0000865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000869:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000086d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000871:	89 c2                	mov    edx,eax
c0000873:	85 db                	test   ebx,ebx
c0000875:	74 23                	je     c000089a <strncat+0x37>
c0000877:	8d 72 01             	lea    esi,[edx+0x1]
c000087a:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000087e:	74 04                	je     c0000884 <strncat+0x21>
c0000880:	89 f2                	mov    edx,esi
c0000882:	eb f3                	jmp    c0000877 <strncat+0x14>
c0000884:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000887:	41                   	inc    ecx
c0000888:	42                   	inc    edx
c0000889:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000088c:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000088f:	84 db                	test   bl,bl
c0000891:	74 07                	je     c000089a <strncat+0x37>
c0000893:	39 f1                	cmp    ecx,esi
c0000895:	75 f0                	jne    c0000887 <strncat+0x24>
c0000897:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000089a:	5b                   	pop    ebx
c000089b:	5e                   	pop    esi
c000089c:	c3                   	ret    

c000089d <strstr>:
c000089d:	57                   	push   edi
c000089e:	56                   	push   esi
c000089f:	53                   	push   ebx
c00008a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008a8:	57                   	push   edi
c00008a9:	e8 55 fe ff ff       	call   c0000703 <strlen>
c00008ae:	59                   	pop    ecx
c00008af:	89 c6                	mov    esi,eax
c00008b1:	85 c0                	test   eax,eax
c00008b3:	74 1f                	je     c00008d4 <strstr+0x37>
c00008b5:	53                   	push   ebx
c00008b6:	e8 48 fe ff ff       	call   c0000703 <strlen>
c00008bb:	5a                   	pop    edx
c00008bc:	39 f0                	cmp    eax,esi
c00008be:	72 12                	jb     c00008d2 <strstr+0x35>
c00008c0:	56                   	push   esi
c00008c1:	57                   	push   edi
c00008c2:	53                   	push   ebx
c00008c3:	e8 85 fd ff ff       	call   c000064d <memcmp>
c00008c8:	83 c4 0c             	add    esp,0xc
c00008cb:	85 c0                	test   eax,eax
c00008cd:	74 05                	je     c00008d4 <strstr+0x37>
c00008cf:	43                   	inc    ebx
c00008d0:	eb e3                	jmp    c00008b5 <strstr+0x18>
c00008d2:	31 db                	xor    ebx,ebx
c00008d4:	89 d8                	mov    eax,ebx
c00008d6:	5b                   	pop    ebx
c00008d7:	5e                   	pop    esi
c00008d8:	5f                   	pop    edi
c00008d9:	c3                   	ret    

c00008da <toupper>:
c00008da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008de:	0f b6 d0             	movzx  edx,al
c00008e1:	f6 82 c0 4c 02 c0 02 	test   BYTE PTR [edx-0x3ffdb340],0x2
c00008e8:	74 03                	je     c00008ed <toupper+0x13>
c00008ea:	83 e8 20             	sub    eax,0x20
c00008ed:	c3                   	ret    

c00008ee <tolower>:
c00008ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f2:	0f b6 d0             	movzx  edx,al
c00008f5:	f6 82 c0 4c 02 c0 01 	test   BYTE PTR [edx-0x3ffdb340],0x1
c00008fc:	74 03                	je     c0000901 <tolower+0x13>
c00008fe:	83 c0 20             	add    eax,0x20
c0000901:	c3                   	ret    

c0000902 <simple_strtoul>:
c0000902:	55                   	push   ebp
c0000903:	57                   	push   edi
c0000904:	56                   	push   esi
c0000905:	53                   	push   ebx
c0000906:	83 ec 08             	sub    esp,0x8
c0000909:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000090d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000911:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000914:	f6 82 c0 4c 02 c0 08 	test   BYTE PTR [edx-0x3ffdb340],0x8
c000091b:	74 03                	je     c0000920 <simple_strtoul+0x1e>
c000091d:	41                   	inc    ecx
c000091e:	eb f1                	jmp    c0000911 <simple_strtoul+0xf>
c0000920:	80 fa 09             	cmp    dl,0x9
c0000923:	74 f8                	je     c000091d <simple_strtoul+0x1b>
c0000925:	80 fa 2d             	cmp    dl,0x2d
c0000928:	75 0b                	jne    c0000935 <simple_strtoul+0x33>
c000092a:	41                   	inc    ecx
c000092b:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000933:	eb 0e                	jmp    c0000943 <simple_strtoul+0x41>
c0000935:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000093d:	80 fa 2b             	cmp    dl,0x2b
c0000940:	75 01                	jne    c0000943 <simple_strtoul+0x41>
c0000942:	41                   	inc    ecx
c0000943:	85 f6                	test   esi,esi
c0000945:	75 22                	jne    c0000969 <simple_strtoul+0x67>
c0000947:	be 0a 00 00 00       	mov    esi,0xa
c000094c:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000094f:	75 5a                	jne    c00009ab <simple_strtoul+0xa9>
c0000951:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000955:	50                   	push   eax
c0000956:	e8 93 ff ff ff       	call   c00008ee <tolower>
c000095b:	5a                   	pop    edx
c000095c:	83 f8 78             	cmp    eax,0x78
c000095f:	74 03                	je     c0000964 <simple_strtoul+0x62>
c0000961:	41                   	inc    ecx
c0000962:	eb 16                	jmp    c000097a <simple_strtoul+0x78>
c0000964:	83 c1 02             	add    ecx,0x2
c0000967:	eb 22                	jmp    c000098b <simple_strtoul+0x89>
c0000969:	8d 46 fe             	lea    eax,[esi-0x2]
c000096c:	83 f8 22             	cmp    eax,0x22
c000096f:	0f 87 b7 00 00 00    	ja     c0000a2c <simple_strtoul+0x12a>
c0000975:	83 fe 08             	cmp    esi,0x8
c0000978:	75 0c                	jne    c0000986 <simple_strtoul+0x84>
c000097a:	be 08 00 00 00       	mov    esi,0x8
c000097f:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000982:	75 27                	jne    c00009ab <simple_strtoul+0xa9>
c0000984:	eb 1f                	jmp    c00009a5 <simple_strtoul+0xa3>
c0000986:	83 fe 10             	cmp    esi,0x10
c0000989:	75 20                	jne    c00009ab <simple_strtoul+0xa9>
c000098b:	be 10 00 00 00       	mov    esi,0x10
c0000990:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000993:	75 16                	jne    c00009ab <simple_strtoul+0xa9>
c0000995:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000999:	50                   	push   eax
c000099a:	e8 4f ff ff ff       	call   c00008ee <tolower>
c000099f:	5d                   	pop    ebp
c00009a0:	83 f8 78             	cmp    eax,0x78
c00009a3:	74 03                	je     c00009a8 <simple_strtoul+0xa6>
c00009a5:	41                   	inc    ecx
c00009a6:	eb 03                	jmp    c00009ab <simple_strtoul+0xa9>
c00009a8:	83 c1 02             	add    ecx,0x2
c00009ab:	31 ed                	xor    ebp,ebp
c00009ad:	31 db                	xor    ebx,ebx
c00009af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009b6:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b8:	84 d2                	test   dl,dl
c00009ba:	74 27                	je     c00009e3 <simple_strtoul+0xe1>
c00009bc:	0f b6 fa             	movzx  edi,dl
c00009bf:	f6 87 c0 4c 02 c0 04 	test   BYTE PTR [edi-0x3ffdb340],0x4
c00009c6:	74 05                	je     c00009cd <simple_strtoul+0xcb>
c00009c8:	83 ef 30             	sub    edi,0x30
c00009cb:	eb 22                	jmp    c00009ef <simple_strtoul+0xed>
c00009cd:	0f be d2             	movsx  edx,dl
c00009d0:	52                   	push   edx
c00009d1:	e8 04 ff ff ff       	call   c00008da <toupper>
c00009d6:	5f                   	pop    edi
c00009d7:	0f b6 d0             	movzx  edx,al
c00009da:	f6 82 c0 4c 02 c0 01 	test   BYTE PTR [edx-0x3ffdb340],0x1
c00009e1:	75 09                	jne    c00009ec <simple_strtoul+0xea>
c00009e3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009e8:	75 2d                	jne    c0000a17 <simple_strtoul+0x115>
c00009ea:	eb 57                	jmp    c0000a43 <simple_strtoul+0x141>
c00009ec:	8d 78 c9             	lea    edi,[eax-0x37]
c00009ef:	39 f7                	cmp    edi,esi
c00009f1:	73 f0                	jae    c00009e3 <simple_strtoul+0xe1>
c00009f3:	31 d2                	xor    edx,edx
c00009f5:	89 f8                	mov    eax,edi
c00009f7:	f7 d0                	not    eax
c00009f9:	f7 f6                	div    esi
c00009fb:	39 d8                	cmp    eax,ebx
c00009fd:	72 0e                	jb     c0000a0d <simple_strtoul+0x10b>
c00009ff:	0f af de             	imul   ebx,esi
c0000a02:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a09:	01 fb                	add    ebx,edi
c0000a0b:	eb 07                	jmp    c0000a14 <simple_strtoul+0x112>
c0000a0d:	bd 01 00 00 00       	mov    ebp,0x1
c0000a12:	31 db                	xor    ebx,ebx
c0000a14:	41                   	inc    ecx
c0000a15:	eb 9f                	jmp    c00009b6 <simple_strtoul+0xb4>
c0000a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1a:	09 d8                	or     eax,ebx
c0000a1c:	75 1f                	jne    c0000a3d <simple_strtoul+0x13b>
c0000a1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a22:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a26:	31 db                	xor    ebx,ebx
c0000a28:	89 38                	mov    DWORD PTR [eax],edi
c0000a2a:	eb 17                	jmp    c0000a43 <simple_strtoul+0x141>
c0000a2c:	31 db                	xor    ebx,ebx
c0000a2e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a33:	74 14                	je     c0000a49 <simple_strtoul+0x147>
c0000a35:	31 ed                	xor    ebp,ebp
c0000a37:	85 c9                	test   ecx,ecx
c0000a39:	75 e3                	jne    c0000a1e <simple_strtoul+0x11c>
c0000a3b:	31 db                	xor    ebx,ebx
c0000a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a41:	89 08                	mov    DWORD PTR [eax],ecx
c0000a43:	4d                   	dec    ebp
c0000a44:	75 03                	jne    c0000a49 <simple_strtoul+0x147>
c0000a46:	83 cb ff             	or     ebx,0xffffffff
c0000a49:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a4e:	75 02                	jne    c0000a52 <simple_strtoul+0x150>
c0000a50:	f7 db                	neg    ebx
c0000a52:	83 c4 08             	add    esp,0x8
c0000a55:	89 d8                	mov    eax,ebx
c0000a57:	5b                   	pop    ebx
c0000a58:	5e                   	pop    esi
c0000a59:	5f                   	pop    edi
c0000a5a:	5d                   	pop    ebp
c0000a5b:	c3                   	ret    

c0000a5c <largebin_index>:
c0000a5c:	89 c2                	mov    edx,eax
c0000a5e:	c1 ea 08             	shr    edx,0x8
c0000a61:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a67:	77 10                	ja     c0000a79 <largebin_index+0x1d>
c0000a69:	0f bd d2             	bsr    edx,edx
c0000a6c:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a6f:	d3 e8                	shr    eax,cl
c0000a71:	83 e0 03             	and    eax,0x3
c0000a74:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a78:	c3                   	ret    
c0000a79:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a7e:	c3                   	ret    

c0000a7f <malloc_init_state>:
c0000a7f:	53                   	push   ebx
c0000a80:	8d 50 34             	lea    edx,[eax+0x34]
c0000a83:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a89:	89 d1                	mov    ecx,edx
c0000a8b:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a8e:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a91:	83 c2 08             	add    edx,0x8
c0000a94:	39 da                	cmp    edx,ebx
c0000a96:	75 f3                	jne    c0000a8b <malloc_init_state+0xc>
c0000a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a9a:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000aa4:	83 e2 03             	and    edx,0x3
c0000aa7:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ab1:	83 ca 48             	or     edx,0x48
c0000ab4:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000abe:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ac8:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ad4:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ade:	5b                   	pop    ebx
c0000adf:	c3                   	ret    

c0000ae0 <malloc_consolidate>:
c0000ae0:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ae2:	85 d2                	test   edx,edx
c0000ae4:	0f 84 d8 00 00 00    	je     c0000bc2 <malloc_consolidate+0xe2>
c0000aea:	55                   	push   ebp
c0000aeb:	83 e2 fd             	and    edx,0xfffffffd
c0000aee:	57                   	push   edi
c0000aef:	89 c5                	mov    ebp,eax
c0000af1:	56                   	push   esi
c0000af2:	8d 78 34             	lea    edi,[eax+0x34]
c0000af5:	53                   	push   ebx
c0000af6:	83 ec 10             	sub    esp,0x10
c0000af9:	89 10                	mov    DWORD PTR [eax],edx
c0000afb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aff:	c1 ea 03             	shr    edx,0x3
c0000b02:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000b06:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000b0a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000b0d:	85 d2                	test   edx,edx
c0000b0f:	0f 84 98 00 00 00    	je     c0000bad <malloc_consolidate+0xcd>
c0000b15:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b1c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b1f:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b22:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b26:	89 f9                	mov    ecx,edi
c0000b28:	83 e1 fe             	and    ecx,0xfffffffe
c0000b2b:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b2e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b31:	83 e3 fc             	and    ebx,0xfffffffc
c0000b34:	83 e7 01             	and    edi,0x1
c0000b37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b3a:	75 14                	jne    c0000b50 <malloc_consolidate+0x70>
c0000b3c:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b3e:	29 fa                	sub    edx,edi
c0000b40:	01 f9                	add    ecx,edi
c0000b42:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b45:	89 fb                	mov    ebx,edi
c0000b47:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b4a:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b4d:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b50:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b53:	74 40                	je     c0000b95 <malloc_consolidate+0xb5>
c0000b55:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b58:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b5b:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b5f:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b62:	83 e7 01             	and    edi,0x1
c0000b65:	75 0e                	jne    c0000b75 <malloc_consolidate+0x95>
c0000b67:	01 d9                	add    ecx,ebx
c0000b69:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b6c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b6f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b72:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b75:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b78:	89 ce                	mov    esi,ecx
c0000b7a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b7d:	83 ce 01             	or     esi,0x1
c0000b80:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b83:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b86:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b89:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b8d:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b90:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b93:	eb 0c                	jmp    c0000ba1 <malloc_consolidate+0xc1>
c0000b95:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b98:	83 c9 01             	or     ecx,0x1
c0000b9b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b9e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ba1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ba5:	85 d2                	test   edx,edx
c0000ba7:	0f 85 6f ff ff ff    	jne    c0000b1c <malloc_consolidate+0x3c>
c0000bad:	83 c5 04             	add    ebp,0x4
c0000bb0:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000bb4:	0f 85 50 ff ff ff    	jne    c0000b0a <malloc_consolidate+0x2a>
c0000bba:	83 c4 10             	add    esp,0x10
c0000bbd:	5b                   	pop    ebx
c0000bbe:	5e                   	pop    esi
c0000bbf:	5f                   	pop    edi
c0000bc0:	5d                   	pop    ebp
c0000bc1:	c3                   	ret    
c0000bc2:	e9 b8 fe ff ff       	jmp    c0000a7f <malloc_init_state>

c0000bc7 <dlfree>:
c0000bc7:	57                   	push   edi
c0000bc8:	56                   	push   esi
c0000bc9:	53                   	push   ebx
c0000bca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bce:	85 db                	test   ebx,ebx
c0000bd0:	0f 84 e2 00 00 00    	je     c0000cb8 <dlfree+0xf1>
c0000bd6:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bd9:	8b 0d 60 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029060
c0000bdf:	89 f0                	mov    eax,esi
c0000be1:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000be4:	83 e0 fc             	and    eax,0xfffffffc
c0000be7:	39 c1                	cmp    ecx,eax
c0000be9:	72 24                	jb     c0000c0f <dlfree+0x48>
c0000beb:	83 c9 03             	or     ecx,0x3
c0000bee:	c1 e8 03             	shr    eax,0x3
c0000bf1:	89 0d 60 90 02 c0    	mov    DWORD PTR ds:0xc0029060,ecx
c0000bf7:	83 e8 02             	sub    eax,0x2
c0000bfa:	8b 0c 85 64 90 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6f9c]
c0000c01:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000c03:	89 14 85 64 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f9c],edx
c0000c0a:	e9 a9 00 00 00       	jmp    c0000cb8 <dlfree+0xf1>
c0000c0f:	83 e6 02             	and    esi,0x2
c0000c12:	0f 85 a0 00 00 00    	jne    c0000cb8 <dlfree+0xf1>
c0000c18:	83 c9 01             	or     ecx,0x1
c0000c1b:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c1e:	89 0d 60 90 02 c0    	mov    DWORD PTR ds:0xc0029060,ecx
c0000c24:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c27:	83 e1 fc             	and    ecx,0xfffffffc
c0000c2a:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c2e:	75 13                	jne    c0000c43 <dlfree+0x7c>
c0000c30:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c33:	29 da                	sub    edx,ebx
c0000c35:	01 d8                	add    eax,ebx
c0000c37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	39 35 8c 90 02 c0    	cmp    DWORD PTR ds:0xc002908c,esi
c0000c49:	74 40                	je     c0000c8b <dlfree+0xc4>
c0000c4b:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c4f:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c52:	80 e3 01             	and    bl,0x1
c0000c55:	75 0e                	jne    c0000c65 <dlfree+0x9e>
c0000c57:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c5a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c5d:	01 c8                	add    eax,ecx
c0000c5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c65:	8b 0d 9c 90 02 c0    	mov    ecx,DWORD PTR ds:0xc002909c
c0000c6b:	c7 42 0c 94 90 02 c0 	mov    DWORD PTR [edx+0xc],0xc0029094
c0000c72:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c75:	89 15 9c 90 02 c0    	mov    DWORD PTR ds:0xc002909c,edx
c0000c7b:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c7e:	89 c1                	mov    ecx,eax
c0000c80:	83 c9 01             	or     ecx,0x1
c0000c83:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c86:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c89:	eb 10                	jmp    c0000c9b <dlfree+0xd4>
c0000c8b:	01 c8                	add    eax,ecx
c0000c8d:	89 c1                	mov    ecx,eax
c0000c8f:	83 c9 01             	or     ecx,0x1
c0000c92:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c95:	89 15 8c 90 02 c0    	mov    DWORD PTR ds:0xc002908c,edx
c0000c9b:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ca0:	76 16                	jbe    c0000cb8 <dlfree+0xf1>
c0000ca2:	f6 05 60 90 02 c0 02 	test   BYTE PTR ds:0xc0029060,0x2
c0000ca9:	74 0d                	je     c0000cb8 <dlfree+0xf1>
c0000cab:	5b                   	pop    ebx
c0000cac:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0000cb1:	5e                   	pop    esi
c0000cb2:	5f                   	pop    edi
c0000cb3:	e9 28 fe ff ff       	jmp    c0000ae0 <malloc_consolidate>
c0000cb8:	5b                   	pop    ebx
c0000cb9:	5e                   	pop    esi
c0000cba:	5f                   	pop    edi
c0000cbb:	c3                   	ret    

c0000cbc <sYSMALLOc>:
c0000cbc:	55                   	push   ebp
c0000cbd:	57                   	push   edi
c0000cbe:	56                   	push   esi
c0000cbf:	53                   	push   ebx
c0000cc0:	89 d3                	mov    ebx,edx
c0000cc2:	83 ec 2c             	sub    esp,0x2c
c0000cc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000cc9:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ccf:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cd2:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cd9:	74 1f                	je     c0000cfa <sYSMALLOc+0x3e>
c0000cdb:	89 d8                	mov    eax,ebx
c0000cdd:	e8 fe fd ff ff       	call   c0000ae0 <malloc_consolidate>
c0000ce2:	83 ec 0c             	sub    esp,0xc
c0000ce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ce9:	83 e8 07             	sub    eax,0x7
c0000cec:	50                   	push   eax
c0000ced:	e8 30 02 00 00       	call   c0000f22 <dlmalloc>
c0000cf2:	83 c4 10             	add    esp,0x10
c0000cf5:	e9 20 02 00 00       	jmp    c0000f1a <sYSMALLOc+0x25e>
c0000cfa:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cfd:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000d03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000d06:	83 e0 fc             	and    eax,0xfffffffc
c0000d09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000d0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000d11:	83 c0 10             	add    eax,0x10
c0000d14:	01 c1                	add    ecx,eax
c0000d16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d1a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d21:	74 04                	je     c0000d27 <sYSMALLOc+0x6b>
c0000d23:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d27:	f7 da                	neg    edx
c0000d29:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d2d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d31:	21 d1                	and    ecx,edx
c0000d33:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d37:	7f 07                	jg     c0000d40 <sYSMALLOc+0x84>
c0000d39:	31 c0                	xor    eax,eax
c0000d3b:	e9 da 01 00 00       	jmp    c0000f1a <sYSMALLOc+0x25e>
c0000d40:	83 ec 0c             	sub    esp,0xc
c0000d43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d47:	e8 61 e2 00 00       	call   c000efad <sbrk>
c0000d4c:	83 c4 10             	add    esp,0x10
c0000d4f:	89 c6                	mov    esi,eax
c0000d51:	83 f8 ff             	cmp    eax,0xffffffff
c0000d54:	74 e3                	je     c0000d39 <sYSMALLOc+0x7d>
c0000d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d5a:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d5e:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d61:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d67:	39 f1                	cmp    ecx,esi
c0000d69:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d6f:	75 13                	jne    c0000d84 <sYSMALLOc+0xc8>
c0000d71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d75:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d79:	83 c8 01             	or     eax,0x1
c0000d7c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d7f:	e9 3e 01 00 00       	jmp    c0000ec2 <sYSMALLOc+0x206>
c0000d84:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d8a:	88 d0                	mov    al,dl
c0000d8c:	83 e0 01             	and    eax,0x1
c0000d8f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d94:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d98:	0f 95 c0             	setne  al
c0000d9b:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d9f:	39 f1                	cmp    ecx,esi
c0000da1:	76 12                	jbe    c0000db5 <sYSMALLOc+0xf9>
c0000da3:	84 c0                	test   al,al
c0000da5:	74 0e                	je     c0000db5 <sYSMALLOc+0xf9>
c0000da7:	83 e2 fe             	and    edx,0xfffffffe
c0000daa:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000db0:	e9 83 00 00 00       	jmp    c0000e38 <sYSMALLOc+0x17c>
c0000db5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000dba:	74 7c                	je     c0000e38 <sYSMALLOc+0x17c>
c0000dbc:	84 c0                	test   al,al
c0000dbe:	74 0c                	je     c0000dcc <sYSMALLOc+0x110>
c0000dc0:	89 f0                	mov    eax,esi
c0000dc2:	29 c8                	sub    eax,ecx
c0000dc4:	01 e8                	add    eax,ebp
c0000dc6:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dcc:	89 f2                	mov    edx,esi
c0000dce:	83 e2 07             	and    edx,0x7
c0000dd1:	74 0c                	je     c0000ddf <sYSMALLOc+0x123>
c0000dd3:	b8 08 00 00 00       	mov    eax,0x8
c0000dd8:	29 d0                	sub    eax,edx
c0000dda:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ddd:	eb 04                	jmp    c0000de3 <sYSMALLOc+0x127>
c0000ddf:	89 f5                	mov    ebp,esi
c0000de1:	31 c0                	xor    eax,eax
c0000de3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000de7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000deb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000def:	01 c1                	add    ecx,eax
c0000df1:	83 ec 0c             	sub    esp,0xc
c0000df4:	01 f1                	add    ecx,esi
c0000df6:	01 ca                	add    edx,ecx
c0000df8:	29 c8                	sub    eax,ecx
c0000dfa:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000dfe:	01 c2                	add    edx,eax
c0000e00:	52                   	push   edx
c0000e01:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000e05:	e8 a3 e1 00 00       	call   c000efad <sbrk>
c0000e0a:	83 c4 10             	add    esp,0x10
c0000e0d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000e14:	75 0f                	jne    c0000e25 <sYSMALLOc+0x169>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	6a 00                	push   0x0
c0000e1b:	e8 8d e1 00 00       	call   c000efad <sbrk>
c0000e20:	83 c4 10             	add    esp,0x10
c0000e23:	eb 30                	jmp    c0000e55 <sYSMALLOc+0x199>
c0000e25:	39 c6                	cmp    esi,eax
c0000e27:	76 33                	jbe    c0000e5c <sYSMALLOc+0x1a0>
c0000e29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e2d:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e34:	01 f0                	add    eax,esi
c0000e36:	eb 1d                	jmp    c0000e55 <sYSMALLOc+0x199>
c0000e38:	83 ec 0c             	sub    esp,0xc
c0000e3b:	89 f5                	mov    ebp,esi
c0000e3d:	6a 00                	push   0x0
c0000e3f:	e8 69 e1 00 00       	call   c000efad <sbrk>
c0000e44:	89 c2                	mov    edx,eax
c0000e46:	29 f2                	sub    edx,esi
c0000e48:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e4c:	83 c4 10             	add    esp,0x10
c0000e4f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e55:	31 d2                	xor    edx,edx
c0000e57:	83 f8 ff             	cmp    eax,0xffffffff
c0000e5a:	74 66                	je     c0000ec2 <sYSMALLOc+0x206>
c0000e5c:	29 e8                	sub    eax,ebp
c0000e5e:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e61:	01 d0                	add    eax,edx
c0000e63:	83 c8 01             	or     eax,0x1
c0000e66:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e69:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e6f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e74:	74 4c                	je     c0000ec2 <sYSMALLOc+0x206>
c0000e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 e8 0c             	sub    eax,0xc
c0000e7d:	83 e0 f8             	and    eax,0xfffffff8
c0000e80:	89 c2                	mov    edx,eax
c0000e82:	83 ca 01             	or     edx,0x1
c0000e85:	83 f8 0f             	cmp    eax,0xf
c0000e88:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8b:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e93:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9b:	76 25                	jbe    c0000ec2 <sYSMALLOc+0x206>
c0000e9d:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ea3:	83 ec 0c             	sub    esp,0xc
c0000ea6:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000eb0:	83 c7 08             	add    edi,0x8
c0000eb3:	57                   	push   edi
c0000eb4:	e8 0e fd ff ff       	call   c0000bc7 <dlfree>
c0000eb9:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ec8:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ece:	73 06                	jae    c0000ed6 <sYSMALLOc+0x21a>
c0000ed0:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ed6:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000edc:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ee2:	73 06                	jae    c0000eea <sYSMALLOc+0x22e>
c0000ee4:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000eea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000eed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ef0:	83 e2 fc             	and    edx,0xfffffffc
c0000ef3:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ef7:	0f 82 3c fe ff ff    	jb     c0000d39 <sYSMALLOc+0x7d>
c0000efd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000f01:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f04:	29 fa                	sub    edx,edi
c0000f06:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f09:	83 ca 01             	or     edx,0x1
c0000f0c:	89 fb                	mov    ebx,edi
c0000f0e:	83 c0 08             	add    eax,0x8
c0000f11:	83 cb 01             	or     ebx,0x1
c0000f14:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f17:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f1a:	83 c4 2c             	add    esp,0x2c
c0000f1d:	5b                   	pop    ebx
c0000f1e:	5e                   	pop    esi
c0000f1f:	5f                   	pop    edi
c0000f20:	5d                   	pop    ebp
c0000f21:	c3                   	ret    

c0000f22 <dlmalloc>:
c0000f22:	55                   	push   ebp
c0000f23:	57                   	push   edi
c0000f24:	56                   	push   esi
c0000f25:	53                   	push   ebx
c0000f26:	83 ec 1c             	sub    esp,0x1c
c0000f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f2d:	83 f8 df             	cmp    eax,0xffffffdf
c0000f30:	0f 87 70 03 00 00    	ja     c00012a6 <dlmalloc+0x384>
c0000f36:	83 c0 0b             	add    eax,0xb
c0000f39:	be 10 00 00 00       	mov    esi,0x10
c0000f3e:	83 f8 0f             	cmp    eax,0xf
c0000f41:	76 05                	jbe    c0000f48 <dlmalloc+0x26>
c0000f43:	83 e0 f8             	and    eax,0xfffffff8
c0000f46:	89 c6                	mov    esi,eax
c0000f48:	8b 3d 60 90 02 c0    	mov    edi,DWORD PTR ds:0xc0029060
c0000f4e:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f54:	75 17                	jne    c0000f6d <dlmalloc+0x4b>
c0000f56:	85 ff                	test   edi,edi
c0000f58:	0f 85 05 03 00 00    	jne    c0001263 <dlmalloc+0x341>
c0000f5e:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0000f63:	e8 78 fb ff ff       	call   c0000ae0 <malloc_consolidate>
c0000f68:	e9 f6 02 00 00       	jmp    c0001263 <dlmalloc+0x341>
c0000f6d:	39 f7                	cmp    edi,esi
c0000f6f:	72 1f                	jb     c0000f90 <dlmalloc+0x6e>
c0000f71:	89 f2                	mov    edx,esi
c0000f73:	c1 ea 03             	shr    edx,0x3
c0000f76:	83 ea 02             	sub    edx,0x2
c0000f79:	8b 04 95 64 90 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6f9c]
c0000f80:	85 c0                	test   eax,eax
c0000f82:	74 0c                	je     c0000f90 <dlmalloc+0x6e>
c0000f84:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f87:	89 0c 95 64 90 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6f9c],ecx
c0000f8e:	eb 30                	jmp    c0000fc0 <dlmalloc+0x9e>
c0000f90:	89 f0                	mov    eax,esi
c0000f92:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f98:	77 2e                	ja     c0000fc8 <dlmalloc+0xa6>
c0000f9a:	c1 e8 03             	shr    eax,0x3
c0000f9d:	8d 14 c5 94 90 02 c0 	lea    edx,[eax*8-0x3ffd6f6c]
c0000fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fa8:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000fab:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000fae:	39 c3                	cmp    ebx,eax
c0000fb0:	74 2e                	je     c0000fe0 <dlmalloc+0xbe>
c0000fb2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fb5:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fba:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fbd:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fc0:	83 c0 08             	add    eax,0x8
c0000fc3:	e9 e0 02 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0000fc8:	e8 8f fa ff ff       	call   c0000a5c <largebin_index>
c0000fcd:	83 e7 02             	and    edi,0x2
c0000fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fd4:	74 0a                	je     c0000fe0 <dlmalloc+0xbe>
c0000fd6:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0000fdb:	e8 00 fb ff ff       	call   c0000ae0 <malloc_consolidate>
c0000fe0:	8d 46 10             	lea    eax,[esi+0x10]
c0000fe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fe7:	8b 1d a0 90 02 c0    	mov    ebx,DWORD PTR ds:0xc00290a0
c0000fed:	81 fb 94 90 02 c0    	cmp    ebx,0xc0029094
c0000ff3:	0f 84 13 01 00 00    	je     c000110c <dlmalloc+0x1ea>
c0000ff9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000ffc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fff:	83 e7 fc             	and    edi,0xfffffffc
c0001002:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001008:	77 4c                	ja     c0001056 <dlmalloc+0x134>
c000100a:	3d 94 90 02 c0       	cmp    eax,0xc0029094
c000100f:	75 45                	jne    c0001056 <dlmalloc+0x134>
c0001011:	39 1d 90 90 02 c0    	cmp    DWORD PTR ds:0xc0029090,ebx
c0001017:	75 3d                	jne    c0001056 <dlmalloc+0x134>
c0001019:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000101d:	73 37                	jae    c0001056 <dlmalloc+0x134>
c000101f:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001022:	89 fa                	mov    edx,edi
c0001024:	a3 9c 90 02 c0       	mov    ds:0xc002909c,eax
c0001029:	a3 a0 90 02 c0       	mov    ds:0xc00290a0,eax
c000102e:	a3 90 90 02 c0       	mov    ds:0xc0029090,eax
c0001033:	29 f2                	sub    edx,esi
c0001035:	c7 40 08 94 90 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029094
c000103c:	c7 40 0c 94 90 02 c0 	mov    DWORD PTR [eax+0xc],0xc0029094
c0001043:	83 ce 01             	or     esi,0x1
c0001046:	89 d1                	mov    ecx,edx
c0001048:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000104b:	83 c9 01             	or     ecx,0x1
c000104e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001051:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001054:	eb 15                	jmp    c000106b <dlmalloc+0x149>
c0001056:	a3 a0 90 02 c0       	mov    ds:0xc00290a0,eax
c000105b:	39 fe                	cmp    esi,edi
c000105d:	c7 40 08 94 90 02 c0 	mov    DWORD PTR [eax+0x8],0xc0029094
c0001064:	75 0d                	jne    c0001073 <dlmalloc+0x151>
c0001066:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000106b:	8d 43 08             	lea    eax,[ebx+0x8]
c000106e:	e9 35 02 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001073:	89 f8                	mov    eax,edi
c0001075:	81 ff ff 00 00 00    	cmp    edi,0xff
c000107b:	77 19                	ja     c0001096 <dlmalloc+0x174>
c000107d:	c1 e8 03             	shr    eax,0x3
c0001080:	8d 14 00             	lea    edx,[eax+eax*1]
c0001083:	83 c2 0d             	add    edx,0xd
c0001086:	8d 2c 95 58 90 02 c0 	lea    ebp,[edx*4-0x3ffd6fa8]
c000108d:	8b 14 95 60 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fa0]
c0001094:	eb 46                	jmp    c00010dc <dlmalloc+0x1ba>
c0001096:	e8 c1 f9 ff ff       	call   c0000a5c <largebin_index>
c000109b:	8d 14 00             	lea    edx,[eax+eax*1]
c000109e:	83 c2 0d             	add    edx,0xd
c00010a1:	8d 0c 95 60 90 02 c0 	lea    ecx,[edx*4-0x3ffd6fa0]
c00010a8:	8b 14 95 60 90 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6fa0]
c00010af:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010b2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010b6:	89 d5                	mov    ebp,edx
c00010b8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010bc:	74 1e                	je     c00010dc <dlmalloc+0x1ba>
c00010be:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010c1:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010c4:	77 12                	ja     c00010d8 <dlmalloc+0x1b6>
c00010c6:	83 cf 01             	or     edi,0x1
c00010c9:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010cc:	76 05                	jbe    c00010d3 <dlmalloc+0x1b1>
c00010ce:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010d1:	eb f6                	jmp    c00010c9 <dlmalloc+0x1a7>
c00010d3:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010d6:	eb 04                	jmp    c00010dc <dlmalloc+0x1ba>
c00010d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010dc:	89 c7                	mov    edi,eax
c00010de:	88 c1                	mov    cl,al
c00010e0:	c1 ff 05             	sar    edi,0x5
c00010e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010e7:	bf 01 00 00 00       	mov    edi,0x1
c00010ec:	d3 e7                	shl    edi,cl
c00010ee:	89 f8                	mov    eax,edi
c00010f0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010f4:	09 04 bd 94 93 02 c0 	or     DWORD PTR [edi*4-0x3ffd6c6c],eax
c00010fb:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001101:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001104:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001107:	e9 db fe ff ff       	jmp    c0000fe7 <dlmalloc+0xc5>
c000110c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001112:	76 78                	jbe    c000118c <dlmalloc+0x26a>
c0001114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001118:	8d 04 c5 94 90 02 c0 	lea    eax,[eax*8-0x3ffd6f6c]
c000111f:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001122:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001125:	39 ca                	cmp    edx,ecx
c0001127:	74 63                	je     c000118c <dlmalloc+0x26a>
c0001129:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000112c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000112f:	83 e3 fc             	and    ebx,0xfffffffc
c0001132:	39 de                	cmp    esi,ebx
c0001134:	77 52                	ja     c0001188 <dlmalloc+0x266>
c0001136:	89 df                	mov    edi,ebx
c0001138:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000113b:	29 f7                	sub    edi,esi
c000113d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001140:	01 d3                	add    ebx,edx
c0001142:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001145:	83 ff 0f             	cmp    edi,0xf
c0001148:	8d 42 08             	lea    eax,[edx+0x8]
c000114b:	77 09                	ja     c0001156 <dlmalloc+0x234>
c000114d:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001151:	e9 52 01 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001156:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001159:	83 ce 01             	or     esi,0x1
c000115c:	89 0d 9c 90 02 c0    	mov    DWORD PTR ds:0xc002909c,ecx
c0001162:	89 0d a0 90 02 c0    	mov    DWORD PTR ds:0xc00290a0,ecx
c0001168:	c7 41 08 94 90 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0029094
c000116f:	c7 41 0c 94 90 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0029094
c0001176:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001179:	89 fa                	mov    edx,edi
c000117b:	83 ca 01             	or     edx,0x1
c000117e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001181:	89 3b                	mov    DWORD PTR [ebx],edi
c0001183:	e9 20 01 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001188:	89 c2                	mov    edx,eax
c000118a:	eb 99                	jmp    c0001125 <dlmalloc+0x203>
c000118c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001190:	b8 01 00 00 00       	mov    eax,0x1
c0001195:	41                   	inc    ecx
c0001196:	89 cb                	mov    ebx,ecx
c0001198:	8d 14 cd 8c 90 02 c0 	lea    edx,[ecx*8-0x3ffd6f74]
c000119f:	c1 eb 05             	shr    ebx,0x5
c00011a2:	d3 e0                	shl    eax,cl
c00011a4:	8b 3c 9d 94 93 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6c6c]
c00011ab:	39 f8                	cmp    eax,edi
c00011ad:	77 04                	ja     c00011b3 <dlmalloc+0x291>
c00011af:	85 c0                	test   eax,eax
c00011b1:	75 26                	jne    c00011d9 <dlmalloc+0x2b7>
c00011b3:	43                   	inc    ebx
c00011b4:	83 fb 02             	cmp    ebx,0x2
c00011b7:	0f 87 a6 00 00 00    	ja     c0001263 <dlmalloc+0x341>
c00011bd:	8b 3c 9d 94 93 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd6c6c]
c00011c4:	85 ff                	test   edi,edi
c00011c6:	74 eb                	je     c00011b3 <dlmalloc+0x291>
c00011c8:	89 d8                	mov    eax,ebx
c00011ca:	c1 e0 06             	shl    eax,0x6
c00011cd:	8d 14 85 8c 90 02 c0 	lea    edx,[eax*4-0x3ffd6f74]
c00011d4:	b8 01 00 00 00       	mov    eax,0x1
c00011d9:	85 f8                	test   eax,edi
c00011db:	75 07                	jne    c00011e4 <dlmalloc+0x2c2>
c00011dd:	83 c2 08             	add    edx,0x8
c00011e0:	01 c0                	add    eax,eax
c00011e2:	eb f5                	jmp    c00011d9 <dlmalloc+0x2b7>
c00011e4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	75 14                	jne    c00011ff <dlmalloc+0x2dd>
c00011eb:	89 c1                	mov    ecx,eax
c00011ed:	83 c2 08             	add    edx,0x8
c00011f0:	f7 d1                	not    ecx
c00011f2:	01 c0                	add    eax,eax
c00011f4:	21 cf                	and    edi,ecx
c00011f6:	89 3c 9d 94 93 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd6c6c],edi
c00011fd:	eb ac                	jmp    c00011ab <dlmalloc+0x289>
c00011ff:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001202:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001205:	83 e0 fc             	and    eax,0xfffffffc
c0001208:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000120b:	89 c3                	mov    ebx,eax
c000120d:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001210:	29 f3                	sub    ebx,esi
c0001212:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001215:	83 fb 0f             	cmp    ebx,0xf
c0001218:	8d 41 08             	lea    eax,[ecx+0x8]
c000121b:	77 09                	ja     c0001226 <dlmalloc+0x304>
c000121d:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001221:	e9 82 00 00 00       	jmp    c00012a8 <dlmalloc+0x386>
c0001226:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001229:	81 fe ff 00 00 00    	cmp    esi,0xff
c000122f:	89 3d 9c 90 02 c0    	mov    DWORD PTR ds:0xc002909c,edi
c0001235:	89 3d a0 90 02 c0    	mov    DWORD PTR ds:0xc00290a0,edi
c000123b:	c7 47 08 94 90 02 c0 	mov    DWORD PTR [edi+0x8],0xc0029094
c0001242:	c7 47 0c 94 90 02 c0 	mov    DWORD PTR [edi+0xc],0xc0029094
c0001249:	77 06                	ja     c0001251 <dlmalloc+0x32f>
c000124b:	89 3d 90 90 02 c0    	mov    DWORD PTR ds:0xc0029090,edi
c0001251:	83 ce 01             	or     esi,0x1
c0001254:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001257:	89 d9                	mov    ecx,ebx
c0001259:	83 c9 01             	or     ecx,0x1
c000125c:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000125f:	89 1a                	mov    DWORD PTR [edx],ebx
c0001261:	eb 45                	jmp    c00012a8 <dlmalloc+0x386>
c0001263:	a1 8c 90 02 c0       	mov    eax,ds:0xc002908c
c0001268:	8d 4e 10             	lea    ecx,[esi+0x10]
c000126b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000126e:	83 e2 fc             	and    edx,0xfffffffc
c0001271:	39 d1                	cmp    ecx,edx
c0001273:	77 1e                	ja     c0001293 <dlmalloc+0x371>
c0001275:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001278:	89 f3                	mov    ebx,esi
c000127a:	89 0d 8c 90 02 c0    	mov    DWORD PTR ds:0xc002908c,ecx
c0001280:	83 cb 01             	or     ebx,0x1
c0001283:	29 f2                	sub    edx,esi
c0001285:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001288:	83 ca 01             	or     edx,0x1
c000128b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000128e:	e9 2d fd ff ff       	jmp    c0000fc0 <dlmalloc+0x9e>
c0001293:	83 c4 1c             	add    esp,0x1c
c0001296:	89 f0                	mov    eax,esi
c0001298:	5b                   	pop    ebx
c0001299:	ba 60 90 02 c0       	mov    edx,0xc0029060
c000129e:	5e                   	pop    esi
c000129f:	5f                   	pop    edi
c00012a0:	5d                   	pop    ebp
c00012a1:	e9 16 fa ff ff       	jmp    c0000cbc <sYSMALLOc>
c00012a6:	31 c0                	xor    eax,eax
c00012a8:	83 c4 1c             	add    esp,0x1c
c00012ab:	5b                   	pop    ebx
c00012ac:	5e                   	pop    esi
c00012ad:	5f                   	pop    edi
c00012ae:	5d                   	pop    ebp
c00012af:	c3                   	ret    

c00012b0 <iALLOc>:
c00012b0:	55                   	push   ebp
c00012b1:	89 c5                	mov    ebp,eax
c00012b3:	57                   	push   edi
c00012b4:	56                   	push   esi
c00012b5:	53                   	push   ebx
c00012b6:	83 ec 2c             	sub    esp,0x2c
c00012b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012bd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012c5:	83 3d 60 90 02 c0 00 	cmp    DWORD PTR ds:0xc0029060,0x0
c00012cc:	75 12                	jne    c00012e0 <iALLOc+0x30>
c00012ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012d2:	b8 60 90 02 c0       	mov    eax,0xc0029060
c00012d7:	e8 04 f8 ff ff       	call   c0000ae0 <malloc_consolidate>
c00012dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012e5:	74 12                	je     c00012f9 <iALLOc+0x49>
c00012e7:	85 ed                	test   ebp,ebp
c00012e9:	0f 84 64 01 00 00    	je     c0001453 <iALLOc+0x1a3>
c00012ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012f7:	eb 33                	jmp    c000132c <iALLOc+0x7c>
c00012f9:	85 ed                	test   ebp,ebp
c00012fb:	75 14                	jne    c0001311 <iALLOc+0x61>
c00012fd:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001305:	83 c4 2c             	add    esp,0x2c
c0001308:	5b                   	pop    ebx
c0001309:	5e                   	pop    esi
c000130a:	5f                   	pop    edi
c000130b:	5d                   	pop    ebp
c000130c:	e9 11 fc ff ff       	jmp    c0000f22 <dlmalloc>
c0001311:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001318:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001320:	83 f8 0f             	cmp    eax,0xf
c0001323:	76 07                	jbe    c000132c <iALLOc+0x7c>
c0001325:	83 e0 f8             	and    eax,0xfffffff8
c0001328:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000132c:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001331:	75 09                	jne    c000133c <iALLOc+0x8c>
c0001333:	89 d0                	mov    eax,edx
c0001335:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001338:	31 f6                	xor    esi,esi
c000133a:	eb 3b                	jmp    c0001377 <iALLOc+0xc7>
c000133c:	8b 02                	mov    eax,DWORD PTR [edx]
c000133e:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001346:	83 c0 0b             	add    eax,0xb
c0001349:	83 f8 0f             	cmp    eax,0xf
c000134c:	76 07                	jbe    c0001355 <iALLOc+0xa5>
c000134e:	83 e0 f8             	and    eax,0xfffffff8
c0001351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001355:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001359:	0f af f5             	imul   esi,ebp
c000135c:	eb 25                	jmp    c0001383 <iALLOc+0xd3>
c000135e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001360:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001363:	bb 10 00 00 00       	mov    ebx,0x10
c0001368:	83 f9 0f             	cmp    ecx,0xf
c000136b:	76 05                	jbe    c0001372 <iALLOc+0xc2>
c000136d:	83 e1 f8             	and    ecx,0xfffffff8
c0001370:	89 cb                	mov    ebx,ecx
c0001372:	01 de                	add    esi,ebx
c0001374:	83 c0 04             	add    eax,0x4
c0001377:	39 c7                	cmp    edi,eax
c0001379:	75 e3                	jne    c000135e <iALLOc+0xae>
c000137b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001383:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001387:	8b 1d b4 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293b4
c000138d:	83 ec 0c             	sub    esp,0xc
c0001390:	c7 05 b4 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293b4,0x0
c000139a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000139e:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00013a2:	50                   	push   eax
c00013a3:	e8 7a fb ff ff       	call   c0000f22 <dlmalloc>
c00013a8:	83 c4 10             	add    esp,0x10
c00013ab:	89 1d b4 93 02 c0    	mov    DWORD PTR ds:0xc00293b4,ebx
c00013b1:	85 c0                	test   eax,eax
c00013b3:	0f 84 92 00 00 00    	je     c000144b <iALLOc+0x19b>
c00013b9:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013bc:	8d 78 f8             	lea    edi,[eax-0x8]
c00013bf:	83 e3 fc             	and    ebx,0xfffffffc
c00013c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013c6:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013cb:	74 1e                	je     c00013eb <iALLOc+0x13b>
c00013cd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013d1:	89 d9                	mov    ecx,ebx
c00013d3:	52                   	push   edx
c00013d4:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013d8:	83 e9 04             	sub    ecx,0x4
c00013db:	51                   	push   ecx
c00013dc:	6a 00                	push   0x0
c00013de:	50                   	push   eax
c00013df:	e8 02 f3 ff ff       	call   c00006e6 <memset>
c00013e4:	83 c4 10             	add    esp,0x10
c00013e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f0:	75 14                	jne    c0001406 <iALLOc+0x156>
c00013f2:	8d 04 37             	lea    eax,[edi+esi*1]
c00013f5:	29 f3                	sub    ebx,esi
c00013f7:	8d 48 08             	lea    ecx,[eax+0x8]
c00013fa:	83 cb 01             	or     ebx,0x1
c00013fd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001401:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001404:	89 f3                	mov    ebx,esi
c0001406:	31 c0                	xor    eax,eax
c0001408:	4d                   	dec    ebp
c0001409:	8d 4f 08             	lea    ecx,[edi+0x8]
c000140c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001410:	39 c5                	cmp    ebp,eax
c0001412:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001415:	74 2c                	je     c0001443 <iALLOc+0x193>
c0001417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000141b:	85 c9                	test   ecx,ecx
c000141d:	75 15                	jne    c0001434 <iALLOc+0x184>
c000141f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001422:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001425:	b9 10 00 00 00       	mov    ecx,0x10
c000142a:	83 fe 0f             	cmp    esi,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0x184>
c000142f:	83 e6 f8             	and    esi,0xfffffff8
c0001432:	89 f1                	mov    ecx,esi
c0001434:	89 ce                	mov    esi,ecx
c0001436:	29 cb                	sub    ebx,ecx
c0001438:	83 ce 01             	or     esi,0x1
c000143b:	40                   	inc    eax
c000143c:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000143f:	01 cf                	add    edi,ecx
c0001441:	eb c6                	jmp    c0001409 <iALLOc+0x159>
c0001443:	83 cb 01             	or     ebx,0x1
c0001446:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001449:	eb 08                	jmp    c0001453 <iALLOc+0x1a3>
c000144b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001457:	83 c4 2c             	add    esp,0x2c
c000145a:	5b                   	pop    ebx
c000145b:	5e                   	pop    esi
c000145c:	5f                   	pop    edi
c000145d:	5d                   	pop    ebp
c000145e:	c3                   	ret    

c000145f <dlrealloc>:
c000145f:	55                   	push   ebp
c0001460:	57                   	push   edi
c0001461:	56                   	push   esi
c0001462:	53                   	push   ebx
c0001463:	83 ec 1c             	sub    esp,0x1c
c0001466:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000146a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000146e:	85 db                	test   ebx,ebx
c0001470:	75 10                	jne    c0001482 <dlrealloc+0x23>
c0001472:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001476:	83 c4 1c             	add    esp,0x1c
c0001479:	5b                   	pop    ebx
c000147a:	5e                   	pop    esi
c000147b:	5f                   	pop    edi
c000147c:	5d                   	pop    ebp
c000147d:	e9 a0 fa ff ff       	jmp    c0000f22 <dlmalloc>
c0001482:	83 f8 df             	cmp    eax,0xffffffdf
c0001485:	76 07                	jbe    c000148e <dlrealloc+0x2f>
c0001487:	31 db                	xor    ebx,ebx
c0001489:	e9 7c 01 00 00       	jmp    c000160a <dlrealloc+0x1ab>
c000148e:	83 c0 0b             	add    eax,0xb
c0001491:	bf 10 00 00 00       	mov    edi,0x10
c0001496:	83 f8 0f             	cmp    eax,0xf
c0001499:	76 05                	jbe    c00014a0 <dlrealloc+0x41>
c000149b:	83 e0 f8             	and    eax,0xfffffff8
c000149e:	89 c7                	mov    edi,eax
c00014a0:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00014a3:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00014a6:	89 c6                	mov    esi,eax
c00014a8:	83 e6 fc             	and    esi,0xfffffffc
c00014ab:	a8 02                	test   al,0x2
c00014ad:	75 d8                	jne    c0001487 <dlrealloc+0x28>
c00014af:	39 f7                	cmp    edi,esi
c00014b1:	0f 86 15 01 00 00    	jbe    c00015cc <dlrealloc+0x16d>
c00014b7:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014be:	39 15 8c 90 02 c0    	cmp    DWORD PTR ds:0xc002908c,edx
c00014c4:	75 33                	jne    c00014f9 <dlrealloc+0x9a>
c00014c6:	83 e1 fc             	and    ecx,0xfffffffc
c00014c9:	01 f1                	add    ecx,esi
c00014cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014cf:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014d6:	77 49                	ja     c0001521 <dlrealloc+0xc2>
c00014d8:	01 fd                	add    ebp,edi
c00014da:	83 e0 01             	and    eax,0x1
c00014dd:	09 f8                	or     eax,edi
c00014df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014e2:	89 2d 8c 90 02 c0    	mov    DWORD PTR ds:0xc002908c,ebp
c00014e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ec:	29 f8                	sub    eax,edi
c00014ee:	83 c8 01             	or     eax,0x1
c00014f1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014f4:	e9 11 01 00 00       	jmp    c000160a <dlrealloc+0x1ab>
c00014f9:	89 c8                	mov    eax,ecx
c00014fb:	83 e0 fe             	and    eax,0xfffffffe
c00014fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001503:	75 1c                	jne    c0001521 <dlrealloc+0xc2>
c0001505:	83 e1 fc             	and    ecx,0xfffffffc
c0001508:	01 f1                	add    ecx,esi
c000150a:	39 cf                	cmp    edi,ecx
c000150c:	77 13                	ja     c0001521 <dlrealloc+0xc2>
c000150e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001511:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001514:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001517:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000151a:	89 ce                	mov    esi,ecx
c000151c:	e9 ab 00 00 00       	jmp    c00015cc <dlrealloc+0x16d>
c0001521:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001525:	8d 47 f9             	lea    eax,[edi-0x7]
c0001528:	83 ec 0c             	sub    esp,0xc
c000152b:	50                   	push   eax
c000152c:	e8 f1 f9 ff ff       	call   c0000f22 <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 c1                	mov    ecx,eax
c0001536:	85 c0                	test   eax,eax
c0001538:	0f 84 49 ff ff ff    	je     c0001487 <dlrealloc+0x28>
c000153e:	8d 40 f8             	lea    eax,[eax-0x8]
c0001541:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001545:	39 c2                	cmp    edx,eax
c0001547:	75 0a                	jne    c0001553 <dlrealloc+0xf4>
c0001549:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000154c:	83 e0 fc             	and    eax,0xfffffffc
c000154f:	01 c6                	add    esi,eax
c0001551:	eb 79                	jmp    c00015cc <dlrealloc+0x16d>
c0001553:	83 ee 04             	sub    esi,0x4
c0001556:	83 fe 27             	cmp    esi,0x27
c0001559:	76 16                	jbe    c0001571 <dlrealloc+0x112>
c000155b:	50                   	push   eax
c000155c:	56                   	push   esi
c000155d:	53                   	push   ebx
c000155e:	51                   	push   ecx
c000155f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001563:	e8 48 f1 ff ff       	call   c00006b0 <memcpy>
c0001568:	83 c4 10             	add    esp,0x10
c000156b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156f:	eb 43                	jmp    c00015b4 <dlrealloc+0x155>
c0001571:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001573:	83 fe 13             	cmp    esi,0x13
c0001576:	89 01                	mov    DWORD PTR [ecx],eax
c0001578:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000157b:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000157e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001581:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001584:	76 2e                	jbe    c00015b4 <dlrealloc+0x155>
c0001586:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001589:	83 fe 1b             	cmp    esi,0x1b
c000158c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000158f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001592:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001595:	76 1d                	jbe    c00015b4 <dlrealloc+0x155>
c0001597:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000159a:	83 fe 23             	cmp    esi,0x23
c000159d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00015a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00015a3:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00015a6:	76 0c                	jbe    c00015b4 <dlrealloc+0x155>
c00015a8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00015ab:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00015ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015b1:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015b8:	83 ec 0c             	sub    esp,0xc
c00015bb:	53                   	push   ebx
c00015bc:	e8 06 f6 ff ff       	call   c0000bc7 <dlfree>
c00015c1:	83 c4 10             	add    esp,0x10
c00015c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015c8:	89 cb                	mov    ebx,ecx
c00015ca:	eb 3e                	jmp    c000160a <dlrealloc+0x1ab>
c00015cc:	89 f2                	mov    edx,esi
c00015ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015d1:	29 fa                	sub    edx,edi
c00015d3:	83 e1 01             	and    ecx,0x1
c00015d6:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015da:	83 fa 0f             	cmp    edx,0xf
c00015dd:	77 0b                	ja     c00015ea <dlrealloc+0x18b>
c00015df:	09 ce                	or     esi,ecx
c00015e1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e8:	eb 20                	jmp    c000160a <dlrealloc+0x1ab>
c00015ea:	01 fd                	add    ebp,edi
c00015ec:	83 ec 0c             	sub    esp,0xc
c00015ef:	09 cf                	or     edi,ecx
c00015f1:	83 ca 01             	or     edx,0x1
c00015f4:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015f7:	83 c5 08             	add    ebp,0x8
c00015fa:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015fd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001601:	55                   	push   ebp
c0001602:	e8 c0 f5 ff ff       	call   c0000bc7 <dlfree>
c0001607:	83 c4 10             	add    esp,0x10
c000160a:	83 c4 1c             	add    esp,0x1c
c000160d:	89 d8                	mov    eax,ebx
c000160f:	5b                   	pop    ebx
c0001610:	5e                   	pop    esi
c0001611:	5f                   	pop    edi
c0001612:	5d                   	pop    ebp
c0001613:	c3                   	ret    

c0001614 <dlmemalign>:
c0001614:	55                   	push   ebp
c0001615:	57                   	push   edi
c0001616:	56                   	push   esi
c0001617:	53                   	push   ebx
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000161f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001623:	83 fa 08             	cmp    edx,0x8
c0001626:	77 10                	ja     c0001638 <dlmemalign+0x24>
c0001628:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000162c:	83 c4 0c             	add    esp,0xc
c000162f:	5b                   	pop    ebx
c0001630:	5e                   	pop    esi
c0001631:	5f                   	pop    edi
c0001632:	5d                   	pop    ebp
c0001633:	e9 ea f8 ff ff       	jmp    c0000f22 <dlmalloc>
c0001638:	bf 10 00 00 00       	mov    edi,0x10
c000163d:	83 fa 0f             	cmp    edx,0xf
c0001640:	76 13                	jbe    c0001655 <dlmemalign+0x41>
c0001642:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001645:	85 d1                	test   ecx,edx
c0001647:	75 04                	jne    c000164d <dlmemalign+0x39>
c0001649:	89 d7                	mov    edi,edx
c000164b:	eb 08                	jmp    c0001655 <dlmemalign+0x41>
c000164d:	39 d7                	cmp    edi,edx
c000164f:	73 04                	jae    c0001655 <dlmemalign+0x41>
c0001651:	01 ff                	add    edi,edi
c0001653:	eb f8                	jmp    c000164d <dlmemalign+0x39>
c0001655:	83 f8 df             	cmp    eax,0xffffffdf
c0001658:	76 07                	jbe    c0001661 <dlmemalign+0x4d>
c000165a:	31 c0                	xor    eax,eax
c000165c:	e9 ce 00 00 00       	jmp    c000172f <dlmemalign+0x11b>
c0001661:	83 c0 0b             	add    eax,0xb
c0001664:	bd 10 00 00 00       	mov    ebp,0x10
c0001669:	83 f8 0f             	cmp    eax,0xf
c000166c:	76 05                	jbe    c0001673 <dlmemalign+0x5f>
c000166e:	83 e0 f8             	and    eax,0xfffffff8
c0001671:	89 c5                	mov    ebp,eax
c0001673:	83 ec 0c             	sub    esp,0xc
c0001676:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000167a:	50                   	push   eax
c000167b:	e8 a2 f8 ff ff       	call   c0000f22 <dlmalloc>
c0001680:	83 c4 10             	add    esp,0x10
c0001683:	89 c1                	mov    ecx,eax
c0001685:	85 c0                	test   eax,eax
c0001687:	74 d1                	je     c000165a <dlmemalign+0x46>
c0001689:	31 d2                	xor    edx,edx
c000168b:	8d 70 f8             	lea    esi,[eax-0x8]
c000168e:	f7 f7                	div    edi
c0001690:	85 d2                	test   edx,edx
c0001692:	74 62                	je     c00016f6 <dlmemalign+0xe2>
c0001694:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001698:	89 f8                	mov    eax,edi
c000169a:	f7 d8                	neg    eax
c000169c:	21 c3                	and    ebx,eax
c000169e:	83 eb 08             	sub    ebx,0x8
c00016a1:	89 d8                	mov    eax,ebx
c00016a3:	29 f0                	sub    eax,esi
c00016a5:	83 f8 0f             	cmp    eax,0xf
c00016a8:	77 02                	ja     c00016ac <dlmemalign+0x98>
c00016aa:	01 fb                	add    ebx,edi
c00016ac:	89 d8                	mov    eax,ebx
c00016ae:	29 f0                	sub    eax,esi
c00016b0:	89 c6                	mov    esi,eax
c00016b2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016b5:	89 c2                	mov    edx,eax
c00016b7:	83 e2 fc             	and    edx,0xfffffffc
c00016ba:	29 f2                	sub    edx,esi
c00016bc:	a8 02                	test   al,0x2
c00016be:	74 10                	je     c00016d0 <dlmemalign+0xbc>
c00016c0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016c3:	83 ca 02             	or     edx,0x2
c00016c6:	8d 43 08             	lea    eax,[ebx+0x8]
c00016c9:	89 33                	mov    DWORD PTR [ebx],esi
c00016cb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ce:	eb 5f                	jmp    c000172f <dlmemalign+0x11b>
c00016d0:	83 ec 0c             	sub    esp,0xc
c00016d3:	89 d0                	mov    eax,edx
c00016d5:	83 c8 01             	or     eax,0x1
c00016d8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016db:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016e3:	83 e0 01             	and    eax,0x1
c00016e6:	09 f0                	or     eax,esi
c00016e8:	89 de                	mov    esi,ebx
c00016ea:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016ed:	51                   	push   ecx
c00016ee:	e8 d4 f4 ff ff       	call   c0000bc7 <dlfree>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	a8 02                	test   al,0x2
c00016fb:	75 2f                	jne    c000172c <dlmemalign+0x118>
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	8d 55 10             	lea    edx,[ebp+0x10]
c0001703:	39 c2                	cmp    edx,eax
c0001705:	73 25                	jae    c000172c <dlmemalign+0x118>
c0001707:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000170a:	83 ec 0c             	sub    esp,0xc
c000170d:	29 e8                	sub    eax,ebp
c000170f:	83 c2 08             	add    edx,0x8
c0001712:	83 c8 01             	or     eax,0x1
c0001715:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001718:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000171b:	83 e0 01             	and    eax,0x1
c000171e:	09 c5                	or     ebp,eax
c0001720:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001723:	52                   	push   edx
c0001724:	e8 9e f4 ff ff       	call   c0000bc7 <dlfree>
c0001729:	83 c4 10             	add    esp,0x10
c000172c:	8d 46 08             	lea    eax,[esi+0x8]
c000172f:	83 c4 0c             	add    esp,0xc
c0001732:	5b                   	pop    ebx
c0001733:	5e                   	pop    esi
c0001734:	5f                   	pop    edi
c0001735:	5d                   	pop    ebp
c0001736:	c3                   	ret    

c0001737 <dlcalloc>:
c0001737:	53                   	push   ebx
c0001738:	83 ec 14             	sub    esp,0x14
c000173b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000173f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001744:	50                   	push   eax
c0001745:	e8 d8 f7 ff ff       	call   c0000f22 <dlmalloc>
c000174a:	83 c4 10             	add    esp,0x10
c000174d:	89 c3                	mov    ebx,eax
c000174f:	85 c0                	test   eax,eax
c0001751:	74 77                	je     c00017ca <dlcalloc+0x93>
c0001753:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001756:	89 d0                	mov    eax,edx
c0001758:	83 e0 fc             	and    eax,0xfffffffc
c000175b:	80 e2 02             	and    dl,0x2
c000175e:	75 5a                	jne    c00017ba <dlcalloc+0x83>
c0001760:	83 e8 04             	sub    eax,0x4
c0001763:	83 f8 27             	cmp    eax,0x27
c0001766:	76 03                	jbe    c000176b <dlcalloc+0x34>
c0001768:	51                   	push   ecx
c0001769:	eb 53                	jmp    c00017be <dlcalloc+0x87>
c000176b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001771:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001778:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000177f:	83 f8 13             	cmp    eax,0x13
c0001782:	76 46                	jbe    c00017ca <dlcalloc+0x93>
c0001784:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000178b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001792:	83 f8 1b             	cmp    eax,0x1b
c0001795:	76 33                	jbe    c00017ca <dlcalloc+0x93>
c0001797:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000179e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00017a5:	83 f8 23             	cmp    eax,0x23
c00017a8:	76 20                	jbe    c00017ca <dlcalloc+0x93>
c00017aa:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017b1:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017b8:	eb 10                	jmp    c00017ca <dlcalloc+0x93>
c00017ba:	83 e8 08             	sub    eax,0x8
c00017bd:	52                   	push   edx
c00017be:	50                   	push   eax
c00017bf:	6a 00                	push   0x0
c00017c1:	53                   	push   ebx
c00017c2:	e8 1f ef ff ff       	call   c00006e6 <memset>
c00017c7:	83 c4 10             	add    esp,0x10
c00017ca:	89 d8                	mov    eax,ebx
c00017cc:	83 c4 08             	add    esp,0x8
c00017cf:	5b                   	pop    ebx
c00017d0:	c3                   	ret    

c00017d1 <dlcfree>:
c00017d1:	e9 f1 f3 ff ff       	jmp    c0000bc7 <dlfree>

c00017d6 <dlindependent_calloc>:
c00017d6:	83 ec 28             	sub    esp,0x28
c00017d9:	b9 03 00 00 00       	mov    ecx,0x3
c00017de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017f2:	e8 b9 fa ff ff       	call   c00012b0 <iALLOc>
c00017f7:	83 c4 2c             	add    esp,0x2c
c00017fa:	c3                   	ret    

c00017fb <dlindependent_comalloc>:
c00017fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001803:	31 c9                	xor    ecx,ecx
c0001805:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001809:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000180d:	e9 9e fa ff ff       	jmp    c00012b0 <iALLOc>

c0001812 <dlvalloc>:
c0001812:	83 ec 0c             	sub    esp,0xc
c0001815:	83 3d 60 90 02 c0 00 	cmp    DWORD PTR ds:0xc0029060,0x0
c000181c:	75 0a                	jne    c0001828 <dlvalloc+0x16>
c000181e:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0001823:	e8 b8 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c0001828:	50                   	push   eax
c0001829:	50                   	push   eax
c000182a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000182e:	ff 35 bc 93 02 c0    	push   DWORD PTR ds:0xc00293bc
c0001834:	e8 db fd ff ff       	call   c0001614 <dlmemalign>
c0001839:	83 c4 1c             	add    esp,0x1c
c000183c:	c3                   	ret    

c000183d <dlpvalloc>:
c000183d:	83 ec 0c             	sub    esp,0xc
c0001840:	83 3d 60 90 02 c0 00 	cmp    DWORD PTR ds:0xc0029060,0x0
c0001847:	75 0a                	jne    c0001853 <dlpvalloc+0x16>
c0001849:	b8 60 90 02 c0       	mov    eax,0xc0029060
c000184e:	e8 8d f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c0001853:	a1 bc 93 02 c0       	mov    eax,ds:0xc00293bc
c0001858:	89 c1                	mov    ecx,eax
c000185a:	52                   	push   edx
c000185b:	f7 d9                	neg    ecx
c000185d:	52                   	push   edx
c000185e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001862:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001866:	21 ca                	and    edx,ecx
c0001868:	52                   	push   edx
c0001869:	50                   	push   eax
c000186a:	e8 a5 fd ff ff       	call   c0001614 <dlmemalign>
c000186f:	83 c4 1c             	add    esp,0x1c
c0001872:	c3                   	ret    

c0001873 <dlmalloc_trim>:
c0001873:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0001878:	e8 63 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c000187d:	31 c0                	xor    eax,eax
c000187f:	c3                   	ret    

c0001880 <dlmalloc_usable_size>:
c0001880:	53                   	push   ebx
c0001881:	31 c0                	xor    eax,eax
c0001883:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001887:	85 c9                	test   ecx,ecx
c0001889:	74 24                	je     c00018af <dlmalloc_usable_size+0x2f>
c000188b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000188e:	f6 c2 02             	test   dl,0x2
c0001891:	74 08                	je     c000189b <dlmalloc_usable_size+0x1b>
c0001893:	83 e2 fc             	and    edx,0xfffffffc
c0001896:	8d 42 f8             	lea    eax,[edx-0x8]
c0001899:	eb 14                	jmp    c00018af <dlmalloc_usable_size+0x2f>
c000189b:	89 d3                	mov    ebx,edx
c000189d:	31 c0                	xor    eax,eax
c000189f:	83 e3 fe             	and    ebx,0xfffffffe
c00018a2:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00018a7:	74 06                	je     c00018af <dlmalloc_usable_size+0x2f>
c00018a9:	83 e2 fc             	and    edx,0xfffffffc
c00018ac:	8d 42 fc             	lea    eax,[edx-0x4]
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlmallinfo>:
c00018b1:	55                   	push   ebp
c00018b2:	57                   	push   edi
c00018b3:	56                   	push   esi
c00018b4:	53                   	push   ebx
c00018b5:	83 ec 08             	sub    esp,0x8
c00018b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018bc:	83 3d 8c 90 02 c0 00 	cmp    DWORD PTR ds:0xc002908c,0x0
c00018c3:	75 0a                	jne    c00018cf <dlmallinfo+0x1e>
c00018c5:	b8 60 90 02 c0       	mov    eax,0xc0029060
c00018ca:	e8 11 f2 ff ff       	call   c0000ae0 <malloc_consolidate>
c00018cf:	a1 8c 90 02 c0       	mov    eax,ds:0xc002908c
c00018d4:	31 ed                	xor    ebp,ebp
c00018d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018d9:	31 c9                	xor    ecx,ecx
c00018db:	83 e0 fc             	and    eax,0xfffffffc
c00018de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018e2:	31 c0                	xor    eax,eax
c00018e4:	8b 14 85 64 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f9c]
c00018eb:	85 d2                	test   edx,edx
c00018ed:	74 0e                	je     c00018fd <dlmallinfo+0x4c>
c00018ef:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018f2:	45                   	inc    ebp
c00018f3:	83 e6 fc             	and    esi,0xfffffffc
c00018f6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018f9:	01 f1                	add    ecx,esi
c00018fb:	eb ee                	jmp    c00018eb <dlmallinfo+0x3a>
c00018fd:	40                   	inc    eax
c00018fe:	83 f8 0a             	cmp    eax,0xa
c0001901:	75 e1                	jne    c00018e4 <dlmallinfo+0x33>
c0001903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001907:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000190e:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001911:	b8 94 90 02 c0       	mov    eax,0xc0029094
c0001916:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001919:	39 f0                	cmp    eax,esi
c000191b:	74 10                	je     c000192d <dlmallinfo+0x7c>
c000191d:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001920:	ff 04 24             	inc    DWORD PTR [esp]
c0001923:	83 e7 fc             	and    edi,0xfffffffc
c0001926:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001929:	01 fa                	add    edx,edi
c000192b:	eb ec                	jmp    c0001919 <dlmallinfo+0x68>
c000192d:	83 c0 08             	add    eax,0x8
c0001930:	3d 8c 93 02 c0       	cmp    eax,0xc002938c
c0001935:	75 df                	jne    c0001916 <dlmallinfo+0x65>
c0001937:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000193a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000193d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001940:	a1 c8 93 02 c0       	mov    eax,ds:0xc00293c8
c0001945:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001948:	89 03                	mov    DWORD PTR [ebx],eax
c000194a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000194d:	8b 35 b0 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293b0
c0001953:	29 d0                	sub    eax,edx
c0001955:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001958:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000195b:	8b 35 c4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293c4
c0001961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001965:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001968:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000196b:	8b 35 d4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293d4
c0001971:	89 d8                	mov    eax,ebx
c0001973:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001976:	83 c4 08             	add    esp,0x8
c0001979:	5b                   	pop    ebx
c000197a:	5e                   	pop    esi
c000197b:	5f                   	pop    edi
c000197c:	5d                   	pop    ebp
c000197d:	c2 04 00             	ret    0x4

c0001980 <dlmalloc_stats>:
c0001980:	83 ec 30             	sub    esp,0x30
c0001983:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001987:	50                   	push   eax
c0001988:	e8 24 ff ff ff       	call   c00018b1 <dlmallinfo>
c000198d:	83 c4 30             	add    esp,0x30
c0001990:	c3                   	ret    

c0001991 <dlmallopt>:
c0001991:	56                   	push   esi
c0001992:	b8 60 90 02 c0       	mov    eax,0xc0029060
c0001997:	53                   	push   ebx
c0001998:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000199c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00019a0:	e8 3b f1 ff ff       	call   c0000ae0 <malloc_consolidate>
c00019a5:	8d 46 04             	lea    eax,[esi+0x4]
c00019a8:	83 f8 05             	cmp    eax,0x5
c00019ab:	77 67                	ja     c0001a14 <dlmallopt+0x83>
c00019ad:	ff 24 85 c4 4d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb23c]
c00019b4:	83 fb 50             	cmp    ebx,0x50
c00019b7:	77 5b                	ja     c0001a14 <dlmallopt+0x83>
c00019b9:	ba 08 00 00 00       	mov    edx,0x8
c00019be:	85 db                	test   ebx,ebx
c00019c0:	74 12                	je     c00019d4 <dlmallopt+0x43>
c00019c2:	83 c3 0b             	add    ebx,0xb
c00019c5:	ba 10 00 00 00       	mov    edx,0x10
c00019ca:	83 fb 0f             	cmp    ebx,0xf
c00019cd:	76 05                	jbe    c00019d4 <dlmallopt+0x43>
c00019cf:	89 da                	mov    edx,ebx
c00019d1:	83 e2 f8             	and    edx,0xfffffff8
c00019d4:	a1 60 90 02 c0       	mov    eax,ds:0xc0029060
c00019d9:	83 e0 03             	and    eax,0x3
c00019dc:	09 d0                	or     eax,edx
c00019de:	a3 60 90 02 c0       	mov    ds:0xc0029060,eax
c00019e3:	eb 31                	jmp    c0001a16 <dlmallopt+0x85>
c00019e5:	89 1d a4 93 02 c0    	mov    DWORD PTR ds:0xc00293a4,ebx
c00019eb:	eb 06                	jmp    c00019f3 <dlmallopt+0x62>
c00019ed:	89 1d a8 93 02 c0    	mov    DWORD PTR ds:0xc00293a8,ebx
c00019f3:	be 01 00 00 00       	mov    esi,0x1
c00019f8:	eb 1c                	jmp    c0001a16 <dlmallopt+0x85>
c00019fa:	89 1d ac 93 02 c0    	mov    DWORD PTR ds:0xc00293ac,ebx
c0001a00:	eb f1                	jmp    c00019f3 <dlmallopt+0x62>
c0001a02:	31 f6                	xor    esi,esi
c0001a04:	85 db                	test   ebx,ebx
c0001a06:	75 0e                	jne    c0001a16 <dlmallopt+0x85>
c0001a08:	c7 05 b4 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00293b4,0x0
c0001a12:	eb df                	jmp    c00019f3 <dlmallopt+0x62>
c0001a14:	31 f6                	xor    esi,esi
c0001a16:	89 f0                	mov    eax,esi
c0001a18:	5b                   	pop    ebx
c0001a19:	5e                   	pop    esi
c0001a1a:	c3                   	ret    

c0001a1b <disk_status>:
c0001a1b:	31 c0                	xor    eax,eax
c0001a1d:	c3                   	ret    

c0001a1e <disk_initialize>:
c0001a1e:	31 c0                	xor    eax,eax
c0001a20:	c3                   	ret    

c0001a21 <disk_read>:
c0001a21:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a26:	0f b6 04 85 80 a9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5680]
c0001a2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a32:	e9 7b bc 01 00       	jmp    c001d6b2 <fatWrapperReadDisk>

c0001a37 <disk_write>:
c0001a37:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3c:	0f b6 04 85 80 a9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5680]
c0001a44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a48:	e9 ac bc 01 00       	jmp    c001d6f9 <fatWrapperWriteDisk>

c0001a4d <disk_ioctl>:
c0001a4d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a56:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a5b:	0f b6 04 85 80 a9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5680]
c0001a63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a67:	e9 d4 bc 01 00       	jmp    c001d740 <fatWrapperIoctl>

c0001a6c <ld_word>:
c0001a6c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a70:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a73:	c1 e2 08             	shl    edx,0x8
c0001a76:	09 d0                	or     eax,edx
c0001a78:	c3                   	ret    

c0001a79 <ld_dword>:
c0001a79:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a7d:	89 d1                	mov    ecx,edx
c0001a7f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a83:	c1 e1 08             	shl    ecx,0x8
c0001a86:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a89:	09 ca                	or     edx,ecx
c0001a8b:	c1 e2 08             	shl    edx,0x8
c0001a8e:	09 d0                	or     eax,edx
c0001a90:	c3                   	ret    

c0001a91 <ld_qword>:
c0001a91:	57                   	push   edi
c0001a92:	56                   	push   esi
c0001a93:	53                   	push   ebx
c0001a94:	31 db                	xor    ebx,ebx
c0001a96:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a99:	89 df                	mov    edi,ebx
c0001a9b:	89 ce                	mov    esi,ecx
c0001a9d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001aa1:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa5:	c1 e6 08             	shl    esi,0x8
c0001aa8:	09 f2                	or     edx,esi
c0001aaa:	89 d6                	mov    esi,edx
c0001aac:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ab0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ab4:	c1 e6 08             	shl    esi,0x8
c0001ab7:	09 f2                	or     edx,esi
c0001ab9:	89 d6                	mov    esi,edx
c0001abb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001abf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ac3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ac6:	c1 e6 08             	shl    esi,0x8
c0001ac9:	89 fb                	mov    ebx,edi
c0001acb:	09 f2                	or     edx,esi
c0001acd:	89 d1                	mov    ecx,edx
c0001acf:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ad3:	c1 e1 08             	shl    ecx,0x8
c0001ad6:	89 da                	mov    edx,ebx
c0001ad8:	09 c8                	or     eax,ecx
c0001ada:	5b                   	pop    ebx
c0001adb:	5e                   	pop    esi
c0001adc:	5f                   	pop    edi
c0001add:	c3                   	ret    

c0001ade <st_word>:
c0001ade:	66 89 10             	mov    WORD PTR [eax],dx
c0001ae1:	c3                   	ret    

c0001ae2 <st_dword>:
c0001ae2:	89 10                	mov    DWORD PTR [eax],edx
c0001ae4:	c3                   	ret    

c0001ae5 <st_qword>:
c0001ae5:	89 10                	mov    DWORD PTR [eax],edx
c0001ae7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001aea:	c3                   	ret    

c0001aeb <mem_cpy>:
c0001aeb:	85 c9                	test   ecx,ecx
c0001aed:	74 10                	je     c0001aff <mem_cpy+0x14>
c0001aef:	57                   	push   edi
c0001af0:	01 c1                	add    ecx,eax
c0001af2:	56                   	push   esi
c0001af3:	89 c7                	mov    edi,eax
c0001af5:	89 d6                	mov    esi,edx
c0001af7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001af8:	39 f9                	cmp    ecx,edi
c0001afa:	75 fb                	jne    c0001af7 <mem_cpy+0xc>
c0001afc:	5e                   	pop    esi
c0001afd:	5f                   	pop    edi
c0001afe:	c3                   	ret    
c0001aff:	c3                   	ret    

c0001b00 <mem_set>:
c0001b00:	01 c1                	add    ecx,eax
c0001b02:	40                   	inc    eax
c0001b03:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b06:	39 c8                	cmp    eax,ecx
c0001b08:	75 f8                	jne    c0001b02 <mem_set+0x2>
c0001b0a:	c3                   	ret    

c0001b0b <mem_cmp>:
c0001b0b:	57                   	push   edi
c0001b0c:	56                   	push   esi
c0001b0d:	89 c6                	mov    esi,eax
c0001b0f:	53                   	push   ebx
c0001b10:	46                   	inc    esi
c0001b11:	42                   	inc    edx
c0001b12:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b16:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b1a:	29 fb                	sub    ebx,edi
c0001b1c:	89 cf                	mov    edi,ecx
c0001b1e:	29 f7                	sub    edi,esi
c0001b20:	01 c7                	add    edi,eax
c0001b22:	74 04                	je     c0001b28 <mem_cmp+0x1d>
c0001b24:	85 db                	test   ebx,ebx
c0001b26:	74 e8                	je     c0001b10 <mem_cmp+0x5>
c0001b28:	89 d8                	mov    eax,ebx
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <chk_chr>:
c0001b2e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b31:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b34:	74 07                	je     c0001b3d <chk_chr+0xf>
c0001b36:	39 d1                	cmp    ecx,edx
c0001b38:	74 03                	je     c0001b3d <chk_chr+0xf>
c0001b3a:	40                   	inc    eax
c0001b3b:	eb f1                	jmp    c0001b2e <chk_chr>
c0001b3d:	89 c8                	mov    eax,ecx
c0001b3f:	c3                   	ret    

c0001b40 <dbc_1st>:
c0001b40:	31 c0                	xor    eax,eax
c0001b42:	c3                   	ret    

c0001b43 <dbc_2nd>:
c0001b43:	31 c0                	xor    eax,eax
c0001b45:	c3                   	ret    

c0001b46 <tchar2uni>:
c0001b46:	57                   	push   edi
c0001b47:	89 c7                	mov    edi,eax
c0001b49:	56                   	push   esi
c0001b4a:	53                   	push   ebx
c0001b4b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b4d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b4f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b52:	84 c9                	test   cl,cl
c0001b54:	78 0a                	js     c0001b60 <tchar2uni+0x1a>
c0001b56:	0f b6 d1             	movzx  edx,cl
c0001b59:	89 f3                	mov    ebx,esi
c0001b5b:	e9 9f 00 00 00       	jmp    c0001bff <tchar2uni+0xb9>
c0001b60:	88 ca                	mov    dl,cl
c0001b62:	83 e2 e0             	and    edx,0xffffffe0
c0001b65:	80 fa c0             	cmp    dl,0xc0
c0001b68:	75 0c                	jne    c0001b76 <tchar2uni+0x30>
c0001b6a:	89 ca                	mov    edx,ecx
c0001b6c:	b9 01 00 00 00       	mov    ecx,0x1
c0001b71:	83 e2 1f             	and    edx,0x1f
c0001b74:	eb 2e                	jmp    c0001ba4 <tchar2uni+0x5e>
c0001b76:	88 ca                	mov    dl,cl
c0001b78:	83 e2 f0             	and    edx,0xfffffff0
c0001b7b:	80 fa e0             	cmp    dl,0xe0
c0001b7e:	75 0c                	jne    c0001b8c <tchar2uni+0x46>
c0001b80:	89 ca                	mov    edx,ecx
c0001b82:	b9 02 00 00 00       	mov    ecx,0x2
c0001b87:	83 e2 0f             	and    edx,0xf
c0001b8a:	eb 18                	jmp    c0001ba4 <tchar2uni+0x5e>
c0001b8c:	88 ca                	mov    dl,cl
c0001b8e:	83 e2 f8             	and    edx,0xfffffff8
c0001b91:	88 d0                	mov    al,dl
c0001b93:	83 ca ff             	or     edx,0xffffffff
c0001b96:	3c f0                	cmp    al,0xf0
c0001b98:	75 6c                	jne    c0001c06 <tchar2uni+0xc0>
c0001b9a:	89 ca                	mov    edx,ecx
c0001b9c:	b9 03 00 00 00       	mov    ecx,0x3
c0001ba1:	83 e2 07             	and    edx,0x7
c0001ba4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ba8:	46                   	inc    esi
c0001ba9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001bac:	88 c8                	mov    al,cl
c0001bae:	83 e0 c0             	and    eax,0xffffffc0
c0001bb1:	3c 80                	cmp    al,0x80
c0001bb3:	75 4e                	jne    c0001c03 <tchar2uni+0xbd>
c0001bb5:	c1 e2 06             	shl    edx,0x6
c0001bb8:	83 e1 3f             	and    ecx,0x3f
c0001bbb:	09 ca                	or     edx,ecx
c0001bbd:	39 de                	cmp    esi,ebx
c0001bbf:	75 e7                	jne    c0001ba8 <tchar2uni+0x62>
c0001bc1:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bc4:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bca:	77 37                	ja     c0001c03 <tchar2uni+0xbd>
c0001bcc:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bd2:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bd8:	76 29                	jbe    c0001c03 <tchar2uni+0xbd>
c0001bda:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001be0:	76 1d                	jbe    c0001bff <tchar2uni+0xb9>
c0001be2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001be8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bee:	c1 e1 06             	shl    ecx,0x6
c0001bf1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bf7:	09 ca                	or     edx,ecx
c0001bf9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bff:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c01:	eb 03                	jmp    c0001c06 <tchar2uni+0xc0>
c0001c03:	83 ca ff             	or     edx,0xffffffff
c0001c06:	5b                   	pop    ebx
c0001c07:	89 d0                	mov    eax,edx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	c3                   	ret    

c0001c0c <put_utf>:
c0001c0c:	53                   	push   ebx
c0001c0d:	83 f8 7f             	cmp    eax,0x7f
c0001c10:	89 c3                	mov    ebx,eax
c0001c12:	b0 00                	mov    al,0x0
c0001c14:	77 11                	ja     c0001c27 <put_utf+0x1b>
c0001c16:	85 c9                	test   ecx,ecx
c0001c18:	0f 84 e5 00 00 00    	je     c0001d03 <put_utf+0xf7>
c0001c1e:	88 1a                	mov    BYTE PTR [edx],bl
c0001c20:	b0 01                	mov    al,0x1
c0001c22:	e9 dc 00 00 00       	jmp    c0001d03 <put_utf+0xf7>
c0001c27:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c2d:	77 23                	ja     c0001c52 <put_utf+0x46>
c0001c2f:	83 f9 01             	cmp    ecx,0x1
c0001c32:	0f 86 cb 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c38:	89 d8                	mov    eax,ebx
c0001c3a:	83 e3 3f             	and    ebx,0x3f
c0001c3d:	c1 e8 06             	shr    eax,0x6
c0001c40:	83 cb 80             	or     ebx,0xffffff80
c0001c43:	83 c8 c0             	or     eax,0xffffffc0
c0001c46:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c49:	88 02                	mov    BYTE PTR [edx],al
c0001c4b:	b0 02                	mov    al,0x2
c0001c4d:	e9 b1 00 00 00       	jmp    c0001d03 <put_utf+0xf7>
c0001c52:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c58:	77 40                	ja     c0001c9a <put_utf+0x8e>
c0001c5a:	83 f9 02             	cmp    ecx,0x2
c0001c5d:	0f 86 a0 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c63:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c6f:	0f 86 8e 00 00 00    	jbe    c0001d03 <put_utf+0xf7>
c0001c75:	89 d8                	mov    eax,ebx
c0001c77:	c1 e8 0c             	shr    eax,0xc
c0001c7a:	83 c8 e0             	or     eax,0xffffffe0
c0001c7d:	88 02                	mov    BYTE PTR [edx],al
c0001c7f:	89 d8                	mov    eax,ebx
c0001c81:	83 e3 3f             	and    ebx,0x3f
c0001c84:	c1 e8 06             	shr    eax,0x6
c0001c87:	83 cb 80             	or     ebx,0xffffff80
c0001c8a:	83 e0 3f             	and    eax,0x3f
c0001c8d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c90:	83 c8 80             	or     eax,0xffffff80
c0001c93:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c96:	b0 03                	mov    al,0x3
c0001c98:	eb 69                	jmp    c0001d03 <put_utf+0xf7>
c0001c9a:	83 f9 03             	cmp    ecx,0x3
c0001c9d:	76 64                	jbe    c0001d03 <put_utf+0xf7>
c0001c9f:	89 d9                	mov    ecx,ebx
c0001ca1:	0f b7 c3             	movzx  eax,bx
c0001ca4:	66 31 c9             	xor    cx,cx
c0001ca7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001cad:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001cb3:	c1 e9 06             	shr    ecx,0x6
c0001cb6:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cbc:	77 43                	ja     c0001d01 <put_utf+0xf5>
c0001cbe:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cc4:	77 3b                	ja     c0001d01 <put_utf+0xf5>
c0001cc6:	09 cb                	or     ebx,ecx
c0001cc8:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cce:	89 d8                	mov    eax,ebx
c0001cd0:	c1 e8 12             	shr    eax,0x12
c0001cd3:	83 c8 f0             	or     eax,0xfffffff0
c0001cd6:	88 02                	mov    BYTE PTR [edx],al
c0001cd8:	89 d8                	mov    eax,ebx
c0001cda:	c1 e8 0c             	shr    eax,0xc
c0001cdd:	83 e0 3f             	and    eax,0x3f
c0001ce0:	83 c8 80             	or     eax,0xffffff80
c0001ce3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ce6:	89 d8                	mov    eax,ebx
c0001ce8:	83 e3 3f             	and    ebx,0x3f
c0001ceb:	c1 e8 06             	shr    eax,0x6
c0001cee:	83 cb 80             	or     ebx,0xffffff80
c0001cf1:	83 e0 3f             	and    eax,0x3f
c0001cf4:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cf7:	83 c8 80             	or     eax,0xffffff80
c0001cfa:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cfd:	b0 04                	mov    al,0x4
c0001cff:	eb 02                	jmp    c0001d03 <put_utf+0xf7>
c0001d01:	31 c0                	xor    eax,eax
c0001d03:	5b                   	pop    ebx
c0001d04:	c3                   	ret    

c0001d05 <clst2sect>:
c0001d05:	89 c1                	mov    ecx,eax
c0001d07:	83 ea 02             	sub    edx,0x2
c0001d0a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001d0d:	83 e8 02             	sub    eax,0x2
c0001d10:	39 d0                	cmp    eax,edx
c0001d12:	76 0d                	jbe    c0001d21 <clst2sect+0x1c>
c0001d14:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d18:	f7 e2                	mul    edx
c0001d1a:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d1d:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d20:	c3                   	ret    
c0001d21:	31 c0                	xor    eax,eax
c0001d23:	31 d2                	xor    edx,edx
c0001d25:	c3                   	ret    

c0001d26 <clmt_clust>:
c0001d26:	57                   	push   edi
c0001d27:	89 cf                	mov    edi,ecx
c0001d29:	56                   	push   esi
c0001d2a:	89 d6                	mov    esi,edx
c0001d2c:	53                   	push   ebx
c0001d2d:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d31:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d34:	89 f2                	mov    edx,esi
c0001d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d38:	c1 ef 09             	shr    edi,0x9
c0001d3b:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d3f:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d42:	89 f9                	mov    ecx,edi
c0001d44:	31 ff                	xor    edi,edi
c0001d46:	57                   	push   edi
c0001d47:	56                   	push   esi
c0001d48:	51                   	push   ecx
c0001d49:	52                   	push   edx
c0001d4a:	e8 2d 07 02 00       	call   c002247c <__udivdi3>
c0001d4f:	83 c4 10             	add    esp,0x10
c0001d52:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d54:	85 d2                	test   edx,edx
c0001d56:	74 10                	je     c0001d68 <clmt_clust+0x42>
c0001d58:	39 d0                	cmp    eax,edx
c0001d5a:	72 07                	jb     c0001d63 <clmt_clust+0x3d>
c0001d5c:	29 d0                	sub    eax,edx
c0001d5e:	83 c3 08             	add    ebx,0x8
c0001d61:	eb ef                	jmp    c0001d52 <clmt_clust+0x2c>
c0001d63:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d66:	89 c2                	mov    edx,eax
c0001d68:	5b                   	pop    ebx
c0001d69:	89 d0                	mov    eax,edx
c0001d6b:	5e                   	pop    esi
c0001d6c:	5f                   	pop    edi
c0001d6d:	c3                   	ret    

c0001d6e <pick_lfn>:
c0001d6e:	55                   	push   ebp
c0001d6f:	57                   	push   edi
c0001d70:	56                   	push   esi
c0001d71:	89 d6                	mov    esi,edx
c0001d73:	53                   	push   ebx
c0001d74:	89 c3                	mov    ebx,eax
c0001d76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d79:	e8 ee fc ff ff       	call   c0001a6c <ld_word>
c0001d7e:	66 85 c0             	test   ax,ax
c0001d81:	74 04                	je     c0001d87 <pick_lfn+0x19>
c0001d83:	31 c0                	xor    eax,eax
c0001d85:	eb 5c                	jmp    c0001de3 <pick_lfn+0x75>
c0001d87:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d8a:	bd 01 00 00 00       	mov    ebp,0x1
c0001d8f:	83 e1 bf             	and    ecx,0xffffffbf
c0001d92:	31 ff                	xor    edi,edi
c0001d94:	49                   	dec    ecx
c0001d95:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d98:	0f b6 87 e0 4e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdb120]
c0001d9f:	01 f0                	add    eax,esi
c0001da1:	e8 c6 fc ff ff       	call   c0001a6c <ld_word>
c0001da6:	66 85 ed             	test   bp,bp
c0001da9:	74 11                	je     c0001dbc <pick_lfn+0x4e>
c0001dab:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db1:	77 d0                	ja     c0001d83 <pick_lfn+0x15>
c0001db3:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001db7:	89 c5                	mov    ebp,eax
c0001db9:	41                   	inc    ecx
c0001dba:	eb 04                	jmp    c0001dc0 <pick_lfn+0x52>
c0001dbc:	66 40                	inc    ax
c0001dbe:	75 c3                	jne    c0001d83 <pick_lfn+0x15>
c0001dc0:	47                   	inc    edi
c0001dc1:	83 ff 0d             	cmp    edi,0xd
c0001dc4:	75 d2                	jne    c0001d98 <pick_lfn+0x2a>
c0001dc6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dc9:	74 13                	je     c0001dde <pick_lfn+0x70>
c0001dcb:	66 85 ed             	test   bp,bp
c0001dce:	74 0e                	je     c0001dde <pick_lfn+0x70>
c0001dd0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dd6:	77 ab                	ja     c0001d83 <pick_lfn+0x15>
c0001dd8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dde:	b8 01 00 00 00       	mov    eax,0x1
c0001de3:	5b                   	pop    ebx
c0001de4:	5e                   	pop    esi
c0001de5:	5f                   	pop    edi
c0001de6:	5d                   	pop    ebp
c0001de7:	c3                   	ret    

c0001de8 <put_lfn>:
c0001de8:	55                   	push   ebp
c0001de9:	31 ed                	xor    ebp,ebp
c0001deb:	57                   	push   edi
c0001dec:	89 d7                	mov    edi,edx
c0001dee:	56                   	push   esi
c0001def:	31 f6                	xor    esi,esi
c0001df1:	53                   	push   ebx
c0001df2:	83 ec 08             	sub    esp,0x8
c0001df5:	89 04 24             	mov    DWORD PTR [esp],eax
c0001df8:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e00:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e06:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e09:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e0c:	31 d2                	xor    edx,edx
c0001e0e:	e8 cb fc ff ff       	call   c0001ade <st_word>
c0001e13:	0f b6 d9             	movzx  ebx,cl
c0001e16:	4b                   	dec    ebx
c0001e17:	6b db 0d             	imul   ebx,ebx,0xd
c0001e1a:	66 83 fe ff          	cmp    si,0xffff
c0001e1e:	74 08                	je     c0001e28 <put_lfn+0x40>
c0001e20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e23:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e27:	43                   	inc    ebx
c0001e28:	0f b6 85 e0 4e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdb120]
c0001e2f:	0f b7 d6             	movzx  edx,si
c0001e32:	01 f8                	add    eax,edi
c0001e34:	e8 a5 fc ff ff       	call   c0001ade <st_word>
c0001e39:	66 85 f6             	test   si,si
c0001e3c:	75 03                	jne    c0001e41 <put_lfn+0x59>
c0001e3e:	83 ce ff             	or     esi,0xffffffff
c0001e41:	45                   	inc    ebp
c0001e42:	83 fd 0d             	cmp    ebp,0xd
c0001e45:	75 d3                	jne    c0001e1a <put_lfn+0x32>
c0001e47:	66 46                	inc    si
c0001e49:	74 0a                	je     c0001e55 <put_lfn+0x6d>
c0001e4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e4e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e53:	75 09                	jne    c0001e5e <put_lfn+0x76>
c0001e55:	88 c8                	mov    al,cl
c0001e57:	83 c8 40             	or     eax,0x40
c0001e5a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e5e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e62:	88 07                	mov    BYTE PTR [edi],al
c0001e64:	83 c4 08             	add    esp,0x8
c0001e67:	5b                   	pop    ebx
c0001e68:	5e                   	pop    esi
c0001e69:	5f                   	pop    edi
c0001e6a:	5d                   	pop    ebp
c0001e6b:	c3                   	ret    

c0001e6c <gen_numname>:
c0001e6c:	57                   	push   edi
c0001e6d:	89 cf                	mov    edi,ecx
c0001e6f:	56                   	push   esi
c0001e70:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e75:	53                   	push   ebx
c0001e76:	89 c6                	mov    esi,eax
c0001e78:	83 ec 10             	sub    esp,0x10
c0001e7b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e7f:	e8 67 fc ff ff       	call   c0001aeb <mem_cpy>
c0001e84:	83 fb 05             	cmp    ebx,0x5
c0001e87:	76 2d                	jbe    c0001eb6 <gen_numname+0x4a>
c0001e89:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e8c:	66 85 c0             	test   ax,ax
c0001e8f:	74 25                	je     c0001eb6 <gen_numname+0x4a>
c0001e91:	83 c7 02             	add    edi,0x2
c0001e94:	ba 10 00 00 00       	mov    edx,0x10
c0001e99:	01 db                	add    ebx,ebx
c0001e9b:	89 c1                	mov    ecx,eax
c0001e9d:	66 d1 e8             	shr    ax,1
c0001ea0:	83 e1 01             	and    ecx,0x1
c0001ea3:	01 cb                	add    ebx,ecx
c0001ea5:	0f ba e3 10          	bt     ebx,0x10
c0001ea9:	73 06                	jae    c0001eb1 <gen_numname+0x45>
c0001eab:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001eb1:	4a                   	dec    edx
c0001eb2:	75 e5                	jne    c0001e99 <gen_numname+0x2d>
c0001eb4:	eb d3                	jmp    c0001e89 <gen_numname+0x1d>
c0001eb6:	b8 07 00 00 00       	mov    eax,0x7
c0001ebb:	88 d9                	mov    cl,bl
c0001ebd:	83 e1 0f             	and    ecx,0xf
c0001ec0:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ec3:	80 fa 39             	cmp    dl,0x39
c0001ec6:	76 03                	jbe    c0001ecb <gen_numname+0x5f>
c0001ec8:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ecb:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ece:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ed2:	89 da                	mov    edx,ebx
c0001ed4:	c1 ea 04             	shr    edx,0x4
c0001ed7:	83 fb 0f             	cmp    ebx,0xf
c0001eda:	76 06                	jbe    c0001ee2 <gen_numname+0x76>
c0001edc:	89 c8                	mov    eax,ecx
c0001ede:	89 d3                	mov    ebx,edx
c0001ee0:	eb d9                	jmp    c0001ebb <gen_numname+0x4f>
c0001ee2:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ee7:	31 d2                	xor    edx,edx
c0001ee9:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eec:	8d 04 16             	lea    eax,[esi+edx*1]
c0001eef:	39 ca                	cmp    edx,ecx
c0001ef1:	73 18                	jae    c0001f0b <gen_numname+0x9f>
c0001ef3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ef6:	3c 20                	cmp    al,0x20
c0001ef8:	74 11                	je     c0001f0b <gen_numname+0x9f>
c0001efa:	e8 41 fc ff ff       	call   c0001b40 <dbc_1st>
c0001eff:	85 c0                	test   eax,eax
c0001f01:	74 05                	je     c0001f08 <gen_numname+0x9c>
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	74 04                	je     c0001f0b <gen_numname+0x9f>
c0001f07:	42                   	inc    edx
c0001f08:	42                   	inc    edx
c0001f09:	eb e1                	jmp    c0001eec <gen_numname+0x80>
c0001f0b:	b0 20                	mov    al,0x20
c0001f0d:	83 f9 07             	cmp    ecx,0x7
c0001f10:	77 05                	ja     c0001f17 <gen_numname+0xab>
c0001f12:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f16:	41                   	inc    ecx
c0001f17:	42                   	inc    edx
c0001f18:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f1c:	83 fa 07             	cmp    edx,0x7
c0001f1f:	76 ea                	jbe    c0001f0b <gen_numname+0x9f>
c0001f21:	83 c4 10             	add    esp,0x10
c0001f24:	5b                   	pop    ebx
c0001f25:	5e                   	pop    esi
c0001f26:	5f                   	pop    edi
c0001f27:	c3                   	ret    

c0001f28 <sum_sfn>:
c0001f28:	31 c9                	xor    ecx,ecx
c0001f2a:	31 d2                	xor    edx,edx
c0001f2c:	d0 ca                	ror    dl,1
c0001f2e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f31:	41                   	inc    ecx
c0001f32:	83 f9 0b             	cmp    ecx,0xb
c0001f35:	75 f5                	jne    c0001f2c <sum_sfn+0x4>
c0001f37:	88 d0                	mov    al,dl
c0001f39:	c3                   	ret    

c0001f3a <xdir_sum>:
c0001f3a:	56                   	push   esi
c0001f3b:	31 c9                	xor    ecx,ecx
c0001f3d:	53                   	push   ebx
c0001f3e:	31 d2                	xor    edx,edx
c0001f40:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f44:	43                   	inc    ebx
c0001f45:	c1 e3 05             	shl    ebx,0x5
c0001f48:	83 fa 02             	cmp    edx,0x2
c0001f4b:	74 0b                	je     c0001f58 <xdir_sum+0x1e>
c0001f4d:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f51:	66 d1 c9             	ror    cx,1
c0001f54:	01 f1                	add    ecx,esi
c0001f56:	eb 05                	jmp    c0001f5d <xdir_sum+0x23>
c0001f58:	ba 03 00 00 00       	mov    edx,0x3
c0001f5d:	42                   	inc    edx
c0001f5e:	39 d3                	cmp    ebx,edx
c0001f60:	77 e6                	ja     c0001f48 <xdir_sum+0xe>
c0001f62:	89 c8                	mov    eax,ecx
c0001f64:	5b                   	pop    ebx
c0001f65:	5e                   	pop    esi
c0001f66:	c3                   	ret    

c0001f67 <xsum32>:
c0001f67:	d1 ca                	ror    edx,1
c0001f69:	0f b6 c0             	movzx  eax,al
c0001f6c:	01 d0                	add    eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <get_xfileinfo>:
c0001f6f:	55                   	push   ebp
c0001f70:	31 c9                	xor    ecx,ecx
c0001f72:	57                   	push   edi
c0001f73:	bd 40 00 00 00       	mov    ebp,0x40
c0001f78:	56                   	push   esi
c0001f79:	31 ff                	xor    edi,edi
c0001f7b:	53                   	push   ebx
c0001f7c:	89 c6                	mov    esi,eax
c0001f7e:	83 ec 0c             	sub    esp,0xc
c0001f81:	89 d3                	mov    ebx,edx
c0001f83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f8a:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f91:	76 6d                	jbe    c0002000 <get_xfileinfo+0x91>
c0001f93:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f99:	76 0b                	jbe    c0001fa6 <get_xfileinfo+0x37>
c0001f9b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f9f:	bf 01 00 00 00       	mov    edi,0x1
c0001fa4:	eb 63                	jmp    c0002009 <get_xfileinfo+0x9a>
c0001fa6:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001fac:	75 03                	jne    c0001fb1 <get_xfileinfo+0x42>
c0001fae:	83 c5 02             	add    ebp,0x2
c0001fb1:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fb4:	83 c5 02             	add    ebp,0x2
c0001fb7:	e8 b0 fa ff ff       	call   c0001a6c <ld_word>
c0001fbc:	ff 04 24             	inc    DWORD PTR [esp]
c0001fbf:	66 85 c9             	test   cx,cx
c0001fc2:	75 0d                	jne    c0001fd1 <get_xfileinfo+0x62>
c0001fc4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fca:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fcf:	76 2b                	jbe    c0001ffc <get_xfileinfo+0x8d>
c0001fd1:	c1 e1 10             	shl    ecx,0x10
c0001fd4:	ba ff 00 00 00       	mov    edx,0xff
c0001fd9:	0f b7 c0             	movzx  eax,ax
c0001fdc:	29 fa                	sub    edx,edi
c0001fde:	09 c8                	or     eax,ecx
c0001fe0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fe4:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fe8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fec:	e8 1b fc ff ff       	call   c0001c0c <put_utf>
c0001ff1:	84 c0                	test   al,al
c0001ff3:	74 a6                	je     c0001f9b <get_xfileinfo+0x2c>
c0001ff5:	0f b6 c0             	movzx  eax,al
c0001ff8:	01 c7                	add    edi,eax
c0001ffa:	31 c0                	xor    eax,eax
c0001ffc:	89 c1                	mov    ecx,eax
c0001ffe:	eb 8a                	jmp    c0001f8a <get_xfileinfo+0x1b>
c0002000:	85 ff                	test   edi,edi
c0002002:	74 97                	je     c0001f9b <get_xfileinfo+0x2c>
c0002004:	66 85 c9             	test   cx,cx
c0002007:	75 92                	jne    c0001f9b <get_xfileinfo+0x2c>
c0002009:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000200e:	31 c0                	xor    eax,eax
c0002010:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002014:	31 d2                	xor    edx,edx
c0002016:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002019:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000201c:	80 e1 10             	and    cl,0x10
c000201f:	75 08                	jne    c0002029 <get_xfileinfo+0xba>
c0002021:	8d 46 38             	lea    eax,[esi+0x38]
c0002024:	e8 68 fa ff ff       	call   c0001a91 <ld_qword>
c0002029:	89 03                	mov    DWORD PTR [ebx],eax
c000202b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000202e:	8d 46 0c             	lea    eax,[esi+0xc]
c0002031:	e8 36 fa ff ff       	call   c0001a6c <ld_word>
c0002036:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000203a:	8d 46 0e             	lea    eax,[esi+0xe]
c000203d:	e8 2a fa ff ff       	call   c0001a6c <ld_word>
c0002042:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002046:	83 c4 0c             	add    esp,0xc
c0002049:	5b                   	pop    ebx
c000204a:	5e                   	pop    esi
c000204b:	5f                   	pop    edi
c000204c:	5d                   	pop    ebp
c000204d:	c3                   	ret    

c000204e <get_ldnumber>:
c000204e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002050:	85 d2                	test   edx,edx
c0002052:	74 14                	je     c0002068 <get_ldnumber+0x1a>
c0002054:	56                   	push   esi
c0002055:	53                   	push   ebx
c0002056:	89 d3                	mov    ebx,edx
c0002058:	43                   	inc    ebx
c0002059:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000205c:	80 f9 1f             	cmp    cl,0x1f
c000205f:	76 0d                	jbe    c000206e <get_ldnumber+0x20>
c0002061:	80 f9 3a             	cmp    cl,0x3a
c0002064:	75 f2                	jne    c0002058 <get_ldnumber+0xa>
c0002066:	eb 0a                	jmp    c0002072 <get_ldnumber+0x24>
c0002068:	83 c9 ff             	or     ecx,0xffffffff
c000206b:	89 c8                	mov    eax,ecx
c000206d:	c3                   	ret    
c000206e:	31 c9                	xor    ecx,ecx
c0002070:	eb 24                	jmp    c0002096 <get_ldnumber+0x48>
c0002072:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002075:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002078:	80 f9 09             	cmp    cl,0x9
c000207b:	77 16                	ja     c0002093 <get_ldnumber+0x45>
c000207d:	83 c2 02             	add    edx,0x2
c0002080:	83 c9 ff             	or     ecx,0xffffffff
c0002083:	39 d3                	cmp    ebx,edx
c0002085:	75 0f                	jne    c0002096 <get_ldnumber+0x48>
c0002087:	89 f2                	mov    edx,esi
c0002089:	89 18                	mov    DWORD PTR [eax],ebx
c000208b:	0f be ca             	movsx  ecx,dl
c000208e:	83 e9 30             	sub    ecx,0x30
c0002091:	eb 03                	jmp    c0002096 <get_ldnumber+0x48>
c0002093:	83 c9 ff             	or     ecx,0xffffffff
c0002096:	89 c8                	mov    eax,ecx
c0002098:	5b                   	pop    ebx
c0002099:	5e                   	pop    esi
c000209a:	c3                   	ret    

c000209b <crc32>:
c000209b:	56                   	push   esi
c000209c:	89 d6                	mov    esi,edx
c000209e:	53                   	push   ebx
c000209f:	b2 01                	mov    dl,0x1
c00020a1:	bb 08 00 00 00       	mov    ebx,0x8
c00020a6:	89 f1                	mov    ecx,esi
c00020a8:	84 d1                	test   cl,dl
c00020aa:	0f 95 c1             	setne  cl
c00020ad:	0f b6 c9             	movzx  ecx,cl
c00020b0:	31 c1                	xor    ecx,eax
c00020b2:	89 c8                	mov    eax,ecx
c00020b4:	d1 e8                	shr    eax,1
c00020b6:	80 e1 01             	and    cl,0x1
c00020b9:	74 05                	je     c00020c0 <crc32+0x25>
c00020bb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020c0:	d1 e2                	shl    edx,1
c00020c2:	4b                   	dec    ebx
c00020c3:	75 e1                	jne    c00020a6 <crc32+0xb>
c00020c5:	5b                   	pop    ebx
c00020c6:	5e                   	pop    esi
c00020c7:	c3                   	ret    

c00020c8 <test_gpt_header>:
c00020c8:	55                   	push   ebp
c00020c9:	b9 10 00 00 00       	mov    ecx,0x10
c00020ce:	57                   	push   edi
c00020cf:	ba e0 4d 02 c0       	mov    edx,0xc0024de0
c00020d4:	56                   	push   esi
c00020d5:	31 ff                	xor    edi,edi
c00020d7:	53                   	push   ebx
c00020d8:	89 c3                	mov    ebx,eax
c00020da:	e8 2c fa ff ff       	call   c0001b0b <mem_cmp>
c00020df:	85 c0                	test   eax,eax
c00020e1:	75 55                	jne    c0002138 <test_gpt_header+0x70>
c00020e3:	89 c7                	mov    edi,eax
c00020e5:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020ea:	83 ce ff             	or     esi,0xffffffff
c00020ed:	31 d2                	xor    edx,edx
c00020ef:	83 fd 03             	cmp    ebp,0x3
c00020f2:	76 05                	jbe    c00020f9 <test_gpt_header+0x31>
c00020f4:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020f9:	89 f0                	mov    eax,esi
c00020fb:	45                   	inc    ebp
c00020fc:	e8 9a ff ff ff       	call   c000209b <crc32>
c0002101:	83 fd 4c             	cmp    ebp,0x4c
c0002104:	89 c6                	mov    esi,eax
c0002106:	75 e5                	jne    c00020ed <test_gpt_header+0x25>
c0002108:	8d 43 10             	lea    eax,[ebx+0x10]
c000210b:	f7 d6                	not    esi
c000210d:	e8 67 f9 ff ff       	call   c0001a79 <ld_dword>
c0002112:	39 c6                	cmp    esi,eax
c0002114:	75 22                	jne    c0002138 <test_gpt_header+0x70>
c0002116:	8d 43 54             	lea    eax,[ebx+0x54]
c0002119:	e8 5b f9 ff ff       	call   c0001a79 <ld_dword>
c000211e:	83 c0 80             	add    eax,0xffffff80
c0002121:	75 15                	jne    c0002138 <test_gpt_header+0x70>
c0002123:	8d 43 50             	lea    eax,[ebx+0x50]
c0002126:	e8 4e f9 ff ff       	call   c0001a79 <ld_dword>
c000212b:	3d 80 00 00 00       	cmp    eax,0x80
c0002130:	0f 96 c0             	setbe  al
c0002133:	0f b6 c0             	movzx  eax,al
c0002136:	89 c7                	mov    edi,eax
c0002138:	5b                   	pop    ebx
c0002139:	89 f8                	mov    eax,edi
c000213b:	5e                   	pop    esi
c000213c:	5f                   	pop    edi
c000213d:	5d                   	pop    ebp
c000213e:	c3                   	ret    

c000213f <make_rand>:
c000213f:	56                   	push   esi
c0002140:	85 c0                	test   eax,eax
c0002142:	53                   	push   ebx
c0002143:	75 05                	jne    c000214a <make_rand+0xb>
c0002145:	b8 01 00 00 00       	mov    eax,0x1
c000214a:	01 d1                	add    ecx,edx
c000214c:	bb 08 00 00 00       	mov    ebx,0x8
c0002151:	89 c6                	mov    esi,eax
c0002153:	d1 e8                	shr    eax,1
c0002155:	83 e6 01             	and    esi,0x1
c0002158:	85 f6                	test   esi,esi
c000215a:	74 05                	je     c0002161 <make_rand+0x22>
c000215c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002161:	4b                   	dec    ebx
c0002162:	75 ed                	jne    c0002151 <make_rand+0x12>
c0002164:	42                   	inc    edx
c0002165:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002168:	39 ca                	cmp    edx,ecx
c000216a:	75 e0                	jne    c000214c <make_rand+0xd>
c000216c:	5b                   	pop    ebx
c000216d:	5e                   	pop    esi
c000216e:	c3                   	ret    

c000216f <validate>:
c000216f:	56                   	push   esi
c0002170:	53                   	push   ebx
c0002171:	89 d6                	mov    esi,edx
c0002173:	51                   	push   ecx
c0002174:	85 c0                	test   eax,eax
c0002176:	75 09                	jne    c0002181 <validate+0x12>
c0002178:	b8 09 00 00 00       	mov    eax,0x9
c000217d:	31 c9                	xor    ecx,ecx
c000217f:	eb 2f                	jmp    c00021b0 <validate+0x41>
c0002181:	89 c3                	mov    ebx,eax
c0002183:	8b 00                	mov    eax,DWORD PTR [eax]
c0002185:	85 c0                	test   eax,eax
c0002187:	74 ef                	je     c0002178 <validate+0x9>
c0002189:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000218c:	74 ea                	je     c0002178 <validate+0x9>
c000218e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002192:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002196:	75 e0                	jne    c0002178 <validate+0x9>
c0002198:	83 ec 0c             	sub    esp,0xc
c000219b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000219f:	50                   	push   eax
c00021a0:	e8 76 f8 ff ff       	call   c0001a1b <disk_status>
c00021a5:	83 c4 10             	add    esp,0x10
c00021a8:	a8 01                	test   al,0x1
c00021aa:	75 cc                	jne    c0002178 <validate+0x9>
c00021ac:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ae:	31 c0                	xor    eax,eax
c00021b0:	89 0e                	mov    DWORD PTR [esi],ecx
c00021b2:	5a                   	pop    edx
c00021b3:	5b                   	pop    ebx
c00021b4:	5e                   	pop    esi
c00021b5:	c3                   	ret    

c00021b6 <sync_window>:
c00021b6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021ba:	0f 84 85 00 00 00    	je     c0002245 <sync_window+0x8f>
c00021c0:	55                   	push   ebp
c00021c1:	8d 68 54             	lea    ebp,[eax+0x54]
c00021c4:	57                   	push   edi
c00021c5:	56                   	push   esi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	83 ec 28             	sub    esp,0x28
c00021cc:	6a 01                	push   0x1
c00021ce:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021d1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021d4:	55                   	push   ebp
c00021d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021d9:	50                   	push   eax
c00021da:	e8 58 f8 ff ff       	call   c0001a37 <disk_write>
c00021df:	83 c4 20             	add    esp,0x20
c00021e2:	ba 01 00 00 00       	mov    edx,0x1
c00021e7:	85 c0                	test   eax,eax
c00021e9:	75 50                	jne    c000223b <sync_window+0x85>
c00021eb:	31 ff                	xor    edi,edi
c00021ed:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021f0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021f4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021f8:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021fb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021fe:	89 c6                	mov    esi,eax
c0002200:	89 d7                	mov    edi,edx
c0002202:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002205:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002209:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000220c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002210:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002214:	73 23                	jae    c0002239 <sync_window+0x83>
c0002216:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000221a:	75 1d                	jne    c0002239 <sync_window+0x83>
c000221c:	83 ec 0c             	sub    esp,0xc
c000221f:	6a 01                	push   0x1
c0002221:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002225:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002229:	52                   	push   edx
c000222a:	50                   	push   eax
c000222b:	55                   	push   ebp
c000222c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002230:	50                   	push   eax
c0002231:	e8 01 f8 ff ff       	call   c0001a37 <disk_write>
c0002236:	83 c4 20             	add    esp,0x20
c0002239:	31 d2                	xor    edx,edx
c000223b:	83 c4 1c             	add    esp,0x1c
c000223e:	89 d0                	mov    eax,edx
c0002240:	5b                   	pop    ebx
c0002241:	5e                   	pop    esi
c0002242:	5f                   	pop    edi
c0002243:	5d                   	pop    ebp
c0002244:	c3                   	ret    
c0002245:	31 d2                	xor    edx,edx
c0002247:	89 d0                	mov    eax,edx
c0002249:	c3                   	ret    

c000224a <move_window>:
c000224a:	56                   	push   esi
c000224b:	53                   	push   ebx
c000224c:	89 c3                	mov    ebx,eax
c000224e:	83 ec 14             	sub    esp,0x14
c0002251:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002254:	75 07                	jne    c000225d <move_window+0x13>
c0002256:	31 f6                	xor    esi,esi
c0002258:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000225b:	74 59                	je     c00022b6 <move_window+0x6c>
c000225d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002261:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002265:	89 d8                	mov    eax,ebx
c0002267:	e8 4a ff ff ff       	call   c00021b6 <sync_window>
c000226c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002270:	89 c6                	mov    esi,eax
c0002272:	85 c0                	test   eax,eax
c0002274:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002278:	75 3c                	jne    c00022b6 <move_window+0x6c>
c000227a:	83 ec 0c             	sub    esp,0xc
c000227d:	8d 43 54             	lea    eax,[ebx+0x54]
c0002280:	6a 01                	push   0x1
c0002282:	51                   	push   ecx
c0002283:	52                   	push   edx
c0002284:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002288:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000228c:	50                   	push   eax
c000228d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002291:	50                   	push   eax
c0002292:	e8 8a f7 ff ff       	call   c0001a21 <disk_read>
c0002297:	83 c4 20             	add    esp,0x20
c000229a:	85 c0                	test   eax,eax
c000229c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00022a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00022a4:	74 0a                	je     c00022b0 <move_window+0x66>
c00022a6:	83 ca ff             	or     edx,0xffffffff
c00022a9:	be 01 00 00 00       	mov    esi,0x1
c00022ae:	89 d1                	mov    ecx,edx
c00022b0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022b3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022b6:	89 f0                	mov    eax,esi
c00022b8:	83 c4 14             	add    esp,0x14
c00022bb:	5b                   	pop    ebx
c00022bc:	5e                   	pop    esi
c00022bd:	c3                   	ret    

c00022be <check_fs>:
c00022be:	53                   	push   ebx
c00022bf:	89 c3                	mov    ebx,eax
c00022c1:	83 ec 08             	sub    esp,0x8
c00022c4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022c8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022cf:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022d6:	e8 6f ff ff ff       	call   c000224a <move_window>
c00022db:	ba 04 00 00 00       	mov    edx,0x4
c00022e0:	85 c0                	test   eax,eax
c00022e2:	0f 85 89 00 00 00    	jne    c0002371 <check_fs+0xb3>
c00022e8:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022ee:	e8 79 f7 ff ff       	call   c0001a6c <ld_word>
c00022f3:	ba 03 00 00 00       	mov    edx,0x3
c00022f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00022fc:	75 73                	jne    c0002371 <check_fs+0xb3>
c00022fe:	ba 00 4f 02 c0       	mov    edx,0xc0024f00
c0002303:	8d 43 54             	lea    eax,[ebx+0x54]
c0002306:	b9 0b 00 00 00       	mov    ecx,0xb
c000230b:	e8 fb f7 ff ff       	call   c0001b0b <mem_cmp>
c0002310:	ba 01 00 00 00       	mov    edx,0x1
c0002315:	85 c0                	test   eax,eax
c0002317:	74 58                	je     c0002371 <check_fs+0xb3>
c0002319:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000231c:	8d 50 18             	lea    edx,[eax+0x18]
c000231f:	80 fa 01             	cmp    dl,0x1
c0002322:	76 09                	jbe    c000232d <check_fs+0x6f>
c0002324:	ba 02 00 00 00       	mov    edx,0x2
c0002329:	3c eb                	cmp    al,0xeb
c000232b:	75 44                	jne    c0002371 <check_fs+0xb3>
c000232d:	ba 2c 7b 02 c0       	mov    edx,0xc0027b2c
c0002332:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002338:	b9 03 00 00 00       	mov    ecx,0x3
c000233d:	e8 c9 f7 ff ff       	call   c0001b0b <mem_cmp>
c0002342:	31 d2                	xor    edx,edx
c0002344:	85 c0                	test   eax,eax
c0002346:	74 29                	je     c0002371 <check_fs+0xb3>
c0002348:	ba 0c 4f 02 c0       	mov    edx,0xc0024f0c
c000234d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002353:	b9 05 00 00 00       	mov    ecx,0x5
c0002358:	e8 ae f7 ff ff       	call   c0001b0b <mem_cmp>
c000235d:	31 d2                	xor    edx,edx
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0e                	je     c0002371 <check_fs+0xb3>
c0002363:	31 d2                	xor    edx,edx
c0002365:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000236c:	0f 95 c2             	setne  dl
c000236f:	01 d2                	add    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	83 c4 08             	add    esp,0x8
c0002376:	5b                   	pop    ebx
c0002377:	c3                   	ret    

c0002378 <find_volume>:
c0002378:	55                   	push   ebp
c0002379:	31 c9                	xor    ecx,ecx
c000237b:	57                   	push   edi
c000237c:	56                   	push   esi
c000237d:	89 d6                	mov    esi,edx
c000237f:	53                   	push   ebx
c0002380:	31 d2                	xor    edx,edx
c0002382:	83 ec 3c             	sub    esp,0x3c
c0002385:	89 c3                	mov    ebx,eax
c0002387:	e8 32 ff ff ff       	call   c00022be <check_fs>
c000238c:	83 f8 02             	cmp    eax,0x2
c000238f:	74 0e                	je     c000239f <find_volume+0x27>
c0002391:	0f 87 5d 01 00 00    	ja     c00024f4 <find_volume+0x17c>
c0002397:	85 f6                	test   esi,esi
c0002399:	0f 84 55 01 00 00    	je     c00024f4 <find_volume+0x17c>
c000239f:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00023a6:	0f 85 dd 00 00 00    	jne    c0002489 <find_volume+0x111>
c00023ac:	31 c9                	xor    ecx,ecx
c00023ae:	ba 01 00 00 00       	mov    edx,0x1
c00023b3:	89 d8                	mov    eax,ebx
c00023b5:	e8 90 fe ff ff       	call   c000224a <move_window>
c00023ba:	85 c0                	test   eax,eax
c00023bc:	74 0a                	je     c00023c8 <find_volume+0x50>
c00023be:	b8 04 00 00 00       	mov    eax,0x4
c00023c3:	e9 2c 01 00 00       	jmp    c00024f4 <find_volume+0x17c>
c00023c8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023cb:	89 e8                	mov    eax,ebp
c00023cd:	e8 f6 fc ff ff       	call   c00020c8 <test_gpt_header>
c00023d2:	85 c0                	test   eax,eax
c00023d4:	75 0a                	jne    c00023e0 <find_volume+0x68>
c00023d6:	b8 03 00 00 00       	mov    eax,0x3
c00023db:	e9 14 01 00 00       	jmp    c00024f4 <find_volume+0x17c>
c00023e0:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023e6:	e8 8e f6 ff ff       	call   c0001a79 <ld_dword>
c00023eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023ef:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023f5:	e8 97 f6 ff ff       	call   c0001a91 <ld_qword>
c00023fa:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002406:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000240a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002412:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002416:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000241a:	74 ba                	je     c00023d6 <find_volume+0x5e>
c000241c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002420:	31 c9                	xor    ecx,ecx
c0002422:	c1 e7 07             	shl    edi,0x7
c0002425:	89 d8                	mov    eax,ebx
c0002427:	89 fa                	mov    edx,edi
c0002429:	c1 ea 09             	shr    edx,0x9
c000242c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002430:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002434:	e8 11 fe ff ff       	call   c000224a <move_window>
c0002439:	85 c0                	test   eax,eax
c000243b:	75 81                	jne    c00023be <find_volume+0x46>
c000243d:	81 e7 80 01 00 00    	and    edi,0x180
c0002443:	b9 10 00 00 00       	mov    ecx,0x10
c0002448:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000244c:	ba f0 4e 02 c0       	mov    edx,0xc0024ef0
c0002451:	e8 b5 f6 ff ff       	call   c0001b0b <mem_cmp>
c0002456:	85 c0                	test   eax,eax
c0002458:	75 29                	jne    c0002483 <find_volume+0x10b>
c000245a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000245e:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002462:	e8 2a f6 ff ff       	call   c0001a91 <ld_qword>
c0002467:	89 d1                	mov    ecx,edx
c0002469:	89 c2                	mov    edx,eax
c000246b:	89 d8                	mov    eax,ebx
c000246d:	e8 4c fe ff ff       	call   c00022be <check_fs>
c0002472:	85 f6                	test   esi,esi
c0002474:	75 07                	jne    c000247d <find_volume+0x105>
c0002476:	83 f8 01             	cmp    eax,0x1
c0002479:	77 08                	ja     c0002483 <find_volume+0x10b>
c000247b:	eb 77                	jmp    c00024f4 <find_volume+0x17c>
c000247d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002481:	74 71                	je     c00024f4 <find_volume+0x17c>
c0002483:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002487:	eb 89                	jmp    c0002412 <find_volume+0x9a>
c0002489:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000248d:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002493:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002499:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000249d:	89 cd                	mov    ebp,ecx
c000249f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00024a3:	89 f8                	mov    eax,edi
c00024a5:	83 c7 10             	add    edi,0x10
c00024a8:	e8 cc f5 ff ff       	call   c0001a79 <ld_dword>
c00024ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00024b1:	89 01                	mov    DWORD PTR [ecx],eax
c00024b3:	83 c1 04             	add    ecx,0x4
c00024b6:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024ba:	75 e3                	jne    c000249f <find_volume+0x127>
c00024bc:	31 ff                	xor    edi,edi
c00024be:	85 f6                	test   esi,esi
c00024c0:	74 03                	je     c00024c5 <find_volume+0x14d>
c00024c2:	8d 7e ff             	lea    edi,[esi-0x1]
c00024c5:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024c9:	85 d2                	test   edx,edx
c00024cb:	74 14                	je     c00024e1 <find_volume+0x169>
c00024cd:	31 c9                	xor    ecx,ecx
c00024cf:	89 d8                	mov    eax,ebx
c00024d1:	e8 e8 fd ff ff       	call   c00022be <check_fs>
c00024d6:	83 f8 01             	cmp    eax,0x1
c00024d9:	76 19                	jbe    c00024f4 <find_volume+0x17c>
c00024db:	85 f6                	test   esi,esi
c00024dd:	74 0f                	je     c00024ee <find_volume+0x176>
c00024df:	eb 13                	jmp    c00024f4 <find_volume+0x17c>
c00024e1:	85 f6                	test   esi,esi
c00024e3:	0f 85 ed fe ff ff    	jne    c00023d6 <find_volume+0x5e>
c00024e9:	b8 03 00 00 00       	mov    eax,0x3
c00024ee:	47                   	inc    edi
c00024ef:	83 ff 03             	cmp    edi,0x3
c00024f2:	76 d1                	jbe    c00024c5 <find_volume+0x14d>
c00024f4:	83 c4 3c             	add    esp,0x3c
c00024f7:	5b                   	pop    ebx
c00024f8:	5e                   	pop    esi
c00024f9:	5f                   	pop    edi
c00024fa:	5d                   	pop    ebp
c00024fb:	c3                   	ret    

c00024fc <mount_volume>:
c00024fc:	55                   	push   ebp
c00024fd:	57                   	push   edi
c00024fe:	89 cf                	mov    edi,ecx
c0002500:	56                   	push   esi
c0002501:	53                   	push   ebx
c0002502:	bb 0b 00 00 00       	mov    ebx,0xb
c0002507:	83 ec 3c             	sub    esp,0x3c
c000250a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002510:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002514:	e8 35 fb ff ff       	call   c000204e <get_ldnumber>
c0002519:	85 c0                	test   eax,eax
c000251b:	0f 88 3a 05 00 00    	js     c0002a5b <mount_volume+0x55f>
c0002521:	8b 2c 85 00 94 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd6c00]
c0002528:	89 c6                	mov    esi,eax
c000252a:	bb 0c 00 00 00       	mov    ebx,0xc
c000252f:	85 ed                	test   ebp,ebp
c0002531:	0f 84 24 05 00 00    	je     c0002a5b <mount_volume+0x55f>
c0002537:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000253b:	83 e7 fe             	and    edi,0xfffffffe
c000253e:	89 2a                	mov    DWORD PTR [edx],ebp
c0002540:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002544:	74 32                	je     c0002578 <mount_volume+0x7c>
c0002546:	83 ec 0c             	sub    esp,0xc
c0002549:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000254d:	50                   	push   eax
c000254e:	e8 c8 f4 ff ff       	call   c0001a1b <disk_status>
c0002553:	83 c4 10             	add    esp,0x10
c0002556:	a8 01                	test   al,0x1
c0002558:	75 1e                	jne    c0002578 <mount_volume+0x7c>
c000255a:	31 db                	xor    ebx,ebx
c000255c:	89 f9                	mov    ecx,edi
c000255e:	84 c9                	test   cl,cl
c0002560:	0f 84 f5 04 00 00    	je     c0002a5b <mount_volume+0x55f>
c0002566:	a8 04                	test   al,0x4
c0002568:	0f 84 ed 04 00 00    	je     c0002a5b <mount_volume+0x55f>
c000256e:	bb 0a 00 00 00       	mov    ebx,0xa
c0002573:	e9 e3 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c0002578:	83 ec 0c             	sub    esp,0xc
c000257b:	89 f0                	mov    eax,esi
c000257d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002581:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002584:	0f b6 f0             	movzx  esi,al
c0002587:	bb 03 00 00 00       	mov    ebx,0x3
c000258c:	56                   	push   esi
c000258d:	e8 8c f4 ff ff       	call   c0001a1e <disk_initialize>
c0002592:	83 c4 10             	add    esp,0x10
c0002595:	a8 01                	test   al,0x1
c0002597:	0f 85 be 04 00 00    	jne    c0002a5b <mount_volume+0x55f>
c000259d:	89 f9                	mov    ecx,edi
c000259f:	84 c9                	test   cl,cl
c00025a1:	74 04                	je     c00025a7 <mount_volume+0xab>
c00025a3:	a8 04                	test   al,0x4
c00025a5:	75 c7                	jne    c000256e <mount_volume+0x72>
c00025a7:	31 d2                	xor    edx,edx
c00025a9:	89 e8                	mov    eax,ebp
c00025ab:	e8 c8 fd ff ff       	call   c0002378 <find_volume>
c00025b0:	83 f8 04             	cmp    eax,0x4
c00025b3:	75 0a                	jne    c00025bf <mount_volume+0xc3>
c00025b5:	bb 01 00 00 00       	mov    ebx,0x1
c00025ba:	e9 9c 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c00025bf:	83 f8 01             	cmp    eax,0x1
c00025c2:	76 0a                	jbe    c00025ce <mount_volume+0xd2>
c00025c4:	bb 0d 00 00 00       	mov    ebx,0xd
c00025c9:	e9 8d 04 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c00025ce:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025d1:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025dc:	75 17                	jne    c00025f5 <mount_volume+0xf9>
c00025de:	b8 0b 00 00 00       	mov    eax,0xb
c00025e3:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025e8:	75 da                	jne    c00025c4 <mount_volume+0xc8>
c00025ea:	40                   	inc    eax
c00025eb:	83 f8 40             	cmp    eax,0x40
c00025ee:	75 f3                	jne    c00025e3 <mount_volume+0xe7>
c00025f0:	e9 5a 02 00 00       	jmp    c000284f <mount_volume+0x353>
c00025f5:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025f8:	e8 6f f4 ff ff       	call   c0001a6c <ld_word>
c00025fd:	66 3d 00 02          	cmp    ax,0x200
c0002601:	75 c1                	jne    c00025c4 <mount_volume+0xc8>
c0002603:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002606:	e8 61 f4 ff ff       	call   c0001a6c <ld_word>
c000260b:	0f b7 c0             	movzx  eax,ax
c000260e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002612:	85 c0                	test   eax,eax
c0002614:	75 0c                	jne    c0002622 <mount_volume+0x126>
c0002616:	8d 45 78             	lea    eax,[ebp+0x78]
c0002619:	e8 5b f4 ff ff       	call   c0001a79 <ld_dword>
c000261e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002626:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002629:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000262c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002630:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002633:	48                   	dec    eax
c0002634:	3c 01                	cmp    al,0x1
c0002636:	77 8c                	ja     c00025c4 <mount_volume+0xc8>
c0002638:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000263c:	89 c3                	mov    ebx,eax
c000263e:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002642:	66 85 c0             	test   ax,ax
c0002645:	0f 84 79 ff ff ff    	je     c00025c4 <mount_volume+0xc8>
c000264b:	8d 40 ff             	lea    eax,[eax-0x1]
c000264e:	85 d8                	test   eax,ebx
c0002650:	0f 85 6e ff ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002656:	8d 45 65             	lea    eax,[ebp+0x65]
c0002659:	e8 0e f4 ff ff       	call   c0001a6c <ld_word>
c000265e:	89 c7                	mov    edi,eax
c0002660:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002664:	a8 0f                	test   al,0xf
c0002666:	0f 85 58 ff ff ff    	jne    c00025c4 <mount_volume+0xc8>
c000266c:	8d 45 67             	lea    eax,[ebp+0x67]
c000266f:	e8 f8 f3 ff ff       	call   c0001a6c <ld_word>
c0002674:	0f b7 f0             	movzx  esi,ax
c0002677:	85 f6                	test   esi,esi
c0002679:	75 0a                	jne    c0002685 <mount_volume+0x189>
c000267b:	8d 45 74             	lea    eax,[ebp+0x74]
c000267e:	e8 f6 f3 ff ff       	call   c0001a79 <ld_dword>
c0002683:	89 c6                	mov    esi,eax
c0002685:	8d 45 62             	lea    eax,[ebp+0x62]
c0002688:	e8 df f3 ff ff       	call   c0001a6c <ld_word>
c000268d:	66 85 c0             	test   ax,ax
c0002690:	0f 84 2e ff ff ff    	je     c00025c4 <mount_volume+0xc8>
c0002696:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000269b:	0f b7 c8             	movzx  ecx,ax
c000269e:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00026a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00026a7:	89 fa                	mov    edx,edi
c00026a9:	66 c1 ea 04          	shr    dx,0x4
c00026ad:	0f b7 d2             	movzx  edx,dx
c00026b0:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00026b4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026bb:	39 c6                	cmp    esi,eax
c00026bd:	0f 82 01 ff ff ff    	jb     c00025c4 <mount_volume+0xc8>
c00026c3:	29 c6                	sub    esi,eax
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	89 f0                	mov    eax,esi
c00026c9:	f7 f3                	div    ebx
c00026cb:	39 de                	cmp    esi,ebx
c00026cd:	0f 82 f1 fe ff ff    	jb     c00025c4 <mount_volume+0xc8>
c00026d3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026d8:	0f 87 e6 fe ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00026de:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026e3:	0f 86 63 03 00 00    	jbe    c0002a4c <mount_volume+0x550>
c00026e9:	bb 03 00 00 00       	mov    ebx,0x3
c00026ee:	8d 70 02             	lea    esi,[eax+0x2]
c00026f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026f9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026fc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026ff:	31 d2                	xor    edx,edx
c0002701:	89 c8                	mov    eax,ecx
c0002703:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002706:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000270a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000270e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002712:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002716:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002719:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000271c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002720:	31 d2                	xor    edx,edx
c0002722:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002726:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000272a:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000272d:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002730:	83 fb 03             	cmp    ebx,0x3
c0002733:	75 2b                	jne    c0002760 <mount_volume+0x264>
c0002735:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002738:	e8 2f f3 ff ff       	call   c0001a6c <ld_word>
c000273d:	66 09 c7             	or     di,ax
c0002740:	0f 85 7e fe ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002746:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000274c:	c1 e6 02             	shl    esi,0x2
c000274f:	e8 25 f3 ff ff       	call   c0001a79 <ld_dword>
c0002754:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000275b:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000275e:	eb 30                	jmp    c0002790 <mount_volume+0x294>
c0002760:	66 85 ff             	test   di,di
c0002763:	0f 84 5b fe ff ff    	je     c00025c4 <mount_volume+0xc8>
c0002769:	31 d2                	xor    edx,edx
c000276b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000276f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002773:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002777:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000277a:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000277d:	83 fb 02             	cmp    ebx,0x2
c0002780:	75 04                	jne    c0002786 <mount_volume+0x28a>
c0002782:	01 f6                	add    esi,esi
c0002784:	eb 0a                	jmp    c0002790 <mount_volume+0x294>
c0002786:	8d 04 76             	lea    eax,[esi+esi*2]
c0002789:	83 e6 01             	and    esi,0x1
c000278c:	d1 e8                	shr    eax,1
c000278e:	01 c6                	add    esi,eax
c0002790:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002796:	c1 ee 09             	shr    esi,0x9
c0002799:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000279d:	0f 87 21 fe ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00027a3:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00027aa:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00027b1:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00027b5:	83 fb 03             	cmp    ebx,0x3
c00027b8:	75 7a                	jne    c0002834 <mount_volume+0x338>
c00027ba:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027c0:	e8 a7 f2 ff ff       	call   c0001a6c <ld_word>
c00027c5:	66 48                	dec    ax
c00027c7:	75 6b                	jne    c0002834 <mount_volume+0x338>
c00027c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027d1:	83 c2 01             	add    edx,0x1
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	83 d1 00             	adc    ecx,0x0
c00027d9:	e8 6c fa ff ff       	call   c000224a <move_window>
c00027de:	85 c0                	test   eax,eax
c00027e0:	75 52                	jne    c0002834 <mount_volume+0x338>
c00027e2:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027e6:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ec:	e8 7b f2 ff ff       	call   c0001a6c <ld_word>
c00027f1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027f5:	75 3d                	jne    c0002834 <mount_volume+0x338>
c00027f7:	8d 45 54             	lea    eax,[ebp+0x54]
c00027fa:	e8 7a f2 ff ff       	call   c0001a79 <ld_dword>
c00027ff:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002804:	75 2e                	jne    c0002834 <mount_volume+0x338>
c0002806:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000280c:	e8 68 f2 ff ff       	call   c0001a79 <ld_dword>
c0002811:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002816:	75 1c                	jne    c0002834 <mount_volume+0x338>
c0002818:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000281e:	e8 56 f2 ff ff       	call   c0001a79 <ld_dword>
c0002823:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002826:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000282c:	e8 48 f2 ff ff       	call   c0001a79 <ld_dword>
c0002831:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002834:	66 a1 e0 93 02 c0    	mov    ax,ds:0xc00293e0
c000283a:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000283d:	40                   	inc    eax
c000283e:	31 db                	xor    ebx,ebx
c0002840:	66 a3 e0 93 02 c0    	mov    ds:0xc00293e0,ax
c0002846:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000284a:	e9 0c 02 00 00       	jmp    c0002a5b <mount_volume+0x55f>
c000284f:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002855:	e8 12 f2 ff ff       	call   c0001a6c <ld_word>
c000285a:	66 3d 00 01          	cmp    ax,0x100
c000285e:	0f 85 60 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002864:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000286b:	0f 85 53 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c0002871:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002877:	e8 15 f2 ff ff       	call   c0001a91 <ld_qword>
c000287c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002880:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002884:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000288a:	e8 ea f1 ff ff       	call   c0001a79 <ld_dword>
c000288f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002892:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002898:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000289b:	fe c8                	dec    al
c000289d:	0f 85 21 fd ff ff    	jne    c00025c4 <mount_volume+0xc8>
c00028a3:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00028aa:	bb 01 00 00 00       	mov    ebx,0x1
c00028af:	d3 e3                	shl    ebx,cl
c00028b1:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028b5:	66 85 db             	test   bx,bx
c00028b8:	0f 84 06 fd ff ff    	je     c00025c4 <mount_volume+0xc8>
c00028be:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028c4:	e8 b0 f1 ff ff       	call   c0001a79 <ld_dword>
c00028c9:	89 c6                	mov    esi,eax
c00028cb:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028d0:	0f 87 ee fc ff ff    	ja     c00025c4 <mount_volume+0xc8>
c00028d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028da:	8d 40 02             	lea    eax,[eax+0x2]
c00028dd:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028e0:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028e7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ea:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028f0:	e8 84 f1 ff ff       	call   c0001a79 <ld_dword>
c00028f5:	31 d2                	xor    edx,edx
c00028f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002903:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002907:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000290a:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000290d:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002913:	e8 61 f1 ff ff       	call   c0001a79 <ld_dword>
c0002918:	31 d2                	xor    edx,edx
c000291a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000291e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002922:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002926:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002929:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000292c:	0f b7 c3             	movzx  eax,bx
c000292f:	31 d2                	xor    edx,edx
c0002931:	0f af f0             	imul   esi,eax
c0002934:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002938:	89 f0                	mov    eax,esi
c000293a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000293e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002942:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002946:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000294a:	39 c1                	cmp    ecx,eax
c000294c:	89 df                	mov    edi,ebx
c000294e:	19 d7                	sbb    edi,edx
c0002950:	0f 82 6e fc ff ff    	jb     c00025c4 <mount_volume+0xc8>
c0002956:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000295c:	31 db                	xor    ebx,ebx
c000295e:	e8 16 f1 ff ff       	call   c0001a79 <ld_dword>
c0002963:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000296a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002975:	85 db                	test   ebx,ebx
c0002977:	75 39                	jne    c00029b2 <mount_volume+0x4b6>
c0002979:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000297d:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002981:	0f 86 3d fc ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c0002987:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000298a:	31 ff                	xor    edi,edi
c000298c:	89 e8                	mov    eax,ebp
c000298e:	e8 72 f3 ff ff       	call   c0001d05 <clst2sect>
c0002993:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002997:	01 c6                	add    esi,eax
c0002999:	89 e8                	mov    eax,ebp
c000299b:	11 d7                	adc    edi,edx
c000299d:	89 f2                	mov    edx,esi
c000299f:	89 f9                	mov    ecx,edi
c00029a1:	e8 a4 f8 ff ff       	call   c000224a <move_window>
c00029a6:	85 c0                	test   eax,eax
c00029a8:	0f 85 07 fc ff ff    	jne    c00025b5 <mount_volume+0xb9>
c00029ae:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00029b2:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029b7:	74 0b                	je     c00029c4 <mount_volume+0x4c8>
c00029b9:	83 c3 20             	add    ebx,0x20
c00029bc:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029c2:	eb b1                	jmp    c0002975 <mount_volume+0x479>
c00029c4:	8d 75 54             	lea    esi,[ebp+0x54]
c00029c7:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029cb:	e8 a9 f0 ff ff       	call   c0001a79 <ld_dword>
c00029d0:	89 c3                	mov    ebx,eax
c00029d2:	83 f8 01             	cmp    eax,0x1
c00029d5:	0f 86 e9 fb ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c00029db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029de:	0f 86 e0 fb ff ff    	jbe    c00025c4 <mount_volume+0xc8>
c00029e4:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029e7:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029eb:	0f af c2             	imul   eax,edx
c00029ee:	31 d2                	xor    edx,edx
c00029f0:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029f3:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029f6:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029f9:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029fc:	31 c9                	xor    ecx,ecx
c00029fe:	89 da                	mov    edx,ebx
c0002a00:	89 e8                	mov    eax,ebp
c0002a02:	c1 ea 07             	shr    edx,0x7
c0002a05:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002a08:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002a0b:	e8 3a f8 ff ff       	call   c000224a <move_window>
c0002a10:	85 c0                	test   eax,eax
c0002a12:	0f 85 9d fb ff ff    	jne    c00025b5 <mount_volume+0xb9>
c0002a18:	89 d8                	mov    eax,ebx
c0002a1a:	83 e0 7f             	and    eax,0x7f
c0002a1d:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a20:	e8 54 f0 ff ff       	call   c0001a79 <ld_dword>
c0002a25:	83 f8 ff             	cmp    eax,0xffffffff
c0002a28:	74 0a                	je     c0002a34 <mount_volume+0x538>
c0002a2a:	43                   	inc    ebx
c0002a2b:	39 d8                	cmp    eax,ebx
c0002a2d:	74 cd                	je     c00029fc <mount_volume+0x500>
c0002a2f:	e9 90 fb ff ff       	jmp    c00025c4 <mount_volume+0xc8>
c0002a34:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a3b:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a42:	bb 04 00 00 00       	mov    ebx,0x4
c0002a47:	e9 e8 fd ff ff       	jmp    c0002834 <mount_volume+0x338>
c0002a4c:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a51:	19 db                	sbb    ebx,ebx
c0002a53:	83 c3 02             	add    ebx,0x2
c0002a56:	e9 93 fc ff ff       	jmp    c00026ee <mount_volume+0x1f2>
c0002a5b:	83 c4 3c             	add    esp,0x3c
c0002a5e:	89 d8                	mov    eax,ebx
c0002a60:	5b                   	pop    ebx
c0002a61:	5e                   	pop    esi
c0002a62:	5f                   	pop    edi
c0002a63:	5d                   	pop    ebp
c0002a64:	c3                   	ret    

c0002a65 <find_bitmap>:
c0002a65:	55                   	push   ebp
c0002a66:	57                   	push   edi
c0002a67:	89 c7                	mov    edi,eax
c0002a69:	56                   	push   esi
c0002a6a:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a6d:	53                   	push   ebx
c0002a6e:	83 ec 1c             	sub    esp,0x1c
c0002a71:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a78:	83 e8 02             	sub    eax,0x2
c0002a7b:	39 f0                	cmp    eax,esi
c0002a7d:	77 02                	ja     c0002a81 <find_bitmap+0x1c>
c0002a7f:	31 f6                	xor    esi,esi
c0002a81:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a85:	89 f3                	mov    ebx,esi
c0002a87:	31 ed                	xor    ebp,ebp
c0002a89:	31 c9                	xor    ecx,ecx
c0002a8b:	89 da                	mov    edx,ebx
c0002a8d:	89 f8                	mov    eax,edi
c0002a8f:	c1 ea 0c             	shr    edx,0xc
c0002a92:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a95:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a98:	e8 ad f7 ff ff       	call   c000224a <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	75 68                	jne    c0002b09 <find_bitmap+0xa4>
c0002aa1:	89 da                	mov    edx,ebx
c0002aa3:	89 d9                	mov    ecx,ebx
c0002aa5:	c1 ea 03             	shr    edx,0x3
c0002aa8:	83 e1 07             	and    ecx,0x7
c0002aab:	b8 01 00 00 00       	mov    eax,0x1
c0002ab0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ab6:	d3 e0                	shl    eax,cl
c0002ab8:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002abb:	83 e9 02             	sub    ecx,0x2
c0002abe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ac2:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ac6:	43                   	inc    ebx
c0002ac7:	21 c1                	and    ecx,eax
c0002ac9:	d1 e0                	shl    eax,1
c0002acb:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002acf:	77 09                	ja     c0002ada <find_bitmap+0x75>
c0002ad1:	31 db                	xor    ebx,ebx
c0002ad3:	ba 00 02 00 00       	mov    edx,0x200
c0002ad8:	31 c0                	xor    eax,eax
c0002ada:	84 c9                	test   cl,cl
c0002adc:	75 10                	jne    c0002aee <find_bitmap+0x89>
c0002ade:	45                   	inc    ebp
c0002adf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ae3:	75 0f                	jne    c0002af4 <find_bitmap+0x8f>
c0002ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ae9:	83 c0 02             	add    eax,0x2
c0002aec:	eb 22                	jmp    c0002b10 <find_bitmap+0xab>
c0002aee:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002af2:	31 ed                	xor    ebp,ebp
c0002af4:	39 de                	cmp    esi,ebx
c0002af6:	74 16                	je     c0002b0e <find_bitmap+0xa9>
c0002af8:	84 c0                	test   al,al
c0002afa:	75 c6                	jne    c0002ac2 <find_bitmap+0x5d>
c0002afc:	42                   	inc    edx
c0002afd:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002b03:	77 84                	ja     c0002a89 <find_bitmap+0x24>
c0002b05:	b0 01                	mov    al,0x1
c0002b07:	eb b9                	jmp    c0002ac2 <find_bitmap+0x5d>
c0002b09:	83 c8 ff             	or     eax,0xffffffff
c0002b0c:	eb 02                	jmp    c0002b10 <find_bitmap+0xab>
c0002b0e:	31 c0                	xor    eax,eax
c0002b10:	83 c4 1c             	add    esp,0x1c
c0002b13:	5b                   	pop    ebx
c0002b14:	5e                   	pop    esi
c0002b15:	5f                   	pop    edi
c0002b16:	5d                   	pop    ebp
c0002b17:	c3                   	ret    

c0002b18 <change_bitmap>:
c0002b18:	55                   	push   ebp
c0002b19:	89 cd                	mov    ebp,ecx
c0002b1b:	57                   	push   edi
c0002b1c:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b1f:	56                   	push   esi
c0002b20:	89 c7                	mov    edi,eax
c0002b22:	53                   	push   ebx
c0002b23:	89 c8                	mov    eax,ecx
c0002b25:	83 ec 1c             	sub    esp,0x1c
c0002b28:	31 d2                	xor    edx,edx
c0002b2a:	89 ce                	mov    esi,ecx
c0002b2c:	c1 e8 0c             	shr    eax,0xc
c0002b2f:	bb 01 00 00 00       	mov    ebx,0x1
c0002b34:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b37:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b3a:	c1 ee 03             	shr    esi,0x3
c0002b3d:	83 e1 07             	and    ecx,0x7
c0002b40:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b46:	d3 e3                	shl    ebx,cl
c0002b48:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b4c:	89 c1                	mov    ecx,eax
c0002b4e:	89 d3                	mov    ebx,edx
c0002b50:	83 c1 01             	add    ecx,0x1
c0002b53:	83 d3 00             	adc    ebx,0x0
c0002b56:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b5a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b5e:	89 d1                	mov    ecx,edx
c0002b60:	89 c2                	mov    edx,eax
c0002b62:	89 f8                	mov    eax,edi
c0002b64:	e8 e1 f6 ff ff       	call   c000224a <move_window>
c0002b69:	89 c1                	mov    ecx,eax
c0002b6b:	85 c0                	test   eax,eax
c0002b6d:	75 48                	jne    c0002bb7 <change_bitmap+0x9f>
c0002b6f:	31 d2                	xor    edx,edx
c0002b71:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b75:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b79:	0f 95 c2             	setne  dl
c0002b7c:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b80:	74 3c                	je     c0002bbe <change_bitmap+0xa6>
c0002b82:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b86:	4d                   	dec    ebp
c0002b87:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b8b:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b8f:	74 32                	je     c0002bc3 <change_bitmap+0xab>
c0002b91:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b95:	75 d8                	jne    c0002b6f <change_bitmap+0x57>
c0002b97:	8d 46 01             	lea    eax,[esi+0x1]
c0002b9a:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b9f:	89 c3                	mov    ebx,eax
c0002ba1:	31 f6                	xor    esi,esi
c0002ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bab:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002bb1:	74 99                	je     c0002b4c <change_bitmap+0x34>
c0002bb3:	89 de                	mov    esi,ebx
c0002bb5:	eb b8                	jmp    c0002b6f <change_bitmap+0x57>
c0002bb7:	b9 01 00 00 00       	mov    ecx,0x1
c0002bbc:	eb 05                	jmp    c0002bc3 <change_bitmap+0xab>
c0002bbe:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc3:	83 c4 1c             	add    esp,0x1c
c0002bc6:	89 c8                	mov    eax,ecx
c0002bc8:	5b                   	pop    ebx
c0002bc9:	5e                   	pop    esi
c0002bca:	5f                   	pop    edi
c0002bcb:	5d                   	pop    ebp
c0002bcc:	c3                   	ret    

c0002bcd <put_fat>:
c0002bcd:	83 fa 01             	cmp    edx,0x1
c0002bd0:	0f 86 7b 01 00 00    	jbe    c0002d51 <put_fat+0x184>
c0002bd6:	55                   	push   ebp
c0002bd7:	57                   	push   edi
c0002bd8:	89 cf                	mov    edi,ecx
c0002bda:	56                   	push   esi
c0002bdb:	b9 02 00 00 00       	mov    ecx,0x2
c0002be0:	53                   	push   ebx
c0002be1:	89 c6                	mov    esi,eax
c0002be3:	83 ec 1c             	sub    esp,0x1c
c0002be6:	89 d3                	mov    ebx,edx
c0002be8:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002beb:	0f 86 68 01 00 00    	jbe    c0002d59 <put_fat+0x18c>
c0002bf1:	8a 00                	mov    al,BYTE PTR [eax]
c0002bf3:	3c 02                	cmp    al,0x2
c0002bf5:	0f 84 c7 00 00 00    	je     c0002cc2 <put_fat+0xf5>
c0002bfb:	77 09                	ja     c0002c06 <put_fat+0x39>
c0002bfd:	fe c8                	dec    al
c0002bff:	74 17                	je     c0002c18 <put_fat+0x4b>
c0002c01:	e9 53 01 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002c06:	b9 02 00 00 00       	mov    ecx,0x2
c0002c0b:	3c 04                	cmp    al,0x4
c0002c0d:	0f 86 e1 00 00 00    	jbe    c0002cf4 <put_fat+0x127>
c0002c13:	e9 41 01 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002c18:	89 d5                	mov    ebp,edx
c0002c1a:	31 c9                	xor    ecx,ecx
c0002c1c:	d1 ed                	shr    ebp,1
c0002c1e:	89 f0                	mov    eax,esi
c0002c20:	01 d5                	add    ebp,edx
c0002c22:	89 ea                	mov    edx,ebp
c0002c24:	c1 ea 09             	shr    edx,0x9
c0002c27:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c2a:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c2d:	e8 18 f6 ff ff       	call   c000224a <move_window>
c0002c32:	89 c1                	mov    ecx,eax
c0002c34:	85 c0                	test   eax,eax
c0002c36:	0f 85 1d 01 00 00    	jne    c0002d59 <put_fat+0x18c>
c0002c3c:	8d 46 54             	lea    eax,[esi+0x54]
c0002c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c43:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c46:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c50:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c54:	89 f8                	mov    eax,edi
c0002c56:	83 e3 01             	and    ebx,0x1
c0002c59:	74 0d                	je     c0002c68 <put_fat+0x9b>
c0002c5b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c5e:	89 fa                	mov    edx,edi
c0002c60:	83 e0 0f             	and    eax,0xf
c0002c63:	c1 e2 04             	shl    edx,0x4
c0002c66:	09 d0                	or     eax,edx
c0002c68:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c6f:	31 c9                	xor    ecx,ecx
c0002c71:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c75:	c1 ea 09             	shr    edx,0x9
c0002c78:	89 f0                	mov    eax,esi
c0002c7a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c7d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c80:	e8 c5 f5 ff ff       	call   c000224a <move_window>
c0002c85:	89 c1                	mov    ecx,eax
c0002c87:	85 c0                	test   eax,eax
c0002c89:	0f 85 ca 00 00 00    	jne    c0002d59 <put_fat+0x18c>
c0002c8f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c93:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c99:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c9d:	85 db                	test   ebx,ebx
c0002c9f:	74 07                	je     c0002ca8 <put_fat+0xdb>
c0002ca1:	c1 ef 04             	shr    edi,0x4
c0002ca4:	89 fa                	mov    edx,edi
c0002ca6:	eb 0e                	jmp    c0002cb6 <put_fat+0xe9>
c0002ca8:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002cab:	c1 ef 08             	shr    edi,0x8
c0002cae:	83 e2 f0             	and    edx,0xfffffff0
c0002cb1:	83 e7 0f             	and    edi,0xf
c0002cb4:	09 fa                	or     edx,edi
c0002cb6:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002cb9:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cbd:	e9 97 00 00 00       	jmp    c0002d59 <put_fat+0x18c>
c0002cc2:	31 c9                	xor    ecx,ecx
c0002cc4:	c1 ea 08             	shr    edx,0x8
c0002cc7:	89 f0                	mov    eax,esi
c0002cc9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ccc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccf:	e8 76 f5 ff ff       	call   c000224a <move_window>
c0002cd4:	89 c1                	mov    ecx,eax
c0002cd6:	85 c0                	test   eax,eax
c0002cd8:	75 7f                	jne    c0002d59 <put_fat+0x18c>
c0002cda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cde:	01 db                	add    ebx,ebx
c0002ce0:	0f b7 d7             	movzx  edx,di
c0002ce3:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ce9:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ced:	e8 ec ed ff ff       	call   c0001ade <st_word>
c0002cf2:	eb 53                	jmp    c0002d47 <put_fat+0x17a>
c0002cf4:	31 c9                	xor    ecx,ecx
c0002cf6:	c1 ea 07             	shr    edx,0x7
c0002cf9:	89 f0                	mov    eax,esi
c0002cfb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cfe:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d01:	e8 44 f5 ff ff       	call   c000224a <move_window>
c0002d06:	89 c1                	mov    ecx,eax
c0002d08:	85 c0                	test   eax,eax
c0002d0a:	75 4d                	jne    c0002d59 <put_fat+0x18c>
c0002d0c:	c1 e3 02             	shl    ebx,0x2
c0002d0f:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002d15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d18:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d1c:	74 1c                	je     c0002d3a <put_fat+0x16d>
c0002d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d22:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d28:	89 d8                	mov    eax,ebx
c0002d2a:	e8 4a ed ff ff       	call   c0001a79 <ld_dword>
c0002d2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d33:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d38:	09 c7                	or     edi,eax
c0002d3a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d3e:	89 fa                	mov    edx,edi
c0002d40:	89 d8                	mov    eax,ebx
c0002d42:	e8 9b ed ff ff       	call   c0001ae2 <st_dword>
c0002d47:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d4f:	eb 08                	jmp    c0002d59 <put_fat+0x18c>
c0002d51:	b9 02 00 00 00       	mov    ecx,0x2
c0002d56:	89 c8                	mov    eax,ecx
c0002d58:	c3                   	ret    
c0002d59:	83 c4 1c             	add    esp,0x1c
c0002d5c:	89 c8                	mov    eax,ecx
c0002d5e:	5b                   	pop    ebx
c0002d5f:	5e                   	pop    esi
c0002d60:	5f                   	pop    edi
c0002d61:	5d                   	pop    ebp
c0002d62:	c3                   	ret    

c0002d63 <fill_last_frag>:
c0002d63:	57                   	push   edi
c0002d64:	89 cf                	mov    edi,ecx
c0002d66:	56                   	push   esi
c0002d67:	89 d6                	mov    esi,edx
c0002d69:	53                   	push   ebx
c0002d6a:	89 c3                	mov    ebx,eax
c0002d6c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d6f:	85 c0                	test   eax,eax
c0002d71:	74 21                	je     c0002d94 <fill_last_frag+0x31>
c0002d73:	89 f9                	mov    ecx,edi
c0002d75:	83 f8 01             	cmp    eax,0x1
c0002d78:	76 05                	jbe    c0002d7f <fill_last_frag+0x1c>
c0002d7a:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d7d:	29 c1                	sub    ecx,eax
c0002d7f:	8d 56 01             	lea    edx,[esi+0x1]
c0002d82:	29 c2                	sub    edx,eax
c0002d84:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d86:	e8 42 fe ff ff       	call   c0002bcd <put_fat>
c0002d8b:	85 c0                	test   eax,eax
c0002d8d:	75 05                	jne    c0002d94 <fill_last_frag+0x31>
c0002d8f:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d92:	eb d8                	jmp    c0002d6c <fill_last_frag+0x9>
c0002d94:	5b                   	pop    ebx
c0002d95:	5e                   	pop    esi
c0002d96:	5f                   	pop    edi
c0002d97:	c3                   	ret    

c0002d98 <fill_first_frag>:
c0002d98:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d9c:	75 2d                	jne    c0002dcb <fill_first_frag+0x33>
c0002d9e:	57                   	push   edi
c0002d9f:	56                   	push   esi
c0002da0:	53                   	push   ebx
c0002da1:	89 c3                	mov    ebx,eax
c0002da3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002da6:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002da9:	01 d7                	add    edi,edx
c0002dab:	39 fa                	cmp    edx,edi
c0002dad:	74 14                	je     c0002dc3 <fill_first_frag+0x2b>
c0002daf:	8d 72 01             	lea    esi,[edx+0x1]
c0002db2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002db4:	89 f1                	mov    ecx,esi
c0002db6:	e8 12 fe ff ff       	call   c0002bcd <put_fat>
c0002dbb:	89 f2                	mov    edx,esi
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	74 ea                	je     c0002dab <fill_first_frag+0x13>
c0002dc1:	eb 0b                	jmp    c0002dce <fill_first_frag+0x36>
c0002dc3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002dc7:	31 c0                	xor    eax,eax
c0002dc9:	eb 03                	jmp    c0002dce <fill_first_frag+0x36>
c0002dcb:	31 c0                	xor    eax,eax
c0002dcd:	c3                   	ret    
c0002dce:	5b                   	pop    ebx
c0002dcf:	5e                   	pop    esi
c0002dd0:	5f                   	pop    edi
c0002dd1:	c3                   	ret    

c0002dd2 <get_fat>:
c0002dd2:	83 fa 01             	cmp    edx,0x1
c0002dd5:	0f 86 db 01 00 00    	jbe    c0002fb6 <get_fat+0x1e4>
c0002ddb:	55                   	push   ebp
c0002ddc:	b9 01 00 00 00       	mov    ecx,0x1
c0002de1:	57                   	push   edi
c0002de2:	56                   	push   esi
c0002de3:	53                   	push   ebx
c0002de4:	83 ec 1c             	sub    esp,0x1c
c0002de7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002de9:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dec:	0f 86 cc 01 00 00    	jbe    c0002fbe <get_fat+0x1ec>
c0002df2:	89 c3                	mov    ebx,eax
c0002df4:	89 d6                	mov    esi,edx
c0002df6:	8a 07                	mov    al,BYTE PTR [edi]
c0002df8:	3c 02                	cmp    al,0x2
c0002dfa:	0f 84 99 00 00 00    	je     c0002e99 <get_fat+0xc7>
c0002e00:	77 09                	ja     c0002e0b <get_fat+0x39>
c0002e02:	fe c8                	dec    al
c0002e04:	74 1a                	je     c0002e20 <get_fat+0x4e>
c0002e06:	e9 b3 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e0b:	3c 03                	cmp    al,0x3
c0002e0d:	0f 84 b5 00 00 00    	je     c0002ec8 <get_fat+0xf6>
c0002e13:	3c 04                	cmp    al,0x4
c0002e15:	0f 84 e3 00 00 00    	je     c0002efe <get_fat+0x12c>
c0002e1b:	e9 9e 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e20:	89 d3                	mov    ebx,edx
c0002e22:	31 c9                	xor    ecx,ecx
c0002e24:	d1 eb                	shr    ebx,1
c0002e26:	89 f8                	mov    eax,edi
c0002e28:	01 d3                	add    ebx,edx
c0002e2a:	89 da                	mov    edx,ebx
c0002e2c:	c1 ea 09             	shr    edx,0x9
c0002e2f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e32:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e35:	e8 10 f4 ff ff       	call   c000224a <move_window>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <get_fat+0x74>
c0002e3e:	83 c9 ff             	or     ecx,0xffffffff
c0002e41:	e9 78 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e46:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e49:	31 c9                	xor    ecx,ecx
c0002e4b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e51:	89 ea                	mov    edx,ebp
c0002e53:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e57:	c1 ea 09             	shr    edx,0x9
c0002e5a:	89 f8                	mov    eax,edi
c0002e5c:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e5f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e62:	e8 e3 f3 ff ff       	call   c000224a <move_window>
c0002e67:	85 c0                	test   eax,eax
c0002e69:	75 d3                	jne    c0002e3e <get_fat+0x6c>
c0002e6b:	0f b6 c3             	movzx  eax,bl
c0002e6e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e74:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e79:	c1 e3 08             	shl    ebx,0x8
c0002e7c:	09 c3                	or     ebx,eax
c0002e7e:	89 d9                	mov    ecx,ebx
c0002e80:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e86:	83 e6 01             	and    esi,0x1
c0002e89:	0f 84 2f 01 00 00    	je     c0002fbe <get_fat+0x1ec>
c0002e8f:	89 d9                	mov    ecx,ebx
c0002e91:	c1 e9 04             	shr    ecx,0x4
c0002e94:	e9 25 01 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002e99:	31 c9                	xor    ecx,ecx
c0002e9b:	c1 ea 08             	shr    edx,0x8
c0002e9e:	89 f8                	mov    eax,edi
c0002ea0:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea3:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea6:	e8 9f f3 ff ff       	call   c000224a <move_window>
c0002eab:	85 c0                	test   eax,eax
c0002ead:	75 8f                	jne    c0002e3e <get_fat+0x6c>
c0002eaf:	01 f6                	add    esi,esi
c0002eb1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 ac eb ff ff       	call   c0001a6c <ld_word>
c0002ec0:	0f b7 c8             	movzx  ecx,ax
c0002ec3:	e9 f6 00 00 00       	jmp    c0002fbe <get_fat+0x1ec>
c0002ec8:	31 c9                	xor    ecx,ecx
c0002eca:	c1 ea 07             	shr    edx,0x7
c0002ecd:	89 f8                	mov    eax,edi
c0002ecf:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ed2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ed5:	e8 70 f3 ff ff       	call   c000224a <move_window>
c0002eda:	85 c0                	test   eax,eax
c0002edc:	0f 85 5c ff ff ff    	jne    c0002e3e <get_fat+0x6c>
c0002ee2:	c1 e6 02             	shl    esi,0x2
c0002ee5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eeb:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eef:	e8 85 eb ff ff       	call   c0001a79 <ld_dword>
c0002ef4:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ef9:	e9 b4 00 00 00       	jmp    c0002fb2 <get_fat+0x1e0>
c0002efe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002f01:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f04:	89 d1                	mov    ecx,edx
c0002f06:	09 c1                	or     ecx,eax
c0002f08:	74 06                	je     c0002f10 <get_fat+0x13e>
c0002f0a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002f0e:	75 0f                	jne    c0002f1f <get_fat+0x14d>
c0002f10:	b9 01 00 00 00       	mov    ecx,0x1
c0002f15:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f19:	0f 85 9f 00 00 00    	jne    c0002fbe <get_fat+0x1ec>
c0002f1f:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f23:	89 f5                	mov    ebp,esi
c0002f25:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f2a:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f2d:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f30:	80 f9 02             	cmp    cl,0x2
c0002f33:	75 35                	jne    c0002f6a <get_fat+0x198>
c0002f35:	83 c0 ff             	add    eax,0xffffffff
c0002f38:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f3d:	83 d2 ff             	adc    edx,0xffffffff
c0002f40:	31 db                	xor    ebx,ebx
c0002f42:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f46:	53                   	push   ebx
c0002f47:	c1 ea 09             	shr    edx,0x9
c0002f4a:	51                   	push   ecx
c0002f4b:	52                   	push   edx
c0002f4c:	50                   	push   eax
c0002f4d:	e8 2a f5 01 00       	call   c002247c <__udivdi3>
c0002f52:	83 c4 10             	add    esp,0x10
c0002f55:	b9 01 00 00 00       	mov    ecx,0x1
c0002f5a:	39 c5                	cmp    ebp,eax
c0002f5c:	77 60                	ja     c0002fbe <get_fat+0x1ec>
c0002f5e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f63:	74 59                	je     c0002fbe <get_fat+0x1ec>
c0002f65:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f68:	eb 54                	jmp    c0002fbe <get_fat+0x1ec>
c0002f6a:	80 f9 03             	cmp    cl,0x3
c0002f6d:	75 05                	jne    c0002f74 <get_fat+0x1a2>
c0002f6f:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f72:	77 f1                	ja     c0002f65 <get_fat+0x193>
c0002f74:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f79:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f7d:	75 3f                	jne    c0002fbe <get_fat+0x1ec>
c0002f7f:	31 c9                	xor    ecx,ecx
c0002f81:	89 f2                	mov    edx,esi
c0002f83:	89 f8                	mov    eax,edi
c0002f85:	c1 ea 07             	shr    edx,0x7
c0002f88:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8e:	e8 b7 f2 ff ff       	call   c000224a <move_window>
c0002f93:	85 c0                	test   eax,eax
c0002f95:	0f 85 a3 fe ff ff    	jne    c0002e3e <get_fat+0x6c>
c0002f9b:	c1 e6 02             	shl    esi,0x2
c0002f9e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fa4:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa8:	e8 cc ea ff ff       	call   c0001a79 <ld_dword>
c0002fad:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002fb2:	89 c1                	mov    ecx,eax
c0002fb4:	eb 08                	jmp    c0002fbe <get_fat+0x1ec>
c0002fb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002fbb:	89 c8                	mov    eax,ecx
c0002fbd:	c3                   	ret    
c0002fbe:	83 c4 1c             	add    esp,0x1c
c0002fc1:	89 c8                	mov    eax,ecx
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	5d                   	pop    ebp
c0002fc7:	c3                   	ret    

c0002fc8 <dir_sdi>:
c0002fc8:	55                   	push   ebp
c0002fc9:	57                   	push   edi
c0002fca:	56                   	push   esi
c0002fcb:	53                   	push   ebx
c0002fcc:	89 c3                	mov    ebx,eax
c0002fce:	83 ec 1c             	sub    esp,0x1c
c0002fd1:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fd3:	31 c0                	xor    eax,eax
c0002fd5:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fd8:	0f 94 c0             	sete   al
c0002fdb:	48                   	dec    eax
c0002fdc:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fe1:	05 00 00 00 10       	add    eax,0x10000000
c0002fe6:	39 d0                	cmp    eax,edx
c0002fe8:	77 0a                	ja     c0002ff4 <dir_sdi+0x2c>
c0002fea:	b8 02 00 00 00       	mov    eax,0x2
c0002fef:	e9 c4 00 00 00       	jmp    c00030b8 <dir_sdi+0xf0>
c0002ff4:	89 d6                	mov    esi,edx
c0002ff6:	f6 c2 1f             	test   dl,0x1f
c0002ff9:	75 ef                	jne    c0002fea <dir_sdi+0x22>
c0002ffb:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002ffe:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003001:	85 c9                	test   ecx,ecx
c0003003:	75 2d                	jne    c0003032 <dir_sdi+0x6a>
c0003005:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003008:	77 1b                	ja     c0003025 <dir_sdi+0x5d>
c000300a:	89 f2                	mov    edx,esi
c000300c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003010:	c1 ea 05             	shr    edx,0x5
c0003013:	39 c2                	cmp    edx,eax
c0003015:	73 d3                	jae    c0002fea <dir_sdi+0x22>
c0003017:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000301a:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000301d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003020:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003023:	eb 4b                	jmp    c0003070 <dir_sdi+0xa8>
c0003025:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003028:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000302c:	85 c0                	test   eax,eax
c000302e:	74 da                	je     c000300a <dir_sdi+0x42>
c0003030:	89 c1                	mov    ecx,eax
c0003032:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003036:	c1 e5 09             	shl    ebp,0x9
c0003039:	89 ca                	mov    edx,ecx
c000303b:	39 ee                	cmp    esi,ebp
c000303d:	72 1c                	jb     c000305b <dir_sdi+0x93>
c000303f:	89 d8                	mov    eax,ebx
c0003041:	e8 8c fd ff ff       	call   c0002dd2 <get_fat>
c0003046:	89 c1                	mov    ecx,eax
c0003048:	83 f8 ff             	cmp    eax,0xffffffff
c000304b:	74 66                	je     c00030b3 <dir_sdi+0xeb>
c000304d:	83 f8 01             	cmp    eax,0x1
c0003050:	76 98                	jbe    c0002fea <dir_sdi+0x22>
c0003052:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003055:	76 93                	jbe    c0002fea <dir_sdi+0x22>
c0003057:	29 ee                	sub    esi,ebp
c0003059:	eb de                	jmp    c0003039 <dir_sdi+0x71>
c000305b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000305f:	89 f8                	mov    eax,edi
c0003061:	e8 9f ec ff ff       	call   c0001d05 <clst2sect>
c0003066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000306a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000306d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003070:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003073:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003076:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003079:	89 d1                	mov    ecx,edx
c000307b:	09 c1                	or     ecx,eax
c000307d:	0f 84 67 ff ff ff    	je     c0002fea <dir_sdi+0x22>
c0003083:	89 f1                	mov    ecx,esi
c0003085:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000308d:	c1 e9 09             	shr    ecx,0x9
c0003090:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003094:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003098:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000309c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000309f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00030a5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00030a8:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030ac:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00030af:	31 c0                	xor    eax,eax
c00030b1:	eb 05                	jmp    c00030b8 <dir_sdi+0xf0>
c00030b3:	b8 01 00 00 00       	mov    eax,0x1
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <create_chain>:
c00030c0:	55                   	push   ebp
c00030c1:	89 c5                	mov    ebp,eax
c00030c3:	57                   	push   edi
c00030c4:	56                   	push   esi
c00030c5:	53                   	push   ebx
c00030c6:	83 ec 1c             	sub    esp,0x1c
c00030c9:	85 d2                	test   edx,edx
c00030cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030cf:	8b 30                	mov    esi,DWORD PTR [eax]
c00030d1:	75 0e                	jne    c00030e1 <create_chain+0x21>
c00030d3:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030d6:	85 ff                	test   edi,edi
c00030d8:	74 39                	je     c0003113 <create_chain+0x53>
c00030da:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030dd:	77 39                	ja     c0003118 <create_chain+0x58>
c00030df:	eb 32                	jmp    c0003113 <create_chain+0x53>
c00030e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030e5:	e8 e8 fc ff ff       	call   c0002dd2 <get_fat>
c00030ea:	89 c3                	mov    ebx,eax
c00030ec:	83 f8 01             	cmp    eax,0x1
c00030ef:	77 0a                	ja     c00030fb <create_chain+0x3b>
c00030f1:	bb 01 00 00 00       	mov    ebx,0x1
c00030f6:	e9 ba 01 00 00       	jmp    c00032b5 <create_chain+0x1f5>
c00030fb:	83 f8 ff             	cmp    eax,0xffffffff
c00030fe:	0f 84 62 01 00 00    	je     c0003266 <create_chain+0x1a6>
c0003104:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003107:	0f 87 a8 01 00 00    	ja     c00032b5 <create_chain+0x1f5>
c000310d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003111:	eb 05                	jmp    c0003118 <create_chain+0x58>
c0003113:	bf 01 00 00 00       	mov    edi,0x1
c0003118:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000311c:	75 07                	jne    c0003125 <create_chain+0x65>
c000311e:	31 db                	xor    ebx,ebx
c0003120:	e9 90 01 00 00       	jmp    c00032b5 <create_chain+0x1f5>
c0003125:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003128:	75 74                	jne    c000319e <create_chain+0xde>
c000312a:	b9 01 00 00 00       	mov    ecx,0x1
c000312f:	89 fa                	mov    edx,edi
c0003131:	89 f0                	mov    eax,esi
c0003133:	e8 2d f9 ff ff       	call   c0002a65 <find_bitmap>
c0003138:	89 c3                	mov    ebx,eax
c000313a:	8d 40 ff             	lea    eax,[eax-0x1]
c000313d:	83 f8 fd             	cmp    eax,0xfffffffd
c0003140:	0f 87 6f 01 00 00    	ja     c00032b5 <create_chain+0x1f5>
c0003146:	83 ec 0c             	sub    esp,0xc
c0003149:	b9 01 00 00 00       	mov    ecx,0x1
c000314e:	6a 01                	push   0x1
c0003150:	89 da                	mov    edx,ebx
c0003152:	89 f0                	mov    eax,esi
c0003154:	e8 bf f9 ff ff       	call   c0002b18 <change_bitmap>
c0003159:	83 c4 10             	add    esp,0x10
c000315c:	83 f8 02             	cmp    eax,0x2
c000315f:	74 90                	je     c00030f1 <create_chain+0x31>
c0003161:	83 f8 01             	cmp    eax,0x1
c0003164:	0f 84 fc 00 00 00    	je     c0003266 <create_chain+0x1a6>
c000316a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000316f:	75 09                	jne    c000317a <create_chain+0xba>
c0003171:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003175:	e9 0c 01 00 00       	jmp    c0003286 <create_chain+0x1c6>
c000317a:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000317e:	0f 85 e7 00 00 00    	jne    c000326b <create_chain+0x1ab>
c0003184:	8d 57 01             	lea    edx,[edi+0x1]
c0003187:	39 da                	cmp    edx,ebx
c0003189:	0f 84 f7 00 00 00    	je     c0003286 <create_chain+0x1c6>
c000318f:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003192:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003196:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003199:	e9 cd 00 00 00       	jmp    c000326b <create_chain+0x1ab>
c000319e:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00031a2:	75 41                	jne    c00031e5 <create_chain+0x125>
c00031a4:	8d 5f 01             	lea    ebx,[edi+0x1]
c00031a7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031aa:	77 05                	ja     c00031b1 <create_chain+0xf1>
c00031ac:	bb 02 00 00 00       	mov    ebx,0x2
c00031b1:	89 da                	mov    edx,ebx
c00031b3:	89 e8                	mov    eax,ebp
c00031b5:	e8 18 fc ff ff       	call   c0002dd2 <get_fat>
c00031ba:	83 f8 01             	cmp    eax,0x1
c00031bd:	0f 84 2e ff ff ff    	je     c00030f1 <create_chain+0x31>
c00031c3:	83 f8 ff             	cmp    eax,0xffffffff
c00031c6:	0f 84 9a 00 00 00    	je     c0003266 <create_chain+0x1a6>
c00031cc:	85 c0                	test   eax,eax
c00031ce:	74 11                	je     c00031e1 <create_chain+0x121>
c00031d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	76 0d                	jbe    c00031e5 <create_chain+0x125>
c00031d8:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031db:	76 08                	jbe    c00031e5 <create_chain+0x125>
c00031dd:	89 c7                	mov    edi,eax
c00031df:	eb 04                	jmp    c00031e5 <create_chain+0x125>
c00031e1:	85 db                	test   ebx,ebx
c00031e3:	75 38                	jne    c000321d <create_chain+0x15d>
c00031e5:	89 fb                	mov    ebx,edi
c00031e7:	43                   	inc    ebx
c00031e8:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031eb:	77 0e                	ja     c00031fb <create_chain+0x13b>
c00031ed:	83 ff 01             	cmp    edi,0x1
c00031f0:	0f 86 28 ff ff ff    	jbe    c000311e <create_chain+0x5e>
c00031f6:	bb 02 00 00 00       	mov    ebx,0x2
c00031fb:	89 da                	mov    edx,ebx
c00031fd:	89 e8                	mov    eax,ebp
c00031ff:	e8 ce fb ff ff       	call   c0002dd2 <get_fat>
c0003204:	85 c0                	test   eax,eax
c0003206:	74 15                	je     c000321d <create_chain+0x15d>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	0f 84 e0 fe ff ff    	je     c00030f1 <create_chain+0x31>
c0003211:	40                   	inc    eax
c0003212:	74 52                	je     c0003266 <create_chain+0x1a6>
c0003214:	39 fb                	cmp    ebx,edi
c0003216:	75 cf                	jne    c00031e7 <create_chain+0x127>
c0003218:	e9 01 ff ff ff       	jmp    c000311e <create_chain+0x5e>
c000321d:	83 c9 ff             	or     ecx,0xffffffff
c0003220:	89 da                	mov    edx,ebx
c0003222:	89 f0                	mov    eax,esi
c0003224:	e8 a4 f9 ff ff       	call   c0002bcd <put_fat>
c0003229:	85 c0                	test   eax,eax
c000322b:	75 32                	jne    c000325f <create_chain+0x19f>
c000322d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003232:	74 11                	je     c0003245 <create_chain+0x185>
c0003234:	89 d9                	mov    ecx,ebx
c0003236:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000323a:	89 f0                	mov    eax,esi
c000323c:	e8 8c f9 ff ff       	call   c0002bcd <put_fat>
c0003241:	85 c0                	test   eax,eax
c0003243:	75 1a                	jne    c000325f <create_chain+0x19f>
c0003245:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003248:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000324b:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000324e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003251:	39 d0                	cmp    eax,edx
c0003253:	77 04                	ja     c0003259 <create_chain+0x199>
c0003255:	48                   	dec    eax
c0003256:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003259:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000325d:	eb 56                	jmp    c00032b5 <create_chain+0x1f5>
c000325f:	48                   	dec    eax
c0003260:	0f 85 8b fe ff ff    	jne    c00030f1 <create_chain+0x31>
c0003266:	83 cb ff             	or     ebx,0xffffffff
c0003269:	eb 4a                	jmp    c00032b5 <create_chain+0x1f5>
c000326b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000326f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003272:	41                   	inc    ecx
c0003273:	39 d9                	cmp    ecx,ebx
c0003275:	75 19                	jne    c0003290 <create_chain+0x1d0>
c0003277:	b9 02 00 00 00       	mov    ecx,0x2
c000327c:	85 d2                	test   edx,edx
c000327e:	74 03                	je     c0003283 <create_chain+0x1c3>
c0003280:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003283:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003286:	85 c0                	test   eax,eax
c0003288:	0f 85 63 fe ff ff    	jne    c00030f1 <create_chain+0x31>
c000328e:	eb b5                	jmp    c0003245 <create_chain+0x185>
c0003290:	85 d2                	test   edx,edx
c0003292:	75 07                	jne    c000329b <create_chain+0x1db>
c0003294:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000329b:	89 d9                	mov    ecx,ebx
c000329d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a1:	89 e8                	mov    eax,ebp
c00032a3:	e8 bb fa ff ff       	call   c0002d63 <fill_last_frag>
c00032a8:	85 c0                	test   eax,eax
c00032aa:	75 b3                	jne    c000325f <create_chain+0x19f>
c00032ac:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032b3:	eb 90                	jmp    c0003245 <create_chain+0x185>
c00032b5:	83 c4 1c             	add    esp,0x1c
c00032b8:	89 d8                	mov    eax,ebx
c00032ba:	5b                   	pop    ebx
c00032bb:	5e                   	pop    esi
c00032bc:	5f                   	pop    edi
c00032bd:	5d                   	pop    ebp
c00032be:	c3                   	ret    

c00032bf <remove_chain>:
c00032bf:	55                   	push   ebp
c00032c0:	57                   	push   edi
c00032c1:	56                   	push   esi
c00032c2:	53                   	push   ebx
c00032c3:	83 ec 1c             	sub    esp,0x1c
c00032c6:	83 fa 01             	cmp    edx,0x1
c00032c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032cd:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032cf:	77 0a                	ja     c00032db <remove_chain+0x1c>
c00032d1:	b8 02 00 00 00       	mov    eax,0x2
c00032d6:	e9 24 01 00 00       	jmp    c00033ff <remove_chain+0x140>
c00032db:	89 d6                	mov    esi,edx
c00032dd:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032e0:	76 ef                	jbe    c00032d1 <remove_chain+0x12>
c00032e2:	89 c7                	mov    edi,eax
c00032e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032e9:	75 06                	jne    c00032f1 <remove_chain+0x32>
c00032eb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032ef:	eb 54                	jmp    c0003345 <remove_chain+0x86>
c00032f1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f4:	75 06                	jne    c00032fc <remove_chain+0x3d>
c00032f6:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032fa:	74 ef                	je     c00032eb <remove_chain+0x2c>
c00032fc:	83 c9 ff             	or     ecx,0xffffffff
c00032ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003303:	89 d8                	mov    eax,ebx
c0003305:	e8 c3 f8 ff ff       	call   c0002bcd <put_fat>
c000330a:	85 c0                	test   eax,eax
c000330c:	74 dd                	je     c00032eb <remove_chain+0x2c>
c000330e:	e9 ec 00 00 00       	jmp    c00033ff <remove_chain+0x140>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	74 b9                	je     c00032d1 <remove_chain+0x12>
c0003318:	83 f8 ff             	cmp    eax,0xffffffff
c000331b:	74 6d                	je     c000338a <remove_chain+0xcb>
c000331d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003320:	75 6f                	jne    c0003391 <remove_chain+0xd2>
c0003322:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003325:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003328:	8d 51 fe             	lea    edx,[ecx-0x2]
c000332b:	39 d0                	cmp    eax,edx
c000332d:	73 08                	jae    c0003337 <remove_chain+0x78>
c000332f:	40                   	inc    eax
c0003330:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003334:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003337:	8d 4e 01             	lea    ecx,[esi+0x1]
c000333a:	39 e9                	cmp    ecx,ebp
c000333c:	75 64                	jne    c00033a2 <remove_chain+0xe3>
c000333e:	89 ee                	mov    esi,ebp
c0003340:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003343:	76 0f                	jbe    c0003354 <remove_chain+0x95>
c0003345:	89 f2                	mov    edx,esi
c0003347:	89 f8                	mov    eax,edi
c0003349:	e8 84 fa ff ff       	call   c0002dd2 <get_fat>
c000334e:	89 c5                	mov    ebp,eax
c0003350:	85 c0                	test   eax,eax
c0003352:	75 bf                	jne    c0003313 <remove_chain+0x54>
c0003354:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003357:	0f 85 a0 00 00 00    	jne    c00033fd <remove_chain+0x13e>
c000335d:	eb 6c                	jmp    c00033cb <remove_chain+0x10c>
c000335f:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003362:	84 c0                	test   al,al
c0003364:	75 7d                	jne    c00033e3 <remove_chain+0x124>
c0003366:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003369:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000336d:	0f 84 86 00 00 00    	je     c00033f9 <remove_chain+0x13a>
c0003373:	89 da                	mov    edx,ebx
c0003375:	89 f8                	mov    eax,edi
c0003377:	e8 56 fa ff ff       	call   c0002dd2 <get_fat>
c000337c:	83 f8 01             	cmp    eax,0x1
c000337f:	0f 86 4c ff ff ff    	jbe    c00032d1 <remove_chain+0x12>
c0003385:	83 f8 ff             	cmp    eax,0xffffffff
c0003388:	75 4e                	jne    c00033d8 <remove_chain+0x119>
c000338a:	b8 01 00 00 00       	mov    eax,0x1
c000338f:	eb 6e                	jmp    c00033ff <remove_chain+0x140>
c0003391:	31 c9                	xor    ecx,ecx
c0003393:	89 f2                	mov    edx,esi
c0003395:	89 d8                	mov    eax,ebx
c0003397:	e8 31 f8 ff ff       	call   c0002bcd <put_fat>
c000339c:	85 c0                	test   eax,eax
c000339e:	74 82                	je     c0003322 <remove_chain+0x63>
c00033a0:	eb 5d                	jmp    c00033ff <remove_chain+0x140>
c00033a2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033a5:	75 1b                	jne    c00033c2 <remove_chain+0x103>
c00033a7:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00033ab:	89 d8                	mov    eax,ebx
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	6a 00                	push   0x0
c00033b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033b6:	e8 5d f7 ff ff       	call   c0002b18 <change_bitmap>
c00033bb:	83 c4 10             	add    esp,0x10
c00033be:	85 c0                	test   eax,eax
c00033c0:	75 3d                	jne    c00033ff <remove_chain+0x140>
c00033c2:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033c6:	e9 73 ff ff ff       	jmp    c000333e <remove_chain+0x7f>
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 8d                	jne    c000335f <remove_chain+0xa0>
c00033d2:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033d6:	eb 25                	jmp    c00033fd <remove_chain+0x13e>
c00033d8:	8d 53 01             	lea    edx,[ebx+0x1]
c00033db:	89 c3                	mov    ebx,eax
c00033dd:	39 c2                	cmp    edx,eax
c00033df:	74 88                	je     c0003369 <remove_chain+0xaa>
c00033e1:	eb 1a                	jmp    c00033fd <remove_chain+0x13e>
c00033e3:	3c 03                	cmp    al,0x3
c00033e5:	75 16                	jne    c00033fd <remove_chain+0x13e>
c00033e7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033ea:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033ee:	77 0d                	ja     c00033fd <remove_chain+0x13e>
c00033f0:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033f3:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033f7:	72 04                	jb     c00033fd <remove_chain+0x13e>
c00033f9:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033fd:	31 c0                	xor    eax,eax
c00033ff:	83 c4 1c             	add    esp,0x1c
c0003402:	5b                   	pop    ebx
c0003403:	5e                   	pop    esi
c0003404:	5f                   	pop    edi
c0003405:	5d                   	pop    ebp
c0003406:	c3                   	ret    

c0003407 <dir_clear>:
c0003407:	55                   	push   ebp
c0003408:	57                   	push   edi
c0003409:	56                   	push   esi
c000340a:	89 c6                	mov    esi,eax
c000340c:	53                   	push   ebx
c000340d:	83 ec 1c             	sub    esp,0x1c
c0003410:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003414:	e8 9d ed ff ff       	call   c00021b6 <sync_window>
c0003419:	85 c0                	test   eax,eax
c000341b:	0f 85 de 00 00 00    	jne    c00034ff <dir_clear+0xf8>
c0003421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003425:	89 f0                	mov    eax,esi
c0003427:	8d 6e 54             	lea    ebp,[esi+0x54]
c000342a:	e8 d6 e8 ff ff       	call   c0001d05 <clst2sect>
c000342f:	b9 00 02 00 00       	mov    ecx,0x200
c0003434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000343c:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000343f:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003442:	89 e8                	mov    eax,ebp
c0003444:	31 d2                	xor    edx,edx
c0003446:	e8 b5 e6 ff ff       	call   c0001b00 <mem_set>
c000344b:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000344f:	c1 e3 09             	shl    ebx,0x9
c0003452:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003458:	76 1f                	jbe    c0003479 <dir_clear+0x72>
c000345a:	bb 00 80 00 00       	mov    ebx,0x8000
c000345f:	eb 18                	jmp    c0003479 <dir_clear+0x72>
c0003461:	83 ec 0c             	sub    esp,0xc
c0003464:	53                   	push   ebx
c0003465:	e8 35 4e 00 00       	call   c000829f <ff_memalloc>
c000346a:	83 c4 10             	add    esp,0x10
c000346d:	89 c7                	mov    edi,eax
c000346f:	85 c0                	test   eax,eax
c0003471:	0f 85 8f 00 00 00    	jne    c0003506 <dir_clear+0xff>
c0003477:	d1 eb                	shr    ebx,1
c0003479:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000347f:	77 e0                	ja     c0003461 <dir_clear+0x5a>
c0003481:	31 db                	xor    ebx,ebx
c0003483:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003487:	39 d8                	cmp    eax,ebx
c0003489:	76 66                	jbe    c00034f1 <dir_clear+0xea>
c000348b:	83 ec 0c             	sub    esp,0xc
c000348e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003492:	6a 01                	push   0x1
c0003494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000349c:	55                   	push   ebp
c000349d:	50                   	push   eax
c000349e:	e8 94 e5 ff ff       	call   c0001a37 <disk_write>
c00034a3:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00034a8:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00034ad:	83 c4 20             	add    esp,0x20
c00034b0:	85 c0                	test   eax,eax
c00034b2:	75 3d                	jne    c00034f1 <dir_clear+0xea>
c00034b4:	43                   	inc    ebx
c00034b5:	eb cc                	jmp    c0003483 <dir_clear+0x7c>
c00034b7:	83 ec 0c             	sub    esp,0xc
c00034ba:	31 d2                	xor    edx,edx
c00034bc:	55                   	push   ebp
c00034bd:	89 d8                	mov    eax,ebx
c00034bf:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034c3:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034c7:	52                   	push   edx
c00034c8:	50                   	push   eax
c00034c9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034cd:	57                   	push   edi
c00034ce:	50                   	push   eax
c00034cf:	e8 63 e5 ff ff       	call   c0001a37 <disk_write>
c00034d4:	83 c4 20             	add    esp,0x20
c00034d7:	85 c0                	test   eax,eax
c00034d9:	75 0a                	jne    c00034e5 <dir_clear+0xde>
c00034db:	01 eb                	add    ebx,ebp
c00034dd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e1:	39 d8                	cmp    eax,ebx
c00034e3:	77 d2                	ja     c00034b7 <dir_clear+0xb0>
c00034e5:	83 ec 0c             	sub    esp,0xc
c00034e8:	57                   	push   edi
c00034e9:	e8 c7 4d 00 00       	call   c00082b5 <ff_memfree>
c00034ee:	83 c4 10             	add    esp,0x10
c00034f1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034f5:	39 d8                	cmp    eax,ebx
c00034f7:	0f 95 c0             	setne  al
c00034fa:	0f b6 c0             	movzx  eax,al
c00034fd:	eb 19                	jmp    c0003518 <dir_clear+0x111>
c00034ff:	b8 01 00 00 00       	mov    eax,0x1
c0003504:	eb 12                	jmp    c0003518 <dir_clear+0x111>
c0003506:	89 d9                	mov    ecx,ebx
c0003508:	31 d2                	xor    edx,edx
c000350a:	c1 eb 09             	shr    ebx,0x9
c000350d:	e8 ee e5 ff ff       	call   c0001b00 <mem_set>
c0003512:	89 dd                	mov    ebp,ebx
c0003514:	31 db                	xor    ebx,ebx
c0003516:	eb c5                	jmp    c00034dd <dir_clear+0xd6>
c0003518:	83 c4 1c             	add    esp,0x1c
c000351b:	5b                   	pop    ebx
c000351c:	5e                   	pop    esi
c000351d:	5f                   	pop    edi
c000351e:	5d                   	pop    ebp
c000351f:	c3                   	ret    

c0003520 <dir_next>:
c0003520:	55                   	push   ebp
c0003521:	57                   	push   edi
c0003522:	56                   	push   esi
c0003523:	53                   	push   ebx
c0003524:	89 c3                	mov    ebx,eax
c0003526:	83 ec 1c             	sub    esp,0x1c
c0003529:	8b 28                	mov    ebp,DWORD PTR [eax]
c000352b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003532:	8d 78 20             	lea    edi,[eax+0x20]
c0003535:	31 c0                	xor    eax,eax
c0003537:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000353b:	0f 94 c0             	sete   al
c000353e:	48                   	dec    eax
c000353f:	25 00 00 20 f0       	and    eax,0xf0200000
c0003544:	05 00 00 00 10       	add    eax,0x10000000
c0003549:	39 f8                	cmp    eax,edi
c000354b:	77 0e                	ja     c000355b <dir_next+0x3b>
c000354d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003554:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000355b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000355e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003561:	b8 04 00 00 00       	mov    eax,0x4
c0003566:	89 ce                	mov    esi,ecx
c0003568:	09 d6                	or     esi,edx
c000356a:	0f 84 da 00 00 00    	je     c000364a <dir_next+0x12a>
c0003570:	89 f8                	mov    eax,edi
c0003572:	25 ff 01 00 00       	and    eax,0x1ff
c0003577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000357b:	0f 85 b9 00 00 00    	jne    c000363a <dir_next+0x11a>
c0003581:	83 c2 01             	add    edx,0x1
c0003584:	83 d1 00             	adc    ecx,0x0
c0003587:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000358a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000358d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003590:	85 d2                	test   edx,edx
c0003592:	75 29                	jne    c00035bd <dir_next+0x9d>
c0003594:	89 fa                	mov    edx,edi
c0003596:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000359a:	c1 ea 05             	shr    edx,0x5
c000359d:	39 c2                	cmp    edx,eax
c000359f:	0f 82 95 00 00 00    	jb     c000363a <dir_next+0x11a>
c00035a5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00035ac:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00035b3:	b8 04 00 00 00       	mov    eax,0x4
c00035b8:	e9 8d 00 00 00       	jmp    c000364a <dir_next+0x12a>
c00035bd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035c1:	89 f9                	mov    ecx,edi
c00035c3:	48                   	dec    eax
c00035c4:	c1 e9 09             	shr    ecx,0x9
c00035c7:	85 c8                	test   eax,ecx
c00035c9:	75 6f                	jne    c000363a <dir_next+0x11a>
c00035cb:	89 d8                	mov    eax,ebx
c00035cd:	e8 00 f8 ff ff       	call   c0002dd2 <get_fat>
c00035d2:	89 c6                	mov    esi,eax
c00035d4:	83 f8 01             	cmp    eax,0x1
c00035d7:	77 07                	ja     c00035e0 <dir_next+0xc0>
c00035d9:	b8 02 00 00 00       	mov    eax,0x2
c00035de:	eb 6a                	jmp    c000364a <dir_next+0x12a>
c00035e0:	83 f8 ff             	cmp    eax,0xffffffff
c00035e3:	75 07                	jne    c00035ec <dir_next+0xcc>
c00035e5:	b8 01 00 00 00       	mov    eax,0x1
c00035ea:	eb 5e                	jmp    c000364a <dir_next+0x12a>
c00035ec:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035ef:	77 37                	ja     c0003628 <dir_next+0x108>
c00035f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035f6:	74 ad                	je     c00035a5 <dir_next+0x85>
c00035f8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035fb:	89 d8                	mov    eax,ebx
c00035fd:	e8 be fa ff ff       	call   c00030c0 <create_chain>
c0003602:	89 c6                	mov    esi,eax
c0003604:	b8 07 00 00 00       	mov    eax,0x7
c0003609:	85 f6                	test   esi,esi
c000360b:	74 3d                	je     c000364a <dir_next+0x12a>
c000360d:	83 fe 01             	cmp    esi,0x1
c0003610:	74 c7                	je     c00035d9 <dir_next+0xb9>
c0003612:	83 fe ff             	cmp    esi,0xffffffff
c0003615:	74 ce                	je     c00035e5 <dir_next+0xc5>
c0003617:	89 f2                	mov    edx,esi
c0003619:	89 e8                	mov    eax,ebp
c000361b:	e8 e7 fd ff ff       	call   c0003407 <dir_clear>
c0003620:	85 c0                	test   eax,eax
c0003622:	75 c1                	jne    c00035e5 <dir_next+0xc5>
c0003624:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003628:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000362b:	89 f2                	mov    edx,esi
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 d1 e6 ff ff       	call   c0001d05 <clst2sect>
c0003634:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003637:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000363a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000363e:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003641:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003645:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003648:	31 c0                	xor    eax,eax
c000364a:	83 c4 1c             	add    esp,0x1c
c000364d:	5b                   	pop    ebx
c000364e:	5e                   	pop    esi
c000364f:	5f                   	pop    edi
c0003650:	5d                   	pop    ebp
c0003651:	c3                   	ret    

c0003652 <load_xdir>:
c0003652:	55                   	push   ebp
c0003653:	57                   	push   edi
c0003654:	56                   	push   esi
c0003655:	89 c6                	mov    esi,eax
c0003657:	53                   	push   ebx
c0003658:	83 ec 1c             	sub    esp,0x1c
c000365b:	8b 00                	mov    eax,DWORD PTR [eax]
c000365d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003660:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003663:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003666:	e8 df eb ff ff       	call   c000224a <move_window>
c000366b:	89 c3                	mov    ebx,eax
c000366d:	85 c0                	test   eax,eax
c000366f:	0f 85 0c 01 00 00    	jne    c0003781 <load_xdir+0x12f>
c0003675:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003678:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000367b:	0f 85 fb 00 00 00    	jne    c000377c <load_xdir+0x12a>
c0003681:	89 f8                	mov    eax,edi
c0003683:	b9 20 00 00 00       	mov    ecx,0x20
c0003688:	e8 5e e4 ff ff       	call   c0001aeb <mem_cpy>
c000368d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003691:	40                   	inc    eax
c0003692:	c1 e0 05             	shl    eax,0x5
c0003695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003699:	83 e8 60             	sub    eax,0x60
c000369c:	3d 00 02 00 00       	cmp    eax,0x200
c00036a1:	0f 87 d5 00 00 00    	ja     c000377c <load_xdir+0x12a>
c00036a7:	31 d2                	xor    edx,edx
c00036a9:	89 f0                	mov    eax,esi
c00036ab:	e8 70 fe ff ff       	call   c0003520 <dir_next>
c00036b0:	89 c3                	mov    ebx,eax
c00036b2:	83 f8 04             	cmp    eax,0x4
c00036b5:	0f 84 c1 00 00 00    	je     c000377c <load_xdir+0x12a>
c00036bb:	85 c0                	test   eax,eax
c00036bd:	0f 85 be 00 00 00    	jne    c0003781 <load_xdir+0x12f>
c00036c3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036c6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036cb:	e8 7a eb ff ff       	call   c000224a <move_window>
c00036d0:	89 c3                	mov    ebx,eax
c00036d2:	85 c0                	test   eax,eax
c00036d4:	0f 85 a7 00 00 00    	jne    c0003781 <load_xdir+0x12f>
c00036da:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036dd:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036e0:	0f 85 96 00 00 00    	jne    c000377c <load_xdir+0x12a>
c00036e6:	8d 47 20             	lea    eax,[edi+0x20]
c00036e9:	b9 20 00 00 00       	mov    ecx,0x20
c00036ee:	e8 f8 e3 ff ff       	call   c0001aeb <mem_cpy>
c00036f3:	31 d2                	xor    edx,edx
c00036f5:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036f9:	b9 0f 00 00 00       	mov    ecx,0xf
c00036fe:	83 c0 2c             	add    eax,0x2c
c0003701:	f7 f1                	div    ecx
c0003703:	c1 e0 05             	shl    eax,0x5
c0003706:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000370a:	77 70                	ja     c000377c <load_xdir+0x12a>
c000370c:	bd 40 00 00 00       	mov    ebp,0x40
c0003711:	31 d2                	xor    edx,edx
c0003713:	89 f0                	mov    eax,esi
c0003715:	e8 06 fe ff ff       	call   c0003520 <dir_next>
c000371a:	89 c3                	mov    ebx,eax
c000371c:	83 f8 04             	cmp    eax,0x4
c000371f:	74 5b                	je     c000377c <load_xdir+0x12a>
c0003721:	85 c0                	test   eax,eax
c0003723:	75 5c                	jne    c0003781 <load_xdir+0x12f>
c0003725:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003728:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000372b:	8b 06                	mov    eax,DWORD PTR [esi]
c000372d:	e8 18 eb ff ff       	call   c000224a <move_window>
c0003732:	89 c3                	mov    ebx,eax
c0003734:	85 c0                	test   eax,eax
c0003736:	75 49                	jne    c0003781 <load_xdir+0x12f>
c0003738:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000373b:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000373e:	75 3c                	jne    c000377c <load_xdir+0x12a>
c0003740:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003746:	77 0d                	ja     c0003755 <load_xdir+0x103>
c0003748:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000374b:	b9 20 00 00 00       	mov    ecx,0x20
c0003750:	e8 96 e3 ff ff       	call   c0001aeb <mem_cpy>
c0003755:	83 c5 20             	add    ebp,0x20
c0003758:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000375c:	77 b3                	ja     c0003711 <load_xdir+0xbf>
c000375e:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003764:	77 1b                	ja     c0003781 <load_xdir+0x12f>
c0003766:	89 f8                	mov    eax,edi
c0003768:	e8 cd e7 ff ff       	call   c0001f3a <xdir_sum>
c000376d:	89 c1                	mov    ecx,eax
c000376f:	8d 47 02             	lea    eax,[edi+0x2]
c0003772:	e8 f5 e2 ff ff       	call   c0001a6c <ld_word>
c0003777:	66 39 c1             	cmp    cx,ax
c000377a:	74 05                	je     c0003781 <load_xdir+0x12f>
c000377c:	bb 02 00 00 00       	mov    ebx,0x2
c0003781:	83 c4 1c             	add    esp,0x1c
c0003784:	89 d8                	mov    eax,ebx
c0003786:	5b                   	pop    ebx
c0003787:	5e                   	pop    esi
c0003788:	5f                   	pop    edi
c0003789:	5d                   	pop    ebp
c000378a:	c3                   	ret    

c000378b <load_obj_xdir>:
c000378b:	53                   	push   ebx
c000378c:	89 c3                	mov    ebx,eax
c000378e:	83 ec 08             	sub    esp,0x8
c0003791:	8b 02                	mov    eax,DWORD PTR [edx]
c0003793:	89 03                	mov    DWORD PTR [ebx],eax
c0003795:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003798:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000379b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000379e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00037a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00037a4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00037ab:	30 c0                	xor    al,al
c00037ad:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037b4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037b7:	89 d8                	mov    eax,ebx
c00037b9:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037bc:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037bf:	e8 04 f8 ff ff       	call   c0002fc8 <dir_sdi>
c00037c4:	85 c0                	test   eax,eax
c00037c6:	75 0b                	jne    c00037d3 <load_obj_xdir+0x48>
c00037c8:	89 d8                	mov    eax,ebx
c00037ca:	83 c4 08             	add    esp,0x8
c00037cd:	5b                   	pop    ebx
c00037ce:	e9 7f fe ff ff       	jmp    c0003652 <load_xdir>
c00037d3:	83 c4 08             	add    esp,0x8
c00037d6:	5b                   	pop    ebx
c00037d7:	c3                   	ret    

c00037d8 <dir_read>:
c00037d8:	55                   	push   ebp
c00037d9:	bd 04 00 00 00       	mov    ebp,0x4
c00037de:	57                   	push   edi
c00037df:	56                   	push   esi
c00037e0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037e5:	53                   	push   ebx
c00037e6:	89 c3                	mov    ebx,eax
c00037e8:	83 ec 1c             	sub    esp,0x1c
c00037eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037ef:	8b 38                	mov    edi,DWORD PTR [eax]
c00037f1:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037f6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037f9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037fc:	89 c8                	mov    eax,ecx
c00037fe:	09 d0                	or     eax,edx
c0003800:	0f 84 25 01 00 00    	je     c000392b <dir_read+0x153>
c0003806:	89 f8                	mov    eax,edi
c0003808:	e8 3d ea ff ff       	call   c000224a <move_window>
c000380d:	89 c5                	mov    ebp,eax
c000380f:	85 c0                	test   eax,eax
c0003811:	0f 85 23 01 00 00    	jne    c000393a <dir_read+0x162>
c0003817:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000381a:	8a 0a                	mov    cl,BYTE PTR [edx]
c000381c:	84 c9                	test   cl,cl
c000381e:	0f 84 11 01 00 00    	je     c0003935 <dir_read+0x15d>
c0003824:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003827:	75 48                	jne    c0003871 <dir_read+0x99>
c0003829:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000382e:	74 10                	je     c0003840 <dir_read+0x68>
c0003830:	80 f9 83             	cmp    cl,0x83
c0003833:	0f 85 dd 00 00 00    	jne    c0003916 <dir_read+0x13e>
c0003839:	31 ed                	xor    ebp,ebp
c000383b:	e9 08 01 00 00       	jmp    c0003948 <dir_read+0x170>
c0003840:	80 f9 85             	cmp    cl,0x85
c0003843:	0f 85 cd 00 00 00    	jne    c0003916 <dir_read+0x13e>
c0003849:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000384c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000384f:	89 d8                	mov    eax,ebx
c0003851:	e8 fc fd ff ff       	call   c0003652 <load_xdir>
c0003856:	89 c5                	mov    ebp,eax
c0003858:	85 c0                	test   eax,eax
c000385a:	0f 85 da 00 00 00    	jne    c000393a <dir_read+0x162>
c0003860:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003863:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003866:	83 e0 3f             	and    eax,0x3f
c0003869:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000386c:	e9 d7 00 00 00       	jmp    c0003948 <dir_read+0x170>
c0003871:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003874:	83 e0 3f             	and    eax,0x3f
c0003877:	80 f9 2e             	cmp    cl,0x2e
c000387a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000387e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003881:	0f 84 8a 00 00 00    	je     c0003911 <dir_read+0x139>
c0003887:	80 f9 e5             	cmp    cl,0xe5
c000388a:	0f 84 81 00 00 00    	je     c0003911 <dir_read+0x139>
c0003890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003894:	83 e0 1f             	and    eax,0x1f
c0003897:	83 f8 08             	cmp    eax,0x8
c000389a:	0f 94 c0             	sete   al
c000389d:	0f b6 c0             	movzx  eax,al
c00038a0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038a4:	75 6b                	jne    c0003911 <dir_read+0x139>
c00038a6:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00038ab:	75 44                	jne    c00038f1 <dir_read+0x119>
c00038ad:	f6 c1 40             	test   cl,0x40
c00038b0:	74 12                	je     c00038c4 <dir_read+0xec>
c00038b2:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038b5:	83 e1 bf             	and    ecx,0xffffffbf
c00038b8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038bc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038bf:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038c2:	eb 06                	jmp    c00038ca <dir_read+0xf2>
c00038c4:	89 f0                	mov    eax,esi
c00038c6:	38 c8                	cmp    al,cl
c00038c8:	75 47                	jne    c0003911 <dir_read+0x139>
c00038ca:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ce:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d3:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038d6:	75 3e                	jne    c0003916 <dir_read+0x13e>
c00038d8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038dc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038df:	e8 8a e4 ff ff       	call   c0001d6e <pick_lfn>
c00038e4:	85 c0                	test   eax,eax
c00038e6:	74 2e                	je     c0003916 <dir_read+0x13e>
c00038e8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ec:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038ef:	eb 25                	jmp    c0003916 <dir_read+0x13e>
c00038f1:	89 f0                	mov    eax,esi
c00038f3:	84 c0                	test   al,al
c00038f5:	75 11                	jne    c0003908 <dir_read+0x130>
c00038f7:	89 d0                	mov    eax,edx
c00038f9:	e8 2a e6 ff ff       	call   c0001f28 <sum_sfn>
c00038fe:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003902:	0f 84 31 ff ff ff    	je     c0003839 <dir_read+0x61>
c0003908:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000390f:	eb 37                	jmp    c0003948 <dir_read+0x170>
c0003911:	be ff ff ff ff       	mov    esi,0xffffffff
c0003916:	31 d2                	xor    edx,edx
c0003918:	89 d8                	mov    eax,ebx
c000391a:	e8 01 fc ff ff       	call   c0003520 <dir_next>
c000391f:	89 c5                	mov    ebp,eax
c0003921:	85 c0                	test   eax,eax
c0003923:	0f 84 cd fe ff ff    	je     c00037f6 <dir_read+0x1e>
c0003929:	eb 0f                	jmp    c000393a <dir_read+0x162>
c000392b:	85 ed                	test   ebp,ebp
c000392d:	0f 84 06 ff ff ff    	je     c0003839 <dir_read+0x61>
c0003933:	eb 05                	jmp    c000393a <dir_read+0x162>
c0003935:	bd 04 00 00 00       	mov    ebp,0x4
c000393a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003941:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003948:	83 c4 1c             	add    esp,0x1c
c000394b:	89 e8                	mov    eax,ebp
c000394d:	5b                   	pop    ebx
c000394e:	5e                   	pop    esi
c000394f:	5f                   	pop    edi
c0003950:	5d                   	pop    ebp
c0003951:	c3                   	ret    

c0003952 <dir_alloc>:
c0003952:	55                   	push   ebp
c0003953:	89 d5                	mov    ebp,edx
c0003955:	57                   	push   edi
c0003956:	31 d2                	xor    edx,edx
c0003958:	56                   	push   esi
c0003959:	53                   	push   ebx
c000395a:	89 c3                	mov    ebx,eax
c000395c:	83 ec 0c             	sub    esp,0xc
c000395f:	8b 38                	mov    edi,DWORD PTR [eax]
c0003961:	e8 62 f6 ff ff       	call   c0002fc8 <dir_sdi>
c0003966:	85 c0                	test   eax,eax
c0003968:	75 4e                	jne    c00039b8 <dir_alloc+0x66>
c000396a:	31 f6                	xor    esi,esi
c000396c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000396f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003972:	89 f8                	mov    eax,edi
c0003974:	e8 d1 e8 ff ff       	call   c000224a <move_window>
c0003979:	85 c0                	test   eax,eax
c000397b:	75 3b                	jne    c00039b8 <dir_alloc+0x66>
c000397d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003980:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003983:	8a 12                	mov    dl,BYTE PTR [edx]
c0003985:	75 07                	jne    c000398e <dir_alloc+0x3c>
c0003987:	f7 d2                	not    edx
c0003989:	c0 ea 07             	shr    dl,0x7
c000398c:	eb 0d                	jmp    c000399b <dir_alloc+0x49>
c000398e:	84 d2                	test   dl,dl
c0003990:	0f 94 c1             	sete   cl
c0003993:	80 fa e5             	cmp    dl,0xe5
c0003996:	0f 94 c2             	sete   dl
c0003999:	09 ca                	or     edx,ecx
c000399b:	84 d2                	test   dl,dl
c000399d:	74 07                	je     c00039a6 <dir_alloc+0x54>
c000399f:	46                   	inc    esi
c00039a0:	39 ee                	cmp    esi,ebp
c00039a2:	75 04                	jne    c00039a8 <dir_alloc+0x56>
c00039a4:	eb 1c                	jmp    c00039c2 <dir_alloc+0x70>
c00039a6:	31 f6                	xor    esi,esi
c00039a8:	ba 01 00 00 00       	mov    edx,0x1
c00039ad:	89 d8                	mov    eax,ebx
c00039af:	e8 6c fb ff ff       	call   c0003520 <dir_next>
c00039b4:	85 c0                	test   eax,eax
c00039b6:	74 b4                	je     c000396c <dir_alloc+0x1a>
c00039b8:	83 f8 04             	cmp    eax,0x4
c00039bb:	75 05                	jne    c00039c2 <dir_alloc+0x70>
c00039bd:	b8 07 00 00 00       	mov    eax,0x7
c00039c2:	83 c4 0c             	add    esp,0xc
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <store_xdir>:
c00039ca:	55                   	push   ebp
c00039cb:	57                   	push   edi
c00039cc:	89 c7                	mov    edi,eax
c00039ce:	56                   	push   esi
c00039cf:	53                   	push   ebx
c00039d0:	83 ec 0c             	sub    esp,0xc
c00039d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00039d5:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039d8:	89 e8                	mov    eax,ebp
c00039da:	e8 5b e5 ff ff       	call   c0001f3a <xdir_sum>
c00039df:	0f b7 d0             	movzx  edx,ax
c00039e2:	8d 45 02             	lea    eax,[ebp+0x2]
c00039e5:	e8 f4 e0 ff ff       	call   c0001ade <st_word>
c00039ea:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039ee:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039f1:	89 f8                	mov    eax,edi
c00039f3:	e8 d0 f5 ff ff       	call   c0002fc8 <dir_sdi>
c00039f8:	89 c6                	mov    esi,eax
c00039fa:	85 f6                	test   esi,esi
c00039fc:	75 3d                	jne    c0003a3b <store_xdir+0x71>
c00039fe:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003a01:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003a04:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a06:	e8 3f e8 ff ff       	call   c000224a <move_window>
c0003a0b:	89 c6                	mov    esi,eax
c0003a0d:	85 c0                	test   eax,eax
c0003a0f:	75 2a                	jne    c0003a3b <store_xdir+0x71>
c0003a11:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a14:	b9 20 00 00 00       	mov    ecx,0x20
c0003a19:	89 ea                	mov    edx,ebp
c0003a1b:	e8 cb e0 ff ff       	call   c0001aeb <mem_cpy>
c0003a20:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a22:	85 db                	test   ebx,ebx
c0003a24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a28:	74 11                	je     c0003a3b <store_xdir+0x71>
c0003a2a:	31 d2                	xor    edx,edx
c0003a2c:	89 f8                	mov    eax,edi
c0003a2e:	83 c5 20             	add    ebp,0x20
c0003a31:	e8 ea fa ff ff       	call   c0003520 <dir_next>
c0003a36:	4b                   	dec    ebx
c0003a37:	89 c6                	mov    esi,eax
c0003a39:	eb bf                	jmp    c00039fa <store_xdir+0x30>
c0003a3b:	89 f0                	mov    eax,esi
c0003a3d:	83 fe 02             	cmp    esi,0x2
c0003a40:	76 05                	jbe    c0003a47 <store_xdir+0x7d>
c0003a42:	b8 02 00 00 00       	mov    eax,0x2
c0003a47:	83 c4 0c             	add    esp,0xc
c0003a4a:	5b                   	pop    ebx
c0003a4b:	5e                   	pop    esi
c0003a4c:	5f                   	pop    edi
c0003a4d:	5d                   	pop    ebp
c0003a4e:	c3                   	ret    

c0003a4f <dir_remove>:
c0003a4f:	57                   	push   edi
c0003a50:	56                   	push   esi
c0003a51:	53                   	push   ebx
c0003a52:	89 c3                	mov    ebx,eax
c0003a54:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a57:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a59:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a5c:	83 fa ff             	cmp    edx,0xffffffff
c0003a5f:	74 09                	je     c0003a6a <dir_remove+0x1b>
c0003a61:	e8 62 f5 ff ff       	call   c0002fc8 <dir_sdi>
c0003a66:	85 c0                	test   eax,eax
c0003a68:	75 41                	jne    c0003aab <dir_remove+0x5c>
c0003a6a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a70:	89 f0                	mov    eax,esi
c0003a72:	e8 d3 e7 ff ff       	call   c000224a <move_window>
c0003a77:	85 c0                	test   eax,eax
c0003a79:	75 26                	jne    c0003aa1 <dir_remove+0x52>
c0003a7b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a81:	75 05                	jne    c0003a88 <dir_remove+0x39>
c0003a83:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a86:	eb 03                	jmp    c0003a8b <dir_remove+0x3c>
c0003a88:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a8b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8f:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a92:	73 17                	jae    c0003aab <dir_remove+0x5c>
c0003a94:	31 d2                	xor    edx,edx
c0003a96:	89 d8                	mov    eax,ebx
c0003a98:	e8 83 fa ff ff       	call   c0003520 <dir_next>
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	74 c9                	je     c0003a6a <dir_remove+0x1b>
c0003aa1:	83 f8 04             	cmp    eax,0x4
c0003aa4:	75 05                	jne    c0003aab <dir_remove+0x5c>
c0003aa6:	b8 02 00 00 00       	mov    eax,0x2
c0003aab:	5b                   	pop    ebx
c0003aac:	5e                   	pop    esi
c0003aad:	5f                   	pop    edi
c0003aae:	c3                   	ret    

c0003aaf <create_name>:
c0003aaf:	55                   	push   ebp
c0003ab0:	89 d5                	mov    ebp,edx
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	31 f6                	xor    esi,esi
c0003ab8:	53                   	push   ebx
c0003ab9:	83 ec 3c             	sub    esp,0x3c
c0003abc:	8b 02                	mov    eax,DWORD PTR [edx]
c0003abe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ac2:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ac4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ac7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003acb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003acf:	e8 72 e0 ff ff       	call   c0001b46 <tchar2uni>
c0003ad4:	89 c3                	mov    ebx,eax
c0003ad6:	83 f8 ff             	cmp    eax,0xffffffff
c0003ad9:	75 0a                	jne    c0003ae5 <create_name+0x36>
c0003adb:	b8 06 00 00 00       	mov    eax,0x6
c0003ae0:	e9 9e 02 00 00       	jmp    c0003d83 <create_name+0x2d4>
c0003ae5:	3d ff ff 00 00       	cmp    eax,0xffff
c0003aea:	76 0c                	jbe    c0003af8 <create_name+0x49>
c0003aec:	c1 e8 10             	shr    eax,0x10
c0003aef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003af3:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003af7:	46                   	inc    esi
c0003af8:	66 83 fb 1f          	cmp    bx,0x1f
c0003afc:	76 4f                	jbe    c0003b4d <create_name+0x9e>
c0003afe:	66 83 fb 5c          	cmp    bx,0x5c
c0003b02:	74 35                	je     c0003b39 <create_name+0x8a>
c0003b04:	66 83 fb 2f          	cmp    bx,0x2f
c0003b08:	74 2f                	je     c0003b39 <create_name+0x8a>
c0003b0a:	66 83 fb 7f          	cmp    bx,0x7f
c0003b0e:	77 11                	ja     c0003b21 <create_name+0x72>
c0003b10:	0f b7 d3             	movzx  edx,bx
c0003b13:	b8 12 4f 02 c0       	mov    eax,0xc0024f12
c0003b18:	e8 11 e0 ff ff       	call   c0001b2e <chk_chr>
c0003b1d:	85 c0                	test   eax,eax
c0003b1f:	75 ba                	jne    c0003adb <create_name+0x2c>
c0003b21:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b27:	77 b2                	ja     c0003adb <create_name+0x2c>
c0003b29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b31:	46                   	inc    esi
c0003b32:	eb 97                	jmp    c0003acb <create_name+0x1c>
c0003b34:	40                   	inc    eax
c0003b35:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b3d:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b3f:	80 fa 2f             	cmp    dl,0x2f
c0003b42:	74 f0                	je     c0003b34 <create_name+0x85>
c0003b44:	80 fa 5c             	cmp    dl,0x5c
c0003b47:	74 eb                	je     c0003b34 <create_name+0x85>
c0003b49:	31 db                	xor    ebx,ebx
c0003b4b:	eb 02                	jmp    c0003b4f <create_name+0xa0>
c0003b4d:	b3 04                	mov    bl,0x4
c0003b4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b53:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b56:	85 f6                	test   esi,esi
c0003b58:	74 18                	je     c0003b72 <create_name+0xc3>
c0003b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5e:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b63:	66 83 f8 20          	cmp    ax,0x20
c0003b67:	74 06                	je     c0003b6f <create_name+0xc0>
c0003b69:	66 83 f8 2e          	cmp    ax,0x2e
c0003b6d:	75 03                	jne    c0003b72 <create_name+0xc3>
c0003b6f:	4e                   	dec    esi
c0003b70:	eb e4                	jmp    c0003b56 <create_name+0xa7>
c0003b72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b76:	31 ed                	xor    ebp,ebp
c0003b78:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b7e:	85 f6                	test   esi,esi
c0003b80:	0f 84 55 ff ff ff    	je     c0003adb <create_name+0x2c>
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b8d:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b91:	66 83 f8 20          	cmp    ax,0x20
c0003b95:	75 04                	jne    c0003b9b <create_name+0xec>
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	eb eb                	jmp    c0003b86 <create_name+0xd7>
c0003b9b:	85 ed                	test   ebp,ebp
c0003b9d:	75 06                	jne    c0003ba5 <create_name+0xf6>
c0003b9f:	66 83 f8 2e          	cmp    ax,0x2e
c0003ba3:	75 08                	jne    c0003bad <create_name+0xfe>
c0003ba5:	83 cb 03             	or     ebx,0x3
c0003ba8:	eb 03                	jmp    c0003bad <create_name+0xfe>
c0003baa:	4e                   	dec    esi
c0003bab:	74 0c                	je     c0003bb9 <create_name+0x10a>
c0003bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb1:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003bb7:	75 f1                	jne    c0003baa <create_name+0xfb>
c0003bb9:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbe:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bc1:	ba 20 00 00 00       	mov    edx,0x20
c0003bc6:	e8 35 df ff ff       	call   c0001b00 <mem_set>
c0003bcb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bd3:	31 c9                	xor    ecx,ecx
c0003bd5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bdd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003be5:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003be9:	66 85 ed             	test   bp,bp
c0003bec:	0f 84 30 01 00 00    	je     c0003d22 <create_name+0x273>
c0003bf2:	66 83 fd 20          	cmp    bp,0x20
c0003bf6:	74 10                	je     c0003c08 <create_name+0x159>
c0003bf8:	66 83 fd 2e          	cmp    bp,0x2e
c0003bfc:	75 13                	jne    c0003c11 <create_name+0x162>
c0003bfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c02:	0f 84 6b 01 00 00    	je     c0003d73 <create_name+0x2c4>
c0003c08:	83 cb 03             	or     ebx,0x3
c0003c0b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003c0f:	eb c9                	jmp    c0003bda <create_name+0x12b>
c0003c11:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003c15:	73 0b                	jae    c0003c22 <create_name+0x173>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	75 47                	jne    c0003c64 <create_name+0x1b5>
c0003c1d:	e9 51 01 00 00       	jmp    c0003d73 <create_name+0x2c4>
c0003c22:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c27:	75 10                	jne    c0003c39 <create_name+0x18a>
c0003c29:	83 cb 03             	or     ebx,0x3
c0003c2c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c34:	e9 e9 00 00 00       	jmp    c0003d22 <create_name+0x273>
c0003c39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c3d:	74 0d                	je     c0003c4c <create_name+0x19d>
c0003c3f:	83 cb 03             	or     ebx,0x3
c0003c42:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c46:	0f 87 d6 00 00 00    	ja     c0003d22 <create_name+0x273>
c0003c4c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c55:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c5d:	b9 08 00 00 00       	mov    ecx,0x8
c0003c62:	eb a7                	jmp    c0003c0b <create_name+0x15c>
c0003c64:	66 83 fd 7f          	cmp    bp,0x7f
c0003c68:	76 68                	jbe    c0003cd2 <create_name+0x223>
c0003c6a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c6e:	88 da                	mov    dl,bl
c0003c70:	83 ca 02             	or     edx,0x2
c0003c73:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c77:	50                   	push   eax
c0003c78:	50                   	push   eax
c0003c79:	68 b5 01 00 00       	push   0x1b5
c0003c7e:	55                   	push   ebp
c0003c7f:	e8 48 46 00 00       	call   c00082cc <ff_uni2oem>
c0003c84:	83 c4 10             	add    esp,0x10
c0003c87:	89 c5                	mov    ebp,eax
c0003c89:	a8 80                	test   al,0x80
c0003c8b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c93:	74 0c                	je     c0003ca1 <create_name+0x1f2>
c0003c95:	83 e5 7f             	and    ebp,0x7f
c0003c98:	0f b6 ad 60 4e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdb1a0]
c0003c9f:	eb 2a                	jmp    c0003ccb <create_name+0x21c>
c0003ca1:	66 3d ff 00          	cmp    ax,0xff
c0003ca5:	76 24                	jbe    c0003ccb <create_name+0x21c>
c0003ca7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003cab:	48                   	dec    eax
c0003cac:	39 c8                	cmp    eax,ecx
c0003cae:	77 0c                	ja     c0003cbc <create_name+0x20d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003cb7:	e9 4f ff ff ff       	jmp    c0003c0b <create_name+0x15c>
c0003cbc:	89 e8                	mov    eax,ebp
c0003cbe:	88 d3                	mov    bl,dl
c0003cc0:	66 c1 e8 08          	shr    ax,0x8
c0003cc4:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc8:	41                   	inc    ecx
c0003cc9:	eb 4b                	jmp    c0003d16 <create_name+0x267>
c0003ccb:	88 d3                	mov    bl,dl
c0003ccd:	66 85 ed             	test   bp,bp
c0003cd0:	74 19                	je     c0003ceb <create_name+0x23c>
c0003cd2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cd6:	0f b7 d5             	movzx  edx,bp
c0003cd9:	b8 1b 4f 02 c0       	mov    eax,0xc0024f1b
c0003cde:	e8 4b de ff ff       	call   c0001b2e <chk_chr>
c0003ce3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ce7:	85 c0                	test   eax,eax
c0003ce9:	74 0a                	je     c0003cf5 <create_name+0x246>
c0003ceb:	83 cb 03             	or     ebx,0x3
c0003cee:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cf3:	eb 21                	jmp    c0003d16 <create_name+0x267>
c0003cf5:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cf8:	66 83 f8 19          	cmp    ax,0x19
c0003cfc:	77 07                	ja     c0003d05 <create_name+0x256>
c0003cfe:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003d03:	eb 11                	jmp    c0003d16 <create_name+0x267>
c0003d05:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003d08:	66 83 f8 19          	cmp    ax,0x19
c0003d0c:	77 08                	ja     c0003d16 <create_name+0x267>
c0003d0e:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003d13:	83 ed 20             	sub    ebp,0x20
c0003d16:	89 e8                	mov    eax,ebp
c0003d18:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d1c:	41                   	inc    ecx
c0003d1d:	e9 e9 fe ff ff       	jmp    c0003c0b <create_name+0x15c>
c0003d22:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d26:	75 04                	jne    c0003d2c <create_name+0x27d>
c0003d28:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d2c:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d31:	75 05                	jne    c0003d38 <create_name+0x289>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d3c:	83 e0 0c             	and    eax,0xc
c0003d3f:	3c 0c                	cmp    al,0xc
c0003d41:	74 0b                	je     c0003d4e <create_name+0x29f>
c0003d43:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d47:	83 e0 03             	and    eax,0x3
c0003d4a:	3c 03                	cmp    al,0x3
c0003d4c:	75 05                	jne    c0003d53 <create_name+0x2a4>
c0003d4e:	83 cb 02             	or     ebx,0x2
c0003d51:	eb 19                	jmp    c0003d6c <create_name+0x2bd>
c0003d53:	f6 c3 02             	test   bl,0x2
c0003d56:	75 14                	jne    c0003d6c <create_name+0x2bd>
c0003d58:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d5d:	74 03                	je     c0003d62 <create_name+0x2b3>
c0003d5f:	83 cb 10             	or     ebx,0x10
c0003d62:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d67:	74 03                	je     c0003d6c <create_name+0x2bd>
c0003d69:	83 cb 08             	or     ebx,0x8
c0003d6c:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d6f:	31 c0                	xor    eax,eax
c0003d71:	eb 10                	jmp    c0003d83 <create_name+0x2d4>
c0003d73:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d78:	0f 85 ce fe ff ff    	jne    c0003c4c <create_name+0x19d>
c0003d7e:	e9 a6 fe ff ff       	jmp    c0003c29 <create_name+0x17a>
c0003d83:	83 c4 3c             	add    esp,0x3c
c0003d86:	5b                   	pop    ebx
c0003d87:	5e                   	pop    esi
c0003d88:	5f                   	pop    edi
c0003d89:	5d                   	pop    ebp
c0003d8a:	c3                   	ret    

c0003d8b <xname_sum>:
c0003d8b:	56                   	push   esi
c0003d8c:	53                   	push   ebx
c0003d8d:	89 c6                	mov    esi,eax
c0003d8f:	51                   	push   ecx
c0003d90:	31 db                	xor    ebx,ebx
c0003d92:	83 c6 02             	add    esi,0x2
c0003d95:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d99:	66 85 c0             	test   ax,ax
c0003d9c:	74 1f                	je     c0003dbd <xname_sum+0x32>
c0003d9e:	83 ec 0c             	sub    esp,0xc
c0003da1:	66 d1 cb             	ror    bx,1
c0003da4:	50                   	push   eax
c0003da5:	e8 1e 46 00 00       	call   c00083c8 <ff_wtoupper>
c0003daa:	83 c4 10             	add    esp,0x10
c0003dad:	0f b6 d0             	movzx  edx,al
c0003db0:	66 c1 e8 08          	shr    ax,0x8
c0003db4:	01 d3                	add    ebx,edx
c0003db6:	66 d1 cb             	ror    bx,1
c0003db9:	01 c3                	add    ebx,eax
c0003dbb:	eb d5                	jmp    c0003d92 <xname_sum+0x7>
c0003dbd:	89 d8                	mov    eax,ebx
c0003dbf:	5a                   	pop    edx
c0003dc0:	5b                   	pop    ebx
c0003dc1:	5e                   	pop    esi
c0003dc2:	c3                   	ret    

c0003dc3 <create_xdir>:
c0003dc3:	55                   	push   ebp
c0003dc4:	b9 40 00 00 00       	mov    ecx,0x40
c0003dc9:	57                   	push   edi
c0003dca:	bd 01 00 00 00       	mov    ebp,0x1
c0003dcf:	56                   	push   esi
c0003dd0:	31 ff                	xor    edi,edi
c0003dd2:	53                   	push   ebx
c0003dd3:	be 40 00 00 00       	mov    esi,0x40
c0003dd8:	89 c3                	mov    ebx,eax
c0003dda:	83 ec 1c             	sub    esp,0x1c
c0003ddd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003de1:	31 d2                	xor    edx,edx
c0003de3:	e8 18 dd ff ff       	call   c0001b00 <mem_set>
c0003de8:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003deb:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003def:	31 c9                	xor    ecx,ecx
c0003df1:	8d 46 01             	lea    eax,[esi+0x1]
c0003df4:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003df8:	83 c6 02             	add    esi,0x2
c0003dfb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003dff:	66 85 ed             	test   bp,bp
c0003e02:	74 12                	je     c0003e16 <create_xdir+0x53>
c0003e04:	0f b6 c1             	movzx  eax,cl
c0003e07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e0b:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003e0f:	66 83 fd 01          	cmp    bp,0x1
c0003e13:	80 d9 ff             	sbb    cl,0xff
c0003e16:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e19:	0f b7 d5             	movzx  edx,bp
c0003e1c:	83 c6 02             	add    esi,0x2
c0003e1f:	e8 ba dc ff ff       	call   c0001ade <st_word>
c0003e24:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e2a:	75 d3                	jne    c0003dff <create_xdir+0x3c>
c0003e2c:	8d 47 01             	lea    eax,[edi+0x1]
c0003e2f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e33:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e37:	0f b6 c1             	movzx  eax,cl
c0003e3a:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e3f:	74 07                	je     c0003e48 <create_xdir+0x85>
c0003e41:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e46:	eb a9                	jmp    c0003df1 <create_xdir+0x2e>
c0003e48:	8d 47 02             	lea    eax,[edi+0x2]
c0003e4b:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e4e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e51:	89 d0                	mov    eax,edx
c0003e53:	e8 33 ff ff ff       	call   c0003d8b <xname_sum>
c0003e58:	83 c4 1c             	add    esp,0x1c
c0003e5b:	0f b7 d0             	movzx  edx,ax
c0003e5e:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e61:	5b                   	pop    ebx
c0003e62:	5e                   	pop    esi
c0003e63:	5f                   	pop    edi
c0003e64:	5d                   	pop    ebp
c0003e65:	e9 74 dc ff ff       	jmp    c0001ade <st_word>

c0003e6a <cmp_lfn>:
c0003e6a:	55                   	push   ebp
c0003e6b:	57                   	push   edi
c0003e6c:	89 d7                	mov    edi,edx
c0003e6e:	56                   	push   esi
c0003e6f:	53                   	push   ebx
c0003e70:	83 ec 1c             	sub    esp,0x1c
c0003e73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e77:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e7a:	e8 ed db ff ff       	call   c0001a6c <ld_word>
c0003e7f:	66 85 c0             	test   ax,ax
c0003e82:	74 07                	je     c0003e8b <cmp_lfn+0x21>
c0003e84:	31 c0                	xor    eax,eax
c0003e86:	e9 9a 00 00 00       	jmp    c0003f25 <cmp_lfn+0xbb>
c0003e8b:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e8d:	bd 01 00 00 00       	mov    ebp,0x1
c0003e92:	83 e3 3f             	and    ebx,0x3f
c0003e95:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e9d:	4b                   	dec    ebx
c0003e9e:	6b db 0d             	imul   ebx,ebx,0xd
c0003ea1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003ea5:	0f b6 80 e0 4e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb120]
c0003eac:	01 f8                	add    eax,edi
c0003eae:	e8 b9 db ff ff       	call   c0001a6c <ld_word>
c0003eb3:	66 85 ed             	test   bp,bp
c0003eb6:	89 c6                	mov    esi,eax
c0003eb8:	74 3c                	je     c0003ef6 <cmp_lfn+0x8c>
c0003eba:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ec0:	77 c2                	ja     c0003e84 <cmp_lfn+0x1a>
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	0f b7 c0             	movzx  eax,ax
c0003ec8:	50                   	push   eax
c0003ec9:	e8 fa 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003ece:	89 c5                	mov    ebp,eax
c0003ed0:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ed3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003edb:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003edf:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee2:	e8 e1 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003ee7:	83 c4 10             	add    esp,0x10
c0003eea:	39 c5                	cmp    ebp,eax
c0003eec:	75 96                	jne    c0003e84 <cmp_lfn+0x1a>
c0003eee:	89 f5                	mov    ebp,esi
c0003ef0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ef4:	eb 04                	jmp    c0003efa <cmp_lfn+0x90>
c0003ef6:	66 46                	inc    si
c0003ef8:	75 8a                	jne    c0003e84 <cmp_lfn+0x1a>
c0003efa:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003efe:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003f03:	75 9c                	jne    c0003ea1 <cmp_lfn+0x37>
c0003f05:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003f08:	74 16                	je     c0003f20 <cmp_lfn+0xb6>
c0003f0a:	66 85 ed             	test   bp,bp
c0003f0d:	74 11                	je     c0003f20 <cmp_lfn+0xb6>
c0003f0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003f13:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f18:	0f 94 c0             	sete   al
c0003f1b:	0f b6 c0             	movzx  eax,al
c0003f1e:	eb 05                	jmp    c0003f25 <cmp_lfn+0xbb>
c0003f20:	b8 01 00 00 00       	mov    eax,0x1
c0003f25:	83 c4 1c             	add    esp,0x1c
c0003f28:	5b                   	pop    ebx
c0003f29:	5e                   	pop    esi
c0003f2a:	5f                   	pop    edi
c0003f2b:	5d                   	pop    ebp
c0003f2c:	c3                   	ret    

c0003f2d <dir_find>:
c0003f2d:	55                   	push   ebp
c0003f2e:	31 d2                	xor    edx,edx
c0003f30:	57                   	push   edi
c0003f31:	56                   	push   esi
c0003f32:	53                   	push   ebx
c0003f33:	89 c3                	mov    ebx,eax
c0003f35:	83 ec 1c             	sub    esp,0x1c
c0003f38:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f3a:	e8 89 f0 ff ff       	call   c0002fc8 <dir_sdi>
c0003f3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f42:	85 c0                	test   eax,eax
c0003f44:	0f 85 9e 01 00 00    	jne    c00040e8 <dir_find+0x1bb>
c0003f4a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f4d:	0f 85 8d 00 00 00    	jne    c0003fe0 <dir_find+0xb3>
c0003f53:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f56:	e8 30 fe ff ff       	call   c0003d8b <xname_sum>
c0003f5b:	89 c7                	mov    edi,eax
c0003f5d:	31 d2                	xor    edx,edx
c0003f5f:	89 d8                	mov    eax,ebx
c0003f61:	e8 72 f8 ff ff       	call   c00037d8 <dir_read>
c0003f66:	85 c0                	test   eax,eax
c0003f68:	0f 85 5e 01 00 00    	jne    c00040cc <dir_find+0x19f>
c0003f6e:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f71:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f74:	e8 f3 da ff ff       	call   c0001a6c <ld_word>
c0003f79:	66 39 f8             	cmp    ax,di
c0003f7c:	75 df                	jne    c0003f5d <dir_find+0x30>
c0003f7e:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f81:	31 ed                	xor    ebp,ebp
c0003f83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f87:	ba 40 00 00 00       	mov    edx,0x40
c0003f8c:	89 e9                	mov    ecx,ebp
c0003f8e:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f92:	0f 84 42 01 00 00    	je     c00040da <dir_find+0x1ad>
c0003f98:	f6 c2 1f             	test   dl,0x1f
c0003f9b:	75 03                	jne    c0003fa0 <dir_find+0x73>
c0003f9d:	83 c2 02             	add    edx,0x2
c0003fa0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003fa4:	89 d0                	mov    eax,edx
c0003fa6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003fa9:	e8 be da ff ff       	call   c0001a6c <ld_word>
c0003fae:	83 ec 0c             	sub    esp,0xc
c0003fb1:	0f b7 c0             	movzx  eax,ax
c0003fb4:	50                   	push   eax
c0003fb5:	e8 0e 44 00 00       	call   c00083c8 <ff_wtoupper>
c0003fba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fbe:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fc1:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc8:	e8 fb 43 00 00       	call   c00083c8 <ff_wtoupper>
c0003fcd:	83 c4 10             	add    esp,0x10
c0003fd0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fd4:	75 87                	jne    c0003f5d <dir_find+0x30>
c0003fd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fda:	45                   	inc    ebp
c0003fdb:	83 c2 02             	add    edx,0x2
c0003fde:	eb ac                	jmp    c0003f8c <dir_find+0x5f>
c0003fe0:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fe7:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fec:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ff4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ff7:	89 f0                	mov    eax,esi
c0003ff9:	e8 4c e2 ff ff       	call   c000224a <move_window>
c0003ffe:	85 c0                	test   eax,eax
c0004000:	0f 85 c6 00 00 00    	jne    c00040cc <dir_find+0x19f>
c0004006:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004009:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000400c:	84 c9                	test   cl,cl
c000400e:	0f 84 bd 00 00 00    	je     c00040d1 <dir_find+0x1a4>
c0004014:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004017:	88 d0                	mov    al,dl
c0004019:	83 e0 3f             	and    eax,0x3f
c000401c:	80 f9 e5             	cmp    cl,0xe5
c000401f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004022:	0f 84 87 00 00 00    	je     c00040af <dir_find+0x182>
c0004028:	80 e2 08             	and    dl,0x8
c000402b:	74 06                	je     c0004033 <dir_find+0x106>
c000402d:	3c 0f                	cmp    al,0xf
c000402f:	75 7e                	jne    c00040af <dir_find+0x182>
c0004031:	eb 04                	jmp    c0004037 <dir_find+0x10a>
c0004033:	3c 0f                	cmp    al,0xf
c0004035:	75 4c                	jne    c0004083 <dir_find+0x156>
c0004037:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000403b:	75 7e                	jne    c00040bb <dir_find+0x18e>
c000403d:	f6 c1 40             	test   cl,0x40
c0004040:	74 12                	je     c0004054 <dir_find+0x127>
c0004042:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004045:	83 e1 bf             	and    ecx,0xffffffbf
c0004048:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000404c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000404f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004052:	eb 06                	jmp    c000405a <dir_find+0x12d>
c0004054:	89 f8                	mov    eax,edi
c0004056:	38 c8                	cmp    al,cl
c0004058:	75 5c                	jne    c00040b6 <dir_find+0x189>
c000405a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000405e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004063:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004066:	75 53                	jne    c00040bb <dir_find+0x18e>
c0004068:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000406c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000406f:	89 ea                	mov    edx,ebp
c0004071:	e8 f4 fd ff ff       	call   c0003e6a <cmp_lfn>
c0004076:	85 c0                	test   eax,eax
c0004078:	74 41                	je     c00040bb <dir_find+0x18e>
c000407a:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000407e:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004081:	eb 38                	jmp    c00040bb <dir_find+0x18e>
c0004083:	89 f8                	mov    eax,edi
c0004085:	84 c0                	test   al,al
c0004087:	75 0d                	jne    c0004096 <dir_find+0x169>
c0004089:	89 e8                	mov    eax,ebp
c000408b:	e8 98 de ff ff       	call   c0001f28 <sum_sfn>
c0004090:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004094:	74 52                	je     c00040e8 <dir_find+0x1bb>
c0004096:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000409a:	75 13                	jne    c00040af <dir_find+0x182>
c000409c:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000409f:	b9 0b 00 00 00       	mov    ecx,0xb
c00040a4:	89 e8                	mov    eax,ebp
c00040a6:	e8 60 da ff ff       	call   c0001b0b <mem_cmp>
c00040ab:	85 c0                	test   eax,eax
c00040ad:	74 39                	je     c00040e8 <dir_find+0x1bb>
c00040af:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040bb:	31 d2                	xor    edx,edx
c00040bd:	89 d8                	mov    eax,ebx
c00040bf:	e8 5c f4 ff ff       	call   c0003520 <dir_next>
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 84 25 ff ff ff    	je     c0003ff1 <dir_find+0xc4>
c00040cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00040cf:	eb 17                	jmp    c00040e8 <dir_find+0x1bb>
c00040d1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040d8:	eb 0e                	jmp    c00040e8 <dir_find+0x1bb>
c00040da:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040dd:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040e2:	0f 85 75 fe ff ff    	jne    c0003f5d <dir_find+0x30>
c00040e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040eb:	83 c4 1c             	add    esp,0x1c
c00040ee:	5b                   	pop    ebx
c00040ef:	5e                   	pop    esi
c00040f0:	5f                   	pop    edi
c00040f1:	5d                   	pop    ebp
c00040f2:	c3                   	ret    

c00040f3 <dir_register>:
c00040f3:	55                   	push   ebp
c00040f4:	57                   	push   edi
c00040f5:	56                   	push   esi
c00040f6:	be 06 00 00 00       	mov    esi,0x6
c00040fb:	53                   	push   ebx
c00040fc:	83 ec 6c             	sub    esp,0x6c
c00040ff:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004103:	0f 85 62 02 00 00    	jne    c000436b <dir_register+0x278>
c0004109:	8b 28                	mov    ebp,DWORD PTR [eax]
c000410b:	31 ff                	xor    edi,edi
c000410d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004110:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004115:	74 03                	je     c000411a <dir_register+0x27>
c0004117:	47                   	inc    edi
c0004118:	eb f6                	jmp    c0004110 <dir_register+0x1d>
c000411a:	89 c3                	mov    ebx,eax
c000411c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004120:	0f 85 e1 00 00 00    	jne    c0004207 <dir_register+0x114>
c0004126:	83 c7 0e             	add    edi,0xe
c0004129:	b9 0f 00 00 00       	mov    ecx,0xf
c000412e:	89 f8                	mov    eax,edi
c0004130:	31 d2                	xor    edx,edx
c0004132:	f7 f1                	div    ecx
c0004134:	8d 50 02             	lea    edx,[eax+0x2]
c0004137:	89 c7                	mov    edi,eax
c0004139:	89 d8                	mov    eax,ebx
c000413b:	e8 12 f8 ff ff       	call   c0003952 <dir_alloc>
c0004140:	89 c6                	mov    esi,eax
c0004142:	85 c0                	test   eax,eax
c0004144:	0f 85 21 02 00 00    	jne    c000436b <dir_register+0x278>
c000414a:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004150:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004153:	c1 e7 05             	shl    edi,0x5
c0004156:	29 f8                	sub    eax,edi
c0004158:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000415b:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000415e:	a8 04                	test   al,0x4
c0004160:	0f 84 91 00 00 00    	je     c00041f7 <dir_register+0x104>
c0004166:	83 e0 fb             	and    eax,0xfffffffb
c0004169:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 25 ec ff ff       	call   c0002d98 <fill_first_frag>
c0004173:	85 c0                	test   eax,eax
c0004175:	0f 85 ee 01 00 00    	jne    c0004369 <dir_register+0x276>
c000417b:	83 c9 ff             	or     ecx,0xffffffff
c000417e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004181:	89 d8                	mov    eax,ebx
c0004183:	e8 db eb ff ff       	call   c0002d63 <fill_last_frag>
c0004188:	85 c0                	test   eax,eax
c000418a:	0f 85 d9 01 00 00    	jne    c0004369 <dir_register+0x276>
c0004190:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004194:	74 61                	je     c00041f7 <dir_register+0x104>
c0004196:	89 da                	mov    edx,ebx
c0004198:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419c:	e8 ea f5 ff ff       	call   c000378b <load_obj_xdir>
c00041a1:	85 c0                	test   eax,eax
c00041a3:	0f 85 c0 01 00 00    	jne    c0004369 <dir_register+0x276>
c00041a9:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00041ad:	31 c9                	xor    ecx,ecx
c00041af:	c1 e2 09             	shl    edx,0x9
c00041b2:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00041b5:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041bb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041c1:	83 c0 38             	add    eax,0x38
c00041c4:	e8 1c d9 ff ff       	call   c0001ae5 <st_qword>
c00041c9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041cc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041cf:	83 c0 28             	add    eax,0x28
c00041d2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041d5:	e8 0b d9 ff ff       	call   c0001ae5 <st_qword>
c00041da:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041dd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041e0:	83 c8 01             	or     eax,0x1
c00041e3:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ea:	e8 db f7 ff ff       	call   c00039ca <store_xdir>
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 72 01 00 00    	jne    c0004369 <dir_register+0x276>
c00041f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041fd:	e8 c1 fb ff ff       	call   c0003dc3 <create_xdir>
c0004202:	e9 64 01 00 00       	jmp    c000436b <dir_register+0x278>
c0004207:	8d 40 3c             	lea    eax,[eax+0x3c]
c000420a:	b9 0c 00 00 00       	mov    ecx,0xc
c000420f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004213:	89 c2                	mov    edx,eax
c0004215:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004219:	e8 cd d8 ff ff       	call   c0001aeb <mem_cpy>
c000421e:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004223:	74 58                	je     c000427d <dir_register+0x18a>
c0004225:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004229:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004231:	83 ec 0c             	sub    esp,0xc
c0004234:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000423b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000423f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004243:	e8 24 dc ff ff       	call   c0001e6c <gen_numname>
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 de fc ff ff       	call   c0003f2d <dir_find>
c000424f:	83 c4 10             	add    esp,0x10
c0004252:	89 c6                	mov    esi,eax
c0004254:	85 c0                	test   eax,eax
c0004256:	75 15                	jne    c000426d <dir_register+0x17a>
c0004258:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000425c:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004261:	75 ce                	jne    c0004231 <dir_register+0x13e>
c0004263:	be 07 00 00 00       	mov    esi,0x7
c0004268:	e9 fe 00 00 00       	jmp    c000436b <dir_register+0x278>
c000426d:	83 f8 04             	cmp    eax,0x4
c0004270:	0f 85 f5 00 00 00    	jne    c000436b <dir_register+0x278>
c0004276:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000427a:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000427d:	b9 01 00 00 00       	mov    ecx,0x1
c0004282:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004287:	74 0f                	je     c0004298 <dir_register+0x1a5>
c0004289:	b9 0d 00 00 00       	mov    ecx,0xd
c000428e:	8d 47 0c             	lea    eax,[edi+0xc]
c0004291:	31 d2                	xor    edx,edx
c0004293:	f7 f1                	div    ecx
c0004295:	8d 48 01             	lea    ecx,[eax+0x1]
c0004298:	89 ca                	mov    edx,ecx
c000429a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000429e:	89 d8                	mov    eax,ebx
c00042a0:	e8 ad f6 ff ff       	call   c0003952 <dir_alloc>
c00042a5:	89 c6                	mov    esi,eax
c00042a7:	85 c0                	test   eax,eax
c00042a9:	0f 85 bc 00 00 00    	jne    c000436b <dir_register+0x278>
c00042af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042b3:	49                   	dec    ecx
c00042b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042b8:	74 6a                	je     c0004324 <dir_register+0x231>
c00042ba:	89 c8                	mov    eax,ecx
c00042bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042bf:	c1 e0 05             	shl    eax,0x5
c00042c2:	29 c2                	sub    edx,eax
c00042c4:	89 d8                	mov    eax,ebx
c00042c6:	e8 fd ec ff ff       	call   c0002fc8 <dir_sdi>
c00042cb:	89 c6                	mov    esi,eax
c00042cd:	85 c0                	test   eax,eax
c00042cf:	0f 85 96 00 00 00    	jne    c000436b <dir_register+0x278>
c00042d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042d9:	e8 4a dc ff ff       	call   c0001f28 <sum_sfn>
c00042de:	0f b6 f8             	movzx  edi,al
c00042e1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042e4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042e7:	89 e8                	mov    eax,ebp
c00042e9:	e8 5c df ff ff       	call   c000224a <move_window>
c00042ee:	89 c6                	mov    esi,eax
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 77                	jne    c000436b <dir_register+0x278>
c00042f4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042f9:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042fc:	83 ec 0c             	sub    esp,0xc
c00042ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004302:	57                   	push   edi
c0004303:	e8 e0 da ff ff       	call   c0001de8 <put_lfn>
c0004308:	31 d2                	xor    edx,edx
c000430a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430e:	89 d8                	mov    eax,ebx
c0004310:	e8 0b f2 ff ff       	call   c0003520 <dir_next>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	89 c6                	mov    esi,eax
c000431a:	85 c0                	test   eax,eax
c000431c:	75 4d                	jne    c000436b <dir_register+0x278>
c000431e:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004322:	75 bd                	jne    c00042e1 <dir_register+0x1ee>
c0004324:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004327:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000432a:	89 e8                	mov    eax,ebp
c000432c:	e8 19 df ff ff       	call   c000224a <move_window>
c0004331:	89 c6                	mov    esi,eax
c0004333:	85 c0                	test   eax,eax
c0004335:	75 34                	jne    c000436b <dir_register+0x278>
c0004337:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000433a:	b9 20 00 00 00       	mov    ecx,0x20
c000433f:	31 d2                	xor    edx,edx
c0004341:	e8 ba d7 ff ff       	call   c0001b00 <mem_set>
c0004346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004349:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000434d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004352:	e8 94 d7 ff ff       	call   c0001aeb <mem_cpy>
c0004357:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000435a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000435d:	83 e0 18             	and    eax,0x18
c0004360:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004363:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004367:	eb 02                	jmp    c000436b <dir_register+0x278>
c0004369:	89 c6                	mov    esi,eax
c000436b:	83 c4 6c             	add    esp,0x6c
c000436e:	89 f0                	mov    eax,esi
c0004370:	5b                   	pop    ebx
c0004371:	5e                   	pop    esi
c0004372:	5f                   	pop    edi
c0004373:	5d                   	pop    ebp
c0004374:	c3                   	ret    

c0004375 <sync_fs>:
c0004375:	56                   	push   esi
c0004376:	53                   	push   ebx
c0004377:	53                   	push   ebx
c0004378:	89 c3                	mov    ebx,eax
c000437a:	e8 37 de ff ff       	call   c00021b6 <sync_window>
c000437f:	85 c0                	test   eax,eax
c0004381:	0f 85 b1 00 00 00    	jne    c0004438 <sync_fs+0xc3>
c0004387:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000438a:	0f 85 8e 00 00 00    	jne    c000441e <sync_fs+0xa9>
c0004390:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004394:	0f 85 84 00 00 00    	jne    c000441e <sync_fs+0xa9>
c000439a:	b9 00 02 00 00       	mov    ecx,0x200
c000439f:	8d 73 54             	lea    esi,[ebx+0x54]
c00043a2:	31 d2                	xor    edx,edx
c00043a4:	89 f0                	mov    eax,esi
c00043a6:	e8 55 d7 ff ff       	call   c0001b00 <mem_set>
c00043ab:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00043b1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00043b6:	e8 23 d7 ff ff       	call   c0001ade <st_word>
c00043bb:	ba 52 52 61 41       	mov    edx,0x41615252
c00043c0:	89 f0                	mov    eax,esi
c00043c2:	e8 1b d7 ff ff       	call   c0001ae2 <st_dword>
c00043c7:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043cd:	ba 72 72 41 61       	mov    edx,0x61417272
c00043d2:	e8 0b d7 ff ff       	call   c0001ae2 <st_dword>
c00043d7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043da:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043e0:	e8 fd d6 ff ff       	call   c0001ae2 <st_dword>
c00043e5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043e8:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043ee:	e8 ef d6 ff ff       	call   c0001ae2 <st_dword>
c00043f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043f6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043f9:	83 c0 01             	add    eax,0x1
c00043fc:	83 d2 00             	adc    edx,0x0
c00043ff:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004402:	83 ec 0c             	sub    esp,0xc
c0004405:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004408:	6a 01                	push   0x1
c000440a:	52                   	push   edx
c000440b:	50                   	push   eax
c000440c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004410:	56                   	push   esi
c0004411:	50                   	push   eax
c0004412:	e8 20 d6 ff ff       	call   c0001a37 <disk_write>
c0004417:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000441b:	83 c4 20             	add    esp,0x20
c000441e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004422:	51                   	push   ecx
c0004423:	6a 00                	push   0x0
c0004425:	6a 00                	push   0x0
c0004427:	50                   	push   eax
c0004428:	e8 20 d6 ff ff       	call   c0001a4d <disk_ioctl>
c000442d:	83 c4 10             	add    esp,0x10
c0004430:	85 c0                	test   eax,eax
c0004432:	0f 95 c0             	setne  al
c0004435:	0f b6 c0             	movzx  eax,al
c0004438:	5a                   	pop    edx
c0004439:	5b                   	pop    ebx
c000443a:	5e                   	pop    esi
c000443b:	c3                   	ret    

c000443c <create_partition>:
c000443c:	55                   	push   ebp
c000443d:	0f b6 c0             	movzx  eax,al
c0004440:	57                   	push   edi
c0004441:	56                   	push   esi
c0004442:	53                   	push   ebx
c0004443:	83 ec 60             	sub    esp,0x60
c0004446:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000444a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000444e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004452:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004456:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000445a:	50                   	push   eax
c000445b:	6a 01                	push   0x1
c000445d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004461:	e8 e7 d5 ff ff       	call   c0001a4d <disk_ioctl>
c0004466:	83 c4 10             	add    esp,0x10
c0004469:	85 c0                	test   eax,eax
c000446b:	74 0a                	je     c0004477 <create_partition+0x3b>
c000446d:	b8 01 00 00 00       	mov    eax,0x1
c0004472:	e9 67 05 00 00       	jmp    c00049de <create_partition+0x5a2>
c0004477:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000447b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000447f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004483:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004487:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000448c:	0f 86 ed 03 00 00    	jbe    c000487f <create_partition+0x443>
c0004492:	83 c0 df             	add    eax,0xffffffdf
c0004495:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000449d:	83 d2 ff             	adc    edx,0xffffffff
c00044a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00044a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00044a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044b0:	83 c0 bd             	add    eax,0xffffffbd
c00044b3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044ba:	83 d2 ff             	adc    edx,0xffffffff
c00044bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044cd:	be 22 00 00 00       	mov    esi,0x22
c00044d2:	31 ff                	xor    edi,edi
c00044d4:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044dc:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044e4:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ec:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044f6:	75 0e                	jne    c0004506 <create_partition+0xca>
c00044f8:	b9 00 02 00 00       	mov    ecx,0x200
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 fa d5 ff ff       	call   c0001b00 <mem_set>
c0004506:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000450a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000450e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004512:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004515:	0f 84 23 01 00 00    	je     c000463e <create_partition+0x202>
c000451b:	89 f0                	mov    eax,esi
c000451d:	89 fa                	mov    edx,edi
c000451f:	05 ff 07 00 00       	add    eax,0x7ff
c0004524:	83 d2 00             	adc    edx,0x0
c0004527:	89 c1                	mov    ecx,eax
c0004529:	89 d7                	mov    edi,edx
c000452b:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004531:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004535:	89 ce                	mov    esi,ecx
c0004537:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000453b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000453f:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004543:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004546:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000454a:	89 04 24             	mov    DWORD PTR [esp],eax
c000454d:	b8 64 00 00 00       	mov    eax,0x64
c0004552:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004555:	b8 00 00 00 00       	mov    eax,0x0
c000455a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000455e:	72 41                	jb     c00045a1 <create_partition+0x165>
c0004560:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004568:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000456c:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004571:	01 c1                	add    ecx,eax
c0004573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004577:	f7 24 24             	mul    DWORD PTR [esp]
c000457a:	6a 00                	push   0x0
c000457c:	01 ca                	add    edx,ecx
c000457e:	6a 64                	push   0x64
c0004580:	52                   	push   edx
c0004581:	50                   	push   eax
c0004582:	e8 f5 de 01 00       	call   c002247c <__udivdi3>
c0004587:	83 c4 10             	add    esp,0x10
c000458a:	05 ff 07 00 00       	add    eax,0x7ff
c000458f:	83 d2 00             	adc    edx,0x0
c0004592:	89 c1                	mov    ecx,eax
c0004594:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004598:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000459e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00045a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00045a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00045a8:	01 f0                	add    eax,esi
c00045aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00045ae:	11 fa                	adc    edx,edi
c00045b0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00045b4:	19 d1                	sbb    ecx,edx
c00045b6:	73 2e                	jae    c00045e6 <create_partition+0x1aa>
c00045b8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045bc:	89 f8                	mov    eax,edi
c00045be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045c5:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045d1:	73 6b                	jae    c000463e <create_partition+0x202>
c00045d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045db:	29 f0                	sub    eax,esi
c00045dd:	19 fa                	sbb    edx,edi
c00045df:	89 04 24             	mov    DWORD PTR [esp],eax
c00045e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045ea:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045ed:	74 4f                	je     c000463e <create_partition+0x202>
c00045ef:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045f2:	b9 10 00 00 00       	mov    ecx,0x10
c00045f7:	ba f0 4e 02 c0       	mov    edx,0xc0024ef0
c00045fc:	e8 ea d4 ff ff       	call   c0001aeb <mem_cpy>
c0004601:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004605:	b9 10 00 00 00       	mov    ecx,0x10
c000460a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000460e:	e8 2c db ff ff       	call   c000213f <make_rand>
c0004613:	89 f2                	mov    edx,esi
c0004615:	89 f9                	mov    ecx,edi
c0004617:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000461b:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000461f:	e8 c1 d4 ff ff       	call   c0001ae5 <st_qword>
c0004624:	03 34 24             	add    esi,DWORD PTR [esp]
c0004627:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000462b:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000462f:	89 f2                	mov    edx,esi
c0004631:	89 f9                	mov    ecx,edi
c0004633:	83 c2 ff             	add    edx,0xffffffff
c0004636:	83 d1 ff             	adc    ecx,0xffffffff
c0004639:	e8 a7 d4 ff ff       	call   c0001ae5 <st_qword>
c000463e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004642:	83 e8 80             	sub    eax,0xffffff80
c0004645:	89 c5                	mov    ebp,eax
c0004647:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000464b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004651:	75 6b                	jne    c00046be <create_partition+0x282>
c0004653:	45                   	inc    ebp
c0004654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004658:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000465d:	e8 39 da ff ff       	call   c000209b <crc32>
c0004662:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004668:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000466c:	75 e5                	jne    c0004653 <create_partition+0x217>
c000466e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004672:	31 d2                	xor    edx,edx
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	c1 ed 09             	shr    ebp,0x9
c000467a:	6a 01                	push   0x1
c000467c:	8d 45 02             	lea    eax,[ebp+0x2]
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	53                   	push   ebx
c0004682:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004686:	e8 ac d3 ff ff       	call   c0001a37 <disk_write>
c000468b:	83 c4 20             	add    esp,0x20
c000468e:	85 c0                	test   eax,eax
c0004690:	0f 85 d7 fd ff ff    	jne    c000446d <create_partition+0x31>
c0004696:	83 ec 0c             	sub    esp,0xc
c0004699:	31 d2                	xor    edx,edx
c000469b:	6a 01                	push   0x1
c000469d:	89 e8                	mov    eax,ebp
c000469f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00046a3:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00046a7:	52                   	push   edx
c00046a8:	50                   	push   eax
c00046a9:	53                   	push   ebx
c00046aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046ae:	e8 84 d3 ff ff       	call   c0001a37 <disk_write>
c00046b3:	83 c4 20             	add    esp,0x20
c00046b6:	85 c0                	test   eax,eax
c00046b8:	0f 85 af fd ff ff    	jne    c000446d <create_partition+0x31>
c00046be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046c6:	3d 00 40 00 00       	cmp    eax,0x4000
c00046cb:	74 0d                	je     c00046da <create_partition+0x29e>
c00046cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046d5:	e9 12 fe ff ff       	jmp    c00044ec <create_partition+0xb0>
c00046da:	31 d2                	xor    edx,edx
c00046dc:	b9 00 02 00 00       	mov    ecx,0x200
c00046e1:	89 d8                	mov    eax,ebx
c00046e3:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046e6:	e8 15 d4 ff ff       	call   c0001b00 <mem_set>
c00046eb:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046ee:	b9 10 00 00 00       	mov    ecx,0x10
c00046f3:	ba e0 4d 02 c0       	mov    edx,0xc0024de0
c00046f8:	89 d8                	mov    eax,ebx
c00046fa:	e8 ec d3 ff ff       	call   c0001aeb <mem_cpy>
c00046ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004703:	8d 43 58             	lea    eax,[ebx+0x58]
c0004706:	f7 d2                	not    edx
c0004708:	e8 d5 d3 ff ff       	call   c0001ae2 <st_dword>
c000470d:	8d 43 18             	lea    eax,[ebx+0x18]
c0004710:	31 c9                	xor    ecx,ecx
c0004712:	89 04 24             	mov    DWORD PTR [esp],eax
c0004715:	ba 01 00 00 00       	mov    edx,0x1
c000471a:	e8 c6 d3 ff ff       	call   c0001ae5 <st_qword>
c000471f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004723:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004727:	83 c2 ff             	add    edx,0xffffffff
c000472a:	89 e8                	mov    eax,ebp
c000472c:	83 d1 ff             	adc    ecx,0xffffffff
c000472f:	e8 b1 d3 ff ff       	call   c0001ae5 <st_qword>
c0004734:	31 c9                	xor    ecx,ecx
c0004736:	8d 43 28             	lea    eax,[ebx+0x28]
c0004739:	ba 22 00 00 00       	mov    edx,0x22
c000473e:	e8 a2 d3 ff ff       	call   c0001ae5 <st_qword>
c0004743:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004747:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000474b:	83 c2 de             	add    edx,0xffffffde
c000474e:	8d 43 30             	lea    eax,[ebx+0x30]
c0004751:	83 d1 ff             	adc    ecx,0xffffffff
c0004754:	31 f6                	xor    esi,esi
c0004756:	e8 8a d3 ff ff       	call   c0001ae5 <st_qword>
c000475b:	8d 43 54             	lea    eax,[ebx+0x54]
c000475e:	ba 80 00 00 00       	mov    edx,0x80
c0004763:	e8 7a d3 ff ff       	call   c0001ae2 <st_dword>
c0004768:	8d 43 50             	lea    eax,[ebx+0x50]
c000476b:	ba 80 00 00 00       	mov    edx,0x80
c0004770:	e8 6d d3 ff ff       	call   c0001ae2 <st_dword>
c0004775:	ba 02 00 00 00       	mov    edx,0x2
c000477a:	89 f8                	mov    eax,edi
c000477c:	e8 61 d3 ff ff       	call   c0001ae2 <st_dword>
c0004781:	8d 53 38             	lea    edx,[ebx+0x38]
c0004784:	b9 10 00 00 00       	mov    ecx,0x10
c0004789:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000478d:	e8 ad d9 ff ff       	call   c000213f <make_rand>
c0004792:	83 c8 ff             	or     eax,0xffffffff
c0004795:	46                   	inc    esi
c0004796:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000479b:	e8 fb d8 ff ff       	call   c000209b <crc32>
c00047a0:	83 fe 5c             	cmp    esi,0x5c
c00047a3:	75 f0                	jne    c0004795 <create_partition+0x359>
c00047a5:	f7 d0                	not    eax
c00047a7:	8d 73 10             	lea    esi,[ebx+0x10]
c00047aa:	89 c2                	mov    edx,eax
c00047ac:	89 f0                	mov    eax,esi
c00047ae:	e8 2f d3 ff ff       	call   c0001ae2 <st_dword>
c00047b3:	83 ec 0c             	sub    esp,0xc
c00047b6:	6a 01                	push   0x1
c00047b8:	6a 00                	push   0x0
c00047ba:	6a 01                	push   0x1
c00047bc:	53                   	push   ebx
c00047bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047c1:	e8 71 d2 ff ff       	call   c0001a37 <disk_write>
c00047c6:	83 c4 20             	add    esp,0x20
c00047c9:	85 c0                	test   eax,eax
c00047cb:	0f 85 9c fc ff ff    	jne    c000446d <create_partition+0x31>
c00047d1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047d5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047d9:	83 c2 ff             	add    edx,0xffffffff
c00047dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047df:	83 d1 ff             	adc    ecx,0xffffffff
c00047e2:	e8 fe d2 ff ff       	call   c0001ae5 <st_qword>
c00047e7:	ba 01 00 00 00       	mov    edx,0x1
c00047ec:	31 c9                	xor    ecx,ecx
c00047ee:	89 e8                	mov    eax,ebp
c00047f0:	e8 f0 d2 ff ff       	call   c0001ae5 <st_qword>
c00047f5:	89 f8                	mov    eax,edi
c00047f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047fb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ff:	31 ff                	xor    edi,edi
c0004801:	e8 df d2 ff ff       	call   c0001ae5 <st_qword>
c0004806:	89 f0                	mov    eax,esi
c0004808:	31 d2                	xor    edx,edx
c000480a:	e8 d3 d2 ff ff       	call   c0001ae2 <st_dword>
c000480f:	83 c8 ff             	or     eax,0xffffffff
c0004812:	47                   	inc    edi
c0004813:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004818:	e8 7e d8 ff ff       	call   c000209b <crc32>
c000481d:	83 ff 5c             	cmp    edi,0x5c
c0004820:	75 f0                	jne    c0004812 <create_partition+0x3d6>
c0004822:	f7 d0                	not    eax
c0004824:	89 c2                	mov    edx,eax
c0004826:	89 f0                	mov    eax,esi
c0004828:	e8 b5 d2 ff ff       	call   c0001ae2 <st_dword>
c000482d:	83 ec 0c             	sub    esp,0xc
c0004830:	6a 01                	push   0x1
c0004832:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004836:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000483a:	83 c0 ff             	add    eax,0xffffffff
c000483d:	83 d2 ff             	adc    edx,0xffffffff
c0004840:	52                   	push   edx
c0004841:	50                   	push   eax
c0004842:	53                   	push   ebx
c0004843:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004847:	e8 eb d1 ff ff       	call   c0001a37 <disk_write>
c000484c:	83 c4 20             	add    esp,0x20
c000484f:	85 c0                	test   eax,eax
c0004851:	0f 85 16 fc ff ff    	jne    c000446d <create_partition+0x31>
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	b9 00 02 00 00       	mov    ecx,0x200
c0004860:	e8 9b d2 ff ff       	call   c0001b00 <mem_set>
c0004865:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	ba f0 4d 02 c0       	mov    edx,0xc0024df0
c0004875:	e8 71 d2 ff ff       	call   c0001aeb <mem_cpy>
c000487a:	e9 21 01 00 00       	jmp    c00049a0 <create_partition+0x564>
c000487f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004883:	b9 05 00 00 00       	mov    ecx,0x5
c0004888:	89 04 24             	mov    DWORD PTR [esp],eax
c000488b:	bf 08 00 00 00       	mov    edi,0x8
c0004890:	89 f8                	mov    eax,edi
c0004892:	31 d2                	xor    edx,edx
c0004894:	0f b6 f0             	movzx  esi,al
c0004897:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000489a:	f7 f6                	div    esi
c000489c:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00048a1:	76 0a                	jbe    c00048ad <create_partition+0x471>
c00048a3:	d1 e7                	shl    edi,1
c00048a5:	49                   	dec    ecx
c00048a6:	75 e8                	jne    c0004890 <create_partition+0x454>
c00048a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00048ad:	b9 00 02 00 00       	mov    ecx,0x200
c00048b2:	31 d2                	xor    edx,edx
c00048b4:	89 d8                	mov    eax,ebx
c00048b6:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048bc:	e8 3f d2 ff ff       	call   c0001b00 <mem_set>
c00048c1:	b9 64 00 00 00       	mov    ecx,0x64
c00048c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c9:	31 d2                	xor    edx,edx
c00048cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048d3:	f7 f1                	div    ecx
c00048d5:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048de:	89 f8                	mov    eax,edi
c00048e0:	0f b6 c0             	movzx  eax,al
c00048e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048e7:	e9 80 00 00 00       	jmp    c000496c <create_partition+0x530>
c00048ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048ef:	29 cf                	sub    edi,ecx
c00048f1:	89 ca                	mov    edx,ecx
c00048f3:	89 f0                	mov    eax,esi
c00048f5:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048fa:	e8 e3 d1 ff ff       	call   c0001ae2 <st_dword>
c00048ff:	8d 46 04             	lea    eax,[esi+0x4]
c0004902:	89 fa                	mov    edx,edi
c0004904:	83 c6 10             	add    esi,0x10
c0004907:	e8 d6 d1 ff ff       	call   c0001ae2 <st_dword>
c000490c:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004910:	31 d2                	xor    edx,edx
c0004912:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004915:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004919:	89 c8                	mov    eax,ecx
c000491b:	01 f9                	add    ecx,edi
c000491d:	f7 f5                	div    ebp
c000491f:	89 d5                	mov    ebp,edx
c0004921:	31 d2                	xor    edx,edx
c0004923:	45                   	inc    ebp
c0004924:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004928:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000492b:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000492e:	89 c2                	mov    edx,eax
c0004930:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004933:	c1 ea 02             	shr    edx,0x2
c0004936:	83 e2 c0             	and    edx,0xffffffc0
c0004939:	09 ea                	or     edx,ebp
c000493b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004940:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004943:	31 d2                	xor    edx,edx
c0004945:	f7 f5                	div    ebp
c0004947:	89 d7                	mov    edi,edx
c0004949:	31 d2                	xor    edx,edx
c000494b:	47                   	inc    edi
c000494c:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004950:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004953:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004956:	89 c5                	mov    ebp,eax
c0004958:	c1 ed 02             	shr    ebp,0x2
c000495b:	83 e5 c0             	and    ebp,0xffffffc0
c000495e:	09 ef                	or     edi,ebp
c0004960:	89 fa                	mov    edx,edi
c0004962:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004965:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000496a:	74 34                	je     c00049a0 <create_partition+0x564>
c000496c:	85 c9                	test   ecx,ecx
c000496e:	74 30                	je     c00049a0 <create_partition+0x564>
c0004970:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004973:	76 2b                	jbe    c00049a0 <create_partition+0x564>
c0004975:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004979:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000497d:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004980:	83 ff 64             	cmp    edi,0x64
c0004983:	76 4b                	jbe    c00049d0 <create_partition+0x594>
c0004985:	89 f8                	mov    eax,edi
c0004987:	01 c8                	add    eax,ecx
c0004989:	0f 82 5d ff ff ff    	jb     c00048ec <create_partition+0x4b0>
c000498f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004992:	0f 87 54 ff ff ff    	ja     c00048ec <create_partition+0x4b0>
c0004998:	85 ff                	test   edi,edi
c000499a:	0f 85 51 ff ff ff    	jne    c00048f1 <create_partition+0x4b5>
c00049a0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00049a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00049ab:	e8 2e d1 ff ff       	call   c0001ade <st_word>
c00049b0:	83 ec 0c             	sub    esp,0xc
c00049b3:	6a 01                	push   0x1
c00049b5:	6a 00                	push   0x0
c00049b7:	6a 00                	push   0x0
c00049b9:	53                   	push   ebx
c00049ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049be:	e8 74 d0 ff ff       	call   c0001a37 <disk_write>
c00049c3:	83 c4 20             	add    esp,0x20
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 95 c0             	setne  al
c00049cb:	0f b6 c0             	movzx  eax,al
c00049ce:	eb 0e                	jmp    c00049de <create_partition+0x5a2>
c00049d0:	74 07                	je     c00049d9 <create_partition+0x59d>
c00049d2:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049d7:	eb ac                	jmp    c0004985 <create_partition+0x549>
c00049d9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049dc:	eb a7                	jmp    c0004985 <create_partition+0x549>
c00049de:	83 c4 5c             	add    esp,0x5c
c00049e1:	5b                   	pop    ebx
c00049e2:	5e                   	pop    esi
c00049e3:	5f                   	pop    edi
c00049e4:	5d                   	pop    ebp
c00049e5:	c3                   	ret    

c00049e6 <get_fileinfo>:
c00049e6:	55                   	push   ebp
c00049e7:	57                   	push   edi
c00049e8:	56                   	push   esi
c00049e9:	53                   	push   ebx
c00049ea:	83 ec 1c             	sub    esp,0x1c
c00049ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00049ef:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049f7:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049fa:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049fd:	0f 84 dc 01 00 00    	je     c0004bdf <get_fileinfo+0x1f9>
c0004a03:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004a06:	75 0f                	jne    c0004a17 <get_fileinfo+0x31>
c0004a08:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004a0b:	83 c4 1c             	add    esp,0x1c
c0004a0e:	5b                   	pop    ebx
c0004a0f:	5e                   	pop    esi
c0004a10:	5f                   	pop    edi
c0004a11:	5d                   	pop    ebp
c0004a12:	e9 58 d5 ff ff       	jmp    c0001f6f <get_xfileinfo>
c0004a17:	89 d3                	mov    ebx,edx
c0004a19:	89 c6                	mov    esi,eax
c0004a1b:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a1f:	74 6a                	je     c0004a8b <get_fileinfo+0xa5>
c0004a21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a29:	31 ed                	xor    ebp,ebp
c0004a2b:	31 ff                	xor    edi,edi
c0004a2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a3c:	66 85 d2             	test   dx,dx
c0004a3f:	74 3e                	je     c0004a7f <get_fileinfo+0x99>
c0004a41:	66 85 ed             	test   bp,bp
c0004a44:	75 0c                	jne    c0004a52 <get_fileinfo+0x6c>
c0004a46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a4c:	66 3d ff 07          	cmp    ax,0x7ff
c0004a50:	76 22                	jbe    c0004a74 <get_fileinfo+0x8e>
c0004a52:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a57:	89 e8                	mov    eax,ebp
c0004a59:	29 f9                	sub    ecx,edi
c0004a5b:	c1 e0 10             	shl    eax,0x10
c0004a5e:	09 d0                	or     eax,edx
c0004a60:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a64:	e8 a3 d1 ff ff       	call   c0001c0c <put_utf>
c0004a69:	84 c0                	test   al,al
c0004a6b:	74 10                	je     c0004a7d <get_fileinfo+0x97>
c0004a6d:	0f b6 c0             	movzx  eax,al
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	01 c7                	add    edi,eax
c0004a74:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a79:	89 d5                	mov    ebp,edx
c0004a7b:	eb b0                	jmp    c0004a2d <get_fileinfo+0x47>
c0004a7d:	31 ff                	xor    edi,edi
c0004a7f:	66 85 ed             	test   bp,bp
c0004a82:	74 02                	je     c0004a86 <get_fileinfo+0xa0>
c0004a84:	31 ff                	xor    edi,edi
c0004a86:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a8b:	31 ff                	xor    edi,edi
c0004a8d:	31 c9                	xor    ecx,ecx
c0004a8f:	83 f9 0a             	cmp    ecx,0xa
c0004a92:	0f 87 ad 00 00 00    	ja     c0004b45 <get_fileinfo+0x15f>
c0004a98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004aa2:	66 83 fa 20          	cmp    dx,0x20
c0004aa6:	0f 84 92 00 00 00    	je     c0004b3e <get_fileinfo+0x158>
c0004aac:	66 83 fa 05          	cmp    dx,0x5
c0004ab0:	75 05                	jne    c0004ab7 <get_fileinfo+0xd1>
c0004ab2:	ba e5 00 00 00       	mov    edx,0xe5
c0004ab7:	83 ff 0b             	cmp    edi,0xb
c0004aba:	77 0b                	ja     c0004ac7 <get_fileinfo+0xe1>
c0004abc:	83 fd 09             	cmp    ebp,0x9
c0004abf:	75 06                	jne    c0004ac7 <get_fileinfo+0xe1>
c0004ac1:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ac6:	47                   	inc    edi
c0004ac7:	0f b7 c2             	movzx  eax,dx
c0004aca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ace:	e8 6d d0 ff ff       	call   c0001b40 <dbc_1st>
c0004ad3:	85 c0                	test   eax,eax
c0004ad5:	74 2f                	je     c0004b06 <get_fileinfo+0x120>
c0004ad7:	83 fd 08             	cmp    ebp,0x8
c0004ada:	74 2a                	je     c0004b06 <get_fileinfo+0x120>
c0004adc:	83 fd 0b             	cmp    ebp,0xb
c0004adf:	74 25                	je     c0004b06 <get_fileinfo+0x120>
c0004ae1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ae8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aec:	e8 52 d0 ff ff       	call   c0001b43 <dbc_2nd>
c0004af1:	85 c0                	test   eax,eax
c0004af3:	74 11                	je     c0004b06 <get_fileinfo+0x120>
c0004af5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004af9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004afe:	c1 e2 08             	shl    edx,0x8
c0004b01:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004b04:	09 c2                	or     edx,eax
c0004b06:	0f b7 d2             	movzx  edx,dx
c0004b09:	50                   	push   eax
c0004b0a:	50                   	push   eax
c0004b0b:	68 b5 01 00 00       	push   0x1b5
c0004b10:	52                   	push   edx
c0004b11:	e8 46 38 00 00       	call   c000835c <ff_oem2uni>
c0004b16:	83 c4 10             	add    esp,0x10
c0004b19:	66 85 c0             	test   ax,ax
c0004b1c:	75 04                	jne    c0004b22 <get_fileinfo+0x13c>
c0004b1e:	31 ff                	xor    edi,edi
c0004b20:	eb 23                	jmp    c0004b45 <get_fileinfo+0x15f>
c0004b22:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b27:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b2b:	29 f9                	sub    ecx,edi
c0004b2d:	0f b7 c0             	movzx  eax,ax
c0004b30:	e8 d7 d0 ff ff       	call   c0001c0c <put_utf>
c0004b35:	84 c0                	test   al,al
c0004b37:	74 e5                	je     c0004b1e <get_fileinfo+0x138>
c0004b39:	0f b6 c0             	movzx  eax,al
c0004b3c:	01 c7                	add    edi,eax
c0004b3e:	89 e9                	mov    ecx,ebp
c0004b40:	e9 4a ff ff ff       	jmp    c0004a8f <get_fileinfo+0xa9>
c0004b45:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b4a:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b4e:	75 54                	jne    c0004ba4 <get_fileinfo+0x1be>
c0004b50:	85 ff                	test   edi,edi
c0004b52:	75 0b                	jne    c0004b5f <get_fileinfo+0x179>
c0004b54:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b58:	ba 01 00 00 00       	mov    edx,0x1
c0004b5d:	eb 33                	jmp    c0004b92 <get_fileinfo+0x1ac>
c0004b5f:	b1 08                	mov    cl,0x8
c0004b61:	31 d2                	xor    edx,edx
c0004b63:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b69:	84 c0                	test   al,al
c0004b6b:	74 25                	je     c0004b92 <get_fileinfo+0x1ac>
c0004b6d:	66 83 f8 2e          	cmp    ax,0x2e
c0004b71:	74 16                	je     c0004b89 <get_fileinfo+0x1a3>
c0004b73:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b76:	66 83 ff 19          	cmp    di,0x19
c0004b7a:	77 0f                	ja     c0004b8b <get_fileinfo+0x1a5>
c0004b7c:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b7f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b82:	74 07                	je     c0004b8b <get_fileinfo+0x1a5>
c0004b84:	83 c0 20             	add    eax,0x20
c0004b87:	eb 02                	jmp    c0004b8b <get_fileinfo+0x1a5>
c0004b89:	b1 10                	mov    cl,0x10
c0004b8b:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b8f:	42                   	inc    edx
c0004b90:	eb d1                	jmp    c0004b63 <get_fileinfo+0x17d>
c0004b92:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b9e:	75 04                	jne    c0004ba4 <get_fileinfo+0x1be>
c0004ba0:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ba4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004baa:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004bad:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb0:	83 c0 1c             	add    eax,0x1c
c0004bb3:	e8 c1 ce ff ff       	call   c0001a79 <ld_dword>
c0004bb8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004bbf:	89 03                	mov    DWORD PTR [ebx],eax
c0004bc1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bc4:	83 c0 16             	add    eax,0x16
c0004bc7:	e8 a0 ce ff ff       	call   c0001a6c <ld_word>
c0004bcc:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	83 c0 18             	add    eax,0x18
c0004bd6:	e8 91 ce ff ff       	call   c0001a6c <ld_word>
c0004bdb:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bdf:	83 c4 1c             	add    esp,0x1c
c0004be2:	5b                   	pop    ebx
c0004be3:	5e                   	pop    esi
c0004be4:	5f                   	pop    edi
c0004be5:	5d                   	pop    ebp
c0004be6:	c3                   	ret    

c0004be7 <ld_clust.isra.0>:
c0004be7:	56                   	push   esi
c0004be8:	89 c6                	mov    esi,eax
c0004bea:	53                   	push   ebx
c0004beb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bee:	89 d3                	mov    ebx,edx
c0004bf0:	e8 77 ce ff ff       	call   c0001a6c <ld_word>
c0004bf5:	0f b7 c8             	movzx  ecx,ax
c0004bf8:	89 f0                	mov    eax,esi
c0004bfa:	3c 03                	cmp    al,0x3
c0004bfc:	75 0d                	jne    c0004c0b <ld_clust.isra.0+0x24>
c0004bfe:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c01:	e8 66 ce ff ff       	call   c0001a6c <ld_word>
c0004c06:	c1 e0 10             	shl    eax,0x10
c0004c09:	09 c1                	or     ecx,eax
c0004c0b:	89 c8                	mov    eax,ecx
c0004c0d:	5b                   	pop    ebx
c0004c0e:	5e                   	pop    esi
c0004c0f:	c3                   	ret    

c0004c10 <st_clust.isra.1>:
c0004c10:	56                   	push   esi
c0004c11:	89 c6                	mov    esi,eax
c0004c13:	53                   	push   ebx
c0004c14:	89 d3                	mov    ebx,edx
c0004c16:	0f b7 d1             	movzx  edx,cx
c0004c19:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c1c:	e8 bd ce ff ff       	call   c0001ade <st_word>
c0004c21:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c24:	75 0f                	jne    c0004c35 <st_clust.isra.1+0x25>
c0004c26:	c1 e9 10             	shr    ecx,0x10
c0004c29:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c2c:	89 ca                	mov    edx,ecx
c0004c2e:	5b                   	pop    ebx
c0004c2f:	5e                   	pop    esi
c0004c30:	e9 a9 ce ff ff       	jmp    c0001ade <st_word>
c0004c35:	5b                   	pop    ebx
c0004c36:	5e                   	pop    esi
c0004c37:	c3                   	ret    

c0004c38 <init_alloc_info.isra.2>:
c0004c38:	56                   	push   esi
c0004c39:	53                   	push   ebx
c0004c3a:	89 c6                	mov    esi,eax
c0004c3c:	89 d3                	mov    ebx,edx
c0004c3e:	51                   	push   ecx
c0004c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c41:	83 c0 34             	add    eax,0x34
c0004c44:	e8 30 ce ff ff       	call   c0001a79 <ld_dword>
c0004c49:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c4e:	83 c0 38             	add    eax,0x38
c0004c51:	e8 3b ce ff ff       	call   c0001a91 <ld_qword>
c0004c56:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c59:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c5e:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c61:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c68:	83 e0 02             	and    eax,0x2
c0004c6b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c6e:	5b                   	pop    ebx
c0004c6f:	5b                   	pop    ebx
c0004c70:	5e                   	pop    esi
c0004c71:	c3                   	ret    

c0004c72 <follow_path>:
c0004c72:	56                   	push   esi
c0004c73:	53                   	push   ebx
c0004c74:	89 c3                	mov    ebx,eax
c0004c76:	83 ec 14             	sub    esp,0x14
c0004c79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c7d:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c83:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c85:	80 fa 5c             	cmp    dl,0x5c
c0004c88:	75 07                	jne    c0004c91 <follow_path+0x1f>
c0004c8a:	40                   	inc    eax
c0004c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c8f:	eb ee                	jmp    c0004c7f <follow_path+0xd>
c0004c91:	80 fa 2f             	cmp    dl,0x2f
c0004c94:	74 f4                	je     c0004c8a <follow_path+0x18>
c0004c96:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c9d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ca4:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ca7:	77 52                	ja     c0004cfb <follow_path+0x89>
c0004ca9:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004cad:	31 d2                	xor    edx,edx
c0004caf:	89 d8                	mov    eax,ebx
c0004cb1:	e8 12 e3 ff ff       	call   c0002fc8 <dir_sdi>
c0004cb6:	eb 7c                	jmp    c0004d34 <follow_path+0xc2>
c0004cb8:	89 d8                	mov    eax,ebx
c0004cba:	e8 6e f2 ff ff       	call   c0003f2d <dir_find>
c0004cbf:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 46                	jne    c0004d0c <follow_path+0x9a>
c0004cc6:	80 e2 04             	and    dl,0x4
c0004cc9:	75 69                	jne    c0004d34 <follow_path+0xc2>
c0004ccb:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ccf:	74 5e                	je     c0004d2f <follow_path+0xbd>
c0004cd1:	8a 06                	mov    al,BYTE PTR [esi]
c0004cd3:	3c 04                	cmp    al,0x4
c0004cd5:	75 41                	jne    c0004d18 <follow_path+0xa6>
c0004cd7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cda:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cde:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ce1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ce4:	30 c0                	xor    al,al
c0004ce6:	09 d0                	or     eax,edx
c0004ce8:	89 da                	mov    edx,ebx
c0004cea:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ced:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cf0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cf3:	8d 46 10             	lea    eax,[esi+0x10]
c0004cf6:	e8 3d ff ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0004cfb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cff:	89 d8                	mov    eax,ebx
c0004d01:	e8 a9 ed ff ff       	call   c0003aaf <create_name>
c0004d06:	85 c0                	test   eax,eax
c0004d08:	74 ae                	je     c0004cb8 <follow_path+0x46>
c0004d0a:	eb 28                	jmp    c0004d34 <follow_path+0xc2>
c0004d0c:	83 f8 04             	cmp    eax,0x4
c0004d0f:	75 23                	jne    c0004d34 <follow_path+0xc2>
c0004d11:	80 e2 04             	and    dl,0x4
c0004d14:	74 19                	je     c0004d2f <follow_path+0xbd>
c0004d16:	eb 1c                	jmp    c0004d34 <follow_path+0xc2>
c0004d18:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d1b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d21:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d25:	e8 bd fe ff ff       	call   c0004be7 <ld_clust.isra.0>
c0004d2a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d2d:	eb cc                	jmp    c0004cfb <follow_path+0x89>
c0004d2f:	b8 05 00 00 00       	mov    eax,0x5
c0004d34:	83 c4 14             	add    esp,0x14
c0004d37:	5b                   	pop    ebx
c0004d38:	5e                   	pop    esi
c0004d39:	c3                   	ret    

c0004d3a <f_mount>:
c0004d3a:	53                   	push   ebx
c0004d3b:	83 ec 18             	sub    esp,0x18
c0004d3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d42:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d4e:	e8 fb d2 ff ff       	call   c000204e <get_ldnumber>
c0004d53:	89 c2                	mov    edx,eax
c0004d55:	b8 0b 00 00 00       	mov    eax,0xb
c0004d5a:	85 d2                	test   edx,edx
c0004d5c:	78 39                	js     c0004d97 <f_mount+0x5d>
c0004d5e:	8b 04 95 00 94 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6c00]
c0004d65:	85 c0                	test   eax,eax
c0004d67:	74 03                	je     c0004d6c <f_mount+0x32>
c0004d69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d70:	85 c0                	test   eax,eax
c0004d72:	74 03                	je     c0004d77 <f_mount+0x3d>
c0004d74:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7b:	89 04 95 00 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6c00],eax
c0004d82:	31 c0                	xor    eax,eax
c0004d84:	84 db                	test   bl,bl
c0004d86:	74 0f                	je     c0004d97 <f_mount+0x5d>
c0004d88:	31 c9                	xor    ecx,ecx
c0004d8a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d92:	e8 65 d7 ff ff       	call   c00024fc <mount_volume>
c0004d97:	83 c4 18             	add    esp,0x18
c0004d9a:	5b                   	pop    ebx
c0004d9b:	c3                   	ret    

c0004d9c <f_open>:
c0004d9c:	55                   	push   ebp
c0004d9d:	bd 09 00 00 00       	mov    ebp,0x9
c0004da2:	57                   	push   edi
c0004da3:	56                   	push   esi
c0004da4:	53                   	push   ebx
c0004da5:	83 ec 7c             	sub    esp,0x7c
c0004da8:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004daf:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004db6:	85 db                	test   ebx,ebx
c0004db8:	0f 84 10 04 00 00    	je     c00051ce <f_open+0x432>
c0004dbe:	89 fe                	mov    esi,edi
c0004dc0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004dc4:	83 e6 3f             	and    esi,0x3f
c0004dc7:	89 f0                	mov    eax,esi
c0004dc9:	0f b6 c8             	movzx  ecx,al
c0004dcc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dd3:	e8 24 d7 ff ff       	call   c00024fc <mount_volume>
c0004dd8:	89 c5                	mov    ebp,eax
c0004dda:	85 c0                	test   eax,eax
c0004ddc:	0f 85 e6 03 00 00    	jne    c00051c8 <f_open+0x42c>
c0004de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de6:	bd 11 00 00 00       	mov    ebp,0x11
c0004deb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004def:	83 ec 0c             	sub    esp,0xc
c0004df2:	68 60 04 00 00       	push   0x460
c0004df7:	e8 a3 34 00 00       	call   c000829f <ff_memalloc>
c0004dfc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004e00:	83 c4 10             	add    esp,0x10
c0004e03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004e08:	0f 84 c0 03 00 00    	je     c00051ce <f_open+0x432>
c0004e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004e16:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e1c:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e1f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e22:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e29:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e2d:	e8 40 fe ff ff       	call   c0004c72 <follow_path>
c0004e32:	89 c5                	mov    ebp,eax
c0004e34:	85 c0                	test   eax,eax
c0004e36:	75 0c                	jne    c0004e44 <f_open+0xa8>
c0004e38:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e3d:	79 05                	jns    c0004e44 <f_open+0xa8>
c0004e3f:	bd 06 00 00 00       	mov    ebp,0x6
c0004e44:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e4a:	0f 84 84 01 00 00    	je     c0004fd4 <f_open+0x238>
c0004e50:	85 ed                	test   ebp,ebp
c0004e52:	74 20                	je     c0004e74 <f_open+0xd8>
c0004e54:	83 fd 04             	cmp    ebp,0x4
c0004e57:	0f 85 58 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e61:	83 ce 08             	or     esi,0x8
c0004e64:	e8 8a f2 ff ff       	call   c00040f3 <dir_register>
c0004e69:	89 c5                	mov    ebp,eax
c0004e6b:	85 c0                	test   eax,eax
c0004e6d:	74 2f                	je     c0004e9e <f_open+0x102>
c0004e6f:	e9 41 03 00 00       	jmp    c00051b5 <f_open+0x419>
c0004e74:	bd 07 00 00 00       	mov    ebp,0x7
c0004e79:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e7e:	0f 85 31 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e84:	bd 08 00 00 00       	mov    ebp,0x8
c0004e89:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e8f:	0f 85 20 03 00 00    	jne    c00051b5 <f_open+0x419>
c0004e95:	83 e7 08             	and    edi,0x8
c0004e98:	0f 84 65 01 00 00    	je     c0005003 <f_open+0x267>
c0004e9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ea2:	8a 02                	mov    al,BYTE PTR [edx]
c0004ea4:	3c 04                	cmp    al,0x4
c0004ea6:	0f 85 97 00 00 00    	jne    c0004f43 <f_open+0x1a7>
c0004eac:	8d 42 10             	lea    eax,[edx+0x10]
c0004eaf:	89 13                	mov    DWORD PTR [ebx],edx
c0004eb1:	89 da                	mov    edx,ebx
c0004eb3:	e8 80 fd ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0004eb8:	31 d2                	xor    edx,edx
c0004eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebe:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec6:	83 c0 02             	add    eax,0x2
c0004ec9:	e8 32 cc ff ff       	call   c0001b00 <mem_set>
c0004ece:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ed3:	31 d2                	xor    edx,edx
c0004ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004edc:	83 c0 26             	add    eax,0x26
c0004edf:	e8 1c cc ff ff       	call   c0001b00 <mem_set>
c0004ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eeb:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eef:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ef7:	83 c0 08             	add    eax,0x8
c0004efa:	e8 e3 cb ff ff       	call   c0001ae2 <st_dword>
c0004eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004f06:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004f0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f0e:	e8 b7 ea ff ff       	call   c00039ca <store_xdir>
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	85 c0                	test   eax,eax
c0004f17:	0f 85 98 02 00 00    	jne    c00051b5 <f_open+0x419>
c0004f1d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f20:	85 d2                	test   edx,edx
c0004f22:	0f 84 db 00 00 00    	je     c0005003 <f_open+0x267>
c0004f28:	31 c9                	xor    ecx,ecx
c0004f2a:	89 d8                	mov    eax,ebx
c0004f2c:	e8 8e e3 ff ff       	call   c00032bf <remove_chain>
c0004f31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f35:	89 c5                	mov    ebp,eax
c0004f37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f3a:	48                   	dec    eax
c0004f3b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f3e:	e9 b8 00 00 00       	jmp    c0004ffb <f_open+0x25f>
c0004f43:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f47:	89 ea                	mov    edx,ebp
c0004f49:	e8 99 fc ff ff       	call   c0004be7 <ld_clust.isra.0>
c0004f4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f53:	89 c7                	mov    edi,eax
c0004f55:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f58:	e8 85 cb ff ff       	call   c0001ae2 <st_dword>
c0004f5d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f61:	31 c9                	xor    ecx,ecx
c0004f63:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f6f:	e8 9c fc ff ff       	call   c0004c10 <st_clust.isra.1>
c0004f74:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f78:	31 d2                	xor    edx,edx
c0004f7a:	83 c0 1c             	add    eax,0x1c
c0004f7d:	e8 60 cb ff ff       	call   c0001ae2 <st_dword>
c0004f82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f86:	85 ff                	test   edi,edi
c0004f88:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f8c:	74 75                	je     c0005003 <f_open+0x267>
c0004f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f92:	31 c9                	xor    ecx,ecx
c0004f94:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f97:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f9a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fa2:	89 fa                	mov    edx,edi
c0004fa4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fa8:	e8 12 e3 ff ff       	call   c00032bf <remove_chain>
c0004fad:	89 c5                	mov    ebp,eax
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	0f 85 fe 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc3:	4f                   	dec    edi
c0004fc4:	e8 81 d2 ff ff       	call   c000224a <move_window>
c0004fc9:	89 c5                	mov    ebp,eax
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fd2:	eb 27                	jmp    c0004ffb <f_open+0x25f>
c0004fd4:	85 ed                	test   ebp,ebp
c0004fd6:	0f 85 d9 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fdc:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fe0:	bd 04 00 00 00       	mov    ebp,0x4
c0004fe5:	a8 10                	test   al,0x10
c0004fe7:	0f 85 c8 01 00 00    	jne    c00051b5 <f_open+0x419>
c0004fed:	83 e7 02             	and    edi,0x2
c0004ff0:	74 11                	je     c0005003 <f_open+0x267>
c0004ff2:	bd 07 00 00 00       	mov    ebp,0x7
c0004ff7:	a8 01                	test   al,0x1
c0004ff9:	eb 02                	jmp    c0004ffd <f_open+0x261>
c0004ffb:	85 ed                	test   ebp,ebp
c0004ffd:	0f 85 b2 01 00 00    	jne    c00051b5 <f_open+0x419>
c0005003:	f7 c6 08 00 00 00    	test   esi,0x8
c0005009:	74 03                	je     c000500e <f_open+0x272>
c000500b:	83 ce 40             	or     esi,0x40
c000500e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005012:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005015:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005018:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000501b:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000501e:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005022:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005025:	8a 02                	mov    al,BYTE PTR [edx]
c0005027:	3c 04                	cmp    al,0x4
c0005029:	75 2a                	jne    c0005055 <f_open+0x2b9>
c000502b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000502f:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005034:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000503b:	30 c0                	xor    al,al
c000503d:	09 c8                	or     eax,ecx
c000503f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005042:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005046:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005049:	8d 42 10             	lea    eax,[edx+0x10]
c000504c:	89 da                	mov    edx,ebx
c000504e:	e8 e5 fb ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0005053:	eb 1c                	jmp    c0005071 <f_open+0x2d5>
c0005055:	89 fa                	mov    edx,edi
c0005057:	e8 8b fb ff ff       	call   c0004be7 <ld_clust.isra.0>
c000505c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000505f:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005062:	e8 12 ca ff ff       	call   c0001a79 <ld_dword>
c0005067:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000506e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000507c:	89 03                	mov    DWORD PTR [ebx],eax
c000507e:	31 d2                	xor    edx,edx
c0005080:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005084:	b9 00 02 00 00       	mov    ecx,0x200
c0005089:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000508d:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005091:	89 f0                	mov    eax,esi
c0005093:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000509a:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000509d:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00050a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00050a7:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00050ae:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00050b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050b9:	e8 42 ca ff ff       	call   c0001b00 <mem_set>
c00050be:	83 e6 20             	and    esi,0x20
c00050c1:	75 07                	jne    c00050ca <f_open+0x32e>
c00050c3:	31 ed                	xor    ebp,ebp
c00050c5:	e9 eb 00 00 00       	jmp    c00051b5 <f_open+0x419>
c00050ca:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050cd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050dc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050e0:	74 e1                	je     c00050c3 <f_open+0x327>
c00050e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ea:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ed:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f7:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050fb:	31 ff                	xor    edi,edi
c00050fd:	c1 e5 09             	shl    ebp,0x9
c0005100:	89 ee                	mov    esi,ebp
c0005102:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005106:	89 f8                	mov    eax,edi
c0005108:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000510c:	73 22                	jae    c0005130 <f_open+0x394>
c000510e:	89 d8                	mov    eax,ebx
c0005110:	e8 bd dc ff ff       	call   c0002dd2 <get_fat>
c0005115:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005119:	89 c2                	mov    edx,eax
c000511b:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000511f:	83 f8 01             	cmp    eax,0x1
c0005122:	76 10                	jbe    c0005134 <f_open+0x398>
c0005124:	83 f8 ff             	cmp    eax,0xffffffff
c0005127:	75 d9                	jne    c0005102 <f_open+0x366>
c0005129:	bd 01 00 00 00       	mov    ebp,0x1
c000512e:	eb 09                	jmp    c0005139 <f_open+0x39d>
c0005130:	31 ed                	xor    ebp,ebp
c0005132:	eb 05                	jmp    c0005139 <f_open+0x39d>
c0005134:	bd 02 00 00 00       	mov    ebp,0x2
c0005139:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000513c:	85 ed                	test   ebp,ebp
c000513e:	75 75                	jne    c00051b5 <f_open+0x419>
c0005140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005144:	25 ff 01 00 00       	and    eax,0x1ff
c0005149:	0f 84 74 ff ff ff    	je     c00050c3 <f_open+0x327>
c000514f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005153:	bd 02 00 00 00       	mov    ebp,0x2
c0005158:	89 c8                	mov    eax,ecx
c000515a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000515e:	e8 a2 cb ff ff       	call   c0001d05 <clst2sect>
c0005163:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005167:	89 d7                	mov    edi,edx
c0005169:	09 c7                	or     edi,eax
c000516b:	74 48                	je     c00051b5 <f_open+0x419>
c000516d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005171:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005175:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000517d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005181:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005185:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005189:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000518c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005190:	83 ec 0c             	sub    esp,0xc
c0005193:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005196:	6a 01                	push   0x1
c0005198:	52                   	push   edx
c0005199:	50                   	push   eax
c000519a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000519e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051a2:	50                   	push   eax
c00051a3:	e8 79 c8 ff ff       	call   c0001a21 <disk_read>
c00051a8:	83 c4 20             	add    esp,0x20
c00051ab:	85 c0                	test   eax,eax
c00051ad:	0f 95 c0             	setne  al
c00051b0:	0f b6 c0             	movzx  eax,al
c00051b3:	89 c5                	mov    ebp,eax
c00051b5:	83 ec 0c             	sub    esp,0xc
c00051b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051bc:	e8 f4 30 00 00       	call   c00082b5 <ff_memfree>
c00051c1:	83 c4 10             	add    esp,0x10
c00051c4:	85 ed                	test   ebp,ebp
c00051c6:	74 06                	je     c00051ce <f_open+0x432>
c00051c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ce:	83 c4 7c             	add    esp,0x7c
c00051d1:	89 e8                	mov    eax,ebp
c00051d3:	5b                   	pop    ebx
c00051d4:	5e                   	pop    esi
c00051d5:	5f                   	pop    edi
c00051d6:	5d                   	pop    ebp
c00051d7:	c3                   	ret    

c00051d8 <f_read>:
c00051d8:	55                   	push   ebp
c00051d9:	57                   	push   edi
c00051da:	56                   	push   esi
c00051db:	53                   	push   ebx
c00051dc:	83 ec 2c             	sub    esp,0x2c
c00051df:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051f1:	89 d8                	mov    eax,ebx
c00051f3:	e8 77 cf ff ff       	call   c000216f <validate>
c00051f8:	89 c5                	mov    ebp,eax
c00051fa:	85 c0                	test   eax,eax
c00051fc:	0f 85 4c 02 00 00    	jne    c000544e <f_read+0x276>
c0005202:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005206:	85 ed                	test   ebp,ebp
c0005208:	0f 85 40 02 00 00    	jne    c000544e <f_read+0x276>
c000520e:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005212:	0f 84 31 02 00 00    	je     c0005449 <f_read+0x271>
c0005218:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000521b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000521e:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005221:	bf 00 00 00 00       	mov    edi,0x0
c0005226:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005229:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000522d:	89 d1                	mov    ecx,edx
c000522f:	19 f9                	sbb    ecx,edi
c0005231:	0f 83 cf 00 00 00    	jae    c0005306 <f_read+0x12e>
c0005237:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000523b:	e9 c6 00 00 00       	jmp    c0005306 <f_read+0x12e>
c0005240:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005243:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005246:	89 d0                	mov    eax,edx
c0005248:	25 ff 01 00 00       	and    eax,0x1ff
c000524d:	0f 85 c9 01 00 00    	jne    c000541c <f_read+0x244>
c0005253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005257:	89 d6                	mov    esi,edx
c0005259:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000525d:	89 cf                	mov    edi,ecx
c000525f:	48                   	dec    eax
c0005260:	0f ac fe 09          	shrd   esi,edi,0x9
c0005264:	21 f0                	and    eax,esi
c0005266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000526a:	0f 84 a6 00 00 00    	je     c0005316 <f_read+0x13e>
c0005270:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005274:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005277:	89 c8                	mov    eax,ecx
c0005279:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000527c:	e8 84 ca ff ff       	call   c0001d05 <clst2sect>
c0005281:	89 d7                	mov    edi,edx
c0005283:	09 c7                	or     edi,eax
c0005285:	0f 84 b4 00 00 00    	je     c000533f <f_read+0x167>
c000528b:	31 ff                	xor    edi,edi
c000528d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005291:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005294:	01 c6                	add    esi,eax
c0005296:	11 d7                	adc    edi,edx
c0005298:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00052a0:	0f 86 fd 00 00 00    	jbe    c00053a3 <f_read+0x1cb>
c00052a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052ae:	c1 e8 09             	shr    eax,0x9
c00052b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052b4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052b8:	03 14 24             	add    edx,DWORD PTR [esp]
c00052bb:	39 c2                	cmp    edx,eax
c00052bd:	76 07                	jbe    c00052c6 <f_read+0xee>
c00052bf:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00052c6:	83 ec 0c             	sub    esp,0xc
c00052c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052cd:	57                   	push   edi
c00052ce:	56                   	push   esi
c00052cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052d3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052d7:	50                   	push   eax
c00052d8:	e8 44 c7 ff ff       	call   c0001a21 <disk_read>
c00052dd:	83 c4 20             	add    esp,0x20
c00052e0:	85 c0                	test   eax,eax
c00052e2:	75 6e                	jne    c0005352 <f_read+0x17a>
c00052e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e8:	78 7e                	js     c0005368 <f_read+0x190>
c00052ea:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ed:	c1 e6 09             	shl    esi,0x9
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052fa:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052fe:	01 30                	add    DWORD PTR [eax],esi
c0005300:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005303:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005306:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000530b:	0f 85 2f ff ff ff    	jne    c0005240 <f_read+0x68>
c0005311:	e9 38 01 00 00       	jmp    c000544e <f_read+0x276>
c0005316:	89 c8                	mov    eax,ecx
c0005318:	09 d0                	or     eax,edx
c000531a:	75 05                	jne    c0005321 <f_read+0x149>
c000531c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000531f:	eb 19                	jmp    c000533a <f_read+0x162>
c0005321:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005325:	74 09                	je     c0005330 <f_read+0x158>
c0005327:	89 d8                	mov    eax,ebx
c0005329:	e8 f8 c9 ff ff       	call   c0001d26 <clmt_clust>
c000532e:	eb 0a                	jmp    c000533a <f_read+0x162>
c0005330:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005333:	89 d8                	mov    eax,ebx
c0005335:	e8 98 da ff ff       	call   c0002dd2 <get_fat>
c000533a:	83 f8 01             	cmp    eax,0x1
c000533d:	77 0e                	ja     c000534d <f_read+0x175>
c000533f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005343:	bd 02 00 00 00       	mov    ebp,0x2
c0005348:	e9 01 01 00 00       	jmp    c000544e <f_read+0x276>
c000534d:	83 f8 ff             	cmp    eax,0xffffffff
c0005350:	75 0e                	jne    c0005360 <f_read+0x188>
c0005352:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005356:	bd 01 00 00 00       	mov    ebp,0x1
c000535b:	e9 ee 00 00 00       	jmp    c000544e <f_read+0x276>
c0005360:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005363:	e9 08 ff ff ff       	jmp    c0005270 <f_read+0x98>
c0005368:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000536e:	29 f0                	sub    eax,esi
c0005370:	19 fa                	sbb    edx,edi
c0005372:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005375:	89 d7                	mov    edi,edx
c0005377:	ba 00 00 00 00       	mov    edx,0x0
c000537c:	89 f9                	mov    ecx,edi
c000537e:	19 d1                	sbb    ecx,edx
c0005380:	0f 83 64 ff ff ff    	jae    c00052ea <f_read+0x112>
c0005386:	89 c7                	mov    edi,eax
c0005388:	8d 53 50             	lea    edx,[ebx+0x50]
c000538b:	c1 e7 09             	shl    edi,0x9
c000538e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005392:	b9 00 02 00 00       	mov    ecx,0x200
c0005397:	01 f8                	add    eax,edi
c0005399:	e8 4d c7 ff ff       	call   c0001aeb <mem_cpy>
c000539e:	e9 47 ff ff ff       	jmp    c00052ea <f_read+0x112>
c00053a3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00053a6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00053a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00053b0:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00053b4:	75 05                	jne    c00053bb <f_read+0x1e3>
c00053b6:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053b9:	74 5b                	je     c0005416 <f_read+0x23e>
c00053bb:	8d 43 50             	lea    eax,[ebx+0x50]
c00053be:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053c6:	79 2a                	jns    c00053f2 <f_read+0x21a>
c00053c8:	83 ec 0c             	sub    esp,0xc
c00053cb:	6a 01                	push   0x1
c00053cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053dd:	50                   	push   eax
c00053de:	e8 54 c6 ff ff       	call   c0001a37 <disk_write>
c00053e3:	83 c4 20             	add    esp,0x20
c00053e6:	85 c0                	test   eax,eax
c00053e8:	0f 85 64 ff ff ff    	jne    c0005352 <f_read+0x17a>
c00053ee:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053f2:	83 ec 0c             	sub    esp,0xc
c00053f5:	6a 01                	push   0x1
c00053f7:	57                   	push   edi
c00053f8:	56                   	push   esi
c00053f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005401:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005405:	50                   	push   eax
c0005406:	e8 16 c6 ff ff       	call   c0001a21 <disk_read>
c000540b:	83 c4 20             	add    esp,0x20
c000540e:	85 c0                	test   eax,eax
c0005410:	0f 85 3c ff ff ff    	jne    c0005352 <f_read+0x17a>
c0005416:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005419:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000541c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000541f:	ba 00 02 00 00       	mov    edx,0x200
c0005424:	25 ff 01 00 00       	and    eax,0x1ff
c0005429:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000542d:	29 c2                	sub    edx,eax
c000542f:	39 d6                	cmp    esi,edx
c0005431:	76 02                	jbe    c0005435 <f_read+0x25d>
c0005433:	89 d6                	mov    esi,edx
c0005435:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005439:	89 f1                	mov    ecx,esi
c000543b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000543f:	e8 a7 c6 ff ff       	call   c0001aeb <mem_cpy>
c0005444:	e9 a7 fe ff ff       	jmp    c00052f0 <f_read+0x118>
c0005449:	bd 07 00 00 00       	mov    ebp,0x7
c000544e:	83 c4 2c             	add    esp,0x2c
c0005451:	89 e8                	mov    eax,ebp
c0005453:	5b                   	pop    ebx
c0005454:	5e                   	pop    esi
c0005455:	5f                   	pop    edi
c0005456:	5d                   	pop    ebp
c0005457:	c3                   	ret    

c0005458 <f_write>:
c0005458:	55                   	push   ebp
c0005459:	57                   	push   edi
c000545a:	56                   	push   esi
c000545b:	53                   	push   ebx
c000545c:	83 ec 2c             	sub    esp,0x2c
c000545f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005463:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005467:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000546d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005471:	89 d8                	mov    eax,ebx
c0005473:	e8 f7 cc ff ff       	call   c000216f <validate>
c0005478:	89 c5                	mov    ebp,eax
c000547a:	85 c0                	test   eax,eax
c000547c:	0f 85 86 02 00 00    	jne    c0005708 <f_write+0x2b0>
c0005482:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005486:	85 ed                	test   ebp,ebp
c0005488:	0f 85 7a 02 00 00    	jne    c0005708 <f_write+0x2b0>
c000548e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005492:	0f 84 6b 02 00 00    	je     c0005703 <f_write+0x2ab>
c0005498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000549c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000549f:	0f 84 43 01 00 00    	je     c00055e8 <f_write+0x190>
c00054a5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00054a8:	89 c1                	mov    ecx,eax
c00054aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00054ae:	0f 83 34 01 00 00    	jae    c00055e8 <f_write+0x190>
c00054b4:	f7 d0                	not    eax
c00054b6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054ba:	e9 29 01 00 00       	jmp    c00055e8 <f_write+0x190>
c00054bf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054c2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054c5:	89 d0                	mov    eax,edx
c00054c7:	25 ff 01 00 00       	and    eax,0x1ff
c00054cc:	0f 85 00 02 00 00    	jne    c00056d2 <f_write+0x27a>
c00054d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054d6:	89 d6                	mov    esi,edx
c00054d8:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054dc:	89 cf                	mov    edi,ecx
c00054de:	48                   	dec    eax
c00054df:	0f ac fe 09          	shrd   esi,edi,0x9
c00054e3:	21 f0                	and    eax,esi
c00054e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054e9:	0f 84 06 01 00 00    	je     c00055f5 <f_write+0x19d>
c00054ef:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054f3:	0f 88 6e 01 00 00    	js     c0005667 <f_write+0x20f>
c00054f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054fd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005500:	89 c8                	mov    eax,ecx
c0005502:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005506:	e8 fa c7 ff ff       	call   c0001d05 <clst2sect>
c000550b:	89 d1                	mov    ecx,edx
c000550d:	09 c1                	or     ecx,eax
c000550f:	0f 84 1c 01 00 00    	je     c0005631 <f_write+0x1d9>
c0005515:	31 ff                	xor    edi,edi
c0005517:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000551b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000551f:	01 c6                	add    esi,eax
c0005521:	11 d7                	adc    edi,edx
c0005523:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000552b:	0f 86 63 01 00 00    	jbe    c0005694 <f_write+0x23c>
c0005531:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005535:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005539:	c1 e8 09             	shr    eax,0x9
c000553c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005540:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005544:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005548:	39 c2                	cmp    edx,eax
c000554a:	76 08                	jbe    c0005554 <f_write+0xfc>
c000554c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005550:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005554:	83 ec 0c             	sub    esp,0xc
c0005557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000555b:	57                   	push   edi
c000555c:	56                   	push   esi
c000555d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005561:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005565:	50                   	push   eax
c0005566:	e8 cc c4 ff ff       	call   c0001a37 <disk_write>
c000556b:	83 c4 20             	add    esp,0x20
c000556e:	85 c0                	test   eax,eax
c0005570:	0f 85 ce 00 00 00    	jne    c0005644 <f_write+0x1ec>
c0005576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005579:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000557c:	29 f0                	sub    eax,esi
c000557e:	19 fa                	sbb    edx,edi
c0005580:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005584:	89 d7                	mov    edi,edx
c0005586:	ba 00 00 00 00       	mov    edx,0x0
c000558b:	89 f9                	mov    ecx,edi
c000558d:	19 d1                	sbb    ecx,edx
c000558f:	73 1c                	jae    c00055ad <f_write+0x155>
c0005591:	89 c7                	mov    edi,eax
c0005593:	b9 00 02 00 00       	mov    ecx,0x200
c0005598:	c1 e7 09             	shl    edi,0x9
c000559b:	8d 43 50             	lea    eax,[ebx+0x50]
c000559e:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00055a2:	89 fa                	mov    edx,edi
c00055a4:	e8 42 c5 ff ff       	call   c0001aeb <mem_cpy>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00055b1:	c1 e6 09             	shl    esi,0x9
c00055b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055b8:	31 ff                	xor    edi,edi
c00055ba:	01 30                	add    DWORD PTR [eax],esi
c00055bc:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055c0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055c4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c7:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055cd:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055d0:	89 c1                	mov    ecx,eax
c00055d2:	39 f2                	cmp    edx,esi
c00055d4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055d7:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055da:	19 f9                	sbb    ecx,edi
c00055dc:	73 04                	jae    c00055e2 <f_write+0x18a>
c00055de:	89 f2                	mov    edx,esi
c00055e0:	89 f8                	mov    eax,edi
c00055e2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055e5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055e8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ed:	0f 85 cc fe ff ff    	jne    c00054bf <f_write+0x67>
c00055f3:	eb 2e                	jmp    c0005623 <f_write+0x1cb>
c00055f5:	89 c8                	mov    eax,ecx
c00055f7:	09 d0                	or     eax,edx
c00055f9:	75 0b                	jne    c0005606 <f_write+0x1ae>
c00055fb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055fe:	31 d2                	xor    edx,edx
c0005600:	85 c0                	test   eax,eax
c0005602:	75 28                	jne    c000562c <f_write+0x1d4>
c0005604:	eb 12                	jmp    c0005618 <f_write+0x1c0>
c0005606:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000560a:	74 09                	je     c0005615 <f_write+0x1bd>
c000560c:	89 d8                	mov    eax,ebx
c000560e:	e8 13 c7 ff ff       	call   c0001d26 <clmt_clust>
c0005613:	eb 0a                	jmp    c000561f <f_write+0x1c7>
c0005615:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005618:	89 d8                	mov    eax,ebx
c000561a:	e8 a1 da ff ff       	call   c00030c0 <create_chain>
c000561f:	85 c0                	test   eax,eax
c0005621:	75 09                	jne    c000562c <f_write+0x1d4>
c0005623:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005627:	e9 dc 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c000562c:	83 f8 01             	cmp    eax,0x1
c000562f:	75 0e                	jne    c000563f <f_write+0x1e7>
c0005631:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005635:	bd 02 00 00 00       	mov    ebp,0x2
c000563a:	e9 c9 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c000563f:	83 f8 ff             	cmp    eax,0xffffffff
c0005642:	75 0e                	jne    c0005652 <f_write+0x1fa>
c0005644:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005648:	bd 01 00 00 00       	mov    ebp,0x1
c000564d:	e9 b6 00 00 00       	jmp    c0005708 <f_write+0x2b0>
c0005652:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005655:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005659:	0f 85 90 fe ff ff    	jne    c00054ef <f_write+0x97>
c000565f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005662:	e9 88 fe ff ff       	jmp    c00054ef <f_write+0x97>
c0005667:	83 ec 0c             	sub    esp,0xc
c000566a:	8d 43 50             	lea    eax,[ebx+0x50]
c000566d:	6a 01                	push   0x1
c000566f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005672:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005675:	50                   	push   eax
c0005676:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000567a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000567e:	50                   	push   eax
c000567f:	e8 b3 c3 ff ff       	call   c0001a37 <disk_write>
c0005684:	83 c4 20             	add    esp,0x20
c0005687:	85 c0                	test   eax,eax
c0005689:	75 b9                	jne    c0005644 <f_write+0x1ec>
c000568b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000568f:	e9 65 fe ff ff       	jmp    c00054f9 <f_write+0xa1>
c0005694:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005697:	75 05                	jne    c000569e <f_write+0x246>
c0005699:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000569c:	74 2e                	je     c00056cc <f_write+0x274>
c000569e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00056a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056a4:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00056a7:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00056aa:	73 20                	jae    c00056cc <f_write+0x274>
c00056ac:	83 ec 0c             	sub    esp,0xc
c00056af:	8d 43 50             	lea    eax,[ebx+0x50]
c00056b2:	6a 01                	push   0x1
c00056b4:	57                   	push   edi
c00056b5:	56                   	push   esi
c00056b6:	50                   	push   eax
c00056b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056bb:	50                   	push   eax
c00056bc:	e8 60 c3 ff ff       	call   c0001a21 <disk_read>
c00056c1:	83 c4 20             	add    esp,0x20
c00056c4:	85 c0                	test   eax,eax
c00056c6:	0f 85 78 ff ff ff    	jne    c0005644 <f_write+0x1ec>
c00056cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056cf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056d2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056d5:	ba 00 02 00 00       	mov    edx,0x200
c00056da:	25 ff 01 00 00       	and    eax,0x1ff
c00056df:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056e3:	29 c2                	sub    edx,eax
c00056e5:	39 d6                	cmp    esi,edx
c00056e7:	76 02                	jbe    c00056eb <f_write+0x293>
c00056e9:	89 d6                	mov    esi,edx
c00056eb:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056ef:	89 f1                	mov    ecx,esi
c00056f1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056f5:	e8 f1 c3 ff ff       	call   c0001aeb <mem_cpy>
c00056fa:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056fe:	e9 b1 fe ff ff       	jmp    c00055b4 <f_write+0x15c>
c0005703:	bd 07 00 00 00       	mov    ebp,0x7
c0005708:	83 c4 2c             	add    esp,0x2c
c000570b:	89 e8                	mov    eax,ebp
c000570d:	5b                   	pop    ebx
c000570e:	5e                   	pop    esi
c000570f:	5f                   	pop    edi
c0005710:	5d                   	pop    ebp
c0005711:	c3                   	ret    

c0005712 <f_sync>:
c0005712:	56                   	push   esi
c0005713:	53                   	push   ebx
c0005714:	83 ec 64             	sub    esp,0x64
c0005717:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000571b:	8d 54 24 10          	lea    edx,[esp+0x10]
c000571f:	89 d8                	mov    eax,ebx
c0005721:	e8 49 ca ff ff       	call   c000216f <validate>
c0005726:	85 c0                	test   eax,eax
c0005728:	0f 85 ba 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000572e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005731:	f6 c2 40             	test   dl,0x40
c0005734:	0f 84 ae 01 00 00    	je     c00058e8 <f_sync+0x1d6>
c000573a:	84 d2                	test   dl,dl
c000573c:	79 33                	jns    c0005771 <f_sync+0x5f>
c000573e:	83 ec 0c             	sub    esp,0xc
c0005741:	8d 43 50             	lea    eax,[ebx+0x50]
c0005744:	6a 01                	push   0x1
c0005746:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005749:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000574c:	50                   	push   eax
c000574d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005751:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005755:	50                   	push   eax
c0005756:	e8 dc c2 ff ff       	call   c0001a37 <disk_write>
c000575b:	83 c4 20             	add    esp,0x20
c000575e:	89 c2                	mov    edx,eax
c0005760:	b8 01 00 00 00       	mov    eax,0x1
c0005765:	85 d2                	test   edx,edx
c0005767:	0f 85 7b 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000576d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005775:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005778:	0f 85 11 01 00 00    	jne    c000588f <f_sync+0x17d>
c000577e:	89 d8                	mov    eax,ebx
c0005780:	e8 13 d6 ff ff       	call   c0002d98 <fill_first_frag>
c0005785:	85 c0                	test   eax,eax
c0005787:	0f 85 5b 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c000578d:	83 c9 ff             	or     ecx,0xffffffff
c0005790:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005793:	89 d8                	mov    eax,ebx
c0005795:	e8 c9 d5 ff ff       	call   c0002d63 <fill_last_frag>
c000579a:	85 c0                	test   eax,eax
c000579c:	0f 85 46 01 00 00    	jne    c00058e8 <f_sync+0x1d6>
c00057a2:	83 ec 0c             	sub    esp,0xc
c00057a5:	68 60 04 00 00       	push   0x460
c00057aa:	e8 f0 2a 00 00       	call   c000829f <ff_memalloc>
c00057af:	83 c4 10             	add    esp,0x10
c00057b2:	89 c6                	mov    esi,eax
c00057b4:	b8 11 00 00 00       	mov    eax,0x11
c00057b9:	85 f6                	test   esi,esi
c00057bb:	0f 84 27 01 00 00    	je     c00058e8 <f_sync+0x1d6>
c00057c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057cb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057d1:	89 da                	mov    edx,ebx
c00057d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057d7:	e8 af df ff ff       	call   c000378b <load_obj_xdir>
c00057dc:	85 c0                	test   eax,eax
c00057de:	0f 85 95 00 00 00    	jne    c0005879 <f_sync+0x167>
c00057e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057eb:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057ef:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057f2:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057f5:	83 ca 01             	or     edx,0x1
c00057f8:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057fb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005801:	83 c0 34             	add    eax,0x34
c0005804:	e8 d9 c2 ff ff       	call   c0001ae2 <st_dword>
c0005809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005813:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005816:	83 c0 38             	add    eax,0x38
c0005819:	e8 c7 c2 ff ff       	call   c0001ae5 <st_qword>
c000581e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005825:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005828:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000582b:	83 c0 28             	add    eax,0x28
c000582e:	e8 b2 c2 ff ff       	call   c0001ae5 <st_qword>
c0005833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005837:	ba 00 00 21 50       	mov    edx,0x50210000
c000583c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000583f:	83 c0 0c             	add    eax,0xc
c0005842:	e8 9b c2 ff ff       	call   c0001ae2 <st_dword>
c0005847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000584e:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005852:	31 d2                	xor    edx,edx
c0005854:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005857:	83 c0 10             	add    eax,0x10
c000585a:	e8 83 c2 ff ff       	call   c0001ae2 <st_dword>
c000585f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005863:	e8 62 e1 ff ff       	call   c00039ca <store_xdir>
c0005868:	85 c0                	test   eax,eax
c000586a:	75 0d                	jne    c0005879 <f_sync+0x167>
c000586c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005870:	e8 00 eb ff ff       	call   c0004375 <sync_fs>
c0005875:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	56                   	push   esi
c0005881:	e8 2f 2a 00 00       	call   c00082b5 <ff_memfree>
c0005886:	83 c4 10             	add    esp,0x10
c0005889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000588d:	eb 59                	jmp    c00058e8 <f_sync+0x1d6>
c000588f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005892:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005895:	e8 b0 c9 ff ff       	call   c000224a <move_window>
c000589a:	85 c0                	test   eax,eax
c000589c:	75 4a                	jne    c00058e8 <f_sync+0x1d6>
c000589e:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00058a1:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00058a5:	89 f2                	mov    edx,esi
c00058a7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00058aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00058ac:	e8 5f f3 ff ff       	call   c0004c10 <st_clust.isra.1>
c00058b1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058b4:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058b7:	e8 26 c2 ff ff       	call   c0001ae2 <st_dword>
c00058bc:	8d 46 16             	lea    eax,[esi+0x16]
c00058bf:	ba 00 00 21 50       	mov    edx,0x50210000
c00058c4:	e8 19 c2 ff ff       	call   c0001ae2 <st_dword>
c00058c9:	8d 46 12             	lea    eax,[esi+0x12]
c00058cc:	31 d2                	xor    edx,edx
c00058ce:	e8 0b c2 ff ff       	call   c0001ade <st_word>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058df:	e8 91 ea ff ff       	call   c0004375 <sync_fs>
c00058e4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058e8:	83 c4 64             	add    esp,0x64
c00058eb:	5b                   	pop    ebx
c00058ec:	5e                   	pop    esi
c00058ed:	c3                   	ret    

c00058ee <f_close>:
c00058ee:	53                   	push   ebx
c00058ef:	83 ec 24             	sub    esp,0x24
c00058f2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058f6:	53                   	push   ebx
c00058f7:	e8 16 fe ff ff       	call   c0005712 <f_sync>
c00058fc:	83 c4 10             	add    esp,0x10
c00058ff:	85 c0                	test   eax,eax
c0005901:	75 15                	jne    c0005918 <f_close+0x2a>
c0005903:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005907:	89 d8                	mov    eax,ebx
c0005909:	e8 61 c8 ff ff       	call   c000216f <validate>
c000590e:	85 c0                	test   eax,eax
c0005910:	75 06                	jne    c0005918 <f_close+0x2a>
c0005912:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005918:	83 c4 18             	add    esp,0x18
c000591b:	5b                   	pop    ebx
c000591c:	c3                   	ret    

c000591d <f_lseek>:
c000591d:	55                   	push   ebp
c000591e:	57                   	push   edi
c000591f:	56                   	push   esi
c0005920:	53                   	push   ebx
c0005921:	83 ec 3c             	sub    esp,0x3c
c0005924:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005928:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000592c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005930:	89 04 24             	mov    DWORD PTR [esp],eax
c0005933:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005937:	89 d8                	mov    eax,ebx
c0005939:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000593d:	e8 2d c8 ff ff       	call   c000216f <validate>
c0005942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005946:	85 c0                	test   eax,eax
c0005948:	0f 85 7a 04 00 00    	jne    c0005dc8 <f_lseek+0x4ab>
c000594e:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005952:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005956:	85 c0                	test   eax,eax
c0005958:	0f 85 6a 04 00 00    	jne    c0005dc8 <f_lseek+0x4ab>
c000595e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005962:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005965:	74 0c                	je     c0005973 <f_lseek+0x56>
c0005967:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000596a:	85 c0                	test   eax,eax
c000596c:	75 1f                	jne    c000598d <f_lseek+0x70>
c000596e:	e9 b5 01 00 00       	jmp    c0005b28 <f_lseek+0x20b>
c0005973:	83 c9 ff             	or     ecx,0xffffffff
c0005976:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005979:	89 d8                	mov    eax,ebx
c000597b:	e8 e3 d3 ff ff       	call   c0002d63 <fill_last_frag>
c0005980:	85 c0                	test   eax,eax
c0005982:	74 e3                	je     c0005967 <f_lseek+0x4a>
c0005984:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005988:	e9 3b 04 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c000598d:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005992:	0f 85 ac 00 00 00    	jne    c0005a44 <f_lseek+0x127>
c0005998:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000599c:	0f 85 a2 00 00 00    	jne    c0005a44 <f_lseek+0x127>
c00059a2:	8d 78 04             	lea    edi,[eax+0x4]
c00059a5:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00059a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00059aa:	be 02 00 00 00       	mov    esi,0x2
c00059af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059b3:	85 ed                	test   ebp,ebp
c00059b5:	74 73                	je     c0005a2a <f_lseek+0x10d>
c00059b7:	89 e9                	mov    ecx,ebp
c00059b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059c0:	ff 04 24             	inc    DWORD PTR [esp]
c00059c3:	89 ca                	mov    edx,ecx
c00059c5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059c9:	89 d8                	mov    eax,ebx
c00059cb:	e8 02 d4 ff ff       	call   c0002dd2 <get_fat>
c00059d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059d4:	83 f8 01             	cmp    eax,0x1
c00059d7:	77 11                	ja     c00059ea <f_lseek+0xcd>
c00059d9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059dd:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059e5:	e9 de 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c00059ea:	83 f8 ff             	cmp    eax,0xffffffff
c00059ed:	75 11                	jne    c0005a00 <f_lseek+0xe3>
c00059ef:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059f3:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059fb:	e9 c8 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c0005a00:	8d 51 01             	lea    edx,[ecx+0x1]
c0005a03:	89 c1                	mov    ecx,eax
c0005a05:	39 c2                	cmp    edx,eax
c0005a07:	74 b7                	je     c00059c0 <f_lseek+0xa3>
c0005a09:	83 c6 02             	add    esi,0x2
c0005a0c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005a10:	72 0b                	jb     c0005a1d <f_lseek+0x100>
c0005a12:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a15:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a18:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a1a:	83 c7 08             	add    edi,0x8
c0005a1d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a21:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a24:	76 04                	jbe    c0005a2a <f_lseek+0x10d>
c0005a26:	89 c5                	mov    ebp,eax
c0005a28:	eb 8d                	jmp    c00059b7 <f_lseek+0x9a>
c0005a2a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a2d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a31:	89 30                	mov    DWORD PTR [eax],esi
c0005a33:	0f 87 87 03 00 00    	ja     c0005dc0 <f_lseek+0x4a3>
c0005a39:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a3f:	e9 84 03 00 00       	jmp    c0005dc8 <f_lseek+0x4ab>
c0005a44:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a56:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a5d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a61:	73 0f                	jae    c0005a72 <f_lseek+0x155>
c0005a63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a7a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a7d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a84:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a88:	0f 84 3a 03 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005a8e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a92:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a96:	83 c6 ff             	add    esi,0xffffffff
c0005a99:	89 d8                	mov    eax,ebx
c0005a9b:	83 d7 ff             	adc    edi,0xffffffff
c0005a9e:	89 f2                	mov    edx,esi
c0005aa0:	89 f9                	mov    ecx,edi
c0005aa2:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005aa6:	89 34 24             	mov    DWORD PTR [esp],esi
c0005aa9:	e8 78 c2 ff ff       	call   c0001d26 <clmt_clust>
c0005aae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ab2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ab5:	89 c2                	mov    edx,eax
c0005ab7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005abb:	89 c8                	mov    eax,ecx
c0005abd:	e8 43 c2 ff ff       	call   c0001d05 <clst2sect>
c0005ac2:	89 d7                	mov    edi,edx
c0005ac4:	09 c7                	or     edi,eax
c0005ac6:	0f 84 0d ff ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005acc:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ad0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ad6:	0f 84 ec 02 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005adc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ae0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ae4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ae7:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005aeb:	0f ac fe 09          	shrd   esi,edi,0x9
c0005aef:	4d                   	dec    ebp
c0005af0:	31 ff                	xor    edi,edi
c0005af2:	21 ee                	and    esi,ebp
c0005af4:	01 c6                	add    esi,eax
c0005af6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005af9:	11 d7                	adc    edi,edx
c0005afb:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005afe:	39 fa                	cmp    edx,edi
c0005b00:	75 08                	jne    c0005b0a <f_lseek+0x1ed>
c0005b02:	39 f0                	cmp    eax,esi
c0005b04:	0f 84 be 02 00 00    	je     c0005dc8 <f_lseek+0x4ab>
c0005b0a:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005b0d:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005b11:	0f 89 80 02 00 00    	jns    c0005d97 <f_lseek+0x47a>
c0005b17:	83 ec 0c             	sub    esp,0xc
c0005b1a:	6a 01                	push   0x1
c0005b1c:	52                   	push   edx
c0005b1d:	50                   	push   eax
c0005b1e:	55                   	push   ebp
c0005b1f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b23:	e9 5a 02 00 00       	jmp    c0005d82 <f_lseek+0x465>
c0005b28:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b2c:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b2f:	74 16                	je     c0005b47 <f_lseek+0x22a>
c0005b31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b36:	76 0f                	jbe    c0005b47 <f_lseek+0x22a>
c0005b38:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b47:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b4d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b50:	89 c7                	mov    edi,eax
c0005b52:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b56:	73 0d                	jae    c0005b65 <f_lseek+0x248>
c0005b58:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b5c:	75 07                	jne    c0005b65 <f_lseek+0x248>
c0005b5e:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b68:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b6b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b6f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b76:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b7d:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b80:	75 09                	jne    c0005b8b <f_lseek+0x26e>
c0005b82:	31 f6                	xor    esi,esi
c0005b84:	31 ff                	xor    edi,edi
c0005b86:	e9 af 01 00 00       	jmp    c0005d3a <f_lseek+0x41d>
c0005b8b:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b8f:	89 d7                	mov    edi,edx
c0005b91:	c1 e1 09             	shl    ecx,0x9
c0005b94:	09 c7                	or     edi,eax
c0005b96:	89 cd                	mov    ebp,ecx
c0005b98:	74 6d                	je     c0005c07 <f_lseek+0x2ea>
c0005b9a:	83 c0 ff             	add    eax,0xffffffff
c0005b9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba1:	83 d2 ff             	adc    edx,0xffffffff
c0005ba4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bab:	83 c0 ff             	add    eax,0xffffffff
c0005bae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005bb2:	83 d2 ff             	adc    edx,0xffffffff
c0005bb5:	31 ff                	xor    edi,edi
c0005bb7:	57                   	push   edi
c0005bb8:	51                   	push   ecx
c0005bb9:	52                   	push   edx
c0005bba:	50                   	push   eax
c0005bbb:	e8 bc c8 01 00       	call   c002247c <__udivdi3>
c0005bc0:	83 c4 10             	add    esp,0x10
c0005bc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bcb:	57                   	push   edi
c0005bcc:	55                   	push   ebp
c0005bcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd5:	e8 a2 c8 01 00       	call   c002247c <__udivdi3>
c0005bda:	83 c4 10             	add    esp,0x10
c0005bdd:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005be1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005be5:	19 d1                	sbb    ecx,edx
c0005be7:	72 1e                	jb     c0005c07 <f_lseek+0x2ea>
c0005be9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bed:	89 e9                	mov    ecx,ebp
c0005bef:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bf2:	f7 d9                	neg    ecx
c0005bf4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bf7:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bfb:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bfe:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005c01:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005c05:	eb 28                	jmp    c0005c2f <f_lseek+0x312>
c0005c07:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005c0a:	85 c0                	test   eax,eax
c0005c0c:	75 1e                	jne    c0005c2c <f_lseek+0x30f>
c0005c0e:	31 d2                	xor    edx,edx
c0005c10:	89 d8                	mov    eax,ebx
c0005c12:	e8 a9 d4 ff ff       	call   c00030c0 <create_chain>
c0005c17:	83 f8 01             	cmp    eax,0x1
c0005c1a:	0f 84 b9 fd ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005c20:	83 f8 ff             	cmp    eax,0xffffffff
c0005c23:	0f 84 c6 fd ff ff    	je     c00059ef <f_lseek+0xd2>
c0005c29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c2c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c2f:	85 c0                	test   eax,eax
c0005c31:	0f 84 4b ff ff ff    	je     c0005b82 <f_lseek+0x265>
c0005c37:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c43:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c4a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c4d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c50:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c54:	0f 83 9d 00 00 00    	jae    c0005cf7 <f_lseek+0x3da>
c0005c5a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c5e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c62:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c65:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c69:	01 f2                	add    edx,esi
c0005c6b:	11 f9                	adc    ecx,edi
c0005c6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c75:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c78:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c7b:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c7e:	f6 c1 02             	test   cl,0x2
c0005c81:	74 35                	je     c0005cb8 <f_lseek+0x39b>
c0005c83:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c87:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c8a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c8d:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c91:	73 16                	jae    c0005ca9 <f_lseek+0x38c>
c0005c93:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c97:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c9b:	88 ca                	mov    dl,cl
c0005c9d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005ca0:	83 ca 40             	or     edx,0x40
c0005ca3:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ca6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ca9:	89 c2                	mov    edx,eax
c0005cab:	89 d8                	mov    eax,ebx
c0005cad:	e8 0e d4 ff ff       	call   c00030c0 <create_chain>
c0005cb2:	85 c0                	test   eax,eax
c0005cb4:	75 0b                	jne    c0005cc1 <f_lseek+0x3a4>
c0005cb6:	eb 30                	jmp    c0005ce8 <f_lseek+0x3cb>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	89 d8                	mov    eax,ebx
c0005cbc:	e8 11 d1 ff ff       	call   c0002dd2 <get_fat>
c0005cc1:	83 f8 ff             	cmp    eax,0xffffffff
c0005cc4:	0f 84 25 fd ff ff    	je     c00059ef <f_lseek+0xd2>
c0005cca:	83 f8 01             	cmp    eax,0x1
c0005ccd:	0f 86 06 fd ff ff    	jbe    c00059d9 <f_lseek+0xbc>
c0005cd3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cd7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cda:	0f 86 f9 fc ff ff    	jbe    c00059d9 <f_lseek+0xbc>
c0005ce0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ce3:	e9 5b ff ff ff       	jmp    c0005c43 <f_lseek+0x326>
c0005ce8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cf7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cfa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cfe:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005d01:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005d04:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005d07:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005d0d:	0f 84 6f fe ff ff    	je     c0005b82 <f_lseek+0x265>
c0005d13:	89 c2                	mov    edx,eax
c0005d15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d19:	e8 e7 bf ff ff       	call   c0001d05 <clst2sect>
c0005d1e:	89 d7                	mov    edi,edx
c0005d20:	09 c7                	or     edi,eax
c0005d22:	0f 84 b1 fc ff ff    	je     c00059d9 <f_lseek+0xbc>
c0005d28:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d2f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d33:	c1 ef 09             	shr    edi,0x9
c0005d36:	01 c6                	add    esi,eax
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d40:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d43:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d46:	19 d1                	sbb    ecx,edx
c0005d48:	73 0a                	jae    c0005d54 <f_lseek+0x437>
c0005d4a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d4d:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d50:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d54:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d59:	74 6d                	je     c0005dc8 <f_lseek+0x4ab>
c0005d5b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d61:	39 fa                	cmp    edx,edi
c0005d63:	75 04                	jne    c0005d69 <f_lseek+0x44c>
c0005d65:	39 f0                	cmp    eax,esi
c0005d67:	74 5f                	je     c0005dc8 <f_lseek+0x4ab>
c0005d69:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d6c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d70:	79 25                	jns    c0005d97 <f_lseek+0x47a>
c0005d72:	83 ec 0c             	sub    esp,0xc
c0005d75:	6a 01                	push   0x1
c0005d77:	52                   	push   edx
c0005d78:	50                   	push   eax
c0005d79:	55                   	push   ebp
c0005d7a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d7e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d82:	50                   	push   eax
c0005d83:	e8 af bc ff ff       	call   c0001a37 <disk_write>
c0005d88:	83 c4 20             	add    esp,0x20
c0005d8b:	85 c0                	test   eax,eax
c0005d8d:	0f 85 5c fc ff ff    	jne    c00059ef <f_lseek+0xd2>
c0005d93:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d97:	83 ec 0c             	sub    esp,0xc
c0005d9a:	6a 01                	push   0x1
c0005d9c:	57                   	push   edi
c0005d9d:	56                   	push   esi
c0005d9e:	55                   	push   ebp
c0005d9f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005da3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005da7:	50                   	push   eax
c0005da8:	e8 74 bc ff ff       	call   c0001a21 <disk_read>
c0005dad:	83 c4 20             	add    esp,0x20
c0005db0:	85 c0                	test   eax,eax
c0005db2:	0f 85 37 fc ff ff    	jne    c00059ef <f_lseek+0xd2>
c0005db8:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005dbb:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dbe:	eb 08                	jmp    c0005dc8 <f_lseek+0x4ab>
c0005dc0:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005dc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dcc:	83 c4 3c             	add    esp,0x3c
c0005dcf:	5b                   	pop    ebx
c0005dd0:	5e                   	pop    esi
c0005dd1:	5f                   	pop    edi
c0005dd2:	5d                   	pop    ebp
c0005dd3:	c3                   	ret    

c0005dd4 <f_opendir>:
c0005dd4:	56                   	push   esi
c0005dd5:	b8 09 00 00 00       	mov    eax,0x9
c0005dda:	53                   	push   ebx
c0005ddb:	83 ec 24             	sub    esp,0x24
c0005dde:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005de2:	85 db                	test   ebx,ebx
c0005de4:	0f 84 e6 00 00 00    	je     c0005ed0 <f_opendir+0xfc>
c0005dea:	31 c9                	xor    ecx,ecx
c0005dec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005df0:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005df4:	e8 03 c7 ff ff       	call   c00024fc <mount_volume>
c0005df9:	85 c0                	test   eax,eax
c0005dfb:	0f 85 c9 00 00 00    	jne    c0005eca <f_opendir+0xf6>
c0005e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e05:	83 ec 0c             	sub    esp,0xc
c0005e08:	89 03                	mov    DWORD PTR [ebx],eax
c0005e0a:	68 60 04 00 00       	push   0x460
c0005e0f:	e8 8b 24 00 00       	call   c000829f <ff_memalloc>
c0005e14:	83 c4 10             	add    esp,0x10
c0005e17:	89 c6                	mov    esi,eax
c0005e19:	b8 11 00 00 00       	mov    eax,0x11
c0005e1e:	85 f6                	test   esi,esi
c0005e20:	0f 84 aa 00 00 00    	je     c0005ed0 <f_opendir+0xfc>
c0005e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e30:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e33:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e3a:	89 d8                	mov    eax,ebx
c0005e3c:	e8 31 ee ff ff       	call   c0004c72 <follow_path>
c0005e41:	85 c0                	test   eax,eax
c0005e43:	75 61                	jne    c0005ea6 <f_opendir+0xd2>
c0005e45:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e49:	78 46                	js     c0005e91 <f_opendir+0xbd>
c0005e4b:	b8 05 00 00 00       	mov    eax,0x5
c0005e50:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e54:	74 50                	je     c0005ea6 <f_opendir+0xd2>
c0005e56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e5a:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e5c:	3c 04                	cmp    al,0x4
c0005e5e:	75 26                	jne    c0005e86 <f_opendir+0xb2>
c0005e60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e63:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e66:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e69:	30 d2                	xor    dl,dl
c0005e6b:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e6f:	09 c2                	or     edx,eax
c0005e71:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e74:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e77:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e7a:	89 da                	mov    edx,ebx
c0005e7c:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e7f:	e8 b4 ed ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0005e84:	eb 0b                	jmp    c0005e91 <f_opendir+0xbd>
c0005e86:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e89:	e8 59 ed ff ff       	call   c0004be7 <ld_clust.isra.0>
c0005e8e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e95:	31 d2                	xor    edx,edx
c0005e97:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e9b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e9f:	89 d8                	mov    eax,ebx
c0005ea1:	e8 22 d1 ff ff       	call   c0002fc8 <dir_sdi>
c0005ea6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eaa:	83 ec 0c             	sub    esp,0xc
c0005ead:	56                   	push   esi
c0005eae:	e8 02 24 00 00       	call   c00082b5 <ff_memfree>
c0005eb3:	83 c4 10             	add    esp,0x10
c0005eb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eba:	83 f8 04             	cmp    eax,0x4
c0005ebd:	74 06                	je     c0005ec5 <f_opendir+0xf1>
c0005ebf:	85 c0                	test   eax,eax
c0005ec1:	74 0d                	je     c0005ed0 <f_opendir+0xfc>
c0005ec3:	eb 05                	jmp    c0005eca <f_opendir+0xf6>
c0005ec5:	b8 05 00 00 00       	mov    eax,0x5
c0005eca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed0:	83 c4 24             	add    esp,0x24
c0005ed3:	5b                   	pop    ebx
c0005ed4:	5e                   	pop    esi
c0005ed5:	c3                   	ret    

c0005ed6 <f_closedir>:
c0005ed6:	53                   	push   ebx
c0005ed7:	83 ec 18             	sub    esp,0x18
c0005eda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ede:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ee2:	89 d8                	mov    eax,ebx
c0005ee4:	e8 86 c2 ff ff       	call   c000216f <validate>
c0005ee9:	85 c0                	test   eax,eax
c0005eeb:	75 06                	jne    c0005ef3 <f_closedir+0x1d>
c0005eed:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ef3:	83 c4 18             	add    esp,0x18
c0005ef6:	5b                   	pop    ebx
c0005ef7:	c3                   	ret    

c0005ef8 <f_readdir>:
c0005ef8:	57                   	push   edi
c0005ef9:	56                   	push   esi
c0005efa:	53                   	push   ebx
c0005efb:	83 ec 20             	sub    esp,0x20
c0005efe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f02:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005f06:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005f0a:	89 d8                	mov    eax,ebx
c0005f0c:	e8 5e c2 ff ff       	call   c000216f <validate>
c0005f11:	85 c0                	test   eax,eax
c0005f13:	75 77                	jne    c0005f8c <f_readdir+0x94>
c0005f15:	85 ff                	test   edi,edi
c0005f17:	75 0b                	jne    c0005f24 <f_readdir+0x2c>
c0005f19:	31 d2                	xor    edx,edx
c0005f1b:	89 d8                	mov    eax,ebx
c0005f1d:	e8 a6 d0 ff ff       	call   c0002fc8 <dir_sdi>
c0005f22:	eb 68                	jmp    c0005f8c <f_readdir+0x94>
c0005f24:	83 ec 0c             	sub    esp,0xc
c0005f27:	68 60 04 00 00       	push   0x460
c0005f2c:	e8 6e 23 00 00       	call   c000829f <ff_memalloc>
c0005f31:	83 c4 10             	add    esp,0x10
c0005f34:	89 c6                	mov    esi,eax
c0005f36:	b8 11 00 00 00       	mov    eax,0x11
c0005f3b:	85 f6                	test   esi,esi
c0005f3d:	74 4d                	je     c0005f8c <f_readdir+0x94>
c0005f3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f43:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f4f:	31 d2                	xor    edx,edx
c0005f51:	89 d8                	mov    eax,ebx
c0005f53:	e8 80 d8 ff ff       	call   c00037d8 <dir_read>
c0005f58:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f5d:	75 19                	jne    c0005f78 <f_readdir+0x80>
c0005f5f:	89 fa                	mov    edx,edi
c0005f61:	89 d8                	mov    eax,ebx
c0005f63:	e8 7e ea ff ff       	call   c00049e6 <get_fileinfo>
c0005f68:	31 d2                	xor    edx,edx
c0005f6a:	89 d8                	mov    eax,ebx
c0005f6c:	e8 af d5 ff ff       	call   c0003520 <dir_next>
c0005f71:	83 f8 04             	cmp    eax,0x4
c0005f74:	75 02                	jne    c0005f78 <f_readdir+0x80>
c0005f76:	31 c0                	xor    eax,eax
c0005f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 30 23 00 00       	call   c00082b5 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f8c:	83 c4 20             	add    esp,0x20
c0005f8f:	5b                   	pop    ebx
c0005f90:	5e                   	pop    esi
c0005f91:	5f                   	pop    edi
c0005f92:	c3                   	ret    

c0005f93 <f_stat>:
c0005f93:	57                   	push   edi
c0005f94:	31 c9                	xor    ecx,ecx
c0005f96:	56                   	push   esi
c0005f97:	53                   	push   ebx
c0005f98:	83 ec 50             	sub    esp,0x50
c0005f9b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005fa7:	e8 50 c5 ff ff       	call   c00024fc <mount_volume>
c0005fac:	89 c3                	mov    ebx,eax
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	75 67                	jne    c0006019 <f_stat+0x86>
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	bb 11 00 00 00       	mov    ebx,0x11
c0005fba:	68 60 04 00 00       	push   0x460
c0005fbf:	e8 db 22 00 00       	call   c000829f <ff_memalloc>
c0005fc4:	83 c4 10             	add    esp,0x10
c0005fc7:	89 c6                	mov    esi,eax
c0005fc9:	85 c0                	test   eax,eax
c0005fcb:	74 4c                	je     c0006019 <f_stat+0x86>
c0005fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fd1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fd7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fdd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fe1:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe5:	e8 88 ec ff ff       	call   c0004c72 <follow_path>
c0005fea:	89 c3                	mov    ebx,eax
c0005fec:	85 c0                	test   eax,eax
c0005fee:	75 1d                	jne    c000600d <f_stat+0x7a>
c0005ff0:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005ff5:	78 11                	js     c0006008 <f_stat+0x75>
c0005ff7:	85 ff                	test   edi,edi
c0005ff9:	74 12                	je     c000600d <f_stat+0x7a>
c0005ffb:	89 fa                	mov    edx,edi
c0005ffd:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006001:	e8 e0 e9 ff ff       	call   c00049e6 <get_fileinfo>
c0006006:	eb 05                	jmp    c000600d <f_stat+0x7a>
c0006008:	bb 06 00 00 00       	mov    ebx,0x6
c000600d:	83 ec 0c             	sub    esp,0xc
c0006010:	56                   	push   esi
c0006011:	e8 9f 22 00 00       	call   c00082b5 <ff_memfree>
c0006016:	83 c4 10             	add    esp,0x10
c0006019:	83 c4 50             	add    esp,0x50
c000601c:	89 d8                	mov    eax,ebx
c000601e:	5b                   	pop    ebx
c000601f:	5e                   	pop    esi
c0006020:	5f                   	pop    edi
c0006021:	c3                   	ret    

c0006022 <f_getfree>:
c0006022:	55                   	push   ebp
c0006023:	31 c9                	xor    ecx,ecx
c0006025:	57                   	push   edi
c0006026:	56                   	push   esi
c0006027:	53                   	push   ebx
c0006028:	83 ec 5c             	sub    esp,0x5c
c000602b:	8d 54 24 24          	lea    edx,[esp+0x24]
c000602f:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006033:	e8 c4 c4 ff ff       	call   c00024fc <mount_volume>
c0006038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000603c:	85 c0                	test   eax,eax
c000603e:	0f 85 9d 01 00 00    	jne    c00061e1 <f_getfree+0x1bf>
c0006044:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006048:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000604c:	89 02                	mov    DWORD PTR [edx],eax
c000604e:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006051:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006054:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006057:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000605b:	39 f2                	cmp    edx,esi
c000605d:	77 0b                	ja     c000606a <f_getfree+0x48>
c000605f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006063:	89 10                	mov    DWORD PTR [eax],edx
c0006065:	e9 77 01 00 00       	jmp    c00061e1 <f_getfree+0x1bf>
c000606a:	8a 10                	mov    dl,BYTE PTR [eax]
c000606c:	80 fa 01             	cmp    dl,0x1
c000606f:	75 3a                	jne    c00060ab <f_getfree+0x89>
c0006071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006075:	be 02 00 00 00       	mov    esi,0x2
c000607a:	31 db                	xor    ebx,ebx
c000607c:	89 f2                	mov    edx,esi
c000607e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006082:	e8 4b cd ff ff       	call   c0002dd2 <get_fat>
c0006087:	83 f8 ff             	cmp    eax,0xffffffff
c000608a:	0f 84 28 01 00 00    	je     c00061b8 <f_getfree+0x196>
c0006090:	83 f8 01             	cmp    eax,0x1
c0006093:	0f 84 29 01 00 00    	je     c00061c2 <f_getfree+0x1a0>
c0006099:	83 d3 00             	adc    ebx,0x0
c000609c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a0:	46                   	inc    esi
c00060a1:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00060a4:	77 d6                	ja     c000607c <f_getfree+0x5a>
c00060a6:	e9 25 01 00 00       	jmp    c00061d0 <f_getfree+0x1ae>
c00060ab:	80 fa 04             	cmp    dl,0x4
c00060ae:	0f 85 88 00 00 00    	jne    c000613c <f_getfree+0x11a>
c00060b4:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00060b7:	31 ed                	xor    ebp,ebp
c00060b9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060c4:	31 db                	xor    ebx,ebx
c00060c6:	85 ed                	test   ebp,ebp
c00060c8:	75 3f                	jne    c0006109 <f_getfree+0xe7>
c00060ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060d2:	83 c0 01             	add    eax,0x1
c00060d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060d9:	83 d2 00             	adc    edx,0x0
c00060dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ec:	e8 59 c1 ff ff       	call   c000224a <move_window>
c00060f1:	85 c0                	test   eax,eax
c00060f3:	0f 85 d3 00 00 00    	jne    c00061cc <f_getfree+0x1aa>
c00060f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006101:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006105:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006109:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610d:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006110:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006114:	89 cf                	mov    edi,ecx
c0006116:	85 f6                	test   esi,esi
c0006118:	74 12                	je     c000612c <f_getfree+0x10a>
c000611a:	88 c1                	mov    cl,al
c000611c:	83 e1 01             	and    ecx,0x1
c000611f:	80 f9 01             	cmp    cl,0x1
c0006122:	83 d3 00             	adc    ebx,0x0
c0006125:	d0 e8                	shr    al,1
c0006127:	4e                   	dec    esi
c0006128:	39 fe                	cmp    esi,edi
c000612a:	75 ea                	jne    c0006116 <f_getfree+0xf4>
c000612c:	45                   	inc    ebp
c000612d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006133:	85 f6                	test   esi,esi
c0006135:	75 8f                	jne    c00060c6 <f_getfree+0xa4>
c0006137:	e9 94 00 00 00       	jmp    c00061d0 <f_getfree+0x1ae>
c000613c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000613f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006142:	31 f6                	xor    esi,esi
c0006144:	31 db                	xor    ebx,ebx
c0006146:	85 f6                	test   esi,esi
c0006148:	75 1b                	jne    c0006165 <f_getfree+0x143>
c000614a:	89 d7                	mov    edi,edx
c000614c:	89 cd                	mov    ebp,ecx
c000614e:	83 c7 01             	add    edi,0x1
c0006151:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006155:	83 d5 00             	adc    ebp,0x0
c0006158:	e8 ed c0 ff ff       	call   c000224a <move_window>
c000615d:	85 c0                	test   eax,eax
c000615f:	75 6b                	jne    c00061cc <f_getfree+0x1aa>
c0006161:	89 fa                	mov    edx,edi
c0006163:	89 e9                	mov    ecx,ebp
c0006165:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006169:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000616d:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006171:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006174:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006178:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000617c:	75 11                	jne    c000618f <f_getfree+0x16d>
c000617e:	e8 e9 b8 ff ff       	call   c0001a6c <ld_word>
c0006183:	66 83 f8 01          	cmp    ax,0x1
c0006187:	83 d3 00             	adc    ebx,0x0
c000618a:	83 c6 02             	add    esi,0x2
c000618d:	eb 13                	jmp    c00061a2 <f_getfree+0x180>
c000618f:	e8 e5 b8 ff ff       	call   c0001a79 <ld_dword>
c0006194:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006199:	83 f8 01             	cmp    eax,0x1
c000619c:	83 d3 00             	adc    ebx,0x0
c000619f:	83 c6 04             	add    esi,0x4
c00061a2:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00061a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00061ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00061b0:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00061b4:	75 90                	jne    c0006146 <f_getfree+0x124>
c00061b6:	eb 18                	jmp    c00061d0 <f_getfree+0x1ae>
c00061b8:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061c0:	eb 0e                	jmp    c00061d0 <f_getfree+0x1ae>
c00061c2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061ca:	eb 04                	jmp    c00061d0 <f_getfree+0x1ae>
c00061cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061d0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061d4:	89 18                	mov    DWORD PTR [eax],ebx
c00061d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061da:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061dd:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061e5:	83 c4 5c             	add    esp,0x5c
c00061e8:	5b                   	pop    ebx
c00061e9:	5e                   	pop    esi
c00061ea:	5f                   	pop    edi
c00061eb:	5d                   	pop    ebp
c00061ec:	c3                   	ret    

c00061ed <f_truncate>:
c00061ed:	56                   	push   esi
c00061ee:	53                   	push   ebx
c00061ef:	83 ec 14             	sub    esp,0x14
c00061f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061f6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061fa:	89 d8                	mov    eax,ebx
c00061fc:	e8 6e bf ff ff       	call   c000216f <validate>
c0006201:	89 c6                	mov    esi,eax
c0006203:	85 c0                	test   eax,eax
c0006205:	0f 85 d2 00 00 00    	jne    c00062dd <f_truncate+0xf0>
c000620b:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000620f:	85 f6                	test   esi,esi
c0006211:	0f 85 c6 00 00 00    	jne    c00062dd <f_truncate+0xf0>
c0006217:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000621b:	0f 84 b7 00 00 00    	je     c00062d8 <f_truncate+0xeb>
c0006221:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006224:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006227:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000622a:	89 d1                	mov    ecx,edx
c000622c:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000622f:	0f 83 a8 00 00 00    	jae    c00062dd <f_truncate+0xf0>
c0006235:	09 c2                	or     edx,eax
c0006237:	75 15                	jne    c000624e <f_truncate+0x61>
c0006239:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000623c:	31 c9                	xor    ecx,ecx
c000623e:	89 d8                	mov    eax,ebx
c0006240:	e8 7a d0 ff ff       	call   c00032bf <remove_chain>
c0006245:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000624c:	eb 35                	jmp    c0006283 <f_truncate+0x96>
c000624e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006251:	89 d8                	mov    eax,ebx
c0006253:	e8 7a cb ff ff       	call   c0002dd2 <get_fat>
c0006258:	89 c2                	mov    edx,eax
c000625a:	b8 01 00 00 00       	mov    eax,0x1
c000625f:	83 fa ff             	cmp    edx,0xffffffff
c0006262:	74 1f                	je     c0006283 <f_truncate+0x96>
c0006264:	b8 02 00 00 00       	mov    eax,0x2
c0006269:	83 fa 01             	cmp    edx,0x1
c000626c:	74 15                	je     c0006283 <f_truncate+0x96>
c000626e:	31 c0                	xor    eax,eax
c0006270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006274:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006277:	76 0a                	jbe    c0006283 <f_truncate+0x96>
c0006279:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000627c:	89 d8                	mov    eax,ebx
c000627e:	e8 3c d0 ff ff       	call   c00032bf <remove_chain>
c0006283:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006286:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006289:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000628c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000628f:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006292:	83 ca 40             	or     edx,0x40
c0006295:	85 c0                	test   eax,eax
c0006297:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000629a:	75 35                	jne    c00062d1 <f_truncate+0xe4>
c000629c:	84 d2                	test   dl,dl
c000629e:	79 3d                	jns    c00062dd <f_truncate+0xf0>
c00062a0:	83 ec 0c             	sub    esp,0xc
c00062a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00062a6:	6a 01                	push   0x1
c00062a8:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00062ab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00062ae:	50                   	push   eax
c00062af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00062b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00062b7:	50                   	push   eax
c00062b8:	e8 7a b7 ff ff       	call   c0001a37 <disk_write>
c00062bd:	83 c4 20             	add    esp,0x20
c00062c0:	85 c0                	test   eax,eax
c00062c2:	75 08                	jne    c00062cc <f_truncate+0xdf>
c00062c4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062c8:	31 f6                	xor    esi,esi
c00062ca:	eb 11                	jmp    c00062dd <f_truncate+0xf0>
c00062cc:	b8 01 00 00 00       	mov    eax,0x1
c00062d1:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062d4:	89 c6                	mov    esi,eax
c00062d6:	eb 05                	jmp    c00062dd <f_truncate+0xf0>
c00062d8:	be 07 00 00 00       	mov    esi,0x7
c00062dd:	89 f0                	mov    eax,esi
c00062df:	83 c4 14             	add    esp,0x14
c00062e2:	5b                   	pop    ebx
c00062e3:	5e                   	pop    esi
c00062e4:	c3                   	ret    

c00062e5 <f_unlink>:
c00062e5:	56                   	push   esi
c00062e6:	b9 02 00 00 00       	mov    ecx,0x2
c00062eb:	53                   	push   ebx
c00062ec:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062f6:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062fd:	e8 fa c1 ff ff       	call   c00024fc <mount_volume>
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 55 01 00 00    	jne    c000645f <f_unlink+0x17a>
c000630a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000630e:	83 ec 0c             	sub    esp,0xc
c0006311:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006315:	68 60 04 00 00       	push   0x460
c000631a:	e8 80 1f 00 00       	call   c000829f <ff_memalloc>
c000631f:	83 c4 10             	add    esp,0x10
c0006322:	89 c3                	mov    ebx,eax
c0006324:	b8 11 00 00 00       	mov    eax,0x11
c0006329:	85 db                	test   ebx,ebx
c000632b:	0f 84 2e 01 00 00    	je     c000645f <f_unlink+0x17a>
c0006331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006335:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000633b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000633e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006341:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006348:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634c:	e8 21 e9 ff ff       	call   c0004c72 <follow_path>
c0006351:	85 c0                	test   eax,eax
c0006353:	0f 85 f2 00 00 00    	jne    c000644b <f_unlink+0x166>
c0006359:	b8 06 00 00 00       	mov    eax,0x6
c000635e:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006366:	0f 88 df 00 00 00    	js     c000644b <f_unlink+0x166>
c000636c:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006371:	74 0a                	je     c000637d <f_unlink+0x98>
c0006373:	b8 07 00 00 00       	mov    eax,0x7
c0006378:	e9 ce 00 00 00       	jmp    c000644b <f_unlink+0x166>
c000637d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006381:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006385:	8a 02                	mov    al,BYTE PTR [edx]
c0006387:	3c 04                	cmp    al,0x4
c0006389:	75 12                	jne    c000639d <f_unlink+0xb8>
c000638b:	8d 42 10             	lea    eax,[edx+0x10]
c000638e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006392:	e8 a1 e8 ff ff       	call   c0004c38 <init_alloc_info.isra.2>
c0006397:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000639b:	eb 0e                	jmp    c00063ab <f_unlink+0xc6>
c000639d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00063a4:	e8 3e e8 ff ff       	call   c0004be7 <ld_clust.isra.0>
c00063a9:	89 c6                	mov    esi,eax
c00063ab:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00063b0:	75 12                	jne    c00063c4 <f_unlink+0xdf>
c00063b2:	8d 44 24 48          	lea    eax,[esp+0x48]
c00063b6:	e8 94 d6 ff ff       	call   c0003a4f <dir_remove>
c00063bb:	85 c0                	test   eax,eax
c00063bd:	74 6c                	je     c000642b <f_unlink+0x146>
c00063bf:	e9 87 00 00 00       	jmp    c000644b <f_unlink+0x166>
c00063c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063c8:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063cf:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063d6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063d9:	75 21                	jne    c00063fc <f_unlink+0x117>
c00063db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063e3:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063ea:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063f1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063f5:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063fc:	31 d2                	xor    edx,edx
c00063fe:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006405:	e8 be cb ff ff       	call   c0002fc8 <dir_sdi>
c000640a:	85 c0                	test   eax,eax
c000640c:	75 3d                	jne    c000644b <f_unlink+0x166>
c000640e:	31 d2                	xor    edx,edx
c0006410:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006417:	e8 bc d3 ff ff       	call   c00037d8 <dir_read>
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 84 4f ff ff ff    	je     c0006373 <f_unlink+0x8e>
c0006424:	83 f8 04             	cmp    eax,0x4
c0006427:	75 22                	jne    c000644b <f_unlink+0x166>
c0006429:	eb 87                	jmp    c00063b2 <f_unlink+0xcd>
c000642b:	85 f6                	test   esi,esi
c000642d:	75 0b                	jne    c000643a <f_unlink+0x155>
c000642f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006433:	e8 3d df ff ff       	call   c0004375 <sync_fs>
c0006438:	eb 11                	jmp    c000644b <f_unlink+0x166>
c000643a:	31 c9                	xor    ecx,ecx
c000643c:	89 f2                	mov    edx,esi
c000643e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006442:	e8 78 ce ff ff       	call   c00032bf <remove_chain>
c0006447:	85 c0                	test   eax,eax
c0006449:	74 e4                	je     c000642f <f_unlink+0x14a>
c000644b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000644f:	83 ec 0c             	sub    esp,0xc
c0006452:	53                   	push   ebx
c0006453:	e8 5d 1e 00 00       	call   c00082b5 <ff_memfree>
c0006458:	83 c4 10             	add    esp,0x10
c000645b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000645f:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006465:	5b                   	pop    ebx
c0006466:	5e                   	pop    esi
c0006467:	c3                   	ret    

c0006468 <f_mkdir>:
c0006468:	57                   	push   edi
c0006469:	b9 02 00 00 00       	mov    ecx,0x2
c000646e:	56                   	push   esi
c000646f:	53                   	push   ebx
c0006470:	83 c4 80             	add    esp,0xffffff80
c0006473:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006477:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000647e:	e8 79 c0 ff ff       	call   c00024fc <mount_volume>
c0006483:	89 c3                	mov    ebx,eax
c0006485:	85 c0                	test   eax,eax
c0006487:	0f 85 fe 01 00 00    	jne    c000668b <f_mkdir+0x223>
c000648d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006491:	bb 11 00 00 00       	mov    ebx,0x11
c0006496:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000649a:	83 ec 0c             	sub    esp,0xc
c000649d:	68 60 04 00 00       	push   0x460
c00064a2:	e8 f8 1d 00 00       	call   c000829f <ff_memalloc>
c00064a7:	83 c4 10             	add    esp,0x10
c00064aa:	89 c7                	mov    edi,eax
c00064ac:	85 c0                	test   eax,eax
c00064ae:	0f 84 d7 01 00 00    	je     c000668b <f_mkdir+0x223>
c00064b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b8:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064be:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064c4:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064cb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064cf:	e8 9e e7 ff ff       	call   c0004c72 <follow_path>
c00064d4:	89 c3                	mov    ebx,eax
c00064d6:	85 c0                	test   eax,eax
c00064d8:	74 3e                	je     c0006518 <f_mkdir+0xb0>
c00064da:	83 f8 04             	cmp    eax,0x4
c00064dd:	75 3e                	jne    c000651d <f_mkdir+0xb5>
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ed:	e8 ce cb ff ff       	call   c00030c0 <create_chain>
c00064f2:	89 c6                	mov    esi,eax
c00064f4:	85 c0                	test   eax,eax
c00064f6:	74 0c                	je     c0006504 <f_mkdir+0x9c>
c00064f8:	bb 02 00 00 00       	mov    ebx,0x2
c00064fd:	83 f8 01             	cmp    eax,0x1
c0006500:	74 07                	je     c0006509 <f_mkdir+0xa1>
c0006502:	eb 2a                	jmp    c000652e <f_mkdir+0xc6>
c0006504:	bb 07 00 00 00       	mov    ebx,0x7
c0006509:	31 c9                	xor    ecx,ecx
c000650b:	89 f2                	mov    edx,esi
c000650d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006511:	e8 a9 cd ff ff       	call   c00032bf <remove_chain>
c0006516:	eb 05                	jmp    c000651d <f_mkdir+0xb5>
c0006518:	bb 08 00 00 00       	mov    ebx,0x8
c000651d:	83 ec 0c             	sub    esp,0xc
c0006520:	57                   	push   edi
c0006521:	e8 8f 1d 00 00       	call   c00082b5 <ff_memfree>
c0006526:	83 c4 10             	add    esp,0x10
c0006529:	e9 5d 01 00 00       	jmp    c000668b <f_mkdir+0x223>
c000652e:	bb 01 00 00 00       	mov    ebx,0x1
c0006533:	83 f8 ff             	cmp    eax,0xffffffff
c0006536:	74 d1                	je     c0006509 <f_mkdir+0xa1>
c0006538:	89 f2                	mov    edx,esi
c000653a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653e:	e8 c4 ce ff ff       	call   c0003407 <dir_clear>
c0006543:	89 c3                	mov    ebx,eax
c0006545:	85 c0                	test   eax,eax
c0006547:	75 c0                	jne    c0006509 <f_mkdir+0xa1>
c0006549:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006550:	74 69                	je     c00065bb <f_mkdir+0x153>
c0006552:	b9 0b 00 00 00       	mov    ecx,0xb
c0006557:	83 c0 54             	add    eax,0x54
c000655a:	ba 20 00 00 00       	mov    edx,0x20
c000655f:	e8 9c b5 ff ff       	call   c0001b00 <mem_set>
c0006564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006568:	ba 00 00 21 50       	mov    edx,0x50210000
c000656d:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006571:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006575:	83 c0 6a             	add    eax,0x6a
c0006578:	e8 65 b5 ff ff       	call   c0001ae2 <st_dword>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	89 f1                	mov    ecx,esi
c0006583:	8d 50 54             	lea    edx,[eax+0x54]
c0006586:	e8 85 e6 ff ff       	call   c0004c10 <st_clust.isra.1>
c000658b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658f:	b9 20 00 00 00       	mov    ecx,0x20
c0006594:	8d 50 54             	lea    edx,[eax+0x54]
c0006597:	83 c0 74             	add    eax,0x74
c000659a:	e8 4c b5 ff ff       	call   c0001aeb <mem_cpy>
c000659f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00065a7:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00065ab:	8d 50 74             	lea    edx,[eax+0x74]
c00065ae:	e8 5d e6 ff ff       	call   c0004c10 <st_clust.isra.1>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065bb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065bf:	e8 2f db ff ff       	call   c00040f3 <dir_register>
c00065c4:	89 c3                	mov    ebx,eax
c00065c6:	85 c0                	test   eax,eax
c00065c8:	0f 85 3b ff ff ff    	jne    c0006509 <f_mkdir+0xa1>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065d5:	75 74                	jne    c000664b <f_mkdir+0x1e3>
c00065d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065da:	ba 00 00 21 50       	mov    edx,0x50210000
c00065df:	83 c0 0c             	add    eax,0xc
c00065e2:	e8 fb b4 ff ff       	call   c0001ae2 <st_dword>
c00065e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065eb:	89 f2                	mov    edx,esi
c00065ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f0:	83 c0 34             	add    eax,0x34
c00065f3:	e8 ea b4 ff ff       	call   c0001ae2 <st_dword>
c00065f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065fc:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006600:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006603:	c1 e2 09             	shl    edx,0x9
c0006606:	83 c0 38             	add    eax,0x38
c0006609:	e8 d4 b4 ff ff       	call   c0001ae2 <st_dword>
c000660e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006612:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006616:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006619:	c1 e2 09             	shl    edx,0x9
c000661c:	83 c0 28             	add    eax,0x28
c000661f:	e8 be b4 ff ff       	call   c0001ae2 <st_dword>
c0006624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006628:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000662b:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000662f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006632:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006636:	8d 44 24 34          	lea    eax,[esp+0x34]
c000663a:	e8 8b d3 ff ff       	call   c00039ca <store_xdir>
c000663f:	89 c3                	mov    ebx,eax
c0006641:	85 c0                	test   eax,eax
c0006643:	0f 85 d4 fe ff ff    	jne    c000651d <f_mkdir+0xb5>
c0006649:	eb 30                	jmp    c000667b <f_mkdir+0x213>
c000664b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	83 c0 16             	add    eax,0x16
c0006657:	e8 86 b4 ff ff       	call   c0001ae2 <st_dword>
c000665c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006660:	89 f1                	mov    ecx,esi
c0006662:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006666:	e8 a5 e5 ff ff       	call   c0004c10 <st_clust.isra.1>
c000666b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000666f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006677:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000667b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667f:	e8 f1 dc ff ff       	call   c0004375 <sync_fs>
c0006684:	89 c3                	mov    ebx,eax
c0006686:	e9 92 fe ff ff       	jmp    c000651d <f_mkdir+0xb5>
c000668b:	83 ec 80             	sub    esp,0xffffff80
c000668e:	89 d8                	mov    eax,ebx
c0006690:	5b                   	pop    ebx
c0006691:	5e                   	pop    esi
c0006692:	5f                   	pop    edi
c0006693:	c3                   	ret    

c0006694 <f_rename>:
c0006694:	55                   	push   ebp
c0006695:	57                   	push   edi
c0006696:	56                   	push   esi
c0006697:	53                   	push   ebx
c0006698:	81 ec fc 00 00 00    	sub    esp,0xfc
c000669e:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00066a5:	e8 a4 b9 ff ff       	call   c000204e <get_ldnumber>
c00066aa:	b9 02 00 00 00       	mov    ecx,0x2
c00066af:	8d 54 24 14          	lea    edx,[esp+0x14]
c00066b3:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066ba:	e8 3d be ff ff       	call   c00024fc <mount_volume>
c00066bf:	85 c0                	test   eax,eax
c00066c1:	0f 85 b5 02 00 00    	jne    c000697c <f_rename+0x2e8>
c00066c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066cb:	83 ec 0c             	sub    esp,0xc
c00066ce:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066d2:	68 60 04 00 00       	push   0x460
c00066d7:	e8 c3 1b 00 00       	call   c000829f <ff_memalloc>
c00066dc:	83 c4 10             	add    esp,0x10
c00066df:	89 c3                	mov    ebx,eax
c00066e1:	b8 11 00 00 00       	mov    eax,0x11
c00066e6:	85 db                	test   ebx,ebx
c00066e8:	0f 84 8e 02 00 00    	je     c000697c <f_rename+0x2e8>
c00066ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066f2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066f8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066fb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066fe:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006705:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006709:	e8 64 e5 ff ff       	call   c0004c72 <follow_path>
c000670e:	85 c0                	test   eax,eax
c0006710:	0f 85 52 02 00 00    	jne    c0006968 <f_rename+0x2d4>
c0006716:	b8 06 00 00 00       	mov    eax,0x6
c000671b:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006723:	0f 85 3f 02 00 00    	jne    c0006968 <f_rename+0x2d4>
c0006729:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000672d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006730:	0f 85 05 01 00 00    	jne    c000683b <f_rename+0x1a7>
c0006736:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006739:	b9 40 00 00 00       	mov    ecx,0x40
c000673e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006742:	e8 a4 b3 ff ff       	call   c0001aeb <mem_cpy>
c0006747:	b9 4c 00 00 00       	mov    ecx,0x4c
c000674c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006750:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006757:	e8 8f b3 ff ff       	call   c0001aeb <mem_cpy>
c000675c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006763:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000676a:	e8 03 e5 ff ff       	call   c0004c72 <follow_path>
c000676f:	85 c0                	test   eax,eax
c0006771:	75 29                	jne    c000679c <f_rename+0x108>
c0006773:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006777:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000677e:	74 0a                	je     c000678a <f_rename+0xf6>
c0006780:	b8 08 00 00 00       	mov    eax,0x8
c0006785:	e9 de 01 00 00       	jmp    c0006968 <f_rename+0x2d4>
c000678a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006791:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006798:	75 e6                	jne    c0006780 <f_rename+0xec>
c000679a:	eb 09                	jmp    c00067a5 <f_rename+0x111>
c000679c:	83 f8 04             	cmp    eax,0x4
c000679f:	0f 85 c3 01 00 00    	jne    c0006968 <f_rename+0x2d4>
c00067a5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ac:	e8 42 d9 ff ff       	call   c00040f3 <dir_register>
c00067b1:	85 c0                	test   eax,eax
c00067b3:	0f 85 af 01 00 00    	jne    c0006968 <f_rename+0x2d4>
c00067b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067bd:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067c0:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067c3:	89 c5                	mov    ebp,eax
c00067c5:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067cc:	8d 46 24             	lea    eax,[esi+0x24]
c00067cf:	e8 98 b2 ff ff       	call   c0001a6c <ld_word>
c00067d4:	b9 40 00 00 00       	mov    ecx,0x40
c00067d9:	89 c7                	mov    edi,eax
c00067db:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067df:	89 f0                	mov    eax,esi
c00067e1:	e8 05 b3 ff ff       	call   c0001aeb <mem_cpy>
c00067e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ea:	89 e9                	mov    ecx,ebp
c00067ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ef:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067f2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067fa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067fd:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006800:	0f b7 d7             	movzx  edx,di
c0006803:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006806:	83 c0 24             	add    eax,0x24
c0006809:	e8 d0 b2 ff ff       	call   c0001ade <st_word>
c000680e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006812:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006815:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006818:	a8 10                	test   al,0x10
c000681a:	75 06                	jne    c0006822 <f_rename+0x18e>
c000681c:	83 c8 20             	or     eax,0x20
c000681f:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006822:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006829:	e8 9c d1 ff ff       	call   c00039ca <store_xdir>
c000682e:	85 c0                	test   eax,eax
c0006830:	0f 84 1c 01 00 00    	je     c0006952 <f_rename+0x2be>
c0006836:	e9 2d 01 00 00       	jmp    c0006968 <f_rename+0x2d4>
c000683b:	b9 20 00 00 00       	mov    ecx,0x20
c0006840:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006847:	8d 44 24 18          	lea    eax,[esp+0x18]
c000684b:	e8 9b b2 ff ff       	call   c0001aeb <mem_cpy>
c0006850:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006855:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006859:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006860:	e8 86 b2 ff ff       	call   c0001aeb <mem_cpy>
c0006865:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000686c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006873:	e8 fa e3 ff ff       	call   c0004c72 <follow_path>
c0006878:	85 c0                	test   eax,eax
c000687a:	75 27                	jne    c00068a3 <f_rename+0x20f>
c000687c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006880:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006887:	0f 85 f3 fe ff ff    	jne    c0006780 <f_rename+0xec>
c000688d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006894:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000689b:	0f 85 df fe ff ff    	jne    c0006780 <f_rename+0xec>
c00068a1:	eb 09                	jmp    c00068ac <f_rename+0x218>
c00068a3:	83 f8 04             	cmp    eax,0x4
c00068a6:	0f 85 bc 00 00 00    	jne    c0006968 <f_rename+0x2d4>
c00068ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068b3:	e8 3b d8 ff ff       	call   c00040f3 <dir_register>
c00068b8:	85 c0                	test   eax,eax
c00068ba:	0f 85 a8 00 00 00    	jne    c0006968 <f_rename+0x2d4>
c00068c0:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068c7:	b9 13 00 00 00       	mov    ecx,0x13
c00068cc:	8d 46 0d             	lea    eax,[esi+0xd]
c00068cf:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068d3:	e8 13 b2 ff ff       	call   c0001aeb <mem_cpy>
c00068d8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068dc:	a8 10                	test   al,0x10
c00068de:	75 03                	jne    c00068e3 <f_rename+0x24f>
c00068e0:	83 c8 20             	or     eax,0x20
c00068e3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ee:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068f2:	74 5e                	je     c0006952 <f_rename+0x2be>
c00068f4:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068fb:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068ff:	74 51                	je     c0006952 <f_rename+0x2be>
c0006901:	89 f2                	mov    edx,esi
c0006903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006907:	8a 07                	mov    al,BYTE PTR [edi]
c0006909:	e8 d9 e2 ff ff       	call   c0004be7 <ld_clust.isra.0>
c000690e:	89 c2                	mov    edx,eax
c0006910:	89 f8                	mov    eax,edi
c0006912:	e8 ee b3 ff ff       	call   c0001d05 <clst2sect>
c0006917:	89 c6                	mov    esi,eax
c0006919:	89 d1                	mov    ecx,edx
c000691b:	b8 02 00 00 00       	mov    eax,0x2
c0006920:	09 f2                	or     edx,esi
c0006922:	74 44                	je     c0006968 <f_rename+0x2d4>
c0006924:	89 f2                	mov    edx,esi
c0006926:	89 f8                	mov    eax,edi
c0006928:	e8 1d b9 ff ff       	call   c000224a <move_window>
c000692d:	85 c0                	test   eax,eax
c000692f:	75 37                	jne    c0006968 <f_rename+0x2d4>
c0006931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006935:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006939:	75 17                	jne    c0006952 <f_rename+0x2be>
c000693b:	8d 50 74             	lea    edx,[eax+0x74]
c000693e:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006945:	e8 c6 e2 ff ff       	call   c0004c10 <st_clust.isra.1>
c000694a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000694e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006952:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006956:	e8 f4 d0 ff ff       	call   c0003a4f <dir_remove>
c000695b:	85 c0                	test   eax,eax
c000695d:	75 09                	jne    c0006968 <f_rename+0x2d4>
c000695f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006963:	e8 0d da ff ff       	call   c0004375 <sync_fs>
c0006968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000696c:	83 ec 0c             	sub    esp,0xc
c000696f:	53                   	push   ebx
c0006970:	e8 40 19 00 00       	call   c00082b5 <ff_memfree>
c0006975:	83 c4 10             	add    esp,0x10
c0006978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000697c:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006982:	5b                   	pop    ebx
c0006983:	5e                   	pop    esi
c0006984:	5f                   	pop    edi
c0006985:	5d                   	pop    ebp
c0006986:	c3                   	ret    

c0006987 <f_chmod>:
c0006987:	57                   	push   edi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	56                   	push   esi
c000698e:	53                   	push   ebx
c000698f:	83 ec 60             	sub    esp,0x60
c0006992:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006996:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000699a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000699e:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069a2:	e8 55 bb ff ff       	call   c00024fc <mount_volume>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 af 00 00 00    	jne    c0006a5e <f_chmod+0xd7>
c00069af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b3:	83 ec 0c             	sub    esp,0xc
c00069b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069ba:	68 60 04 00 00       	push   0x460
c00069bf:	e8 db 18 00 00       	call   c000829f <ff_memalloc>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	89 c6                	mov    esi,eax
c00069c9:	b8 11 00 00 00       	mov    eax,0x11
c00069ce:	85 f6                	test   esi,esi
c00069d0:	0f 84 88 00 00 00    	je     c0006a5e <f_chmod+0xd7>
c00069d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069da:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ee:	e8 7f e2 ff ff       	call   c0004c72 <follow_path>
c00069f3:	85 c0                	test   eax,eax
c00069f5:	75 53                	jne    c0006a4a <f_chmod+0xc3>
c00069f7:	b8 06 00 00 00       	mov    eax,0x6
c00069fc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a01:	75 47                	jne    c0006a4a <f_chmod+0xc3>
c0006a03:	89 f9                	mov    ecx,edi
c0006a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a09:	83 e1 27             	and    ecx,0x27
c0006a0c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a0f:	75 1d                	jne    c0006a2e <f_chmod+0xa7>
c0006a11:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a14:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a17:	21 cb                	and    ebx,ecx
c0006a19:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a1c:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 a2 cf ff ff       	call   c00039ca <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1e                	jne    c0006a4a <f_chmod+0xc3>
c0006a2c:	eb 13                	jmp    c0006a41 <f_chmod+0xba>
c0006a2e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a32:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a35:	21 cb                	and    ebx,ecx
c0006a37:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a3a:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a45:	e8 2b d9 ff ff       	call   c0004375 <sync_fs>
c0006a4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4e:	83 ec 0c             	sub    esp,0xc
c0006a51:	56                   	push   esi
c0006a52:	e8 5e 18 00 00       	call   c00082b5 <ff_memfree>
c0006a57:	83 c4 10             	add    esp,0x10
c0006a5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5e:	83 c4 60             	add    esp,0x60
c0006a61:	5b                   	pop    ebx
c0006a62:	5e                   	pop    esi
c0006a63:	5f                   	pop    edi
c0006a64:	c3                   	ret    

c0006a65 <f_utime>:
c0006a65:	56                   	push   esi
c0006a66:	b9 02 00 00 00       	mov    ecx,0x2
c0006a6b:	53                   	push   ebx
c0006a6c:	83 ec 64             	sub    esp,0x64
c0006a6f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a73:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a77:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a7b:	e8 7c ba ff ff       	call   c00024fc <mount_volume>
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 b5 00 00 00    	jne    c0006b3d <f_utime+0xd8>
c0006a88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8c:	83 ec 0c             	sub    esp,0xc
c0006a8f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a93:	68 60 04 00 00       	push   0x460
c0006a98:	e8 02 18 00 00       	call   c000829f <ff_memalloc>
c0006a9d:	83 c4 10             	add    esp,0x10
c0006aa0:	89 c3                	mov    ebx,eax
c0006aa2:	b8 11 00 00 00       	mov    eax,0x11
c0006aa7:	85 db                	test   ebx,ebx
c0006aa9:	0f 84 8e 00 00 00    	je     c0006b3d <f_utime+0xd8>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ab9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006abc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006abf:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ac3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac7:	e8 a6 e1 ff ff       	call   c0004c72 <follow_path>
c0006acc:	85 c0                	test   eax,eax
c0006ace:	75 59                	jne    c0006b29 <f_utime+0xc4>
c0006ad0:	b8 06 00 00 00       	mov    eax,0x6
c0006ad5:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ada:	75 4d                	jne    c0006b29 <f_utime+0xc4>
c0006adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ae0:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ae4:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ae8:	c1 e2 10             	shl    edx,0x10
c0006aeb:	09 ca                	or     edx,ecx
c0006aed:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af0:	75 1a                	jne    c0006b0c <f_utime+0xa7>
c0006af2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006af5:	83 c0 0c             	add    eax,0xc
c0006af8:	e8 e5 af ff ff       	call   c0001ae2 <st_dword>
c0006afd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b01:	e8 c4 ce ff ff       	call   c00039ca <store_xdir>
c0006b06:	85 c0                	test   eax,eax
c0006b08:	75 1f                	jne    c0006b29 <f_utime+0xc4>
c0006b0a:	eb 14                	jmp    c0006b20 <f_utime+0xbb>
c0006b0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b10:	83 c0 16             	add    eax,0x16
c0006b13:	e8 ca af ff ff       	call   c0001ae2 <st_dword>
c0006b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b24:	e8 4c d8 ff ff       	call   c0004375 <sync_fs>
c0006b29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b2d:	83 ec 0c             	sub    esp,0xc
c0006b30:	53                   	push   ebx
c0006b31:	e8 7f 17 00 00       	call   c00082b5 <ff_memfree>
c0006b36:	83 c4 10             	add    esp,0x10
c0006b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b3d:	83 c4 64             	add    esp,0x64
c0006b40:	5b                   	pop    ebx
c0006b41:	5e                   	pop    esi
c0006b42:	c3                   	ret    

c0006b43 <f_getlabel>:
c0006b43:	55                   	push   ebp
c0006b44:	31 c9                	xor    ecx,ecx
c0006b46:	57                   	push   edi
c0006b47:	56                   	push   esi
c0006b48:	53                   	push   ebx
c0006b49:	83 ec 6c             	sub    esp,0x6c
c0006b4c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b50:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b57:	e8 a0 b9 ff ff       	call   c00024fc <mount_volume>
c0006b5c:	89 c6                	mov    esi,eax
c0006b5e:	85 c0                	test   eax,eax
c0006b60:	0f 85 c1 01 00 00    	jne    c0006d27 <f_getlabel+0x1e4>
c0006b66:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b6e:	0f 84 5f 01 00 00    	je     c0006cd3 <f_getlabel+0x190>
c0006b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b78:	31 d2                	xor    edx,edx
c0006b7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b7e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b8a:	e8 39 c4 ff ff       	call   c0002fc8 <dir_sdi>
c0006b8f:	85 c0                	test   eax,eax
c0006b91:	0f 85 2d 01 00 00    	jne    c0006cc4 <f_getlabel+0x181>
c0006b97:	ba 01 00 00 00       	mov    edx,0x1
c0006b9c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba0:	e8 33 cc ff ff       	call   c00037d8 <dir_read>
c0006ba5:	85 c0                	test   eax,eax
c0006ba7:	0f 85 17 01 00 00    	jne    c0006cc4 <f_getlabel+0x181>
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bb4:	74 09                	je     c0006bbf <f_getlabel+0x7c>
c0006bb6:	31 db                	xor    ebx,ebx
c0006bb8:	31 c9                	xor    ecx,ecx
c0006bba:	e9 c8 00 00 00       	jmp    c0006c87 <f_getlabel+0x144>
c0006bbf:	31 ed                	xor    ebp,ebp
c0006bc1:	31 db                	xor    ebx,ebx
c0006bc3:	31 ff                	xor    edi,edi
c0006bc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bc9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bcd:	39 fa                	cmp    edx,edi
c0006bcf:	76 4b                	jbe    c0006c1c <f_getlabel+0xd9>
c0006bd1:	47                   	inc    edi
c0006bd2:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bd5:	01 d0                	add    eax,edx
c0006bd7:	e8 90 ae ff ff       	call   c0001a6c <ld_word>
c0006bdc:	66 85 ed             	test   bp,bp
c0006bdf:	75 0d                	jne    c0006bee <f_getlabel+0xab>
c0006be1:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006be7:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bec:	76 28                	jbe    c0006c16 <f_getlabel+0xd3>
c0006bee:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf5:	89 e9                	mov    ecx,ebp
c0006bf7:	01 da                	add    edx,ebx
c0006bf9:	c1 e1 10             	shl    ecx,0x10
c0006bfc:	0f b7 c0             	movzx  eax,ax
c0006bff:	09 c8                	or     eax,ecx
c0006c01:	b9 04 00 00 00       	mov    ecx,0x4
c0006c06:	e8 01 b0 ff ff       	call   c0001c0c <put_utf>
c0006c0b:	84 c0                	test   al,al
c0006c0d:	74 0b                	je     c0006c1a <f_getlabel+0xd7>
c0006c0f:	0f b6 c0             	movzx  eax,al
c0006c12:	01 c3                	add    ebx,eax
c0006c14:	31 c0                	xor    eax,eax
c0006c16:	89 c5                	mov    ebp,eax
c0006c18:	eb ab                	jmp    c0006bc5 <f_getlabel+0x82>
c0006c1a:	31 db                	xor    ebx,ebx
c0006c1c:	66 85 ed             	test   bp,bp
c0006c1f:	74 02                	je     c0006c23 <f_getlabel+0xe0>
c0006c21:	31 db                	xor    ebx,ebx
c0006c23:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c2a:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c2e:	e9 a0 00 00 00       	jmp    c0006cd3 <f_getlabel+0x190>
c0006c33:	83 ff 0b             	cmp    edi,0xb
c0006c36:	74 11                	je     c0006c49 <f_getlabel+0x106>
c0006c38:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c41:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c44:	c1 e0 08             	shl    eax,0x8
c0006c47:	09 c2                	or     edx,eax
c0006c49:	0f b7 d2             	movzx  edx,dx
c0006c4c:	50                   	push   eax
c0006c4d:	50                   	push   eax
c0006c4e:	68 b5 01 00 00       	push   0x1b5
c0006c53:	52                   	push   edx
c0006c54:	e8 03 17 00 00       	call   c000835c <ff_oem2uni>
c0006c59:	83 c4 10             	add    esp,0x10
c0006c5c:	66 85 c0             	test   ax,ax
c0006c5f:	74 46                	je     c0006ca7 <f_getlabel+0x164>
c0006c61:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c68:	0f b7 c0             	movzx  eax,ax
c0006c6b:	01 da                	add    edx,ebx
c0006c6d:	b9 04 00 00 00       	mov    ecx,0x4
c0006c72:	e8 95 af ff ff       	call   c0001c0c <put_utf>
c0006c77:	84 c0                	test   al,al
c0006c79:	74 2c                	je     c0006ca7 <f_getlabel+0x164>
c0006c7b:	0f b6 c0             	movzx  eax,al
c0006c7e:	01 c3                	add    ebx,eax
c0006c80:	83 ff 0b             	cmp    edi,0xb
c0006c83:	74 24                	je     c0006ca9 <f_getlabel+0x166>
c0006c85:	89 f9                	mov    ecx,edi
c0006c87:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c8b:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c8e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c93:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c9c:	e8 9f ae ff ff       	call   c0001b40 <dbc_1st>
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 a4                	je     c0006c49 <f_getlabel+0x106>
c0006ca5:	eb 8c                	jmp    c0006c33 <f_getlabel+0xf0>
c0006ca7:	31 db                	xor    ebx,ebx
c0006ca9:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006cb0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006cb3:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006cba:	74 17                	je     c0006cd3 <f_getlabel+0x190>
c0006cbc:	4b                   	dec    ebx
c0006cbd:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006cc0:	74 ee                	je     c0006cb0 <f_getlabel+0x16d>
c0006cc2:	eb 0f                	jmp    c0006cd3 <f_getlabel+0x190>
c0006cc4:	83 f8 04             	cmp    eax,0x4
c0006cc7:	75 5c                	jne    c0006d25 <f_getlabel+0x1e2>
c0006cc9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cd0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cd3:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cdb:	74 4a                	je     c0006d27 <f_getlabel+0x1e4>
c0006cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ce1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ce4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ce7:	e8 5e b5 ff ff       	call   c000224a <move_window>
c0006cec:	89 c6                	mov    esi,eax
c0006cee:	85 c0                	test   eax,eax
c0006cf0:	75 35                	jne    c0006d27 <f_getlabel+0x1e4>
c0006cf2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cf6:	b8 43 00 00 00       	mov    eax,0x43
c0006cfb:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cfd:	80 f9 03             	cmp    cl,0x3
c0006d00:	74 0f                	je     c0006d11 <f_getlabel+0x1ce>
c0006d02:	31 c0                	xor    eax,eax
c0006d04:	80 f9 04             	cmp    cl,0x4
c0006d07:	0f 94 c0             	sete   al
c0006d0a:	48                   	dec    eax
c0006d0b:	83 e0 c3             	and    eax,0xffffffc3
c0006d0e:	83 c0 64             	add    eax,0x64
c0006d11:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006d15:	e8 5f ad ff ff       	call   c0001a79 <ld_dword>
c0006d1a:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d21:	89 07                	mov    DWORD PTR [edi],eax
c0006d23:	eb 02                	jmp    c0006d27 <f_getlabel+0x1e4>
c0006d25:	89 c6                	mov    esi,eax
c0006d27:	83 c4 6c             	add    esp,0x6c
c0006d2a:	89 f0                	mov    eax,esi
c0006d2c:	5b                   	pop    ebx
c0006d2d:	5e                   	pop    esi
c0006d2e:	5f                   	pop    edi
c0006d2f:	5d                   	pop    ebp
c0006d30:	c3                   	ret    

c0006d31 <f_setlabel>:
c0006d31:	56                   	push   esi
c0006d32:	b9 02 00 00 00       	mov    ecx,0x2
c0006d37:	53                   	push   ebx
c0006d38:	83 ec 74             	sub    esp,0x74
c0006d3b:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d46:	e8 b1 b7 ff ff       	call   c00024fc <mount_volume>
c0006d4b:	89 c6                	mov    esi,eax
c0006d4d:	85 c0                	test   eax,eax
c0006d4f:	0f 85 41 02 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006d55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d59:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d5c:	0f 85 8e 00 00 00    	jne    c0006df0 <f_setlabel+0xbf>
c0006d62:	b9 16 00 00 00       	mov    ecx,0x16
c0006d67:	31 d2                	xor    edx,edx
c0006d69:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d6d:	31 db                	xor    ebx,ebx
c0006d6f:	e8 8c ad ff ff       	call   c0001b00 <mem_set>
c0006d74:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d7b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d7e:	0f 86 0a 01 00 00    	jbe    c0006e8e <f_setlabel+0x15d>
c0006d84:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d8b:	e8 b6 ad ff ff       	call   c0001b46 <tchar2uni>
c0006d90:	89 c6                	mov    esi,eax
c0006d92:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d97:	76 2a                	jbe    c0006dc3 <f_setlabel+0x92>
c0006d99:	83 f8 ff             	cmp    eax,0xffffffff
c0006d9c:	74 05                	je     c0006da3 <f_setlabel+0x72>
c0006d9e:	83 fb 09             	cmp    ebx,0x9
c0006da1:	76 0a                	jbe    c0006dad <f_setlabel+0x7c>
c0006da3:	be 06 00 00 00       	mov    esi,0x6
c0006da8:	e9 e9 01 00 00       	jmp    c0006f96 <f_setlabel+0x265>
c0006dad:	89 c2                	mov    edx,eax
c0006daf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006db6:	c1 ea 10             	shr    edx,0x10
c0006db9:	01 c8                	add    eax,ecx
c0006dbb:	43                   	inc    ebx
c0006dbc:	e8 1d ad ff ff       	call   c0001ade <st_word>
c0006dc1:	eb 04                	jmp    c0006dc7 <f_setlabel+0x96>
c0006dc3:	85 c0                	test   eax,eax
c0006dc5:	74 dc                	je     c0006da3 <f_setlabel+0x72>
c0006dc7:	89 f2                	mov    edx,esi
c0006dc9:	b8 37 4e 02 c0       	mov    eax,0xc0024e37
c0006dce:	e8 5b ad ff ff       	call   c0001b2e <chk_chr>
c0006dd3:	85 c0                	test   eax,eax
c0006dd5:	75 cc                	jne    c0006da3 <f_setlabel+0x72>
c0006dd7:	83 fb 0a             	cmp    ebx,0xa
c0006dda:	77 c7                	ja     c0006da3 <f_setlabel+0x72>
c0006ddc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ddf:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006de3:	0f b7 d6             	movzx  edx,si
c0006de6:	01 c8                	add    eax,ecx
c0006de8:	43                   	inc    ebx
c0006de9:	e8 f0 ac ff ff       	call   c0001ade <st_word>
c0006dee:	eb 84                	jmp    c0006d74 <f_setlabel+0x43>
c0006df0:	b9 0b 00 00 00       	mov    ecx,0xb
c0006df5:	ba 20 00 00 00       	mov    edx,0x20
c0006dfa:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006dfe:	31 db                	xor    ebx,ebx
c0006e00:	e8 fb ac ff ff       	call   c0001b00 <mem_set>
c0006e05:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e0c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e0f:	76 60                	jbe    c0006e71 <f_setlabel+0x140>
c0006e11:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e18:	e8 29 ad ff ff       	call   c0001b46 <tchar2uni>
c0006e1d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e22:	0f 87 7b ff ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006e28:	83 ec 0c             	sub    esp,0xc
c0006e2b:	50                   	push   eax
c0006e2c:	e8 97 15 00 00       	call   c00083c8 <ff_wtoupper>
c0006e31:	5a                   	pop    edx
c0006e32:	59                   	pop    ecx
c0006e33:	68 b5 01 00 00       	push   0x1b5
c0006e38:	50                   	push   eax
c0006e39:	e8 8e 14 00 00       	call   c00082cc <ff_uni2oem>
c0006e3e:	83 c4 10             	add    esp,0x10
c0006e41:	89 c6                	mov    esi,eax
c0006e43:	66 85 c0             	test   ax,ax
c0006e46:	0f 84 57 ff ff ff    	je     c0006da3 <f_setlabel+0x72>
c0006e4c:	0f b7 d0             	movzx  edx,ax
c0006e4f:	b8 30 4e 02 c0       	mov    eax,0xc0024e30
c0006e54:	e8 d5 ac ff ff       	call   c0001b2e <chk_chr>
c0006e59:	85 c0                	test   eax,eax
c0006e5b:	0f 85 42 ff ff ff    	jne    c0006da3 <f_setlabel+0x72>
c0006e61:	66 81 fe ff 00       	cmp    si,0xff
c0006e66:	0f 87 14 01 00 00    	ja     c0006f80 <f_setlabel+0x24f>
c0006e6c:	e9 fa 00 00 00       	jmp    c0006f6b <f_setlabel+0x23a>
c0006e71:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e76:	0f 84 27 ff ff ff    	je     c0006da3 <f_setlabel+0x72>
c0006e7c:	85 db                	test   ebx,ebx
c0006e7e:	74 0e                	je     c0006e8e <f_setlabel+0x15d>
c0006e80:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e83:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e88:	75 04                	jne    c0006e8e <f_setlabel+0x15d>
c0006e8a:	89 c3                	mov    ebx,eax
c0006e8c:	eb ee                	jmp    c0006e7c <f_setlabel+0x14b>
c0006e8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e92:	31 d2                	xor    edx,edx
c0006e94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e98:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006ea0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea4:	e8 1f c1 ff ff       	call   c0002fc8 <dir_sdi>
c0006ea9:	89 c6                	mov    esi,eax
c0006eab:	85 c0                	test   eax,eax
c0006ead:	0f 85 e3 00 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006eb3:	ba 01 00 00 00       	mov    edx,0x1
c0006eb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ebc:	e8 17 c9 ff ff       	call   c00037d8 <dir_read>
c0006ec1:	85 c0                	test   eax,eax
c0006ec3:	75 21                	jne    c0006ee6 <f_setlabel+0x1b5>
c0006ec5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecd:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ed0:	74 5d                	je     c0006f2f <f_setlabel+0x1fe>
c0006ed2:	85 db                	test   ebx,ebx
c0006ed4:	74 0b                	je     c0006ee1 <f_setlabel+0x1b0>
c0006ed6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edb:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edf:	eb 70                	jmp    c0006f51 <f_setlabel+0x220>
c0006ee1:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ee4:	eb 70                	jmp    c0006f56 <f_setlabel+0x225>
c0006ee6:	83 f8 04             	cmp    eax,0x4
c0006ee9:	75 7c                	jne    c0006f67 <f_setlabel+0x236>
c0006eeb:	85 db                	test   ebx,ebx
c0006eed:	0f 84 a3 00 00 00    	je     c0006f96 <f_setlabel+0x265>
c0006ef3:	ba 01 00 00 00       	mov    edx,0x1
c0006ef8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006efc:	e8 51 ca ff ff       	call   c0003952 <dir_alloc>
c0006f01:	89 c6                	mov    esi,eax
c0006f03:	85 c0                	test   eax,eax
c0006f05:	0f 85 8b 00 00 00    	jne    c0006f96 <f_setlabel+0x265>
c0006f0b:	31 d2                	xor    edx,edx
c0006f0d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f11:	b9 20 00 00 00       	mov    ecx,0x20
c0006f16:	e8 e5 ab ff ff       	call   c0001b00 <mem_set>
c0006f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f1f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f22:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f26:	75 18                	jne    c0006f40 <f_setlabel+0x20f>
c0006f28:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f32:	b9 16 00 00 00       	mov    ecx,0x16
c0006f37:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f3b:	83 c0 02             	add    eax,0x2
c0006f3e:	eb 9b                	jmp    c0006edb <f_setlabel+0x1aa>
c0006f40:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f44:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f49:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f51:	e8 95 ab ff ff       	call   c0001aeb <mem_cpy>
c0006f56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f5a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f62:	e8 0e d4 ff ff       	call   c0004375 <sync_fs>
c0006f67:	89 c6                	mov    esi,eax
c0006f69:	eb 2b                	jmp    c0006f96 <f_setlabel+0x265>
c0006f6b:	83 fb 0a             	cmp    ebx,0xa
c0006f6e:	0f 87 2f fe ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f7a:	43                   	inc    ebx
c0006f7b:	e9 85 fe ff ff       	jmp    c0006e05 <f_setlabel+0xd4>
c0006f80:	83 fb 09             	cmp    ebx,0x9
c0006f83:	0f 87 1a fe ff ff    	ja     c0006da3 <f_setlabel+0x72>
c0006f89:	89 f0                	mov    eax,esi
c0006f8b:	66 c1 e8 08          	shr    ax,0x8
c0006f8f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f93:	43                   	inc    ebx
c0006f94:	eb de                	jmp    c0006f74 <f_setlabel+0x243>
c0006f96:	89 f0                	mov    eax,esi
c0006f98:	83 c4 74             	add    esp,0x74
c0006f9b:	5b                   	pop    ebx
c0006f9c:	5e                   	pop    esi
c0006f9d:	c3                   	ret    

c0006f9e <f_forward>:
c0006f9e:	55                   	push   ebp
c0006f9f:	57                   	push   edi
c0006fa0:	56                   	push   esi
c0006fa1:	53                   	push   ebx
c0006fa2:	83 ec 2c             	sub    esp,0x2c
c0006fa5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006fa9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006fad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006fb3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006fb7:	89 d8                	mov    eax,ebx
c0006fb9:	e8 b1 b1 ff ff       	call   c000216f <validate>
c0006fbe:	89 c5                	mov    ebp,eax
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	0f 85 aa 01 00 00    	jne    c0007172 <f_forward+0x1d4>
c0006fc8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fcc:	85 ed                	test   ebp,ebp
c0006fce:	0f 85 9e 01 00 00    	jne    c0007172 <f_forward+0x1d4>
c0006fd4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fd8:	0f 84 8f 01 00 00    	je     c000716d <f_forward+0x1cf>
c0006fde:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fe1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fe4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fe7:	bf 00 00 00 00       	mov    edi,0x0
c0006fec:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fef:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ff3:	89 d1                	mov    ecx,edx
c0006ff5:	19 f9                	sbb    ecx,edi
c0006ff7:	0f 83 cf 00 00 00    	jae    c00070cc <f_forward+0x12e>
c0006ffd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007001:	e9 c6 00 00 00       	jmp    c00070cc <f_forward+0x12e>
c0007006:	50                   	push   eax
c0007007:	50                   	push   eax
c0007008:	6a 00                	push   0x0
c000700a:	6a 00                	push   0x0
c000700c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007010:	83 c4 10             	add    esp,0x10
c0007013:	85 c0                	test   eax,eax
c0007015:	0f 84 57 01 00 00    	je     c0007172 <f_forward+0x1d4>
c000701b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007022:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007025:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007029:	89 d7                	mov    edi,edx
c000702b:	8d 4e ff             	lea    ecx,[esi-0x1]
c000702e:	89 c6                	mov    esi,eax
c0007030:	0f ac fe 09          	shrd   esi,edi,0x9
c0007034:	21 ce                	and    esi,ecx
c0007036:	89 c1                	mov    ecx,eax
c0007038:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000703e:	0f 84 98 00 00 00    	je     c00070dc <f_forward+0x13e>
c0007044:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007048:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000704b:	89 c8                	mov    eax,ecx
c000704d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007051:	e8 af ac ff ff       	call   c0001d05 <clst2sect>
c0007056:	89 d7                	mov    edi,edx
c0007058:	09 c7                	or     edi,eax
c000705a:	0f 84 9e 00 00 00    	je     c00070fe <f_forward+0x160>
c0007060:	31 ff                	xor    edi,edi
c0007062:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007065:	01 c6                	add    esi,eax
c0007067:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000706b:	11 d7                	adc    edi,edx
c000706d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007070:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007073:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007077:	39 fa                	cmp    edx,edi
c0007079:	0f 85 a2 00 00 00    	jne    c0007121 <f_forward+0x183>
c000707f:	39 f0                	cmp    eax,esi
c0007081:	0f 85 9a 00 00 00    	jne    c0007121 <f_forward+0x183>
c0007087:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000708a:	ba 00 02 00 00       	mov    edx,0x200
c000708f:	25 ff 01 00 00       	and    eax,0x1ff
c0007094:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007098:	29 c2                	sub    edx,eax
c000709a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000709d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00070a0:	39 d1                	cmp    ecx,edx
c00070a2:	76 02                	jbe    c00070a6 <f_forward+0x108>
c00070a4:	89 d1                	mov    ecx,edx
c00070a6:	8d 73 50             	lea    esi,[ebx+0x50]
c00070a9:	52                   	push   edx
c00070aa:	01 c6                	add    esi,eax
c00070ac:	52                   	push   edx
c00070ad:	51                   	push   ecx
c00070ae:	56                   	push   esi
c00070af:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00070b3:	83 c4 10             	add    esp,0x10
c00070b6:	85 c0                	test   eax,eax
c00070b8:	74 44                	je     c00070fe <f_forward+0x160>
c00070ba:	31 ff                	xor    edi,edi
c00070bc:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070bf:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070c2:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070c6:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070ca:	01 07                	add    DWORD PTR [edi],eax
c00070cc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070d1:	0f 85 2f ff ff ff    	jne    c0007006 <f_forward+0x68>
c00070d7:	e9 96 00 00 00       	jmp    c0007172 <f_forward+0x1d4>
c00070dc:	85 f6                	test   esi,esi
c00070de:	0f 85 60 ff ff ff    	jne    c0007044 <f_forward+0xa6>
c00070e4:	89 d7                	mov    edi,edx
c00070e6:	09 c7                	or     edi,eax
c00070e8:	75 05                	jne    c00070ef <f_forward+0x151>
c00070ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070ed:	eb 0a                	jmp    c00070f9 <f_forward+0x15b>
c00070ef:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070f2:	89 d8                	mov    eax,ebx
c00070f4:	e8 d9 bc ff ff       	call   c0002dd2 <get_fat>
c00070f9:	83 f8 01             	cmp    eax,0x1
c00070fc:	77 0b                	ja     c0007109 <f_forward+0x16b>
c00070fe:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007102:	bd 02 00 00 00       	mov    ebp,0x2
c0007107:	eb 69                	jmp    c0007172 <f_forward+0x1d4>
c0007109:	83 f8 ff             	cmp    eax,0xffffffff
c000710c:	75 0b                	jne    c0007119 <f_forward+0x17b>
c000710e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007112:	bd 01 00 00 00       	mov    ebp,0x1
c0007117:	eb 59                	jmp    c0007172 <f_forward+0x1d4>
c0007119:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000711c:	e9 23 ff ff ff       	jmp    c0007044 <f_forward+0xa6>
c0007121:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007125:	79 20                	jns    c0007147 <f_forward+0x1a9>
c0007127:	83 ec 0c             	sub    esp,0xc
c000712a:	6a 01                	push   0x1
c000712c:	52                   	push   edx
c000712d:	50                   	push   eax
c000712e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007132:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007136:	50                   	push   eax
c0007137:	e8 fb a8 ff ff       	call   c0001a37 <disk_write>
c000713c:	83 c4 20             	add    esp,0x20
c000713f:	85 c0                	test   eax,eax
c0007141:	75 cb                	jne    c000710e <f_forward+0x170>
c0007143:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007147:	83 ec 0c             	sub    esp,0xc
c000714a:	6a 01                	push   0x1
c000714c:	57                   	push   edi
c000714d:	56                   	push   esi
c000714e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007152:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007156:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000715a:	50                   	push   eax
c000715b:	e8 c1 a8 ff ff       	call   c0001a21 <disk_read>
c0007160:	83 c4 20             	add    esp,0x20
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 1c ff ff ff    	je     c0007087 <f_forward+0xe9>
c000716b:	eb a1                	jmp    c000710e <f_forward+0x170>
c000716d:	bd 07 00 00 00       	mov    ebp,0x7
c0007172:	83 c4 2c             	add    esp,0x2c
c0007175:	89 e8                	mov    eax,ebp
c0007177:	5b                   	pop    ebx
c0007178:	5e                   	pop    esi
c0007179:	5f                   	pop    edi
c000717a:	5d                   	pop    ebp
c000717b:	c3                   	ret    

c000717c <f_mkfs>:
c000717c:	55                   	push   ebp
c000717d:	57                   	push   edi
c000717e:	56                   	push   esi
c000717f:	53                   	push   ebx
c0007180:	bb 0b 00 00 00       	mov    ebx,0xb
c0007185:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000718b:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007192:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007199:	e8 b0 ae ff ff       	call   c000204e <get_ldnumber>
c000719e:	85 c0                	test   eax,eax
c00071a0:	0f 88 ec 10 00 00    	js     c0008292 <f_mkfs+0x1116>
c00071a6:	8b 14 85 00 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6c00]
c00071ad:	85 d2                	test   edx,edx
c00071af:	74 03                	je     c00071b4 <f_mkfs+0x38>
c00071b1:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00071b4:	85 f6                	test   esi,esi
c00071b6:	75 05                	jne    c00071bd <f_mkfs+0x41>
c00071b8:	be 20 4e 02 c0       	mov    esi,0xc0024e20
c00071bd:	83 ec 0c             	sub    esp,0xc
c00071c0:	0f b6 c0             	movzx  eax,al
c00071c3:	bb 03 00 00 00       	mov    ebx,0x3
c00071c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d0:	e8 49 a8 ff ff       	call   c0001a1e <disk_initialize>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	a8 01                	test   al,0x1
c00071da:	0f 85 b2 10 00 00    	jne    c0008292 <f_mkfs+0x1116>
c00071e0:	bb 0a 00 00 00       	mov    ebx,0xa
c00071e5:	a8 04                	test   al,0x4
c00071e7:	0f 85 a5 10 00 00    	jne    c0008292 <f_mkfs+0x1116>
c00071ed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071f0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071f4:	85 c0                	test   eax,eax
c00071f6:	75 20                	jne    c0007218 <f_mkfs+0x9c>
c00071f8:	51                   	push   ecx
c00071f9:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071fd:	50                   	push   eax
c00071fe:	6a 03                	push   0x3
c0007200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007204:	e8 44 a8 ff ff       	call   c0001a4d <disk_ioctl>
c0007209:	83 c4 10             	add    esp,0x10
c000720c:	85 c0                	test   eax,eax
c000720e:	74 08                	je     c0007218 <f_mkfs+0x9c>
c0007210:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007218:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000721c:	8d 42 ff             	lea    eax,[edx-0x1]
c000721f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007224:	77 04                	ja     c000722a <f_mkfs+0xae>
c0007226:	85 c2                	test   edx,eax
c0007228:	74 08                	je     c0007232 <f_mkfs+0xb6>
c000722a:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007232:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007235:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007239:	48                   	dec    eax
c000723a:	3c 01                	cmp    al,0x1
c000723c:	76 05                	jbe    c0007243 <f_mkfs+0xc7>
c000723e:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007243:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000724a:	48                   	dec    eax
c000724b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007250:	77 07                	ja     c0007259 <f_mkfs+0xdd>
c0007252:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007257:	74 08                	je     c0007261 <f_mkfs+0xe5>
c0007259:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007261:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007264:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000726a:	77 07                	ja     c0007273 <f_mkfs+0xf7>
c000726c:	8d 43 ff             	lea    eax,[ebx-0x1]
c000726f:	85 d8                	test   eax,ebx
c0007271:	74 02                	je     c0007275 <f_mkfs+0xf9>
c0007273:	31 db                	xor    ebx,ebx
c0007275:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007280:	77 0a                	ja     c000728c <f_mkfs+0x110>
c0007282:	bb 11 00 00 00       	mov    ebx,0x11
c0007287:	e9 06 10 00 00       	jmp    c0008292 <f_mkfs+0x1116>
c000728c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007293:	8b 36                	mov    esi,DWORD PTR [esi]
c0007295:	85 ed                	test   ebp,ebp
c0007297:	75 1e                	jne    c00072b7 <f_mkfs+0x13b>
c0007299:	83 ec 0c             	sub    esp,0xc
c000729c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00072a3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00072a8:	50                   	push   eax
c00072a9:	e8 f1 0f 00 00       	call   c000829f <ff_memalloc>
c00072ae:	83 c4 10             	add    esp,0x10
c00072b1:	89 c5                	mov    ebp,eax
c00072b3:	85 c0                	test   eax,eax
c00072b5:	74 cb                	je     c0007282 <f_mkfs+0x106>
c00072b7:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072bf:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072c7:	52                   	push   edx
c00072c8:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072cc:	50                   	push   eax
c00072cd:	6a 01                	push   0x1
c00072cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072d3:	e8 75 a7 ff ff       	call   c0001a4d <disk_ioctl>
c00072d8:	83 c4 10             	add    esp,0x10
c00072db:	85 c0                	test   eax,eax
c00072dd:	0f 85 4a 0f 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00072e3:	89 f1                	mov    ecx,esi
c00072e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072ed:	83 e1 0f             	and    ecx,0xf
c00072f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072f8:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072fc:	83 e6 08             	and    esi,0x8
c00072ff:	75 56                	jne    c0007357 <f_mkfs+0x1db>
c0007301:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007305:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007309:	83 ff 00             	cmp    edi,0x0
c000730c:	76 20                	jbe    c000732e <f_mkfs+0x1b2>
c000730e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007313:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000731b:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007321:	83 d7 ff             	adc    edi,0xffffffff
c0007324:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007328:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732c:	eb 21                	jmp    c000734f <f_mkfs+0x1d3>
c000732e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007333:	39 f2                	cmp    edx,esi
c0007335:	19 f8                	sbb    eax,edi
c0007337:	73 1e                	jae    c0007357 <f_mkfs+0x1db>
c0007339:	83 c6 c1             	add    esi,0xffffffc1
c000733c:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007344:	83 d7 ff             	adc    edi,0xffffffff
c0007347:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000734b:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000734f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007357:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000735b:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000735f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007362:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007366:	31 c0                	xor    eax,eax
c0007368:	ba 7f 00 00 00       	mov    edx,0x7f
c000736d:	89 c7                	mov    edi,eax
c000736f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007372:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007376:	0f 83 c5 0a 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c000737c:	89 df                	mov    edi,ebx
c000737e:	c1 ef 09             	shr    edi,0x9
c0007381:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007385:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000738c:	c1 ef 09             	shr    edi,0x9
c000738f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007394:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007398:	74 29                	je     c00073c3 <f_mkfs+0x247>
c000739a:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a0:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00073a5:	0f 97 c2             	seta   dl
c00073a8:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00073ab:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073af:	0f 92 c0             	setb   al
c00073b2:	08 c2                	or     dl,al
c00073b4:	75 5b                	jne    c0007411 <f_mkfs+0x295>
c00073b6:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073ba:	83 e0 07             	and    eax,0x7
c00073bd:	3c 04                	cmp    al,0x4
c00073bf:	74 50                	je     c0007411 <f_mkfs+0x295>
c00073c1:	eb 1b                	jmp    c00073de <f_mkfs+0x262>
c00073c3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073c8:	0f 87 73 0a 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c00073ce:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073d4:	76 08                	jbe    c00073de <f_mkfs+0x262>
c00073d6:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073de:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073e2:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073e6:	83 e0 01             	and    eax,0x1
c00073e9:	80 e1 02             	and    cl,0x2
c00073ec:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073f0:	74 0d                	je     c00073ff <f_mkfs+0x283>
c00073f2:	84 c0                	test   al,al
c00073f4:	0f 84 53 09 00 00    	je     c0007d4d <f_mkfs+0xbd1>
c00073fa:	e9 12 08 00 00       	jmp    c0007c11 <f_mkfs+0xa95>
c00073ff:	bb 13 00 00 00       	mov    ebx,0x13
c0007404:	84 c0                	test   al,al
c0007406:	0f 85 05 08 00 00    	jne    c0007c11 <f_mkfs+0xa95>
c000740c:	e9 39 0e 00 00       	jmp    c000824a <f_mkfs+0x10ce>
c0007411:	31 c0                	xor    eax,eax
c0007413:	ba ff 0f 00 00       	mov    edx,0xfff
c0007418:	89 c7                	mov    edi,eax
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007421:	0f 83 1a 0a 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c0007427:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000742d:	77 39                	ja     c0007468 <f_mkfs+0x2ec>
c000742f:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007434:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000743c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000743f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007443:	73 08                	jae    c000744d <f_mkfs+0x2d1>
c0007445:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000744d:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007452:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007455:	b8 00 00 00 00       	mov    eax,0x0
c000745a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000745e:	73 08                	jae    c0007468 <f_mkfs+0x2ec>
c0007460:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000746c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007470:	83 c0 20             	add    eax,0x20
c0007473:	83 d2 00             	adc    edx,0x0
c0007476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000747a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000747e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007482:	31 d2                	xor    edx,edx
c0007484:	31 ff                	xor    edi,edi
c0007486:	52                   	push   edx
c0007487:	89 fb                	mov    ebx,edi
c0007489:	50                   	push   eax
c000748a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000748e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007492:	e8 e5 af 01 00       	call   c002247c <__udivdi3>
c0007497:	83 c4 10             	add    esp,0x10
c000749a:	c1 e0 02             	shl    eax,0x2
c000749d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00074a1:	05 07 02 00 00       	add    eax,0x207
c00074a6:	89 f1                	mov    ecx,esi
c00074a8:	c1 e8 09             	shr    eax,0x9
c00074ab:	83 c1 ff             	add    ecx,0xffffffff
c00074ae:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00074b2:	83 d3 ff             	adc    ebx,0xffffffff
c00074b5:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074b9:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074bd:	31 d2                	xor    edx,edx
c00074bf:	01 c8                	add    eax,ecx
c00074c1:	11 da                	adc    edx,ebx
c00074c3:	89 c1                	mov    ecx,eax
c00074c5:	f7 de                	neg    esi
c00074c7:	89 d0                	mov    eax,edx
c00074c9:	83 d7 00             	adc    edi,0x0
c00074cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074d0:	f7 df                	neg    edi
c00074d2:	21 f1                	and    ecx,esi
c00074d4:	21 f8                	and    eax,edi
c00074d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074e6:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ed:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074f1:	0f ac d0 01          	shrd   eax,edx,0x1
c00074f5:	89 df                	mov    edi,ebx
c00074f7:	d1 ea                	shr    edx,1
c00074f9:	39 c1                	cmp    ecx,eax
c00074fb:	19 d7                	sbb    edi,edx
c00074fd:	0f 83 3e 09 00 00    	jae    c0007e41 <f_mkfs+0xcc5>
c0007503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007507:	31 d2                	xor    edx,edx
c0007509:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000750d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007511:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007515:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007518:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000751c:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007520:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007524:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007528:	83 f8 0f             	cmp    eax,0xf
c000752b:	0f 86 10 09 00 00    	jbe    c0007e41 <f_mkfs+0xcc5>
c0007531:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007539:	0f 87 02 09 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c000753f:	31 d2                	xor    edx,edx
c0007541:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007545:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000754d:	83 c0 07             	add    eax,0x7
c0007550:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007558:	c1 e8 03             	shr    eax,0x3
c000755b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007562:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000756a:	c1 e0 09             	shl    eax,0x9
c000756d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007571:	48                   	dec    eax
c0007572:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007576:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000757a:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000757e:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007582:	31 d2                	xor    edx,edx
c0007584:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007588:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000758f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007593:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007598:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000759c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00075a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00075a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00075a8:	31 ff                	xor    edi,edi
c00075aa:	31 f6                	xor    esi,esi
c00075ac:	31 db                	xor    ebx,ebx
c00075ae:	85 ff                	test   edi,edi
c00075b0:	74 05                	je     c00075b7 <f_mkfs+0x43b>
c00075b2:	4f                   	dec    edi
c00075b3:	74 44                	je     c00075f9 <f_mkfs+0x47d>
c00075b5:	eb 4f                	jmp    c0007606 <f_mkfs+0x48a>
c00075b7:	83 ec 0c             	sub    esp,0xc
c00075ba:	0f b7 c3             	movzx  eax,bx
c00075bd:	50                   	push   eax
c00075be:	e8 05 0e 00 00       	call   c00083c8 <ff_wtoupper>
c00075c3:	83 c4 10             	add    esp,0x10
c00075c6:	89 c1                	mov    ecx,eax
c00075c8:	8d 53 01             	lea    edx,[ebx+0x1]
c00075cb:	66 39 c3             	cmp    bx,ax
c00075ce:	75 3e                	jne    c000760e <f_mkfs+0x492>
c00075d0:	be 01 00 00 00       	mov    esi,0x1
c00075d5:	89 df                	mov    edi,ebx
c00075d7:	66 01 f7             	add    di,si
c00075da:	75 07                	jne    c00075e3 <f_mkfs+0x467>
c00075dc:	83 fe 7f             	cmp    esi,0x7f
c00075df:	77 31                	ja     c0007612 <f_mkfs+0x496>
c00075e1:	eb 16                	jmp    c00075f9 <f_mkfs+0x47d>
c00075e3:	83 ec 0c             	sub    esp,0xc
c00075e6:	0f b7 ff             	movzx  edi,di
c00075e9:	57                   	push   edi
c00075ea:	e8 d9 0d 00 00       	call   c00083c8 <ff_wtoupper>
c00075ef:	83 c4 10             	add    esp,0x10
c00075f2:	39 c7                	cmp    edi,eax
c00075f4:	75 e6                	jne    c00075dc <f_mkfs+0x460>
c00075f6:	46                   	inc    esi
c00075f7:	eb dc                	jmp    c00075d5 <f_mkfs+0x459>
c00075f9:	31 c0                	xor    eax,eax
c00075fb:	89 d9                	mov    ecx,ebx
c00075fd:	4e                   	dec    esi
c00075fe:	0f 95 c0             	setne  al
c0007601:	43                   	inc    ebx
c0007602:	89 c7                	mov    edi,eax
c0007604:	eb 14                	jmp    c000761a <f_mkfs+0x49e>
c0007606:	89 f1                	mov    ecx,esi
c0007608:	01 f3                	add    ebx,esi
c000760a:	31 ff                	xor    edi,edi
c000760c:	eb 0c                	jmp    c000761a <f_mkfs+0x49e>
c000760e:	89 d3                	mov    ebx,edx
c0007610:	eb 08                	jmp    c000761a <f_mkfs+0x49e>
c0007612:	bf 02 00 00 00       	mov    edi,0x2
c0007617:	83 c9 ff             	or     ecx,0xffffffff
c000761a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000761e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007621:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007625:	0f b6 c1             	movzx  eax,cl
c0007628:	e8 3a a9 ff ff       	call   c0001f67 <xsum32>
c000762d:	66 c1 e9 08          	shr    cx,0x8
c0007631:	89 c2                	mov    edx,eax
c0007633:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007636:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000763a:	0f b7 c1             	movzx  eax,cx
c000763d:	e8 25 a9 ff ff       	call   c0001f67 <xsum32>
c0007642:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007647:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000764b:	66 85 db             	test   bx,bx
c000764e:	74 1f                	je     c000766f <f_mkfs+0x4f3>
c0007650:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007653:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000765a:	83 c0 02             	add    eax,0x2
c000765d:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007663:	39 c2                	cmp    edx,eax
c0007665:	74 08                	je     c000766f <f_mkfs+0x4f3>
c0007667:	89 04 24             	mov    DWORD PTR [esp],eax
c000766a:	e9 3f ff ff ff       	jmp    c00075ae <f_mkfs+0x432>
c000766f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007672:	83 ec 0c             	sub    esp,0xc
c0007675:	05 01 02 00 00       	add    eax,0x201
c000767a:	c1 e8 09             	shr    eax,0x9
c000767d:	50                   	push   eax
c000767e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007682:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007686:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000768a:	55                   	push   ebp
c000768b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000768f:	e8 a3 a3 ff ff       	call   c0001a37 <disk_write>
c0007694:	83 c4 20             	add    esp,0x20
c0007697:	85 c0                	test   eax,eax
c0007699:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000769c:	0f 85 8b 0b 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00076a2:	89 d0                	mov    eax,edx
c00076a4:	31 d2                	xor    edx,edx
c00076a6:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00076aa:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00076ae:	66 85 db             	test   bx,bx
c00076b1:	74 04                	je     c00076b7 <f_mkfs+0x53b>
c00076b3:	31 c0                	xor    eax,eax
c00076b5:	eb b0                	jmp    c0007667 <f_mkfs+0x4eb>
c00076b7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076bb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076bf:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076c3:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076c9:	31 d2                	xor    edx,edx
c00076cb:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076d6:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076da:	c1 eb 09             	shr    ebx,0x9
c00076dd:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076e8:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076f0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076f4:	8d 70 01             	lea    esi,[eax+0x1]
c00076f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076ff:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007706:	31 d2                	xor    edx,edx
c0007708:	25 00 fe ff ff       	and    eax,0xfffffe00
c000770d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007710:	89 c1                	mov    ecx,eax
c0007712:	89 e8                	mov    eax,ebp
c0007714:	e8 e7 a3 ff ff       	call   c0001b00 <mem_set>
c0007719:	31 c0                	xor    eax,eax
c000771b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771e:	76 10                	jbe    c0007730 <f_mkfs+0x5b4>
c0007720:	83 fe 07             	cmp    esi,0x7
c0007723:	76 0b                	jbe    c0007730 <f_mkfs+0x5b4>
c0007725:	40                   	inc    eax
c0007726:	83 ee 08             	sub    esi,0x8
c0007729:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000772e:	eb eb                	jmp    c000771b <f_mkfs+0x59f>
c0007730:	b2 01                	mov    dl,0x1
c0007732:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007736:	85 f6                	test   esi,esi
c0007738:	74 0c                	je     c0007746 <f_mkfs+0x5ca>
c000773a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000773d:	76 07                	jbe    c0007746 <f_mkfs+0x5ca>
c000773f:	08 11                	or     BYTE PTR [ecx],dl
c0007741:	4e                   	dec    esi
c0007742:	d1 e2                	shl    edx,1
c0007744:	eb f0                	jmp    c0007736 <f_mkfs+0x5ba>
c0007746:	89 df                	mov    edi,ebx
c0007748:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000774c:	76 04                	jbe    c0007752 <f_mkfs+0x5d6>
c000774e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007752:	83 ec 0c             	sub    esp,0xc
c0007755:	57                   	push   edi
c0007756:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000775a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000775e:	55                   	push   ebp
c000775f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007763:	e8 cf a2 ff ff       	call   c0001a37 <disk_write>
c0007768:	83 c4 20             	add    esp,0x20
c000776b:	85 c0                	test   eax,eax
c000776d:	0f 85 ba 0a 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007773:	31 d2                	xor    edx,edx
c0007775:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007779:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000777d:	29 fb                	sub    ebx,edi
c000777f:	0f 85 7a ff ff ff    	jne    c00076ff <f_mkfs+0x583>
c0007785:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007789:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007791:	31 f6                	xor    esi,esi
c0007793:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007797:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000779a:	31 d2                	xor    edx,edx
c000779c:	89 e8                	mov    eax,ebp
c000779e:	e8 5d a3 ff ff       	call   c0001b00 <mem_set>
c00077a3:	31 c9                	xor    ecx,ecx
c00077a5:	85 db                	test   ebx,ebx
c00077a7:	75 40                	jne    c00077e9 <f_mkfs+0x66d>
c00077a9:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00077ae:	89 e8                	mov    eax,ebp
c00077b0:	bb 02 00 00 00       	mov    ebx,0x2
c00077b5:	e8 28 a3 ff ff       	call   c0001ae2 <st_dword>
c00077ba:	8d 45 04             	lea    eax,[ebp+0x4]
c00077bd:	83 ca ff             	or     edx,0xffffffff
c00077c0:	e8 1d a3 ff ff       	call   c0001ae2 <st_dword>
c00077c5:	b9 08 00 00 00       	mov    ecx,0x8
c00077ca:	eb 1d                	jmp    c00077e9 <f_mkfs+0x66d>
c00077cc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077cf:	76 3b                	jbe    c000780c <f_mkfs+0x690>
c00077d1:	43                   	inc    ebx
c00077d2:	83 fe 01             	cmp    esi,0x1
c00077d5:	89 da                	mov    edx,ebx
c00077d7:	77 03                	ja     c00077dc <f_mkfs+0x660>
c00077d9:	83 ca ff             	or     edx,0xffffffff
c00077dc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077e0:	4e                   	dec    esi
c00077e1:	e8 fc a2 ff ff       	call   c0001ae2 <st_dword>
c00077e6:	83 c1 04             	add    ecx,0x4
c00077e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077ed:	85 f6                	test   esi,esi
c00077ef:	75 db                	jne    c00077cc <f_mkfs+0x650>
c00077f1:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077f6:	77 14                	ja     c000780c <f_mkfs+0x690>
c00077f8:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077fc:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007803:	85 f6                	test   esi,esi
c0007805:	74 05                	je     c000780c <f_mkfs+0x690>
c0007807:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000780a:	77 dd                	ja     c00077e9 <f_mkfs+0x66d>
c000780c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007810:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007814:	39 cf                	cmp    edi,ecx
c0007816:	76 02                	jbe    c000781a <f_mkfs+0x69e>
c0007818:	89 cf                	mov    edi,ecx
c000781a:	83 ec 0c             	sub    esp,0xc
c000781d:	57                   	push   edi
c000781e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007822:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007826:	55                   	push   ebp
c0007827:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000782b:	e8 07 a2 ff ff       	call   c0001a37 <disk_write>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	85 c0                	test   eax,eax
c0007835:	0f 85 f2 09 00 00    	jne    c000822d <f_mkfs+0x10b1>
c000783b:	31 d2                	xor    edx,edx
c000783d:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007841:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007845:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007849:	0f 85 48 ff ff ff    	jne    c0007797 <f_mkfs+0x61b>
c000784f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007852:	31 d2                	xor    edx,edx
c0007854:	89 e8                	mov    eax,ebp
c0007856:	31 ff                	xor    edi,edi
c0007858:	e8 a3 a2 ff ff       	call   c0001b00 <mem_set>
c000785d:	8d 45 34             	lea    eax,[ebp+0x34]
c0007860:	ba 02 00 00 00       	mov    edx,0x2
c0007865:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007869:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000786d:	e8 70 a2 ff ff       	call   c0001ae2 <st_dword>
c0007872:	8d 45 38             	lea    eax,[ebp+0x38]
c0007875:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007879:	e8 64 a2 ff ff       	call   c0001ae2 <st_dword>
c000787e:	8d 45 44             	lea    eax,[ebp+0x44]
c0007881:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007885:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007889:	e8 54 a2 ff ff       	call   c0001ae2 <st_dword>
c000788e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007891:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007895:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007899:	83 c2 02             	add    edx,0x2
c000789c:	e8 41 a2 ff ff       	call   c0001ae2 <st_dword>
c00078a1:	8d 45 58             	lea    eax,[ebp+0x58]
c00078a4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00078a8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00078ac:	e8 31 a2 ff ff       	call   c0001ae2 <st_dword>
c00078b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b5:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078ba:	89 c6                	mov    esi,eax
c00078bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c0:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00078c7:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078cb:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078d2:	39 cb                	cmp    ebx,ecx
c00078d4:	76 02                	jbe    c00078d8 <f_mkfs+0x75c>
c00078d6:	89 cb                	mov    ebx,ecx
c00078d8:	83 ec 0c             	sub    esp,0xc
c00078db:	53                   	push   ebx
c00078dc:	57                   	push   edi
c00078dd:	56                   	push   esi
c00078de:	55                   	push   ebp
c00078df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078e3:	e8 4f a1 ff ff       	call   c0001a37 <disk_write>
c00078e8:	83 c4 20             	add    esp,0x20
c00078eb:	85 c0                	test   eax,eax
c00078ed:	0f 85 3a 09 00 00    	jne    c000822d <f_mkfs+0x10b1>
c00078f3:	31 d2                	xor    edx,edx
c00078f5:	b9 00 02 00 00       	mov    ecx,0x200
c00078fa:	89 e8                	mov    eax,ebp
c00078fc:	e8 ff a1 ff ff       	call   c0001b00 <mem_set>
c0007901:	31 d2                	xor    edx,edx
c0007903:	01 de                	add    esi,ebx
c0007905:	11 d7                	adc    edi,edx
c0007907:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000790a:	75 bf                	jne    c00078cb <f_mkfs+0x74f>
c000790c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007910:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007914:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000791c:	b9 00 02 00 00       	mov    ecx,0x200
c0007921:	31 d2                	xor    edx,edx
c0007923:	89 e8                	mov    eax,ebp
c0007925:	e8 d6 a1 ff ff       	call   c0001b00 <mem_set>
c000792a:	b9 0b 00 00 00       	mov    ecx,0xb
c000792f:	ba 00 4f 02 c0       	mov    edx,0xc0024f00
c0007934:	89 e8                	mov    eax,ebp
c0007936:	e8 b0 a1 ff ff       	call   c0001aeb <mem_cpy>
c000793b:	8d 45 40             	lea    eax,[ebp+0x40]
c000793e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007942:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007946:	e8 9a a1 ff ff       	call   c0001ae5 <st_qword>
c000794b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000794f:	8d 45 48             	lea    eax,[ebp+0x48]
c0007952:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007956:	e8 8a a1 ff ff       	call   c0001ae5 <st_qword>
c000795b:	8d 45 50             	lea    eax,[ebp+0x50]
c000795e:	ba 20 00 00 00       	mov    edx,0x20
c0007963:	e8 7a a1 ff ff       	call   c0001ae2 <st_dword>
c0007968:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000796c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007970:	e8 6d a1 ff ff       	call   c0001ae2 <st_dword>
c0007975:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007979:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000797d:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007981:	e8 5c a1 ff ff       	call   c0001ae2 <st_dword>
c0007986:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007989:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000798d:	e8 50 a1 ff ff       	call   c0001ae2 <st_dword>
c0007992:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007996:	8d 50 02             	lea    edx,[eax+0x2]
c0007999:	8d 45 60             	lea    eax,[ebp+0x60]
c000799c:	e8 41 a1 ff ff       	call   c0001ae2 <st_dword>
c00079a1:	8d 45 64             	lea    eax,[ebp+0x64]
c00079a4:	ba 00 00 21 50       	mov    edx,0x50210000
c00079a9:	e8 34 a1 ff ff       	call   c0001ae2 <st_dword>
c00079ae:	8d 45 68             	lea    eax,[ebp+0x68]
c00079b1:	ba 00 01 00 00       	mov    edx,0x100
c00079b6:	e8 23 a1 ff ff       	call   c0001ade <st_word>
c00079bb:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079bf:	b8 0a 00 00 00       	mov    eax,0xa
c00079c4:	48                   	dec    eax
c00079c5:	74 05                	je     c00079cc <f_mkfs+0x850>
c00079c7:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079ca:	eb f8                	jmp    c00079c4 <f_mkfs+0x848>
c00079cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079d0:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079d8:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079dc:	74 05                	je     c00079e3 <f_mkfs+0x867>
c00079de:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079e1:	eb f5                	jmp    c00079d8 <f_mkfs+0x85c>
c00079e3:	8d 45 78             	lea    eax,[ebp+0x78]
c00079e6:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079eb:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079f1:	31 db                	xor    ebx,ebx
c00079f3:	e8 e6 a0 ff ff       	call   c0001ade <st_word>
c00079f8:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079fe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a06:	e8 d3 a0 ff ff       	call   c0001ade <st_word>
c0007a0b:	31 c9                	xor    ecx,ecx
c0007a0d:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007a10:	83 f8 01             	cmp    eax,0x1
c0007a13:	76 13                	jbe    c0007a28 <f_mkfs+0x8ac>
c0007a15:	83 f9 70             	cmp    ecx,0x70
c0007a18:	74 0e                	je     c0007a28 <f_mkfs+0x8ac>
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a21:	e8 41 a5 ff ff       	call   c0001f67 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	41                   	inc    ecx
c0007a29:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2f:	75 dc                	jne    c0007a0d <f_mkfs+0x891>
c0007a31:	89 f0                	mov    eax,esi
c0007a33:	89 fa                	mov    edx,edi
c0007a35:	83 c0 01             	add    eax,0x1
c0007a38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a3c:	83 d2 00             	adc    edx,0x0
c0007a3f:	83 ec 0c             	sub    esp,0xc
c0007a42:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a46:	6a 01                	push   0x1
c0007a48:	57                   	push   edi
c0007a49:	56                   	push   esi
c0007a4a:	55                   	push   ebp
c0007a4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a4f:	e8 e3 9f ff ff       	call   c0001a37 <disk_write>
c0007a54:	83 c4 20             	add    esp,0x20
c0007a57:	85 c0                	test   eax,eax
c0007a59:	0f 85 ce 07 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007a5f:	31 d2                	xor    edx,edx
c0007a61:	b9 00 02 00 00       	mov    ecx,0x200
c0007a66:	89 e8                	mov    eax,ebp
c0007a68:	e8 93 a0 ff ff       	call   c0001b00 <mem_set>
c0007a6d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	e8 64 a0 ff ff       	call   c0001ade <st_word>
c0007a7a:	89 f0                	mov    eax,esi
c0007a7c:	89 fa                	mov    edx,edi
c0007a7e:	83 c0 09             	add    eax,0x9
c0007a81:	83 d2 00             	adc    edx,0x0
c0007a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a87:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a8b:	31 c9                	xor    ecx,ecx
c0007a8d:	41                   	inc    ecx
c0007a8e:	89 da                	mov    edx,ebx
c0007a90:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a95:	e8 cd a4 ff ff       	call   c0001f67 <xsum32>
c0007a9a:	89 c3                	mov    ebx,eax
c0007a9c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007aa2:	75 e9                	jne    c0007a8d <f_mkfs+0x911>
c0007aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007aa8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007aac:	83 c0 01             	add    eax,0x1
c0007aaf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ab3:	83 d2 00             	adc    edx,0x0
c0007ab6:	83 ec 0c             	sub    esp,0xc
c0007ab9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007abd:	6a 01                	push   0x1
c0007abf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac7:	55                   	push   ebp
c0007ac8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007acc:	e8 66 9f ff ff       	call   c0001a37 <disk_write>
c0007ad1:	83 c4 20             	add    esp,0x20
c0007ad4:	85 c0                	test   eax,eax
c0007ad6:	0f 85 51 07 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ae0:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ae4:	75 09                	jne    c0007aef <f_mkfs+0x973>
c0007ae6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ae9:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007aed:	74 12                	je     c0007b01 <f_mkfs+0x985>
c0007aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007af7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007afb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aff:	eb 8a                	jmp    c0007a8b <f_mkfs+0x90f>
c0007b01:	31 d2                	xor    edx,edx
c0007b03:	b9 00 02 00 00       	mov    ecx,0x200
c0007b08:	89 e8                	mov    eax,ebp
c0007b0a:	e8 f1 9f ff ff       	call   c0001b00 <mem_set>
c0007b0f:	83 c6 0b             	add    esi,0xb
c0007b12:	83 d7 00             	adc    edi,0x0
c0007b15:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b19:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b1d:	31 c9                	xor    ecx,ecx
c0007b1f:	41                   	inc    ecx
c0007b20:	89 da                	mov    edx,ebx
c0007b22:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b27:	e8 3b a4 ff ff       	call   c0001f67 <xsum32>
c0007b2c:	89 c3                	mov    ebx,eax
c0007b2e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b34:	75 e9                	jne    c0007b1f <f_mkfs+0x9a3>
c0007b36:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b39:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b3d:	83 c6 01             	add    esi,0x1
c0007b40:	83 d7 00             	adc    edi,0x0
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	6a 01                	push   0x1
c0007b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b50:	55                   	push   ebp
c0007b51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b55:	e8 dd 9e ff ff       	call   c0001a37 <disk_write>
c0007b5a:	83 c4 20             	add    esp,0x20
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	0f 85 c8 06 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007b65:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b69:	75 06                	jne    c0007b71 <f_mkfs+0x9f5>
c0007b6b:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b6f:	74 09                	je     c0007b7a <f_mkfs+0x9fe>
c0007b71:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b78:	eb a3                	jmp    c0007b1d <f_mkfs+0x9a1>
c0007b7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b7e:	89 da                	mov    edx,ebx
c0007b80:	01 e8                	add    eax,ebp
c0007b82:	e8 5b 9f ff ff       	call   c0001ae2 <st_dword>
c0007b87:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b8c:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b94:	75 e4                	jne    c0007b7a <f_mkfs+0x9fe>
c0007b96:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b99:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b9d:	83 c6 02             	add    esi,0x2
c0007ba0:	83 d7 00             	adc    edi,0x0
c0007ba3:	83 ec 0c             	sub    esp,0xc
c0007ba6:	6a 01                	push   0x1
c0007ba8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bb0:	55                   	push   ebp
c0007bb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007bb5:	e8 7d 9e ff ff       	call   c0001a37 <disk_write>
c0007bba:	83 c4 20             	add    esp,0x20
c0007bbd:	85 c0                	test   eax,eax
c0007bbf:	0f 85 68 06 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007bc5:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bca:	74 0d                	je     c0007bd9 <f_mkfs+0xa5d>
c0007bcc:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bd4:	e9 43 fd ff ff       	jmp    c000791c <f_mkfs+0x7a0>
c0007bd9:	b1 07                	mov    cl,0x7
c0007bdb:	e9 e3 05 00 00       	jmp    c00081c3 <f_mkfs+0x1047>
c0007be0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007be5:	0f 85 4f 02 00 00    	jne    c0007e3a <f_mkfs+0xcbe>
c0007beb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bf0:	0f 86 22 02 00 00    	jbe    c0007e18 <f_mkfs+0xc9c>
c0007bf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bfb:	0f 85 81 06 00 00    	jne    c0008282 <f_mkfs+0x1106>
c0007c01:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007c04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c08:	83 f8 40             	cmp    eax,0x40
c0007c0b:	0f 87 51 06 00 00    	ja     c0008262 <f_mkfs+0x10e6>
c0007c11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c15:	85 ff                	test   edi,edi
c0007c17:	75 1c                	jne    c0007c35 <f_mkfs+0xab9>
c0007c19:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c1c:	ba 00 4e 02 c0       	mov    edx,0xc0024e00
c0007c21:	c1 e9 0c             	shr    ecx,0xc
c0007c24:	bf 01 00 00 00       	mov    edi,0x1
c0007c29:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c2c:	66 85 c0             	test   ax,ax
c0007c2f:	0f 85 95 01 00 00    	jne    c0007dca <f_mkfs+0xc4e>
c0007c35:	31 d2                	xor    edx,edx
c0007c37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c3a:	f7 f7                	div    edi
c0007c3c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c41:	0f 86 95 01 00 00    	jbe    c0007ddc <f_mkfs+0xc60>
c0007c47:	83 c0 02             	add    eax,0x2
c0007c4a:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c4f:	01 c0                	add    eax,eax
c0007c51:	05 ff 01 00 00       	add    eax,0x1ff
c0007c56:	be 01 00 00 00       	mov    esi,0x1
c0007c5b:	c1 e8 09             	shr    eax,0x9
c0007c5e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c66:	c1 e0 05             	shl    eax,0x5
c0007c69:	c1 e8 09             	shr    eax,0x9
c0007c6c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c70:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c75:	31 d2                	xor    edx,edx
c0007c77:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c7b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c7f:	89 f0                	mov    eax,esi
c0007c81:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c85:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c95:	31 d2                	xor    edx,edx
c0007c97:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c9c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007ca0:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ca4:	31 db                	xor    ebx,ebx
c0007ca6:	01 c8                	add    eax,ecx
c0007ca8:	11 da                	adc    edx,ebx
c0007caa:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007cae:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007cb2:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007cb6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007cba:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007cbe:	f7 da                	neg    edx
c0007cc0:	21 d1                	and    ecx,edx
c0007cc2:	29 d9                	sub    ecx,ebx
c0007cc4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc9:	0f 85 20 01 00 00    	jne    c0007def <f_mkfs+0xc73>
c0007ccf:	31 db                	xor    ebx,ebx
c0007cd1:	01 ce                	add    esi,ecx
c0007cd3:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cd7:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cdb:	31 d2                	xor    edx,edx
c0007cdd:	89 f8                	mov    eax,edi
c0007cdf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ce3:	c1 e0 04             	shl    eax,0x4
c0007ce6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cea:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cee:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cf2:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cf6:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cf9:	19 d3                	sbb    ebx,edx
c0007cfb:	0f 82 40 01 00 00    	jb     c0007e41 <f_mkfs+0xcc5>
c0007d01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d04:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d08:	89 c8                	mov    eax,ecx
c0007d0a:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007d0f:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007d13:	29 f0                	sub    eax,esi
c0007d15:	29 d0                	sub    eax,edx
c0007d17:	31 d2                	xor    edx,edx
c0007d19:	f7 f7                	div    edi
c0007d1b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d20:	89 c3                	mov    ebx,eax
c0007d22:	0f 85 b8 fe ff ff    	jne    c0007be0 <f_mkfs+0xa64>
c0007d28:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d2d:	0f 87 1d 01 00 00    	ja     c0007e50 <f_mkfs+0xcd4>
c0007d33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d38:	0f 85 03 01 00 00    	jne    c0007e41 <f_mkfs+0xcc5>
c0007d3e:	83 ff 01             	cmp    edi,0x1
c0007d41:	0f 86 fa 00 00 00    	jbe    c0007e41 <f_mkfs+0xcc5>
c0007d47:	d1 ef                	shr    edi,1
c0007d49:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d4d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d54:	85 db                	test   ebx,ebx
c0007d56:	75 2d                	jne    c0007d85 <f_mkfs+0xc09>
c0007d58:	89 cb                	mov    ebx,ecx
c0007d5a:	ba 10 4e 02 c0       	mov    edx,0xc0024e10
c0007d5f:	c1 eb 11             	shr    ebx,0x11
c0007d62:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d6a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d6d:	66 85 c0             	test   ax,ax
c0007d70:	74 11                	je     c0007d83 <f_mkfs+0xc07>
c0007d72:	83 c2 02             	add    edx,0x2
c0007d75:	39 d8                	cmp    eax,ebx
c0007d77:	77 0a                	ja     c0007d83 <f_mkfs+0xc07>
c0007d79:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d7d:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d81:	eb e7                	jmp    c0007d6a <f_mkfs+0xbee>
c0007d83:	31 db                	xor    ebx,ebx
c0007d85:	31 d2                	xor    edx,edx
c0007d87:	89 c8                	mov    eax,ecx
c0007d89:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d8d:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d94:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d99:	c1 ea 09             	shr    edx,0x9
c0007d9c:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007da1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007da5:	0f 87 96 00 00 00    	ja     c0007e41 <f_mkfs+0xcc5>
c0007dab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007daf:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007db7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007dbb:	be 20 00 00 00       	mov    esi,0x20
c0007dc0:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007dc5:	e9 a6 fe ff ff       	jmp    c0007c70 <f_mkfs+0xaf4>
c0007dca:	83 c2 02             	add    edx,0x2
c0007dcd:	39 c8                	cmp    eax,ecx
c0007dcf:	0f 87 60 fe ff ff    	ja     c0007c35 <f_mkfs+0xab9>
c0007dd5:	01 ff                	add    edi,edi
c0007dd7:	e9 4d fe ff ff       	jmp    c0007c29 <f_mkfs+0xaad>
c0007ddc:	8d 04 40             	lea    eax,[eax+eax*2]
c0007ddf:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de4:	40                   	inc    eax
c0007de5:	d1 e8                	shr    eax,1
c0007de7:	83 c0 03             	add    eax,0x3
c0007dea:	e9 62 fe ff ff       	jmp    c0007c51 <f_mkfs+0xad5>
c0007def:	31 d2                	xor    edx,edx
c0007df1:	89 c8                	mov    eax,ecx
c0007df3:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007df7:	85 d2                	test   edx,edx
c0007df9:	74 0c                	je     c0007e07 <f_mkfs+0xc8b>
c0007dfb:	49                   	dec    ecx
c0007dfc:	46                   	inc    esi
c0007dfd:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007e02:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007e07:	89 c8                	mov    eax,ecx
c0007e09:	31 d2                	xor    edx,edx
c0007e0b:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007e0f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007e13:	e9 c3 fe ff ff       	jmp    c0007cdb <f_mkfs+0xb5f>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	77 31                	ja     c0007e50 <f_mkfs+0xcd4>
c0007e1f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e24:	75 1b                	jne    c0007e41 <f_mkfs+0xcc5>
c0007e26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e2d:	3d 80 00 00 00       	cmp    eax,0x80
c0007e32:	0f 86 d9 fd ff ff    	jbe    c0007c11 <f_mkfs+0xa95>
c0007e38:	eb 07                	jmp    c0007e41 <f_mkfs+0xcc5>
c0007e3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e3f:	76 0a                	jbe    c0007e4b <f_mkfs+0xccf>
c0007e41:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e46:	e9 ff 03 00 00       	jmp    c000824a <f_mkfs+0x10ce>
c0007e4b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	b9 00 02 00 00       	mov    ecx,0x200
c0007e57:	89 e8                	mov    eax,ebp
c0007e59:	e8 a2 9c ff ff       	call   c0001b00 <mem_set>
c0007e5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e63:	ba 22 4f 02 c0       	mov    edx,0xc0024f22
c0007e68:	89 e8                	mov    eax,ebp
c0007e6a:	e8 7c 9c ff ff       	call   c0001aeb <mem_cpy>
c0007e6f:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e72:	ba 00 02 00 00       	mov    edx,0x200
c0007e77:	e8 62 9c ff ff       	call   c0001ade <st_word>
c0007e7c:	89 f8                	mov    eax,edi
c0007e7e:	0f b7 d6             	movzx  edx,si
c0007e81:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e84:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e87:	e8 52 9c ff ff       	call   c0001ade <st_word>
c0007e8c:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e90:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e95:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e98:	75 08                	jne    c0007ea2 <f_mkfs+0xd26>
c0007e9a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ea2:	8d 45 11             	lea    eax,[ebp+0x11]
c0007ea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ea9:	e8 30 9c ff ff       	call   c0001ade <st_word>
c0007eae:	b8 ff ff 00 00       	mov    eax,0xffff
c0007eb3:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007eb7:	39 d0                	cmp    eax,edx
c0007eb9:	b8 00 00 00 00       	mov    eax,0x0
c0007ebe:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ec2:	72 0a                	jb     c0007ece <f_mkfs+0xd52>
c0007ec4:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ec7:	e8 12 9c ff ff       	call   c0001ade <st_word>
c0007ecc:	eb 08                	jmp    c0007ed6 <f_mkfs+0xd5a>
c0007ece:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ed1:	e8 0c 9c ff ff       	call   c0001ae2 <st_dword>
c0007ed6:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ed9:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ede:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ee2:	e8 f7 9b ff ff       	call   c0001ade <st_word>
c0007ee7:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007eea:	ba ff 00 00 00       	mov    edx,0xff
c0007eef:	e8 ea 9b ff ff       	call   c0001ade <st_word>
c0007ef4:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ef7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007efb:	e8 e2 9b ff ff       	call   c0001ae2 <st_dword>
c0007f00:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f05:	75 57                	jne    c0007f5e <f_mkfs+0xde2>
c0007f07:	8d 45 43             	lea    eax,[ebp+0x43]
c0007f0a:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0f:	e8 ce 9b ff ff       	call   c0001ae2 <st_dword>
c0007f14:	8d 45 24             	lea    eax,[ebp+0x24]
c0007f17:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f1b:	e8 c2 9b ff ff       	call   c0001ae2 <st_dword>
c0007f20:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f23:	ba 02 00 00 00       	mov    edx,0x2
c0007f28:	e8 b5 9b ff ff       	call   c0001ae2 <st_dword>
c0007f2d:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f30:	ba 01 00 00 00       	mov    edx,0x1
c0007f35:	e8 a4 9b ff ff       	call   c0001ade <st_word>
c0007f3a:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f3d:	ba 06 00 00 00       	mov    edx,0x6
c0007f42:	e8 97 9b ff ff       	call   c0001ade <st_word>
c0007f47:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f4b:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f4f:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f52:	b9 13 00 00 00       	mov    ecx,0x13
c0007f57:	ba 2e 4f 02 c0       	mov    edx,0xc0024f2e
c0007f5c:	eb 2f                	jmp    c0007f8d <f_mkfs+0xe11>
c0007f5e:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f61:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f66:	e8 77 9b ff ff       	call   c0001ae2 <st_dword>
c0007f6b:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f70:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f73:	e8 66 9b ff ff       	call   c0001ade <st_word>
c0007f78:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f7c:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f80:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f83:	b9 13 00 00 00       	mov    ecx,0x13
c0007f88:	ba 42 4f 02 c0       	mov    edx,0xc0024f42
c0007f8d:	e8 59 9b ff ff       	call   c0001aeb <mem_cpy>
c0007f92:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f98:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f9d:	89 f0                	mov    eax,esi
c0007f9f:	e8 3a 9b ff ff       	call   c0001ade <st_word>
c0007fa4:	83 ec 0c             	sub    esp,0xc
c0007fa7:	6a 01                	push   0x1
c0007fa9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fb1:	55                   	push   ebp
c0007fb2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fb6:	e8 7c 9a ff ff       	call   c0001a37 <disk_write>
c0007fbb:	83 c4 20             	add    esp,0x20
c0007fbe:	85 c0                	test   eax,eax
c0007fc0:	0f 85 67 02 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0007fc6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fcb:	0f 85 b7 00 00 00    	jne    c0008088 <f_mkfs+0xf0c>
c0007fd1:	83 ec 0c             	sub    esp,0xc
c0007fd4:	6a 01                	push   0x1
c0007fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fde:	83 c0 06             	add    eax,0x6
c0007fe1:	83 d2 00             	adc    edx,0x0
c0007fe4:	52                   	push   edx
c0007fe5:	50                   	push   eax
c0007fe6:	55                   	push   ebp
c0007fe7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007feb:	e8 47 9a ff ff       	call   c0001a37 <disk_write>
c0007ff0:	83 c4 20             	add    esp,0x20
c0007ff3:	b9 00 02 00 00       	mov    ecx,0x200
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 e8                	mov    eax,ebp
c0007ffc:	e8 ff 9a ff ff       	call   c0001b00 <mem_set>
c0008001:	ba 52 52 61 41       	mov    edx,0x41615252
c0008006:	89 e8                	mov    eax,ebp
c0008008:	e8 d5 9a ff ff       	call   c0001ae2 <st_dword>
c000800d:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008013:	ba 72 72 41 61       	mov    edx,0x61417272
c0008018:	e8 c5 9a ff ff       	call   c0001ae2 <st_dword>
c000801d:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008020:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008026:	e8 b7 9a ff ff       	call   c0001ae2 <st_dword>
c000802b:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008031:	ba 02 00 00 00       	mov    edx,0x2
c0008036:	e8 a7 9a ff ff       	call   c0001ae2 <st_dword>
c000803b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008040:	89 f0                	mov    eax,esi
c0008042:	e8 97 9a ff ff       	call   c0001ade <st_word>
c0008047:	83 ec 0c             	sub    esp,0xc
c000804a:	6a 01                	push   0x1
c000804c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008050:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008054:	83 c0 07             	add    eax,0x7
c0008057:	83 d2 00             	adc    edx,0x0
c000805a:	52                   	push   edx
c000805b:	50                   	push   eax
c000805c:	55                   	push   ebp
c000805d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008061:	e8 d1 99 ff ff       	call   c0001a37 <disk_write>
c0008066:	83 c4 14             	add    esp,0x14
c0008069:	6a 01                	push   0x1
c000806b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000806f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008073:	83 c0 01             	add    eax,0x1
c0008076:	83 d2 00             	adc    edx,0x0
c0008079:	52                   	push   edx
c000807a:	50                   	push   eax
c000807b:	55                   	push   ebp
c000807c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008080:	e8 b2 99 ff ff       	call   c0001a37 <disk_write>
c0008085:	83 c4 20             	add    esp,0x20
c0008088:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000808f:	31 d2                	xor    edx,edx
c0008091:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008097:	31 db                	xor    ebx,ebx
c0008099:	89 e8                	mov    eax,ebp
c000809b:	e8 60 9a ff ff       	call   c0001b00 <mem_set>
c00080a0:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00080a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00080ac:	0f 94 c3             	sete   bl
c00080af:	4b                   	dec    ebx
c00080b0:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00080b6:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c1:	75 21                	jne    c00080e4 <f_mkfs+0xf68>
c00080c3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080c8:	89 e8                	mov    eax,ebp
c00080ca:	e8 13 9a ff ff       	call   c0001ae2 <st_dword>
c00080cf:	8d 45 04             	lea    eax,[ebp+0x4]
c00080d2:	83 ca ff             	or     edx,0xffffffff
c00080d5:	e8 08 9a ff ff       	call   c0001ae2 <st_dword>
c00080da:	8d 45 08             	lea    eax,[ebp+0x8]
c00080dd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080e2:	eb 04                	jmp    c00080e8 <f_mkfs+0xf6c>
c00080e4:	89 da                	mov    edx,ebx
c00080e6:	89 e8                	mov    eax,ebp
c00080e8:	e8 f5 99 ff ff       	call   c0001ae2 <st_dword>
c00080ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080f5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080f9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080fd:	39 ce                	cmp    esi,ecx
c00080ff:	76 02                	jbe    c0008103 <f_mkfs+0xf87>
c0008101:	89 ce                	mov    esi,ecx
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	56                   	push   esi
c0008107:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810f:	55                   	push   ebp
c0008110:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008114:	e8 1e 99 ff ff       	call   c0001a37 <disk_write>
c0008119:	83 c4 20             	add    esp,0x20
c000811c:	85 c0                	test   eax,eax
c000811e:	0f 85 09 01 00 00    	jne    c000822d <f_mkfs+0x10b1>
c0008124:	31 d2                	xor    edx,edx
c0008126:	b9 00 02 00 00       	mov    ecx,0x200
c000812b:	89 e8                	mov    eax,ebp
c000812d:	e8 ce 99 ff ff       	call   c0001b00 <mem_set>
c0008132:	31 d2                	xor    edx,edx
c0008134:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008138:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813c:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008140:	75 b3                	jne    c00080f5 <f_mkfs+0xf79>
c0008142:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008145:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000814c:	40                   	inc    eax
c000814d:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008151:	0f 87 65 ff ff ff    	ja     c00080bc <f_mkfs+0xf40>
c0008157:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000815c:	74 04                	je     c0008162 <f_mkfs+0xfe6>
c000815e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008162:	89 fb                	mov    ebx,edi
c0008164:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008168:	76 04                	jbe    c000816e <f_mkfs+0xff2>
c000816a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000816e:	83 ec 0c             	sub    esp,0xc
c0008171:	53                   	push   ebx
c0008172:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008176:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000817a:	55                   	push   ebp
c000817b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000817f:	e8 b3 98 ff ff       	call   c0001a37 <disk_write>
c0008184:	83 c4 20             	add    esp,0x20
c0008187:	85 c0                	test   eax,eax
c0008189:	0f 85 9e 00 00 00    	jne    c000822d <f_mkfs+0x10b1>
c000818f:	31 d2                	xor    edx,edx
c0008191:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008195:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008199:	29 df                	sub    edi,ebx
c000819b:	75 c5                	jne    c0008162 <f_mkfs+0xfe6>
c000819d:	b1 0c                	mov    cl,0xc
c000819f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a4:	74 1d                	je     c00081c3 <f_mkfs+0x1047>
c00081a6:	b8 ff ff 00 00       	mov    eax,0xffff
c00081ab:	b1 06                	mov    cl,0x6
c00081ad:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00081b1:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00081b5:	72 0c                	jb     c00081c3 <f_mkfs+0x1047>
c00081b7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081bc:	0f 94 c1             	sete   cl
c00081bf:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081c3:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081c8:	75 4c                	jne    c0008216 <f_mkfs+0x109a>
c00081ca:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ce:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081d2:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081d9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081e0:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081eb:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081f6:	0f b6 c9             	movzx  ecx,cl
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008208:	e8 2f c2 ff ff       	call   c000443c <create_partition>
c000820d:	83 c4 10             	add    esp,0x10
c0008210:	89 c3                	mov    ebx,eax
c0008212:	85 c0                	test   eax,eax
c0008214:	75 34                	jne    c000824a <f_mkfs+0x10ce>
c0008216:	31 db                	xor    ebx,ebx
c0008218:	50                   	push   eax
c0008219:	6a 00                	push   0x0
c000821b:	6a 00                	push   0x0
c000821d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008221:	e8 27 98 ff ff       	call   c0001a4d <disk_ioctl>
c0008226:	83 c4 10             	add    esp,0x10
c0008229:	85 c0                	test   eax,eax
c000822b:	74 1d                	je     c000824a <f_mkfs+0x10ce>
c000822d:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008235:	75 0c                	jne    c0008243 <f_mkfs+0x10c7>
c0008237:	83 ec 0c             	sub    esp,0xc
c000823a:	55                   	push   ebp
c000823b:	e8 75 00 00 00       	call   c00082b5 <ff_memfree>
c0008240:	83 c4 10             	add    esp,0x10
c0008243:	bb 01 00 00 00       	mov    ebx,0x1
c0008248:	eb 48                	jmp    c0008292 <f_mkfs+0x1116>
c000824a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008252:	75 3e                	jne    c0008292 <f_mkfs+0x1116>
c0008254:	83 ec 0c             	sub    esp,0xc
c0008257:	55                   	push   ebp
c0008258:	e8 58 00 00 00       	call   c00082b5 <ff_memfree>
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	eb 30                	jmp    c0008292 <f_mkfs+0x1116>
c0008262:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008267:	0f 85 eb fa ff ff    	jne    c0007d58 <f_mkfs+0xbdc>
c000826d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008271:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008277:	0f 86 b8 f9 ff ff    	jbe    c0007c35 <f_mkfs+0xab9>
c000827d:	e9 bf fb ff ff       	jmp    c0007e41 <f_mkfs+0xcc5>
c0008282:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008287:	0f 85 c0 fa ff ff    	jne    c0007d4d <f_mkfs+0xbd1>
c000828d:	e9 af fb ff ff       	jmp    c0007e41 <f_mkfs+0xcc5>
c0008292:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008298:	89 d8                	mov    eax,ebx
c000829a:	5b                   	pop    ebx
c000829b:	5e                   	pop    esi
c000829c:	5f                   	pop    edi
c000829d:	5d                   	pop    ebp
c000829e:	c3                   	ret    

c000829f <ff_memalloc>:
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	83 ec 0c             	sub    esp,0xc
c00082a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082a9:	e8 b2 6e 00 00       	call   c000f160 <malloc>
c00082ae:	83 c4 10             	add    esp,0x10
c00082b1:	83 c4 0c             	add    esp,0xc
c00082b4:	c3                   	ret    

c00082b5 <ff_memfree>:
c00082b5:	83 ec 0c             	sub    esp,0xc
c00082b8:	83 ec 0c             	sub    esp,0xc
c00082bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082bf:	e8 ac 6e 00 00       	call   c000f170 <free>
c00082c4:	83 c4 10             	add    esp,0x10
c00082c7:	90                   	nop
c00082c8:	83 c4 0c             	add    esp,0xc
c00082cb:	c3                   	ret    

c00082cc <ff_uni2oem>:
c00082cc:	83 ec 14             	sub    esp,0x14
c00082cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082d3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082d7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082de:	c7 44 24 0c 60 52 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025260
c00082e6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082eb:	77 0b                	ja     c00082f8 <ff_uni2oem+0x2c>
c00082ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082f1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f6:	eb 5b                	jmp    c0008353 <ff_uni2oem+0x87>
c00082f8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008300:	77 51                	ja     c0008353 <ff_uni2oem+0x87>
c0008302:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008308:	75 49                	jne    c0008353 <ff_uni2oem+0x87>
c000830a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008311:	eb 0b                	jmp    c000831e <ff_uni2oem+0x52>
c0008313:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008318:	40                   	inc    eax
c0008319:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000831e:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008324:	77 1b                	ja     c0008341 <ff_uni2oem+0x75>
c0008326:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000832b:	01 c0                	add    eax,eax
c000832d:	89 c2                	mov    edx,eax
c000832f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008333:	01 d0                	add    eax,edx
c0008335:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008338:	0f b7 c0             	movzx  eax,ax
c000833b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000833f:	75 d2                	jne    c0008313 <ff_uni2oem+0x47>
c0008341:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008346:	83 e8 80             	sub    eax,0xffffff80
c0008349:	25 ff 00 00 00       	and    eax,0xff
c000834e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008353:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008358:	83 c4 14             	add    esp,0x14
c000835b:	c3                   	ret    

c000835c <ff_oem2uni>:
c000835c:	83 ec 18             	sub    esp,0x18
c000835f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008367:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000836c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008370:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008377:	c7 44 24 10 60 52 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025260
c000837f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008385:	77 0b                	ja     c0008392 <ff_oem2uni+0x36>
c0008387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008390:	eb 2d                	jmp    c00083bf <ff_oem2uni+0x63>
c0008392:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008398:	75 25                	jne    c00083bf <ff_oem2uni+0x63>
c000839a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00083a1:	77 1c                	ja     c00083bf <ff_oem2uni+0x63>
c00083a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00083a8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00083ad:	01 c0                	add    eax,eax
c00083af:	89 c2                	mov    edx,eax
c00083b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083b5:	01 d0                	add    eax,edx
c00083b7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ba:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083bf:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083c4:	83 c4 18             	add    esp,0x18
c00083c7:	c3                   	ret    

c00083c8 <ff_wtoupper>:
c00083c8:	83 ec 10             	sub    esp,0x10
c00083cb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083d3:	0f 87 3e 01 00 00    	ja     c0008517 <ff_wtoupper+0x14f>
c00083d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083dd:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083e2:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083e9:	77 07                	ja     c00083f2 <ff_wtoupper+0x2a>
c00083eb:	b8 60 50 02 c0       	mov    eax,0xc0025060
c00083f0:	eb 05                	jmp    c00083f7 <ff_wtoupper+0x2f>
c00083f2:	b8 a0 4f 02 c0       	mov    eax,0xc0024fa0
c00083f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ff:	8d 50 02             	lea    edx,[eax+0x2]
c0008402:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008406:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008409:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000840e:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008414:	0f 84 f4 00 00 00    	je     c000850e <ff_wtoupper+0x146>
c000841a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000841f:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008424:	0f 82 e4 00 00 00    	jb     c000850e <ff_wtoupper+0x146>
c000842a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842e:	8d 50 02             	lea    edx,[eax+0x2]
c0008431:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008435:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008438:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000843d:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008442:	66 c1 e8 08          	shr    ax,0x8
c0008446:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000844b:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008452:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008457:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000845c:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008461:	01 ca                	add    edx,ecx
c0008463:	39 d0                	cmp    eax,edx
c0008465:	0f 8d 86 00 00 00    	jge    c00084f1 <ff_wtoupper+0x129>
c000846b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008470:	83 f8 08             	cmp    eax,0x8
c0008473:	0f 87 94 00 00 00    	ja     c000850d <ff_wtoupper+0x145>
c0008479:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0008480:	ff e0                	jmp    eax
c0008482:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008487:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000848c:	29 c2                	sub    edx,eax
c000848e:	89 d0                	mov    eax,edx
c0008490:	01 c0                	add    eax,eax
c0008492:	89 c2                	mov    edx,eax
c0008494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008498:	01 d0                	add    eax,edx
c000849a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000849d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00084a2:	eb 4b                	jmp    c00084ef <ff_wtoupper+0x127>
c00084a4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084a9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00084ad:	83 e0 01             	and    eax,0x1
c00084b0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00084b5:	eb 38                	jmp    c00084ef <ff_wtoupper+0x127>
c00084b7:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084bd:	eb 30                	jmp    c00084ef <ff_wtoupper+0x127>
c00084bf:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084c5:	eb 28                	jmp    c00084ef <ff_wtoupper+0x127>
c00084c7:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084cd:	eb 20                	jmp    c00084ef <ff_wtoupper+0x127>
c00084cf:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084d5:	eb 18                	jmp    c00084ef <ff_wtoupper+0x127>
c00084d7:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084dd:	eb 10                	jmp    c00084ef <ff_wtoupper+0x127>
c00084df:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084e5:	eb 08                	jmp    c00084ef <ff_wtoupper+0x127>
c00084e7:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084ee:	90                   	nop
c00084ef:	eb 1c                	jmp    c000850d <ff_wtoupper+0x145>
c00084f1:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084f7:	0f 85 fe fe ff ff    	jne    c00083fb <ff_wtoupper+0x33>
c00084fd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008502:	01 c0                	add    eax,eax
c0008504:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008508:	e9 ee fe ff ff       	jmp    c00083fb <ff_wtoupper+0x33>
c000850d:	90                   	nop
c000850e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008513:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000851b:	83 c4 10             	add    esp,0x10
c000851e:	c3                   	ret    

c000851f <is_bad_src_ratio>:
c000851f:	83 ec 1c             	sub    esp,0x1c
c0008522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008526:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000852a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000852e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008532:	b8 00 00 00 00       	mov    eax,0x0
c0008537:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000853c:	52                   	push   edx
c000853d:	50                   	push   eax
c000853e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008546:	e8 04 ba 01 00       	call   c0023f4f <__ltdf2>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	78 20                	js     c0008572 <is_bad_src_ratio+0x53>
c0008552:	b8 00 00 00 00       	mov    eax,0x0
c0008557:	ba 00 00 70 40       	mov    edx,0x40700000
c000855c:	52                   	push   edx
c000855d:	50                   	push   eax
c000855e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008566:	e8 c6 b9 01 00       	call   c0023f31 <__gtdf2>
c000856b:	83 c4 10             	add    esp,0x10
c000856e:	85 c0                	test   eax,eax
c0008570:	7e 07                	jle    c0008579 <is_bad_src_ratio+0x5a>
c0008572:	b8 01 00 00 00       	mov    eax,0x1
c0008577:	eb 05                	jmp    c000857e <is_bad_src_ratio+0x5f>
c0008579:	b8 00 00 00 00       	mov    eax,0x0
c000857e:	83 c4 1c             	add    esp,0x1c
c0008581:	c3                   	ret    

c0008582 <psrc_set_converter>:
c0008582:	56                   	push   esi
c0008583:	89 d6                	mov    esi,edx
c0008585:	53                   	push   ebx
c0008586:	89 c3                	mov    ebx,eax
c0008588:	83 ec 0c             	sub    esp,0xc
c000858b:	52                   	push   edx
c000858c:	50                   	push   eax
c000858d:	e8 58 51 00 00       	call   c000d6ea <sinc_set_converter>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	85 c0                	test   eax,eax
c0008597:	74 25                	je     c00085be <psrc_set_converter+0x3c>
c0008599:	50                   	push   eax
c000859a:	50                   	push   eax
c000859b:	56                   	push   esi
c000859c:	53                   	push   ebx
c000859d:	e8 2a 59 00 00       	call   c000decc <zoh_set_converter>
c00085a2:	83 c4 10             	add    esp,0x10
c00085a5:	85 c0                	test   eax,eax
c00085a7:	74 15                	je     c00085be <psrc_set_converter+0x3c>
c00085a9:	51                   	push   ecx
c00085aa:	51                   	push   ecx
c00085ab:	56                   	push   esi
c00085ac:	53                   	push   ebx
c00085ad:	e8 77 10 00 00       	call   c0009629 <linear_set_converter>
c00085b2:	83 c4 10             	add    esp,0x10
c00085b5:	ba 0a 00 00 00       	mov    edx,0xa
c00085ba:	85 c0                	test   eax,eax
c00085bc:	75 02                	jne    c00085c0 <psrc_set_converter+0x3e>
c00085be:	31 d2                	xor    edx,edx
c00085c0:	89 d0                	mov    eax,edx
c00085c2:	5a                   	pop    edx
c00085c3:	5b                   	pop    ebx
c00085c4:	5e                   	pop    esi
c00085c5:	c3                   	ret    

c00085c6 <src_delete>:
c00085c6:	53                   	push   ebx
c00085c7:	83 ec 08             	sub    esp,0x8
c00085ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085ce:	85 db                	test   ebx,ebx
c00085d0:	74 29                	je     c00085fb <src_delete+0x35>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	85 c0                	test   eax,eax
c00085d7:	74 0c                	je     c00085e5 <src_delete+0x1f>
c00085d9:	83 ec 0c             	sub    esp,0xc
c00085dc:	50                   	push   eax
c00085dd:	e8 8e 6b 00 00       	call   c000f170 <free>
c00085e2:	83 c4 10             	add    esp,0x10
c00085e5:	50                   	push   eax
c00085e6:	6a 3c                	push   0x3c
c00085e8:	6a 00                	push   0x0
c00085ea:	53                   	push   ebx
c00085eb:	e8 f6 80 ff ff       	call   c00006e6 <memset>
c00085f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085f3:	e8 78 6b 00 00       	call   c000f170 <free>
c00085f8:	83 c4 10             	add    esp,0x10
c00085fb:	31 c0                	xor    eax,eax
c00085fd:	83 c4 08             	add    esp,0x8
c0008600:	5b                   	pop    ebx
c0008601:	c3                   	ret    

c0008602 <src_process>:
c0008602:	56                   	push   esi
c0008603:	53                   	push   ebx
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000860b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000860f:	85 f6                	test   esi,esi
c0008611:	0f 84 2a 01 00 00    	je     c0008741 <src_process+0x13f>
c0008617:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000861b:	0f 84 27 01 00 00    	je     c0008748 <src_process+0x146>
c0008621:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008625:	0f 84 1d 01 00 00    	je     c0008748 <src_process+0x146>
c000862b:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008632:	0f 85 17 01 00 00    	jne    c000874f <src_process+0x14d>
c0008638:	85 db                	test   ebx,ebx
c000863a:	0f 84 16 01 00 00    	je     c0008756 <src_process+0x154>
c0008640:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008643:	0f 84 14 01 00 00    	je     c000875d <src_process+0x15b>
c0008649:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000864d:	0f 84 0a 01 00 00    	je     c000875d <src_process+0x15b>
c0008653:	50                   	push   eax
c0008654:	50                   	push   eax
c0008655:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008658:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865b:	e8 bf fe ff ff       	call   c000851f <is_bad_src_ratio>
c0008660:	83 c4 10             	add    esp,0x10
c0008663:	85 c0                	test   eax,eax
c0008665:	0f 85 f9 00 00 00    	jne    c0008764 <src_process+0x162>
c000866b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000866f:	79 07                	jns    c0008678 <src_process+0x76>
c0008671:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008678:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000867c:	79 07                	jns    c0008685 <src_process+0x83>
c000867e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008685:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008687:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000868a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000868d:	39 ca                	cmp    edx,ecx
c000868f:	73 0b                	jae    c000869c <src_process+0x9a>
c0008691:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008695:	8d 04 82             	lea    eax,[edx+eax*4]
c0008698:	39 c1                	cmp    ecx,eax
c000869a:	eb 09                	jmp    c00086a5 <src_process+0xa3>
c000869c:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00086a0:	8d 04 81             	lea    eax,[ecx+eax*4]
c00086a3:	39 c2                	cmp    edx,eax
c00086a5:	0f 82 c0 00 00 00    	jb     c000876b <src_process+0x169>
c00086ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00086b2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00086b9:	68 00 00 70 3f       	push   0x3f700000
c00086be:	6a 00                	push   0x0
c00086c0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086c3:	ff 36                	push   DWORD PTR [esi]
c00086c5:	e8 85 b8 01 00       	call   c0023f4f <__ltdf2>
c00086ca:	83 c4 10             	add    esp,0x10
c00086cd:	85 c0                	test   eax,eax
c00086cf:	79 0b                	jns    c00086dc <src_process+0xda>
c00086d1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086d4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086d7:	89 06                	mov    DWORD PTR [esi],eax
c00086d9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086dc:	83 ec 10             	sub    esp,0x10
c00086df:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086e8:	ff 36                	push   DWORD PTR [esi]
c00086ea:	e8 65 af 01 00       	call   c0023654 <__subdf3>
c00086ef:	83 c4 18             	add    esp,0x18
c00086f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086fa:	52                   	push   edx
c00086fb:	50                   	push   eax
c00086fc:	e8 df b9 01 00       	call   c00240e0 <fabs>
c0008701:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008705:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008709:	83 c4 10             	add    esp,0x10
c000870c:	68 af 03 d2 3c       	push   0x3cd203af
c0008711:	68 16 56 e7 9e       	push   0x9ee75616
c0008716:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000871a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000871e:	e8 2c b8 01 00       	call   c0023f4f <__ltdf2>
c0008723:	83 c4 10             	add    esp,0x10
c0008726:	85 c0                	test   eax,eax
c0008728:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c000872c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008730:	79 05                	jns    c0008737 <src_process+0x135>
c0008732:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008735:	eb 03                	jmp    c000873a <src_process+0x138>
c0008737:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000873a:	83 c4 14             	add    esp,0x14
c000873d:	5b                   	pop    ebx
c000873e:	5e                   	pop    esi
c000873f:	ff e0                	jmp    eax
c0008741:	b8 02 00 00 00       	mov    eax,0x2
c0008746:	eb 28                	jmp    c0008770 <src_process+0x16e>
c0008748:	b8 07 00 00 00       	mov    eax,0x7
c000874d:	eb 21                	jmp    c0008770 <src_process+0x16e>
c000874f:	b8 12 00 00 00       	mov    eax,0x12
c0008754:	eb 1a                	jmp    c0008770 <src_process+0x16e>
c0008756:	b8 03 00 00 00       	mov    eax,0x3
c000875b:	eb 13                	jmp    c0008770 <src_process+0x16e>
c000875d:	b8 04 00 00 00       	mov    eax,0x4
c0008762:	eb 0c                	jmp    c0008770 <src_process+0x16e>
c0008764:	b8 06 00 00 00       	mov    eax,0x6
c0008769:	eb 05                	jmp    c0008770 <src_process+0x16e>
c000876b:	b8 10 00 00 00       	mov    eax,0x10
c0008770:	83 c4 14             	add    esp,0x14
c0008773:	5b                   	pop    ebx
c0008774:	5e                   	pop    esi
c0008775:	c3                   	ret    

c0008776 <src_callback_read>:
c0008776:	55                   	push   ebp
c0008777:	57                   	push   edi
c0008778:	56                   	push   esi
c0008779:	53                   	push   ebx
c000877a:	83 ec 3c             	sub    esp,0x3c
c000877d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008781:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008785:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008789:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000878d:	85 ed                	test   ebp,ebp
c000878f:	0f 8e 30 01 00 00    	jle    c00088c5 <src_callback_read+0x14f>
c0008795:	85 db                	test   ebx,ebx
c0008797:	0f 84 28 01 00 00    	je     c00088c5 <src_callback_read+0x14f>
c000879d:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00087a4:	74 0c                	je     c00087b2 <src_callback_read+0x3c>
c00087a6:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00087ad:	e9 13 01 00 00       	jmp    c00088c5 <src_callback_read+0x14f>
c00087b2:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00087b6:	75 0c                	jne    c00087c4 <src_callback_read+0x4e>
c00087b8:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00087bf:	e9 01 01 00 00       	jmp    c00088c5 <src_callback_read+0x14f>
c00087c4:	51                   	push   ecx
c00087c5:	6a 24                	push   0x24
c00087c7:	6a 00                	push   0x0
c00087c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087cd:	50                   	push   eax
c00087ce:	e8 13 7f ff ff       	call   c00006e6 <memset>
c00087d3:	58                   	pop    eax
c00087d4:	5a                   	pop    edx
c00087d5:	57                   	push   edi
c00087d6:	56                   	push   esi
c00087d7:	e8 43 fd ff ff       	call   c000851f <is_bad_src_ratio>
c00087dc:	83 c4 10             	add    esp,0x10
c00087df:	85 c0                	test   eax,eax
c00087e1:	74 0c                	je     c00087ef <src_callback_read+0x79>
c00087e3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ea:	e9 d6 00 00 00       	jmp    c00088c5 <src_callback_read+0x14f>
c00087ef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087f3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087fb:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008802:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008806:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000880a:	31 f6                	xor    esi,esi
c000880c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000880f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008813:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008818:	75 30                	jne    c000884a <src_callback_read+0xd4>
c000881a:	8d 44 24 04          	lea    eax,[esp+0x4]
c000881e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008822:	52                   	push   edx
c0008823:	52                   	push   edx
c0008824:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008828:	50                   	push   eax
c0008829:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000882c:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000882f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008833:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008837:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000883b:	83 c4 10             	add    esp,0x10
c000883e:	85 c0                	test   eax,eax
c0008840:	75 08                	jne    c000884a <src_callback_read+0xd4>
c0008842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000884a:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008851:	50                   	push   eax
c0008852:	50                   	push   eax
c0008853:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008857:	50                   	push   eax
c0008858:	53                   	push   ebx
c0008859:	e8 a4 fd ff ff       	call   c0008602 <src_process>
c000885e:	83 c4 10             	add    esp,0x10
c0008861:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008868:	85 c0                	test   eax,eax
c000886a:	75 42                	jne    c00088ae <src_callback_read+0x138>
c000886c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008870:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008873:	89 f9                	mov    ecx,edi
c0008875:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008879:	0f af ca             	imul   ecx,edx
c000887c:	c1 e1 02             	shl    ecx,0x2
c000887f:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008883:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008887:	0f af d1             	imul   edx,ecx
c000888a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000888e:	c1 e2 02             	shl    edx,0x2
c0008891:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008895:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008898:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000889d:	75 04                	jne    c00088a3 <src_callback_read+0x12d>
c000889f:	85 c9                	test   ecx,ecx
c00088a1:	74 0b                	je     c00088ae <src_callback_read+0x138>
c00088a3:	39 d5                	cmp    ebp,edx
c00088a5:	7e 09                	jle    c00088b0 <src_callback_read+0x13a>
c00088a7:	89 d6                	mov    esi,edx
c00088a9:	e9 65 ff ff ff       	jmp    c0008813 <src_callback_read+0x9d>
c00088ae:	89 f2                	mov    edx,esi
c00088b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00088b4:	85 c0                	test   eax,eax
c00088b6:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00088b9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088bd:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00088c0:	74 05                	je     c00088c7 <src_callback_read+0x151>
c00088c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088c5:	31 d2                	xor    edx,edx
c00088c7:	83 c4 3c             	add    esp,0x3c
c00088ca:	89 d0                	mov    eax,edx
c00088cc:	5b                   	pop    ebx
c00088cd:	5e                   	pop    esi
c00088ce:	5f                   	pop    edi
c00088cf:	5d                   	pop    ebp
c00088d0:	c3                   	ret    

c00088d1 <src_set_ratio>:
c00088d1:	57                   	push   edi
c00088d2:	b8 02 00 00 00       	mov    eax,0x2
c00088d7:	56                   	push   esi
c00088d8:	53                   	push   ebx
c00088d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088e5:	85 db                	test   ebx,ebx
c00088e7:	74 2d                	je     c0008916 <src_set_ratio+0x45>
c00088e9:	b8 07 00 00 00       	mov    eax,0x7
c00088ee:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088f2:	74 22                	je     c0008916 <src_set_ratio+0x45>
c00088f4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088f8:	74 1c                	je     c0008916 <src_set_ratio+0x45>
c00088fa:	50                   	push   eax
c00088fb:	50                   	push   eax
c00088fc:	57                   	push   edi
c00088fd:	56                   	push   esi
c00088fe:	e8 1c fc ff ff       	call   c000851f <is_bad_src_ratio>
c0008903:	83 c4 10             	add    esp,0x10
c0008906:	85 c0                	test   eax,eax
c0008908:	75 07                	jne    c0008911 <src_set_ratio+0x40>
c000890a:	89 33                	mov    DWORD PTR [ebx],esi
c000890c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000890f:	eb 05                	jmp    c0008916 <src_set_ratio+0x45>
c0008911:	b8 06 00 00 00       	mov    eax,0x6
c0008916:	5b                   	pop    ebx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 dc 67 00 00       	call   c000f190 <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 a2 fb ff ff       	call   c0008582 <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 77 67 00 00       	call   c000f170 <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 3e 4c 00 00       	call   c000d6c4 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 18 54 00 00       	call   c000deae <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 61 0b 00 00       	jmp    c000960b <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 1a 4c 00 00       	call   c000d6d7 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 f0 53 00 00       	call   c000debd <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 39 0b 00 00       	jmp    c000961a <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 60 53 02 c0       	mov    eax,0xc0025360
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 14             	sub    esp,0x14
c0008aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af7:	e8 23 fa ff ff       	call   c000851f <is_bad_src_ratio>
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 94 c0             	sete   al
c0008b01:	83 c4 1c             	add    esp,0x1c
c0008b04:	0f b6 c0             	movzx  eax,al
c0008b07:	c3                   	ret    

c0008b08 <src_error>:
c0008b08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0c:	31 c0                	xor    eax,eax
c0008b0e:	85 d2                	test   edx,edx
c0008b10:	74 03                	je     c0008b15 <src_error+0xd>
c0008b12:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b15:	c3                   	ret    

c0008b16 <src_strerror>:
c0008b16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b1a:	31 c0                	xor    eax,eax
c0008b1c:	83 fa 17             	cmp    edx,0x17
c0008b1f:	77 07                	ja     c0008b28 <src_strerror+0x12>
c0008b21:	8b 04 95 c0 57 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda840]
c0008b28:	c3                   	ret    

c0008b29 <src_simple>:
c0008b29:	56                   	push   esi
c0008b2a:	53                   	push   ebx
c0008b2b:	83 ec 18             	sub    esp,0x18
c0008b2e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b36:	50                   	push   eax
c0008b37:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3f:	e8 44 fe ff ff       	call   c0008988 <src_new>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	85 c0                	test   eax,eax
c0008b49:	75 06                	jne    c0008b51 <src_simple+0x28>
c0008b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4f:	eb 25                	jmp    c0008b76 <src_simple+0x4d>
c0008b51:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b58:	89 c3                	mov    ebx,eax
c0008b5a:	50                   	push   eax
c0008b5b:	50                   	push   eax
c0008b5c:	56                   	push   esi
c0008b5d:	53                   	push   ebx
c0008b5e:	e8 9f fa ff ff       	call   c0008602 <src_process>
c0008b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b6a:	e8 57 fa ff ff       	call   c00085c6 <src_delete>
c0008b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b73:	83 c4 10             	add    esp,0x10
c0008b76:	83 c4 14             	add    esp,0x14
c0008b79:	5b                   	pop    ebx
c0008b7a:	5e                   	pop    esi
c0008b7b:	c3                   	ret    

c0008b7c <src_short_to_float_array>:
c0008b7c:	53                   	push   ebx
c0008b7d:	83 ec 18             	sub    esp,0x18
c0008b80:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b84:	85 db                	test   ebx,ebx
c0008b86:	74 54                	je     c0008bdc <src_short_to_float_array+0x60>
c0008b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8c:	4b                   	dec    ebx
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b94:	50                   	push   eax
c0008b95:	e8 49 b1 01 00       	call   c0023ce3 <__floatsidf>
c0008b9a:	83 c4 10             	add    esp,0x10
c0008b9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba5:	68 00 00 00 3f       	push   0x3f000000
c0008baa:	6a 00                	push   0x0
c0008bac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb4:	e8 c7 aa 01 00       	call   c0023680 <__muldf3>
c0008bb9:	59                   	pop    ecx
c0008bba:	59                   	pop    ecx
c0008bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bcb:	e8 83 b3 01 00       	call   c0023f53 <__truncdfsf2>
c0008bd0:	83 c4 10             	add    esp,0x10
c0008bd3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bda:	eb a8                	jmp    c0008b84 <src_short_to_float_array+0x8>
c0008bdc:	83 c4 18             	add    esp,0x18
c0008bdf:	5b                   	pop    ebx
c0008be0:	c3                   	ret    

c0008be1 <src_float_to_short_array>:
c0008be1:	56                   	push   esi
c0008be2:	53                   	push   ebx
c0008be3:	83 ec 14             	sub    esp,0x14
c0008be6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bea:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bee:	85 db                	test   ebx,ebx
c0008bf0:	0f 84 a4 00 00 00    	je     c0008c9a <src_float_to_short_array+0xb9>
c0008bf6:	83 ec 0c             	sub    esp,0xc
c0008bf9:	4b                   	dec    ebx
c0008bfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfe:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c01:	e8 71 b4 01 00       	call   c0024077 <__extendsfdf2>
c0008c06:	83 c4 10             	add    esp,0x10
c0008c09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c11:	68 00 00 e0 41       	push   0x41e00000
c0008c16:	6a 00                	push   0x0
c0008c18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c20:	e8 5b aa 01 00       	call   c0023680 <__muldf3>
c0008c25:	83 c4 10             	add    esp,0x10
c0008c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c30:	68 ff ff df 41       	push   0x41dfffff
c0008c35:	68 00 00 c0 ff       	push   0xffc00000
c0008c3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c42:	e8 06 b3 01 00       	call   c0023f4d <__gedf2>
c0008c47:	83 c4 10             	add    esp,0x10
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	78 08                	js     c0008c56 <src_float_to_short_array+0x75>
c0008c4e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c54:	eb 98                	jmp    c0008bee <src_float_to_short_array+0xd>
c0008c56:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5b:	6a 00                	push   0x0
c0008c5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c65:	e8 e7 b2 01 00       	call   c0023f51 <__ledf2>
c0008c6a:	83 c4 10             	add    esp,0x10
c0008c6d:	85 c0                	test   eax,eax
c0008c6f:	7f 0b                	jg     c0008c7c <src_float_to_short_array+0x9b>
c0008c71:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c77:	e9 72 ff ff ff       	jmp    c0008bee <src_float_to_short_array+0xd>
c0008c7c:	50                   	push   eax
c0008c7d:	50                   	push   eax
c0008c7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c86:	e8 75 b4 01 00       	call   c0024100 <lrint>
c0008c8b:	83 c4 10             	add    esp,0x10
c0008c8e:	c1 f8 10             	sar    eax,0x10
c0008c91:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c95:	e9 54 ff ff ff       	jmp    c0008bee <src_float_to_short_array+0xd>
c0008c9a:	83 c4 14             	add    esp,0x14
c0008c9d:	5b                   	pop    ebx
c0008c9e:	5e                   	pop    esi
c0008c9f:	c3                   	ret    

c0008ca0 <src_int_to_float_array>:
c0008ca0:	53                   	push   ebx
c0008ca1:	83 ec 18             	sub    esp,0x18
c0008ca4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca8:	85 db                	test   ebx,ebx
c0008caa:	74 52                	je     c0008cfe <src_int_to_float_array+0x5e>
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	4b                   	dec    ebx
c0008cb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb7:	e8 27 b0 01 00       	call   c0023ce3 <__floatsidf>
c0008cbc:	83 c4 10             	add    esp,0x10
c0008cbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc7:	68 00 00 00 3e       	push   0x3e000000
c0008ccc:	6a 00                	push   0x0
c0008cce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd6:	e8 a5 a9 01 00       	call   c0023680 <__muldf3>
c0008cdb:	59                   	pop    ecx
c0008cdc:	59                   	pop    ecx
c0008cdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ced:	e8 61 b2 01 00       	call   c0023f53 <__truncdfsf2>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf9:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfc:	eb aa                	jmp    c0008ca8 <src_int_to_float_array+0x8>
c0008cfe:	83 c4 18             	add    esp,0x18
c0008d01:	5b                   	pop    ebx
c0008d02:	c3                   	ret    

c0008d03 <src_float_to_int_array>:
c0008d03:	56                   	push   esi
c0008d04:	53                   	push   ebx
c0008d05:	83 ec 14             	sub    esp,0x14
c0008d08:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d10:	85 db                	test   ebx,ebx
c0008d12:	0f 84 a2 00 00 00    	je     c0008dba <src_float_to_int_array+0xb7>
c0008d18:	83 ec 0c             	sub    esp,0xc
c0008d1b:	4b                   	dec    ebx
c0008d1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d20:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d23:	e8 4f b3 01 00       	call   c0024077 <__extendsfdf2>
c0008d28:	83 c4 10             	add    esp,0x10
c0008d2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d33:	68 00 00 e0 41       	push   0x41e00000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 39 a9 01 00       	call   c0023680 <__muldf3>
c0008d47:	83 c4 10             	add    esp,0x10
c0008d4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d52:	68 ff ff df 41       	push   0x41dfffff
c0008d57:	68 00 00 c0 ff       	push   0xffc00000
c0008d5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d64:	e8 e4 b1 01 00       	call   c0023f4d <__gedf2>
c0008d69:	83 c4 10             	add    esp,0x10
c0008d6c:	85 c0                	test   eax,eax
c0008d6e:	78 09                	js     c0008d79 <src_float_to_int_array+0x76>
c0008d70:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d77:	eb 97                	jmp    c0008d10 <src_float_to_int_array+0xd>
c0008d79:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7e:	6a 00                	push   0x0
c0008d80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d88:	e8 c4 b1 01 00       	call   c0023f51 <__ledf2>
c0008d8d:	83 c4 10             	add    esp,0x10
c0008d90:	85 c0                	test   eax,eax
c0008d92:	7f 0c                	jg     c0008da0 <src_float_to_int_array+0x9d>
c0008d94:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9b:	e9 70 ff ff ff       	jmp    c0008d10 <src_float_to_int_array+0xd>
c0008da0:	50                   	push   eax
c0008da1:	50                   	push   eax
c0008da2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008daa:	e8 51 b3 01 00       	call   c0024100 <lrint>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db5:	e9 56 ff ff ff       	jmp    c0008d10 <src_float_to_int_array+0xd>
c0008dba:	83 c4 14             	add    esp,0x14
c0008dbd:	5b                   	pop    ebx
c0008dbe:	5e                   	pop    esi
c0008dbf:	c3                   	ret    

c0008dc0 <is_bad_src_ratio>:
c0008dc0:	83 ec 1c             	sub    esp,0x1c
c0008dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dd3:	b8 00 00 00 00       	mov    eax,0x0
c0008dd8:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008ddd:	52                   	push   edx
c0008dde:	50                   	push   eax
c0008ddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de7:	e8 63 b1 01 00       	call   c0023f4f <__ltdf2>
c0008dec:	83 c4 10             	add    esp,0x10
c0008def:	85 c0                	test   eax,eax
c0008df1:	78 20                	js     c0008e13 <is_bad_src_ratio+0x53>
c0008df3:	b8 00 00 00 00       	mov    eax,0x0
c0008df8:	ba 00 00 70 40       	mov    edx,0x40700000
c0008dfd:	52                   	push   edx
c0008dfe:	50                   	push   eax
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e07:	e8 25 b1 01 00       	call   c0023f31 <__gtdf2>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	85 c0                	test   eax,eax
c0008e11:	7e 07                	jle    c0008e1a <is_bad_src_ratio+0x5a>
c0008e13:	b8 01 00 00 00       	mov    eax,0x1
c0008e18:	eb 05                	jmp    c0008e1f <is_bad_src_ratio+0x5f>
c0008e1a:	b8 00 00 00 00       	mov    eax,0x0
c0008e1f:	83 c4 1c             	add    esp,0x1c
c0008e22:	c3                   	ret    

c0008e23 <fmod_one>:
c0008e23:	83 ec 2c             	sub    esp,0x2c
c0008e26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e36:	83 ec 08             	sub    esp,0x8
c0008e39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e41:	e8 ba b2 01 00       	call   c0024100 <lrint>
c0008e46:	83 c4 10             	add    esp,0x10
c0008e49:	83 ec 0c             	sub    esp,0xc
c0008e4c:	50                   	push   eax
c0008e4d:	e8 91 ae 01 00       	call   c0023ce3 <__floatsidf>
c0008e52:	83 c4 10             	add    esp,0x10
c0008e55:	52                   	push   edx
c0008e56:	50                   	push   eax
c0008e57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e5f:	e8 f0 a7 01 00       	call   c0023654 <__subdf3>
c0008e64:	83 c4 10             	add    esp,0x10
c0008e67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e6f:	b8 00 00 00 00       	mov    eax,0x0
c0008e74:	ba 00 00 00 00       	mov    edx,0x0
c0008e79:	52                   	push   edx
c0008e7a:	50                   	push   eax
c0008e7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e83:	e8 c7 b0 01 00       	call   c0023f4f <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	85 c0                	test   eax,eax
c0008e8d:	79 1e                	jns    c0008ead <fmod_one+0x8a>
c0008e8f:	b8 00 00 00 00       	mov    eax,0x0
c0008e94:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e99:	52                   	push   edx
c0008e9a:	50                   	push   eax
c0008e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ea3:	e8 5b a1 01 00       	call   c0023003 <__adddf3>
c0008ea8:	83 c4 10             	add    esp,0x10
c0008eab:	eb 08                	jmp    c0008eb5 <fmod_one+0x92>
c0008ead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008eb1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008eb5:	83 c4 2c             	add    esp,0x2c
c0008eb8:	c3                   	ret    

c0008eb9 <linear_vari_process>:
c0008eb9:	55                   	push   ebp
c0008eba:	57                   	push   edi
c0008ebb:	56                   	push   esi
c0008ebc:	53                   	push   ebx
c0008ebd:	83 ec 3c             	sub    esp,0x3c
c0008ec0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ec4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008ecc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ed0:	0f 8e f7 06 00 00    	jle    c00095cd <linear_vari_process+0x714>
c0008ed6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008eda:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ee2:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ee5:	85 db                	test   ebx,ebx
c0008ee7:	0f 84 e0 06 00 00    	je     c00095cd <linear_vari_process+0x714>
c0008eed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ef0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008ef4:	74 19                	je     c0008f0f <linear_vari_process+0x56>
c0008ef6:	31 d2                	xor    edx,edx
c0008ef8:	39 c2                	cmp    edx,eax
c0008efa:	7d 0c                	jge    c0008f08 <linear_vari_process+0x4f>
c0008efc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008efe:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008f01:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008f05:	42                   	inc    edx
c0008f06:	eb f0                	jmp    c0008ef8 <linear_vari_process+0x3f>
c0008f08:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f0f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f12:	0f af d0             	imul   edx,eax
c0008f15:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f18:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f23:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f26:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f31:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f36:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f3e:	57                   	push   edi
c0008f3f:	57                   	push   edi
c0008f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f48:	e8 73 fe ff ff       	call   c0008dc0 <is_bad_src_ratio>
c0008f4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f59:	0f 85 66 06 00 00    	jne    c00095c5 <linear_vari_process+0x70c>
c0008f5f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f63:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f66:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f71:	68 00 00 f0 3f       	push   0x3ff00000
c0008f76:	6a 00                	push   0x0
c0008f78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f80:	e8 ca af 01 00       	call   c0023f4f <__ltdf2>
c0008f85:	83 c4 10             	add    esp,0x10
c0008f88:	85 c0                	test   eax,eax
c0008f8a:	0f 89 89 02 00 00    	jns    c0009219 <linear_vari_process+0x360>
c0008f90:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f93:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f96:	0f 8d 7d 02 00 00    	jge    c0009219 <linear_vari_process+0x360>
c0008f9c:	83 ec 0c             	sub    esp,0xc
c0008f9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008fa2:	e8 3c ad 01 00       	call   c0023ce3 <__floatsidf>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fb1:	68 00 00 f0 3f       	push   0x3ff00000
c0008fb6:	6a 00                	push   0x0
c0008fb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc0:	e8 3e a0 01 00       	call   c0023003 <__adddf3>
c0008fc5:	83 c4 10             	add    esp,0x10
c0008fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fcc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fd0:	52                   	push   edx
c0008fd1:	50                   	push   eax
c0008fd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fd6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fda:	e8 a1 a6 01 00       	call   c0023680 <__muldf3>
c0008fdf:	5d                   	pop    ebp
c0008fe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fe4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fe8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008feb:	e8 f3 ac 01 00       	call   c0023ce3 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009001:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009005:	e8 f9 9f 01 00       	call   c0023003 <__adddf3>
c000900a:	59                   	pop    ecx
c000900b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000900f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009013:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009016:	e8 c8 ac 01 00       	call   c0023ce3 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000902c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009030:	e8 18 af 01 00       	call   c0023f4d <__gedf2>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	85 c0                	test   eax,eax
c000903a:	0f 89 d9 01 00 00    	jns    c0009219 <linear_vari_process+0x360>
c0009040:	85 ff                	test   edi,edi
c0009042:	0f 8e f4 00 00 00    	jle    c000913c <linear_vari_process+0x283>
c0009048:	83 ec 10             	sub    esp,0x10
c000904b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000904e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009051:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009055:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009058:	ff 30                	push   DWORD PTR [eax]
c000905a:	e8 f5 a5 01 00       	call   c0023654 <__subdf3>
c000905f:	83 c4 18             	add    esp,0x18
c0009062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000906a:	52                   	push   edx
c000906b:	50                   	push   eax
c000906c:	e8 6f b0 01 00       	call   c00240e0 <fabs>
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	83 c4 10             	add    esp,0x10
c000907c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009081:	68 23 42 92 0c       	push   0xc924223
c0009086:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000908a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000908e:	e8 9e ae 01 00       	call   c0023f31 <__gtdf2>
c0009093:	83 c4 10             	add    esp,0x10
c0009096:	85 c0                	test   eax,eax
c0009098:	0f 8e 9e 00 00 00    	jle    c000913c <linear_vari_process+0x283>
c000909e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090a2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ae:	52                   	push   edx
c00090af:	50                   	push   eax
c00090b0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00090b3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00090b6:	e8 99 a5 01 00       	call   c0023654 <__subdf3>
c00090bb:	59                   	pop    ecx
c00090bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090c4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090c7:	e8 17 ac 01 00       	call   c0023ce3 <__floatsidf>
c00090cc:	83 c4 10             	add    esp,0x10
c00090cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d7:	52                   	push   edx
c00090d8:	50                   	push   eax
c00090d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e1:	e8 9a a5 01 00       	call   c0023680 <__muldf3>
c00090e6:	5f                   	pop    edi
c00090e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090eb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090f2:	e8 ec ab 01 00       	call   c0023ce3 <__floatsidf>
c00090f7:	83 c4 10             	add    esp,0x10
c00090fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009102:	52                   	push   edx
c0009103:	50                   	push   eax
c0009104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910c:	e8 53 a8 01 00       	call   c0023964 <__divdf3>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009118:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000911c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009120:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912c:	e8 d2 9e 01 00       	call   c0023003 <__adddf3>
c0009131:	83 c4 10             	add    esp,0x10
c0009134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009138:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000913c:	31 ff                	xor    edi,edi
c000913e:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009141:	0f 8e 9d 00 00 00    	jle    c00091e4 <linear_vari_process+0x32b>
c0009147:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000914a:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c000914e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009151:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009155:	89 04 24             	mov    DWORD PTR [esp],eax
c0009158:	8b 06                	mov    eax,DWORD PTR [esi]
c000915a:	52                   	push   edx
c000915b:	52                   	push   edx
c000915c:	55                   	push   ebp
c000915d:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009160:	47                   	inc    edi
c0009161:	e8 32 98 01 00       	call   c0022998 <__subsf3>
c0009166:	89 04 24             	mov    DWORD PTR [esp],eax
c0009169:	e8 09 af 01 00       	call   c0024077 <__extendsfdf2>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009175:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009179:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009185:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009189:	e8 f2 a4 01 00       	call   c0023680 <__muldf3>
c000918e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009191:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009195:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009199:	e8 d9 ae 01 00       	call   c0024077 <__extendsfdf2>
c000919e:	83 c4 10             	add    esp,0x10
c00091a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a9:	52                   	push   edx
c00091aa:	50                   	push   eax
c00091ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b3:	e8 4b 9e 01 00       	call   c0023003 <__adddf3>
c00091b8:	59                   	pop    ecx
c00091b9:	5d                   	pop    ebp
c00091ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091be:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ca:	e8 84 ad 01 00       	call   c0023f53 <__truncdfsf2>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091d5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091d9:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091dc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091df:	e9 5a ff ff ff       	jmp    c000913e <linear_vari_process+0x285>
c00091e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ec:	68 00 00 f0 3f       	push   0x3ff00000
c00091f1:	6a 00                	push   0x0
c00091f3:	e8 6c a7 01 00       	call   c0023964 <__divdf3>
c00091f8:	83 c4 10             	add    esp,0x10
c00091fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00091fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009202:	52                   	push   edx
c0009203:	50                   	push   eax
c0009204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920c:	e8 f2 9d 01 00       	call   c0023003 <__adddf3>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	e9 50 fd ff ff       	jmp    c0008f69 <linear_vari_process+0xb0>
c0009219:	50                   	push   eax
c000921a:	50                   	push   eax
c000921b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009223:	e8 fb fb ff ff       	call   c0008e23 <fmod_one>
c0009228:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000922b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000922f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009233:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009237:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000923f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009243:	e8 0c a4 01 00       	call   c0023654 <__subdf3>
c0009248:	83 c4 18             	add    esp,0x18
c000924b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000924f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009253:	52                   	push   edx
c0009254:	50                   	push   eax
c0009255:	e8 a6 ae 01 00       	call   c0024100 <lrint>
c000925a:	83 c4 10             	add    esp,0x10
c000925d:	0f af f8             	imul   edi,eax
c0009260:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009263:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009266:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009269:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000926c:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000926f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009273:	0f 8d b4 02 00 00    	jge    c000952d <linear_vari_process+0x674>
c0009279:	83 ec 0c             	sub    esp,0xc
c000927c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000927f:	e8 5f aa 01 00       	call   c0023ce3 <__floatsidf>
c0009284:	83 c4 10             	add    esp,0x10
c0009287:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000928b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000928f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009293:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000929b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000929f:	e8 dc a3 01 00       	call   c0023680 <__muldf3>
c00092a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00092a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092af:	e8 2f aa 01 00       	call   c0023ce3 <__floatsidf>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092bf:	52                   	push   edx
c00092c0:	50                   	push   eax
c00092c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c9:	e8 35 9d 01 00       	call   c0023003 <__adddf3>
c00092ce:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092d9:	e8 05 aa 01 00       	call   c0023ce3 <__floatsidf>
c00092de:	83 c4 10             	add    esp,0x10
c00092e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092e9:	52                   	push   edx
c00092ea:	50                   	push   eax
c00092eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f3:	e8 57 ac 01 00       	call   c0023f4f <__ltdf2>
c00092f8:	83 c4 10             	add    esp,0x10
c00092fb:	85 c0                	test   eax,eax
c00092fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009301:	0f 89 26 02 00 00    	jns    c000952d <linear_vari_process+0x674>
c0009307:	85 c9                	test   ecx,ecx
c0009309:	0f 8e f5 00 00 00    	jle    c0009404 <linear_vari_process+0x54b>
c000930f:	83 ec 10             	sub    esp,0x10
c0009312:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009315:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009318:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000931c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000931f:	ff 30                	push   DWORD PTR [eax]
c0009321:	e8 2e a3 01 00       	call   c0023654 <__subdf3>
c0009326:	83 c4 18             	add    esp,0x18
c0009329:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000932d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009331:	52                   	push   edx
c0009332:	50                   	push   eax
c0009333:	e8 a8 ad 01 00       	call   c00240e0 <fabs>
c0009338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009340:	83 c4 10             	add    esp,0x10
c0009343:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009348:	68 23 42 92 0c       	push   0xc924223
c000934d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009355:	e8 d7 ab 01 00       	call   c0023f31 <__gtdf2>
c000935a:	83 c4 10             	add    esp,0x10
c000935d:	85 c0                	test   eax,eax
c000935f:	0f 8e 9f 00 00 00    	jle    c0009404 <linear_vari_process+0x54b>
c0009365:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000936c:	8b 00                	mov    eax,DWORD PTR [eax]
c000936e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009372:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000937b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000937e:	e8 d1 a2 01 00       	call   c0023654 <__subdf3>
c0009383:	5f                   	pop    edi
c0009384:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009388:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000938c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000938f:	e8 4f a9 01 00       	call   c0023ce3 <__floatsidf>
c0009394:	83 c4 10             	add    esp,0x10
c0009397:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000939b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000939f:	52                   	push   edx
c00093a0:	50                   	push   eax
c00093a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a9:	e8 d2 a2 01 00       	call   c0023680 <__muldf3>
c00093ae:	5d                   	pop    ebp
c00093af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093b3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00093b7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00093ba:	e8 24 a9 01 00       	call   c0023ce3 <__floatsidf>
c00093bf:	83 c4 10             	add    esp,0x10
c00093c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093ca:	52                   	push   edx
c00093cb:	50                   	push   eax
c00093cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d4:	e8 8b a5 01 00       	call   c0023964 <__divdf3>
c00093d9:	83 c4 10             	add    esp,0x10
c00093dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f4:	e8 0a 9c 01 00       	call   c0023003 <__adddf3>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009400:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009404:	31 ff                	xor    edi,edi
c0009406:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009409:	39 f8                	cmp    eax,edi
c000940b:	0f 8e ac 00 00 00    	jle    c00094bd <linear_vari_process+0x604>
c0009411:	8b 16                	mov    edx,DWORD PTR [esi]
c0009413:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009416:	29 c1                	sub    ecx,eax
c0009418:	89 c8                	mov    eax,ecx
c000941a:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000941d:	01 f8                	add    eax,edi
c000941f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009423:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009426:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009429:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000942d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009430:	51                   	push   ecx
c0009431:	01 f8                	add    eax,edi
c0009433:	51                   	push   ecx
c0009434:	47                   	inc    edi
c0009435:	55                   	push   ebp
c0009436:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009439:	e8 5a 95 01 00       	call   c0022998 <__subsf3>
c000943e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009441:	e8 31 ac 01 00       	call   c0024077 <__extendsfdf2>
c0009446:	83 c4 10             	add    esp,0x10
c0009449:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000944d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009451:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009455:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009461:	e8 1a a2 01 00       	call   c0023680 <__muldf3>
c0009466:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000946d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009471:	e8 01 ac 01 00       	call   c0024077 <__extendsfdf2>
c0009476:	83 c4 10             	add    esp,0x10
c0009479:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000947d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009481:	52                   	push   edx
c0009482:	50                   	push   eax
c0009483:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009487:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000948b:	e8 73 9b 01 00       	call   c0023003 <__adddf3>
c0009490:	5d                   	pop    ebp
c0009491:	59                   	pop    ecx
c0009492:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009496:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000949a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000949e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a2:	e8 ac aa 01 00       	call   c0023f53 <__truncdfsf2>
c00094a7:	83 c4 10             	add    esp,0x10
c00094aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00094ae:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00094b2:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00094b5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00094b8:	e9 49 ff ff ff       	jmp    c0009406 <linear_vari_process+0x54d>
c00094bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c5:	68 00 00 f0 3f       	push   0x3ff00000
c00094ca:	6a 00                	push   0x0
c00094cc:	e8 93 a4 01 00       	call   c0023964 <__divdf3>
c00094d1:	83 c4 10             	add    esp,0x10
c00094d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094e0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ec:	e8 12 9b 01 00       	call   c0023003 <__adddf3>
c00094f1:	59                   	pop    ecx
c00094f2:	5f                   	pop    edi
c00094f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009503:	e8 1b f9 ff ff       	call   c0008e23 <fmod_one>
c0009508:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000950b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000950f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009517:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000951b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000951f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009523:	e8 2c a1 01 00       	call   c0023654 <__subdf3>
c0009528:	e9 1b fd ff ff       	jmp    c0009248 <linear_vari_process+0x38f>
c000952d:	39 fd                	cmp    ebp,edi
c000952f:	7d 38                	jge    c0009569 <linear_vari_process+0x6b0>
c0009531:	83 ec 0c             	sub    esp,0xc
c0009534:	89 f8                	mov    eax,edi
c0009536:	29 e8                	sub    eax,ebp
c0009538:	99                   	cdq    
c0009539:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000953c:	50                   	push   eax
c000953d:	e8 a1 a7 01 00       	call   c0023ce3 <__floatsidf>
c0009542:	83 c4 10             	add    esp,0x10
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000954d:	52                   	push   edx
c000954e:	50                   	push   eax
c000954f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009553:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009557:	e8 a7 9a 01 00       	call   c0023003 <__adddf3>
c000955c:	83 c4 10             	add    esp,0x10
c000955f:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009562:	89 04 24             	mov    DWORD PTR [esp],eax
c0009565:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009569:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000956d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009574:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009577:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000957a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000957d:	85 c0                	test   eax,eax
c000957f:	7f 27                	jg     c00095a8 <linear_vari_process+0x6ef>
c0009581:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009589:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000958d:	89 01                	mov    DWORD PTR [ecx],eax
c000958f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009592:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009595:	99                   	cdq    
c0009596:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009599:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000959c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000959f:	99                   	cdq    
c00095a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095a3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095a6:	eb 25                	jmp    c00095cd <linear_vari_process+0x714>
c00095a8:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095ab:	31 d2                	xor    edx,edx
c00095ad:	29 c8                	sub    eax,ecx
c00095af:	c1 e0 02             	shl    eax,0x2
c00095b2:	39 d1                	cmp    ecx,edx
c00095b4:	7e cb                	jle    c0009581 <linear_vari_process+0x6c8>
c00095b6:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095b8:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095bb:	83 c0 04             	add    eax,0x4
c00095be:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095c2:	42                   	inc    edx
c00095c3:	eb ed                	jmp    c00095b2 <linear_vari_process+0x6f9>
c00095c5:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095d1:	83 c4 3c             	add    esp,0x3c
c00095d4:	5b                   	pop    ebx
c00095d5:	5e                   	pop    esi
c00095d6:	5f                   	pop    edi
c00095d7:	5d                   	pop    ebp
c00095d8:	c3                   	ret    

c00095d9 <linear_reset>:
c00095d9:	83 ec 0c             	sub    esp,0xc
c00095dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095e0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095e3:	85 c0                	test   eax,eax
c00095e5:	74 20                	je     c0009607 <linear_reset+0x2e>
c00095e7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095ea:	83 c0 1c             	add    eax,0x1c
c00095ed:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095f0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095f7:	c1 e2 02             	shl    edx,0x2
c00095fa:	51                   	push   ecx
c00095fb:	52                   	push   edx
c00095fc:	6a 00                	push   0x0
c00095fe:	50                   	push   eax
c00095ff:	e8 e2 70 ff ff       	call   c00006e6 <memset>
c0009604:	83 c4 10             	add    esp,0x10
c0009607:	83 c4 0c             	add    esp,0xc
c000960a:	c3                   	ret    

c000960b <linear_get_name>:
c000960b:	31 c0                	xor    eax,eax
c000960d:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009612:	75 05                	jne    c0009619 <linear_get_name+0xe>
c0009614:	b8 20 58 02 c0       	mov    eax,0xc0025820
c0009619:	c3                   	ret    

c000961a <linear_get_description>:
c000961a:	31 c0                	xor    eax,eax
c000961c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009621:	75 05                	jne    c0009628 <linear_get_description+0xe>
c0009623:	b8 34 58 02 c0       	mov    eax,0xc0025834
c0009628:	c3                   	ret    

c0009629 <linear_set_converter>:
c0009629:	53                   	push   ebx
c000962a:	b8 0a 00 00 00       	mov    eax,0xa
c000962f:	83 ec 08             	sub    esp,0x8
c0009632:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009636:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000963b:	75 6e                	jne    c00096ab <linear_set_converter+0x82>
c000963d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009640:	85 c0                	test   eax,eax
c0009642:	74 13                	je     c0009657 <linear_set_converter+0x2e>
c0009644:	83 ec 0c             	sub    esp,0xc
c0009647:	50                   	push   eax
c0009648:	e8 23 5b 00 00       	call   c000f170 <free>
c000964d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	50                   	push   eax
c0009658:	50                   	push   eax
c0009659:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000965c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009663:	50                   	push   eax
c0009664:	6a 01                	push   0x1
c0009666:	e8 25 5b 00 00       	call   c000f190 <calloc>
c000966b:	83 c4 10             	add    esp,0x10
c000966e:	89 c2                	mov    edx,eax
c0009670:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009673:	85 d2                	test   edx,edx
c0009675:	b8 01 00 00 00       	mov    eax,0x1
c000967a:	74 2f                	je     c00096ab <linear_set_converter+0x82>
c000967c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000967f:	83 ec 0c             	sub    esp,0xc
c0009682:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009685:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000968b:	c7 43 24 b9 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008eb9
c0009692:	c7 43 20 b9 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008eb9
c0009699:	c7 43 28 d9 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d9
c00096a0:	53                   	push   ebx
c00096a1:	e8 33 ff ff ff       	call   c00095d9 <linear_reset>
c00096a6:	83 c4 10             	add    esp,0x10
c00096a9:	31 c0                	xor    eax,eax
c00096ab:	83 c4 08             	add    esp,0x8
c00096ae:	5b                   	pop    ebx
c00096af:	c3                   	ret    

c00096b0 <is_bad_src_ratio>:
c00096b0:	83 ec 1c             	sub    esp,0x1c
c00096b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00096b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096c3:	b8 00 00 00 00       	mov    eax,0x0
c00096c8:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096cd:	52                   	push   edx
c00096ce:	50                   	push   eax
c00096cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d7:	e8 73 a8 01 00       	call   c0023f4f <__ltdf2>
c00096dc:	83 c4 10             	add    esp,0x10
c00096df:	85 c0                	test   eax,eax
c00096e1:	78 20                	js     c0009703 <is_bad_src_ratio+0x53>
c00096e3:	b8 00 00 00 00       	mov    eax,0x0
c00096e8:	ba 00 00 70 40       	mov    edx,0x40700000
c00096ed:	52                   	push   edx
c00096ee:	50                   	push   eax
c00096ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f7:	e8 35 a8 01 00       	call   c0023f31 <__gtdf2>
c00096fc:	83 c4 10             	add    esp,0x10
c00096ff:	85 c0                	test   eax,eax
c0009701:	7e 07                	jle    c000970a <is_bad_src_ratio+0x5a>
c0009703:	b8 01 00 00 00       	mov    eax,0x1
c0009708:	eb 05                	jmp    c000970f <is_bad_src_ratio+0x5f>
c000970a:	b8 00 00 00 00       	mov    eax,0x0
c000970f:	83 c4 1c             	add    esp,0x1c
c0009712:	c3                   	ret    

c0009713 <int_to_fp>:
c0009713:	c1 e0 0c             	shl    eax,0xc
c0009716:	c3                   	ret    

c0009717 <fp_to_int>:
c0009717:	c1 f8 0c             	sar    eax,0xc
c000971a:	c3                   	ret    

c000971b <fp_fraction_part>:
c000971b:	25 ff 0f 00 00       	and    eax,0xfff
c0009720:	c3                   	ret    

c0009721 <fp_to_double>:
c0009721:	83 ec 1c             	sub    esp,0x1c
c0009724:	e8 f2 ff ff ff       	call   c000971b <fp_fraction_part>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	50                   	push   eax
c000972d:	e8 b1 a5 01 00       	call   c0023ce3 <__floatsidf>
c0009732:	83 c4 10             	add    esp,0x10
c0009735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009739:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000973d:	68 00 00 30 3f       	push   0x3f300000
c0009742:	6a 00                	push   0x0
c0009744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974c:	e8 2f 9f 01 00       	call   c0023680 <__muldf3>
c0009751:	83 c4 2c             	add    esp,0x2c
c0009754:	c3                   	ret    

c0009755 <calc_output_single>:
c0009755:	55                   	push   ebp
c0009756:	57                   	push   edi
c0009757:	56                   	push   esi
c0009758:	89 c6                	mov    esi,eax
c000975a:	53                   	push   ebx
c000975b:	89 d3                	mov    ebx,edx
c000975d:	83 ec 4c             	sub    esp,0x4c
c0009760:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009764:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009767:	e8 a7 ff ff ff       	call   c0009713 <int_to_fp>
c000976c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000976f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009773:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009777:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000977b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000977e:	99                   	cdq    
c000977f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009787:	f7 fb                	idiv   ebx
c0009789:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009791:	89 da                	mov    edx,ebx
c0009793:	0f af d0             	imul   edx,eax
c0009796:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000979a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000979e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00097a2:	29 c2                	sub    edx,eax
c00097a4:	8d 2c 96             	lea    ebp,[esi+edx*4]
c00097a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097ab:	83 c5 04             	add    ebp,0x4
c00097ae:	e8 6e ff ff ff       	call   c0009721 <fp_to_double>
c00097b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097b7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bf:	e8 53 ff ff ff       	call   c0009717 <fp_to_int>
c00097c4:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097c7:	52                   	push   edx
c00097c8:	52                   	push   edx
c00097c9:	51                   	push   ecx
c00097ca:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097ce:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097d2:	e8 c1 91 01 00       	call   c0022998 <__subsf3>
c00097d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00097da:	e8 98 a8 01 00       	call   c0024077 <__extendsfdf2>
c00097df:	83 c4 10             	add    esp,0x10
c00097e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097e6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097fa:	e8 81 9e 01 00       	call   c0023680 <__muldf3>
c00097ff:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009803:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009807:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000980a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000980e:	e8 64 a8 01 00       	call   c0024077 <__extendsfdf2>
c0009813:	83 c4 10             	add    esp,0x10
c0009816:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000981a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000981e:	52                   	push   edx
c000981f:	50                   	push   eax
c0009820:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009824:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009828:	e8 d6 97 01 00       	call   c0023003 <__adddf3>
c000982d:	59                   	pop    ecx
c000982e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009832:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009836:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c000983c:	e8 36 a8 01 00       	call   c0024077 <__extendsfdf2>
c0009841:	83 c4 10             	add    esp,0x10
c0009844:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009848:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000984c:	52                   	push   edx
c000984d:	50                   	push   eax
c000984e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009852:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009856:	e8 25 9e 01 00       	call   c0023680 <__muldf3>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009862:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009866:	52                   	push   edx
c0009867:	50                   	push   eax
c0009868:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000986c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009870:	e8 8e 97 01 00       	call   c0023003 <__adddf3>
c0009875:	83 c4 10             	add    esp,0x10
c0009878:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000987c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009880:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009884:	0f 89 1d ff ff ff    	jns    c00097a7 <calc_output_single+0x52>
c000988a:	89 d9                	mov    ecx,ebx
c000988c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009890:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009894:	89 dd                	mov    ebp,ebx
c0009896:	29 c8                	sub    eax,ecx
c0009898:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00098a0:	99                   	cdq    
c00098a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00098a9:	f7 fb                	idiv   ebx
c00098ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00098af:	0f af e8             	imul   ebp,eax
c00098b2:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c00098b6:	01 cd                	add    ebp,ecx
c00098b8:	8d 34 86             	lea    esi,[esi+eax*4]
c00098bb:	89 e8                	mov    eax,ebp
c00098bd:	83 ee 04             	sub    esi,0x4
c00098c0:	e8 5c fe ff ff       	call   c0009721 <fp_to_double>
c00098c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098cd:	89 e8                	mov    eax,ebp
c00098cf:	29 dd                	sub    ebp,ebx
c00098d1:	e8 41 fe ff ff       	call   c0009717 <fp_to_int>
c00098d6:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098d9:	52                   	push   edx
c00098da:	52                   	push   edx
c00098db:	51                   	push   ecx
c00098dc:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098e0:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098e4:	e8 af 90 01 00       	call   c0022998 <__subsf3>
c00098e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00098ec:	e8 86 a7 01 00       	call   c0024077 <__extendsfdf2>
c00098f1:	83 c4 10             	add    esp,0x10
c00098f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009904:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009908:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000990c:	e8 6f 9d 01 00       	call   c0023680 <__muldf3>
c0009911:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009915:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009919:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000991c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009920:	e8 52 a7 01 00       	call   c0024077 <__extendsfdf2>
c0009925:	83 c4 10             	add    esp,0x10
c0009928:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000992c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009930:	52                   	push   edx
c0009931:	50                   	push   eax
c0009932:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009936:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000993a:	e8 c4 96 01 00       	call   c0023003 <__adddf3>
c000993f:	59                   	pop    ecx
c0009940:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009944:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009948:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000994e:	e8 24 a7 01 00       	call   c0024077 <__extendsfdf2>
c0009953:	83 c4 10             	add    esp,0x10
c0009956:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000995a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000995e:	52                   	push   edx
c000995f:	50                   	push   eax
c0009960:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009964:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009968:	e8 13 9d 01 00       	call   c0023680 <__muldf3>
c000996d:	83 c4 10             	add    esp,0x10
c0009970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009974:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009978:	52                   	push   edx
c0009979:	50                   	push   eax
c000997a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009982:	e8 7c 96 01 00       	call   c0023003 <__adddf3>
c0009987:	83 c4 10             	add    esp,0x10
c000998a:	85 ed                	test   ebp,ebp
c000998c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009990:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009994:	0f 8f 21 ff ff ff    	jg     c00098bb <calc_output_single+0x166>
c000999a:	52                   	push   edx
c000999b:	50                   	push   eax
c000999c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099a4:	e8 5a 96 01 00       	call   c0023003 <__adddf3>
c00099a9:	83 c4 5c             	add    esp,0x5c
c00099ac:	5b                   	pop    ebx
c00099ad:	5e                   	pop    esi
c00099ae:	5f                   	pop    edi
c00099af:	5d                   	pop    ebp
c00099b0:	c3                   	ret    

c00099b1 <calc_output_stereo>:
c00099b1:	55                   	push   ebp
c00099b2:	89 cd                	mov    ebp,ecx
c00099b4:	57                   	push   edi
c00099b5:	56                   	push   esi
c00099b6:	53                   	push   ebx
c00099b7:	89 c3                	mov    ebx,eax
c00099b9:	83 ec 6c             	sub    esp,0x6c
c00099bc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099c7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099ce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099d2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099d6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099d9:	e8 35 fd ff ff       	call   c0009713 <int_to_fp>
c00099de:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ea:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099f2:	29 c8                	sub    eax,ecx
c00099f4:	99                   	cdq    
c00099f5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099fd:	0f af d0             	imul   edx,eax
c0009a00:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009a03:	31 d2                	xor    edx,edx
c0009a05:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009a09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009a0d:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009a10:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009a14:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009a17:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009a1b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009a1f:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a22:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a27:	29 c1                	sub    ecx,eax
c0009a29:	31 c0                	xor    eax,eax
c0009a2b:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a36:	83 c7 08             	add    edi,0x8
c0009a39:	e8 e3 fc ff ff       	call   c0009721 <fp_to_double>
c0009a3e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a42:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a4a:	e8 c8 fc ff ff       	call   c0009717 <fp_to_int>
c0009a4f:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a52:	52                   	push   edx
c0009a53:	52                   	push   edx
c0009a54:	51                   	push   ecx
c0009a55:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a59:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a5d:	e8 36 8f 01 00       	call   c0022998 <__subsf3>
c0009a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a65:	e8 0d a6 01 00       	call   c0024077 <__extendsfdf2>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a71:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a7d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a81:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a85:	e8 f6 9b 01 00       	call   c0023680 <__muldf3>
c0009a8a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a8e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a92:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a95:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a99:	e8 d9 a5 01 00       	call   c0024077 <__extendsfdf2>
c0009a9e:	83 c4 10             	add    esp,0x10
c0009aa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa9:	52                   	push   edx
c0009aaa:	50                   	push   eax
c0009aab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009aaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009ab3:	e8 4b 95 01 00       	call   c0023003 <__adddf3>
c0009ab8:	59                   	pop    ecx
c0009ab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009abd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009ac1:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ac7:	e8 ab a5 01 00       	call   c0024077 <__extendsfdf2>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009adb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009adf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae7:	e8 94 9b 01 00       	call   c0023680 <__muldf3>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009af3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009afd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b01:	e8 fd 94 01 00       	call   c0023003 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b0b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009b0f:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009b15:	e8 5d a5 01 00       	call   c0024077 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b35:	e8 46 9b 01 00       	call   c0023680 <__muldf3>
c0009b3a:	83 c4 10             	add    esp,0x10
c0009b3d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b41:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b45:	52                   	push   edx
c0009b46:	50                   	push   eax
c0009b47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b4f:	e8 af 94 01 00       	call   c0023003 <__adddf3>
c0009b54:	83 c4 10             	add    esp,0x10
c0009b57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b5f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b63:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b67:	0f 89 c5 fe ff ff    	jns    c0009a32 <calc_output_stereo+0x81>
c0009b6d:	29 e9                	sub    ecx,ebp
c0009b6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b73:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b77:	29 c8                	sub    eax,ecx
c0009b79:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	31 d2                	xor    edx,edx
c0009b88:	0f af f8             	imul   edi,eax
c0009b8b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b8f:	40                   	inc    eax
c0009b90:	01 cf                	add    edi,ecx
c0009b92:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b97:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b9b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009ba3:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009ba6:	31 c0                	xor    eax,eax
c0009ba8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009bac:	89 f8                	mov    eax,edi
c0009bae:	83 eb 08             	sub    ebx,0x8
c0009bb1:	e8 6b fb ff ff       	call   c0009721 <fp_to_double>
c0009bb6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bbe:	89 f8                	mov    eax,edi
c0009bc0:	e8 52 fb ff ff       	call   c0009717 <fp_to_int>
c0009bc5:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009bc8:	52                   	push   edx
c0009bc9:	52                   	push   edx
c0009bca:	55                   	push   ebp
c0009bcb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bcf:	e8 c4 8d 01 00       	call   c0022998 <__subsf3>
c0009bd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bd7:	e8 9b a4 01 00       	call   c0024077 <__extendsfdf2>
c0009bdc:	83 c4 10             	add    esp,0x10
c0009bdf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009be3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009be7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009beb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf7:	e8 84 9a 01 00       	call   c0023680 <__muldf3>
c0009bfc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009bff:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009c03:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009c07:	e8 6b a4 01 00       	call   c0024077 <__extendsfdf2>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c13:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c17:	52                   	push   edx
c0009c18:	50                   	push   eax
c0009c19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c21:	e8 dd 93 01 00       	call   c0023003 <__adddf3>
c0009c26:	59                   	pop    ecx
c0009c27:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c2b:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c2f:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c35:	e8 3d a4 01 00       	call   c0024077 <__extendsfdf2>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c45:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c55:	e8 26 9a 01 00       	call   c0023680 <__muldf3>
c0009c5a:	83 c4 10             	add    esp,0x10
c0009c5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c61:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c65:	52                   	push   edx
c0009c66:	50                   	push   eax
c0009c67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c6f:	e8 8f 93 01 00       	call   c0023003 <__adddf3>
c0009c74:	5d                   	pop    ebp
c0009c75:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c79:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c7d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c83:	e8 ef a3 01 00       	call   c0024077 <__extendsfdf2>
c0009c88:	83 c4 10             	add    esp,0x10
c0009c8b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c8f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca3:	e8 d8 99 01 00       	call   c0023680 <__muldf3>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009caf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009cb3:	52                   	push   edx
c0009cb4:	50                   	push   eax
c0009cb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cbd:	e8 41 93 01 00       	call   c0023003 <__adddf3>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009cc9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ccd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cd1:	85 ff                	test   edi,edi
c0009cd3:	0f 8f d3 fe ff ff    	jg     c0009bac <calc_output_stereo+0x1fb>
c0009cd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce9:	e8 15 93 01 00       	call   c0023003 <__adddf3>
c0009cee:	83 c4 10             	add    esp,0x10
c0009cf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cf5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d09:	e8 72 99 01 00       	call   c0023680 <__muldf3>
c0009d0e:	59                   	pop    ecx
c0009d0f:	5b                   	pop    ebx
c0009d10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d20:	e8 2e a2 01 00       	call   c0023f53 <__truncdfsf2>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d2f:	89 03                	mov    DWORD PTR [ebx],eax
c0009d31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d41:	e8 bd 92 01 00       	call   c0023003 <__adddf3>
c0009d46:	83 c4 10             	add    esp,0x10
c0009d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d61:	e8 1a 99 01 00       	call   c0023680 <__muldf3>
c0009d66:	5e                   	pop    esi
c0009d67:	5f                   	pop    edi
c0009d68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d78:	e8 d6 a1 01 00       	call   c0023f53 <__truncdfsf2>
c0009d7d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d87:	83 c4 7c             	add    esp,0x7c
c0009d8a:	5b                   	pop    ebx
c0009d8b:	5e                   	pop    esi
c0009d8c:	5f                   	pop    edi
c0009d8d:	5d                   	pop    ebp
c0009d8e:	c3                   	ret    

c0009d8f <calc_output_quad>:
c0009d8f:	55                   	push   ebp
c0009d90:	57                   	push   edi
c0009d91:	56                   	push   esi
c0009d92:	89 c6                	mov    esi,eax
c0009d94:	53                   	push   ebx
c0009d95:	83 ec 7c             	sub    esp,0x7c
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009da0:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009da7:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009dae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009db2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009db6:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009db9:	e8 55 f9 ff ff       	call   c0009713 <int_to_fp>
c0009dbe:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009dc1:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009dc4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009dc8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009dcc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009dd0:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009dd4:	99                   	cdq    
c0009dd5:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009dd9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ddd:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009de0:	31 d2                	xor    edx,edx
c0009de2:	0f af d8             	imul   ebx,eax
c0009de5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009ded:	0f af c7             	imul   eax,edi
c0009df0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009df4:	29 c1                	sub    ecx,eax
c0009df6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dfe:	31 c0                	xor    eax,eax
c0009e00:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009e03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e0b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e0f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009e17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009e1b:	89 d8                	mov    eax,ebx
c0009e1d:	83 c7 10             	add    edi,0x10
c0009e20:	e8 fc f8 ff ff       	call   c0009721 <fp_to_double>
c0009e25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e2d:	89 d8                	mov    eax,ebx
c0009e2f:	e8 e3 f8 ff ff       	call   c0009717 <fp_to_int>
c0009e34:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e38:	52                   	push   edx
c0009e39:	52                   	push   edx
c0009e3a:	51                   	push   ecx
c0009e3b:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e3f:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e43:	e8 50 8b 01 00       	call   c0022998 <__subsf3>
c0009e48:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e4b:	e8 27 a2 01 00       	call   c0024077 <__extendsfdf2>
c0009e50:	83 c4 10             	add    esp,0x10
c0009e53:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e57:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e67:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e6b:	e8 10 98 01 00       	call   c0023680 <__muldf3>
c0009e70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e78:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e7f:	e8 f3 a1 01 00       	call   c0024077 <__extendsfdf2>
c0009e84:	83 c4 10             	add    esp,0x10
c0009e87:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e8b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8f:	52                   	push   edx
c0009e90:	50                   	push   eax
c0009e91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e99:	e8 65 91 01 00       	call   c0023003 <__adddf3>
c0009e9e:	59                   	pop    ecx
c0009e9f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ea3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ea7:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009ead:	e8 c5 a1 01 00       	call   c0024077 <__extendsfdf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecd:	e8 ae 97 01 00       	call   c0023680 <__muldf3>
c0009ed2:	83 c4 10             	add    esp,0x10
c0009ed5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edd:	52                   	push   edx
c0009ede:	50                   	push   eax
c0009edf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee7:	e8 17 91 01 00       	call   c0023003 <__adddf3>
c0009eec:	59                   	pop    ecx
c0009eed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ef1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ef5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009efb:	e8 77 a1 01 00       	call   c0024077 <__extendsfdf2>
c0009f00:	83 c4 10             	add    esp,0x10
c0009f03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1b:	e8 60 97 01 00       	call   c0023680 <__muldf3>
c0009f20:	83 c4 10             	add    esp,0x10
c0009f23:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f27:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f2b:	52                   	push   edx
c0009f2c:	50                   	push   eax
c0009f2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f35:	e8 c9 90 01 00       	call   c0023003 <__adddf3>
c0009f3a:	59                   	pop    ecx
c0009f3b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f3f:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f43:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f49:	e8 29 a1 01 00       	call   c0024077 <__extendsfdf2>
c0009f4e:	83 c4 10             	add    esp,0x10
c0009f51:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f55:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f61:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f69:	e8 12 97 01 00       	call   c0023680 <__muldf3>
c0009f6e:	83 c4 10             	add    esp,0x10
c0009f71:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f75:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f79:	52                   	push   edx
c0009f7a:	50                   	push   eax
c0009f7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f83:	e8 7b 90 01 00       	call   c0023003 <__adddf3>
c0009f88:	59                   	pop    ecx
c0009f89:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f8d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f91:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f97:	e8 db a0 01 00       	call   c0024077 <__extendsfdf2>
c0009f9c:	83 c4 10             	add    esp,0x10
c0009f9f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fa3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009faf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fb3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fb7:	e8 c4 96 01 00       	call   c0023680 <__muldf3>
c0009fbc:	83 c4 10             	add    esp,0x10
c0009fbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc7:	52                   	push   edx
c0009fc8:	50                   	push   eax
c0009fc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fd1:	e8 2d 90 01 00       	call   c0023003 <__adddf3>
c0009fd6:	83 c4 10             	add    esp,0x10
c0009fd9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fdd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fe1:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fe5:	0f 89 30 fe ff ff    	jns    c0009e1b <calc_output_quad+0x8c>
c0009feb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ff3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ff7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009ffb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a003:	29 c8                	sub    eax,ecx
c000a005:	99                   	cdq    
c000a006:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a00a:	31 d2                	xor    edx,edx
c000a00c:	0f af d8             	imul   ebx,eax
c000a00f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a013:	40                   	inc    eax
c000a014:	01 cb                	add    ebx,ecx
c000a016:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a01b:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a01f:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a023:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a027:	8d 34 86             	lea    esi,[esi+eax*4]
c000a02a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a032:	31 c0                	xor    eax,eax
c000a034:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a038:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a03c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a040:	89 d8                	mov    eax,ebx
c000a042:	83 ee 10             	sub    esi,0x10
c000a045:	e8 d7 f6 ff ff       	call   c0009721 <fp_to_double>
c000a04a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a052:	89 d8                	mov    eax,ebx
c000a054:	e8 be f6 ff ff       	call   c0009717 <fp_to_int>
c000a059:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a05d:	52                   	push   edx
c000a05e:	52                   	push   edx
c000a05f:	57                   	push   edi
c000a060:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a064:	e8 2f 89 01 00       	call   c0022998 <__subsf3>
c000a069:	89 04 24             	mov    DWORD PTR [esp],eax
c000a06c:	e8 06 a0 01 00       	call   c0024077 <__extendsfdf2>
c000a071:	83 c4 10             	add    esp,0x10
c000a074:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a078:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a084:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a088:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a08c:	e8 ef 95 01 00       	call   c0023680 <__muldf3>
c000a091:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a094:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a098:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a09c:	e8 d6 9f 01 00       	call   c0024077 <__extendsfdf2>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ac:	52                   	push   edx
c000a0ad:	50                   	push   eax
c000a0ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0b6:	e8 48 8f 01 00       	call   c0023003 <__adddf3>
c000a0bb:	59                   	pop    ecx
c000a0bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a0c0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0c4:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0ca:	e8 a8 9f 01 00       	call   c0024077 <__extendsfdf2>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	e8 91 95 01 00       	call   c0023680 <__muldf3>
c000a0ef:	83 c4 10             	add    esp,0x10
c000a0f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fa:	52                   	push   edx
c000a0fb:	50                   	push   eax
c000a0fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a100:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a104:	e8 fa 8e 01 00       	call   c0023003 <__adddf3>
c000a109:	5f                   	pop    edi
c000a10a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a10e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a112:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a118:	e8 5a 9f 01 00       	call   c0024077 <__extendsfdf2>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a124:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	e8 43 95 01 00       	call   c0023680 <__muldf3>
c000a13d:	83 c4 10             	add    esp,0x10
c000a140:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a144:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a148:	52                   	push   edx
c000a149:	50                   	push   eax
c000a14a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a14e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a152:	e8 ac 8e 01 00       	call   c0023003 <__adddf3>
c000a157:	59                   	pop    ecx
c000a158:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a15c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a160:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a166:	e8 0c 9f 01 00       	call   c0024077 <__extendsfdf2>
c000a16b:	83 c4 10             	add    esp,0x10
c000a16e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a172:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a182:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a186:	e8 f5 94 01 00       	call   c0023680 <__muldf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a192:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a196:	52                   	push   edx
c000a197:	50                   	push   eax
c000a198:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a19c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1a0:	e8 5e 8e 01 00       	call   c0023003 <__adddf3>
c000a1a5:	5f                   	pop    edi
c000a1a6:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a1aa:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a1ae:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a1b4:	e8 be 9e 01 00       	call   c0024077 <__extendsfdf2>
c000a1b9:	83 c4 10             	add    esp,0x10
c000a1bc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a1c0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1cc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1d0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1d4:	e8 a7 94 01 00       	call   c0023680 <__muldf3>
c000a1d9:	83 c4 10             	add    esp,0x10
c000a1dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1e4:	52                   	push   edx
c000a1e5:	50                   	push   eax
c000a1e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1ea:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1ee:	e8 10 8e 01 00       	call   c0023003 <__adddf3>
c000a1f3:	83 c4 10             	add    esp,0x10
c000a1f6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1fa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1fe:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a202:	85 db                	test   ebx,ebx
c000a204:	0f 8f 36 fe ff ff    	jg     c000a040 <calc_output_quad+0x2b1>
c000a20a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a20e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a212:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a216:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a21a:	e8 e4 8d 01 00       	call   c0023003 <__adddf3>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a226:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a22a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	e8 41 94 01 00       	call   c0023680 <__muldf3>
c000a23f:	59                   	pop    ecx
c000a240:	5b                   	pop    ebx
c000a241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a251:	e8 fd 9c 01 00       	call   c0023f53 <__truncdfsf2>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a260:	89 06                	mov    DWORD PTR [esi],eax
c000a262:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a26a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a26e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a272:	e8 8c 8d 01 00       	call   c0023003 <__adddf3>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a27e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a292:	e8 e9 93 01 00       	call   c0023680 <__muldf3>
c000a297:	5e                   	pop    esi
c000a298:	5f                   	pop    edi
c000a299:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a29d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a9:	e8 a5 9c 01 00       	call   c0023f53 <__truncdfsf2>
c000a2ae:	83 c4 10             	add    esp,0x10
c000a2b1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2b8:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a2bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2cb:	e8 33 8d 01 00       	call   c0023003 <__adddf3>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2eb:	e8 90 93 01 00       	call   c0023680 <__muldf3>
c000a2f0:	5d                   	pop    ebp
c000a2f1:	59                   	pop    ecx
c000a2f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a302:	e8 4c 9c 01 00       	call   c0023f53 <__truncdfsf2>
c000a307:	83 c4 10             	add    esp,0x10
c000a30a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a311:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a314:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a318:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a31c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a320:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a324:	e8 da 8c 01 00       	call   c0023003 <__adddf3>
c000a329:	83 c4 10             	add    esp,0x10
c000a32c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a330:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a334:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a338:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a344:	e8 37 93 01 00       	call   c0023680 <__muldf3>
c000a349:	5b                   	pop    ebx
c000a34a:	5e                   	pop    esi
c000a34b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a34f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a357:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a35b:	e8 f3 9b 01 00       	call   c0023f53 <__truncdfsf2>
c000a360:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a367:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a36a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	5f                   	pop    edi
c000a373:	5d                   	pop    ebp
c000a374:	c3                   	ret    

c000a375 <calc_output_hex>:
c000a375:	55                   	push   ebp
c000a376:	89 cd                	mov    ebp,ecx
c000a378:	57                   	push   edi
c000a379:	56                   	push   esi
c000a37a:	53                   	push   ebx
c000a37b:	89 c3                	mov    ebx,eax
c000a37d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a383:	89 14 24             	mov    DWORD PTR [esp],edx
c000a386:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a38d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a394:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a398:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a39c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a39f:	e8 6f f3 ff ff       	call   c0009713 <int_to_fp>
c000a3a4:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a3a7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3ab:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a3ae:	29 c8                	sub    eax,ecx
c000a3b0:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a3b4:	99                   	cdq    
c000a3b5:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a3bd:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a3c0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3c8:	0f af f8             	imul   edi,eax
c000a3cb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3ce:	01 cf                	add    edi,ecx
c000a3d0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3d4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3db:	0f af c2             	imul   eax,edx
c000a3de:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3e2:	29 c1                	sub    ecx,eax
c000a3e4:	31 d2                	xor    edx,edx
c000a3e6:	31 c0                	xor    eax,eax
c000a3e8:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3fb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3ff:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a403:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a407:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a40b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a40f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a413:	89 f8                	mov    eax,edi
c000a415:	e8 07 f3 ff ff       	call   c0009721 <fp_to_double>
c000a41a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a41e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a422:	89 f8                	mov    eax,edi
c000a424:	e8 ee f2 ff ff       	call   c0009717 <fp_to_int>
c000a429:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a42d:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a430:	52                   	push   edx
c000a431:	52                   	push   edx
c000a432:	51                   	push   ecx
c000a433:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a437:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a43e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a442:	e8 51 85 01 00       	call   c0022998 <__subsf3>
c000a447:	89 04 24             	mov    DWORD PTR [esp],eax
c000a44a:	e8 28 9c 01 00       	call   c0024077 <__extendsfdf2>
c000a44f:	83 c4 10             	add    esp,0x10
c000a452:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a456:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a45a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a462:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a466:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a46a:	e8 11 92 01 00       	call   c0023680 <__muldf3>
c000a46f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a473:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a477:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a47a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a47e:	e8 f4 9b 01 00       	call   c0024077 <__extendsfdf2>
c000a483:	83 c4 10             	add    esp,0x10
c000a486:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48e:	52                   	push   edx
c000a48f:	50                   	push   eax
c000a490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a498:	e8 66 8b 01 00       	call   c0023003 <__adddf3>
c000a49d:	59                   	pop    ecx
c000a49e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a4a2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a4a6:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a4ac:	e8 c6 9b 01 00       	call   c0024077 <__extendsfdf2>
c000a4b1:	83 c4 10             	add    esp,0x10
c000a4b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cc:	e8 af 91 01 00       	call   c0023680 <__muldf3>
c000a4d1:	83 c4 10             	add    esp,0x10
c000a4d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4dc:	52                   	push   edx
c000a4dd:	50                   	push   eax
c000a4de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4e6:	e8 18 8b 01 00       	call   c0023003 <__adddf3>
c000a4eb:	59                   	pop    ecx
c000a4ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4f0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4f4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4fa:	e8 78 9b 01 00       	call   c0024077 <__extendsfdf2>
c000a4ff:	83 c4 10             	add    esp,0x10
c000a502:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a506:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a512:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a516:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51a:	e8 61 91 01 00       	call   c0023680 <__muldf3>
c000a51f:	83 c4 10             	add    esp,0x10
c000a522:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a526:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52a:	52                   	push   edx
c000a52b:	50                   	push   eax
c000a52c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a530:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a534:	e8 ca 8a 01 00       	call   c0023003 <__adddf3>
c000a539:	59                   	pop    ecx
c000a53a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a53e:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a542:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a548:	e8 2a 9b 01 00       	call   c0024077 <__extendsfdf2>
c000a54d:	83 c4 10             	add    esp,0x10
c000a550:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a554:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a560:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a564:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a568:	e8 13 91 01 00       	call   c0023680 <__muldf3>
c000a56d:	83 c4 10             	add    esp,0x10
c000a570:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a574:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a578:	52                   	push   edx
c000a579:	50                   	push   eax
c000a57a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a57e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a582:	e8 7c 8a 01 00       	call   c0023003 <__adddf3>
c000a587:	59                   	pop    ecx
c000a588:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a58c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a590:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a596:	e8 dc 9a 01 00       	call   c0024077 <__extendsfdf2>
c000a59b:	83 c4 10             	add    esp,0x10
c000a59e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b6:	e8 c5 90 01 00       	call   c0023680 <__muldf3>
c000a5bb:	83 c4 10             	add    esp,0x10
c000a5be:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c6:	52                   	push   edx
c000a5c7:	50                   	push   eax
c000a5c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5d0:	e8 2e 8a 01 00       	call   c0023003 <__adddf3>
c000a5d5:	59                   	pop    ecx
c000a5d6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5da:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5de:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5e4:	e8 8e 9a 01 00       	call   c0024077 <__extendsfdf2>
c000a5e9:	83 c4 10             	add    esp,0x10
c000a5ec:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a600:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a604:	e8 77 90 01 00       	call   c0023680 <__muldf3>
c000a609:	83 c4 10             	add    esp,0x10
c000a60c:	83 c6 18             	add    esi,0x18
c000a60f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a613:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a617:	52                   	push   edx
c000a618:	50                   	push   eax
c000a619:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a61d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a621:	e8 dd 89 01 00       	call   c0023003 <__adddf3>
c000a626:	59                   	pop    ecx
c000a627:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a62b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a62f:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a635:	e8 3d 9a 01 00       	call   c0024077 <__extendsfdf2>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a641:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	e8 26 90 01 00       	call   c0023680 <__muldf3>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a661:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a665:	52                   	push   edx
c000a666:	50                   	push   eax
c000a667:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a66b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a66f:	e8 8f 89 01 00       	call   c0023003 <__adddf3>
c000a674:	83 c4 10             	add    esp,0x10
c000a677:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a67b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a67f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a682:	0f 89 8b fd ff ff    	jns    c000a413 <calc_output_hex+0x9e>
c000a688:	31 f6                	xor    esi,esi
c000a68a:	31 ff                	xor    edi,edi
c000a68c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a690:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a693:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a697:	29 e9                	sub    ecx,ebp
c000a699:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a69d:	29 c8                	sub    eax,ecx
c000a69f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a6a2:	99                   	cdq    
c000a6a3:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a6a7:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a6aa:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a6ae:	0f af e8             	imul   ebp,eax
c000a6b1:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a6b5:	40                   	inc    eax
c000a6b6:	01 cd                	add    ebp,ecx
c000a6b8:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a6bd:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6c5:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6c9:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6cc:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6d0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6d4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6d8:	89 e8                	mov    eax,ebp
c000a6da:	e8 42 f0 ff ff       	call   c0009721 <fp_to_double>
c000a6df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6e7:	89 e8                	mov    eax,ebp
c000a6e9:	e8 29 f0 ff ff       	call   c0009717 <fp_to_int>
c000a6ee:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6f2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6f5:	52                   	push   edx
c000a6f6:	52                   	push   edx
c000a6f7:	51                   	push   ecx
c000a6f8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6ff:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a706:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a70a:	e8 89 82 01 00       	call   c0022998 <__subsf3>
c000a70f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a712:	e8 60 99 01 00       	call   c0024077 <__extendsfdf2>
c000a717:	83 c4 10             	add    esp,0x10
c000a71a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a732:	e8 49 8f 01 00       	call   c0023680 <__muldf3>
c000a737:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a73e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a742:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a745:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a749:	e8 29 99 01 00       	call   c0024077 <__extendsfdf2>
c000a74e:	83 c4 10             	add    esp,0x10
c000a751:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a755:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a759:	52                   	push   edx
c000a75a:	50                   	push   eax
c000a75b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a75f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a763:	e8 9b 88 01 00       	call   c0023003 <__adddf3>
c000a768:	59                   	pop    ecx
c000a769:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a76d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a771:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a777:	e8 fb 98 01 00       	call   c0024077 <__extendsfdf2>
c000a77c:	83 c4 10             	add    esp,0x10
c000a77f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a783:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a793:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a797:	e8 e4 8e 01 00       	call   c0023680 <__muldf3>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a7:	52                   	push   edx
c000a7a8:	50                   	push   eax
c000a7a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7b1:	e8 4d 88 01 00       	call   c0023003 <__adddf3>
c000a7b6:	59                   	pop    ecx
c000a7b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a7bb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a7bf:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7c5:	e8 ad 98 01 00       	call   c0024077 <__extendsfdf2>
c000a7ca:	83 c4 10             	add    esp,0x10
c000a7cd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7dd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e5:	e8 96 8e 01 00       	call   c0023680 <__muldf3>
c000a7ea:	83 c4 10             	add    esp,0x10
c000a7ed:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f5:	52                   	push   edx
c000a7f6:	50                   	push   eax
c000a7f7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ff:	e8 ff 87 01 00       	call   c0023003 <__adddf3>
c000a804:	59                   	pop    ecx
c000a805:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a809:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a80d:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a813:	e8 5f 98 01 00       	call   c0024077 <__extendsfdf2>
c000a818:	83 c4 10             	add    esp,0x10
c000a81b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a833:	e8 48 8e 01 00       	call   c0023680 <__muldf3>
c000a838:	83 c4 10             	add    esp,0x10
c000a83b:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83f:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a843:	52                   	push   edx
c000a844:	50                   	push   eax
c000a845:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a849:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a84d:	e8 b1 87 01 00       	call   c0023003 <__adddf3>
c000a852:	59                   	pop    ecx
c000a853:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a857:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a85b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a861:	e8 11 98 01 00       	call   c0024077 <__extendsfdf2>
c000a866:	83 c4 10             	add    esp,0x10
c000a869:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a879:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a881:	e8 fa 8d 01 00       	call   c0023680 <__muldf3>
c000a886:	83 c4 10             	add    esp,0x10
c000a889:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a891:	52                   	push   edx
c000a892:	50                   	push   eax
c000a893:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a897:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a89b:	e8 63 87 01 00       	call   c0023003 <__adddf3>
c000a8a0:	59                   	pop    ecx
c000a8a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a8a5:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a8a9:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a8af:	e8 c3 97 01 00       	call   c0024077 <__extendsfdf2>
c000a8b4:	83 c4 10             	add    esp,0x10
c000a8b7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cf:	e8 ac 8d 01 00       	call   c0023680 <__muldf3>
c000a8d4:	83 c4 10             	add    esp,0x10
c000a8d7:	83 eb 18             	sub    ebx,0x18
c000a8da:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8de:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e2:	52                   	push   edx
c000a8e3:	50                   	push   eax
c000a8e4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8e8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8ec:	e8 12 87 01 00       	call   c0023003 <__adddf3>
c000a8f1:	59                   	pop    ecx
c000a8f2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8f6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8fa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a900:	e8 72 97 01 00       	call   c0024077 <__extendsfdf2>
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a90c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a910:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	e8 5b 8d 01 00       	call   c0023680 <__muldf3>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a92c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a930:	52                   	push   edx
c000a931:	50                   	push   eax
c000a932:	57                   	push   edi
c000a933:	56                   	push   esi
c000a934:	e8 ca 86 01 00       	call   c0023003 <__adddf3>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	89 c6                	mov    esi,eax
c000a93e:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a941:	89 d7                	mov    edi,edx
c000a943:	85 ed                	test   ebp,ebp
c000a945:	0f 8f 8d fd ff ff    	jg     c000a6d8 <calc_output_hex+0x363>
c000a94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a953:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a957:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a95b:	e8 a3 86 01 00       	call   c0023003 <__adddf3>
c000a960:	83 c4 10             	add    esp,0x10
c000a963:	89 04 24             	mov    DWORD PTR [esp],eax
c000a966:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a96a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a96e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a972:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a976:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97a:	e8 01 8d 01 00       	call   c0023680 <__muldf3>
c000a97f:	59                   	pop    ecx
c000a980:	5b                   	pop    ebx
c000a981:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a985:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a991:	e8 bd 95 01 00       	call   c0023f53 <__truncdfsf2>
c000a996:	83 c4 10             	add    esp,0x10
c000a999:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a0:	89 03                	mov    DWORD PTR [ebx],eax
c000a9a2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9a6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9aa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9b2:	e8 4c 86 01 00       	call   c0023003 <__adddf3>
c000a9b7:	83 c4 10             	add    esp,0x10
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	e8 aa 8c 01 00       	call   c0023680 <__muldf3>
c000a9d6:	5d                   	pop    ebp
c000a9d7:	59                   	pop    ecx
c000a9d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e8:	e8 66 95 01 00       	call   c0023f53 <__truncdfsf2>
c000a9ed:	83 c4 10             	add    esp,0x10
c000a9f0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9f7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa0a:	e8 f4 85 01 00       	call   c0023003 <__adddf3>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	e8 52 8c 01 00       	call   c0023680 <__muldf3>
c000aa2e:	5b                   	pop    ebx
c000aa2f:	5d                   	pop    ebp
c000aa30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa40:	e8 0e 95 01 00       	call   c0023f53 <__truncdfsf2>
c000aa45:	83 c4 10             	add    esp,0x10
c000aa48:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa4f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa52:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa62:	e8 9c 85 01 00       	call   c0023003 <__adddf3>
c000aa67:	83 c4 10             	add    esp,0x10
c000aa6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	e8 fa 8b 01 00       	call   c0023680 <__muldf3>
c000aa86:	59                   	pop    ecx
c000aa87:	5b                   	pop    ebx
c000aa88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa98:	e8 b6 94 01 00       	call   c0023f53 <__truncdfsf2>
c000aa9d:	83 c4 10             	add    esp,0x10
c000aaa0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaa7:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aaaa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aaae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aab2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aab6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aaba:	e8 44 85 01 00       	call   c0023003 <__adddf3>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aac9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad9:	e8 a2 8b 01 00       	call   c0023680 <__muldf3>
c000aade:	5d                   	pop    ebp
c000aadf:	59                   	pop    ecx
c000aae0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aae4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf0:	e8 5e 94 01 00       	call   c0023f53 <__truncdfsf2>
c000aaf5:	83 c4 10             	add    esp,0x10
c000aaf8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ab02:	57                   	push   edi
c000ab03:	56                   	push   esi
c000ab04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab08:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab0c:	e8 f2 84 01 00       	call   c0023003 <__adddf3>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab17:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2b:	e8 50 8b 01 00       	call   c0023680 <__muldf3>
c000ab30:	5b                   	pop    ebx
c000ab31:	5e                   	pop    esi
c000ab32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab42:	e8 0c 94 01 00       	call   c0023f53 <__truncdfsf2>
c000ab47:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab4e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab51:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab57:	5b                   	pop    ebx
c000ab58:	5e                   	pop    esi
c000ab59:	5f                   	pop    edi
c000ab5a:	5d                   	pop    ebp
c000ab5b:	c3                   	ret    

c000ab5c <sinc_reset>:
c000ab5c:	56                   	push   esi
c000ab5d:	53                   	push   ebx
c000ab5e:	51                   	push   ecx
c000ab5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab63:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab66:	85 db                	test   ebx,ebx
c000ab68:	74 59                	je     c000abc3 <sinc_reset+0x67>
c000ab6a:	31 d2                	xor    edx,edx
c000ab6c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab73:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab76:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab79:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab80:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab87:	31 c0                	xor    eax,eax
c000ab89:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab8f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab92:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab95:	52                   	push   edx
c000ab96:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab99:	c1 e0 02             	shl    eax,0x2
c000ab9c:	50                   	push   eax
c000ab9d:	6a 00                	push   0x0
c000ab9f:	56                   	push   esi
c000aba0:	e8 41 5b ff ff       	call   c00006e6 <memset>
c000aba5:	83 c4 0c             	add    esp,0xc
c000aba8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abab:	c1 e0 02             	shl    eax,0x2
c000abae:	50                   	push   eax
c000abaf:	68 aa 00 00 00       	push   0xaa
c000abb4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000abb7:	8d 04 86             	lea    eax,[esi+eax*4]
c000abba:	50                   	push   eax
c000abbb:	e8 26 5b ff ff       	call   c00006e6 <memset>
c000abc0:	83 c4 10             	add    esp,0x10
c000abc3:	58                   	pop    eax
c000abc4:	5b                   	pop    ebx
c000abc5:	5e                   	pop    esi
c000abc6:	c3                   	ret    

c000abc7 <calc_output_multi>:
c000abc7:	55                   	push   ebp
c000abc8:	57                   	push   edi
c000abc9:	56                   	push   esi
c000abca:	89 c6                	mov    esi,eax
c000abcc:	53                   	push   ebx
c000abcd:	83 ec 4c             	sub    esp,0x4c
c000abd0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abd4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abd8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abdc:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abe0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abe4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abe8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abec:	8d 46 44             	lea    eax,[esi+0x44]
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abfc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abff:	e8 0f eb ff ff       	call   c0009713 <int_to_fp>
c000ac04:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ac07:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ac0b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ac0f:	99                   	cdq    
c000ac10:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ac14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ac18:	0f af d0             	imul   edx,eax
c000ac1b:	0f af c3             	imul   eax,ebx
c000ac1e:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac22:	29 c1                	sub    ecx,eax
c000ac24:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac2c:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac33:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac37:	57                   	push   edi
c000ac38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac3c:	6a 00                	push   0x0
c000ac3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac42:	e8 9f 5a ff ff       	call   c00006e6 <memset>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac4e:	89 df                	mov    edi,ebx
c000ac50:	e8 cc ea ff ff       	call   c0009721 <fp_to_double>
c000ac55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac59:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac61:	e8 b1 ea ff ff       	call   c0009717 <fp_to_int>
c000ac66:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac69:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac6c:	51                   	push   ecx
c000ac6d:	51                   	push   ecx
c000ac6e:	55                   	push   ebp
c000ac6f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac73:	e8 20 7d 01 00       	call   c0022998 <__subsf3>
c000ac78:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac7b:	e8 f7 93 01 00       	call   c0024077 <__extendsfdf2>
c000ac80:	83 c4 10             	add    esp,0x10
c000ac83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9b:	e8 e0 89 01 00       	call   c0023680 <__muldf3>
c000aca0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aca3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aca7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000acab:	e8 c7 93 01 00       	call   c0024077 <__extendsfdf2>
c000acb0:	83 c4 10             	add    esp,0x10
c000acb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acbb:	52                   	push   edx
c000acbc:	50                   	push   eax
c000acbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc5:	e8 39 83 01 00       	call   c0023003 <__adddf3>
c000acca:	83 c4 10             	add    esp,0x10
c000accd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acd1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acd5:	89 f8                	mov    eax,edi
c000acd7:	b9 08 00 00 00       	mov    ecx,0x8
c000acdc:	99                   	cdq    
c000acdd:	f7 f9                	idiv   ecx
c000acdf:	4a                   	dec    edx
c000ace0:	83 fa 06             	cmp    edx,0x6
c000ace3:	77 07                	ja     c000acec <calc_output_multi+0x125>
c000ace5:	ff 24 95 64 58 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda79c]
c000acec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acef:	4f                   	dec    edi
c000acf0:	83 ec 0c             	sub    esp,0xc
c000acf3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acfa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad01:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad05:	e8 6d 93 01 00       	call   c0024077 <__extendsfdf2>
c000ad0a:	83 c4 10             	add    esp,0x10
c000ad0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad25:	e8 56 89 01 00       	call   c0023680 <__muldf3>
c000ad2a:	83 c4 10             	add    esp,0x10
c000ad2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad31:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad35:	52                   	push   edx
c000ad36:	50                   	push   eax
c000ad37:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad3a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad3d:	e8 c1 82 01 00       	call   c0023003 <__adddf3>
c000ad42:	83 c4 10             	add    esp,0x10
c000ad45:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad48:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad4b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad4e:	4f                   	dec    edi
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad59:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad60:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad64:	e8 0e 93 01 00       	call   c0024077 <__extendsfdf2>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad84:	e8 f7 88 01 00       	call   c0023680 <__muldf3>
c000ad89:	83 c4 10             	add    esp,0x10
c000ad8c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad90:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad94:	52                   	push   edx
c000ad95:	50                   	push   eax
c000ad96:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad99:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad9c:	e8 62 82 01 00       	call   c0023003 <__adddf3>
c000ada1:	83 c4 10             	add    esp,0x10
c000ada4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ada7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adaa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adad:	4f                   	dec    edi
c000adae:	83 ec 0c             	sub    esp,0xc
c000adb1:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adb8:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adbf:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adc3:	e8 af 92 01 00       	call   c0024077 <__extendsfdf2>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adcf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000add7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000addb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000addf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade3:	e8 98 88 01 00       	call   c0023680 <__muldf3>
c000ade8:	83 c4 10             	add    esp,0x10
c000adeb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adef:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf3:	52                   	push   edx
c000adf4:	50                   	push   eax
c000adf5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adf8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adfb:	e8 03 82 01 00       	call   c0023003 <__adddf3>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae06:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae0c:	4f                   	dec    edi
c000ae0d:	83 ec 0c             	sub    esp,0xc
c000ae10:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae17:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae1e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae22:	e8 50 92 01 00       	call   c0024077 <__extendsfdf2>
c000ae27:	83 c4 10             	add    esp,0x10
c000ae2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae42:	e8 39 88 01 00       	call   c0023680 <__muldf3>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	52                   	push   edx
c000ae53:	50                   	push   eax
c000ae54:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae57:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae5a:	e8 a4 81 01 00       	call   c0023003 <__adddf3>
c000ae5f:	83 c4 10             	add    esp,0x10
c000ae62:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae65:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae6b:	4f                   	dec    edi
c000ae6c:	83 ec 0c             	sub    esp,0xc
c000ae6f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae76:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae7d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae81:	e8 f1 91 01 00       	call   c0024077 <__extendsfdf2>
c000ae86:	83 c4 10             	add    esp,0x10
c000ae89:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae8d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea1:	e8 da 87 01 00       	call   c0023680 <__muldf3>
c000aea6:	83 c4 10             	add    esp,0x10
c000aea9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aead:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb1:	52                   	push   edx
c000aeb2:	50                   	push   eax
c000aeb3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeb6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeb9:	e8 45 81 01 00       	call   c0023003 <__adddf3>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aec4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aec7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeca:	4f                   	dec    edi
c000aecb:	83 ec 0c             	sub    esp,0xc
c000aece:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aed1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed5:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aedc:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aee0:	e8 92 91 01 00       	call   c0024077 <__extendsfdf2>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeec:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aef4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aef8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aefc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af00:	e8 7b 87 01 00       	call   c0023680 <__muldf3>
c000af05:	83 c4 10             	add    esp,0x10
c000af08:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af0c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af10:	52                   	push   edx
c000af11:	50                   	push   eax
c000af12:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af15:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af18:	e8 e6 80 01 00       	call   c0023003 <__adddf3>
c000af1d:	83 c4 10             	add    esp,0x10
c000af20:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af23:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af29:	4f                   	dec    edi
c000af2a:	83 ec 0c             	sub    esp,0xc
c000af2d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af34:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af3b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af3f:	e8 33 91 01 00       	call   c0024077 <__extendsfdf2>
c000af44:	83 c4 10             	add    esp,0x10
c000af47:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af4b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af5f:	e8 1c 87 01 00       	call   c0023680 <__muldf3>
c000af64:	83 c4 10             	add    esp,0x10
c000af67:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af6b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af6f:	52                   	push   edx
c000af70:	50                   	push   eax
c000af71:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af74:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af77:	e8 87 80 01 00       	call   c0023003 <__adddf3>
c000af7c:	83 c4 10             	add    esp,0x10
c000af7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af88:	4f                   	dec    edi
c000af89:	83 ec 0c             	sub    esp,0xc
c000af8c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af93:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af9a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af9e:	e8 d4 90 01 00       	call   c0024077 <__extendsfdf2>
c000afa3:	83 c4 10             	add    esp,0x10
c000afa6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afaa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afbe:	e8 bd 86 01 00       	call   c0023680 <__muldf3>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afca:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afce:	52                   	push   edx
c000afcf:	50                   	push   eax
c000afd0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afd3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afd6:	e8 28 80 01 00       	call   c0023003 <__adddf3>
c000afdb:	83 c4 10             	add    esp,0x10
c000afde:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afe1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afe4:	85 ff                	test   edi,edi
c000afe6:	0f 8f e9 fc ff ff    	jg     c000acd5 <calc_output_multi+0x10e>
c000afec:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000aff0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000aff4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000aff8:	0f 89 4c fc ff ff    	jns    c000ac4a <calc_output_multi+0x83>
c000affe:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b002:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b006:	29 c8                	sub    eax,ecx
c000b008:	99                   	cdq    
c000b009:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b00d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b011:	0f af d0             	imul   edx,eax
c000b014:	40                   	inc    eax
c000b015:	01 d1                	add    ecx,edx
c000b017:	0f af c3             	imul   eax,ebx
c000b01a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b01e:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b021:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b025:	55                   	push   ebp
c000b026:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b02a:	6a 00                	push   0x0
c000b02c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b030:	e8 b1 56 ff ff       	call   c00006e6 <memset>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b03c:	e8 e0 e6 ff ff       	call   c0009721 <fp_to_double>
c000b041:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b045:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b049:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b04d:	e8 c5 e6 ff ff       	call   c0009717 <fp_to_int>
c000b052:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b055:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b058:	57                   	push   edi
c000b059:	57                   	push   edi
c000b05a:	89 df                	mov    edi,ebx
c000b05c:	55                   	push   ebp
c000b05d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b061:	e8 32 79 01 00       	call   c0022998 <__subsf3>
c000b066:	89 04 24             	mov    DWORD PTR [esp],eax
c000b069:	e8 09 90 01 00       	call   c0024077 <__extendsfdf2>
c000b06e:	83 c4 10             	add    esp,0x10
c000b071:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b075:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b079:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b085:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b089:	e8 f2 85 01 00       	call   c0023680 <__muldf3>
c000b08e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b091:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b095:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b099:	e8 d9 8f 01 00       	call   c0024077 <__extendsfdf2>
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0a9:	52                   	push   edx
c000b0aa:	50                   	push   eax
c000b0ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b3:	e8 4b 7f 01 00       	call   c0023003 <__adddf3>
c000b0b8:	83 c4 10             	add    esp,0x10
c000b0bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0c3:	89 f8                	mov    eax,edi
c000b0c5:	b9 08 00 00 00       	mov    ecx,0x8
c000b0ca:	99                   	cdq    
c000b0cb:	f7 f9                	idiv   ecx
c000b0cd:	4a                   	dec    edx
c000b0ce:	83 fa 06             	cmp    edx,0x6
c000b0d1:	77 07                	ja     c000b0da <calc_output_multi+0x513>
c000b0d3:	ff 24 95 80 58 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda780]
c000b0da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0de:	4f                   	dec    edi
c000b0df:	83 ec 0c             	sub    esp,0xc
c000b0e2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0e9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0f0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0f4:	e8 7e 8f 01 00       	call   c0024077 <__extendsfdf2>
c000b0f9:	83 c4 10             	add    esp,0x10
c000b0fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b100:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b110:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b114:	e8 67 85 01 00       	call   c0023680 <__muldf3>
c000b119:	83 c4 10             	add    esp,0x10
c000b11c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b124:	52                   	push   edx
c000b125:	50                   	push   eax
c000b126:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b129:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b12c:	e8 d2 7e 01 00       	call   c0023003 <__adddf3>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b137:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b13a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b13e:	4f                   	dec    edi
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b145:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b149:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b150:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b154:	e8 1e 8f 01 00       	call   c0024077 <__extendsfdf2>
c000b159:	83 c4 10             	add    esp,0x10
c000b15c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b160:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b164:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b168:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b16c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b170:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b174:	e8 07 85 01 00       	call   c0023680 <__muldf3>
c000b179:	83 c4 10             	add    esp,0x10
c000b17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b180:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b184:	52                   	push   edx
c000b185:	50                   	push   eax
c000b186:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b189:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b18c:	e8 72 7e 01 00       	call   c0023003 <__adddf3>
c000b191:	83 c4 10             	add    esp,0x10
c000b194:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b197:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b19e:	4f                   	dec    edi
c000b19f:	83 ec 0c             	sub    esp,0xc
c000b1a2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1a9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1b0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1b4:	e8 be 8e 01 00       	call   c0024077 <__extendsfdf2>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d4:	e8 a7 84 01 00       	call   c0023680 <__muldf3>
c000b1d9:	83 c4 10             	add    esp,0x10
c000b1dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1e4:	52                   	push   edx
c000b1e5:	50                   	push   eax
c000b1e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1e9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1ec:	e8 12 7e 01 00       	call   c0023003 <__adddf3>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1f7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1fe:	4f                   	dec    edi
c000b1ff:	83 ec 0c             	sub    esp,0xc
c000b202:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b205:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b209:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b210:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b214:	e8 5e 8e 01 00       	call   c0024077 <__extendsfdf2>
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b220:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b230:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b234:	e8 47 84 01 00       	call   c0023680 <__muldf3>
c000b239:	83 c4 10             	add    esp,0x10
c000b23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b244:	52                   	push   edx
c000b245:	50                   	push   eax
c000b246:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b249:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b24c:	e8 b2 7d 01 00       	call   c0023003 <__adddf3>
c000b251:	83 c4 10             	add    esp,0x10
c000b254:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b257:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b25e:	4f                   	dec    edi
c000b25f:	83 ec 0c             	sub    esp,0xc
c000b262:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b265:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b269:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b270:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b274:	e8 fe 8d 01 00       	call   c0024077 <__extendsfdf2>
c000b279:	83 c4 10             	add    esp,0x10
c000b27c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b280:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b288:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b28c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b290:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b294:	e8 e7 83 01 00       	call   c0023680 <__muldf3>
c000b299:	83 c4 10             	add    esp,0x10
c000b29c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2a4:	52                   	push   edx
c000b2a5:	50                   	push   eax
c000b2a6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2a9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2ac:	e8 52 7d 01 00       	call   c0023003 <__adddf3>
c000b2b1:	83 c4 10             	add    esp,0x10
c000b2b4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2b7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2be:	4f                   	dec    edi
c000b2bf:	83 ec 0c             	sub    esp,0xc
c000b2c2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2c9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2d4:	e8 9e 8d 01 00       	call   c0024077 <__extendsfdf2>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f4:	e8 87 83 01 00       	call   c0023680 <__muldf3>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b300:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b304:	52                   	push   edx
c000b305:	50                   	push   eax
c000b306:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b309:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b30c:	e8 f2 7c 01 00       	call   c0023003 <__adddf3>
c000b311:	83 c4 10             	add    esp,0x10
c000b314:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b317:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b31a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b31e:	4f                   	dec    edi
c000b31f:	83 ec 0c             	sub    esp,0xc
c000b322:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b325:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b329:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b330:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b334:	e8 3e 8d 01 00       	call   c0024077 <__extendsfdf2>
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b34c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b350:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b354:	e8 27 83 01 00       	call   c0023680 <__muldf3>
c000b359:	83 c4 10             	add    esp,0x10
c000b35c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b360:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b364:	52                   	push   edx
c000b365:	50                   	push   eax
c000b366:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b369:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b36c:	e8 92 7c 01 00       	call   c0023003 <__adddf3>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b377:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b37a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37e:	4f                   	dec    edi
c000b37f:	83 ec 0c             	sub    esp,0xc
c000b382:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b389:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b390:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b394:	e8 de 8c 01 00       	call   c0024077 <__extendsfdf2>
c000b399:	83 c4 10             	add    esp,0x10
c000b39c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3b4:	e8 c7 82 01 00       	call   c0023680 <__muldf3>
c000b3b9:	83 c4 10             	add    esp,0x10
c000b3bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3c4:	52                   	push   edx
c000b3c5:	50                   	push   eax
c000b3c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3c9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3cc:	e8 32 7c 01 00       	call   c0023003 <__adddf3>
c000b3d1:	83 c4 10             	add    esp,0x10
c000b3d4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3d7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3da:	85 ff                	test   edi,edi
c000b3dc:	0f 8f e1 fc ff ff    	jg     c000b0c3 <calc_output_multi+0x4fc>
c000b3e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3e6:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3ea:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3ee:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3f3:	0f 8f 3f fc ff ff    	jg     c000b038 <calc_output_multi+0x471>
c000b3f9:	be 08 00 00 00       	mov    esi,0x8
c000b3fe:	89 d8                	mov    eax,ebx
c000b400:	99                   	cdq    
c000b401:	f7 fe                	idiv   esi
c000b403:	4a                   	dec    edx
c000b404:	83 fa 06             	cmp    edx,0x6
c000b407:	77 07                	ja     c000b410 <calc_output_multi+0x849>
c000b409:	ff 24 95 9c 58 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda764]
c000b410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b414:	4b                   	dec    ebx
c000b415:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b419:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b41c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b420:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b424:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b427:	e8 d7 7b 01 00       	call   c0023003 <__adddf3>
c000b42c:	83 c4 10             	add    esp,0x10
c000b42f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b433:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b443:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b447:	e8 34 82 01 00       	call   c0023680 <__muldf3>
c000b44c:	5d                   	pop    ebp
c000b44d:	59                   	pop    ecx
c000b44e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b452:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b45e:	e8 f0 8a 01 00       	call   c0023f53 <__truncdfsf2>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b46a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b46d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b471:	4b                   	dec    ebx
c000b472:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b476:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b479:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b47d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b481:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b484:	e8 7a 7b 01 00       	call   c0023003 <__adddf3>
c000b489:	83 c4 10             	add    esp,0x10
c000b48c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b490:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a4:	e8 d7 81 01 00       	call   c0023680 <__muldf3>
c000b4a9:	59                   	pop    ecx
c000b4aa:	5f                   	pop    edi
c000b4ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bb:	e8 93 8a 01 00       	call   c0023f53 <__truncdfsf2>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4c7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ce:	4b                   	dec    ebx
c000b4cf:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4da:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4de:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e1:	e8 1d 7b 01 00       	call   c0023003 <__adddf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b501:	e8 7a 81 01 00       	call   c0023680 <__muldf3>
c000b506:	5f                   	pop    edi
c000b507:	5d                   	pop    ebp
c000b508:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b50c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b510:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b514:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b518:	e8 36 8a 01 00       	call   c0023f53 <__truncdfsf2>
c000b51d:	83 c4 10             	add    esp,0x10
c000b520:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b524:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52b:	4b                   	dec    ebx
c000b52c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b530:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b537:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b53e:	e8 c0 7a 01 00       	call   c0023003 <__adddf3>
c000b543:	83 c4 10             	add    esp,0x10
c000b546:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55e:	e8 1d 81 01 00       	call   c0023680 <__muldf3>
c000b563:	5d                   	pop    ebp
c000b564:	59                   	pop    ecx
c000b565:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b569:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b56d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b575:	e8 d9 89 01 00       	call   c0023f53 <__truncdfsf2>
c000b57a:	83 c4 10             	add    esp,0x10
c000b57d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b581:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b588:	4b                   	dec    ebx
c000b589:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b58d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b594:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b598:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59b:	e8 63 7a 01 00       	call   c0023003 <__adddf3>
c000b5a0:	83 c4 10             	add    esp,0x10
c000b5a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5bb:	e8 c0 80 01 00       	call   c0023680 <__muldf3>
c000b5c0:	59                   	pop    ecx
c000b5c1:	5f                   	pop    edi
c000b5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d2:	e8 7c 89 01 00       	call   c0023f53 <__truncdfsf2>
c000b5d7:	83 c4 10             	add    esp,0x10
c000b5da:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5de:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e5:	4b                   	dec    ebx
c000b5e6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ea:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f8:	e8 06 7a 01 00       	call   c0023003 <__adddf3>
c000b5fd:	83 c4 10             	add    esp,0x10
c000b600:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b604:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b60c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b618:	e8 63 80 01 00       	call   c0023680 <__muldf3>
c000b61d:	5f                   	pop    edi
c000b61e:	5d                   	pop    ebp
c000b61f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b623:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b627:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62f:	e8 1f 89 01 00       	call   c0023f53 <__truncdfsf2>
c000b634:	83 c4 10             	add    esp,0x10
c000b637:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b63b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b642:	4b                   	dec    ebx
c000b643:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b647:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b652:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b655:	e8 a9 79 01 00       	call   c0023003 <__adddf3>
c000b65a:	83 c4 10             	add    esp,0x10
c000b65d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b661:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b675:	e8 06 80 01 00       	call   c0023680 <__muldf3>
c000b67a:	5d                   	pop    ebp
c000b67b:	59                   	pop    ecx
c000b67c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b680:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b688:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68c:	e8 c2 88 01 00       	call   c0023f53 <__truncdfsf2>
c000b691:	83 c4 10             	add    esp,0x10
c000b694:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b698:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b69b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b69f:	4b                   	dec    ebx
c000b6a0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6ab:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6af:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b2:	e8 4c 79 01 00       	call   c0023003 <__adddf3>
c000b6b7:	83 c4 10             	add    esp,0x10
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d2:	e8 a9 7f 01 00       	call   c0023680 <__muldf3>
c000b6d7:	59                   	pop    ecx
c000b6d8:	5f                   	pop    edi
c000b6d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e9:	e8 65 88 01 00       	call   c0023f53 <__truncdfsf2>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	85 db                	test   ebx,ebx
c000b6f3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6f7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6fa:	0f 8f fe fc ff ff    	jg     c000b3fe <calc_output_multi+0x837>
c000b700:	83 c4 4c             	add    esp,0x4c
c000b703:	5b                   	pop    ebx
c000b704:	5e                   	pop    esi
c000b705:	5f                   	pop    edi
c000b706:	5d                   	pop    ebp
c000b707:	c3                   	ret    

c000b708 <double_to_fp>:
c000b708:	83 ec 0c             	sub    esp,0xc
c000b70b:	68 00 00 b0 40       	push   0x40b00000
c000b710:	6a 00                	push   0x0
c000b712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71a:	e8 61 7f 01 00       	call   c0023680 <__muldf3>
c000b71f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b723:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b727:	83 c4 1c             	add    esp,0x1c
c000b72a:	e9 d1 89 01 00       	jmp    c0024100 <lrint>

c000b72f <fmod_one>:
c000b72f:	83 ec 2c             	sub    esp,0x2c
c000b732:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b736:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b73a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b73e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b742:	83 ec 08             	sub    esp,0x8
c000b745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74d:	e8 ae 89 01 00       	call   c0024100 <lrint>
c000b752:	83 c4 10             	add    esp,0x10
c000b755:	83 ec 0c             	sub    esp,0xc
c000b758:	50                   	push   eax
c000b759:	e8 85 85 01 00       	call   c0023ce3 <__floatsidf>
c000b75e:	83 c4 10             	add    esp,0x10
c000b761:	52                   	push   edx
c000b762:	50                   	push   eax
c000b763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76b:	e8 e4 7e 01 00       	call   c0023654 <__subdf3>
c000b770:	83 c4 10             	add    esp,0x10
c000b773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b77b:	b8 00 00 00 00       	mov    eax,0x0
c000b780:	ba 00 00 00 00       	mov    edx,0x0
c000b785:	52                   	push   edx
c000b786:	50                   	push   eax
c000b787:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b78f:	e8 bb 87 01 00       	call   c0023f4f <__ltdf2>
c000b794:	83 c4 10             	add    esp,0x10
c000b797:	85 c0                	test   eax,eax
c000b799:	79 1e                	jns    c000b7b9 <fmod_one+0x8a>
c000b79b:	b8 00 00 00 00       	mov    eax,0x0
c000b7a0:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b7a5:	52                   	push   edx
c000b7a6:	50                   	push   eax
c000b7a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7af:	e8 4f 78 01 00       	call   c0023003 <__adddf3>
c000b7b4:	83 c4 10             	add    esp,0x10
c000b7b7:	eb 08                	jmp    c000b7c1 <fmod_one+0x92>
c000b7b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7c1:	83 c4 2c             	add    esp,0x2c
c000b7c4:	c3                   	ret    

c000b7c5 <prepare_data>:
c000b7c5:	55                   	push   ebp
c000b7c6:	57                   	push   edi
c000b7c7:	56                   	push   esi
c000b7c8:	53                   	push   ebx
c000b7c9:	83 ec 1c             	sub    esp,0x1c
c000b7cc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7d0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7d4:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7d8:	0f 89 57 01 00 00    	jns    c000b935 <prepare_data+0x170>
c000b7de:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7e1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e4:	85 d2                	test   edx,edx
c000b7e6:	75 0d                	jne    c000b7f5 <prepare_data+0x30>
c000b7e8:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7eb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7ee:	29 d0                	sub    eax,edx
c000b7f0:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7f3:	eb 44                	jmp    c000b839 <prepare_data+0x74>
c000b7f5:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7f8:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b7fb:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b7fe:	39 c1                	cmp    ecx,eax
c000b800:	7d 04                	jge    c000b806 <prepare_data+0x41>
c000b802:	29 d0                	sub    eax,edx
c000b804:	eb 2d                	jmp    c000b833 <prepare_data+0x6e>
c000b806:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b80c:	29 d7                	sub    edi,edx
c000b80e:	01 f7                	add    edi,esi
c000b810:	51                   	push   ecx
c000b811:	29 f2                	sub    edx,esi
c000b813:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b81a:	8d 14 90             	lea    edx,[eax+edx*4]
c000b81d:	51                   	push   ecx
c000b81e:	52                   	push   edx
c000b81f:	50                   	push   eax
c000b820:	e8 53 4e ff ff       	call   c0000678 <memmove>
c000b825:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b828:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b82b:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b82e:	29 f0                	sub    eax,esi
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	29 f0                	sub    eax,esi
c000b835:	79 02                	jns    c000b839 <prepare_data+0x74>
c000b837:	31 c0                	xor    eax,eax
c000b839:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b83c:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b83f:	29 ef                	sub    edi,ebp
c000b841:	39 c7                	cmp    edi,eax
c000b843:	7e 02                	jle    c000b847 <prepare_data+0x82>
c000b845:	89 c7                	mov    edi,eax
c000b847:	89 f8                	mov    eax,edi
c000b849:	99                   	cdq    
c000b84a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b84d:	b8 15 00 00 00       	mov    eax,0x15
c000b852:	29 d7                	sub    edi,edx
c000b854:	0f 88 dd 00 00 00    	js     c000b937 <prepare_data+0x172>
c000b85a:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b85d:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b860:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b863:	0f 8f ce 00 00 00    	jg     c000b937 <prepare_data+0x172>
c000b869:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b86f:	50                   	push   eax
c000b870:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b877:	50                   	push   eax
c000b878:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b87c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b87e:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b881:	50                   	push   eax
c000b882:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b885:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b889:	50                   	push   eax
c000b88a:	e8 21 4e ff ff       	call   c00006b0 <memcpy>
c000b88f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b892:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b895:	01 fd                	add    ebp,edi
c000b897:	01 f9                	add    ecx,edi
c000b899:	83 c4 10             	add    esp,0x10
c000b89c:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b89f:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b8a2:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b8a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8a9:	0f 85 86 00 00 00    	jne    c000b935 <prepare_data+0x170>
c000b8af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b8b2:	89 e8                	mov    eax,ebp
c000b8b4:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b8b7:	29 c8                	sub    eax,ecx
c000b8b9:	39 f8                	cmp    eax,edi
c000b8bb:	7d 78                	jge    c000b935 <prepare_data+0x170>
c000b8bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8c1:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8c5:	74 6e                	je     c000b935 <prepare_data+0x170>
c000b8c7:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8ca:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8ce:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8d1:	29 ef                	sub    edi,ebp
c000b8d3:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8d7:	7c 29                	jl     c000b902 <prepare_data+0x13d>
c000b8d9:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8dc:	29 f1                	sub    ecx,esi
c000b8de:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8e5:	55                   	push   ebp
c000b8e6:	50                   	push   eax
c000b8e7:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8ea:	50                   	push   eax
c000b8eb:	52                   	push   edx
c000b8ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8f0:	e8 83 4d ff ff       	call   c0000678 <memmove>
c000b8f5:	83 c4 10             	add    esp,0x10
c000b8f8:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8fb:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b8fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b902:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b905:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b908:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b90b:	83 c6 05             	add    esi,0x5
c000b90e:	78 07                	js     c000b917 <prepare_data+0x152>
c000b910:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b913:	39 cf                	cmp    edi,ecx
c000b915:	7e 04                	jle    c000b91b <prepare_data+0x156>
c000b917:	89 ce                	mov    esi,ecx
c000b919:	29 c6                	sub    esi,eax
c000b91b:	8d 04 82             	lea    eax,[edx+eax*4]
c000b91e:	51                   	push   ecx
c000b91f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b926:	51                   	push   ecx
c000b927:	6a 00                	push   0x0
c000b929:	50                   	push   eax
c000b92a:	e8 b7 4d ff ff       	call   c00006e6 <memset>
c000b92f:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	31 c0                	xor    eax,eax
c000b937:	83 c4 1c             	add    esp,0x1c
c000b93a:	5b                   	pop    ebx
c000b93b:	5e                   	pop    esi
c000b93c:	5f                   	pop    edi
c000b93d:	5d                   	pop    ebp
c000b93e:	c3                   	ret    

c000b93f <sinc_multichan_vari_process>:
c000b93f:	55                   	push   ebp
c000b940:	b8 05 00 00 00       	mov    eax,0x5
c000b945:	57                   	push   edi
c000b946:	56                   	push   esi
c000b947:	53                   	push   ebx
c000b948:	83 ec 4c             	sub    esp,0x4c
c000b94b:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b94f:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b953:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b956:	85 db                	test   ebx,ebx
c000b958:	0f 84 b5 05 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x5d4>
c000b95e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b961:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b964:	0f af d0             	imul   edx,eax
c000b967:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b96a:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b96e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b975:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b978:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b97f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b982:	8b 06                	mov    eax,DWORD PTR [esi]
c000b984:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b988:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b98c:	57                   	push   edi
c000b98d:	57                   	push   edi
c000b98e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b992:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b996:	e8 15 dd ff ff       	call   c00096b0 <is_bad_src_ratio>
c000b99b:	83 c4 10             	add    esp,0x10
c000b99e:	89 c2                	mov    edx,eax
c000b9a0:	b8 16 00 00 00       	mov    eax,0x16
c000b9a5:	85 d2                	test   edx,edx
c000b9a7:	0f 85 66 05 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x5d4>
c000b9ad:	83 ec 0c             	sub    esp,0xc
c000b9b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b9b3:	e8 2b 83 01 00       	call   c0023ce3 <__floatsidf>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9c2:	68 00 00 00 40       	push   0x40000000
c000b9c7:	6a 00                	push   0x0
c000b9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d1:	e8 2d 76 01 00       	call   c0023003 <__adddf3>
c000b9d6:	59                   	pop    ecx
c000b9d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9e2:	e8 fc 82 01 00       	call   c0023ce3 <__floatsidf>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9f2:	52                   	push   edx
c000b9f3:	50                   	push   eax
c000b9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9fc:	e8 63 7f 01 00       	call   c0023964 <__divdf3>
c000ba01:	83 c4 10             	add    esp,0x10
c000ba04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba08:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba0c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba0e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba18:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000ba1b:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000ba1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba26:	52                   	push   edx
c000ba27:	50                   	push   eax
c000ba28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba2c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba30:	e8 1a 85 01 00       	call   c0023f4f <__ltdf2>
c000ba35:	83 c4 10             	add    esp,0x10
c000ba38:	85 c0                	test   eax,eax
c000ba3a:	79 1d                	jns    c000ba59 <sinc_multichan_vari_process+0x11a>
c000ba3c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba41:	6a 00                	push   0x0
c000ba43:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba4b:	e8 ff 84 01 00       	call   c0023f4f <__ltdf2>
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	85 c0                	test   eax,eax
c000ba55:	78 2c                	js     c000ba83 <sinc_multichan_vari_process+0x144>
c000ba57:	eb 4a                	jmp    c000baa3 <sinc_multichan_vari_process+0x164>
c000ba59:	68 00 00 f0 3f       	push   0x3ff00000
c000ba5e:	6a 00                	push   0x0
c000ba60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba68:	e8 e2 84 01 00       	call   c0023f4f <__ltdf2>
c000ba6d:	83 c4 10             	add    esp,0x10
c000ba70:	85 c0                	test   eax,eax
c000ba72:	79 2f                	jns    c000baa3 <sinc_multichan_vari_process+0x164>
c000ba74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba7f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba83:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba87:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba93:	e8 cc 7e 01 00       	call   c0023964 <__divdf3>
c000ba98:	83 c4 10             	add    esp,0x10
c000ba9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba9f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000baa3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000baa6:	50                   	push   eax
c000baa7:	50                   	push   eax
c000baa8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000baac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab0:	e8 4b 86 01 00       	call   c0024100 <lrint>
c000bab5:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bab8:	40                   	inc    eax
c000bab9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000babd:	0f af c7             	imul   eax,edi
c000bac0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bac4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bac7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bacb:	58                   	pop    eax
c000bacc:	5a                   	pop    edx
c000bacd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad5:	e8 55 fc ff ff       	call   c000b72f <fmod_one>
c000bada:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000badd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bae5:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bae8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000baec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bafc:	e8 53 7b 01 00       	call   c0023654 <__subdf3>
c000bb01:	83 c4 18             	add    esp,0x18
c000bb04:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb0c:	52                   	push   edx
c000bb0d:	50                   	push   eax
c000bb0e:	e8 ed 85 01 00       	call   c0024100 <lrint>
c000bb13:	0f af f8             	imul   edi,eax
c000bb16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bb1a:	01 f8                	add    eax,edi
c000bb1c:	99                   	cdq    
c000bb1d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bb20:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb2b:	68 00 00 f0 3f       	push   0x3ff00000
c000bb30:	6a 00                	push   0x0
c000bb32:	e8 2d 7e 01 00       	call   c0023964 <__divdf3>
c000bb37:	83 c4 10             	add    esp,0x10
c000bb3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb42:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb47:	68 23 42 92 0c       	push   0xc924223
c000bb4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb54:	e8 aa 74 01 00       	call   c0023003 <__adddf3>
c000bb59:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb5d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb61:	83 c4 20             	add    esp,0x20
c000bb64:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb6c:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb74:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb77:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb7a:	7d 4e                	jge    c000bbca <sinc_multichan_vari_process+0x28b>
c000bb7c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb7f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb82:	01 c8                	add    eax,ecx
c000bb84:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb87:	99                   	cdq    
c000bb88:	f7 f9                	idiv   ecx
c000bb8a:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb8e:	7d 0c                	jge    c000bb9c <sinc_multichan_vari_process+0x25d>
c000bb90:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb93:	85 ff                	test   edi,edi
c000bb95:	79 68                	jns    c000bbff <sinc_multichan_vari_process+0x2c0>
c000bb97:	e9 e3 00 00 00       	jmp    c000bc7f <sinc_multichan_vari_process+0x340>
c000bb9c:	50                   	push   eax
c000bb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba1:	55                   	push   ebp
c000bba2:	53                   	push   ebx
c000bba3:	e8 1d fc ff ff       	call   c000b7c5 <prepare_data>
c000bba8:	83 c4 10             	add    esp,0x10
c000bbab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bbae:	85 c0                	test   eax,eax
c000bbb0:	0f 85 5d 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x5d4>
c000bbb6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bbb9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bbbc:	01 c8                	add    eax,ecx
c000bbbe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bbc1:	99                   	cdq    
c000bbc2:	f7 f9                	idiv   ecx
c000bbc4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bbc8:	7c c6                	jl     c000bb90 <sinc_multichan_vari_process+0x251>
c000bbca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbcd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbd1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbd4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbdf:	89 06                	mov    DWORD PTR [esi],eax
c000bbe1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbe4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbe7:	99                   	cdq    
c000bbe8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbeb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbf1:	99                   	cdq    
c000bbf2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbf5:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbf8:	31 c0                	xor    eax,eax
c000bbfa:	e9 14 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x5d4>
c000bbff:	83 ec 0c             	sub    esp,0xc
c000bc02:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bc05:	e8 d9 80 01 00       	call   c0023ce3 <__floatsidf>
c000bc0a:	83 c4 10             	add    esp,0x10
c000bc0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc11:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc15:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc19:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc25:	e8 d9 73 01 00       	call   c0023003 <__adddf3>
c000bc2a:	83 c4 10             	add    esp,0x10
c000bc2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc45:	e8 b9 73 01 00       	call   c0023003 <__adddf3>
c000bc4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc51:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc55:	e8 89 80 01 00       	call   c0023ce3 <__floatsidf>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc65:	52                   	push   edx
c000bc66:	50                   	push   eax
c000bc67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc6f:	e8 d9 82 01 00       	call   c0023f4d <__gedf2>
c000bc74:	83 c4 10             	add    esp,0x10
c000bc77:	85 c0                	test   eax,eax
c000bc79:	0f 89 4b ff ff ff    	jns    c000bbca <sinc_multichan_vari_process+0x28b>
c000bc7f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc83:	0f 8e ed 00 00 00    	jle    c000bd76 <sinc_multichan_vari_process+0x437>
c000bc89:	83 ec 10             	sub    esp,0x10
c000bc8c:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc8f:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc92:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc95:	ff 36                	push   DWORD PTR [esi]
c000bc97:	e8 b8 79 01 00       	call   c0023654 <__subdf3>
c000bc9c:	83 c4 18             	add    esp,0x18
c000bc9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bca7:	52                   	push   edx
c000bca8:	50                   	push   eax
c000bca9:	e8 32 84 01 00       	call   c00240e0 <fabs>
c000bcae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb6:	83 c4 10             	add    esp,0x10
c000bcb9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bcbe:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bcc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bccb:	e8 61 82 01 00       	call   c0023f31 <__gtdf2>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	85 c0                	test   eax,eax
c000bcd5:	0f 8e 9b 00 00 00    	jle    c000bd76 <sinc_multichan_vari_process+0x437>
c000bcdb:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcdd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bce8:	52                   	push   edx
c000bce9:	50                   	push   eax
c000bcea:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bced:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bcf0:	e8 5f 79 01 00       	call   c0023654 <__subdf3>
c000bcf5:	59                   	pop    ecx
c000bcf6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcfa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcfe:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bd01:	e8 dd 7f 01 00       	call   c0023ce3 <__floatsidf>
c000bd06:	83 c4 10             	add    esp,0x10
c000bd09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd11:	52                   	push   edx
c000bd12:	50                   	push   eax
c000bd13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd1b:	e8 60 79 01 00       	call   c0023680 <__muldf3>
c000bd20:	5f                   	pop    edi
c000bd21:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd25:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd29:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd2c:	e8 b2 7f 01 00       	call   c0023ce3 <__floatsidf>
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd3c:	52                   	push   edx
c000bd3d:	50                   	push   eax
c000bd3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd46:	e8 19 7c 01 00       	call   c0023964 <__divdf3>
c000bd4b:	83 c4 10             	add    esp,0x10
c000bd4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd66:	e8 98 72 01 00       	call   c0023003 <__adddf3>
c000bd6b:	83 c4 10             	add    esp,0x10
c000bd6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd76:	83 ec 0c             	sub    esp,0xc
c000bd79:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd7c:	e8 62 7f 01 00       	call   c0023ce3 <__floatsidf>
c000bd81:	83 c4 10             	add    esp,0x10
c000bd84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd9c:	e8 ae 81 01 00       	call   c0023f4f <__ltdf2>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	85 c0                	test   eax,eax
c000bda6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bdaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdb2:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bdb6:	78 10                	js     c000bdc8 <sinc_multichan_vari_process+0x489>
c000bdb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdbc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bdc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdc4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd8:	e8 a3 78 01 00       	call   c0023680 <__muldf3>
c000bddd:	59                   	pop    ecx
c000bdde:	5f                   	pop    edi
c000bddf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdef:	e8 14 f9 ff ff       	call   c000b708 <double_to_fp>
c000bdf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf8:	89 c7                	mov    edi,eax
c000bdfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be06:	e8 75 78 01 00       	call   c0023680 <__muldf3>
c000be0b:	83 c4 18             	add    esp,0x18
c000be0e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be16:	52                   	push   edx
c000be17:	50                   	push   eax
c000be18:	e8 eb f8 ff ff       	call   c000b708 <double_to_fp>
c000be1d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000be20:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be24:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be27:	8d 04 90             	lea    eax,[eax+edx*4]
c000be2a:	50                   	push   eax
c000be2b:	50                   	push   eax
c000be2c:	50                   	push   eax
c000be2d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be30:	e8 ae 7e 01 00       	call   c0023ce3 <__floatsidf>
c000be35:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be39:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be3d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be4d:	e8 12 7b 01 00       	call   c0023964 <__divdf3>
c000be52:	83 c4 1c             	add    esp,0x1c
c000be55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be59:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be5d:	52                   	push   edx
c000be5e:	89 fa                	mov    edx,edi
c000be60:	50                   	push   eax
c000be61:	89 d8                	mov    eax,ebx
c000be63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be66:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be6a:	e8 58 ed ff ff       	call   c000abc7 <calc_output_multi>
c000be6f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be72:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be85:	e8 da 7a 01 00       	call   c0023964 <__divdf3>
c000be8a:	83 c4 10             	add    esp,0x10
c000be8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be91:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bea1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bea5:	e8 59 71 01 00       	call   c0023003 <__adddf3>
c000beaa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000beae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000beb2:	83 c4 28             	add    esp,0x28
c000beb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000beb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bebd:	e8 6d f8 ff ff       	call   c000b72f <fmod_one>
c000bec2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bec5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bec9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000becd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bedc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bee0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bee4:	e8 6b 77 01 00       	call   c0023654 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bef0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 05 82 01 00       	call   c0024100 <lrint>
c000befb:	0f af f8             	imul   edi,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 f8                	add    eax,edi
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 61 fc ff ff       	jmp    c000bb74 <sinc_multichan_vari_process+0x235>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	5b                   	pop    ebx
c000bf17:	5e                   	pop    esi
c000bf18:	5f                   	pop    edi
c000bf19:	5d                   	pop    ebp
c000bf1a:	c3                   	ret    

c000bf1b <sinc_hex_vari_process>:
c000bf1b:	55                   	push   ebp
c000bf1c:	b8 05 00 00 00       	mov    eax,0x5
c000bf21:	57                   	push   edi
c000bf22:	56                   	push   esi
c000bf23:	53                   	push   ebx
c000bf24:	83 ec 4c             	sub    esp,0x4c
c000bf27:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf2f:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf32:	85 db                	test   ebx,ebx
c000bf34:	0f 84 b7 05 00 00    	je     c000c4f1 <sinc_hex_vari_process+0x5d6>
c000bf3a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf40:	0f af d0             	imul   edx,eax
c000bf43:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf46:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf4a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf51:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf54:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf5b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf5e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf69:	57                   	push   edi
c000bf6a:	57                   	push   edi
c000bf6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf73:	e8 38 d7 ff ff       	call   c00096b0 <is_bad_src_ratio>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	89 c2                	mov    edx,eax
c000bf7d:	b8 16 00 00 00       	mov    eax,0x16
c000bf82:	85 d2                	test   edx,edx
c000bf84:	0f 85 67 05 00 00    	jne    c000c4f1 <sinc_hex_vari_process+0x5d6>
c000bf8a:	83 ec 0c             	sub    esp,0xc
c000bf8d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf90:	e8 4e 7d 01 00       	call   c0023ce3 <__floatsidf>
c000bf95:	83 c4 10             	add    esp,0x10
c000bf98:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf9b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf9f:	68 00 00 00 40       	push   0x40000000
c000bfa4:	6a 00                	push   0x0
c000bfa6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfae:	e8 50 70 01 00       	call   c0023003 <__adddf3>
c000bfb3:	59                   	pop    ecx
c000bfb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfb8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bfbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfbf:	e8 1f 7d 01 00       	call   c0023ce3 <__floatsidf>
c000bfc4:	83 c4 10             	add    esp,0x10
c000bfc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfcb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfcf:	52                   	push   edx
c000bfd0:	50                   	push   eax
c000bfd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfd9:	e8 86 79 01 00       	call   c0023964 <__divdf3>
c000bfde:	83 c4 10             	add    esp,0x10
c000bfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfe9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfec:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfef:	89 04 24             	mov    DWORD PTR [esp],eax
c000bff2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bff6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bff9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bffc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c000:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c004:	52                   	push   edx
c000c005:	50                   	push   eax
c000c006:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c00a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c00e:	e8 3c 7f 01 00       	call   c0023f4f <__ltdf2>
c000c013:	83 c4 10             	add    esp,0x10
c000c016:	85 c0                	test   eax,eax
c000c018:	79 1d                	jns    c000c037 <sinc_hex_vari_process+0x11c>
c000c01a:	68 00 00 f0 3f       	push   0x3ff00000
c000c01f:	6a 00                	push   0x0
c000c021:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c025:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c029:	e8 21 7f 01 00       	call   c0023f4f <__ltdf2>
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	85 c0                	test   eax,eax
c000c033:	78 2c                	js     c000c061 <sinc_hex_vari_process+0x146>
c000c035:	eb 4a                	jmp    c000c081 <sinc_hex_vari_process+0x166>
c000c037:	68 00 00 f0 3f       	push   0x3ff00000
c000c03c:	6a 00                	push   0x0
c000c03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c046:	e8 04 7f 01 00       	call   c0023f4f <__ltdf2>
c000c04b:	83 c4 10             	add    esp,0x10
c000c04e:	85 c0                	test   eax,eax
c000c050:	79 2f                	jns    c000c081 <sinc_hex_vari_process+0x166>
c000c052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c056:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c05a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c05d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c061:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c065:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c069:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c06d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c071:	e8 ee 78 01 00       	call   c0023964 <__divdf3>
c000c076:	83 c4 10             	add    esp,0x10
c000c079:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c07d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c081:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c084:	50                   	push   eax
c000c085:	50                   	push   eax
c000c086:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08e:	e8 6d 80 01 00       	call   c0024100 <lrint>
c000c093:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c096:	40                   	inc    eax
c000c097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c09b:	0f af c7             	imul   eax,edi
c000c09e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0a9:	58                   	pop    eax
c000c0aa:	5a                   	pop    edx
c000c0ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b3:	e8 77 f6 ff ff       	call   c000b72f <fmod_one>
c000c0b8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c0bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0bf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0c3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0da:	e8 75 75 01 00       	call   c0023654 <__subdf3>
c000c0df:	83 c4 18             	add    esp,0x18
c000c0e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0ea:	52                   	push   edx
c000c0eb:	50                   	push   eax
c000c0ec:	e8 0f 80 01 00       	call   c0024100 <lrint>
c000c0f1:	0f af f8             	imul   edi,eax
c000c0f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0f8:	01 f8                	add    eax,edi
c000c0fa:	99                   	cdq    
c000c0fb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0fe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c109:	68 00 00 f0 3f       	push   0x3ff00000
c000c10e:	6a 00                	push   0x0
c000c110:	e8 4f 78 01 00       	call   c0023964 <__divdf3>
c000c115:	83 c4 10             	add    esp,0x10
c000c118:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c11c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c120:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c125:	68 23 42 92 0c       	push   0xc924223
c000c12a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c12e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c132:	e8 cc 6e 01 00       	call   c0023003 <__adddf3>
c000c137:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c13b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c13f:	83 c4 20             	add    esp,0x20
c000c142:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c14a:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c152:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c155:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c158:	7d 4e                	jge    c000c1a8 <sinc_hex_vari_process+0x28d>
c000c15a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c15d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c160:	01 c8                	add    eax,ecx
c000c162:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c165:	99                   	cdq    
c000c166:	f7 f9                	idiv   ecx
c000c168:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c16c:	7d 0c                	jge    c000c17a <sinc_hex_vari_process+0x25f>
c000c16e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c171:	85 ff                	test   edi,edi
c000c173:	79 69                	jns    c000c1de <sinc_hex_vari_process+0x2c3>
c000c175:	e9 e4 00 00 00       	jmp    c000c25e <sinc_hex_vari_process+0x343>
c000c17a:	50                   	push   eax
c000c17b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c17f:	56                   	push   esi
c000c180:	53                   	push   ebx
c000c181:	e8 3f f6 ff ff       	call   c000b7c5 <prepare_data>
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c18c:	85 c0                	test   eax,eax
c000c18e:	0f 85 5d 03 00 00    	jne    c000c4f1 <sinc_hex_vari_process+0x5d6>
c000c194:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c197:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19a:	01 c8                	add    eax,ecx
c000c19c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c19f:	99                   	cdq    
c000c1a0:	f7 f9                	idiv   ecx
c000c1a2:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c1a6:	7c c6                	jl     c000c16e <sinc_hex_vari_process+0x253>
c000c1a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c1ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c1af:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1b2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1bd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1c0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1c3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1c6:	99                   	cdq    
c000c1c7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1ca:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1cd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1d0:	99                   	cdq    
c000c1d1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1d4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1d7:	31 c0                	xor    eax,eax
c000c1d9:	e9 13 03 00 00       	jmp    c000c4f1 <sinc_hex_vari_process+0x5d6>
c000c1de:	83 ec 0c             	sub    esp,0xc
c000c1e1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1e4:	e8 fa 7a 01 00       	call   c0023ce3 <__floatsidf>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1f8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c200:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c204:	e8 fa 6d 01 00       	call   c0023003 <__adddf3>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c210:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c214:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c218:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c21c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c224:	e8 da 6d 01 00       	call   c0023003 <__adddf3>
c000c229:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c234:	e8 aa 7a 01 00       	call   c0023ce3 <__floatsidf>
c000c239:	83 c4 10             	add    esp,0x10
c000c23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c244:	52                   	push   edx
c000c245:	50                   	push   eax
c000c246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c24a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c24e:	e8 fa 7c 01 00       	call   c0023f4d <__gedf2>
c000c253:	83 c4 10             	add    esp,0x10
c000c256:	85 c0                	test   eax,eax
c000c258:	0f 89 4a ff ff ff    	jns    c000c1a8 <sinc_hex_vari_process+0x28d>
c000c25e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c262:	0f 8e ef 00 00 00    	jle    c000c357 <sinc_hex_vari_process+0x43c>
c000c268:	83 ec 10             	sub    esp,0x10
c000c26b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c26e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c271:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c274:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c277:	e8 d8 73 01 00       	call   c0023654 <__subdf3>
c000c27c:	83 c4 18             	add    esp,0x18
c000c27f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c283:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c287:	52                   	push   edx
c000c288:	50                   	push   eax
c000c289:	e8 52 7e 01 00       	call   c00240e0 <fabs>
c000c28e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c292:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c296:	83 c4 10             	add    esp,0x10
c000c299:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c29e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ab:	e8 81 7c 01 00       	call   c0023f31 <__gtdf2>
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	85 c0                	test   eax,eax
c000c2b5:	0f 8e 9c 00 00 00    	jle    c000c357 <sinc_hex_vari_process+0x43c>
c000c2bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2be:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2c9:	52                   	push   edx
c000c2ca:	50                   	push   eax
c000c2cb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ce:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2d1:	e8 7e 73 01 00       	call   c0023654 <__subdf3>
c000c2d6:	59                   	pop    ecx
c000c2d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2df:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2e2:	e8 fc 79 01 00       	call   c0023ce3 <__floatsidf>
c000c2e7:	83 c4 10             	add    esp,0x10
c000c2ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2f2:	52                   	push   edx
c000c2f3:	50                   	push   eax
c000c2f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2fc:	e8 7f 73 01 00       	call   c0023680 <__muldf3>
c000c301:	5f                   	pop    edi
c000c302:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c306:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c30a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c30d:	e8 d1 79 01 00       	call   c0023ce3 <__floatsidf>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	52                   	push   edx
c000c31e:	50                   	push   eax
c000c31f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c327:	e8 38 76 01 00       	call   c0023964 <__divdf3>
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c333:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c337:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c33b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c33f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c343:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c347:	e8 b7 6c 01 00       	call   c0023003 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	83 ec 0c             	sub    esp,0xc
c000c35a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c35d:	e8 81 79 01 00       	call   c0023ce3 <__floatsidf>
c000c362:	83 c4 10             	add    esp,0x10
c000c365:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c369:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c371:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c379:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37d:	e8 cd 7b 01 00       	call   c0023f4f <__ltdf2>
c000c382:	83 c4 10             	add    esp,0x10
c000c385:	85 c0                	test   eax,eax
c000c387:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c38b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c38f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c393:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c397:	78 10                	js     c000c3a9 <sinc_hex_vari_process+0x48e>
c000c399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c39d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c3a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c3a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3b9:	e8 c2 72 01 00       	call   c0023680 <__muldf3>
c000c3be:	59                   	pop    ecx
c000c3bf:	5f                   	pop    edi
c000c3c0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3d0:	e8 33 f3 ff ff       	call   c000b708 <double_to_fp>
c000c3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3d9:	89 c7                	mov    edi,eax
c000c3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e7:	e8 94 72 01 00       	call   c0023680 <__muldf3>
c000c3ec:	83 c4 18             	add    esp,0x18
c000c3ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3f7:	52                   	push   edx
c000c3f8:	50                   	push   eax
c000c3f9:	e8 0a f3 ff ff       	call   c000b708 <double_to_fp>
c000c3fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c401:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c405:	83 c4 0c             	add    esp,0xc
c000c408:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c40b:	8d 04 90             	lea    eax,[eax+edx*4]
c000c40e:	50                   	push   eax
c000c40f:	50                   	push   eax
c000c410:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c413:	e8 cb 78 01 00       	call   c0023ce3 <__floatsidf>
c000c418:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c41c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c420:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c424:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c430:	e8 2f 75 01 00       	call   c0023964 <__divdf3>
c000c435:	83 c4 18             	add    esp,0x18
c000c438:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c43c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c440:	52                   	push   edx
c000c441:	89 fa                	mov    edx,edi
c000c443:	50                   	push   eax
c000c444:	89 d8                	mov    eax,ebx
c000c446:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c44a:	e8 26 df ff ff       	call   c000a375 <calc_output_hex>
c000c44f:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c45f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c463:	e8 fc 74 01 00       	call   c0023964 <__divdf3>
c000c468:	83 c4 10             	add    esp,0x10
c000c46b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c46f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c483:	e8 7b 6b 01 00       	call   c0023003 <__adddf3>
c000c488:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c48c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c490:	83 c4 18             	add    esp,0x18
c000c493:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c497:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c49b:	e8 8f f2 ff ff       	call   c000b72f <fmod_one>
c000c4a0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c4a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c4ab:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c4ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c2:	e8 8d 71 01 00       	call   c0023654 <__subdf3>
c000c4c7:	83 c4 18             	add    esp,0x18
c000c4ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4d2:	52                   	push   edx
c000c4d3:	50                   	push   eax
c000c4d4:	e8 27 7c 01 00       	call   c0024100 <lrint>
c000c4d9:	0f af f8             	imul   edi,eax
c000c4dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4e0:	83 c4 10             	add    esp,0x10
c000c4e3:	01 f8                	add    eax,edi
c000c4e5:	99                   	cdq    
c000c4e6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4e9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4ec:	e9 61 fc ff ff       	jmp    c000c152 <sinc_hex_vari_process+0x237>
c000c4f1:	83 c4 4c             	add    esp,0x4c
c000c4f4:	5b                   	pop    ebx
c000c4f5:	5e                   	pop    esi
c000c4f6:	5f                   	pop    edi
c000c4f7:	5d                   	pop    ebp
c000c4f8:	c3                   	ret    

c000c4f9 <sinc_quad_vari_process>:
c000c4f9:	55                   	push   ebp
c000c4fa:	b8 05 00 00 00       	mov    eax,0x5
c000c4ff:	57                   	push   edi
c000c500:	56                   	push   esi
c000c501:	53                   	push   ebx
c000c502:	83 ec 4c             	sub    esp,0x4c
c000c505:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c509:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c50d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c510:	85 db                	test   ebx,ebx
c000c512:	0f 84 b7 05 00 00    	je     c000cacf <sinc_quad_vari_process+0x5d6>
c000c518:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c51b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c51e:	0f af d0             	imul   edx,eax
c000c521:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c524:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c528:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c52f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c532:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c539:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c53c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c543:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c547:	57                   	push   edi
c000c548:	57                   	push   edi
c000c549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c54d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c551:	e8 5a d1 ff ff       	call   c00096b0 <is_bad_src_ratio>
c000c556:	83 c4 10             	add    esp,0x10
c000c559:	89 c2                	mov    edx,eax
c000c55b:	b8 16 00 00 00       	mov    eax,0x16
c000c560:	85 d2                	test   edx,edx
c000c562:	0f 85 67 05 00 00    	jne    c000cacf <sinc_quad_vari_process+0x5d6>
c000c568:	83 ec 0c             	sub    esp,0xc
c000c56b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c56e:	e8 70 77 01 00       	call   c0023ce3 <__floatsidf>
c000c573:	83 c4 10             	add    esp,0x10
c000c576:	89 04 24             	mov    DWORD PTR [esp],eax
c000c579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c57d:	68 00 00 00 40       	push   0x40000000
c000c582:	6a 00                	push   0x0
c000c584:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c588:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c58c:	e8 72 6a 01 00       	call   c0023003 <__adddf3>
c000c591:	59                   	pop    ecx
c000c592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c596:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c59a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c59d:	e8 41 77 01 00       	call   c0023ce3 <__floatsidf>
c000c5a2:	83 c4 10             	add    esp,0x10
c000c5a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5a9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ad:	52                   	push   edx
c000c5ae:	50                   	push   eax
c000c5af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5b7:	e8 a8 73 01 00       	call   c0023964 <__divdf3>
c000c5bc:	83 c4 10             	add    esp,0x10
c000c5bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5ca:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5cd:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5d7:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e2:	52                   	push   edx
c000c5e3:	50                   	push   eax
c000c5e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5ec:	e8 5e 79 01 00       	call   c0023f4f <__ltdf2>
c000c5f1:	83 c4 10             	add    esp,0x10
c000c5f4:	85 c0                	test   eax,eax
c000c5f6:	79 1d                	jns    c000c615 <sinc_quad_vari_process+0x11c>
c000c5f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c5fd:	6a 00                	push   0x0
c000c5ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c603:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c607:	e8 43 79 01 00       	call   c0023f4f <__ltdf2>
c000c60c:	83 c4 10             	add    esp,0x10
c000c60f:	85 c0                	test   eax,eax
c000c611:	78 2c                	js     c000c63f <sinc_quad_vari_process+0x146>
c000c613:	eb 4a                	jmp    c000c65f <sinc_quad_vari_process+0x166>
c000c615:	68 00 00 f0 3f       	push   0x3ff00000
c000c61a:	6a 00                	push   0x0
c000c61c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c624:	e8 26 79 01 00       	call   c0023f4f <__ltdf2>
c000c629:	83 c4 10             	add    esp,0x10
c000c62c:	85 c0                	test   eax,eax
c000c62e:	79 2f                	jns    c000c65f <sinc_quad_vari_process+0x166>
c000c630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c634:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c638:	89 04 24             	mov    DWORD PTR [esp],eax
c000c63b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c63f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c643:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c647:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64f:	e8 10 73 01 00       	call   c0023964 <__divdf3>
c000c654:	83 c4 10             	add    esp,0x10
c000c657:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c65b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c65f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c662:	50                   	push   eax
c000c663:	50                   	push   eax
c000c664:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66c:	e8 8f 7a 01 00       	call   c0024100 <lrint>
c000c671:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c674:	40                   	inc    eax
c000c675:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c679:	0f af c7             	imul   eax,edi
c000c67c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c687:	58                   	pop    eax
c000c688:	5a                   	pop    edx
c000c689:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c68d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c691:	e8 99 f0 ff ff       	call   c000b72f <fmod_one>
c000c696:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c699:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c69d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c6a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c6a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6b8:	e8 97 6f 01 00       	call   c0023654 <__subdf3>
c000c6bd:	83 c4 18             	add    esp,0x18
c000c6c0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6c8:	52                   	push   edx
c000c6c9:	50                   	push   eax
c000c6ca:	e8 31 7a 01 00       	call   c0024100 <lrint>
c000c6cf:	0f af f8             	imul   edi,eax
c000c6d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6d6:	01 f8                	add    eax,edi
c000c6d8:	99                   	cdq    
c000c6d9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6e7:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ec:	6a 00                	push   0x0
c000c6ee:	e8 71 72 01 00       	call   c0023964 <__divdf3>
c000c6f3:	83 c4 10             	add    esp,0x10
c000c6f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6fe:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c703:	68 23 42 92 0c       	push   0xc924223
c000c708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c70c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c710:	e8 ee 68 01 00       	call   c0023003 <__adddf3>
c000c715:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c719:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c71d:	83 c4 20             	add    esp,0x20
c000c720:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c728:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c730:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c733:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c736:	7d 4e                	jge    c000c786 <sinc_quad_vari_process+0x28d>
c000c738:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c73b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c73e:	01 c8                	add    eax,ecx
c000c740:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c743:	99                   	cdq    
c000c744:	f7 f9                	idiv   ecx
c000c746:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c74a:	7d 0c                	jge    c000c758 <sinc_quad_vari_process+0x25f>
c000c74c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c74f:	85 ff                	test   edi,edi
c000c751:	79 69                	jns    c000c7bc <sinc_quad_vari_process+0x2c3>
c000c753:	e9 e4 00 00 00       	jmp    c000c83c <sinc_quad_vari_process+0x343>
c000c758:	50                   	push   eax
c000c759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c75d:	56                   	push   esi
c000c75e:	53                   	push   ebx
c000c75f:	e8 61 f0 ff ff       	call   c000b7c5 <prepare_data>
c000c764:	83 c4 10             	add    esp,0x10
c000c767:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c76a:	85 c0                	test   eax,eax
c000c76c:	0f 85 5d 03 00 00    	jne    c000cacf <sinc_quad_vari_process+0x5d6>
c000c772:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c775:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c778:	01 c8                	add    eax,ecx
c000c77a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c77d:	99                   	cdq    
c000c77e:	f7 f9                	idiv   ecx
c000c780:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c784:	7c c6                	jl     c000c74c <sinc_quad_vari_process+0x253>
c000c786:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c789:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c78d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c790:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c79b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c79e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c7a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c7a4:	99                   	cdq    
c000c7a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7a8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c7ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c7ae:	99                   	cdq    
c000c7af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7b2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c7b5:	31 c0                	xor    eax,eax
c000c7b7:	e9 13 03 00 00       	jmp    c000cacf <sinc_quad_vari_process+0x5d6>
c000c7bc:	83 ec 0c             	sub    esp,0xc
c000c7bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7c2:	e8 1c 75 01 00       	call   c0023ce3 <__floatsidf>
c000c7c7:	83 c4 10             	add    esp,0x10
c000c7ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7d6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e2:	e8 1c 68 01 00       	call   c0023003 <__adddf3>
c000c7e7:	83 c4 10             	add    esp,0x10
c000c7ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c802:	e8 fc 67 01 00       	call   c0023003 <__adddf3>
c000c807:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c80a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c80e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c812:	e8 cc 74 01 00       	call   c0023ce3 <__floatsidf>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c822:	52                   	push   edx
c000c823:	50                   	push   eax
c000c824:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c828:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c82c:	e8 1c 77 01 00       	call   c0023f4d <__gedf2>
c000c831:	83 c4 10             	add    esp,0x10
c000c834:	85 c0                	test   eax,eax
c000c836:	0f 89 4a ff ff ff    	jns    c000c786 <sinc_quad_vari_process+0x28d>
c000c83c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c840:	0f 8e ef 00 00 00    	jle    c000c935 <sinc_quad_vari_process+0x43c>
c000c846:	83 ec 10             	sub    esp,0x10
c000c849:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c84c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c84f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c852:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c855:	e8 fa 6d 01 00       	call   c0023654 <__subdf3>
c000c85a:	83 c4 18             	add    esp,0x18
c000c85d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c861:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c865:	52                   	push   edx
c000c866:	50                   	push   eax
c000c867:	e8 74 78 01 00       	call   c00240e0 <fabs>
c000c86c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c870:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c874:	83 c4 10             	add    esp,0x10
c000c877:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c87c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c881:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c885:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c889:	e8 a3 76 01 00       	call   c0023f31 <__gtdf2>
c000c88e:	83 c4 10             	add    esp,0x10
c000c891:	85 c0                	test   eax,eax
c000c893:	0f 8e 9c 00 00 00    	jle    c000c935 <sinc_quad_vari_process+0x43c>
c000c899:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c89c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	52                   	push   edx
c000c8a8:	50                   	push   eax
c000c8a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c8ac:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c8af:	e8 a0 6d 01 00       	call   c0023654 <__subdf3>
c000c8b4:	59                   	pop    ecx
c000c8b5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8b9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c8c0:	e8 1e 74 01 00       	call   c0023ce3 <__floatsidf>
c000c8c5:	83 c4 10             	add    esp,0x10
c000c8c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d0:	52                   	push   edx
c000c8d1:	50                   	push   eax
c000c8d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8da:	e8 a1 6d 01 00       	call   c0023680 <__muldf3>
c000c8df:	5f                   	pop    edi
c000c8e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8e4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8e8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8eb:	e8 f3 73 01 00       	call   c0023ce3 <__floatsidf>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8fb:	52                   	push   edx
c000c8fc:	50                   	push   eax
c000c8fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c901:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c905:	e8 5a 70 01 00       	call   c0023964 <__divdf3>
c000c90a:	83 c4 10             	add    esp,0x10
c000c90d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c911:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c915:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c919:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c91d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c921:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c925:	e8 d9 66 01 00       	call   c0023003 <__adddf3>
c000c92a:	83 c4 10             	add    esp,0x10
c000c92d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c935:	83 ec 0c             	sub    esp,0xc
c000c938:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c93b:	e8 a3 73 01 00       	call   c0023ce3 <__floatsidf>
c000c940:	83 c4 10             	add    esp,0x10
c000c943:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c947:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95b:	e8 ef 75 01 00       	call   c0023f4f <__ltdf2>
c000c960:	83 c4 10             	add    esp,0x10
c000c963:	85 c0                	test   eax,eax
c000c965:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c969:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c96d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c971:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c975:	78 10                	js     c000c987 <sinc_quad_vari_process+0x48e>
c000c977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c97b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c97f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c983:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	e8 e4 6c 01 00       	call   c0023680 <__muldf3>
c000c99c:	59                   	pop    ecx
c000c99d:	5f                   	pop    edi
c000c99e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	e8 55 ed ff ff       	call   c000b708 <double_to_fp>
c000c9b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b7:	89 c7                	mov    edi,eax
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c5:	e8 b6 6c 01 00       	call   c0023680 <__muldf3>
c000c9ca:	83 c4 18             	add    esp,0x18
c000c9cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9d5:	52                   	push   edx
c000c9d6:	50                   	push   eax
c000c9d7:	e8 2c ed ff ff       	call   c000b708 <double_to_fp>
c000c9dc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9df:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9e3:	83 c4 0c             	add    esp,0xc
c000c9e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9e9:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9ec:	50                   	push   eax
c000c9ed:	50                   	push   eax
c000c9ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9f1:	e8 ed 72 01 00       	call   c0023ce3 <__floatsidf>
c000c9f6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9fa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c9fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca0e:	e8 51 6f 01 00       	call   c0023964 <__divdf3>
c000ca13:	83 c4 18             	add    esp,0x18
c000ca16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca1a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca1e:	52                   	push   edx
c000ca1f:	89 fa                	mov    edx,edi
c000ca21:	50                   	push   eax
c000ca22:	89 d8                	mov    eax,ebx
c000ca24:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca28:	e8 62 d3 ff ff       	call   c0009d8f <calc_output_quad>
c000ca2d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca41:	e8 1e 6f 01 00       	call   c0023964 <__divdf3>
c000ca46:	83 c4 10             	add    esp,0x10
c000ca49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca61:	e8 9d 65 01 00       	call   c0023003 <__adddf3>
c000ca66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca6a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca6e:	83 c4 18             	add    esp,0x18
c000ca71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca75:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca79:	e8 b1 ec ff ff       	call   c000b72f <fmod_one>
c000ca7e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca85:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca89:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca8c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa0:	e8 af 6b 01 00       	call   c0023654 <__subdf3>
c000caa5:	83 c4 18             	add    esp,0x18
c000caa8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab0:	52                   	push   edx
c000cab1:	50                   	push   eax
c000cab2:	e8 49 76 01 00       	call   c0024100 <lrint>
c000cab7:	0f af f8             	imul   edi,eax
c000caba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cabe:	83 c4 10             	add    esp,0x10
c000cac1:	01 f8                	add    eax,edi
c000cac3:	99                   	cdq    
c000cac4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cac7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000caca:	e9 61 fc ff ff       	jmp    c000c730 <sinc_quad_vari_process+0x237>
c000cacf:	83 c4 4c             	add    esp,0x4c
c000cad2:	5b                   	pop    ebx
c000cad3:	5e                   	pop    esi
c000cad4:	5f                   	pop    edi
c000cad5:	5d                   	pop    ebp
c000cad6:	c3                   	ret    

c000cad7 <sinc_stereo_vari_process>:
c000cad7:	55                   	push   ebp
c000cad8:	b8 05 00 00 00       	mov    eax,0x5
c000cadd:	57                   	push   edi
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	83 ec 4c             	sub    esp,0x4c
c000cae3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cae7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000caeb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000caee:	85 db                	test   ebx,ebx
c000caf0:	0f 84 b7 05 00 00    	je     c000d0ad <sinc_stereo_vari_process+0x5d6>
c000caf6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000caf9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cafc:	0f af d0             	imul   edx,eax
c000caff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cb02:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000cb06:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cb0d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cb10:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cb17:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb25:	57                   	push   edi
c000cb26:	57                   	push   edi
c000cb27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb2f:	e8 7c cb ff ff       	call   c00096b0 <is_bad_src_ratio>
c000cb34:	83 c4 10             	add    esp,0x10
c000cb37:	89 c2                	mov    edx,eax
c000cb39:	b8 16 00 00 00       	mov    eax,0x16
c000cb3e:	85 d2                	test   edx,edx
c000cb40:	0f 85 67 05 00 00    	jne    c000d0ad <sinc_stereo_vari_process+0x5d6>
c000cb46:	83 ec 0c             	sub    esp,0xc
c000cb49:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb4c:	e8 92 71 01 00       	call   c0023ce3 <__floatsidf>
c000cb51:	83 c4 10             	add    esp,0x10
c000cb54:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb5b:	68 00 00 00 40       	push   0x40000000
c000cb60:	6a 00                	push   0x0
c000cb62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb6a:	e8 94 64 01 00       	call   c0023003 <__adddf3>
c000cb6f:	59                   	pop    ecx
c000cb70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb74:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb78:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb7b:	e8 63 71 01 00       	call   c0023ce3 <__floatsidf>
c000cb80:	83 c4 10             	add    esp,0x10
c000cb83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb8b:	52                   	push   edx
c000cb8c:	50                   	push   eax
c000cb8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb95:	e8 ca 6d 01 00       	call   c0023964 <__divdf3>
c000cb9a:	83 c4 10             	add    esp,0x10
c000cb9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cba1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cba5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cba8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbab:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cbb5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cbb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbc0:	52                   	push   edx
c000cbc1:	50                   	push   eax
c000cbc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbca:	e8 80 73 01 00       	call   c0023f4f <__ltdf2>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	85 c0                	test   eax,eax
c000cbd4:	79 1d                	jns    c000cbf3 <sinc_stereo_vari_process+0x11c>
c000cbd6:	68 00 00 f0 3f       	push   0x3ff00000
c000cbdb:	6a 00                	push   0x0
c000cbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe5:	e8 65 73 01 00       	call   c0023f4f <__ltdf2>
c000cbea:	83 c4 10             	add    esp,0x10
c000cbed:	85 c0                	test   eax,eax
c000cbef:	78 2c                	js     c000cc1d <sinc_stereo_vari_process+0x146>
c000cbf1:	eb 4a                	jmp    c000cc3d <sinc_stereo_vari_process+0x166>
c000cbf3:	68 00 00 f0 3f       	push   0x3ff00000
c000cbf8:	6a 00                	push   0x0
c000cbfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc02:	e8 48 73 01 00       	call   c0023f4f <__ltdf2>
c000cc07:	83 c4 10             	add    esp,0x10
c000cc0a:	85 c0                	test   eax,eax
c000cc0c:	79 2f                	jns    c000cc3d <sinc_stereo_vari_process+0x166>
c000cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cc16:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc1d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc21:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc2d:	e8 32 6d 01 00       	call   c0023964 <__divdf3>
c000cc32:	83 c4 10             	add    esp,0x10
c000cc35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc3d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc40:	50                   	push   eax
c000cc41:	50                   	push   eax
c000cc42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc46:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4a:	e8 b1 74 01 00       	call   c0024100 <lrint>
c000cc4f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc52:	40                   	inc    eax
c000cc53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc57:	0f af c7             	imul   eax,edi
c000cc5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc65:	58                   	pop    eax
c000cc66:	5a                   	pop    edx
c000cc67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc6f:	e8 bb ea ff ff       	call   c000b72f <fmod_one>
c000cc74:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc96:	e8 b9 69 01 00       	call   c0023654 <__subdf3>
c000cc9b:	83 c4 18             	add    esp,0x18
c000cc9e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cca6:	52                   	push   edx
c000cca7:	50                   	push   eax
c000cca8:	e8 53 74 01 00       	call   c0024100 <lrint>
c000ccad:	0f af f8             	imul   edi,eax
c000ccb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ccb4:	01 f8                	add    eax,edi
c000ccb6:	99                   	cdq    
c000ccb7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ccba:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc5:	68 00 00 f0 3f       	push   0x3ff00000
c000ccca:	6a 00                	push   0x0
c000cccc:	e8 93 6c 01 00       	call   c0023964 <__divdf3>
c000ccd1:	83 c4 10             	add    esp,0x10
c000ccd4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccd8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccdc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cce1:	68 23 42 92 0c       	push   0xc924223
c000cce6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccee:	e8 10 63 01 00       	call   c0023003 <__adddf3>
c000ccf3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccf7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ccfb:	83 c4 20             	add    esp,0x20
c000ccfe:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cd06:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cd0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cd11:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cd14:	7d 4e                	jge    c000cd64 <sinc_stereo_vari_process+0x28d>
c000cd16:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd1c:	01 c8                	add    eax,ecx
c000cd1e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd21:	99                   	cdq    
c000cd22:	f7 f9                	idiv   ecx
c000cd24:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd28:	7d 0c                	jge    c000cd36 <sinc_stereo_vari_process+0x25f>
c000cd2a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd2d:	85 ff                	test   edi,edi
c000cd2f:	79 69                	jns    c000cd9a <sinc_stereo_vari_process+0x2c3>
c000cd31:	e9 e4 00 00 00       	jmp    c000ce1a <sinc_stereo_vari_process+0x343>
c000cd36:	50                   	push   eax
c000cd37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd3b:	56                   	push   esi
c000cd3c:	53                   	push   ebx
c000cd3d:	e8 83 ea ff ff       	call   c000b7c5 <prepare_data>
c000cd42:	83 c4 10             	add    esp,0x10
c000cd45:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd48:	85 c0                	test   eax,eax
c000cd4a:	0f 85 5d 03 00 00    	jne    c000d0ad <sinc_stereo_vari_process+0x5d6>
c000cd50:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd56:	01 c8                	add    eax,ecx
c000cd58:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd5b:	99                   	cdq    
c000cd5c:	f7 f9                	idiv   ecx
c000cd5e:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd62:	7c c6                	jl     c000cd2a <sinc_stereo_vari_process+0x253>
c000cd64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd6e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd79:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd7c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd7f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd82:	99                   	cdq    
c000cd83:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd86:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd89:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd8c:	99                   	cdq    
c000cd8d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd90:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd93:	31 c0                	xor    eax,eax
c000cd95:	e9 13 03 00 00       	jmp    c000d0ad <sinc_stereo_vari_process+0x5d6>
c000cd9a:	83 ec 0c             	sub    esp,0xc
c000cd9d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cda0:	e8 3e 6f 01 00       	call   c0023ce3 <__floatsidf>
c000cda5:	83 c4 10             	add    esp,0x10
c000cda8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc0:	e8 3e 62 01 00       	call   c0023003 <__adddf3>
c000cdc5:	83 c4 10             	add    esp,0x10
c000cdc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdcc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cddc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde0:	e8 1e 62 01 00       	call   c0023003 <__adddf3>
c000cde5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cde8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf0:	e8 ee 6e 01 00       	call   c0023ce3 <__floatsidf>
c000cdf5:	83 c4 10             	add    esp,0x10
c000cdf8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdfc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce00:	52                   	push   edx
c000ce01:	50                   	push   eax
c000ce02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce0a:	e8 3e 71 01 00       	call   c0023f4d <__gedf2>
c000ce0f:	83 c4 10             	add    esp,0x10
c000ce12:	85 c0                	test   eax,eax
c000ce14:	0f 89 4a ff ff ff    	jns    c000cd64 <sinc_stereo_vari_process+0x28d>
c000ce1a:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000ce1e:	0f 8e ef 00 00 00    	jle    c000cf13 <sinc_stereo_vari_process+0x43c>
c000ce24:	83 ec 10             	sub    esp,0x10
c000ce27:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce2a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce30:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce33:	e8 1c 68 01 00       	call   c0023654 <__subdf3>
c000ce38:	83 c4 18             	add    esp,0x18
c000ce3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce3f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce43:	52                   	push   edx
c000ce44:	50                   	push   eax
c000ce45:	e8 96 72 01 00       	call   c00240e0 <fabs>
c000ce4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce52:	83 c4 10             	add    esp,0x10
c000ce55:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce5a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce67:	e8 c5 70 01 00       	call   c0023f31 <__gtdf2>
c000ce6c:	83 c4 10             	add    esp,0x10
c000ce6f:	85 c0                	test   eax,eax
c000ce71:	0f 8e 9c 00 00 00    	jle    c000cf13 <sinc_stereo_vari_process+0x43c>
c000ce77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce7a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce85:	52                   	push   edx
c000ce86:	50                   	push   eax
c000ce87:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce8a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce8d:	e8 c2 67 01 00       	call   c0023654 <__subdf3>
c000ce92:	59                   	pop    ecx
c000ce93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce97:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce9b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce9e:	e8 40 6e 01 00       	call   c0023ce3 <__floatsidf>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceae:	52                   	push   edx
c000ceaf:	50                   	push   eax
c000ceb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceb8:	e8 c3 67 01 00       	call   c0023680 <__muldf3>
c000cebd:	5f                   	pop    edi
c000cebe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cec2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cec6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cec9:	e8 15 6e 01 00       	call   c0023ce3 <__floatsidf>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ced5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ced9:	52                   	push   edx
c000ceda:	50                   	push   eax
c000cedb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee3:	e8 7c 6a 01 00       	call   c0023964 <__divdf3>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ceef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cef3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cef7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cefb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf03:	e8 fb 60 01 00       	call   c0023003 <__adddf3>
c000cf08:	83 c4 10             	add    esp,0x10
c000cf0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf13:	83 ec 0c             	sub    esp,0xc
c000cf16:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf19:	e8 c5 6d 01 00       	call   c0023ce3 <__floatsidf>
c000cf1e:	83 c4 10             	add    esp,0x10
c000cf21:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf29:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf2d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf39:	e8 11 70 01 00       	call   c0023f4f <__ltdf2>
c000cf3e:	83 c4 10             	add    esp,0x10
c000cf41:	85 c0                	test   eax,eax
c000cf43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf53:	78 10                	js     c000cf65 <sinc_stereo_vari_process+0x48e>
c000cf55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf75:	e8 06 67 01 00       	call   c0023680 <__muldf3>
c000cf7a:	59                   	pop    ecx
c000cf7b:	5f                   	pop    edi
c000cf7c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf8c:	e8 77 e7 ff ff       	call   c000b708 <double_to_fp>
c000cf91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf95:	89 c7                	mov    edi,eax
c000cf97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa3:	e8 d8 66 01 00       	call   c0023680 <__muldf3>
c000cfa8:	83 c4 18             	add    esp,0x18
c000cfab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfb3:	52                   	push   edx
c000cfb4:	50                   	push   eax
c000cfb5:	e8 4e e7 ff ff       	call   c000b708 <double_to_fp>
c000cfba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cfbd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfc1:	83 c4 0c             	add    esp,0xc
c000cfc4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfc7:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfca:	50                   	push   eax
c000cfcb:	50                   	push   eax
c000cfcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfcf:	e8 0f 6d 01 00       	call   c0023ce3 <__floatsidf>
c000cfd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfec:	e8 73 69 01 00       	call   c0023964 <__divdf3>
c000cff1:	83 c4 18             	add    esp,0x18
c000cff4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cff8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cffc:	52                   	push   edx
c000cffd:	89 fa                	mov    edx,edi
c000cfff:	50                   	push   eax
c000d000:	89 d8                	mov    eax,ebx
c000d002:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d006:	e8 a6 c9 ff ff       	call   c00099b1 <calc_output_stereo>
c000d00b:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d017:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d01f:	e8 40 69 01 00       	call   c0023964 <__divdf3>
c000d024:	83 c4 10             	add    esp,0x10
c000d027:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d02b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d033:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d037:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d03b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d03f:	e8 bf 5f 01 00       	call   c0023003 <__adddf3>
c000d044:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d048:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d04c:	83 c4 18             	add    esp,0x18
c000d04f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d053:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d057:	e8 d3 e6 ff ff       	call   c000b72f <fmod_one>
c000d05c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d05f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d063:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d067:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d06a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d06e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d072:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d076:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07e:	e8 d1 65 01 00       	call   c0023654 <__subdf3>
c000d083:	83 c4 18             	add    esp,0x18
c000d086:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d08a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d08e:	52                   	push   edx
c000d08f:	50                   	push   eax
c000d090:	e8 6b 70 01 00       	call   c0024100 <lrint>
c000d095:	0f af f8             	imul   edi,eax
c000d098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	01 f8                	add    eax,edi
c000d0a1:	99                   	cdq    
c000d0a2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0a5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0a8:	e9 61 fc ff ff       	jmp    c000cd0e <sinc_stereo_vari_process+0x237>
c000d0ad:	83 c4 4c             	add    esp,0x4c
c000d0b0:	5b                   	pop    ebx
c000d0b1:	5e                   	pop    esi
c000d0b2:	5f                   	pop    edi
c000d0b3:	5d                   	pop    ebp
c000d0b4:	c3                   	ret    

c000d0b5 <sinc_mono_vari_process>:
c000d0b5:	55                   	push   ebp
c000d0b6:	b8 05 00 00 00       	mov    eax,0x5
c000d0bb:	57                   	push   edi
c000d0bc:	56                   	push   esi
c000d0bd:	53                   	push   ebx
c000d0be:	83 ec 4c             	sub    esp,0x4c
c000d0c1:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0c5:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0c9:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0cc:	85 db                	test   ebx,ebx
c000d0ce:	0f 84 e8 05 00 00    	je     c000d6bc <sinc_mono_vari_process+0x607>
c000d0d4:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0d7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0da:	0f af d0             	imul   edx,eax
c000d0dd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0e0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0e4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0eb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0ee:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0f5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d103:	57                   	push   edi
c000d104:	57                   	push   edi
c000d105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d10d:	e8 9e c5 ff ff       	call   c00096b0 <is_bad_src_ratio>
c000d112:	83 c4 10             	add    esp,0x10
c000d115:	89 c2                	mov    edx,eax
c000d117:	b8 16 00 00 00       	mov    eax,0x16
c000d11c:	85 d2                	test   edx,edx
c000d11e:	0f 85 98 05 00 00    	jne    c000d6bc <sinc_mono_vari_process+0x607>
c000d124:	83 ec 0c             	sub    esp,0xc
c000d127:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d12a:	e8 b4 6b 01 00       	call   c0023ce3 <__floatsidf>
c000d12f:	83 c4 10             	add    esp,0x10
c000d132:	89 04 24             	mov    DWORD PTR [esp],eax
c000d135:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d139:	68 00 00 00 40       	push   0x40000000
c000d13e:	6a 00                	push   0x0
c000d140:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d144:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d148:	e8 b6 5e 01 00       	call   c0023003 <__adddf3>
c000d14d:	59                   	pop    ecx
c000d14e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d152:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d156:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d159:	e8 85 6b 01 00       	call   c0023ce3 <__floatsidf>
c000d15e:	83 c4 10             	add    esp,0x10
c000d161:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d165:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d169:	52                   	push   edx
c000d16a:	50                   	push   eax
c000d16b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d16f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d173:	e8 ec 67 01 00       	call   c0023964 <__divdf3>
c000d178:	83 c4 10             	add    esp,0x10
c000d17b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d17f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d183:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d186:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d189:	89 04 24             	mov    DWORD PTR [esp],eax
c000d18c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d193:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d196:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d19a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d19e:	52                   	push   edx
c000d19f:	50                   	push   eax
c000d1a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a8:	e8 a2 6d 01 00       	call   c0023f4f <__ltdf2>
c000d1ad:	83 c4 10             	add    esp,0x10
c000d1b0:	85 c0                	test   eax,eax
c000d1b2:	79 1d                	jns    c000d1d1 <sinc_mono_vari_process+0x11c>
c000d1b4:	68 00 00 f0 3f       	push   0x3ff00000
c000d1b9:	6a 00                	push   0x0
c000d1bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1c3:	e8 87 6d 01 00       	call   c0023f4f <__ltdf2>
c000d1c8:	83 c4 10             	add    esp,0x10
c000d1cb:	85 c0                	test   eax,eax
c000d1cd:	78 2c                	js     c000d1fb <sinc_mono_vari_process+0x146>
c000d1cf:	eb 4a                	jmp    c000d21b <sinc_mono_vari_process+0x166>
c000d1d1:	68 00 00 f0 3f       	push   0x3ff00000
c000d1d6:	6a 00                	push   0x0
c000d1d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e0:	e8 6a 6d 01 00       	call   c0023f4f <__ltdf2>
c000d1e5:	83 c4 10             	add    esp,0x10
c000d1e8:	85 c0                	test   eax,eax
c000d1ea:	79 2f                	jns    c000d21b <sinc_mono_vari_process+0x166>
c000d1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1fb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1ff:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d203:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d207:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d20b:	e8 54 67 01 00       	call   c0023964 <__divdf3>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d217:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d21b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d224:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d228:	e8 d3 6e 01 00       	call   c0024100 <lrint>
c000d22d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d230:	40                   	inc    eax
c000d231:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d235:	0f af c7             	imul   eax,edi
c000d238:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d23f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d243:	58                   	pop    eax
c000d244:	5a                   	pop    edx
c000d245:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d249:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24d:	e8 dd e4 ff ff       	call   c000b72f <fmod_one>
c000d252:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d255:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d259:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d25d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d260:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d26c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d270:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d274:	e8 db 63 01 00       	call   c0023654 <__subdf3>
c000d279:	83 c4 18             	add    esp,0x18
c000d27c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d280:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d284:	52                   	push   edx
c000d285:	50                   	push   eax
c000d286:	e8 75 6e 01 00       	call   c0024100 <lrint>
c000d28b:	0f af f8             	imul   edi,eax
c000d28e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d292:	01 f8                	add    eax,edi
c000d294:	99                   	cdq    
c000d295:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d298:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a3:	68 00 00 f0 3f       	push   0x3ff00000
c000d2a8:	6a 00                	push   0x0
c000d2aa:	e8 b5 66 01 00       	call   c0023964 <__divdf3>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d2bf:	68 23 42 92 0c       	push   0xc924223
c000d2c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2cc:	e8 32 5d 01 00       	call   c0023003 <__adddf3>
c000d2d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2d9:	83 c4 20             	add    esp,0x20
c000d2dc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2e4:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2f2:	7d 4e                	jge    c000d342 <sinc_mono_vari_process+0x28d>
c000d2f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2fa:	01 c8                	add    eax,ecx
c000d2fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2ff:	99                   	cdq    
c000d300:	f7 f9                	idiv   ecx
c000d302:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d306:	7d 0c                	jge    c000d314 <sinc_mono_vari_process+0x25f>
c000d308:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d30b:	85 ff                	test   edi,edi
c000d30d:	79 69                	jns    c000d378 <sinc_mono_vari_process+0x2c3>
c000d30f:	e9 e4 00 00 00       	jmp    c000d3f8 <sinc_mono_vari_process+0x343>
c000d314:	57                   	push   edi
c000d315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d319:	56                   	push   esi
c000d31a:	53                   	push   ebx
c000d31b:	e8 a5 e4 ff ff       	call   c000b7c5 <prepare_data>
c000d320:	83 c4 10             	add    esp,0x10
c000d323:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d326:	85 c0                	test   eax,eax
c000d328:	0f 85 8e 03 00 00    	jne    c000d6bc <sinc_mono_vari_process+0x607>
c000d32e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d331:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d334:	01 c8                	add    eax,ecx
c000d336:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d339:	99                   	cdq    
c000d33a:	f7 f9                	idiv   ecx
c000d33c:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d340:	7c c6                	jl     c000d308 <sinc_mono_vari_process+0x253>
c000d342:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d345:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d349:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d34c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d34f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d353:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d357:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d35a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d35d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d360:	99                   	cdq    
c000d361:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d364:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d367:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d36a:	99                   	cdq    
c000d36b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d36e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d371:	31 c0                	xor    eax,eax
c000d373:	e9 44 03 00 00       	jmp    c000d6bc <sinc_mono_vari_process+0x607>
c000d378:	83 ec 0c             	sub    esp,0xc
c000d37b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d37e:	e8 60 69 01 00       	call   c0023ce3 <__floatsidf>
c000d383:	83 c4 10             	add    esp,0x10
c000d386:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d38a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d38e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d392:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	e8 60 5c 01 00       	call   c0023003 <__adddf3>
c000d3a3:	83 c4 10             	add    esp,0x10
c000d3a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d3aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d3ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3be:	e8 40 5c 01 00       	call   c0023003 <__adddf3>
c000d3c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3ce:	e8 10 69 01 00       	call   c0023ce3 <__floatsidf>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3de:	52                   	push   edx
c000d3df:	50                   	push   eax
c000d3e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3e8:	e8 44 6b 01 00       	call   c0023f31 <__gtdf2>
c000d3ed:	83 c4 10             	add    esp,0x10
c000d3f0:	85 c0                	test   eax,eax
c000d3f2:	0f 8f 4a ff ff ff    	jg     c000d342 <sinc_mono_vari_process+0x28d>
c000d3f8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d3fc:	0f 8e ef 00 00 00    	jle    c000d4f1 <sinc_mono_vari_process+0x43c>
c000d402:	83 ec 10             	sub    esp,0x10
c000d405:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d408:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d40b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d40e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d411:	e8 3e 62 01 00       	call   c0023654 <__subdf3>
c000d416:	83 c4 18             	add    esp,0x18
c000d419:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d41d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d421:	52                   	push   edx
c000d422:	50                   	push   eax
c000d423:	e8 b8 6c 01 00       	call   c00240e0 <fabs>
c000d428:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d42c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d438:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d43d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d441:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d445:	e8 e7 6a 01 00       	call   c0023f31 <__gtdf2>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	85 c0                	test   eax,eax
c000d44f:	0f 8e 9c 00 00 00    	jle    c000d4f1 <sinc_mono_vari_process+0x43c>
c000d455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d458:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d45b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d45f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d463:	52                   	push   edx
c000d464:	50                   	push   eax
c000d465:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d468:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d46b:	e8 e4 61 01 00       	call   c0023654 <__subdf3>
c000d470:	5f                   	pop    edi
c000d471:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d475:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d479:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d47c:	e8 62 68 01 00       	call   c0023ce3 <__floatsidf>
c000d481:	83 c4 10             	add    esp,0x10
c000d484:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d488:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d48c:	52                   	push   edx
c000d48d:	50                   	push   eax
c000d48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d496:	e8 e5 61 01 00       	call   c0023680 <__muldf3>
c000d49b:	59                   	pop    ecx
c000d49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d4a4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d4a7:	e8 37 68 01 00       	call   c0023ce3 <__floatsidf>
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b7:	52                   	push   edx
c000d4b8:	50                   	push   eax
c000d4b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c1:	e8 9e 64 01 00       	call   c0023964 <__divdf3>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e1:	e8 1d 5b 01 00       	call   c0023003 <__adddf3>
c000d4e6:	83 c4 10             	add    esp,0x10
c000d4e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f1:	83 ec 0c             	sub    esp,0xc
c000d4f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4f7:	e8 e7 67 01 00       	call   c0023ce3 <__floatsidf>
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d507:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d50b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d517:	e8 33 6a 01 00       	call   c0023f4f <__ltdf2>
c000d51c:	83 c4 10             	add    esp,0x10
c000d51f:	85 c0                	test   eax,eax
c000d521:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d529:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d52d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d531:	78 10                	js     c000d543 <sinc_mono_vari_process+0x48e>
c000d533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d537:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d53b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d53f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d543:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d553:	e8 28 61 01 00       	call   c0023680 <__muldf3>
c000d558:	59                   	pop    ecx
c000d559:	5f                   	pop    edi
c000d55a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d55e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d562:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d566:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d56a:	e8 99 e1 ff ff       	call   c000b708 <double_to_fp>
c000d56f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d573:	89 c7                	mov    edi,eax
c000d575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d579:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d581:	e8 fa 60 01 00       	call   c0023680 <__muldf3>
c000d586:	83 c4 18             	add    esp,0x18
c000d589:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d58d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d591:	52                   	push   edx
c000d592:	50                   	push   eax
c000d593:	e8 70 e1 ff ff       	call   c000b708 <double_to_fp>
c000d598:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d59c:	83 ec 0c             	sub    esp,0xc
c000d59f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d5a2:	e8 3c 67 01 00       	call   c0023ce3 <__floatsidf>
c000d5a7:	83 c4 10             	add    esp,0x10
c000d5aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5b2:	52                   	push   edx
c000d5b3:	50                   	push   eax
c000d5b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bc:	e8 a3 63 01 00       	call   c0023964 <__divdf3>
c000d5c1:	83 c4 10             	add    esp,0x10
c000d5c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5c8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5cc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5d0:	89 d8                	mov    eax,ebx
c000d5d2:	89 fa                	mov    edx,edi
c000d5d4:	e8 7c c1 ff ff       	call   c0009755 <calc_output_single>
c000d5d9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5dc:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5e7:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5eb:	52                   	push   edx
c000d5ec:	50                   	push   eax
c000d5ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5f5:	e8 86 60 01 00       	call   c0023680 <__muldf3>
c000d5fa:	59                   	pop    ecx
c000d5fb:	59                   	pop    ecx
c000d5fc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d600:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d604:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d608:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d60c:	e8 42 69 01 00       	call   c0023f53 <__truncdfsf2>
c000d611:	83 c4 10             	add    esp,0x10
c000d614:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d618:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d61b:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d626:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d62a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d62e:	e8 31 63 01 00       	call   c0023964 <__divdf3>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d63a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d63e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d642:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d646:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d64a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d64e:	e8 b0 59 01 00       	call   c0023003 <__adddf3>
c000d653:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d657:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d65b:	83 c4 18             	add    esp,0x18
c000d65e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d662:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d666:	e8 c4 e0 ff ff       	call   c000b72f <fmod_one>
c000d66b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d66e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d672:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d676:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d679:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d67d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d685:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d689:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68d:	e8 c2 5f 01 00       	call   c0023654 <__subdf3>
c000d692:	83 c4 18             	add    esp,0x18
c000d695:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d699:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d69d:	52                   	push   edx
c000d69e:	50                   	push   eax
c000d69f:	e8 5c 6a 01 00       	call   c0024100 <lrint>
c000d6a4:	0f af f8             	imul   edi,eax
c000d6a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	01 f8                	add    eax,edi
c000d6b0:	99                   	cdq    
c000d6b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d6b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d6b7:	e9 30 fc ff ff       	jmp    c000d2ec <sinc_mono_vari_process+0x237>
c000d6bc:	83 c4 4c             	add    esp,0x4c
c000d6bf:	5b                   	pop    ebx
c000d6c0:	5e                   	pop    esi
c000d6c1:	5f                   	pop    edi
c000d6c2:	5d                   	pop    ebp
c000d6c3:	c3                   	ret    

c000d6c4 <sinc_get_name>:
c000d6c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6c8:	31 c0                	xor    eax,eax
c000d6ca:	83 fa 02             	cmp    edx,0x2
c000d6cd:	77 07                	ja     c000d6d6 <sinc_get_name+0x12>
c000d6cf:	8b 04 95 c4 58 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda73c]
c000d6d6:	c3                   	ret    

c000d6d7 <sinc_get_description>:
c000d6d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6db:	31 c0                	xor    eax,eax
c000d6dd:	83 fa 02             	cmp    edx,0x2
c000d6e0:	77 07                	ja     c000d6e9 <sinc_get_description+0x12>
c000d6e2:	8b 04 95 b8 58 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda748]
c000d6e9:	c3                   	ret    

c000d6ea <sinc_set_converter>:
c000d6ea:	53                   	push   ebx
c000d6eb:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6f1:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6f8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d6fb:	85 c0                	test   eax,eax
c000d6fd:	74 13                	je     c000d712 <sinc_set_converter+0x28>
c000d6ff:	83 ec 0c             	sub    esp,0xc
c000d702:	50                   	push   eax
c000d703:	e8 68 1a 00 00       	call   c000f170 <free>
c000d708:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	50                   	push   eax
c000d713:	68 44 08 00 00       	push   0x844
c000d718:	6a 00                	push   0x0
c000d71a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d71e:	50                   	push   eax
c000d71f:	e8 c2 2f ff ff       	call   c00006e6 <memset>
c000d724:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	b8 0b 00 00 00       	mov    eax,0xb
c000d72f:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d735:	7f 6e                	jg     c000d7a5 <sinc_set_converter+0xbb>
c000d737:	83 fa 01             	cmp    edx,0x1
c000d73a:	75 10                	jne    c000d74c <sinc_set_converter+0x62>
c000d73c:	c7 43 24 b5 d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0b5
c000d743:	c7 43 20 b5 d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0b5
c000d74a:	eb 4d                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d74c:	83 fa 02             	cmp    edx,0x2
c000d74f:	75 10                	jne    c000d761 <sinc_set_converter+0x77>
c000d751:	c7 43 24 d7 ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cad7
c000d758:	c7 43 20 d7 ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cad7
c000d75f:	eb 38                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d761:	83 fa 04             	cmp    edx,0x4
c000d764:	75 10                	jne    c000d776 <sinc_set_converter+0x8c>
c000d766:	c7 43 24 f9 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4f9
c000d76d:	c7 43 20 f9 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4f9
c000d774:	eb 23                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d776:	83 fa 06             	cmp    edx,0x6
c000d779:	75 10                	jne    c000d78b <sinc_set_converter+0xa1>
c000d77b:	c7 43 24 1b bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1b
c000d782:	c7 43 20 1b bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1b
c000d789:	eb 0e                	jmp    c000d799 <sinc_set_converter+0xaf>
c000d78b:	c7 43 24 3f b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b93f
c000d792:	c7 43 20 3f b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b93f
c000d799:	c7 43 28 5c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab5c
c000d7a0:	b8 0a 00 00 00       	mov    eax,0xa
c000d7a5:	81 c4 58 08 00 00    	add    esp,0x858
c000d7ab:	5b                   	pop    ebx
c000d7ac:	c3                   	ret    

c000d7ad <is_bad_src_ratio>:
c000d7ad:	83 ec 1c             	sub    esp,0x1c
c000d7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d7bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7c0:	b8 00 00 00 00       	mov    eax,0x0
c000d7c5:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7ca:	52                   	push   edx
c000d7cb:	50                   	push   eax
c000d7cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d4:	e8 76 67 01 00       	call   c0023f4f <__ltdf2>
c000d7d9:	83 c4 10             	add    esp,0x10
c000d7dc:	85 c0                	test   eax,eax
c000d7de:	78 20                	js     c000d800 <is_bad_src_ratio+0x53>
c000d7e0:	b8 00 00 00 00       	mov    eax,0x0
c000d7e5:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7ea:	52                   	push   edx
c000d7eb:	50                   	push   eax
c000d7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7f4:	e8 38 67 01 00       	call   c0023f31 <__gtdf2>
c000d7f9:	83 c4 10             	add    esp,0x10
c000d7fc:	85 c0                	test   eax,eax
c000d7fe:	7e 07                	jle    c000d807 <is_bad_src_ratio+0x5a>
c000d800:	b8 01 00 00 00       	mov    eax,0x1
c000d805:	eb 05                	jmp    c000d80c <is_bad_src_ratio+0x5f>
c000d807:	b8 00 00 00 00       	mov    eax,0x0
c000d80c:	83 c4 1c             	add    esp,0x1c
c000d80f:	c3                   	ret    

c000d810 <fmod_one>:
c000d810:	83 ec 2c             	sub    esp,0x2c
c000d813:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d81b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d81f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d823:	83 ec 08             	sub    esp,0x8
c000d826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82e:	e8 cd 68 01 00       	call   c0024100 <lrint>
c000d833:	83 c4 10             	add    esp,0x10
c000d836:	83 ec 0c             	sub    esp,0xc
c000d839:	50                   	push   eax
c000d83a:	e8 a4 64 01 00       	call   c0023ce3 <__floatsidf>
c000d83f:	83 c4 10             	add    esp,0x10
c000d842:	52                   	push   edx
c000d843:	50                   	push   eax
c000d844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d84c:	e8 03 5e 01 00       	call   c0023654 <__subdf3>
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d858:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d85c:	b8 00 00 00 00       	mov    eax,0x0
c000d861:	ba 00 00 00 00       	mov    edx,0x0
c000d866:	52                   	push   edx
c000d867:	50                   	push   eax
c000d868:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d86c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d870:	e8 da 66 01 00       	call   c0023f4f <__ltdf2>
c000d875:	83 c4 10             	add    esp,0x10
c000d878:	85 c0                	test   eax,eax
c000d87a:	79 1e                	jns    c000d89a <fmod_one+0x8a>
c000d87c:	b8 00 00 00 00       	mov    eax,0x0
c000d881:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d886:	52                   	push   edx
c000d887:	50                   	push   eax
c000d888:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d890:	e8 6e 57 01 00       	call   c0023003 <__adddf3>
c000d895:	83 c4 10             	add    esp,0x10
c000d898:	eb 08                	jmp    c000d8a2 <fmod_one+0x92>
c000d89a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d89e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d8a2:	83 c4 2c             	add    esp,0x2c
c000d8a5:	c3                   	ret    

c000d8a6 <zoh_vari_process>:
c000d8a6:	55                   	push   ebp
c000d8a7:	57                   	push   edi
c000d8a8:	56                   	push   esi
c000d8a9:	53                   	push   ebx
c000d8aa:	83 ec 3c             	sub    esp,0x3c
c000d8ad:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d8b1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d8b5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d8bd:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8c1:	0f 8e a9 05 00 00    	jle    c000de70 <zoh_vari_process+0x5ca>
c000d8c7:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8ca:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8d2:	85 db                	test   ebx,ebx
c000d8d4:	0f 84 96 05 00 00    	je     c000de70 <zoh_vari_process+0x5ca>
c000d8da:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8dd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8e1:	74 19                	je     c000d8fc <zoh_vari_process+0x56>
c000d8e3:	31 d2                	xor    edx,edx
c000d8e5:	39 c2                	cmp    edx,eax
c000d8e7:	7d 0c                	jge    c000d8f5 <zoh_vari_process+0x4f>
c000d8e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8eb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8ee:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8f2:	42                   	inc    edx
c000d8f3:	eb f0                	jmp    c000d8e5 <zoh_vari_process+0x3f>
c000d8f5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d8fc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d8ff:	0f af d0             	imul   edx,eax
c000d902:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d905:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d909:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d910:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d913:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d91a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d91d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d928:	57                   	push   edi
c000d929:	57                   	push   edi
c000d92a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d92e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d932:	e8 76 fe ff ff       	call   c000d7ad <is_bad_src_ratio>
c000d937:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d93b:	83 c4 10             	add    esp,0x10
c000d93e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d943:	0f 85 1f 05 00 00    	jne    c000de68 <zoh_vari_process+0x5c2>
c000d949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d94c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d94f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d953:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d957:	68 00 00 f0 3f       	push   0x3ff00000
c000d95c:	6a 00                	push   0x0
c000d95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d966:	e8 e4 65 01 00       	call   c0023f4f <__ltdf2>
c000d96b:	83 c4 10             	add    esp,0x10
c000d96e:	85 c0                	test   eax,eax
c000d970:	0f 89 dc 01 00 00    	jns    c000db52 <zoh_vari_process+0x2ac>
c000d976:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d979:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d97c:	0f 8d d0 01 00 00    	jge    c000db52 <zoh_vari_process+0x2ac>
c000d982:	83 ec 0c             	sub    esp,0xc
c000d985:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d988:	e8 56 63 01 00       	call   c0023ce3 <__floatsidf>
c000d98d:	83 c4 10             	add    esp,0x10
c000d990:	89 04 24             	mov    DWORD PTR [esp],eax
c000d993:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d997:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9a7:	e8 d4 5c 01 00       	call   c0023680 <__muldf3>
c000d9ac:	59                   	pop    ecx
c000d9ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9b5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9b8:	e8 26 63 01 00       	call   c0023ce3 <__floatsidf>
c000d9bd:	83 c4 10             	add    esp,0x10
c000d9c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9c8:	52                   	push   edx
c000d9c9:	50                   	push   eax
c000d9ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d2:	e8 2c 56 01 00       	call   c0023003 <__adddf3>
c000d9d7:	59                   	pop    ecx
c000d9d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9dc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9e0:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9e3:	e8 fb 62 01 00       	call   c0023ce3 <__floatsidf>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9f3:	52                   	push   edx
c000d9f4:	50                   	push   eax
c000d9f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9fd:	e8 4b 65 01 00       	call   c0023f4d <__gedf2>
c000da02:	83 c4 10             	add    esp,0x10
c000da05:	85 c0                	test   eax,eax
c000da07:	0f 89 45 01 00 00    	jns    c000db52 <zoh_vari_process+0x2ac>
c000da0d:	85 ff                	test   edi,edi
c000da0f:	0f 8e ee 00 00 00    	jle    c000db03 <zoh_vari_process+0x25d>
c000da15:	83 ec 10             	sub    esp,0x10
c000da18:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da1b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da1e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da21:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da24:	e8 2b 5c 01 00       	call   c0023654 <__subdf3>
c000da29:	83 c4 18             	add    esp,0x18
c000da2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da34:	52                   	push   edx
c000da35:	50                   	push   eax
c000da36:	e8 a5 66 01 00       	call   c00240e0 <fabs>
c000da3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da3f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da4b:	68 23 42 92 0c       	push   0xc924223
c000da50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da58:	e8 d4 64 01 00       	call   c0023f31 <__gtdf2>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	85 c0                	test   eax,eax
c000da62:	0f 8e 9b 00 00 00    	jle    c000db03 <zoh_vari_process+0x25d>
c000da68:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da6b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000da71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da75:	52                   	push   edx
c000da76:	50                   	push   eax
c000da77:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da7a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da7d:	e8 d2 5b 01 00       	call   c0023654 <__subdf3>
c000da82:	59                   	pop    ecx
c000da83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da87:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da8b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da8e:	e8 50 62 01 00       	call   c0023ce3 <__floatsidf>
c000da93:	83 c4 10             	add    esp,0x10
c000da96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da9a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da9e:	52                   	push   edx
c000da9f:	50                   	push   eax
c000daa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daa8:	e8 d3 5b 01 00       	call   c0023680 <__muldf3>
c000daad:	5f                   	pop    edi
c000daae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dab2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dab6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dab9:	e8 25 62 01 00       	call   c0023ce3 <__floatsidf>
c000dabe:	83 c4 10             	add    esp,0x10
c000dac1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dac5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dac9:	52                   	push   edx
c000daca:	50                   	push   eax
c000dacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dacf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad3:	e8 8c 5e 01 00       	call   c0023964 <__divdf3>
c000dad8:	83 c4 10             	add    esp,0x10
c000dadb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dadf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dae7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daf3:	e8 0b 55 01 00       	call   c0023003 <__adddf3>
c000daf8:	83 c4 10             	add    esp,0x10
c000dafb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db03:	31 c0                	xor    eax,eax
c000db05:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000db08:	7e 13                	jle    c000db1d <zoh_vari_process+0x277>
c000db0a:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000db0e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000db11:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000db14:	40                   	inc    eax
c000db15:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000db18:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000db1b:	eb e8                	jmp    c000db05 <zoh_vari_process+0x25f>
c000db1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db25:	68 00 00 f0 3f       	push   0x3ff00000
c000db2a:	6a 00                	push   0x0
c000db2c:	e8 33 5e 01 00       	call   c0023964 <__divdf3>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	89 04 24             	mov    DWORD PTR [esp],eax
c000db37:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db3b:	52                   	push   edx
c000db3c:	50                   	push   eax
c000db3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db45:	e8 b9 54 01 00       	call   c0023003 <__adddf3>
c000db4a:	83 c4 10             	add    esp,0x10
c000db4d:	e9 fd fd ff ff       	jmp    c000d94f <zoh_vari_process+0xa9>
c000db52:	57                   	push   edi
c000db53:	57                   	push   edi
c000db54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5c:	e8 af fc ff ff       	call   c000d810 <fmod_one>
c000db61:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db7c:	e8 d3 5a 01 00       	call   c0023654 <__subdf3>
c000db81:	83 c4 18             	add    esp,0x18
c000db84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db8c:	52                   	push   edx
c000db8d:	50                   	push   eax
c000db8e:	e8 6d 65 01 00       	call   c0024100 <lrint>
c000db93:	83 c4 10             	add    esp,0x10
c000db96:	0f af f8             	imul   edi,eax
c000db99:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db9c:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db9f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000dba3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dba6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000dba9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbad:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dbb0:	0f 8d 1d 02 00 00    	jge    c000ddd3 <zoh_vari_process+0x52d>
c000dbb6:	83 ec 0c             	sub    esp,0xc
c000dbb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbbc:	e8 22 61 01 00       	call   c0023ce3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbdc:	e8 9f 5a 01 00       	call   c0023680 <__muldf3>
c000dbe1:	59                   	pop    ecx
c000dbe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbe6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbee:	e8 f0 60 01 00       	call   c0023ce3 <__floatsidf>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbfa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbfe:	52                   	push   edx
c000dbff:	50                   	push   eax
c000dc00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc08:	e8 f6 53 01 00       	call   c0023003 <__adddf3>
c000dc0d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc18:	e8 c6 60 01 00       	call   c0023ce3 <__floatsidf>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc24:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc28:	52                   	push   edx
c000dc29:	50                   	push   eax
c000dc2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc32:	e8 1a 63 01 00       	call   c0023f51 <__ledf2>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	85 c0                	test   eax,eax
c000dc3c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc40:	0f 8f 8d 01 00 00    	jg     c000ddd3 <zoh_vari_process+0x52d>
c000dc46:	85 c9                	test   ecx,ecx
c000dc48:	0f 8e ef 00 00 00    	jle    c000dd3d <zoh_vari_process+0x497>
c000dc4e:	83 ec 10             	sub    esp,0x10
c000dc51:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc54:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc57:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc5a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc5d:	e8 f2 59 01 00       	call   c0023654 <__subdf3>
c000dc62:	83 c4 18             	add    esp,0x18
c000dc65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc69:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc6d:	52                   	push   edx
c000dc6e:	50                   	push   eax
c000dc6f:	e8 6c 64 01 00       	call   c00240e0 <fabs>
c000dc74:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc78:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc84:	68 23 42 92 0c       	push   0xc924223
c000dc89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc91:	e8 9b 62 01 00       	call   c0023f31 <__gtdf2>
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	85 c0                	test   eax,eax
c000dc9b:	0f 8e 9c 00 00 00    	jle    c000dd3d <zoh_vari_process+0x497>
c000dca1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dca4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcaf:	52                   	push   edx
c000dcb0:	50                   	push   eax
c000dcb1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcb4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcb7:	e8 98 59 01 00       	call   c0023654 <__subdf3>
c000dcbc:	5f                   	pop    edi
c000dcbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcc1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcc5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcc8:	e8 16 60 01 00       	call   c0023ce3 <__floatsidf>
c000dccd:	83 c4 10             	add    esp,0x10
c000dcd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcd8:	52                   	push   edx
c000dcd9:	50                   	push   eax
c000dcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce2:	e8 99 59 01 00       	call   c0023680 <__muldf3>
c000dce7:	59                   	pop    ecx
c000dce8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcec:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcf0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcf3:	e8 eb 5f 01 00       	call   c0023ce3 <__floatsidf>
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd03:	52                   	push   edx
c000dd04:	50                   	push   eax
c000dd05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0d:	e8 52 5c 01 00       	call   c0023964 <__divdf3>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd2d:	e8 d1 52 01 00       	call   c0023003 <__adddf3>
c000dd32:	83 c4 10             	add    esp,0x10
c000dd35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd3d:	31 c0                	xor    eax,eax
c000dd3f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd42:	39 c2                	cmp    edx,eax
c000dd44:	7e 1d                	jle    c000dd63 <zoh_vari_process+0x4bd>
c000dd46:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd49:	29 d1                	sub    ecx,edx
c000dd4b:	89 ca                	mov    edx,ecx
c000dd4d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd4f:	01 c2                	add    edx,eax
c000dd51:	40                   	inc    eax
c000dd52:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd55:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd58:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd5b:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd5e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd61:	eb dc                	jmp    c000dd3f <zoh_vari_process+0x499>
c000dd63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd6b:	68 00 00 f0 3f       	push   0x3ff00000
c000dd70:	6a 00                	push   0x0
c000dd72:	e8 ed 5b 01 00       	call   c0023964 <__divdf3>
c000dd77:	83 c4 10             	add    esp,0x10
c000dd7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd7e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd82:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd86:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd92:	e8 6c 52 01 00       	call   c0023003 <__adddf3>
c000dd97:	5f                   	pop    edi
c000dd98:	59                   	pop    ecx
c000dd99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dda1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dda9:	e8 62 fa ff ff       	call   c000d810 <fmod_one>
c000ddae:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ddb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddc9:	e8 86 58 01 00       	call   c0023654 <__subdf3>
c000ddce:	e9 ae fd ff ff       	jmp    c000db81 <zoh_vari_process+0x2db>
c000ddd3:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000ddd7:	7d 3a                	jge    c000de13 <zoh_vari_process+0x56d>
c000ddd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dddd:	83 ec 0c             	sub    esp,0xc
c000dde0:	29 f8                	sub    eax,edi
c000dde2:	99                   	cdq    
c000dde3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dde6:	50                   	push   eax
c000dde7:	e8 f7 5e 01 00       	call   c0023ce3 <__floatsidf>
c000ddec:	83 c4 10             	add    esp,0x10
c000ddef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf7:	52                   	push   edx
c000ddf8:	50                   	push   eax
c000ddf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddfd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de01:	e8 fd 51 01 00       	call   c0023003 <__adddf3>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000de0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000de0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de13:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000de16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de1a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000de1d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000de20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de23:	85 c0                	test   eax,eax
c000de25:	7f 24                	jg     c000de4b <zoh_vari_process+0x5a5>
c000de27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de35:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de38:	99                   	cdq    
c000de39:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de3c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de42:	99                   	cdq    
c000de43:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de46:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de49:	eb 25                	jmp    c000de70 <zoh_vari_process+0x5ca>
c000de4b:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de4e:	31 d2                	xor    edx,edx
c000de50:	29 c8                	sub    eax,ecx
c000de52:	c1 e0 02             	shl    eax,0x2
c000de55:	39 d1                	cmp    ecx,edx
c000de57:	7e ce                	jle    c000de27 <zoh_vari_process+0x581>
c000de59:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de5b:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de5e:	83 c0 04             	add    eax,0x4
c000de61:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de65:	42                   	inc    edx
c000de66:	eb ed                	jmp    c000de55 <zoh_vari_process+0x5af>
c000de68:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de74:	83 c4 3c             	add    esp,0x3c
c000de77:	5b                   	pop    ebx
c000de78:	5e                   	pop    esi
c000de79:	5f                   	pop    edi
c000de7a:	5d                   	pop    ebp
c000de7b:	c3                   	ret    

c000de7c <zoh_reset>:
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de83:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de86:	85 c0                	test   eax,eax
c000de88:	74 20                	je     c000deaa <zoh_reset+0x2e>
c000de8a:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de8d:	83 c0 1c             	add    eax,0x1c
c000de90:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de93:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de9a:	c1 e2 02             	shl    edx,0x2
c000de9d:	51                   	push   ecx
c000de9e:	52                   	push   edx
c000de9f:	6a 00                	push   0x0
c000dea1:	50                   	push   eax
c000dea2:	e8 3f 28 ff ff       	call   c00006e6 <memset>
c000dea7:	83 c4 10             	add    esp,0x10
c000deaa:	83 c4 0c             	add    esp,0xc
c000dead:	c3                   	ret    

c000deae <zoh_get_name>:
c000deae:	31 c0                	xor    eax,eax
c000deb0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000deb5:	75 05                	jne    c000debc <zoh_get_name+0xe>
c000deb7:	b8 de 59 02 c0       	mov    eax,0xc00259de
c000debc:	c3                   	ret    

c000debd <zoh_get_description>:
c000debd:	31 c0                	xor    eax,eax
c000debf:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000dec4:	75 05                	jne    c000decb <zoh_get_description+0xe>
c000dec6:	b8 ef 59 02 c0       	mov    eax,0xc00259ef
c000decb:	c3                   	ret    

c000decc <zoh_set_converter>:
c000decc:	53                   	push   ebx
c000decd:	b8 0a 00 00 00       	mov    eax,0xa
c000ded2:	83 ec 08             	sub    esp,0x8
c000ded5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ded9:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000dede:	75 6e                	jne    c000df4e <zoh_set_converter+0x82>
c000dee0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dee3:	85 c0                	test   eax,eax
c000dee5:	74 13                	je     c000defa <zoh_set_converter+0x2e>
c000dee7:	83 ec 0c             	sub    esp,0xc
c000deea:	50                   	push   eax
c000deeb:	e8 80 12 00 00       	call   c000f170 <free>
c000def0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	50                   	push   eax
c000defb:	50                   	push   eax
c000defc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000deff:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000df06:	50                   	push   eax
c000df07:	6a 01                	push   0x1
c000df09:	e8 82 12 00 00       	call   c000f190 <calloc>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	89 c2                	mov    edx,eax
c000df13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000df16:	85 d2                	test   edx,edx
c000df18:	b8 01 00 00 00       	mov    eax,0x1
c000df1d:	74 2f                	je     c000df4e <zoh_set_converter+0x82>
c000df1f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df22:	83 ec 0c             	sub    esp,0xc
c000df25:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df28:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df2e:	c7 43 24 a6 d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d8a6
c000df35:	c7 43 20 a6 d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d8a6
c000df3c:	c7 43 28 7c de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de7c
c000df43:	53                   	push   ebx
c000df44:	e8 33 ff ff ff       	call   c000de7c <zoh_reset>
c000df49:	83 c4 10             	add    esp,0x10
c000df4c:	31 c0                	xor    eax,eax
c000df4e:	83 c4 08             	add    esp,0x8
c000df51:	5b                   	pop    ebx
c000df52:	c3                   	ret    
c000df53:	90                   	nop

c000df54 <Computer::close(int, int, void*)>:
c000df54:	57                   	push   edi
c000df55:	56                   	push   esi
c000df56:	53                   	push   ebx
c000df57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df63:	83 ec 0c             	sub    esp,0xc
c000df66:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df6c:	e8 61 58 00 00       	call   c00137d2 <Device::closeAll()>
c000df71:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000df7c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df80:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df90:	5b                   	pop    ebx
c000df91:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df94:	5e                   	pop    esi
c000df95:	5f                   	pop    edi
c000df96:	ff e0                	jmp    eax

c000df98 <Computer::Computer()>:
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9f:	83 ec 08             	sub    esp,0x8
c000dfa2:	68 26 5a 02 c0       	push   0xc0025a26
c000dfa7:	50                   	push   eax
c000dfa8:	e8 9f 58 00 00       	call   c001384c <Device::Device(char const*)>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	ba f0 5b 02 c0       	mov    edx,0xc0025bf0
c000dfb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb9:	89 10                	mov    DWORD PTR [eax],edx
c000dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcd:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfe1:	83 ca 04             	or     edx,0x4
c000dfe4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dff4:	0f b6 d0             	movzx  edx,al
c000dff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dffb:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e006:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e00c:	0f b6 d0             	movzx  edx,al
c000e00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e013:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e022:	8d 50 01             	lea    edx,[eax+0x1]
c000e025:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e029:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e02f:	0f b6 d0             	movzx  edx,al
c000e032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e036:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e03a:	83 e1 3f             	and    ecx,0x3f
c000e03d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e045:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e04b:	0f b6 d0             	movzx  edx,al
c000e04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e052:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e063:	0f b6 d0             	movzx  edx,al
c000e066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e073:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e079:	8d 50 01             	lea    edx,[eax+0x1]
c000e07c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e080:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e086:	0f b6 d0             	movzx  edx,al
c000e089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e091:	83 e1 3f             	and    ecx,0x3f
c000e094:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0a2:	0f b6 d0             	movzx  edx,al
c000e0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0ba:	0f b6 d0             	movzx  edx,al
c000e0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0d0:	8d 50 01             	lea    edx,[eax+0x1]
c000e0d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0d7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0dd:	0f b6 d0             	movzx  edx,al
c000e0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0e4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0e8:	83 e1 3f             	and    ecx,0x3f
c000e0eb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0ef:	90                   	nop
c000e0f0:	83 c4 0c             	add    esp,0xc
c000e0f3:	c3                   	ret    

c000e0f4 <Computer::setBootMessage(char const*)>:
c000e0f4:	c3                   	ret    
c000e0f5:	90                   	nop

c000e0f6 <Computer::start()>:
c000e0f6:	56                   	push   esi
c000e0f7:	53                   	push   ebx
c000e0f8:	50                   	push   eax
c000e0f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0fd:	e8 60 d8 00 00       	call   c001b962 <lockScheduler()>
c000e102:	e8 8f db 00 00       	call   c001bc96 <schedule()>
c000e107:	e8 58 d8 00 00       	call   c001b964 <unlockScheduler()>
c000e10c:	fb                   	sti    
c000e10d:	83 ec 0c             	sub    esp,0xc
c000e110:	68 3b 07 00 00       	push   0x73b
c000e115:	e8 48 40 00 00       	call   c0012162 <operator new(unsigned long)>
c000e11a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e121:	89 c6                	mov    esi,eax
c000e123:	ff 35 b4 a8 02 c0    	push   DWORD PTR ds:0xc002a8b4
c000e129:	68 2f 5a 02 c0       	push   0xc0025a2f
c000e12e:	6a 01                	push   0x1
c000e130:	50                   	push   eax
c000e131:	e8 8c d6 00 00       	call   c001b7c2 <Process::Process(bool, char const*, Process*, char**)>
c000e136:	83 c4 20             	add    esp,0x20
c000e139:	68 ff 00 00 00       	push   0xff
c000e13e:	6a 00                	push   0x0
c000e140:	68 ed ea 00 c0       	push   0xc000eaed
c000e145:	56                   	push   esi
c000e146:	e8 41 d9 00 00       	call   c001ba8c <Process::createThread(void (*)(void*), void*, int)>
c000e14b:	6a 7a                	push   0x7a
c000e14d:	6a 00                	push   0x0
c000e14f:	68 c5 c2 01 c0       	push   0xc001c2c5
c000e154:	ff 35 b4 a8 02 c0    	push   DWORD PTR ds:0xc002a8b4
c000e15a:	e8 2d d9 00 00       	call   c001ba8c <Process::createThread(void (*)(void*), void*, int)>
c000e15f:	83 c4 20             	add    esp,0x20
c000e162:	a3 68 a8 02 c0       	mov    ds:0xc002a868,eax
c000e167:	c6 05 6d 94 02 c0 01 	mov    BYTE PTR ds:0xc002946d,0x1
c000e16e:	e8 39 44 00 00       	call   c00125ac <initVFS()>
c000e173:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e179:	8b 10                	mov    edx,DWORD PTR [eax]
c000e17b:	6a 00                	push   0x0
c000e17d:	6a 00                	push   0x0
c000e17f:	6a 00                	push   0x0
c000e181:	50                   	push   eax
c000e182:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e185:	e8 35 c0 00 00       	call   c001a1bf <setupSystemCalls()>
c000e18a:	e8 1b 4f 00 00       	call   c00130aa <loadClockSettings()>
c000e18f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e192:	e8 0f 56 00 00       	call   c00137a6 <Device::loadDriversForAll()>
c000e197:	5a                   	pop    edx
c000e198:	8b 1d 68 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029468
c000e19e:	59                   	pop    ecx
c000e19f:	6a 01                	push   0x1
c000e1a1:	68 3c 5a 02 c0       	push   0xc0025a3c
c000e1a6:	e8 e6 d1 00 00       	call   c001b391 <Thr::loadDLL(char const*, bool)>
c000e1ab:	5e                   	pop    esi
c000e1ac:	5a                   	pop    edx
c000e1ad:	53                   	push   ebx
c000e1ae:	50                   	push   eax
c000e1af:	e8 a3 d3 00 00       	call   c001b557 <Thr::executeDLL(unsigned long, void*)>
c000e1b4:	c7 04 24 c8 6b 02 c0 	mov    DWORD PTR [esp],0xc0026bc8
c000e1bb:	e8 91 40 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e1c0:	83 c4 10             	add    esp,0x10
c000e1c3:	83 ec 0c             	sub    esp,0xc
c000e1c6:	6a 02                	push   0x2
c000e1c8:	e8 23 dc 00 00       	call   c001bdf0 <blockTask(TaskState)>
c000e1cd:	83 c4 10             	add    esp,0x10
c000e1d0:	eb f1                	jmp    c000e1c3 <Computer::start()+0xcd>

c000e1d2 <firstTask()>:
c000e1d2:	83 ec 18             	sub    esp,0x18
c000e1d5:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c000e1db:	e8 16 ff ff ff       	call   c000e0f6 <Computer::start()>

c000e1e0 <Computer::detectFeatures()>:
c000e1e0:	55                   	push   ebp
c000e1e1:	57                   	push   edi
c000e1e2:	56                   	push   esi
c000e1e3:	53                   	push   ebx
c000e1e4:	83 ec 1c             	sub    esp,0x1c
c000e1e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1eb:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1f5:	e8 a3 21 ff ff       	call   c000039d <detectCPUID>
c000e1fa:	85 c0                	test   eax,eax
c000e1fc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e202:	0f 95 c2             	setne  dl
c000e205:	83 e0 fd             	and    eax,0xfffffffd
c000e208:	d1 e2                	shl    edx,1
c000e20a:	09 d0                	or     eax,edx
c000e20c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e212:	a8 02                	test   al,0x2
c000e214:	75 46                	jne    c000e25c <Computer::detectFeatures()+0x7c>
c000e216:	f6 05 81 94 02 c0 04 	test   BYTE PTR ds:0xc0029481,0x4
c000e21d:	74 07                	je     c000e226 <Computer::detectFeatures()+0x46>
c000e21f:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e226:	e8 1b 3f 01 00       	call   c0022146 <x87Detect>
c000e22b:	83 e0 01             	and    eax,0x1
c000e22e:	c1 e0 04             	shl    eax,0x4
c000e231:	88 c2                	mov    dl,al
c000e233:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e239:	83 e0 ef             	and    eax,0xffffffef
c000e23c:	09 d0                	or     eax,edx
c000e23e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e244:	a8 10                	test   al,0x10
c000e246:	0f 85 10 01 00 00    	jne    c000e35c <Computer::detectFeatures()+0x17c>
c000e24c:	84 c0                	test   al,al
c000e24e:	0f 88 2b 01 00 00    	js     c000e37f <Computer::detectFeatures()+0x19f>
c000e254:	83 c4 1c             	add    esp,0x1c
c000e257:	5b                   	pop    ebx
c000e258:	5e                   	pop    esi
c000e259:	5f                   	pop    edi
c000e25a:	5d                   	pop    ebp
c000e25b:	c3                   	ret    
c000e25c:	83 ec 0c             	sub    esp,0xc
c000e25f:	6a 20                	push   0x20
c000e261:	e8 71 95 00 00       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c000e266:	83 e0 01             	and    eax,0x1
c000e269:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e270:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e276:	83 e0 f7             	and    eax,0xfffffff7
c000e279:	09 d0                	or     eax,edx
c000e27b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e281:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e288:	e8 4a 95 00 00       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c000e28d:	83 e0 01             	and    eax,0x1
c000e290:	88 c2                	mov    dl,al
c000e292:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e298:	83 e0 fe             	and    eax,0xfffffffe
c000e29b:	09 d0                	or     eax,edx
c000e29d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2a3:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e2aa:	e8 28 95 00 00       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c000e2af:	c1 e0 07             	shl    eax,0x7
c000e2b2:	88 c2                	mov    dl,al
c000e2b4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e2ba:	83 e0 7f             	and    eax,0x7f
c000e2bd:	09 d0                	or     eax,edx
c000e2bf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2c5:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2cc:	e8 06 95 00 00       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c000e2d1:	83 c4 10             	add    esp,0x10
c000e2d4:	83 e0 01             	and    eax,0x1
c000e2d7:	c1 e0 05             	shl    eax,0x5
c000e2da:	88 c2                	mov    dl,al
c000e2dc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2e2:	83 e0 df             	and    eax,0xffffffdf
c000e2e5:	09 d0                	or     eax,edx
c000e2e7:	f7 05 80 94 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0029480,0x401
c000e2f1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2f7:	0f 84 a8 00 00 00    	je     c000e3a5 <Computer::detectFeatures()+0x1c5>
c000e2fd:	83 ec 0c             	sub    esp,0xc
c000e300:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000e307:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e30b:	50                   	push   eax
c000e30c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e310:	55                   	push   ebp
c000e311:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e315:	57                   	push   edi
c000e316:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e31a:	56                   	push   esi
c000e31b:	68 00 00 00 80       	push   0x80000000
c000e320:	e8 2f 94 00 00       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e325:	83 c4 20             	add    esp,0x20
c000e328:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e32f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e333:	0f 86 dd fe ff ff    	jbe    c000e216 <Computer::detectFeatures()+0x36>
c000e339:	83 ec 0c             	sub    esp,0xc
c000e33c:	50                   	push   eax
c000e33d:	55                   	push   ebp
c000e33e:	57                   	push   edi
c000e33f:	56                   	push   esi
c000e340:	68 01 00 00 80       	push   0x80000001
c000e345:	e8 0a 94 00 00       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e34a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e354:	83 c4 20             	add    esp,0x20
c000e357:	e9 ba fe ff ff       	jmp    c000e216 <Computer::detectFeatures()+0x36>
c000e35c:	e8 9f 3d 01 00       	call   c0022100 <sseDetect>
c000e361:	88 c2                	mov    dl,al
c000e363:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e369:	c1 e2 07             	shl    edx,0x7
c000e36c:	83 e0 7f             	and    eax,0x7f
c000e36f:	09 d0                	or     eax,edx
c000e371:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e377:	84 c0                	test   al,al
c000e379:	0f 89 d5 fe ff ff    	jns    c000e254 <Computer::detectFeatures()+0x74>
c000e37f:	e8 6c 3d 01 00       	call   c00220f0 <avxDetect>
c000e384:	83 e0 01             	and    eax,0x1
c000e387:	c1 e0 05             	shl    eax,0x5
c000e38a:	88 c2                	mov    dl,al
c000e38c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e392:	83 e0 df             	and    eax,0xffffffdf
c000e395:	09 d0                	or     eax,edx
c000e397:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e39d:	83 c4 1c             	add    esp,0x1c
c000e3a0:	5b                   	pop    ebx
c000e3a1:	5e                   	pop    esi
c000e3a2:	5f                   	pop    edi
c000e3a3:	5d                   	pop    ebp
c000e3a4:	c3                   	ret    
c000e3a5:	83 ec 0c             	sub    esp,0xc
c000e3a8:	68 00 02 00 00       	push   0x200
c000e3ad:	e8 25 94 00 00       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c000e3b2:	83 c4 10             	add    esp,0x10
c000e3b5:	e9 43 ff ff ff       	jmp    c000e2fd <Computer::detectFeatures()+0x11d>

c000e3ba <Computer::displayFeatures()>:
c000e3ba:	53                   	push   ebx
c000e3bb:	83 ec 14             	sub    esp,0x14
c000e3be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3c2:	68 5f 5a 02 c0       	push   0xc0025a5f
c000e3c7:	e8 85 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e3cc:	83 c4 10             	add    esp,0x10
c000e3cf:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3d6:	0f 85 73 02 00 00    	jne    c000e64f <Computer::displayFeatures()+0x295>
c000e3dc:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e3e1:	83 ec 08             	sub    esp,0x8
c000e3e4:	50                   	push   eax
c000e3e5:	68 72 5a 02 c0       	push   0xc0025a72
c000e3ea:	e8 62 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3f9:	0f 85 8c 02 00 00    	jne    c000e68b <Computer::displayFeatures()+0x2d1>
c000e3ff:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e404:	83 ec 08             	sub    esp,0x8
c000e407:	50                   	push   eax
c000e408:	68 83 5a 02 c0       	push   0xc0025a83
c000e40d:	e8 3f 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e412:	83 c4 10             	add    esp,0x10
c000e415:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e41c:	0f 85 5f 02 00 00    	jne    c000e681 <Computer::displayFeatures()+0x2c7>
c000e422:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e427:	83 ec 08             	sub    esp,0x8
c000e42a:	50                   	push   eax
c000e42b:	68 94 5a 02 c0       	push   0xc0025a94
c000e430:	e8 1c 3e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e435:	83 c4 10             	add    esp,0x10
c000e438:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e43f:	0f 85 32 02 00 00    	jne    c000e677 <Computer::displayFeatures()+0x2bd>
c000e445:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e44a:	83 ec 08             	sub    esp,0x8
c000e44d:	50                   	push   eax
c000e44e:	68 a5 5a 02 c0       	push   0xc0025aa5
c000e453:	e8 f9 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e462:	0f 85 05 02 00 00    	jne    c000e66d <Computer::displayFeatures()+0x2b3>
c000e468:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e46d:	83 ec 08             	sub    esp,0x8
c000e470:	50                   	push   eax
c000e471:	68 b6 5a 02 c0       	push   0xc0025ab6
c000e476:	e8 d6 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e47b:	83 c4 10             	add    esp,0x10
c000e47e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e485:	0f 85 d8 01 00 00    	jne    c000e663 <Computer::displayFeatures()+0x2a9>
c000e48b:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e490:	83 ec 08             	sub    esp,0x8
c000e493:	50                   	push   eax
c000e494:	68 c7 5a 02 c0       	push   0xc0025ac7
c000e499:	e8 b3 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e49e:	83 c4 10             	add    esp,0x10
c000e4a1:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e4a8:	0f 85 ab 01 00 00    	jne    c000e659 <Computer::displayFeatures()+0x29f>
c000e4ae:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e4b3:	83 ec 08             	sub    esp,0x8
c000e4b6:	50                   	push   eax
c000e4b7:	68 d8 5a 02 c0       	push   0xc0025ad8
c000e4bc:	e8 90 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e4c1:	83 c4 10             	add    esp,0x10
c000e4c4:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4cb:	0f 88 1b 02 00 00    	js     c000e6ec <Computer::displayFeatures()+0x332>
c000e4d1:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e4d6:	83 ec 08             	sub    esp,0x8
c000e4d9:	50                   	push   eax
c000e4da:	68 e9 5a 02 c0       	push   0xc0025ae9
c000e4df:	e8 6d 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4ee:	0f 85 a1 01 00 00    	jne    c000e695 <Computer::displayFeatures()+0x2db>
c000e4f4:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e4f9:	83 ec 08             	sub    esp,0x8
c000e4fc:	50                   	push   eax
c000e4fd:	68 fa 5a 02 c0       	push   0xc0025afa
c000e502:	e8 4a 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e507:	83 c4 10             	add    esp,0x10
c000e50a:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e511:	0f 85 cb 01 00 00    	jne    c000e6e2 <Computer::displayFeatures()+0x328>
c000e517:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e51c:	83 ec 08             	sub    esp,0x8
c000e51f:	50                   	push   eax
c000e520:	68 0b 5b 02 c0       	push   0xc0025b0b
c000e525:	e8 27 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e52a:	83 c4 10             	add    esp,0x10
c000e52d:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e534:	0f 85 9e 01 00 00    	jne    c000e6d8 <Computer::displayFeatures()+0x31e>
c000e53a:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e53f:	83 ec 08             	sub    esp,0x8
c000e542:	50                   	push   eax
c000e543:	68 1c 5b 02 c0       	push   0xc0025b1c
c000e548:	e8 04 3d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e54d:	83 c4 10             	add    esp,0x10
c000e550:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e557:	0f 85 71 01 00 00    	jne    c000e6ce <Computer::displayFeatures()+0x314>
c000e55d:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e562:	83 ec 08             	sub    esp,0x8
c000e565:	50                   	push   eax
c000e566:	68 2d 5b 02 c0       	push   0xc0025b2d
c000e56b:	e8 e1 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e570:	83 c4 10             	add    esp,0x10
c000e573:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e57a:	0f 85 44 01 00 00    	jne    c000e6c4 <Computer::displayFeatures()+0x30a>
c000e580:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e585:	83 ec 08             	sub    esp,0x8
c000e588:	50                   	push   eax
c000e589:	68 3e 5b 02 c0       	push   0xc0025b3e
c000e58e:	e8 be 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e593:	83 c4 10             	add    esp,0x10
c000e596:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e59d:	0f 85 17 01 00 00    	jne    c000e6ba <Computer::displayFeatures()+0x300>
c000e5a3:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e5a8:	83 ec 08             	sub    esp,0x8
c000e5ab:	50                   	push   eax
c000e5ac:	68 4f 5b 02 c0       	push   0xc0025b4f
c000e5b1:	e8 9b 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5b6:	83 c4 10             	add    esp,0x10
c000e5b9:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5c0:	0f 85 ea 00 00 00    	jne    c000e6b0 <Computer::displayFeatures()+0x2f6>
c000e5c6:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e5cb:	83 ec 08             	sub    esp,0x8
c000e5ce:	50                   	push   eax
c000e5cf:	68 60 5b 02 c0       	push   0xc0025b60
c000e5d4:	e8 78 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5d9:	83 c4 10             	add    esp,0x10
c000e5dc:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5e3:	0f 88 0d 01 00 00    	js     c000e6f6 <Computer::displayFeatures()+0x33c>
c000e5e9:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e5ee:	83 ec 08             	sub    esp,0x8
c000e5f1:	50                   	push   eax
c000e5f2:	68 71 5b 02 c0       	push   0xc0025b71
c000e5f7:	e8 55 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e5fc:	83 c4 10             	add    esp,0x10
c000e5ff:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e606:	0f 85 9a 00 00 00    	jne    c000e6a6 <Computer::displayFeatures()+0x2ec>
c000e60c:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e611:	83 ec 08             	sub    esp,0x8
c000e614:	50                   	push   eax
c000e615:	68 82 5b 02 c0       	push   0xc0025b82
c000e61a:	e8 32 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e61f:	83 c4 10             	add    esp,0x10
c000e622:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e629:	75 74                	jne    c000e69f <Computer::displayFeatures()+0x2e5>
c000e62b:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c000e630:	83 ec 08             	sub    esp,0x8
c000e633:	50                   	push   eax
c000e634:	68 93 5b 02 c0       	push   0xc0025b93
c000e639:	e8 13 3c 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e63e:	c7 44 24 20 86 71 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027186
c000e646:	83 c4 18             	add    esp,0x18
c000e649:	5b                   	pop    ebx
c000e64a:	e9 02 3c 00 00       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>
c000e64f:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e654:	e9 88 fd ff ff       	jmp    c000e3e1 <Computer::displayFeatures()+0x27>
c000e659:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e65e:	e9 50 fe ff ff       	jmp    c000e4b3 <Computer::displayFeatures()+0xf9>
c000e663:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e668:	e9 23 fe ff ff       	jmp    c000e490 <Computer::displayFeatures()+0xd6>
c000e66d:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e672:	e9 f6 fd ff ff       	jmp    c000e46d <Computer::displayFeatures()+0xb3>
c000e677:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e67c:	e9 c9 fd ff ff       	jmp    c000e44a <Computer::displayFeatures()+0x90>
c000e681:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e686:	e9 9c fd ff ff       	jmp    c000e427 <Computer::displayFeatures()+0x6d>
c000e68b:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e690:	e9 6f fd ff ff       	jmp    c000e404 <Computer::displayFeatures()+0x4a>
c000e695:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e69a:	e9 5a fe ff ff       	jmp    c000e4f9 <Computer::displayFeatures()+0x13f>
c000e69f:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6a4:	eb 8a                	jmp    c000e630 <Computer::displayFeatures()+0x276>
c000e6a6:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6ab:	e9 61 ff ff ff       	jmp    c000e611 <Computer::displayFeatures()+0x257>
c000e6b0:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6b5:	e9 11 ff ff ff       	jmp    c000e5cb <Computer::displayFeatures()+0x211>
c000e6ba:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6bf:	e9 e4 fe ff ff       	jmp    c000e5a8 <Computer::displayFeatures()+0x1ee>
c000e6c4:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6c9:	e9 b7 fe ff ff       	jmp    c000e585 <Computer::displayFeatures()+0x1cb>
c000e6ce:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6d3:	e9 8a fe ff ff       	jmp    c000e562 <Computer::displayFeatures()+0x1a8>
c000e6d8:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6dd:	e9 5d fe ff ff       	jmp    c000e53f <Computer::displayFeatures()+0x185>
c000e6e2:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6e7:	e9 30 fe ff ff       	jmp    c000e51c <Computer::displayFeatures()+0x162>
c000e6ec:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6f1:	e9 e0 fd ff ff       	jmp    c000e4d6 <Computer::displayFeatures()+0x11c>
c000e6f6:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c000e6fb:	e9 ee fe ff ff       	jmp    c000e5ee <Computer::displayFeatures()+0x234>

c000e700 <Computer::rdmsr(unsigned int)>:
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e707:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e70e:	74 0a                	je     c000e71a <Computer::rdmsr(unsigned int)+0x1a>
c000e710:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e714:	0f 32                	rdmsr  
c000e716:	83 c4 0c             	add    esp,0xc
c000e719:	c3                   	ret    
c000e71a:	83 ec 0c             	sub    esp,0xc
c000e71d:	68 a4 5b 02 c0       	push   0xc0025ba4
c000e722:	e8 e7 a2 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	eb e4                	jmp    c000e710 <Computer::rdmsr(unsigned int)+0x10>

c000e72c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e72c:	57                   	push   edi
c000e72d:	56                   	push   esi
c000e72e:	52                   	push   edx
c000e72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e733:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e737:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e73b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e742:	74 0e                	je     c000e752 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e744:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e748:	89 f0                	mov    eax,esi
c000e74a:	89 fa                	mov    edx,edi
c000e74c:	0f 30                	wrmsr  
c000e74e:	58                   	pop    eax
c000e74f:	5e                   	pop    esi
c000e750:	5f                   	pop    edi
c000e751:	c3                   	ret    
c000e752:	83 ec 0c             	sub    esp,0xc
c000e755:	68 aa 5b 02 c0       	push   0xc0025baa
c000e75a:	e8 af a2 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000e75f:	83 c4 10             	add    esp,0x10
c000e762:	eb e0                	jmp    c000e744 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e764 <Computer::nmiEnabled()>:
c000e764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e768:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e76e:	c3                   	ret    
c000e76f:	90                   	nop

c000e770 <Computer::readCMOS(unsigned char)>:
c000e770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e774:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e77b:	19 c0                	sbb    eax,eax
c000e77d:	83 e0 80             	and    eax,0xffffff80
c000e780:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e784:	e6 70                	out    0x70,al
c000e786:	e4 71                	in     al,0x71
c000e788:	c3                   	ret    
c000e789:	90                   	nop

c000e78a <Computer::enableNMI(bool)>:
c000e78a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e792:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e798:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e7a0:	eb ce                	jmp    c000e770 <Computer::readCMOS(unsigned char)>

c000e7a2 <Computer::open(int, int, void*)>:
c000e7a2:	56                   	push   esi
c000e7a3:	53                   	push   ebx
c000e7a4:	83 ec 10             	sub    esp,0x10
c000e7a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7ab:	f6 05 80 94 02 c0 04 	test   BYTE PTR ds:0xc0029480,0x4
c000e7b2:	68 68 22 00 00       	push   0x2268
c000e7b7:	0f 94 05 20 84 02 c0 	sete   BYTE PTR ds:0xc0028420
c000e7be:	e8 9f 39 00 00       	call   c0012162 <operator new(unsigned long)>
c000e7c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7c6:	89 c6                	mov    esi,eax
c000e7c8:	e8 4b 86 00 00       	call   c0016e18 <ACPI::ACPI()>
c000e7cd:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7d3:	58                   	pop    eax
c000e7d4:	5a                   	pop    edx
c000e7d5:	56                   	push   esi
c000e7d6:	53                   	push   ebx
c000e7d7:	e8 80 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7df:	e8 fc f9 ff ff       	call   c000e1e0 <Computer::detectFeatures()>
c000e7e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7e7:	e8 ce fb ff ff       	call   c000e3ba <Computer::displayFeatures()>
c000e7ec:	59                   	pop    ecx
c000e7ed:	5e                   	pop    esi
c000e7ee:	6a 01                	push   0x1
c000e7f0:	53                   	push   ebx
c000e7f1:	e8 94 ff ff ff       	call   c000e78a <Computer::enableNMI(bool)>
c000e7f6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7fd:	e8 60 39 00 00       	call   c0012162 <operator new(unsigned long)>
c000e802:	89 04 24             	mov    DWORD PTR [esp],eax
c000e805:	89 c6                	mov    esi,eax
c000e807:	e8 96 90 00 00       	call   c00178a2 <CPU::CPU()>
c000e80c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e812:	58                   	pop    eax
c000e813:	5a                   	pop    edx
c000e814:	56                   	push   esi
c000e815:	53                   	push   ebx
c000e816:	e8 41 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e81b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e821:	8b 10                	mov    edx,DWORD PTR [eax]
c000e823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e827:	6a 00                	push   0x0
c000e829:	6a 00                	push   0x0
c000e82b:	50                   	push   eax
c000e82c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e82f:	83 c4 20             	add    esp,0x20
c000e832:	e8 8d 53 00 00       	call   c0013bc4 <setupFPU()>
c000e837:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e83d:	85 c0                	test   eax,eax
c000e83f:	74 1f                	je     c000e860 <Computer::open(int, int, void*)+0xbe>
c000e841:	83 ec 08             	sub    esp,0x8
c000e844:	50                   	push   eax
c000e845:	53                   	push   ebx
c000e846:	e8 11 4e 00 00       	call   c001365c <Device::addChild(Device*)>
c000e84b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e851:	8b 10                	mov    edx,DWORD PTR [eax]
c000e853:	6a 00                	push   0x0
c000e855:	6a 00                	push   0x0
c000e857:	6a 00                	push   0x0
c000e859:	50                   	push   eax
c000e85a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e85d:	83 c4 20             	add    esp,0x20
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	68 d2 e1 00 c0       	push   0xc000e1d2
c000e868:	e8 1f d3 00 00       	call   c001bb8c <setupMultitasking(void (*)())>
c000e86d:	83 c4 14             	add    esp,0x14
c000e870:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e875:	5b                   	pop    ebx
c000e876:	5e                   	pop    esi
c000e877:	c3                   	ret    

c000e878 <Computer::disableNMI()>:
c000e878:	6a 00                	push   0x0
c000e87a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e87e:	e8 07 ff ff ff       	call   c000e78a <Computer::enableNMI(bool)>
c000e883:	58                   	pop    eax
c000e884:	5a                   	pop    edx
c000e885:	c3                   	ret    

c000e886 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e88a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e891:	19 c0                	sbb    eax,eax
c000e893:	83 e0 80             	and    eax,0xffffff80
c000e896:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e89a:	e6 70                	out    0x70,al
c000e89c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a0:	e6 71                	out    0x71,al
c000e8a2:	c3                   	ret    
c000e8a3:	90                   	nop

c000e8a4 <Computer::handleNMI()>:
c000e8a4:	56                   	push   esi
c000e8a5:	53                   	push   ebx
c000e8a6:	83 ec 10             	sub    esp,0x10
c000e8a9:	e4 92                	in     al,0x92
c000e8ab:	89 c6                	mov    esi,eax
c000e8ad:	e4 61                	in     al,0x61
c000e8af:	68 b0 5b 02 c0       	push   0xc0025bb0
c000e8b4:	88 c3                	mov    bl,al
c000e8b6:	e8 96 39 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	83 e6 10             	and    esi,0x10
c000e8c1:	75 0d                	jne    c000e8d0 <Computer::handleNMI()+0x2c>
c000e8c3:	f6 c3 40             	test   bl,0x40
c000e8c6:	75 1d                	jne    c000e8e5 <Computer::handleNMI()+0x41>
c000e8c8:	84 db                	test   bl,bl
c000e8ca:	78 2d                	js     c000e8f9 <Computer::handleNMI()+0x55>
c000e8cc:	58                   	pop    eax
c000e8cd:	5b                   	pop    ebx
c000e8ce:	5e                   	pop    esi
c000e8cf:	c3                   	ret    
c000e8d0:	83 ec 0c             	sub    esp,0xc
c000e8d3:	68 c1 5b 02 c0       	push   0xc0025bc1
c000e8d8:	e8 31 a1 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000e8dd:	83 c4 10             	add    esp,0x10
c000e8e0:	f6 c3 40             	test   bl,0x40
c000e8e3:	74 e3                	je     c000e8c8 <Computer::handleNMI()+0x24>
c000e8e5:	83 ec 0c             	sub    esp,0xc
c000e8e8:	68 ce 5b 02 c0       	push   0xc0025bce
c000e8ed:	e8 1c a1 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000e8f2:	83 c4 10             	add    esp,0x10
c000e8f5:	84 db                	test   bl,bl
c000e8f7:	79 d3                	jns    c000e8cc <Computer::handleNMI()+0x28>
c000e8f9:	c7 44 24 10 d8 5b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025bd8
c000e901:	5a                   	pop    edx
c000e902:	5b                   	pop    ebx
c000e903:	5e                   	pop    esi
c000e904:	e9 05 a1 00 00       	jmp    c0018a0e <Krnl::panic(char const*)>
c000e909:	90                   	nop

c000e90a <Computer::setDiskActivityLight(int, bool)>:
c000e90a:	56                   	push   esi
c000e90b:	53                   	push   ebx
c000e90c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e910:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e915:	77 1b                	ja     c000e932 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e917:	e4 92                	in     al,0x92
c000e919:	bb 40 00 00 00       	mov    ebx,0x40
c000e91e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e922:	89 da                	mov    edx,ebx
c000e924:	d3 e2                	shl    edx,cl
c000e926:	89 f1                	mov    ecx,esi
c000e928:	f7 d2                	not    edx
c000e92a:	d3 e3                	shl    ebx,cl
c000e92c:	21 d0                	and    eax,edx
c000e92e:	09 d8                	or     eax,ebx
c000e930:	e6 92                	out    0x92,al
c000e932:	5b                   	pop    ebx
c000e933:	5e                   	pop    esi
c000e934:	c3                   	ret    
c000e935:	90                   	nop

c000e936 <GDTEntry::setBase(unsigned int)>:
c000e936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e93e:	89 c1                	mov    ecx,eax
c000e940:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e944:	c1 e9 10             	shr    ecx,0x10
c000e947:	c1 e8 18             	shr    eax,0x18
c000e94a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e94d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e950:	c3                   	ret    
c000e951:	90                   	nop

c000e952 <GDTEntry::setLimit(unsigned int)>:
c000e952:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e95a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e95d:	66 89 01             	mov    WORD PTR [ecx],ax
c000e960:	83 e2 f0             	and    edx,0xfffffff0
c000e963:	c1 e8 10             	shr    eax,0x10
c000e966:	83 e0 0f             	and    eax,0xf
c000e969:	09 d0                	or     eax,edx
c000e96b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e96e:	c3                   	ret    
c000e96f:	90                   	nop

c000e970 <GDT::GDT()>:
c000e970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e97a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e984:	90                   	nop
c000e985:	c3                   	ret    

c000e986 <GDT::addEntry(GDTEntry)>:
c000e986:	53                   	push   ebx
c000e987:	83 ec 0c             	sub    esp,0xc
c000e98a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e98e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e990:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e997:	52                   	push   edx
c000e998:	50                   	push   eax
c000e999:	68 14 5c 02 c0       	push   0xc0025c14
c000e99e:	e8 ae 38 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000e9a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e9a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9a9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9ad:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e9b1:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e9b5:	8d 50 01             	lea    edx,[eax+0x1]
c000e9b8:	c1 e0 03             	shl    eax,0x3
c000e9bb:	89 13                	mov    DWORD PTR [ebx],edx
c000e9bd:	83 c4 18             	add    esp,0x18
c000e9c0:	5b                   	pop    ebx
c000e9c1:	c3                   	ret    

c000e9c2 <GDT::getNumberOfEntries()>:
c000e9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c8:	c3                   	ret    
c000e9c9:	90                   	nop

c000e9ca <GDT::flush()>:
c000e9ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9d0:	83 c0 04             	add    eax,0x4
c000e9d3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9da:	a3 72 94 02 c0       	mov    ds:0xc0029472,eax
c000e9df:	66 89 15 70 94 02 c0 	mov    WORD PTR ds:0xc0029470,dx
c000e9e6:	e9 26 1a ff ff       	jmp    c0000411 <loadGDT>
c000e9eb:	90                   	nop

c000e9ec <GDT::setup()>:
c000e9ec:	55                   	push   ebp
c000e9ed:	57                   	push   edi
c000e9ee:	56                   	push   esi
c000e9ef:	53                   	push   ebx
c000e9f0:	83 ec 3c             	sub    esp,0x3c
c000e9f3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9f7:	6a 00                	push   0x0
c000e9f9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9fd:	53                   	push   ebx
c000e9fe:	e8 33 ff ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c000ea03:	6a 00                	push   0x0
c000ea05:	53                   	push   ebx
c000ea06:	e8 47 ff ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c000ea0b:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ea13:	6a 00                	push   0x0
c000ea15:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ea19:	53                   	push   ebx
c000ea1a:	e8 17 ff ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c000ea1f:	68 ff ff ff 00       	push   0xffffff
c000ea24:	53                   	push   ebx
c000ea25:	e8 28 ff ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c000ea2a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea2e:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea33:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea38:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea3c:	83 c4 20             	add    esp,0x20
c000ea3f:	6a 00                	push   0x0
c000ea41:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea45:	53                   	push   ebx
c000ea46:	e8 eb fe ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c000ea4b:	68 ff ff ff 00       	push   0xffffff
c000ea50:	53                   	push   ebx
c000ea51:	e8 fc fe ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c000ea56:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea5e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea62:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea66:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea6a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea6f:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea74:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea78:	89 d8                	mov    eax,ebx
c000ea7a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea7e:	80 cc 60             	or     ah,0x60
c000ea81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea85:	83 c4 0c             	add    esp,0xc
c000ea88:	89 f8                	mov    eax,edi
c000ea8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea8e:	80 cc 60             	or     ah,0x60
c000ea91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea95:	89 c7                	mov    edi,eax
c000ea97:	55                   	push   ebp
c000ea98:	e8 e9 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000ea9d:	83 c4 0c             	add    esp,0xc
c000eaa0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaa8:	55                   	push   ebp
c000eaa9:	e8 d8 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000eaae:	83 c4 0c             	add    esp,0xc
c000eab1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eab5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eab9:	55                   	push   ebp
c000eaba:	e8 c7 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000eabf:	83 c4 0c             	add    esp,0xc
c000eac2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eac6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eaca:	53                   	push   ebx
c000eacb:	51                   	push   ecx
c000eacc:	55                   	push   ebp
c000eacd:	e8 b4 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000ead2:	83 c4 0c             	add    esp,0xc
c000ead5:	57                   	push   edi
c000ead6:	56                   	push   esi
c000ead7:	55                   	push   ebp
c000ead8:	e8 a9 fe ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c000eadd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eae0:	e8 e5 fe ff ff       	call   c000e9ca <GDT::flush()>
c000eae5:	83 c4 4c             	add    esp,0x4c
c000eae8:	5b                   	pop    ebx
c000eae9:	5e                   	pop    esi
c000eaea:	5f                   	pop    edi
c000eaeb:	5d                   	pop    ebp
c000eaec:	c3                   	ret    

c000eaed <idleFunction(void*)>:
c000eaed:	53                   	push   ebx
c000eaee:	83 ec 08             	sub    esp,0x8
c000eaf1:	e8 6e ce 00 00       	call   c001b964 <unlockScheduler()>
c000eaf6:	e8 93 8d 00 00       	call   c001788e <thisCPU()>
c000eafb:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eb02:	74 41                	je     c000eb45 <idleFunction(void*)+0x58>
c000eb04:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c000eb09:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb10:	74 33                	je     c000eb45 <idleFunction(void*)+0x58>
c000eb12:	31 db                	xor    ebx,ebx
c000eb14:	52                   	push   edx
c000eb15:	52                   	push   edx
c000eb16:	68 e1 00 00 00       	push   0xe1
c000eb1b:	50                   	push   eax
c000eb1c:	e8 df fb ff ff       	call   c000e700 <Computer::rdmsr(unsigned int)>
c000eb21:	53                   	push   ebx
c000eb22:	83 e0 02             	and    eax,0x2
c000eb25:	50                   	push   eax
c000eb26:	68 e1 00 00 00       	push   0xe1
c000eb2b:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c000eb31:	e8 f6 fb ff ff       	call   c000e72c <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb36:	83 c4 20             	add    esp,0x20
c000eb39:	e8 f0 16 ff ff       	call   c000022e <doTPAUSE>
c000eb3e:	e8 3d 56 01 00       	call   c0024180 <idleCommon()>
c000eb43:	eb f4                	jmp    c000eb39 <idleFunction(void*)+0x4c>
c000eb45:	fb                   	sti    
c000eb46:	f4                   	hlt    
c000eb47:	e8 34 56 01 00       	call   c0024180 <idleCommon()>
c000eb4c:	eb f7                	jmp    c000eb45 <idleFunction(void*)+0x58>

c000eb4e <IDTEntry::IDTEntry(bool)>:
c000eb4e:	83 ec 04             	sub    esp,0x4
c000eb51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb55:	88 04 24             	mov    BYTE PTR [esp],al
c000eb58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb5c:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb66:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb71:	83 e2 f0             	and    edx,0xfffffff0
c000eb74:	83 ca 0e             	or     edx,0xe
c000eb77:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb81:	83 e2 ef             	and    edx,0xffffffef
c000eb84:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb87:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb8b:	74 04                	je     c000eb91 <IDTEntry::IDTEntry(bool)+0x43>
c000eb8d:	b2 03                	mov    dl,0x3
c000eb8f:	eb 02                	jmp    c000eb93 <IDTEntry::IDTEntry(bool)+0x45>
c000eb91:	b2 00                	mov    dl,0x0
c000eb93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb97:	83 e2 03             	and    edx,0x3
c000eb9a:	88 d1                	mov    cl,dl
c000eb9c:	c1 e1 05             	shl    ecx,0x5
c000eb9f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eba2:	83 e2 9f             	and    edx,0xffffff9f
c000eba5:	09 ca                	or     edx,ecx
c000eba7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebae:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebb1:	83 ca 80             	or     edx,0xffffff80
c000ebb4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebb7:	90                   	nop
c000ebb8:	83 c4 04             	add    esp,0x4
c000ebbb:	c3                   	ret    

c000ebbc <IDTEntry::setOffset(unsigned int)>:
c000ebbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc4:	66 89 02             	mov    WORD PTR [edx],ax
c000ebc7:	c1 e8 10             	shr    eax,0x10
c000ebca:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebce:	c3                   	ret    
c000ebcf:	90                   	nop

c000ebd0 <IDT::IDT()>:
c000ebd0:	90                   	nop
c000ebd1:	c3                   	ret    

c000ebd2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd6:	83 c0 30             	add    eax,0x30
c000ebd9:	c3                   	ret    

c000ebda <IDT::addEntry(IDTEntry, int)>:
c000ebda:	53                   	push   ebx
c000ebdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebeb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebee:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebf2:	5b                   	pop    ebx
c000ebf3:	c3                   	ret    

c000ebf4 <IDT::addEntry(int, void (*)(), bool)>:
c000ebf4:	53                   	push   ebx
c000ebf5:	83 ec 10             	sub    esp,0x10
c000ebf8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebfd:	50                   	push   eax
c000ebfe:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ec02:	53                   	push   ebx
c000ec03:	e8 46 ff ff ff       	call   c000eb4e <IDTEntry::IDTEntry(bool)>
c000ec08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ec0c:	53                   	push   ebx
c000ec0d:	e8 aa ff ff ff       	call   c000ebbc <IDTEntry::setOffset(unsigned int)>
c000ec12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec22:	e8 b3 ff ff ff       	call   c000ebda <IDT::addEntry(IDTEntry, int)>
c000ec27:	83 c4 30             	add    esp,0x30
c000ec2a:	5b                   	pop    ebx
c000ec2b:	c3                   	ret    

c000ec2c <IDT::flush()>:
c000ec2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec30:	66 c7 05 78 94 02 c0 ff 07 	mov    WORD PTR ds:0xc0029478,0x7ff
c000ec39:	a3 7a 94 02 c0       	mov    ds:0xc002947a,eax
c000ec3e:	0f 01 1d 78 94 02 c0 	lidtd  ds:0xc0029478
c000ec45:	c3                   	ret    

c000ec46 <IDT::setup()>:
c000ec46:	57                   	push   edi
c000ec47:	56                   	push   esi
c000ec48:	53                   	push   ebx
c000ec49:	83 ec 10             	sub    esp,0x10
c000ec4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec50:	6a 00                	push   0x0
c000ec52:	68 31 04 00 c0       	push   0xc0000431
c000ec57:	6a 00                	push   0x0
c000ec59:	53                   	push   ebx
c000ec5a:	e8 95 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec5f:	6a 00                	push   0x0
c000ec61:	68 41 04 00 c0       	push   0xc0000441
c000ec66:	6a 01                	push   0x1
c000ec68:	53                   	push   ebx
c000ec69:	e8 86 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec6e:	83 c4 20             	add    esp,0x20
c000ec71:	6a 00                	push   0x0
c000ec73:	68 4b 04 00 c0       	push   0xc000044b
c000ec78:	6a 02                	push   0x2
c000ec7a:	53                   	push   ebx
c000ec7b:	e8 74 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec80:	6a 00                	push   0x0
c000ec82:	68 55 04 00 c0       	push   0xc0000455
c000ec87:	6a 03                	push   0x3
c000ec89:	53                   	push   ebx
c000ec8a:	e8 65 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ec8f:	83 c4 20             	add    esp,0x20
c000ec92:	6a 00                	push   0x0
c000ec94:	68 5f 04 00 c0       	push   0xc000045f
c000ec99:	6a 04                	push   0x4
c000ec9b:	53                   	push   ebx
c000ec9c:	e8 53 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eca1:	6a 00                	push   0x0
c000eca3:	68 69 04 00 c0       	push   0xc0000469
c000eca8:	6a 05                	push   0x5
c000ecaa:	53                   	push   ebx
c000ecab:	e8 44 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecb0:	83 c4 20             	add    esp,0x20
c000ecb3:	6a 00                	push   0x0
c000ecb5:	68 73 04 00 c0       	push   0xc0000473
c000ecba:	6a 06                	push   0x6
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 32 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecc2:	6a 00                	push   0x0
c000ecc4:	68 7d 04 00 c0       	push   0xc000047d
c000ecc9:	6a 07                	push   0x7
c000eccb:	53                   	push   ebx
c000eccc:	e8 23 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecd1:	83 c4 20             	add    esp,0x20
c000ecd4:	6a 00                	push   0x0
c000ecd6:	68 87 04 00 c0       	push   0xc0000487
c000ecdb:	6a 08                	push   0x8
c000ecdd:	53                   	push   ebx
c000ecde:	e8 11 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ece3:	6a 00                	push   0x0
c000ece5:	68 8f 04 00 c0       	push   0xc000048f
c000ecea:	6a 09                	push   0x9
c000ecec:	53                   	push   ebx
c000eced:	e8 02 ff ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ecf2:	83 c4 20             	add    esp,0x20
c000ecf5:	6a 00                	push   0x0
c000ecf7:	68 99 04 00 c0       	push   0xc0000499
c000ecfc:	6a 0a                	push   0xa
c000ecfe:	53                   	push   ebx
c000ecff:	e8 f0 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed04:	6a 00                	push   0x0
c000ed06:	68 a1 04 00 c0       	push   0xc00004a1
c000ed0b:	6a 0b                	push   0xb
c000ed0d:	53                   	push   ebx
c000ed0e:	e8 e1 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed13:	83 c4 20             	add    esp,0x20
c000ed16:	6a 00                	push   0x0
c000ed18:	68 a9 04 00 c0       	push   0xc00004a9
c000ed1d:	6a 0c                	push   0xc
c000ed1f:	53                   	push   ebx
c000ed20:	e8 cf fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed25:	6a 00                	push   0x0
c000ed27:	68 b1 04 00 c0       	push   0xc00004b1
c000ed2c:	6a 0d                	push   0xd
c000ed2e:	53                   	push   ebx
c000ed2f:	e8 c0 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed34:	83 c4 20             	add    esp,0x20
c000ed37:	6a 00                	push   0x0
c000ed39:	68 b9 04 00 c0       	push   0xc00004b9
c000ed3e:	6a 0e                	push   0xe
c000ed40:	53                   	push   ebx
c000ed41:	e8 ae fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed46:	6a 00                	push   0x0
c000ed48:	68 c1 04 00 c0       	push   0xc00004c1
c000ed4d:	6a 0f                	push   0xf
c000ed4f:	53                   	push   ebx
c000ed50:	e8 9f fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed55:	83 c4 20             	add    esp,0x20
c000ed58:	6a 00                	push   0x0
c000ed5a:	68 cb 04 00 c0       	push   0xc00004cb
c000ed5f:	6a 10                	push   0x10
c000ed61:	53                   	push   ebx
c000ed62:	e8 8d fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed67:	6a 00                	push   0x0
c000ed69:	68 d5 04 00 c0       	push   0xc00004d5
c000ed6e:	6a 11                	push   0x11
c000ed70:	53                   	push   ebx
c000ed71:	e8 7e fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed76:	83 c4 20             	add    esp,0x20
c000ed79:	6a 00                	push   0x0
c000ed7b:	68 df 04 00 c0       	push   0xc00004df
c000ed80:	6a 12                	push   0x12
c000ed82:	53                   	push   ebx
c000ed83:	e8 6c fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed88:	6a 01                	push   0x1
c000ed8a:	68 e9 04 00 c0       	push   0xc00004e9
c000ed8f:	6a 60                	push   0x60
c000ed91:	53                   	push   ebx
c000ed92:	e8 5d fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ed97:	83 c4 20             	add    esp,0x20
c000ed9a:	6a 00                	push   0x0
c000ed9c:	68 f3 04 00 c0       	push   0xc00004f3
c000eda1:	6a 20                	push   0x20
c000eda3:	53                   	push   ebx
c000eda4:	e8 4b fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eda9:	6a 00                	push   0x0
c000edab:	68 fd 04 00 c0       	push   0xc00004fd
c000edb0:	6a 21                	push   0x21
c000edb2:	53                   	push   ebx
c000edb3:	e8 3c fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	68 07 05 00 c0       	push   0xc0000507
c000edc2:	6a 22                	push   0x22
c000edc4:	53                   	push   ebx
c000edc5:	e8 2a fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edca:	6a 00                	push   0x0
c000edcc:	68 11 05 00 c0       	push   0xc0000511
c000edd1:	6a 23                	push   0x23
c000edd3:	53                   	push   ebx
c000edd4:	e8 1b fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edd9:	83 c4 20             	add    esp,0x20
c000eddc:	6a 00                	push   0x0
c000edde:	68 1b 05 00 c0       	push   0xc000051b
c000ede3:	6a 24                	push   0x24
c000ede5:	53                   	push   ebx
c000ede6:	e8 09 fe ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edeb:	6a 00                	push   0x0
c000eded:	68 25 05 00 c0       	push   0xc0000525
c000edf2:	6a 25                	push   0x25
c000edf4:	53                   	push   ebx
c000edf5:	e8 fa fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000edfa:	83 c4 20             	add    esp,0x20
c000edfd:	6a 00                	push   0x0
c000edff:	68 2f 05 00 c0       	push   0xc000052f
c000ee04:	6a 26                	push   0x26
c000ee06:	53                   	push   ebx
c000ee07:	e8 e8 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee0c:	6a 00                	push   0x0
c000ee0e:	68 39 05 00 c0       	push   0xc0000539
c000ee13:	6a 27                	push   0x27
c000ee15:	53                   	push   ebx
c000ee16:	e8 d9 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee1b:	83 c4 20             	add    esp,0x20
c000ee1e:	6a 00                	push   0x0
c000ee20:	68 43 05 00 c0       	push   0xc0000543
c000ee25:	6a 28                	push   0x28
c000ee27:	53                   	push   ebx
c000ee28:	e8 c7 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee2d:	6a 00                	push   0x0
c000ee2f:	68 4d 05 00 c0       	push   0xc000054d
c000ee34:	6a 29                	push   0x29
c000ee36:	53                   	push   ebx
c000ee37:	e8 b8 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee3c:	83 c4 20             	add    esp,0x20
c000ee3f:	6a 00                	push   0x0
c000ee41:	68 57 05 00 c0       	push   0xc0000557
c000ee46:	6a 2a                	push   0x2a
c000ee48:	53                   	push   ebx
c000ee49:	e8 a6 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee4e:	6a 00                	push   0x0
c000ee50:	68 61 05 00 c0       	push   0xc0000561
c000ee55:	6a 2b                	push   0x2b
c000ee57:	53                   	push   ebx
c000ee58:	e8 97 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee5d:	83 c4 20             	add    esp,0x20
c000ee60:	6a 00                	push   0x0
c000ee62:	68 6b 05 00 c0       	push   0xc000056b
c000ee67:	6a 2c                	push   0x2c
c000ee69:	53                   	push   ebx
c000ee6a:	e8 85 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee6f:	6a 00                	push   0x0
c000ee71:	68 75 05 00 c0       	push   0xc0000575
c000ee76:	6a 2d                	push   0x2d
c000ee78:	53                   	push   ebx
c000ee79:	e8 76 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	68 7f 05 00 c0       	push   0xc000057f
c000ee88:	6a 2e                	push   0x2e
c000ee8a:	53                   	push   ebx
c000ee8b:	e8 64 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee90:	6a 00                	push   0x0
c000ee92:	68 89 05 00 c0       	push   0xc0000589
c000ee97:	6a 2f                	push   0x2f
c000ee99:	53                   	push   ebx
c000ee9a:	e8 55 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ee9f:	83 c4 20             	add    esp,0x20
c000eea2:	6a 00                	push   0x0
c000eea4:	68 93 05 00 c0       	push   0xc0000593
c000eea9:	6a 30                	push   0x30
c000eeab:	53                   	push   ebx
c000eeac:	e8 43 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eeb1:	6a 00                	push   0x0
c000eeb3:	68 9d 05 00 c0       	push   0xc000059d
c000eeb8:	6a 31                	push   0x31
c000eeba:	53                   	push   ebx
c000eebb:	e8 34 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eec0:	83 c4 20             	add    esp,0x20
c000eec3:	6a 00                	push   0x0
c000eec5:	68 a7 05 00 c0       	push   0xc00005a7
c000eeca:	6a 32                	push   0x32
c000eecc:	53                   	push   ebx
c000eecd:	e8 22 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eed2:	6a 00                	push   0x0
c000eed4:	68 b1 05 00 c0       	push   0xc00005b1
c000eed9:	6a 33                	push   0x33
c000eedb:	53                   	push   ebx
c000eedc:	e8 13 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eee1:	83 c4 20             	add    esp,0x20
c000eee4:	6a 00                	push   0x0
c000eee6:	68 bb 05 00 c0       	push   0xc00005bb
c000eeeb:	6a 34                	push   0x34
c000eeed:	53                   	push   ebx
c000eeee:	e8 01 fd ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000eef3:	6a 00                	push   0x0
c000eef5:	68 c5 05 00 c0       	push   0xc00005c5
c000eefa:	6a 35                	push   0x35
c000eefc:	53                   	push   ebx
c000eefd:	e8 f2 fc ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ef02:	83 c4 20             	add    esp,0x20
c000ef05:	6a 00                	push   0x0
c000ef07:	68 cf 05 00 c0       	push   0xc00005cf
c000ef0c:	6a 36                	push   0x36
c000ef0e:	53                   	push   ebx
c000ef0f:	e8 e0 fc ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ef14:	6a 00                	push   0x0
c000ef16:	68 d9 05 00 c0       	push   0xc00005d9
c000ef1b:	6a 37                	push   0x37
c000ef1d:	53                   	push   ebx
c000ef1e:	e8 d1 fc ff ff       	call   c000ebf4 <IDT::addEntry(int, void (*)(), bool)>
c000ef23:	83 c4 20             	add    esp,0x20
c000ef26:	e8 e4 24 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000ef2b:	52                   	push   edx
c000ef2c:	6a 03                	push   0x3
c000ef2e:	6a 02                	push   0x2
c000ef30:	50                   	push   eax
c000ef31:	e8 1c 2b 00 00       	call   c0011a52 <VAS::allocatePages(int, int)>
c000ef36:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef3d:	89 c6                	mov    esi,eax
c000ef3f:	e8 1e 32 00 00       	call   c0012162 <operator new(unsigned long)>
c000ef44:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef4a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef4d:	89 c7                	mov    edi,eax
c000ef4f:	e8 c0 1c 00 00       	call   c0010c14 <TSS::TSS()>
c000ef54:	83 c4 0c             	add    esp,0xc
c000ef57:	68 87 04 00 c0       	push   0xc0000487
c000ef5c:	56                   	push   esi
c000ef5d:	57                   	push   edi
c000ef5e:	e8 f1 1c 00 00       	call   c0010c54 <TSS::setup(unsigned long, unsigned long)>
c000ef63:	59                   	pop    ecx
c000ef64:	89 c6                	mov    esi,eax
c000ef66:	5f                   	pop    edi
c000ef67:	6a 00                	push   0x0
c000ef69:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef6d:	50                   	push   eax
c000ef6e:	e8 db fb ff ff       	call   c000eb4e <IDTEntry::IDTEntry(bool)>
c000ef73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef77:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef7c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef83:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef8d:	80 ce 05             	or     dh,0x5
c000ef90:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef9b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efa1:	e8 86 fc ff ff       	call   c000ec2c <IDT::flush()>
c000efa6:	83 c4 20             	add    esp,0x20
c000efa9:	5b                   	pop    ebx
c000efaa:	5e                   	pop    esi
c000efab:	5f                   	pop    edi
c000efac:	c3                   	ret    

c000efad <sbrk>:
c000efad:	55                   	push   ebp
c000efae:	57                   	push   edi
c000efaf:	56                   	push   esi
c000efb0:	53                   	push   ebx
c000efb1:	83 ec 1c             	sub    esp,0x1c
c000efb4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000efb8:	85 db                	test   ebx,ebx
c000efba:	74 37                	je     c000eff3 <sbrk+0x46>
c000efbc:	78 3f                	js     c000effd <sbrk+0x50>
c000efbe:	e8 cb 88 00 00       	call   c001788e <thisCPU()>
c000efc3:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efc9:	83 e0 01             	and    eax,0x1
c000efcc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efd0:	a1 10 84 02 c0       	mov    eax,ds:0xc0028410
c000efd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efd9:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efdf:	89 d8                	mov    eax,ebx
c000efe1:	78 35                	js     c000f018 <sbrk+0x6b>
c000efe3:	c1 f8 0c             	sar    eax,0xc
c000efe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efea:	89 c7                	mov    edi,eax
c000efec:	be 00 00 00 00       	mov    esi,0x0
c000eff1:	eb 3c                	jmp    c000f02f <sbrk+0x82>
c000eff3:	a1 10 84 02 c0       	mov    eax,ds:0xc0028410
c000eff8:	e9 ad 00 00 00       	jmp    c000f0aa <sbrk+0xfd>
c000effd:	83 ec 08             	sub    esp,0x8
c000f000:	53                   	push   ebx
c000f001:	68 30 5c 02 c0       	push   0xc0025c30
c000f006:	e8 46 32 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f00b:	83 c4 10             	add    esp,0x10
c000f00e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f013:	e9 92 00 00 00       	jmp    c000f0aa <sbrk+0xfd>
c000f018:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f01e:	eb c3                	jmp    c000efe3 <sbrk+0x36>
c000f020:	81 05 10 84 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0028410,0x1000
c000f02a:	46                   	inc    esi
c000f02b:	39 f7                	cmp    edi,esi
c000f02d:	74 34                	je     c000f063 <sbrk+0xb6>
c000f02f:	e8 db 23 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f034:	89 c3                	mov    ebx,eax
c000f036:	8b 2d 10 84 02 c0    	mov    ebp,DWORD PTR ds:0xc0028410
c000f03c:	e8 c9 06 00 00       	call   c000f70a <Phys::allocatePage()>
c000f041:	68 01 04 00 00       	push   0x401
c000f046:	55                   	push   ebp
c000f047:	50                   	push   eax
c000f048:	53                   	push   ebx
c000f049:	e8 04 29 00 00       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f04e:	83 c4 10             	add    esp,0x10
c000f051:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f056:	74 c8                	je     c000f020 <sbrk+0x73>
c000f058:	8b 1d 10 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028410
c000f05e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f061:	eb bd                	jmp    c000f020 <sbrk+0x73>
c000f063:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f068:	74 48                	je     c000f0b2 <sbrk+0x105>
c000f06a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f06e:	89 d3                	mov    ebx,edx
c000f070:	c1 eb 0a             	shr    ebx,0xa
c000f073:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f079:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f07f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f083:	c1 e0 0c             	shl    eax,0xc
c000f086:	01 d0                	add    eax,edx
c000f088:	c1 e8 0a             	shr    eax,0xa
c000f08b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f090:	2d 00 00 40 00       	sub    eax,0x400000
c000f095:	39 c3                	cmp    ebx,eax
c000f097:	77 0d                	ja     c000f0a6 <sbrk+0xf9>
c000f099:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f09c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f0a2:	39 d8                	cmp    eax,ebx
c000f0a4:	73 f3                	jae    c000f099 <sbrk+0xec>
c000f0a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0aa:	83 c4 1c             	add    esp,0x1c
c000f0ad:	5b                   	pop    ebx
c000f0ae:	5e                   	pop    esi
c000f0af:	5f                   	pop    edi
c000f0b0:	5d                   	pop    ebp
c000f0b1:	c3                   	ret    
c000f0b2:	e8 de 50 01 00       	call   c0024195 <CPU::readCR3()>
c000f0b7:	83 ec 0c             	sub    esp,0xc
c000f0ba:	50                   	push   eax
c000f0bb:	e8 e7 50 01 00       	call   c00241a7 <CPU::writeCR3(unsigned long)>
c000f0c0:	83 c4 10             	add    esp,0x10
c000f0c3:	eb e1                	jmp    c000f0a6 <sbrk+0xf9>

c000f0c5 <mmap>:
c000f0c5:	83 ec 18             	sub    esp,0x18
c000f0c8:	68 60 5c 02 c0       	push   0xc0025c60
c000f0cd:	e8 3c 99 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000f0d2:	b8 00 00 00 00       	mov    eax,0x0
c000f0d7:	83 c4 1c             	add    esp,0x1c
c000f0da:	c3                   	ret    

c000f0db <munmap>:
c000f0db:	83 ec 18             	sub    esp,0x18
c000f0de:	68 65 5c 02 c0       	push   0xc0025c65
c000f0e3:	e8 26 99 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000f0e8:	b8 00 00 00 00       	mov    eax,0x0
c000f0ed:	83 c4 1c             	add    esp,0x1c
c000f0f0:	c3                   	ret    

c000f0f1 <liballoc_lock()>:
c000f0f1:	83 ec 0c             	sub    esp,0xc
c000f0f4:	e8 69 c8 00 00       	call   c001b962 <lockScheduler()>
c000f0f9:	b8 00 00 00 00       	mov    eax,0x0
c000f0fe:	83 c4 0c             	add    esp,0xc
c000f101:	c3                   	ret    

c000f102 <liballoc_unlock()>:
c000f102:	83 ec 0c             	sub    esp,0xc
c000f105:	e8 5a c8 00 00       	call   c001b964 <unlockScheduler()>
c000f10a:	b8 00 00 00 00       	mov    eax,0x0
c000f10f:	83 c4 0c             	add    esp,0xc
c000f112:	c3                   	ret    

c000f113 <liballoc_alloc(int)>:
c000f113:	83 ec 0c             	sub    esp,0xc
c000f116:	e8 f4 22 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f11b:	83 ec 04             	sub    esp,0x4
c000f11e:	6a 01                	push   0x1
c000f120:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f124:	50                   	push   eax
c000f125:	e8 28 29 00 00       	call   c0011a52 <VAS::allocatePages(int, int)>
c000f12a:	83 c4 1c             	add    esp,0x1c
c000f12d:	c3                   	ret    

c000f12e <liballoc_free(void*, int)>:
c000f12e:	83 ec 0c             	sub    esp,0xc
c000f131:	e8 d9 22 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000f136:	83 ec 08             	sub    esp,0x8
c000f139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f13d:	50                   	push   eax
c000f13e:	e8 b9 25 00 00       	call   c00116fc <VAS::freeAllocatedPages(unsigned long)>
c000f143:	b8 00 00 00 00       	mov    eax,0x0
c000f148:	83 c4 1c             	add    esp,0x1c
c000f14b:	c3                   	ret    

c000f14c <realloc>:
c000f14c:	83 ec 14             	sub    esp,0x14
c000f14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f153:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f157:	e8 03 23 ff ff       	call   c000145f <dlrealloc>
c000f15c:	83 c4 1c             	add    esp,0x1c
c000f15f:	c3                   	ret    

c000f160 <malloc>:
c000f160:	83 ec 18             	sub    esp,0x18
c000f163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f167:	e8 b6 1d ff ff       	call   c0000f22 <dlmalloc>
c000f16c:	83 c4 1c             	add    esp,0x1c
c000f16f:	c3                   	ret    

c000f170 <free>:
c000f170:	83 ec 18             	sub    esp,0x18
c000f173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f177:	e8 4b 1a ff ff       	call   c0000bc7 <dlfree>
c000f17c:	83 c4 1c             	add    esp,0x1c
c000f17f:	c3                   	ret    

c000f180 <rfree>:
c000f180:	83 ec 18             	sub    esp,0x18
c000f183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f187:	e8 e4 ff ff ff       	call   c000f170 <free>
c000f18c:	83 c4 1c             	add    esp,0x1c
c000f18f:	c3                   	ret    

c000f190 <calloc>:
c000f190:	56                   	push   esi
c000f191:	53                   	push   ebx
c000f192:	83 ec 10             	sub    esp,0x10
c000f195:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f199:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f19e:	53                   	push   ebx
c000f19f:	e8 bc ff ff ff       	call   c000f160 <malloc>
c000f1a4:	89 c6                	mov    esi,eax
c000f1a6:	83 c4 0c             	add    esp,0xc
c000f1a9:	53                   	push   ebx
c000f1aa:	6a 00                	push   0x0
c000f1ac:	50                   	push   eax
c000f1ad:	e8 34 15 ff ff       	call   c00006e6 <memset>
c000f1b2:	89 f0                	mov    eax,esi
c000f1b4:	83 c4 14             	add    esp,0x14
c000f1b7:	5b                   	pop    ebx
c000f1b8:	5e                   	pop    esi
c000f1b9:	c3                   	ret    

c000f1ba <hwTextMode_loadInData(VgaText*)>:
c000f1ba:	57                   	push   edi
c000f1bb:	56                   	push   esi
c000f1bc:	53                   	push   ebx
c000f1bd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1c1:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1c7:	85 c0                	test   eax,eax
c000f1c9:	7e 30                	jle    c000f1fb <hwTextMode_loadInData(VgaText*)+0x41>
c000f1cb:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1ce:	31 f6                	xor    esi,esi
c000f1d0:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1d3:	31 c0                	xor    eax,eax
c000f1d5:	c1 e1 05             	shl    ecx,0x5
c000f1d8:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1de:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1e2:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1e6:	40                   	inc    eax
c000f1e7:	83 f8 50             	cmp    eax,0x50
c000f1ea:	75 f2                	jne    c000f1de <hwTextMode_loadInData(VgaText*)+0x24>
c000f1ec:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1f2:	46                   	inc    esi
c000f1f3:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1f9:	7f d5                	jg     c000f1d0 <hwTextMode_loadInData(VgaText*)+0x16>
c000f1fb:	5b                   	pop    ebx
c000f1fc:	5e                   	pop    esi
c000f1fd:	5f                   	pop    edi
c000f1fe:	c3                   	ret    

c000f1ff <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1ff:	56                   	push   esi
c000f200:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f205:	53                   	push   ebx
c000f206:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f20a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f20e:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f214:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f21a:	c1 e0 04             	shl    eax,0x4
c000f21d:	83 e6 0f             	and    esi,0xf
c000f220:	0f b6 c0             	movzx  eax,al
c000f223:	41                   	inc    ecx
c000f224:	09 f0                	or     eax,esi
c000f226:	83 c2 02             	add    edx,0x2
c000f229:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f22d:	c1 e0 08             	shl    eax,0x8
c000f230:	09 f0                	or     eax,esi
c000f232:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f236:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f23c:	75 d0                	jne    c000f20e <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f23e:	5b                   	pop    ebx
c000f23f:	5e                   	pop    esi
c000f240:	c3                   	ret    

c000f241 <hwTextMode_showCursor(VgaText*, bool)>:
c000f241:	56                   	push   esi
c000f242:	53                   	push   ebx
c000f243:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f248:	74 38                	je     c000f282 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f24a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f24f:	b0 0a                	mov    al,0xa
c000f251:	89 da                	mov    edx,ebx
c000f253:	ee                   	out    dx,al
c000f254:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f259:	89 ca                	mov    edx,ecx
c000f25b:	ec                   	in     al,dx
c000f25c:	b2 0f                	mov    dl,0xf
c000f25e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f262:	83 e0 c0             	and    eax,0xffffffc0
c000f265:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f26b:	09 d0                	or     eax,edx
c000f26d:	89 ca                	mov    edx,ecx
c000f26f:	ee                   	out    dx,al
c000f270:	b0 0b                	mov    al,0xb
c000f272:	89 da                	mov    edx,ebx
c000f274:	ee                   	out    dx,al
c000f275:	89 ca                	mov    edx,ecx
c000f277:	ec                   	in     al,dx
c000f278:	83 e0 e0             	and    eax,0xffffffe0
c000f27b:	83 c8 0f             	or     eax,0xf
c000f27e:	ee                   	out    dx,al
c000f27f:	5b                   	pop    ebx
c000f280:	5e                   	pop    esi
c000f281:	c3                   	ret    
c000f282:	b0 0a                	mov    al,0xa
c000f284:	ba d4 03 00 00       	mov    edx,0x3d4
c000f289:	ee                   	out    dx,al
c000f28a:	b0 20                	mov    al,0x20
c000f28c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f291:	ee                   	out    dx,al
c000f292:	5b                   	pop    ebx
c000f293:	5e                   	pop    esi
c000f294:	c3                   	ret    

c000f295 <hwTextMode_update(VgaText*)>:
c000f295:	c3                   	ret    

c000f296 <hwTextMode_updateCursor(VgaText*)>:
c000f296:	56                   	push   esi
c000f297:	b9 19 00 00 00       	mov    ecx,0x19
c000f29c:	53                   	push   ebx
c000f29d:	be d4 03 00 00       	mov    esi,0x3d4
c000f2a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2a6:	89 f2                	mov    edx,esi
c000f2a8:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f2ae:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f2b4:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f2b7:	c1 e1 04             	shl    ecx,0x4
c000f2ba:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2c0:	b0 0f                	mov    al,0xf
c000f2c2:	ee                   	out    dx,al
c000f2c3:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2c8:	88 c8                	mov    al,cl
c000f2ca:	89 da                	mov    edx,ebx
c000f2cc:	ee                   	out    dx,al
c000f2cd:	b0 0e                	mov    al,0xe
c000f2cf:	89 f2                	mov    edx,esi
c000f2d1:	ee                   	out    dx,al
c000f2d2:	89 c8                	mov    eax,ecx
c000f2d4:	89 da                	mov    edx,ebx
c000f2d6:	66 c1 e8 08          	shr    ax,0x8
c000f2da:	ee                   	out    dx,al
c000f2db:	5b                   	pop    ebx
c000f2dc:	5e                   	pop    esi
c000f2dd:	c3                   	ret    

c000f2de <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2de:	ba da 03 00 00       	mov    edx,0x3da
c000f2e3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2e8:	75 18                	jne    c000f302 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2ea:	ec                   	in     al,dx
c000f2eb:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2f0:	b0 30                	mov    al,0x30
c000f2f2:	89 ca                	mov    edx,ecx
c000f2f4:	ee                   	out    dx,al
c000f2f5:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2fa:	ec                   	in     al,dx
c000f2fb:	83 c8 08             	or     eax,0x8
c000f2fe:	89 ca                	mov    edx,ecx
c000f300:	ee                   	out    dx,al
c000f301:	c3                   	ret    
c000f302:	ec                   	in     al,dx
c000f303:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f308:	b0 30                	mov    al,0x30
c000f30a:	89 ca                	mov    edx,ecx
c000f30c:	ee                   	out    dx,al
c000f30d:	ba c1 03 00 00       	mov    edx,0x3c1
c000f312:	ec                   	in     al,dx
c000f313:	83 e0 f7             	and    eax,0xfffffff7
c000f316:	89 ca                	mov    edx,ecx
c000f318:	ee                   	out    dx,al
c000f319:	c3                   	ret    

c000f31a <hwTextMode_scrollScreen(VgaText*)>:
c000f31a:	55                   	push   ebp
c000f31b:	bd 02 00 00 00       	mov    ebp,0x2
c000f320:	57                   	push   edi
c000f321:	56                   	push   esi
c000f322:	53                   	push   ebx
c000f323:	83 ec 1c             	sub    esp,0x1c
c000f326:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f32e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f332:	31 c0                	xor    eax,eax
c000f334:	eb 0b                	jmp    c000f341 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f336:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f33c:	74 57                	je     c000f395 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f33e:	43                   	inc    ebx
c000f33f:	89 f0                	mov    eax,esi
c000f341:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f347:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f34d:	88 13                	mov    BYTE PTR [ebx],dl
c000f34f:	8d 70 01             	lea    esi,[eax+0x1]
c000f352:	83 fd 18             	cmp    ebp,0x18
c000f355:	75 df                	jne    c000f336 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f357:	a8 01                	test   al,0x1
c000f359:	75 13                	jne    c000f36e <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f35b:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f35e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f364:	75 d8                	jne    c000f33e <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f366:	83 c4 1c             	add    esp,0x1c
c000f369:	5b                   	pop    ebx
c000f36a:	5e                   	pop    esi
c000f36b:	5f                   	pop    edi
c000f36c:	5d                   	pop    ebp
c000f36d:	c3                   	ret    
c000f36e:	83 ec 08             	sub    esp,0x8
c000f371:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f375:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f37c:	50                   	push   eax
c000f37d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f381:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f388:	50                   	push   eax
c000f389:	e8 66 0b 00 00       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000f38e:	83 c4 10             	add    esp,0x10
c000f391:	88 07                	mov    BYTE PTR [edi],al
c000f393:	eb c9                	jmp    c000f35e <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f395:	45                   	inc    ebp
c000f396:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f39e:	eb 8e                	jmp    c000f32e <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f3a0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f3a0:	56                   	push   esi
c000f3a1:	53                   	push   ebx
c000f3a2:	83 ec 0c             	sub    esp,0xc
c000f3a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f3a9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f3ad:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3b2:	50                   	push   eax
c000f3b3:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 36 0b 00 00       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000f3be:	5a                   	pop    edx
c000f3bf:	0f b6 c0             	movzx  eax,al
c000f3c2:	59                   	pop    ecx
c000f3c3:	50                   	push   eax
c000f3c4:	89 f0                	mov    eax,esi
c000f3c6:	0f be f0             	movsx  esi,al
c000f3c9:	56                   	push   esi
c000f3ca:	e8 cb 0b 00 00       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c000f3cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3d3:	ba 19 00 00 00       	mov    edx,0x19
c000f3d8:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3de:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3e1:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3e4:	c1 e1 04             	shl    ecx,0x4
c000f3e7:	c1 e2 04             	shl    edx,0x4
c000f3ea:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3ee:	01 ca                	add    edx,ecx
c000f3f0:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3f8:	83 c4 14             	add    esp,0x14
c000f3fb:	5b                   	pop    ebx
c000f3fc:	5e                   	pop    esi
c000f3fd:	c3                   	ret    

c000f3fe <setupTextMode()>:
c000f3fe:	c7 05 18 95 02 c0 de f2 00 c0 	mov    DWORD PTR ds:0xc0029518,0xc000f2de
c000f408:	c7 05 04 95 02 c0 ba f1 00 c0 	mov    DWORD PTR ds:0xc0029504,0xc000f1ba
c000f412:	c7 05 00 95 02 c0 ff f1 00 c0 	mov    DWORD PTR ds:0xc0029500,0xc000f1ff
c000f41c:	c7 05 0c 95 02 c0 1a f3 00 c0 	mov    DWORD PTR ds:0xc002950c,0xc000f31a
c000f426:	c7 05 14 95 02 c0 41 f2 00 c0 	mov    DWORD PTR ds:0xc0029514,0xc000f241
c000f430:	c7 05 08 95 02 c0 95 f2 00 c0 	mov    DWORD PTR ds:0xc0029508,0xc000f295
c000f43a:	c7 05 10 95 02 c0 96 f2 00 c0 	mov    DWORD PTR ds:0xc0029510,0xc000f296
c000f444:	c7 05 1c 95 02 c0 a0 f3 00 c0 	mov    DWORD PTR ds:0xc002951c,0xc000f3a0
c000f44e:	c3                   	ret    

c000f44f <kernel_main>:
c000f44f:	57                   	push   edi
c000f450:	bf f9 03 00 00       	mov    edi,0x3f9
c000f455:	56                   	push   esi
c000f456:	31 f6                	xor    esi,esi
c000f458:	53                   	push   ebx
c000f459:	83 ec 10             	sub    esp,0x10
c000f45c:	e8 ed 08 00 00       	call   c000fd4e <installVgaTextImplementation()>
c000f461:	e8 98 ff ff ff       	call   c000f3fe <setupTextMode()>
c000f466:	89 f0                	mov    eax,esi
c000f468:	89 fa                	mov    edx,edi
c000f46a:	ee                   	out    dx,al
c000f46b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f470:	b0 80                	mov    al,0x80
c000f472:	89 da                	mov    edx,ebx
c000f474:	ee                   	out    dx,al
c000f475:	b1 03                	mov    cl,0x3
c000f477:	ba f8 03 00 00       	mov    edx,0x3f8
c000f47c:	88 c8                	mov    al,cl
c000f47e:	ee                   	out    dx,al
c000f47f:	89 f0                	mov    eax,esi
c000f481:	89 fa                	mov    edx,edi
c000f483:	ee                   	out    dx,al
c000f484:	88 c8                	mov    al,cl
c000f486:	89 da                	mov    edx,ebx
c000f488:	ee                   	out    dx,al
c000f489:	b0 c7                	mov    al,0xc7
c000f48b:	ba fa 03 00 00       	mov    edx,0x3fa
c000f490:	ee                   	out    dx,al
c000f491:	b0 0b                	mov    al,0xb
c000f493:	ba fc 03 00 00       	mov    edx,0x3fc
c000f498:	ee                   	out    dx,al
c000f499:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f49e:	83 ec 0c             	sub    esp,0xc
c000f4a1:	05 ff 0f 00 00       	add    eax,0xfff
c000f4a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ab:	50                   	push   eax
c000f4ac:	e8 59 03 00 00       	call   c000f80a <Phys::physicalMemorySetup(unsigned int)>
c000f4b1:	e8 da 1e 00 00       	call   c0011390 <Virt::virtualMemorySetup()>
c000f4b6:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4c5:	75 0e                	jne    c000f4d5 <kernel_main+0x86>
c000f4c7:	89 d8                	mov    eax,ebx
c000f4c9:	25 48 03 00 00       	and    eax,0x348
c000f4ce:	3d 00 03 00 00       	cmp    eax,0x300
c000f4d3:	74 10                	je     c000f4e5 <kernel_main+0x96>
c000f4d5:	83 ec 0c             	sub    esp,0xc
c000f4d8:	68 87 71 02 c0       	push   0xc0027187
c000f4dd:	e8 2c 95 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000f4e2:	83 c4 10             	add    esp,0x10
c000f4e5:	83 ec 0c             	sub    esp,0xc
c000f4e8:	89 1d 80 94 02 c0    	mov    DWORD PTR ds:0xc0029480,ebx
c000f4ee:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 42 20 00 00       	call   c001153a <VAS::VAS()>
c000f4f8:	89 1d c4 95 02 c0    	mov    DWORD PTR ds:0xc00295c4,ebx
c000f4fe:	e8 1d 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f503:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f50a:	e8 53 2c 00 00       	call   c0012162 <operator new(unsigned long)>
c000f50f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f512:	89 c6                	mov    esi,eax
c000f514:	e8 7f ea ff ff       	call   c000df98 <Computer::Computer()>
c000f519:	6a 00                	push   0x0
c000f51b:	89 35 68 94 02 c0    	mov    DWORD PTR ds:0xc0029468,esi
c000f521:	6a 00                	push   0x0
c000f523:	6a 00                	push   0x0
c000f525:	56                   	push   esi
c000f526:	e8 77 f2 ff ff       	call   c000e7a2 <Computer::open(int, int, void*)>
c000f52b:	83 c4 14             	add    esp,0x14
c000f52e:	53                   	push   ebx
c000f52f:	e8 b2 22 00 00       	call   c00117e6 <VAS::~VAS()>
c000f534:	c7 04 24 6c 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c6c
c000f53b:	e8 ce 94 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000f540:	83 c4 20             	add    esp,0x20
c000f543:	5b                   	pop    ebx
c000f544:	5e                   	pop    esi
c000f545:	5f                   	pop    edi
c000f546:	c3                   	ret    

c000f547 <Phys::allocateDMA(unsigned long)>:
c000f547:	55                   	push   ebp
c000f548:	31 d2                	xor    edx,edx
c000f54a:	57                   	push   edi
c000f54b:	31 ed                	xor    ebp,ebp
c000f54d:	56                   	push   esi
c000f54e:	31 c9                	xor    ecx,ecx
c000f550:	53                   	push   ebx
c000f551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f555:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f55b:	31 c0                	xor    eax,eax
c000f55d:	c1 ee 0c             	shr    esi,0xc
c000f560:	eb 17                	jmp    c000f579 <Phys::allocateDMA(unsigned long)+0x32>
c000f562:	85 c9                	test   ecx,ecx
c000f564:	75 04                	jne    c000f56a <Phys::allocateDMA(unsigned long)+0x23>
c000f566:	89 d5                	mov    ebp,edx
c000f568:	89 d0                	mov    eax,edx
c000f56a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f56d:	39 de                	cmp    esi,ebx
c000f56f:	74 20                	je     c000f591 <Phys::allocateDMA(unsigned long)+0x4a>
c000f571:	42                   	inc    edx
c000f572:	89 d9                	mov    ecx,ebx
c000f574:	83 fa 2f             	cmp    edx,0x2f
c000f577:	7f 11                	jg     c000f58a <Phys::allocateDMA(unsigned long)+0x43>
c000f579:	80 ba c0 94 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd6b40],0x0
c000f580:	74 e0                	je     c000f562 <Phys::allocateDMA(unsigned long)+0x1b>
c000f582:	31 c9                	xor    ecx,ecx
c000f584:	42                   	inc    edx
c000f585:	83 fa 2f             	cmp    edx,0x2f
c000f588:	7e ef                	jle    c000f579 <Phys::allocateDMA(unsigned long)+0x32>
c000f58a:	5b                   	pop    ebx
c000f58b:	31 c0                	xor    eax,eax
c000f58d:	5e                   	pop    esi
c000f58e:	5f                   	pop    edi
c000f58f:	5d                   	pop    ebp
c000f590:	c3                   	ret    
c000f591:	8d 14 30             	lea    edx,[eax+esi*1]
c000f594:	89 d7                	mov    edi,edx
c000f596:	4f                   	dec    edi
c000f597:	79 03                	jns    c000f59c <Phys::allocateDMA(unsigned long)+0x55>
c000f599:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f59c:	c1 ff 04             	sar    edi,0x4
c000f59f:	89 c2                	mov    edx,eax
c000f5a1:	c1 fa 04             	sar    edx,0x4
c000f5a4:	39 fa                	cmp    edx,edi
c000f5a6:	75 2f                	jne    c000f5d7 <Phys::allocateDMA(unsigned long)+0x90>
c000f5a8:	85 db                	test   ebx,ebx
c000f5aa:	74 1a                	je     c000f5c6 <Phys::allocateDMA(unsigned long)+0x7f>
c000f5ac:	be c0 94 02 c0       	mov    esi,0xc00294c0
c000f5b1:	8d 90 c0 94 02 c0    	lea    edx,[eax-0x3ffd6b40]
c000f5b7:	f7 d6                	not    esi
c000f5b9:	29 c6                	sub    esi,eax
c000f5bb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5be:	42                   	inc    edx
c000f5bf:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5c2:	39 d9                	cmp    ecx,ebx
c000f5c4:	7f f5                	jg     c000f5bb <Phys::allocateDMA(unsigned long)+0x74>
c000f5c6:	85 ff                	test   edi,edi
c000f5c8:	74 13                	je     c000f5dd <Phys::allocateDMA(unsigned long)+0x96>
c000f5ca:	5b                   	pop    ebx
c000f5cb:	05 50 20 0c 00       	add    eax,0xc2050
c000f5d0:	5e                   	pop    esi
c000f5d1:	c1 e0 0c             	shl    eax,0xc
c000f5d4:	5f                   	pop    edi
c000f5d5:	5d                   	pop    ebp
c000f5d6:	c3                   	ret    
c000f5d7:	89 ea                	mov    edx,ebp
c000f5d9:	31 c9                	xor    ecx,ecx
c000f5db:	eb a7                	jmp    c000f584 <Phys::allocateDMA(unsigned long)+0x3d>
c000f5dd:	5b                   	pop    ebx
c000f5de:	c1 e0 0c             	shl    eax,0xc
c000f5e1:	5e                   	pop    esi
c000f5e2:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5e7:	5f                   	pop    edi
c000f5e8:	5d                   	pop    ebp
c000f5e9:	c3                   	ret    

c000f5ea <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5f2:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5f8:	c1 e9 0c             	shr    ecx,0xc
c000f5fb:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f600:	76 25                	jbe    c000f627 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f602:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f607:	c1 e8 0c             	shr    eax,0xc
c000f60a:	8d 50 10             	lea    edx,[eax+0x10]
c000f60d:	85 c9                	test   ecx,ecx
c000f60f:	74 15                	je     c000f626 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f611:	8d 82 c0 94 02 c0    	lea    eax,[edx-0x3ffd6b40]
c000f617:	8d 94 11 c0 94 02 c0 	lea    edx,[ecx+edx*1-0x3ffd6b40]
c000f61e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f621:	40                   	inc    eax
c000f622:	39 d0                	cmp    eax,edx
c000f624:	75 f8                	jne    c000f61e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f626:	c3                   	ret    
c000f627:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f62d:	c1 ea 0c             	shr    edx,0xc
c000f630:	eb db                	jmp    c000f60d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f632 <Phys::setPageState(unsigned long, bool)>:
c000f632:	56                   	push   esi
c000f633:	ba 01 00 00 00       	mov    edx,0x1
c000f638:	53                   	push   ebx
c000f639:	8b 35 14 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028414
c000f63f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f643:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f647:	89 c8                	mov    eax,ecx
c000f649:	83 e1 07             	and    ecx,0x7
c000f64c:	c1 e8 03             	shr    eax,0x3
c000f64f:	d3 e3                	shl    ebx,cl
c000f651:	01 c6                	add    esi,eax
c000f653:	d3 e2                	shl    edx,cl
c000f655:	f7 d2                	not    edx
c000f657:	20 16                	and    BYTE PTR [esi],dl
c000f659:	03 05 14 84 02 c0    	add    eax,DWORD PTR ds:0xc0028414
c000f65f:	08 18                	or     BYTE PTR [eax],bl
c000f661:	5b                   	pop    ebx
c000f662:	5e                   	pop    esi
c000f663:	c3                   	ret    

c000f664 <Phys::getPageState(unsigned long)>:
c000f664:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f668:	8b 15 14 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028414
c000f66e:	89 c8                	mov    eax,ecx
c000f670:	83 e1 07             	and    ecx,0x7
c000f673:	c1 e8 03             	shr    eax,0x3
c000f676:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f67a:	d3 f8                	sar    eax,cl
c000f67c:	83 e0 01             	and    eax,0x1
c000f67f:	c3                   	ret    

c000f680 <Phys::freePage(unsigned long)>:
c000f680:	53                   	push   ebx
c000f681:	83 ec 08             	sub    esp,0x8
c000f684:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f688:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f68e:	76 57                	jbe    c000f6e7 <Phys::freePage(unsigned long)+0x67>
c000f690:	c1 eb 0c             	shr    ebx,0xc
c000f693:	53                   	push   ebx
c000f694:	e8 cb ff ff ff       	call   c000f664 <Phys::getPageState(unsigned long)>
c000f699:	5a                   	pop    edx
c000f69a:	84 c0                	test   al,al
c000f69c:	74 5b                	je     c000f6f9 <Phys::freePage(unsigned long)+0x79>
c000f69e:	a1 ac 94 02 c0       	mov    eax,ds:0xc00294ac
c000f6a3:	48                   	dec    eax
c000f6a4:	a3 ac 94 02 c0       	mov    ds:0xc00294ac,eax
c000f6a9:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6ac:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6af:	c1 e0 02             	shl    eax,0x2
c000f6b2:	99                   	cdq    
c000f6b3:	f7 3d b0 94 02 c0    	idiv   DWORD PTR ds:0xc00294b0
c000f6b9:	39 05 a8 94 02 c0    	cmp    DWORD PTR ds:0xc00294a8,eax
c000f6bf:	75 13                	jne    c000f6d4 <Phys::freePage(unsigned long)+0x54>
c000f6c1:	83 ec 08             	sub    esp,0x8
c000f6c4:	6a 00                	push   0x0
c000f6c6:	53                   	push   ebx
c000f6c7:	e8 66 ff ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f6cc:	83 c4 10             	add    esp,0x10
c000f6cf:	83 c4 08             	add    esp,0x8
c000f6d2:	5b                   	pop    ebx
c000f6d3:	c3                   	ret    
c000f6d4:	83 ec 0c             	sub    esp,0xc
c000f6d7:	a3 a8 94 02 c0       	mov    ds:0xc00294a8,eax
c000f6dc:	50                   	push   eax
c000f6dd:	e8 00 0a 00 00       	call   c00100e2 <VgaText::updateRAMUsageDisplay(int)>
c000f6e2:	83 c4 10             	add    esp,0x10
c000f6e5:	eb da                	jmp    c000f6c1 <Phys::freePage(unsigned long)+0x41>
c000f6e7:	68 00 10 00 00       	push   0x1000
c000f6ec:	53                   	push   ebx
c000f6ed:	e8 f8 fe ff ff       	call   c000f5ea <Phys::freeDMA(unsigned long, unsigned long)>
c000f6f2:	59                   	pop    ecx
c000f6f3:	5b                   	pop    ebx
c000f6f4:	83 c4 08             	add    esp,0x8
c000f6f7:	5b                   	pop    ebx
c000f6f8:	c3                   	ret    
c000f6f9:	c7 44 24 10 87 5c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025c87
c000f701:	83 c4 08             	add    esp,0x8
c000f704:	5b                   	pop    ebx
c000f705:	e9 04 93 00 00       	jmp    c0018a0e <Krnl::panic(char const*)>

c000f70a <Phys::allocatePage()>:
c000f70a:	56                   	push   esi
c000f70b:	53                   	push   ebx
c000f70c:	51                   	push   ecx
c000f70d:	8b 35 a0 94 02 c0    	mov    esi,DWORD PTR ds:0xc00294a0
c000f713:	89 f3                	mov    ebx,esi
c000f715:	eb 0a                	jmp    c000f721 <Phys::allocatePage()+0x17>
c000f717:	89 1d a0 94 02 c0    	mov    DWORD PTR ds:0xc00294a0,ebx
c000f71d:	39 de                	cmp    esi,ebx
c000f71f:	74 24                	je     c000f745 <Phys::allocatePage()+0x3b>
c000f721:	53                   	push   ebx
c000f722:	e8 3d ff ff ff       	call   c000f664 <Phys::getPageState(unsigned long)>
c000f727:	5a                   	pop    edx
c000f728:	84 c0                	test   al,al
c000f72a:	74 5a                	je     c000f786 <Phys::allocatePage()+0x7c>
c000f72c:	43                   	inc    ebx
c000f72d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f733:	75 e2                	jne    c000f717 <Phys::allocatePage()+0xd>
c000f735:	31 db                	xor    ebx,ebx
c000f737:	c7 05 a0 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a0,0x0
c000f741:	39 de                	cmp    esi,ebx
c000f743:	75 dc                	jne    c000f721 <Phys::allocatePage()+0x17>
c000f745:	83 ec 0c             	sub    esp,0xc
c000f748:	68 9d 5c 02 c0       	push   0xc0025c9d
c000f74d:	e8 ff 2a 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f752:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f759:	e8 e9 fd ff ff       	call   c000f547 <Phys::allocateDMA(unsigned long)>
c000f75e:	83 c4 10             	add    esp,0x10
c000f761:	85 c0                	test   eax,eax
c000f763:	75 56                	jne    c000f7bb <Phys::allocatePage()+0xb1>
c000f765:	83 ec 0c             	sub    esp,0xc
c000f768:	68 ae 5c 02 c0       	push   0xc0025cae
c000f76d:	e8 9c 92 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	8b 1d a0 94 02 c0    	mov    ebx,DWORD PTR ds:0xc00294a0
c000f77b:	53                   	push   ebx
c000f77c:	e8 e3 fe ff ff       	call   c000f664 <Phys::getPageState(unsigned long)>
c000f781:	5a                   	pop    edx
c000f782:	84 c0                	test   al,al
c000f784:	75 a6                	jne    c000f72c <Phys::allocatePage()+0x22>
c000f786:	6a 01                	push   0x1
c000f788:	53                   	push   ebx
c000f789:	e8 a4 fe ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f78e:	a1 ac 94 02 c0       	mov    eax,ds:0xc00294ac
c000f793:	59                   	pop    ecx
c000f794:	40                   	inc    eax
c000f795:	5b                   	pop    ebx
c000f796:	a3 ac 94 02 c0       	mov    ds:0xc00294ac,eax
c000f79b:	8d 04 80             	lea    eax,[eax+eax*4]
c000f79e:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7a1:	c1 e0 02             	shl    eax,0x2
c000f7a4:	99                   	cdq    
c000f7a5:	f7 3d b0 94 02 c0    	idiv   DWORD PTR ds:0xc00294b0
c000f7ab:	39 05 a8 94 02 c0    	cmp    DWORD PTR ds:0xc00294a8,eax
c000f7b1:	75 0c                	jne    c000f7bf <Phys::allocatePage()+0xb5>
c000f7b3:	a1 a0 94 02 c0       	mov    eax,ds:0xc00294a0
c000f7b8:	c1 e0 0c             	shl    eax,0xc
c000f7bb:	5a                   	pop    edx
c000f7bc:	5b                   	pop    ebx
c000f7bd:	5e                   	pop    esi
c000f7be:	c3                   	ret    
c000f7bf:	83 ec 0c             	sub    esp,0xc
c000f7c2:	a3 a8 94 02 c0       	mov    ds:0xc00294a8,eax
c000f7c7:	50                   	push   eax
c000f7c8:	e8 15 09 00 00       	call   c00100e2 <VgaText::updateRAMUsageDisplay(int)>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	eb e1                	jmp    c000f7b3 <Phys::allocatePage()+0xa9>

c000f7d2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7d2:	56                   	push   esi
c000f7d3:	53                   	push   ebx
c000f7d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7d8:	39 1d a4 94 02 c0    	cmp    DWORD PTR ds:0xc00294a4,ebx
c000f7de:	73 06                	jae    c000f7e6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7e0:	89 1d a4 94 02 c0    	mov    DWORD PTR ds:0xc00294a4,ebx
c000f7e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7ea:	c1 eb 0c             	shr    ebx,0xc
c000f7ed:	c1 e8 0c             	shr    eax,0xc
c000f7f0:	39 d8                	cmp    eax,ebx
c000f7f2:	73 13                	jae    c000f807 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7f4:	6a 00                	push   0x0
c000f7f6:	8d 70 01             	lea    esi,[eax+0x1]
c000f7f9:	50                   	push   eax
c000f7fa:	e8 33 fe ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f7ff:	5a                   	pop    edx
c000f800:	89 f0                	mov    eax,esi
c000f802:	59                   	pop    ecx
c000f803:	39 f3                	cmp    ebx,esi
c000f805:	75 ed                	jne    c000f7f4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f807:	5b                   	pop    ebx
c000f808:	5e                   	pop    esi
c000f809:	c3                   	ret    

c000f80a <Phys::physicalMemorySetup(unsigned int)>:
c000f80a:	55                   	push   ebp
c000f80b:	57                   	push   edi
c000f80c:	56                   	push   esi
c000f80d:	53                   	push   ebx
c000f80e:	31 db                	xor    ebx,ebx
c000f810:	83 ec 40             	sub    esp,0x40
c000f813:	6a 30                	push   0x30
c000f815:	6a 00                	push   0x0
c000f817:	68 c0 94 02 c0       	push   0xc00294c0
c000f81c:	e8 c5 0e ff ff       	call   c00006e6 <memset>
c000f821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f825:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f82a:	05 00 10 00 00       	add    eax,0x1000
c000f82f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f833:	83 c4 10             	add    esp,0x10
c000f836:	83 ec 08             	sub    esp,0x8
c000f839:	6a 01                	push   0x1
c000f83b:	53                   	push   ebx
c000f83c:	43                   	inc    ebx
c000f83d:	e8 f0 fd ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f84b:	75 e9                	jne    c000f836 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f84d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f854:	66 85 c0             	test   ax,ax
c000f857:	0f 84 8e 01 00 00    	je     c000f9eb <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f85d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f861:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f869:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f86d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f872:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f876:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f87e:	eb 15                	jmp    c000f895 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f880:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f884:	83 c3 18             	add    ebx,0x18
c000f887:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f88b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f88f:	0f 84 66 01 00 00    	je     c000f9fb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f895:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f898:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f89b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f89e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8a6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f8a8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f8ab:	01 f0                	add    eax,esi
c000f8ad:	55                   	push   ebp
c000f8ae:	11 fa                	adc    edx,edi
c000f8b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f8b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8bc:	56                   	push   esi
c000f8bd:	68 e8 5c 02 c0       	push   0xc0025ce8
c000f8c2:	e8 8a 29 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f8c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8cb:	83 c4 10             	add    esp,0x10
c000f8ce:	09 f8                	or     eax,edi
c000f8d0:	0f 85 25 01 00 00    	jne    c000f9fb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8d6:	4d                   	dec    ebp
c000f8d7:	75 a7                	jne    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8d9:	ba 00 00 08 00       	mov    edx,0x80000
c000f8de:	89 c1                	mov    ecx,eax
c000f8e0:	39 f2                	cmp    edx,esi
c000f8e2:	19 f9                	sbb    ecx,edi
c000f8e4:	0f 82 a7 00 00 00    	jb     c000f991 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8ea:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8ee:	89 c1                	mov    ecx,eax
c000f8f0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8f4:	0f 83 97 00 00 00    	jae    c000f991 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8fa:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8ff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f903:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f907:	39 fa                	cmp    edx,edi
c000f909:	19 e8                	sbb    eax,ebp
c000f90b:	0f 82 14 01 00 00    	jb     c000fa25 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f911:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f915:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f919:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f91f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f924:	83 d5 ff             	adc    ebp,0xffffffff
c000f927:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f92b:	31 c0                	xor    eax,eax
c000f92d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f931:	39 fa                	cmp    edx,edi
c000f933:	89 c1                	mov    ecx,eax
c000f935:	19 e9                	sbb    ecx,ebp
c000f937:	0f 83 43 ff ff ff    	jae    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f93d:	be 00 00 08 00       	mov    esi,0x80000
c000f942:	50                   	push   eax
c000f943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f947:	57                   	push   edi
c000f948:	56                   	push   esi
c000f949:	68 0c 5d 02 c0       	push   0xc0025d0c
c000f94e:	e8 fe 28 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f953:	5a                   	pop    edx
c000f954:	59                   	pop    ecx
c000f955:	57                   	push   edi
c000f956:	56                   	push   esi
c000f957:	e8 76 fe ff ff       	call   c000f7d2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f95c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f960:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f964:	83 c4 0c             	add    esp,0xc
c000f967:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f96b:	03 05 b0 94 02 c0    	add    eax,DWORD PTR ds:0xc00294b0
c000f971:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f978:	a3 b0 94 02 c0       	mov    ds:0xc00294b0,eax
c000f97d:	52                   	push   edx
c000f97e:	50                   	push   eax
c000f97f:	68 ca 5c 02 c0       	push   0xc0025cca
c000f984:	e8 c8 28 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c000f989:	83 c4 10             	add    esp,0x10
c000f98c:	e9 ef fe ff ff       	jmp    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f991:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f995:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f999:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f99d:	39 ea                	cmp    edx,ebp
c000f99f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f9a3:	0f 82 d7 fe ff ff    	jb     c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9a9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f9ae:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f9b2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f9b6:	0f 83 c4 fe ff ff    	jae    c000f880 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9bc:	39 ee                	cmp    esi,ebp
c000f9be:	89 f8                	mov    eax,edi
c000f9c0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9c4:	0f 83 78 ff ff ff    	jae    c000f942 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9d2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9da:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9e6:	e9 57 ff ff ff       	jmp    c000f942 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9eb:	83 ec 0c             	sub    esp,0xc
c000f9ee:	68 bc 5c 02 c0       	push   0xc0025cbc
c000f9f3:	e8 16 90 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000f9f8:	83 c4 10             	add    esp,0x10
c000f9fb:	bb 40 01 00 00       	mov    ebx,0x140
c000fa00:	83 ec 08             	sub    esp,0x8
c000fa03:	6a 00                	push   0x0
c000fa05:	53                   	push   ebx
c000fa06:	43                   	inc    ebx
c000fa07:	e8 26 fc ff ff       	call   c000f632 <Phys::setPageState(unsigned long, bool)>
c000fa0c:	ff 05 b0 94 02 c0    	inc    DWORD PTR ds:0xc00294b0
c000fa12:	83 c4 10             	add    esp,0x10
c000fa15:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa1b:	75 e3                	jne    c000fa00 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa1d:	83 c4 3c             	add    esp,0x3c
c000fa20:	5b                   	pop    ebx
c000fa21:	5e                   	pop    esi
c000fa22:	5f                   	pop    edi
c000fa23:	5d                   	pop    ebp
c000fa24:	c3                   	ret    
c000fa25:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa35:	e9 d7 fe ff ff       	jmp    c000f911 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa3a <Pipe::isAtty()>:
c000fa3a:	31 c0                	xor    eax,eax
c000fa3c:	c3                   	ret    
c000fa3d:	90                   	nop

c000fa3e <Pipe::~Pipe()>:
c000fa3e:	83 ec 0c             	sub    esp,0xc
c000fa41:	ba 78 5d 02 c0       	mov    edx,0xc0025d78
c000fa46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa4a:	89 10                	mov    DWORD PTR [eax],edx
c000fa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa50:	83 ec 0c             	sub    esp,0xc
c000fa53:	50                   	push   eax
c000fa54:	e8 c5 15 00 00       	call   c001101e <UnixFile::~UnixFile()>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	90                   	nop
c000fa5d:	83 c4 0c             	add    esp,0xc
c000fa60:	c3                   	ret    
c000fa61:	90                   	nop

c000fa62 <Pipe::~Pipe()>:
c000fa62:	83 ec 0c             	sub    esp,0xc
c000fa65:	83 ec 0c             	sub    esp,0xc
c000fa68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa6c:	e8 cd ff ff ff       	call   c000fa3e <Pipe::~Pipe()>
c000fa71:	83 c4 10             	add    esp,0x10
c000fa74:	83 ec 08             	sub    esp,0x8
c000fa77:	6a 20                	push   0x20
c000fa79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa7d:	e8 ef 26 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c000fa82:	83 c4 10             	add    esp,0x10
c000fa85:	83 c4 0c             	add    esp,0xc
c000fa88:	c3                   	ret    
c000fa89:	90                   	nop

c000fa8a <Pipe::read(unsigned long long, void*, int*)>:
c000fa8a:	55                   	push   ebp
c000fa8b:	57                   	push   edi
c000fa8c:	56                   	push   esi
c000fa8d:	53                   	push   ebx
c000fa8e:	83 ec 1c             	sub    esp,0x1c
c000fa91:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa95:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa99:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa9d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000faa0:	89 c8                	mov    eax,ecx
c000faa2:	99                   	cdq    
c000faa3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000faa7:	74 19                	je     c000fac2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000faa9:	39 f9                	cmp    ecx,edi
c000faab:	89 d1                	mov    ecx,edx
c000faad:	19 f1                	sbb    ecx,esi
c000faaf:	73 11                	jae    c000fac2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fab1:	e8 ac be 00 00       	call   c001b962 <lockScheduler()>
c000fab6:	e8 db c1 00 00       	call   c001bc96 <schedule()>
c000fabb:	e8 a4 be 00 00       	call   c001b964 <unlockScheduler()>
c000fac0:	eb db                	jmp    c000fa9d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fac2:	39 f8                	cmp    eax,edi
c000fac4:	89 d1                	mov    ecx,edx
c000fac6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000faca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000face:	19 f1                	sbb    ecx,esi
c000fad0:	73 08                	jae    c000fada <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fad2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fad6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fada:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fadd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fae0:	29 c6                	sub    esi,eax
c000fae2:	89 f1                	mov    ecx,esi
c000fae4:	c1 f9 1f             	sar    ecx,0x1f
c000fae7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000faeb:	89 ca                	mov    edx,ecx
c000faed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faf1:	19 d1                	sbb    ecx,edx
c000faf3:	73 04                	jae    c000faf9 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000faf5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000faf9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fafd:	89 fd                	mov    ebp,edi
c000faff:	29 f5                	sub    ebp,esi
c000fb01:	85 f6                	test   esi,esi
c000fb03:	74 12                	je     c000fb17 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fb05:	52                   	push   edx
c000fb06:	56                   	push   esi
c000fb07:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fb0a:	50                   	push   eax
c000fb0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fb0f:	e8 9c 0b ff ff       	call   c00006b0 <memcpy>
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	85 ed                	test   ebp,ebp
c000fb19:	74 12                	je     c000fb2d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb1b:	50                   	push   eax
c000fb1c:	55                   	push   ebp
c000fb1d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb20:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb24:	56                   	push   esi
c000fb25:	e8 86 0b ff ff       	call   c00006b0 <memcpy>
c000fb2a:	83 c4 10             	add    esp,0x10
c000fb2d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb33:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb36:	99                   	cdq    
c000fb37:	89 f7                	mov    edi,esi
c000fb39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb3d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb41:	c1 ff 1f             	sar    edi,0x1f
c000fb44:	57                   	push   edi
c000fb45:	56                   	push   esi
c000fb46:	52                   	push   edx
c000fb47:	50                   	push   eax
c000fb48:	e8 2f 2a 01 00       	call   c002257c <__umoddi3>
c000fb4d:	83 c4 10             	add    esp,0x10
c000fb50:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb53:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb58:	75 10                	jne    c000fb6a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb5a:	83 ec 0c             	sub    esp,0xc
c000fb5d:	68 35 5d 02 c0       	push   0xc0025d35
c000fb62:	e8 a7 8e 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000fb67:	83 c4 10             	add    esp,0x10
c000fb6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb72:	89 10                	mov    DWORD PTR [eax],edx
c000fb74:	83 c4 1c             	add    esp,0x1c
c000fb77:	31 c0                	xor    eax,eax
c000fb79:	5b                   	pop    ebx
c000fb7a:	5e                   	pop    esi
c000fb7b:	5f                   	pop    edi
c000fb7c:	5d                   	pop    ebp
c000fb7d:	c3                   	ret    

c000fb7e <Pipe::write(unsigned long long, void*, int*)>:
c000fb7e:	55                   	push   ebp
c000fb7f:	57                   	push   edi
c000fb80:	56                   	push   esi
c000fb81:	53                   	push   ebx
c000fb82:	83 ec 1c             	sub    esp,0x1c
c000fb85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb89:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb8d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb91:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb94:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb97:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb9e:	89 de                	mov    esi,ebx
c000fba0:	89 df                	mov    edi,ebx
c000fba2:	c1 ff 1f             	sar    edi,0x1f
c000fba5:	01 c6                	add    esi,eax
c000fba7:	89 c8                	mov    eax,ecx
c000fba9:	11 d7                	adc    edi,edx
c000fbab:	99                   	cdq    
c000fbac:	39 f1                	cmp    ecx,esi
c000fbae:	89 d0                	mov    eax,edx
c000fbb0:	19 f8                	sbb    eax,edi
c000fbb2:	b8 01 00 00 00       	mov    eax,0x1
c000fbb7:	0f 82 80 00 00 00    	jb     c000fc3d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fbbd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fbc0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fbc3:	01 d8                	add    eax,ebx
c000fbc5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbc9:	99                   	cdq    
c000fbca:	f7 f9                	idiv   ecx
c000fbcc:	29 d1                	sub    ecx,edx
c000fbce:	89 d7                	mov    edi,edx
c000fbd0:	89 c8                	mov    eax,ecx
c000fbd2:	99                   	cdq    
c000fbd3:	39 ce                	cmp    esi,ecx
c000fbd5:	19 d3                	sbb    ebx,edx
c000fbd7:	bb 00 00 00 00       	mov    ebx,0x0
c000fbdc:	72 04                	jb     c000fbe2 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbde:	89 f3                	mov    ebx,esi
c000fbe0:	29 cb                	sub    ebx,ecx
c000fbe2:	89 f1                	mov    ecx,esi
c000fbe4:	29 d9                	sub    ecx,ebx
c000fbe6:	74 1a                	je     c000fc02 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbe8:	52                   	push   edx
c000fbe9:	51                   	push   ecx
c000fbea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbf2:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbf5:	57                   	push   edi
c000fbf6:	e8 b5 0a ff ff       	call   c00006b0 <memcpy>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc02:	85 db                	test   ebx,ebx
c000fc04:	74 12                	je     c000fc18 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fc06:	50                   	push   eax
c000fc07:	53                   	push   ebx
c000fc08:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fc0c:	51                   	push   ecx
c000fc0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fc10:	e8 9b 0a ff ff       	call   c00006b0 <memcpy>
c000fc15:	83 c4 10             	add    esp,0x10
c000fc18:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc1b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc20:	75 10                	jne    c000fc32 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc22:	83 ec 0c             	sub    esp,0xc
c000fc25:	68 51 5d 02 c0       	push   0xc0025d51
c000fc2a:	e8 df 8d 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc39:	89 38                	mov    DWORD PTR [eax],edi
c000fc3b:	31 c0                	xor    eax,eax
c000fc3d:	83 c4 1c             	add    esp,0x1c
c000fc40:	5b                   	pop    ebx
c000fc41:	5e                   	pop    esi
c000fc42:	5f                   	pop    edi
c000fc43:	5d                   	pop    ebp
c000fc44:	c3                   	ret    
c000fc45:	90                   	nop

c000fc46 <Pipe::Pipe(int)>:
c000fc46:	83 ec 0c             	sub    esp,0xc
c000fc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4d:	83 ec 08             	sub    esp,0x8
c000fc50:	6a 00                	push   0x0
c000fc52:	50                   	push   eax
c000fc53:	e8 24 12 00 00       	call   c0010e7c <UnixFile::UnixFile(int)>
c000fc58:	83 c4 10             	add    esp,0x10
c000fc5b:	ba 78 5d 02 c0       	mov    edx,0xc0025d78
c000fc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc64:	89 10                	mov    DWORD PTR [eax],edx
c000fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc75:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc80:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	50                   	push   eax
c000fc8f:	e8 cc f4 ff ff       	call   c000f160 <malloc>
c000fc94:	83 c4 10             	add    esp,0x10
c000fc97:	89 c2                	mov    edx,eax
c000fc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fca8:	90                   	nop
c000fca9:	83 c4 0c             	add    esp,0xc
c000fcac:	c3                   	ret    
c000fcad:	90                   	nop

c000fcae <VgaText::isAtty()>:
c000fcae:	b0 01                	mov    al,0x1
c000fcb0:	c3                   	ret    
c000fcb1:	90                   	nop

c000fcb2 <VgaText::~VgaText()>:
c000fcb2:	83 ec 0c             	sub    esp,0xc
c000fcb5:	ba 34 5e 02 c0       	mov    edx,0xc0025e34
c000fcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcbe:	89 10                	mov    DWORD PTR [eax],edx
c000fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	50                   	push   eax
c000fcc8:	e8 51 13 00 00       	call   c001101e <UnixFile::~UnixFile()>
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	90                   	nop
c000fcd1:	83 c4 0c             	add    esp,0xc
c000fcd4:	c3                   	ret    
c000fcd5:	90                   	nop

c000fcd6 <VgaText::~VgaText()>:
c000fcd6:	83 ec 0c             	sub    esp,0xc
c000fcd9:	83 ec 0c             	sub    esp,0xc
c000fcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce0:	e8 cd ff ff ff       	call   c000fcb2 <VgaText::~VgaText()>
c000fce5:	83 c4 10             	add    esp,0x10
c000fce8:	83 ec 08             	sub    esp,0x8
c000fceb:	68 60 12 00 00       	push   0x1260
c000fcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf4:	e8 78 24 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c000fcf9:	83 c4 10             	add    esp,0x10
c000fcfc:	83 c4 0c             	add    esp,0xc
c000fcff:	c3                   	ret    

c000fd00 <VgaText::read(unsigned long long, void*, int*)>:
c000fd00:	83 ec 10             	sub    esp,0x10
c000fd03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd0f:	e8 38 57 00 00       	call   c001544c <readKeyboard(VgaText*, char*, unsigned long)>
c000fd14:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fd18:	89 02                	mov    DWORD PTR [edx],eax
c000fd1a:	31 c0                	xor    eax,eax
c000fd1c:	83 c4 1c             	add    esp,0x1c
c000fd1f:	c3                   	ret    

c000fd20 <setTerminalScrollLock(bool)>:
c000fd20:	c3                   	ret    

c000fd21 <addToTerminalCycle(VgaText*)>:
c000fd21:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c000fd27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd2b:	85 d2                	test   edx,edx
c000fd2d:	75 0c                	jne    c000fd3b <addToTerminalCycle(VgaText*)+0x1a>
c000fd2f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd35:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c000fd3a:	c3                   	ret    
c000fd3b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd41:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd47:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd4d:	c3                   	ret    

c000fd4e <installVgaTextImplementation()>:
c000fd4e:	83 ec 10             	sub    esp,0x10
c000fd51:	6a 20                	push   0x20
c000fd53:	6a 00                	push   0x0
c000fd55:	68 00 95 02 c0       	push   0xc0029500
c000fd5a:	e8 87 09 ff ff       	call   c00006e6 <memset>
c000fd5f:	83 c4 1c             	add    esp,0x1c
c000fd62:	c3                   	ret    

c000fd63 <scrollTerminalScrollLock(int)>:
c000fd63:	c3                   	ret    

c000fd64 <VgaText::load()>:
c000fd64:	53                   	push   ebx
c000fd65:	31 c0                	xor    eax,eax
c000fd67:	83 ec 58             	sub    esp,0x58
c000fd6a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd6e:	89 e2                	mov    edx,esp
c000fd70:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd74:	40                   	inc    eax
c000fd75:	83 f8 50             	cmp    eax,0x50
c000fd78:	75 f6                	jne    c000fd70 <VgaText::load()+0xc>
c000fd7a:	31 c0                	xor    eax,eax
c000fd7c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd83:	84 c9                	test   cl,cl
c000fd85:	74 06                	je     c000fd8d <VgaText::load()+0x29>
c000fd87:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd8a:	40                   	inc    eax
c000fd8b:	eb ef                	jmp    c000fd7c <VgaText::load()+0x18>
c000fd8d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd93:	85 c0                	test   eax,eax
c000fd95:	74 09                	je     c000fda0 <VgaText::load()+0x3c>
c000fd97:	51                   	push   ecx
c000fd98:	51                   	push   ecx
c000fd99:	52                   	push   edx
c000fd9a:	53                   	push   ebx
c000fd9b:	ff d0                	call   eax
c000fd9d:	83 c4 10             	add    esp,0x10
c000fda0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fda6:	85 c0                	test   eax,eax
c000fda8:	74 09                	je     c000fdb3 <VgaText::load()+0x4f>
c000fdaa:	83 ec 0c             	sub    esp,0xc
c000fdad:	53                   	push   ebx
c000fdae:	ff d0                	call   eax
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	83 c4 58             	add    esp,0x58
c000fdb6:	5b                   	pop    ebx
c000fdb7:	c3                   	ret    

c000fdb8 <VgaText::updateCursor()>:
c000fdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdbc:	39 05 24 95 02 c0    	cmp    DWORD PTR ds:0xc0029524,eax
c000fdc2:	75 0c                	jne    c000fdd0 <VgaText::updateCursor()+0x18>
c000fdc4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdca:	85 c0                	test   eax,eax
c000fdcc:	74 02                	je     c000fdd0 <VgaText::updateCursor()+0x18>
c000fdce:	ff e0                	jmp    eax
c000fdd0:	c3                   	ret    
c000fdd1:	90                   	nop

c000fdd2 <VgaText::showCursor(bool)>:
c000fdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdda:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fde0:	c3                   	ret    
c000fde1:	90                   	nop

c000fde2 <VgaText::disableBlink(bool)>:
c000fde2:	56                   	push   esi
c000fde3:	53                   	push   ebx
c000fde4:	51                   	push   ecx
c000fde5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fde9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fded:	39 1d 24 95 02 c0    	cmp    DWORD PTR ds:0xc0029524,ebx
c000fdf3:	75 18                	jne    c000fe0d <VgaText::disableBlink(bool)+0x2b>
c000fdf5:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fdfb:	85 c0                	test   eax,eax
c000fdfd:	74 0e                	je     c000fe0d <VgaText::disableBlink(bool)+0x2b>
c000fdff:	89 f1                	mov    ecx,esi
c000fe01:	52                   	push   edx
c000fe02:	52                   	push   edx
c000fe03:	0f b6 d1             	movzx  edx,cl
c000fe06:	52                   	push   edx
c000fe07:	53                   	push   ebx
c000fe08:	ff d0                	call   eax
c000fe0a:	83 c4 10             	add    esp,0x10
c000fe0d:	89 f0                	mov    eax,esi
c000fe0f:	83 f0 01             	xor    eax,0x1
c000fe12:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fe18:	58                   	pop    eax
c000fe19:	5b                   	pop    ebx
c000fe1a:	5e                   	pop    esi
c000fe1b:	c3                   	ret    

c000fe1c <VgaText::doANSI_SGR(int)>:
c000fe1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe24:	85 d2                	test   edx,edx
c000fe26:	75 14                	jne    c000fe3c <VgaText::doANSI_SGR(int)+0x20>
c000fe28:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe2e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe34:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe3a:	eb 65                	jmp    c000fea1 <VgaText::doANSI_SGR(int)+0x85>
c000fe3c:	83 fa 07             	cmp    edx,0x7
c000fe3f:	75 14                	jne    c000fe55 <VgaText::doANSI_SGR(int)+0x39>
c000fe41:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe47:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe4d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe53:	eb 4c                	jmp    c000fea1 <VgaText::doANSI_SGR(int)+0x85>
c000fe55:	83 fa 1b             	cmp    edx,0x1b
c000fe58:	74 ce                	je     c000fe28 <VgaText::doANSI_SGR(int)+0xc>
c000fe5a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe5d:	83 f9 07             	cmp    ecx,0x7
c000fe60:	77 09                	ja     c000fe6b <VgaText::doANSI_SGR(int)+0x4f>
c000fe62:	8b 14 8d 40 84 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7bc0]
c000fe69:	eb 20                	jmp    c000fe8b <VgaText::doANSI_SGR(int)+0x6f>
c000fe6b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe6e:	83 f9 07             	cmp    ecx,0x7
c000fe71:	77 09                	ja     c000fe7c <VgaText::doANSI_SGR(int)+0x60>
c000fe73:	8b 14 8d 40 84 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7bc0]
c000fe7a:	eb 25                	jmp    c000fea1 <VgaText::doANSI_SGR(int)+0x85>
c000fe7c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe7f:	83 f9 07             	cmp    ecx,0x7
c000fe82:	77 0e                	ja     c000fe92 <VgaText::doANSI_SGR(int)+0x76>
c000fe84:	8b 14 95 f8 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7d08]
c000fe8b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe91:	c3                   	ret    
c000fe92:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe95:	83 f9 07             	cmp    ecx,0x7
c000fe98:	77 0d                	ja     c000fea7 <VgaText::doANSI_SGR(int)+0x8b>
c000fe9a:	8b 14 95 d0 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7d30]
c000fea1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fea7:	c3                   	ret    

c000fea8 <VgaText::setDefaultBgColour(VgaColour)>:
c000fea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000feb6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000febc:	c3                   	ret    
c000febd:	90                   	nop

c000febe <VgaText::setDefaultFgColour(VgaColour)>:
c000febe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fec6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fecc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fed2:	c3                   	ret    
c000fed3:	90                   	nop

c000fed4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fed4:	53                   	push   ebx
c000fed5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fed9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fedd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fee1:	51                   	push   ecx
c000fee2:	e8 c1 ff ff ff       	call   c000fea8 <VgaText::setDefaultBgColour(VgaColour)>
c000fee7:	58                   	pop    eax
c000fee8:	5a                   	pop    edx
c000fee9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000feed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fef1:	5b                   	pop    ebx
c000fef2:	eb ca                	jmp    c000febe <VgaText::setDefaultFgColour(VgaColour)>

c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>:
c000fef4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fef8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fefd:	83 e0 0f             	and    eax,0xf
c000ff00:	c1 e2 04             	shl    edx,0x4
c000ff03:	09 d0                	or     eax,edx
c000ff05:	c3                   	ret    

c000ff06 <VgaText::scrollScreen()>:
c000ff06:	57                   	push   edi
c000ff07:	56                   	push   esi
c000ff08:	be 01 00 00 00       	mov    esi,0x1
c000ff0d:	53                   	push   ebx
c000ff0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff12:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ff18:	31 ff                	xor    edi,edi
c000ff1a:	01 d9                	add    ecx,ebx
c000ff1c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff1f:	83 fe 17             	cmp    esi,0x17
c000ff22:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff28:	75 28                	jne    c000ff52 <VgaText::scrollScreen()+0x4c>
c000ff2a:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff30:	74 1c                	je     c000ff4e <VgaText::scrollScreen()+0x48>
c000ff32:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff39:	50                   	push   eax
c000ff3a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff41:	50                   	push   eax
c000ff42:	e8 ad ff ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000ff47:	5a                   	pop    edx
c000ff48:	5a                   	pop    edx
c000ff49:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff4c:	eb 04                	jmp    c000ff52 <VgaText::scrollScreen()+0x4c>
c000ff4e:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff52:	47                   	inc    edi
c000ff53:	41                   	inc    ecx
c000ff54:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff5a:	75 c0                	jne    c000ff1c <VgaText::scrollScreen()+0x16>
c000ff5c:	46                   	inc    esi
c000ff5d:	83 fe 18             	cmp    esi,0x18
c000ff60:	75 b0                	jne    c000ff12 <VgaText::scrollScreen()+0xc>
c000ff62:	39 1d 24 95 02 c0    	cmp    DWORD PTR ds:0xc0029524,ebx
c000ff68:	75 24                	jne    c000ff8e <VgaText::scrollScreen()+0x88>
c000ff6a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff71:	74 08                	je     c000ff7b <VgaText::scrollScreen()+0x75>
c000ff73:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff79:	eb 13                	jmp    c000ff8e <VgaText::scrollScreen()+0x88>
c000ff7b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff81:	85 c0                	test   eax,eax
c000ff83:	74 09                	je     c000ff8e <VgaText::scrollScreen()+0x88>
c000ff85:	83 ec 0c             	sub    esp,0xc
c000ff88:	53                   	push   ebx
c000ff89:	ff d0                	call   eax
c000ff8b:	83 c4 10             	add    esp,0x10
c000ff8e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff92:	5b                   	pop    ebx
c000ff93:	5e                   	pop    esi
c000ff94:	5f                   	pop    edi
c000ff95:	e9 1e fe ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>

c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff9f:	c1 e0 08             	shl    eax,0x8
c000ffa2:	89 c2                	mov    edx,eax
c000ffa4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ffa9:	09 d0                	or     eax,edx
c000ffab:	c3                   	ret    

c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ffac:	53                   	push   ebx
c000ffad:	83 ec 08             	sub    esp,0x8
c000ffb0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffb4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffb9:	50                   	push   eax
c000ffba:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffbf:	50                   	push   eax
c000ffc0:	e8 2f ff ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c000ffc5:	5a                   	pop    edx
c000ffc6:	0f b6 c0             	movzx  eax,al
c000ffc9:	5b                   	pop    ebx
c000ffca:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffcf:	50                   	push   eax
c000ffd0:	53                   	push   ebx
c000ffd1:	e8 c4 ff ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c000ffd6:	5a                   	pop    edx
c000ffd7:	5a                   	pop    edx
c000ffd8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffde:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffe2:	0f b7 d2             	movzx  edx,dx
c000ffe5:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffea:	39 0d 24 95 02 c0    	cmp    DWORD PTR ds:0xc0029524,ecx
c000fff0:	75 14                	jne    c0010006 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fff2:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000fff8:	85 c0                	test   eax,eax
c000fffa:	74 0a                	je     c0010006 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fffc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010000:	83 c4 08             	add    esp,0x8
c0010003:	5b                   	pop    ebx
c0010004:	ff e0                	jmp    eax
c0010006:	83 c4 08             	add    esp,0x8
c0010009:	5b                   	pop    ebx
c001000a:	c3                   	ret    
c001000b:	90                   	nop

c001000c <VgaText::getCursorX()>:
c001000c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010010:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010016:	c3                   	ret    
c0010017:	90                   	nop

c0010018 <VgaText::getCursorY()>:
c0010018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <VgaText::setCursor(int, int)>:
c0010024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010028:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001002c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010032:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010036:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001003c:	e9 77 fd ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c0010041:	90                   	nop

c0010042 <VgaText::setCursorX(int)>:
c0010042:	83 ec 10             	sub    esp,0x10
c0010045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010049:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001004f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010053:	50                   	push   eax
c0010054:	e8 cb ff ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c0010059:	83 c4 1c             	add    esp,0x1c
c001005c:	c3                   	ret    
c001005d:	90                   	nop

c001005e <VgaText::setCursorY(int)>:
c001005e:	83 ec 10             	sub    esp,0x10
c0010061:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010069:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c001006f:	50                   	push   eax
c0010070:	e8 af ff ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c0010075:	83 c4 1c             	add    esp,0x1c
c0010078:	c3                   	ret    
c0010079:	90                   	nop

c001007a <VgaText::incrementCursor(bool)>:
c001007a:	56                   	push   esi
c001007b:	53                   	push   ebx
c001007c:	51                   	push   ecx
c001007d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010081:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010085:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001008b:	40                   	inc    eax
c001008c:	83 f8 50             	cmp    eax,0x50
c001008f:	74 08                	je     c0010099 <VgaText::incrementCursor(bool)+0x1f>
c0010091:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010097:	eb 33                	jmp    c00100cc <VgaText::incrementCursor(bool)+0x52>
c0010099:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001009f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00100a9:	8d 50 01             	lea    edx,[eax+0x1]
c00100ac:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00100b2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00100b8:	75 12                	jne    c00100cc <VgaText::incrementCursor(bool)+0x52>
c00100ba:	83 ec 0c             	sub    esp,0xc
c00100bd:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100c3:	53                   	push   ebx
c00100c4:	e8 3d fe ff ff       	call   c000ff06 <VgaText::scrollScreen()>
c00100c9:	83 c4 10             	add    esp,0x10
c00100cc:	89 f0                	mov    eax,esi
c00100ce:	84 c0                	test   al,al
c00100d0:	74 0c                	je     c00100de <VgaText::incrementCursor(bool)+0x64>
c00100d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100d6:	5a                   	pop    edx
c00100d7:	5b                   	pop    ebx
c00100d8:	5e                   	pop    esi
c00100d9:	e9 da fc ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c00100de:	58                   	pop    eax
c00100df:	5b                   	pop    ebx
c00100e0:	5e                   	pop    esi
c00100e1:	c3                   	ret    

c00100e2 <VgaText::updateRAMUsageDisplay(int)>:
c00100e2:	53                   	push   ebx
c00100e3:	bb 0a 00 00 00       	mov    ebx,0xa
c00100e8:	6a 0f                	push   0xf
c00100ea:	6a 00                	push   0x0
c00100ec:	e8 03 fe ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c00100f1:	5a                   	pop    edx
c00100f2:	59                   	pop    ecx
c00100f3:	0f b6 c8             	movzx  ecx,al
c00100f6:	51                   	push   ecx
c00100f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100fb:	99                   	cdq    
c00100fc:	f7 fb                	idiv   ebx
c00100fe:	89 d3                	mov    ebx,edx
c0010100:	83 c0 30             	add    eax,0x30
c0010103:	83 c3 30             	add    ebx,0x30
c0010106:	0f be c0             	movsx  eax,al
c0010109:	0f b6 db             	movzx  ebx,bl
c001010c:	50                   	push   eax
c001010d:	e8 88 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010112:	5a                   	pop    edx
c0010113:	5a                   	pop    edx
c0010114:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c001011a:	51                   	push   ecx
c001011b:	53                   	push   ebx
c001011c:	e8 79 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010121:	5b                   	pop    ebx
c0010122:	5a                   	pop    edx
c0010123:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c0010129:	51                   	push   ecx
c001012a:	6a 25                	push   0x25
c001012c:	e8 69 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010131:	59                   	pop    ecx
c0010132:	5b                   	pop    ebx
c0010133:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c0010139:	5b                   	pop    ebx
c001013a:	c3                   	ret    
c001013b:	90                   	nop

c001013c <VgaText::updateDiskUsage()>:
c001013c:	55                   	push   ebp
c001013d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010142:	57                   	push   edi
c0010143:	56                   	push   esi
c0010144:	53                   	push   ebx
c0010145:	6a 0f                	push   0xf
c0010147:	6a 00                	push   0x0
c0010149:	e8 a6 fd ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c001014e:	5a                   	pop    edx
c001014f:	0f b6 d8             	movzx  ebx,al
c0010152:	59                   	pop    ecx
c0010153:	a1 04 b2 02 c0       	mov    eax,ds:0xc002b204
c0010158:	53                   	push   ebx
c0010159:	b9 0a 00 00 00       	mov    ecx,0xa
c001015e:	99                   	cdq    
c001015f:	f7 fd                	idiv   ebp
c0010161:	99                   	cdq    
c0010162:	f7 f9                	idiv   ecx
c0010164:	8d 42 30             	lea    eax,[edx+0x30]
c0010167:	0f b6 c0             	movzx  eax,al
c001016a:	50                   	push   eax
c001016b:	e8 2a fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010170:	5e                   	pop    esi
c0010171:	5f                   	pop    edi
c0010172:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010178:	bf e8 03 00 00       	mov    edi,0x3e8
c001017d:	53                   	push   ebx
c001017e:	a1 04 b2 02 c0       	mov    eax,ds:0xc002b204
c0010183:	99                   	cdq    
c0010184:	f7 ff                	idiv   edi
c0010186:	99                   	cdq    
c0010187:	f7 f9                	idiv   ecx
c0010189:	8d 42 30             	lea    eax,[edx+0x30]
c001018c:	0f b6 c0             	movzx  eax,al
c001018f:	50                   	push   eax
c0010190:	e8 05 fe ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010195:	5a                   	pop    edx
c0010196:	5e                   	pop    esi
c0010197:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001019d:	be 64 00 00 00       	mov    esi,0x64
c00101a2:	53                   	push   ebx
c00101a3:	a1 04 b2 02 c0       	mov    eax,ds:0xc002b204
c00101a8:	99                   	cdq    
c00101a9:	f7 fe                	idiv   esi
c00101ab:	99                   	cdq    
c00101ac:	f7 f9                	idiv   ecx
c00101ae:	8d 42 30             	lea    eax,[edx+0x30]
c00101b1:	0f b6 c0             	movzx  eax,al
c00101b4:	50                   	push   eax
c00101b5:	e8 e0 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c00101ba:	5a                   	pop    edx
c00101bb:	5a                   	pop    edx
c00101bc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101c2:	53                   	push   ebx
c00101c3:	a1 04 b2 02 c0       	mov    eax,ds:0xc002b204
c00101c8:	99                   	cdq    
c00101c9:	f7 f9                	idiv   ecx
c00101cb:	99                   	cdq    
c00101cc:	f7 f9                	idiv   ecx
c00101ce:	8d 42 30             	lea    eax,[edx+0x30]
c00101d1:	0f b6 c0             	movzx  eax,al
c00101d4:	50                   	push   eax
c00101d5:	e8 c0 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c00101da:	5a                   	pop    edx
c00101db:	5a                   	pop    edx
c00101dc:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101e2:	53                   	push   ebx
c00101e3:	a1 04 b2 02 c0       	mov    eax,ds:0xc002b204
c00101e8:	99                   	cdq    
c00101e9:	f7 f9                	idiv   ecx
c00101eb:	8d 42 30             	lea    eax,[edx+0x30]
c00101ee:	0f b6 c0             	movzx  eax,al
c00101f1:	50                   	push   eax
c00101f2:	e8 a3 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c00101f7:	5a                   	pop    edx
c00101f8:	5a                   	pop    edx
c00101f9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101ff:	53                   	push   ebx
c0010200:	a1 00 b2 02 c0       	mov    eax,ds:0xc002b200
c0010205:	99                   	cdq    
c0010206:	f7 fd                	idiv   ebp
c0010208:	99                   	cdq    
c0010209:	f7 f9                	idiv   ecx
c001020b:	8d 42 30             	lea    eax,[edx+0x30]
c001020e:	0f b6 c0             	movzx  eax,al
c0010211:	50                   	push   eax
c0010212:	e8 83 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010217:	5d                   	pop    ebp
c0010218:	5a                   	pop    edx
c0010219:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001021f:	53                   	push   ebx
c0010220:	a1 00 b2 02 c0       	mov    eax,ds:0xc002b200
c0010225:	99                   	cdq    
c0010226:	f7 ff                	idiv   edi
c0010228:	99                   	cdq    
c0010229:	f7 f9                	idiv   ecx
c001022b:	8d 42 30             	lea    eax,[edx+0x30]
c001022e:	0f b6 c0             	movzx  eax,al
c0010231:	50                   	push   eax
c0010232:	e8 63 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010237:	5f                   	pop    edi
c0010238:	5d                   	pop    ebp
c0010239:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001023f:	53                   	push   ebx
c0010240:	a1 00 b2 02 c0       	mov    eax,ds:0xc002b200
c0010245:	99                   	cdq    
c0010246:	f7 fe                	idiv   esi
c0010248:	99                   	cdq    
c0010249:	f7 f9                	idiv   ecx
c001024b:	8d 42 30             	lea    eax,[edx+0x30]
c001024e:	0f b6 c0             	movzx  eax,al
c0010251:	50                   	push   eax
c0010252:	e8 43 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010257:	5a                   	pop    edx
c0010258:	5e                   	pop    esi
c0010259:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001025f:	53                   	push   ebx
c0010260:	a1 00 b2 02 c0       	mov    eax,ds:0xc002b200
c0010265:	99                   	cdq    
c0010266:	f7 f9                	idiv   ecx
c0010268:	99                   	cdq    
c0010269:	f7 f9                	idiv   ecx
c001026b:	8d 42 30             	lea    eax,[edx+0x30]
c001026e:	0f b6 c0             	movzx  eax,al
c0010271:	50                   	push   eax
c0010272:	e8 23 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010277:	5f                   	pop    edi
c0010278:	5d                   	pop    ebp
c0010279:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001027f:	53                   	push   ebx
c0010280:	a1 00 b2 02 c0       	mov    eax,ds:0xc002b200
c0010285:	99                   	cdq    
c0010286:	f7 f9                	idiv   ecx
c0010288:	83 c2 30             	add    edx,0x30
c001028b:	0f b6 d2             	movzx  edx,dl
c001028e:	52                   	push   edx
c001028f:	e8 06 fd ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c0010294:	5a                   	pop    edx
c0010295:	59                   	pop    ecx
c0010296:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001029c:	5b                   	pop    ebx
c001029d:	5e                   	pop    esi
c001029e:	5f                   	pop    edi
c001029f:	5d                   	pop    ebp
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::updateTitle()>:
c00102a2:	53                   	push   ebx
c00102a3:	31 c0                	xor    eax,eax
c00102a5:	83 ec 58             	sub    esp,0x58
c00102a8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102ac:	89 e1                	mov    ecx,esp
c00102ae:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102b2:	40                   	inc    eax
c00102b3:	83 f8 50             	cmp    eax,0x50
c00102b6:	75 f6                	jne    c00102ae <VgaText::updateTitle()+0xc>
c00102b8:	31 c0                	xor    eax,eax
c00102ba:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102c1:	84 db                	test   bl,bl
c00102c3:	74 06                	je     c00102cb <VgaText::updateTitle()+0x29>
c00102c5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102c8:	40                   	inc    eax
c00102c9:	eb ef                	jmp    c00102ba <VgaText::updateTitle()+0x18>
c00102cb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102d1:	85 c0                	test   eax,eax
c00102d3:	74 09                	je     c00102de <VgaText::updateTitle()+0x3c>
c00102d5:	53                   	push   ebx
c00102d6:	53                   	push   ebx
c00102d7:	51                   	push   ecx
c00102d8:	52                   	push   edx
c00102d9:	ff d0                	call   eax
c00102db:	83 c4 10             	add    esp,0x10
c00102de:	e8 59 fe ff ff       	call   c001013c <VgaText::updateDiskUsage()>
c00102e3:	83 c4 58             	add    esp,0x58
c00102e6:	5b                   	pop    ebx
c00102e7:	c3                   	ret    

c00102e8 <VgaText::setTitleTextColour(VgaColour)>:
c00102e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102f0:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102f6:	eb aa                	jmp    c00102a2 <VgaText::updateTitle()>

c00102f8 <VgaText::setTitleColour(VgaColour)>:
c00102f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010300:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010306:	eb 9a                	jmp    c00102a2 <VgaText::updateTitle()>

c0010308 <VgaText::setTitle(char*)>:
c0010308:	53                   	push   ebx
c0010309:	83 ec 10             	sub    esp,0x10
c001030c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010314:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001031a:	50                   	push   eax
c001031b:	e8 65 04 ff ff       	call   c0000785 <strcpy>
c0010320:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010324:	83 c4 18             	add    esp,0x18
c0010327:	5b                   	pop    ebx
c0010328:	e9 75 ff ff ff       	jmp    c00102a2 <VgaText::updateTitle()>
c001032d:	90                   	nop

c001032e <VgaText::decrementCursor(bool)>:
c001032e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010332:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010336:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001033c:	85 c0                	test   eax,eax
c001033e:	74 07                	je     c0010347 <VgaText::decrementCursor(bool)+0x19>
c0010340:	48                   	dec    eax
c0010341:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010347:	84 c9                	test   cl,cl
c0010349:	74 09                	je     c0010354 <VgaText::decrementCursor(bool)+0x26>
c001034b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001034f:	e9 64 fa ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c0010354:	c3                   	ret    
c0010355:	90                   	nop

c0010356 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010356:	53                   	push   ebx
c0010357:	83 ec 08             	sub    esp,0x8
c001035a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001035e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010362:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010366:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001036a:	3c 07                	cmp    al,0x7
c001036c:	75 2a                	jne    c0010398 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001036e:	a1 cc 95 02 c0       	mov    eax,ds:0xc00295cc
c0010373:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001037b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010383:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001038b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001038f:	83 c4 08             	add    esp,0x8
c0010392:	5b                   	pop    ebx
c0010393:	e9 a4 2c 00 00       	jmp    c001303c <Buzzer::beep(int, int, bool)>
c0010398:	3c 0d                	cmp    al,0xd
c001039a:	75 0c                	jne    c00103a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001039c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103a6:	eb 3b                	jmp    c00103e3 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00103a8:	3c 0a                	cmp    al,0xa
c00103aa:	75 40                	jne    c00103ec <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00103ac:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103b2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103bc:	8d 50 01             	lea    edx,[eax+0x1]
c00103bf:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103c5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103cb:	75 12                	jne    c00103df <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103cd:	83 ec 0c             	sub    esp,0xc
c00103d0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103d6:	53                   	push   ebx
c00103d7:	e8 2a fb ff ff       	call   c000ff06 <VgaText::scrollScreen()>
c00103dc:	83 c4 10             	add    esp,0x10
c00103df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103e3:	83 c4 08             	add    esp,0x8
c00103e6:	5b                   	pop    ebx
c00103e7:	e9 cc f9 ff ff       	jmp    c000fdb8 <VgaText::updateCursor()>
c00103ec:	3c 08                	cmp    al,0x8
c00103ee:	75 31                	jne    c0010421 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103f0:	50                   	push   eax
c00103f1:	50                   	push   eax
c00103f2:	6a 01                	push   0x1
c00103f4:	53                   	push   ebx
c00103f5:	e8 34 ff ff ff       	call   c001032e <VgaText::decrementCursor(bool)>
c00103fa:	5a                   	pop    edx
c00103fb:	59                   	pop    ecx
c00103fc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010402:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010408:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001040e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010414:	6a 20                	push   0x20
c0010416:	53                   	push   ebx
c0010417:	e8 90 fb ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001041c:	83 c4 28             	add    esp,0x28
c001041f:	5b                   	pop    ebx
c0010420:	c3                   	ret    
c0010421:	83 ec 08             	sub    esp,0x8
c0010424:	0f be c0             	movsx  eax,al
c0010427:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001042d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010433:	51                   	push   ecx
c0010434:	52                   	push   edx
c0010435:	50                   	push   eax
c0010436:	53                   	push   ebx
c0010437:	e8 70 fb ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001043c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010440:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010448:	83 c4 28             	add    esp,0x28
c001044b:	5b                   	pop    ebx
c001044c:	e9 29 fc ff ff       	jmp    c001007a <VgaText::incrementCursor(bool)>
c0010451:	90                   	nop

c0010452 <VgaText::isShowingCursor()>:
c0010452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010456:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001045c:	c3                   	ret    
c001045d:	90                   	nop

c001045e <VgaText::isBlinkDisabled()>:
c001045e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010462:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010468:	83 f0 01             	xor    eax,0x1
c001046b:	c3                   	ret    

c001046c <VgaText::setCursorHeight(int)>:
c001046c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010474:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001047a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010481:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010485:	e9 48 f9 ff ff       	jmp    c000fdd2 <VgaText::showCursor(bool)>

c001048a <VgaText::getCursorHeight()>:
c001048a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001048e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010494:	c3                   	ret    

c0010495 <setActiveTerminal(VgaText*)>:
c0010495:	53                   	push   ebx
c0010496:	83 ec 08             	sub    esp,0x8
c0010499:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001049d:	85 db                	test   ebx,ebx
c001049f:	75 11                	jne    c00104b2 <setActiveTerminal(VgaText*)+0x1d>
c00104a1:	c7 44 24 10 8c 5d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025d8c
c00104a9:	83 c4 08             	add    esp,0x8
c00104ac:	5b                   	pop    ebx
c00104ad:	e9 5c 85 00 00       	jmp    c0018a0e <Krnl::panic(char const*)>
c00104b2:	50                   	push   eax
c00104b3:	50                   	push   eax
c00104b4:	53                   	push   ebx
c00104b5:	68 9a 5d 02 c0       	push   0xc0025d9a
c00104ba:	e8 92 1d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00104bf:	a1 24 95 02 c0       	mov    eax,ds:0xc0029524
c00104c4:	83 c4 10             	add    esp,0x10
c00104c7:	85 c0                	test   eax,eax
c00104c9:	74 0c                	je     c00104d7 <setActiveTerminal(VgaText*)+0x42>
c00104cb:	83 ec 0c             	sub    esp,0xc
c00104ce:	50                   	push   eax
c00104cf:	e8 e4 f8 ff ff       	call   c000fdb8 <VgaText::updateCursor()>
c00104d4:	83 c4 10             	add    esp,0x10
c00104d7:	89 1d 24 95 02 c0    	mov    DWORD PTR ds:0xc0029524,ebx
c00104dd:	51                   	push   ecx
c00104de:	51                   	push   ecx
c00104df:	53                   	push   ebx
c00104e0:	68 b2 5d 02 c0       	push   0xc0025db2
c00104e5:	e8 67 1d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00104ea:	83 c4 0c             	add    esp,0xc
c00104ed:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104f3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104f9:	53                   	push   ebx
c00104fa:	e8 25 fb ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c00104ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010502:	e8 57 ff ff ff       	call   c001045e <VgaText::isBlinkDisabled()>
c0010507:	5a                   	pop    edx
c0010508:	0f b6 c0             	movzx  eax,al
c001050b:	59                   	pop    ecx
c001050c:	50                   	push   eax
c001050d:	53                   	push   ebx
c001050e:	e8 cf f8 ff ff       	call   c000fde2 <VgaText::disableBlink(bool)>
c0010513:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010516:	e8 6f ff ff ff       	call   c001048a <VgaText::getCursorHeight()>
c001051b:	5a                   	pop    edx
c001051c:	59                   	pop    ecx
c001051d:	50                   	push   eax
c001051e:	53                   	push   ebx
c001051f:	e8 48 ff ff ff       	call   c001046c <VgaText::setCursorHeight(int)>
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001052e:	75 0a                	jne    c001053a <setActiveTerminal(VgaText*)+0xa5>
c0010530:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c001053a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001053e:	83 c4 08             	add    esp,0x8
c0010541:	5b                   	pop    ebx
c0010542:	e9 1d f8 ff ff       	jmp    c000fd64 <VgaText::load()>

c0010547 <doTerminalCycle()>:
c0010547:	83 ec 18             	sub    esp,0x18
c001054a:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001054f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010555:	50                   	push   eax
c0010556:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c001055b:	e8 35 ff ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c0010560:	83 c4 1c             	add    esp,0x1c
c0010563:	c3                   	ret    

c0010564 <VgaText::doUpdate()>:
c0010564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010568:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c001056e:	85 c0                	test   eax,eax
c0010570:	74 02                	je     c0010574 <VgaText::doUpdate()+0x10>
c0010572:	ff e0                	jmp    eax
c0010574:	c3                   	ret    
c0010575:	90                   	nop

c0010576 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010576:	55                   	push   ebp
c0010577:	57                   	push   edi
c0010578:	56                   	push   esi
c0010579:	53                   	push   ebx
c001057a:	83 ec 1c             	sub    esp,0x1c
c001057d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010581:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010586:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c001058d:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010590:	50                   	push   eax
c0010591:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010596:	50                   	push   eax
c0010597:	e8 58 f9 ff ff       	call   c000fef4 <VgaText::combineColours(unsigned char, unsigned char)>
c001059c:	59                   	pop    ecx
c001059d:	0f b6 c0             	movzx  eax,al
c00105a0:	5b                   	pop    ebx
c00105a1:	31 c9                	xor    ecx,ecx
c00105a3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00105af:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105b9:	0f b7 db             	movzx  ebx,bx
c00105bc:	01 db                	add    ebx,ebx
c00105be:	01 fb                	add    ebx,edi
c00105c0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105c3:	84 c0                	test   al,al
c00105c5:	0f 84 38 01 00 00    	je     c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105cb:	3c 0d                	cmp    al,0xd
c00105cd:	75 0f                	jne    c00105de <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105cf:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105d9:	e9 1f 01 00 00       	jmp    c00106fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105de:	3c 0a                	cmp    al,0xa
c00105e0:	75 5b                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105e2:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105e8:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105f2:	8d 48 01             	lea    ecx,[eax+0x1]
c00105f5:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105fb:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010601:	75 12                	jne    c0010615 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010603:	83 ec 0c             	sub    esp,0xc
c0010606:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001060c:	55                   	push   ebp
c001060d:	e8 f4 f8 ff ff       	call   c000ff06 <VgaText::scrollScreen()>
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	83 ec 0c             	sub    esp,0xc
c0010618:	55                   	push   ebp
c0010619:	e8 9a f7 ff ff       	call   c000fdb8 <VgaText::updateCursor()>
c001061e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001062f:	31 c9                	xor    ecx,ecx
c0010631:	0f b7 db             	movzx  ebx,bx
c0010634:	01 db                	add    ebx,ebx
c0010636:	01 fb                	add    ebx,edi
c0010638:	e9 c0 00 00 00       	jmp    c00106fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001063d:	3c 08                	cmp    al,0x8
c001063f:	75 4e                	jne    c001068f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010641:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010645:	53                   	push   ebx
c0010646:	53                   	push   ebx
c0010647:	6a 01                	push   0x1
c0010649:	55                   	push   ebp
c001064a:	e8 df fc ff ff       	call   c001032e <VgaText::decrementCursor(bool)>
c001064f:	58                   	pop    eax
c0010650:	5a                   	pop    edx
c0010651:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010657:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c001065d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010663:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010669:	6a 20                	push   0x20
c001066b:	55                   	push   ebp
c001066c:	e8 3b f9 ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010671:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010679:	83 c4 20             	add    esp,0x20
c001067c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010682:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010686:	0f b7 db             	movzx  ebx,bx
c0010689:	01 db                	add    ebx,ebx
c001068b:	01 fb                	add    ebx,edi
c001068d:	eb 6e                	jmp    c00106fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001068f:	51                   	push   ecx
c0010690:	51                   	push   ecx
c0010691:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010695:	50                   	push   eax
c0010696:	e8 ff f8 ff ff       	call   c000ff9a <VgaText::combineCharAndColour(char, unsigned char)>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	66 89 03             	mov    WORD PTR [ebx],ax
c00106a1:	39 2d 24 95 02 c0    	cmp    DWORD PTR ds:0xc0029524,ebp
c00106a7:	75 2a                	jne    c00106d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106a9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c00106af:	85 c0                	test   eax,eax
c00106b1:	74 20                	je     c00106d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106b3:	52                   	push   edx
c00106b4:	52                   	push   edx
c00106b5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106bb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106c9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106cc:	51                   	push   ecx
c00106cd:	55                   	push   ebp
c00106ce:	ff d0                	call   eax
c00106d0:	83 c4 20             	add    esp,0x20
c00106d3:	83 c3 02             	add    ebx,0x2
c00106d6:	50                   	push   eax
c00106d7:	50                   	push   eax
c00106d8:	6a 00                	push   0x0
c00106da:	55                   	push   ebp
c00106db:	e8 9a f9 ff ff       	call   c001007a <VgaText::incrementCursor(bool)>
c00106e0:	83 c4 10             	add    esp,0x10
c00106e3:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106ea:	75 0f                	jne    c00106fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106ec:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106f4:	0f b7 db             	movzx  ebx,bx
c00106f7:	01 db                	add    ebx,ebx
c00106f9:	01 fb                	add    ebx,edi
c00106fb:	b1 01                	mov    cl,0x1
c00106fd:	46                   	inc    esi
c00106fe:	e9 bd fe ff ff       	jmp    c00105c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010703:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010707:	83 ec 0c             	sub    esp,0xc
c001070a:	55                   	push   ebp
c001070b:	e8 a8 f6 ff ff       	call   c000fdb8 <VgaText::updateCursor()>
c0010710:	83 c4 10             	add    esp,0x10
c0010713:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010717:	84 c9                	test   cl,cl
c0010719:	74 0c                	je     c0010727 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001071b:	83 ec 0c             	sub    esp,0xc
c001071e:	55                   	push   ebp
c001071f:	e8 40 fe ff ff       	call   c0010564 <VgaText::doUpdate()>
c0010724:	83 c4 10             	add    esp,0x10
c0010727:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c001072e:	83 c4 1c             	add    esp,0x1c
c0010731:	5b                   	pop    ebx
c0010732:	5e                   	pop    esi
c0010733:	5f                   	pop    edi
c0010734:	5d                   	pop    ebp
c0010735:	c3                   	ret    

c0010736 <VgaText::clearScreen()>:
c0010736:	57                   	push   edi
c0010737:	56                   	push   esi
c0010738:	31 f6                	xor    esi,esi
c001073a:	53                   	push   ebx
c001073b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001073f:	52                   	push   edx
c0010740:	6a 00                	push   0x0
c0010742:	6a 00                	push   0x0
c0010744:	53                   	push   ebx
c0010745:	e8 da f8 ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c001074a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001075a:	7e 26                	jle    c0010782 <VgaText::clearScreen()+0x4c>
c001075c:	31 ff                	xor    edi,edi
c001075e:	50                   	push   eax
c001075f:	50                   	push   eax
c0010760:	56                   	push   esi
c0010761:	57                   	push   edi
c0010762:	47                   	inc    edi
c0010763:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010769:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001076f:	6a 20                	push   0x20
c0010771:	53                   	push   ebx
c0010772:	e8 35 f8 ff ff       	call   c000ffac <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010777:	83 c4 20             	add    esp,0x20
c001077a:	83 ff 50             	cmp    edi,0x50
c001077d:	75 df                	jne    c001075e <VgaText::clearScreen()+0x28>
c001077f:	46                   	inc    esi
c0010780:	eb d2                	jmp    c0010754 <VgaText::clearScreen()+0x1e>
c0010782:	83 ec 0c             	sub    esp,0xc
c0010785:	53                   	push   ebx
c0010786:	e8 d9 fd ff ff       	call   c0010564 <VgaText::doUpdate()>
c001078b:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010792:	83 c4 10             	add    esp,0x10
c0010795:	5b                   	pop    ebx
c0010796:	5e                   	pop    esi
c0010797:	5f                   	pop    edi
c0010798:	c3                   	ret    
c0010799:	90                   	nop

c001079a <VgaText::putchar(char)>:
c001079a:	56                   	push   esi
c001079b:	53                   	push   ebx
c001079c:	83 ec 14             	sub    esp,0x14
c001079f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00107a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107a7:	3c 5b                	cmp    al,0x5b
c00107a9:	75 21                	jne    c00107cc <VgaText::putchar(char)+0x32>
c00107ab:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00107b2:	74 28                	je     c00107dc <VgaText::putchar(char)+0x42>
c00107b4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107bd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107c7:	e9 e2 00 00 00       	jmp    c00108ae <VgaText::putchar(char)+0x114>
c00107cc:	3c 1b                	cmp    al,0x1b
c00107ce:	75 0c                	jne    c00107dc <VgaText::putchar(char)+0x42>
c00107d0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107d7:	e9 d2 00 00 00       	jmp    c00108ae <VgaText::putchar(char)+0x114>
c00107dc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107e2:	84 c9                	test   cl,cl
c00107e4:	0f 84 ab 00 00 00    	je     c0010895 <VgaText::putchar(char)+0xfb>
c00107ea:	8d 50 c0             	lea    edx,[eax-0x40]
c00107ed:	80 fa 3e             	cmp    dl,0x3e
c00107f0:	0f 87 82 00 00 00    	ja     c0010878 <VgaText::putchar(char)+0xde>
c00107f6:	3c 6d                	cmp    al,0x6d
c00107f8:	75 4d                	jne    c0010847 <VgaText::putchar(char)+0xad>
c00107fa:	31 f6                	xor    esi,esi
c00107fc:	31 d2                	xor    edx,edx
c00107fe:	31 c0                	xor    eax,eax
c0010800:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010806:	7e 30                	jle    c0010838 <VgaText::putchar(char)+0x9e>
c0010808:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010810:	80 fa 3b             	cmp    dl,0x3b
c0010813:	75 17                	jne    c001082c <VgaText::putchar(char)+0x92>
c0010815:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010819:	50                   	push   eax
c001081a:	53                   	push   ebx
c001081b:	e8 fc f5 ff ff       	call   c000fe1c <VgaText::doANSI_SGR(int)>
c0010820:	59                   	pop    ecx
c0010821:	31 d2                	xor    edx,edx
c0010823:	58                   	pop    eax
c0010824:	31 c0                	xor    eax,eax
c0010826:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001082a:	eb 09                	jmp    c0010835 <VgaText::putchar(char)+0x9b>
c001082c:	6b c0 0a             	imul   eax,eax,0xa
c001082f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010833:	88 ca                	mov    dl,cl
c0010835:	46                   	inc    esi
c0010836:	eb c8                	jmp    c0010800 <VgaText::putchar(char)+0x66>
c0010838:	84 d2                	test   dl,dl
c001083a:	74 31                	je     c001086d <VgaText::putchar(char)+0xd3>
c001083c:	50                   	push   eax
c001083d:	53                   	push   ebx
c001083e:	e8 d9 f5 ff ff       	call   c000fe1c <VgaText::doANSI_SGR(int)>
c0010843:	58                   	pop    eax
c0010844:	5a                   	pop    edx
c0010845:	eb 26                	jmp    c001086d <VgaText::putchar(char)+0xd3>
c0010847:	3c 4a                	cmp    al,0x4a
c0010849:	75 22                	jne    c001086d <VgaText::putchar(char)+0xd3>
c001084b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010852:	75 19                	jne    c001086d <VgaText::putchar(char)+0xd3>
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	53                   	push   ebx
c0010858:	e8 d9 fe ff ff       	call   c0010736 <VgaText::clearScreen()>
c001085d:	83 c4 0c             	add    esp,0xc
c0010860:	6a 00                	push   0x0
c0010862:	6a 00                	push   0x0
c0010864:	53                   	push   ebx
c0010865:	e8 ba f7 ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c001086a:	83 c4 10             	add    esp,0x10
c001086d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010876:	eb 36                	jmp    c00108ae <VgaText::putchar(char)+0x114>
c0010878:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001087e:	83 fa 0e             	cmp    edx,0xe
c0010881:	7f 2b                	jg     c00108ae <VgaText::putchar(char)+0x114>
c0010883:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010886:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001088c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010893:	eb 19                	jmp    c00108ae <VgaText::putchar(char)+0x114>
c0010895:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001089b:	0f be c0             	movsx  eax,al
c001089e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108a4:	50                   	push   eax
c00108a5:	53                   	push   ebx
c00108a6:	e8 ab fa ff ff       	call   c0010356 <VgaText::putchar(char, VgaColour, VgaColour)>
c00108ab:	83 c4 10             	add    esp,0x10
c00108ae:	83 c4 14             	add    esp,0x14
c00108b1:	5b                   	pop    ebx
c00108b2:	5e                   	pop    esi
c00108b3:	c3                   	ret    

c00108b4 <VgaText::puts(char const*)>:
c00108b4:	53                   	push   ebx
c00108b5:	83 ec 08             	sub    esp,0x8
c00108b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108bf:	84 c0                	test   al,al
c00108c1:	74 12                	je     c00108d5 <VgaText::puts(char const*)+0x21>
c00108c3:	43                   	inc    ebx
c00108c4:	51                   	push   ecx
c00108c5:	51                   	push   ecx
c00108c6:	50                   	push   eax
c00108c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108cb:	e8 ca fe ff ff       	call   c001079a <VgaText::putchar(char)>
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	eb e7                	jmp    c00108bc <VgaText::puts(char const*)+0x8>
c00108d5:	83 c4 08             	add    esp,0x8
c00108d8:	5b                   	pop    ebx
c00108d9:	c3                   	ret    

c00108da <VgaText::putx(unsigned int)>:
c00108da:	57                   	push   edi
c00108db:	b9 11 00 00 00       	mov    ecx,0x11
c00108e0:	56                   	push   esi
c00108e1:	be ce 5d 02 c0       	mov    esi,0xc0025dce
c00108e6:	53                   	push   ebx
c00108e7:	83 ec 20             	sub    esp,0x20
c00108ea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108ee:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108f2:	fc                   	cld    
c00108f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108f5:	be 08 00 00 00       	mov    esi,0x8
c00108fa:	50                   	push   eax
c00108fb:	50                   	push   eax
c00108fc:	89 d8                	mov    eax,ebx
c00108fe:	c1 e3 04             	shl    ebx,0x4
c0010901:	c1 e8 1c             	shr    eax,0x1c
c0010904:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010909:	50                   	push   eax
c001090a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001090e:	e8 87 fe ff ff       	call   c001079a <VgaText::putchar(char)>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	4e                   	dec    esi
c0010917:	75 e1                	jne    c00108fa <VgaText::putx(unsigned int)+0x20>
c0010919:	83 c4 20             	add    esp,0x20
c001091c:	5b                   	pop    ebx
c001091d:	5e                   	pop    esi
c001091e:	5f                   	pop    edi
c001091f:	c3                   	ret    

c0010920 <VgaText::VgaText(char const*)>:
c0010920:	57                   	push   edi
c0010921:	56                   	push   esi
c0010922:	53                   	push   ebx
c0010923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010927:	83 ec 08             	sub    esp,0x8
c001092a:	6a 00                	push   0x0
c001092c:	50                   	push   eax
c001092d:	e8 4a 05 00 00       	call   c0010e7c <UnixFile::UnixFile(int)>
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	ba 34 5e 02 c0       	mov    edx,0xc0025e34
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	89 10                	mov    DWORD PTR [eax],edx
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001094e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010952:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001095c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010960:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010976:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010984:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001098e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010992:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00109a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00109ae:	bb 00 95 02 c0       	mov    ebx,0xc0029500
c00109b3:	b8 08 00 00 00       	mov    eax,0x8
c00109b8:	fc                   	cld    
c00109b9:	89 d7                	mov    edi,edx
c00109bb:	89 de                	mov    esi,ebx
c00109bd:	89 c1                	mov    ecx,eax
c00109bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c5:	05 1e 10 00 00       	add    eax,0x101e
c00109ca:	83 ec 08             	sub    esp,0x8
c00109cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d1:	50                   	push   eax
c00109d2:	e8 ae fd fe ff       	call   c0000785 <strcpy>
c00109d7:	83 c4 10             	add    esp,0x10
c00109da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109de:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ec:	83 c0 0c             	add    eax,0xc
c00109ef:	83 ec 04             	sub    esp,0x4
c00109f2:	68 00 0f 00 00       	push   0xf00
c00109f7:	6a 00                	push   0x0
c00109f9:	50                   	push   eax
c00109fa:	e8 e7 fc fe ff       	call   c00006e6 <memset>
c00109ff:	83 c4 10             	add    esp,0x10
c0010a02:	83 ec 04             	sub    esp,0x4
c0010a05:	6a 00                	push   0x0
c0010a07:	6a 07                	push   0x7
c0010a09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0d:	e8 c2 f4 ff ff       	call   c000fed4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	83 ec 08             	sub    esp,0x8
c0010a18:	6a 02                	push   0x2
c0010a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1e:	e8 49 fa ff ff       	call   c001046c <VgaText::setCursorHeight(int)>
c0010a23:	83 c4 10             	add    esp,0x10
c0010a26:	83 ec 04             	sub    esp,0x4
c0010a29:	6a 00                	push   0x0
c0010a2b:	6a 00                	push   0x0
c0010a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a31:	e8 ee f5 ff ff       	call   c0010024 <VgaText::setCursor(int, int)>
c0010a36:	83 c4 10             	add    esp,0x10
c0010a39:	83 ec 08             	sub    esp,0x8
c0010a3c:	6a 01                	push   0x1
c0010a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a42:	e8 8b f3 ff ff       	call   c000fdd2 <VgaText::showCursor(bool)>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	83 ec 08             	sub    esp,0x8
c0010a4d:	6a 01                	push   0x1
c0010a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a53:	e8 8a f3 ff ff       	call   c000fde2 <VgaText::disableBlink(bool)>
c0010a58:	83 c4 10             	add    esp,0x10
c0010a5b:	83 ec 0c             	sub    esp,0xc
c0010a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a62:	e8 cf fc ff ff       	call   c0010736 <VgaText::clearScreen()>
c0010a67:	83 c4 10             	add    esp,0x10
c0010a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a79:	05 9e 10 00 00       	add    eax,0x109e
c0010a7e:	83 ec 04             	sub    esp,0x4
c0010a81:	68 96 00 00 00       	push   0x96
c0010a86:	6a 00                	push   0x0
c0010a88:	50                   	push   eax
c0010a89:	e8 58 fc fe ff       	call   c00006e6 <memset>
c0010a8e:	83 c4 10             	add    esp,0x10
c0010a91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a95:	05 34 11 00 00       	add    eax,0x1134
c0010a9a:	83 ec 04             	sub    esp,0x4
c0010a9d:	68 2c 01 00 00       	push   0x12c
c0010aa2:	6a 00                	push   0x0
c0010aa4:	50                   	push   eax
c0010aa5:	e8 3c fc fe ff       	call   c00006e6 <memset>
c0010aaa:	83 c4 10             	add    esp,0x10
c0010aad:	90                   	nop
c0010aae:	5b                   	pop    ebx
c0010aaf:	5e                   	pop    esi
c0010ab0:	5f                   	pop    edi
c0010ab1:	c3                   	ret    

c0010ab2 <VgaText::receiveKey(unsigned char)>:
c0010ab2:	55                   	push   ebp
c0010ab3:	57                   	push   edi
c0010ab4:	56                   	push   esi
c0010ab5:	53                   	push   ebx
c0010ab6:	83 ec 1c             	sub    esp,0x1c
c0010ab9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010abd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ac1:	84 db                	test   bl,bl
c0010ac3:	0f 84 c9 00 00 00    	je     c0010b92 <VgaText::receiveKey(unsigned char)+0xe0>
c0010ac9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010acf:	80 fb 08             	cmp    bl,0x8
c0010ad2:	75 2c                	jne    c0010b00 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	57                   	push   edi
c0010ad8:	e8 26 fc fe ff       	call   c0000703 <strlen>
c0010add:	83 c4 10             	add    esp,0x10
c0010ae0:	85 c0                	test   eax,eax
c0010ae2:	74 41                	je     c0010b25 <VgaText::receiveKey(unsigned char)+0x73>
c0010ae4:	50                   	push   eax
c0010ae5:	50                   	push   eax
c0010ae6:	6a 08                	push   0x8
c0010ae8:	56                   	push   esi
c0010ae9:	e8 ac fc ff ff       	call   c001079a <VgaText::putchar(char)>
c0010aee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010af1:	e8 0d fc fe ff       	call   c0000703 <strlen>
c0010af6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010afe:	eb 22                	jmp    c0010b22 <VgaText::receiveKey(unsigned char)+0x70>
c0010b00:	0f be c3             	movsx  eax,bl
c0010b03:	52                   	push   edx
c0010b04:	52                   	push   edx
c0010b05:	50                   	push   eax
c0010b06:	56                   	push   esi
c0010b07:	e8 8e fc ff ff       	call   c001079a <VgaText::putchar(char)>
c0010b0c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010b10:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010b15:	59                   	pop    ecx
c0010b16:	5d                   	pop    ebp
c0010b17:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b1b:	50                   	push   eax
c0010b1c:	57                   	push   edi
c0010b1d:	e8 1a fd fe ff       	call   c000083c <strcat>
c0010b22:	83 c4 10             	add    esp,0x10
c0010b25:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b2c:	75 05                	jne    c0010b33 <VgaText::receiveKey(unsigned char)+0x81>
c0010b2e:	80 fb 0a             	cmp    bl,0xa
c0010b31:	75 53                	jne    c0010b86 <VgaText::receiveKey(unsigned char)+0xd4>
c0010b33:	83 ec 0c             	sub    esp,0xc
c0010b36:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b3c:	53                   	push   ebx
c0010b3d:	e8 c1 fb fe ff       	call   c0000703 <strlen>
c0010b42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b45:	89 c5                	mov    ebp,eax
c0010b47:	e8 b7 fb fe ff       	call   c0000703 <strlen>
c0010b4c:	83 c4 10             	add    esp,0x10
c0010b4f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b53:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b58:	76 10                	jbe    c0010b6a <VgaText::receiveKey(unsigned char)+0xb8>
c0010b5a:	83 ec 0c             	sub    esp,0xc
c0010b5d:	68 df 5d 02 c0       	push   0xc0025ddf
c0010b62:	e8 a7 7e 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0010b67:	83 c4 10             	add    esp,0x10
c0010b6a:	50                   	push   eax
c0010b6b:	50                   	push   eax
c0010b6c:	57                   	push   edi
c0010b6d:	53                   	push   ebx
c0010b6e:	e8 c9 fc fe ff       	call   c000083c <strcat>
c0010b73:	83 c4 0c             	add    esp,0xc
c0010b76:	68 96 00 00 00       	push   0x96
c0010b7b:	6a 00                	push   0x0
c0010b7d:	57                   	push   edi
c0010b7e:	e8 63 fb fe ff       	call   c00006e6 <memset>
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	83 ec 0c             	sub    esp,0xc
c0010b89:	56                   	push   esi
c0010b8a:	e8 d5 f9 ff ff       	call   c0010564 <VgaText::doUpdate()>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	83 c4 1c             	add    esp,0x1c
c0010b95:	5b                   	pop    ebx
c0010b96:	5e                   	pop    esi
c0010b97:	5f                   	pop    edi
c0010b98:	5d                   	pop    ebp
c0010b99:	c3                   	ret    

c0010b9a <VgaText::write(unsigned long long, void*, int*)>:
c0010b9a:	55                   	push   ebp
c0010b9b:	57                   	push   edi
c0010b9c:	56                   	push   esi
c0010b9d:	53                   	push   ebx
c0010b9e:	83 ec 0c             	sub    esp,0xc
c0010ba1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ba5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ba9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bad:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010bb4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010bb7:	39 eb                	cmp    ebx,ebp
c0010bb9:	74 13                	je     c0010bce <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010bbb:	43                   	inc    ebx
c0010bbc:	50                   	push   eax
c0010bbd:	50                   	push   eax
c0010bbe:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010bc2:	50                   	push   eax
c0010bc3:	56                   	push   esi
c0010bc4:	e8 d1 fb ff ff       	call   c001079a <VgaText::putchar(char)>
c0010bc9:	83 c4 10             	add    esp,0x10
c0010bcc:	eb e9                	jmp    c0010bb7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bce:	83 ec 0c             	sub    esp,0xc
c0010bd1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010bd8:	56                   	push   esi
c0010bd9:	e8 86 f9 ff ff       	call   c0010564 <VgaText::doUpdate()>
c0010bde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010be2:	89 38                	mov    DWORD PTR [eax],edi
c0010be4:	83 c4 1c             	add    esp,0x1c
c0010be7:	31 c0                	xor    eax,eax
c0010be9:	5b                   	pop    ebx
c0010bea:	5e                   	pop    esi
c0010beb:	5f                   	pop    edi
c0010bec:	5d                   	pop    ebp
c0010bed:	c3                   	ret    

c0010bee <newTerminal(char*)>:
c0010bee:	83 ec 28             	sub    esp,0x28
c0010bf1:	68 60 12 00 00       	push   0x1260
c0010bf6:	e8 67 15 00 00       	call   c0012162 <operator new(unsigned long)>
c0010bfb:	5a                   	pop    edx
c0010bfc:	59                   	pop    ecx
c0010bfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010c01:	50                   	push   eax
c0010c02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c06:	e8 15 fd ff ff       	call   c0010920 <VgaText::VgaText(char const*)>
c0010c0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010c0f:	83 c4 2c             	add    esp,0x2c
c0010c12:	c3                   	ret    
c0010c13:	90                   	nop

c0010c14 <TSS::TSS()>:
c0010c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c1f:	90                   	nop
c0010c20:	c3                   	ret    
c0010c21:	90                   	nop

c0010c22 <TSS::setESP(unsigned long)>:
c0010c22:	55                   	push   ebp
c0010c23:	89 e5                	mov    ebp,esp
c0010c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c2e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c31:	90                   	nop
c0010c32:	5d                   	pop    ebp
c0010c33:	c3                   	ret    

c0010c34 <TSS::flush()>:
c0010c34:	55                   	push   ebp
c0010c35:	89 e5                	mov    ebp,esp
c0010c37:	83 ec 10             	sub    esp,0x10
c0010c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c3f:	83 c8 03             	or     eax,0x3
c0010c42:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c46:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c4a:	66 89 d0             	mov    ax,dx
c0010c4d:	0f 00 d8             	ltr    ax
c0010c50:	90                   	nop
c0010c51:	c9                   	leave  
c0010c52:	c3                   	ret    
c0010c53:	90                   	nop

c0010c54 <TSS::setup(unsigned long, unsigned long)>:
c0010c54:	55                   	push   ebp
c0010c55:	89 e5                	mov    ebp,esp
c0010c57:	53                   	push   ebx
c0010c58:	83 ec 14             	sub    esp,0x14
c0010c5b:	83 ec 0c             	sub    esp,0xc
c0010c5e:	6a 68                	push   0x68
c0010c60:	e8 fb e4 ff ff       	call   c000f160 <malloc>
c0010c65:	83 c4 10             	add    esp,0x10
c0010c68:	89 c2                	mov    edx,eax
c0010c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c76:	83 ec 04             	sub    esp,0x4
c0010c79:	6a 68                	push   0x68
c0010c7b:	6a 00                	push   0x0
c0010c7d:	50                   	push   eax
c0010c7e:	e8 63 fa fe ff       	call   c00006e6 <memset>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8c:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c98:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ca7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb0:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbc:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc8:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd4:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ce3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf8:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d02:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d05:	e8 8b 34 01 00       	call   c0024195 <CPU::readCR3()>
c0010d0a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d13:	83 ec 08             	sub    esp,0x8
c0010d16:	50                   	push   eax
c0010d17:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d1a:	50                   	push   eax
c0010d1b:	e8 16 dc ff ff       	call   c000e936 <GDTEntry::setBase(unsigned int)>
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	83 ec 08             	sub    esp,0x8
c0010d26:	6a 68                	push   0x68
c0010d28:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d2b:	50                   	push   eax
c0010d2c:	e8 21 dc ff ff       	call   c000e952 <GDTEntry::setLimit(unsigned int)>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d38:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d3b:	83 e0 0f             	and    eax,0xf
c0010d3e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d41:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d44:	83 c8 40             	or     eax,0x40
c0010d47:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d4a:	e8 3f 6b 00 00       	call   c001788e <thisCPU()>
c0010d4f:	05 78 01 00 00       	add    eax,0x178
c0010d54:	83 ec 04             	sub    esp,0x4
c0010d57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d5d:	50                   	push   eax
c0010d5e:	e8 23 dc ff ff       	call   c000e986 <GDT::addEntry(GDTEntry)>
c0010d63:	83 c4 10             	add    esp,0x10
c0010d66:	89 c2                	mov    edx,eax
c0010d68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d6b:	89 10                	mov    DWORD PTR [eax],edx
c0010d6d:	e8 1c 6b 00 00       	call   c001788e <thisCPU()>
c0010d72:	05 78 01 00 00       	add    eax,0x178
c0010d77:	83 ec 0c             	sub    esp,0xc
c0010d7a:	50                   	push   eax
c0010d7b:	e8 4a dc ff ff       	call   c000e9ca <GDT::flush()>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d86:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d88:	83 ec 08             	sub    esp,0x8
c0010d8b:	50                   	push   eax
c0010d8c:	68 48 5e 02 c0       	push   0xc0025e48
c0010d91:	e8 bb 14 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d9e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010da1:	c9                   	leave  
c0010da2:	c3                   	ret    
c0010da3:	90                   	nop

c0010da4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010daf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010db4:	75 08                	jne    c0010dbe <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010db6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dbc:	eb 38                	jmp    c0010df6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010dbe:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010dc3:	75 17                	jne    c0010ddc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010dc5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dcd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dd9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010ddc:	89 c1                	mov    ecx,eax
c0010dde:	83 e1 fd             	and    ecx,0xfffffffd
c0010de1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010de7:	74 cd                	je     c0010db6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010de9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dee:	83 e0 ef             	and    eax,0xffffffef
c0010df1:	83 f8 08             	cmp    eax,0x8
c0010df4:	76 c0                	jbe    c0010db6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010df6:	31 c0                	xor    eax,eax
c0010df8:	c3                   	ret    
c0010df9:	90                   	nop

c0010dfa <ReservedFilename::isAtty()>:
c0010dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e01:	31 c0                	xor    eax,eax
c0010e03:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e09:	74 09                	je     c0010e14 <ReservedFilename::isAtty()+0x1a>
c0010e0b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e11:	0f 94 c0             	sete   al
c0010e14:	c3                   	ret    
c0010e15:	90                   	nop

c0010e16 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e1a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e25:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e2a:	75 08                	jne    c0010e34 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e2c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e32:	eb 3d                	jmp    c0010e71 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e34:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e39:	75 17                	jne    c0010e52 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e49:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e4f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e52:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e57:	75 04                	jne    c0010e5d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e59:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e5b:	eb 14                	jmp    c0010e71 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e5d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e62:	74 c8                	je     c0010e2c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e64:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e69:	83 e0 ef             	and    eax,0xffffffef
c0010e6c:	83 f8 08             	cmp    eax,0x8
c0010e6f:	76 bb                	jbe    c0010e2c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e71:	31 c0                	xor    eax,eax
c0010e73:	c3                   	ret    

c0010e74 <UnixFile::getFileDescriptor()>:
c0010e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7b:	c3                   	ret    

c0010e7c <UnixFile::UnixFile(int)>:
c0010e7c:	53                   	push   ebx
c0010e7d:	83 ec 18             	sub    esp,0x18
c0010e80:	ba 34 5f 02 c0       	mov    edx,0xc0025f34
c0010e85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e89:	89 10                	mov    DWORD PTR [eax],edx
c0010e8b:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e93:	0f 8f 4d 01 00 00    	jg     c0010fe6 <UnixFile::UnixFile(int)+0x16a>
c0010e99:	a1 80 84 02 c0       	mov    eax,ds:0xc0028480
c0010e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0010ea1:	89 15 80 84 02 c0    	mov    DWORD PTR ds:0xc0028480,edx
c0010ea7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010eab:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010eae:	83 ec 08             	sub    esp,0x8
c0010eb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010eb5:	68 b8 95 02 c0       	push   0xc00295b8
c0010eba:	e8 4b 33 01 00       	call   c002420a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	a0 b4 95 02 c0       	mov    al,ds:0xc00295b4
c0010ec7:	83 f0 01             	xor    eax,0x1
c0010eca:	84 c0                	test   al,al
c0010ecc:	0f 84 15 01 00 00    	je     c0010fe7 <UnixFile::UnixFile(int)+0x16b>
c0010ed2:	c6 05 b4 95 02 c0 01 	mov    BYTE PTR ds:0xc00295b4,0x1
c0010ed9:	83 ec 0c             	sub    esp,0xc
c0010edc:	6a 0c                	push   0xc
c0010ede:	e8 7f 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	89 c3                	mov    ebx,eax
c0010ee8:	83 ec 08             	sub    esp,0x8
c0010eeb:	68 03 ff ff 0f       	push   0xfffff03
c0010ef0:	53                   	push   ebx
c0010ef1:	e8 f6 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010ef6:	83 c4 10             	add    esp,0x10
c0010ef9:	89 1d ac 95 02 c0    	mov    DWORD PTR ds:0xc00295ac,ebx
c0010eff:	83 ec 0c             	sub    esp,0xc
c0010f02:	6a 0c                	push   0xc
c0010f04:	e8 59 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	89 c3                	mov    ebx,eax
c0010f0e:	83 ec 08             	sub    esp,0x8
c0010f11:	68 01 ff ff 0f       	push   0xfffff01
c0010f16:	53                   	push   ebx
c0010f17:	e8 d0 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 1d b0 95 02 c0    	mov    DWORD PTR ds:0xc00295b0,ebx
c0010f25:	83 ec 0c             	sub    esp,0xc
c0010f28:	6a 0c                	push   0xc
c0010f2a:	e8 33 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	89 c3                	mov    ebx,eax
c0010f34:	83 ec 08             	sub    esp,0x8
c0010f37:	68 00 ff ff 0f       	push   0xfffff00
c0010f3c:	53                   	push   ebx
c0010f3d:	e8 aa 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f42:	83 c4 10             	add    esp,0x10
c0010f45:	89 1d a4 95 02 c0    	mov    DWORD PTR ds:0xc00295a4,ebx
c0010f4b:	83 ec 0c             	sub    esp,0xc
c0010f4e:	6a 0c                	push   0xc
c0010f50:	e8 0d 12 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	89 c3                	mov    ebx,eax
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	68 02 ff ff 0f       	push   0xfffff02
c0010f62:	53                   	push   ebx
c0010f63:	e8 84 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	89 1d a8 95 02 c0    	mov    DWORD PTR ds:0xc00295a8,ebx
c0010f71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f79:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f7e:	7f 67                	jg     c0010fe7 <UnixFile::UnixFile(int)+0x16b>
c0010f80:	83 ec 0c             	sub    esp,0xc
c0010f83:	6a 0c                	push   0xc
c0010f85:	e8 d8 11 00 00       	call   c0012162 <operator new(unsigned long)>
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	89 c3                	mov    ebx,eax
c0010f8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f93:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f98:	83 ec 08             	sub    esp,0x8
c0010f9b:	50                   	push   eax
c0010f9c:	53                   	push   ebx
c0010f9d:	e8 4a 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa9:	89 1c 85 80 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a80],ebx
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	6a 0c                	push   0xc
c0010fb5:	e8 a8 11 00 00       	call   c0012162 <operator new(unsigned long)>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	89 c3                	mov    ebx,eax
c0010fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc3:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fc8:	83 ec 08             	sub    esp,0x8
c0010fcb:	50                   	push   eax
c0010fcc:	53                   	push   ebx
c0010fcd:	e8 1a 00 00 00       	call   c0010fec <ReservedFilename::ReservedFilename(int)>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fd9:	89 1c 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],ebx
c0010fe0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fe4:	eb 93                	jmp    c0010f79 <UnixFile::UnixFile(int)+0xfd>
c0010fe6:	90                   	nop
c0010fe7:	83 c4 18             	add    esp,0x18
c0010fea:	5b                   	pop    ebx
c0010feb:	c3                   	ret    

c0010fec <ReservedFilename::ReservedFilename(int)>:
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff3:	83 ec 08             	sub    esp,0x8
c0010ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ffa:	50                   	push   eax
c0010ffb:	e8 7c fe ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0011000:	83 c4 10             	add    esp,0x10
c0011003:	ba 50 5f 02 c0       	mov    edx,0xc0025f50
c0011008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100c:	89 10                	mov    DWORD PTR [eax],edx
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011016:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011019:	90                   	nop
c001101a:	83 c4 0c             	add    esp,0xc
c001101d:	c3                   	ret    

c001101e <UnixFile::~UnixFile()>:
c001101e:	83 ec 1c             	sub    esp,0x1c
c0011021:	ba 34 5f 02 c0       	mov    edx,0xc0025f34
c0011026:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001102a:	89 10                	mov    DWORD PTR [eax],edx
c001102c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011033:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011038:	7f 73                	jg     c00110ad <UnixFile::~UnixFile()+0x8f>
c001103a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011042:	83 ec 0c             	sub    esp,0xc
c0011045:	68 b8 95 02 c0       	push   0xc00295b8
c001104a:	e8 8f 32 01 00       	call   c00242de <LinkedList<UnixFile>::getFirstElement()>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	68 b8 95 02 c0       	push   0xc00295b8
c001105e:	e8 83 32 01 00       	call   c00242e6 <LinkedList<UnixFile>::removeFirst()>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001106a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001106e:	74 40                	je     c00110b0 <UnixFile::~UnixFile()+0x92>
c0011070:	83 ec 08             	sub    esp,0x8
c0011073:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011077:	68 b8 95 02 c0       	push   0xc00295b8
c001107c:	e8 89 31 01 00       	call   c002420a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011088:	8d 50 01             	lea    edx,[eax+0x1]
c001108b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001108f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011094:	0f 94 c0             	sete   al
c0011097:	84 c0                	test   al,al
c0011099:	74 a7                	je     c0011042 <UnixFile::~UnixFile()+0x24>
c001109b:	83 ec 0c             	sub    esp,0xc
c001109e:	68 0c 5f 02 c0       	push   0xc0025f0c
c00110a3:	e8 66 79 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00110a8:	83 c4 10             	add    esp,0x10
c00110ab:	eb 95                	jmp    c0011042 <UnixFile::~UnixFile()+0x24>
c00110ad:	90                   	nop
c00110ae:	eb 01                	jmp    c00110b1 <UnixFile::~UnixFile()+0x93>
c00110b0:	90                   	nop
c00110b1:	90                   	nop
c00110b2:	83 c4 1c             	add    esp,0x1c
c00110b5:	c3                   	ret    

c00110b6 <UnixFile::~UnixFile()>:
c00110b6:	83 ec 0c             	sub    esp,0xc
c00110b9:	83 ec 0c             	sub    esp,0xc
c00110bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c0:	e8 59 ff ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	6a 0c                	push   0xc
c00110cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d1:	e8 9b 10 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	83 c4 0c             	add    esp,0xc
c00110dc:	c3                   	ret    
c00110dd:	90                   	nop

c00110de <ReservedFilename::~ReservedFilename()>:
c00110de:	83 ec 0c             	sub    esp,0xc
c00110e1:	ba 50 5f 02 c0       	mov    edx,0xc0025f50
c00110e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ea:	89 10                	mov    DWORD PTR [eax],edx
c00110ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f0:	83 ec 0c             	sub    esp,0xc
c00110f3:	50                   	push   eax
c00110f4:	e8 25 ff ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00110f9:	83 c4 10             	add    esp,0x10
c00110fc:	90                   	nop
c00110fd:	83 c4 0c             	add    esp,0xc
c0011100:	c3                   	ret    
c0011101:	90                   	nop

c0011102 <ReservedFilename::~ReservedFilename()>:
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110c:	e8 cd ff ff ff       	call   c00110de <ReservedFilename::~ReservedFilename()>
c0011111:	83 c4 10             	add    esp,0x10
c0011114:	83 ec 08             	sub    esp,0x8
c0011117:	6a 0c                	push   0xc
c0011119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111d:	e8 4f 10 00 00       	call   c0012171 <operator delete(void*, unsigned long)>
c0011122:	83 c4 10             	add    esp,0x10
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	c3                   	ret    

c0011129 <getFromFileDescriptor(int)>:
c0011129:	53                   	push   ebx
c001112a:	83 ec 08             	sub    esp,0x8
c001112d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011131:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011137:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001113d:	7f 2c                	jg     c001116b <getFromFileDescriptor(int)+0x42>
c001113f:	83 ec 0c             	sub    esp,0xc
c0011142:	68 b8 95 02 c0       	push   0xc00295b8
c0011147:	e8 92 31 01 00       	call   c00242de <LinkedList<UnixFile>::getFirstElement()>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	85 c0                	test   eax,eax
c0011151:	75 04                	jne    c0011157 <getFromFileDescriptor(int)+0x2e>
c0011153:	31 c0                	xor    eax,eax
c0011155:	eb 6e                	jmp    c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011157:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001115a:	74 69                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c001115c:	52                   	push   edx
c001115d:	52                   	push   edx
c001115e:	50                   	push   eax
c001115f:	68 b8 95 02 c0       	push   0xc00295b8
c0011164:	e8 1f 32 01 00       	call   c0024388 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011169:	eb e1                	jmp    c001114c <getFromFileDescriptor(int)+0x23>
c001116b:	a1 ac 95 02 c0       	mov    eax,ds:0xc00295ac
c0011170:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011176:	74 4d                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011178:	a1 b0 95 02 c0       	mov    eax,ds:0xc00295b0
c001117d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011183:	74 40                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011185:	a1 a8 95 02 c0       	mov    eax,ds:0xc00295a8
c001118a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011190:	74 33                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c0011192:	a1 a4 95 02 c0       	mov    eax,ds:0xc00295a4
c0011197:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001119d:	74 26                	je     c00111c5 <getFromFileDescriptor(int)+0x9c>
c001119f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111a5:	83 f8 08             	cmp    eax,0x8
c00111a8:	77 09                	ja     c00111b3 <getFromFileDescriptor(int)+0x8a>
c00111aa:	8b 04 85 80 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a80]
c00111b1:	eb 12                	jmp    c00111c5 <getFromFileDescriptor(int)+0x9c>
c00111b3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111b9:	83 fb 08             	cmp    ebx,0x8
c00111bc:	77 95                	ja     c0011153 <getFromFileDescriptor(int)+0x2a>
c00111be:	8b 04 9d 40 95 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6ac0]
c00111c5:	83 c4 08             	add    esp,0x8
c00111c8:	5b                   	pop    ebx
c00111c9:	c3                   	ret    

c00111ca <__static_initialization_and_destruction_0(int, int)>:
c00111ca:	83 ec 0c             	sub    esp,0xc
c00111cd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111d2:	75 34                	jne    c0011208 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111d4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111dc:	75 2a                	jne    c0011208 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	68 b8 95 02 c0       	push   0xc00295b8
c00111e6:	e8 c7 2f 01 00       	call   c00241b2 <LinkedList<UnixFile>::LinkedList()>
c00111eb:	83 c4 10             	add    esp,0x10
c00111ee:	83 ec 04             	sub    esp,0x4
c00111f1:	68 0c 84 02 c0       	push   0xc002840c
c00111f6:	68 b8 95 02 c0       	push   0xc00295b8
c00111fb:	68 b0 41 02 c0       	push   0xc00241b0
c0011200:	e8 e8 0e 00 00       	call   c00120ed <__cxa_atexit>
c0011205:	83 c4 10             	add    esp,0x10
c0011208:	90                   	nop
c0011209:	83 c4 0c             	add    esp,0xc
c001120c:	c3                   	ret    

c001120d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001120d:	83 ec 0c             	sub    esp,0xc
c0011210:	83 ec 08             	sub    esp,0x8
c0011213:	68 ff ff 00 00       	push   0xffff
c0011218:	6a 01                	push   0x1
c001121a:	e8 ab ff ff ff       	call   c00111ca <__static_initialization_and_destruction_0(int, int)>
c001121f:	83 c4 10             	add    esp,0x10
c0011222:	83 c4 0c             	add    esp,0xc
c0011225:	c3                   	ret    

c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011226:	53                   	push   ebx
c0011227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001122b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001122f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011235:	89 c8                	mov    eax,ecx
c0011237:	d1 e8                	shr    eax,1
c0011239:	03 05 88 84 02 c0    	add    eax,DWORD PTR ds:0xc0028488
c001123f:	83 e1 01             	and    ecx,0x1
c0011242:	8a 10                	mov    dl,BYTE PTR [eax]
c0011244:	75 09                	jne    c001124f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011246:	83 e2 f0             	and    edx,0xfffffff0
c0011249:	09 da                	or     edx,ebx
c001124b:	88 10                	mov    BYTE PTR [eax],dl
c001124d:	5b                   	pop    ebx
c001124e:	c3                   	ret    
c001124f:	c1 e3 04             	shl    ebx,0x4
c0011252:	83 e2 0f             	and    edx,0xf
c0011255:	09 da                	or     edx,ebx
c0011257:	88 10                	mov    BYTE PTR [eax],dl
c0011259:	5b                   	pop    ebx
c001125a:	c3                   	ret    

c001125b <Virt::getPageState(unsigned long)>:
c001125b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125f:	8b 0d 88 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028488
c0011265:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001126b:	89 d0                	mov    eax,edx
c001126d:	d1 e8                	shr    eax,1
c001126f:	83 e2 01             	and    edx,0x1
c0011272:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011275:	75 04                	jne    c001127b <Virt::getPageState(unsigned long)+0x20>
c0011277:	83 e0 0f             	and    eax,0xf
c001127a:	c3                   	ret    
c001127b:	c0 e8 04             	shr    al,0x4
c001127e:	c3                   	ret    

c001127f <Virt::allocateKernelVirtualPages(int)>:
c001127f:	55                   	push   ebp
c0011280:	31 ed                	xor    ebp,ebp
c0011282:	57                   	push   edi
c0011283:	56                   	push   esi
c0011284:	53                   	push   ebx
c0011285:	31 db                	xor    ebx,ebx
c0011287:	83 ec 1c             	sub    esp,0x1c
c001128a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001128e:	8b 3d 84 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028484
c0011294:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011299:	57                   	push   edi
c001129a:	e8 bc ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c001129f:	5a                   	pop    edx
c00112a0:	84 c0                	test   al,al
c00112a2:	75 3a                	jne    c00112de <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112a4:	85 db                	test   ebx,ebx
c00112a6:	75 02                	jne    c00112aa <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112a8:	89 fd                	mov    ebp,edi
c00112aa:	43                   	inc    ebx
c00112ab:	39 f3                	cmp    ebx,esi
c00112ad:	74 5a                	je     c0011309 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112af:	47                   	inc    edi
c00112b0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112b6:	76 31                	jbe    c00112e9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112b8:	c7 05 84 84 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0028484,0xc8000
c00112c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112c7:	75 28                	jne    c00112f1 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112c9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112ce:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112d3:	57                   	push   edi
c00112d4:	e8 82 ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c00112d9:	5a                   	pop    edx
c00112da:	84 c0                	test   al,al
c00112dc:	74 c6                	je     c00112a4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112de:	31 db                	xor    ebx,ebx
c00112e0:	47                   	inc    edi
c00112e1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112e7:	77 cf                	ja     c00112b8 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112e9:	89 3d 84 84 02 c0    	mov    DWORD PTR ds:0xc0028484,edi
c00112ef:	eb a8                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112f1:	83 ec 0c             	sub    esp,0xc
c00112f4:	68 64 5f 02 c0       	push   0xc0025f64
c00112f9:	e8 10 77 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00112fe:	8b 3d 84 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028484
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	eb 90                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011309:	89 2d 84 84 02 c0    	mov    DWORD PTR ds:0xc0028484,ebp
c001130f:	4b                   	dec    ebx
c0011310:	74 5f                	je     c0011371 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011312:	85 f6                	test   esi,esi
c0011314:	74 3d                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011316:	89 e8                	mov    eax,ebp
c0011318:	31 db                	xor    ebx,ebx
c001131a:	8d 7e ff             	lea    edi,[esi-0x1]
c001131d:	eb 14                	jmp    c0011333 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001131f:	6a 01                	push   0x1
c0011321:	43                   	inc    ebx
c0011322:	50                   	push   eax
c0011323:	e8 fe fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011328:	58                   	pop    eax
c0011329:	39 f3                	cmp    ebx,esi
c001132b:	5a                   	pop    edx
c001132c:	74 25                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001132e:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c0011333:	8d 50 01             	lea    edx,[eax+0x1]
c0011336:	85 db                	test   ebx,ebx
c0011338:	89 15 84 84 02 c0    	mov    DWORD PTR ds:0xc0028484,edx
c001133e:	74 20                	je     c0011360 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011340:	39 df                	cmp    edi,ebx
c0011342:	75 db                	jne    c001131f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011344:	6a 03                	push   0x3
c0011346:	43                   	inc    ebx
c0011347:	50                   	push   eax
c0011348:	e8 d9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134d:	59                   	pop    ecx
c001134e:	39 f3                	cmp    ebx,esi
c0011350:	58                   	pop    eax
c0011351:	75 db                	jne    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011353:	83 c4 1c             	add    esp,0x1c
c0011356:	89 e8                	mov    eax,ebp
c0011358:	5b                   	pop    ebx
c0011359:	c1 e0 0c             	shl    eax,0xc
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	5d                   	pop    ebp
c001135f:	c3                   	ret    
c0011360:	6a 02                	push   0x2
c0011362:	bb 01 00 00 00       	mov    ebx,0x1
c0011367:	50                   	push   eax
c0011368:	e8 b9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136d:	58                   	pop    eax
c001136e:	5a                   	pop    edx
c001136f:	eb bd                	jmp    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011371:	6a 04                	push   0x4
c0011373:	8d 45 01             	lea    eax,[ebp+0x1]
c0011376:	55                   	push   ebp
c0011377:	a3 84 84 02 c0       	mov    ds:0xc0028484,eax
c001137c:	e8 a5 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011381:	59                   	pop    ecx
c0011382:	89 e8                	mov    eax,ebp
c0011384:	5b                   	pop    ebx
c0011385:	c1 e0 0c             	shl    eax,0xc
c0011388:	83 c4 1c             	add    esp,0x1c
c001138b:	5b                   	pop    ebx
c001138c:	5e                   	pop    esi
c001138d:	5f                   	pop    edi
c001138e:	5d                   	pop    ebp
c001138f:	c3                   	ret    

c0011390 <Virt::virtualMemorySetup()>:
c0011390:	53                   	push   ebx
c0011391:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011396:	83 ec 08             	sub    esp,0x8
c0011399:	6a 0f                	push   0xf
c001139b:	53                   	push   ebx
c001139c:	43                   	inc    ebx
c001139d:	e8 84 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a2:	59                   	pop    ecx
c00113a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113a9:	58                   	pop    eax
c00113aa:	75 ed                	jne    c0011399 <Virt::virtualMemorySetup()+0x9>
c00113ac:	83 ec 08             	sub    esp,0x8
c00113af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113b4:	68 00 00 00 c8       	push   0xc8000000
c00113b9:	68 eb 60 02 c0       	push   0xc00260eb
c00113be:	e8 8e 0e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00113c3:	58                   	pop    eax
c00113c4:	5a                   	pop    edx
c00113c5:	68 00 f0 ff ef       	push   0xeffff000
c00113ca:	68 ff 60 02 c0       	push   0xc00260ff
c00113cf:	e8 7d 0e 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	83 ec 08             	sub    esp,0x8
c00113da:	6a 00                	push   0x0
c00113dc:	53                   	push   ebx
c00113dd:	43                   	inc    ebx
c00113de:	e8 43 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ec:	75 e9                	jne    c00113d7 <Virt::virtualMemorySetup()+0x47>
c00113ee:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	6a 0f                	push   0xf
c00113f8:	53                   	push   ebx
c00113f9:	43                   	inc    ebx
c00113fa:	e8 27 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011408:	75 e9                	jne    c00113f3 <Virt::virtualMemorySetup()+0x63>
c001140a:	83 c4 08             	add    esp,0x8
c001140d:	5b                   	pop    ebx
c001140e:	c3                   	ret    

c001140f <Virt::getAKernelVAS()>:
c001140f:	a1 c4 95 02 c0       	mov    eax,ds:0xc00295c4
c0011414:	c3                   	ret    

c0011415 <Virt::setupPageSwapping(int)>:
c0011415:	57                   	push   edi
c0011416:	56                   	push   esi
c0011417:	53                   	push   ebx
c0011418:	83 ec 1c             	sub    esp,0x1c
c001141b:	68 14 01 00 00       	push   0x114
c0011420:	e8 3d 0d 00 00       	call   c0012162 <operator new(unsigned long)>
c0011425:	83 c4 0c             	add    esp,0xc
c0011428:	89 c6                	mov    esi,eax
c001142a:	ff 35 b4 a8 02 c0    	push   DWORD PTR ds:0xc002a8b4
c0011430:	68 13 61 02 c0       	push   0xc0026113
c0011435:	50                   	push   eax
c0011436:	e8 45 13 00 00       	call   c0012780 <File::File(char const*, Process*)>
c001143b:	89 34 24             	mov    DWORD PTR [esp],esi
c001143e:	e8 19 15 00 00       	call   c001295c <File::unlink()>
c0011443:	58                   	pop    eax
c0011444:	5a                   	pop    edx
c0011445:	6a 12                	push   0x12
c0011447:	56                   	push   esi
c0011448:	e8 97 13 00 00       	call   c00127e4 <File::open(FileOpenMode)>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	85 c0                	test   eax,eax
c0011452:	0f 85 bf 00 00 00    	jne    c0011517 <Virt::setupPageSwapping(int)+0x102>
c0011458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001145c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011464:	c1 e3 08             	shl    ebx,0x8
c0011467:	83 ec 0c             	sub    esp,0xc
c001146a:	68 00 00 01 00       	push   0x10000
c001146f:	e8 ec dc ff ff       	call   c000f160 <malloc>
c0011474:	83 c4 0c             	add    esp,0xc
c0011477:	89 c7                	mov    edi,eax
c0011479:	68 00 00 01 00       	push   0x10000
c001147e:	6a 00                	push   0x0
c0011480:	50                   	push   eax
c0011481:	e8 60 f2 fe ff       	call   c00006e6 <memset>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	85 db                	test   ebx,ebx
c001148b:	79 03                	jns    c0011490 <Virt::setupPageSwapping(int)+0x7b>
c001148d:	83 c3 0f             	add    ebx,0xf
c0011490:	c1 fb 04             	sar    ebx,0x4
c0011493:	4b                   	dec    ebx
c0011494:	83 fb ff             	cmp    ebx,0xffffffff
c0011497:	74 4b                	je     c00114e4 <Virt::setupPageSwapping(int)+0xcf>
c0011499:	83 ec 0c             	sub    esp,0xc
c001149c:	8b 06                	mov    eax,DWORD PTR [esi]
c001149e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a2:	52                   	push   edx
c00114a3:	57                   	push   edi
c00114a4:	6a 00                	push   0x0
c00114a6:	68 00 00 01 00       	push   0x10000
c00114ab:	56                   	push   esi
c00114ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114af:	83 c4 20             	add    esp,0x20
c00114b2:	85 c0                	test   eax,eax
c00114b4:	75 4e                	jne    c0011504 <Virt::setupPageSwapping(int)+0xef>
c00114b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114ba:	3d 00 00 01 00       	cmp    eax,0x10000
c00114bf:	74 d2                	je     c0011493 <Virt::setupPageSwapping(int)+0x7e>
c00114c1:	83 ec 08             	sub    esp,0x8
c00114c4:	4b                   	dec    ebx
c00114c5:	50                   	push   eax
c00114c6:	68 66 61 02 c0       	push   0xc0026166
c00114cb:	e8 81 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00114d0:	c7 04 24 6f 61 02 c0 	mov    DWORD PTR [esp],0xc002616f
c00114d7:	e8 32 75 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	83 fb ff             	cmp    ebx,0xffffffff
c00114e2:	75 b5                	jne    c0011499 <Virt::setupPageSwapping(int)+0x84>
c00114e4:	83 ec 0c             	sub    esp,0xc
c00114e7:	56                   	push   esi
c00114e8:	e8 55 13 00 00       	call   c0012842 <File::close()>
c00114ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f0:	e8 8b dc ff ff       	call   c000f180 <rfree>
c00114f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00114f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00114fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114fd:	83 c4 20             	add    esp,0x20
c0011500:	5b                   	pop    ebx
c0011501:	5e                   	pop    esi
c0011502:	5f                   	pop    edi
c0011503:	c3                   	ret    
c0011504:	83 ec 08             	sub    esp,0x8
c0011507:	50                   	push   eax
c0011508:	68 4e 61 02 c0       	push   0xc002614e
c001150d:	e8 3f 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	eb 9f                	jmp    c00114b6 <Virt::setupPageSwapping(int)+0xa1>
c0011517:	83 ec 08             	sub    esp,0x8
c001151a:	50                   	push   eax
c001151b:	68 2a 61 02 c0       	push   0xc002612a
c0011520:	e8 2c 0d 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011525:	c7 04 24 33 61 02 c0 	mov    DWORD PTR [esp],0xc0026133
c001152c:	e8 dd 74 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	e9 1f ff ff ff       	jmp    c0011458 <Virt::setupPageSwapping(int)+0x43>
c0011539:	90                   	nop

c001153a <VAS::VAS()>:
c001153a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011549:	a3 c4 95 02 c0       	mov    ds:0xc00295c4,eax
c001154e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011552:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001155d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011561:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011568:	90                   	nop
c0011569:	c3                   	ret    

c001156a <VAS::VAS(VAS*)>:
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	68 84 5f 02 c0       	push   0xc0025f84
c0011580:	e8 89 74 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0011585:	83 c4 10             	add    esp,0x10
c0011588:	90                   	nop
c0011589:	83 c4 0c             	add    esp,0xc
c001158c:	c3                   	ret    
c001158d:	90                   	nop

c001158e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001158e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011592:	89 c2                	mov    edx,eax
c0011594:	c1 e8 0a             	shr    eax,0xa
c0011597:	c1 ea 16             	shr    edx,0x16
c001159a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001159f:	19 c9                	sbb    ecx,ecx
c00115a1:	c1 e2 0c             	shl    edx,0xc
c00115a4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115aa:	25 fc 0f 00 00       	and    eax,0xffc
c00115af:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115b6:	01 d0                	add    eax,edx
c00115b8:	c3                   	ret    
c00115b9:	90                   	nop

c00115ba <VAS::getPageTableEntry(unsigned long)>:
c00115ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115be:	89 ca                	mov    edx,ecx
c00115c0:	c1 e9 0a             	shr    ecx,0xa
c00115c3:	c1 ea 16             	shr    edx,0x16
c00115c6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115cc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115d2:	c1 e0 0c             	shl    eax,0xc
c00115d5:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115d8:	c3                   	ret    

c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115d9:	57                   	push   edi
c00115da:	56                   	push   esi
c00115db:	be 01 00 00 00       	mov    esi,0x1
c00115e0:	53                   	push   ebx
c00115e1:	83 ec 10             	sub    esp,0x10
c00115e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115e8:	c1 eb 0c             	shr    ebx,0xc
c00115eb:	eb 3f                	jmp    c001162c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115ed:	e8 1d fe ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00115f2:	83 ec 08             	sub    esp,0x8
c00115f5:	57                   	push   edi
c00115f6:	50                   	push   eax
c00115f7:	e8 be ff ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c00115fc:	83 c4 10             	add    esp,0x10
c00115ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011605:	f6 c4 04             	test   ah,0x4
c0011608:	75 5f                	jne    c0011669 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001160a:	80 fa 04             	cmp    dl,0x4
c001160d:	74 78                	je     c0011687 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001160f:	80 fa 02             	cmp    dl,0x2
c0011612:	0f 84 88 00 00 00    	je     c00116a0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011618:	80 fa 03             	cmp    dl,0x3
c001161b:	0f 84 ad 00 00 00    	je     c00116ce <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011621:	fe ca                	dec    dl
c0011623:	0f 84 92 00 00 00    	je     c00116bb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011629:	43                   	inc    ebx
c001162a:	31 f6                	xor    esi,esi
c001162c:	53                   	push   ebx
c001162d:	e8 29 fc ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c0011632:	5f                   	pop    edi
c0011633:	89 df                	mov    edi,ebx
c0011635:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011639:	c1 e7 0c             	shl    edi,0xc
c001163c:	84 c0                	test   al,al
c001163e:	75 ad                	jne    c00115ed <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011640:	83 ec 0c             	sub    esp,0xc
c0011643:	68 75 61 02 c0       	push   0xc0026175
c0011648:	e8 c1 73 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c001164d:	e8 bd fd ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011652:	5a                   	pop    edx
c0011653:	59                   	pop    ecx
c0011654:	57                   	push   edi
c0011655:	50                   	push   eax
c0011656:	e8 5f ff ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011660:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011664:	f6 c4 04             	test   ah,0x4
c0011667:	74 c0                	je     c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011669:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001166d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	50                   	push   eax
c0011676:	e8 05 e0 ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011682:	80 fa 04             	cmp    dl,0x4
c0011685:	75 88                	jne    c001160f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011687:	89 f0                	mov    eax,esi
c0011689:	84 c0                	test   al,al
c001168b:	75 47                	jne    c00116d4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001168d:	c7 44 24 20 a8 5f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025fa8
c0011695:	83 c4 10             	add    esp,0x10
c0011698:	5b                   	pop    ebx
c0011699:	5e                   	pop    esi
c001169a:	5f                   	pop    edi
c001169b:	e9 6e 73 00 00       	jmp    c0018a0e <Krnl::panic(char const*)>
c00116a0:	89 f0                	mov    eax,esi
c00116a2:	84 c0                	test   al,al
c00116a4:	75 15                	jne    c00116bb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116a6:	83 ec 0c             	sub    esp,0xc
c00116a9:	68 91 61 02 c0       	push   0xc0026191
c00116ae:	e8 5b 73 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00116b3:	83 c4 10             	add    esp,0x10
c00116b6:	e9 6e ff ff ff       	jmp    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116bb:	83 ec 08             	sub    esp,0x8
c00116be:	6a 00                	push   0x0
c00116c0:	53                   	push   ebx
c00116c1:	e8 60 fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	e9 5b ff ff ff       	jmp    c0011629 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116ce:	89 f0                	mov    eax,esi
c00116d0:	84 c0                	test   al,al
c00116d2:	75 15                	jne    c00116e9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116d4:	83 ec 08             	sub    esp,0x8
c00116d7:	6a 00                	push   0x0
c00116d9:	53                   	push   ebx
c00116da:	e8 47 fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	5b                   	pop    ebx
c00116e6:	5e                   	pop    esi
c00116e7:	5f                   	pop    edi
c00116e8:	c3                   	ret    
c00116e9:	c7 44 24 20 ad 61 02 c0 	mov    DWORD PTR [esp+0x20],0xc00261ad
c00116f1:	83 c4 10             	add    esp,0x10
c00116f4:	5b                   	pop    ebx
c00116f5:	5e                   	pop    esi
c00116f6:	5f                   	pop    edi
c00116f7:	e9 12 73 00 00       	jmp    c0018a0e <Krnl::panic(char const*)>

c00116fc <VAS::freeAllocatedPages(unsigned long)>:
c00116fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011704:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011708:	74 09                	je     c0011713 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001170a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001170e:	e9 c6 fe ff ff       	jmp    c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011713:	c7 44 24 04 cc 5f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025fcc
c001171b:	e9 31 0b 00 00       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>

c0011720 <VAS::virtualToPhysical(unsigned long)>:
c0011720:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011724:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011728:	e8 8d fe ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001172d:	5a                   	pop    edx
c001172e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011730:	59                   	pop    ecx
c0011731:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011736:	c3                   	ret    
c0011737:	90                   	nop

c0011738 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011738:	55                   	push   ebp
c0011739:	57                   	push   edi
c001173a:	56                   	push   esi
c001173b:	53                   	push   ebx
c001173c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011740:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011744:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011748:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001174c:	85 db                	test   ebx,ebx
c001174e:	7e 22                	jle    c0011772 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011750:	c1 e3 0c             	shl    ebx,0xc
c0011753:	01 f3                	add    ebx,esi
c0011755:	56                   	push   esi
c0011756:	81 c6 00 10 00 00    	add    esi,0x1000
c001175c:	55                   	push   ebp
c001175d:	e8 58 fe ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c0011762:	5a                   	pop    edx
c0011763:	59                   	pop    ecx
c0011764:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011766:	21 f9                	and    ecx,edi
c0011768:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001176c:	39 f3                	cmp    ebx,esi
c001176e:	89 08                	mov    DWORD PTR [eax],ecx
c0011770:	75 e3                	jne    c0011755 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011772:	5b                   	pop    ebx
c0011773:	5e                   	pop    esi
c0011774:	5f                   	pop    edi
c0011775:	5d                   	pop    ebp
c0011776:	c3                   	ret    
c0011777:	90                   	nop

c0011778 <VAS::setToWriteCombining(unsigned long, int)>:
c0011778:	83 ec 0c             	sub    esp,0xc
c001177b:	e8 0e 61 00 00       	call   c001788e <thisCPU()>
c0011780:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011787:	75 04                	jne    c001178d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011789:	83 c4 0c             	add    esp,0xc
c001178c:	c3                   	ret    
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	68 80 00 00 00       	push   0x80
c0011795:	6a ff                	push   0xffffffff
c0011797:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001179b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001179f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a3:	e8 90 ff ff ff       	call   c0011738 <VAS::reflagRange(unsigned long, int, int, int)>
c00117a8:	83 c4 20             	add    esp,0x20
c00117ab:	83 c4 0c             	add    esp,0xc
c00117ae:	c3                   	ret    
c00117af:	90                   	nop

c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b0:	83 ec 0c             	sub    esp,0xc
c00117b3:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117c6:	19 c0                	sbb    eax,eax
c00117c8:	83 ca 03             	or     edx,0x3
c00117cb:	83 e0 fc             	and    eax,0xfffffffc
c00117ce:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117d5:	e8 bb 29 01 00       	call   c0024195 <CPU::readCR3()>
c00117da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117de:	83 c4 0c             	add    esp,0xc
c00117e1:	e9 c1 29 01 00       	jmp    c00241a7 <CPU::writeCR3(unsigned long)>

c00117e6 <VAS::~VAS()>:
c00117e6:	83 ec 2c             	sub    esp,0x2c
c00117e9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117f1:	e8 6c a1 00 00       	call   c001b962 <lockScheduler()>
c00117f6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00117fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011800:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011806:	83 ec 04             	sub    esp,0x4
c0011809:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001180d:	6a 01                	push   0x1
c001180f:	50                   	push   eax
c0011810:	e8 9b ff ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011820:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011828:	0f 8f d7 00 00 00    	jg     c0011905 <VAS::~VAS()+0x11f>
c001182e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011839:	c1 e2 02             	shl    edx,0x2
c001183c:	01 d0                	add    eax,edx
c001183e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011848:	83 e0 01             	and    eax,0x1
c001184b:	0f 84 ab 00 00 00    	je     c00118fc <VAS::~VAS()+0x116>
c0011851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011859:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011861:	7f 75                	jg     c00118d8 <VAS::~VAS()+0xf2>
c0011863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011867:	c1 e0 0a             	shl    eax,0xa
c001186a:	89 c2                	mov    edx,eax
c001186c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011870:	01 d0                	add    eax,edx
c0011872:	c1 e0 0c             	shl    eax,0xc
c0011875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011879:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011883:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011889:	83 ec 04             	sub    esp,0x4
c001188c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011890:	6a 01                	push   0x1
c0011892:	50                   	push   eax
c0011893:	e8 f6 fc ff ff       	call   c001158e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011898:	83 c4 10             	add    esp,0x10
c001189b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ad:	25 01 04 00 00       	and    eax,0x401
c00118b2:	3d 01 04 00 00       	cmp    eax,0x401
c00118b7:	75 19                	jne    c00118d2 <VAS::~VAS()+0xec>
c00118b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118c2:	83 ec 0c             	sub    esp,0xc
c00118c5:	50                   	push   eax
c00118c6:	e8 b5 dd ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118d6:	eb 81                	jmp    c0011859 <VAS::~VAS()+0x73>
c00118d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118dc:	25 00 04 00 00       	and    eax,0x400
c00118e1:	74 19                	je     c00118fc <VAS::~VAS()+0x116>
c00118e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118ec:	83 ec 0c             	sub    esp,0xc
c00118ef:	50                   	push   eax
c00118f0:	e8 8b dd ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011900:	e9 1b ff ff ff       	jmp    c0011820 <VAS::~VAS()+0x3a>
c0011905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001190c:	83 ec 0c             	sub    esp,0xc
c001190f:	50                   	push   eax
c0011910:	e8 c4 fc ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001191f:	83 ec 0c             	sub    esp,0xc
c0011922:	50                   	push   eax
c0011923:	e8 58 dd ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c0011928:	83 c4 10             	add    esp,0x10
c001192b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011933:	c1 e0 02             	shl    eax,0x2
c0011936:	83 ec 08             	sub    esp,0x8
c0011939:	50                   	push   eax
c001193a:	68 f0 5f 02 c0       	push   0xc0025ff0
c001193f:	e8 0d 09 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	e8 18 a0 00 00       	call   c001b964 <unlockScheduler()>
c001194c:	90                   	nop
c001194d:	83 c4 2c             	add    esp,0x2c
c0011950:	c3                   	ret    
c0011951:	90                   	nop

c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011952:	55                   	push   ebp
c0011953:	57                   	push   edi
c0011954:	56                   	push   esi
c0011955:	53                   	push   ebx
c0011956:	83 ec 1c             	sub    esp,0x1c
c0011959:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001195d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011961:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011967:	77 08                	ja     c0011971 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011969:	0f 20 d8             	mov    eax,cr3
c001196c:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001196f:	75 47                	jne    c00119b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011975:	09 d8                	or     eax,ebx
c0011977:	a9 ff 0f 00 00       	test   eax,0xfff
c001197c:	75 57                	jne    c00119d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001197e:	89 de                	mov    esi,ebx
c0011980:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011983:	c1 ee 16             	shr    esi,0x16
c0011986:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001198d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011991:	74 54                	je     c00119e7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011993:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011997:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001199d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a1:	c1 e6 0c             	shl    esi,0xc
c00119a4:	c1 eb 0a             	shr    ebx,0xa
c00119a7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119ad:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b0:	83 c4 1c             	add    esp,0x1c
c00119b3:	5b                   	pop    ebx
c00119b4:	5e                   	pop    esi
c00119b5:	5f                   	pop    edi
c00119b6:	5d                   	pop    ebp
c00119b7:	c3                   	ret    
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	68 10 60 02 c0       	push   0xc0026010
c00119c0:	e8 8c 08 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119cc:	09 d8                	or     eax,ebx
c00119ce:	a9 ff 0f 00 00       	test   eax,0xfff
c00119d3:	74 a9                	je     c001197e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119d5:	83 ec 0c             	sub    esp,0xc
c00119d8:	68 78 60 02 c0       	push   0xc0026078
c00119dd:	e8 2c 70 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	eb 97                	jmp    c001197e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119eb:	e8 1a dd ff ff       	call   c000f70a <Phys::allocatePage()>
c00119f0:	89 c5                	mov    ebp,eax
c00119f2:	e8 18 fa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119fe:	6a 01                	push   0x1
c0011a00:	e8 7a f8 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011a05:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a0c:	6a 01                	push   0x1
c0011a0e:	50                   	push   eax
c0011a0f:	55                   	push   ebp
c0011a10:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a16:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a1a:	51                   	push   ecx
c0011a1b:	e8 1e 02 00 00       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a20:	83 c4 1c             	add    esp,0x1c
c0011a23:	68 00 10 00 00       	push   0x1000
c0011a28:	6a 00                	push   0x0
c0011a2a:	50                   	push   eax
c0011a2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a2f:	e8 b2 ec fe ff       	call   c00006e6 <memset>
c0011a34:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a38:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a3b:	e8 99 fb ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a44:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a4d:	e9 41 ff ff ff       	jmp    c0011993 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a52 <VAS::allocatePages(int, int)>:
c0011a52:	55                   	push   ebp
c0011a53:	57                   	push   edi
c0011a54:	56                   	push   esi
c0011a55:	53                   	push   ebx
c0011a56:	83 ec 1c             	sub    esp,0x1c
c0011a59:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a5d:	e8 2c 5e 00 00       	call   c001788e <thisCPU()>
c0011a62:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a68:	83 e0 01             	and    eax,0x1
c0011a6b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a6f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a73:	0f 85 d7 00 00 00    	jne    c0011b50 <VAS::allocatePages(int, int)+0xfe>
c0011a79:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a80:	85 c0                	test   eax,eax
c0011a82:	0f 84 ac 00 00 00    	je     c0011b34 <VAS::allocatePages(int, int)+0xe2>
c0011a88:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a90:	c1 e6 0c             	shl    esi,0xc
c0011a93:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a97:	85 c0                	test   eax,eax
c0011a99:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a9c:	7e 33                	jle    c0011ad1 <VAS::allocatePages(int, int)+0x7f>
c0011a9e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011aa2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aa6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011aac:	e8 59 dc ff ff       	call   c000f70a <Phys::allocatePage()>
c0011ab1:	55                   	push   ebp
c0011ab2:	53                   	push   ebx
c0011ab3:	50                   	push   eax
c0011ab4:	57                   	push   edi
c0011ab5:	e8 98 fe ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011aba:	83 c4 10             	add    esp,0x10
c0011abd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac2:	74 03                	je     c0011ac7 <VAS::allocatePages(int, int)+0x75>
c0011ac4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ac7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011acd:	39 de                	cmp    esi,ebx
c0011acf:	75 db                	jne    c0011aac <VAS::allocatePages(int, int)+0x5a>
c0011ad1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad6:	74 3f                	je     c0011b17 <VAS::allocatePages(int, int)+0xc5>
c0011ad8:	c1 ee 0a             	shr    esi,0xa
c0011adb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011adf:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ae5:	c1 eb 0a             	shr    ebx,0xa
c0011ae8:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011aee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011af4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011afa:	39 f3                	cmp    ebx,esi
c0011afc:	77 0d                	ja     c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011afe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b01:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b07:	39 de                	cmp    esi,ebx
c0011b09:	73 f3                	jae    c0011afe <VAS::allocatePages(int, int)+0xac>
c0011b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0f:	83 c4 1c             	add    esp,0x1c
c0011b12:	5b                   	pop    ebx
c0011b13:	5e                   	pop    esi
c0011b14:	5f                   	pop    edi
c0011b15:	5d                   	pop    ebp
c0011b16:	c3                   	ret    
c0011b17:	e8 79 26 01 00       	call   c0024195 <CPU::readCR3()>
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	50                   	push   eax
c0011b20:	e8 82 26 01 00       	call   c00241a7 <CPU::writeCR3(unsigned long)>
c0011b25:	83 c4 10             	add    esp,0x10
c0011b28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b2c:	83 c4 1c             	add    esp,0x1c
c0011b2f:	5b                   	pop    ebx
c0011b30:	5e                   	pop    esi
c0011b31:	5f                   	pop    edi
c0011b32:	5d                   	pop    ebp
c0011b33:	c3                   	ret    
c0011b34:	83 ec 0c             	sub    esp,0xc
c0011b37:	68 9c 60 02 c0       	push   0xc002609c
c0011b3c:	e8 cd 6e 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0011b41:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b48:	83 c4 10             	add    esp,0x10
c0011b4b:	e9 38 ff ff ff       	jmp    c0011a88 <VAS::allocatePages(int, int)+0x36>
c0011b50:	83 ec 0c             	sub    esp,0xc
c0011b53:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b57:	e8 23 f7 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011b5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b68:	0f 87 94 00 00 00    	ja     c0011c02 <VAS::allocatePages(int, int)+0x1b0>
c0011b6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b72:	85 d2                	test   edx,edx
c0011b74:	7e 3c                	jle    c0011bb2 <VAS::allocatePages(int, int)+0x160>
c0011b76:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b7a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b7e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b82:	c1 e5 0c             	shl    ebp,0xc
c0011b85:	81 ce 00 04 00 00    	or     esi,0x400
c0011b8b:	01 dd                	add    ebp,ebx
c0011b8d:	e8 78 db ff ff       	call   c000f70a <Phys::allocatePage()>
c0011b92:	56                   	push   esi
c0011b93:	53                   	push   ebx
c0011b94:	50                   	push   eax
c0011b95:	57                   	push   edi
c0011b96:	e8 b7 fd ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba3:	74 03                	je     c0011ba8 <VAS::allocatePages(int, int)+0x156>
c0011ba5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bae:	39 dd                	cmp    ebp,ebx
c0011bb0:	75 db                	jne    c0011b8d <VAS::allocatePages(int, int)+0x13b>
c0011bb2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bb7:	0f 84 5a ff ff ff    	je     c0011b17 <VAS::allocatePages(int, int)+0xc5>
c0011bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bc5:	89 d3                	mov    ebx,edx
c0011bc7:	c1 e0 0c             	shl    eax,0xc
c0011bca:	c1 eb 0a             	shr    ebx,0xa
c0011bcd:	01 d0                	add    eax,edx
c0011bcf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bd5:	c1 e8 0a             	shr    eax,0xa
c0011bd8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bde:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be3:	2d 00 00 40 00       	sub    eax,0x400000
c0011be8:	39 c3                	cmp    ebx,eax
c0011bea:	0f 87 1b ff ff ff    	ja     c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011bf0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf9:	39 d8                	cmp    eax,ebx
c0011bfb:	73 f3                	jae    c0011bf0 <VAS::allocatePages(int, int)+0x19e>
c0011bfd:	e9 09 ff ff ff       	jmp    c0011b0b <VAS::allocatePages(int, int)+0xb9>
c0011c02:	e8 87 5c 00 00       	call   c001788e <thisCPU()>
c0011c07:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c0e:	0f 84 5a ff ff ff    	je     c0011b6e <VAS::allocatePages(int, int)+0x11c>
c0011c14:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c1c:	e9 4d ff ff ff       	jmp    c0011b6e <VAS::allocatePages(int, int)+0x11c>
c0011c21:	90                   	nop

c0011c22 <VAS::setCPUSpecific(unsigned long)>:
c0011c22:	83 ec 0c             	sub    esp,0xc
c0011c25:	6a 05                	push   0x5
c0011c27:	68 00 00 40 c2       	push   0xc2400000
c0011c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c34:	e8 19 fd ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c39:	83 c4 1c             	add    esp,0x1c
c0011c3c:	c3                   	ret    
c0011c3d:	90                   	nop

c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c3e:	55                   	push   ebp
c0011c3f:	57                   	push   edi
c0011c40:	56                   	push   esi
c0011c41:	53                   	push   ebx
c0011c42:	83 ec 1c             	sub    esp,0x1c
c0011c45:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c49:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c4d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c51:	e8 38 5c 00 00       	call   c001788e <thisCPU()>
c0011c56:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c5c:	83 e0 01             	and    eax,0x1
c0011c5f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c67:	85 c0                	test   eax,eax
c0011c69:	7e 39                	jle    c0011ca4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6f:	89 f3                	mov    ebx,esi
c0011c71:	c1 e0 0c             	shl    eax,0xc
c0011c74:	01 f0                	add    eax,esi
c0011c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c7a:	55                   	push   ebp
c0011c7b:	53                   	push   ebx
c0011c7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c80:	29 f0                	sub    eax,esi
c0011c82:	01 d8                	add    eax,ebx
c0011c84:	50                   	push   eax
c0011c85:	57                   	push   edi
c0011c86:	e8 c7 fc ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c8b:	83 c4 10             	add    esp,0x10
c0011c8e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c93:	74 03                	je     c0011c98 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c95:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c98:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c9e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ca2:	75 d6                	jne    c0011c7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011ca4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ca9:	74 42                	je     c0011ced <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cab:	89 f3                	mov    ebx,esi
c0011cad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb1:	c1 eb 0a             	shr    ebx,0xa
c0011cb4:	c1 e0 0c             	shl    eax,0xc
c0011cb7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cbd:	01 f0                	add    eax,esi
c0011cbf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cc5:	c1 e8 0a             	shr    eax,0xa
c0011cc8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ccd:	2d 00 00 40 00       	sub    eax,0x400000
c0011cd2:	39 c3                	cmp    ebx,eax
c0011cd4:	77 0d                	ja     c0011ce3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cd6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cdf:	39 d8                	cmp    eax,ebx
c0011ce1:	73 f3                	jae    c0011cd6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ce3:	83 c4 1c             	add    esp,0x1c
c0011ce6:	89 f0                	mov    eax,esi
c0011ce8:	5b                   	pop    ebx
c0011ce9:	5e                   	pop    esi
c0011cea:	5f                   	pop    edi
c0011ceb:	5d                   	pop    ebp
c0011cec:	c3                   	ret    
c0011ced:	e8 a3 24 01 00       	call   c0024195 <CPU::readCR3()>
c0011cf2:	83 ec 0c             	sub    esp,0xc
c0011cf5:	50                   	push   eax
c0011cf6:	e8 ac 24 01 00       	call   c00241a7 <CPU::writeCR3(unsigned long)>
c0011cfb:	89 f0                	mov    eax,esi
c0011cfd:	83 c4 10             	add    esp,0x10
c0011d00:	83 c4 1c             	add    esp,0x1c
c0011d03:	5b                   	pop    ebx
c0011d04:	5e                   	pop    esi
c0011d05:	5f                   	pop    edi
c0011d06:	5d                   	pop    ebp
c0011d07:	c3                   	ret    

c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d08:	55                   	push   ebp
c0011d09:	57                   	push   edi
c0011d0a:	56                   	push   esi
c0011d0b:	53                   	push   ebx
c0011d0c:	83 ec 1c             	sub    esp,0x1c
c0011d0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d13:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d17:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d1f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d24:	75 4a                	jne    c0011d70 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d26:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d2a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d2d:	c1 eb 16             	shr    ebx,0x16
c0011d30:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d37:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d3b:	74 4d                	je     c0011d8a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d41:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d45:	c1 e8 0a             	shr    eax,0xa
c0011d48:	80 fa 01             	cmp    dl,0x1
c0011d4b:	19 d2                	sbb    edx,edx
c0011d4d:	c1 e3 0c             	shl    ebx,0xc
c0011d50:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d54:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d5a:	25 fc 0f 00 00       	and    eax,0xffc
c0011d5f:	01 d8                	add    eax,ebx
c0011d61:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d68:	83 c4 1c             	add    esp,0x1c
c0011d6b:	5b                   	pop    ebx
c0011d6c:	5e                   	pop    esi
c0011d6d:	5f                   	pop    edi
c0011d6e:	5d                   	pop    ebp
c0011d6f:	c3                   	ret    
c0011d70:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d74:	83 ec 0c             	sub    esp,0xc
c0011d77:	68 c8 60 02 c0       	push   0xc00260c8
c0011d7c:	e8 8d 6c 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0011d81:	83 c4 10             	add    esp,0x10
c0011d84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d88:	eb 9c                	jmp    c0011d26 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d8e:	e8 77 d9 ff ff       	call   c000f70a <Phys::allocatePage()>
c0011d93:	89 c5                	mov    ebp,eax
c0011d95:	e8 75 f6 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011d9a:	83 ec 0c             	sub    esp,0xc
c0011d9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011da1:	6a 01                	push   0x1
c0011da3:	e8 d7 f4 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011da8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011daf:	6a 01                	push   0x1
c0011db1:	50                   	push   eax
c0011db2:	55                   	push   ebp
c0011db3:	81 cd 07 04 00 00    	or     ebp,0x407
c0011db9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dbd:	51                   	push   ecx
c0011dbe:	e8 7b fe ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc3:	83 c4 1c             	add    esp,0x1c
c0011dc6:	68 00 10 00 00       	push   0x1000
c0011dcb:	6a 00                	push   0x0
c0011dcd:	50                   	push   eax
c0011dce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd2:	e8 0f e9 fe ff       	call   c00006e6 <memset>
c0011dd7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ddb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dde:	e8 f6 f7 ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c0011de3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011de6:	83 c4 10             	add    esp,0x10
c0011de9:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011df0:	e9 48 ff ff ff       	jmp    c0011d3d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011df5:	90                   	nop

c0011df6 <VAS::VAS(bool)>:
c0011df6:	53                   	push   ebx
c0011df7:	83 ec 28             	sub    esp,0x28
c0011dfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dfe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e06:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e11:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e15:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e18:	e8 ed d8 ff ff       	call   c000f70a <Phys::allocatePage()>
c0011e1d:	89 c2                	mov    edx,eax
c0011e1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e23:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e26:	e8 e4 f5 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011e2b:	89 c3                	mov    ebx,eax
c0011e2d:	83 ec 0c             	sub    esp,0xc
c0011e30:	6a 01                	push   0x1
c0011e32:	e8 48 f4 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011e37:	83 c4 10             	add    esp,0x10
c0011e3a:	89 c2                	mov    edx,eax
c0011e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e43:	83 ec 0c             	sub    esp,0xc
c0011e46:	6a 03                	push   0x3
c0011e48:	6a 01                	push   0x1
c0011e4a:	52                   	push   edx
c0011e4b:	50                   	push   eax
c0011e4c:	53                   	push   ebx
c0011e4d:	e8 ec fd ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e52:	83 c4 20             	add    esp,0x20
c0011e55:	89 c2                	mov    edx,eax
c0011e57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e5e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e66:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e6e:	7f 1c                	jg     c0011e8c <VAS::VAS(bool)+0x96>
c0011e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e7b:	c1 e2 02             	shl    edx,0x2
c0011e7e:	01 d0                	add    eax,edx
c0011e80:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e86:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e8a:	eb da                	jmp    c0011e66 <VAS::VAS(bool)+0x70>
c0011e8c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e94:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e9c:	7f 71                	jg     c0011f0f <VAS::VAS(bool)+0x119>
c0011e9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ea2:	2d 00 02 00 00       	sub    eax,0x200
c0011ea7:	c1 e0 0c             	shl    eax,0xc
c0011eaa:	83 c8 03             	or     eax,0x3
c0011ead:	89 c3                	mov    ebx,eax
c0011eaf:	e8 da 59 00 00       	call   c001788e <thisCPU()>
c0011eb4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011eba:	83 e0 10             	and    eax,0x10
c0011ebd:	84 c0                	test   al,al
c0011ebf:	74 07                	je     c0011ec8 <VAS::VAS(bool)+0xd2>
c0011ec1:	b8 00 01 00 00       	mov    eax,0x100
c0011ec6:	eb 05                	jmp    c0011ecd <VAS::VAS(bool)+0xd7>
c0011ec8:	b8 00 00 00 00       	mov    eax,0x0
c0011ecd:	09 d8                	or     eax,ebx
c0011ecf:	89 c1                	mov    ecx,eax
c0011ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ed8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011edc:	c1 e2 02             	shl    edx,0x2
c0011edf:	01 d0                	add    eax,edx
c0011ee1:	89 ca                	mov    edx,ecx
c0011ee3:	89 10                	mov    DWORD PTR [eax],edx
c0011ee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee9:	2d 40 03 00 00       	sub    eax,0x340
c0011eee:	83 f8 7f             	cmp    eax,0x7f
c0011ef1:	77 16                	ja     c0011f09 <VAS::VAS(bool)+0x113>
c0011ef3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011efa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efe:	c1 e2 02             	shl    edx,0x2
c0011f01:	01 d0                	add    eax,edx
c0011f03:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f09:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f0d:	eb 85                	jmp    c0011e94 <VAS::VAS(bool)+0x9e>
c0011f0f:	e8 7a 59 00 00       	call   c001788e <thisCPU()>
c0011f14:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f1a:	83 e0 10             	and    eax,0x10
c0011f1d:	84 c0                	test   al,al
c0011f1f:	74 07                	je     c0011f28 <VAS::VAS(bool)+0x132>
c0011f21:	b8 03 41 00 00       	mov    eax,0x4103
c0011f26:	eb 05                	jmp    c0011f2d <VAS::VAS(bool)+0x137>
c0011f28:	b8 03 40 00 00       	mov    eax,0x4003
c0011f2d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f31:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f34:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f3a:	89 02                	mov    DWORD PTR [edx],eax
c0011f3c:	e8 4d 59 00 00       	call   c001788e <thisCPU()>
c0011f41:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f47:	83 ec 08             	sub    esp,0x8
c0011f4a:	50                   	push   eax
c0011f4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f4f:	e8 ce fc ff ff       	call   c0011c22 <VAS::setCPUSpecific(unsigned long)>
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f5b:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f5e:	e8 2b 59 00 00       	call   c001788e <thisCPU()>
c0011f63:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f69:	83 e0 10             	and    eax,0x10
c0011f6c:	84 c0                	test   al,al
c0011f6e:	74 07                	je     c0011f77 <VAS::VAS(bool)+0x181>
c0011f70:	b8 00 01 00 00       	mov    eax,0x100
c0011f75:	eb 05                	jmp    c0011f7c <VAS::VAS(bool)+0x186>
c0011f77:	b8 00 00 00 00       	mov    eax,0x0
c0011f7c:	09 d8                	or     eax,ebx
c0011f7e:	89 c2                	mov    edx,eax
c0011f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f87:	05 fc 0f 00 00       	add    eax,0xffc
c0011f8c:	83 ca 03             	or     edx,0x3
c0011f8f:	89 10                	mov    DWORD PTR [eax],edx
c0011f91:	e8 f8 58 00 00       	call   c001788e <thisCPU()>
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	50                   	push   eax
c0011f9a:	e8 9f 19 00 00       	call   c001393e <Device::getName()>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	83 ec 08             	sub    esp,0x8
c0011fa5:	68 c7 61 02 c0       	push   0xc00261c7
c0011faa:	50                   	push   eax
c0011fab:	e8 26 e8 fe ff       	call   c00007d6 <strcmp>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	85 c0                	test   eax,eax
c0011fb5:	0f 94 c0             	sete   al
c0011fb8:	84 c0                	test   al,al
c0011fba:	74 64                	je     c0012020 <VAS::VAS(bool)+0x22a>
c0011fbc:	e8 84 99 00 00       	call   c001b945 <disableIRQs()>
c0011fc1:	e8 c8 58 00 00       	call   c001788e <thisCPU()>
c0011fc6:	05 7c 09 00 00       	add    eax,0x97c
c0011fcb:	83 ec 0c             	sub    esp,0xc
c0011fce:	50                   	push   eax
c0011fcf:	e8 fe cb ff ff       	call   c000ebd2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fd4:	83 c4 10             	add    esp,0x10
c0011fd7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fdc:	89 c3                	mov    ebx,eax
c0011fde:	e8 ab 58 00 00       	call   c001788e <thisCPU()>
c0011fe3:	05 7c 09 00 00       	add    eax,0x97c
c0011fe8:	83 ec 0c             	sub    esp,0xc
c0011feb:	50                   	push   eax
c0011fec:	e8 e1 cb ff ff       	call   c000ebd2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	83 ec 08             	sub    esp,0x8
c0011ff7:	50                   	push   eax
c0011ff8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffc:	e8 b9 f5 ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	8b 00                	mov    eax,DWORD PTR [eax]
c0012006:	25 00 f0 ff ff       	and    eax,0xfffff000
c001200b:	6a 11                	push   0x11
c001200d:	53                   	push   ebx
c001200e:	50                   	push   eax
c001200f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012013:	e8 3a f9 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012018:	83 c4 10             	add    esp,0x10
c001201b:	e8 33 99 00 00       	call   c001b953 <enableIRQs()>
c0012020:	90                   	nop
c0012021:	83 c4 28             	add    esp,0x28
c0012024:	5b                   	pop    ebx
c0012025:	c3                   	ret    

c0012026 <mapVASFirstTime>:
c0012026:	55                   	push   ebp
c0012027:	57                   	push   edi
c0012028:	56                   	push   esi
c0012029:	53                   	push   ebx
c001202a:	83 ec 0c             	sub    esp,0xc
c001202d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012032:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012035:	4a                   	dec    edx
c0012036:	0f 84 99 00 00 00    	je     c00120d5 <mapVASFirstTime+0xaf>
c001203c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001203f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012042:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012047:	c1 e5 15             	shl    ebp,0x15
c001204a:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001204f:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012055:	29 eb                	sub    ebx,ebp
c0012057:	29 ee                	sub    esi,ebp
c0012059:	e8 ac d6 ff ff       	call   c000f70a <Phys::allocatePage()>
c001205e:	83 ec 0c             	sub    esp,0xc
c0012061:	68 03 04 00 00       	push   0x403
c0012066:	6a 01                	push   0x1
c0012068:	53                   	push   ebx
c0012069:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001206f:	50                   	push   eax
c0012070:	57                   	push   edi
c0012071:	e8 c8 fb ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012076:	83 c4 20             	add    esp,0x20
c0012079:	39 f3                	cmp    ebx,esi
c001207b:	75 dc                	jne    c0012059 <mapVASFirstTime+0x33>
c001207d:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012082:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012087:	29 ee                	sub    esi,ebp
c0012089:	29 e8                	sub    eax,ebp
c001208b:	89 c5                	mov    ebp,eax
c001208d:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012091:	19 db                	sbb    ebx,ebx
c0012093:	e8 72 d6 ff ff       	call   c000f70a <Phys::allocatePage()>
c0012098:	83 e3 04             	and    ebx,0x4
c001209b:	83 ec 0c             	sub    esp,0xc
c001209e:	81 c3 03 04 00 00    	add    ebx,0x403
c00120a4:	53                   	push   ebx
c00120a5:	6a 01                	push   0x1
c00120a7:	56                   	push   esi
c00120a8:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120ae:	50                   	push   eax
c00120af:	57                   	push   edi
c00120b0:	e8 89 fb ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120b5:	83 c4 20             	add    esp,0x20
c00120b8:	39 f5                	cmp    ebp,esi
c00120ba:	75 d1                	jne    c001208d <mapVASFirstTime+0x67>
c00120bc:	e8 d4 20 01 00       	call   c0024195 <CPU::readCR3()>
c00120c1:	83 ec 0c             	sub    esp,0xc
c00120c4:	50                   	push   eax
c00120c5:	e8 dd 20 01 00       	call   c00241a7 <CPU::writeCR3(unsigned long)>
c00120ca:	83 c4 10             	add    esp,0x10
c00120cd:	83 c4 0c             	add    esp,0xc
c00120d0:	5b                   	pop    ebx
c00120d1:	5e                   	pop    esi
c00120d2:	5f                   	pop    edi
c00120d3:	5d                   	pop    ebp
c00120d4:	c3                   	ret    
c00120d5:	83 ec 0c             	sub    esp,0xc
c00120d8:	68 d5 61 02 c0       	push   0xc00261d5
c00120dd:	e8 6f 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00120e2:	83 c4 10             	add    esp,0x10
c00120e5:	83 c4 0c             	add    esp,0xc
c00120e8:	5b                   	pop    ebx
c00120e9:	5e                   	pop    esi
c00120ea:	5f                   	pop    edi
c00120eb:	5d                   	pop    ebp
c00120ec:	c3                   	ret    

c00120ed <__cxa_atexit>:
c00120ed:	31 c0                	xor    eax,eax
c00120ef:	c3                   	ret    

c00120f0 <__cxa_finalize>:
c00120f0:	c3                   	ret    

c00120f1 <__stack_chk_fail>:
c00120f1:	55                   	push   ebp
c00120f2:	89 e5                	mov    ebp,esp
c00120f4:	83 ec 10             	sub    esp,0x10
c00120f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120fa:	68 ee 61 02 c0       	push   0xc00261ee
c00120ff:	e8 4d 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012104:	58                   	pop    eax
c0012105:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012108:	5a                   	pop    edx
c0012109:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001210c:	68 ee 61 02 c0       	push   0xc00261ee
c0012111:	e8 3b 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012116:	59                   	pop    ecx
c0012117:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001211a:	5a                   	pop    edx
c001211b:	8b 00                	mov    eax,DWORD PTR [eax]
c001211d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012120:	68 ee 61 02 c0       	push   0xc00261ee
c0012125:	e8 27 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001212a:	59                   	pop    ecx
c001212b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212e:	5a                   	pop    edx
c001212f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012131:	8b 00                	mov    eax,DWORD PTR [eax]
c0012133:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012136:	68 ee 61 02 c0       	push   0xc00261ee
c001213b:	e8 11 01 00 00       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0012140:	c7 04 24 f6 61 02 c0 	mov    DWORD PTR [esp],0xc00261f6
c0012147:	e8 c2 68 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	c9                   	leave  
c0012150:	c3                   	ret    

c0012151 <__cxa_pure_virtual>:
c0012151:	83 ec 18             	sub    esp,0x18
c0012154:	68 0e 62 02 c0       	push   0xc002620e
c0012159:	e8 b0 68 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c001215e:	83 c4 1c             	add    esp,0x1c
c0012161:	c3                   	ret    

c0012162 <operator new(unsigned long)>:
c0012162:	e9 f9 cf ff ff       	jmp    c000f160 <malloc>

c0012167 <operator new[](unsigned long)>:
c0012167:	e9 f4 cf ff ff       	jmp    c000f160 <malloc>

c001216c <operator delete(void*)>:
c001216c:	e9 0f d0 ff ff       	jmp    c000f180 <rfree>

c0012171 <operator delete(void*, unsigned long)>:
c0012171:	e9 0a d0 ff ff       	jmp    c000f180 <rfree>

c0012176 <operator delete[](void*)>:
c0012176:	e9 05 d0 ff ff       	jmp    c000f180 <rfree>

c001217b <operator delete[](void*, unsigned long)>:
c001217b:	e9 00 d0 ff ff       	jmp    c000f180 <rfree>

c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012180:	57                   	push   edi
c0012181:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012186:	56                   	push   esi
c0012187:	be 24 62 02 c0       	mov    esi,0xc0026224
c001218c:	53                   	push   ebx
c001218d:	83 ec 40             	sub    esp,0x40
c0012190:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012194:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012198:	fc                   	cld    
c0012199:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001219b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001219f:	83 f9 3e             	cmp    ecx,0x3e
c00121a2:	7e 05                	jle    c00121a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121a4:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121a9:	89 df                	mov    edi,ebx
c00121ab:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121af:	eb 02                	jmp    c00121b3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121b1:	89 c7                	mov    edi,eax
c00121b3:	31 d2                	xor    edx,edx
c00121b5:	46                   	inc    esi
c00121b6:	89 f8                	mov    eax,edi
c00121b8:	f7 f1                	div    ecx
c00121ba:	39 cf                	cmp    edi,ecx
c00121bc:	73 f3                	jae    c00121b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121c1:	eb 02                	jmp    c00121c5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121c3:	89 c3                	mov    ebx,eax
c00121c5:	31 d2                	xor    edx,edx
c00121c7:	4e                   	dec    esi
c00121c8:	89 d8                	mov    eax,ebx
c00121ca:	f7 f1                	div    ecx
c00121cc:	39 cb                	cmp    ebx,ecx
c00121ce:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121d2:	88 16                	mov    BYTE PTR [esi],dl
c00121d4:	73 ed                	jae    c00121c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121d6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121da:	83 c4 40             	add    esp,0x40
c00121dd:	5b                   	pop    ebx
c00121de:	5e                   	pop    esi
c00121df:	5f                   	pop    edi
c00121e0:	c3                   	ret    

c00121e1 <Dbg::logc(char)>:
c00121e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121e5:	ba fd 03 00 00       	mov    edx,0x3fd
c00121ea:	ec                   	in     al,dx
c00121eb:	a8 20                	test   al,0x20
c00121ed:	74 fb                	je     c00121ea <Dbg::logc(char)+0x9>
c00121ef:	ba f8 03 00 00       	mov    edx,0x3f8
c00121f4:	88 c8                	mov    al,cl
c00121f6:	ee                   	out    dx,al
c00121f7:	c3                   	ret    

c00121f8 <Dbg::logs(char*)>:
c00121f8:	53                   	push   ebx
c00121f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012200:	84 c0                	test   al,al
c0012202:	74 0f                	je     c0012213 <Dbg::logs(char*)+0x1b>
c0012204:	50                   	push   eax
c0012205:	43                   	inc    ebx
c0012206:	e8 d6 ff ff ff       	call   c00121e1 <Dbg::logc(char)>
c001220b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001220e:	5a                   	pop    edx
c001220f:	84 c0                	test   al,al
c0012211:	75 f1                	jne    c0012204 <Dbg::logs(char*)+0xc>
c0012213:	5b                   	pop    ebx
c0012214:	c3                   	ret    

c0012215 <Dbg::logWriteInt(unsigned int)>:
c0012215:	83 ec 10             	sub    esp,0x10
c0012218:	6a 0a                	push   0xa
c001221a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001221e:	50                   	push   eax
c001221f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012223:	e8 58 ff ff ff       	call   c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012228:	50                   	push   eax
c0012229:	e8 ca ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c001222e:	83 c4 20             	add    esp,0x20
c0012231:	c3                   	ret    

c0012232 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012232:	83 ec 10             	sub    esp,0x10
c0012235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012239:	8d 44 24 08          	lea    eax,[esp+0x8]
c001223d:	50                   	push   eax
c001223e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012242:	e8 39 ff ff ff       	call   c0012180 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012247:	50                   	push   eax
c0012248:	e8 ab ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c001224d:	83 c4 20             	add    esp,0x20
c0012250:	c3                   	ret    

c0012251 <Dbg::kprintf(char const*, ...)>:
c0012251:	55                   	push   ebp
c0012252:	57                   	push   edi
c0012253:	56                   	push   esi
c0012254:	53                   	push   ebx
c0012255:	83 ec 0c             	sub    esp,0xc
c0012258:	8d 44 24 24          	lea    eax,[esp+0x24]
c001225c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012260:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012264:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012267:	84 c0                	test   al,al
c0012269:	74 4a                	je     c00122b5 <Dbg::kprintf(char const*, ...)+0x64>
c001226b:	31 db                	xor    ebx,ebx
c001226d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012270:	3c 25                	cmp    al,0x25
c0012272:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012275:	0f 85 e4 00 00 00    	jne    c001235f <Dbg::kprintf(char const*, ...)+0x10e>
c001227b:	83 c3 02             	add    ebx,0x2
c001227e:	8a 07                	mov    al,BYTE PTR [edi]
c0012280:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012283:	83 e8 25             	sub    eax,0x25
c0012286:	3c 53                	cmp    al,0x53
c0012288:	0f 87 ba 00 00 00    	ja     c0012348 <Dbg::kprintf(char const*, ...)+0xf7>
c001228e:	0f b6 c0             	movzx  eax,al
c0012291:	ff 24 85 64 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9d9c]
c0012298:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001229c:	89 c8                	mov    eax,ecx
c001229e:	83 c1 04             	add    ecx,0x4
c00122a1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122a5:	ff 30                	push   DWORD PTR [eax]
c00122a7:	e8 4c ff ff ff       	call   c00121f8 <Dbg::logs(char*)>
c00122ac:	58                   	pop    eax
c00122ad:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122b1:	84 c0                	test   al,al
c00122b3:	75 b8                	jne    c001226d <Dbg::kprintf(char const*, ...)+0x1c>
c00122b5:	83 c4 0c             	add    esp,0xc
c00122b8:	5b                   	pop    ebx
c00122b9:	5e                   	pop    esi
c00122ba:	5f                   	pop    edi
c00122bb:	5d                   	pop    ebp
c00122bc:	c3                   	ret    
c00122bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122c1:	89 d0                	mov    eax,edx
c00122c3:	83 c2 04             	add    edx,0x4
c00122c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122ca:	ff 30                	push   DWORD PTR [eax]
c00122cc:	e8 44 ff ff ff       	call   c0012215 <Dbg::logWriteInt(unsigned int)>
c00122d1:	58                   	pop    eax
c00122d2:	eb d9                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c00122d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122d8:	89 d0                	mov    eax,edx
c00122da:	83 c2 04             	add    edx,0x4
c00122dd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122e4:	50                   	push   eax
c00122e5:	e8 f7 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c00122ea:	58                   	pop    eax
c00122eb:	eb c0                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c00122ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122f1:	89 c8                	mov    eax,ecx
c00122f3:	83 c1 04             	add    ecx,0x4
c00122f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122fa:	ff 30                	push   DWORD PTR [eax]
c00122fc:	e8 14 ff ff ff       	call   c0012215 <Dbg::logWriteInt(unsigned int)>
c0012301:	5f                   	pop    edi
c0012302:	eb a9                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012304:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012308:	89 c8                	mov    eax,ecx
c001230a:	83 c1 04             	add    ecx,0x4
c001230d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012311:	6a 10                	push   0x10
c0012313:	ff 30                	push   DWORD PTR [eax]
c0012315:	e8 18 ff ff ff       	call   c0012232 <Dbg::logWriteIntBase(unsigned int, int)>
c001231a:	59                   	pop    ecx
c001231b:	5f                   	pop    edi
c001231c:	eb 8f                	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001231e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012322:	89 d0                	mov    eax,edx
c0012324:	83 c2 08             	add    edx,0x8
c0012327:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001232b:	6a 10                	push   0x10
c001232d:	ff 30                	push   DWORD PTR [eax]
c001232f:	e8 fe fe ff ff       	call   c0012232 <Dbg::logWriteIntBase(unsigned int, int)>
c0012334:	58                   	pop    eax
c0012335:	5a                   	pop    edx
c0012336:	e9 72 ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001233b:	6a 25                	push   0x25
c001233d:	e8 9f fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012342:	58                   	pop    eax
c0012343:	e9 65 ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c0012348:	6a 25                	push   0x25
c001234a:	e8 92 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c001234f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012352:	50                   	push   eax
c0012353:	e8 89 fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012358:	5a                   	pop    edx
c0012359:	59                   	pop    ecx
c001235a:	e9 4e ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001235f:	50                   	push   eax
c0012360:	89 eb                	mov    ebx,ebp
c0012362:	e8 7a fe ff ff       	call   c00121e1 <Dbg::logc(char)>
c0012367:	89 fd                	mov    ebp,edi
c0012369:	58                   	pop    eax
c001236a:	e9 3e ff ff ff       	jmp    c00122ad <Dbg::kprintf(char const*, ...)+0x5c>
c001236f:	90                   	nop

c0012370 <File::read(unsigned long long, void*, int*)>:
c0012370:	53                   	push   ebx
c0012371:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012375:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012379:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012380:	3c 19                	cmp    al,0x19
c0012382:	77 35                	ja     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012384:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001238b:	85 c0                	test   eax,eax
c001238d:	74 2a                	je     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c001238f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012395:	85 c0                	test   eax,eax
c0012397:	74 20                	je     c00123b9 <File::read(unsigned long long, void*, int*)+0x49>
c0012399:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001239d:	74 21                	je     c00123c0 <File::read(unsigned long long, void*, int*)+0x50>
c001239f:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123a5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123b3:	5b                   	pop    ebx
c00123b4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123b7:	ff e0                	jmp    eax
c00123b9:	b8 0b 00 00 00       	mov    eax,0xb
c00123be:	eb 05                	jmp    c00123c5 <File::read(unsigned long long, void*, int*)+0x55>
c00123c0:	b8 05 00 00 00       	mov    eax,0x5
c00123c5:	5b                   	pop    ebx
c00123c6:	c3                   	ret    
c00123c7:	90                   	nop

c00123c8 <File::write(unsigned long long, void*, int*)>:
c00123c8:	53                   	push   ebx
c00123c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123d8:	3c 19                	cmp    al,0x19
c00123da:	77 35                	ja     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123dc:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c00123e3:	85 c0                	test   eax,eax
c00123e5:	74 2a                	je     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123ed:	85 c0                	test   eax,eax
c00123ef:	74 20                	je     c0012411 <File::write(unsigned long long, void*, int*)+0x49>
c00123f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123f5:	74 21                	je     c0012418 <File::write(unsigned long long, void*, int*)+0x50>
c00123f7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123f9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123fd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001240b:	5b                   	pop    ebx
c001240c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001240f:	ff e0                	jmp    eax
c0012411:	b8 0b 00 00 00       	mov    eax,0xb
c0012416:	eb 05                	jmp    c001241d <File::write(unsigned long long, void*, int*)+0x55>
c0012418:	b8 05 00 00 00       	mov    eax,0x5
c001241d:	5b                   	pop    ebx
c001241e:	c3                   	ret    
c001241f:	90                   	nop

c0012420 <Directory::read(unsigned long long, void*, int*)>:
c0012420:	53                   	push   ebx
c0012421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012425:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012429:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012430:	3c 19                	cmp    al,0x19
c0012432:	77 35                	ja     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012434:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001243b:	85 c0                	test   eax,eax
c001243d:	74 2a                	je     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c001243f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012445:	85 c0                	test   eax,eax
c0012447:	74 20                	je     c0012469 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012449:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001244d:	74 21                	je     c0012470 <Directory::read(unsigned long long, void*, int*)+0x50>
c001244f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012451:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012455:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001245b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001245f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012463:	5b                   	pop    ebx
c0012464:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012467:	ff e0                	jmp    eax
c0012469:	b8 0b 00 00 00       	mov    eax,0xb
c001246e:	eb 05                	jmp    c0012475 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012470:	b8 05 00 00 00       	mov    eax,0x5
c0012475:	5b                   	pop    ebx
c0012476:	c3                   	ret    
c0012477:	90                   	nop

c0012478 <Directory::write(unsigned long long, void*, int*)>:
c0012478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001247c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012483:	b8 0b 00 00 00       	mov    eax,0xb
c0012488:	80 fa 19             	cmp    dl,0x19
c001248b:	77 18                	ja     c00124a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001248d:	8b 14 95 60 9a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd65a0]
c0012494:	85 d2                	test   edx,edx
c0012496:	74 0d                	je     c00124a5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012498:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001249f:	19 c0                	sbb    eax,eax
c00124a1:	83 e0 0a             	and    eax,0xa
c00124a4:	40                   	inc    eax
c00124a5:	c3                   	ret    

c00124a6 <File::isAtty()>:
c00124a6:	31 c0                	xor    eax,eax
c00124a8:	c3                   	ret    
c00124a9:	90                   	nop

c00124aa <Directory::isAtty()>:
c00124aa:	31 c0                	xor    eax,eax
c00124ac:	c3                   	ret    
c00124ad:	90                   	nop

c00124ae <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124ae:	b8 0a 00 00 00       	mov    eax,0xa
c00124b3:	c3                   	ret    

c00124b4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124b4:	b8 0a 00 00 00       	mov    eax,0xa
c00124b9:	c3                   	ret    

c00124ba <File::~File()>:
c00124ba:	83 ec 0c             	sub    esp,0xc
c00124bd:	ba 20 64 02 c0       	mov    edx,0xc0026420
c00124c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c6:	89 10                	mov    DWORD PTR [eax],edx
c00124c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	50                   	push   eax
c00124d0:	e8 49 eb ff ff       	call   c001101e <UnixFile::~UnixFile()>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	90                   	nop
c00124d9:	83 c4 0c             	add    esp,0xc
c00124dc:	c3                   	ret    
c00124dd:	90                   	nop

c00124de <File::~File()>:
c00124de:	83 ec 0c             	sub    esp,0xc
c00124e1:	83 ec 0c             	sub    esp,0xc
c00124e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e8:	e8 cd ff ff ff       	call   c00124ba <File::~File()>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	83 ec 08             	sub    esp,0x8
c00124f3:	68 14 01 00 00       	push   0x114
c00124f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fc:	e8 70 fc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012501:	83 c4 10             	add    esp,0x10
c0012504:	83 c4 0c             	add    esp,0xc
c0012507:	c3                   	ret    

c0012508 <Directory::~Directory()>:
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	ba 3c 64 02 c0       	mov    edx,0xc002643c
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	89 10                	mov    DWORD PTR [eax],edx
c0012516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	50                   	push   eax
c001251e:	e8 fb ea ff ff       	call   c001101e <UnixFile::~UnixFile()>
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	90                   	nop
c0012527:	83 c4 0c             	add    esp,0xc
c001252a:	c3                   	ret    
c001252b:	90                   	nop

c001252c <Directory::~Directory()>:
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012536:	e8 cd ff ff ff       	call   c0012508 <Directory::~Directory()>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 ec 08             	sub    esp,0x8
c0012541:	68 14 01 00 00       	push   0x114
c0012546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001254a:	e8 22 fc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	83 c4 0c             	add    esp,0xc
c0012555:	c3                   	ret    

c0012556 <Filesystem::Filesystem()>:
c0012556:	ba bc 63 02 c0       	mov    edx,0xc00263bc
c001255b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001255f:	89 10                	mov    DWORD PTR [eax],edx
c0012561:	8b 15 c8 95 02 c0    	mov    edx,DWORD PTR ds:0xc00295c8
c0012567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001256b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001256e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012572:	a3 c8 95 02 c0       	mov    ds:0xc00295c8,eax
c0012577:	90                   	nop
c0012578:	c3                   	ret    
c0012579:	90                   	nop

c001257a <Filesystem::~Filesystem()>:
c001257a:	ba bc 63 02 c0       	mov    edx,0xc00263bc
c001257f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012583:	89 10                	mov    DWORD PTR [eax],edx
c0012585:	90                   	nop
c0012586:	c3                   	ret    
c0012587:	90                   	nop

c0012588 <Filesystem::~Filesystem()>:
c0012588:	83 ec 0c             	sub    esp,0xc
c001258b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001258f:	e8 e6 ff ff ff       	call   c001257a <Filesystem::~Filesystem()>
c0012594:	83 c4 04             	add    esp,0x4
c0012597:	83 ec 08             	sub    esp,0x8
c001259a:	6a 08                	push   0x8
c001259c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a0:	e8 cc fb ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00125a5:	83 c4 10             	add    esp,0x10
c00125a8:	83 c4 0c             	add    esp,0xc
c00125ab:	c3                   	ret    

c00125ac <initVFS()>:
c00125ac:	83 ec 18             	sub    esp,0x18
c00125af:	6a 08                	push   0x8
c00125b1:	e8 ac fb ff ff       	call   c0012162 <operator new(unsigned long)>
c00125b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00125b9:	e8 86 b2 00 00       	call   c001d844 <FAT::FAT()>
c00125be:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125c5:	e8 98 fb ff ff       	call   c0012162 <operator new(unsigned long)>
c00125ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00125cd:	e8 e8 c4 00 00       	call   c001eaba <ISO9660::ISO9660()>
c00125d2:	83 c4 1c             	add    esp,0x1c
c00125d5:	c3                   	ret    

c00125d6 <standardiseFiles(char*, char const*, char const*)>:
c00125d6:	55                   	push   ebp
c00125d7:	57                   	push   edi
c00125d8:	56                   	push   esi
c00125d9:	53                   	push   ebx
c00125da:	81 ec 10 04 00 00    	sub    esp,0x410
c00125e0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125e7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125ee:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125f5:	68 00 04 00 00       	push   0x400
c00125fa:	6a 00                	push   0x0
c00125fc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012600:	56                   	push   esi
c0012601:	e8 e0 e0 fe ff       	call   c00006e6 <memset>
c0012606:	83 c4 10             	add    esp,0x10
c0012609:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001260d:	75 0b                	jne    c001261a <standardiseFiles(char*, char const*, char const*)+0x44>
c001260f:	50                   	push   eax
c0012610:	50                   	push   eax
c0012611:	57                   	push   edi
c0012612:	56                   	push   esi
c0012613:	e8 6d e1 fe ff       	call   c0000785 <strcpy>
c0012618:	eb 41                	jmp    c001265b <standardiseFiles(char*, char const*, char const*)+0x85>
c001261a:	8a 07                	mov    al,BYTE PTR [edi]
c001261c:	3c 5c                	cmp    al,0x5c
c001261e:	74 04                	je     c0012624 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012620:	3c 2f                	cmp    al,0x2f
c0012622:	75 18                	jne    c001263c <standardiseFiles(char*, char const*, char const*)+0x66>
c0012624:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012627:	3c 60                	cmp    al,0x60
c0012629:	7e 03                	jle    c001262e <standardiseFiles(char*, char const*, char const*)+0x58>
c001262b:	83 e8 20             	sub    eax,0x20
c001262e:	88 04 24             	mov    BYTE PTR [esp],al
c0012631:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012638:	50                   	push   eax
c0012639:	50                   	push   eax
c001263a:	eb 18                	jmp    c0012654 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001263c:	50                   	push   eax
c001263d:	50                   	push   eax
c001263e:	55                   	push   ebp
c001263f:	56                   	push   esi
c0012640:	e8 40 e1 fe ff       	call   c0000785 <strcpy>
c0012645:	5a                   	pop    edx
c0012646:	59                   	pop    ecx
c0012647:	68 d4 76 02 c0       	push   0xc00276d4
c001264c:	56                   	push   esi
c001264d:	e8 ea e1 fe ff       	call   c000083c <strcat>
c0012652:	5d                   	pop    ebp
c0012653:	58                   	pop    eax
c0012654:	57                   	push   edi
c0012655:	56                   	push   esi
c0012656:	e8 e1 e1 fe ff       	call   c000083c <strcat>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012661:	3c 60                	cmp    al,0x60
c0012663:	7e 03                	jle    c0012668 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012665:	83 e8 20             	sub    eax,0x20
c0012668:	88 04 24             	mov    BYTE PTR [esp],al
c001266b:	88 03                	mov    BYTE PTR [ebx],al
c001266d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012674:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001267a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001267e:	bf 03 00 00 00       	mov    edi,0x3
c0012683:	b8 03 00 00 00       	mov    eax,0x3
c0012688:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001268b:	84 d2                	test   dl,dl
c001268d:	0f 84 91 00 00 00    	je     c0012724 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012693:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012696:	80 fa 5c             	cmp    dl,0x5c
c0012699:	74 05                	je     c00126a0 <standardiseFiles(char*, char const*, char const*)+0xca>
c001269b:	80 fa 2f             	cmp    dl,0x2f
c001269e:	75 12                	jne    c00126b2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a0:	89 c5                	mov    ebp,eax
c00126a2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126a7:	74 09                	je     c00126b2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a9:	40                   	inc    eax
c00126aa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126ae:	89 cf                	mov    edi,ecx
c00126b0:	eb d6                	jmp    c0012688 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126b2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126b7:	75 5b                	jne    c0012714 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126b9:	80 fa 2e             	cmp    dl,0x2e
c00126bc:	75 56                	jne    c0012714 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126be:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126c2:	74 19                	je     c00126dd <standardiseFiles(char*, char const*, char const*)+0x107>
c00126c4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126c9:	74 53                	je     c001271e <standardiseFiles(char*, char const*, char const*)+0x148>
c00126cb:	89 f9                	mov    ecx,edi
c00126cd:	41                   	inc    ecx
c00126ce:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126d1:	80 fa 2f             	cmp    dl,0x2f
c00126d4:	74 f7                	je     c00126cd <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126d6:	80 fa 5c             	cmp    dl,0x5c
c00126d9:	74 f2                	je     c00126cd <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126db:	eb d1                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126dd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126e2:	74 3a                	je     c001271e <standardiseFiles(char*, char const*, char const*)+0x148>
c00126e4:	83 f8 03             	cmp    eax,0x3
c00126e7:	74 c5                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126e9:	41                   	inc    ecx
c00126ea:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126ed:	80 fa 2f             	cmp    dl,0x2f
c00126f0:	74 f7                	je     c00126e9 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f2:	80 fa 5c             	cmp    dl,0x5c
c00126f5:	74 f2                	je     c00126e9 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f7:	48                   	dec    eax
c00126f8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126fc:	75 06                	jne    c0012704 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126fe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012702:	eb f3                	jmp    c00126f7 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012704:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012708:	74 07                	je     c0012711 <standardiseFiles(char*, char const*, char const*)+0x13b>
c001270a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001270e:	48                   	dec    eax
c001270f:	eb f3                	jmp    c0012704 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012711:	40                   	inc    eax
c0012712:	eb 9a                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012714:	80 fa 2f             	cmp    dl,0x2f
c0012717:	74 95                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012719:	80 fa 5c             	cmp    dl,0x5c
c001271c:	74 90                	je     c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012721:	40                   	inc    eax
c0012722:	eb 8a                	jmp    c00126ae <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012724:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012728:	83 ec 0c             	sub    esp,0xc
c001272b:	53                   	push   ebx
c001272c:	e8 d2 df fe ff       	call   c0000703 <strlen>
c0012731:	83 c4 10             	add    esp,0x10
c0012734:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012739:	75 26                	jne    c0012761 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001273b:	83 ec 0c             	sub    esp,0xc
c001273e:	53                   	push   ebx
c001273f:	e8 bf df fe ff       	call   c0000703 <strlen>
c0012744:	83 c4 10             	add    esp,0x10
c0012747:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001274c:	74 26                	je     c0012774 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001274e:	83 ec 0c             	sub    esp,0xc
c0012751:	53                   	push   ebx
c0012752:	e8 ac df fe ff       	call   c0000703 <strlen>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001275f:	eb c7                	jmp    c0012728 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	53                   	push   ebx
c0012765:	e8 99 df fe ff       	call   c0000703 <strlen>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012772:	74 c7                	je     c001273b <standardiseFiles(char*, char const*, char const*)+0x165>
c0012774:	81 c4 0c 04 00 00    	add    esp,0x40c
c001277a:	5b                   	pop    ebx
c001277b:	5e                   	pop    esi
c001277c:	5f                   	pop    edi
c001277d:	5d                   	pop    ebp
c001277e:	c3                   	ret    
c001277f:	90                   	nop

c0012780 <File::File(char const*, Process*)>:
c0012780:	83 ec 0c             	sub    esp,0xc
c0012783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012787:	83 ec 08             	sub    esp,0x8
c001278a:	6a 00                	push   0x0
c001278c:	50                   	push   eax
c001278d:	e8 ea e6 ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	ba 20 64 02 c0       	mov    edx,0xc0026420
c001279a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001279e:	89 10                	mov    DWORD PTR [eax],edx
c00127a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ae:	83 c0 0d             	add    eax,0xd
c00127b1:	83 ec 04             	sub    esp,0x4
c00127b4:	52                   	push   edx
c00127b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127b9:	50                   	push   eax
c00127ba:	e8 17 fe ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127c9:	8d 50 bf             	lea    edx,[eax-0x41]
c00127cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127da:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127de:	90                   	nop
c00127df:	83 c4 0c             	add    esp,0xc
c00127e2:	c3                   	ret    
c00127e3:	90                   	nop

c00127e4 <File::open(FileOpenMode)>:
c00127e4:	53                   	push   ebx
c00127e5:	b8 0b 00 00 00       	mov    eax,0xb
c00127ea:	83 ec 08             	sub    esp,0x8
c00127ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127f1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127f8:	80 fa 19             	cmp    dl,0x19
c00127fb:	77 40                	ja     c001283d <File::open(FileOpenMode)+0x59>
c00127fd:	8b 14 95 60 9a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd65a0]
c0012804:	85 d2                	test   edx,edx
c0012806:	74 35                	je     c001283d <File::open(FileOpenMode)+0x59>
c0012808:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001280e:	85 d2                	test   edx,edx
c0012810:	74 2b                	je     c001283d <File::open(FileOpenMode)+0x59>
c0012812:	b8 06 00 00 00       	mov    eax,0x6
c0012817:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001281b:	75 20                	jne    c001283d <File::open(FileOpenMode)+0x59>
c001281d:	8b 02                	mov    eax,DWORD PTR [edx]
c001281f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012829:	51                   	push   ecx
c001282a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001282d:	51                   	push   ecx
c001282e:	52                   	push   edx
c001282f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012832:	83 c4 10             	add    esp,0x10
c0012835:	85 c0                	test   eax,eax
c0012837:	75 04                	jne    c001283d <File::open(FileOpenMode)+0x59>
c0012839:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001283d:	83 c4 08             	add    esp,0x8
c0012840:	5b                   	pop    ebx
c0012841:	c3                   	ret    

c0012842 <File::close()>:
c0012842:	53                   	push   ebx
c0012843:	b8 0b 00 00 00       	mov    eax,0xb
c0012848:	83 ec 08             	sub    esp,0x8
c001284b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001284f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012856:	80 fa 19             	cmp    dl,0x19
c0012859:	77 41                	ja     c001289c <File::close()+0x5a>
c001285b:	8b 1c 95 60 9a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd65a0]
c0012862:	85 db                	test   ebx,ebx
c0012864:	74 36                	je     c001289c <File::close()+0x5a>
c0012866:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001286d:	74 2d                	je     c001289c <File::close()+0x5a>
c001286f:	b8 05 00 00 00       	mov    eax,0x5
c0012874:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012878:	74 22                	je     c001289c <File::close()+0x5a>
c001287a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001287e:	8b 04 95 60 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65a0]
c0012885:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001288b:	53                   	push   ebx
c001288c:	53                   	push   ebx
c001288d:	8b 10                	mov    edx,DWORD PTR [eax]
c001288f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012895:	50                   	push   eax
c0012896:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	83 c4 08             	add    esp,0x8
c001289f:	5b                   	pop    ebx
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <File::seek(unsigned long long)>:
c00128a2:	56                   	push   esi
c00128a3:	53                   	push   ebx
c00128a4:	b8 0b 00 00 00       	mov    eax,0xb
c00128a9:	51                   	push   ecx
c00128aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128b2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128bd:	80 fa 19             	cmp    dl,0x19
c00128c0:	77 31                	ja     c00128f3 <File::seek(unsigned long long)+0x51>
c00128c2:	8b 14 95 60 9a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd65a0]
c00128c9:	85 d2                	test   edx,edx
c00128cb:	74 26                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128cd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128d3:	85 d2                	test   edx,edx
c00128d5:	74 1c                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128d7:	b8 05 00 00 00       	mov    eax,0x5
c00128dc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128e0:	74 11                	je     c00128f3 <File::seek(unsigned long long)+0x51>
c00128e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00128e4:	53                   	push   ebx
c00128e5:	51                   	push   ecx
c00128e6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128ec:	52                   	push   edx
c00128ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	5a                   	pop    edx
c00128f4:	5b                   	pop    ebx
c00128f5:	5e                   	pop    esi
c00128f6:	c3                   	ret    
c00128f7:	90                   	nop

c00128f8 <File::tell(unsigned long long*)>:
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	b8 0b 00 00 00       	mov    eax,0xb
c0012900:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012904:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001290b:	80 fa 19             	cmp    dl,0x19
c001290e:	77 34                	ja     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012910:	8b 14 95 60 9a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd65a0]
c0012917:	85 d2                	test   edx,edx
c0012919:	74 29                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c001291b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012921:	85 d2                	test   edx,edx
c0012923:	74 1f                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012925:	b8 05 00 00 00       	mov    eax,0x5
c001292a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001292e:	74 14                	je     c0012944 <File::tell(unsigned long long*)+0x4c>
c0012930:	50                   	push   eax
c0012931:	8b 02                	mov    eax,DWORD PTR [edx]
c0012933:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012937:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001293d:	52                   	push   edx
c001293e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	83 c4 0c             	add    esp,0xc
c0012947:	c3                   	ret    

c0012948 <File::rewind()>:
c0012948:	83 ec 10             	sub    esp,0x10
c001294b:	6a 00                	push   0x0
c001294d:	6a 00                	push   0x0
c001294f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012953:	e8 4a ff ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c0012958:	83 c4 1c             	add    esp,0x1c
c001295b:	c3                   	ret    

c001295c <File::unlink()>:
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	b8 0b 00 00 00       	mov    eax,0xb
c0012964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012968:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001296f:	80 f9 19             	cmp    cl,0x19
c0012972:	77 2f                	ja     c00129a3 <File::unlink()+0x47>
c0012974:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c001297b:	85 c9                	test   ecx,ecx
c001297d:	74 24                	je     c00129a3 <File::unlink()+0x47>
c001297f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012985:	85 c9                	test   ecx,ecx
c0012987:	74 1a                	je     c00129a3 <File::unlink()+0x47>
c0012989:	b8 06 00 00 00       	mov    eax,0x6
c001298e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012992:	75 0f                	jne    c00129a3 <File::unlink()+0x47>
c0012994:	83 c2 0d             	add    edx,0xd
c0012997:	50                   	push   eax
c0012998:	50                   	push   eax
c0012999:	8b 01                	mov    eax,DWORD PTR [ecx]
c001299b:	52                   	push   edx
c001299c:	51                   	push   ecx
c001299d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	83 c4 0c             	add    esp,0xc
c00129a6:	c3                   	ret    
c00129a7:	90                   	nop

c00129a8 <File::rename(char const*)>:
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	b8 0b 00 00 00       	mov    eax,0xb
c00129b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129bb:	80 f9 19             	cmp    cl,0x19
c00129be:	77 32                	ja     c00129f2 <File::rename(char const*)+0x4a>
c00129c0:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c00129c7:	85 c9                	test   ecx,ecx
c00129c9:	74 27                	je     c00129f2 <File::rename(char const*)+0x4a>
c00129cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129d1:	85 c9                	test   ecx,ecx
c00129d3:	74 1d                	je     c00129f2 <File::rename(char const*)+0x4a>
c00129d5:	b8 06 00 00 00       	mov    eax,0x6
c00129da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129de:	75 12                	jne    c00129f2 <File::rename(char const*)+0x4a>
c00129e0:	83 c2 0d             	add    edx,0xd
c00129e3:	50                   	push   eax
c00129e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129ea:	52                   	push   edx
c00129eb:	51                   	push   ecx
c00129ec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	83 c4 0c             	add    esp,0xc
c00129f5:	c3                   	ret    

c00129f6 <File::chfatattr(unsigned char, unsigned char)>:
c00129f6:	57                   	push   edi
c00129f7:	b8 0b 00 00 00       	mov    eax,0xb
c00129fc:	56                   	push   esi
c00129fd:	53                   	push   ebx
c00129fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a0d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a11:	80 f9 19             	cmp    cl,0x19
c0012a14:	77 37                	ja     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a16:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c0012a1d:	85 c9                	test   ecx,ecx
c0012a1f:	74 2c                	je     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a21:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a27:	85 c9                	test   ecx,ecx
c0012a29:	74 22                	je     c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a2b:	b8 06 00 00 00       	mov    eax,0x6
c0012a30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a34:	75 17                	jne    c0012a4d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a36:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a38:	89 f0                	mov    eax,esi
c0012a3a:	83 c2 0d             	add    edx,0xd
c0012a3d:	0f b6 f0             	movzx  esi,al
c0012a40:	0f b6 db             	movzx  ebx,bl
c0012a43:	56                   	push   esi
c0012a44:	53                   	push   ebx
c0012a45:	52                   	push   edx
c0012a46:	51                   	push   ecx
c0012a47:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a4a:	83 c4 10             	add    esp,0x10
c0012a4d:	5b                   	pop    ebx
c0012a4e:	5e                   	pop    esi
c0012a4f:	5f                   	pop    edi
c0012a50:	c3                   	ret    
c0012a51:	90                   	nop

c0012a52 <File::exists()>:
c0012a52:	83 ec 0c             	sub    esp,0xc
c0012a55:	31 c0                	xor    eax,eax
c0012a57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a5b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a62:	80 f9 19             	cmp    cl,0x19
c0012a65:	77 24                	ja     c0012a8b <File::exists()+0x39>
c0012a67:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c0012a6e:	85 c9                	test   ecx,ecx
c0012a70:	74 19                	je     c0012a8b <File::exists()+0x39>
c0012a72:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a78:	85 c9                	test   ecx,ecx
c0012a7a:	74 0f                	je     c0012a8b <File::exists()+0x39>
c0012a7c:	83 c2 0d             	add    edx,0xd
c0012a7f:	50                   	push   eax
c0012a80:	50                   	push   eax
c0012a81:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a83:	52                   	push   edx
c0012a84:	51                   	push   ecx
c0012a85:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	83 c4 0c             	add    esp,0xc
c0012a8e:	c3                   	ret    
c0012a8f:	90                   	nop

c0012a90 <File::stat(unsigned long long*, bool*)>:
c0012a90:	56                   	push   esi
c0012a91:	53                   	push   ebx
c0012a92:	50                   	push   eax
c0012a93:	b8 0b 00 00 00       	mov    eax,0xb
c0012a98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a9c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012aa0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aa7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012aab:	80 f9 19             	cmp    cl,0x19
c0012aae:	77 3d                	ja     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab0:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c0012ab7:	85 c9                	test   ecx,ecx
c0012ab9:	74 32                	je     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012abb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac1:	85 c9                	test   ecx,ecx
c0012ac3:	74 28                	je     c0012aed <File::stat(unsigned long long*, bool*)+0x5d>
c0012ac5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ac7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012acb:	74 13                	je     c0012ae0 <File::stat(unsigned long long*, bool*)+0x50>
c0012acd:	83 ec 04             	sub    esp,0x4
c0012ad0:	56                   	push   esi
c0012ad1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ad7:	51                   	push   ecx
c0012ad8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012adb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ade:	eb 0a                	jmp    c0012aea <File::stat(unsigned long long*, bool*)+0x5a>
c0012ae0:	53                   	push   ebx
c0012ae1:	83 c2 0d             	add    edx,0xd
c0012ae4:	56                   	push   esi
c0012ae5:	52                   	push   edx
c0012ae6:	51                   	push   ecx
c0012ae7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012aea:	83 c4 10             	add    esp,0x10
c0012aed:	5a                   	pop    edx
c0012aee:	5b                   	pop    ebx
c0012aef:	5e                   	pop    esi
c0012af0:	c3                   	ret    

c0012af1 <getcwd(Process*, char*, int)>:
c0012af1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af5:	31 c0                	xor    eax,eax
c0012af7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012afa:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012afe:	7d 15                	jge    c0012b15 <getcwd(Process*, char*, int)+0x24>
c0012b00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b04:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b0b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b0e:	84 c9                	test   cl,cl
c0012b10:	74 06                	je     c0012b18 <getcwd(Process*, char*, int)+0x27>
c0012b12:	40                   	inc    eax
c0012b13:	eb e2                	jmp    c0012af7 <getcwd(Process*, char*, int)+0x6>
c0012b15:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b18:	31 c0                	xor    eax,eax
c0012b1a:	c3                   	ret    

c0012b1b <setcwd(Process*, char*)>:
c0012b1b:	55                   	push   ebp
c0012b1c:	57                   	push   edi
c0012b1d:	56                   	push   esi
c0012b1e:	53                   	push   ebx
c0012b1f:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b25:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b2c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b32:	57                   	push   edi
c0012b33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b3a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b3e:	56                   	push   esi
c0012b3f:	e8 92 fa ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0012b44:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b47:	e8 b7 db fe ff       	call   c0000703 <strlen>
c0012b4c:	83 c4 10             	add    esp,0x10
c0012b4f:	83 f8 02             	cmp    eax,0x2
c0012b52:	77 17                	ja     c0012b6b <setcwd(Process*, char*)+0x50>
c0012b54:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b59:	83 e8 41             	sub    eax,0x41
c0012b5c:	83 f8 19             	cmp    eax,0x19
c0012b5f:	76 24                	jbe    c0012b85 <setcwd(Process*, char*)+0x6a>
c0012b61:	b8 03 00 00 00       	mov    eax,0x3
c0012b66:	e9 cb 00 00 00       	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012b6b:	83 ec 0c             	sub    esp,0xc
c0012b6e:	56                   	push   esi
c0012b6f:	e8 8f db fe ff       	call   c0000703 <strlen>
c0012b74:	83 c4 10             	add    esp,0x10
c0012b77:	83 f8 03             	cmp    eax,0x3
c0012b7a:	75 33                	jne    c0012baf <setcwd(Process*, char*)+0x94>
c0012b7c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b81:	75 2c                	jne    c0012baf <setcwd(Process*, char*)+0x94>
c0012b83:	eb cf                	jmp    c0012b54 <setcwd(Process*, char*)+0x39>
c0012b85:	8b 14 85 60 9a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd65a0]
c0012b8c:	b8 05 00 00 00       	mov    eax,0x5
c0012b91:	85 d2                	test   edx,edx
c0012b93:	0f 84 9d 00 00 00    	je     c0012c36 <setcwd(Process*, char*)+0x11b>
c0012b99:	b8 06 00 00 00       	mov    eax,0x6
c0012b9e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ba5:	0f 84 8b 00 00 00    	je     c0012c36 <setcwd(Process*, char*)+0x11b>
c0012bab:	51                   	push   ecx
c0012bac:	51                   	push   ecx
c0012bad:	eb 7b                	jmp    c0012c2a <setcwd(Process*, char*)+0x10f>
c0012baf:	83 ec 0c             	sub    esp,0xc
c0012bb2:	68 14 01 00 00       	push   0x114
c0012bb7:	e8 a6 f5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0012bbc:	83 c4 0c             	add    esp,0xc
c0012bbf:	89 c3                	mov    ebx,eax
c0012bc1:	55                   	push   ebp
c0012bc2:	56                   	push   esi
c0012bc3:	50                   	push   eax
c0012bc4:	e8 b7 fb ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0012bc9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bce:	83 c4 0c             	add    esp,0xc
c0012bd1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bd5:	50                   	push   eax
c0012bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bda:	50                   	push   eax
c0012bdb:	53                   	push   ebx
c0012bdc:	e8 af fe ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0012be1:	83 c4 10             	add    esp,0x10
c0012be4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012be6:	83 f8 02             	cmp    eax,0x2
c0012be9:	75 09                	jne    c0012bf4 <setcwd(Process*, char*)+0xd9>
c0012beb:	83 ec 0c             	sub    esp,0xc
c0012bee:	53                   	push   ebx
c0012bef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bf2:	eb 0d                	jmp    c0012c01 <setcwd(Process*, char*)+0xe6>
c0012bf4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bf7:	85 c0                	test   eax,eax
c0012bf9:	74 10                	je     c0012c0b <setcwd(Process*, char*)+0xf0>
c0012bfb:	83 ec 0c             	sub    esp,0xc
c0012bfe:	53                   	push   ebx
c0012bff:	ff d2                	call   edx
c0012c01:	83 c4 10             	add    esp,0x10
c0012c04:	b8 01 00 00 00       	mov    eax,0x1
c0012c09:	eb 2b                	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012c0b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c10:	75 10                	jne    c0012c22 <setcwd(Process*, char*)+0x107>
c0012c12:	83 ec 0c             	sub    esp,0xc
c0012c15:	53                   	push   ebx
c0012c16:	ff d2                	call   edx
c0012c18:	83 c4 10             	add    esp,0x10
c0012c1b:	b8 02 00 00 00       	mov    eax,0x2
c0012c20:	eb 14                	jmp    c0012c36 <setcwd(Process*, char*)+0x11b>
c0012c22:	83 ec 0c             	sub    esp,0xc
c0012c25:	53                   	push   ebx
c0012c26:	ff d2                	call   edx
c0012c28:	58                   	pop    eax
c0012c29:	5a                   	pop    edx
c0012c2a:	56                   	push   esi
c0012c2b:	57                   	push   edi
c0012c2c:	e8 54 db fe ff       	call   c0000785 <strcpy>
c0012c31:	83 c4 10             	add    esp,0x10
c0012c34:	31 c0                	xor    eax,eax
c0012c36:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c3c:	5b                   	pop    ebx
c0012c3d:	5e                   	pop    esi
c0012c3e:	5f                   	pop    edi
c0012c3f:	5d                   	pop    ebp
c0012c40:	c3                   	ret    
c0012c41:	90                   	nop

c0012c42 <Directory::Directory(char const*, Process*)>:
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c49:	83 ec 08             	sub    esp,0x8
c0012c4c:	6a 00                	push   0x0
c0012c4e:	50                   	push   eax
c0012c4f:	e8 28 e2 ff ff       	call   c0010e7c <UnixFile::UnixFile(int)>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	ba 3c 64 02 c0       	mov    edx,0xc002643c
c0012c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c60:	89 10                	mov    DWORD PTR [eax],edx
c0012c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	83 c0 0d             	add    eax,0xd
c0012c73:	83 ec 04             	sub    esp,0x4
c0012c76:	52                   	push   edx
c0012c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c7b:	50                   	push   eax
c0012c7c:	e8 55 f9 ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0012c81:	83 c4 10             	add    esp,0x10
c0012c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c88:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c8b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c92:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ca0:	90                   	nop
c0012ca1:	83 c4 0c             	add    esp,0xc
c0012ca4:	c3                   	ret    
c0012ca5:	90                   	nop

c0012ca6 <Directory::open()>:
c0012ca6:	53                   	push   ebx
c0012ca7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cba:	80 fa 19             	cmp    dl,0x19
c0012cbd:	77 3d                	ja     c0012cfc <Directory::open()+0x56>
c0012cbf:	8b 14 95 60 9a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd65a0]
c0012cc6:	85 d2                	test   edx,edx
c0012cc8:	74 32                	je     c0012cfc <Directory::open()+0x56>
c0012cca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd0:	85 d2                	test   edx,edx
c0012cd2:	74 28                	je     c0012cfc <Directory::open()+0x56>
c0012cd4:	b8 06 00 00 00       	mov    eax,0x6
c0012cd9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cdd:	75 1d                	jne    c0012cfc <Directory::open()+0x56>
c0012cdf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ce5:	50                   	push   eax
c0012ce6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ce8:	51                   	push   ecx
c0012ce9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cec:	51                   	push   ecx
c0012ced:	52                   	push   edx
c0012cee:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	85 c0                	test   eax,eax
c0012cf6:	75 04                	jne    c0012cfc <Directory::open()+0x56>
c0012cf8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cfc:	83 c4 08             	add    esp,0x8
c0012cff:	5b                   	pop    ebx
c0012d00:	c3                   	ret    
c0012d01:	90                   	nop

c0012d02 <Directory::close()>:
c0012d02:	53                   	push   ebx
c0012d03:	b8 0b 00 00 00       	mov    eax,0xb
c0012d08:	83 ec 08             	sub    esp,0x8
c0012d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d0f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d16:	80 fa 19             	cmp    dl,0x19
c0012d19:	77 41                	ja     c0012d5c <Directory::close()+0x5a>
c0012d1b:	8b 1c 95 60 9a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd65a0]
c0012d22:	85 db                	test   ebx,ebx
c0012d24:	74 36                	je     c0012d5c <Directory::close()+0x5a>
c0012d26:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d2d:	74 2d                	je     c0012d5c <Directory::close()+0x5a>
c0012d2f:	b8 05 00 00 00       	mov    eax,0x5
c0012d34:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d38:	74 22                	je     c0012d5c <Directory::close()+0x5a>
c0012d3a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d3e:	8b 04 95 60 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65a0]
c0012d45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d4b:	53                   	push   ebx
c0012d4c:	53                   	push   ebx
c0012d4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d4f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d55:	50                   	push   eax
c0012d56:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d59:	83 c4 10             	add    esp,0x10
c0012d5c:	83 c4 08             	add    esp,0x8
c0012d5f:	5b                   	pop    ebx
c0012d60:	c3                   	ret    
c0012d61:	90                   	nop

c0012d62 <Directory::unlink()>:
c0012d62:	83 ec 0c             	sub    esp,0xc
c0012d65:	b8 0b 00 00 00       	mov    eax,0xb
c0012d6a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d6e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d75:	80 f9 19             	cmp    cl,0x19
c0012d78:	77 2f                	ja     c0012da9 <Directory::unlink()+0x47>
c0012d7a:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c0012d81:	85 c9                	test   ecx,ecx
c0012d83:	74 24                	je     c0012da9 <Directory::unlink()+0x47>
c0012d85:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d8b:	85 c9                	test   ecx,ecx
c0012d8d:	74 1a                	je     c0012da9 <Directory::unlink()+0x47>
c0012d8f:	b8 06 00 00 00       	mov    eax,0x6
c0012d94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d98:	75 0f                	jne    c0012da9 <Directory::unlink()+0x47>
c0012d9a:	83 c2 0d             	add    edx,0xd
c0012d9d:	50                   	push   eax
c0012d9e:	50                   	push   eax
c0012d9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012da1:	52                   	push   edx
c0012da2:	51                   	push   ecx
c0012da3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	83 c4 0c             	add    esp,0xc
c0012dac:	c3                   	ret    
c0012dad:	90                   	nop

c0012dae <Directory::rename(char const*)>:
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	b8 0b 00 00 00       	mov    eax,0xb
c0012db6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dc1:	80 f9 19             	cmp    cl,0x19
c0012dc4:	77 32                	ja     c0012df8 <Directory::rename(char const*)+0x4a>
c0012dc6:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c0012dcd:	85 c9                	test   ecx,ecx
c0012dcf:	74 27                	je     c0012df8 <Directory::rename(char const*)+0x4a>
c0012dd1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd7:	85 c9                	test   ecx,ecx
c0012dd9:	74 1d                	je     c0012df8 <Directory::rename(char const*)+0x4a>
c0012ddb:	b8 06 00 00 00       	mov    eax,0x6
c0012de0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012de4:	75 12                	jne    c0012df8 <Directory::rename(char const*)+0x4a>
c0012de6:	83 c2 0d             	add    edx,0xd
c0012de9:	50                   	push   eax
c0012dea:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df0:	52                   	push   edx
c0012df1:	51                   	push   ecx
c0012df2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012df5:	83 c4 10             	add    esp,0x10
c0012df8:	83 c4 0c             	add    esp,0xc
c0012dfb:	c3                   	ret    

c0012dfc <Directory::exists()>:
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	31 c0                	xor    eax,eax
c0012e01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e05:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e0c:	80 f9 19             	cmp    cl,0x19
c0012e0f:	77 24                	ja     c0012e35 <Directory::exists()+0x39>
c0012e11:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c0012e18:	85 c9                	test   ecx,ecx
c0012e1a:	74 19                	je     c0012e35 <Directory::exists()+0x39>
c0012e1c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e22:	85 c9                	test   ecx,ecx
c0012e24:	74 0f                	je     c0012e35 <Directory::exists()+0x39>
c0012e26:	83 c2 0d             	add    edx,0xd
c0012e29:	50                   	push   eax
c0012e2a:	50                   	push   eax
c0012e2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2d:	52                   	push   edx
c0012e2e:	51                   	push   ecx
c0012e2f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	83 c4 0c             	add    esp,0xc
c0012e38:	c3                   	ret    
c0012e39:	90                   	nop

c0012e3a <Directory::read(dirent*)>:
c0012e3a:	83 ec 1c             	sub    esp,0x1c
c0012e3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e42:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e46:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e4d:	80 fa 19             	cmp    dl,0x19
c0012e50:	77 30                	ja     c0012e82 <Directory::read(dirent*)+0x48>
c0012e52:	8b 14 95 60 9a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd65a0]
c0012e59:	85 d2                	test   edx,edx
c0012e5b:	74 25                	je     c0012e82 <Directory::read(dirent*)+0x48>
c0012e5d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e64:	74 1c                	je     c0012e82 <Directory::read(dirent*)+0x48>
c0012e66:	83 ec 0c             	sub    esp,0xc
c0012e69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e6b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e6f:	52                   	push   edx
c0012e70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e74:	6a 00                	push   0x0
c0012e76:	68 10 01 00 00       	push   0x110
c0012e7b:	51                   	push   ecx
c0012e7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e7f:	83 c4 20             	add    esp,0x20
c0012e82:	83 c4 1c             	add    esp,0x1c
c0012e85:	c3                   	ret    

c0012e86 <Directory::create()>:
c0012e86:	83 ec 0c             	sub    esp,0xc
c0012e89:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e99:	80 f9 19             	cmp    cl,0x19
c0012e9c:	77 2f                	ja     c0012ecd <Directory::create()+0x47>
c0012e9e:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c0012ea5:	85 c9                	test   ecx,ecx
c0012ea7:	74 24                	je     c0012ecd <Directory::create()+0x47>
c0012ea9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eaf:	85 c9                	test   ecx,ecx
c0012eb1:	74 1a                	je     c0012ecd <Directory::create()+0x47>
c0012eb3:	b8 06 00 00 00       	mov    eax,0x6
c0012eb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ebc:	75 0f                	jne    c0012ecd <Directory::create()+0x47>
c0012ebe:	83 c2 0d             	add    edx,0xd
c0012ec1:	50                   	push   eax
c0012ec2:	50                   	push   eax
c0012ec3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec5:	52                   	push   edx
c0012ec6:	51                   	push   ecx
c0012ec7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	83 c4 0c             	add    esp,0xc
c0012ed0:	c3                   	ret    
c0012ed1:	90                   	nop

c0012ed2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ed2:	b8 0a 00 00 00       	mov    eax,0xa
c0012ed7:	c3                   	ret    

c0012ed8 <Bus::Bus(char const*)>:
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edf:	83 ec 08             	sub    esp,0x8
c0012ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee6:	50                   	push   eax
c0012ee7:	e8 60 09 00 00       	call   c001384c <Device::Device(char const*)>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	ba 58 64 02 c0       	mov    edx,0xc0026458
c0012ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef8:	89 10                	mov    DWORD PTR [eax],edx
c0012efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efe:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f08:	90                   	nop
c0012f09:	83 c4 0c             	add    esp,0xc
c0012f0c:	c3                   	ret    
c0012f0d:	90                   	nop

c0012f0e <Bus::~Bus()>:
c0012f0e:	83 ec 0c             	sub    esp,0xc
c0012f11:	ba 58 64 02 c0       	mov    edx,0xc0026458
c0012f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1a:	89 10                	mov    DWORD PTR [eax],edx
c0012f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	50                   	push   eax
c0012f24:	e8 d5 05 00 00       	call   c00134fe <Device::~Device()>
c0012f29:	83 c4 10             	add    esp,0x10
c0012f2c:	90                   	nop
c0012f2d:	83 c4 0c             	add    esp,0xc
c0012f30:	c3                   	ret    
c0012f31:	90                   	nop

c0012f32 <Bus::~Bus()>:
c0012f32:	83 ec 0c             	sub    esp,0xc
c0012f35:	83 ec 0c             	sub    esp,0xc
c0012f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3c:	e8 cd ff ff ff       	call   c0012f0e <Bus::~Bus()>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	83 ec 08             	sub    esp,0x8
c0012f47:	68 58 01 00 00       	push   0x158
c0012f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f50:	e8 1c f2 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	83 c4 0c             	add    esp,0xc
c0012f5b:	c3                   	ret    

c0012f5c <Buzzer::Buzzer(char const*)>:
c0012f5c:	83 ec 0c             	sub    esp,0xc
c0012f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f63:	83 ec 08             	sub    esp,0x8
c0012f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f6a:	50                   	push   eax
c0012f6b:	e8 dc 08 00 00       	call   c001384c <Device::Device(char const*)>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	ba 84 64 02 c0       	mov    edx,0xc0026484
c0012f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7c:	89 10                	mov    DWORD PTR [eax],edx
c0012f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f9a:	90                   	nop
c0012f9b:	83 c4 0c             	add    esp,0xc
c0012f9e:	c3                   	ret    
c0012f9f:	90                   	nop

c0012fa0 <Buzzer::~Buzzer()>:
c0012fa0:	83 ec 0c             	sub    esp,0xc
c0012fa3:	ba 84 64 02 c0       	mov    edx,0xc0026484
c0012fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fac:	89 10                	mov    DWORD PTR [eax],edx
c0012fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb2:	83 ec 0c             	sub    esp,0xc
c0012fb5:	50                   	push   eax
c0012fb6:	e8 43 05 00 00       	call   c00134fe <Device::~Device()>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	90                   	nop
c0012fbf:	83 c4 0c             	add    esp,0xc
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <Buzzer::~Buzzer()>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	83 ec 0c             	sub    esp,0xc
c0012fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fce:	e8 cd ff ff ff       	call   c0012fa0 <Buzzer::~Buzzer()>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	83 ec 08             	sub    esp,0x8
c0012fd9:	68 5c 01 00 00       	push   0x15c
c0012fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe2:	e8 8a f1 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	83 c4 0c             	add    esp,0xc
c0012fed:	c3                   	ret    

c0012fee <Buzzer::stop()>:
c0012fee:	83 ec 14             	sub    esp,0x14
c0012ff1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff7:	6a 00                	push   0x0
c0012ff9:	50                   	push   eax
c0012ffa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ffd:	83 c4 1c             	add    esp,0x1c
c0013000:	c3                   	ret    

c0013001 <beepThread(void*)>:
c0013001:	53                   	push   ebx
c0013002:	83 ec 08             	sub    esp,0x8
c0013005:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013009:	e8 56 89 00 00       	call   c001b964 <unlockScheduler()>
c001300e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013013:	52                   	push   edx
c0013014:	52                   	push   edx
c0013015:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001301b:	52                   	push   edx
c001301c:	50                   	push   eax
c001301d:	e8 88 8e 00 00       	call   c001beaa <nanoSleep(unsigned long long)>
c0013022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013025:	e8 c4 ff ff ff       	call   c0012fee <Buzzer::stop()>
c001302a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013032:	83 c4 18             	add    esp,0x18
c0013035:	5b                   	pop    ebx
c0013036:	e9 b5 8d 00 00       	jmp    c001bdf0 <blockTask(TaskState)>
c001303b:	90                   	nop

c001303c <Buzzer::beep(int, int, bool)>:
c001303c:	57                   	push   edi
c001303d:	56                   	push   esi
c001303e:	53                   	push   ebx
c001303f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013043:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001304b:	52                   	push   edx
c001304c:	52                   	push   edx
c001304d:	8b 06                	mov    eax,DWORD PTR [esi]
c001304f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013053:	56                   	push   esi
c0013054:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	89 f8                	mov    eax,edi
c001305c:	84 c0                	test   al,al
c001305e:	74 1f                	je     c001307f <Buzzer::beep(int, int, bool)+0x43>
c0013060:	50                   	push   eax
c0013061:	50                   	push   eax
c0013062:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013068:	99                   	cdq    
c0013069:	52                   	push   edx
c001306a:	50                   	push   eax
c001306b:	e8 3a 8e 00 00       	call   c001beaa <nanoSleep(unsigned long long)>
c0013070:	83 c4 10             	add    esp,0x10
c0013073:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013077:	5b                   	pop    ebx
c0013078:	5e                   	pop    esi
c0013079:	5f                   	pop    edi
c001307a:	e9 6f ff ff ff       	jmp    c0012fee <Buzzer::stop()>
c001307f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013085:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001308a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013092:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013096:	c7 44 24 14 01 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013001
c001309e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a2:	5b                   	pop    ebx
c00130a3:	5e                   	pop    esi
c00130a4:	5f                   	pop    edi
c00130a5:	e9 e2 89 00 00       	jmp    c001ba8c <Process::createThread(void (*)(void*), void*, int)>

c00130aa <loadClockSettings()>:
c00130aa:	c7 05 d4 95 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00295d4,0xa
c00130b4:	c6 05 d1 95 02 c0 00 	mov    BYTE PTR ds:0xc00295d1,0x0
c00130bb:	c6 05 d0 95 02 c0 01 	mov    BYTE PTR ds:0xc00295d0,0x1
c00130c2:	c3                   	ret    
c00130c3:	90                   	nop

c00130c4 <Clock::Clock(char const*)>:
c00130c4:	83 ec 0c             	sub    esp,0xc
c00130c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130cb:	83 ec 08             	sub    esp,0x8
c00130ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d2:	50                   	push   eax
c00130d3:	e8 74 07 00 00       	call   c001384c <Device::Device(char const*)>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	ba b4 64 02 c0       	mov    edx,0xc00264b4
c00130e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e4:	89 10                	mov    DWORD PTR [eax],edx
c00130e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ea:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130f4:	90                   	nop
c00130f5:	83 c4 0c             	add    esp,0xc
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <Clock::~Clock()>:
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	ba b4 64 02 c0       	mov    edx,0xc00264b4
c0013102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013106:	89 10                	mov    DWORD PTR [eax],edx
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	50                   	push   eax
c0013110:	e8 e9 03 00 00       	call   c00134fe <Device::~Device()>
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	90                   	nop
c0013119:	83 c4 0c             	add    esp,0xc
c001311c:	c3                   	ret    
c001311d:	90                   	nop

c001311e <Clock::~Clock()>:
c001311e:	83 ec 0c             	sub    esp,0xc
c0013121:	83 ec 0c             	sub    esp,0xc
c0013124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013128:	e8 cd ff ff ff       	call   c00130fa <Clock::~Clock()>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	83 ec 08             	sub    esp,0x8
c0013133:	68 58 01 00 00       	push   0x158
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 30 f0 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	83 c4 0c             	add    esp,0xc
c0013147:	c3                   	ret    

c0013148 <Clock::timeInSecondsLocal()>:
c0013148:	53                   	push   ebx
c0013149:	83 ec 14             	sub    esp,0x14
c001314c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013150:	8b 10                	mov    edx,DWORD PTR [eax]
c0013152:	50                   	push   eax
c0013153:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013156:	0f b6 0d d0 95 02 c0 	movzx  ecx,BYTE PTR ds:0xc00295d0
c001315d:	03 0d d4 95 02 c0    	add    ecx,DWORD PTR ds:0xc00295d4
c0013163:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013169:	89 cb                	mov    ebx,ecx
c001316b:	c1 fb 1f             	sar    ebx,0x1f
c001316e:	01 c8                	add    eax,ecx
c0013170:	11 da                	adc    edx,ebx
c0013172:	83 c4 10             	add    esp,0x10
c0013175:	31 c9                	xor    ecx,ecx
c0013177:	80 3d d1 95 02 c0 00 	cmp    BYTE PTR ds:0xc00295d1,0x0
c001317e:	74 05                	je     c0013185 <Clock::timeInSecondsLocal()+0x3d>
c0013180:	b9 08 07 00 00       	mov    ecx,0x708
c0013185:	31 db                	xor    ebx,ebx
c0013187:	01 c8                	add    eax,ecx
c0013189:	11 da                	adc    edx,ebx
c001318b:	83 c4 08             	add    esp,0x8
c001318e:	5b                   	pop    ebx
c001318f:	c3                   	ret    

c0013190 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013190:	57                   	push   edi
c0013191:	56                   	push   esi
c0013192:	53                   	push   ebx
c0013193:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013197:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001319b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001319d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131a4:	0f b6 05 d0 95 02 c0 	movzx  eax,BYTE PTR ds:0xc00295d0
c00131ab:	03 05 d4 95 02 c0    	add    eax,DWORD PTR ds:0xc00295d4
c00131b1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131b7:	99                   	cdq    
c00131b8:	29 c6                	sub    esi,eax
c00131ba:	19 d7                	sbb    edi,edx
c00131bc:	89 f0                	mov    eax,esi
c00131be:	89 fa                	mov    edx,edi
c00131c0:	31 f6                	xor    esi,esi
c00131c2:	80 3d d1 95 02 c0 00 	cmp    BYTE PTR ds:0xc00295d1,0x0
c00131c9:	74 05                	je     c00131d0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131cb:	be 08 07 00 00       	mov    esi,0x708
c00131d0:	31 ff                	xor    edi,edi
c00131d2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131d6:	29 f0                	sub    eax,esi
c00131d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131dc:	19 fa                	sbb    edx,edi
c00131de:	89 d8                	mov    eax,ebx
c00131e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131e4:	5b                   	pop    ebx
c00131e5:	5e                   	pop    esi
c00131e6:	5f                   	pop    edi
c00131e7:	ff e0                	jmp    eax

c00131e9 <datetimeToSeconds(datetime_t)>:
c00131e9:	55                   	push   ebp
c00131ea:	57                   	push   edi
c00131eb:	56                   	push   esi
c00131ec:	53                   	push   ebx
c00131ed:	83 ec 14             	sub    esp,0x14
c00131f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131f4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131f8:	89 d3                	mov    ebx,edx
c00131fa:	0f b6 c6             	movzx  eax,dh
c00131fd:	c1 eb 10             	shr    ebx,0x10
c0013200:	48                   	dec    eax
c0013201:	66 81 eb 6c 07       	sub    bx,0x76c
c0013206:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001320a:	0f b6 f5             	movzx  esi,ch
c001320d:	89 cf                	mov    edi,ecx
c001320f:	6b f6 3c             	imul   esi,esi,0x3c
c0013212:	c1 ef 10             	shr    edi,0x10
c0013215:	0f b6 c9             	movzx  ecx,cl
c0013218:	89 f8                	mov    eax,edi
c001321a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013220:	0f b6 f8             	movzx  edi,al
c0013223:	0f b6 d2             	movzx  edx,dl
c0013226:	01 fe                	add    esi,edi
c0013228:	01 f1                	add    ecx,esi
c001322a:	0f b7 f3             	movzx  esi,bx
c001322d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013231:	c1 f9 1f             	sar    ecx,0x1f
c0013234:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013239:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001323d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013242:	8b 0c 8d 00 65 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9b00]
c0013249:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001324d:	76 29                	jbe    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c001324f:	f6 c3 03             	test   bl,0x3
c0013252:	75 24                	jne    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c0013254:	31 d2                	xor    edx,edx
c0013256:	bf 64 00 00 00       	mov    edi,0x64
c001325b:	89 d8                	mov    eax,ebx
c001325d:	66 f7 f7             	div    di
c0013260:	66 85 d2             	test   dx,dx
c0013263:	75 12                	jne    c0013277 <datetimeToSeconds(datetime_t)+0x8e>
c0013265:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001326b:	bf 90 01 00 00       	mov    edi,0x190
c0013270:	99                   	cdq    
c0013271:	f7 ff                	idiv   edi
c0013273:	85 d2                	test   edx,edx
c0013275:	75 01                	jne    c0013278 <datetimeToSeconds(datetime_t)+0x8f>
c0013277:	41                   	inc    ecx
c0013278:	66 83 fb 46          	cmp    bx,0x46
c001327c:	76 45                	jbe    c00132c3 <datetimeToSeconds(datetime_t)+0xda>
c001327e:	bb 46 00 00 00       	mov    ebx,0x46
c0013283:	bf 64 00 00 00       	mov    edi,0x64
c0013288:	bd 90 01 00 00       	mov    ebp,0x190
c001328d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013292:	f6 c3 03             	test   bl,0x3
c0013295:	75 23                	jne    c00132ba <datetimeToSeconds(datetime_t)+0xd1>
c0013297:	89 d8                	mov    eax,ebx
c0013299:	99                   	cdq    
c001329a:	f7 ff                	idiv   edi
c001329c:	b8 6e 01 00 00       	mov    eax,0x16e
c00132a1:	85 d2                	test   edx,edx
c00132a3:	75 15                	jne    c00132ba <datetimeToSeconds(datetime_t)+0xd1>
c00132a5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132ab:	99                   	cdq    
c00132ac:	f7 fd                	idiv   ebp
c00132ae:	83 fa 01             	cmp    edx,0x1
c00132b1:	19 c0                	sbb    eax,eax
c00132b3:	f7 d0                	not    eax
c00132b5:	05 6e 01 00 00       	add    eax,0x16e
c00132ba:	01 c1                	add    ecx,eax
c00132bc:	43                   	inc    ebx
c00132bd:	39 f3                	cmp    ebx,esi
c00132bf:	7c cc                	jl     c001328d <datetimeToSeconds(datetime_t)+0xa4>
c00132c1:	eb 35                	jmp    c00132f8 <datetimeToSeconds(datetime_t)+0x10f>
c00132c3:	74 33                	je     c00132f8 <datetimeToSeconds(datetime_t)+0x10f>
c00132c5:	b8 45 00 00 00       	mov    eax,0x45
c00132ca:	89 c2                	mov    edx,eax
c00132cc:	83 e2 03             	and    edx,0x3
c00132cf:	39 f0                	cmp    eax,esi
c00132d1:	7e 0f                	jle    c00132e2 <datetimeToSeconds(datetime_t)+0xf9>
c00132d3:	83 fa 01             	cmp    edx,0x1
c00132d6:	19 d2                	sbb    edx,edx
c00132d8:	48                   	dec    eax
c00132d9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132e0:	eb e8                	jmp    c00132ca <datetimeToSeconds(datetime_t)+0xe1>
c00132e2:	b8 6d 01 00 00       	mov    eax,0x16d
c00132e7:	85 d2                	test   edx,edx
c00132e9:	75 0b                	jne    c00132f6 <datetimeToSeconds(datetime_t)+0x10d>
c00132eb:	66 83 fb 01          	cmp    bx,0x1
c00132ef:	19 c0                	sbb    eax,eax
c00132f1:	05 6e 01 00 00       	add    eax,0x16e
c00132f6:	29 c1                	sub    ecx,eax
c00132f8:	b8 80 51 01 00       	mov    eax,0x15180
c00132fd:	f7 e9                	imul   ecx
c00132ff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013303:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013307:	83 c4 14             	add    esp,0x14
c001330a:	5b                   	pop    ebx
c001330b:	5e                   	pop    esi
c001330c:	5f                   	pop    edi
c001330d:	5d                   	pop    ebp
c001330e:	c3                   	ret    
c001330f:	90                   	nop

c0013310 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013310:	57                   	push   edi
c0013311:	56                   	push   esi
c0013312:	53                   	push   ebx
c0013313:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013317:	8b 06                	mov    eax,DWORD PTR [esi]
c0013319:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001331c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013324:	e8 c0 fe ff ff       	call   c00131e9 <datetimeToSeconds(datetime_t)>
c0013329:	59                   	pop    ecx
c001332a:	0f b6 0d d0 95 02 c0 	movzx  ecx,BYTE PTR ds:0xc00295d0
c0013331:	5b                   	pop    ebx
c0013332:	03 0d d4 95 02 c0    	add    ecx,DWORD PTR ds:0xc00295d4
c0013338:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001333e:	89 cb                	mov    ebx,ecx
c0013340:	c1 fb 1f             	sar    ebx,0x1f
c0013343:	29 c8                	sub    eax,ecx
c0013345:	19 da                	sbb    edx,ebx
c0013347:	31 c9                	xor    ecx,ecx
c0013349:	80 3d d1 95 02 c0 00 	cmp    BYTE PTR ds:0xc00295d1,0x0
c0013350:	74 05                	je     c0013357 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013352:	b9 08 07 00 00       	mov    ecx,0x708
c0013357:	31 db                	xor    ebx,ebx
c0013359:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001335d:	29 c8                	sub    eax,ecx
c001335f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013363:	19 da                	sbb    edx,ebx
c0013365:	89 f8                	mov    eax,edi
c0013367:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001336b:	5b                   	pop    ebx
c001336c:	5e                   	pop    esi
c001336d:	5f                   	pop    edi
c001336e:	ff e0                	jmp    eax

c0013370 <secondsToDatetime(unsigned long long)>:
c0013370:	55                   	push   ebp
c0013371:	57                   	push   edi
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	83 ec 1c             	sub    esp,0x1c
c0013377:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001337b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001337f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013383:	6a 00                	push   0x0
c0013385:	68 80 51 01 00       	push   0x15180
c001338a:	55                   	push   ebp
c001338b:	57                   	push   edi
c001338c:	e8 eb f0 00 00       	call   c002247c <__udivdi3>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001339a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001339e:	6a 00                	push   0x0
c00133a0:	68 80 51 01 00       	push   0x15180
c00133a5:	55                   	push   ebp
c00133a6:	57                   	push   edi
c00133a7:	bf 10 0e 00 00       	mov    edi,0xe10
c00133ac:	e8 cb f1 00 00       	call   c002257c <__umoddi3>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	99                   	cdq    
c00133b5:	f7 ff                	idiv   edi
c00133b7:	bf 3c 00 00 00       	mov    edi,0x3c
c00133bc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133bf:	89 d0                	mov    eax,edx
c00133c1:	99                   	cdq    
c00133c2:	f7 ff                	idiv   edi
c00133c4:	85 db                	test   ebx,ebx
c00133c6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133c9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133cc:	79 11                	jns    c00133df <secondsToDatetime(unsigned long long)+0x6f>
c00133ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133d2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133d8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133dd:	eb 07                	jmp    c00133e6 <secondsToDatetime(unsigned long long)+0x76>
c00133df:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133e4:	89 d8                	mov    eax,ebx
c00133e6:	bf b4 05 00 00       	mov    edi,0x5b4
c00133eb:	99                   	cdq    
c00133ec:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133f1:	f7 f9                	idiv   ecx
c00133f3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133fc:	31 d2                	xor    edx,edx
c00133fe:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013406:	01 c3                	add    ebx,eax
c0013408:	89 d8                	mov    eax,ebx
c001340a:	f7 f1                	div    ecx
c001340c:	31 d2                	xor    edx,edx
c001340e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013411:	89 d8                	mov    eax,ebx
c0013413:	f7 f7                	div    edi
c0013415:	31 d2                	xor    edx,edx
c0013417:	29 c1                	sub    ecx,eax
c0013419:	89 d8                	mov    eax,ebx
c001341b:	f7 f5                	div    ebp
c001341d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013422:	29 c1                	sub    ecx,eax
c0013424:	31 d2                	xor    edx,edx
c0013426:	89 c8                	mov    eax,ecx
c0013428:	f7 f5                	div    ebp
c001342a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001342f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013433:	31 d2                	xor    edx,edx
c0013435:	89 c8                	mov    eax,ecx
c0013437:	f7 f5                	div    ebp
c0013439:	31 d2                	xor    edx,edx
c001343b:	01 c3                	add    ebx,eax
c001343d:	89 c8                	mov    eax,ecx
c001343f:	f7 f7                	div    edi
c0013441:	bf 99 00 00 00       	mov    edi,0x99
c0013446:	29 c3                	sub    ebx,eax
c0013448:	31 d2                	xor    edx,edx
c001344a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013452:	29 c3                	sub    ebx,eax
c0013454:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013457:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001345a:	bb 05 00 00 00       	mov    ebx,0x5
c001345f:	83 c1 02             	add    ecx,0x2
c0013462:	89 c8                	mov    eax,ecx
c0013464:	f7 f7                	div    edi
c0013466:	31 d2                	xor    edx,edx
c0013468:	89 c7                	mov    edi,eax
c001346a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013470:	83 c0 02             	add    eax,0x2
c0013473:	f7 f3                	div    ebx
c0013475:	89 eb                	mov    ebx,ebp
c0013477:	29 c3                	sub    ebx,eax
c0013479:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001347f:	88 1e                	mov    BYTE PTR [esi],bl
c0013481:	19 c0                	sbb    eax,eax
c0013483:	31 d2                	xor    edx,edx
c0013485:	83 e0 0c             	and    eax,0xc
c0013488:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001348c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013494:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013498:	83 f9 01             	cmp    ecx,0x1
c001349b:	0f 96 c2             	setbe  dl
c001349e:	41                   	inc    ecx
c001349f:	01 d0                	add    eax,edx
c00134a1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134a4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134a8:	83 c4 1c             	add    esp,0x1c
c00134ab:	89 f0                	mov    eax,esi
c00134ad:	5b                   	pop    ebx
c00134ae:	5e                   	pop    esi
c00134af:	5f                   	pop    edi
c00134b0:	5d                   	pop    ebp
c00134b1:	c2 04 00             	ret    0x4

c00134b4 <Clock::timeInDatetimeLocal()>:
c00134b4:	53                   	push   ebx
c00134b5:	83 ec 14             	sub    esp,0x14
c00134b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134c0:	e8 83 fc ff ff       	call   c0013148 <Clock::timeInSecondsLocal()>
c00134c5:	83 c4 0c             	add    esp,0xc
c00134c8:	52                   	push   edx
c00134c9:	50                   	push   eax
c00134ca:	53                   	push   ebx
c00134cb:	e8 a0 fe ff ff       	call   c0013370 <secondsToDatetime(unsigned long long)>
c00134d0:	89 d8                	mov    eax,ebx
c00134d2:	83 c4 14             	add    esp,0x14
c00134d5:	5b                   	pop    ebx
c00134d6:	c2 04 00             	ret    0x4
c00134d9:	90                   	nop

c00134da <Device::hibernate()>:
c00134da:	c3                   	ret    
c00134db:	90                   	nop

c00134dc <Device::wake()>:
c00134dc:	c3                   	ret    
c00134dd:	90                   	nop

c00134de <Device::detect()>:
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <Device::disableLegacy()>:
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Device::powerSaving(PowerSavingLevel)>:
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <DriverlessDevice::close(int, int, void*)>:
c00134e4:	31 c0                	xor    eax,eax
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <DriverlessDevice::detect()>:
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <DriverlessDevice::open(int, int, void*)>:
c00134ea:	83 ec 18             	sub    esp,0x18
c00134ed:	68 30 65 02 c0       	push   0xc0026530
c00134f2:	e8 17 55 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00134f7:	83 c8 ff             	or     eax,0xffffffff
c00134fa:	83 c4 1c             	add    esp,0x1c
c00134fd:	c3                   	ret    

c00134fe <Device::~Device()>:
c00134fe:	ba 58 65 02 c0       	mov    edx,0xc0026558
c0013503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013507:	89 10                	mov    DWORD PTR [eax],edx
c0013509:	90                   	nop
c001350a:	c3                   	ret    
c001350b:	90                   	nop

c001350c <Device::~Device()>:
c001350c:	83 ec 0c             	sub    esp,0xc
c001350f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013513:	e8 e6 ff ff ff       	call   c00134fe <Device::~Device()>
c0013518:	83 c4 04             	add    esp,0x4
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	68 58 01 00 00       	push   0x158
c0013523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013527:	e8 45 ec ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	83 c4 0c             	add    esp,0xc
c0013532:	c3                   	ret    
c0013533:	90                   	nop

c0013534 <Device::findAndLoadDriver()>:
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013536:	57                   	push   edi
c0013537:	b9 09 00 00 00       	mov    ecx,0x9
c001353c:	56                   	push   esi
c001353d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013541:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013545:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001354f:	81 c7 18 01 00 00    	add    edi,0x118
c0013555:	fc                   	cld    
c0013556:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013558:	5e                   	pop    esi
c0013559:	5f                   	pop    edi
c001355a:	c3                   	ret    
c001355b:	90                   	nop

c001355c <Device::preOpenACPI(void*, char*, char*)>:
c001355c:	56                   	push   esi
c001355d:	53                   	push   ebx
c001355e:	83 ec 08             	sub    esp,0x8
c0013561:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013565:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013569:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013577:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001357d:	6a 1e                	push   0x1e
c001357f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013585:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013589:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001358f:	50                   	push   eax
c0013590:	e8 1b d1 fe ff       	call   c00006b0 <memcpy>
c0013595:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013599:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001359d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135a5:	83 c4 14             	add    esp,0x14
c00135a8:	5b                   	pop    ebx
c00135a9:	5e                   	pop    esi
c00135aa:	e9 01 d1 fe ff       	jmp    c00006b0 <memcpy>
c00135af:	90                   	nop

c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135b0:	55                   	push   ebp
c00135b1:	57                   	push   edi
c00135b2:	56                   	push   esi
c00135b3:	53                   	push   ebx
c00135b4:	83 ec 0c             	sub    esp,0xc
c00135b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135bb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135bf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135c7:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135cc:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135d3:	75 0b                	jne    c00135e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00135d7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135db:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135de:	eb 24                	jmp    c0013604 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135e0:	e8 a9 42 00 00       	call   c001788e <thisCPU()>
c00135e5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00135ed:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135f5:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135f9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013601:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013604:	83 c4 0c             	add    esp,0xc
c0013607:	5b                   	pop    ebx
c0013608:	5e                   	pop    esi
c0013609:	5f                   	pop    edi
c001360a:	5d                   	pop    ebp
c001360b:	ff e0                	jmp    eax
c001360d:	90                   	nop

c001360e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001360e:	57                   	push   edi
c001360f:	56                   	push   esi
c0013610:	53                   	push   ebx
c0013611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013619:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001361d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013622:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013629:	75 0b                	jne    c0013636 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001362b:	8b 00                	mov    eax,DWORD PTR [eax]
c001362d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013631:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013634:	eb 20                	jmp    c0013656 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013636:	e8 53 42 00 00       	call   c001788e <thisCPU()>
c001363b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013641:	8b 10                	mov    edx,DWORD PTR [eax]
c0013643:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013647:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001364b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001364f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013653:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013656:	5b                   	pop    ebx
c0013657:	5e                   	pop    esi
c0013658:	5f                   	pop    edi
c0013659:	ff e0                	jmp    eax
c001365b:	90                   	nop

c001365c <Device::addChild(Device*)>:
c001365c:	53                   	push   ebx
c001365d:	83 ec 08             	sub    esp,0x8
c0013660:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013664:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013668:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001366e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013674:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013676:	85 d2                	test   edx,edx
c0013678:	74 04                	je     c001367e <Device::addChild(Device*)+0x22>
c001367a:	89 d3                	mov    ebx,edx
c001367c:	eb f6                	jmp    c0013674 <Device::addChild(Device*)+0x18>
c001367e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013681:	83 ec 0c             	sub    esp,0xc
c0013684:	6a 08                	push   0x8
c0013686:	e8 d7 ea ff ff       	call   c0012162 <operator new(unsigned long)>
c001368b:	89 03                	mov    DWORD PTR [ebx],eax
c001368d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013693:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001369a:	83 c4 18             	add    esp,0x18
c001369d:	5b                   	pop    ebx
c001369e:	c3                   	ret    
c001369f:	90                   	nop

c00136a0 <Device::removeAllChildren()>:
c00136a0:	56                   	push   esi
c00136a1:	53                   	push   ebx
c00136a2:	52                   	push   edx
c00136a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136a7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136b0:	74 17                	je     c00136c9 <Device::removeAllChildren()+0x29>
c00136b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136b5:	85 c0                	test   eax,eax
c00136b7:	74 0c                	je     c00136c5 <Device::removeAllChildren()+0x25>
c00136b9:	83 ec 0c             	sub    esp,0xc
c00136bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00136be:	50                   	push   eax
c00136bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136c7:	eb e4                	jmp    c00136ad <Device::removeAllChildren()+0xd>
c00136c9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136d5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e2:	58                   	pop    eax
c00136e3:	5b                   	pop    ebx
c00136e4:	5e                   	pop    esi
c00136e5:	c3                   	ret    

c00136e6 <Device::hibernateAll()>:
c00136e6:	53                   	push   ebx
c00136e7:	83 ec 14             	sub    esp,0x14
c00136ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f0:	53                   	push   ebx
c00136f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136fa:	83 c4 10             	add    esp,0x10
c00136fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013700:	74 0f                	je     c0013711 <Device::hibernateAll()+0x2b>
c0013702:	83 ec 0c             	sub    esp,0xc
c0013705:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013708:	e8 d9 ff ff ff       	call   c00136e6 <Device::hibernateAll()>
c001370d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001370f:	eb e9                	jmp    c00136fa <Device::hibernateAll()+0x14>
c0013711:	83 c4 08             	add    esp,0x8
c0013714:	5b                   	pop    ebx
c0013715:	c3                   	ret    

c0013716 <Device::wakeAll()>:
c0013716:	53                   	push   ebx
c0013717:	83 ec 14             	sub    esp,0x14
c001371a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001371e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013720:	53                   	push   ebx
c0013721:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013724:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001372a:	83 c4 10             	add    esp,0x10
c001372d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013730:	74 0f                	je     c0013741 <Device::wakeAll()+0x2b>
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013738:	e8 d9 ff ff ff       	call   c0013716 <Device::wakeAll()>
c001373d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001373f:	eb e9                	jmp    c001372a <Device::wakeAll()+0x14>
c0013741:	83 c4 08             	add    esp,0x8
c0013744:	5b                   	pop    ebx
c0013745:	c3                   	ret    

c0013746 <Device::detectAll()>:
c0013746:	53                   	push   ebx
c0013747:	83 ec 14             	sub    esp,0x14
c001374a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001374e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013750:	53                   	push   ebx
c0013751:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013754:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001375a:	83 c4 10             	add    esp,0x10
c001375d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013760:	74 0f                	je     c0013771 <Device::detectAll()+0x2b>
c0013762:	83 ec 0c             	sub    esp,0xc
c0013765:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013768:	e8 d9 ff ff ff       	call   c0013746 <Device::detectAll()>
c001376d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001376f:	eb e9                	jmp    c001375a <Device::detectAll()+0x14>
c0013771:	83 c4 08             	add    esp,0x8
c0013774:	5b                   	pop    ebx
c0013775:	c3                   	ret    

c0013776 <Device::disableLegacyAll()>:
c0013776:	53                   	push   ebx
c0013777:	83 ec 14             	sub    esp,0x14
c001377a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001377e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013780:	53                   	push   ebx
c0013781:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013784:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013790:	74 0f                	je     c00137a1 <Device::disableLegacyAll()+0x2b>
c0013792:	83 ec 0c             	sub    esp,0xc
c0013795:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013798:	e8 d9 ff ff ff       	call   c0013776 <Device::disableLegacyAll()>
c001379d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001379f:	eb e9                	jmp    c001378a <Device::disableLegacyAll()+0x14>
c00137a1:	83 c4 08             	add    esp,0x8
c00137a4:	5b                   	pop    ebx
c00137a5:	c3                   	ret    

c00137a6 <Device::loadDriversForAll()>:
c00137a6:	53                   	push   ebx
c00137a7:	83 ec 08             	sub    esp,0x8
c00137aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ae:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137b6:	85 db                	test   ebx,ebx
c00137b8:	74 12                	je     c00137cc <Device::loadDriversForAll()+0x26>
c00137ba:	83 ec 0c             	sub    esp,0xc
c00137bd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137c0:	e8 e1 ff ff ff       	call   c00137a6 <Device::loadDriversForAll()>
c00137c5:	83 c4 10             	add    esp,0x10
c00137c8:	89 d8                	mov    eax,ebx
c00137ca:	eb e8                	jmp    c00137b4 <Device::loadDriversForAll()+0xe>
c00137cc:	83 c4 08             	add    esp,0x8
c00137cf:	5b                   	pop    ebx
c00137d0:	c3                   	ret    
c00137d1:	90                   	nop

c00137d2 <Device::closeAll()>:
c00137d2:	53                   	push   ebx
c00137d3:	83 ec 08             	sub    esp,0x8
c00137d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137dc:	6a 00                	push   0x0
c00137de:	6a 00                	push   0x0
c00137e0:	6a 00                	push   0x0
c00137e2:	53                   	push   ebx
c00137e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f2:	74 0f                	je     c0013803 <Device::closeAll()+0x31>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137fa:	e8 d3 ff ff ff       	call   c00137d2 <Device::closeAll()>
c00137ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013801:	eb e9                	jmp    c00137ec <Device::closeAll()+0x1a>
c0013803:	83 c4 08             	add    esp,0x8
c0013806:	5b                   	pop    ebx
c0013807:	c3                   	ret    

c0013808 <Device::powerSavingAll(PowerSavingLevel)>:
c0013808:	56                   	push   esi
c0013809:	53                   	push   ebx
c001380a:	83 ec 0c             	sub    esp,0xc
c001380d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013811:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013815:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013817:	56                   	push   esi
c0013818:	53                   	push   ebx
c0013819:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001381c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013828:	74 0f                	je     c0013839 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001382a:	52                   	push   edx
c001382b:	52                   	push   edx
c001382c:	56                   	push   esi
c001382d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013830:	e8 d3 ff ff ff       	call   c0013808 <Device::powerSavingAll(PowerSavingLevel)>
c0013835:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013837:	eb e9                	jmp    c0013822 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013839:	58                   	pop    eax
c001383a:	5b                   	pop    ebx
c001383b:	5e                   	pop    esi
c001383c:	c3                   	ret    
c001383d:	90                   	nop

c001383e <Device::setName(char const*)>:
c001383e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013846:	e9 3a cf fe ff       	jmp    c0000785 <strcpy>
c001384b:	90                   	nop

c001384c <Device::Device(char const*)>:
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	ba 58 65 02 c0       	mov    edx,0xc0026558
c0013854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013858:	89 10                	mov    DWORD PTR [eax],edx
c001385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013888:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013892:	83 ec 08             	sub    esp,0x8
c0013895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389d:	e8 9c ff ff ff       	call   c001383e <Device::setName(char const*)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	83 ec 0c             	sub    esp,0xc
c00138a8:	6a 08                	push   0x8
c00138aa:	e8 b3 e8 ff ff       	call   c0012162 <operator new(unsigned long)>
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013904:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001390e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013912:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001391c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013920:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001392a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013938:	90                   	nop
c0013939:	83 c4 0c             	add    esp,0xc
c001393c:	c3                   	ret    
c001393d:	90                   	nop

c001393e <Device::getName()>:
c001393e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013942:	05 d0 00 00 00       	add    eax,0xd0
c0013947:	c3                   	ret    

c0013948 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394f:	83 ec 08             	sub    esp,0x8
c0013952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013956:	50                   	push   eax
c0013957:	e8 f0 fe ff ff       	call   c001384c <Device::Device(char const*)>
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	ba 84 65 02 c0       	mov    edx,0xc0026584
c0013964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013968:	89 10                	mov    DWORD PTR [eax],edx
c001396a:	90                   	nop
c001396b:	83 c4 0c             	add    esp,0xc
c001396e:	c3                   	ret    
c001396f:	90                   	nop

c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013970:	57                   	push   edi
c0013971:	56                   	push   esi
c0013972:	53                   	push   ebx
c0013973:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013977:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001397b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001397f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013985:	75 0c                	jne    c0013993 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013987:	52                   	push   edx
c0013988:	52                   	push   edx
c0013989:	53                   	push   ebx
c001398a:	56                   	push   esi
c001398b:	e8 44 0a 01 00       	call   c00243d4 <LinkedList<Device>::addElement(Device*)>
c0013990:	83 c4 10             	add    esp,0x10
c0013993:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013999:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001399c:	74 12                	je     c00139b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001399e:	50                   	push   eax
c001399f:	57                   	push   edi
c00139a0:	56                   	push   esi
c00139a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139a4:	e8 c7 ff ff ff       	call   c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	eb e9                	jmp    c0013999 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139b0:	5b                   	pop    ebx
c00139b1:	5e                   	pop    esi
c00139b2:	5f                   	pop    edi
c00139b3:	c3                   	ret    

c00139b4 <getDevicesOfType(DeviceType)>:
c00139b4:	53                   	push   ebx
c00139b5:	83 ec 14             	sub    esp,0x14
c00139b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139bc:	53                   	push   ebx
c00139bd:	e8 ee 0a 01 00       	call   c00244b0 <LinkedList<Device>::LinkedList()>
c00139c2:	83 c4 0c             	add    esp,0xc
c00139c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139c9:	53                   	push   ebx
c00139ca:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c00139d0:	e8 9b ff ff ff       	call   c0013970 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139d5:	89 d8                	mov    eax,ebx
c00139d7:	83 c4 18             	add    esp,0x18
c00139da:	5b                   	pop    ebx
c00139db:	c2 04 00             	ret    0x4

c00139de <HardDiskController::HardDiskController(char const*)>:
c00139de:	83 ec 0c             	sub    esp,0xc
c00139e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e5:	83 ec 08             	sub    esp,0x8
c00139e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ec:	50                   	push   eax
c00139ed:	e8 5a fe ff ff       	call   c001384c <Device::Device(char const*)>
c00139f2:	83 c4 10             	add    esp,0x10
c00139f5:	ba b0 65 02 c0       	mov    edx,0xc00265b0
c00139fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fe:	89 10                	mov    DWORD PTR [eax],edx
c0013a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a04:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a0e:	90                   	nop
c0013a0f:	83 c4 0c             	add    esp,0xc
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <HardDiskController::~HardDiskController()>:
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	ba b0 65 02 c0       	mov    edx,0xc00265b0
c0013a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a20:	89 10                	mov    DWORD PTR [eax],edx
c0013a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a26:	83 ec 0c             	sub    esp,0xc
c0013a29:	50                   	push   eax
c0013a2a:	e8 cf fa ff ff       	call   c00134fe <Device::~Device()>
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	90                   	nop
c0013a33:	83 c4 0c             	add    esp,0xc
c0013a36:	c3                   	ret    
c0013a37:	90                   	nop

c0013a38 <HardDiskController::~HardDiskController()>:
c0013a38:	83 ec 0c             	sub    esp,0xc
c0013a3b:	83 ec 0c             	sub    esp,0xc
c0013a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a42:	e8 cd ff ff ff       	call   c0013a14 <HardDiskController::~HardDiskController()>
c0013a47:	83 c4 10             	add    esp,0x10
c0013a4a:	83 ec 08             	sub    esp,0x8
c0013a4d:	68 58 01 00 00       	push   0x158
c0013a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a56:	e8 16 e7 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013a5b:	83 c4 10             	add    esp,0x10
c0013a5e:	83 c4 0c             	add    esp,0xc
c0013a61:	c3                   	ret    

c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a62:	83 ec 0c             	sub    esp,0xc
c0013a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a69:	83 ec 08             	sub    esp,0x8
c0013a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a70:	50                   	push   eax
c0013a71:	e8 d6 fd ff ff       	call   c001384c <Device::Device(char const*)>
c0013a76:	83 c4 10             	add    esp,0x10
c0013a79:	ba dc 65 02 c0       	mov    edx,0xc00265dc
c0013a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a82:	89 10                	mov    DWORD PTR [eax],edx
c0013a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a88:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a93:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ab0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ac4:	90                   	nop
c0013ac5:	83 c4 0c             	add    esp,0xc
c0013ac8:	c3                   	ret    
c0013ac9:	90                   	nop

c0013aca <PhysicalDisk::startCache()>:
c0013aca:	56                   	push   esi
c0013acb:	53                   	push   ebx
c0013acc:	83 ec 10             	sub    esp,0x10
c0013acf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ad3:	6a 30                	push   0x30
c0013ad5:	e8 88 e6 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013ada:	89 c6                	mov    esi,eax
c0013adc:	58                   	pop    eax
c0013add:	5a                   	pop    edx
c0013ade:	53                   	push   ebx
c0013adf:	56                   	push   esi
c0013ae0:	e8 3f 25 00 00       	call   c0016024 <VCache::VCache(PhysicalDisk*)>
c0013ae5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013aeb:	83 c4 14             	add    esp,0x14
c0013aee:	5b                   	pop    ebx
c0013aef:	5e                   	pop    esi
c0013af0:	c3                   	ret    
c0013af1:	90                   	nop

c0013af2 <PhysicalDisk::~PhysicalDisk()>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	ba dc 65 02 c0       	mov    edx,0xc00265dc
c0013afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afe:	89 10                	mov    DWORD PTR [eax],edx
c0013b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	50                   	push   eax
c0013b08:	e8 f1 f9 ff ff       	call   c00134fe <Device::~Device()>
c0013b0d:	83 c4 10             	add    esp,0x10
c0013b10:	90                   	nop
c0013b11:	83 c4 0c             	add    esp,0xc
c0013b14:	c3                   	ret    
c0013b15:	90                   	nop

c0013b16 <PhysicalDisk::~PhysicalDisk()>:
c0013b16:	83 ec 0c             	sub    esp,0xc
c0013b19:	83 ec 0c             	sub    esp,0xc
c0013b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b20:	e8 cd ff ff ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c0013b25:	83 c4 10             	add    esp,0x10
c0013b28:	83 ec 08             	sub    esp,0x8
c0013b2b:	68 6c 01 00 00       	push   0x16c
c0013b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b34:	e8 38 e6 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	83 c4 0c             	add    esp,0xc
c0013b3f:	c3                   	ret    

c0013b40 <FPU::FPU(char const*)>:
c0013b40:	83 ec 0c             	sub    esp,0xc
c0013b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b47:	83 ec 08             	sub    esp,0x8
c0013b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4e:	50                   	push   eax
c0013b4f:	e8 f8 fc ff ff       	call   c001384c <Device::Device(char const*)>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	ba 1c 66 02 c0       	mov    edx,0xc002661c
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	89 10                	mov    DWORD PTR [eax],edx
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b70:	90                   	nop
c0013b71:	83 c4 0c             	add    esp,0xc
c0013b74:	c3                   	ret    
c0013b75:	90                   	nop

c0013b76 <FPU::~FPU()>:
c0013b76:	83 ec 0c             	sub    esp,0xc
c0013b79:	ba 1c 66 02 c0       	mov    edx,0xc002661c
c0013b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b82:	89 10                	mov    DWORD PTR [eax],edx
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	50                   	push   eax
c0013b8c:	e8 6d f9 ff ff       	call   c00134fe <Device::~Device()>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	90                   	nop
c0013b95:	83 c4 0c             	add    esp,0xc
c0013b98:	c3                   	ret    
c0013b99:	90                   	nop

c0013b9a <FPU::~FPU()>:
c0013b9a:	83 ec 0c             	sub    esp,0xc
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba4:	e8 cd ff ff ff       	call   c0013b76 <FPU::~FPU()>
c0013ba9:	83 c4 10             	add    esp,0x10
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	68 58 01 00 00       	push   0x158
c0013bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb8:	e8 b4 e5 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0013bbd:	83 c4 10             	add    esp,0x10
c0013bc0:	83 c4 0c             	add    esp,0xc
c0013bc3:	c3                   	ret    

c0013bc4 <setupFPU()>:
c0013bc4:	53                   	push   ebx
c0013bc5:	83 ec 08             	sub    esp,0x8
c0013bc8:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0013bcd:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013bd4:	74 19                	je     c0013bef <setupFPU()+0x2b>
c0013bd6:	83 ec 0c             	sub    esp,0xc
c0013bd9:	68 58 01 00 00       	push   0x158
c0013bde:	e8 7f e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013be3:	89 c3                	mov    ebx,eax
c0013be5:	89 04 24             	mov    DWORD PTR [esp],eax
c0013be8:	e8 5f d5 00 00       	call   c002114c <AVX::AVX()>
c0013bed:	eb 5b                	jmp    c0013c4a <setupFPU()+0x86>
c0013bef:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013bf5:	84 c0                	test   al,al
c0013bf7:	79 19                	jns    c0013c12 <setupFPU()+0x4e>
c0013bf9:	83 ec 0c             	sub    esp,0xc
c0013bfc:	68 58 01 00 00       	push   0x158
c0013c01:	e8 5c e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013c06:	89 c3                	mov    ebx,eax
c0013c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c0b:	e8 62 d6 00 00       	call   c0021272 <SSE::SSE()>
c0013c10:	eb 38                	jmp    c0013c4a <setupFPU()+0x86>
c0013c12:	a8 20                	test   al,0x20
c0013c14:	74 19                	je     c0013c2f <setupFPU()+0x6b>
c0013c16:	83 ec 0c             	sub    esp,0xc
c0013c19:	68 58 01 00 00       	push   0x158
c0013c1e:	e8 3f e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013c23:	89 c3                	mov    ebx,eax
c0013c25:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c28:	e8 af d5 00 00       	call   c00211dc <MMX::MMX()>
c0013c2d:	eb 1b                	jmp    c0013c4a <setupFPU()+0x86>
c0013c2f:	a8 10                	test   al,0x10
c0013c31:	74 1c                	je     c0013c4f <setupFPU()+0x8b>
c0013c33:	83 ec 0c             	sub    esp,0xc
c0013c36:	68 58 01 00 00       	push   0x158
c0013c3b:	e8 22 e5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0013c40:	89 c3                	mov    ebx,eax
c0013c42:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c45:	e8 b6 d6 00 00       	call   c0021300 <x87::x87()>
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	eb 2c                	jmp    c0013c7b <setupFPU()+0xb7>
c0013c4f:	83 ec 0c             	sub    esp,0xc
c0013c52:	31 db                	xor    ebx,ebx
c0013c54:	68 08 66 02 c0       	push   0xc0026608
c0013c59:	e8 f3 e5 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0013c5e:	e8 2b 3c 00 00       	call   c001788e <thisCPU()>
c0013c63:	e8 26 3c 00 00       	call   c001788e <thisCPU()>
c0013c68:	e8 9b 08 01 00       	call   c0024508 <CPU::readCR0()>
c0013c6d:	83 c8 04             	or     eax,0x4
c0013c70:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c73:	e8 a2 08 01 00       	call   c002451a <CPU::writeCR0(unsigned long)>
c0013c78:	83 c4 10             	add    esp,0x10
c0013c7b:	89 d8                	mov    eax,ebx
c0013c7d:	83 c4 08             	add    esp,0x8
c0013c80:	5b                   	pop    ebx
c0013c81:	c3                   	ret    

c0013c82 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c8a:	c1 e0 04             	shl    eax,0x4
c0013c8d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c91:	8d 50 10             	lea    edx,[eax+0x10]
c0013c94:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013c9a:	74 08                	je     c0013ca4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013c9c:	83 c0 04             	add    eax,0x4
c0013c9f:	39 d0                	cmp    eax,edx
c0013ca1:	75 f1                	jne    c0013c94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013ca3:	c3                   	ret    
c0013ca4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cae:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013cb8:	eb e2                	jmp    c0013c9c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cba <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cba:	57                   	push   edi
c0013cbb:	31 c0                	xor    eax,eax
c0013cbd:	56                   	push   esi
c0013cbe:	53                   	push   ebx
c0013cbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cc3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cc7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013ccb:	89 da                	mov    edx,ebx
c0013ccd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cd1:	c1 e2 04             	shl    edx,0x4
c0013cd4:	01 ca                	add    edx,ecx
c0013cd6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013cde:	74 16                	je     c0013cf6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013ce0:	40                   	inc    eax
c0013ce1:	83 f8 04             	cmp    eax,0x4
c0013ce4:	75 f0                	jne    c0013cd6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013ce6:	c7 44 24 10 4c 66 02 c0 	mov    DWORD PTR [esp+0x10],0xc002664c
c0013cee:	5b                   	pop    ebx
c0013cef:	5e                   	pop    esi
c0013cf0:	5f                   	pop    edi
c0013cf1:	e9 18 4d 00 00       	jmp    c0018a0e <Krnl::panic(char const*)>
c0013cf6:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013cf9:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013cfc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d02:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d08:	5b                   	pop    ebx
c0013d09:	5e                   	pop    esi
c0013d0a:	5f                   	pop    edi
c0013d0b:	c3                   	ret    

c0013d0c <doubleFault(regs*, void*)>:
c0013d0c:	55                   	push   ebp
c0013d0d:	89 e5                	mov    ebp,esp
c0013d0f:	83 ec 08             	sub    esp,0x8
c0013d12:	83 ec 0c             	sub    esp,0xc
c0013d15:	68 87 66 02 c0       	push   0xc0026687
c0013d1a:	e8 ef 4c 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0013d1f:	83 c4 10             	add    esp,0x10
c0013d22:	90                   	nop
c0013d23:	c9                   	leave  
c0013d24:	c3                   	ret    
c0013d25:	90                   	nop

c0013d26 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d26:	56                   	push   esi
c0013d27:	53                   	push   ebx
c0013d28:	50                   	push   eax
c0013d29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d31:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d36:	75 35                	jne    c0013d6d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d38:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d3b:	31 d2                	xor    edx,edx
c0013d3d:	89 c1                	mov    ecx,eax
c0013d3f:	c1 e1 04             	shl    ecx,0x4
c0013d42:	01 f1                	add    ecx,esi
c0013d44:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d4c:	74 3e                	je     c0013d8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d4e:	42                   	inc    edx
c0013d4f:	83 fa 04             	cmp    edx,0x4
c0013d52:	75 f0                	jne    c0013d44 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	68 cc 66 02 c0       	push   0xc00266cc
c0013d5c:	e8 ad 4c 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d69:	5a                   	pop    edx
c0013d6a:	5b                   	pop    ebx
c0013d6b:	5e                   	pop    esi
c0013d6c:	c3                   	ret    
c0013d6d:	83 ec 0c             	sub    esp,0xc
c0013d70:	56                   	push   esi
c0013d71:	e8 c8 fb ff ff       	call   c001393e <Device::getName()>
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d7c:	75 ba                	jne    c0013d38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d7e:	83 fb 0f             	cmp    ebx,0xf
c0013d81:	7f 29                	jg     c0013dac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d83:	0f b6 9b 40 87 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd78c0]
c0013d8a:	eb ac                	jmp    c0013d38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d8c:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d93:	8d 04 86             	lea    eax,[esi+eax*4]
c0013d96:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013d9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013da0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013da6:	89 d8                	mov    eax,ebx
c0013da8:	5a                   	pop    edx
c0013da9:	5b                   	pop    ebx
c0013daa:	5e                   	pop    esi
c0013dab:	c3                   	ret    
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	68 94 66 02 c0       	push   0xc0026694
c0013db4:	e8 55 4c 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	e9 77 ff ff ff       	jmp    c0013d38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dc1:	90                   	nop

c0013dc2 <InterruptController::clearAllHandlers(int, bool)>:
c0013dc2:	56                   	push   esi
c0013dc3:	53                   	push   ebx
c0013dc4:	52                   	push   edx
c0013dc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dcd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013dd2:	75 61                	jne    c0013e35 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013dd4:	8d 46 20             	lea    eax,[esi+0x20]
c0013dd7:	c1 e6 04             	shl    esi,0x4
c0013dda:	c1 e0 04             	shl    eax,0x4
c0013ddd:	01 de                	add    esi,ebx
c0013ddf:	01 d8                	add    eax,ebx
c0013de1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013deb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013df5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013dff:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e09:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e13:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e1d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e27:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e31:	58                   	pop    eax
c0013e32:	5b                   	pop    ebx
c0013e33:	5e                   	pop    esi
c0013e34:	c3                   	ret    
c0013e35:	83 ec 0c             	sub    esp,0xc
c0013e38:	53                   	push   ebx
c0013e39:	e8 00 fb ff ff       	call   c001393e <Device::getName()>
c0013e3e:	83 c4 10             	add    esp,0x10
c0013e41:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e44:	75 8e                	jne    c0013dd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e46:	83 fe 0f             	cmp    esi,0xf
c0013e49:	7f 09                	jg     c0013e54 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e4b:	0f b6 b6 40 87 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd78c0]
c0013e52:	eb 80                	jmp    c0013dd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e54:	83 ec 0c             	sub    esp,0xc
c0013e57:	68 08 67 02 c0       	push   0xc0026708
c0013e5c:	e8 ad 4b 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0013e61:	83 c4 10             	add    esp,0x10
c0013e64:	e9 6b ff ff ff       	jmp    c0013dd4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e69:	90                   	nop

c0013e6a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e6a:	56                   	push   esi
c0013e6b:	53                   	push   ebx
c0013e6c:	52                   	push   edx
c0013e6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e75:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e7a:	75 3a                	jne    c0013eb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e80:	8d 50 20             	lea    edx,[eax+0x20]
c0013e83:	c1 e2 04             	shl    edx,0x4
c0013e86:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e89:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e8d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e93:	74 0b                	je     c0013ea0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e95:	83 c0 04             	add    eax,0x4
c0013e98:	39 d0                	cmp    eax,edx
c0013e9a:	75 f1                	jne    c0013e8d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013e9c:	58                   	pop    eax
c0013e9d:	5b                   	pop    ebx
c0013e9e:	5e                   	pop    esi
c0013e9f:	c3                   	ret    
c0013ea0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eaa:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013eb4:	eb df                	jmp    c0013e95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	56                   	push   esi
c0013eba:	e8 7f fa ff ff       	call   c001393e <Device::getName()>
c0013ebf:	83 c4 10             	add    esp,0x10
c0013ec2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ec5:	75 b5                	jne    c0013e7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ec7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013ecc:	7f 11                	jg     c0013edf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ece:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ed2:	0f b6 80 40 87 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd78c0]
c0013ed9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013edd:	eb 9d                	jmp    c0013e7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013edf:	83 ec 0c             	sub    esp,0xc
c0013ee2:	68 08 67 02 c0       	push   0xc0026708
c0013ee7:	e8 22 4b 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	eb 8b                	jmp    c0013e7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013ef1 <nmiHandler(regs*, void*)>:
c0013ef1:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0013ef6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013efa:	e9 a5 a9 ff ff       	jmp    c000e8a4 <Computer::handleNMI()>

c0013eff <int_handler>:
c0013eff:	55                   	push   ebp
c0013f00:	57                   	push   edi
c0013f01:	56                   	push   esi
c0013f02:	53                   	push   ebx
c0013f03:	83 ec 0c             	sub    esp,0xc
c0013f06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f0a:	80 3d b4 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029eb4,0x0
c0013f11:	74 0b                	je     c0013f1e <int_handler+0x1f>
c0013f13:	fa                   	cli    
c0013f14:	f4                   	hlt    
c0013f15:	80 3d b4 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029eb4,0x0
c0013f1c:	75 f5                	jne    c0013f13 <int_handler+0x14>
c0013f1e:	e8 6b 39 00 00       	call   c001788e <thisCPU()>
c0013f23:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f26:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f2c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f2f:	83 f8 17             	cmp    eax,0x17
c0013f32:	77 13                	ja     c0013f47 <int_handler+0x48>
c0013f34:	83 ec 08             	sub    esp,0x8
c0013f37:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f39:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f3c:	0f b6 c0             	movzx  eax,al
c0013f3f:	50                   	push   eax
c0013f40:	57                   	push   edi
c0013f41:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f44:	83 c4 10             	add    esp,0x10
c0013f47:	83 c3 15             	add    ebx,0x15
c0013f4a:	c1 e3 04             	shl    ebx,0x4
c0013f4d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f51:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f58:	31 db                	xor    ebx,ebx
c0013f5a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f5e:	85 c0                	test   eax,eax
c0013f60:	74 13                	je     c0013f75 <int_handler+0x76>
c0013f62:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f65:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f69:	74 1c                	je     c0013f87 <int_handler+0x88>
c0013f6b:	83 ec 08             	sub    esp,0x8
c0013f6e:	52                   	push   edx
c0013f6f:	56                   	push   esi
c0013f70:	ff d0                	call   eax
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	43                   	inc    ebx
c0013f76:	83 fb 04             	cmp    ebx,0x4
c0013f79:	75 df                	jne    c0013f5a <int_handler+0x5b>
c0013f7b:	83 c4 0c             	add    esp,0xc
c0013f7e:	31 c0                	xor    eax,eax
c0013f80:	5b                   	pop    ebx
c0013f81:	31 d2                	xor    edx,edx
c0013f83:	5e                   	pop    esi
c0013f84:	5f                   	pop    edi
c0013f85:	5d                   	pop    ebp
c0013f86:	c3                   	ret    
c0013f87:	83 ec 08             	sub    esp,0x8
c0013f8a:	52                   	push   edx
c0013f8b:	56                   	push   esi
c0013f8c:	ff d0                	call   eax
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	83 c4 0c             	add    esp,0xc
c0013f94:	5b                   	pop    ebx
c0013f95:	5e                   	pop    esi
c0013f96:	5f                   	pop    edi
c0013f97:	5d                   	pop    ebp
c0013f98:	c3                   	ret    
c0013f99:	90                   	nop

c0013f9a <InterruptController::InterruptController(char const*)>:
c0013f9a:	83 ec 1c             	sub    esp,0x1c
c0013f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa1:	83 ec 08             	sub    esp,0x8
c0013fa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fa8:	50                   	push   eax
c0013fa9:	e8 9e f8 ff ff       	call   c001384c <Device::Device(char const*)>
c0013fae:	83 c4 10             	add    esp,0x10
c0013fb1:	ba 44 69 02 c0       	mov    edx,0xc0026944
c0013fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fba:	89 10                	mov    DWORD PTR [eax],edx
c0013fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fd2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fda:	7f 5e                	jg     c001403a <InterruptController::InterruptController(char const*)+0xa0>
c0013fdc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fe4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013fe9:	7f 49                	jg     c0014034 <InterruptController::InterruptController(char const*)+0x9a>
c0013feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ff3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ffe:	01 ca                	add    edx,ecx
c0014000:	83 c2 54             	add    edx,0x54
c0014003:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001400b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014013:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001401a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001401e:	01 ca                	add    edx,ecx
c0014020:	81 c2 54 04 00 00    	add    edx,0x454
c0014026:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001402e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014032:	eb b0                	jmp    c0013fe4 <InterruptController::InterruptController(char const*)+0x4a>
c0014034:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014038:	eb 98                	jmp    c0013fd2 <InterruptController::InterruptController(char const*)+0x38>
c001403a:	90                   	nop
c001403b:	83 c4 1c             	add    esp,0x1c
c001403e:	c3                   	ret    
c001403f:	90                   	nop

c0014040 <InterruptController::~InterruptController()>:
c0014040:	83 ec 0c             	sub    esp,0xc
c0014043:	ba 44 69 02 c0       	mov    edx,0xc0026944
c0014048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404c:	89 10                	mov    DWORD PTR [eax],edx
c001404e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014052:	83 ec 0c             	sub    esp,0xc
c0014055:	50                   	push   eax
c0014056:	e8 a3 f4 ff ff       	call   c00134fe <Device::~Device()>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	90                   	nop
c001405f:	83 c4 0c             	add    esp,0xc
c0014062:	c3                   	ret    
c0014063:	90                   	nop

c0014064 <InterruptController::~InterruptController()>:
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	83 ec 0c             	sub    esp,0xc
c001406a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001406e:	e8 cd ff ff ff       	call   c0014040 <InterruptController::~InterruptController()>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	83 ec 08             	sub    esp,0x8
c0014079:	68 58 21 00 00       	push   0x2158
c001407e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014082:	e8 ea e0 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0014087:	83 c4 10             	add    esp,0x10
c001408a:	83 c4 0c             	add    esp,0xc
c001408d:	c3                   	ret    

c001408e <displayDebugInfo(regs*)>:
c001408e:	55                   	push   ebp
c001408f:	57                   	push   edi
c0014090:	56                   	push   esi
c0014091:	53                   	push   ebx
c0014092:	83 ec 24             	sub    esp,0x24
c0014095:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014099:	0f 20 c2             	mov    edx,cr0
c001409c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140a0:	0f 20 d7             	mov    edi,cr2
c00140a3:	0f 20 de             	mov    esi,cr3
c00140a6:	0f 20 e5             	mov    ebp,cr4
c00140a9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140ac:	68 42 67 02 c0       	push   0xc0026742
c00140b1:	e8 9b e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140b6:	58                   	pop    eax
c00140b7:	5a                   	pop    edx
c00140b8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140bb:	68 4d 67 02 c0       	push   0xc002674d
c00140c0:	e8 8c e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140c5:	59                   	pop    ecx
c00140c6:	58                   	pop    eax
c00140c7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140ca:	68 58 67 02 c0       	push   0xc0026758
c00140cf:	e8 7d e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140d4:	58                   	pop    eax
c00140d5:	5a                   	pop    edx
c00140d6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140d9:	68 63 67 02 c0       	push   0xc0026763
c00140de:	e8 6e e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140e3:	59                   	pop    ecx
c00140e4:	58                   	pop    eax
c00140e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140e8:	68 6e 67 02 c0       	push   0xc002676e
c00140ed:	e8 5f e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00140f2:	58                   	pop    eax
c00140f3:	5a                   	pop    edx
c00140f4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00140f7:	68 79 67 02 c0       	push   0xc0026779
c00140fc:	e8 50 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014101:	59                   	pop    ecx
c0014102:	58                   	pop    eax
c0014103:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014106:	68 84 67 02 c0       	push   0xc0026784
c001410b:	e8 41 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014110:	58                   	pop    eax
c0014111:	5a                   	pop    edx
c0014112:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014115:	68 8f 67 02 c0       	push   0xc002678f
c001411a:	e8 32 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001411f:	59                   	pop    ecx
c0014120:	58                   	pop    eax
c0014121:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014124:	68 9a 67 02 c0       	push   0xc002679a
c0014129:	e8 23 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001412e:	58                   	pop    eax
c001412f:	5a                   	pop    edx
c0014130:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014133:	68 a9 67 02 c0       	push   0xc00267a9
c0014138:	e8 14 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001413d:	59                   	pop    ecx
c001413e:	58                   	pop    eax
c001413f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014142:	68 b4 67 02 c0       	push   0xc00267b4
c0014147:	e8 05 e1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001414c:	58                   	pop    eax
c001414d:	5a                   	pop    edx
c001414e:	57                   	push   edi
c001414f:	68 bf 67 02 c0       	push   0xc00267bf
c0014154:	e8 f8 e0 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014159:	59                   	pop    ecx
c001415a:	58                   	pop    eax
c001415b:	56                   	push   esi
c001415c:	68 ca 67 02 c0       	push   0xc00267ca
c0014161:	e8 eb e0 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014166:	58                   	pop    eax
c0014167:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001416c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014172:	e8 1e c3 ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c0014177:	58                   	pop    eax
c0014178:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001417b:	5a                   	pop    edx
c001417c:	c1 e0 05             	shl    eax,0x5
c001417f:	05 a0 84 02 c0       	add    eax,0xc00284a0
c0014184:	50                   	push   eax
c0014185:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001418a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014190:	e8 1f c7 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014195:	59                   	pop    ecx
c0014196:	58                   	pop    eax
c0014197:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001419c:	68 d5 67 02 c0       	push   0xc00267d5
c00141a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141a7:	e8 08 c7 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00141ac:	58                   	pop    eax
c00141ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141b2:	5a                   	pop    edx
c00141b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141b6:	83 c0 0c             	add    eax,0xc
c00141b9:	50                   	push   eax
c00141ba:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00141bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c5:	e8 ea c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00141ca:	59                   	pop    ecx
c00141cb:	58                   	pop    eax
c00141cc:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00141d1:	68 de 67 02 c0       	push   0xc00267de
c00141d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141dc:	e8 d3 c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00141e1:	58                   	pop    eax
c00141e2:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00141e7:	5a                   	pop    edx
c00141e8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f1:	e8 e4 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00141f6:	59                   	pop    ecx
c00141f7:	58                   	pop    eax
c00141f8:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00141fd:	68 e6 67 02 c0       	push   0xc00267e6
c0014202:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014208:	e8 a7 c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001420d:	58                   	pop    eax
c001420e:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014213:	5a                   	pop    edx
c0014214:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014217:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001421d:	e8 b8 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0014222:	59                   	pop    ecx
c0014223:	58                   	pop    eax
c0014224:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014229:	68 ee 67 02 c0       	push   0xc00267ee
c001422e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014234:	e8 7b c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014239:	58                   	pop    eax
c001423a:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001423f:	5a                   	pop    edx
c0014240:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014243:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014249:	e8 8c c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001424e:	59                   	pop    ecx
c001424f:	58                   	pop    eax
c0014250:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014255:	68 f6 67 02 c0       	push   0xc00267f6
c001425a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014260:	e8 4f c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014265:	58                   	pop    eax
c0014266:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001426b:	5a                   	pop    edx
c001426c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001426f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014275:	e8 60 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001427a:	59                   	pop    ecx
c001427b:	58                   	pop    eax
c001427c:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014281:	68 fe 67 02 c0       	push   0xc00267fe
c0014286:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001428c:	e8 23 c6 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014291:	58                   	pop    eax
c0014292:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014297:	5a                   	pop    edx
c0014298:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001429b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a1:	e8 34 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00142a6:	59                   	pop    ecx
c00142a7:	58                   	pop    eax
c00142a8:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00142ad:	68 06 68 02 c0       	push   0xc0026806
c00142b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b8:	e8 f7 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00142bd:	58                   	pop    eax
c00142be:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00142c3:	5a                   	pop    edx
c00142c4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142cd:	e8 08 c6 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00142d2:	59                   	pop    ecx
c00142d3:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00142d8:	5b                   	pop    ebx
c00142d9:	68 0e 68 02 c0       	push   0xc002680e
c00142de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e4:	e8 cb c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00142e9:	58                   	pop    eax
c00142ea:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00142ef:	5a                   	pop    edx
c00142f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142f4:	52                   	push   edx
c00142f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142fb:	e8 da c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0014300:	59                   	pop    ecx
c0014301:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014306:	5b                   	pop    ebx
c0014307:	68 17 68 02 c0       	push   0xc0026817
c001430c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014312:	e8 9d c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014317:	58                   	pop    eax
c0014318:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001431d:	5a                   	pop    edx
c001431e:	57                   	push   edi
c001431f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014325:	e8 b0 c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001432a:	59                   	pop    ecx
c001432b:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014330:	5b                   	pop    ebx
c0014331:	68 1f 68 02 c0       	push   0xc002681f
c0014336:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001433c:	e8 73 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014341:	5f                   	pop    edi
c0014342:	58                   	pop    eax
c0014343:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014348:	56                   	push   esi
c0014349:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434f:	e8 86 c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0014354:	58                   	pop    eax
c0014355:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001435a:	5a                   	pop    edx
c001435b:	68 27 68 02 c0       	push   0xc0026827
c0014360:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014366:	e8 49 c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c001436b:	59                   	pop    ecx
c001436c:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014371:	5b                   	pop    ebx
c0014372:	55                   	push   ebp
c0014373:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014379:	e8 5c c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001437e:	5e                   	pop    esi
c001437f:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014384:	5f                   	pop    edi
c0014385:	68 2f 68 02 c0       	push   0xc002682f
c001438a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014390:	e8 1f c5 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014395:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001439a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143a0:	e8 7e 01 01 00       	call   c0024523 <CPU::readDR0()>
c00143a5:	5d                   	pop    ebp
c00143a6:	5a                   	pop    edx
c00143a7:	50                   	push   eax
c00143a8:	53                   	push   ebx
c00143a9:	e8 2c c5 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00143ae:	59                   	pop    ecx
c00143af:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00143b4:	5b                   	pop    ebx
c00143b5:	68 38 68 02 c0       	push   0xc0026838
c00143ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c0:	e8 ef c4 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00143c5:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00143ca:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143d0:	e8 60 01 01 00       	call   c0024535 <CPU::readDR1()>
c00143d5:	5e                   	pop    esi
c00143d6:	5f                   	pop    edi
c00143d7:	50                   	push   eax
c00143d8:	53                   	push   ebx
c00143d9:	e8 fc c4 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c00143de:	5d                   	pop    ebp
c00143df:	58                   	pop    eax
c00143e0:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00143e5:	68 40 68 02 c0       	push   0xc0026840
c00143ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f0:	e8 bf c4 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c00143f5:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c00143fa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014400:	e8 42 01 01 00       	call   c0024547 <CPU::readDR2()>
c0014405:	5a                   	pop    edx
c0014406:	59                   	pop    ecx
c0014407:	50                   	push   eax
c0014408:	53                   	push   ebx
c0014409:	e8 cc c4 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001440e:	5b                   	pop    ebx
c001440f:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014414:	5e                   	pop    esi
c0014415:	68 48 68 02 c0       	push   0xc0026848
c001441a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014420:	e8 8f c4 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014425:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001442a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014430:	e8 24 01 01 00       	call   c0024559 <CPU::readDR3()>
c0014435:	5f                   	pop    edi
c0014436:	5d                   	pop    ebp
c0014437:	50                   	push   eax
c0014438:	53                   	push   ebx
c0014439:	e8 9c c4 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001443e:	58                   	pop    eax
c001443f:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014444:	5a                   	pop    edx
c0014445:	68 50 68 02 c0       	push   0xc0026850
c001444a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014450:	e8 5f c4 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014455:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001445a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014460:	e8 06 01 01 00       	call   c002456b <CPU::readDR6()>
c0014465:	59                   	pop    ecx
c0014466:	5e                   	pop    esi
c0014467:	50                   	push   eax
c0014468:	53                   	push   ebx
c0014469:	e8 6c c4 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001446e:	5f                   	pop    edi
c001446f:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0014474:	5d                   	pop    ebp
c0014475:	68 58 68 02 c0       	push   0xc0026858
c001447a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014480:	e8 2f c4 ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0014485:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001448a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014490:	e8 e8 00 01 00       	call   c002457d <CPU::readDR7()>
c0014495:	5a                   	pop    edx
c0014496:	59                   	pop    ecx
c0014497:	50                   	push   eax
c0014498:	53                   	push   ebx
c0014499:	e8 3c c4 ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c001449e:	fa                   	cli    
c001449f:	f4                   	hlt    
c00144a0:	83 c4 10             	add    esp,0x10
c00144a3:	eb fe                	jmp    c00144a3 <displayDebugInfo(regs*)+0x415>

c00144a5 <x87EmulHandler(regs*, void*)>:
c00144a5:	53                   	push   ebx
c00144a6:	83 ec 08             	sub    esp,0x8
c00144a9:	a1 f4 95 02 c0       	mov    eax,ds:0xc00295f4
c00144ae:	85 c0                	test   eax,eax
c00144b0:	74 15                	je     c00144c7 <x87EmulHandler(regs*, void*)+0x22>
c00144b2:	83 ec 0c             	sub    esp,0xc
c00144b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b9:	ff d0                	call   eax
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	84 c0                	test   al,al
c00144c0:	74 2f                	je     c00144f1 <x87EmulHandler(regs*, void*)+0x4c>
c00144c2:	83 c4 08             	add    esp,0x8
c00144c5:	5b                   	pop    ebx
c00144c6:	c3                   	ret    
c00144c7:	83 ec 08             	sub    esp,0x8
c00144ca:	8b 1d 68 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029468
c00144d0:	6a 01                	push   0x1
c00144d2:	68 60 68 02 c0       	push   0xc0026860
c00144d7:	e8 b5 6e 00 00       	call   c001b391 <Thr::loadDLL(char const*, bool)>
c00144dc:	5a                   	pop    edx
c00144dd:	59                   	pop    ecx
c00144de:	53                   	push   ebx
c00144df:	50                   	push   eax
c00144e0:	e8 72 70 00 00       	call   c001b557 <Thr::executeDLL(unsigned long, void*)>
c00144e5:	a1 f4 95 02 c0       	mov    eax,ds:0xc00295f4
c00144ea:	83 c4 10             	add    esp,0x10
c00144ed:	85 c0                	test   eax,eax
c00144ef:	75 c1                	jne    c00144b2 <x87EmulHandler(regs*, void*)+0xd>
c00144f1:	83 ec 0c             	sub    esp,0xc
c00144f4:	68 7d 68 02 c0       	push   0xc002687d
c00144f9:	e8 53 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00144fe:	58                   	pop    eax
c00144ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014503:	e8 86 fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c0014508 <gpFault(regs*, void*)>:
c0014508:	53                   	push   ebx
c0014509:	83 ec 14             	sub    esp,0x14
c001450c:	c7 05 f0 95 02 c0 d5 c7 01 c0 	mov    DWORD PTR ds:0xc00295f0,0xc001c7d5
c0014516:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001451a:	53                   	push   ebx
c001451b:	e8 b5 82 00 00       	call   c001c7d5 <Vm::faultHandler(regs*)>
c0014520:	83 c4 10             	add    esp,0x10
c0014523:	84 c0                	test   al,al
c0014525:	74 05                	je     c001452c <gpFault(regs*, void*)+0x24>
c0014527:	83 c4 08             	add    esp,0x8
c001452a:	5b                   	pop    ebx
c001452b:	c3                   	ret    
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	68 7d 68 02 c0       	push   0xc002687d
c0014534:	e8 18 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014539:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001453c:	e8 4d fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c0014541 <pgFault(regs*, void*)>:
c0014541:	83 ec 18             	sub    esp,0x18
c0014544:	68 98 68 02 c0       	push   0xc0026898
c0014549:	e8 03 dd ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001454e:	58                   	pop    eax
c001454f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014553:	e8 36 fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c0014558 <otherISRHandler(regs*, void*)>:
c0014558:	53                   	push   ebx
c0014559:	83 ec 0c             	sub    esp,0xc
c001455c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014560:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014563:	50                   	push   eax
c0014564:	50                   	push   eax
c0014565:	68 a5 68 02 c0       	push   0xc00268a5
c001456a:	e8 e2 dc ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001456f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014572:	e8 17 fb ff ff       	call   c001408e <displayDebugInfo(regs*)>

c0014577 <opcodeFault(regs*, void*)>:
c0014577:	55                   	push   ebp
c0014578:	89 e5                	mov    ebp,esp
c001457a:	56                   	push   esi
c001457b:	53                   	push   ebx
c001457c:	83 ec 40             	sub    esp,0x40
c001457f:	e8 0a 33 00 00       	call   c001788e <thisCPU()>
c0014584:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001458a:	84 c0                	test   al,al
c001458c:	74 24                	je     c00145b2 <opcodeFault(regs*, void*)+0x3b>
c001458e:	83 ec 0c             	sub    esp,0xc
c0014591:	68 c4 68 02 c0       	push   0xc00268c4
c0014596:	e8 b6 dc ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001459b:	83 c4 10             	add    esp,0x10
c001459e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145a4:	8d 50 19             	lea    edx,[eax+0x19]
c00145a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145ad:	e9 77 05 00 00       	jmp    c0014b29 <opcodeFault(regs*, void*)+0x5b2>
c00145b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145b8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00145bb:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00145bf:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00145c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145c6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00145cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145cf:	8a 00                	mov    al,BYTE PTR [eax]
c00145d1:	3c f0                	cmp    al,0xf0
c00145d3:	75 17                	jne    c00145ec <opcodeFault(regs*, void*)+0x75>
c00145d5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145de:	8d 50 01             	lea    edx,[eax+0x1]
c00145e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145e7:	e9 da 00 00 00       	jmp    c00146c6 <opcodeFault(regs*, void*)+0x14f>
c00145ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ef:	8a 00                	mov    al,BYTE PTR [eax]
c00145f1:	3c f2                	cmp    al,0xf2
c00145f3:	74 09                	je     c00145fe <opcodeFault(regs*, void*)+0x87>
c00145f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f8:	8a 00                	mov    al,BYTE PTR [eax]
c00145fa:	3c f3                	cmp    al,0xf3
c00145fc:	75 1b                	jne    c0014619 <opcodeFault(regs*, void*)+0xa2>
c00145fe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014602:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014608:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001460b:	8d 50 01             	lea    edx,[eax+0x1]
c001460e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014611:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014614:	e9 ad 00 00 00       	jmp    c00146c6 <opcodeFault(regs*, void*)+0x14f>
c0014619:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001461c:	8a 00                	mov    al,BYTE PTR [eax]
c001461e:	3c 66                	cmp    al,0x66
c0014620:	75 1f                	jne    c0014641 <opcodeFault(regs*, void*)+0xca>
c0014622:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014626:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001462a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001462d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014630:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014633:	8d 50 01             	lea    edx,[eax+0x1]
c0014636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014639:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001463c:	e9 85 00 00 00       	jmp    c00146c6 <opcodeFault(regs*, void*)+0x14f>
c0014641:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014644:	8a 00                	mov    al,BYTE PTR [eax]
c0014646:	3c 67                	cmp    al,0x67
c0014648:	75 18                	jne    c0014662 <opcodeFault(regs*, void*)+0xeb>
c001464a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001464e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014654:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014657:	8d 50 01             	lea    edx,[eax+0x1]
c001465a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001465d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014660:	eb 64                	jmp    c00146c6 <opcodeFault(regs*, void*)+0x14f>
c0014662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014665:	8a 00                	mov    al,BYTE PTR [eax]
c0014667:	3c 2e                	cmp    al,0x2e
c0014669:	74 09                	je     c0014674 <opcodeFault(regs*, void*)+0xfd>
c001466b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001466e:	8a 00                	mov    al,BYTE PTR [eax]
c0014670:	3c 3e                	cmp    al,0x3e
c0014672:	75 18                	jne    c001468c <opcodeFault(regs*, void*)+0x115>
c0014674:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014678:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001467b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001467e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014681:	8d 50 01             	lea    edx,[eax+0x1]
c0014684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014687:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001468a:	eb 3a                	jmp    c00146c6 <opcodeFault(regs*, void*)+0x14f>
c001468c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001468f:	8a 00                	mov    al,BYTE PTR [eax]
c0014691:	3c 36                	cmp    al,0x36
c0014693:	74 1b                	je     c00146b0 <opcodeFault(regs*, void*)+0x139>
c0014695:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014698:	8a 00                	mov    al,BYTE PTR [eax]
c001469a:	3c 26                	cmp    al,0x26
c001469c:	74 12                	je     c00146b0 <opcodeFault(regs*, void*)+0x139>
c001469e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146a1:	8a 00                	mov    al,BYTE PTR [eax]
c00146a3:	3c 64                	cmp    al,0x64
c00146a5:	74 09                	je     c00146b0 <opcodeFault(regs*, void*)+0x139>
c00146a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146aa:	8a 00                	mov    al,BYTE PTR [eax]
c00146ac:	3c 65                	cmp    al,0x65
c00146ae:	75 16                	jne    c00146c6 <opcodeFault(regs*, void*)+0x14f>
c00146b0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00146b4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146bd:	8d 50 01             	lea    edx,[eax+0x1]
c00146c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146c3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146c9:	8a 00                	mov    al,BYTE PTR [eax]
c00146cb:	3c 0f                	cmp    al,0xf
c00146cd:	0f 85 ad 00 00 00    	jne    c0014780 <opcodeFault(regs*, void*)+0x209>
c00146d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146d6:	40                   	inc    eax
c00146d7:	8a 00                	mov    al,BYTE PTR [eax]
c00146d9:	3c c2                	cmp    al,0xc2
c00146db:	74 0e                	je     c00146eb <opcodeFault(regs*, void*)+0x174>
c00146dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146e0:	40                   	inc    eax
c00146e1:	8a 00                	mov    al,BYTE PTR [eax]
c00146e3:	3c c3                	cmp    al,0xc3
c00146e5:	0f 85 95 00 00 00    	jne    c0014780 <opcodeFault(regs*, void*)+0x209>
c00146eb:	83 ec 0c             	sub    esp,0xc
c00146ee:	68 e7 68 02 c0       	push   0xc00268e7
c00146f3:	e8 59 db ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00146f8:	83 c4 10             	add    esp,0x10
c00146fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014701:	8d 50 01             	lea    edx,[eax+0x1]
c0014704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014707:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001470a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001470d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014710:	8a 00                	mov    al,BYTE PTR [eax]
c0014712:	8d 50 fe             	lea    edx,[eax-0x2]
c0014715:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014718:	88 10                	mov    BYTE PTR [eax],dl
c001471a:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001471d:	50                   	push   eax
c001471e:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014721:	50                   	push   eax
c0014722:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014725:	50                   	push   eax
c0014726:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014729:	e8 e8 40 00 00       	call   c0018816 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001472e:	83 c4 10             	add    esp,0x10
c0014731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014734:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014737:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001473a:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001473d:	01 d0                	add    eax,edx
c001473f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014745:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014748:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001474b:	48                   	dec    eax
c001474c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001474f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014752:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014755:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001475b:	83 ec 04             	sub    esp,0x4
c001475e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014761:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014764:	50                   	push   eax
c0014765:	e8 ff b9 fe ff       	call   c0000169 <voodooXADD>
c001476a:	83 c4 10             	add    esp,0x10
c001476d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014770:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014773:	01 c2                	add    edx,eax
c0014775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014778:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001477b:	e9 a9 03 00 00       	jmp    c0014b29 <opcodeFault(regs*, void*)+0x5b2>
c0014780:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014783:	8a 00                	mov    al,BYTE PTR [eax]
c0014785:	3c 0f                	cmp    al,0xf
c0014787:	0f 85 8b 01 00 00    	jne    c0014918 <opcodeFault(regs*, void*)+0x3a1>
c001478d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014790:	40                   	inc    eax
c0014791:	8a 00                	mov    al,BYTE PTR [eax]
c0014793:	3c c7                	cmp    al,0xc7
c0014795:	0f 86 7d 01 00 00    	jbe    c0014918 <opcodeFault(regs*, void*)+0x3a1>
c001479b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001479e:	40                   	inc    eax
c001479f:	8a 00                	mov    al,BYTE PTR [eax]
c00147a1:	3c cf                	cmp    al,0xcf
c00147a3:	0f 87 6f 01 00 00    	ja     c0014918 <opcodeFault(regs*, void*)+0x3a1>
c00147a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00147ac:	40                   	inc    eax
c00147ad:	8a 00                	mov    al,BYTE PTR [eax]
c00147af:	83 c0 38             	add    eax,0x38
c00147b2:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00147b5:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00147b9:	75 0b                	jne    c00147c6 <opcodeFault(regs*, void*)+0x24f>
c00147bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147be:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00147c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147c4:	eb 75                	jmp    c001483b <opcodeFault(regs*, void*)+0x2c4>
c00147c6:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00147ca:	75 0b                	jne    c00147d7 <opcodeFault(regs*, void*)+0x260>
c00147cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147cf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00147d2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147d5:	eb 64                	jmp    c001483b <opcodeFault(regs*, void*)+0x2c4>
c00147d7:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147db:	75 0b                	jne    c00147e8 <opcodeFault(regs*, void*)+0x271>
c00147dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147e0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147e6:	eb 53                	jmp    c001483b <opcodeFault(regs*, void*)+0x2c4>
c00147e8:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147ec:	75 0b                	jne    c00147f9 <opcodeFault(regs*, void*)+0x282>
c00147ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147f1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147f4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147f7:	eb 42                	jmp    c001483b <opcodeFault(regs*, void*)+0x2c4>
c00147f9:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147fd:	75 0b                	jne    c001480a <opcodeFault(regs*, void*)+0x293>
c00147ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014802:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014805:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014808:	eb 31                	jmp    c001483b <opcodeFault(regs*, void*)+0x2c4>
c001480a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001480e:	75 0b                	jne    c001481b <opcodeFault(regs*, void*)+0x2a4>
c0014810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014813:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014816:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014819:	eb 20                	jmp    c001483b <opcodeFault(regs*, void*)+0x2c4>
c001481b:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001481f:	75 0b                	jne    c001482c <opcodeFault(regs*, void*)+0x2b5>
c0014821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014824:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014827:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001482a:	eb 0f                	jmp    c001483b <opcodeFault(regs*, void*)+0x2c4>
c001482c:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014830:	75 09                	jne    c001483b <opcodeFault(regs*, void*)+0x2c4>
c0014832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014835:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014838:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001483b:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001483f:	74 10                	je     c0014851 <opcodeFault(regs*, void*)+0x2da>
c0014841:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014848:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001484f:	eb 2d                	jmp    c001487e <opcodeFault(regs*, void*)+0x307>
c0014851:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014854:	c1 e0 18             	shl    eax,0x18
c0014857:	89 c2                	mov    edx,eax
c0014859:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001485c:	c1 e0 08             	shl    eax,0x8
c001485f:	25 00 00 ff 00       	and    eax,0xff0000
c0014864:	09 c2                	or     edx,eax
c0014866:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014869:	c1 e8 08             	shr    eax,0x8
c001486c:	25 00 ff 00 00       	and    eax,0xff00
c0014871:	09 c2                	or     edx,eax
c0014873:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014876:	c1 e8 18             	shr    eax,0x18
c0014879:	09 d0                	or     eax,edx
c001487b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001487e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014882:	75 0b                	jne    c001488f <opcodeFault(regs*, void*)+0x318>
c0014884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014887:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001488a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001488d:	eb 75                	jmp    c0014904 <opcodeFault(regs*, void*)+0x38d>
c001488f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014893:	75 0b                	jne    c00148a0 <opcodeFault(regs*, void*)+0x329>
c0014895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014898:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001489b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001489e:	eb 64                	jmp    c0014904 <opcodeFault(regs*, void*)+0x38d>
c00148a0:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00148a4:	75 0b                	jne    c00148b1 <opcodeFault(regs*, void*)+0x33a>
c00148a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ac:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00148af:	eb 53                	jmp    c0014904 <opcodeFault(regs*, void*)+0x38d>
c00148b1:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00148b5:	75 0b                	jne    c00148c2 <opcodeFault(regs*, void*)+0x34b>
c00148b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148bd:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00148c0:	eb 42                	jmp    c0014904 <opcodeFault(regs*, void*)+0x38d>
c00148c2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00148c6:	75 0b                	jne    c00148d3 <opcodeFault(regs*, void*)+0x35c>
c00148c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148cb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148ce:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00148d1:	eb 31                	jmp    c0014904 <opcodeFault(regs*, void*)+0x38d>
c00148d3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148d7:	75 0b                	jne    c00148e4 <opcodeFault(regs*, void*)+0x36d>
c00148d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148df:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148e2:	eb 20                	jmp    c0014904 <opcodeFault(regs*, void*)+0x38d>
c00148e4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148e8:	75 0b                	jne    c00148f5 <opcodeFault(regs*, void*)+0x37e>
c00148ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148ed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148f0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148f3:	eb 0f                	jmp    c0014904 <opcodeFault(regs*, void*)+0x38d>
c00148f5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148f9:	75 09                	jne    c0014904 <opcodeFault(regs*, void*)+0x38d>
c00148fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148fe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014901:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014907:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001490a:	8d 50 02             	lea    edx,[eax+0x2]
c001490d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014910:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014913:	e9 11 02 00 00       	jmp    c0014b29 <opcodeFault(regs*, void*)+0x5b2>
c0014918:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001491b:	8a 00                	mov    al,BYTE PTR [eax]
c001491d:	3c 0f                	cmp    al,0xf
c001491f:	0f 85 76 01 00 00    	jne    c0014a9b <opcodeFault(regs*, void*)+0x524>
c0014925:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014928:	40                   	inc    eax
c0014929:	8a 00                	mov    al,BYTE PTR [eax]
c001492b:	3c c7                	cmp    al,0xc7
c001492d:	0f 85 68 01 00 00    	jne    c0014a9b <opcodeFault(regs*, void*)+0x524>
c0014933:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014939:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001493c:	8d 50 01             	lea    edx,[eax+0x1]
c001493f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014942:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014945:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014948:	50                   	push   eax
c0014949:	8d 45 bb             	lea    eax,[ebp-0x45]
c001494c:	50                   	push   eax
c001494d:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014950:	50                   	push   eax
c0014951:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014954:	e8 bd 3e 00 00       	call   c0018816 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001495f:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014962:	83 f0 01             	xor    eax,0x1
c0014965:	84 c0                	test   al,al
c0014967:	0f 84 2e 01 00 00    	je     c0014a9b <opcodeFault(regs*, void*)+0x524>
c001496d:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014970:	3c 01                	cmp    al,0x1
c0014972:	0f 85 23 01 00 00    	jne    c0014a9b <opcodeFault(regs*, void*)+0x524>
c0014978:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001497b:	83 f0 01             	xor    eax,0x1
c001497e:	84 c0                	test   al,al
c0014980:	0f 84 15 01 00 00    	je     c0014a9b <opcodeFault(regs*, void*)+0x524>
c0014986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014989:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001498c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001498f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014996:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014999:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001499c:	89 c2                	mov    edx,eax
c001499e:	b8 00 00 00 00       	mov    eax,0x0
c00149a3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00149a6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00149a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ac:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00149af:	ba 00 00 00 00       	mov    edx,0x0
c00149b4:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00149b7:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00149ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149bd:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00149c0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149c3:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00149ca:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149cd:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149d0:	89 c2                	mov    edx,eax
c00149d2:	b8 00 00 00 00       	mov    eax,0x0
c00149d7:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149da:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149e3:	ba 00 00 00 00       	mov    edx,0x0
c00149e8:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149eb:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149ee:	e8 6f 6f 00 00       	call   c001b962 <lockScheduler()>
c00149f3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00149fb:	89 c1                	mov    ecx,eax
c00149fd:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014a00:	89 cb                	mov    ebx,ecx
c0014a02:	89 d0                	mov    eax,edx
c0014a04:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014a07:	89 c6                	mov    esi,eax
c0014a09:	89 f0                	mov    eax,esi
c0014a0b:	09 d8                	or     eax,ebx
c0014a0d:	85 c0                	test   eax,eax
c0014a0f:	75 21                	jne    c0014a32 <opcodeFault(regs*, void*)+0x4bb>
c0014a11:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014a14:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014a17:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014a1a:	89 01                	mov    DWORD PTR [ecx],eax
c0014a1c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a25:	83 c8 40             	or     eax,0x40
c0014a28:	89 c2                	mov    edx,eax
c0014a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a30:	eb 3e                	jmp    c0014a70 <opcodeFault(regs*, void*)+0x4f9>
c0014a32:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a35:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a3a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a3d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a40:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a46:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a49:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a4c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a4f:	89 d0                	mov    eax,edx
c0014a51:	31 d2                	xor    edx,edx
c0014a53:	89 c3                	mov    ebx,eax
c0014a55:	89 d6                	mov    esi,edx
c0014a57:	89 da                	mov    edx,ebx
c0014a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a5c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a65:	83 e0 bf             	and    eax,0xffffffbf
c0014a68:	89 c2                	mov    edx,eax
c0014a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a70:	e8 ef 6e 00 00       	call   c001b964 <unlockScheduler()>
c0014a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a7b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a7e:	01 c2                	add    edx,eax
c0014a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a83:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a86:	83 ec 0c             	sub    esp,0xc
c0014a89:	68 f6 68 02 c0       	push   0xc00268f6
c0014a8e:	e8 be d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014a93:	83 c4 10             	add    esp,0x10
c0014a96:	e9 8e 00 00 00       	jmp    c0014b29 <opcodeFault(regs*, void*)+0x5b2>
c0014a9b:	83 ec 0c             	sub    esp,0xc
c0014a9e:	68 09 69 02 c0       	push   0xc0026909
c0014aa3:	e8 a9 d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014aa8:	83 c4 10             	add    esp,0x10
c0014aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aae:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ab7:	c1 e0 04             	shl    eax,0x4
c0014aba:	01 d0                	add    eax,edx
c0014abc:	83 c0 03             	add    eax,0x3
c0014abf:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac1:	0f b6 d8             	movzx  ebx,al
c0014ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014acd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ad0:	c1 e0 04             	shl    eax,0x4
c0014ad3:	01 d0                	add    eax,edx
c0014ad5:	83 c0 02             	add    eax,0x2
c0014ad8:	8a 00                	mov    al,BYTE PTR [eax]
c0014ada:	0f b6 c8             	movzx  ecx,al
c0014add:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ae9:	c1 e0 04             	shl    eax,0x4
c0014aec:	01 d0                	add    eax,edx
c0014aee:	40                   	inc    eax
c0014aef:	8a 00                	mov    al,BYTE PTR [eax]
c0014af1:	0f b6 d0             	movzx  edx,al
c0014af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b00:	c1 e0 04             	shl    eax,0x4
c0014b03:	01 f0                	add    eax,esi
c0014b05:	8a 00                	mov    al,BYTE PTR [eax]
c0014b07:	0f b6 c0             	movzx  eax,al
c0014b0a:	83 ec 0c             	sub    esp,0xc
c0014b0d:	53                   	push   ebx
c0014b0e:	51                   	push   ecx
c0014b0f:	52                   	push   edx
c0014b10:	50                   	push   eax
c0014b11:	68 1c 69 02 c0       	push   0xc002691c
c0014b16:	e8 36 d7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014b1b:	83 c4 20             	add    esp,0x20
c0014b1e:	83 ec 0c             	sub    esp,0xc
c0014b21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b24:	e8 65 f5 ff ff       	call   c001408e <displayDebugInfo(regs*)>
c0014b29:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014b2c:	5b                   	pop    ebx
c0014b2d:	5e                   	pop    esi
c0014b2e:	5d                   	pop    ebp
c0014b2f:	c3                   	ret    

c0014b30 <displayProgramFault(char const*)>:
c0014b30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b35:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b38:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b3e:	85 c0                	test   eax,eax
c0014b40:	74 15                	je     c0014b57 <displayProgramFault(char const*)+0x27>
c0014b42:	83 ec 0c             	sub    esp,0xc
c0014b45:	6a 04                	push   0x4
c0014b47:	6a 0f                	push   0xf
c0014b49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b4d:	50                   	push   eax
c0014b4e:	e8 23 ba ff ff       	call   c0010576 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b53:	83 c4 1c             	add    esp,0x1c
c0014b56:	c3                   	ret    
c0014b57:	c3                   	ret    

c0014b58 <setupInterruptController()>:
c0014b58:	55                   	push   ebp
c0014b59:	89 e5                	mov    ebp,esp
c0014b5b:	53                   	push   ebx
c0014b5c:	83 ec 14             	sub    esp,0x14
c0014b5f:	e8 27 2d 00 00       	call   c001788b <getCPUNumber()>
c0014b64:	85 c0                	test   eax,eax
c0014b66:	0f 95 c0             	setne  al
c0014b69:	84 c0                	test   al,al
c0014b6b:	74 56                	je     c0014bc3 <setupInterruptController()+0x6b>
c0014b6d:	83 ec 0c             	sub    esp,0xc
c0014b70:	68 58 21 00 00       	push   0x2158
c0014b75:	e8 e8 d5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014b7a:	83 c4 10             	add    esp,0x10
c0014b7d:	89 c3                	mov    ebx,eax
c0014b7f:	83 ec 0c             	sub    esp,0xc
c0014b82:	53                   	push   ebx
c0014b83:	e8 22 c9 00 00       	call   c00214aa <APIC::APIC()>
c0014b88:	83 c4 10             	add    esp,0x10
c0014b8b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b8e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b96:	83 c0 08             	add    eax,0x8
c0014b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b9b:	6a 00                	push   0x0
c0014b9d:	6a 00                	push   0x0
c0014b9f:	6a 00                	push   0x0
c0014ba1:	52                   	push   edx
c0014ba2:	ff d0                	call   eax
c0014ba4:	83 c4 10             	add    esp,0x10
c0014ba7:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0014bac:	83 ec 08             	sub    esp,0x8
c0014baf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014bb2:	50                   	push   eax
c0014bb3:	e8 a4 ea ff ff       	call   c001365c <Device::addChild(Device*)>
c0014bb8:	83 c4 10             	add    esp,0x10
c0014bbb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014bbe:	e9 48 03 00 00       	jmp    c0014f0b <setupInterruptController()+0x3b3>
c0014bc3:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0014bc8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014bce:	83 e0 01             	and    eax,0x1
c0014bd1:	84 c0                	test   al,al
c0014bd3:	0f 95 c0             	setne  al
c0014bd6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014bd9:	83 ec 0c             	sub    esp,0xc
c0014bdc:	68 58 21 00 00       	push   0x2158
c0014be1:	e8 7c d5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	89 c3                	mov    ebx,eax
c0014beb:	83 ec 0c             	sub    esp,0xc
c0014bee:	53                   	push   ebx
c0014bef:	e8 78 cd 00 00       	call   c002196c <PIC::PIC()>
c0014bf4:	83 c4 10             	add    esp,0x10
c0014bf7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bfa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c02:	83 c0 08             	add    eax,0x8
c0014c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c07:	6a 00                	push   0x0
c0014c09:	6a 00                	push   0x0
c0014c0b:	6a 00                	push   0x0
c0014c0d:	52                   	push   edx
c0014c0e:	ff d0                	call   eax
c0014c10:	83 c4 10             	add    esp,0x10
c0014c13:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014c17:	74 6e                	je     c0014c87 <setupInterruptController()+0x12f>
c0014c19:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c21:	83 c0 0c             	add    eax,0xc
c0014c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c26:	6a 00                	push   0x0
c0014c28:	6a 00                	push   0x0
c0014c2a:	6a 00                	push   0x0
c0014c2c:	52                   	push   edx
c0014c2d:	ff d0                	call   eax
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c36:	74 15                	je     c0014c4d <setupInterruptController()+0xf5>
c0014c38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c3d:	83 c0 04             	add    eax,0x4
c0014c40:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c42:	83 ec 0c             	sub    esp,0xc
c0014c45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c48:	ff d0                	call   eax
c0014c4a:	83 c4 10             	add    esp,0x10
c0014c4d:	83 ec 0c             	sub    esp,0xc
c0014c50:	68 58 21 00 00       	push   0x2158
c0014c55:	e8 08 d5 ff ff       	call   c0012162 <operator new(unsigned long)>
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	89 c3                	mov    ebx,eax
c0014c5f:	83 ec 0c             	sub    esp,0xc
c0014c62:	53                   	push   ebx
c0014c63:	e8 42 c8 00 00       	call   c00214aa <APIC::APIC()>
c0014c68:	83 c4 10             	add    esp,0x10
c0014c6b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c6e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c76:	83 c0 08             	add    eax,0x8
c0014c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c7b:	6a 00                	push   0x0
c0014c7d:	6a 00                	push   0x0
c0014c7f:	6a 00                	push   0x0
c0014c81:	52                   	push   edx
c0014c82:	ff d0                	call   eax
c0014c84:	83 c4 10             	add    esp,0x10
c0014c87:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0014c8c:	83 ec 08             	sub    esp,0x8
c0014c8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c92:	50                   	push   eax
c0014c93:	e8 c4 e9 ff ff       	call   c001365c <Device::addChild(Device*)>
c0014c98:	83 c4 10             	add    esp,0x10
c0014c9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca0:	83 c0 24             	add    eax,0x24
c0014ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca5:	6a 00                	push   0x0
c0014ca7:	68 58 45 01 c0       	push   0xc0014558
c0014cac:	6a 00                	push   0x0
c0014cae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cb1:	ff d0                	call   eax
c0014cb3:	83 c4 10             	add    esp,0x10
c0014cb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cbb:	83 c0 24             	add    eax,0x24
c0014cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cc0:	6a 00                	push   0x0
c0014cc2:	68 58 45 01 c0       	push   0xc0014558
c0014cc7:	6a 01                	push   0x1
c0014cc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ccc:	ff d0                	call   eax
c0014cce:	83 c4 10             	add    esp,0x10
c0014cd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd6:	83 c0 24             	add    eax,0x24
c0014cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cdb:	6a 00                	push   0x0
c0014cdd:	68 f1 3e 01 c0       	push   0xc0013ef1
c0014ce2:	6a 02                	push   0x2
c0014ce4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ce7:	ff d0                	call   eax
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf1:	83 c0 24             	add    eax,0x24
c0014cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf6:	6a 00                	push   0x0
c0014cf8:	68 58 45 01 c0       	push   0xc0014558
c0014cfd:	6a 03                	push   0x3
c0014cff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d02:	ff d0                	call   eax
c0014d04:	83 c4 10             	add    esp,0x10
c0014d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d0c:	83 c0 24             	add    eax,0x24
c0014d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d11:	6a 00                	push   0x0
c0014d13:	68 58 45 01 c0       	push   0xc0014558
c0014d18:	6a 04                	push   0x4
c0014d1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d1d:	ff d0                	call   eax
c0014d1f:	83 c4 10             	add    esp,0x10
c0014d22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d27:	83 c0 24             	add    eax,0x24
c0014d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d2c:	6a 00                	push   0x0
c0014d2e:	68 58 45 01 c0       	push   0xc0014558
c0014d33:	6a 05                	push   0x5
c0014d35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d38:	ff d0                	call   eax
c0014d3a:	83 c4 10             	add    esp,0x10
c0014d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d42:	83 c0 24             	add    eax,0x24
c0014d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d47:	6a 00                	push   0x0
c0014d49:	68 77 45 01 c0       	push   0xc0014577
c0014d4e:	6a 06                	push   0x6
c0014d50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d53:	ff d0                	call   eax
c0014d55:	83 c4 10             	add    esp,0x10
c0014d58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d5d:	83 c0 24             	add    eax,0x24
c0014d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d62:	6a 00                	push   0x0
c0014d64:	68 a5 44 01 c0       	push   0xc00144a5
c0014d69:	6a 07                	push   0x7
c0014d6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d6e:	ff d0                	call   eax
c0014d70:	83 c4 10             	add    esp,0x10
c0014d73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d78:	83 c0 24             	add    eax,0x24
c0014d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d7d:	6a 00                	push   0x0
c0014d7f:	68 0c 3d 01 c0       	push   0xc0013d0c
c0014d84:	6a 08                	push   0x8
c0014d86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d89:	ff d0                	call   eax
c0014d8b:	83 c4 10             	add    esp,0x10
c0014d8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d93:	83 c0 24             	add    eax,0x24
c0014d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d98:	6a 00                	push   0x0
c0014d9a:	68 58 45 01 c0       	push   0xc0014558
c0014d9f:	6a 09                	push   0x9
c0014da1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014da4:	ff d0                	call   eax
c0014da6:	83 c4 10             	add    esp,0x10
c0014da9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dae:	83 c0 24             	add    eax,0x24
c0014db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db3:	6a 00                	push   0x0
c0014db5:	68 58 45 01 c0       	push   0xc0014558
c0014dba:	6a 0a                	push   0xa
c0014dbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dbf:	ff d0                	call   eax
c0014dc1:	83 c4 10             	add    esp,0x10
c0014dc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc9:	83 c0 24             	add    eax,0x24
c0014dcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dce:	6a 00                	push   0x0
c0014dd0:	68 58 45 01 c0       	push   0xc0014558
c0014dd5:	6a 0b                	push   0xb
c0014dd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dda:	ff d0                	call   eax
c0014ddc:	83 c4 10             	add    esp,0x10
c0014ddf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de4:	83 c0 24             	add    eax,0x24
c0014de7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de9:	6a 00                	push   0x0
c0014deb:	68 58 45 01 c0       	push   0xc0014558
c0014df0:	6a 0c                	push   0xc
c0014df2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014df5:	ff d0                	call   eax
c0014df7:	83 c4 10             	add    esp,0x10
c0014dfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dff:	83 c0 24             	add    eax,0x24
c0014e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e04:	6a 00                	push   0x0
c0014e06:	68 08 45 01 c0       	push   0xc0014508
c0014e0b:	6a 0d                	push   0xd
c0014e0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e10:	ff d0                	call   eax
c0014e12:	83 c4 10             	add    esp,0x10
c0014e15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e18:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1a:	83 c0 24             	add    eax,0x24
c0014e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1f:	6a 00                	push   0x0
c0014e21:	68 41 45 01 c0       	push   0xc0014541
c0014e26:	6a 0e                	push   0xe
c0014e28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e2b:	ff d0                	call   eax
c0014e2d:	83 c4 10             	add    esp,0x10
c0014e30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e33:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e35:	83 c0 24             	add    eax,0x24
c0014e38:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e3a:	6a 00                	push   0x0
c0014e3c:	68 58 45 01 c0       	push   0xc0014558
c0014e41:	6a 0f                	push   0xf
c0014e43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e46:	ff d0                	call   eax
c0014e48:	83 c4 10             	add    esp,0x10
c0014e4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e50:	83 c0 24             	add    eax,0x24
c0014e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e55:	6a 00                	push   0x0
c0014e57:	68 58 45 01 c0       	push   0xc0014558
c0014e5c:	6a 10                	push   0x10
c0014e5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e61:	ff d0                	call   eax
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e6b:	83 c0 24             	add    eax,0x24
c0014e6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e70:	6a 00                	push   0x0
c0014e72:	68 58 45 01 c0       	push   0xc0014558
c0014e77:	6a 11                	push   0x11
c0014e79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e7c:	ff d0                	call   eax
c0014e7e:	83 c4 10             	add    esp,0x10
c0014e81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e84:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e86:	83 c0 24             	add    eax,0x24
c0014e89:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e8b:	6a 00                	push   0x0
c0014e8d:	68 58 45 01 c0       	push   0xc0014558
c0014e92:	6a 12                	push   0x12
c0014e94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e97:	ff d0                	call   eax
c0014e99:	83 c4 10             	add    esp,0x10
c0014e9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea1:	83 c0 24             	add    eax,0x24
c0014ea4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea6:	6a 00                	push   0x0
c0014ea8:	68 58 45 01 c0       	push   0xc0014558
c0014ead:	6a 13                	push   0x13
c0014eaf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eb2:	ff d0                	call   eax
c0014eb4:	83 c4 10             	add    esp,0x10
c0014eb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eba:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ebc:	83 c0 24             	add    eax,0x24
c0014ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ec1:	6a 00                	push   0x0
c0014ec3:	68 58 45 01 c0       	push   0xc0014558
c0014ec8:	6a 14                	push   0x14
c0014eca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ecd:	ff d0                	call   eax
c0014ecf:	83 c4 10             	add    esp,0x10
c0014ed2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed7:	83 c0 24             	add    eax,0x24
c0014eda:	8b 00                	mov    eax,DWORD PTR [eax]
c0014edc:	6a 00                	push   0x0
c0014ede:	68 58 45 01 c0       	push   0xc0014558
c0014ee3:	6a 1e                	push   0x1e
c0014ee5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ee8:	ff d0                	call   eax
c0014eea:	83 c4 10             	add    esp,0x10
c0014eed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ef2:	83 c0 24             	add    eax,0x24
c0014ef5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ef7:	6a 00                	push   0x0
c0014ef9:	68 78 a3 01 c0       	push   0xc001a378
c0014efe:	6a 60                	push   0x60
c0014f00:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014f03:	ff d0                	call   eax
c0014f05:	83 c4 10             	add    esp,0x10
c0014f08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f0e:	c9                   	leave  
c0014f0f:	c3                   	ret    

c0014f10 <InterruptController::convertLegacyIRQNumber(int)>:
c0014f10:	55                   	push   ebp
c0014f11:	89 e5                	mov    ebp,esp
c0014f13:	83 ec 08             	sub    esp,0x8
c0014f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f19:	83 ec 0c             	sub    esp,0xc
c0014f1c:	50                   	push   eax
c0014f1d:	e8 1c ea ff ff       	call   c001393e <Device::getName()>
c0014f22:	83 c4 10             	add    esp,0x10
c0014f25:	8a 00                	mov    al,BYTE PTR [eax]
c0014f27:	3c 41                	cmp    al,0x41
c0014f29:	0f 94 c0             	sete   al
c0014f2c:	84 c0                	test   al,al
c0014f2e:	74 28                	je     c0014f58 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f30:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f34:	7f 12                	jg     c0014f48 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f39:	05 40 87 02 c0       	add    eax,0xc0028740
c0014f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0014f40:	0f b6 c0             	movzx  eax,al
c0014f43:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f46:	eb 10                	jmp    c0014f58 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f48:	83 ec 0c             	sub    esp,0xc
c0014f4b:	68 94 66 02 c0       	push   0xc0026694
c0014f50:	e8 b9 3a 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f5b:	c9                   	leave  
c0014f5c:	c3                   	ret    
c0014f5d:	90                   	nop

c0014f5e <startGUI(void*)>:
c0014f5e:	55                   	push   ebp
c0014f5f:	89 e5                	mov    ebp,esp
c0014f61:	53                   	push   ebx
c0014f62:	83 ec 04             	sub    esp,0x4
c0014f65:	e8 fa 69 00 00       	call   c001b964 <unlockScheduler()>
c0014f6a:	e8 de 69 00 00       	call   c001b94d <getIRQNestingLevel()>
c0014f6f:	83 ec 08             	sub    esp,0x8
c0014f72:	50                   	push   eax
c0014f73:	68 84 69 02 c0       	push   0xc0026984
c0014f78:	e8 d4 d2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0014f7d:	83 c4 10             	add    esp,0x10
c0014f80:	8b 1d 68 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029468
c0014f86:	83 ec 08             	sub    esp,0x8
c0014f89:	6a 01                	push   0x1
c0014f8b:	68 9e 69 02 c0       	push   0xc002699e
c0014f90:	e8 fc 63 00 00       	call   c001b391 <Thr::loadDLL(char const*, bool)>
c0014f95:	83 c4 10             	add    esp,0x10
c0014f98:	83 ec 08             	sub    esp,0x8
c0014f9b:	53                   	push   ebx
c0014f9c:	50                   	push   eax
c0014f9d:	e8 b5 65 00 00       	call   c001b557 <Thr::executeDLL(unsigned long, void*)>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	8b 1d 68 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029468
c0014fab:	83 ec 08             	sub    esp,0x8
c0014fae:	6a 01                	push   0x1
c0014fb0:	68 b8 69 02 c0       	push   0xc00269b8
c0014fb5:	e8 d7 63 00 00       	call   c001b391 <Thr::loadDLL(char const*, bool)>
c0014fba:	83 c4 10             	add    esp,0x10
c0014fbd:	83 ec 08             	sub    esp,0x8
c0014fc0:	53                   	push   ebx
c0014fc1:	50                   	push   eax
c0014fc2:	e8 90 65 00 00       	call   c001b557 <Thr::executeDLL(unsigned long, void*)>
c0014fc7:	83 c4 10             	add    esp,0x10
c0014fca:	90                   	nop
c0014fcb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014fce:	c9                   	leave  
c0014fcf:	c3                   	ret    

c0014fd0 <sendKeyToTerminal(unsigned char)>:
c0014fd0:	55                   	push   ebp
c0014fd1:	89 e5                	mov    ebp,esp
c0014fd3:	83 ec 28             	sub    esp,0x28
c0014fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fdc:	a1 24 95 02 c0       	mov    eax,ds:0xc0029524
c0014fe1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fe5:	83 ec 08             	sub    esp,0x8
c0014fe8:	52                   	push   edx
c0014fe9:	50                   	push   eax
c0014fea:	e8 c3 ba ff ff       	call   c0010ab2 <VgaText::receiveKey(unsigned char)>
c0014fef:	83 c4 10             	add    esp,0x10
c0014ff2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014ff6:	75 41                	jne    c0015039 <sendKeyToTerminal(unsigned char)+0x69>
c0014ff8:	e8 8c 69 00 00       	call   c001b989 <lockStuff()>
c0014ffd:	a1 00 96 02 c0       	mov    eax,ds:0xc0029600
c0015002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015005:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c001500f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015013:	74 1f                	je     c0015034 <sendKeyToTerminal(unsigned char)+0x64>
c0015015:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015018:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001501b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001501e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015021:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015024:	83 ec 0c             	sub    esp,0xc
c0015027:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001502a:	e8 43 6f 00 00       	call   c001bf72 <unblockTask(ThreadControlBlock*)>
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	eb db                	jmp    c001500f <sendKeyToTerminal(unsigned char)+0x3f>
c0015034:	e8 e2 6c 00 00       	call   c001bd1b <unlockStuff()>
c0015039:	90                   	nop
c001503a:	c9                   	leave  
c001503b:	c3                   	ret    

c001503c <sendKeyboardToken(KeyboardToken)>:
c001503c:	55                   	push   ebp
c001503d:	89 e5                	mov    ebp,esp
c001503f:	83 ec 18             	sub    esp,0x18
c0015042:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015048:	0f b7 c0             	movzx  eax,ax
c001504b:	83 f2 01             	xor    edx,0x1
c001504e:	88 90 20 96 02 c0    	mov    BYTE PTR [eax-0x3ffd69e0],dl
c0015054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015057:	66 3d 03 02          	cmp    ax,0x203
c001505b:	75 07                	jne    c0015064 <sendKeyboardToken(KeyboardToken)+0x28>
c001505d:	a0 20 97 02 c0       	mov    al,ds:0xc0029720
c0015062:	84 c0                	test   al,al
c0015064:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015068:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001506b:	a0 28 9a 02 c0       	mov    al,ds:0xc0029a28
c0015070:	38 c2                	cmp    dl,al
c0015072:	74 1c                	je     c0015090 <sendKeyboardToken(KeyboardToken)+0x54>
c0015074:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015077:	a2 28 9a 02 c0       	mov    ds:0xc0029a28,al
c001507c:	a0 28 9a 02 c0       	mov    al,ds:0xc0029a28
c0015081:	0f b6 c0             	movzx  eax,al
c0015084:	83 ec 0c             	sub    esp,0xc
c0015087:	50                   	push   eax
c0015088:	e8 93 ac ff ff       	call   c000fd20 <setTerminalScrollLock(bool)>
c001508d:	83 c4 10             	add    esp,0x10
c0015090:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015093:	84 c0                	test   al,al
c0015095:	0f 84 ae 00 00 00    	je     c0015149 <sendKeyboardToken(KeyboardToken)+0x10d>
c001509b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509e:	66 3d 10 03          	cmp    ax,0x310
c00150a2:	75 06                	jne    c00150aa <sendKeyboardToken(KeyboardToken)+0x6e>
c00150a4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00150aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ad:	66 3d 11 03          	cmp    ax,0x311
c00150b1:	75 06                	jne    c00150b9 <sendKeyboardToken(KeyboardToken)+0x7d>
c00150b3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00150b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bc:	66 3d 12 03          	cmp    ax,0x312
c00150c0:	75 06                	jne    c00150c8 <sendKeyboardToken(KeyboardToken)+0x8c>
c00150c2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00150c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cb:	66 3d 13 03          	cmp    ax,0x313
c00150cf:	75 06                	jne    c00150d7 <sendKeyboardToken(KeyboardToken)+0x9b>
c00150d1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150da:	66 3d 14 03          	cmp    ax,0x314
c00150de:	75 06                	jne    c00150e6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00150e0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e9:	66 3d 15 03          	cmp    ax,0x315
c00150ed:	75 06                	jne    c00150f5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00150ef:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f8:	66 3d 16 03          	cmp    ax,0x316
c00150fc:	75 06                	jne    c0015104 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150fe:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015107:	66 3d 17 03          	cmp    ax,0x317
c001510b:	75 06                	jne    c0015113 <sendKeyboardToken(KeyboardToken)+0xd7>
c001510d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015116:	66 3d 18 03          	cmp    ax,0x318
c001511a:	75 06                	jne    c0015122 <sendKeyboardToken(KeyboardToken)+0xe6>
c001511c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015125:	66 3d 19 03          	cmp    ax,0x319
c0015129:	75 06                	jne    c0015131 <sendKeyboardToken(KeyboardToken)+0xf5>
c001512b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015134:	66 3d 1a 03          	cmp    ax,0x31a
c0015138:	0f 85 c9 00 00 00    	jne    c0015207 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001513e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015144:	e9 be 00 00 00       	jmp    c0015207 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514c:	66 3d 10 03          	cmp    ax,0x310
c0015150:	75 0a                	jne    c001515c <sendKeyboardToken(KeyboardToken)+0x120>
c0015152:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015158:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001515c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515f:	66 3d 11 03          	cmp    ax,0x311
c0015163:	75 0a                	jne    c001516f <sendKeyboardToken(KeyboardToken)+0x133>
c0015165:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001516b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001516f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015172:	66 3d 12 03          	cmp    ax,0x312
c0015176:	75 0a                	jne    c0015182 <sendKeyboardToken(KeyboardToken)+0x146>
c0015178:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001517e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015185:	66 3d 13 03          	cmp    ax,0x313
c0015189:	75 0a                	jne    c0015195 <sendKeyboardToken(KeyboardToken)+0x159>
c001518b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015191:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015198:	66 3d 14 03          	cmp    ax,0x314
c001519c:	75 0a                	jne    c00151a8 <sendKeyboardToken(KeyboardToken)+0x16c>
c001519e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00151a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ab:	66 3d 15 03          	cmp    ax,0x315
c00151af:	75 0a                	jne    c00151bb <sendKeyboardToken(KeyboardToken)+0x17f>
c00151b1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00151b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151be:	66 3d 16 03          	cmp    ax,0x316
c00151c2:	75 0a                	jne    c00151ce <sendKeyboardToken(KeyboardToken)+0x192>
c00151c4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00151ca:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d1:	66 3d 17 03          	cmp    ax,0x317
c00151d5:	75 0a                	jne    c00151e1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151d7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e4:	66 3d 18 03          	cmp    ax,0x318
c00151e8:	75 0a                	jne    c00151f4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151ea:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151f0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f7:	66 3d 19 03          	cmp    ax,0x319
c00151fb:	75 0a                	jne    c0015207 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151fd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015203:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520a:	66 3d 00 02          	cmp    ax,0x200
c001520e:	75 2a                	jne    c001523a <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015210:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c0015215:	83 f0 01             	xor    eax,0x1
c0015218:	84 c0                	test   al,al
c001521a:	74 1e                	je     c001523a <sendKeyboardToken(KeyboardToken)+0x1fe>
c001521c:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0015221:	6a 01                	push   0x1
c0015223:	6a 00                	push   0x0
c0015225:	68 5e 4f 01 c0       	push   0xc0014f5e
c001522a:	50                   	push   eax
c001522b:	e8 5c 68 00 00       	call   c001ba8c <Process::createThread(void (*)(void*), void*, int)>
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c001523a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523d:	66 3d 1d 03          	cmp    ax,0x31d
c0015241:	75 06                	jne    c0015249 <sendKeyboardToken(KeyboardToken)+0x20d>
c0015243:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524c:	66 3d 1c 03          	cmp    ax,0x31c
c0015250:	75 06                	jne    c0015258 <sendKeyboardToken(KeyboardToken)+0x21c>
c0015252:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525b:	66 3d 1b 03          	cmp    ax,0x31b
c001525f:	75 06                	jne    c0015267 <sendKeyboardToken(KeyboardToken)+0x22b>
c0015261:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526a:	66 3d 1e 03          	cmp    ax,0x31e
c001526e:	75 06                	jne    c0015276 <sendKeyboardToken(KeyboardToken)+0x23a>
c0015270:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015279:	66 3d 1f 03          	cmp    ax,0x31f
c001527d:	75 06                	jne    c0015285 <sendKeyboardToken(KeyboardToken)+0x249>
c001527f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015288:	66 3d 1a 03          	cmp    ax,0x31a
c001528c:	75 06                	jne    c0015294 <sendKeyboardToken(KeyboardToken)+0x258>
c001528e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015294:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015298:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001529b:	83 f0 01             	xor    eax,0x1
c001529e:	84 c0                	test   al,al
c00152a0:	74 77                	je     c0015319 <sendKeyboardToken(KeyboardToken)+0x2dd>
c00152a2:	a0 21 97 02 c0       	mov    al,ds:0xc0029721
c00152a7:	84 c0                	test   al,al
c00152a9:	74 41                	je     c00152ec <sendKeyboardToken(KeyboardToken)+0x2b0>
c00152ab:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152af:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00152b3:	74 2b                	je     c00152e0 <sendKeyboardToken(KeyboardToken)+0x2a4>
c00152b5:	8b 15 24 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029a24
c00152bb:	89 d0                	mov    eax,edx
c00152bd:	c1 e0 02             	shl    eax,0x2
c00152c0:	01 d0                	add    eax,edx
c00152c2:	01 c0                	add    eax,eax
c00152c4:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c00152c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cc:	0f b7 c0             	movzx  eax,ax
c00152cf:	8d 50 d0             	lea    edx,[eax-0x30]
c00152d2:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c00152d7:	01 d0                	add    eax,edx
c00152d9:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c00152de:	eb 6d                	jmp    c001534d <sendKeyboardToken(KeyboardToken)+0x311>
c00152e0:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c00152ea:	eb 61                	jmp    c001534d <sendKeyboardToken(KeyboardToken)+0x311>
c00152ec:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c00152f1:	85 c0                	test   eax,eax
c00152f3:	74 18                	je     c001530d <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152f5:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c00152fa:	0f b6 c0             	movzx  eax,al
c00152fd:	83 ec 0c             	sub    esp,0xc
c0015300:	50                   	push   eax
c0015301:	e8 ca fc ff ff       	call   c0014fd0 <sendKeyToTerminal(unsigned char)>
c0015306:	83 c4 10             	add    esp,0x10
c0015309:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001530d:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c0015317:	eb 34                	jmp    c001534d <sendKeyboardToken(KeyboardToken)+0x311>
c0015319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531c:	66 3d 01 01          	cmp    ax,0x101
c0015320:	75 2b                	jne    c001534d <sendKeyboardToken(KeyboardToken)+0x311>
c0015322:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c0015327:	85 c0                	test   eax,eax
c0015329:	74 18                	je     c0015343 <sendKeyboardToken(KeyboardToken)+0x307>
c001532b:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c0015330:	0f b6 c0             	movzx  eax,al
c0015333:	83 ec 0c             	sub    esp,0xc
c0015336:	50                   	push   eax
c0015337:	e8 94 fc ff ff       	call   c0014fd0 <sendKeyToTerminal(unsigned char)>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015343:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c001534d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015350:	83 f0 01             	xor    eax,0x1
c0015353:	84 c0                	test   al,al
c0015355:	74 4c                	je     c00153a3 <sendKeyboardToken(KeyboardToken)+0x367>
c0015357:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001535a:	83 f0 01             	xor    eax,0x1
c001535d:	84 c0                	test   al,al
c001535f:	74 42                	je     c00153a3 <sendKeyboardToken(KeyboardToken)+0x367>
c0015361:	a0 20 97 02 c0       	mov    al,ds:0xc0029720
c0015366:	83 f0 01             	xor    eax,0x1
c0015369:	84 c0                	test   al,al
c001536b:	74 36                	je     c00153a3 <sendKeyboardToken(KeyboardToken)+0x367>
c001536d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015370:	66 83 f8 1f          	cmp    ax,0x1f
c0015374:	76 09                	jbe    c001537f <sendKeyboardToken(KeyboardToken)+0x343>
c0015376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015379:	66 83 f8 7e          	cmp    ax,0x7e
c001537d:	76 12                	jbe    c0015391 <sendKeyboardToken(KeyboardToken)+0x355>
c001537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015382:	66 83 f8 0a          	cmp    ax,0xa
c0015386:	74 09                	je     c0015391 <sendKeyboardToken(KeyboardToken)+0x355>
c0015388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538b:	66 83 f8 08          	cmp    ax,0x8
c001538f:	75 12                	jne    c00153a3 <sendKeyboardToken(KeyboardToken)+0x367>
c0015391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015394:	0f b6 c0             	movzx  eax,al
c0015397:	83 ec 0c             	sub    esp,0xc
c001539a:	50                   	push   eax
c001539b:	e8 30 fc ff ff       	call   c0014fd0 <sendKeyToTerminal(unsigned char)>
c00153a0:	83 c4 10             	add    esp,0x10
c00153a3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00153a6:	83 f0 01             	xor    eax,0x1
c00153a9:	84 c0                	test   al,al
c00153ab:	74 4f                	je     c00153fc <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153ad:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153b0:	83 f0 01             	xor    eax,0x1
c00153b3:	84 c0                	test   al,al
c00153b5:	74 45                	je     c00153fc <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153b7:	a0 20 97 02 c0       	mov    al,ds:0xc0029720
c00153bc:	84 c0                	test   al,al
c00153be:	74 3c                	je     c00153fc <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c3:	66 83 f8 3f          	cmp    ax,0x3f
c00153c7:	76 33                	jbe    c00153fc <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cc:	66 83 f8 7f          	cmp    ax,0x7f
c00153d0:	77 2a                	ja     c00153fc <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d5:	88 c2                	mov    dl,al
c00153d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153da:	66 83 f8 5f          	cmp    ax,0x5f
c00153de:	76 04                	jbe    c00153e4 <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153e0:	b0 20                	mov    al,0x20
c00153e2:	eb 02                	jmp    c00153e6 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153e4:	b0 00                	mov    al,0x0
c00153e6:	29 c2                	sub    edx,eax
c00153e8:	88 d0                	mov    al,dl
c00153ea:	83 e8 40             	sub    eax,0x40
c00153ed:	0f b6 c0             	movzx  eax,al
c00153f0:	83 ec 0c             	sub    esp,0xc
c00153f3:	50                   	push   eax
c00153f4:	e8 d7 fb ff ff       	call   c0014fd0 <sendKeyToTerminal(unsigned char)>
c00153f9:	83 c4 10             	add    esp,0x10
c00153fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ff:	66 3d 00 03          	cmp    ax,0x300
c0015403:	75 0f                	jne    c0015414 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015405:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015408:	83 f0 01             	xor    eax,0x1
c001540b:	84 c0                	test   al,al
c001540d:	74 05                	je     c0015414 <sendKeyboardToken(KeyboardToken)+0x3d8>
c001540f:	e8 33 b1 ff ff       	call   c0010547 <doTerminalCycle()>
c0015414:	90                   	nop
c0015415:	c9                   	leave  
c0015416:	c3                   	ret    

c0015417 <clearInternalKeybuffer(VgaText*)>:
c0015417:	55                   	push   ebp
c0015418:	89 e5                	mov    ebp,esp
c001541a:	83 ec 08             	sub    esp,0x8
c001541d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015420:	05 34 11 00 00       	add    eax,0x1134
c0015425:	83 ec 0c             	sub    esp,0xc
c0015428:	50                   	push   eax
c0015429:	e8 d5 b2 fe ff       	call   c0000703 <strlen>
c001542e:	83 c4 10             	add    esp,0x10
c0015431:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015434:	81 c2 34 11 00 00    	add    edx,0x1134
c001543a:	83 ec 04             	sub    esp,0x4
c001543d:	50                   	push   eax
c001543e:	6a 00                	push   0x0
c0015440:	52                   	push   edx
c0015441:	e8 a0 b2 fe ff       	call   c00006e6 <memset>
c0015446:	83 c4 10             	add    esp,0x10
c0015449:	90                   	nop
c001544a:	c9                   	leave  
c001544b:	c3                   	ret    

c001544c <readKeyboard(VgaText*, char*, unsigned long)>:
c001544c:	55                   	push   ebp
c001544d:	89 e5                	mov    ebp,esp
c001544f:	83 ec 18             	sub    esp,0x18
c0015452:	fb                   	sti    
c0015453:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001545a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001545e:	0f 84 8a 00 00 00    	je     c00154ee <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015467:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001546d:	84 c0                	test   al,al
c001546f:	75 11                	jne    c0015482 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015471:	e8 ec 64 00 00       	call   c001b962 <lockScheduler()>
c0015476:	e8 1b 68 00 00       	call   c001bc96 <schedule()>
c001547b:	e8 e4 64 00 00       	call   c001b964 <unlockScheduler()>
c0015480:	eb e2                	jmp    c0015464 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015482:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015485:	8d 50 01             	lea    edx,[eax+0x1]
c0015488:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001548b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001548e:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015494:	88 10                	mov    BYTE PTR [eax],dl
c0015496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015499:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001549f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00154a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a5:	05 34 11 00 00       	add    eax,0x1134
c00154aa:	83 ec 0c             	sub    esp,0xc
c00154ad:	50                   	push   eax
c00154ae:	e8 50 b2 fe ff       	call   c0000703 <strlen>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154b9:	81 c2 34 11 00 00    	add    edx,0x1134
c00154bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00154c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154c5:	81 c2 34 11 00 00    	add    edx,0x1134
c00154cb:	83 ec 04             	sub    esp,0x4
c00154ce:	50                   	push   eax
c00154cf:	51                   	push   ecx
c00154d0:	52                   	push   edx
c00154d1:	e8 a2 b1 fe ff       	call   c0000678 <memmove>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154df:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154e3:	0f 85 71 ff ff ff    	jne    c001545a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ec:	eb 03                	jmp    c00154f1 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f1:	c9                   	leave  
c00154f2:	c3                   	ret    
c00154f3:	90                   	nop

c00154f4 <Keyboard::Keyboard(char const*)>:
c00154f4:	83 ec 0c             	sub    esp,0xc
c00154f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154fb:	83 ec 08             	sub    esp,0x8
c00154fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015502:	50                   	push   eax
c0015503:	e8 44 e3 ff ff       	call   c001384c <Device::Device(char const*)>
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	ba dc 69 02 c0       	mov    edx,0xc00269dc
c0015510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015514:	89 10                	mov    DWORD PTR [eax],edx
c0015516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001551a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015524:	c6 05 04 96 02 c0 01 	mov    BYTE PTR ds:0xc0029604,0x1
c001552b:	90                   	nop
c001552c:	83 c4 0c             	add    esp,0xc
c001552f:	c3                   	ret    

c0015530 <Keyboard::~Keyboard()>:
c0015530:	83 ec 0c             	sub    esp,0xc
c0015533:	ba dc 69 02 c0       	mov    edx,0xc00269dc
c0015538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001553c:	89 10                	mov    DWORD PTR [eax],edx
c001553e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015542:	83 ec 0c             	sub    esp,0xc
c0015545:	50                   	push   eax
c0015546:	e8 b3 df ff ff       	call   c00134fe <Device::~Device()>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	90                   	nop
c001554f:	83 c4 0c             	add    esp,0xc
c0015552:	c3                   	ret    
c0015553:	90                   	nop

c0015554 <Keyboard::~Keyboard()>:
c0015554:	83 ec 0c             	sub    esp,0xc
c0015557:	83 ec 0c             	sub    esp,0xc
c001555a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001555e:	e8 cd ff ff ff       	call   c0015530 <Keyboard::~Keyboard()>
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	83 ec 08             	sub    esp,0x8
c0015569:	68 5c 01 00 00       	push   0x15c
c001556e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015572:	e8 fa cb ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0015577:	83 c4 10             	add    esp,0x10
c001557a:	83 c4 0c             	add    esp,0xc
c001557d:	c3                   	ret    

c001557e <LogicalDisk::close(int, int, void*)>:
c001557e:	83 c8 ff             	or     eax,0xffffffff
c0015581:	c3                   	ret    

c0015582 <LogicalDisk::~LogicalDisk()>:
c0015582:	83 ec 0c             	sub    esp,0xc
c0015585:	ba 8c 6a 02 c0       	mov    edx,0xc0026a8c
c001558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001558e:	89 10                	mov    DWORD PTR [eax],edx
c0015590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015594:	83 ec 0c             	sub    esp,0xc
c0015597:	50                   	push   eax
c0015598:	e8 61 df ff ff       	call   c00134fe <Device::~Device()>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	90                   	nop
c00155a1:	83 c4 0c             	add    esp,0xc
c00155a4:	c3                   	ret    
c00155a5:	90                   	nop

c00155a6 <LogicalDisk::~LogicalDisk()>:
c00155a6:	83 ec 0c             	sub    esp,0xc
c00155a9:	83 ec 0c             	sub    esp,0xc
c00155ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155b0:	e8 cd ff ff ff       	call   c0015582 <LogicalDisk::~LogicalDisk()>
c00155b5:	83 c4 10             	add    esp,0x10
c00155b8:	83 ec 08             	sub    esp,0x8
c00155bb:	68 74 01 00 00       	push   0x174
c00155c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155c4:	e8 a8 cb ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00155c9:	83 c4 10             	add    esp,0x10
c00155cc:	83 c4 0c             	add    esp,0xc
c00155cf:	c3                   	ret    

c00155d0 <LogicalDisk::open(int, int, void*)>:
c00155d0:	83 ec 18             	sub    esp,0x18
c00155d3:	68 08 6a 02 c0       	push   0xc0026a08
c00155d8:	e8 31 34 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00155dd:	83 c8 ff             	or     eax,0xffffffff
c00155e0:	83 c4 1c             	add    esp,0x1c
c00155e3:	c3                   	ret    

c00155e4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155e4:	53                   	push   ebx
c00155e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155f1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155f7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155fd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015603:	77 10                	ja     c0015615 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015605:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001560b:	89 d3                	mov    ebx,edx
c001560d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015613:	72 05                	jb     c001561a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015615:	83 c8 ff             	or     eax,0xffffffff
c0015618:	89 c2                	mov    edx,eax
c001561a:	5b                   	pop    ebx
c001561b:	c3                   	ret    

c001561c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001561c:	56                   	push   esi
c001561d:	83 c8 ff             	or     eax,0xffffffff
c0015620:	53                   	push   ebx
c0015621:	89 c2                	mov    edx,eax
c0015623:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015627:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001562b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001562f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015635:	77 27                	ja     c001565e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015637:	89 d8                	mov    eax,ebx
c0015639:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001563f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015645:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001564a:	89 c2                	mov    edx,eax
c001564c:	73 10                	jae    c001565e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001564e:	89 c8                	mov    eax,ecx
c0015650:	89 da                	mov    edx,ebx
c0015652:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015658:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001565e:	5b                   	pop    ebx
c001565f:	5e                   	pop    esi
c0015660:	c3                   	ret    
c0015661:	90                   	nop

c0015662 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015662:	83 ec 1c             	sub    esp,0x1c
c0015665:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001566d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015671:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015675:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015679:	89 04 24             	mov    DWORD PTR [esp],eax
c001567c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015680:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015688:	83 ec 08             	sub    esp,0x8
c001568b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001568f:	50                   	push   eax
c0015690:	e8 b7 e1 ff ff       	call   c001384c <Device::Device(char const*)>
c0015695:	83 c4 10             	add    esp,0x10
c0015698:	ba 8c 6a 02 c0       	mov    edx,0xc0026a8c
c001569d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a1:	89 10                	mov    DWORD PTR [eax],edx
c00156a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156bd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00156c7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156d3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156d9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156ea:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156f0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156fe:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015708:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015712:	90                   	nop
c0015713:	83 c4 1c             	add    esp,0x1c
c0015716:	c3                   	ret    
c0015717:	90                   	nop

c0015718 <LogicalDisk::assignDriveLetter()>:
c0015718:	55                   	push   ebp
c0015719:	57                   	push   edi
c001571a:	56                   	push   esi
c001571b:	53                   	push   ebx
c001571c:	83 ec 14             	sub    esp,0x14
c001571f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015723:	8b 3d 40 9a 02 c0    	mov    edi,DWORD PTR ds:0xc0029a40
c0015729:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001572f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015733:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015739:	8b 3d 44 9a 02 c0    	mov    edi,DWORD PTR ds:0xc0029a44
c001573f:	3c 01                	cmp    al,0x1
c0015741:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015745:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015749:	19 c0                	sbb    eax,eax
c001574b:	83 e0 02             	and    eax,0x2
c001574e:	83 c0 41             	add    eax,0x41
c0015751:	0f be e8             	movsx  ebp,al
c0015754:	3c 43                	cmp    al,0x43
c0015756:	75 10                	jne    c0015768 <LogicalDisk::assignDriveLetter()+0x50>
c0015758:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001575f:	75 5d                	jne    c00157be <LogicalDisk::assignDriveLetter()+0xa6>
c0015761:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015766:	75 56                	jne    c00157be <LogicalDisk::assignDriveLetter()+0xa6>
c0015768:	8d 75 bf             	lea    esi,[ebp-0x41]
c001576b:	ba 01 00 00 00       	mov    edx,0x1
c0015770:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015774:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015778:	d3 e2                	shl    edx,cl
c001577a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001577e:	89 d7                	mov    edi,edx
c0015780:	89 d6                	mov    esi,edx
c0015782:	c1 ff 1f             	sar    edi,0x1f
c0015785:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015789:	21 f9                	and    ecx,edi
c001578b:	09 d1                	or     ecx,edx
c001578d:	75 2f                	jne    c00157be <LogicalDisk::assignDriveLetter()+0xa6>
c001578f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015793:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015797:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001579d:	09 f2                	or     edx,esi
c001579f:	89 15 40 9a 02 c0    	mov    DWORD PTR ds:0xc0029a40,edx
c00157a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00157a9:	09 fa                	or     edx,edi
c00157ab:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00157af:	89 15 44 9a 02 c0    	mov    DWORD PTR ds:0xc0029a44,edx
c00157b5:	89 1c bd 60 9a 02 c0 	mov    DWORD PTR [edi*4-0x3ffd65a0],ebx
c00157bc:	eb 08                	jmp    c00157c6 <LogicalDisk::assignDriveLetter()+0xae>
c00157be:	45                   	inc    ebp
c00157bf:	40                   	inc    eax
c00157c0:	3c 5b                	cmp    al,0x5b
c00157c2:	75 90                	jne    c0015754 <LogicalDisk::assignDriveLetter()+0x3c>
c00157c4:	31 c0                	xor    eax,eax
c00157c6:	83 c4 14             	add    esp,0x14
c00157c9:	5b                   	pop    ebx
c00157ca:	5e                   	pop    esi
c00157cb:	5f                   	pop    edi
c00157cc:	5d                   	pop    ebp
c00157cd:	c3                   	ret    

c00157ce <LogicalDisk::mount()>:
c00157ce:	56                   	push   esi
c00157cf:	53                   	push   ebx
c00157d0:	51                   	push   ecx
c00157d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157d5:	8b 1d c8 95 02 c0    	mov    ebx,DWORD PTR ds:0xc00295c8
c00157db:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157e5:	85 db                	test   ebx,ebx
c00157e7:	74 50                	je     c0015839 <LogicalDisk::mount()+0x6b>
c00157e9:	e8 5f 61 00 00       	call   c001b94d <getIRQNestingLevel()>
c00157ee:	52                   	push   edx
c00157ef:	52                   	push   edx
c00157f0:	50                   	push   eax
c00157f1:	68 2c 6a 02 c0       	push   0xc0026a2c
c00157f6:	e8 56 ca ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00157fb:	83 c4 0c             	add    esp,0xc
c00157fe:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015805:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015807:	83 e8 41             	sub    eax,0x41
c001580a:	50                   	push   eax
c001580b:	56                   	push   esi
c001580c:	53                   	push   ebx
c001580d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	84 c0                	test   al,al
c0015815:	74 08                	je     c001581f <LogicalDisk::mount()+0x51>
c0015817:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001581d:	eb 1c                	jmp    c001583b <LogicalDisk::mount()+0x6d>
c001581f:	e8 29 61 00 00       	call   c001b94d <getIRQNestingLevel()>
c0015824:	51                   	push   ecx
c0015825:	51                   	push   ecx
c0015826:	50                   	push   eax
c0015827:	68 47 6a 02 c0       	push   0xc0026a47
c001582c:	e8 20 ca ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0015831:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015834:	83 c4 10             	add    esp,0x10
c0015837:	eb ac                	jmp    c00157e5 <LogicalDisk::mount()+0x17>
c0015839:	31 c0                	xor    eax,eax
c001583b:	5a                   	pop    edx
c001583c:	5b                   	pop    ebx
c001583d:	5e                   	pop    esi
c001583e:	c3                   	ret    
c001583f:	90                   	nop

c0015840 <LogicalDisk::unmount()>:
c0015840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015844:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001584e:	c3                   	ret    
c001584f:	90                   	nop

c0015850 <LogicalDisk::unassignDriveLetter()>:
c0015850:	57                   	push   edi
c0015851:	56                   	push   esi
c0015852:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015856:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001585d:	84 c9                	test   cl,cl
c001585f:	75 0f                	jne    c0015870 <LogicalDisk::unassignDriveLetter()+0x20>
c0015861:	c7 44 24 0c 62 6a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026a62
c0015869:	5e                   	pop    esi
c001586a:	5f                   	pop    edi
c001586b:	e9 9e 31 00 00       	jmp    c0018a0e <Krnl::panic(char const*)>
c0015870:	83 e9 41             	sub    ecx,0x41
c0015873:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001587a:	b8 01 00 00 00       	mov    eax,0x1
c001587f:	c7 04 8d 60 9a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd65a0],0x0
c001588a:	d3 e0                	shl    eax,cl
c001588c:	89 c7                	mov    edi,eax
c001588e:	f7 d0                	not    eax
c0015890:	c1 ff 1f             	sar    edi,0x1f
c0015893:	21 05 40 9a 02 c0    	and    DWORD PTR ds:0xc0029a40,eax
c0015899:	89 fe                	mov    esi,edi
c001589b:	f7 d6                	not    esi
c001589d:	21 35 44 9a 02 c0    	and    DWORD PTR ds:0xc0029a44,esi
c00158a3:	5e                   	pop    esi
c00158a4:	5f                   	pop    edi
c00158a5:	c3                   	ret    

c00158a6 <LogicalDisk::read(unsigned long long, int, void*)>:
c00158a6:	57                   	push   edi
c00158a7:	56                   	push   esi
c00158a8:	53                   	push   ebx
c00158a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158b1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158b9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158bf:	77 41                	ja     c0015902 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00158c1:	99                   	cdq    
c00158c2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158c8:	01 c8                	add    eax,ecx
c00158ca:	11 da                	adc    edx,ebx
c00158cc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158d2:	19 d7                	sbb    edi,edx
c00158d4:	72 33                	jb     c0015909 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158d6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158dc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158e6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158ea:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158f0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158fa:	5b                   	pop    ebx
c00158fb:	5e                   	pop    esi
c00158fc:	5f                   	pop    edi
c00158fd:	e9 9a 09 00 00       	jmp    c001629c <VCache::read(unsigned long long, int, void*)>
c0015902:	b8 05 00 00 00       	mov    eax,0x5
c0015907:	eb 05                	jmp    c001590e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015909:	b8 07 00 00 00       	mov    eax,0x7
c001590e:	5b                   	pop    ebx
c001590f:	5e                   	pop    esi
c0015910:	5f                   	pop    edi
c0015911:	c3                   	ret    

c0015912 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015912:	57                   	push   edi
c0015913:	56                   	push   esi
c0015914:	53                   	push   ebx
c0015915:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015919:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001591d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015921:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015925:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001592b:	77 41                	ja     c001596e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001592d:	99                   	cdq    
c001592e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015934:	01 c8                	add    eax,ecx
c0015936:	11 da                	adc    edx,ebx
c0015938:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001593e:	19 d7                	sbb    edi,edx
c0015940:	72 33                	jb     c0015975 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015942:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015948:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001594e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015952:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015956:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001595c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015962:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015966:	5b                   	pop    ebx
c0015967:	5e                   	pop    esi
c0015968:	5f                   	pop    edi
c0015969:	e9 4a 08 00 00       	jmp    c00161b8 <VCache::write(unsigned long long, int, void*)>
c001596e:	b8 05 00 00 00       	mov    eax,0x5
c0015973:	eb 05                	jmp    c001597a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015975:	b8 07 00 00 00       	mov    eax,0x7
c001597a:	5b                   	pop    ebx
c001597b:	5e                   	pop    esi
c001597c:	5f                   	pop    edi
c001597d:	c3                   	ret    

c001597e <Mouse::Mouse(char const*)>:
c001597e:	83 ec 0c             	sub    esp,0xc
c0015981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015985:	83 ec 08             	sub    esp,0x8
c0015988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001598c:	50                   	push   eax
c001598d:	e8 ba de ff ff       	call   c001384c <Device::Device(char const*)>
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	ba b8 6a 02 c0       	mov    edx,0xc0026ab8
c001599a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599e:	89 10                	mov    DWORD PTR [eax],edx
c00159a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a4:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00159ae:	90                   	nop
c00159af:	83 c4 0c             	add    esp,0xc
c00159b2:	c3                   	ret    
c00159b3:	90                   	nop

c00159b4 <Mouse::~Mouse()>:
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	ba b8 6a 02 c0       	mov    edx,0xc0026ab8
c00159bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c0:	89 10                	mov    DWORD PTR [eax],edx
c00159c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c6:	83 ec 0c             	sub    esp,0xc
c00159c9:	50                   	push   eax
c00159ca:	e8 2f db ff ff       	call   c00134fe <Device::~Device()>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	90                   	nop
c00159d3:	83 c4 0c             	add    esp,0xc
c00159d6:	c3                   	ret    
c00159d7:	90                   	nop

c00159d8 <Mouse::~Mouse()>:
c00159d8:	83 ec 0c             	sub    esp,0xc
c00159db:	83 ec 0c             	sub    esp,0xc
c00159de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159e2:	e8 cd ff ff ff       	call   c00159b4 <Mouse::~Mouse()>
c00159e7:	83 c4 10             	add    esp,0x10
c00159ea:	83 ec 08             	sub    esp,0x8
c00159ed:	68 58 01 00 00       	push   0x158
c00159f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159f6:	e8 76 c7 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	83 c4 0c             	add    esp,0xc
c0015a01:	c3                   	ret    

c0015a02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015a02:	55                   	push   ebp
c0015a03:	57                   	push   edi
c0015a04:	56                   	push   esi
c0015a05:	53                   	push   ebx
c0015a06:	81 ec 28 01 00 00    	sub    esp,0x128
c0015a0c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015a13:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015a1a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015a21:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015a28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015a30:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a37:	e8 02 df ff ff       	call   c001393e <Device::getName()>
c0015a3c:	5a                   	pop    edx
c0015a3d:	59                   	pop    ecx
c0015a3e:	50                   	push   eax
c0015a3f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a43:	55                   	push   ebp
c0015a44:	e8 3c ad fe ff       	call   c0000785 <strcpy>
c0015a49:	5b                   	pop    ebx
c0015a4a:	58                   	pop    eax
c0015a4b:	68 dc 6a 02 c0       	push   0xc0026adc
c0015a50:	55                   	push   ebp
c0015a51:	e8 e6 ad fe ff       	call   c000083c <strcat>
c0015a56:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a5d:	e8 00 c7 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015a62:	83 c4 0c             	add    esp,0xc
c0015a65:	89 c3                	mov    ebx,eax
c0015a67:	57                   	push   edi
c0015a68:	56                   	push   esi
c0015a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a71:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a78:	55                   	push   ebp
c0015a79:	50                   	push   eax
c0015a7a:	e8 e3 fb ff ff       	call   c0015662 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a7f:	83 c4 14             	add    esp,0x14
c0015a82:	53                   	push   ebx
c0015a83:	e8 90 fc ff ff       	call   c0015718 <LogicalDisk::assignDriveLetter()>
c0015a88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a8b:	e8 3e fd ff ff       	call   c00157ce <LogicalDisk::mount()>
c0015a90:	58                   	pop    eax
c0015a91:	5a                   	pop    edx
c0015a92:	53                   	push   ebx
c0015a93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a9a:	e8 bd db ff ff       	call   c001365c <Device::addChild(Device*)>
c0015a9f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015aa5:	5b                   	pop    ebx
c0015aa6:	5e                   	pop    esi
c0015aa7:	5f                   	pop    edi
c0015aa8:	5d                   	pop    ebp
c0015aa9:	c3                   	ret    

c0015aaa <createPartitionsForDisk(PhysicalDisk*)>:
c0015aaa:	55                   	push   ebp
c0015aab:	57                   	push   edi
c0015aac:	56                   	push   esi
c0015aad:	53                   	push   ebx
c0015aae:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015ab4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015abb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015ac1:	3d 00 02 00 00       	cmp    eax,0x200
c0015ac6:	74 27                	je     c0015aef <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015ac8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015ace:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015ad4:	83 ec 10             	sub    esp,0x10
c0015ad7:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015adb:	99                   	cdq    
c0015adc:	c1 e6 0a             	shl    esi,0xa
c0015adf:	52                   	push   edx
c0015ae0:	89 fd                	mov    ebp,edi
c0015ae2:	50                   	push   eax
c0015ae3:	55                   	push   ebp
c0015ae4:	56                   	push   esi
c0015ae5:	e8 92 c9 00 00       	call   c002247c <__udivdi3>
c0015aea:	e9 b1 00 00 00       	jmp    c0015ba0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015aef:	83 ec 0c             	sub    esp,0xc
c0015af2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015af4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015af8:	56                   	push   esi
c0015af9:	6a 01                	push   0x1
c0015afb:	6a 00                	push   0x0
c0015afd:	6a 00                	push   0x0
c0015aff:	53                   	push   ebx
c0015b00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015b03:	83 c4 20             	add    esp,0x20
c0015b06:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015b0e:	75 0a                	jne    c0015b1a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015b10:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015b18:	74 2c                	je     c0015b46 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015b1a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b20:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b26:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b2c:	83 ec 10             	sub    esp,0x10
c0015b2f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b33:	89 f7                	mov    edi,esi
c0015b35:	c1 e0 0a             	shl    eax,0xa
c0015b38:	c1 ff 1f             	sar    edi,0x1f
c0015b3b:	57                   	push   edi
c0015b3c:	56                   	push   esi
c0015b3d:	52                   	push   edx
c0015b3e:	50                   	push   eax
c0015b3f:	e8 38 c9 00 00       	call   c002247c <__udivdi3>
c0015b44:	eb 5a                	jmp    c0015ba0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b46:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b4d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b54:	83 e1 7f             	and    ecx,0x7f
c0015b57:	83 e0 7f             	and    eax,0x7f
c0015b5a:	01 c1                	add    ecx,eax
c0015b5c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b63:	83 e0 7f             	and    eax,0x7f
c0015b66:	01 c1                	add    ecx,eax
c0015b68:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b6f:	83 e0 7f             	and    eax,0x7f
c0015b72:	00 c1                	add    cl,al
c0015b74:	74 41                	je     c0015bb7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b76:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b7c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b88:	83 ec 10             	sub    esp,0x10
c0015b8b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b8f:	89 f7                	mov    edi,esi
c0015b91:	c1 e0 0a             	shl    eax,0xa
c0015b94:	c1 ff 1f             	sar    edi,0x1f
c0015b97:	57                   	push   edi
c0015b98:	56                   	push   esi
c0015b99:	52                   	push   edx
c0015b9a:	50                   	push   eax
c0015b9b:	e8 dc c8 00 00       	call   c002247c <__udivdi3>
c0015ba0:	83 c4 14             	add    esp,0x14
c0015ba3:	52                   	push   edx
c0015ba4:	50                   	push   eax
c0015ba5:	6a 00                	push   0x0
c0015ba7:	6a 00                	push   0x0
c0015ba9:	53                   	push   ebx
c0015baa:	e8 53 fe ff ff       	call   c0015a02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015baf:	83 c4 20             	add    esp,0x20
c0015bb2:	e9 79 01 00 00       	jmp    c0015d30 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015bb7:	89 f0                	mov    eax,esi
c0015bb9:	31 f6                	xor    esi,esi
c0015bbb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015bc2:	75 02                	jne    c0015bc6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015bc4:	89 f1                	mov    ecx,esi
c0015bc6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015bcd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015bd4:	c1 e2 08             	shl    edx,0x8
c0015bd7:	c1 e7 10             	shl    edi,0x10
c0015bda:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015be2:	09 fa                	or     edx,edi
c0015be4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015bec:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015bf3:	83 c0 10             	add    eax,0x10
c0015bf6:	09 fa                	or     edx,edi
c0015bf8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bff:	c1 e7 18             	shl    edi,0x18
c0015c02:	09 fa                	or     edx,edi
c0015c04:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015c0b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015c0f:	c1 e7 10             	shl    edi,0x10
c0015c12:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015c19:	c1 e2 08             	shl    edx,0x8
c0015c1c:	09 fa                	or     edx,edi
c0015c1e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015c25:	09 fa                	or     edx,edi
c0015c27:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015c2e:	c1 e7 18             	shl    edi,0x18
c0015c31:	09 fa                	or     edx,edi
c0015c33:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c37:	46                   	inc    esi
c0015c38:	83 fe 04             	cmp    esi,0x4
c0015c3b:	0f 85 7a ff ff ff    	jne    c0015bbb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c45:	83 f0 01             	xor    eax,0x1
c0015c48:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c4c:	75 57                	jne    c0015ca5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c52:	83 f0 01             	xor    eax,0x1
c0015c55:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c59:	75 4a                	jne    c0015ca5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c5b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c6f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c75:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c7b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c85:	89 f7                	mov    edi,esi
c0015c87:	c1 e0 0a             	shl    eax,0xa
c0015c8a:	c1 ff 1f             	sar    edi,0x1f
c0015c8d:	57                   	push   edi
c0015c8e:	56                   	push   esi
c0015c8f:	52                   	push   edx
c0015c90:	50                   	push   eax
c0015c91:	e8 e6 c7 00 00       	call   c002247c <__udivdi3>
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c9d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015ca1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015ca5:	84 c9                	test   cl,cl
c0015ca7:	74 53                	je     c0015cfc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015ca9:	0f b6 c9             	movzx  ecx,cl
c0015cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015cb4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015cb8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015cbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015cc4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015cc8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015ccc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015cd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cdc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015ce0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015ce4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015ce8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015cec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cf4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cf8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cfc:	31 ed                	xor    ebp,ebp
c0015cfe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015d02:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015d06:	89 f8                	mov    eax,edi
c0015d08:	09 f0                	or     eax,esi
c0015d0a:	74 1e                	je     c0015d2a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d0c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015d10:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015d14:	89 d1                	mov    ecx,edx
c0015d16:	09 c1                	or     ecx,eax
c0015d18:	74 10                	je     c0015d2a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d1a:	83 ec 0c             	sub    esp,0xc
c0015d1d:	57                   	push   edi
c0015d1e:	56                   	push   esi
c0015d1f:	52                   	push   edx
c0015d20:	50                   	push   eax
c0015d21:	53                   	push   ebx
c0015d22:	e8 db fc ff ff       	call   c0015a02 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015d27:	83 c4 20             	add    esp,0x20
c0015d2a:	45                   	inc    ebp
c0015d2b:	83 fd 04             	cmp    ebp,0x4
c0015d2e:	75 ce                	jne    c0015cfe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015d30:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d36:	5b                   	pop    ebx
c0015d37:	5e                   	pop    esi
c0015d38:	5f                   	pop    edi
c0015d39:	5d                   	pop    ebp
c0015d3a:	c3                   	ret    
c0015d3b:	90                   	nop

c0015d3c <Timer::Timer(char const*)>:
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d43:	83 ec 08             	sub    esp,0x8
c0015d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d4a:	50                   	push   eax
c0015d4b:	e8 fc da ff ff       	call   c001384c <Device::Device(char const*)>
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c0015d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5c:	89 10                	mov    DWORD PTR [eax],edx
c0015d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d62:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d6c:	90                   	nop
c0015d6d:	83 c4 0c             	add    esp,0xc
c0015d70:	c3                   	ret    
c0015d71:	90                   	nop

c0015d72 <Timer::~Timer()>:
c0015d72:	83 ec 0c             	sub    esp,0xc
c0015d75:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c0015d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7e:	89 10                	mov    DWORD PTR [eax],edx
c0015d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	50                   	push   eax
c0015d88:	e8 71 d7 ff ff       	call   c00134fe <Device::~Device()>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	90                   	nop
c0015d91:	83 c4 0c             	add    esp,0xc
c0015d94:	c3                   	ret    
c0015d95:	90                   	nop

c0015d96 <Timer::~Timer()>:
c0015d96:	83 ec 0c             	sub    esp,0xc
c0015d99:	83 ec 0c             	sub    esp,0xc
c0015d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015da0:	e8 cd ff ff ff       	call   c0015d72 <Timer::~Timer()>
c0015da5:	83 c4 10             	add    esp,0x10
c0015da8:	83 ec 08             	sub    esp,0x8
c0015dab:	68 5c 01 00 00       	push   0x15c
c0015db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db4:	e8 b8 c3 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	83 c4 0c             	add    esp,0xc
c0015dbf:	c3                   	ret    

c0015dc0 <Timer::read()>:
c0015dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dc4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dca:	c3                   	ret    

c0015dcb <timerHandler(unsigned long long)>:
c0015dcb:	55                   	push   ebp
c0015dcc:	57                   	push   edi
c0015dcd:	56                   	push   esi
c0015dce:	53                   	push   ebx
c0015dcf:	83 ec 0c             	sub    esp,0xc
c0015dd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015dd6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015dda:	01 35 d0 9a 02 c0    	add    DWORD PTR ds:0xc0029ad0,esi
c0015de0:	11 3d d4 9a 02 c0    	adc    DWORD PTR ds:0xc0029ad4,edi
c0015de6:	80 3d 6d 94 02 c0 00 	cmp    BYTE PTR ds:0xc002946d,0x0
c0015ded:	0f 84 07 01 00 00    	je     c0015efa <timerHandler(unsigned long long)+0x12f>
c0015df3:	e8 91 5b 00 00       	call   c001b989 <lockStuff()>
c0015df8:	83 ec 0c             	sub    esp,0xc
c0015dfb:	68 9c a8 02 c0       	push   0xc002a89c
c0015e00:	e8 8b e7 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e05:	c7 04 24 9c a8 02 c0 	mov    DWORD PTR [esp],0xc002a89c
c0015e0c:	89 c3                	mov    ebx,eax
c0015e0e:	e8 85 e7 00 00       	call   c0024598 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	84 c0                	test   al,al
c0015e18:	74 60                	je     c0015e7a <timerHandler(unsigned long long)+0xaf>
c0015e1a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e20:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015e23:	85 c0                	test   eax,eax
c0015e25:	0f 85 91 00 00 00    	jne    c0015ebc <timerHandler(unsigned long long)+0xf1>
c0015e2b:	e9 be 00 00 00       	jmp    c0015eee <timerHandler(unsigned long long)+0x123>
c0015e30:	83 ec 0c             	sub    esp,0xc
c0015e33:	55                   	push   ebp
c0015e34:	e8 39 61 00 00       	call   c001bf72 <unblockTask(ThreadControlBlock*)>
c0015e39:	83 c4 10             	add    esp,0x10
c0015e3c:	39 eb                	cmp    ebx,ebp
c0015e3e:	75 12                	jne    c0015e52 <timerHandler(unsigned long long)+0x87>
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	68 9c a8 02 c0       	push   0xc002a89c
c0015e48:	e8 43 e7 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e4d:	89 c3                	mov    ebx,eax
c0015e4f:	83 c4 10             	add    esp,0x10
c0015e52:	83 ec 0c             	sub    esp,0xc
c0015e55:	68 9c a8 02 c0       	push   0xc002a89c
c0015e5a:	e8 39 e7 00 00       	call   c0024598 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e5f:	83 c4 10             	add    esp,0x10
c0015e62:	84 c0                	test   al,al
c0015e64:	75 b4                	jne    c0015e1a <timerHandler(unsigned long long)+0x4f>
c0015e66:	83 ec 0c             	sub    esp,0xc
c0015e69:	68 9c a8 02 c0       	push   0xc002a89c
c0015e6e:	e8 1d e7 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e73:	83 c4 10             	add    esp,0x10
c0015e76:	39 d8                	cmp    eax,ebx
c0015e78:	74 a0                	je     c0015e1a <timerHandler(unsigned long long)+0x4f>
c0015e7a:	83 ec 0c             	sub    esp,0xc
c0015e7d:	68 9c a8 02 c0       	push   0xc002a89c
c0015e82:	e8 09 e7 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e87:	c7 04 24 9c a8 02 c0 	mov    DWORD PTR [esp],0xc002a89c
c0015e8e:	89 c5                	mov    ebp,eax
c0015e90:	e8 1f e7 00 00       	call   c00245b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e95:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e9e:	39 15 d0 9a 02 c0    	cmp    DWORD PTR ds:0xc0029ad0,edx
c0015ea4:	a1 d4 9a 02 c0       	mov    eax,ds:0xc0029ad4
c0015ea9:	19 c8                	sbb    eax,ecx
c0015eab:	73 83                	jae    c0015e30 <timerHandler(unsigned long long)+0x65>
c0015ead:	50                   	push   eax
c0015eae:	50                   	push   eax
c0015eaf:	55                   	push   ebp
c0015eb0:	68 9c a8 02 c0       	push   0xc002a89c
c0015eb5:	e8 a8 e7 00 00       	call   c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eba:	eb 93                	jmp    c0015e4f <timerHandler(unsigned long long)+0x84>
c0015ebc:	80 3d 6c 94 02 c0 00 	cmp    BYTE PTR ds:0xc002946c,0x0
c0015ec3:	74 29                	je     c0015eee <timerHandler(unsigned long long)+0x123>
c0015ec5:	39 c6                	cmp    esi,eax
c0015ec7:	bb 00 00 00 00       	mov    ebx,0x0
c0015ecc:	19 df                	sbb    edi,ebx
c0015ece:	72 19                	jb     c0015ee9 <timerHandler(unsigned long long)+0x11e>
c0015ed0:	e8 8d 5a 00 00       	call   c001b962 <lockScheduler()>
c0015ed5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eda:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015edd:	e8 b4 5d 00 00       	call   c001bc96 <schedule()>
c0015ee2:	e8 7d 5a 00 00       	call   c001b964 <unlockScheduler()>
c0015ee7:	eb 05                	jmp    c0015eee <timerHandler(unsigned long long)+0x123>
c0015ee9:	29 f0                	sub    eax,esi
c0015eeb:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015eee:	83 c4 0c             	add    esp,0xc
c0015ef1:	5b                   	pop    ebx
c0015ef2:	5e                   	pop    esi
c0015ef3:	5f                   	pop    edi
c0015ef4:	5d                   	pop    ebp
c0015ef5:	e9 21 5e 00 00       	jmp    c001bd1b <unlockStuff()>
c0015efa:	83 c4 0c             	add    esp,0xc
c0015efd:	5b                   	pop    ebx
c0015efe:	5e                   	pop    esi
c0015eff:	5f                   	pop    edi
c0015f00:	5d                   	pop    ebp
c0015f01:	c3                   	ret    

c0015f02 <setupTimer(int)>:
c0015f02:	57                   	push   edi
c0015f03:	56                   	push   esi
c0015f04:	53                   	push   ebx
c0015f05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f09:	e8 7d 19 00 00       	call   c001788b <getCPUNumber()>
c0015f0e:	85 c0                	test   eax,eax
c0015f10:	74 32                	je     c0015f44 <setupTimer(int)+0x42>
c0015f12:	83 ec 0c             	sub    esp,0xc
c0015f15:	68 60 01 00 00       	push   0x160
c0015f1a:	e8 43 c2 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015f1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f22:	89 c3                	mov    ebx,eax
c0015f24:	e8 f1 bf 00 00       	call   c0021f1a <APICTimer::APICTimer()>
c0015f29:	6a 00                	push   0x0
c0015f2b:	6a 00                	push   0x0
c0015f2d:	56                   	push   esi
c0015f2e:	53                   	push   ebx
c0015f2f:	e8 ee be 00 00       	call   c0021e22 <APICTimer::open(int, int, void*)>
c0015f34:	83 c4 20             	add    esp,0x20
c0015f37:	e8 52 19 00 00       	call   c001788e <thisCPU()>
c0015f3c:	56                   	push   esi
c0015f3d:	56                   	push   esi
c0015f3e:	53                   	push   ebx
c0015f3f:	e9 96 00 00 00       	jmp    c0015fda <setupTimer(int)+0xd8>
c0015f44:	e8 45 19 00 00       	call   c001788e <thisCPU()>
c0015f49:	83 ec 0c             	sub    esp,0xc
c0015f4c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f52:	e8 e7 d9 ff ff       	call   c001393e <Device::getName()>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f5d:	0f 85 87 00 00 00    	jne    c0015fea <setupTimer(int)+0xe8>
c0015f63:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0015f68:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f6f:	74 79                	je     c0015fea <setupTimer(int)+0xe8>
c0015f71:	83 ec 0c             	sub    esp,0xc
c0015f74:	68 5c 01 00 00       	push   0x15c
c0015f79:	e8 e4 c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015f7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f81:	89 c3                	mov    ebx,eax
c0015f83:	e8 e2 c0 00 00       	call   c002206a <PIT::PIT()>
c0015f88:	59                   	pop    ecx
c0015f89:	5f                   	pop    edi
c0015f8a:	53                   	push   ebx
c0015f8b:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c0015f91:	e8 c6 d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015f96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f98:	6a 00                	push   0x0
c0015f9a:	6a 00                	push   0x0
c0015f9c:	56                   	push   esi
c0015f9d:	53                   	push   ebx
c0015f9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fa1:	83 c4 14             	add    esp,0x14
c0015fa4:	68 60 01 00 00       	push   0x160
c0015fa9:	e8 b4 c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015fae:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fb1:	89 c7                	mov    edi,eax
c0015fb3:	e8 62 bf 00 00       	call   c0021f1a <APICTimer::APICTimer()>
c0015fb8:	6a 00                	push   0x0
c0015fba:	6a 00                	push   0x0
c0015fbc:	56                   	push   esi
c0015fbd:	57                   	push   edi
c0015fbe:	e8 5f be 00 00       	call   c0021e22 <APICTimer::open(int, int, void*)>
c0015fc3:	83 c4 20             	add    esp,0x20
c0015fc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc8:	6a 00                	push   0x0
c0015fca:	6a 00                	push   0x0
c0015fcc:	6a 00                	push   0x0
c0015fce:	53                   	push   ebx
c0015fcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fd2:	e8 b7 18 00 00       	call   c001788e <thisCPU()>
c0015fd7:	5a                   	pop    edx
c0015fd8:	59                   	pop    ecx
c0015fd9:	57                   	push   edi
c0015fda:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fe0:	e8 77 d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c0015fe5:	83 c4 10             	add    esp,0x10
c0015fe8:	eb 33                	jmp    c001601d <setupTimer(int)+0x11b>
c0015fea:	83 ec 0c             	sub    esp,0xc
c0015fed:	68 5c 01 00 00       	push   0x15c
c0015ff2:	e8 6b c1 ff ff       	call   c0012162 <operator new(unsigned long)>
c0015ff7:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ffa:	89 c3                	mov    ebx,eax
c0015ffc:	e8 69 c0 00 00       	call   c002206a <PIT::PIT()>
c0016001:	58                   	pop    eax
c0016002:	5a                   	pop    edx
c0016003:	53                   	push   ebx
c0016004:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c001600a:	e8 4d d6 ff ff       	call   c001365c <Device::addChild(Device*)>
c001600f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016011:	6a 00                	push   0x0
c0016013:	6a 00                	push   0x0
c0016015:	56                   	push   esi
c0016016:	53                   	push   ebx
c0016017:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001601a:	83 c4 20             	add    esp,0x20
c001601d:	89 d8                	mov    eax,ebx
c001601f:	5b                   	pop    ebx
c0016020:	5e                   	pop    esi
c0016021:	5f                   	pop    edi
c0016022:	c3                   	ret    
c0016023:	90                   	nop

c0016024 <VCache::VCache(PhysicalDisk*)>:
c0016024:	53                   	push   ebx
c0016025:	83 ec 08             	sub    esp,0x8
c0016028:	ba 20 6b 02 c0       	mov    edx,0xc0026b20
c001602d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016031:	89 10                	mov    DWORD PTR [eax],edx
c0016033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016037:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001603e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016042:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016054:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001605b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016066:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001606d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016071:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016080:	83 ec 0c             	sub    esp,0xc
c0016083:	6a 10                	push   0x10
c0016085:	e8 d8 c0 ff ff       	call   c0012162 <operator new(unsigned long)>
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	89 c3                	mov    ebx,eax
c001608f:	83 ec 0c             	sub    esp,0xc
c0016092:	53                   	push   ebx
c0016093:	e8 e2 59 00 00       	call   c001ba7a <Mutex::Mutex()>
c0016098:	83 c4 10             	add    esp,0x10
c001609b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00160a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160aa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00160ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b1:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00160b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160bc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00160c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00160c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160cd:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00160d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160dd:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160e0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e7:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160f5:	c1 e0 06             	shl    eax,0x6
c00160f8:	83 ec 0c             	sub    esp,0xc
c00160fb:	50                   	push   eax
c00160fc:	e8 5f 90 ff ff       	call   c000f160 <malloc>
c0016101:	83 c4 10             	add    esp,0x10
c0016104:	89 c2                	mov    edx,eax
c0016106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001610a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001610d:	90                   	nop
c001610e:	83 c4 08             	add    esp,0x8
c0016111:	5b                   	pop    ebx
c0016112:	c3                   	ret    
c0016113:	90                   	nop

c0016114 <VCache::writeWriteBuffer()>:
c0016114:	53                   	push   ebx
c0016115:	83 ec 14             	sub    esp,0x14
c0016118:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001611c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001611f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016121:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016124:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016127:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001612a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001612d:	50                   	push   eax
c001612e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016131:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016138:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001613f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016143:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001614a:	83 c4 28             	add    esp,0x28
c001614d:	5b                   	pop    ebx
c001614e:	c3                   	ret    
c001614f:	90                   	nop

c0016150 <VCache::~VCache()>:
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	ba 20 6b 02 c0       	mov    edx,0xc0026b20
c0016158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001615c:	89 10                	mov    DWORD PTR [eax],edx
c001615e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016162:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016165:	84 c0                	test   al,al
c0016167:	74 0f                	je     c0016178 <VCache::~VCache()+0x28>
c0016169:	83 ec 0c             	sub    esp,0xc
c001616c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016170:	e8 9f ff ff ff       	call   c0016114 <VCache::writeWriteBuffer()>
c0016175:	83 c4 10             	add    esp,0x10
c0016178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001617c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001617f:	83 ec 0c             	sub    esp,0xc
c0016182:	50                   	push   eax
c0016183:	e8 e8 8f ff ff       	call   c000f170 <free>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	90                   	nop
c001618c:	83 c4 0c             	add    esp,0xc
c001618f:	c3                   	ret    

c0016190 <VCache::~VCache()>:
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	83 ec 0c             	sub    esp,0xc
c0016196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001619a:	e8 b1 ff ff ff       	call   c0016150 <VCache::~VCache()>
c001619f:	83 c4 10             	add    esp,0x10
c00161a2:	83 ec 08             	sub    esp,0x8
c00161a5:	6a 30                	push   0x30
c00161a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ab:	e8 c1 bf ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00161b0:	83 c4 10             	add    esp,0x10
c00161b3:	83 c4 0c             	add    esp,0xc
c00161b6:	c3                   	ret    
c00161b7:	90                   	nop

c00161b8 <VCache::write(unsigned long long, int, void*)>:
c00161b8:	55                   	push   ebp
c00161b9:	57                   	push   edi
c00161ba:	56                   	push   esi
c00161bb:	53                   	push   ebx
c00161bc:	83 ec 28             	sub    esp,0x28
c00161bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00161c3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00161c7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00161cb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00161cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161d2:	e8 05 5d 00 00       	call   c001bedc <Semaphore::acquire()>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161de:	74 66                	je     c0016246 <VCache::write(unsigned long long, int, void*)+0x8e>
c00161e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161e3:	99                   	cdq    
c00161e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161e8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161eb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161ee:	89 c1                	mov    ecx,eax
c00161f0:	89 d0                	mov    eax,edx
c00161f2:	31 f1                	xor    ecx,esi
c00161f4:	31 f8                	xor    eax,edi
c00161f6:	89 ca                	mov    edx,ecx
c00161f8:	09 c2                	or     edx,eax
c00161fa:	75 3e                	jne    c001623a <VCache::write(unsigned long long, int, void*)+0x82>
c00161fc:	83 fd 01             	cmp    ebp,0x1
c00161ff:	75 39                	jne    c001623a <VCache::write(unsigned long long, int, void*)+0x82>
c0016201:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016204:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001620a:	51                   	push   ecx
c001620b:	50                   	push   eax
c001620c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016210:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016214:	0f af c8             	imul   ecx,eax
c0016217:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001621a:	51                   	push   ecx
c001621b:	e8 90 a4 fe ff       	call   c00006b0 <memcpy>
c0016220:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	40                   	inc    eax
c0016227:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001622a:	83 f8 40             	cmp    eax,0x40
c001622d:	75 57                	jne    c0016286 <VCache::write(unsigned long long, int, void*)+0xce>
c001622f:	83 ec 0c             	sub    esp,0xc
c0016232:	53                   	push   ebx
c0016233:	e8 dc fe ff ff       	call   c0016114 <VCache::writeWriteBuffer()>
c0016238:	eb 34                	jmp    c001626e <VCache::write(unsigned long long, int, void*)+0xb6>
c001623a:	83 ec 0c             	sub    esp,0xc
c001623d:	53                   	push   ebx
c001623e:	e8 d1 fe ff ff       	call   c0016114 <VCache::writeWriteBuffer()>
c0016243:	83 c4 10             	add    esp,0x10
c0016246:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016249:	83 fd 3f             	cmp    ebp,0x3f
c001624c:	7f 25                	jg     c0016273 <VCache::write(unsigned long long, int, void*)+0xbb>
c001624e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016251:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016254:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016257:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001625b:	52                   	push   edx
c001625c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016262:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016266:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016269:	e8 42 a4 fe ff       	call   c00006b0 <memcpy>
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	eb 13                	jmp    c0016286 <VCache::write(unsigned long long, int, void*)+0xce>
c0016273:	83 ec 0c             	sub    esp,0xc
c0016276:	8b 10                	mov    edx,DWORD PTR [eax]
c0016278:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001627c:	55                   	push   ebp
c001627d:	57                   	push   edi
c001627e:	56                   	push   esi
c001627f:	50                   	push   eax
c0016280:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016283:	83 c4 20             	add    esp,0x20
c0016286:	83 ec 0c             	sub    esp,0xc
c0016289:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001628c:	e8 d3 61 00 00       	call   c001c464 <Semaphore::release()>
c0016291:	83 c4 2c             	add    esp,0x2c
c0016294:	31 c0                	xor    eax,eax
c0016296:	5b                   	pop    ebx
c0016297:	5e                   	pop    esi
c0016298:	5f                   	pop    edi
c0016299:	5d                   	pop    ebp
c001629a:	c3                   	ret    
c001629b:	90                   	nop

c001629c <VCache::read(unsigned long long, int, void*)>:
c001629c:	57                   	push   edi
c001629d:	56                   	push   esi
c001629e:	53                   	push   ebx
c001629f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00162a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00162ab:	83 ec 0c             	sub    esp,0xc
c00162ae:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162b1:	e8 26 5c 00 00       	call   c001bedc <Semaphore::acquire()>
c00162b6:	83 c4 10             	add    esp,0x10
c00162b9:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00162bd:	74 0c                	je     c00162cb <VCache::read(unsigned long long, int, void*)+0x2f>
c00162bf:	83 ec 0c             	sub    esp,0xc
c00162c2:	53                   	push   ebx
c00162c3:	e8 4c fe ff ff       	call   c0016114 <VCache::writeWriteBuffer()>
c00162c8:	83 c4 10             	add    esp,0x10
c00162cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00162ce:	83 ec 0c             	sub    esp,0xc
c00162d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00162d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162db:	57                   	push   edi
c00162dc:	56                   	push   esi
c00162dd:	50                   	push   eax
c00162de:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162e1:	83 c4 14             	add    esp,0x14
c00162e4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162e7:	e8 78 61 00 00       	call   c001c464 <Semaphore::release()>
c00162ec:	83 c4 10             	add    esp,0x10
c00162ef:	31 c0                	xor    eax,eax
c00162f1:	5b                   	pop    ebx
c00162f2:	5e                   	pop    esi
c00162f3:	5f                   	pop    edi
c00162f4:	c3                   	ret    
c00162f5:	90                   	nop

c00162f6 <Video::putrect(int, int, int, int, unsigned int)>:
c00162f6:	55                   	push   ebp
c00162f7:	57                   	push   edi
c00162f8:	56                   	push   esi
c00162f9:	53                   	push   ebx
c00162fa:	83 ec 1c             	sub    esp,0x1c
c00162fd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016301:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016305:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016309:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001630d:	01 e8                	add    eax,ebp
c001630f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016313:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016317:	01 df                	add    edi,ebx
c0016319:	39 fb                	cmp    ebx,edi
c001631b:	7d 1b                	jge    c0016338 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c001631d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016321:	7d 12                	jge    c0016335 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0016323:	8b 16                	mov    edx,DWORD PTR [esi]
c0016325:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016329:	53                   	push   ebx
c001632a:	55                   	push   ebp
c001632b:	45                   	inc    ebp
c001632c:	56                   	push   esi
c001632d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	eb e8                	jmp    c001631d <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016335:	43                   	inc    ebx
c0016336:	eb e1                	jmp    c0016319 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0016338:	83 c4 1c             	add    esp,0x1c
c001633b:	5b                   	pop    ebx
c001633c:	5e                   	pop    esi
c001633d:	5f                   	pop    edi
c001633e:	5d                   	pop    ebp
c001633f:	c3                   	ret    

c0016340 <Video::blit(unsigned int*, int, int, int, int)>:
c0016340:	55                   	push   ebp
c0016341:	57                   	push   edi
c0016342:	56                   	push   esi
c0016343:	53                   	push   ebx
c0016344:	83 ec 1c             	sub    esp,0x1c
c0016347:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001634b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001634f:	85 c0                	test   eax,eax
c0016351:	79 02                	jns    c0016355 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016353:	31 c0                	xor    eax,eax
c0016355:	c1 e0 02             	shl    eax,0x2
c0016358:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001635c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016360:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016364:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016368:	39 d8                	cmp    eax,ebx
c001636a:	7e 49                	jle    c00163b5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001636c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016372:	7c 41                	jl     c00163b5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016374:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016378:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001637c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016380:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016384:	39 f9                	cmp    ecx,edi
c0016386:	7e 22                	jle    c00163aa <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016388:	83 c5 04             	add    ebp,0x4
c001638b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016391:	7c 14                	jl     c00163a7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016393:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016395:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016398:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001639c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00163a0:	56                   	push   esi
c00163a1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00163a4:	83 c4 10             	add    esp,0x10
c00163a7:	47                   	inc    edi
c00163a8:	eb d2                	jmp    c001637c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00163aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163ae:	43                   	inc    ebx
c00163af:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00163b3:	eb ab                	jmp    c0016360 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00163b5:	83 c4 1c             	add    esp,0x1c
c00163b8:	5b                   	pop    ebx
c00163b9:	5e                   	pop    esi
c00163ba:	5f                   	pop    edi
c00163bb:	5d                   	pop    ebp
c00163bc:	c3                   	ret    
c00163bd:	90                   	nop

c00163be <Video::clearScreen(unsigned int)>:
c00163be:	57                   	push   edi
c00163bf:	56                   	push   esi
c00163c0:	53                   	push   ebx
c00163c1:	31 db                	xor    ebx,ebx
c00163c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163c7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00163cd:	7e 1f                	jle    c00163ee <Video::clearScreen(unsigned int)+0x30>
c00163cf:	31 ff                	xor    edi,edi
c00163d1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163d7:	7e 12                	jle    c00163eb <Video::clearScreen(unsigned int)+0x2d>
c00163d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00163db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163df:	53                   	push   ebx
c00163e0:	57                   	push   edi
c00163e1:	47                   	inc    edi
c00163e2:	56                   	push   esi
c00163e3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163e6:	83 c4 10             	add    esp,0x10
c00163e9:	eb e6                	jmp    c00163d1 <Video::clearScreen(unsigned int)+0x13>
c00163eb:	43                   	inc    ebx
c00163ec:	eb d9                	jmp    c00163c7 <Video::clearScreen(unsigned int)+0x9>
c00163ee:	5b                   	pop    ebx
c00163ef:	5e                   	pop    esi
c00163f0:	5f                   	pop    edi
c00163f1:	c3                   	ret    

c00163f2 <Video::putpixel(int, int, unsigned int)>:
c00163f2:	c7 44 24 04 28 6b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026b28
c00163fa:	e9 52 be ff ff       	jmp    c0012251 <Dbg::kprintf(char const*, ...)>
c00163ff:	90                   	nop

c0016400 <Video::Video(char const*)>:
c0016400:	83 ec 0c             	sub    esp,0xc
c0016403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016407:	83 ec 08             	sub    esp,0x8
c001640a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640e:	50                   	push   eax
c001640f:	e8 38 d4 ff ff       	call   c001384c <Device::Device(char const*)>
c0016414:	83 c4 10             	add    esp,0x10
c0016417:	ba 40 6b 02 c0       	mov    edx,0xc0026b40
c001641c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016420:	89 10                	mov    DWORD PTR [eax],edx
c0016422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016426:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016430:	90                   	nop
c0016431:	83 c4 0c             	add    esp,0xc
c0016434:	c3                   	ret    
c0016435:	90                   	nop

c0016436 <Video::~Video()>:
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	ba 40 6b 02 c0       	mov    edx,0xc0026b40
c001643e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016442:	89 10                	mov    DWORD PTR [eax],edx
c0016444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	50                   	push   eax
c001644c:	e8 ad d0 ff ff       	call   c00134fe <Device::~Device()>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	90                   	nop
c0016455:	83 c4 0c             	add    esp,0xc
c0016458:	c3                   	ret    
c0016459:	90                   	nop

c001645a <Video::~Video()>:
c001645a:	83 ec 0c             	sub    esp,0xc
c001645d:	83 ec 0c             	sub    esp,0xc
c0016460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016464:	e8 cd ff ff ff       	call   c0016436 <Video::~Video()>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	83 ec 08             	sub    esp,0x8
c001646f:	68 64 01 00 00       	push   0x164
c0016474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016478:	e8 f4 bc ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	83 c4 0c             	add    esp,0xc
c0016483:	c3                   	ret    

c0016484 <Video::isMonochrome()>:
c0016484:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016488:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001648e:	c3                   	ret    
c001648f:	90                   	nop

c0016490 <Video::getWidth()>:
c0016490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016494:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001649a:	c3                   	ret    
c001649b:	90                   	nop

c001649c <Video::getHeight()>:
c001649c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00164a6:	c3                   	ret    
c00164a7:	90                   	nop

c00164a8 <Video::drawCursor(int, int, unsigned char*, int)>:
c00164a8:	55                   	push   ebp
c00164a9:	57                   	push   edi
c00164aa:	56                   	push   esi
c00164ab:	53                   	push   ebx
c00164ac:	83 ec 2c             	sub    esp,0x2c
c00164af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00164b3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00164b7:	83 f8 01             	cmp    eax,0x1
c00164ba:	19 c9                	sbb    ecx,ecx
c00164bc:	31 db                	xor    ebx,ebx
c00164be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00164c2:	89 cd                	mov    ebp,ecx
c00164c4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00164cc:	f7 d5                	not    ebp
c00164ce:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164d8:	01 d8                	add    eax,ebx
c00164da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164de:	56                   	push   esi
c00164df:	e8 b8 ff ff ff       	call   c001649c <Video::getHeight()>
c00164e4:	59                   	pop    ecx
c00164e5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164e9:	7e 70                	jle    c001655b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164ef:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164f3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164fa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164fe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016505:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016509:	89 f8                	mov    eax,edi
c001650b:	83 c0 20             	add    eax,0x20
c001650e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016512:	56                   	push   esi
c0016513:	e8 78 ff ff ff       	call   c0016490 <Video::getWidth()>
c0016518:	5a                   	pop    edx
c0016519:	39 c7                	cmp    edi,eax
c001651b:	7d 34                	jge    c0016551 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001651d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016522:	74 05                	je     c0016529 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016524:	8b 06                	mov    eax,DWORD PTR [esi]
c0016526:	55                   	push   ebp
c0016527:	eb 0d                	jmp    c0016536 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016529:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001652e:	74 12                	je     c0016542 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016530:	8b 06                	mov    eax,DWORD PTR [esi]
c0016532:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016536:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001653a:	57                   	push   edi
c001653b:	56                   	push   esi
c001653c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001653f:	83 c4 10             	add    esp,0x10
c0016542:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016546:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001654a:	47                   	inc    edi
c001654b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001654f:	75 c1                	jne    c0016512 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016551:	43                   	inc    ebx
c0016552:	83 fb 20             	cmp    ebx,0x20
c0016555:	0f 85 79 ff ff ff    	jne    c00164d4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001655b:	83 c4 2c             	add    esp,0x2c
c001655e:	5b                   	pop    ebx
c001655f:	5e                   	pop    esi
c0016560:	5f                   	pop    edi
c0016561:	5d                   	pop    ebp
c0016562:	c3                   	ret    
c0016563:	90                   	nop

c0016564 <ACPI::close(int, int, void*)>:
c0016564:	83 ec 1c             	sub    esp,0x1c
c0016567:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001656f:	74 0a                	je     c001657b <ACPI::close(int, int, void*)+0x17>
c0016571:	b8 00 00 00 00       	mov    eax,0x0
c0016576:	e9 9a 00 00 00       	jmp    c0016615 <ACPI::close(int, int, void*)+0xb1>
c001657b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016580:	75 37                	jne    c00165b9 <ACPI::close(int, int, void*)+0x55>
c0016582:	83 ec 0c             	sub    esp,0xc
c0016585:	68 78 6b 02 c0       	push   0xc0026b78
c001658a:	e8 c2 bc ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	a1 e8 9a 02 c0       	mov    eax,ds:0xc0029ae8
c0016597:	85 c0                	test   eax,eax
c0016599:	74 07                	je     c00165a2 <ACPI::close(int, int, void*)+0x3e>
c001659b:	a1 e8 9a 02 c0       	mov    eax,ds:0xc0029ae8
c00165a0:	ff d0                	call   eax
c00165a2:	83 ec 0c             	sub    esp,0xc
c00165a5:	68 2c 6c 02 c0       	push   0xc0026c2c
c00165aa:	e8 5f 24 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c00165af:	83 c4 10             	add    esp,0x10
c00165b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165b7:	eb 5c                	jmp    c0016615 <ACPI::close(int, int, void*)+0xb1>
c00165b9:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00165be:	75 50                	jne    c0016610 <ACPI::close(int, int, void*)+0xac>
c00165c0:	a1 e4 9a 02 c0       	mov    eax,ds:0xc0029ae4
c00165c5:	85 c0                	test   eax,eax
c00165c7:	74 07                	je     c00165d0 <ACPI::close(int, int, void*)+0x6c>
c00165c9:	a1 e4 9a 02 c0       	mov    eax,ds:0xc0029ae4
c00165ce:	ff d0                	call   eax
c00165d0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165d5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165da:	83 e0 02             	and    eax,0x2
c00165dd:	74 1c                	je     c00165fb <ACPI::close(int, int, void*)+0x97>
c00165df:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165ea:	89 c2                	mov    edx,eax
c00165ec:	ec                   	in     al,dx
c00165ed:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165f1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165f9:	eb da                	jmp    c00165d5 <ACPI::close(int, int, void*)+0x71>
c00165fb:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016602:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016607:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001660b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001660f:	ee                   	out    dx,al
c0016610:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016615:	83 c4 1c             	add    esp,0x1c
c0016618:	c3                   	ret    

c0016619 <findRSDP()>:
c0016619:	83 ec 1c             	sub    esp,0x1c
c001661c:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0016621:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016627:	83 e0 04             	and    eax,0x4
c001662a:	84 c0                	test   al,al
c001662c:	75 07                	jne    c0016635 <findRSDP()+0x1c>
c001662e:	b8 00 00 00 00       	mov    eax,0x0
c0016633:	eb 6a                	jmp    c001669f <findRSDP()+0x86>
c0016635:	a1 b0 94 02 c0       	mov    eax,ds:0xc00294b0
c001663a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001663f:	7f 1b                	jg     c001665c <findRSDP()+0x43>
c0016641:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0016646:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001664c:	83 e2 fb             	and    edx,0xfffffffb
c001664f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016655:	b8 00 00 00 00       	mov    eax,0x0
c001665a:	eb 43                	jmp    c001669f <findRSDP()+0x86>
c001665c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016664:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001666c:	77 2c                	ja     c001669a <findRSDP()+0x81>
c001666e:	83 ec 04             	sub    esp,0x4
c0016671:	6a 08                	push   0x8
c0016673:	68 85 6b 02 c0       	push   0xc0026b85
c0016678:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001667c:	e8 cc 9f fe ff       	call   c000064d <memcmp>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	85 c0                	test   eax,eax
c0016686:	0f 94 c0             	sete   al
c0016689:	84 c0                	test   al,al
c001668b:	74 06                	je     c0016693 <findRSDP()+0x7a>
c001668d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016691:	eb 0c                	jmp    c001669f <findRSDP()+0x86>
c0016693:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016698:	eb ca                	jmp    c0016664 <findRSDP()+0x4b>
c001669a:	b8 00 00 00 00       	mov    eax,0x0
c001669f:	83 c4 1c             	add    esp,0x1c
c00166a2:	c3                   	ret    

c00166a3 <loadACPITables(unsigned char*)>:
c00166a3:	56                   	push   esi
c00166a4:	53                   	push   ebx
c00166a5:	83 ec 44             	sub    esp,0x44
c00166a8:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00166ad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00166b3:	83 e0 04             	and    eax,0x4
c00166b6:	84 c0                	test   al,al
c00166b8:	0f 84 05 02 00 00    	je     c00168c3 <loadACPITables(unsigned char*)+0x220>
c00166be:	a0 00 9d 02 c0       	mov    al,ds:0xc0029d00
c00166c3:	84 c0                	test   al,al
c00166c5:	74 75                	je     c001673c <loadACPITables(unsigned char*)+0x99>
c00166c7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166d6:	83 e8 24             	sub    eax,0x24
c00166d9:	c1 e8 03             	shr    eax,0x3
c00166dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166e0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166ec:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166f0:	0f 8d b2 00 00 00    	jge    c00167a8 <loadACPITables(unsigned char*)+0x105>
c00166f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166fa:	83 c0 24             	add    eax,0x24
c00166fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016701:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016705:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016709:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001670d:	c1 e0 03             	shl    eax,0x3
c0016710:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016714:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016718:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001671b:	8b 00                	mov    eax,DWORD PTR [eax]
c001671d:	89 c1                	mov    ecx,eax
c001671f:	a1 ec 9a 02 c0       	mov    eax,ds:0xc0029aec
c0016724:	8d 50 01             	lea    edx,[eax+0x1]
c0016727:	89 15 ec 9a 02 c0    	mov    DWORD PTR ds:0xc0029aec,edx
c001672d:	89 ca                	mov    edx,ecx
c001672f:	89 14 c5 04 9b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd64fc],edx
c0016736:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001673a:	eb ac                	jmp    c00166e8 <loadACPITables(unsigned char*)+0x45>
c001673c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016740:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016744:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001674b:	83 e8 24             	sub    eax,0x24
c001674e:	c1 e8 02             	shr    eax,0x2
c0016751:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016755:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001675d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016761:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016765:	7d 41                	jge    c00167a8 <loadACPITables(unsigned char*)+0x105>
c0016767:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001676b:	83 c0 24             	add    eax,0x24
c001676e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016776:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001677a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001677e:	c1 e0 02             	shl    eax,0x2
c0016781:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016785:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016789:	8b 08                	mov    ecx,DWORD PTR [eax]
c001678b:	a1 ec 9a 02 c0       	mov    eax,ds:0xc0029aec
c0016790:	8d 50 01             	lea    edx,[eax+0x1]
c0016793:	89 15 ec 9a 02 c0    	mov    DWORD PTR ds:0xc0029aec,edx
c0016799:	89 ca                	mov    edx,ecx
c001679b:	89 14 c5 04 9b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd64fc],edx
c00167a2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00167a6:	eb b5                	jmp    c001675d <loadACPITables(unsigned char*)+0xba>
c00167a8:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00167b0:	a1 ec 9a 02 c0       	mov    eax,ds:0xc0029aec
c00167b5:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00167b9:	0f 8d 05 01 00 00    	jge    c00168c4 <loadACPITables(unsigned char*)+0x221>
c00167bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167c3:	8b 04 c5 04 9b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd64fc]
c00167ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167da:	25 ff 0f 00 00       	and    eax,0xfff
c00167df:	89 c6                	mov    esi,eax
c00167e1:	e8 29 ac ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00167e6:	89 c3                	mov    ebx,eax
c00167e8:	83 ec 0c             	sub    esp,0xc
c00167eb:	6a 01                	push   0x1
c00167ed:	e8 8d aa ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c00167f2:	83 c4 10             	add    esp,0x10
c00167f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167f9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167ff:	83 ec 0c             	sub    esp,0xc
c0016802:	6a 01                	push   0x1
c0016804:	6a 01                	push   0x1
c0016806:	50                   	push   eax
c0016807:	52                   	push   edx
c0016808:	53                   	push   ebx
c0016809:	e8 30 b4 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001680e:	83 c4 20             	add    esp,0x20
c0016811:	09 f0                	or     eax,esi
c0016813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016817:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001681b:	c1 e0 03             	shl    eax,0x3
c001681e:	05 00 9b 02 c0       	add    eax,0xc0029b00
c0016823:	83 ec 04             	sub    esp,0x4
c0016826:	6a 04                	push   0x4
c0016828:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001682c:	50                   	push   eax
c001682d:	e8 7e 9e fe ff       	call   c00006b0 <memcpy>
c0016832:	83 c4 10             	add    esp,0x10
c0016835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016839:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001683c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016844:	05 00 10 00 00       	add    eax,0x1000
c0016849:	c1 e8 0c             	shr    eax,0xc
c001684c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016854:	89 04 24             	mov    DWORD PTR [esp],eax
c0016857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685b:	25 ff 0f 00 00       	and    eax,0xfff
c0016860:	89 c6                	mov    esi,eax
c0016862:	e8 a8 ab ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0016867:	89 c3                	mov    ebx,eax
c0016869:	83 ec 0c             	sub    esp,0xc
c001686c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016870:	e8 0a aa ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016875:	83 c4 10             	add    esp,0x10
c0016878:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001687c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016882:	83 ec 0c             	sub    esp,0xc
c0016885:	6a 01                	push   0x1
c0016887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001688b:	50                   	push   eax
c001688c:	52                   	push   edx
c001688d:	53                   	push   ebx
c001688e:	e8 ab b3 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016893:	83 c4 20             	add    esp,0x20
c0016896:	09 f0                	or     eax,esi
c0016898:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001689c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001689f:	83 ec 0c             	sub    esp,0xc
c00168a2:	50                   	push   eax
c00168a3:	e8 31 ad ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c00168a8:	83 c4 10             	add    esp,0x10
c00168ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00168b3:	89 14 c5 04 9b 02 c0 	mov    DWORD PTR [eax*8-0x3ffd64fc],edx
c00168ba:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00168be:	e9 ed fe ff ff       	jmp    c00167b0 <loadACPITables(unsigned char*)+0x10d>
c00168c3:	90                   	nop
c00168c4:	83 c4 44             	add    esp,0x44
c00168c7:	5b                   	pop    ebx
c00168c8:	5e                   	pop    esi
c00168c9:	c3                   	ret    

c00168ca <findRSDT(unsigned char*)>:
c00168ca:	56                   	push   esi
c00168cb:	53                   	push   ebx
c00168cc:	83 ec 44             	sub    esp,0x44
c00168cf:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00168d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168da:	83 e0 04             	and    eax,0x4
c00168dd:	84 c0                	test   al,al
c00168df:	75 0a                	jne    c00168eb <findRSDT(unsigned char*)+0x21>
c00168e1:	b8 00 00 00 00       	mov    eax,0x0
c00168e6:	e9 f7 00 00 00       	jmp    c00169e2 <findRSDT(unsigned char*)+0x118>
c00168eb:	83 ec 04             	sub    esp,0x4
c00168ee:	6a 24                	push   0x24
c00168f0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168f8:	50                   	push   eax
c00168f9:	e8 b2 9d fe ff       	call   c00006b0 <memcpy>
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016905:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016909:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016911:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016919:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001691d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016921:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016925:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016929:	25 ff 0f 00 00       	and    eax,0xfff
c001692e:	89 c6                	mov    esi,eax
c0016930:	e8 da aa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0016935:	89 c3                	mov    ebx,eax
c0016937:	83 ec 0c             	sub    esp,0xc
c001693a:	6a 02                	push   0x2
c001693c:	e8 3e a9 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016941:	83 c4 10             	add    esp,0x10
c0016944:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016948:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001694e:	83 ec 0c             	sub    esp,0xc
c0016951:	6a 01                	push   0x1
c0016953:	6a 02                	push   0x2
c0016955:	50                   	push   eax
c0016956:	52                   	push   edx
c0016957:	53                   	push   ebx
c0016958:	e8 e1 b2 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001695d:	83 c4 20             	add    esp,0x20
c0016960:	09 f0                	or     eax,esi
c0016962:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016966:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001696a:	25 ff 0f 00 00       	and    eax,0xfff
c001696f:	89 c6                	mov    esi,eax
c0016971:	e8 99 aa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0016976:	89 c3                	mov    ebx,eax
c0016978:	83 ec 0c             	sub    esp,0xc
c001697b:	6a 02                	push   0x2
c001697d:	e8 fd a8 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016989:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001698f:	83 ec 0c             	sub    esp,0xc
c0016992:	6a 01                	push   0x1
c0016994:	6a 02                	push   0x2
c0016996:	50                   	push   eax
c0016997:	52                   	push   edx
c0016998:	53                   	push   ebx
c0016999:	e8 a0 b2 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001699e:	83 c4 20             	add    esp,0x20
c00169a1:	09 f0                	or     eax,esi
c00169a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169a7:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00169ac:	75 11                	jne    c00169bf <findRSDT(unsigned char*)+0xf5>
c00169ae:	c6 05 00 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d00,0x0
c00169b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169b9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169bd:	eb 1f                	jmp    c00169de <findRSDT(unsigned char*)+0x114>
c00169bf:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00169c4:	75 11                	jne    c00169d7 <findRSDT(unsigned char*)+0x10d>
c00169c6:	c6 05 00 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d00,0x1
c00169cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169d1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169d5:	eb 07                	jmp    c00169de <findRSDT(unsigned char*)+0x114>
c00169d7:	b8 00 00 00 00       	mov    eax,0x0
c00169dc:	eb 04                	jmp    c00169e2 <findRSDT(unsigned char*)+0x118>
c00169de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169e2:	83 c4 44             	add    esp,0x44
c00169e5:	5b                   	pop    ebx
c00169e6:	5e                   	pop    esi
c00169e7:	c3                   	ret    

c00169e8 <findDataTable(unsigned char*, char*)>:
c00169e8:	83 ec 1c             	sub    esp,0x1c
c00169eb:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00169f0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169f6:	83 e0 04             	and    eax,0x4
c00169f9:	84 c0                	test   al,al
c00169fb:	75 07                	jne    c0016a04 <findDataTable(unsigned char*, char*)+0x1c>
c00169fd:	b8 00 00 00 00       	mov    eax,0x0
c0016a02:	eb 7c                	jmp    c0016a80 <findDataTable(unsigned char*, char*)+0x98>
c0016a04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a0c:	a1 ec 9a 02 c0       	mov    eax,ds:0xc0029aec
c0016a11:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016a15:	7d 3a                	jge    c0016a51 <findDataTable(unsigned char*, char*)+0x69>
c0016a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a1b:	c1 e0 03             	shl    eax,0x3
c0016a1e:	05 00 9b 02 c0       	add    eax,0xc0029b00
c0016a23:	83 ec 04             	sub    esp,0x4
c0016a26:	6a 04                	push   0x4
c0016a28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a2c:	50                   	push   eax
c0016a2d:	e8 1b 9c fe ff       	call   c000064d <memcmp>
c0016a32:	83 c4 10             	add    esp,0x10
c0016a35:	85 c0                	test   eax,eax
c0016a37:	0f 94 c0             	sete   al
c0016a3a:	84 c0                	test   al,al
c0016a3c:	74 0d                	je     c0016a4b <findDataTable(unsigned char*, char*)+0x63>
c0016a3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a42:	8b 04 c5 04 9b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd64fc]
c0016a49:	eb 35                	jmp    c0016a80 <findDataTable(unsigned char*, char*)+0x98>
c0016a4b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a4f:	eb bb                	jmp    c0016a0c <findDataTable(unsigned char*, char*)+0x24>
c0016a51:	a0 00 9d 02 c0       	mov    al,ds:0xc0029d00
c0016a56:	84 c0                	test   al,al
c0016a58:	74 07                	je     c0016a61 <findDataTable(unsigned char*, char*)+0x79>
c0016a5a:	b8 58 00 00 00       	mov    eax,0x58
c0016a5f:	eb 05                	jmp    c0016a66 <findDataTable(unsigned char*, char*)+0x7e>
c0016a61:	b8 52 00 00 00       	mov    eax,0x52
c0016a66:	83 ec 04             	sub    esp,0x4
c0016a69:	50                   	push   eax
c0016a6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a6e:	68 50 6c 02 c0       	push   0xc0026c50
c0016a73:	e8 d9 b7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0016a78:	83 c4 10             	add    esp,0x10
c0016a7b:	b8 00 00 00 00       	mov    eax,0x0
c0016a80:	83 c4 1c             	add    esp,0x1c
c0016a83:	c3                   	ret    

c0016a84 <scanMADT()>:
c0016a84:	83 ec 2c             	sub    esp,0x2c
c0016a87:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0016a8c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a92:	83 e0 04             	and    eax,0x4
c0016a95:	84 c0                	test   al,al
c0016a97:	0f 84 73 03 00 00    	je     c0016e10 <scanMADT()+0x38c>
c0016a9d:	e8 77 fb ff ff       	call   c0016619 <findRSDP()>
c0016aa2:	a3 0c 9d 02 c0       	mov    ds:0xc0029d0c,eax
c0016aa7:	a1 0c 9d 02 c0       	mov    eax,ds:0xc0029d0c
c0016aac:	85 c0                	test   eax,eax
c0016aae:	75 19                	jne    c0016ac9 <scanMADT()+0x45>
c0016ab0:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0016ab5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016abb:	83 e2 fb             	and    edx,0xfffffffb
c0016abe:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ac4:	e9 4b 03 00 00       	jmp    c0016e14 <scanMADT()+0x390>
c0016ac9:	a1 0c 9d 02 c0       	mov    eax,ds:0xc0029d0c
c0016ace:	83 ec 0c             	sub    esp,0xc
c0016ad1:	50                   	push   eax
c0016ad2:	e8 f3 fd ff ff       	call   c00168ca <findRSDT(unsigned char*)>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	a3 08 9d 02 c0       	mov    ds:0xc0029d08,eax
c0016adf:	a1 08 9d 02 c0       	mov    eax,ds:0xc0029d08
c0016ae4:	85 c0                	test   eax,eax
c0016ae6:	75 19                	jne    c0016b01 <scanMADT()+0x7d>
c0016ae8:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0016aed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016af3:	83 e2 fb             	and    edx,0xfffffffb
c0016af6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016afc:	e9 13 03 00 00       	jmp    c0016e14 <scanMADT()+0x390>
c0016b01:	a1 08 9d 02 c0       	mov    eax,ds:0xc0029d08
c0016b06:	83 ec 0c             	sub    esp,0xc
c0016b09:	50                   	push   eax
c0016b0a:	e8 94 fb ff ff       	call   c00166a3 <loadACPITables(unsigned char*)>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	a1 08 9d 02 c0       	mov    eax,ds:0xc0029d08
c0016b17:	83 ec 08             	sub    esp,0x8
c0016b1a:	68 8e 6b 02 c0       	push   0xc0026b8e
c0016b1f:	50                   	push   eax
c0016b20:	e8 c3 fe ff ff       	call   c00169e8 <findDataTable(unsigned char*, char*)>
c0016b25:	83 c4 10             	add    esp,0x10
c0016b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b2c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016b31:	75 19                	jne    c0016b4c <scanMADT()+0xc8>
c0016b33:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0016b38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b3e:	83 e2 fe             	and    edx,0xfffffffe
c0016b41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b47:	e9 c8 02 00 00       	jmp    c0016e14 <scanMADT()+0x390>
c0016b4c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b5b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b5f:	0f 87 af 02 00 00    	ja     c0016e14 <scanMADT()+0x390>
c0016b65:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b6d:	0f 87 a1 02 00 00    	ja     c0016e14 <scanMADT()+0x390>
c0016b73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b7f:	8d 50 01             	lea    edx,[eax+0x1]
c0016b82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b8a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b8e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b96:	8d 50 01             	lea    edx,[eax+0x1]
c0016b99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ba1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016ba5:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016ba9:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016bae:	0f 86 5f 02 00 00    	jbe    c0016e13 <scanMADT()+0x38f>
c0016bb4:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016bb9:	75 57                	jne    c0016c12 <scanMADT()+0x18e>
c0016bbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bbf:	8d 50 01             	lea    edx,[eax+0x1]
c0016bc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bc6:	8a 15 40 9e 02 c0    	mov    dl,BYTE PTR ds:0xc0029e40
c0016bcc:	0f b6 d2             	movzx  edx,dl
c0016bcf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bd3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bd7:	88 82 80 9e 02 c0    	mov    BYTE PTR [edx-0x3ffd6180],al
c0016bdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016be1:	8d 50 01             	lea    edx,[eax+0x1]
c0016be4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016be8:	8a 15 40 9e 02 c0    	mov    dl,BYTE PTR ds:0xc0029e40
c0016bee:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016bf1:	88 0d 40 9e 02 c0    	mov    BYTE PTR ds:0xc0029e40,cl
c0016bf7:	0f b6 d2             	movzx  edx,dl
c0016bfa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bfe:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c02:	88 82 60 9e 02 c0    	mov    BYTE PTR [edx-0x3ffd61a0],al
c0016c08:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c0d:	e9 ea 01 00 00       	jmp    c0016dfc <scanMADT()+0x378>
c0016c12:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016c17:	0f 85 14 01 00 00    	jne    c0016d31 <scanMADT()+0x2ad>
c0016c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c21:	8d 50 01             	lea    edx,[eax+0x1]
c0016c24:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c28:	8a 15 10 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d10
c0016c2e:	0f b6 d2             	movzx  edx,dl
c0016c31:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c35:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c39:	88 82 20 9d 02 c0    	mov    BYTE PTR [edx-0x3ffd62e0],al
c0016c3f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016c43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c4b:	01 d0                	add    eax,edx
c0016c4d:	83 c0 2c             	add    eax,0x2c
c0016c50:	8a 00                	mov    al,BYTE PTR [eax]
c0016c52:	0f b6 d0             	movzx  edx,al
c0016c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c59:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c60:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c64:	0f b6 c0             	movzx  eax,al
c0016c67:	c1 e0 08             	shl    eax,0x8
c0016c6a:	89 d1                	mov    ecx,edx
c0016c6c:	09 c1                	or     ecx,eax
c0016c6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c72:	8d 50 02             	lea    edx,[eax+0x2]
c0016c75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c79:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c7d:	0f b6 c0             	movzx  eax,al
c0016c80:	c1 e0 10             	shl    eax,0x10
c0016c83:	09 c1                	or     ecx,eax
c0016c85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c89:	8d 50 03             	lea    edx,[eax+0x3]
c0016c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c90:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c94:	0f b6 c0             	movzx  eax,al
c0016c97:	c1 e0 18             	shl    eax,0x18
c0016c9a:	09 c1                	or     ecx,eax
c0016c9c:	89 ca                	mov    edx,ecx
c0016c9e:	a0 10 9d 02 c0       	mov    al,ds:0xc0029d10
c0016ca3:	0f b6 c0             	movzx  eax,al
c0016ca6:	89 14 85 40 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd62c0],edx
c0016cad:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016cb2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016cb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cba:	01 d0                	add    eax,edx
c0016cbc:	83 c0 2c             	add    eax,0x2c
c0016cbf:	8a 00                	mov    al,BYTE PTR [eax]
c0016cc1:	0f b6 d0             	movzx  edx,al
c0016cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cc8:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ccb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ccf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016cd3:	0f b6 c0             	movzx  eax,al
c0016cd6:	c1 e0 08             	shl    eax,0x8
c0016cd9:	89 d1                	mov    ecx,edx
c0016cdb:	09 c1                	or     ecx,eax
c0016cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ce1:	8d 50 02             	lea    edx,[eax+0x2]
c0016ce4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ce8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cec:	0f b6 c0             	movzx  eax,al
c0016cef:	c1 e0 10             	shl    eax,0x10
c0016cf2:	09 c1                	or     ecx,eax
c0016cf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cf8:	8d 50 03             	lea    edx,[eax+0x3]
c0016cfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d03:	0f b6 c0             	movzx  eax,al
c0016d06:	c1 e0 18             	shl    eax,0x18
c0016d09:	09 c1                	or     ecx,eax
c0016d0b:	89 ca                	mov    edx,ecx
c0016d0d:	a0 10 9d 02 c0       	mov    al,ds:0xc0029d10
c0016d12:	0f b6 c0             	movzx  eax,al
c0016d15:	89 14 85 c0 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6240],edx
c0016d1c:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016d21:	a0 10 9d 02 c0       	mov    al,ds:0xc0029d10
c0016d26:	40                   	inc    eax
c0016d27:	a2 10 9d 02 c0       	mov    ds:0xc0029d10,al
c0016d2c:	e9 cb 00 00 00       	jmp    c0016dfc <scanMADT()+0x378>
c0016d31:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016d36:	0f 85 a6 00 00 00    	jne    c0016de2 <scanMADT()+0x35e>
c0016d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d40:	8d 50 01             	lea    edx,[eax+0x1]
c0016d43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d4b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d4f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d57:	8d 50 01             	lea    edx,[eax+0x1]
c0016d5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d5e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d62:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d72:	01 d0                	add    eax,edx
c0016d74:	83 c0 2c             	add    eax,0x2c
c0016d77:	8a 00                	mov    al,BYTE PTR [eax]
c0016d79:	0f b6 d0             	movzx  edx,al
c0016d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d80:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d87:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d8b:	0f b6 c0             	movzx  eax,al
c0016d8e:	c1 e0 08             	shl    eax,0x8
c0016d91:	89 d1                	mov    ecx,edx
c0016d93:	09 c1                	or     ecx,eax
c0016d95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d99:	8d 50 02             	lea    edx,[eax+0x2]
c0016d9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016da0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016da4:	0f b6 c0             	movzx  eax,al
c0016da7:	c1 e0 10             	shl    eax,0x10
c0016daa:	09 c1                	or     ecx,eax
c0016dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016db0:	8d 50 03             	lea    edx,[eax+0x3]
c0016db3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016db7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016dbb:	0f b6 c0             	movzx  eax,al
c0016dbe:	c1 e0 18             	shl    eax,0x18
c0016dc1:	09 c8                	or     eax,ecx
c0016dc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dc7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dcc:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016dd1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016dd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016dda:	88 90 40 87 02 c0    	mov    BYTE PTR [eax-0x3ffd78c0],dl
c0016de0:	eb 1a                	jmp    c0016dfc <scanMADT()+0x378>
c0016de2:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016de7:	75 07                	jne    c0016df0 <scanMADT()+0x36c>
c0016de9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dee:	eb 0c                	jmp    c0016dfc <scanMADT()+0x378>
c0016df0:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016df5:	75 05                	jne    c0016dfc <scanMADT()+0x378>
c0016df7:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016dfc:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016e01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e05:	01 d0                	add    eax,edx
c0016e07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e0b:	e9 44 fd ff ff       	jmp    c0016b54 <scanMADT()+0xd0>
c0016e10:	90                   	nop
c0016e11:	eb 01                	jmp    c0016e14 <scanMADT()+0x390>
c0016e13:	90                   	nop
c0016e14:	83 c4 2c             	add    esp,0x2c
c0016e17:	c3                   	ret    

c0016e18 <ACPI::ACPI()>:
c0016e18:	83 ec 0c             	sub    esp,0xc
c0016e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e1f:	83 ec 08             	sub    esp,0x8
c0016e22:	68 93 6b 02 c0       	push   0xc0026b93
c0016e27:	50                   	push   eax
c0016e28:	e8 1f ca ff ff       	call   c001384c <Device::Device(char const*)>
c0016e2d:	83 c4 10             	add    esp,0x10
c0016e30:	ba 1c 6d 02 c0       	mov    edx,0xc0026d1c
c0016e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e39:	89 10                	mov    DWORD PTR [eax],edx
c0016e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e58:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e66:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016e6d:	e8 12 fc ff ff       	call   c0016a84 <scanMADT()>
c0016e72:	90                   	nop
c0016e73:	83 c4 0c             	add    esp,0xc
c0016e76:	c3                   	ret    
c0016e77:	90                   	nop

c0016e78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016e78:	83 ec 2c             	sub    esp,0x2c
c0016e7b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e83:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e87:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e8b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016e90:	88 d0                	mov    al,dl
c0016e92:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016e9b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016ea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ea7:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016ead:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016eb1:	0f 8d 97 00 00 00    	jge    c0016f4e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016eb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ebb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ebf:	83 c2 2a             	add    edx,0x2a
c0016ec2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016ec6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016ecb:	75 78                	jne    c0016f45 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ecd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ed1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ed5:	83 c2 2a             	add    edx,0x2a
c0016ed8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016edc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016ee0:	75 63                	jne    c0016f45 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ee2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016ee7:	74 3a                	je     c0016f23 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016ee9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ef1:	83 c2 2a             	add    edx,0x2a
c0016ef4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016ef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016efc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016eff:	39 c2                	cmp    edx,eax
c0016f01:	74 10                	je     c0016f13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016f03:	83 ec 0c             	sub    esp,0xc
c0016f06:	68 80 6c 02 c0       	push   0xc0026c80
c0016f0b:	e8 fe 1a 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0016f10:	83 c4 10             	add    esp,0x10
c0016f13:	83 ec 0c             	sub    esp,0xc
c0016f16:	68 98 6b 02 c0       	push   0xc0026b98
c0016f1b:	e8 ee 1a 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0016f20:	83 c4 10             	add    esp,0x10
c0016f23:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016f27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f2f:	83 c2 2a             	add    edx,0x2a
c0016f32:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f36:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f38:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f3b:	89 01                	mov    DWORD PTR [ecx],eax
c0016f3d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f40:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f45:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f49:	e9 55 ff ff ff       	jmp    c0016ea3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016f4e:	90                   	nop
c0016f4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f53:	83 c4 2c             	add    esp,0x2c
c0016f56:	c2 04 00             	ret    0x4
c0016f59:	90                   	nop

c0016f5a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016f5a:	56                   	push   esi
c0016f5b:	53                   	push   ebx
c0016f5c:	83 ec 14             	sub    esp,0x14
c0016f5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f63:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016f67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f6b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f70:	88 c8                	mov    al,cl
c0016f72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f76:	88 d0                	mov    al,dl
c0016f78:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f80:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016f90:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016f95:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f9a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016f9f:	83 ec 04             	sub    esp,0x4
c0016fa2:	56                   	push   esi
c0016fa3:	53                   	push   ebx
c0016fa4:	51                   	push   ecx
c0016fa5:	52                   	push   edx
c0016fa6:	50                   	push   eax
c0016fa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fab:	68 b0 6c 02 c0       	push   0xc0026cb0
c0016fb0:	e8 9c b2 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0016fb5:	83 c4 20             	add    esp,0x20
c0016fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbc:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016fc9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016fcd:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016fdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fdf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fe6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fef:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016ff5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016ff9:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017000:	83 c2 2a             	add    edx,0x2a
c0017003:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700b:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017015:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017018:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001701c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017024:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001702a:	8d 50 01             	lea    edx,[eax+0x1]
c001702d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017031:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017041:	3d 00 08 00 00       	cmp    eax,0x800
c0017046:	75 10                	jne    c0017058 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	68 a7 6b 02 c0       	push   0xc0026ba7
c0017050:	e8 b9 19 00 00       	call   c0018a0e <Krnl::panic(char const*)>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	90                   	nop
c0017059:	83 c4 14             	add    esp,0x14
c001705c:	5b                   	pop    ebx
c001705d:	5e                   	pop    esi
c001705e:	c3                   	ret    
c001705f:	90                   	nop

c0017060 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017060:	b8 00 00 00 00       	mov    eax,0x0
c0017065:	c3                   	ret    

c0017066 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017066:	83 ec 1c             	sub    esp,0x1c
c0017069:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001706d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017070:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017074:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0017079:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001707e:	83 ec 08             	sub    esp,0x8
c0017081:	52                   	push   edx
c0017082:	50                   	push   eax
c0017083:	e8 e8 76 ff ff       	call   c000e770 <Computer::readCMOS(unsigned char)>
c0017088:	83 c4 10             	add    esp,0x10
c001708b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001708f:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0017094:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017099:	83 ec 04             	sub    esp,0x4
c001709c:	6a 01                	push   0x1
c001709e:	52                   	push   edx
c001709f:	50                   	push   eax
c00170a0:	e8 e1 77 ff ff       	call   c000e886 <Computer::writeCMOS(unsigned char, unsigned char)>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	90                   	nop
c00170a9:	83 c4 1c             	add    esp,0x1c
c00170ac:	c3                   	ret    
c00170ad:	90                   	nop

c00170ae <ACPI::open(int, int, void*)>:
c00170ae:	53                   	push   ebx
c00170af:	83 ec 18             	sub    esp,0x18
c00170b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b6:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00170bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c1:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00170c7:	84 c0                	test   al,al
c00170c9:	74 60                	je     c001712b <ACPI::open(int, int, void*)+0x7d>
c00170cb:	83 ec 0c             	sub    esp,0xc
c00170ce:	68 58 01 00 00       	push   0x158
c00170d3:	e8 8a b0 ff ff       	call   c0012162 <operator new(unsigned long)>
c00170d8:	83 c4 10             	add    esp,0x10
c00170db:	89 c3                	mov    ebx,eax
c00170dd:	83 ec 0c             	sub    esp,0xc
c00170e0:	53                   	push   ebx
c00170e1:	e8 06 81 00 00       	call   c001f1ec <PCI::PCI()>
c00170e6:	83 c4 10             	add    esp,0x10
c00170e9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f1:	83 ec 08             	sub    esp,0x8
c00170f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170f8:	50                   	push   eax
c00170f9:	e8 5e c5 ff ff       	call   c001365c <Device::addChild(Device*)>
c00170fe:	83 c4 10             	add    esp,0x10
c0017101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017105:	8b 00                	mov    eax,DWORD PTR [eax]
c0017107:	83 c0 08             	add    eax,0x8
c001710a:	8b 00                	mov    eax,DWORD PTR [eax]
c001710c:	6a 00                	push   0x0
c001710e:	6a 00                	push   0x0
c0017110:	6a 00                	push   0x0
c0017112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017116:	ff d0                	call   eax
c0017118:	83 c4 10             	add    esp,0x10
c001711b:	83 ec 0c             	sub    esp,0xc
c001711e:	68 c4 6b 02 c0       	push   0xc0026bc4
c0017123:	e8 29 b1 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017128:	83 c4 10             	add    esp,0x10
c001712b:	83 ec 0c             	sub    esp,0xc
c001712e:	68 cf 6b 02 c0       	push   0xc0026bcf
c0017133:	e8 77 37 00 00       	call   c001a8af <Thr::loadKernelSymbolTable(char const*)>
c0017138:	83 c4 10             	add    esp,0x10
c001713b:	8b 1d 68 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029468
c0017141:	83 ec 08             	sub    esp,0x8
c0017144:	6a 01                	push   0x1
c0017146:	68 ed 6b 02 c0       	push   0xc0026bed
c001714b:	e8 41 42 00 00       	call   c001b391 <Thr::loadDLL(char const*, bool)>
c0017150:	83 c4 10             	add    esp,0x10
c0017153:	83 ec 08             	sub    esp,0x8
c0017156:	53                   	push   ebx
c0017157:	50                   	push   eax
c0017158:	e8 fa 43 00 00       	call   c001b557 <Thr::executeDLL(unsigned long, void*)>
c001715d:	83 c4 10             	add    esp,0x10
c0017160:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0017165:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001716b:	83 e0 04             	and    eax,0x4
c001716e:	84 c0                	test   al,al
c0017170:	0f 84 cf 00 00 00    	je     c0017245 <ACPI::open(int, int, void*)+0x197>
c0017176:	83 ec 0c             	sub    esp,0xc
c0017179:	68 14 01 00 00       	push   0x114
c001717e:	e8 df af ff ff       	call   c0012162 <operator new(unsigned long)>
c0017183:	83 c4 10             	add    esp,0x10
c0017186:	89 c3                	mov    ebx,eax
c0017188:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c001718d:	83 ec 04             	sub    esp,0x4
c0017190:	50                   	push   eax
c0017191:	68 0a 6c 02 c0       	push   0xc0026c0a
c0017196:	53                   	push   ebx
c0017197:	e8 e4 b5 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001719c:	83 c4 10             	add    esp,0x10
c001719f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00171a3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171a8:	74 17                	je     c00171c1 <ACPI::open(int, int, void*)+0x113>
c00171aa:	83 ec 0c             	sub    esp,0xc
c00171ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171b1:	e8 9c b8 ff ff       	call   c0012a52 <File::exists()>
c00171b6:	83 c4 10             	add    esp,0x10
c00171b9:	84 c0                	test   al,al
c00171bb:	74 04                	je     c00171c1 <ACPI::open(int, int, void*)+0x113>
c00171bd:	b0 01                	mov    al,0x1
c00171bf:	eb 02                	jmp    c00171c3 <ACPI::open(int, int, void*)+0x115>
c00171c1:	b0 00                	mov    al,0x0
c00171c3:	84 c0                	test   al,al
c00171c5:	74 25                	je     c00171ec <ACPI::open(int, int, void*)+0x13e>
c00171c7:	8b 1d 68 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029468
c00171cd:	83 ec 08             	sub    esp,0x8
c00171d0:	6a 01                	push   0x1
c00171d2:	68 0a 6c 02 c0       	push   0xc0026c0a
c00171d7:	e8 b5 41 00 00       	call   c001b391 <Thr::loadDLL(char const*, bool)>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	83 ec 08             	sub    esp,0x8
c00171e2:	53                   	push   ebx
c00171e3:	50                   	push   eax
c00171e4:	e8 6e 43 00 00       	call   c001b557 <Thr::executeDLL(unsigned long, void*)>
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171f1:	74 1e                	je     c0017211 <ACPI::open(int, int, void*)+0x163>
c00171f3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171f8:	74 17                	je     c0017211 <ACPI::open(int, int, void*)+0x163>
c00171fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0017200:	83 c0 08             	add    eax,0x8
c0017203:	8b 00                	mov    eax,DWORD PTR [eax]
c0017205:	83 ec 0c             	sub    esp,0xc
c0017208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001720c:	ff d0                	call   eax
c001720e:	83 c4 10             	add    esp,0x10
c0017211:	a1 08 9d 02 c0       	mov    eax,ds:0xc0029d08
c0017216:	83 ec 08             	sub    esp,0x8
c0017219:	68 27 6c 02 c0       	push   0xc0026c27
c001721e:	50                   	push   eax
c001721f:	e8 c4 f7 ff ff       	call   c00169e8 <findDataTable(unsigned char*, char*)>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001722b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0017230:	74 13                	je     c0017245 <ACPI::open(int, int, void*)+0x197>
c0017232:	83 ec 08             	sub    esp,0x8
c0017235:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001723d:	e8 24 fe ff ff       	call   c0017066 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017242:	83 c4 10             	add    esp,0x10
c0017245:	b8 00 00 00 00       	mov    eax,0x0
c001724a:	83 c4 18             	add    esp,0x18
c001724d:	5b                   	pop    ebx
c001724e:	c3                   	ret    
c001724f:	90                   	nop

c0017250 <ACPI::sleep()>:
c0017250:	83 ec 0c             	sub    esp,0xc
c0017253:	a1 e0 9a 02 c0       	mov    eax,ds:0xc0029ae0
c0017258:	85 c0                	test   eax,eax
c001725a:	74 07                	je     c0017263 <ACPI::sleep()+0x13>
c001725c:	a1 e0 9a 02 c0       	mov    eax,ds:0xc0029ae0
c0017261:	ff d0                	call   eax
c0017263:	90                   	nop
c0017264:	83 c4 0c             	add    esp,0xc
c0017267:	c3                   	ret    

c0017268 <CPU::close(int, int, void*)>:
c0017268:	31 c0                	xor    eax,eax
c001726a:	c3                   	ret    

c001726b <lookupAMDCPUName(unsigned char, unsigned char)>:
c001726b:	55                   	push   ebp
c001726c:	57                   	push   edi
c001726d:	56                   	push   esi
c001726e:	53                   	push   ebx
c001726f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017277:	89 ce                	mov    esi,ecx
c0017279:	89 d5                	mov    ebp,edx
c001727b:	80 f9 04             	cmp    cl,0x4
c001727e:	75 28                	jne    c00172a8 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0017280:	8d 42 f9             	lea    eax,[edx-0x7]
c0017283:	3c 03                	cmp    al,0x3
c0017285:	0f 86 63 01 00 00    	jbe    c00173ee <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001728b:	80 fa 03             	cmp    dl,0x3
c001728e:	0f 84 5a 01 00 00    	je     c00173ee <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0017294:	8d 7a f2             	lea    edi,[edx-0xe]
c0017297:	b8 10 89 02 c0       	mov    eax,0xc0028910
c001729c:	89 fb                	mov    ebx,edi
c001729e:	80 fb 01             	cmp    bl,0x1
c00172a1:	77 4e                	ja     c00172f1 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c00172a3:	e9 52 01 00 00       	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172a8:	80 f9 05             	cmp    cl,0x5
c00172ab:	75 4d                	jne    c00172fa <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00172ad:	b8 20 89 02 c0       	mov    eax,0xc0028920
c00172b2:	80 fa 03             	cmp    dl,0x3
c00172b5:	0f 86 3f 01 00 00    	jbe    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172bb:	8d 7a fa             	lea    edi,[edx-0x6]
c00172be:	b8 30 89 02 c0       	mov    eax,0xc0028930
c00172c3:	89 fb                	mov    ebx,edi
c00172c5:	80 fb 01             	cmp    bl,0x1
c00172c8:	0f 86 2c 01 00 00    	jbe    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172ce:	b8 40 89 02 c0       	mov    eax,0xc0028940
c00172d3:	80 fa 08             	cmp    dl,0x8
c00172d6:	0f 84 1e 01 00 00    	je     c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172dc:	89 d7                	mov    edi,edx
c00172de:	b8 50 89 02 c0       	mov    eax,0xc0028950
c00172e3:	83 e7 fb             	and    edi,0xfffffffb
c00172e6:	89 fb                	mov    ebx,edi
c00172e8:	80 fb 09             	cmp    bl,0x9
c00172eb:	0f 84 09 01 00 00    	je     c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172f1:	31 c0                	xor    eax,eax
c00172f3:	89 eb                	mov    ebx,ebp
c00172f5:	0f b6 fb             	movzx  edi,bl
c00172f8:	eb 30                	jmp    c001732a <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00172fa:	31 c0                	xor    eax,eax
c00172fc:	80 f9 06             	cmp    cl,0x6
c00172ff:	75 f2                	jne    c00172f3 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0017301:	80 fa 0a             	cmp    dl,0xa
c0017304:	77 ed                	ja     c00172f3 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0017306:	bf de 05 00 00       	mov    edi,0x5de
c001730b:	0f a3 d7             	bt     edi,edx
c001730e:	73 e3                	jae    c00172f3 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0017310:	b8 60 89 02 c0       	mov    eax,0xc0028960
c0017315:	e9 e0 00 00 00       	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001731a:	39 c7                	cmp    edi,eax
c001731c:	0f 84 d3 00 00 00    	je     c00173f5 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0017322:	40                   	inc    eax
c0017323:	3d d0 00 00 00       	cmp    eax,0xd0
c0017328:	74 09                	je     c0017333 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c001732a:	89 f3                	mov    ebx,esi
c001732c:	80 fb 0f             	cmp    bl,0xf
c001732f:	75 f1                	jne    c0017322 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0017331:	eb e7                	jmp    c001731a <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0017333:	80 f9 10             	cmp    cl,0x10
c0017336:	75 14                	jne    c001734c <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0017338:	8d 42 fc             	lea    eax,[edx-0x4]
c001733b:	83 e0 fb             	and    eax,0xfffffffb
c001733e:	3c 02                	cmp    al,0x2
c0017340:	76 34                	jbe    c0017376 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0017342:	b8 32 70 02 c0       	mov    eax,0xc0027032
c0017347:	80 fa 02             	cmp    dl,0x2
c001734a:	eb 24                	jmp    c0017370 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c001734c:	80 f9 11             	cmp    cl,0x11
c001734f:	75 13                	jne    c0017364 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0017351:	b8 32 70 02 c0       	mov    eax,0xc0027032
c0017356:	80 fa 03             	cmp    dl,0x3
c0017359:	0f 85 9b 00 00 00    	jne    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001735f:	e9 91 00 00 00       	jmp    c00173f5 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0017364:	80 f9 12             	cmp    cl,0x12
c0017367:	75 14                	jne    c001737d <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0017369:	b8 32 70 02 c0       	mov    eax,0xc0027032
c001736e:	fe ca                	dec    dl
c0017370:	0f 85 84 00 00 00    	jne    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017376:	b8 80 89 02 c0       	mov    eax,0xc0028980
c001737b:	eb 7d                	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001737d:	80 f9 14             	cmp    cl,0x14
c0017380:	75 12                	jne    c0017394 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0017382:	4a                   	dec    edx
c0017383:	b8 32 70 02 c0       	mov    eax,0xc0027032
c0017388:	80 fa 01             	cmp    dl,0x1
c001738b:	77 6d                	ja     c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001738d:	b8 90 89 02 c0       	mov    eax,0xc0028990
c0017392:	eb 66                	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017394:	80 f9 15             	cmp    cl,0x15
c0017397:	75 31                	jne    c00173ca <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0017399:	b8 a0 89 02 c0       	mov    eax,0xc00289a0
c001739e:	80 fa 01             	cmp    dl,0x1
c00173a1:	74 57                	je     c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173a3:	b8 32 70 02 c0       	mov    eax,0xc0027032
c00173a8:	80 fa 13             	cmp    dl,0x13
c00173ab:	76 0c                	jbe    c00173b9 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c00173ad:	80 fa 30             	cmp    dl,0x30
c00173b0:	75 48                	jne    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173b2:	b8 c0 89 02 c0       	mov    eax,0xc00289c0
c00173b7:	eb 41                	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173b9:	b9 04 00 09 00       	mov    ecx,0x90004
c00173be:	0f a3 d1             	bt     ecx,edx
c00173c1:	73 37                	jae    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173c3:	b8 b0 89 02 c0       	mov    eax,0xc00289b0
c00173c8:	eb 30                	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173ca:	b8 32 70 02 c0       	mov    eax,0xc0027032
c00173cf:	80 f9 16             	cmp    cl,0x16
c00173d2:	75 26                	jne    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173d4:	b8 d0 89 02 c0       	mov    eax,0xc00289d0
c00173d9:	84 d2                	test   dl,dl
c00173db:	74 1d                	je     c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173dd:	b8 32 70 02 c0       	mov    eax,0xc0027032
c00173e2:	80 fa 30             	cmp    dl,0x30
c00173e5:	75 13                	jne    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173e7:	b8 e0 89 02 c0       	mov    eax,0xc00289e0
c00173ec:	eb 0c                	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173ee:	b8 00 89 02 c0       	mov    eax,0xc0028900
c00173f3:	eb 05                	jmp    c00173fa <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173f5:	b8 70 89 02 c0       	mov    eax,0xc0028970
c00173fa:	5b                   	pop    ebx
c00173fb:	5e                   	pop    esi
c00173fc:	5f                   	pop    edi
c00173fd:	5d                   	pop    ebp
c00173fe:	c3                   	ret    

c00173ff <lookupIntelCPUName(unsigned char, unsigned char)>:
c00173ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017403:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017407:	80 f9 04             	cmp    cl,0x4
c001740a:	75 6b                	jne    c0017477 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c001740c:	b8 60 87 02 c0       	mov    eax,0xc0028760
c0017411:	80 fa 01             	cmp    dl,0x1
c0017414:	0f 86 92 02 00 00    	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001741a:	b8 70 87 02 c0       	mov    eax,0xc0028770
c001741f:	80 fa 02             	cmp    dl,0x2
c0017422:	0f 84 84 02 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017428:	b8 80 87 02 c0       	mov    eax,0xc0028780
c001742d:	80 fa 03             	cmp    dl,0x3
c0017430:	0f 84 76 02 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017436:	b8 90 87 02 c0       	mov    eax,0xc0028790
c001743b:	80 fa 04             	cmp    dl,0x4
c001743e:	0f 84 68 02 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017444:	b8 a0 87 02 c0       	mov    eax,0xc00287a0
c0017449:	80 fa 05             	cmp    dl,0x5
c001744c:	0f 84 5a 02 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017452:	b8 80 87 02 c0       	mov    eax,0xc0028780
c0017457:	80 fa 07             	cmp    dl,0x7
c001745a:	0f 84 4c 02 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017460:	83 ea 08             	sub    edx,0x8
c0017463:	b8 32 70 02 c0       	mov    eax,0xc0027032
c0017468:	80 fa 01             	cmp    dl,0x1
c001746b:	0f 87 3b 02 00 00    	ja     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017471:	b8 b0 87 02 c0       	mov    eax,0xc00287b0
c0017476:	c3                   	ret    
c0017477:	80 f9 05             	cmp    cl,0x5
c001747a:	75 45                	jne    c00174c1 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c001747c:	8d 4a ff             	lea    ecx,[edx-0x1]
c001747f:	b8 c0 87 02 c0       	mov    eax,0xc00287c0
c0017484:	80 f9 02             	cmp    cl,0x2
c0017487:	0f 86 1f 02 00 00    	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001748d:	80 fa 04             	cmp    dl,0x4
c0017490:	0f 84 f3 01 00 00    	je     c0017689 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0017496:	80 fa 07             	cmp    dl,0x7
c0017499:	0f 84 0d 02 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001749f:	b8 d0 87 02 c0       	mov    eax,0xc00287d0
c00174a4:	80 fa 08             	cmp    dl,0x8
c00174a7:	0f 84 ff 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174ad:	b8 32 70 02 c0       	mov    eax,0xc0027032
c00174b2:	80 fa 09             	cmp    dl,0x9
c00174b5:	0f 85 f1 01 00 00    	jne    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174bb:	b8 e0 87 02 c0       	mov    eax,0xc00287e0
c00174c0:	c3                   	ret    
c00174c1:	80 f9 06             	cmp    cl,0x6
c00174c4:	0f 85 85 01 00 00    	jne    c001764f <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c00174ca:	b8 f0 87 02 c0       	mov    eax,0xc00287f0
c00174cf:	80 fa 01             	cmp    dl,0x1
c00174d2:	0f 84 d4 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174d8:	8d 42 fb             	lea    eax,[edx-0x5]
c00174db:	3c 01                	cmp    al,0x1
c00174dd:	0f 86 ac 01 00 00    	jbe    c001768f <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00174e3:	80 fa 03             	cmp    dl,0x3
c00174e6:	0f 84 a3 01 00 00    	je     c001768f <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00174ec:	8d 4a f9             	lea    ecx,[edx-0x7]
c00174ef:	b8 10 88 02 c0       	mov    eax,0xc0028810
c00174f4:	80 f9 01             	cmp    cl,0x1
c00174f7:	0f 86 af 01 00 00    	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174fd:	80 fa 09             	cmp    dl,0x9
c0017500:	0f 84 8f 01 00 00    	je     c0017695 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0017506:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017509:	80 f9 01             	cmp    cl,0x1
c001750c:	0f 86 9a 01 00 00    	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017512:	b8 20 88 02 c0       	mov    eax,0xc0028820
c0017517:	80 fa 0d             	cmp    dl,0xd
c001751a:	0f 84 8c 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017520:	b8 30 88 02 c0       	mov    eax,0xc0028830
c0017525:	80 fa 0e             	cmp    dl,0xe
c0017528:	0f 84 7e 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001752e:	b8 40 88 02 c0       	mov    eax,0xc0028840
c0017533:	80 fa 0f             	cmp    dl,0xf
c0017536:	0f 84 70 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001753c:	b8 20 88 02 c0       	mov    eax,0xc0028820
c0017541:	80 fa 15             	cmp    dl,0x15
c0017544:	0f 84 62 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001754a:	8d 4a ea             	lea    ecx,[edx-0x16]
c001754d:	b8 40 88 02 c0       	mov    eax,0xc0028840
c0017552:	80 f9 01             	cmp    cl,0x1
c0017555:	0f 86 51 01 00 00    	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001755b:	80 fa 1a             	cmp    dl,0x1a
c001755e:	0f 84 37 01 00 00    	je     c001769b <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0017564:	80 fa 1c             	cmp    dl,0x1c
c0017567:	0f 84 34 01 00 00    	je     c00176a1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c001756d:	80 fa 1d             	cmp    dl,0x1d
c0017570:	0f 84 36 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017576:	b8 70 88 02 c0       	mov    eax,0xc0028870
c001757b:	80 fa 25             	cmp    dl,0x25
c001757e:	0f 84 28 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017584:	8d 4a da             	lea    ecx,[edx-0x26]
c0017587:	b8 60 88 02 c0       	mov    eax,0xc0028860
c001758c:	80 f9 01             	cmp    cl,0x1
c001758f:	0f 86 17 01 00 00    	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017595:	b8 80 88 02 c0       	mov    eax,0xc0028880
c001759a:	80 fa 2a             	cmp    dl,0x2a
c001759d:	0f 84 09 01 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175a3:	b8 70 88 02 c0       	mov    eax,0xc0028870
c00175a8:	80 fa 2c             	cmp    dl,0x2c
c00175ab:	0f 84 fb 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175b1:	b8 80 88 02 c0       	mov    eax,0xc0028880
c00175b6:	80 fa 2d             	cmp    dl,0x2d
c00175b9:	0f 84 ed 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175bf:	b8 50 88 02 c0       	mov    eax,0xc0028850
c00175c4:	80 fa 2e             	cmp    dl,0x2e
c00175c7:	0f 84 df 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175cd:	b8 70 88 02 c0       	mov    eax,0xc0028870
c00175d2:	80 fa 2f             	cmp    dl,0x2f
c00175d5:	0f 84 d1 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175db:	8d 4a cb             	lea    ecx,[edx-0x35]
c00175de:	b8 60 88 02 c0       	mov    eax,0xc0028860
c00175e3:	80 f9 01             	cmp    cl,0x1
c00175e6:	0f 86 c0 00 00 00    	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175ec:	b8 90 88 02 c0       	mov    eax,0xc0028890
c00175f1:	80 fa 37             	cmp    dl,0x37
c00175f4:	0f 84 b2 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175fa:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c00175ff:	80 fa 3a             	cmp    dl,0x3a
c0017602:	0f 84 a4 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017608:	b8 b0 88 02 c0       	mov    eax,0xc00288b0
c001760d:	80 fa 3c             	cmp    dl,0x3c
c0017610:	0f 84 96 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017616:	b8 c0 88 02 c0       	mov    eax,0xc00288c0
c001761b:	80 fa 3d             	cmp    dl,0x3d
c001761e:	0f 84 88 00 00 00    	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017624:	b8 a0 88 02 c0       	mov    eax,0xc00288a0
c0017629:	80 fa 3e             	cmp    dl,0x3e
c001762c:	74 7e                	je     c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001762e:	8d 42 bb             	lea    eax,[edx-0x45]
c0017631:	3c 01                	cmp    al,0x1
c0017633:	76 72                	jbe    c00176a7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0017635:	80 fa 3f             	cmp    dl,0x3f
c0017638:	74 6d                	je     c00176a7 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c001763a:	80 fa 4a             	cmp    dl,0x4a
c001763d:	74 0a                	je     c0017649 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c001763f:	b8 32 70 02 c0       	mov    eax,0xc0027032
c0017644:	80 fa 4d             	cmp    dl,0x4d
c0017647:	75 63                	jne    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017649:	b8 90 88 02 c0       	mov    eax,0xc0028890
c001764e:	c3                   	ret    
c001764f:	b8 32 70 02 c0       	mov    eax,0xc0027032
c0017654:	80 f9 0b             	cmp    cl,0xb
c0017657:	75 0a                	jne    c0017663 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0017659:	fe ca                	dec    dl
c001765b:	75 4f                	jne    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001765d:	b8 d0 88 02 c0       	mov    eax,0xc00288d0
c0017662:	c3                   	ret    
c0017663:	80 f9 0f             	cmp    cl,0xf
c0017666:	75 44                	jne    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017668:	b8 e0 88 02 c0       	mov    eax,0xc00288e0
c001766d:	80 fa 02             	cmp    dl,0x2
c0017670:	76 3a                	jbe    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017672:	8d 42 fd             	lea    eax,[edx-0x3]
c0017675:	3c 01                	cmp    al,0x1
c0017677:	76 0a                	jbe    c0017683 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0017679:	b8 32 70 02 c0       	mov    eax,0xc0027032
c001767e:	80 fa 06             	cmp    dl,0x6
c0017681:	75 29                	jne    c00176ac <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017683:	b8 f0 88 02 c0       	mov    eax,0xc00288f0
c0017688:	c3                   	ret    
c0017689:	b8 d0 87 02 c0       	mov    eax,0xc00287d0
c001768e:	c3                   	ret    
c001768f:	b8 00 88 02 c0       	mov    eax,0xc0028800
c0017694:	c3                   	ret    
c0017695:	b8 20 88 02 c0       	mov    eax,0xc0028820
c001769a:	c3                   	ret    
c001769b:	b8 50 88 02 c0       	mov    eax,0xc0028850
c00176a0:	c3                   	ret    
c00176a1:	b8 60 88 02 c0       	mov    eax,0xc0028860
c00176a6:	c3                   	ret    
c00176a7:	b8 b0 88 02 c0       	mov    eax,0xc00288b0
c00176ac:	c3                   	ret    

c00176ad <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00176ad:	60                   	pusha  
c00176ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176ba:	9c                   	pushf  
c00176bb:	fa                   	cli    
c00176bc:	0f 09                	wbinvd 
c00176be:	0f 30                	wrmsr  
c00176c0:	9d                   	popf   
c00176c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176c5:	89 02                	mov    DWORD PTR [edx],eax
c00176c7:	61                   	popa   
c00176c8:	c3                   	ret    

c00176c9 <AMD_K6_read_msr(unsigned int, REGS*)>:
c00176c9:	60                   	pusha  
c00176ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176ce:	9c                   	pushf  
c00176cf:	fa                   	cli    
c00176d0:	0f 09                	wbinvd 
c00176d2:	31 c0                	xor    eax,eax
c00176d4:	31 d2                	xor    edx,edx
c00176d6:	0f 32                	rdmsr  
c00176d8:	9d                   	popf   
c00176d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176dd:	89 02                	mov    DWORD PTR [edx],eax
c00176df:	61                   	popa   
c00176e0:	c3                   	ret    

c00176e1 <AMD_K6_writeback(int, int, int)>:
c00176e1:	56                   	push   esi
c00176e2:	53                   	push   ebx
c00176e3:	83 ec 10             	sub    esp,0x10
c00176e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176ea:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00176ef:	75 5d                	jne    c001774e <AMD_K6_writeback(int, int, int)+0x6d>
c00176f1:	83 f8 08             	cmp    eax,0x8
c00176f4:	75 09                	jne    c00176ff <AMD_K6_writeback(int, int, int)+0x1e>
c00176f6:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00176fb:	7e 13                	jle    c0017710 <AMD_K6_writeback(int, int, int)+0x2f>
c00176fd:	eb 30                	jmp    c001772f <AMD_K6_writeback(int, int, int)+0x4e>
c00176ff:	83 f8 06             	cmp    eax,0x6
c0017702:	7c 4a                	jl     c001774e <AMD_K6_writeback(int, int, int)+0x6d>
c0017704:	83 f8 07             	cmp    eax,0x7
c0017707:	7e 07                	jle    c0017710 <AMD_K6_writeback(int, int, int)+0x2f>
c0017709:	83 f8 09             	cmp    eax,0x9
c001770c:	74 21                	je     c001772f <AMD_K6_writeback(int, int, int)+0x4e>
c001770e:	eb 3e                	jmp    c001774e <AMD_K6_writeback(int, int, int)+0x6d>
c0017710:	89 e6                	mov    esi,esp
c0017712:	8b 1d a4 94 02 c0    	mov    ebx,DWORD PTR ds:0xc00294a4
c0017718:	56                   	push   esi
c0017719:	c1 eb 15             	shr    ebx,0x15
c001771c:	68 82 00 00 c0       	push   0xc0000082
c0017721:	83 e3 7e             	and    ebx,0x7e
c0017724:	e8 a0 ff ff ff       	call   c00176c9 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017729:	56                   	push   esi
c001772a:	6a 00                	push   0x0
c001772c:	53                   	push   ebx
c001772d:	eb 12                	jmp    c0017741 <AMD_K6_writeback(int, int, int)+0x60>
c001772f:	89 e3                	mov    ebx,esp
c0017731:	53                   	push   ebx
c0017732:	68 82 00 00 c0       	push   0xc0000082
c0017737:	e8 8d ff ff ff       	call   c00176c9 <AMD_K6_read_msr(unsigned int, REGS*)>
c001773c:	53                   	push   ebx
c001773d:	6a 00                	push   0x0
c001773f:	6a 00                	push   0x0
c0017741:	68 82 00 00 c0       	push   0xc0000082
c0017746:	e8 62 ff ff ff       	call   c00176ad <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001774b:	83 c4 18             	add    esp,0x18
c001774e:	83 c4 10             	add    esp,0x10
c0017751:	5b                   	pop    ebx
c0017752:	5e                   	pop    esi
c0017753:	c3                   	ret    

c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017754:	55                   	push   ebp
c0017755:	57                   	push   edi
c0017756:	56                   	push   esi
c0017757:	53                   	push   ebx
c0017758:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001775c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017760:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017764:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017768:	39 05 00 8a 02 c0    	cmp    DWORD PTR ds:0xc0028a00,eax
c001776e:	75 23                	jne    c0017793 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017770:	a1 ac 9e 02 c0       	mov    eax,ds:0xc0029eac
c0017775:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017779:	89 06                	mov    DWORD PTR [esi],eax
c001777b:	a1 a8 9e 02 c0       	mov    eax,ds:0xc0029ea8
c0017780:	89 07                	mov    DWORD PTR [edi],eax
c0017782:	a1 a4 9e 02 c0       	mov    eax,ds:0xc0029ea4
c0017787:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001778a:	a1 a0 9e 02 c0       	mov    eax,ds:0xc0029ea0
c001778f:	89 02                	mov    DWORD PTR [edx],eax
c0017791:	eb 3f                	jmp    c00177d2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017793:	31 c9                	xor    ecx,ecx
c0017795:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017799:	0f a2                	cpuid  
c001779b:	89 06                	mov    DWORD PTR [esi],eax
c001779d:	89 1f                	mov    DWORD PTR [edi],ebx
c001779f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177a3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00177a6:	89 10                	mov    DWORD PTR [eax],edx
c00177a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177ac:	a3 00 8a 02 c0       	mov    ds:0xc0028a00,eax
c00177b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00177b3:	a3 ac 9e 02 c0       	mov    ds:0xc0029eac,eax
c00177b8:	8b 07                	mov    eax,DWORD PTR [edi]
c00177ba:	a3 a8 9e 02 c0       	mov    ds:0xc0029ea8,eax
c00177bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00177c2:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c00177c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00177cd:	a3 a0 9e 02 c0       	mov    ds:0xc0029ea0,eax
c00177d2:	5b                   	pop    ebx
c00177d3:	5e                   	pop    esi
c00177d4:	5f                   	pop    edi
c00177d5:	5d                   	pop    ebp
c00177d6:	c3                   	ret    

c00177d7 <cpuidCheckEDX(unsigned int)>:
c00177d7:	83 ec 10             	sub    esp,0x10
c00177da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177de:	50                   	push   eax
c00177df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e3:	50                   	push   eax
c00177e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e8:	50                   	push   eax
c00177e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ed:	50                   	push   eax
c00177ee:	6a 01                	push   0x1
c00177f0:	e8 5f ff ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177f9:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00177fd:	0f 95 c0             	setne  al
c0017800:	83 c4 24             	add    esp,0x24
c0017803:	c3                   	ret    

c0017804 <cpuidCheckECX(unsigned int)>:
c0017804:	83 ec 10             	sub    esp,0x10
c0017807:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001780b:	50                   	push   eax
c001780c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017810:	50                   	push   eax
c0017811:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017815:	50                   	push   eax
c0017816:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001781a:	50                   	push   eax
c001781b:	6a 01                	push   0x1
c001781d:	e8 32 ff ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017822:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017826:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001782a:	0f 95 c0             	setne  al
c001782d:	83 c4 24             	add    esp,0x24
c0017830:	c3                   	ret    

c0017831 <cpuidCheckExtendedEBX(unsigned int)>:
c0017831:	83 ec 10             	sub    esp,0x10
c0017834:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017838:	50                   	push   eax
c0017839:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001783d:	50                   	push   eax
c001783e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017842:	50                   	push   eax
c0017843:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017847:	50                   	push   eax
c0017848:	6a 07                	push   0x7
c001784a:	e8 05 ff ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001784f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017853:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017857:	0f 95 c0             	setne  al
c001785a:	83 c4 24             	add    esp,0x24
c001785d:	c3                   	ret    

c001785e <cpuidCheckExtendedECX(unsigned int)>:
c001785e:	83 ec 10             	sub    esp,0x10
c0017861:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017865:	50                   	push   eax
c0017866:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001786a:	50                   	push   eax
c001786b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001786f:	50                   	push   eax
c0017870:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017874:	50                   	push   eax
c0017875:	6a 07                	push   0x7
c0017877:	e8 d8 fe ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001787c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017880:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017884:	0f 95 c0             	setne  al
c0017887:	83 c4 24             	add    esp,0x24
c001788a:	c3                   	ret    

c001788b <getCPUNumber()>:
c001788b:	31 c0                	xor    eax,eax
c001788d:	c3                   	ret    

c001788e <thisCPU()>:
c001788e:	e8 f8 ff ff ff       	call   c001788b <getCPUNumber()>
c0017893:	8b 15 68 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029468
c0017899:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00178a0:	c3                   	ret    
c00178a1:	90                   	nop

c00178a2 <CPU::CPU()>:
c00178a2:	83 ec 0c             	sub    esp,0xc
c00178a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a9:	83 ec 08             	sub    esp,0x8
c00178ac:	68 32 70 02 c0       	push   0xc0027032
c00178b1:	50                   	push   eax
c00178b2:	e8 95 bf ff ff       	call   c001384c <Device::Device(char const*)>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	ba 0c 71 02 c0       	mov    edx,0xc002710c
c00178bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c3:	89 10                	mov    DWORD PTR [eax],edx
c00178c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00178d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d7:	05 78 01 00 00       	add    eax,0x178
c00178dc:	83 ec 0c             	sub    esp,0xc
c00178df:	50                   	push   eax
c00178e0:	e8 8b 70 ff ff       	call   c000e970 <GDT::GDT()>
c00178e5:	83 c4 10             	add    esp,0x10
c00178e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ec:	05 7c 09 00 00       	add    eax,0x97c
c00178f1:	83 ec 0c             	sub    esp,0xc
c00178f4:	50                   	push   eax
c00178f5:	e8 d6 72 ff ff       	call   c000ebd0 <IDT::IDT()>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017901:	05 7c 11 00 00       	add    eax,0x117c
c0017906:	83 ec 0c             	sub    esp,0xc
c0017909:	50                   	push   eax
c001790a:	e8 05 93 ff ff       	call   c0010c14 <TSS::TSS()>
c001790f:	83 c4 10             	add    esp,0x10
c0017912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017916:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001791d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017921:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001792b:	90                   	nop
c001792c:	83 c4 0c             	add    esp,0xc
c001792f:	c3                   	ret    

c0017930 <CPU::displayFeatures()>:
c0017930:	53                   	push   ebx
c0017931:	83 ec 10             	sub    esp,0x10
c0017934:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017938:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001793e:	68 40 6d 02 c0       	push   0xc0026d40
c0017943:	e8 09 a9 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017948:	59                   	pop    ecx
c0017949:	58                   	pop    eax
c001794a:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017950:	50                   	push   eax
c0017951:	68 51 6d 02 c0       	push   0xc0026d51
c0017956:	e8 f6 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001795b:	58                   	pop    eax
c001795c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017962:	5a                   	pop    edx
c0017963:	c1 e8 0e             	shr    eax,0xe
c0017966:	0f b6 c0             	movzx  eax,al
c0017969:	50                   	push   eax
c001796a:	68 62 6d 02 c0       	push   0xc0026d62
c001796f:	e8 dd a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017974:	59                   	pop    ecx
c0017975:	58                   	pop    eax
c0017976:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001797c:	66 c1 e8 06          	shr    ax,0x6
c0017980:	0f b6 c0             	movzx  eax,al
c0017983:	50                   	push   eax
c0017984:	68 73 6d 02 c0       	push   0xc0026d73
c0017989:	e8 c3 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001798e:	c7 04 24 86 71 02 c0 	mov    DWORD PTR [esp],0xc0027186
c0017995:	e8 b7 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c00179a2:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00179a9:	74 05                	je     c00179b0 <CPU::displayFeatures()+0x80>
c00179ab:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c00179b0:	52                   	push   edx
c00179b1:	52                   	push   edx
c00179b2:	50                   	push   eax
c00179b3:	68 84 6d 02 c0       	push   0xc0026d84
c00179b8:	e8 94 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00179bd:	83 c4 10             	add    esp,0x10
c00179c0:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c00179c5:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00179cc:	78 05                	js     c00179d3 <CPU::displayFeatures()+0xa3>
c00179ce:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c00179d3:	51                   	push   ecx
c00179d4:	51                   	push   ecx
c00179d5:	50                   	push   eax
c00179d6:	68 9b 6d 02 c0       	push   0xc0026d9b
c00179db:	e8 71 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c00179e8:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00179ef:	75 05                	jne    c00179f6 <CPU::displayFeatures()+0xc6>
c00179f1:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c00179f6:	52                   	push   edx
c00179f7:	52                   	push   edx
c00179f8:	50                   	push   eax
c00179f9:	68 b2 6d 02 c0       	push   0xc0026db2
c00179fe:	e8 4e a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a03:	83 c4 10             	add    esp,0x10
c0017a06:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017a0b:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017a12:	75 05                	jne    c0017a19 <CPU::displayFeatures()+0xe9>
c0017a14:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017a19:	51                   	push   ecx
c0017a1a:	51                   	push   ecx
c0017a1b:	50                   	push   eax
c0017a1c:	68 c9 6d 02 c0       	push   0xc0026dc9
c0017a21:	e8 2b a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a26:	83 c4 10             	add    esp,0x10
c0017a29:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017a2e:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a35:	75 05                	jne    c0017a3c <CPU::displayFeatures()+0x10c>
c0017a37:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017a3c:	52                   	push   edx
c0017a3d:	52                   	push   edx
c0017a3e:	50                   	push   eax
c0017a3f:	68 e0 6d 02 c0       	push   0xc0026de0
c0017a44:	e8 08 a8 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a49:	83 c4 10             	add    esp,0x10
c0017a4c:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017a51:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a58:	75 05                	jne    c0017a5f <CPU::displayFeatures()+0x12f>
c0017a5a:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017a5f:	51                   	push   ecx
c0017a60:	51                   	push   ecx
c0017a61:	50                   	push   eax
c0017a62:	68 f7 6d 02 c0       	push   0xc0026df7
c0017a67:	e8 e5 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a6c:	83 c4 10             	add    esp,0x10
c0017a6f:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017a74:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017a7b:	75 05                	jne    c0017a82 <CPU::displayFeatures()+0x152>
c0017a7d:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017a82:	52                   	push   edx
c0017a83:	52                   	push   edx
c0017a84:	50                   	push   eax
c0017a85:	68 0e 6e 02 c0       	push   0xc0026e0e
c0017a8a:	e8 c2 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017a8f:	83 c4 10             	add    esp,0x10
c0017a92:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017a97:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a9e:	75 05                	jne    c0017aa5 <CPU::displayFeatures()+0x175>
c0017aa0:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017aa5:	51                   	push   ecx
c0017aa6:	51                   	push   ecx
c0017aa7:	50                   	push   eax
c0017aa8:	68 25 6e 02 c0       	push   0xc0026e25
c0017aad:	e8 9f a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017ab2:	83 c4 10             	add    esp,0x10
c0017ab5:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017aba:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017ac1:	75 05                	jne    c0017ac8 <CPU::displayFeatures()+0x198>
c0017ac3:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017ac8:	52                   	push   edx
c0017ac9:	52                   	push   edx
c0017aca:	50                   	push   eax
c0017acb:	68 3c 6e 02 c0       	push   0xc0026e3c
c0017ad0:	e8 7c a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017ad5:	83 c4 10             	add    esp,0x10
c0017ad8:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017add:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017ae4:	75 05                	jne    c0017aeb <CPU::displayFeatures()+0x1bb>
c0017ae6:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017aeb:	51                   	push   ecx
c0017aec:	51                   	push   ecx
c0017aed:	50                   	push   eax
c0017aee:	68 53 6e 02 c0       	push   0xc0026e53
c0017af3:	e8 59 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017af8:	83 c4 10             	add    esp,0x10
c0017afb:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017b00:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017b07:	75 05                	jne    c0017b0e <CPU::displayFeatures()+0x1de>
c0017b09:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017b0e:	52                   	push   edx
c0017b0f:	52                   	push   edx
c0017b10:	50                   	push   eax
c0017b11:	68 6a 6e 02 c0       	push   0xc0026e6a
c0017b16:	e8 36 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b1b:	83 c4 10             	add    esp,0x10
c0017b1e:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017b23:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017b2a:	75 05                	jne    c0017b31 <CPU::displayFeatures()+0x201>
c0017b2c:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017b31:	51                   	push   ecx
c0017b32:	51                   	push   ecx
c0017b33:	50                   	push   eax
c0017b34:	68 81 6e 02 c0       	push   0xc0026e81
c0017b39:	e8 13 a7 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b3e:	83 c4 10             	add    esp,0x10
c0017b41:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017b46:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b4d:	75 05                	jne    c0017b54 <CPU::displayFeatures()+0x224>
c0017b4f:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017b54:	52                   	push   edx
c0017b55:	52                   	push   edx
c0017b56:	50                   	push   eax
c0017b57:	68 98 6e 02 c0       	push   0xc0026e98
c0017b5c:	e8 f0 a6 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b61:	83 c4 10             	add    esp,0x10
c0017b64:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017b69:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017b70:	78 05                	js     c0017b77 <CPU::displayFeatures()+0x247>
c0017b72:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017b77:	51                   	push   ecx
c0017b78:	51                   	push   ecx
c0017b79:	50                   	push   eax
c0017b7a:	68 af 6e 02 c0       	push   0xc0026eaf
c0017b7f:	e8 cd a6 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017b84:	83 c4 10             	add    esp,0x10
c0017b87:	b8 58 5a 02 c0       	mov    eax,0xc0025a58
c0017b8c:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017b93:	75 05                	jne    c0017b9a <CPU::displayFeatures()+0x26a>
c0017b95:	b8 5c 5a 02 c0       	mov    eax,0xc0025a5c
c0017b9a:	52                   	push   edx
c0017b9b:	52                   	push   edx
c0017b9c:	50                   	push   eax
c0017b9d:	68 c6 6e 02 c0       	push   0xc0026ec6
c0017ba2:	e8 aa a6 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0017ba7:	83 c4 18             	add    esp,0x18
c0017baa:	5b                   	pop    ebx
c0017bab:	c3                   	ret    

c0017bac <CPU::detectFeatures()>:
c0017bac:	55                   	push   ebp
c0017bad:	57                   	push   edi
c0017bae:	56                   	push   esi
c0017baf:	53                   	push   ebx
c0017bb0:	83 ec 50             	sub    esp,0x50
c0017bb3:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017bb7:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017bc1:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017bc8:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017bce:	6a 0d                	push   0xd
c0017bd0:	6a 00                	push   0x0
c0017bd2:	57                   	push   edi
c0017bd3:	e8 0e 8b fe ff       	call   c00006e6 <memset>
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0017be0:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017be7:	0f 84 20 09 00 00    	je     c001850d <CPU::detectFeatures()+0x961>
c0017bed:	83 ec 0c             	sub    esp,0xc
c0017bf0:	6a 10                	push   0x10
c0017bf2:	e8 e0 fb ff ff       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c0017bf7:	83 e0 01             	and    eax,0x1
c0017bfa:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bfd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c03:	83 e0 fd             	and    eax,0xfffffffd
c0017c06:	09 d0                	or     eax,edx
c0017c08:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c0e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017c15:	e8 bd fb ff ff       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c0017c1a:	83 e0 01             	and    eax,0x1
c0017c1d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017c24:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c2a:	83 e0 fb             	and    eax,0xfffffffb
c0017c2d:	09 d0                	or     eax,edx
c0017c2f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c35:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c3c:	e8 96 fb ff ff       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c0017c41:	83 e0 01             	and    eax,0x1
c0017c44:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c4b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c51:	83 e0 f7             	and    eax,0xfffffff7
c0017c54:	09 d0                	or     eax,edx
c0017c56:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c5c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c63:	e8 6f fb ff ff       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c0017c68:	83 e0 01             	and    eax,0x1
c0017c6b:	c1 e0 04             	shl    eax,0x4
c0017c6e:	88 c2                	mov    dl,al
c0017c70:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c76:	83 e0 ef             	and    eax,0xffffffef
c0017c79:	09 d0                	or     eax,edx
c0017c7b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c81:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017c88:	e8 4a fb ff ff       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c0017c8d:	83 e0 01             	and    eax,0x1
c0017c90:	c1 e0 05             	shl    eax,0x5
c0017c93:	88 c2                	mov    dl,al
c0017c95:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c9b:	83 e0 df             	and    eax,0xffffffdf
c0017c9e:	09 d0                	or     eax,edx
c0017ca0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017ca6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017cad:	e8 25 fb ff ff       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c0017cb2:	83 e0 01             	and    eax,0x1
c0017cb5:	8d 14 00             	lea    edx,[eax+eax*1]
c0017cb8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017cbe:	83 e0 fd             	and    eax,0xfffffffd
c0017cc1:	09 d0                	or     eax,edx
c0017cc3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017cc9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017cd0:	e8 02 fb ff ff       	call   c00177d7 <cpuidCheckEDX(unsigned int)>
c0017cd5:	83 e0 01             	and    eax,0x1
c0017cd8:	c1 e0 06             	shl    eax,0x6
c0017cdb:	88 c2                	mov    dl,al
c0017cdd:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017ce3:	83 e0 bf             	and    eax,0xffffffbf
c0017ce6:	09 d0                	or     eax,edx
c0017ce8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017cee:	58                   	pop    eax
c0017cef:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017cf3:	56                   	push   esi
c0017cf4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017cf8:	55                   	push   ebp
c0017cf9:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017cfd:	50                   	push   eax
c0017cfe:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017d02:	52                   	push   edx
c0017d03:	6a 00                	push   0x0
c0017d05:	e8 4a fa ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d0a:	83 c4 1c             	add    esp,0x1c
c0017d0d:	6a 04                	push   0x4
c0017d0f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d13:	50                   	push   eax
c0017d14:	57                   	push   edi
c0017d15:	e8 96 89 fe ff       	call   c00006b0 <memcpy>
c0017d1a:	83 c4 0c             	add    esp,0xc
c0017d1d:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017d23:	6a 04                	push   0x4
c0017d25:	56                   	push   esi
c0017d26:	50                   	push   eax
c0017d27:	e8 84 89 fe ff       	call   c00006b0 <memcpy>
c0017d2c:	83 c4 0c             	add    esp,0xc
c0017d2f:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d35:	6a 04                	push   0x4
c0017d37:	55                   	push   ebp
c0017d38:	50                   	push   eax
c0017d39:	e8 72 89 fe ff       	call   c00006b0 <memcpy>
c0017d3e:	58                   	pop    eax
c0017d3f:	5a                   	pop    edx
c0017d40:	68 dd 6e 02 c0       	push   0xc0026edd
c0017d45:	57                   	push   edi
c0017d46:	e8 8b 8a fe ff       	call   c00007d6 <strcmp>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	85 c0                	test   eax,eax
c0017d50:	75 0f                	jne    c0017d61 <CPU::detectFeatures()+0x1b5>
c0017d52:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d5c:	e9 22 02 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017d61:	50                   	push   eax
c0017d62:	50                   	push   eax
c0017d63:	68 ea 6e 02 c0       	push   0xc0026eea
c0017d68:	57                   	push   edi
c0017d69:	e8 68 8a fe ff       	call   c00007d6 <strcmp>
c0017d6e:	83 c4 10             	add    esp,0x10
c0017d71:	85 c0                	test   eax,eax
c0017d73:	74 dd                	je     c0017d52 <CPU::detectFeatures()+0x1a6>
c0017d75:	51                   	push   ecx
c0017d76:	51                   	push   ecx
c0017d77:	68 f7 6e 02 c0       	push   0xc0026ef7
c0017d7c:	57                   	push   edi
c0017d7d:	e8 54 8a fe ff       	call   c00007d6 <strcmp>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	85 c0                	test   eax,eax
c0017d87:	74 2a                	je     c0017db3 <CPU::detectFeatures()+0x207>
c0017d89:	52                   	push   edx
c0017d8a:	52                   	push   edx
c0017d8b:	68 04 6f 02 c0       	push   0xc0026f04
c0017d90:	57                   	push   edi
c0017d91:	e8 40 8a fe ff       	call   c00007d6 <strcmp>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	85 c0                	test   eax,eax
c0017d9b:	74 16                	je     c0017db3 <CPU::detectFeatures()+0x207>
c0017d9d:	50                   	push   eax
c0017d9e:	50                   	push   eax
c0017d9f:	68 11 6f 02 c0       	push   0xc0026f11
c0017da4:	57                   	push   edi
c0017da5:	e8 2c 8a fe ff       	call   c00007d6 <strcmp>
c0017daa:	83 c4 10             	add    esp,0x10
c0017dad:	85 c0                	test   eax,eax
c0017daf:	74 48                	je     c0017df9 <CPU::detectFeatures()+0x24d>
c0017db1:	eb 0f                	jmp    c0017dc2 <CPU::detectFeatures()+0x216>
c0017db3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017dbd:	e9 c1 01 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017dc2:	50                   	push   eax
c0017dc3:	50                   	push   eax
c0017dc4:	68 1e 6f 02 c0       	push   0xc0026f1e
c0017dc9:	57                   	push   edi
c0017dca:	e8 07 8a fe ff       	call   c00007d6 <strcmp>
c0017dcf:	83 c4 10             	add    esp,0x10
c0017dd2:	85 c0                	test   eax,eax
c0017dd4:	74 23                	je     c0017df9 <CPU::detectFeatures()+0x24d>
c0017dd6:	50                   	push   eax
c0017dd7:	50                   	push   eax
c0017dd8:	68 2b 6f 02 c0       	push   0xc0026f2b
c0017ddd:	57                   	push   edi
c0017dde:	e8 f3 89 fe ff       	call   c00007d6 <strcmp>
c0017de3:	83 c4 10             	add    esp,0x10
c0017de6:	85 c0                	test   eax,eax
c0017de8:	75 1e                	jne    c0017e08 <CPU::detectFeatures()+0x25c>
c0017dea:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017df4:	e9 8a 01 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017df9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017e03:	e9 7b 01 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017e08:	50                   	push   eax
c0017e09:	50                   	push   eax
c0017e0a:	68 38 6f 02 c0       	push   0xc0026f38
c0017e0f:	57                   	push   edi
c0017e10:	e8 c1 89 fe ff       	call   c00007d6 <strcmp>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	85 c0                	test   eax,eax
c0017e1a:	75 0f                	jne    c0017e2b <CPU::detectFeatures()+0x27f>
c0017e1c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017e26:	e9 58 01 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017e2b:	50                   	push   eax
c0017e2c:	50                   	push   eax
c0017e2d:	68 f7 6e 02 c0       	push   0xc0026ef7
c0017e32:	57                   	push   edi
c0017e33:	e8 9e 89 fe ff       	call   c00007d6 <strcmp>
c0017e38:	83 c4 10             	add    esp,0x10
c0017e3b:	85 c0                	test   eax,eax
c0017e3d:	75 0f                	jne    c0017e4e <CPU::detectFeatures()+0x2a2>
c0017e3f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e49:	e9 35 01 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017e4e:	50                   	push   eax
c0017e4f:	50                   	push   eax
c0017e50:	68 45 6f 02 c0       	push   0xc0026f45
c0017e55:	57                   	push   edi
c0017e56:	e8 7b 89 fe ff       	call   c00007d6 <strcmp>
c0017e5b:	83 c4 10             	add    esp,0x10
c0017e5e:	85 c0                	test   eax,eax
c0017e60:	75 0f                	jne    c0017e71 <CPU::detectFeatures()+0x2c5>
c0017e62:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017e6c:	e9 12 01 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017e71:	51                   	push   ecx
c0017e72:	51                   	push   ecx
c0017e73:	68 52 6f 02 c0       	push   0xc0026f52
c0017e78:	57                   	push   edi
c0017e79:	e8 58 89 fe ff       	call   c00007d6 <strcmp>
c0017e7e:	83 c4 10             	add    esp,0x10
c0017e81:	85 c0                	test   eax,eax
c0017e83:	75 0f                	jne    c0017e94 <CPU::detectFeatures()+0x2e8>
c0017e85:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017e8f:	e9 ef 00 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017e94:	52                   	push   edx
c0017e95:	52                   	push   edx
c0017e96:	68 5f 6f 02 c0       	push   0xc0026f5f
c0017e9b:	57                   	push   edi
c0017e9c:	e8 35 89 fe ff       	call   c00007d6 <strcmp>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	85 c0                	test   eax,eax
c0017ea6:	75 0f                	jne    c0017eb7 <CPU::detectFeatures()+0x30b>
c0017ea8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017eb2:	e9 cc 00 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017eb7:	50                   	push   eax
c0017eb8:	50                   	push   eax
c0017eb9:	68 6c 6f 02 c0       	push   0xc0026f6c
c0017ebe:	57                   	push   edi
c0017ebf:	e8 12 89 fe ff       	call   c00007d6 <strcmp>
c0017ec4:	83 c4 10             	add    esp,0x10
c0017ec7:	85 c0                	test   eax,eax
c0017ec9:	75 0f                	jne    c0017eda <CPU::detectFeatures()+0x32e>
c0017ecb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017ed5:	e9 a9 00 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017eda:	50                   	push   eax
c0017edb:	50                   	push   eax
c0017edc:	68 79 6f 02 c0       	push   0xc0026f79
c0017ee1:	57                   	push   edi
c0017ee2:	e8 ef 88 fe ff       	call   c00007d6 <strcmp>
c0017ee7:	83 c4 10             	add    esp,0x10
c0017eea:	85 c0                	test   eax,eax
c0017eec:	75 0f                	jne    c0017efd <CPU::detectFeatures()+0x351>
c0017eee:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017ef8:	e9 86 00 00 00       	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017efd:	50                   	push   eax
c0017efe:	50                   	push   eax
c0017eff:	68 86 6f 02 c0       	push   0xc0026f86
c0017f04:	57                   	push   edi
c0017f05:	e8 cc 88 fe ff       	call   c00007d6 <strcmp>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	85 c0                	test   eax,eax
c0017f0f:	75 0c                	jne    c0017f1d <CPU::detectFeatures()+0x371>
c0017f11:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017f1b:	eb 66                	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017f1d:	50                   	push   eax
c0017f1e:	50                   	push   eax
c0017f1f:	68 93 6f 02 c0       	push   0xc0026f93
c0017f24:	57                   	push   edi
c0017f25:	e8 ac 88 fe ff       	call   c00007d6 <strcmp>
c0017f2a:	83 c4 10             	add    esp,0x10
c0017f2d:	85 c0                	test   eax,eax
c0017f2f:	75 0c                	jne    c0017f3d <CPU::detectFeatures()+0x391>
c0017f31:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f3b:	eb 46                	jmp    c0017f83 <CPU::detectFeatures()+0x3d7>
c0017f3d:	50                   	push   eax
c0017f3e:	50                   	push   eax
c0017f3f:	68 a0 6f 02 c0       	push   0xc0026fa0
c0017f44:	57                   	push   edi
c0017f45:	e8 8c 88 fe ff       	call   c00007d6 <strcmp>
c0017f4a:	83 c4 10             	add    esp,0x10
c0017f4d:	85 c0                	test   eax,eax
c0017f4f:	74 e0                	je     c0017f31 <CPU::detectFeatures()+0x385>
c0017f51:	50                   	push   eax
c0017f52:	50                   	push   eax
c0017f53:	68 ad 6f 02 c0       	push   0xc0026fad
c0017f58:	57                   	push   edi
c0017f59:	e8 78 88 fe ff       	call   c00007d6 <strcmp>
c0017f5e:	83 c4 10             	add    esp,0x10
c0017f61:	85 c0                	test   eax,eax
c0017f63:	74 cc                	je     c0017f31 <CPU::detectFeatures()+0x385>
c0017f65:	51                   	push   ecx
c0017f66:	51                   	push   ecx
c0017f67:	68 ba 6f 02 c0       	push   0xc0026fba
c0017f6c:	57                   	push   edi
c0017f6d:	e8 64 88 fe ff       	call   c00007d6 <strcmp>
c0017f72:	83 c4 10             	add    esp,0x10
c0017f75:	85 c0                	test   eax,eax
c0017f77:	74 b8                	je     c0017f31 <CPU::detectFeatures()+0x385>
c0017f79:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017f83:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017f88:	0f 86 be 00 00 00    	jbe    c001804c <CPU::detectFeatures()+0x4a0>
c0017f8e:	83 ec 0c             	sub    esp,0xc
c0017f91:	68 80 00 00 00       	push   0x80
c0017f96:	e8 96 f8 ff ff       	call   c0017831 <cpuidCheckExtendedEBX(unsigned int)>
c0017f9b:	83 e0 01             	and    eax,0x1
c0017f9e:	c1 e0 06             	shl    eax,0x6
c0017fa1:	88 c2                	mov    dl,al
c0017fa3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fa9:	83 e0 bf             	and    eax,0xffffffbf
c0017fac:	09 d0                	or     eax,edx
c0017fae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017fb4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017fbb:	e8 71 f8 ff ff       	call   c0017831 <cpuidCheckExtendedEBX(unsigned int)>
c0017fc0:	83 e0 01             	and    eax,0x1
c0017fc3:	c1 e0 04             	shl    eax,0x4
c0017fc6:	88 c2                	mov    dl,al
c0017fc8:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017fce:	83 e0 ef             	and    eax,0xffffffef
c0017fd1:	09 d0                	or     eax,edx
c0017fd3:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017fd9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017fe0:	e8 4c f8 ff ff       	call   c0017831 <cpuidCheckExtendedEBX(unsigned int)>
c0017fe5:	c1 e0 07             	shl    eax,0x7
c0017fe8:	88 c2                	mov    dl,al
c0017fea:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017ff0:	83 e0 7f             	and    eax,0x7f
c0017ff3:	09 d0                	or     eax,edx
c0017ff5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017ffb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018002:	e8 57 f8 ff ff       	call   c001785e <cpuidCheckExtendedECX(unsigned int)>
c0018007:	83 e0 01             	and    eax,0x1
c001800a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018011:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018017:	83 e0 f7             	and    eax,0xfffffff7
c001801a:	09 d0                	or     eax,edx
c001801c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018022:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018029:	e8 30 f8 ff ff       	call   c001785e <cpuidCheckExtendedECX(unsigned int)>
c001802e:	83 c4 10             	add    esp,0x10
c0018031:	83 e0 01             	and    eax,0x1
c0018034:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001803b:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018041:	83 e0 fb             	and    eax,0xfffffffb
c0018044:	09 d0                	or     eax,edx
c0018046:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001804c:	83 ec 0c             	sub    esp,0xc
c001804f:	56                   	push   esi
c0018050:	55                   	push   ebp
c0018051:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018055:	57                   	push   edi
c0018056:	8d 44 24 28          	lea    eax,[esp+0x28]
c001805a:	50                   	push   eax
c001805b:	6a 01                	push   0x1
c001805d:	e8 f2 f6 ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018062:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018066:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001806c:	88 ca                	mov    dl,cl
c001806e:	83 e0 f0             	and    eax,0xfffffff0
c0018071:	83 e2 0f             	and    edx,0xf
c0018074:	09 d0                	or     eax,edx
c0018076:	88 ca                	mov    dl,cl
c0018078:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001807e:	c0 ea 04             	shr    dl,0x4
c0018081:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018085:	0f b6 c2             	movzx  eax,dl
c0018088:	83 c4 20             	add    esp,0x20
c001808b:	c1 e0 06             	shl    eax,0x6
c001808e:	89 c5                	mov    ebp,eax
c0018090:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018096:	66 25 3f c0          	and    ax,0xc03f
c001809a:	09 e8                	or     eax,ebp
c001809c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00180a3:	89 c8                	mov    eax,ecx
c00180a5:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00180ab:	c1 e8 08             	shr    eax,0x8
c00180ae:	83 e2 3f             	and    edx,0x3f
c00180b1:	83 e0 0f             	and    eax,0xf
c00180b4:	89 c5                	mov    ebp,eax
c00180b6:	c1 e5 06             	shl    ebp,0x6
c00180b9:	09 d5                	or     ebp,edx
c00180bb:	89 ea                	mov    edx,ebp
c00180bd:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00180c3:	88 c2                	mov    dl,al
c00180c5:	c0 ea 02             	shr    dl,0x2
c00180c8:	89 d5                	mov    ebp,edx
c00180ca:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00180d0:	83 e2 c0             	and    edx,0xffffffc0
c00180d3:	09 d5                	or     ebp,edx
c00180d5:	89 ea                	mov    edx,ebp
c00180d7:	89 cd                	mov    ebp,ecx
c00180d9:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00180df:	c1 ed 0c             	shr    ebp,0xc
c00180e2:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00180e8:	83 e5 03             	and    ebp,0x3
c00180eb:	83 e2 cf             	and    edx,0xffffffcf
c00180ee:	c1 e5 04             	shl    ebp,0x4
c00180f1:	09 d5                	or     ebp,edx
c00180f3:	3c 06                	cmp    al,0x6
c00180f5:	89 ea                	mov    edx,ebp
c00180f7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00180fd:	74 04                	je     c0018103 <CPU::detectFeatures()+0x557>
c00180ff:	3c 0f                	cmp    al,0xf
c0018101:	75 5c                	jne    c001815f <CPU::detectFeatures()+0x5b3>
c0018103:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018107:	89 cd                	mov    ebp,ecx
c0018109:	c1 ed 10             	shr    ebp,0x10
c001810c:	c1 e5 04             	shl    ebp,0x4
c001810f:	09 ea                	or     edx,ebp
c0018111:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018117:	0f b6 d2             	movzx  edx,dl
c001811a:	66 81 e5 3f c0       	and    bp,0xc03f
c001811f:	c1 e2 06             	shl    edx,0x6
c0018122:	09 ea                	or     edx,ebp
c0018124:	3c 0f                	cmp    al,0xf
c0018126:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001812d:	75 30                	jne    c001815f <CPU::detectFeatures()+0x5b3>
c001812f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018135:	c1 e9 14             	shr    ecx,0x14
c0018138:	83 e0 3f             	and    eax,0x3f
c001813b:	83 c1 0f             	add    ecx,0xf
c001813e:	88 ca                	mov    dl,cl
c0018140:	c0 e9 02             	shr    cl,0x2
c0018143:	c1 e2 06             	shl    edx,0x6
c0018146:	09 d0                	or     eax,edx
c0018148:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001814e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018154:	83 e0 c0             	and    eax,0xffffffc0
c0018157:	09 c1                	or     ecx,eax
c0018159:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001815f:	83 ec 0c             	sub    esp,0xc
c0018162:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018169:	56                   	push   esi
c001816a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001816e:	50                   	push   eax
c001816f:	57                   	push   edi
c0018170:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018174:	55                   	push   ebp
c0018175:	68 00 00 00 80       	push   0x80000000
c001817a:	e8 d5 f5 ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001817f:	83 c4 20             	add    esp,0x20
c0018182:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001818a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001818e:	76 1e                	jbe    c00181ae <CPU::detectFeatures()+0x602>
c0018190:	83 ec 0c             	sub    esp,0xc
c0018193:	56                   	push   esi
c0018194:	50                   	push   eax
c0018195:	57                   	push   edi
c0018196:	55                   	push   ebp
c0018197:	68 01 00 00 80       	push   0x80000001
c001819c:	e8 b3 f5 ff ff       	call   c0017754 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181a1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00181ab:	83 c4 20             	add    esp,0x20
c00181ae:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00181b4:	83 f8 01             	cmp    eax,0x1
c00181b7:	75 6f                	jne    c0018228 <CPU::detectFeatures()+0x67c>
c00181b9:	51                   	push   ecx
c00181ba:	51                   	push   ecx
c00181bb:	68 c6 6f 02 c0       	push   0xc0026fc6
c00181c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00181c4:	56                   	push   esi
c00181c5:	e8 bb 85 fe ff       	call   c0000785 <strcpy>
c00181ca:	5f                   	pop    edi
c00181cb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181d1:	5d                   	pop    ebp
c00181d2:	66 c1 e8 06          	shr    ax,0x6
c00181d6:	0f b6 c0             	movzx  eax,al
c00181d9:	50                   	push   eax
c00181da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181e0:	c1 e8 0e             	shr    eax,0xe
c00181e3:	0f b6 c0             	movzx  eax,al
c00181e6:	50                   	push   eax
c00181e7:	e8 13 f2 ff ff       	call   c00173ff <lookupIntelCPUName(unsigned char, unsigned char)>
c00181ec:	5a                   	pop    edx
c00181ed:	59                   	pop    ecx
c00181ee:	50                   	push   eax
c00181ef:	56                   	push   esi
c00181f0:	e8 47 86 fe ff       	call   c000083c <strcat>
c00181f5:	5f                   	pop    edi
c00181f6:	5d                   	pop    ebp
c00181f7:	56                   	push   esi
c00181f8:	53                   	push   ebx
c00181f9:	e8 40 b6 ff ff       	call   c001383e <Device::setName(char const*)>
c00181fe:	58                   	pop    eax
c00181ff:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018205:	5a                   	pop    edx
c0018206:	68 cd 6f 02 c0       	push   0xc0026fcd
c001820b:	50                   	push   eax
c001820c:	e8 c5 85 fe ff       	call   c00007d6 <strcmp>
c0018211:	83 c4 10             	add    esp,0x10
c0018214:	85 c0                	test   eax,eax
c0018216:	0f 85 73 03 00 00    	jne    c001858f <CPU::detectFeatures()+0x9e3>
c001821c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018223:	e9 67 03 00 00       	jmp    c001858f <CPU::detectFeatures()+0x9e3>
c0018228:	83 f8 02             	cmp    eax,0x2
c001822b:	0f 85 b5 00 00 00    	jne    c00182e6 <CPU::detectFeatures()+0x73a>
c0018231:	57                   	push   edi
c0018232:	57                   	push   edi
c0018233:	68 df 6f 02 c0       	push   0xc0026fdf
c0018238:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001823c:	56                   	push   esi
c001823d:	e8 43 85 fe ff       	call   c0000785 <strcpy>
c0018242:	5d                   	pop    ebp
c0018243:	58                   	pop    eax
c0018244:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001824a:	66 c1 e8 06          	shr    ax,0x6
c001824e:	0f b6 c0             	movzx  eax,al
c0018251:	50                   	push   eax
c0018252:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018258:	c1 e8 0e             	shr    eax,0xe
c001825b:	0f b6 c0             	movzx  eax,al
c001825e:	50                   	push   eax
c001825f:	e8 07 f0 ff ff       	call   c001726b <lookupAMDCPUName(unsigned char, unsigned char)>
c0018264:	5a                   	pop    edx
c0018265:	59                   	pop    ecx
c0018266:	50                   	push   eax
c0018267:	56                   	push   esi
c0018268:	e8 cf 85 fe ff       	call   c000083c <strcat>
c001826d:	5f                   	pop    edi
c001826e:	5d                   	pop    ebp
c001826f:	56                   	push   esi
c0018270:	53                   	push   ebx
c0018271:	e8 c8 b5 ff ff       	call   c001383e <Device::setName(char const*)>
c0018276:	58                   	pop    eax
c0018277:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001827d:	5a                   	pop    edx
c001827e:	68 e4 6f 02 c0       	push   0xc0026fe4
c0018283:	50                   	push   eax
c0018284:	e8 4d 85 fe ff       	call   c00007d6 <strcmp>
c0018289:	83 c4 10             	add    esp,0x10
c001828c:	85 c0                	test   eax,eax
c001828e:	75 20                	jne    c00182b0 <CPU::detectFeatures()+0x704>
c0018290:	8b 15 68 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029468
c0018296:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001829c:	a8 01                	test   al,0x1
c001829e:	74 10                	je     c00182b0 <CPU::detectFeatures()+0x704>
c00182a0:	83 e0 fe             	and    eax,0xfffffffe
c00182a3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00182a9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00182b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182b6:	c1 e8 0e             	shr    eax,0xe
c00182b9:	3c 05                	cmp    al,0x5
c00182bb:	0f 85 ce 02 00 00    	jne    c001858f <CPU::detectFeatures()+0x9e3>
c00182c1:	56                   	push   esi
c00182c2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00182c8:	83 e0 0f             	and    eax,0xf
c00182cb:	50                   	push   eax
c00182cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182d2:	66 c1 e8 06          	shr    ax,0x6
c00182d6:	0f b6 c0             	movzx  eax,al
c00182d9:	50                   	push   eax
c00182da:	6a 05                	push   0x5
c00182dc:	e8 00 f4 ff ff       	call   c00176e1 <AMD_K6_writeback(int, int, int)>
c00182e1:	e9 1f 02 00 00       	jmp    c0018505 <CPU::detectFeatures()+0x959>
c00182e6:	8d 50 fd             	lea    edx,[eax-0x3]
c00182e9:	83 fa 01             	cmp    edx,0x1
c00182ec:	76 09                	jbe    c00182f7 <CPU::detectFeatures()+0x74b>
c00182ee:	83 f8 06             	cmp    eax,0x6
c00182f1:	0f 85 91 01 00 00    	jne    c0018488 <CPU::detectFeatures()+0x8dc>
c00182f7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182fd:	c1 ea 0e             	shr    edx,0xe
c0018300:	80 fa 05             	cmp    dl,0x5
c0018303:	75 7b                	jne    c0018380 <CPU::detectFeatures()+0x7d4>
c0018305:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001830b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018310:	66 81 fa 00 01       	cmp    dx,0x100
c0018315:	75 0c                	jne    c0018323 <CPU::detectFeatures()+0x777>
c0018317:	51                   	push   ecx
c0018318:	51                   	push   ecx
c0018319:	68 eb 6f 02 c0       	push   0xc0026feb
c001831e:	e9 dc 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c0018323:	66 81 fa 00 02       	cmp    dx,0x200
c0018328:	75 0c                	jne    c0018336 <CPU::detectFeatures()+0x78a>
c001832a:	52                   	push   edx
c001832b:	52                   	push   edx
c001832c:	68 fe 6f 02 c0       	push   0xc0026ffe
c0018331:	e9 c9 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c0018336:	66 81 fa 40 02       	cmp    dx,0x240
c001833b:	75 0c                	jne    c0018349 <CPU::detectFeatures()+0x79d>
c001833d:	50                   	push   eax
c001833e:	50                   	push   eax
c001833f:	68 10 70 02 c0       	push   0xc0027010
c0018344:	e9 b6 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c0018349:	83 f8 06             	cmp    eax,0x6
c001834c:	75 0c                	jne    c001835a <CPU::detectFeatures()+0x7ae>
c001834e:	50                   	push   eax
c001834f:	50                   	push   eax
c0018350:	68 22 70 02 c0       	push   0xc0027022
c0018355:	e9 a5 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c001835a:	83 f8 04             	cmp    eax,0x4
c001835d:	75 0c                	jne    c001836b <CPU::detectFeatures()+0x7bf>
c001835f:	50                   	push   eax
c0018360:	50                   	push   eax
c0018361:	68 2e 70 02 c0       	push   0xc002702e
c0018366:	e9 94 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c001836b:	83 f8 03             	cmp    eax,0x3
c001836e:	0f 85 1b 02 00 00    	jne    c001858f <CPU::detectFeatures()+0x9e3>
c0018374:	50                   	push   eax
c0018375:	50                   	push   eax
c0018376:	68 36 70 02 c0       	push   0xc0027036
c001837b:	e9 7f 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c0018380:	80 fa 06             	cmp    dl,0x6
c0018383:	0f 85 db 00 00 00    	jne    c0018464 <CPU::detectFeatures()+0x8b8>
c0018389:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001838f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018394:	66 81 fa 80 01       	cmp    dx,0x180
c0018399:	75 0c                	jne    c00183a7 <CPU::detectFeatures()+0x7fb>
c001839b:	50                   	push   eax
c001839c:	50                   	push   eax
c001839d:	68 41 70 02 c0       	push   0xc0027041
c00183a2:	e9 58 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00183a7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00183ad:	66 f7 c1 80 ff       	test   cx,0xff80
c00183b2:	75 0c                	jne    c00183c0 <CPU::detectFeatures()+0x814>
c00183b4:	50                   	push   eax
c00183b5:	50                   	push   eax
c00183b6:	68 51 70 02 c0       	push   0xc0027051
c00183bb:	e9 3f 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00183c0:	66 81 fa 40 02       	cmp    dx,0x240
c00183c5:	75 0c                	jne    c00183d3 <CPU::detectFeatures()+0x827>
c00183c7:	55                   	push   ebp
c00183c8:	55                   	push   ebp
c00183c9:	68 58 70 02 c0       	push   0xc0027058
c00183ce:	e9 2c 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00183d3:	66 81 fa 80 02       	cmp    dx,0x280
c00183d8:	75 0c                	jne    c00183e6 <CPU::detectFeatures()+0x83a>
c00183da:	57                   	push   edi
c00183db:	57                   	push   edi
c00183dc:	68 61 70 02 c0       	push   0xc0027061
c00183e1:	e9 19 01 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00183e6:	66 81 fa 40 03       	cmp    dx,0x340
c00183eb:	74 ed                	je     c00183da <CPU::detectFeatures()+0x82e>
c00183ed:	66 81 fa c0 03       	cmp    dx,0x3c0
c00183f2:	75 0c                	jne    c0018400 <CPU::detectFeatures()+0x854>
c00183f4:	56                   	push   esi
c00183f5:	56                   	push   esi
c00183f6:	68 68 70 02 c0       	push   0xc0027068
c00183fb:	e9 ff 00 00 00       	jmp    c00184ff <CPU::detectFeatures()+0x953>
c0018400:	83 f8 06             	cmp    eax,0x6
c0018403:	0f 84 45 ff ff ff    	je     c001834e <CPU::detectFeatures()+0x7a2>
c0018409:	83 f8 04             	cmp    eax,0x4
c001840c:	0f 84 4d ff ff ff    	je     c001835f <CPU::detectFeatures()+0x7b3>
c0018412:	83 f8 03             	cmp    eax,0x3
c0018415:	0f 85 74 01 00 00    	jne    c001858f <CPU::detectFeatures()+0x9e3>
c001841b:	51                   	push   ecx
c001841c:	51                   	push   ecx
c001841d:	68 71 70 02 c0       	push   0xc0027071
c0018422:	53                   	push   ebx
c0018423:	e8 16 b4 ff ff       	call   c001383e <Device::setName(char const*)>
c0018428:	b1 c1                	mov    cl,0xc1
c001842a:	88 c8                	mov    al,cl
c001842c:	e6 22                	out    0x22,al
c001842e:	e4 23                	in     al,0x23
c0018430:	88 c2                	mov    dl,al
c0018432:	88 c8                	mov    al,cl
c0018434:	e6 22                	out    0x22,al
c0018436:	88 d0                	mov    al,dl
c0018438:	83 c8 10             	or     eax,0x10
c001843b:	e6 23                	out    0x23,al
c001843d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018444:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018447:	89 d0                	mov    eax,edx
c0018449:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001844f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018453:	40                   	inc    eax
c0018454:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001845a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001845f:	e9 a1 00 00 00       	jmp    c0018505 <CPU::detectFeatures()+0x959>
c0018464:	83 f8 06             	cmp    eax,0x6
c0018467:	0f 84 e1 fe ff ff    	je     c001834e <CPU::detectFeatures()+0x7a2>
c001846d:	83 f8 04             	cmp    eax,0x4
c0018470:	0f 84 e9 fe ff ff    	je     c001835f <CPU::detectFeatures()+0x7b3>
c0018476:	83 f8 03             	cmp    eax,0x3
c0018479:	0f 85 10 01 00 00    	jne    c001858f <CPU::detectFeatures()+0x9e3>
c001847f:	52                   	push   edx
c0018480:	52                   	push   edx
c0018481:	68 7c 70 02 c0       	push   0xc002707c
c0018486:	eb 77                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c0018488:	83 f8 07             	cmp    eax,0x7
c001848b:	75 09                	jne    c0018496 <CPU::detectFeatures()+0x8ea>
c001848d:	50                   	push   eax
c001848e:	50                   	push   eax
c001848f:	68 86 70 02 c0       	push   0xc0027086
c0018494:	eb 69                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c0018496:	83 f8 0a             	cmp    eax,0xa
c0018499:	75 09                	jne    c00184a4 <CPU::detectFeatures()+0x8f8>
c001849b:	50                   	push   eax
c001849c:	50                   	push   eax
c001849d:	68 91 70 02 c0       	push   0xc0027091
c00184a2:	eb 5b                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00184a4:	83 f8 0b             	cmp    eax,0xb
c00184a7:	75 09                	jne    c00184b2 <CPU::detectFeatures()+0x906>
c00184a9:	50                   	push   eax
c00184aa:	50                   	push   eax
c00184ab:	68 99 70 02 c0       	push   0xc0027099
c00184b0:	eb 4d                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00184b2:	83 f8 08             	cmp    eax,0x8
c00184b5:	75 09                	jne    c00184c0 <CPU::detectFeatures()+0x914>
c00184b7:	50                   	push   eax
c00184b8:	50                   	push   eax
c00184b9:	68 a2 70 02 c0       	push   0xc00270a2
c00184be:	eb 3f                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00184c0:	83 f8 09             	cmp    eax,0x9
c00184c3:	75 09                	jne    c00184ce <CPU::detectFeatures()+0x922>
c00184c5:	50                   	push   eax
c00184c6:	50                   	push   eax
c00184c7:	68 aa 70 02 c0       	push   0xc00270aa
c00184cc:	eb 31                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00184ce:	83 f8 05             	cmp    eax,0x5
c00184d1:	75 09                	jne    c00184dc <CPU::detectFeatures()+0x930>
c00184d3:	50                   	push   eax
c00184d4:	50                   	push   eax
c00184d5:	68 b2 70 02 c0       	push   0xc00270b2
c00184da:	eb 23                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00184dc:	83 f8 0c             	cmp    eax,0xc
c00184df:	75 09                	jne    c00184ea <CPU::detectFeatures()+0x93e>
c00184e1:	55                   	push   ebp
c00184e2:	55                   	push   ebp
c00184e3:	68 c0 70 02 c0       	push   0xc00270c0
c00184e8:	eb 15                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00184ea:	83 f8 0d             	cmp    eax,0xd
c00184ed:	75 09                	jne    c00184f8 <CPU::detectFeatures()+0x94c>
c00184ef:	57                   	push   edi
c00184f0:	57                   	push   edi
c00184f1:	68 cb 70 02 c0       	push   0xc00270cb
c00184f6:	eb 07                	jmp    c00184ff <CPU::detectFeatures()+0x953>
c00184f8:	56                   	push   esi
c00184f9:	56                   	push   esi
c00184fa:	68 df 70 02 c0       	push   0xc00270df
c00184ff:	53                   	push   ebx
c0018500:	e8 39 b3 ff ff       	call   c001383e <Device::setName(char const*)>
c0018505:	83 c4 10             	add    esp,0x10
c0018508:	e9 82 00 00 00       	jmp    c001858f <CPU::detectFeatures()+0x9e3>
c001850d:	51                   	push   ecx
c001850e:	51                   	push   ecx
c001850f:	68 2b 6f 02 c0       	push   0xc0026f2b
c0018514:	57                   	push   edi
c0018515:	e8 6b 82 fe ff       	call   c0000785 <strcpy>
c001851a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018524:	e8 34 7d fe ff       	call   c000025d <is486>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	85 c0                	test   eax,eax
c001852e:	74 2d                	je     c001855d <CPU::detectFeatures()+0x9b1>
c0018530:	52                   	push   edx
c0018531:	52                   	push   edx
c0018532:	68 eb 70 02 c0       	push   0xc00270eb
c0018537:	53                   	push   ebx
c0018538:	e8 01 b3 ff ff       	call   c001383e <Device::setName(char const*)>
c001853d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018544:	e8 bf bf 00 00       	call   c0024508 <CPU::readCR0()>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	83 e0 14             	and    eax,0x14
c001854f:	83 f8 04             	cmp    eax,0x4
c0018552:	75 1f                	jne    c0018573 <CPU::detectFeatures()+0x9c7>
c0018554:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001855b:	eb 32                	jmp    c001858f <CPU::detectFeatures()+0x9e3>
c001855d:	50                   	push   eax
c001855e:	50                   	push   eax
c001855f:	68 f6 70 02 c0       	push   0xc00270f6
c0018564:	53                   	push   ebx
c0018565:	e8 d4 b2 ff ff       	call   c001383e <Device::setName(char const*)>
c001856a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018571:	eb d1                	jmp    c0018544 <CPU::detectFeatures()+0x998>
c0018573:	e8 c0 7c fe ff       	call   c0000238 <hasLegacyFPU>
c0018578:	83 e0 01             	and    eax,0x1
c001857b:	8d 14 00             	lea    edx,[eax+eax*1]
c001857e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018584:	83 e0 fd             	and    eax,0xfffffffd
c0018587:	09 d0                	or     eax,edx
c0018589:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001858f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018596:	83 c4 4c             	add    esp,0x4c
c0018599:	5b                   	pop    ebx
c001859a:	5e                   	pop    esi
c001859b:	5f                   	pop    edi
c001859c:	5d                   	pop    ebp
c001859d:	c3                   	ret    

c001859e <CPU::setupSMEP()>:
c001859e:	83 ec 0c             	sub    esp,0xc
c00185a1:	e8 2c c2 00 00       	call   c00247d2 <CPU::readCR4()>
c00185a6:	0d 00 00 10 00       	or     eax,0x100000
c00185ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185af:	83 c4 0c             	add    esp,0xc
c00185b2:	e9 36 c2 00 00       	jmp    c00247ed <CPU::writeCR4(unsigned long)>
c00185b7:	90                   	nop

c00185b8 <CPU::setupUMIP()>:
c00185b8:	83 ec 0c             	sub    esp,0xc
c00185bb:	e8 12 c2 00 00       	call   c00247d2 <CPU::readCR4()>
c00185c0:	80 cc 08             	or     ah,0x8
c00185c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185c7:	83 c4 0c             	add    esp,0xc
c00185ca:	e9 1e c2 00 00       	jmp    c00247ed <CPU::writeCR4(unsigned long)>
c00185cf:	90                   	nop

c00185d0 <CPU::setupTSC()>:
c00185d0:	83 ec 0c             	sub    esp,0xc
c00185d3:	e8 fa c1 00 00       	call   c00247d2 <CPU::readCR4()>
c00185d8:	83 c8 04             	or     eax,0x4
c00185db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185df:	83 c4 0c             	add    esp,0xc
c00185e2:	e9 06 c2 00 00       	jmp    c00247ed <CPU::writeCR4(unsigned long)>
c00185e7:	90                   	nop

c00185e8 <CPU::setupLargePages()>:
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	e8 e2 c1 00 00       	call   c00247d2 <CPU::readCR4()>
c00185f0:	83 c8 10             	or     eax,0x10
c00185f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185f7:	83 c4 0c             	add    esp,0xc
c00185fa:	e9 ee c1 00 00       	jmp    c00247ed <CPU::writeCR4(unsigned long)>
c00185ff:	90                   	nop

c0018600 <CPU::setupPAT()>:
c0018600:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0018605:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001860c:	74 2c                	je     c001863a <CPU::setupPAT()+0x3a>
c001860e:	53                   	push   ebx
c001860f:	83 ec 10             	sub    esp,0x10
c0018612:	68 77 02 00 00       	push   0x277
c0018617:	50                   	push   eax
c0018618:	e8 e3 60 ff ff       	call   c000e700 <Computer::rdmsr(unsigned int)>
c001861d:	83 e2 f8             	and    edx,0xfffffff8
c0018620:	83 ca 01             	or     edx,0x1
c0018623:	52                   	push   edx
c0018624:	50                   	push   eax
c0018625:	68 77 02 00 00       	push   0x277
c001862a:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c0018630:	e8 f7 60 ff ff       	call   c000e72c <Computer::wrmsr(unsigned int, unsigned long long)>
c0018635:	83 c4 28             	add    esp,0x28
c0018638:	5b                   	pop    ebx
c0018639:	c3                   	ret    
c001863a:	c3                   	ret    
c001863b:	90                   	nop

c001863c <CPU::setupMTRR()>:
c001863c:	c3                   	ret    
c001863d:	90                   	nop

c001863e <CPU::setupGlobalPages()>:
c001863e:	83 ec 0c             	sub    esp,0xc
c0018641:	e8 8c c1 00 00       	call   c00247d2 <CPU::readCR4()>
c0018646:	0c 80                	or     al,0x80
c0018648:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001864c:	83 c4 0c             	add    esp,0xc
c001864f:	e9 99 c1 00 00       	jmp    c00247ed <CPU::writeCR4(unsigned long)>

c0018654 <CPU::allowUsermodeDataAccess()>:
c0018654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018658:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001865f:	74 03                	je     c0018664 <CPU::allowUsermodeDataAccess()+0x10>
c0018661:	0f 01 cb             	stac   
c0018664:	c3                   	ret    
c0018665:	90                   	nop

c0018666 <CPU::prohibitUsermodeDataAccess()>:
c0018666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001866a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018671:	74 03                	je     c0018676 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018673:	0f 01 ca             	clac   
c0018676:	c3                   	ret    
c0018677:	90                   	nop

c0018678 <CPU::setupSMAP()>:
c0018678:	53                   	push   ebx
c0018679:	83 ec 08             	sub    esp,0x8
c001867c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018680:	e8 4d c1 00 00       	call   c00247d2 <CPU::readCR4()>
c0018685:	83 ec 0c             	sub    esp,0xc
c0018688:	0d 00 00 20 00       	or     eax,0x200000
c001868d:	50                   	push   eax
c001868e:	e8 5a c1 00 00       	call   c00247ed <CPU::writeCR4(unsigned long)>
c0018693:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018697:	83 c4 18             	add    esp,0x18
c001869a:	5b                   	pop    ebx
c001869b:	eb c9                	jmp    c0018666 <CPU::prohibitUsermodeDataAccess()>
c001869d:	90                   	nop

c001869e <CPU::setupFeatures()>:
c001869e:	53                   	push   ebx
c001869f:	83 ec 08             	sub    esp,0x8
c00186a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00186a6:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00186ad:	74 0c                	je     c00186bb <CPU::setupFeatures()+0x1d>
c00186af:	83 ec 0c             	sub    esp,0xc
c00186b2:	53                   	push   ebx
c00186b3:	e8 e6 fe ff ff       	call   c001859e <CPU::setupSMEP()>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00186c2:	74 0c                	je     c00186d0 <CPU::setupFeatures()+0x32>
c00186c4:	83 ec 0c             	sub    esp,0xc
c00186c7:	53                   	push   ebx
c00186c8:	e8 ab ff ff ff       	call   c0018678 <CPU::setupSMAP()>
c00186cd:	83 c4 10             	add    esp,0x10
c00186d0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00186d7:	74 0c                	je     c00186e5 <CPU::setupFeatures()+0x47>
c00186d9:	83 ec 0c             	sub    esp,0xc
c00186dc:	53                   	push   ebx
c00186dd:	e8 d6 fe ff ff       	call   c00185b8 <CPU::setupUMIP()>
c00186e2:	83 c4 10             	add    esp,0x10
c00186e5:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186ec:	74 0c                	je     c00186fa <CPU::setupFeatures()+0x5c>
c00186ee:	83 ec 0c             	sub    esp,0xc
c00186f1:	53                   	push   ebx
c00186f2:	e8 d9 fe ff ff       	call   c00185d0 <CPU::setupTSC()>
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018701:	74 0c                	je     c001870f <CPU::setupFeatures()+0x71>
c0018703:	83 ec 0c             	sub    esp,0xc
c0018706:	53                   	push   ebx
c0018707:	e8 dc fe ff ff       	call   c00185e8 <CPU::setupLargePages()>
c001870c:	83 c4 10             	add    esp,0x10
c001870f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018716:	74 0c                	je     c0018724 <CPU::setupFeatures()+0x86>
c0018718:	83 ec 0c             	sub    esp,0xc
c001871b:	53                   	push   ebx
c001871c:	e8 1d ff ff ff       	call   c001863e <CPU::setupGlobalPages()>
c0018721:	83 c4 10             	add    esp,0x10
c0018724:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001872b:	74 0d                	je     c001873a <CPU::setupFeatures()+0x9c>
c001872d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018731:	83 c4 08             	add    esp,0x8
c0018734:	5b                   	pop    ebx
c0018735:	e9 c6 fe ff ff       	jmp    c0018600 <CPU::setupPAT()>
c001873a:	83 c4 08             	add    esp,0x8
c001873d:	5b                   	pop    ebx
c001873e:	c3                   	ret    
c001873f:	90                   	nop

c0018740 <CPU::open(int, int, void*)>:
c0018740:	57                   	push   edi
c0018741:	56                   	push   esi
c0018742:	53                   	push   ebx
c0018743:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018747:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001874b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018751:	83 ec 0c             	sub    esp,0xc
c0018754:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001875a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018760:	50                   	push   eax
c0018761:	e8 86 62 ff ff       	call   c000e9ec <GDT::setup()>
c0018766:	83 c4 0c             	add    esp,0xc
c0018769:	6a 00                	push   0x0
c001876b:	68 ef be ad de       	push   0xdeadbeef
c0018770:	57                   	push   edi
c0018771:	e8 de 84 ff ff       	call   c0010c54 <TSS::setup(unsigned long, unsigned long)>
c0018776:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018779:	e8 b6 84 ff ff       	call   c0010c34 <TSS::flush()>
c001877e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018784:	89 04 24             	mov    DWORD PTR [esp],eax
c0018787:	e8 ba 64 ff ff       	call   c000ec46 <IDT::setup()>
c001878c:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018793:	e8 4c c0 00 00       	call   c00247e4 <CPU::writeDR7(unsigned long)>
c0018798:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00187a2:	e8 63 6f ff ff       	call   c000f70a <Phys::allocatePage()>
c00187a7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00187ad:	89 30                	mov    DWORD PTR [eax],esi
c00187af:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00187b5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00187b8:	58                   	pop    eax
c00187b9:	5a                   	pop    edx
c00187ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00187c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00187c4:	e8 59 94 ff ff       	call   c0011c22 <VAS::setCPUSpecific(unsigned long)>
c00187c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187cc:	e8 db f3 ff ff       	call   c0017bac <CPU::detectFeatures()>
c00187d1:	e8 82 c3 ff ff       	call   c0014b58 <setupInterruptController()>
c00187d6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00187dc:	a1 80 94 02 c0       	mov    eax,ds:0xc0029480
c00187e1:	83 e0 10             	and    eax,0x10
c00187e4:	83 f8 01             	cmp    eax,0x1
c00187e7:	19 c0                	sbb    eax,eax
c00187e9:	83 e0 46             	and    eax,0x46
c00187ec:	83 c0 1e             	add    eax,0x1e
c00187ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00187f2:	e8 0b d7 ff ff       	call   c0015f02 <setupTimer(int)>
c00187f7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018800:	e8 99 fe ff ff       	call   c001869e <CPU::setupFeatures()>
c0018805:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018808:	e8 23 f1 ff ff       	call   c0017930 <CPU::displayFeatures()>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	31 c0                	xor    eax,eax
c0018812:	5b                   	pop    ebx
c0018813:	5e                   	pop    esi
c0018814:	5f                   	pop    edi
c0018815:	c3                   	ret    

c0018816 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018816:	57                   	push   edi
c0018817:	56                   	push   esi
c0018818:	53                   	push   ebx
c0018819:	51                   	push   ecx
c001881a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001881e:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018821:	0f 02 c0             	lar    eax,ax
c0018824:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018827:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001882b:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001882e:	88 ca                	mov    dl,cl
c0018830:	c0 ea 06             	shr    dl,0x6
c0018833:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018837:	89 ca                	mov    edx,ecx
c0018839:	66 c1 ea 03          	shr    dx,0x3
c001883d:	83 e2 07             	and    edx,0x7
c0018840:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018845:	88 17                	mov    BYTE PTR [edi],dl
c0018847:	0f 84 a3 01 00 00    	je     c00189f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001884d:	83 e1 07             	and    ecx,0x7
c0018850:	80 f9 04             	cmp    cl,0x4
c0018853:	0f 84 98 00 00 00    	je     c00188f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018859:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001885e:	0f 95 c0             	setne  al
c0018861:	80 f9 05             	cmp    cl,0x5
c0018864:	0f 95 c2             	setne  dl
c0018867:	08 c2                	or     dl,al
c0018869:	74 79                	je     c00188e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001886b:	84 c9                	test   cl,cl
c001886d:	75 05                	jne    c0018874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001886f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018872:	eb 3c                	jmp    c00188b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018874:	80 f9 01             	cmp    cl,0x1
c0018877:	75 05                	jne    c001887e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018879:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001887c:	eb 32                	jmp    c00188b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001887e:	80 f9 02             	cmp    cl,0x2
c0018881:	75 05                	jne    c0018888 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018883:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018886:	eb 28                	jmp    c00188b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018888:	31 c0                	xor    eax,eax
c001888a:	80 f9 03             	cmp    cl,0x3
c001888d:	75 05                	jne    c0018894 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001888f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018892:	eb 1c                	jmp    c00188b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018894:	80 f9 05             	cmp    cl,0x5
c0018897:	75 05                	jne    c001889e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018899:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001889c:	eb 12                	jmp    c00188b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001889e:	80 f9 06             	cmp    cl,0x6
c00188a1:	75 05                	jne    c00188a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00188a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00188a6:	eb 08                	jmp    c00188b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00188a8:	80 f9 07             	cmp    cl,0x7
c00188ab:	75 03                	jne    c00188b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00188ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00188b0:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00188b5:	75 10                	jne    c00188c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00188b7:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00188bb:	b9 03 00 00 00       	mov    ecx,0x3
c00188c0:	01 d0                	add    eax,edx
c00188c2:	e9 34 01 00 00       	jmp    c00189fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00188c7:	b9 02 00 00 00       	mov    ecx,0x2
c00188cc:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00188d1:	0f 85 24 01 00 00    	jne    c00189fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00188d7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00188da:	b9 06 00 00 00       	mov    ecx,0x6
c00188df:	e9 17 01 00 00       	jmp    c00189fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00188e4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00188e7:	b9 06 00 00 00       	mov    ecx,0x6
c00188ec:	e9 0c 01 00 00       	jmp    c00189fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00188f1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188f4:	88 ca                	mov    dl,cl
c00188f6:	c0 ea 06             	shr    dl,0x6
c00188f9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188fd:	89 ca                	mov    edx,ecx
c00188ff:	66 c1 ea 03          	shr    dx,0x3
c0018903:	83 e2 07             	and    edx,0x7
c0018906:	80 e1 07             	and    cl,0x7
c0018909:	75 05                	jne    c0018910 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001890b:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001890e:	eb 49                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018910:	80 f9 01             	cmp    cl,0x1
c0018913:	75 05                	jne    c001891a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0018915:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0018918:	eb 3f                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001891a:	80 f9 02             	cmp    cl,0x2
c001891d:	75 05                	jne    c0018924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001891f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018922:	eb 35                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018924:	80 f9 03             	cmp    cl,0x3
c0018927:	75 05                	jne    c001892e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018929:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001892c:	eb 2b                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001892e:	80 f9 04             	cmp    cl,0x4
c0018931:	75 0f                	jne    c0018942 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12c>
c0018933:	f6 c4 60             	test   ah,0x60
c0018936:	75 05                	jne    c001893d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x127>
c0018938:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c001893b:	eb 1c                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001893d:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018940:	eb 17                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018942:	80 f9 05             	cmp    cl,0x5
c0018945:	75 05                	jne    c001894c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x136>
c0018947:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001894a:	eb 0d                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001894c:	80 f9 06             	cmp    cl,0x6
c001894f:	75 05                	jne    c0018956 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x140>
c0018951:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018954:	eb 03                	jmp    c0018959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018956:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018959:	84 d2                	test   dl,dl
c001895b:	75 05                	jne    c0018962 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14c>
c001895d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018960:	eb 3c                	jmp    c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018962:	80 fa 01             	cmp    dl,0x1
c0018965:	75 05                	jne    c001896c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x156>
c0018967:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001896a:	eb 32                	jmp    c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001896c:	80 fa 02             	cmp    dl,0x2
c001896f:	75 05                	jne    c0018976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x160>
c0018971:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018974:	eb 28                	jmp    c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018976:	80 fa 03             	cmp    dl,0x3
c0018979:	75 05                	jne    c0018980 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16a>
c001897b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001897e:	eb 1e                	jmp    c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018980:	31 c0                	xor    eax,eax
c0018982:	80 fa 04             	cmp    dl,0x4
c0018985:	74 17                	je     c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018987:	80 fa 05             	cmp    dl,0x5
c001898a:	75 05                	jne    c0018991 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17b>
c001898c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001898f:	eb 0d                	jmp    c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018991:	80 fa 06             	cmp    dl,0x6
c0018994:	75 05                	jne    c001899b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x185>
c0018996:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018999:	eb 03                	jmp    c001899e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001899b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001899e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00189a3:	0f 94 c2             	sete   dl
c00189a6:	80 f9 05             	cmp    cl,0x5
c00189a9:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00189ad:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00189b2:	d3 e0                	shl    eax,cl
c00189b4:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00189b8:	74 0a                	je     c00189c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ae>
c00189ba:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189bd:	b9 07 00 00 00       	mov    ecx,0x7
c00189c2:	eb 37                	jmp    c00189fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e5>
c00189c4:	01 f8                	add    eax,edi
c00189c6:	b9 03 00 00 00       	mov    ecx,0x3
c00189cb:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00189d0:	74 2b                	je     c00189fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00189d2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00189d7:	75 0d                	jne    c00189e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00189d9:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00189dd:	01 c8                	add    eax,ecx
c00189df:	b9 04 00 00 00       	mov    ecx,0x4
c00189e4:	eb 17                	jmp    c00189fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00189e6:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189e9:	b9 07 00 00 00       	mov    ecx,0x7
c00189ee:	eb 0d                	jmp    c00189fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00189f0:	b9 02 00 00 00       	mov    ecx,0x2
c00189f5:	b2 01                	mov    dl,0x1
c00189f7:	31 c0                	xor    eax,eax
c00189f9:	eb 02                	jmp    c00189fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00189fb:	31 d2                	xor    edx,edx
c00189fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018a01:	89 0b                	mov    DWORD PTR [ebx],ecx
c0018a03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a07:	88 11                	mov    BYTE PTR [ecx],dl
c0018a09:	5a                   	pop    edx
c0018a0a:	5b                   	pop    ebx
c0018a0b:	5e                   	pop    esi
c0018a0c:	5f                   	pop    edi
c0018a0d:	c3                   	ret    

c0018a0e <Krnl::panic(char const*)>:
c0018a0e:	55                   	push   ebp
c0018a0f:	89 e5                	mov    ebp,esp
c0018a11:	53                   	push   ebx
c0018a12:	50                   	push   eax
c0018a13:	a1 b0 9e 02 c0       	mov    eax,ds:0xc0029eb0
c0018a18:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018a1b:	85 c0                	test   eax,eax
c0018a1d:	74 02                	je     c0018a21 <Krnl::panic(char const*)+0x13>
c0018a1f:	ff d0                	call   eax
c0018a21:	fa                   	cli    
c0018a22:	c6 05 b4 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029eb4,0x1
c0018a29:	83 ec 08             	sub    esp,0x8
c0018a2c:	c6 05 20 84 02 c0 00 	mov    BYTE PTR ds:0xc0028420,0x0
c0018a33:	53                   	push   ebx
c0018a34:	68 30 71 02 c0       	push   0xc0027130
c0018a39:	e8 13 98 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018a3e:	58                   	pop    eax
c0018a3f:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018a44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a4a:	e8 46 7a ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c0018a4f:	83 c4 0c             	add    esp,0xc
c0018a52:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018a57:	6a 01                	push   0x1
c0018a59:	6a 0f                	push   0xf
c0018a5b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a61:	e8 6e 74 ff ff       	call   c000fed4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a66:	5a                   	pop    edx
c0018a67:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018a6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a72:	e8 bf 7c ff ff       	call   c0010736 <VgaText::clearScreen()>
c0018a77:	59                   	pop    ecx
c0018a78:	58                   	pop    eax
c0018a79:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018a7e:	68 49 71 02 c0       	push   0xc0027149
c0018a83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a89:	e8 26 7e ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018a8e:	58                   	pop    eax
c0018a8f:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018a94:	5a                   	pop    edx
c0018a95:	68 f0 71 02 c0       	push   0xc00271f0
c0018a9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aa0:	e8 0f 7e ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018aa5:	59                   	pop    ecx
c0018aa6:	58                   	pop    eax
c0018aa7:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018aac:	68 65 71 02 c0       	push   0xc0027165
c0018ab1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ab7:	e8 f8 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018abc:	58                   	pop    eax
c0018abd:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018ac2:	5a                   	pop    edx
c0018ac3:	53                   	push   ebx
c0018ac4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aca:	e8 e5 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018acf:	59                   	pop    ecx
c0018ad0:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018ad5:	5b                   	pop    ebx
c0018ad6:	68 85 71 02 c0       	push   0xc0027185
c0018adb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ae1:	e8 ce 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018ae6:	58                   	pop    eax
c0018ae7:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018aec:	5a                   	pop    edx
c0018aed:	68 2c 72 02 c0       	push   0xc002722c
c0018af2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018af8:	e8 b7 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018afd:	59                   	pop    ecx
c0018afe:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018b03:	5b                   	pop    ebx
c0018b04:	68 65 71 02 c0       	push   0xc0027165
c0018b09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b0f:	e8 a0 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018b14:	58                   	pop    eax
c0018b15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b1a:	5a                   	pop    edx
c0018b1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b1e:	83 c0 0c             	add    eax,0xc
c0018b21:	50                   	push   eax
c0018b22:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018b27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b2d:	e8 82 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018b32:	59                   	pop    ecx
c0018b33:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018b38:	5b                   	pop    ebx
c0018b39:	68 84 71 02 c0       	push   0xc0027184
c0018b3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b44:	e8 6b 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018b49:	58                   	pop    eax
c0018b4a:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018b4f:	5a                   	pop    edx
c0018b50:	68 58 72 02 c0       	push   0xc0027258
c0018b55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b5b:	e8 54 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018b60:	59                   	pop    ecx
c0018b61:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018b66:	5b                   	pop    ebx
c0018b67:	68 98 72 02 c0       	push   0xc0027298
c0018b6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b72:	e8 3d 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018b77:	58                   	pop    eax
c0018b78:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018b7d:	5a                   	pop    edx
c0018b7e:	68 70 71 02 c0       	push   0xc0027170
c0018b83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b89:	e8 26 7d ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018b8e:	59                   	pop    ecx
c0018b8f:	5b                   	pop    ebx
c0018b90:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018b93:	68 88 71 02 c0       	push   0xc0027188
c0018b98:	e8 b4 96 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018b9d:	58                   	pop    eax
c0018b9e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018ba1:	5a                   	pop    edx
c0018ba2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018ba5:	68 91 71 02 c0       	push   0xc0027191
c0018baa:	e8 a2 96 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018baf:	59                   	pop    ecx
c0018bb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018bb3:	5b                   	pop    ebx
c0018bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bb6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018bb9:	68 9a 71 02 c0       	push   0xc002719a
c0018bbe:	e8 8e 96 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0018bc3:	58                   	pop    eax
c0018bc4:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018bc9:	5a                   	pop    edx
c0018bca:	68 dc 72 02 c0       	push   0xc00272dc
c0018bcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bd5:	e8 da 7c ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018bda:	59                   	pop    ecx
c0018bdb:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018be0:	5b                   	pop    ebx
c0018be1:	68 a3 71 02 c0       	push   0xc00271a3
c0018be6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bec:	e8 c3 7c ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018bf1:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018bf6:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018bfc:	e8 07 b9 00 00       	call   c0024508 <CPU::readCR0()>
c0018c01:	5a                   	pop    edx
c0018c02:	59                   	pop    ecx
c0018c03:	50                   	push   eax
c0018c04:	53                   	push   ebx
c0018c05:	e8 d0 7c ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0018c0a:	5b                   	pop    ebx
c0018c0b:	58                   	pop    eax
c0018c0c:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018c11:	68 ad 71 02 c0       	push   0xc00271ad
c0018c16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c1c:	e8 93 7c ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018c21:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018c26:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c2c:	e8 c5 bb 00 00       	call   c00247f6 <CPU::readCR2()>
c0018c31:	5a                   	pop    edx
c0018c32:	59                   	pop    ecx
c0018c33:	50                   	push   eax
c0018c34:	53                   	push   ebx
c0018c35:	e8 a0 7c ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0018c3a:	5b                   	pop    ebx
c0018c3b:	58                   	pop    eax
c0018c3c:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018c41:	68 b7 71 02 c0       	push   0xc00271b7
c0018c46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c4c:	e8 63 7c ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018c51:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018c56:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c5c:	e8 34 b5 00 00       	call   c0024195 <CPU::readCR3()>
c0018c61:	5a                   	pop    edx
c0018c62:	59                   	pop    ecx
c0018c63:	50                   	push   eax
c0018c64:	53                   	push   ebx
c0018c65:	e8 70 7c ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0018c6a:	5b                   	pop    ebx
c0018c6b:	58                   	pop    eax
c0018c6c:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018c71:	68 ca 71 02 c0       	push   0xc00271ca
c0018c76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c7c:	e8 33 7c ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018c81:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018c86:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c8c:	e8 41 bb 00 00       	call   c00247d2 <CPU::readCR4()>
c0018c91:	5a                   	pop    edx
c0018c92:	59                   	pop    ecx
c0018c93:	50                   	push   eax
c0018c94:	53                   	push   ebx
c0018c95:	e8 40 7c ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0018c9a:	5b                   	pop    ebx
c0018c9b:	58                   	pop    eax
c0018c9c:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018ca1:	68 d4 71 02 c0       	push   0xc00271d4
c0018ca6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cac:	e8 03 7c ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018cb1:	5a                   	pop    edx
c0018cb2:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018cb7:	59                   	pop    ecx
c0018cb8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cbe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018cc1:	50                   	push   eax
c0018cc2:	e8 13 7c ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0018cc7:	5b                   	pop    ebx
c0018cc8:	58                   	pop    eax
c0018cc9:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018cce:	68 eb 71 02 c0       	push   0xc00271eb
c0018cd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cd9:	e8 d6 7b ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018cde:	5a                   	pop    edx
c0018cdf:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018ce4:	59                   	pop    ecx
c0018ce5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018ceb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018cee:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018cf1:	50                   	push   eax
c0018cf2:	e8 e3 7b ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0018cf7:	5b                   	pop    ebx
c0018cf8:	58                   	pop    eax
c0018cf9:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018cfe:	68 eb 71 02 c0       	push   0xc00271eb
c0018d03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d09:	e8 a6 7b ff ff       	call   c00108b4 <VgaText::puts(char const*)>
c0018d0e:	59                   	pop    ecx
c0018d0f:	a1 b4 a8 02 c0       	mov    eax,ds:0xc002a8b4
c0018d14:	5b                   	pop    ebx
c0018d15:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018d1b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018d1e:	8b 12                	mov    edx,DWORD PTR [edx]
c0018d20:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018d23:	50                   	push   eax
c0018d24:	e8 b1 7b ff ff       	call   c00108da <VgaText::putx(unsigned int)>
c0018d29:	83 c4 10             	add    esp,0x10
c0018d2c:	b2 fe                	mov    dl,0xfe
c0018d2e:	e4 60                	in     al,0x60
c0018d30:	3c 1c                	cmp    al,0x1c
c0018d32:	74 04                	je     c0018d38 <Krnl::panic(char const*)+0x32a>
c0018d34:	3c 5a                	cmp    al,0x5a
c0018d36:	75 f6                	jne    c0018d2e <Krnl::panic(char const*)+0x320>
c0018d38:	e4 64                	in     al,0x64
c0018d3a:	a8 02                	test   al,0x2
c0018d3c:	75 fa                	jne    c0018d38 <Krnl::panic(char const*)+0x32a>
c0018d3e:	88 d0                	mov    al,dl
c0018d40:	e6 64                	out    0x64,al
c0018d42:	fa                   	cli    
c0018d43:	f4                   	hlt    
c0018d44:	eb e8                	jmp    c0018d2e <Krnl::panic(char const*)+0x320>

c0018d46 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018d46:	55                   	push   ebp
c0018d47:	57                   	push   edi
c0018d48:	56                   	push   esi
c0018d49:	53                   	push   ebx
c0018d4a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d50:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018d57:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018d59:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018d5c:	80 fb 40             	cmp    bl,0x40
c0018d5f:	75 1b                	jne    c0018d7c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018d61:	8a 16                	mov    dl,BYTE PTR [esi]
c0018d63:	84 d2                	test   dl,dl
c0018d65:	0f 84 f1 00 00 00    	je     c0018e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d6b:	8d 46 01             	lea    eax,[esi+0x1]
c0018d6e:	80 fa 3a             	cmp    dl,0x3a
c0018d71:	74 04                	je     c0018d77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018d73:	89 c6                	mov    esi,eax
c0018d75:	eb ea                	jmp    c0018d61 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018d77:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018d7a:	89 c6                	mov    esi,eax
c0018d7c:	50                   	push   eax
c0018d7d:	6a 40                	push   0x40
c0018d7f:	6a 00                	push   0x0
c0018d81:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d85:	50                   	push   eax
c0018d86:	e8 5b 79 fe ff       	call   c00006e6 <memset>
c0018d8b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018d92:	31 c0                	xor    eax,eax
c0018d94:	83 c4 10             	add    esp,0x10
c0018d97:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018d99:	84 c9                	test   cl,cl
c0018d9b:	0f 84 bb 00 00 00    	je     c0018e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018da1:	3d c7 00 00 00       	cmp    eax,0xc7
c0018da6:	0f 8f b0 00 00 00    	jg     c0018e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018dac:	80 f9 0a             	cmp    cl,0xa
c0018daf:	0f 85 98 00 00 00    	jne    c0018e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018db5:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018dba:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018dbe:	a8 df                	test   al,0xdf
c0018dc0:	0f 94 c1             	sete   cl
c0018dc3:	3c 23                	cmp    al,0x23
c0018dc5:	0f 94 c2             	sete   dl
c0018dc8:	08 d1                	or     cl,dl
c0018dca:	75 4a                	jne    c0018e16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dcc:	8d 50 f7             	lea    edx,[eax-0x9]
c0018dcf:	80 fa 01             	cmp    dl,0x1
c0018dd2:	76 42                	jbe    c0018e16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dd4:	3c 5b                	cmp    al,0x5b
c0018dd6:	75 42                	jne    c0018e1a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018dd8:	80 fb 40             	cmp    bl,0x40
c0018ddb:	75 39                	jne    c0018e16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018ddd:	83 ec 0c             	sub    esp,0xc
c0018de0:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018de4:	52                   	push   edx
c0018de5:	e8 19 79 fe ff       	call   c0000703 <strlen>
c0018dea:	83 c4 10             	add    esp,0x10
c0018ded:	83 f8 3f             	cmp    eax,0x3f
c0018df0:	77 6a                	ja     c0018e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018df2:	50                   	push   eax
c0018df3:	50                   	push   eax
c0018df4:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018df8:	52                   	push   edx
c0018df9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018dfd:	52                   	push   edx
c0018dfe:	e8 82 79 fe ff       	call   c0000785 <strcpy>
c0018e03:	58                   	pop    eax
c0018e04:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018e08:	52                   	push   edx
c0018e09:	e8 f5 78 fe ff       	call   c0000703 <strlen>
c0018e0e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018e13:	83 c4 10             	add    esp,0x10
c0018e16:	31 d2                	xor    edx,edx
c0018e18:	eb 3a                	jmp    c0018e54 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018e1a:	80 fb 40             	cmp    bl,0x40
c0018e1d:	74 06                	je     c0018e25 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018e1f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018e23:	eb 20                	jmp    c0018e45 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018e25:	50                   	push   eax
c0018e26:	50                   	push   eax
c0018e27:	55                   	push   ebp
c0018e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e2c:	50                   	push   eax
c0018e2d:	e8 a4 79 fe ff       	call   c00007d6 <strcmp>
c0018e32:	83 c4 10             	add    esp,0x10
c0018e35:	85 c0                	test   eax,eax
c0018e37:	75 dd                	jne    c0018e16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e39:	eb e4                	jmp    c0018e1f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018e3b:	8d 50 01             	lea    edx,[eax+0x1]
c0018e3e:	80 f9 3d             	cmp    cl,0x3d
c0018e41:	74 1d                	je     c0018e60 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018e43:	89 d0                	mov    eax,edx
c0018e45:	8a 08                	mov    cl,BYTE PTR [eax]
c0018e47:	84 c9                	test   cl,cl
c0018e49:	75 f0                	jne    c0018e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018e4b:	eb 0f                	jmp    c0018e5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e4d:	8d 50 01             	lea    edx,[eax+0x1]
c0018e50:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018e54:	47                   	inc    edi
c0018e55:	89 d0                	mov    eax,edx
c0018e57:	e9 3b ff ff ff       	jmp    c0018d97 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018e5c:	31 c0                	xor    eax,eax
c0018e5e:	eb 33                	jmp    c0018e93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018e60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018e64:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018e67:	50                   	push   eax
c0018e68:	50                   	push   eax
c0018e69:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018e6d:	50                   	push   eax
c0018e6e:	56                   	push   esi
c0018e6f:	e8 62 79 fe ff       	call   c00007d6 <strcmp>
c0018e74:	83 c4 10             	add    esp,0x10
c0018e77:	85 c0                	test   eax,eax
c0018e79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e7d:	75 97                	jne    c0018e16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e7f:	51                   	push   ecx
c0018e80:	51                   	push   ecx
c0018e81:	52                   	push   edx
c0018e82:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018e89:	e8 f7 78 fe ff       	call   c0000785 <strcpy>
c0018e8e:	83 c4 10             	add    esp,0x10
c0018e91:	b0 01                	mov    al,0x1
c0018e93:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e99:	5b                   	pop    ebx
c0018e9a:	5e                   	pop    esi
c0018e9b:	5f                   	pop    edi
c0018e9c:	5d                   	pop    ebp
c0018e9d:	c3                   	ret    

c0018e9e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018e9e:	57                   	push   edi
c0018e9f:	56                   	push   esi
c0018ea0:	53                   	push   ebx
c0018ea1:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018ea7:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018eae:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018eb5:	53                   	push   ebx
c0018eb6:	e8 48 78 fe ff       	call   c0000703 <strlen>
c0018ebb:	89 34 24             	mov    DWORD PTR [esp],esi
c0018ebe:	89 c7                	mov    edi,eax
c0018ec0:	e8 3e 78 fe ff       	call   c0000703 <strlen>
c0018ec5:	83 c4 10             	add    esp,0x10
c0018ec8:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018ecc:	31 ff                	xor    edi,edi
c0018ece:	3d ff 00 00 00       	cmp    eax,0xff
c0018ed3:	0f 87 18 01 00 00    	ja     c0018ff1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018ed9:	51                   	push   ecx
c0018eda:	51                   	push   ecx
c0018edb:	56                   	push   esi
c0018edc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018ee0:	56                   	push   esi
c0018ee1:	e8 9f 78 fe ff       	call   c0000785 <strcpy>
c0018ee6:	58                   	pop    eax
c0018ee7:	5a                   	pop    edx
c0018ee8:	68 d4 76 02 c0       	push   0xc00276d4
c0018eed:	56                   	push   esi
c0018eee:	e8 49 79 fe ff       	call   c000083c <strcat>
c0018ef3:	59                   	pop    ecx
c0018ef4:	58                   	pop    eax
c0018ef5:	53                   	push   ebx
c0018ef6:	56                   	push   esi
c0018ef7:	e8 40 79 fe ff       	call   c000083c <strcat>
c0018efc:	58                   	pop    eax
c0018efd:	5a                   	pop    edx
c0018efe:	68 02 73 02 c0       	push   0xc0027302
c0018f03:	56                   	push   esi
c0018f04:	e8 33 79 fe ff       	call   c000083c <strcat>
c0018f09:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018f10:	e8 4d 92 ff ff       	call   c0012162 <operator new(unsigned long)>
c0018f15:	83 c4 0c             	add    esp,0xc
c0018f18:	89 c3                	mov    ebx,eax
c0018f1a:	ff 35 b4 a8 02 c0    	push   DWORD PTR ds:0xc002a8b4
c0018f20:	56                   	push   esi
c0018f21:	50                   	push   eax
c0018f22:	e8 59 98 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0018f27:	59                   	pop    ecx
c0018f28:	5e                   	pop    esi
c0018f29:	6a 01                	push   0x1
c0018f2b:	53                   	push   ebx
c0018f2c:	e8 b3 98 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	85 c0                	test   eax,eax
c0018f36:	74 08                	je     c0018f40 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018f38:	83 ec 0c             	sub    esp,0xc
c0018f3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f3d:	53                   	push   ebx
c0018f3e:	eb 2e                	jmp    c0018f6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018f40:	52                   	push   edx
c0018f41:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018f45:	50                   	push   eax
c0018f46:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f4a:	50                   	push   eax
c0018f4b:	53                   	push   ebx
c0018f4c:	e8 3f 9b ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0018f51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f55:	83 c4 10             	add    esp,0x10
c0018f58:	89 c1                	mov    ecx,eax
c0018f5a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018f5e:	75 13                	jne    c0018f73 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018f60:	83 ec 0c             	sub    esp,0xc
c0018f63:	53                   	push   ebx
c0018f64:	e8 d9 98 ff ff       	call   c0012842 <File::close()>
c0018f69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f71:	eb 7b                	jmp    c0018fee <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	50                   	push   eax
c0018f77:	e8 e4 61 ff ff       	call   c000f160 <malloc>
c0018f7c:	89 c6                	mov    esi,eax
c0018f7e:	58                   	pop    eax
c0018f7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f85:	52                   	push   edx
c0018f86:	56                   	push   esi
c0018f87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f8b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f8f:	53                   	push   ebx
c0018f90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018f93:	83 c4 20             	add    esp,0x20
c0018f96:	85 c0                	test   eax,eax
c0018f98:	75 0a                	jne    c0018fa4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f9e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018fa2:	74 18                	je     c0018fbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018fa4:	83 ec 0c             	sub    esp,0xc
c0018fa7:	31 ff                	xor    edi,edi
c0018fa9:	53                   	push   ebx
c0018faa:	e8 93 98 ff ff       	call   c0012842 <File::close()>
c0018faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018fb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	eb 35                	jmp    c0018ff1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018fbc:	83 ec 0c             	sub    esp,0xc
c0018fbf:	53                   	push   ebx
c0018fc0:	e8 7d 98 ff ff       	call   c0012842 <File::close()>
c0018fc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018fc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fcd:	83 c4 0c             	add    esp,0xc
c0018fd0:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fd7:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fde:	56                   	push   esi
c0018fdf:	e8 62 fd ff ff       	call   c0018d46 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018fe4:	89 34 24             	mov    DWORD PTR [esp],esi
c0018fe7:	89 c7                	mov    edi,eax
c0018fe9:	e8 82 61 ff ff       	call   c000f170 <free>
c0018fee:	83 c4 10             	add    esp,0x10
c0018ff1:	81 c4 10 01 00 00    	add    esp,0x110
c0018ff7:	89 f8                	mov    eax,edi
c0018ff9:	5b                   	pop    ebx
c0018ffa:	5e                   	pop    esi
c0018ffb:	5f                   	pop    edi
c0018ffc:	c3                   	ret    

c0018ffd <Reg::getLine(char*, char*, char*)>:
c0018ffd:	57                   	push   edi
c0018ffe:	56                   	push   esi
c0018fff:	53                   	push   ebx
c0019000:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019004:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019008:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001900c:	57                   	push   edi
c001900d:	56                   	push   esi
c001900e:	53                   	push   ebx
c001900f:	68 07 73 02 c0       	push   0xc0027307
c0019014:	e8 85 fe ff ff       	call   c0018e9e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019019:	83 c4 10             	add    esp,0x10
c001901c:	84 c0                	test   al,al
c001901e:	75 10                	jne    c0019030 <Reg::getLine(char*, char*, char*)+0x33>
c0019020:	57                   	push   edi
c0019021:	56                   	push   esi
c0019022:	53                   	push   ebx
c0019023:	68 2c 73 02 c0       	push   0xc002732c
c0019028:	e8 71 fe ff ff       	call   c0018e9e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	5b                   	pop    ebx
c0019031:	5e                   	pop    esi
c0019032:	5f                   	pop    edi
c0019033:	c3                   	ret    

c0019034 <Reg::readInt(char*, char*, int*)>:
c0019034:	55                   	push   ebp
c0019035:	57                   	push   edi
c0019036:	56                   	push   esi
c0019037:	53                   	push   ebx
c0019038:	81 ec f0 00 00 00    	sub    esp,0xf0
c001903e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019042:	57                   	push   edi
c0019043:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001904a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019051:	e8 a7 ff ff ff       	call   c0018ffd <Reg::getLine(char*, char*, char*)>
c0019056:	83 c4 10             	add    esp,0x10
c0019059:	84 c0                	test   al,al
c001905b:	0f 84 b3 00 00 00    	je     c0019114 <Reg::readInt(char*, char*, int*)+0xe0>
c0019061:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019065:	80 fa 2b             	cmp    dl,0x2b
c0019068:	74 0c                	je     c0019076 <Reg::readInt(char*, char*, int*)+0x42>
c001906a:	80 fa 2d             	cmp    dl,0x2d
c001906d:	75 0e                	jne    c001907d <Reg::readInt(char*, char*, int*)+0x49>
c001906f:	ba 01 00 00 00       	mov    edx,0x1
c0019074:	eb 0b                	jmp    c0019081 <Reg::readInt(char*, char*, int*)+0x4d>
c0019076:	ba 01 00 00 00       	mov    edx,0x1
c001907b:	eb 02                	jmp    c001907f <Reg::readInt(char*, char*, int*)+0x4b>
c001907d:	31 d2                	xor    edx,edx
c001907f:	31 c0                	xor    eax,eax
c0019081:	be 0a 00 00 00       	mov    esi,0xa
c0019086:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001908b:	75 20                	jne    c00190ad <Reg::readInt(char*, char*, int*)+0x79>
c001908d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019091:	80 f9 78             	cmp    cl,0x78
c0019094:	75 0a                	jne    c00190a0 <Reg::readInt(char*, char*, int*)+0x6c>
c0019096:	83 c2 02             	add    edx,0x2
c0019099:	be 10 00 00 00       	mov    esi,0x10
c001909e:	eb 0d                	jmp    c00190ad <Reg::readInt(char*, char*, int*)+0x79>
c00190a0:	80 f9 62             	cmp    cl,0x62
c00190a3:	75 08                	jne    c00190ad <Reg::readInt(char*, char*, int*)+0x79>
c00190a5:	83 c2 02             	add    edx,0x2
c00190a8:	be 02 00 00 00       	mov    esi,0x2
c00190ad:	01 d7                	add    edi,edx
c00190af:	31 d2                	xor    edx,edx
c00190b1:	8a 1f                	mov    bl,BYTE PTR [edi]
c00190b3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00190b7:	80 fb 0d             	cmp    bl,0xd
c00190ba:	0f 94 c3             	sete   bl
c00190bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00190c2:	0f 94 c1             	sete   cl
c00190c5:	08 cb                	or     bl,cl
c00190c7:	75 3a                	jne    c0019103 <Reg::readInt(char*, char*, int*)+0xcf>
c00190c9:	0f af d6             	imul   edx,esi
c00190cc:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00190d1:	83 fe 10             	cmp    esi,0x10
c00190d4:	75 26                	jne    c00190fc <Reg::readInt(char*, char*, int*)+0xc8>
c00190d6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190da:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00190dd:	89 e9                	mov    ecx,ebp
c00190df:	80 f9 05             	cmp    cl,0x5
c00190e2:	77 06                	ja     c00190ea <Reg::readInt(char*, char*, int*)+0xb6>
c00190e4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00190e8:	eb 16                	jmp    c0019100 <Reg::readInt(char*, char*, int*)+0xcc>
c00190ea:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190ee:	83 e9 61             	sub    ecx,0x61
c00190f1:	80 f9 05             	cmp    cl,0x5
c00190f4:	77 06                	ja     c00190fc <Reg::readInt(char*, char*, int*)+0xc8>
c00190f6:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00190fa:	eb 04                	jmp    c0019100 <Reg::readInt(char*, char*, int*)+0xcc>
c00190fc:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019100:	47                   	inc    edi
c0019101:	eb ae                	jmp    c00190b1 <Reg::readInt(char*, char*, int*)+0x7d>
c0019103:	84 c0                	test   al,al
c0019105:	74 02                	je     c0019109 <Reg::readInt(char*, char*, int*)+0xd5>
c0019107:	f7 da                	neg    edx
c0019109:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0019110:	89 10                	mov    DWORD PTR [eax],edx
c0019112:	88 d8                	mov    al,bl
c0019114:	81 c4 ec 00 00 00    	add    esp,0xec
c001911a:	5b                   	pop    ebx
c001911b:	5e                   	pop    esi
c001911c:	5f                   	pop    edi
c001911d:	5d                   	pop    ebp
c001911e:	c3                   	ret    

c001911f <Reg::readString(char*, char*, char*, int)>:
c001911f:	57                   	push   edi
c0019120:	56                   	push   esi
c0019121:	53                   	push   ebx
c0019122:	81 ec d4 00 00 00    	sub    esp,0xd4
c0019128:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001912f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019133:	57                   	push   edi
c0019134:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001913b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019142:	e8 b6 fe ff ff       	call   c0018ffd <Reg::getLine(char*, char*, char*)>
c0019147:	83 c4 10             	add    esp,0x10
c001914a:	89 c6                	mov    esi,eax
c001914c:	84 c0                	test   al,al
c001914e:	74 44                	je     c0019194 <Reg::readString(char*, char*, char*, int)+0x75>
c0019150:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019157:	31 c0                	xor    eax,eax
c0019159:	4a                   	dec    edx
c001915a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001915d:	84 c9                	test   cl,cl
c001915f:	74 0f                	je     c0019170 <Reg::readString(char*, char*, char*, int)+0x51>
c0019161:	39 c2                	cmp    edx,eax
c0019163:	7e 0b                	jle    c0019170 <Reg::readString(char*, char*, char*, int)+0x51>
c0019165:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019168:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001916d:	40                   	inc    eax
c001916e:	eb ea                	jmp    c001915a <Reg::readString(char*, char*, char*, int)+0x3b>
c0019170:	83 ec 0c             	sub    esp,0xc
c0019173:	53                   	push   ebx
c0019174:	e8 8a 75 fe ff       	call   c0000703 <strlen>
c0019179:	83 c4 10             	add    esp,0x10
c001917c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019181:	75 11                	jne    c0019194 <Reg::readString(char*, char*, char*, int)+0x75>
c0019183:	83 ec 0c             	sub    esp,0xc
c0019186:	53                   	push   ebx
c0019187:	e8 77 75 fe ff       	call   c0000703 <strlen>
c001918c:	83 c4 10             	add    esp,0x10
c001918f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019194:	81 c4 d0 00 00 00    	add    esp,0xd0
c001919a:	89 f0                	mov    eax,esi
c001919c:	5b                   	pop    ebx
c001919d:	5e                   	pop    esi
c001919e:	5f                   	pop    edi
c001919f:	c3                   	ret    

c00191a0 <Reg::readBool(char*, char*, bool*)>:
c00191a0:	83 ec 20             	sub    esp,0x20
c00191a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191a7:	50                   	push   eax
c00191a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191b0:	e8 7f fe ff ff       	call   c0019034 <Reg::readInt(char*, char*, int*)>
c00191b5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00191ba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00191be:	0f 95 02             	setne  BYTE PTR [edx]
c00191c1:	83 c4 2c             	add    esp,0x2c
c00191c4:	c3                   	ret    

c00191c5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00191c5:	53                   	push   ebx
c00191c6:	83 ec 1c             	sub    esp,0x1c
c00191c9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00191cd:	8d 44 24 13          	lea    eax,[esp+0x13]
c00191d1:	50                   	push   eax
c00191d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191da:	e8 c1 ff ff ff       	call   c00191a0 <Reg::readBool(char*, char*, bool*)>
c00191df:	83 c4 10             	add    esp,0x10
c00191e2:	84 c0                	test   al,al
c00191e4:	74 04                	je     c00191ea <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00191e6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00191ea:	88 d8                	mov    al,bl
c00191ec:	83 c4 18             	add    esp,0x18
c00191ef:	5b                   	pop    ebx
c00191f0:	c3                   	ret    

c00191f1 <Reg::readIntWithDefault(char*, char*, int)>:
c00191f1:	53                   	push   ebx
c00191f2:	83 ec 1c             	sub    esp,0x1c
c00191f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00191f9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191fd:	50                   	push   eax
c00191fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019202:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019206:	e8 29 fe ff ff       	call   c0019034 <Reg::readInt(char*, char*, int*)>
c001920b:	83 c4 10             	add    esp,0x10
c001920e:	84 c0                	test   al,al
c0019210:	74 04                	je     c0019216 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0019212:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019216:	89 d8                	mov    eax,ebx
c0019218:	83 c4 18             	add    esp,0x18
c001921b:	5b                   	pop    ebx
c001921c:	c3                   	ret    

c001921d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001921d:	56                   	push   esi
c001921e:	53                   	push   ebx
c001921f:	51                   	push   ecx
c0019220:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019224:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001922c:	56                   	push   esi
c001922d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019235:	e8 e5 fe ff ff       	call   c001911f <Reg::readString(char*, char*, char*, int)>
c001923a:	83 c4 10             	add    esp,0x10
c001923d:	84 c0                	test   al,al
c001923f:	74 02                	je     c0019243 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019241:	89 f3                	mov    ebx,esi
c0019243:	89 d8                	mov    eax,ebx
c0019245:	5a                   	pop    edx
c0019246:	5b                   	pop    ebx
c0019247:	5e                   	pop    esi
c0019248:	c3                   	ret    

c0019249 <Sys::exit(regs*)>:
c0019249:	83 ec 18             	sub    esp,0x18
c001924c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019250:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019253:	e8 20 31 00 00       	call   c001c378 <terminateTask(int)>
c0019258:	83 c8 ff             	or     eax,0xffffffff
c001925b:	83 c4 1c             	add    esp,0x1c
c001925e:	89 c2                	mov    edx,eax
c0019260:	c3                   	ret    

c0019261 <Sys::loadDLL(regs*)>:
c0019261:	56                   	push   esi
c0019262:	53                   	push   ebx
c0019263:	31 d2                	xor    edx,edx
c0019265:	51                   	push   ecx
c0019266:	b8 01 00 00 00       	mov    eax,0x1
c001926b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001926f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019273:	74 7d                	je     c00192f2 <Sys::loadDLL(regs*)+0x91>
c0019275:	83 ec 0c             	sub    esp,0xc
c0019278:	68 14 01 00 00       	push   0x114
c001927d:	e8 e0 8e ff ff       	call   c0012162 <operator new(unsigned long)>
c0019282:	83 c4 0c             	add    esp,0xc
c0019285:	89 c3                	mov    ebx,eax
c0019287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001928c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001928f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019292:	53                   	push   ebx
c0019293:	e8 e8 94 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019298:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001929b:	e8 b2 97 ff ff       	call   c0012a52 <File::exists()>
c00192a0:	83 c4 10             	add    esp,0x10
c00192a3:	84 c0                	test   al,al
c00192a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00192a7:	75 11                	jne    c00192ba <Sys::loadDLL(regs*)+0x59>
c00192a9:	83 ec 0c             	sub    esp,0xc
c00192ac:	53                   	push   ebx
c00192ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192b0:	83 c4 10             	add    esp,0x10
c00192b3:	b8 03 00 00 00       	mov    eax,0x3
c00192b8:	eb 36                	jmp    c00192f0 <Sys::loadDLL(regs*)+0x8f>
c00192ba:	83 ec 0c             	sub    esp,0xc
c00192bd:	53                   	push   ebx
c00192be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192c1:	58                   	pop    eax
c00192c2:	5a                   	pop    edx
c00192c3:	6a 00                	push   0x0
c00192c5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00192c8:	e8 c4 20 00 00       	call   c001b391 <Thr::loadDLL(char const*, bool)>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	89 c1                	mov    ecx,eax
c00192d2:	31 d2                	xor    edx,edx
c00192d4:	b8 04 00 00 00       	mov    eax,0x4
c00192d9:	85 c9                	test   ecx,ecx
c00192db:	74 15                	je     c00192f2 <Sys::loadDLL(regs*)+0x91>
c00192dd:	53                   	push   ebx
c00192de:	53                   	push   ebx
c00192df:	ff 35 68 94 02 c0    	push   DWORD PTR ds:0xc0029468
c00192e5:	51                   	push   ecx
c00192e6:	e8 6c 22 00 00       	call   c001b557 <Thr::executeDLL(unsigned long, void*)>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	31 c0                	xor    eax,eax
c00192f0:	31 d2                	xor    edx,edx
c00192f2:	59                   	pop    ecx
c00192f3:	5b                   	pop    ebx
c00192f4:	5e                   	pop    esi
c00192f5:	c3                   	ret    

c00192f6 <Sys::read(regs*)>:
c00192f6:	57                   	push   edi
c00192f7:	56                   	push   esi
c00192f8:	53                   	push   ebx
c00192f9:	83 ec 10             	sub    esp,0x10
c00192fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019300:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019303:	83 f8 02             	cmp    eax,0x2
c0019306:	77 10                	ja     c0019318 <Sys::read(regs*)+0x22>
c0019308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001930d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019310:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019316:	eb 0e                	jmp    c0019326 <Sys::read(regs*)+0x30>
c0019318:	83 ec 0c             	sub    esp,0xc
c001931b:	50                   	push   eax
c001931c:	e8 08 7e ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	89 c1                	mov    ecx,eax
c0019326:	83 c8 ff             	or     eax,0xffffffff
c0019329:	85 c9                	test   ecx,ecx
c001932b:	89 c2                	mov    edx,eax
c001932d:	74 28                	je     c0019357 <Sys::read(regs*)+0x61>
c001932f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019337:	31 ff                	xor    edi,edi
c0019339:	83 ec 0c             	sub    esp,0xc
c001933c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001933e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019342:	52                   	push   edx
c0019343:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019346:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019349:	57                   	push   edi
c001934a:	56                   	push   esi
c001934b:	51                   	push   ecx
c001934c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001934f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019353:	83 c4 20             	add    esp,0x20
c0019356:	99                   	cdq    
c0019357:	83 c4 10             	add    esp,0x10
c001935a:	5b                   	pop    ebx
c001935b:	5e                   	pop    esi
c001935c:	5f                   	pop    edi
c001935d:	c3                   	ret    

c001935e <Sys::sbrk(regs*)>:
c001935e:	56                   	push   esi
c001935f:	53                   	push   ebx
c0019360:	50                   	push   eax
c0019361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019366:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001936a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001936d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019370:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019376:	85 db                	test   ebx,ebx
c0019378:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001937b:	74 02                	je     c001937f <Sys::sbrk(regs*)+0x21>
c001937d:	79 06                	jns    c0019385 <Sys::sbrk(regs*)+0x27>
c001937f:	89 f0                	mov    eax,esi
c0019381:	31 d2                	xor    edx,edx
c0019383:	eb 2a                	jmp    c00193af <Sys::sbrk(regs*)+0x51>
c0019385:	83 c8 ff             	or     eax,0xffffffff
c0019388:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001938e:	89 c2                	mov    edx,eax
c0019390:	77 1d                	ja     c00193af <Sys::sbrk(regs*)+0x51>
c0019392:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019398:	50                   	push   eax
c0019399:	c1 ea 0c             	shr    edx,0xc
c001939c:	68 07 04 00 00       	push   0x407
c00193a1:	52                   	push   edx
c00193a2:	51                   	push   ecx
c00193a3:	e8 aa 86 ff ff       	call   c0011a52 <VAS::allocatePages(int, int)>
c00193a8:	89 f0                	mov    eax,esi
c00193aa:	31 d2                	xor    edx,edx
c00193ac:	83 c4 10             	add    esp,0x10
c00193af:	59                   	pop    ecx
c00193b0:	5b                   	pop    ebx
c00193b1:	5e                   	pop    esi
c00193b2:	c3                   	ret    

c00193b3 <Sys::write(regs*)>:
c00193b3:	57                   	push   edi
c00193b4:	56                   	push   esi
c00193b5:	53                   	push   ebx
c00193b6:	83 ec 10             	sub    esp,0x10
c00193b9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00193c0:	83 f8 02             	cmp    eax,0x2
c00193c3:	77 10                	ja     c00193d5 <Sys::write(regs*)+0x22>
c00193c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193cd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00193d3:	eb 0e                	jmp    c00193e3 <Sys::write(regs*)+0x30>
c00193d5:	83 ec 0c             	sub    esp,0xc
c00193d8:	50                   	push   eax
c00193d9:	e8 4b 7d ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c00193de:	83 c4 10             	add    esp,0x10
c00193e1:	89 c1                	mov    ecx,eax
c00193e3:	83 c8 ff             	or     eax,0xffffffff
c00193e6:	85 c9                	test   ecx,ecx
c00193e8:	89 c2                	mov    edx,eax
c00193ea:	74 28                	je     c0019414 <Sys::write(regs*)+0x61>
c00193ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193f4:	31 ff                	xor    edi,edi
c00193f6:	83 ec 0c             	sub    esp,0xc
c00193f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193ff:	52                   	push   edx
c0019400:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019403:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019406:	57                   	push   edi
c0019407:	56                   	push   esi
c0019408:	51                   	push   ecx
c0019409:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001940c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019410:	83 c4 20             	add    esp,0x20
c0019413:	99                   	cdq    
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	5b                   	pop    ebx
c0019418:	5e                   	pop    esi
c0019419:	5f                   	pop    edi
c001941a:	c3                   	ret    

c001941b <Sys::yield(regs*)>:
c001941b:	83 ec 0c             	sub    esp,0xc
c001941e:	e8 3f 25 00 00       	call   c001b962 <lockScheduler()>
c0019423:	e8 6e 28 00 00       	call   c001bc96 <schedule()>
c0019428:	e8 37 25 00 00       	call   c001b964 <unlockScheduler()>
c001942d:	31 c0                	xor    eax,eax
c001942f:	31 d2                	xor    edx,edx
c0019431:	83 c4 0c             	add    esp,0xc
c0019434:	c3                   	ret    

c0019435 <sysCallGetPID(regs*)>:
c0019435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001943a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001943d:	8b 00                	mov    eax,DWORD PTR [eax]
c001943f:	99                   	cdq    
c0019440:	c3                   	ret    

c0019441 <sysCallSeekDir(regs*)>:
c0019441:	31 c0                	xor    eax,eax
c0019443:	31 d2                	xor    edx,edx
c0019445:	c3                   	ret    

c0019446 <sysCallTellDir(regs*)>:
c0019446:	31 c0                	xor    eax,eax
c0019448:	31 d2                	xor    edx,edx
c001944a:	c3                   	ret    

c001944b <sysCallVerify(regs*)>:
c001944b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001944f:	31 d2                	xor    edx,edx
c0019451:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019454:	c3                   	ret    

c0019455 <sysCallFork(regs*)>:
c0019455:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001945a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001945f:	c3                   	ret    

c0019460 <sysCallExecve(regs*)>:
c0019460:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019465:	ba ff ff ff ff       	mov    edx,0xffffffff
c001946a:	c3                   	ret    

c001946b <sysCallGetArgc(regs*)>:
c001946b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019470:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019473:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019479:	99                   	cdq    
c001947a:	c3                   	ret    

c001947b <sysFormatDisk(regs*)>:
c001947b:	56                   	push   esi
c001947c:	53                   	push   ebx
c001947d:	53                   	push   ebx
c001947e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019482:	8b 1d c8 95 02 c0    	mov    ebx,DWORD PTR ds:0xc00295c8
c0019488:	eb 25                	jmp    c00194af <sysFormatDisk(regs*)+0x34>
c001948a:	83 ec 0c             	sub    esp,0xc
c001948d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019490:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019492:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019495:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019498:	50                   	push   eax
c0019499:	ff 34 85 60 9a 02 c0 	push   DWORD PTR [eax*4-0x3ffd65a0]
c00194a0:	53                   	push   ebx
c00194a1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00194a4:	83 c4 20             	add    esp,0x20
c00194a7:	83 f8 08             	cmp    eax,0x8
c00194aa:	75 12                	jne    c00194be <sysFormatDisk(regs*)+0x43>
c00194ac:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00194af:	85 db                	test   ebx,ebx
c00194b1:	75 d7                	jne    c001948a <sysFormatDisk(regs*)+0xf>
c00194b3:	59                   	pop    ecx
c00194b4:	b8 03 00 00 00       	mov    eax,0x3
c00194b9:	31 d2                	xor    edx,edx
c00194bb:	5b                   	pop    ebx
c00194bc:	5e                   	pop    esi
c00194bd:	c3                   	ret    
c00194be:	85 c0                	test   eax,eax
c00194c0:	74 1b                	je     c00194dd <sysFormatDisk(regs*)+0x62>
c00194c2:	83 f8 09             	cmp    eax,0x9
c00194c5:	74 0b                	je     c00194d2 <sysFormatDisk(regs*)+0x57>
c00194c7:	59                   	pop    ecx
c00194c8:	b8 02 00 00 00       	mov    eax,0x2
c00194cd:	31 d2                	xor    edx,edx
c00194cf:	5b                   	pop    ebx
c00194d0:	5e                   	pop    esi
c00194d1:	c3                   	ret    
c00194d2:	59                   	pop    ecx
c00194d3:	b8 01 00 00 00       	mov    eax,0x1
c00194d8:	31 d2                	xor    edx,edx
c00194da:	5b                   	pop    ebx
c00194db:	5e                   	pop    esi
c00194dc:	c3                   	ret    
c00194dd:	59                   	pop    ecx
c00194de:	31 c0                	xor    eax,eax
c00194e0:	31 d2                	xor    edx,edx
c00194e2:	5b                   	pop    ebx
c00194e3:	5e                   	pop    esi
c00194e4:	c3                   	ret    

c00194e5 <sysSetDiskVolumeLabel(regs*)>:
c00194e5:	56                   	push   esi
c00194e6:	53                   	push   ebx
c00194e7:	53                   	push   ebx
c00194e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194ec:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00194ef:	83 f8 19             	cmp    eax,0x19
c00194f2:	77 29                	ja     c001951d <sysSetDiskVolumeLabel(regs*)+0x38>
c00194f4:	8b 0c 85 60 9a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd65a0]
c00194fb:	85 c9                	test   ecx,ecx
c00194fd:	74 1e                	je     c001951d <sysSetDiskVolumeLabel(regs*)+0x38>
c00194ff:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019502:	85 d2                	test   edx,edx
c0019504:	74 17                	je     c001951d <sysSetDiskVolumeLabel(regs*)+0x38>
c0019506:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001950c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001950e:	52                   	push   edx
c001950f:	50                   	push   eax
c0019510:	51                   	push   ecx
c0019511:	53                   	push   ebx
c0019512:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0019515:	83 c4 10             	add    esp,0x10
c0019518:	99                   	cdq    
c0019519:	59                   	pop    ecx
c001951a:	5b                   	pop    ebx
c001951b:	5e                   	pop    esi
c001951c:	c3                   	ret    
c001951d:	59                   	pop    ecx
c001951e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019523:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019528:	5b                   	pop    ebx
c0019529:	5e                   	pop    esi
c001952a:	c3                   	ret    

c001952b <sysGetDiskVolumeLabel(regs*)>:
c001952b:	57                   	push   edi
c001952c:	56                   	push   esi
c001952d:	53                   	push   ebx
c001952e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019532:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019535:	83 fa 19             	cmp    edx,0x19
c0019538:	77 34                	ja     c001956e <sysGetDiskVolumeLabel(regs*)+0x43>
c001953a:	8b 0c 95 60 9a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd65a0]
c0019541:	85 c9                	test   ecx,ecx
c0019543:	74 29                	je     c001956e <sysGetDiskVolumeLabel(regs*)+0x43>
c0019545:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019548:	85 db                	test   ebx,ebx
c001954a:	74 22                	je     c001956e <sysGetDiskVolumeLabel(regs*)+0x43>
c001954c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001954f:	85 c0                	test   eax,eax
c0019551:	74 1b                	je     c001956e <sysGetDiskVolumeLabel(regs*)+0x43>
c0019553:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019559:	83 ec 0c             	sub    esp,0xc
c001955c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001955e:	50                   	push   eax
c001955f:	53                   	push   ebx
c0019560:	52                   	push   edx
c0019561:	51                   	push   ecx
c0019562:	56                   	push   esi
c0019563:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019566:	83 c4 20             	add    esp,0x20
c0019569:	99                   	cdq    
c001956a:	5b                   	pop    ebx
c001956b:	5e                   	pop    esi
c001956c:	5f                   	pop    edi
c001956d:	c3                   	ret    
c001956e:	5b                   	pop    ebx
c001956f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019574:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019579:	5e                   	pop    esi
c001957a:	5f                   	pop    edi
c001957b:	c3                   	ret    

c001957c <sysShutdown(regs*)>:
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019583:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019586:	85 c0                	test   eax,eax
c0019588:	74 18                	je     c00195a2 <sysShutdown(regs*)+0x26>
c001958a:	83 f8 01             	cmp    eax,0x1
c001958d:	74 38                	je     c00195c7 <sysShutdown(regs*)+0x4b>
c001958f:	83 f8 02             	cmp    eax,0x2
c0019592:	74 24                	je     c00195b8 <sysShutdown(regs*)+0x3c>
c0019594:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019599:	ba ff ff ff ff       	mov    edx,0xffffffff
c001959e:	83 c4 0c             	add    esp,0xc
c00195a1:	c3                   	ret    
c00195a2:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00195a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00195a9:	6a 00                	push   0x0
c00195ab:	6a 00                	push   0x0
c00195ad:	6a 00                	push   0x0
c00195af:	50                   	push   eax
c00195b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00195b3:	83 c4 10             	add    esp,0x10
c00195b6:	eb dc                	jmp    c0019594 <sysShutdown(regs*)+0x18>
c00195b8:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c00195bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00195bf:	6a 00                	push   0x0
c00195c1:	6a 00                	push   0x0
c00195c3:	6a 01                	push   0x1
c00195c5:	eb e8                	jmp    c00195af <sysShutdown(regs*)+0x33>
c00195c7:	a1 e0 9a 02 c0       	mov    eax,ds:0xc0029ae0
c00195cc:	85 c0                	test   eax,eax
c00195ce:	74 02                	je     c00195d2 <sysShutdown(regs*)+0x56>
c00195d0:	ff d0                	call   eax
c00195d2:	31 c0                	xor    eax,eax
c00195d4:	31 d2                	xor    edx,edx
c00195d6:	83 c4 0c             	add    esp,0xc
c00195d9:	c3                   	ret    

c00195da <sysCallGetCwd(regs*)>:
c00195da:	83 ec 10             	sub    esp,0x10
c00195dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195e1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00195e4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195ef:	e8 fd 94 ff ff       	call   c0012af1 <getcwd(Process*, char*, int)>
c00195f4:	83 c4 1c             	add    esp,0x1c
c00195f7:	99                   	cdq    
c00195f8:	c3                   	ret    

c00195f9 <sysCallSetCwd(regs*)>:
c00195f9:	83 ec 14             	sub    esp,0x14
c00195fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019600:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019608:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001960b:	e8 0b 95 ff ff       	call   c0012b1b <setcwd(Process*, char*)>
c0019610:	83 c4 1c             	add    esp,0x1c
c0019613:	99                   	cdq    
c0019614:	c3                   	ret    

c0019615 <sysCallRealpath(regs*)>:
c0019615:	83 ec 0c             	sub    esp,0xc
c0019618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001961f:	85 d2                	test   edx,edx
c0019621:	74 07                	je     c001962a <sysCallRealpath(regs*)+0x15>
c0019623:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019626:	85 c0                	test   eax,eax
c0019628:	75 0b                	jne    c0019635 <sysCallRealpath(regs*)+0x20>
c001962a:	b8 01 00 00 00       	mov    eax,0x1
c001962f:	31 d2                	xor    edx,edx
c0019631:	83 c4 0c             	add    esp,0xc
c0019634:	c3                   	ret    
c0019635:	51                   	push   ecx
c0019636:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001963c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001963f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019645:	51                   	push   ecx
c0019646:	52                   	push   edx
c0019647:	50                   	push   eax
c0019648:	e8 89 8f ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c001964d:	83 c4 10             	add    esp,0x10
c0019650:	31 c0                	xor    eax,eax
c0019652:	31 d2                	xor    edx,edx
c0019654:	83 c4 0c             	add    esp,0xc
c0019657:	c3                   	ret    

c0019658 <sysCallReadDir(regs*)>:
c0019658:	53                   	push   ebx
c0019659:	83 ec 18             	sub    esp,0x18
c001965c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019660:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019663:	83 f8 02             	cmp    eax,0x2
c0019666:	76 53                	jbe    c00196bb <sysCallReadDir(regs*)+0x63>
c0019668:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001966b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019671:	77 4f                	ja     c00196c2 <sysCallReadDir(regs*)+0x6a>
c0019673:	83 ec 0c             	sub    esp,0xc
c0019676:	50                   	push   eax
c0019677:	e8 ad 7a ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001967c:	83 c4 10             	add    esp,0x10
c001967f:	85 c0                	test   eax,eax
c0019681:	74 50                	je     c00196d3 <sysCallReadDir(regs*)+0x7b>
c0019683:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001968b:	83 ec 0c             	sub    esp,0xc
c001968e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019690:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019694:	51                   	push   ecx
c0019695:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019698:	6a 00                	push   0x0
c001969a:	68 10 01 00 00       	push   0x110
c001969f:	50                   	push   eax
c00196a0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00196a3:	83 c4 20             	add    esp,0x20
c00196a6:	85 c0                	test   eax,eax
c00196a8:	74 38                	je     c00196e2 <sysCallReadDir(regs*)+0x8a>
c00196aa:	83 f8 07             	cmp    eax,0x7
c00196ad:	74 0c                	je     c00196bb <sysCallReadDir(regs*)+0x63>
c00196af:	b8 02 00 00 00       	mov    eax,0x2
c00196b4:	31 d2                	xor    edx,edx
c00196b6:	83 c4 18             	add    esp,0x18
c00196b9:	5b                   	pop    ebx
c00196ba:	c3                   	ret    
c00196bb:	b8 01 00 00 00       	mov    eax,0x1
c00196c0:	eb f2                	jmp    c00196b4 <sysCallReadDir(regs*)+0x5c>
c00196c2:	83 ec 08             	sub    esp,0x8
c00196c5:	52                   	push   edx
c00196c6:	68 48 73 02 c0       	push   0xc0027348
c00196cb:	e8 81 8b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00196d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00196dd:	83 c4 18             	add    esp,0x18
c00196e0:	5b                   	pop    ebx
c00196e1:	c3                   	ret    
c00196e2:	31 c0                	xor    eax,eax
c00196e4:	eb ce                	jmp    c00196b4 <sysCallReadDir(regs*)+0x5c>

c00196e6 <sysCallIsATTY(regs*)>:
c00196e6:	83 ec 0c             	sub    esp,0xc
c00196e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00196f0:	83 f8 02             	cmp    eax,0x2
c00196f3:	76 07                	jbe    c00196fc <sysCallIsATTY(regs*)+0x16>
c00196f5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00196fa:	75 26                	jne    c0019722 <sysCallIsATTY(regs*)+0x3c>
c00196fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019701:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019704:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001970a:	85 c0                	test   eax,eax
c001970c:	74 24                	je     c0019732 <sysCallIsATTY(regs*)+0x4c>
c001970e:	83 ec 0c             	sub    esp,0xc
c0019711:	8b 10                	mov    edx,DWORD PTR [eax]
c0019713:	50                   	push   eax
c0019714:	ff 12                	call   DWORD PTR [edx]
c0019716:	31 d2                	xor    edx,edx
c0019718:	0f b6 c0             	movzx  eax,al
c001971b:	83 c4 10             	add    esp,0x10
c001971e:	83 c4 0c             	add    esp,0xc
c0019721:	c3                   	ret    
c0019722:	83 ec 0c             	sub    esp,0xc
c0019725:	50                   	push   eax
c0019726:	e8 fe 79 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c001972b:	83 c4 10             	add    esp,0x10
c001972e:	85 c0                	test   eax,eax
c0019730:	75 dc                	jne    c001970e <sysCallIsATTY(regs*)+0x28>
c0019732:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019737:	ba ff ff ff ff       	mov    edx,0xffffffff
c001973c:	83 c4 0c             	add    esp,0xc
c001973f:	c3                   	ret    

c0019740 <sysCallSeek(regs*)>:
c0019740:	53                   	push   ebx
c0019741:	83 ec 08             	sub    esp,0x8
c0019744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019748:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001974b:	83 f8 02             	cmp    eax,0x2
c001974e:	76 4a                	jbe    c001979a <sysCallSeek(regs*)+0x5a>
c0019750:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019755:	77 32                	ja     c0019789 <sysCallSeek(regs*)+0x49>
c0019757:	83 ec 0c             	sub    esp,0xc
c001975a:	50                   	push   eax
c001975b:	e8 c9 79 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019760:	83 c4 0c             	add    esp,0xc
c0019763:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019766:	31 db                	xor    ebx,ebx
c0019768:	53                   	push   ebx
c0019769:	51                   	push   ecx
c001976a:	50                   	push   eax
c001976b:	e8 32 91 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	85 c0                	test   eax,eax
c0019775:	0f 95 c0             	setne  al
c0019778:	31 d2                	xor    edx,edx
c001977a:	0f b6 c0             	movzx  eax,al
c001977d:	f7 d8                	neg    eax
c001977f:	83 d2 00             	adc    edx,0x0
c0019782:	83 c4 08             	add    esp,0x8
c0019785:	f7 da                	neg    edx
c0019787:	5b                   	pop    ebx
c0019788:	c3                   	ret    
c0019789:	83 ec 08             	sub    esp,0x8
c001978c:	50                   	push   eax
c001978d:	68 04 74 02 c0       	push   0xc0027404
c0019792:	e8 ba 8a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019797:	83 c4 10             	add    esp,0x10
c001979a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001979f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00197a4:	83 c4 08             	add    esp,0x8
c00197a7:	5b                   	pop    ebx
c00197a8:	c3                   	ret    

c00197a9 <sysCallTell(regs*)>:
c00197a9:	53                   	push   ebx
c00197aa:	83 ec 08             	sub    esp,0x8
c00197ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197b1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00197b4:	83 f8 02             	cmp    eax,0x2
c00197b7:	76 5e                	jbe    c0019817 <sysCallTell(regs*)+0x6e>
c00197b9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00197be:	77 2d                	ja     c00197ed <sysCallTell(regs*)+0x44>
c00197c0:	83 ec 0c             	sub    esp,0xc
c00197c3:	50                   	push   eax
c00197c4:	e8 60 79 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c00197c9:	5a                   	pop    edx
c00197ca:	59                   	pop    ecx
c00197cb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00197ce:	50                   	push   eax
c00197cf:	e8 24 91 ff ff       	call   c00128f8 <File::tell(unsigned long long*)>
c00197d4:	83 c4 10             	add    esp,0x10
c00197d7:	85 c0                	test   eax,eax
c00197d9:	0f 95 c0             	setne  al
c00197dc:	31 d2                	xor    edx,edx
c00197de:	0f b6 c0             	movzx  eax,al
c00197e1:	f7 d8                	neg    eax
c00197e3:	83 d2 00             	adc    edx,0x0
c00197e6:	83 c4 08             	add    esp,0x8
c00197e9:	f7 da                	neg    edx
c00197eb:	5b                   	pop    ebx
c00197ec:	c3                   	ret    
c00197ed:	83 ec 08             	sub    esp,0x8
c00197f0:	50                   	push   eax
c00197f1:	68 1e 74 02 c0       	push   0xc002741e
c00197f6:	e8 56 8a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00197fb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00197fe:	83 c4 10             	add    esp,0x10
c0019801:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019807:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001980e:	31 d2                	xor    edx,edx
c0019810:	31 c0                	xor    eax,eax
c0019812:	83 c4 08             	add    esp,0x8
c0019815:	5b                   	pop    ebx
c0019816:	c3                   	ret    
c0019817:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001981c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019821:	83 c4 08             	add    esp,0x8
c0019824:	5b                   	pop    ebx
c0019825:	c3                   	ret    

c0019826 <sysCallSizeFromFilename(regs*)>:
c0019826:	57                   	push   edi
c0019827:	56                   	push   esi
c0019828:	53                   	push   ebx
c0019829:	83 ec 10             	sub    esp,0x10
c001982c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019830:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0019833:	83 fb 02             	cmp    ebx,0x2
c0019836:	0f 86 8a 00 00 00    	jbe    c00198c6 <sysCallSizeFromFilename(regs*)+0xa0>
c001983c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019842:	77 56                	ja     c001989a <sysCallSizeFromFilename(regs*)+0x74>
c0019844:	83 ec 0c             	sub    esp,0xc
c0019847:	68 14 01 00 00       	push   0x114
c001984c:	e8 11 89 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019851:	83 c4 0c             	add    esp,0xc
c0019854:	89 c7                	mov    edi,eax
c0019856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001985b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001985e:	53                   	push   ebx
c001985f:	57                   	push   edi
c0019860:	e8 1b 8f ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019865:	83 c4 0c             	add    esp,0xc
c0019868:	8d 44 24 13          	lea    eax,[esp+0x13]
c001986c:	50                   	push   eax
c001986d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019870:	57                   	push   edi
c0019871:	e8 1a 92 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0019876:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019879:	89 c3                	mov    ebx,eax
c001987b:	8b 07                	mov    eax,DWORD PTR [edi]
c001987d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019880:	83 c4 10             	add    esp,0x10
c0019883:	31 c0                	xor    eax,eax
c0019885:	85 db                	test   ebx,ebx
c0019887:	0f 95 c0             	setne  al
c001988a:	31 d2                	xor    edx,edx
c001988c:	f7 d8                	neg    eax
c001988e:	83 d2 00             	adc    edx,0x0
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	f7 da                	neg    edx
c0019896:	5b                   	pop    ebx
c0019897:	5e                   	pop    esi
c0019898:	5f                   	pop    edi
c0019899:	c3                   	ret    
c001989a:	83 ec 08             	sub    esp,0x8
c001989d:	53                   	push   ebx
c001989e:	68 38 74 02 c0       	push   0xc0027438
c00198a3:	e8 a9 89 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00198a8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00198ab:	83 c4 10             	add    esp,0x10
c00198ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00198b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00198bb:	31 d2                	xor    edx,edx
c00198bd:	83 c4 10             	add    esp,0x10
c00198c0:	31 c0                	xor    eax,eax
c00198c2:	5b                   	pop    ebx
c00198c3:	5e                   	pop    esi
c00198c4:	5f                   	pop    edi
c00198c5:	c3                   	ret    
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198ce:	5b                   	pop    ebx
c00198cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198d4:	5e                   	pop    esi
c00198d5:	5f                   	pop    edi
c00198d6:	c3                   	ret    

c00198d7 <sysCallSize(regs*)>:
c00198d7:	53                   	push   ebx
c00198d8:	83 ec 18             	sub    esp,0x18
c00198db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00198e2:	83 f8 02             	cmp    eax,0x2
c00198e5:	76 64                	jbe    c001994b <sysCallSize(regs*)+0x74>
c00198e7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00198ec:	77 33                	ja     c0019921 <sysCallSize(regs*)+0x4a>
c00198ee:	83 ec 0c             	sub    esp,0xc
c00198f1:	50                   	push   eax
c00198f2:	e8 32 78 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c00198f7:	83 c4 0c             	add    esp,0xc
c00198fa:	8d 54 24 13          	lea    edx,[esp+0x13]
c00198fe:	52                   	push   edx
c00198ff:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019902:	50                   	push   eax
c0019903:	e8 88 91 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c0019908:	83 c4 10             	add    esp,0x10
c001990b:	85 c0                	test   eax,eax
c001990d:	0f 95 c0             	setne  al
c0019910:	31 d2                	xor    edx,edx
c0019912:	0f b6 c0             	movzx  eax,al
c0019915:	f7 d8                	neg    eax
c0019917:	83 d2 00             	adc    edx,0x0
c001991a:	83 c4 18             	add    esp,0x18
c001991d:	f7 da                	neg    edx
c001991f:	5b                   	pop    ebx
c0019920:	c3                   	ret    
c0019921:	83 ec 08             	sub    esp,0x8
c0019924:	50                   	push   eax
c0019925:	68 38 74 02 c0       	push   0xc0027438
c001992a:	e8 22 89 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001992f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019932:	83 c4 10             	add    esp,0x10
c0019935:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001993b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019942:	31 d2                	xor    edx,edx
c0019944:	31 c0                	xor    eax,eax
c0019946:	83 c4 18             	add    esp,0x18
c0019949:	5b                   	pop    ebx
c001994a:	c3                   	ret    
c001994b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019950:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019955:	83 c4 18             	add    esp,0x18
c0019958:	5b                   	pop    ebx
c0019959:	c3                   	ret    

c001995a <sysCallClose(regs*)>:
c001995a:	53                   	push   ebx
c001995b:	83 ec 08             	sub    esp,0x8
c001995e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019962:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019965:	83 f8 02             	cmp    eax,0x2
c0019968:	76 50                	jbe    c00199ba <sysCallClose(regs*)+0x60>
c001996a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001996f:	74 58                	je     c00199c9 <sysCallClose(regs*)+0x6f>
c0019971:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019976:	74 60                	je     c00199d8 <sysCallClose(regs*)+0x7e>
c0019978:	77 2f                	ja     c00199a9 <sysCallClose(regs*)+0x4f>
c001997a:	83 ec 0c             	sub    esp,0xc
c001997d:	50                   	push   eax
c001997e:	e8 a6 77 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019983:	89 c3                	mov    ebx,eax
c0019985:	89 04 24             	mov    DWORD PTR [esp],eax
c0019988:	e8 b5 8e ff ff       	call   c0012842 <File::close()>
c001998d:	83 c4 10             	add    esp,0x10
c0019990:	85 db                	test   ebx,ebx
c0019992:	74 0c                	je     c00199a0 <sysCallClose(regs*)+0x46>
c0019994:	83 ec 0c             	sub    esp,0xc
c0019997:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019999:	53                   	push   ebx
c001999a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	31 c0                	xor    eax,eax
c00199a2:	31 d2                	xor    edx,edx
c00199a4:	83 c4 08             	add    esp,0x8
c00199a7:	5b                   	pop    ebx
c00199a8:	c3                   	ret    
c00199a9:	83 ec 08             	sub    esp,0x8
c00199ac:	50                   	push   eax
c00199ad:	68 6c 73 02 c0       	push   0xc002736c
c00199b2:	e8 9a 88 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00199b7:	83 c4 10             	add    esp,0x10
c00199ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00199c4:	83 c4 08             	add    esp,0x8
c00199c7:	5b                   	pop    ebx
c00199c8:	c3                   	ret    
c00199c9:	83 ec 0c             	sub    esp,0xc
c00199cc:	68 53 74 02 c0       	push   0xc0027453
c00199d1:	e8 7b 88 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00199d6:	eb c5                	jmp    c001999d <sysCallClose(regs*)+0x43>
c00199d8:	83 ec 0c             	sub    esp,0xc
c00199db:	68 61 74 02 c0       	push   0xc0027461
c00199e0:	eb ef                	jmp    c00199d1 <sysCallClose(regs*)+0x77>

c00199e2 <sysCallOpenDir(regs*)>:
c00199e2:	56                   	push   esi
c00199e3:	53                   	push   ebx
c00199e4:	53                   	push   ebx
c00199e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199e9:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00199ec:	85 f6                	test   esi,esi
c00199ee:	74 51                	je     c0019a41 <sysCallOpenDir(regs*)+0x5f>
c00199f0:	83 ec 0c             	sub    esp,0xc
c00199f3:	68 14 01 00 00       	push   0x114
c00199f8:	e8 65 87 ff ff       	call   c0012162 <operator new(unsigned long)>
c00199fd:	83 c4 0c             	add    esp,0xc
c0019a00:	89 c6                	mov    esi,eax
c0019a02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a07:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019a0d:	56                   	push   esi
c0019a0e:	e8 2f 92 ff ff       	call   c0012c42 <Directory::Directory(char const*, Process*)>
c0019a13:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a16:	e8 8b 92 ff ff       	call   c0012ca6 <Directory::open()>
c0019a1b:	83 c4 10             	add    esp,0x10
c0019a1e:	85 c0                	test   eax,eax
c0019a20:	75 1f                	jne    c0019a41 <sysCallOpenDir(regs*)+0x5f>
c0019a22:	83 ec 0c             	sub    esp,0xc
c0019a25:	56                   	push   esi
c0019a26:	e8 49 74 ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c0019a2b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a2e:	83 c4 10             	add    esp,0x10
c0019a31:	89 02                	mov    DWORD PTR [edx],eax
c0019a33:	c1 f8 1f             	sar    eax,0x1f
c0019a36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019a39:	31 c0                	xor    eax,eax
c0019a3b:	59                   	pop    ecx
c0019a3c:	31 d2                	xor    edx,edx
c0019a3e:	5b                   	pop    ebx
c0019a3f:	5e                   	pop    esi
c0019a40:	c3                   	ret    
c0019a41:	59                   	pop    ecx
c0019a42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a4c:	5b                   	pop    ebx
c0019a4d:	5e                   	pop    esi
c0019a4e:	c3                   	ret    

c0019a4f <sysCallMakeDir(regs*)>:
c0019a4f:	56                   	push   esi
c0019a50:	53                   	push   ebx
c0019a51:	83 ec 10             	sub    esp,0x10
c0019a54:	68 14 01 00 00       	push   0x114
c0019a59:	e8 04 87 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019a5e:	83 c4 0c             	add    esp,0xc
c0019a61:	89 c3                	mov    ebx,eax
c0019a63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a68:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a6f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019a72:	53                   	push   ebx
c0019a73:	e8 ca 91 ff ff       	call   c0012c42 <Directory::Directory(char const*, Process*)>
c0019a78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a7b:	e8 06 94 ff ff       	call   c0012e86 <Directory::create()>
c0019a80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a83:	89 c6                	mov    esi,eax
c0019a85:	e8 78 92 ff ff       	call   c0012d02 <Directory::close()>
c0019a8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a92:	31 c0                	xor    eax,eax
c0019a94:	85 f6                	test   esi,esi
c0019a96:	0f 95 c0             	setne  al
c0019a99:	31 d2                	xor    edx,edx
c0019a9b:	f7 d8                	neg    eax
c0019a9d:	83 d2 00             	adc    edx,0x0
c0019aa0:	83 c4 14             	add    esp,0x14
c0019aa3:	f7 da                	neg    edx
c0019aa5:	5b                   	pop    ebx
c0019aa6:	5e                   	pop    esi
c0019aa7:	c3                   	ret    

c0019aa8 <sysCallCloseDir(regs*)>:
c0019aa8:	53                   	push   ebx
c0019aa9:	83 ec 08             	sub    esp,0x8
c0019aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019ab3:	83 f8 02             	cmp    eax,0x2
c0019ab6:	76 47                	jbe    c0019aff <sysCallCloseDir(regs*)+0x57>
c0019ab8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019abd:	77 2f                	ja     c0019aee <sysCallCloseDir(regs*)+0x46>
c0019abf:	83 ec 0c             	sub    esp,0xc
c0019ac2:	50                   	push   eax
c0019ac3:	e8 61 76 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019ac8:	89 c3                	mov    ebx,eax
c0019aca:	89 04 24             	mov    DWORD PTR [esp],eax
c0019acd:	e8 30 92 ff ff       	call   c0012d02 <Directory::close()>
c0019ad2:	83 c4 10             	add    esp,0x10
c0019ad5:	85 db                	test   ebx,ebx
c0019ad7:	74 0c                	je     c0019ae5 <sysCallCloseDir(regs*)+0x3d>
c0019ad9:	83 ec 0c             	sub    esp,0xc
c0019adc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ade:	53                   	push   ebx
c0019adf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ae2:	83 c4 10             	add    esp,0x10
c0019ae5:	31 c0                	xor    eax,eax
c0019ae7:	31 d2                	xor    edx,edx
c0019ae9:	83 c4 08             	add    esp,0x8
c0019aec:	5b                   	pop    ebx
c0019aed:	c3                   	ret    
c0019aee:	83 ec 08             	sub    esp,0x8
c0019af1:	50                   	push   eax
c0019af2:	68 94 73 02 c0       	push   0xc0027394
c0019af7:	e8 55 87 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019b09:	83 c4 08             	add    esp,0x8
c0019b0c:	5b                   	pop    ebx
c0019b0d:	c3                   	ret    

c0019b0e <sysCallWait(regs*)>:
c0019b0e:	83 ec 10             	sub    esp,0x10
c0019b11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b15:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019b18:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019b1b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019b1e:	e8 ee 22 00 00       	call   c001be11 <waitTask(int, int*, int)>
c0019b23:	83 c4 1c             	add    esp,0x1c
c0019b26:	99                   	cdq    
c0019b27:	c3                   	ret    

c0019b28 <sysCallRmdir(regs*)>:
c0019b28:	56                   	push   esi
c0019b29:	53                   	push   ebx
c0019b2a:	83 ec 10             	sub    esp,0x10
c0019b2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b31:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b34:	68 14 01 00 00       	push   0x114
c0019b39:	e8 24 86 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019b3e:	83 c4 0c             	add    esp,0xc
c0019b41:	89 c3                	mov    ebx,eax
c0019b43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b48:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b4b:	56                   	push   esi
c0019b4c:	53                   	push   ebx
c0019b4d:	e8 2e 8c ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019b52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b55:	e8 02 8e ff ff       	call   c001295c <File::unlink()>
c0019b5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b5d:	89 c6                	mov    esi,eax
c0019b5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b61:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b64:	31 c0                	xor    eax,eax
c0019b66:	85 f6                	test   esi,esi
c0019b68:	0f 95 c0             	setne  al
c0019b6b:	31 d2                	xor    edx,edx
c0019b6d:	f7 d8                	neg    eax
c0019b6f:	83 d2 00             	adc    edx,0x0
c0019b72:	83 c4 14             	add    esp,0x14
c0019b75:	f7 da                	neg    edx
c0019b77:	5b                   	pop    ebx
c0019b78:	5e                   	pop    esi
c0019b79:	c3                   	ret    

c0019b7a <sysCallUnlink(regs*)>:
c0019b7a:	56                   	push   esi
c0019b7b:	53                   	push   ebx
c0019b7c:	83 ec 10             	sub    esp,0x10
c0019b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b83:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b86:	68 14 01 00 00       	push   0x114
c0019b8b:	e8 d2 85 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019b90:	83 c4 0c             	add    esp,0xc
c0019b93:	89 c3                	mov    ebx,eax
c0019b95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b9a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b9d:	56                   	push   esi
c0019b9e:	53                   	push   ebx
c0019b9f:	e8 dc 8b ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ba7:	e8 b0 8d ff ff       	call   c001295c <File::unlink()>
c0019bac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019baf:	89 c6                	mov    esi,eax
c0019bb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019bb6:	31 c0                	xor    eax,eax
c0019bb8:	85 f6                	test   esi,esi
c0019bba:	0f 95 c0             	setne  al
c0019bbd:	31 d2                	xor    edx,edx
c0019bbf:	f7 d8                	neg    eax
c0019bc1:	83 d2 00             	adc    edx,0x0
c0019bc4:	83 c4 14             	add    esp,0x14
c0019bc7:	f7 da                	neg    edx
c0019bc9:	5b                   	pop    ebx
c0019bca:	5e                   	pop    esi
c0019bcb:	c3                   	ret    

c0019bcc <sysCallGetArgv(regs*)>:
c0019bcc:	83 ec 0c             	sub    esp,0xc
c0019bcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bd3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019bd6:	85 c0                	test   eax,eax
c0019bd8:	78 2b                	js     c0019c05 <sysCallGetArgv(regs*)+0x39>
c0019bda:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019be0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019be3:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019be9:	7d 1a                	jge    c0019c05 <sysCallGetArgv(regs*)+0x39>
c0019beb:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019bf2:	85 c0                	test   eax,eax
c0019bf4:	74 17                	je     c0019c0d <sysCallGetArgv(regs*)+0x41>
c0019bf6:	83 ec 08             	sub    esp,0x8
c0019bf9:	50                   	push   eax
c0019bfa:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019bfd:	e8 83 6b fe ff       	call   c0000785 <strcpy>
c0019c02:	83 c4 10             	add    esp,0x10
c0019c05:	31 c0                	xor    eax,eax
c0019c07:	31 d2                	xor    edx,edx
c0019c09:	83 c4 0c             	add    esp,0xc
c0019c0c:	c3                   	ret    
c0019c0d:	b8 01 00 00 00       	mov    eax,0x1
c0019c12:	31 d2                	xor    edx,edx
c0019c14:	83 c4 0c             	add    esp,0xc
c0019c17:	c3                   	ret    

c0019c18 <sysCallTTYName(regs*)>:
c0019c18:	56                   	push   esi
c0019c19:	53                   	push   ebx
c0019c1a:	53                   	push   ebx
c0019c1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c1f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c22:	85 c0                	test   eax,eax
c0019c24:	74 5f                	je     c0019c85 <sysCallTTYName(regs*)+0x6d>
c0019c26:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c29:	83 f8 02             	cmp    eax,0x2
c0019c2c:	77 3e                	ja     c0019c6c <sysCallTTYName(regs*)+0x54>
c0019c2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c33:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c36:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019c3c:	85 db                	test   ebx,ebx
c0019c3e:	74 45                	je     c0019c85 <sysCallTTYName(regs*)+0x6d>
c0019c40:	83 ec 0c             	sub    esp,0xc
c0019c43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c45:	53                   	push   ebx
c0019c46:	ff 10                	call   DWORD PTR [eax]
c0019c48:	83 c4 10             	add    esp,0x10
c0019c4b:	84 c0                	test   al,al
c0019c4d:	74 41                	je     c0019c90 <sysCallTTYName(regs*)+0x78>
c0019c4f:	83 ec 08             	sub    esp,0x8
c0019c52:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019c58:	53                   	push   ebx
c0019c59:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c5c:	e8 24 6b fe ff       	call   c0000785 <strcpy>
c0019c61:	83 c4 10             	add    esp,0x10
c0019c64:	31 c0                	xor    eax,eax
c0019c66:	59                   	pop    ecx
c0019c67:	31 d2                	xor    edx,edx
c0019c69:	5b                   	pop    ebx
c0019c6a:	5e                   	pop    esi
c0019c6b:	c3                   	ret    
c0019c6c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019c71:	74 bb                	je     c0019c2e <sysCallTTYName(regs*)+0x16>
c0019c73:	83 ec 0c             	sub    esp,0xc
c0019c76:	50                   	push   eax
c0019c77:	e8 ad 74 ff ff       	call   c0011129 <getFromFileDescriptor(int)>
c0019c7c:	83 c4 10             	add    esp,0x10
c0019c7f:	89 c3                	mov    ebx,eax
c0019c81:	85 db                	test   ebx,ebx
c0019c83:	75 bb                	jne    c0019c40 <sysCallTTYName(regs*)+0x28>
c0019c85:	59                   	pop    ecx
c0019c86:	b8 01 00 00 00       	mov    eax,0x1
c0019c8b:	31 d2                	xor    edx,edx
c0019c8d:	5b                   	pop    ebx
c0019c8e:	5e                   	pop    esi
c0019c8f:	c3                   	ret    
c0019c90:	59                   	pop    ecx
c0019c91:	b8 02 00 00 00       	mov    eax,0x2
c0019c96:	31 d2                	xor    edx,edx
c0019c98:	5b                   	pop    ebx
c0019c99:	5e                   	pop    esi
c0019c9a:	c3                   	ret    

c0019c9b <sysCallGetEnv(regs*)>:
c0019c9b:	83 ec 0c             	sub    esp,0xc
c0019c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019ca5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019ca8:	85 c9                	test   ecx,ecx
c0019caa:	75 22                	jne    c0019cce <sysCallGetEnv(regs*)+0x33>
c0019cac:	85 d2                	test   edx,edx
c0019cae:	74 08                	je     c0019cb8 <sysCallGetEnv(regs*)+0x1d>
c0019cb0:	31 c0                	xor    eax,eax
c0019cb2:	31 d2                	xor    edx,edx
c0019cb4:	83 c4 0c             	add    esp,0xc
c0019cb7:	c3                   	ret    
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	68 b8 73 02 c0       	push   0xc00273b8
c0019cc0:	e8 3e 6a fe ff       	call   c0000703 <strlen>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	31 d2                	xor    edx,edx
c0019cca:	83 c4 0c             	add    esp,0xc
c0019ccd:	c3                   	ret    
c0019cce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019cd1:	85 d2                	test   edx,edx
c0019cd3:	74 05                	je     c0019cda <sysCallGetEnv(regs*)+0x3f>
c0019cd5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019cd8:	eb d6                	jmp    c0019cb0 <sysCallGetEnv(regs*)+0x15>
c0019cda:	83 ec 08             	sub    esp,0x8
c0019cdd:	68 b8 73 02 c0       	push   0xc00273b8
c0019ce2:	50                   	push   eax
c0019ce3:	e8 9d 6a fe ff       	call   c0000785 <strcpy>
c0019ce8:	83 c4 10             	add    esp,0x10
c0019ceb:	eb c3                	jmp    c0019cb0 <sysCallGetEnv(regs*)+0x15>

c0019ced <sysCallUSleep(regs*)>:
c0019ced:	83 ec 14             	sub    esp,0x14
c0019cf0:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019cf5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cf9:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019d00:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019d03:	01 ca                	add    edx,ecx
c0019d05:	52                   	push   edx
c0019d06:	50                   	push   eax
c0019d07:	e8 9e 21 00 00       	call   c001beaa <nanoSleep(unsigned long long)>
c0019d0c:	31 c0                	xor    eax,eax
c0019d0e:	31 d2                	xor    edx,edx
c0019d10:	83 c4 1c             	add    esp,0x1c
c0019d13:	c3                   	ret    

c0019d14 <sysCallSpawn(regs*)>:
c0019d14:	56                   	push   esi
c0019d15:	53                   	push   ebx
c0019d16:	53                   	push   ebx
c0019d17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d1b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d1e:	85 f6                	test   esi,esi
c0019d20:	75 08                	jne    c0019d2a <sysCallSpawn(regs*)+0x16>
c0019d22:	59                   	pop    ecx
c0019d23:	31 c0                	xor    eax,eax
c0019d25:	31 d2                	xor    edx,edx
c0019d27:	5b                   	pop    ebx
c0019d28:	5e                   	pop    esi
c0019d29:	c3                   	ret    
c0019d2a:	83 ec 0c             	sub    esp,0xc
c0019d2d:	68 3b 07 00 00       	push   0x73b
c0019d32:	e8 2b 84 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019d37:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019d3a:	89 c6                	mov    esi,eax
c0019d3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d41:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019d44:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019d47:	56                   	push   esi
c0019d48:	e8 bd 18 00 00       	call   c001b60a <Process::Process(char const*, Process*, char**)>
c0019d4d:	83 c4 20             	add    esp,0x20
c0019d50:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019d57:	75 c9                	jne    c0019d22 <sysCallSpawn(regs*)+0xe>
c0019d59:	83 ec 0c             	sub    esp,0xc
c0019d5c:	56                   	push   esi
c0019d5d:	e8 0e 1e 00 00       	call   c001bb70 <Process::createUserThread()>
c0019d62:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d64:	83 c4 10             	add    esp,0x10
c0019d67:	99                   	cdq    
c0019d68:	59                   	pop    ecx
c0019d69:	5b                   	pop    ebx
c0019d6a:	5e                   	pop    esi
c0019d6b:	c3                   	ret    

c0019d6c <sysAppSettings(regs*)>:
c0019d6c:	53                   	push   ebx
c0019d6d:	83 ec 08             	sub    esp,0x8
c0019d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d74:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d77:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019d7d:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019d82:	66 3d c0 09          	cmp    ax,0x9c0
c0019d86:	75 2f                	jne    c0019db7 <sysAppSettings(regs*)+0x4b>
c0019d88:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019d8e:	83 e0 1f             	and    eax,0x1f
c0019d91:	3c 01                	cmp    al,0x1
c0019d93:	74 2e                	je     c0019dc3 <sysAppSettings(regs*)+0x57>
c0019d95:	3c 07                	cmp    al,0x7
c0019d97:	0f 84 bd 00 00 00    	je     c0019e5a <sysAppSettings(regs*)+0xee>
c0019d9d:	84 c0                	test   al,al
c0019d9f:	0f 84 dc 00 00 00    	je     c0019e81 <sysAppSettings(regs*)+0x115>
c0019da5:	3c 08                	cmp    al,0x8
c0019da7:	74 6d                	je     c0019e16 <sysAppSettings(regs*)+0xaa>
c0019da9:	0f b6 c0             	movzx  eax,al
c0019dac:	83 c4 08             	add    esp,0x8
c0019daf:	05 e8 03 00 00       	add    eax,0x3e8
c0019db4:	5b                   	pop    ebx
c0019db5:	99                   	cdq    
c0019db6:	c3                   	ret    
c0019db7:	b8 01 00 00 00       	mov    eax,0x1
c0019dbc:	31 d2                	xor    edx,edx
c0019dbe:	83 c4 08             	add    esp,0x8
c0019dc1:	5b                   	pop    ebx
c0019dc2:	c3                   	ret    
c0019dc3:	51                   	push   ecx
c0019dc4:	68 00 01 00 00       	push   0x100
c0019dc9:	6a 00                	push   0x0
c0019dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dd3:	83 c0 0c             	add    eax,0xc
c0019dd6:	50                   	push   eax
c0019dd7:	e8 0a 69 fe ff       	call   c00006e6 <memset>
c0019ddc:	83 c4 0c             	add    esp,0xc
c0019ddf:	68 ff 00 00 00       	push   0xff
c0019de4:	53                   	push   ebx
c0019de5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ded:	83 c0 0c             	add    eax,0xc
c0019df0:	50                   	push   eax
c0019df1:	e8 ba 68 fe ff       	call   c00006b0 <memcpy>
c0019df6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dfb:	5b                   	pop    ebx
c0019dfc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dff:	5a                   	pop    edx
c0019e00:	8d 50 0c             	lea    edx,[eax+0xc]
c0019e03:	52                   	push   edx
c0019e04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e0a:	e8 f9 64 ff ff       	call   c0010308 <VgaText::setTitle(char*)>
c0019e0f:	83 c4 10             	add    esp,0x10
c0019e12:	31 c0                	xor    eax,eax
c0019e14:	eb a6                	jmp    c0019dbc <sysAppSettings(regs*)+0x50>
c0019e16:	83 ec 08             	sub    esp,0x8
c0019e19:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e1f:	83 e0 0f             	and    eax,0xf
c0019e22:	50                   	push   eax
c0019e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e31:	e8 c2 64 ff ff       	call   c00102f8 <VgaText::setTitleColour(VgaColour)>
c0019e36:	58                   	pop    eax
c0019e37:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e3d:	5a                   	pop    edx
c0019e3e:	c1 e8 04             	shr    eax,0x4
c0019e41:	83 e0 0f             	and    eax,0xf
c0019e44:	50                   	push   eax
c0019e45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e53:	e8 90 64 ff ff       	call   c00102e8 <VgaText::setTitleTextColour(VgaColour)>
c0019e58:	eb b5                	jmp    c0019e0f <sysAppSettings(regs*)+0xa3>
c0019e5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e5f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e62:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019e68:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019e6e:	c0 e8 06             	shr    al,0x6
c0019e71:	83 e0 01             	and    eax,0x1
c0019e74:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019e7a:	31 c0                	xor    eax,eax
c0019e7c:	e9 3b ff ff ff       	jmp    c0019dbc <sysAppSettings(regs*)+0x50>
c0019e81:	b8 02 00 00 00       	mov    eax,0x2
c0019e86:	e9 31 ff ff ff       	jmp    c0019dbc <sysAppSettings(regs*)+0x50>

c0019e8b <sysSetFatAttrib(regs*)>:
c0019e8b:	57                   	push   edi
c0019e8c:	56                   	push   esi
c0019e8d:	53                   	push   ebx
c0019e8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e92:	83 ec 0c             	sub    esp,0xc
c0019e95:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e98:	68 14 01 00 00       	push   0x114
c0019e9d:	e8 c0 82 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019ea2:	83 c4 0c             	add    esp,0xc
c0019ea5:	89 c3                	mov    ebx,eax
c0019ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019eac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019eaf:	57                   	push   edi
c0019eb0:	53                   	push   ebx
c0019eb1:	e8 ca 88 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c0019eb6:	83 c4 0c             	add    esp,0xc
c0019eb9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ebc:	0f b6 d4             	movzx  edx,ah
c0019ebf:	0f b6 c0             	movzx  eax,al
c0019ec2:	52                   	push   edx
c0019ec3:	50                   	push   eax
c0019ec4:	53                   	push   ebx
c0019ec5:	e8 2c 8b ff ff       	call   c00129f6 <File::chfatattr(unsigned char, unsigned char)>
c0019eca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ecd:	89 c6                	mov    esi,eax
c0019ecf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ed1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	31 c0                	xor    eax,eax
c0019ed9:	5b                   	pop    ebx
c0019eda:	85 f6                	test   esi,esi
c0019edc:	5e                   	pop    esi
c0019edd:	0f 95 c0             	setne  al
c0019ee0:	5f                   	pop    edi
c0019ee1:	31 d2                	xor    edx,edx
c0019ee3:	f7 d8                	neg    eax
c0019ee5:	83 d2 00             	adc    edx,0x0
c0019ee8:	f7 da                	neg    edx
c0019eea:	c3                   	ret    

c0019eeb <sysPanic(regs*)>:
c0019eeb:	83 ec 18             	sub    esp,0x18
c0019eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ef2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ef5:	e8 14 eb ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0019efa:	c7 04 24 6f 74 02 c0 	mov    DWORD PTR [esp],0xc002746f
c0019f01:	e8 08 eb ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0019f06:	b8 01 00 00 00       	mov    eax,0x1
c0019f0b:	31 d2                	xor    edx,edx
c0019f0d:	83 c4 1c             	add    esp,0x1c
c0019f10:	c3                   	ret    

c0019f11 <sysPipe(regs*)>:
c0019f11:	57                   	push   edi
c0019f12:	56                   	push   esi
c0019f13:	53                   	push   ebx
c0019f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f18:	83 ec 0c             	sub    esp,0xc
c0019f1b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019f1e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019f21:	6a 20                	push   0x20
c0019f23:	e8 3a 82 ff ff       	call   c0012162 <operator new(unsigned long)>
c0019f28:	89 c3                	mov    ebx,eax
c0019f2a:	58                   	pop    eax
c0019f2b:	5a                   	pop    edx
c0019f2c:	68 00 50 00 00       	push   0x5000
c0019f31:	53                   	push   ebx
c0019f32:	e8 0f 5d ff ff       	call   c000fc46 <Pipe::Pipe(int)>
c0019f37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f3a:	e8 35 6f ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c0019f3f:	89 07                	mov    DWORD PTR [edi],eax
c0019f41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f44:	e8 2b 6f ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c0019f49:	83 c4 10             	add    esp,0x10
c0019f4c:	89 06                	mov    DWORD PTR [esi],eax
c0019f4e:	31 d2                	xor    edx,edx
c0019f50:	5b                   	pop    ebx
c0019f51:	31 c0                	xor    eax,eax
c0019f53:	5e                   	pop    esi
c0019f54:	5f                   	pop    edi
c0019f55:	c3                   	ret    

c0019f56 <sysGetUnixTime(regs*)>:
c0019f56:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0019f5b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f65:	e9 de 91 ff ff       	jmp    c0013148 <Clock::timeInSecondsLocal()>

c0019f6a <string_ends_with(char const*, char const*)>:
c0019f6a:	57                   	push   edi
c0019f6b:	56                   	push   esi
c0019f6c:	53                   	push   ebx
c0019f6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f71:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f75:	83 ec 0c             	sub    esp,0xc
c0019f78:	53                   	push   ebx
c0019f79:	e8 85 67 fe ff       	call   c0000703 <strlen>
c0019f7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f81:	89 c6                	mov    esi,eax
c0019f83:	e8 7b 67 fe ff       	call   c0000703 <strlen>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	39 c6                	cmp    esi,eax
c0019f8d:	7d 06                	jge    c0019f95 <string_ends_with(char const*, char const*)+0x2b>
c0019f8f:	5b                   	pop    ebx
c0019f90:	31 c0                	xor    eax,eax
c0019f92:	5e                   	pop    esi
c0019f93:	5f                   	pop    edi
c0019f94:	c3                   	ret    
c0019f95:	83 ec 08             	sub    esp,0x8
c0019f98:	29 c6                	sub    esi,eax
c0019f9a:	57                   	push   edi
c0019f9b:	01 f3                	add    ebx,esi
c0019f9d:	53                   	push   ebx
c0019f9e:	e8 33 68 fe ff       	call   c00007d6 <strcmp>
c0019fa3:	83 c4 10             	add    esp,0x10
c0019fa6:	85 c0                	test   eax,eax
c0019fa8:	5b                   	pop    ebx
c0019fa9:	0f 94 c0             	sete   al
c0019fac:	5e                   	pop    esi
c0019fad:	0f b6 c0             	movzx  eax,al
c0019fb0:	5f                   	pop    edi
c0019fb1:	c3                   	ret    

c0019fb2 <sysCallOpen(regs*)>:
c0019fb2:	56                   	push   esi
c0019fb3:	53                   	push   ebx
c0019fb4:	81 ec 04 01 00 00    	sub    esp,0x104
c0019fba:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0019fc1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0019fc4:	85 c9                	test   ecx,ecx
c0019fc6:	0f 84 b3 00 00 00    	je     c001a07f <sysCallOpen(regs*)+0xcd>
c0019fcc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0019fcf:	85 c0                	test   eax,eax
c0019fd1:	0f 84 a8 00 00 00    	je     c001a07f <sysCallOpen(regs*)+0xcd>
c0019fd7:	52                   	push   edx
c0019fd8:	68 7e 74 02 c0       	push   0xc002747e
c0019fdd:	50                   	push   eax
c0019fde:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019fe2:	56                   	push   esi
c0019fe3:	e8 ee 85 ff ff       	call   c00125d6 <standardiseFiles(char*, char const*, char const*)>
c0019fe8:	89 34 24             	mov    DWORD PTR [esp],esi
c0019feb:	e8 13 67 fe ff       	call   c0000703 <strlen>
c0019ff0:	83 c4 10             	add    esp,0x10
c0019ff3:	48                   	dec    eax
c0019ff4:	74 1d                	je     c001a013 <sysCallOpen(regs*)+0x61>
c0019ff6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0019ff9:	eb 0f                	jmp    c001a00a <sysCallOpen(regs*)+0x58>
c0019ffb:	80 fa 3a             	cmp    dl,0x3a
c0019ffe:	74 0f                	je     c001a00f <sysCallOpen(regs*)+0x5d>
c001a000:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a004:	48                   	dec    eax
c001a005:	74 0c                	je     c001a013 <sysCallOpen(regs*)+0x61>
c001a007:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a00a:	80 fa 2e             	cmp    dl,0x2e
c001a00d:	75 ec                	jne    c0019ffb <sysCallOpen(regs*)+0x49>
c001a00f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a013:	83 ec 08             	sub    esp,0x8
c001a016:	68 82 74 02 c0       	push   0xc0027482
c001a01b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a01e:	e8 47 ff ff ff       	call   c0019f6a <string_ends_with(char const*, char const*)>
c001a023:	83 c4 10             	add    esp,0x10
c001a026:	85 c0                	test   eax,eax
c001a028:	75 17                	jne    c001a041 <sysCallOpen(regs*)+0x8f>
c001a02a:	83 ec 08             	sub    esp,0x8
c001a02d:	68 a3 74 02 c0       	push   0xc00274a3
c001a032:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a035:	e8 30 ff ff ff       	call   c0019f6a <string_ends_with(char const*, char const*)>
c001a03a:	83 c4 10             	add    esp,0x10
c001a03d:	85 c0                	test   eax,eax
c001a03f:	74 51                	je     c001a092 <sysCallOpen(regs*)+0xe0>
c001a041:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a044:	83 ec 08             	sub    esp,0x8
c001a047:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a04d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a054:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a057:	ff 30                	push   DWORD PTR [eax]
c001a059:	68 87 74 02 c0       	push   0xc0027487
c001a05e:	e8 ee 81 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a063:	c7 04 24 96 74 02 c0 	mov    DWORD PTR [esp],0xc0027496
c001a06a:	e8 e2 81 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	81 c4 04 01 00 00    	add    esp,0x104
c001a078:	31 c0                	xor    eax,eax
c001a07a:	31 d2                	xor    edx,edx
c001a07c:	5b                   	pop    ebx
c001a07d:	5e                   	pop    esi
c001a07e:	c3                   	ret    
c001a07f:	81 c4 04 01 00 00    	add    esp,0x104
c001a085:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a08a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a08f:	5b                   	pop    ebx
c001a090:	5e                   	pop    esi
c001a091:	c3                   	ret    
c001a092:	83 ec 08             	sub    esp,0x8
c001a095:	68 83 74 02 c0       	push   0xc0027483
c001a09a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a09d:	e8 34 67 fe ff       	call   c00007d6 <strcmp>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	85 c0                	test   eax,eax
c001a0a7:	74 98                	je     c001a041 <sysCallOpen(regs*)+0x8f>
c001a0a9:	83 ec 08             	sub    esp,0x8
c001a0ac:	68 82 74 02 c0       	push   0xc0027482
c001a0b1:	56                   	push   esi
c001a0b2:	e8 b3 fe ff ff       	call   c0019f6a <string_ends_with(char const*, char const*)>
c001a0b7:	83 c4 10             	add    esp,0x10
c001a0ba:	85 c0                	test   eax,eax
c001a0bc:	75 83                	jne    c001a041 <sysCallOpen(regs*)+0x8f>
c001a0be:	83 ec 08             	sub    esp,0x8
c001a0c1:	68 a8 74 02 c0       	push   0xc00274a8
c001a0c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0c9:	e8 9c fe ff ff       	call   c0019f6a <string_ends_with(char const*, char const*)>
c001a0ce:	83 c4 10             	add    esp,0x10
c001a0d1:	85 c0                	test   eax,eax
c001a0d3:	0f 85 d1 00 00 00    	jne    c001a1aa <sysCallOpen(regs*)+0x1f8>
c001a0d9:	83 ec 08             	sub    esp,0x8
c001a0dc:	68 ad 74 02 c0       	push   0xc00274ad
c001a0e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0e4:	e8 81 fe ff ff       	call   c0019f6a <string_ends_with(char const*, char const*)>
c001a0e9:	83 c4 10             	add    esp,0x10
c001a0ec:	85 c0                	test   eax,eax
c001a0ee:	0f 85 b6 00 00 00    	jne    c001a1aa <sysCallOpen(regs*)+0x1f8>
c001a0f4:	83 ec 08             	sub    esp,0x8
c001a0f7:	68 a9 74 02 c0       	push   0xc00274a9
c001a0fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0ff:	e8 d2 66 fe ff       	call   c00007d6 <strcmp>
c001a104:	83 c4 10             	add    esp,0x10
c001a107:	85 c0                	test   eax,eax
c001a109:	0f 84 9b 00 00 00    	je     c001a1aa <sysCallOpen(regs*)+0x1f8>
c001a10f:	83 ec 08             	sub    esp,0x8
c001a112:	68 a8 74 02 c0       	push   0xc00274a8
c001a117:	56                   	push   esi
c001a118:	e8 4d fe ff ff       	call   c0019f6a <string_ends_with(char const*, char const*)>
c001a11d:	83 c4 10             	add    esp,0x10
c001a120:	85 c0                	test   eax,eax
c001a122:	0f 85 82 00 00 00    	jne    c001a1aa <sysCallOpen(regs*)+0x1f8>
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	68 14 01 00 00       	push   0x114
c001a130:	e8 2d 80 ff ff       	call   c0012162 <operator new(unsigned long)>
c001a135:	83 c4 0c             	add    esp,0xc
c001a138:	89 c6                	mov    esi,eax
c001a13a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a13f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a142:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a145:	56                   	push   esi
c001a146:	e8 35 86 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a14b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a14e:	83 c4 10             	add    esp,0x10
c001a151:	0f b6 c2             	movzx  eax,dl
c001a154:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a157:	89 d0                	mov    eax,edx
c001a159:	83 e0 01             	and    eax,0x1
c001a15c:	f6 c2 02             	test   dl,0x2
c001a15f:	74 03                	je     c001a164 <sysCallOpen(regs*)+0x1b2>
c001a161:	83 c8 02             	or     eax,0x2
c001a164:	f6 c2 04             	test   dl,0x4
c001a167:	74 03                	je     c001a16c <sysCallOpen(regs*)+0x1ba>
c001a169:	83 c8 04             	or     eax,0x4
c001a16c:	f6 c2 08             	test   dl,0x8
c001a16f:	74 03                	je     c001a174 <sysCallOpen(regs*)+0x1c2>
c001a171:	83 c8 0a             	or     eax,0xa
c001a174:	83 e2 10             	and    edx,0x10
c001a177:	74 03                	je     c001a17c <sysCallOpen(regs*)+0x1ca>
c001a179:	83 c8 12             	or     eax,0x12
c001a17c:	83 ec 08             	sub    esp,0x8
c001a17f:	50                   	push   eax
c001a180:	56                   	push   esi
c001a181:	e8 5e 86 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001a186:	83 c4 10             	add    esp,0x10
c001a189:	85 c0                	test   eax,eax
c001a18b:	0f 85 ee fe ff ff    	jne    c001a07f <sysCallOpen(regs*)+0xcd>
c001a191:	83 ec 0c             	sub    esp,0xc
c001a194:	56                   	push   esi
c001a195:	e8 da 6c ff ff       	call   c0010e74 <UnixFile::getFileDescriptor()>
c001a19a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a19d:	89 02                	mov    DWORD PTR [edx],eax
c001a19f:	c1 f8 1f             	sar    eax,0x1f
c001a1a2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a1a5:	e9 c5 fe ff ff       	jmp    c001a06f <sysCallOpen(regs*)+0xbd>
c001a1aa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a1ad:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a1b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a1ba:	e9 b3 fe ff ff       	jmp    c001a072 <sysCallOpen(regs*)+0xc0>

c001a1bf <setupSystemCalls()>:
c001a1bf:	c7 05 c0 9e 02 c0 1b 94 01 c0 	mov    DWORD PTR ds:0xc0029ec0,0xc001941b
c001a1c9:	c7 05 c4 9e 02 c0 49 92 01 c0 	mov    DWORD PTR ds:0xc0029ec4,0xc0019249
c001a1d3:	c7 05 c8 9e 02 c0 5e 93 01 c0 	mov    DWORD PTR ds:0xc0029ec8,0xc001935e
c001a1dd:	c7 05 cc 9e 02 c0 b3 93 01 c0 	mov    DWORD PTR ds:0xc0029ecc,0xc00193b3
c001a1e7:	c7 05 d0 9e 02 c0 f6 92 01 c0 	mov    DWORD PTR ds:0xc0029ed0,0xc00192f6
c001a1f1:	c7 05 d4 9e 02 c0 35 94 01 c0 	mov    DWORD PTR ds:0xc0029ed4,0xc0019435
c001a1fb:	c7 05 d8 9e 02 c0 da 95 01 c0 	mov    DWORD PTR ds:0xc0029ed8,0xc00195da
c001a205:	c7 05 dc 9e 02 c0 f9 95 01 c0 	mov    DWORD PTR ds:0xc0029edc,0xc00195f9
c001a20f:	c7 05 e4 9e 02 c0 5a 99 01 c0 	mov    DWORD PTR ds:0xc0029ee4,0xc001995a
c001a219:	c7 05 e0 9e 02 c0 b2 9f 01 c0 	mov    DWORD PTR ds:0xc0029ee0,0xc0019fb2
c001a223:	c7 05 e8 9e 02 c0 e2 99 01 c0 	mov    DWORD PTR ds:0xc0029ee8,0xc00199e2
c001a22d:	c7 05 ec 9e 02 c0 58 96 01 c0 	mov    DWORD PTR ds:0xc0029eec,0xc0019658
c001a237:	c7 05 f0 9e 02 c0 41 94 01 c0 	mov    DWORD PTR ds:0xc0029ef0,0xc0019441
c001a241:	c7 05 f4 9e 02 c0 46 94 01 c0 	mov    DWORD PTR ds:0xc0029ef4,0xc0019446
c001a24b:	c7 05 f8 9e 02 c0 4f 9a 01 c0 	mov    DWORD PTR ds:0xc0029ef8,0xc0019a4f
c001a255:	c7 05 fc 9e 02 c0 a8 9a 01 c0 	mov    DWORD PTR ds:0xc0029efc,0xc0019aa8
c001a25f:	c7 05 00 9f 02 c0 40 97 01 c0 	mov    DWORD PTR ds:0xc0029f00,0xc0019740
c001a269:	c7 05 04 9f 02 c0 a9 97 01 c0 	mov    DWORD PTR ds:0xc0029f04,0xc00197a9
c001a273:	c7 05 08 9f 02 c0 d7 98 01 c0 	mov    DWORD PTR ds:0xc0029f08,0xc00198d7
c001a27d:	c7 05 0c 9f 02 c0 4b 94 01 c0 	mov    DWORD PTR ds:0xc0029f0c,0xc001944b
c001a287:	c7 05 10 9f 02 c0 0e 9b 01 c0 	mov    DWORD PTR ds:0xc0029f10,0xc0019b0e
c001a291:	c7 05 14 9f 02 c0 55 94 01 c0 	mov    DWORD PTR ds:0xc0029f14,0xc0019455
c001a29b:	c7 05 18 9f 02 c0 60 94 01 c0 	mov    DWORD PTR ds:0xc0029f18,0xc0019460
c001a2a5:	c7 05 1c 9f 02 c0 28 9b 01 c0 	mov    DWORD PTR ds:0xc0029f1c,0xc0019b28
c001a2af:	c7 05 20 9f 02 c0 7a 9b 01 c0 	mov    DWORD PTR ds:0xc0029f20,0xc0019b7a
c001a2b9:	c7 05 24 9f 02 c0 6b 94 01 c0 	mov    DWORD PTR ds:0xc0029f24,0xc001946b
c001a2c3:	c7 05 28 9f 02 c0 cc 9b 01 c0 	mov    DWORD PTR ds:0xc0029f28,0xc0019bcc
c001a2cd:	c7 05 2c 9f 02 c0 15 96 01 c0 	mov    DWORD PTR ds:0xc0029f2c,0xc0019615
c001a2d7:	c7 05 30 9f 02 c0 18 9c 01 c0 	mov    DWORD PTR ds:0xc0029f30,0xc0019c18
c001a2e1:	c7 05 34 9f 02 c0 e6 96 01 c0 	mov    DWORD PTR ds:0xc0029f34,0xc00196e6
c001a2eb:	c7 05 38 9f 02 c0 ed 9c 01 c0 	mov    DWORD PTR ds:0xc0029f38,0xc0019ced
c001a2f5:	c7 05 3c 9f 02 c0 26 98 01 c0 	mov    DWORD PTR ds:0xc0029f3c,0xc0019826
c001a2ff:	c7 05 40 9f 02 c0 14 9d 01 c0 	mov    DWORD PTR ds:0xc0029f40,0xc0019d14
c001a309:	c7 05 44 9f 02 c0 9b 9c 01 c0 	mov    DWORD PTR ds:0xc0029f44,0xc0019c9b
c001a313:	c7 05 48 9f 02 c0 6c 9d 01 c0 	mov    DWORD PTR ds:0xc0029f48,0xc0019d6c
c001a31d:	c7 05 4c 9f 02 c0 7b 94 01 c0 	mov    DWORD PTR ds:0xc0029f4c,0xc001947b
c001a327:	c7 05 50 9f 02 c0 e5 94 01 c0 	mov    DWORD PTR ds:0xc0029f50,0xc00194e5
c001a331:	c7 05 54 9f 02 c0 2b 95 01 c0 	mov    DWORD PTR ds:0xc0029f54,0xc001952b
c001a33b:	c7 05 58 9f 02 c0 8b 9e 01 c0 	mov    DWORD PTR ds:0xc0029f58,0xc0019e8b
c001a345:	c7 05 5c 9f 02 c0 eb 9e 01 c0 	mov    DWORD PTR ds:0xc0029f5c,0xc0019eeb
c001a34f:	c7 05 60 9f 02 c0 7c 95 01 c0 	mov    DWORD PTR ds:0xc0029f60,0xc001957c
c001a359:	c7 05 64 9f 02 c0 11 9f 01 c0 	mov    DWORD PTR ds:0xc0029f64,0xc0019f11
c001a363:	c7 05 68 9f 02 c0 56 9f 01 c0 	mov    DWORD PTR ds:0xc0029f68,0xc0019f56
c001a36d:	c7 05 6c 9f 02 c0 61 92 01 c0 	mov    DWORD PTR ds:0xc0029f6c,0xc0019261
c001a377:	c3                   	ret    

c001a378 <systemCall(regs*, void*)>:
c001a378:	53                   	push   ebx
c001a379:	83 ec 08             	sub    esp,0x8
c001a37c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a380:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a383:	83 f8 7f             	cmp    eax,0x7f
c001a386:	77 16                	ja     c001a39e <systemCall(regs*, void*)+0x26>
c001a388:	8b 14 85 c0 9e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6140]
c001a38f:	85 d2                	test   edx,edx
c001a391:	74 0b                	je     c001a39e <systemCall(regs*, void*)+0x26>
c001a393:	83 ec 0c             	sub    esp,0xc
c001a396:	53                   	push   ebx
c001a397:	ff d2                	call   edx
c001a399:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a39c:	eb 0d                	jmp    c001a3ab <systemCall(regs*, void*)+0x33>
c001a39e:	52                   	push   edx
c001a39f:	52                   	push   edx
c001a3a0:	50                   	push   eax
c001a3a1:	68 b2 74 02 c0       	push   0xc00274b2
c001a3a6:	e8 a6 7e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a3ab:	83 c4 10             	add    esp,0x10
c001a3ae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a3b3:	31 d2                	xor    edx,edx
c001a3b5:	83 c4 08             	add    esp,0x8
c001a3b8:	5b                   	pop    ebx
c001a3b9:	c3                   	ret    

c001a3ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a3ba:	55                   	push   ebp
c001a3bb:	89 e5                	mov    ebp,esp
c001a3bd:	57                   	push   edi
c001a3be:	56                   	push   esi
c001a3bf:	53                   	push   ebx
c001a3c0:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a3c6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a3c9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a3cc:	85 c0                	test   eax,eax
c001a3ce:	0f 95 c1             	setne  cl
c001a3d1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a3d5:	0f 94 c2             	sete   dl
c001a3d8:	84 d1                	test   cl,dl
c001a3da:	74 26                	je     c001a402 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3dc:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a3e3:	74 1d                	je     c001a402 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3e5:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a3e8:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a3ee:	89 d6                	mov    esi,edx
c001a3f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a3f6:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a3fc:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a3ff:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a402:	83 ec 0c             	sub    esp,0xc
c001a405:	05 ff 0f 00 00       	add    eax,0xfff
c001a40a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a40d:	6a 01                	push   0x1
c001a40f:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a415:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a41b:	e8 5f 6e ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	89 c6                	mov    esi,eax
c001a425:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a42b:	0f 86 21 01 00 00    	jbe    c001a552 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a431:	c1 eb 0c             	shr    ebx,0xc
c001a434:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a43e:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a444:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a447:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a44a:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a450:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a453:	29 d8                	sub    eax,ebx
c001a455:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a45b:	0f 83 f4 00 00 00    	jae    c001a555 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a461:	83 ec 0c             	sub    esp,0xc
c001a464:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a46a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a46d:	3d 00 10 00 00       	cmp    eax,0x1000
c001a472:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a474:	52                   	push   edx
c001a475:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a47b:	52                   	push   edx
c001a47c:	76 05                	jbe    c001a483 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a47e:	b8 00 10 00 00       	mov    eax,0x1000
c001a483:	31 d2                	xor    edx,edx
c001a485:	52                   	push   edx
c001a486:	50                   	push   eax
c001a487:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a48a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a48d:	83 c4 20             	add    esp,0x20
c001a490:	85 c0                	test   eax,eax
c001a492:	74 1f                	je     c001a4b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a494:	51                   	push   ecx
c001a495:	51                   	push   ecx
c001a496:	50                   	push   eax
c001a497:	68 c6 74 02 c0       	push   0xc00274c6
c001a49c:	e8 b0 7d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a4a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a4a4:	e8 30 71 ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a4a9:	83 c4 10             	add    esp,0x10
c001a4ac:	31 c0                	xor    eax,eax
c001a4ae:	e9 7c 01 00 00       	jmp    c001a62f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a4b3:	e8 aa 14 00 00       	call   c001b962 <lockScheduler()>
c001a4b8:	e8 4d 52 ff ff       	call   c000f70a <Phys::allocatePage()>
c001a4bd:	6a 07                	push   0x7
c001a4bf:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a4c5:	56                   	push   esi
c001a4c6:	50                   	push   eax
c001a4c7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4cd:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4d0:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4d6:	e8 77 74 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a4db:	83 c4 0c             	add    esp,0xc
c001a4de:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4e4:	6a 00                	push   0x0
c001a4e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4ec:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4ef:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4f5:	e8 b6 72 ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001a4fa:	58                   	pop    eax
c001a4fb:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a501:	5a                   	pop    edx
c001a502:	68 07 04 00 00       	push   0x407
c001a507:	53                   	push   ebx
c001a508:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a50e:	50                   	push   eax
c001a50f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a515:	6a 00                	push   0x0
c001a517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a51c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a51f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a525:	e8 de 77 ff ff       	call   c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a52a:	83 c4 1c             	add    esp,0x1c
c001a52d:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a533:	68 00 10 00 00       	push   0x1000
c001a538:	50                   	push   eax
c001a539:	56                   	push   esi
c001a53a:	e8 71 61 fe ff       	call   c00006b0 <memcpy>
c001a53f:	e8 20 14 00 00       	call   c001b964 <unlockScheduler()>
c001a544:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	e9 f5 fe ff ff       	jmp    c001a447 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a552:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a555:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a55f:	0f 86 bc 00 00 00    	jbe    c001a621 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a565:	e8 f8 13 00 00       	call   c001b962 <lockScheduler()>
c001a56a:	51                   	push   ecx
c001a56b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a571:	6a 00                	push   0x0
c001a573:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a578:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a57b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a581:	e8 2a 72 ff ff       	call   c00117b0 <VAS::mapOtherVASIn(bool, VAS*)>
c001a586:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a58c:	83 c4 10             	add    esp,0x10
c001a58f:	c1 e8 0c             	shr    eax,0xc
c001a592:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a59c:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a5a2:	e8 63 51 ff ff       	call   c000f70a <Phys::allocatePage()>
c001a5a7:	6a 07                	push   0x7
c001a5a9:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a5af:	56                   	push   esi
c001a5b0:	50                   	push   eax
c001a5b1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a5b7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a5ba:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a5c0:	e8 8d 73 ff ff       	call   c0011952 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5c5:	58                   	pop    eax
c001a5c6:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a5cc:	5a                   	pop    edx
c001a5cd:	68 07 04 00 00       	push   0x407
c001a5d2:	53                   	push   ebx
c001a5d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a5d9:	50                   	push   eax
c001a5da:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5e0:	6a 00                	push   0x0
c001a5e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5e7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5ea:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5f0:	e8 13 77 ff ff       	call   c0011d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5f5:	83 c4 1c             	add    esp,0x1c
c001a5f8:	68 00 10 00 00       	push   0x1000
c001a5fd:	6a 00                	push   0x0
c001a5ff:	56                   	push   esi
c001a600:	e8 e1 60 fe ff       	call   c00006e6 <memset>
c001a605:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a60b:	83 c4 10             	add    esp,0x10
c001a60e:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a614:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a61a:	77 86                	ja     c001a5a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a61c:	e8 43 13 00 00       	call   c001b964 <unlockScheduler()>
c001a621:	83 ec 0c             	sub    esp,0xc
c001a624:	56                   	push   esi
c001a625:	e8 af 6f ff ff       	call   c00115d9 <Virt::freeKernelVirtualPages(unsigned long)>
c001a62a:	83 c4 10             	add    esp,0x10
c001a62d:	b0 01                	mov    al,0x1
c001a62f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a632:	5b                   	pop    ebx
c001a633:	5e                   	pop    esi
c001a634:	5f                   	pop    edi
c001a635:	5d                   	pop    ebp
c001a636:	c3                   	ret    

c001a637 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a637:	55                   	push   ebp
c001a638:	57                   	push   edi
c001a639:	56                   	push   esi
c001a63a:	53                   	push   ebx
c001a63b:	83 ec 48             	sub    esp,0x48
c001a63e:	68 14 01 00 00       	push   0x114
c001a643:	e8 1a 7b ff ff       	call   c0012162 <operator new(unsigned long)>
c001a648:	83 c4 0c             	add    esp,0xc
c001a64b:	89 c6                	mov    esi,eax
c001a64d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a651:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a655:	50                   	push   eax
c001a656:	e8 25 81 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a65b:	58                   	pop    eax
c001a65c:	5a                   	pop    edx
c001a65d:	6a 01                	push   0x1
c001a65f:	56                   	push   esi
c001a660:	e8 7f 81 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001a665:	83 c4 10             	add    esp,0x10
c001a668:	85 c0                	test   eax,eax
c001a66a:	0f 85 47 01 00 00    	jne    c001a7b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a670:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a678:	83 ec 0c             	sub    esp,0xc
c001a67b:	6a 34                	push   0x34
c001a67d:	e8 de 4a ff ff       	call   c000f160 <malloc>
c001a682:	89 c3                	mov    ebx,eax
c001a684:	58                   	pop    eax
c001a685:	8b 06                	mov    eax,DWORD PTR [esi]
c001a687:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a68b:	57                   	push   edi
c001a68c:	53                   	push   ebx
c001a68d:	6a 00                	push   0x0
c001a68f:	6a 34                	push   0x34
c001a691:	56                   	push   esi
c001a692:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a695:	83 c4 20             	add    esp,0x20
c001a698:	85 c0                	test   eax,eax
c001a69a:	0f 85 17 01 00 00    	jne    c001a7b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6a0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a6a6:	0f 85 0b 01 00 00    	jne    c001a7b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a6af:	85 c0                	test   eax,eax
c001a6b1:	0f 84 00 01 00 00    	je     c001a7b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6b7:	31 d2                	xor    edx,edx
c001a6b9:	55                   	push   ebp
c001a6ba:	52                   	push   edx
c001a6bb:	50                   	push   eax
c001a6bc:	56                   	push   esi
c001a6bd:	e8 e0 81 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	85 c0                	test   eax,eax
c001a6c7:	0f 85 ea 00 00 00    	jne    c001a7b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6cd:	83 ec 0c             	sub    esp,0xc
c001a6d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a6d3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6db:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6df:	0f af c2             	imul   eax,edx
c001a6e2:	50                   	push   eax
c001a6e3:	e8 78 4a ff ff       	call   c000f160 <malloc>
c001a6e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6ef:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6f5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6f9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6fd:	0f af c2             	imul   eax,edx
c001a700:	99                   	cdq    
c001a701:	52                   	push   edx
c001a702:	50                   	push   eax
c001a703:	56                   	push   esi
c001a704:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a707:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a70a:	83 c4 20             	add    esp,0x20
c001a70d:	85 c0                	test   eax,eax
c001a70f:	0f 84 a2 00 00 00    	je     c001a7b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a715:	31 d2                	xor    edx,edx
c001a717:	51                   	push   ecx
c001a718:	52                   	push   edx
c001a719:	50                   	push   eax
c001a71a:	56                   	push   esi
c001a71b:	e8 82 81 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a720:	83 c4 10             	add    esp,0x10
c001a723:	85 c0                	test   eax,eax
c001a725:	0f 85 8c 00 00 00    	jne    c001a7b7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a72b:	83 ec 0c             	sub    esp,0xc
c001a72e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a732:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a736:	31 ed                	xor    ebp,ebp
c001a738:	0f af c2             	imul   eax,edx
c001a73b:	50                   	push   eax
c001a73c:	e8 1f 4a ff ff       	call   c000f160 <malloc>
c001a741:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a744:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a748:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a74e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a752:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a756:	0f af c2             	imul   eax,edx
c001a759:	99                   	cdq    
c001a75a:	52                   	push   edx
c001a75b:	50                   	push   eax
c001a75c:	56                   	push   esi
c001a75d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a760:	83 c4 20             	add    esp,0x20
c001a763:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a76b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a76f:	0f 86 80 00 00 00    	jbe    c001a7f5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a775:	0f b7 fd             	movzx  edi,bp
c001a778:	c1 e7 05             	shl    edi,0x5
c001a77b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a77f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a782:	75 6b                	jne    c001a7ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a784:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a787:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a78b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a78e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a792:	52                   	push   edx
c001a793:	31 d2                	xor    edx,edx
c001a795:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a798:	52                   	push   edx
c001a799:	50                   	push   eax
c001a79a:	56                   	push   esi
c001a79b:	e8 02 81 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a7a0:	83 c4 10             	add    esp,0x10
c001a7a3:	85 c0                	test   eax,eax
c001a7a5:	74 17                	je     c001a7be <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a7a7:	83 ec 0c             	sub    esp,0xc
c001a7aa:	68 f1 74 02 c0       	push   0xc00274f1
c001a7af:	e8 9d 7a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a7b4:	83 c4 10             	add    esp,0x10
c001a7b7:	31 c0                	xor    eax,eax
c001a7b9:	e9 87 00 00 00       	jmp    c001a845 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a7be:	83 ec 0c             	sub    esp,0xc
c001a7c1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a7c4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a7c7:	50                   	push   eax
c001a7c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7d0:	56                   	push   esi
c001a7d1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a7d5:	e8 e0 fb ff ff       	call   c001a3ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a7da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7de:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a7e2:	83 c4 20             	add    esp,0x20
c001a7e5:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a7e9:	73 04                	jae    c001a7ef <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a7eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7ef:	45                   	inc    ebp
c001a7f0:	e9 76 ff ff ff       	jmp    c001a76b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a7f5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a7f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a801:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a807:	83 ec 0c             	sub    esp,0xc
c001a80a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a810:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a815:	05 00 10 00 00       	add    eax,0x1000
c001a81a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a81d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a821:	e8 4a 49 ff ff       	call   c000f170 <free>
c001a826:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a829:	e8 42 49 ff ff       	call   c000f170 <free>
c001a82e:	58                   	pop    eax
c001a82f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a833:	e8 38 49 ff ff       	call   c000f170 <free>
c001a838:	89 34 24             	mov    DWORD PTR [esp],esi
c001a83b:	e8 02 80 ff ff       	call   c0012842 <File::close()>
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	b0 01                	mov    al,0x1
c001a845:	83 c4 3c             	add    esp,0x3c
c001a848:	5b                   	pop    ebx
c001a849:	5e                   	pop    esi
c001a84a:	5f                   	pop    edi
c001a84b:	5d                   	pop    ebp
c001a84c:	c3                   	ret    

c001a84d <Thr::runtimeReferenceHelper()>:
c001a84d:	83 ec 18             	sub    esp,0x18
c001a850:	68 f9 74 02 c0       	push   0xc00274f9
c001a855:	e8 f7 79 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001a85a:	fa                   	cli    
c001a85b:	83 c4 10             	add    esp,0x10
c001a85e:	eb fe                	jmp    c001a85e <Thr::runtimeReferenceHelper()+0x11>

c001a860 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a860:	57                   	push   edi
c001a861:	56                   	push   esi
c001a862:	53                   	push   ebx
c001a863:	31 db                	xor    ebx,ebx
c001a865:	39 1d 60 a8 02 c0    	cmp    DWORD PTR ds:0xc002a860,ebx
c001a86b:	7e 3c                	jle    c001a8a9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a86d:	8b 34 9d e0 a7 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5820]
c001a874:	31 ff                	xor    edi,edi
c001a876:	39 3c 9d e0 a6 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5920],edi
c001a87d:	7e 27                	jle    c001a8a6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a87f:	50                   	push   eax
c001a880:	50                   	push   eax
c001a881:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a885:	8b 06                	mov    eax,DWORD PTR [esi]
c001a887:	03 04 9d 60 a7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd58a0]
c001a88e:	50                   	push   eax
c001a88f:	e8 42 5f fe ff       	call   c00007d6 <strcmp>
c001a894:	83 c4 10             	add    esp,0x10
c001a897:	85 c0                	test   eax,eax
c001a899:	75 05                	jne    c001a8a0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a89b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a89e:	eb 0b                	jmp    c001a8ab <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a8a0:	83 c6 10             	add    esi,0x10
c001a8a3:	47                   	inc    edi
c001a8a4:	eb d0                	jmp    c001a876 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a8a6:	43                   	inc    ebx
c001a8a7:	eb bc                	jmp    c001a865 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a8a9:	31 c0                	xor    eax,eax
c001a8ab:	5b                   	pop    ebx
c001a8ac:	5e                   	pop    esi
c001a8ad:	5f                   	pop    edi
c001a8ae:	c3                   	ret    

c001a8af <Thr::loadKernelSymbolTable(char const*)>:
c001a8af:	55                   	push   ebp
c001a8b0:	57                   	push   edi
c001a8b1:	56                   	push   esi
c001a8b2:	53                   	push   ebx
c001a8b3:	83 ec 68             	sub    esp,0x68
c001a8b6:	8b 35 b4 a8 02 c0    	mov    esi,DWORD PTR ds:0xc002a8b4
c001a8bc:	68 14 01 00 00       	push   0x114
c001a8c1:	e8 9c 78 ff ff       	call   c0012162 <operator new(unsigned long)>
c001a8c6:	83 c4 0c             	add    esp,0xc
c001a8c9:	89 c3                	mov    ebx,eax
c001a8cb:	56                   	push   esi
c001a8cc:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a8d0:	50                   	push   eax
c001a8d1:	e8 aa 7e ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001a8d6:	5e                   	pop    esi
c001a8d7:	5f                   	pop    edi
c001a8d8:	6a 01                	push   0x1
c001a8da:	53                   	push   ebx
c001a8db:	e8 04 7f ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	31 d2                	xor    edx,edx
c001a8e5:	85 c0                	test   eax,eax
c001a8e7:	0f 85 79 02 00 00    	jne    c001ab66 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a8f5:	83 ec 0c             	sub    esp,0xc
c001a8f8:	6a 34                	push   0x34
c001a8fa:	e8 61 48 ff ff       	call   c000f160 <malloc>
c001a8ff:	59                   	pop    ecx
c001a900:	89 c7                	mov    edi,eax
c001a902:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a906:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a908:	56                   	push   esi
c001a909:	57                   	push   edi
c001a90a:	6a 00                	push   0x0
c001a90c:	6a 34                	push   0x34
c001a90e:	53                   	push   ebx
c001a90f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a912:	83 c4 20             	add    esp,0x20
c001a915:	85 c0                	test   eax,eax
c001a917:	74 17                	je     c001a930 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a919:	83 ec 0c             	sub    esp,0xc
c001a91c:	68 1b 75 02 c0       	push   0xc002751b
c001a921:	e8 e8 e0 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001a926:	83 c4 10             	add    esp,0x10
c001a929:	31 d2                	xor    edx,edx
c001a92b:	e9 36 02 00 00       	jmp    c001ab66 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a930:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a936:	75 e1                	jne    c001a919 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a938:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a93b:	85 c0                	test   eax,eax
c001a93d:	74 da                	je     c001a919 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a93f:	52                   	push   edx
c001a940:	31 d2                	xor    edx,edx
c001a942:	52                   	push   edx
c001a943:	50                   	push   eax
c001a944:	53                   	push   ebx
c001a945:	e8 58 7f ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a94a:	83 c4 10             	add    esp,0x10
c001a94d:	85 c0                	test   eax,eax
c001a94f:	75 c8                	jne    c001a919 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a951:	83 ec 0c             	sub    esp,0xc
c001a954:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a958:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a95c:	31 ed                	xor    ebp,ebp
c001a95e:	0f af c2             	imul   eax,edx
c001a961:	50                   	push   eax
c001a962:	e8 f9 47 ff ff       	call   c000f160 <malloc>
c001a967:	89 34 24             	mov    DWORD PTR [esp],esi
c001a96a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a96e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a970:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a974:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a978:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a97c:	0f af c2             	imul   eax,edx
c001a97f:	99                   	cdq    
c001a980:	52                   	push   edx
c001a981:	50                   	push   eax
c001a982:	53                   	push   ebx
c001a983:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a986:	83 c4 20             	add    esp,0x20
c001a989:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a991:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001a999:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a9a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a9a9:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001a9ad:	0f 86 aa 00 00 00    	jbe    c001aa5d <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001a9b3:	0f b7 f5             	movzx  esi,bp
c001a9b6:	6b f6 28             	imul   esi,esi,0x28
c001a9b9:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001a9bd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a9c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9c4:	50                   	push   eax
c001a9c5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a9c9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001a9cd:	8b 16                	mov    edx,DWORD PTR [esi]
c001a9cf:	6b c0 28             	imul   eax,eax,0x28
c001a9d2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001a9d6:	89 d0                	mov    eax,edx
c001a9d8:	31 d2                	xor    edx,edx
c001a9da:	52                   	push   edx
c001a9db:	50                   	push   eax
c001a9dc:	53                   	push   ebx
c001a9dd:	e8 c0 7e ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001a9e2:	83 c4 0c             	add    esp,0xc
c001a9e5:	6a 20                	push   0x20
c001a9e7:	6a 00                	push   0x0
c001a9e9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9ed:	52                   	push   edx
c001a9ee:	e8 f3 5c fe ff       	call   c00006e6 <memset>
c001a9f3:	58                   	pop    eax
c001a9f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9f6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a9fa:	51                   	push   ecx
c001a9fb:	8d 54 24 40          	lea    edx,[esp+0x40]
c001a9ff:	52                   	push   edx
c001aa00:	6a 00                	push   0x0
c001aa02:	6a 1f                	push   0x1f
c001aa04:	53                   	push   ebx
c001aa05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa08:	83 c4 18             	add    esp,0x18
c001aa0b:	68 32 75 02 c0       	push   0xc0027532
c001aa10:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001aa14:	52                   	push   edx
c001aa15:	e8 bc 5d fe ff       	call   c00007d6 <strcmp>
c001aa1a:	83 c4 10             	add    esp,0x10
c001aa1d:	85 c0                	test   eax,eax
c001aa1f:	75 0f                	jne    c001aa30 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001aa21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa30:	50                   	push   eax
c001aa31:	50                   	push   eax
c001aa32:	68 3a 75 02 c0       	push   0xc002753a
c001aa37:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aa3b:	50                   	push   eax
c001aa3c:	e8 95 5d fe ff       	call   c00007d6 <strcmp>
c001aa41:	83 c4 10             	add    esp,0x10
c001aa44:	85 c0                	test   eax,eax
c001aa46:	75 0f                	jne    c001aa57 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aa48:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa53:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa57:	45                   	inc    ebp
c001aa58:	e9 4c ff ff ff       	jmp    c001a9a9 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aa5d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa62:	75 10                	jne    c001aa74 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aa64:	83 ec 0c             	sub    esp,0xc
c001aa67:	68 42 75 02 c0       	push   0xc0027542
c001aa6c:	e8 9d df ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001aa71:	83 c4 10             	add    esp,0x10
c001aa74:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa79:	75 10                	jne    c001aa8b <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aa7b:	83 ec 0c             	sub    esp,0xc
c001aa7e:	68 42 75 02 c0       	push   0xc0027542
c001aa83:	e8 86 df ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001aa88:	83 c4 10             	add    esp,0x10
c001aa8b:	31 d2                	xor    edx,edx
c001aa8d:	50                   	push   eax
c001aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa92:	52                   	push   edx
c001aa93:	50                   	push   eax
c001aa94:	53                   	push   ebx
c001aa95:	e8 08 7e ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001aa9a:	5a                   	pop    edx
c001aa9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa9f:	e8 bc 46 ff ff       	call   c000f160 <malloc>
c001aaa4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aaac:	89 c1                	mov    ecx,eax
c001aaae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aab2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aab6:	5e                   	pop    esi
c001aab7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aab9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001aabd:	55                   	push   ebp
c001aabe:	51                   	push   ecx
c001aabf:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001aac3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aac7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aacb:	53                   	push   ebx
c001aacc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aacf:	83 c4 14             	add    esp,0x14
c001aad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aad6:	e8 85 46 ff ff       	call   c000f160 <malloc>
c001aadb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aade:	89 c6                	mov    esi,eax
c001aae0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aae2:	56                   	push   esi
c001aae3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aae7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaeb:	53                   	push   ebx
c001aaec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aaef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aaf3:	8b 15 60 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a860
c001aaf9:	83 c4 1c             	add    esp,0x1c
c001aafc:	c1 e8 04             	shr    eax,0x4
c001aaff:	89 04 95 e0 a6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5920],eax
c001ab06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab0a:	31 d2                	xor    edx,edx
c001ab0c:	52                   	push   edx
c001ab0d:	50                   	push   eax
c001ab0e:	53                   	push   ebx
c001ab0f:	e8 8e 7d ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001ab14:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ab17:	31 d2                	xor    edx,edx
c001ab19:	56                   	push   esi
c001ab1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab1e:	52                   	push   edx
c001ab1f:	50                   	push   eax
c001ab20:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab22:	53                   	push   ebx
c001ab23:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab26:	83 c4 14             	add    esp,0x14
c001ab29:	53                   	push   ebx
c001ab2a:	e8 13 7d ff ff       	call   c0012842 <File::close()>
c001ab2f:	5d                   	pop    ebp
c001ab30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab34:	e8 37 46 ff ff       	call   c000f170 <free>
c001ab39:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab3c:	e8 2f 46 ff ff       	call   c000f170 <free>
c001ab41:	a1 60 a8 02 c0       	mov    eax,ds:0xc002a860
c001ab46:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ab4a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab4d:	89 0c 85 e0 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5820],ecx
c001ab54:	89 15 60 a8 02 c0    	mov    DWORD PTR ds:0xc002a860,edx
c001ab5a:	89 34 85 60 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd58a0],esi
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	b2 01                	mov    dl,0x1
c001ab66:	83 c4 5c             	add    esp,0x5c
c001ab69:	88 d0                	mov    al,dl
c001ab6b:	5b                   	pop    ebx
c001ab6c:	5e                   	pop    esi
c001ab6d:	5f                   	pop    edi
c001ab6e:	5d                   	pop    ebp
c001ab6f:	c3                   	ret    

c001ab70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ab70:	55                   	push   ebp
c001ab71:	57                   	push   edi
c001ab72:	56                   	push   esi
c001ab73:	53                   	push   ebx
c001ab74:	81 ec 68 03 00 00    	sub    esp,0x368
c001ab7a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ab81:	8b 1d b4 a8 02 c0    	mov    ebx,DWORD PTR ds:0xc002a8b4
c001ab87:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab8b:	68 14 01 00 00       	push   0x114
c001ab90:	e8 cd 75 ff ff       	call   c0012162 <operator new(unsigned long)>
c001ab95:	83 c4 0c             	add    esp,0xc
c001ab98:	89 c7                	mov    edi,eax
c001ab9a:	53                   	push   ebx
c001ab9b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001aba2:	50                   	push   eax
c001aba3:	e8 d8 7b ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001aba8:	5e                   	pop    esi
c001aba9:	5d                   	pop    ebp
c001abaa:	6a 01                	push   0x1
c001abac:	57                   	push   edi
c001abad:	e8 32 7c ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	85 c0                	test   eax,eax
c001abb7:	0f 85 10 07 00 00    	jne    c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abbd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001abc5:	83 ec 0c             	sub    esp,0xc
c001abc8:	6a 34                	push   0x34
c001abca:	e8 91 45 ff ff       	call   c000f160 <malloc>
c001abcf:	5b                   	pop    ebx
c001abd0:	89 c5                	mov    ebp,eax
c001abd2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001abd6:	8b 07                	mov    eax,DWORD PTR [edi]
c001abd8:	53                   	push   ebx
c001abd9:	55                   	push   ebp
c001abda:	6a 00                	push   0x0
c001abdc:	6a 34                	push   0x34
c001abde:	57                   	push   edi
c001abdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abe2:	83 c4 20             	add    esp,0x20
c001abe5:	85 c0                	test   eax,eax
c001abe7:	0f 85 e0 06 00 00    	jne    c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abed:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001abf4:	0f 85 d3 06 00 00    	jne    c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abfa:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abfd:	85 c0                	test   eax,eax
c001abff:	0f 84 c8 06 00 00    	je     c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac05:	31 d2                	xor    edx,edx
c001ac07:	51                   	push   ecx
c001ac08:	52                   	push   edx
c001ac09:	50                   	push   eax
c001ac0a:	57                   	push   edi
c001ac0b:	e8 92 7c ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001ac10:	83 c4 10             	add    esp,0x10
c001ac13:	85 c0                	test   eax,eax
c001ac15:	0f 85 b2 06 00 00    	jne    c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac1b:	83 ec 0c             	sub    esp,0xc
c001ac1e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001ac21:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac25:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac29:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac2d:	0f af c2             	imul   eax,edx
c001ac30:	50                   	push   eax
c001ac31:	e8 2a 45 ff ff       	call   c000f160 <malloc>
c001ac36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac3d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac43:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac47:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac4b:	0f af c2             	imul   eax,edx
c001ac4e:	99                   	cdq    
c001ac4f:	52                   	push   edx
c001ac50:	50                   	push   eax
c001ac51:	57                   	push   edi
c001ac52:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac55:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ac58:	83 c4 20             	add    esp,0x20
c001ac5b:	85 c0                	test   eax,eax
c001ac5d:	0f 84 6a 06 00 00    	je     c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac63:	52                   	push   edx
c001ac64:	31 d2                	xor    edx,edx
c001ac66:	52                   	push   edx
c001ac67:	50                   	push   eax
c001ac68:	57                   	push   edi
c001ac69:	e8 34 7c ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001ac6e:	83 c4 10             	add    esp,0x10
c001ac71:	85 c0                	test   eax,eax
c001ac73:	0f 85 54 06 00 00    	jne    c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac79:	83 ec 0c             	sub    esp,0xc
c001ac7c:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac80:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac84:	31 f6                	xor    esi,esi
c001ac86:	0f af c2             	imul   eax,edx
c001ac89:	50                   	push   eax
c001ac8a:	e8 d1 44 ff ff       	call   c000f160 <malloc>
c001ac8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ac96:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac9c:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001aca0:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001aca4:	0f af c2             	imul   eax,edx
c001aca7:	99                   	cdq    
c001aca8:	52                   	push   edx
c001aca9:	50                   	push   eax
c001acaa:	57                   	push   edi
c001acab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001acae:	83 c4 20             	add    esp,0x20
c001acb1:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001acb5:	0f 86 af 00 00 00    	jbe    c001ad6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001acbb:	0f b7 de             	movzx  ebx,si
c001acbe:	c1 e3 05             	shl    ebx,0x5
c001acc1:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001acc5:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001acc8:	0f 85 96 00 00 00    	jne    c001ad64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001acce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001acd1:	31 d2                	xor    edx,edx
c001acd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acd7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001acda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acde:	50                   	push   eax
c001acdf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ace2:	52                   	push   edx
c001ace3:	50                   	push   eax
c001ace4:	57                   	push   edi
c001ace5:	e8 b8 7b ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001acea:	83 c4 10             	add    esp,0x10
c001aced:	85 c0                	test   eax,eax
c001acef:	0f 85 d8 05 00 00    	jne    c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acf5:	52                   	push   edx
c001acf6:	52                   	push   edx
c001acf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001acfb:	68 5c 75 02 c0       	push   0xc002755c
c001ad00:	e8 4c 75 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ad05:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001ad0c:	31 d2                	xor    edx,edx
c001ad0e:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001ad12:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ad16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ad1a:	59                   	pop    ecx
c001ad1b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ad1d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ad24:	50                   	push   eax
c001ad25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad2d:	52                   	push   edx
c001ad2e:	50                   	push   eax
c001ad2f:	57                   	push   edi
c001ad30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad33:	83 c4 18             	add    esp,0x18
c001ad36:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad39:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad3c:	50                   	push   eax
c001ad3d:	68 80 75 02 c0       	push   0xc0027580
c001ad42:	e8 0a 75 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ad47:	83 c4 0c             	add    esp,0xc
c001ad4a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad4d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad50:	50                   	push   eax
c001ad51:	6a 00                	push   0x0
c001ad53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad57:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ad5b:	50                   	push   eax
c001ad5c:	e8 85 59 fe ff       	call   c00006e6 <memset>
c001ad61:	83 c4 10             	add    esp,0x10
c001ad64:	46                   	inc    esi
c001ad65:	e9 47 ff ff ff       	jmp    c001acb1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ad6a:	31 db                	xor    ebx,ebx
c001ad6c:	50                   	push   eax
c001ad6d:	68 00 01 00 00       	push   0x100
c001ad72:	6a 00                	push   0x0
c001ad74:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad78:	50                   	push   eax
c001ad79:	e8 68 59 fe ff       	call   c00006e6 <memset>
c001ad7e:	83 c4 0c             	add    esp,0xc
c001ad81:	68 00 01 00 00       	push   0x100
c001ad86:	6a 00                	push   0x0
c001ad88:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ad8f:	50                   	push   eax
c001ad90:	e8 51 59 fe ff       	call   c00006e6 <memset>
c001ad95:	83 c4 10             	add    esp,0x10
c001ad98:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ada0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ada8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001adb0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001adb8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001adc0:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001adc4:	0f 86 2f 01 00 00    	jbe    c001aef9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001adca:	0f b7 f3             	movzx  esi,bx
c001adcd:	6b f6 28             	imul   esi,esi,0x28
c001add0:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001add4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001add7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001addb:	50                   	push   eax
c001addc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ade0:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001ade4:	8b 06                	mov    eax,DWORD PTR [esi]
c001ade6:	6b d2 28             	imul   edx,edx,0x28
c001ade9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001aded:	31 d2                	xor    edx,edx
c001adef:	52                   	push   edx
c001adf0:	50                   	push   eax
c001adf1:	57                   	push   edi
c001adf2:	e8 ab 7a ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001adf7:	83 c4 0c             	add    esp,0xc
c001adfa:	6a 20                	push   0x20
c001adfc:	6a 00                	push   0x0
c001adfe:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ae05:	51                   	push   ecx
c001ae06:	e8 db 58 fe ff       	call   c00006e6 <memset>
c001ae0b:	58                   	pop    eax
c001ae0c:	8b 07                	mov    eax,DWORD PTR [edi]
c001ae0e:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ae12:	52                   	push   edx
c001ae13:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ae1a:	51                   	push   ecx
c001ae1b:	6a 00                	push   0x0
c001ae1d:	6a 1f                	push   0x1f
c001ae1f:	57                   	push   edi
c001ae20:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae23:	83 c4 1c             	add    esp,0x1c
c001ae26:	6a 09                	push   0x9
c001ae28:	68 9d 75 02 c0       	push   0xc002759d
c001ae2d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ae34:	51                   	push   ecx
c001ae35:	e8 13 58 fe ff       	call   c000064d <memcmp>
c001ae3a:	83 c4 10             	add    esp,0x10
c001ae3d:	85 c0                	test   eax,eax
c001ae3f:	75 21                	jne    c001ae62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001ae41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae45:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae4d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae51:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae54:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae5b:	89 c8                	mov    eax,ecx
c001ae5d:	40                   	inc    eax
c001ae5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae62:	50                   	push   eax
c001ae63:	6a 09                	push   0x9
c001ae65:	68 a7 75 02 c0       	push   0xc00275a7
c001ae6a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae71:	50                   	push   eax
c001ae72:	e8 d6 57 fe ff       	call   c000064d <memcmp>
c001ae77:	83 c4 10             	add    esp,0x10
c001ae7a:	85 c0                	test   eax,eax
c001ae7c:	75 21                	jne    c001ae9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001ae7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae8a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae8e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae91:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae98:	89 c8                	mov    eax,ecx
c001ae9a:	40                   	inc    eax
c001ae9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae9f:	50                   	push   eax
c001aea0:	50                   	push   eax
c001aea1:	68 32 75 02 c0       	push   0xc0027532
c001aea6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001aead:	50                   	push   eax
c001aeae:	e8 23 59 fe ff       	call   c00007d6 <strcmp>
c001aeb3:	83 c4 10             	add    esp,0x10
c001aeb6:	85 c0                	test   eax,eax
c001aeb8:	75 0f                	jne    c001aec9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001aeba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aebd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aec1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aec5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aec9:	50                   	push   eax
c001aeca:	50                   	push   eax
c001aecb:	68 3a 75 02 c0       	push   0xc002753a
c001aed0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001aed7:	50                   	push   eax
c001aed8:	e8 f9 58 fe ff       	call   c00007d6 <strcmp>
c001aedd:	83 c4 10             	add    esp,0x10
c001aee0:	85 c0                	test   eax,eax
c001aee2:	75 0f                	jne    c001aef3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001aee4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aee7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aef3:	43                   	inc    ebx
c001aef4:	e9 c7 fe ff ff       	jmp    c001adc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aef9:	31 d2                	xor    edx,edx
c001aefb:	50                   	push   eax
c001aefc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af00:	52                   	push   edx
c001af01:	50                   	push   eax
c001af02:	57                   	push   edi
c001af03:	e8 9a 79 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001af08:	5a                   	pop    edx
c001af09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af0d:	e8 4e 42 ff ff       	call   c000f160 <malloc>
c001af12:	31 d2                	xor    edx,edx
c001af14:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001af18:	59                   	pop    ecx
c001af19:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af1b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001af1f:	53                   	push   ebx
c001af20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af28:	52                   	push   edx
c001af29:	50                   	push   eax
c001af2a:	57                   	push   edi
c001af2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af2e:	83 c4 14             	add    esp,0x14
c001af31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af35:	e8 26 42 ff ff       	call   c000f160 <malloc>
c001af3a:	31 d2                	xor    edx,edx
c001af3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af40:	83 c4 0c             	add    esp,0xc
c001af43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af47:	52                   	push   edx
c001af48:	50                   	push   eax
c001af49:	57                   	push   edi
c001af4a:	e8 53 79 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001af4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af52:	31 d2                	xor    edx,edx
c001af54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af58:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af5e:	52                   	push   edx
c001af5f:	50                   	push   eax
c001af60:	57                   	push   edi
c001af61:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af64:	83 c4 20             	add    esp,0x20
c001af67:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af73:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001af77:	0f 84 54 03 00 00    	je     c001b2d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001af7d:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001af84:	31 d2                	xor    edx,edx
c001af86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af8a:	c1 e8 03             	shr    eax,0x3
c001af8d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af91:	50                   	push   eax
c001af92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af96:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001af9a:	52                   	push   edx
c001af9b:	50                   	push   eax
c001af9c:	57                   	push   edi
c001af9d:	e8 00 79 ff ff       	call   c00128a2 <File::seek(unsigned long long)>
c001afa2:	58                   	pop    eax
c001afa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afa7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001afae:	e8 ad 41 ff ff       	call   c000f160 <malloc>
c001afb3:	31 d2                	xor    edx,edx
c001afb5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afb9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001afbb:	58                   	pop    eax
c001afbc:	8d 44 24 58          	lea    eax,[esp+0x58]
c001afc0:	50                   	push   eax
c001afc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afc9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001afd0:	52                   	push   edx
c001afd1:	50                   	push   eax
c001afd2:	57                   	push   edi
c001afd3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001afd6:	83 c4 20             	add    esp,0x20
c001afd9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001afe1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001afe5:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001afe9:	0f 8d c6 02 00 00    	jge    c001b2b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001afef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aff7:	31 db                	xor    ebx,ebx
c001aff9:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001affc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b000:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b004:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b008:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b00c:	c1 e8 08             	shr    eax,0x8
c001b00f:	89 c6                	mov    esi,eax
c001b011:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b015:	c1 e6 04             	shl    esi,0x4
c001b018:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b01c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b01f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b023:	85 c0                	test   eax,eax
c001b025:	0f 85 17 01 00 00    	jne    c001b142 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b02b:	83 ec 0c             	sub    esp,0xc
c001b02e:	b3 01                	mov    bl,0x1
c001b030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b034:	03 06                	add    eax,DWORD PTR [esi]
c001b036:	50                   	push   eax
c001b037:	e8 24 f8 ff ff       	call   c001a860 <Thr::getAddressOfKernelSymbol(char const*)>
c001b03c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b048:	0f 85 f4 00 00 00    	jne    c001b142 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b04e:	50                   	push   eax
c001b04f:	50                   	push   eax
c001b050:	68 b1 75 02 c0       	push   0xc00275b1
c001b055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b059:	03 06                	add    eax,DWORD PTR [esi]
c001b05b:	50                   	push   eax
c001b05c:	e8 75 57 fe ff       	call   c00007d6 <strcmp>
c001b061:	83 c4 10             	add    esp,0x10
c001b064:	85 c0                	test   eax,eax
c001b066:	75 0a                	jne    c001b072 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b068:	b8 7c 24 02 c0       	mov    eax,0xc002247c
c001b06d:	e9 ca 00 00 00       	jmp    c001b13c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b072:	50                   	push   eax
c001b073:	50                   	push   eax
c001b074:	68 bb 75 02 c0       	push   0xc00275bb
c001b079:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b07d:	03 06                	add    eax,DWORD PTR [esi]
c001b07f:	50                   	push   eax
c001b080:	e8 51 57 fe ff       	call   c00007d6 <strcmp>
c001b085:	83 c4 10             	add    esp,0x10
c001b088:	85 c0                	test   eax,eax
c001b08a:	75 0a                	jne    c001b096 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b08c:	b8 b0 21 02 c0       	mov    eax,0xc00221b0
c001b091:	e9 a6 00 00 00       	jmp    c001b13c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b096:	53                   	push   ebx
c001b097:	53                   	push   ebx
c001b098:	68 c4 75 02 c0       	push   0xc00275c4
c001b09d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0a1:	03 06                	add    eax,DWORD PTR [esi]
c001b0a3:	50                   	push   eax
c001b0a4:	e8 2d 57 fe ff       	call   c00007d6 <strcmp>
c001b0a9:	83 c4 10             	add    esp,0x10
c001b0ac:	85 c0                	test   eax,eax
c001b0ae:	75 0a                	jne    c001b0ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b0b0:	b8 7c 25 02 c0       	mov    eax,0xc002257c
c001b0b5:	e9 82 00 00 00       	jmp    c001b13c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b0ba:	51                   	push   ecx
c001b0bb:	51                   	push   ecx
c001b0bc:	68 ce 75 02 c0       	push   0xc00275ce
c001b0c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0c5:	03 06                	add    eax,DWORD PTR [esi]
c001b0c7:	50                   	push   eax
c001b0c8:	e8 09 57 fe ff       	call   c00007d6 <strcmp>
c001b0cd:	83 c4 10             	add    esp,0x10
c001b0d0:	85 c0                	test   eax,eax
c001b0d2:	74 63                	je     c001b137 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b0d4:	50                   	push   eax
c001b0d5:	50                   	push   eax
c001b0d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0da:	03 06                	add    eax,DWORD PTR [esi]
c001b0dc:	50                   	push   eax
c001b0dd:	68 d7 75 02 c0       	push   0xc00275d7
c001b0e2:	e8 6a 71 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b0e7:	58                   	pop    eax
c001b0e8:	5a                   	pop    edx
c001b0e9:	68 f1 75 02 c0       	push   0xc00275f1
c001b0ee:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b0f5:	53                   	push   ebx
c001b0f6:	e8 8a 56 fe ff       	call   c0000785 <strcpy>
c001b0fb:	59                   	pop    ecx
c001b0fc:	58                   	pop    eax
c001b0fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b101:	03 06                	add    eax,DWORD PTR [esi]
c001b103:	50                   	push   eax
c001b104:	53                   	push   ebx
c001b105:	e8 32 57 fe ff       	call   c000083c <strcat>
c001b10a:	58                   	pop    eax
c001b10b:	5a                   	pop    edx
c001b10c:	68 87 76 02 c0       	push   0xc0027687
c001b111:	53                   	push   ebx
c001b112:	e8 25 57 fe ff       	call   c000083c <strcat>
c001b117:	83 c4 10             	add    esp,0x10
c001b11a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b11f:	0f 84 4b 01 00 00    	je     c001b270 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b125:	83 ec 0c             	sub    esp,0xc
c001b128:	53                   	push   ebx
c001b129:	e8 e0 d8 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001b12e:	83 c4 10             	add    esp,0x10
c001b131:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b135:	eb 0b                	jmp    c001b142 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b137:	b8 fc 22 02 c0       	mov    eax,0xc00222fc
c001b13c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b140:	b3 01                	mov    bl,0x1
c001b142:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b147:	0f 85 80 00 00 00    	jne    c001b1cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b14d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b154:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b158:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b15c:	01 ce                	add    esi,ecx
c001b15e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b166:	8b 06                	mov    eax,DWORD PTR [esi]
c001b168:	0f 94 c2             	sete   dl
c001b16b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b173:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b178:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b17c:	84 db                	test   bl,bl
c001b17e:	74 31                	je     c001b1b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b184:	01 c3                	add    ebx,eax
c001b186:	84 d2                	test   dl,dl
c001b188:	75 0a                	jne    c001b194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b18a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b18e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b192:	76 32                	jbe    c001b1c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b194:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b199:	0f 84 d1 00 00 00    	je     c001b270 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b19f:	83 ec 0c             	sub    esp,0xc
c001b1a2:	68 08 76 02 c0       	push   0xc0027608
c001b1a7:	e8 62 d8 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001b1ac:	83 c4 10             	add    esp,0x10
c001b1af:	eb 15                	jmp    c001b1c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b1b1:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b1b4:	84 d2                	test   dl,dl
c001b1b6:	75 0e                	jne    c001b1c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b1b8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1bc:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1c0:	77 04                	ja     c001b1c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b1c2:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b1c6:	89 1e                	mov    DWORD PTR [esi],ebx
c001b1c8:	e9 df 00 00 00       	jmp    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b1cd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b1d2:	75 6e                	jne    c001b242 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b1d4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b1db:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b1df:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b1e3:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b1eb:	74 17                	je     c001b204 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1ed:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b1f5:	74 0d                	je     c001b204 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1f7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1fb:	83 e8 04             	sub    eax,0x4
c001b1fe:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b202:	76 17                	jbe    c001b21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b204:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b209:	74 65                	je     c001b270 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b20b:	83 ec 0c             	sub    esp,0xc
c001b20e:	68 24 76 02 c0       	push   0xc0027624
c001b213:	e8 f6 d7 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001b218:	83 c4 10             	add    esp,0x10
c001b21b:	8b 16                	mov    edx,DWORD PTR [esi]
c001b21d:	84 db                	test   bl,bl
c001b21f:	74 13                	je     c001b234 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b221:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b225:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b22c:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b230:	01 d0                	add    eax,edx
c001b232:	eb 06                	jmp    c001b23a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b234:	89 d0                	mov    eax,edx
c001b236:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b23a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b23e:	89 06                	mov    DWORD PTR [esi],eax
c001b240:	eb 6a                	jmp    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b242:	50                   	push   eax
c001b243:	50                   	push   eax
c001b244:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b249:	50                   	push   eax
c001b24a:	68 40 76 02 c0       	push   0xc0027640
c001b24f:	e8 fd 6f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b254:	83 c4 10             	add    esp,0x10
c001b257:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b25c:	74 12                	je     c001b270 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b25e:	83 ec 0c             	sub    esp,0xc
c001b261:	68 4b 76 02 c0       	push   0xc002764b
c001b266:	e8 a3 d7 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001b26b:	83 c4 10             	add    esp,0x10
c001b26e:	eb 3c                	jmp    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b270:	83 ec 0c             	sub    esp,0xc
c001b273:	57                   	push   edi
c001b274:	e8 c9 75 ff ff       	call   c0012842 <File::close()>
c001b279:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b27c:	8b 07                	mov    eax,DWORD PTR [edi]
c001b27e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b281:	59                   	pop    ecx
c001b282:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b286:	e8 e5 3e ff ff       	call   c000f170 <free>
c001b28b:	5b                   	pop    ebx
c001b28c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b290:	e8 db 3e ff ff       	call   c000f170 <free>
c001b295:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b298:	e8 d3 3e ff ff       	call   c000f170 <free>
c001b29d:	5e                   	pop    esi
c001b29e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2a2:	e8 c9 3e ff ff       	call   c000f170 <free>
c001b2a7:	83 c4 10             	add    esp,0x10
c001b2aa:	eb 21                	jmp    c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b2ac:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b2b0:	e9 2c fd ff ff       	jmp    c001afe1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b2b5:	83 ec 0c             	sub    esp,0xc
c001b2b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b2bc:	e8 af 3e ff ff       	call   c000f170 <free>
c001b2c1:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b2c5:	83 c4 10             	add    esp,0x10
c001b2c8:	e9 a2 fc ff ff       	jmp    c001af6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b2cd:	31 c0                	xor    eax,eax
c001b2cf:	eb 32                	jmp    c001b303 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b2d1:	83 ec 0c             	sub    esp,0xc
c001b2d4:	57                   	push   edi
c001b2d5:	e8 68 75 ff ff       	call   c0012842 <File::close()>
c001b2da:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2dd:	8b 07                	mov    eax,DWORD PTR [edi]
c001b2df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2e2:	58                   	pop    eax
c001b2e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2e7:	e8 84 3e ff ff       	call   c000f170 <free>
c001b2ec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2ef:	e8 7c 3e ff ff       	call   c000f170 <free>
c001b2f4:	5a                   	pop    edx
c001b2f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2f9:	e8 72 3e ff ff       	call   c000f170 <free>
c001b2fe:	83 c4 10             	add    esp,0x10
c001b301:	b0 01                	mov    al,0x1
c001b303:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b309:	5b                   	pop    ebx
c001b30a:	5e                   	pop    esi
c001b30b:	5f                   	pop    edi
c001b30c:	5d                   	pop    ebp
c001b30d:	c3                   	ret    

c001b30e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b30e:	56                   	push   esi
c001b30f:	31 d2                	xor    edx,edx
c001b311:	53                   	push   ebx
c001b312:	8b 1d c0 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0c0
c001b318:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b31c:	39 d3                	cmp    ebx,edx
c001b31e:	7e 1b                	jle    c001b33b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b320:	8b 04 95 e0 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5d20]
c001b327:	39 c8                	cmp    eax,ecx
c001b329:	77 0d                	ja     c001b338 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b32b:	8b 34 95 e0 a0 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd5f20]
c001b332:	01 c6                	add    esi,eax
c001b334:	39 ce                	cmp    esi,ecx
c001b336:	77 05                	ja     c001b33d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b338:	42                   	inc    edx
c001b339:	eb e1                	jmp    c001b31c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b33b:	31 c0                	xor    eax,eax
c001b33d:	5b                   	pop    ebx
c001b33e:	5e                   	pop    esi
c001b33f:	c3                   	ret    

c001b340 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b340:	53                   	push   ebx
c001b341:	31 c0                	xor    eax,eax
c001b343:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b347:	8b 1d c0 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0c0
c001b34d:	39 c3                	cmp    ebx,eax
c001b34f:	7e 22                	jle    c001b373 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b351:	8b 14 85 e0 a2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5d20]
c001b358:	39 ca                	cmp    edx,ecx
c001b35a:	77 14                	ja     c001b370 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b35c:	03 14 85 e0 a0 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd5f20]
c001b363:	39 ca                	cmp    edx,ecx
c001b365:	76 09                	jbe    c001b370 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b367:	8b 04 85 e0 a4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5b20]
c001b36e:	eb 05                	jmp    c001b375 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b370:	40                   	inc    eax
c001b371:	eb da                	jmp    c001b34d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b373:	31 c0                	xor    eax,eax
c001b375:	5b                   	pop    ebx
c001b376:	c3                   	ret    

c001b377 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b377:	53                   	push   ebx
c001b378:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b37c:	53                   	push   ebx
c001b37d:	e8 8c ff ff ff       	call   c001b30e <Thr::getDriverBaseFromAddress(unsigned long)>
c001b382:	5a                   	pop    edx
c001b383:	31 d2                	xor    edx,edx
c001b385:	85 c0                	test   eax,eax
c001b387:	74 04                	je     c001b38d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b389:	89 da                	mov    edx,ebx
c001b38b:	29 c2                	sub    edx,eax
c001b38d:	89 d0                	mov    eax,edx
c001b38f:	5b                   	pop    ebx
c001b390:	c3                   	ret    

c001b391 <Thr::loadDLL(char const*, bool)>:
c001b391:	55                   	push   ebp
c001b392:	57                   	push   edi
c001b393:	56                   	push   esi
c001b394:	53                   	push   ebx
c001b395:	81 ec 34 01 00 00    	sub    esp,0x134
c001b39b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b3a2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b3a9:	56                   	push   esi
c001b3aa:	68 63 76 02 c0       	push   0xc0027663
c001b3af:	e8 9d 6e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b3b4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b3bb:	e8 a2 6d ff ff       	call   c0012162 <operator new(unsigned long)>
c001b3c0:	83 c4 0c             	add    esp,0xc
c001b3c3:	89 c3                	mov    ebx,eax
c001b3c5:	ff 35 b4 a8 02 c0    	push   DWORD PTR ds:0xc002a8b4
c001b3cb:	56                   	push   esi
c001b3cc:	50                   	push   eax
c001b3cd:	e8 ae 73 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001b3d2:	83 c4 0c             	add    esp,0xc
c001b3d5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b3d9:	50                   	push   eax
c001b3da:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3de:	50                   	push   eax
c001b3df:	53                   	push   ebx
c001b3e0:	e8 ab 76 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001b3e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3ea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ed:	83 c4 10             	add    esp,0x10
c001b3f0:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b3f5:	75 0a                	jne    c001b401 <Thr::loadDLL(char const*, bool)+0x70>
c001b3f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3fb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b3ff:	75 3c                	jne    c001b43d <Thr::loadDLL(char const*, bool)+0xac>
c001b401:	89 e8                	mov    eax,ebp
c001b403:	84 c0                	test   al,al
c001b405:	0f 84 3d 01 00 00    	je     c001b548 <Thr::loadDLL(char const*, bool)+0x1b7>
c001b40b:	50                   	push   eax
c001b40c:	50                   	push   eax
c001b40d:	68 74 76 02 c0       	push   0xc0027674
c001b412:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b416:	53                   	push   ebx
c001b417:	e8 69 53 fe ff       	call   c0000785 <strcpy>
c001b41c:	58                   	pop    eax
c001b41d:	5a                   	pop    edx
c001b41e:	56                   	push   esi
c001b41f:	53                   	push   ebx
c001b420:	e8 17 54 fe ff       	call   c000083c <strcat>
c001b425:	59                   	pop    ecx
c001b426:	5f                   	pop    edi
c001b427:	68 87 76 02 c0       	push   0xc0027687
c001b42c:	53                   	push   ebx
c001b42d:	e8 0a 54 fe ff       	call   c000083c <strcat>
c001b432:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b435:	e8 d4 d5 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001b43a:	83 c4 10             	add    esp,0x10
c001b43d:	e8 cd 5f ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001b442:	51                   	push   ecx
c001b443:	6a 03                	push   0x3
c001b445:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b449:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b44d:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b453:	83 d3 00             	adc    ebx,0x0
c001b456:	89 ca                	mov    edx,ecx
c001b458:	89 d1                	mov    ecx,edx
c001b45a:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b45e:	51                   	push   ecx
c001b45f:	50                   	push   eax
c001b460:	e8 ed 65 ff ff       	call   c0011a52 <VAS::allocatePages(int, int)>
c001b465:	89 34 24             	mov    DWORD PTR [esp],esi
c001b468:	89 c3                	mov    ebx,eax
c001b46a:	e8 94 52 fe ff       	call   c0000703 <strlen>
c001b46f:	8b 3d c0 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a0c0
c001b475:	40                   	inc    eax
c001b476:	89 04 24             	mov    DWORD PTR [esp],eax
c001b479:	e8 e2 3c ff ff       	call   c000f160 <malloc>
c001b47e:	89 04 bd e0 a4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5b20],eax
c001b485:	5f                   	pop    edi
c001b486:	58                   	pop    eax
c001b487:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001b48c:	56                   	push   esi
c001b48d:	ff 34 85 e0 a4 02 c0 	push   DWORD PTR [eax*4-0x3ffd5b20]
c001b494:	e8 ec 52 fe ff       	call   c0000785 <strcpy>
c001b499:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001b49e:	8d 50 01             	lea    edx,[eax+0x1]
c001b4a1:	89 1c 85 e0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d20],ebx
c001b4a8:	89 15 c0 a0 02 c0    	mov    DWORD PTR ds:0xc002a0c0,edx
c001b4ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4b2:	83 c4 0c             	add    esp,0xc
c001b4b5:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001b4bc:	6a 01                	push   0x1
c001b4be:	53                   	push   ebx
c001b4bf:	56                   	push   esi
c001b4c0:	e8 ab f6 ff ff       	call   c001ab70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b4c5:	83 c4 10             	add    esp,0x10
c001b4c8:	89 c7                	mov    edi,eax
c001b4ca:	fe c8                	dec    al
c001b4cc:	74 16                	je     c001b4e4 <Thr::loadDLL(char const*, bool)+0x153>
c001b4ce:	89 e8                	mov    eax,ebp
c001b4d0:	84 c0                	test   al,al
c001b4d2:	74 10                	je     c001b4e4 <Thr::loadDLL(char const*, bool)+0x153>
c001b4d4:	83 ec 0c             	sub    esp,0xc
c001b4d7:	68 89 76 02 c0       	push   0xc0027689
c001b4dc:	e8 2d d5 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001b4e1:	83 c4 10             	add    esp,0x10
c001b4e4:	31 f6                	xor    esi,esi
c001b4e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4ee:	05 ff 0f 00 00       	add    eax,0xfff
c001b4f3:	83 d2 00             	adc    edx,0x0
c001b4f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b4fa:	c1 ea 0c             	shr    edx,0xc
c001b4fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b501:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b505:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b509:	ba 00 00 00 00       	mov    edx,0x0
c001b50e:	89 d0                	mov    eax,edx
c001b510:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b514:	73 2c                	jae    c001b542 <Thr::loadDLL(char const*, bool)+0x1b1>
c001b516:	e8 f4 5e ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001b51b:	89 f5                	mov    ebp,esi
c001b51d:	c1 e5 0c             	shl    ebp,0xc
c001b520:	52                   	push   edx
c001b521:	01 dd                	add    ebp,ebx
c001b523:	52                   	push   edx
c001b524:	55                   	push   ebp
c001b525:	50                   	push   eax
c001b526:	e8 8f 60 ff ff       	call   c00115ba <VAS::getPageTableEntry(unsigned long)>
c001b52b:	83 c4 10             	add    esp,0x10
c001b52e:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b531:	75 0c                	jne    c001b53f <Thr::loadDLL(char const*, bool)+0x1ae>
c001b533:	83 ec 0c             	sub    esp,0xc
c001b536:	55                   	push   ebp
c001b537:	e8 44 41 ff ff       	call   c000f680 <Phys::freePage(unsigned long)>
c001b53c:	83 c4 10             	add    esp,0x10
c001b53f:	46                   	inc    esi
c001b540:	eb a4                	jmp    c001b4e6 <Thr::loadDLL(char const*, bool)+0x155>
c001b542:	89 f8                	mov    eax,edi
c001b544:	84 c0                	test   al,al
c001b546:	75 02                	jne    c001b54a <Thr::loadDLL(char const*, bool)+0x1b9>
c001b548:	31 db                	xor    ebx,ebx
c001b54a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b550:	89 d8                	mov    eax,ebx
c001b552:	5b                   	pop    ebx
c001b553:	5e                   	pop    esi
c001b554:	5f                   	pop    edi
c001b555:	5d                   	pop    ebp
c001b556:	c3                   	ret    

c001b557 <Thr::executeDLL(unsigned long, void*)>:
c001b557:	56                   	push   esi
c001b558:	53                   	push   ebx
c001b559:	51                   	push   ecx
c001b55a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b55e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b562:	85 db                	test   ebx,ebx
c001b564:	75 10                	jne    c001b576 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b566:	83 ec 0c             	sub    esp,0xc
c001b569:	68 a8 76 02 c0       	push   0xc00276a8
c001b56e:	e8 9b d4 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b57a:	89 d8                	mov    eax,ebx
c001b57c:	5a                   	pop    edx
c001b57d:	5b                   	pop    ebx
c001b57e:	5e                   	pop    esi
c001b57f:	ff e0                	jmp    eax
c001b581:	90                   	nop

c001b582 <changeTSS>:
c001b582:	83 ec 0c             	sub    esp,0xc
c001b585:	e8 04 c3 ff ff       	call   c001788e <thisCPU()>
c001b58a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b590:	83 ec 08             	sub    esp,0x8
c001b593:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b596:	05 7c 11 00 00       	add    eax,0x117c
c001b59b:	c1 e1 15             	shl    ecx,0x15
c001b59e:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b5a3:	29 ca                	sub    edx,ecx
c001b5a5:	52                   	push   edx
c001b5a6:	50                   	push   eax
c001b5a7:	e8 76 56 ff ff       	call   c0010c22 <TSS::setESP(unsigned long)>
c001b5ac:	83 c4 1c             	add    esp,0x1c
c001b5af:	c3                   	ret    

c001b5b0 <Process::addArgs(char**)>:
c001b5b0:	57                   	push   edi
c001b5b1:	56                   	push   esi
c001b5b2:	53                   	push   ebx
c001b5b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b5b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b5bb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b5c5:	85 ff                	test   edi,edi
c001b5c7:	74 3d                	je     c001b606 <Process::addArgs(char**)+0x56>
c001b5c9:	8b 07                	mov    eax,DWORD PTR [edi]
c001b5cb:	85 c0                	test   eax,eax
c001b5cd:	74 37                	je     c001b606 <Process::addArgs(char**)+0x56>
c001b5cf:	31 db                	xor    ebx,ebx
c001b5d1:	83 ec 0c             	sub    esp,0xc
c001b5d4:	50                   	push   eax
c001b5d5:	e8 29 51 fe ff       	call   c0000703 <strlen>
c001b5da:	40                   	inc    eax
c001b5db:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5de:	e8 7d 3b ff ff       	call   c000f160 <malloc>
c001b5e3:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b5ea:	5a                   	pop    edx
c001b5eb:	59                   	pop    ecx
c001b5ec:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b5ef:	43                   	inc    ebx
c001b5f0:	50                   	push   eax
c001b5f1:	e8 8f 51 fe ff       	call   c0000785 <strcpy>
c001b5f6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b602:	85 c0                	test   eax,eax
c001b604:	75 cb                	jne    c001b5d1 <Process::addArgs(char**)+0x21>
c001b606:	5b                   	pop    ebx
c001b607:	5e                   	pop    esi
c001b608:	5f                   	pop    edi
c001b609:	c3                   	ret    

c001b60a <Process::Process(char const*, Process*, char**)>:
c001b60a:	56                   	push   esi
c001b60b:	53                   	push   ebx
c001b60c:	83 ec 14             	sub    esp,0x14
c001b60f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b613:	05 0c 02 00 00       	add    eax,0x20c
c001b618:	bb 07 00 00 00       	mov    ebx,0x7
c001b61d:	89 c6                	mov    esi,eax
c001b61f:	85 db                	test   ebx,ebx
c001b621:	78 12                	js     c001b635 <Process::Process(char const*, Process*, char**)+0x2b>
c001b623:	83 ec 0c             	sub    esp,0xc
c001b626:	56                   	push   esi
c001b627:	e8 de 91 00 00       	call   c002480a <ThreadControlBlock::ThreadControlBlock()>
c001b62c:	83 c4 10             	add    esp,0x10
c001b62f:	83 c6 63             	add    esi,0x63
c001b632:	4b                   	dec    ebx
c001b633:	eb ea                	jmp    c001b61f <Process::Process(char const*, Process*, char**)+0x15>
c001b635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b639:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b644:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b64d:	a1 04 8a 02 c0       	mov    eax,ds:0xc0028a04
c001b652:	8d 50 01             	lea    edx,[eax+0x1]
c001b655:	89 15 04 8a 02 c0    	mov    DWORD PTR ds:0xc0028a04,edx
c001b65b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b65f:	89 02                	mov    DWORD PTR [edx],eax
c001b661:	83 ec 0c             	sub    esp,0xc
c001b664:	6a 10                	push   0x10
c001b666:	e8 f7 6a ff ff       	call   c0012162 <operator new(unsigned long)>
c001b66b:	83 c4 10             	add    esp,0x10
c001b66e:	89 c3                	mov    ebx,eax
c001b670:	83 ec 08             	sub    esp,0x8
c001b673:	6a 00                	push   0x0
c001b675:	53                   	push   ebx
c001b676:	e8 7b 67 ff ff       	call   c0011df6 <VAS::VAS(bool)>
c001b67b:	83 c4 10             	add    esp,0x10
c001b67e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b682:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b68c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b69a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b69e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b6a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6a8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6ae:	85 c0                	test   eax,eax
c001b6b0:	74 42                	je     c001b6f4 <Process::Process(char const*, Process*, char**)+0xea>
c001b6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6bc:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b6c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c6:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6d6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b6dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6e0:	05 0c 01 00 00       	add    eax,0x10c
c001b6e5:	83 ec 08             	sub    esp,0x8
c001b6e8:	52                   	push   edx
c001b6e9:	50                   	push   eax
c001b6ea:	e8 96 50 fe ff       	call   c0000785 <strcpy>
c001b6ef:	83 c4 10             	add    esp,0x10
c001b6f2:	eb 5c                	jmp    c001b750 <Process::Process(char const*, Process*, char**)+0x146>
c001b6f4:	83 ec 0c             	sub    esp,0xc
c001b6f7:	68 60 12 00 00       	push   0x1260
c001b6fc:	e8 61 6a ff ff       	call   c0012162 <operator new(unsigned long)>
c001b701:	83 c4 10             	add    esp,0x10
c001b704:	89 c3                	mov    ebx,eax
c001b706:	83 ec 08             	sub    esp,0x8
c001b709:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b70d:	53                   	push   ebx
c001b70e:	e8 0d 52 ff ff       	call   c0010920 <VgaText::VgaText(char const*)>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b71a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b724:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b72a:	83 ec 0c             	sub    esp,0xc
c001b72d:	50                   	push   eax
c001b72e:	e8 ee 45 ff ff       	call   c000fd21 <addToTerminalCycle(VgaText*)>
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b73a:	05 0c 01 00 00       	add    eax,0x10c
c001b73f:	83 ec 08             	sub    esp,0x8
c001b742:	68 d2 76 02 c0       	push   0xc00276d2
c001b747:	50                   	push   eax
c001b748:	e8 38 50 fe ff       	call   c0000785 <strcpy>
c001b74d:	83 c4 10             	add    esp,0x10
c001b750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b754:	83 c0 0c             	add    eax,0xc
c001b757:	83 ec 08             	sub    esp,0x8
c001b75a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b75e:	50                   	push   eax
c001b75f:	e8 21 50 fe ff       	call   c0000785 <strcpy>
c001b764:	83 c4 10             	add    esp,0x10
c001b767:	83 ec 08             	sub    esp,0x8
c001b76a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b76e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b772:	e8 39 fe ff ff       	call   c001b5b0 <Process::addArgs(char**)>
c001b777:	83 c4 10             	add    esp,0x10
c001b77a:	83 ec 08             	sub    esp,0x8
c001b77d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b785:	e8 ad ee ff ff       	call   c001a637 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b78a:	83 c4 10             	add    esp,0x10
c001b78d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b791:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b795:	83 f0 01             	xor    eax,0x1
c001b798:	88 c2                	mov    dl,al
c001b79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b79e:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b7a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b7a9:	83 ec 08             	sub    esp,0x8
c001b7ac:	50                   	push   eax
c001b7ad:	68 d0 77 02 c0       	push   0xc00277d0
c001b7b2:	e8 9a 6a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	90                   	nop
c001b7bb:	83 c4 14             	add    esp,0x14
c001b7be:	5b                   	pop    ebx
c001b7bf:	5e                   	pop    esi
c001b7c0:	c3                   	ret    
c001b7c1:	90                   	nop

c001b7c2 <Process::Process(bool, char const*, Process*, char**)>:
c001b7c2:	56                   	push   esi
c001b7c3:	53                   	push   ebx
c001b7c4:	83 ec 14             	sub    esp,0x14
c001b7c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d3:	05 0c 02 00 00       	add    eax,0x20c
c001b7d8:	bb 07 00 00 00       	mov    ebx,0x7
c001b7dd:	89 c6                	mov    esi,eax
c001b7df:	85 db                	test   ebx,ebx
c001b7e1:	78 12                	js     c001b7f5 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b7e3:	83 ec 0c             	sub    esp,0xc
c001b7e6:	56                   	push   esi
c001b7e7:	e8 1e 90 00 00       	call   c002480a <ThreadControlBlock::ThreadControlBlock()>
c001b7ec:	83 c4 10             	add    esp,0x10
c001b7ef:	83 c6 63             	add    esi,0x63
c001b7f2:	4b                   	dec    ebx
c001b7f3:	eb ea                	jmp    c001b7df <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f9:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b804:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b80d:	a1 04 8a 02 c0       	mov    eax,ds:0xc0028a04
c001b812:	8d 50 01             	lea    edx,[eax+0x1]
c001b815:	89 15 04 8a 02 c0    	mov    DWORD PTR ds:0xc0028a04,edx
c001b81b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b81f:	89 02                	mov    DWORD PTR [edx],eax
c001b821:	83 ec 0c             	sub    esp,0xc
c001b824:	6a 10                	push   0x10
c001b826:	e8 37 69 ff ff       	call   c0012162 <operator new(unsigned long)>
c001b82b:	83 c4 10             	add    esp,0x10
c001b82e:	89 c3                	mov    ebx,eax
c001b830:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b835:	83 ec 08             	sub    esp,0x8
c001b838:	50                   	push   eax
c001b839:	53                   	push   ebx
c001b83a:	e8 b7 65 ff ff       	call   c0011df6 <VAS::VAS(bool)>
c001b83f:	83 c4 10             	add    esp,0x10
c001b842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b846:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b850:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b862:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b86c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b872:	85 c0                	test   eax,eax
c001b874:	74 42                	je     c001b8b8 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b87a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b880:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b88a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b894:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b89a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b8a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8a4:	05 0c 01 00 00       	add    eax,0x10c
c001b8a9:	83 ec 08             	sub    esp,0x8
c001b8ac:	52                   	push   edx
c001b8ad:	50                   	push   eax
c001b8ae:	e8 d2 4e fe ff       	call   c0000785 <strcpy>
c001b8b3:	83 c4 10             	add    esp,0x10
c001b8b6:	eb 5c                	jmp    c001b914 <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	68 60 12 00 00       	push   0x1260
c001b8c0:	e8 9d 68 ff ff       	call   c0012162 <operator new(unsigned long)>
c001b8c5:	83 c4 10             	add    esp,0x10
c001b8c8:	89 c3                	mov    ebx,eax
c001b8ca:	83 ec 08             	sub    esp,0x8
c001b8cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8d1:	53                   	push   ebx
c001b8d2:	e8 49 50 ff ff       	call   c0010920 <VgaText::VgaText(char const*)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8de:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8e8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8ee:	83 ec 0c             	sub    esp,0xc
c001b8f1:	50                   	push   eax
c001b8f2:	e8 2a 44 ff ff       	call   c000fd21 <addToTerminalCycle(VgaText*)>
c001b8f7:	83 c4 10             	add    esp,0x10
c001b8fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8fe:	05 0c 01 00 00       	add    eax,0x10c
c001b903:	83 ec 08             	sub    esp,0x8
c001b906:	68 d2 76 02 c0       	push   0xc00276d2
c001b90b:	50                   	push   eax
c001b90c:	e8 74 4e fe ff       	call   c0000785 <strcpy>
c001b911:	83 c4 10             	add    esp,0x10
c001b914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b918:	83 c0 0c             	add    eax,0xc
c001b91b:	83 ec 08             	sub    esp,0x8
c001b91e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b922:	50                   	push   eax
c001b923:	e8 5d 4e fe ff       	call   c0000785 <strcpy>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	83 ec 08             	sub    esp,0x8
c001b92e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b936:	e8 75 fc ff ff       	call   c001b5b0 <Process::addArgs(char**)>
c001b93b:	83 c4 10             	add    esp,0x10
c001b93e:	90                   	nop
c001b93f:	83 c4 14             	add    esp,0x14
c001b942:	5b                   	pop    ebx
c001b943:	5e                   	pop    esi
c001b944:	c3                   	ret    

c001b945 <disableIRQs()>:
c001b945:	fa                   	cli    
c001b946:	ff 05 8c a8 02 c0    	inc    DWORD PTR ds:0xc002a88c
c001b94c:	c3                   	ret    

c001b94d <getIRQNestingLevel()>:
c001b94d:	a1 8c a8 02 c0       	mov    eax,ds:0xc002a88c
c001b952:	c3                   	ret    

c001b953 <enableIRQs()>:
c001b953:	a1 8c a8 02 c0       	mov    eax,ds:0xc002a88c
c001b958:	48                   	dec    eax
c001b959:	a3 8c a8 02 c0       	mov    ds:0xc002a88c,eax
c001b95e:	75 01                	jne    c001b961 <enableIRQs()+0xe>
c001b960:	fb                   	sti    
c001b961:	c3                   	ret    

c001b962 <lockScheduler()>:
c001b962:	eb e1                	jmp    c001b945 <disableIRQs()>

c001b964 <unlockScheduler()>:
c001b964:	eb ed                	jmp    c001b953 <enableIRQs()>

c001b966 <userModeEntryPoint(void*)>:
c001b966:	83 ec 0c             	sub    esp,0xc
c001b969:	e8 f6 ff ff ff       	call   c001b964 <unlockScheduler()>
c001b96e:	fb                   	sti    
c001b96f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b974:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b977:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001b97d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b981:	83 c4 0c             	add    esp,0xc
c001b984:	e9 3b 49 fe ff       	jmp    c00002c4 <goToUsermode>

c001b989 <lockStuff()>:
c001b989:	e8 b7 ff ff ff       	call   c001b945 <disableIRQs()>
c001b98e:	ff 05 88 a8 02 c0    	inc    DWORD PTR ds:0xc002a888
c001b994:	c3                   	ret    

c001b995 <taskStartupFunction>:
c001b995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001b99d:	c3                   	ret    

c001b99e <updateTimeUsed()>:
c001b99e:	57                   	push   edi
c001b99f:	56                   	push   esi
c001b9a0:	53                   	push   ebx
c001b9a1:	e8 e8 be ff ff       	call   c001788e <thisCPU()>
c001b9a6:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001b9ad:	74 49                	je     c001b9f8 <updateTimeUsed()+0x5a>
c001b9af:	0f 31                	rdtsc  
c001b9b1:	89 c1                	mov    ecx,eax
c001b9b3:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c001b9b8:	2b 0d b8 a8 02 c0    	sub    ecx,DWORD PTR ds:0xc002a8b8
c001b9be:	89 d3                	mov    ebx,edx
c001b9c0:	89 0d c0 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c0,ecx
c001b9c6:	1b 1d bc a8 02 c0    	sbb    ebx,DWORD PTR ds:0xc002a8bc
c001b9cc:	a3 b8 a8 02 c0       	mov    ds:0xc002a8b8,eax
c001b9d1:	89 1d c4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c4,ebx
c001b9d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9dc:	89 15 cc a8 02 c0    	mov    DWORD PTR ds:0xc002a8cc,edx
c001b9e2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001b9e5:	89 15 bc a8 02 c0    	mov    DWORD PTR ds:0xc002a8bc,edx
c001b9eb:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001b9ee:	01 f1                	add    ecx,esi
c001b9f0:	11 fb                	adc    ebx,edi
c001b9f2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001b9f5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001b9f8:	5b                   	pop    ebx
c001b9f9:	5e                   	pop    esi
c001b9fa:	5f                   	pop    edi
c001b9fb:	c3                   	ret    

c001b9fc <switchToThread(ThreadControlBlock*)>:
c001b9fc:	53                   	push   ebx
c001b9fd:	83 ec 08             	sub    esp,0x8
c001ba00:	a1 88 a8 02 c0       	mov    eax,ds:0xc002a888
c001ba05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba09:	85 c0                	test   eax,eax
c001ba0b:	75 30                	jne    c001ba3d <switchToThread(ThreadControlBlock*)+0x41>
c001ba0d:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ba10:	3c ff                	cmp    al,0xff
c001ba12:	74 25                	je     c001ba39 <switchToThread(ThreadControlBlock*)+0x3d>
c001ba14:	0f b6 d0             	movzx  edx,al
c001ba17:	b8 84 03 00 00       	mov    eax,0x384
c001ba1c:	29 d0                	sub    eax,edx
c001ba1e:	c1 e0 10             	shl    eax,0x10
c001ba21:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ba24:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ba27:	e8 72 ff ff ff       	call   c001b99e <updateTimeUsed()>
c001ba2c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba30:	83 c4 08             	add    esp,0x8
c001ba33:	5b                   	pop    ebx
c001ba34:	e9 c4 48 fe ff       	jmp    c00002fd <switchToThreadASM>
c001ba39:	31 c0                	xor    eax,eax
c001ba3b:	eb e7                	jmp    c001ba24 <switchToThread(ThreadControlBlock*)+0x28>
c001ba3d:	c7 05 84 a8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a884,0x1
c001ba47:	83 c4 08             	add    esp,0x8
c001ba4a:	5b                   	pop    ebx
c001ba4b:	c3                   	ret    

c001ba4c <Semaphore::Semaphore(int)>:
c001ba4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba54:	89 10                	mov    DWORD PTR [eax],edx
c001ba56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba77:	90                   	nop
c001ba78:	c3                   	ret    
c001ba79:	90                   	nop

c001ba7a <Mutex::Mutex()>:
c001ba7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba7e:	6a 01                	push   0x1
c001ba80:	50                   	push   eax
c001ba81:	e8 c6 ff ff ff       	call   c001ba4c <Semaphore::Semaphore(int)>
c001ba86:	83 c4 08             	add    esp,0x8
c001ba89:	90                   	nop
c001ba8a:	c3                   	ret    
c001ba8b:	90                   	nop

c001ba8c <Process::createThread(void (*)(void*), void*, int)>:
c001ba8c:	55                   	push   ebp
c001ba8d:	31 c9                	xor    ecx,ecx
c001ba8f:	57                   	push   edi
c001ba90:	56                   	push   esi
c001ba91:	53                   	push   ebx
c001ba92:	83 ec 1c             	sub    esp,0x1c
c001ba95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba99:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001baa0:	89 f2                	mov    edx,esi
c001baa2:	0f b7 c2             	movzx  eax,dx
c001baa5:	83 e2 01             	and    edx,0x1
c001baa8:	74 14                	je     c001babe <Process::createThread(void (*)(void*), void*, int)+0x32>
c001baaa:	d1 f8                	sar    eax,1
c001baac:	41                   	inc    ecx
c001baad:	89 c2                	mov    edx,eax
c001baaf:	83 f9 10             	cmp    ecx,0x10
c001bab2:	75 ee                	jne    c001baa2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001bab4:	83 c4 1c             	add    esp,0x1c
c001bab7:	31 c0                	xor    eax,eax
c001bab9:	5b                   	pop    ebx
c001baba:	5e                   	pop    esi
c001babb:	5f                   	pop    edi
c001babc:	5d                   	pop    ebp
c001babd:	c3                   	ret    
c001babe:	83 ec 08             	sub    esp,0x8
c001bac1:	b8 01 00 00 00       	mov    eax,0x1
c001bac6:	d3 e0                	shl    eax,cl
c001bac8:	09 c6                	or     esi,eax
c001baca:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bad0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bad7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bada:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001badd:	01 ce                	add    esi,ecx
c001badf:	89 f0                	mov    eax,esi
c001bae1:	c1 e0 05             	shl    eax,0x5
c001bae4:	01 c6                	add    esi,eax
c001bae6:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bae9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001baef:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001baf5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001baf9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001baff:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bb05:	89 ca                	mov    edx,ecx
c001bb07:	f7 da                	neg    edx
c001bb09:	c1 e2 15             	shl    edx,0x15
c001bb0c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bb12:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bb18:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bb1c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bb26:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bb2c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bb30:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bb36:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bb40:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bb4a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bb51:	50                   	push   eax
c001bb52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb56:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bb5b:	e8 02 8b 00 00       	call   c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bb60:	83 c4 10             	add    esp,0x10
c001bb63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb67:	83 c4 1c             	add    esp,0x1c
c001bb6a:	5b                   	pop    ebx
c001bb6b:	5e                   	pop    esi
c001bb6c:	5f                   	pop    edi
c001bb6d:	5d                   	pop    ebp
c001bb6e:	c3                   	ret    
c001bb6f:	90                   	nop

c001bb70 <Process::createUserThread()>:
c001bb70:	83 ec 0c             	sub    esp,0xc
c001bb73:	68 80 00 00 00       	push   0x80
c001bb78:	6a 00                	push   0x0
c001bb7a:	68 66 b9 01 c0       	push   0xc001b966
c001bb7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb83:	e8 04 ff ff ff       	call   c001ba8c <Process::createThread(void (*)(void*), void*, int)>
c001bb88:	83 c4 1c             	add    esp,0x1c
c001bb8b:	c3                   	ret    

c001bb8c <setupMultitasking(void (*)())>:
c001bb8c:	56                   	push   esi
c001bb8d:	53                   	push   ebx
c001bb8e:	53                   	push   ebx
c001bb8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb93:	eb 10                	jmp    c001bba5 <setupMultitasking(void (*)())+0x19>
c001bb95:	83 ec 0c             	sub    esp,0xc
c001bb98:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bb9d:	e8 12 8a 00 00       	call   c00245b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	83 ec 0c             	sub    esp,0xc
c001bba8:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bbad:	e8 e6 89 00 00       	call   c0024598 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bbb2:	83 c4 10             	add    esp,0x10
c001bbb5:	84 c0                	test   al,al
c001bbb7:	74 dc                	je     c001bb95 <setupMultitasking(void (*)())+0x9>
c001bbb9:	83 ec 0c             	sub    esp,0xc
c001bbbc:	68 3b 07 00 00       	push   0x73b
c001bbc1:	e8 9c 65 ff ff       	call   c0012162 <operator new(unsigned long)>
c001bbc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bbcd:	89 c3                	mov    ebx,eax
c001bbcf:	6a 00                	push   0x0
c001bbd1:	68 d6 76 02 c0       	push   0xc00276d6
c001bbd6:	6a 01                	push   0x1
c001bbd8:	50                   	push   eax
c001bbd9:	e8 e4 fb ff ff       	call   c001b7c2 <Process::Process(bool, char const*, Process*, char**)>
c001bbde:	83 c4 18             	add    esp,0x18
c001bbe1:	89 1d b4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8b4,ebx
c001bbe7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbed:	68 f8 77 02 c0       	push   0xc00277f8
c001bbf2:	e8 5a 66 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bbf7:	58                   	pop    eax
c001bbf8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbfe:	e8 92 48 ff ff       	call   c0010495 <setActiveTerminal(VgaText*)>
c001bc03:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bc0b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bc11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bc14:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bc1e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bc24:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bc2a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bc34:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bc3e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bc48:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bc4e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bc54:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bc5e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bc64:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bc6e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bc74:	5a                   	pop    edx
c001bc75:	59                   	pop    ecx
c001bc76:	68 d2 76 02 c0       	push   0xc00276d2
c001bc7b:	50                   	push   eax
c001bc7c:	e8 04 4b fe ff       	call   c0000785 <strcpy>
c001bc81:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bc88:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bc8c:	83 c4 14             	add    esp,0x14
c001bc8f:	5b                   	pop    ebx
c001bc90:	5e                   	pop    esi
c001bc91:	e9 59 46 fe ff       	jmp    c00002ef <switchToThreadASMFirstTime>

c001bc96 <schedule()>:
c001bc96:	a1 88 a8 02 c0       	mov    eax,ds:0xc002a888
c001bc9b:	85 c0                	test   eax,eax
c001bc9d:	74 0b                	je     c001bcaa <schedule()+0x14>
c001bc9f:	c7 05 84 a8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a884,0x1
c001bca9:	c3                   	ret    
c001bcaa:	53                   	push   ebx
c001bcab:	83 ec 14             	sub    esp,0x14
c001bcae:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bcb3:	e8 e0 88 00 00       	call   c0024598 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	84 c0                	test   al,al
c001bcbd:	75 38                	jne    c001bcf7 <schedule()+0x61>
c001bcbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcc4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcc7:	4a                   	dec    edx
c001bcc8:	74 32                	je     c001bcfc <schedule()+0x66>
c001bcca:	83 ec 0c             	sub    esp,0xc
c001bccd:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bcd2:	e8 b9 88 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bcd7:	c7 04 24 a8 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a8
c001bcde:	89 c3                	mov    ebx,eax
c001bce0:	e8 cf 88 00 00       	call   c00245b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bce5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bcec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcef:	e8 08 fd ff ff       	call   c001b9fc <switchToThread(ThreadControlBlock*)>
c001bcf4:	83 c4 10             	add    esp,0x10
c001bcf7:	83 c4 08             	add    esp,0x8
c001bcfa:	5b                   	pop    ebx
c001bcfb:	c3                   	ret    
c001bcfc:	83 ec 08             	sub    esp,0x8
c001bcff:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd06:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bd0c:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bd11:	e8 4c 89 00 00       	call   c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bd16:	83 c4 10             	add    esp,0x10
c001bd19:	eb af                	jmp    c001bcca <schedule()+0x34>

c001bd1b <unlockStuff()>:
c001bd1b:	a1 88 a8 02 c0       	mov    eax,ds:0xc002a888
c001bd20:	48                   	dec    eax
c001bd21:	a3 88 a8 02 c0       	mov    ds:0xc002a888,eax
c001bd26:	75 09                	jne    c001bd31 <unlockStuff()+0x16>
c001bd28:	a1 84 a8 02 c0       	mov    eax,ds:0xc002a884
c001bd2d:	85 c0                	test   eax,eax
c001bd2f:	75 05                	jne    c001bd36 <unlockStuff()+0x1b>
c001bd31:	e9 1d fc ff ff       	jmp    c001b953 <enableIRQs()>
c001bd36:	83 ec 0c             	sub    esp,0xc
c001bd39:	c7 05 84 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a884,0x0
c001bd43:	e8 4e ff ff ff       	call   c001bc96 <schedule()>
c001bd48:	83 c4 0c             	add    esp,0xc
c001bd4b:	e9 03 fc ff ff       	jmp    c001b953 <enableIRQs()>

c001bd50 <Semaphore::tryAcquire()>:
c001bd50:	83 ec 0c             	sub    esp,0xc
c001bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd57:	e8 2d fc ff ff       	call   c001b989 <lockStuff()>
c001bd5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bd5f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bd61:	7c 0b                	jl     c001bd6e <Semaphore::tryAcquire()+0x1e>
c001bd63:	e8 b3 ff ff ff       	call   c001bd1b <unlockStuff()>
c001bd68:	31 c0                	xor    eax,eax
c001bd6a:	83 c4 0c             	add    esp,0xc
c001bd6d:	c3                   	ret    
c001bd6e:	42                   	inc    edx
c001bd6f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd72:	e8 a4 ff ff ff       	call   c001bd1b <unlockStuff()>
c001bd77:	b0 01                	mov    al,0x1
c001bd79:	83 c4 0c             	add    esp,0xc
c001bd7c:	c3                   	ret    
c001bd7d:	90                   	nop

c001bd7e <Semaphore::assertLocked(char const*)>:
c001bd7e:	83 ec 0c             	sub    esp,0xc
c001bd81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd89:	e8 fb fb ff ff       	call   c001b989 <lockStuff()>
c001bd8e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd90:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001bd93:	7c 05                	jl     c001bd9a <Semaphore::assertLocked(char const*)+0x1c>
c001bd95:	83 c4 0c             	add    esp,0xc
c001bd98:	eb 81                	jmp    c001bd1b <unlockStuff()>
c001bd9a:	83 ec 0c             	sub    esp,0xc
c001bd9d:	52                   	push   edx
c001bd9e:	e8 6b cc ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001bda3:	83 c4 10             	add    esp,0x10
c001bda6:	83 c4 0c             	add    esp,0xc
c001bda9:	e9 6d ff ff ff       	jmp    c001bd1b <unlockStuff()>

c001bdae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bdae:	83 ec 0c             	sub    esp,0xc
c001bdb1:	e8 97 fb ff ff       	call   c001b94d <getIRQNestingLevel()>
c001bdb6:	83 ec 08             	sub    esp,0x8
c001bdb9:	50                   	push   eax
c001bdba:	68 2c 78 02 c0       	push   0xc002782c
c001bdbf:	e8 8d 64 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bdc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bdc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdcd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdd0:	e8 c1 fe ff ff       	call   c001bc96 <schedule()>
c001bdd5:	e8 8a fb ff ff       	call   c001b964 <unlockScheduler()>
c001bdda:	e8 6e fb ff ff       	call   c001b94d <getIRQNestingLevel()>
c001bddf:	5a                   	pop    edx
c001bde0:	59                   	pop    ecx
c001bde1:	50                   	push   eax
c001bde2:	68 60 78 02 c0       	push   0xc0027860
c001bde7:	e8 65 64 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bdec:	83 c4 1c             	add    esp,0x1c
c001bdef:	c3                   	ret    

c001bdf0 <blockTask(TaskState)>:
c001bdf0:	83 ec 0c             	sub    esp,0xc
c001bdf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdf7:	e8 66 fb ff ff       	call   c001b962 <lockScheduler()>
c001bdfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001be04:	e8 8d fe ff ff       	call   c001bc96 <schedule()>
c001be09:	83 c4 0c             	add    esp,0xc
c001be0c:	e9 53 fb ff ff       	jmp    c001b964 <unlockScheduler()>

c001be11 <waitTask(int, int*, int)>:
c001be11:	83 ec 18             	sub    esp,0x18
c001be14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001be1d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001be20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be29:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001be2c:	6a 07                	push   0x7
c001be2e:	e8 bd ff ff ff       	call   c001bdf0 <blockTask(TaskState)>
c001be33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be38:	83 c4 10             	add    esp,0x10
c001be3b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001be3e:	85 d2                	test   edx,edx
c001be40:	74 0a                	je     c001be4c <waitTask(int, int*, int)+0x3b>
c001be42:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001be45:	89 02                	mov    DWORD PTR [edx],eax
c001be47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be4c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001be4f:	83 c4 0c             	add    esp,0xc
c001be52:	c3                   	ret    

c001be53 <nanoSleepUntil(unsigned long long)>:
c001be53:	83 ec 0c             	sub    esp,0xc
c001be56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be5e:	3b 05 d0 9a 02 c0    	cmp    eax,DWORD PTR ds:0xc0029ad0
c001be64:	89 d1                	mov    ecx,edx
c001be66:	1b 0d d4 9a 02 c0    	sbb    ecx,DWORD PTR ds:0xc0029ad4
c001be6c:	73 04                	jae    c001be72 <nanoSleepUntil(unsigned long long)+0x1f>
c001be6e:	83 c4 0c             	add    esp,0xc
c001be71:	c3                   	ret    
c001be72:	e8 12 fb ff ff       	call   c001b989 <lockStuff()>
c001be77:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be7d:	83 ec 08             	sub    esp,0x8
c001be80:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001be83:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001be86:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be8c:	68 9c a8 02 c0       	push   0xc002a89c
c001be91:	e8 cc 87 00 00       	call   c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be96:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001be9d:	e8 4e ff ff ff       	call   c001bdf0 <blockTask(TaskState)>
c001bea2:	83 c4 1c             	add    esp,0x1c
c001bea5:	e9 71 fe ff ff       	jmp    c001bd1b <unlockStuff()>

c001beaa <nanoSleep(unsigned long long)>:
c001beaa:	a1 d0 9a 02 c0       	mov    eax,ds:0xc0029ad0
c001beaf:	8b 15 d4 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029ad4
c001beb5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001beb9:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001bebd:	eb 94                	jmp    c001be53 <nanoSleepUntil(unsigned long long)>

c001bebf <sleep(unsigned long long)>:
c001bebf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001bec7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001becc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001bed0:	01 ca                	add    edx,ecx
c001bed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bed6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001beda:	eb ce                	jmp    c001beaa <nanoSleep(unsigned long long)>

c001bedc <Semaphore::acquire()>:
c001bedc:	83 ec 0c             	sub    esp,0xc
c001bedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee3:	e8 a1 fa ff ff       	call   c001b989 <lockStuff()>
c001bee8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001beeb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001beed:	7d 0c                	jge    c001befb <Semaphore::acquire()+0x1f>
c001beef:	42                   	inc    edx
c001bef0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bef3:	83 c4 0c             	add    esp,0xc
c001bef6:	e9 20 fe ff ff       	jmp    c001bd1b <unlockStuff()>
c001befb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf01:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001bf08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bf0b:	85 d2                	test   edx,edx
c001bf0d:	74 2a                	je     c001bf39 <Semaphore::acquire()+0x5d>
c001bf0f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bf12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf18:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001bf1b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf21:	83 ec 0c             	sub    esp,0xc
c001bf24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf27:	6a 05                	push   0x5
c001bf29:	e8 c2 fe ff ff       	call   c001bdf0 <blockTask(TaskState)>
c001bf2e:	83 c4 10             	add    esp,0x10
c001bf31:	83 c4 0c             	add    esp,0xc
c001bf34:	e9 e2 fd ff ff       	jmp    c001bd1b <unlockStuff()>
c001bf39:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf42:	eb d7                	jmp    c001bf1b <Semaphore::acquire()+0x3f>

c001bf44 <taskReturned>:
c001bf44:	83 ec 18             	sub    esp,0x18
c001bf47:	68 94 78 02 c0       	push   0xc0027894
c001bf4c:	e8 bd ca ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	83 ec 0c             	sub    esp,0xc
c001bf57:	6a 02                	push   0x2
c001bf59:	e8 92 fe ff ff       	call   c001bdf0 <blockTask(TaskState)>
c001bf5e:	e8 ff f9 ff ff       	call   c001b962 <lockScheduler()>
c001bf63:	e8 2e fd ff ff       	call   c001bc96 <schedule()>
c001bf68:	e8 f7 f9 ff ff       	call   c001b964 <unlockScheduler()>
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	eb e2                	jmp    c001bf54 <taskReturned+0x10>

c001bf72 <unblockTask(ThreadControlBlock*)>:
c001bf72:	53                   	push   ebx
c001bf73:	83 ec 08             	sub    esp,0x8
c001bf76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf7a:	e8 e3 f9 ff ff       	call   c001b962 <lockScheduler()>
c001bf7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf82:	85 c0                	test   eax,eax
c001bf84:	74 5c                	je     c001bfe2 <unblockTask(ThreadControlBlock*)+0x70>
c001bf86:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf89:	48                   	dec    eax
c001bf8a:	74 31                	je     c001bfbd <unblockTask(ThreadControlBlock*)+0x4b>
c001bf8c:	83 ec 0c             	sub    esp,0xc
c001bf8f:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bf94:	e8 f7 85 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bf99:	83 c4 10             	add    esp,0x10
c001bf9c:	85 c0                	test   eax,eax
c001bf9e:	75 17                	jne    c001bfb7 <unblockTask(ThreadControlBlock*)+0x45>
c001bfa0:	eb 65                	jmp    c001c007 <unblockTask(ThreadControlBlock*)+0x95>
c001bfa2:	83 ec 08             	sub    esp,0x8
c001bfa5:	50                   	push   eax
c001bfa6:	68 a8 a8 02 c0       	push   0xc002a8a8
c001bfab:	e8 f0 88 00 00       	call   c00248a0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001bfb0:	83 c4 10             	add    esp,0x10
c001bfb3:	85 c0                	test   eax,eax
c001bfb5:	74 50                	je     c001c007 <unblockTask(ThreadControlBlock*)+0x95>
c001bfb7:	39 c3                	cmp    ebx,eax
c001bfb9:	75 e7                	jne    c001bfa2 <unblockTask(ThreadControlBlock*)+0x30>
c001bfbb:	eb 1c                	jmp    c001bfd9 <unblockTask(ThreadControlBlock*)+0x67>
c001bfbd:	83 ec 0c             	sub    esp,0xc
c001bfc0:	68 84 79 02 c0       	push   0xc0027984
c001bfc5:	e8 87 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bfca:	c7 04 24 10 79 02 c0 	mov    DWORD PTR [esp],0xc0027910
c001bfd1:	e8 7b 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bfd6:	83 c4 10             	add    esp,0x10
c001bfd9:	83 c4 08             	add    esp,0x8
c001bfdc:	5b                   	pop    ebx
c001bfdd:	e9 82 f9 ff ff       	jmp    c001b964 <unlockScheduler()>
c001bfe2:	83 ec 0c             	sub    esp,0xc
c001bfe5:	68 c8 78 02 c0       	push   0xc00278c8
c001bfea:	e8 62 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bfef:	c7 04 24 10 79 02 c0 	mov    DWORD PTR [esp],0xc0027910
c001bff6:	e8 56 62 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001bffb:	83 c4 10             	add    esp,0x10
c001bffe:	83 c4 08             	add    esp,0x8
c001c001:	5b                   	pop    ebx
c001c002:	e9 5d f9 ff ff       	jmp    c001b964 <unlockScheduler()>
c001c007:	83 ec 08             	sub    esp,0x8
c001c00a:	53                   	push   ebx
c001c00b:	68 a8 a8 02 c0       	push   0xc002a8a8
c001c010:	e8 4d 86 00 00       	call   c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c015:	83 c4 10             	add    esp,0x10
c001c018:	83 c4 08             	add    esp,0x8
c001c01b:	5b                   	pop    ebx
c001c01c:	e9 43 f9 ff ff       	jmp    c001b964 <unlockScheduler()>

c001c021 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c021:	55                   	push   ebp
c001c022:	57                   	push   edi
c001c023:	56                   	push   esi
c001c024:	53                   	push   ebx
c001c025:	83 ec 1c             	sub    esp,0x1c
c001c028:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c02c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c02f:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c035:	85 c9                	test   ecx,ecx
c001c037:	7e 20                	jle    c001c059 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c039:	31 f6                	xor    esi,esi
c001c03b:	83 ec 0c             	sub    esp,0xc
c001c03e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c045:	46                   	inc    esi
c001c046:	e8 25 31 ff ff       	call   c000f170 <free>
c001c04b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c04e:	83 c4 10             	add    esp,0x10
c001c051:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c057:	7f e2                	jg     c001c03b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c059:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c063:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c068:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c06b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c06e:	d3 c0                	rol    eax,cl
c001c070:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c077:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c07a:	89 f7                	mov    edi,esi
c001c07c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c084:	0f 85 4f 01 00 00    	jne    c001c1d9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c08a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c090:	85 c0                	test   eax,eax
c001c092:	0f 84 aa 00 00 00    	je     c001c142 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c098:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c09b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c09f:	31 c9                	xor    ecx,ecx
c001c0a1:	eb 10                	jmp    c001c0b3 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c0a3:	41                   	inc    ecx
c001c0a4:	83 f9 10             	cmp    ecx,0x10
c001c0a7:	0f 84 95 00 00 00    	je     c001c142 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c0ad:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c0b3:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c0ba:	d3 fa                	sar    edx,cl
c001c0bc:	83 e2 01             	and    edx,0x1
c001c0bf:	74 e2                	je     c001c0a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0c1:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c0c4:	01 ca                	add    edx,ecx
c001c0c6:	89 d5                	mov    ebp,edx
c001c0c8:	c1 e5 05             	shl    ebp,0x5
c001c0cb:	01 ea                	add    edx,ebp
c001c0cd:	01 d0                	add    eax,edx
c001c0cf:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c0d5:	83 fd 07             	cmp    ebp,0x7
c001c0d8:	75 c9                	jne    c001c0a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0da:	05 40 02 00 00       	add    eax,0x240
c001c0df:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c0e2:	83 fd ff             	cmp    ebp,0xffffffff
c001c0e5:	0f 8c 08 01 00 00    	jl     c001c1f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c0eb:	0f 84 b9 01 00 00    	je     c001c2aa <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c0f1:	85 ed                	test   ebp,ebp
c001c0f3:	0f 84 a0 01 00 00    	je     c001c299 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c0f9:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c0fb:	75 a6                	jne    c001c0a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0fd:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c103:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c107:	01 d0                	add    eax,edx
c001c109:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c10d:	83 ec 0c             	sub    esp,0xc
c001c110:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c116:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c119:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c11f:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c126:	50                   	push   eax
c001c127:	e8 46 fe ff ff       	call   c001bf72 <unblockTask(ThreadControlBlock*)>
c001c12c:	83 c4 10             	add    esp,0x10
c001c12f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c132:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c136:	89 f7                	mov    edi,esi
c001c138:	41                   	inc    ecx
c001c139:	83 f9 10             	cmp    ecx,0x10
c001c13c:	0f 85 6b ff ff ff    	jne    c001c0ad <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c142:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c148:	85 c0                	test   eax,eax
c001c14a:	74 5d                	je     c001c1a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c14c:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c152:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c158:	74 4f                	je     c001c1a9 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c15a:	83 ec 0c             	sub    esp,0xc
c001c15d:	68 a8 a8 02 c0       	push   0xc002a8a8
c001c162:	e8 29 84 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c167:	c7 04 24 a8 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a8
c001c16e:	89 c7                	mov    edi,eax
c001c170:	e8 23 84 00 00       	call   c0024598 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c175:	83 c4 10             	add    esp,0x10
c001c178:	84 c0                	test   al,al
c001c17a:	0f 84 e4 00 00 00    	je     c001c264 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c180:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c183:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c189:	85 d2                	test   edx,edx
c001c18b:	74 0f                	je     c001c19c <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c18d:	83 ec 0c             	sub    esp,0xc
c001c190:	8b 02                	mov    eax,DWORD PTR [edx]
c001c192:	52                   	push   edx
c001c193:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c196:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c1a6:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c1a9:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c1af:	85 db                	test   ebx,ebx
c001c1b1:	74 16                	je     c001c1c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c1b3:	83 ec 0c             	sub    esp,0xc
c001c1b6:	53                   	push   ebx
c001c1b7:	e8 2a 56 ff ff       	call   c00117e6 <VAS::~VAS()>
c001c1bc:	58                   	pop    eax
c001c1bd:	5a                   	pop    edx
c001c1be:	6a 10                	push   0x10
c001c1c0:	53                   	push   ebx
c001c1c1:	e8 ab 5f ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001c1c6:	83 c4 10             	add    esp,0x10
c001c1c9:	83 ec 0c             	sub    esp,0xc
c001c1cc:	68 dd 76 02 c0       	push   0xc00276dd
c001c1d1:	e8 7b 60 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c1d6:	83 c4 10             	add    esp,0x10
c001c1d9:	83 ec 08             	sub    esp,0x8
c001c1dc:	68 3b 07 00 00       	push   0x73b
c001c1e1:	68 eb 76 02 c0       	push   0xc00276eb
c001c1e6:	e8 66 60 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c1eb:	83 c4 2c             	add    esp,0x2c
c001c1ee:	5b                   	pop    ebx
c001c1ef:	5e                   	pop    esi
c001c1f0:	5f                   	pop    edi
c001c1f1:	5d                   	pop    ebp
c001c1f2:	c3                   	ret    
c001c1f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1f7:	83 ec 0c             	sub    esp,0xc
c001c1fa:	68 c8 79 02 c0       	push   0xc00279c8
c001c1ff:	e8 0a c8 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001c204:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	89 f7                	mov    edi,esi
c001c20c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c210:	e9 8e fe ff ff       	jmp    c001c0a3 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c215:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c21b:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c221:	75 1c                	jne    c001c23f <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c223:	83 ec 0c             	sub    esp,0xc
c001c226:	68 30 7a 02 c0       	push   0xc0027a30
c001c22b:	e8 21 60 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c230:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c237:	e8 b4 fb ff ff       	call   c001bdf0 <blockTask(TaskState)>
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	83 ec 08             	sub    esp,0x8
c001c242:	56                   	push   esi
c001c243:	68 a8 a8 02 c0       	push   0xc002a8a8
c001c248:	e8 15 84 00 00       	call   c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c24d:	c7 04 24 a8 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a8
c001c254:	e8 37 83 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c259:	83 c4 10             	add    esp,0x10
c001c25c:	39 f8                	cmp    eax,edi
c001c25e:	0f 84 1c ff ff ff    	je     c001c180 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c264:	83 ec 0c             	sub    esp,0xc
c001c267:	68 a8 a8 02 c0       	push   0xc002a8a8
c001c26c:	e8 1f 83 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c271:	c7 04 24 a8 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a8
c001c278:	89 c6                	mov    esi,eax
c001c27a:	e8 35 83 00 00       	call   c00245b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c27f:	83 c4 10             	add    esp,0x10
c001c282:	39 f3                	cmp    ebx,esi
c001c284:	74 b9                	je     c001c23f <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c286:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c289:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c28c:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c292:	75 ab                	jne    c001c23f <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c294:	e9 7c ff ff ff       	jmp    c001c215 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c299:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c29d:	83 ec 0c             	sub    esp,0xc
c001c2a0:	68 fc 79 02 c0       	push   0xc00279fc
c001c2a5:	e9 55 ff ff ff       	jmp    c001c1ff <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c2aa:	8b 36                	mov    esi,DWORD PTR [esi]
c001c2ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c2b0:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c2b3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c2b6:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c2bc:	01 d7                	add    edi,edx
c001c2be:	89 f8                	mov    eax,edi
c001c2c0:	e9 44 fe ff ff       	jmp    c001c109 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c2c5 <cleanerTaskFunction(void*)>:
c001c2c5:	53                   	push   ebx
c001c2c6:	83 ec 08             	sub    esp,0x8
c001c2c9:	e8 96 f6 ff ff       	call   c001b964 <unlockScheduler()>
c001c2ce:	e8 8f f6 ff ff       	call   c001b962 <lockScheduler()>
c001c2d3:	80 3d 6c a8 02 c0 00 	cmp    BYTE PTR ds:0xc002a86c,0x0
c001c2da:	0f 85 8e 00 00 00    	jne    c001c36e <cleanerTaskFunction(void*)+0xa9>
c001c2e0:	83 ec 0c             	sub    esp,0xc
c001c2e3:	6a 02                	push   0x2
c001c2e5:	e8 c4 fa ff ff       	call   c001bdae <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c2ea:	83 c4 10             	add    esp,0x10
c001c2ed:	c6 05 6c a8 02 c0 00 	mov    BYTE PTR ds:0xc002a86c,0x0
c001c2f4:	e8 90 f6 ff ff       	call   c001b989 <lockStuff()>
c001c2f9:	e8 64 f6 ff ff       	call   c001b962 <lockScheduler()>
c001c2fe:	83 ec 0c             	sub    esp,0xc
c001c301:	68 90 a8 02 c0       	push   0xc002a890
c001c306:	e8 8d 82 00 00       	call   c0024598 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c30b:	83 c4 10             	add    esp,0x10
c001c30e:	84 c0                	test   al,al
c001c310:	75 40                	jne    c001c352 <cleanerTaskFunction(void*)+0x8d>
c001c312:	83 ec 0c             	sub    esp,0xc
c001c315:	68 90 a8 02 c0       	push   0xc002a890
c001c31a:	e8 71 82 00 00       	call   c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c31f:	c7 04 24 90 a8 02 c0 	mov    DWORD PTR [esp],0xc002a890
c001c326:	89 c3                	mov    ebx,eax
c001c328:	e8 87 82 00 00       	call   c00245b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c32d:	c7 04 24 01 77 02 c0 	mov    DWORD PTR [esp],0xc0027701
c001c334:	e8 18 5f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c339:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c33c:	e8 e0 fc ff ff       	call   c001c021 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c341:	c7 04 24 1a 77 02 c0 	mov    DWORD PTR [esp],0xc002771a
c001c348:	e8 04 5f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c34d:	83 c4 10             	add    esp,0x10
c001c350:	eb ac                	jmp    c001c2fe <cleanerTaskFunction(void*)+0x39>
c001c352:	e8 0d f6 ff ff       	call   c001b964 <unlockScheduler()>
c001c357:	e8 bf f9 ff ff       	call   c001bd1b <unlockStuff()>
c001c35c:	e8 01 f6 ff ff       	call   c001b962 <lockScheduler()>
c001c361:	80 3d 6c a8 02 c0 00 	cmp    BYTE PTR ds:0xc002a86c,0x0
c001c368:	0f 84 72 ff ff ff    	je     c001c2e0 <cleanerTaskFunction(void*)+0x1b>
c001c36e:	e8 f1 f5 ff ff       	call   c001b964 <unlockScheduler()>
c001c373:	e9 75 ff ff ff       	jmp    c001c2ed <cleanerTaskFunction(void*)+0x28>

c001c378 <terminateTask(int)>:
c001c378:	83 ec 14             	sub    esp,0x14
c001c37b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c380:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c383:	83 c0 0c             	add    eax,0xc
c001c386:	50                   	push   eax
c001c387:	68 58 7a 02 c0       	push   0xc0027a58
c001c38c:	e8 c0 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c391:	e8 f3 f5 ff ff       	call   c001b989 <lockStuff()>
c001c396:	e8 c7 f5 ff ff       	call   c001b962 <lockScheduler()>
c001c39b:	c7 04 24 2d 77 02 c0 	mov    DWORD PTR [esp],0xc002772d
c001c3a2:	e8 aa 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c3a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c3ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3b0:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c3b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3b8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c3bb:	5a                   	pop    edx
c001c3bc:	59                   	pop    ecx
c001c3bd:	50                   	push   eax
c001c3be:	68 90 a8 02 c0       	push   0xc002a890
c001c3c3:	e8 9a 82 00 00       	call   c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c3c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3cd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c3d4:	c7 04 24 47 77 02 c0 	mov    DWORD PTR [esp],0xc0027747
c001c3db:	e8 71 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c3e0:	83 c4 10             	add    esp,0x10
c001c3e3:	a1 68 a8 02 c0       	mov    eax,ds:0xc002a868
c001c3e8:	85 c0                	test   eax,eax
c001c3ea:	74 5a                	je     c001c446 <terminateTask(int)+0xce>
c001c3ec:	83 ec 0c             	sub    esp,0xc
c001c3ef:	68 61 77 02 c0       	push   0xc0027761
c001c3f4:	e8 58 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c3f9:	58                   	pop    eax
c001c3fa:	c6 05 6c a8 02 c0 01 	mov    BYTE PTR ds:0xc002a86c,0x1
c001c401:	ff 35 68 a8 02 c0    	push   DWORD PTR ds:0xc002a868
c001c407:	e8 66 fb ff ff       	call   c001bf72 <unblockTask(ThreadControlBlock*)>
c001c40c:	c7 04 24 7b 77 02 c0 	mov    DWORD PTR [esp],0xc002777b
c001c413:	e8 39 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c418:	83 c4 10             	add    esp,0x10
c001c41b:	e8 44 f5 ff ff       	call   c001b964 <unlockScheduler()>
c001c420:	e8 f6 f8 ff ff       	call   c001bd1b <unlockStuff()>
c001c425:	83 ec 0c             	sub    esp,0xc
c001c428:	68 b3 77 02 c0       	push   0xc00277b3
c001c42d:	e8 1f 5e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	e8 28 f5 ff ff       	call   c001b962 <lockScheduler()>
c001c43a:	e8 57 f8 ff ff       	call   c001bc96 <schedule()>
c001c43f:	e8 20 f5 ff ff       	call   c001b964 <unlockScheduler()>
c001c444:	eb ef                	jmp    c001c435 <terminateTask(int)+0xbd>
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	68 95 77 02 c0       	push   0xc0027795
c001c44e:	e8 fe 5d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	eb c3                	jmp    c001c41b <terminateTask(int)+0xa3>

c001c458 <Thr::terminateFromIRQ(int)>:
c001c458:	83 ec 18             	sub    esp,0x18
c001c45b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c45f:	e8 14 ff ff ff       	call   c001c378 <terminateTask(int)>

c001c464 <Semaphore::release()>:
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46b:	e8 19 f5 ff ff       	call   c001b989 <lockStuff()>
c001c470:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c473:	85 d2                	test   edx,edx
c001c475:	74 1a                	je     c001c491 <Semaphore::release()+0x2d>
c001c477:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c47a:	83 ec 0c             	sub    esp,0xc
c001c47d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c480:	52                   	push   edx
c001c481:	e8 ec fa ff ff       	call   c001bf72 <unblockTask(ThreadControlBlock*)>
c001c486:	83 c4 10             	add    esp,0x10
c001c489:	83 c4 0c             	add    esp,0xc
c001c48c:	e9 8a f8 ff ff       	jmp    c001bd1b <unlockStuff()>
c001c491:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c494:	83 c4 0c             	add    esp,0xc
c001c497:	e9 7f f8 ff ff       	jmp    c001bd1b <unlockStuff()>

c001c49c <__static_initialization_and_destruction_0(int, int)>:
c001c49c:	83 ec 0c             	sub    esp,0xc
c001c49f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c4a4:	0f 85 88 00 00 00    	jne    c001c532 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c4aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c4b2:	75 7e                	jne    c001c532 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	68 a8 a8 02 c0       	push   0xc002a8a8
c001c4bc:	e8 87 83 00 00       	call   c0024848 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4c1:	83 c4 10             	add    esp,0x10
c001c4c4:	83 ec 04             	sub    esp,0x4
c001c4c7:	68 0c 84 02 c0       	push   0xc002840c
c001c4cc:	68 a8 a8 02 c0       	push   0xc002a8a8
c001c4d1:	68 08 48 02 c0       	push   0xc0024808
c001c4d6:	e8 12 5c ff ff       	call   c00120ed <__cxa_atexit>
c001c4db:	83 c4 10             	add    esp,0x10
c001c4de:	83 ec 0c             	sub    esp,0xc
c001c4e1:	68 9c a8 02 c0       	push   0xc002a89c
c001c4e6:	e8 5d 83 00 00       	call   c0024848 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4eb:	83 c4 10             	add    esp,0x10
c001c4ee:	83 ec 04             	sub    esp,0x4
c001c4f1:	68 0c 84 02 c0       	push   0xc002840c
c001c4f6:	68 9c a8 02 c0       	push   0xc002a89c
c001c4fb:	68 08 48 02 c0       	push   0xc0024808
c001c500:	e8 e8 5b ff ff       	call   c00120ed <__cxa_atexit>
c001c505:	83 c4 10             	add    esp,0x10
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	68 90 a8 02 c0       	push   0xc002a890
c001c510:	e8 33 83 00 00       	call   c0024848 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c515:	83 c4 10             	add    esp,0x10
c001c518:	83 ec 04             	sub    esp,0x4
c001c51b:	68 0c 84 02 c0       	push   0xc002840c
c001c520:	68 90 a8 02 c0       	push   0xc002a890
c001c525:	68 08 48 02 c0       	push   0xc0024808
c001c52a:	e8 be 5b ff ff       	call   c00120ed <__cxa_atexit>
c001c52f:	83 c4 10             	add    esp,0x10
c001c532:	90                   	nop
c001c533:	83 c4 0c             	add    esp,0xc
c001c536:	c3                   	ret    

c001c537 <_GLOBAL__sub_I_kernelProcess>:
c001c537:	83 ec 0c             	sub    esp,0xc
c001c53a:	83 ec 08             	sub    esp,0x8
c001c53d:	68 ff ff 00 00       	push   0xffff
c001c542:	6a 01                	push   0x1
c001c544:	e8 53 ff ff ff       	call   c001c49c <__static_initialization_and_destruction_0(int, int)>
c001c549:	83 c4 10             	add    esp,0x10
c001c54c:	83 c4 0c             	add    esp,0xc
c001c54f:	c3                   	ret    

c001c550 <Vm::vm8086EntryPoint(void*)>:
c001c550:	83 ec 0c             	sub    esp,0xc
c001c553:	e8 0c f4 ff ff       	call   c001b964 <unlockScheduler()>
c001c558:	fb                   	sti    
c001c559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c55e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c562:	52                   	push   edx
c001c563:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c567:	52                   	push   edx
c001c568:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c56c:	52                   	push   edx
c001c56d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c571:	50                   	push   eax
c001c572:	e8 1c 3d fe ff       	call   c0000293 <goToVM86>
c001c577:	83 c4 1c             	add    esp,0x1c
c001c57a:	c3                   	ret    

c001c57b <Vm::inbv(unsigned short)>:
c001c57b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c57f:	ec                   	in     al,dx
c001c580:	c3                   	ret    

c001c581 <Vm::outbv(unsigned short, unsigned char)>:
c001c581:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c585:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c589:	ee                   	out    dx,al
c001c58a:	c3                   	ret    

c001c58b <Vm::realToLinear(unsigned short, unsigned short)>:
c001c58b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c590:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c595:	c1 e0 04             	shl    eax,0x4
c001c598:	01 d0                	add    eax,edx
c001c59a:	c3                   	ret    

c001c59b <Vm::getSegment(unsigned int)>:
c001c59b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59f:	c1 e8 10             	shr    eax,0x10
c001c5a2:	c3                   	ret    

c001c5a3 <Vm::getOffset(unsigned int)>:
c001c5a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5a7:	c3                   	ret    

c001c5a8 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c5a8:	55                   	push   ebp
c001c5a9:	57                   	push   edi
c001c5aa:	56                   	push   esi
c001c5ab:	53                   	push   ebx
c001c5ac:	83 ec 2c             	sub    esp,0x2c
c001c5af:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c5b3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c5b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c5bb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c5bf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c5c3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c5c7:	e8 96 f3 ff ff       	call   c001b962 <lockScheduler()>
c001c5cc:	68 80 00 00 00       	push   0x80
c001c5d1:	6a 00                	push   0x0
c001c5d3:	68 50 c5 01 c0       	push   0xc001c550
c001c5d8:	55                   	push   ebp
c001c5d9:	e8 ae f4 ff ff       	call   c001ba8c <Process::createThread(void (*)(void*), void*, int)>
c001c5de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5e2:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c5e6:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c5ea:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c5ee:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c5f2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c5f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5fd:	e8 60 5b ff ff       	call   c0012162 <operator new(unsigned long)>
c001c602:	83 c4 0c             	add    esp,0xc
c001c605:	89 c3                	mov    ebx,eax
c001c607:	55                   	push   ebp
c001c608:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c60c:	50                   	push   eax
c001c60d:	e8 6e 61 ff ff       	call   c0012780 <File::File(char const*, Process*)>
c001c612:	83 c4 0c             	add    esp,0xc
c001c615:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c619:	50                   	push   eax
c001c61a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c61e:	50                   	push   eax
c001c61f:	53                   	push   ebx
c001c620:	e8 6b 64 ff ff       	call   c0012a90 <File::stat(unsigned long long*, bool*)>
c001c625:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	84 d2                	test   dl,dl
c001c62e:	74 1c                	je     c001c64c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c630:	83 ec 0c             	sub    esp,0xc
c001c633:	68 77 7a 02 c0       	push   0xc0027a77
c001c638:	e8 d1 c3 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001c63d:	e8 22 f3 ff ff       	call   c001b964 <unlockScheduler()>
c001c642:	83 c4 10             	add    esp,0x10
c001c645:	31 d2                	xor    edx,edx
c001c647:	e9 81 00 00 00       	jmp    c001c6cd <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c64c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c650:	51                   	push   ecx
c001c651:	51                   	push   ecx
c001c652:	6a 01                	push   0x1
c001c654:	53                   	push   ebx
c001c655:	e8 8a 61 ff ff       	call   c00127e4 <File::open(FileOpenMode)>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	85 c0                	test   eax,eax
c001c65f:	74 1b                	je     c001c67c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c661:	83 ec 0c             	sub    esp,0xc
c001c664:	68 90 7a 02 c0       	push   0xc0027a90
c001c669:	e8 a0 c3 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001c66e:	e8 f1 f2 ff ff       	call   c001b964 <unlockScheduler()>
c001c673:	83 c4 10             	add    esp,0x10
c001c676:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c67a:	eb 51                	jmp    c001c6cd <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c67c:	83 ec 0c             	sub    esp,0xc
c001c67f:	0f b7 ff             	movzx  edi,di
c001c682:	6a 07                	push   0x7
c001c684:	0f b7 f6             	movzx  esi,si
c001c687:	68 00 01 00 00       	push   0x100
c001c68c:	6a 00                	push   0x0
c001c68e:	6a 00                	push   0x0
c001c690:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c696:	e8 a3 55 ff ff       	call   c0011c3e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c69b:	83 c4 18             	add    esp,0x18
c001c69e:	57                   	push   edi
c001c69f:	56                   	push   esi
c001c6a0:	e8 e6 fe ff ff       	call   c001c58b <Vm::realToLinear(unsigned short, unsigned short)>
c001c6a5:	5a                   	pop    edx
c001c6a6:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c6a8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c6ac:	51                   	push   ecx
c001c6ad:	50                   	push   eax
c001c6ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c6b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c6b6:	53                   	push   ebx
c001c6b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c6ba:	83 c4 14             	add    esp,0x14
c001c6bd:	53                   	push   ebx
c001c6be:	e8 7f 61 ff ff       	call   c0012842 <File::close()>
c001c6c3:	e8 9c f2 ff ff       	call   c001b964 <unlockScheduler()>
c001c6c8:	83 c4 10             	add    esp,0x10
c001c6cb:	b2 01                	mov    dl,0x1
c001c6cd:	83 c4 2c             	add    esp,0x2c
c001c6d0:	88 d0                	mov    al,dl
c001c6d2:	5b                   	pop    ebx
c001c6d3:	5e                   	pop    esi
c001c6d4:	5f                   	pop    edi
c001c6d5:	5d                   	pop    ebp
c001c6d6:	c3                   	ret    

c001c6d7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c6d7:	57                   	push   edi
c001c6d8:	56                   	push   esi
c001c6d9:	53                   	push   ebx
c001c6da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c6de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6e6:	83 e8 06             	sub    eax,0x6
c001c6e9:	0f b7 c0             	movzx  eax,ax
c001c6ec:	50                   	push   eax
c001c6ed:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c6f2:	50                   	push   eax
c001c6f3:	e8 93 fe ff ff       	call   c001c58b <Vm::realToLinear(unsigned short, unsigned short)>
c001c6f8:	5a                   	pop    edx
c001c6f9:	5e                   	pop    esi
c001c6fa:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c6fd:	8d 56 fa             	lea    edx,[esi-0x6]
c001c700:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c706:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c709:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c70c:	83 c2 02             	add    edx,0x2
c001c70f:	66 89 10             	mov    WORD PTR [eax],dx
c001c712:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c715:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c719:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c71c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c720:	89 d6                	mov    esi,edx
c001c722:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c728:	66 81 e6 ff fd       	and    si,0xfdff
c001c72d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c731:	74 07                	je     c001c73a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c733:	89 d6                	mov    esi,edx
c001c735:	66 81 ce 00 02       	or     si,0x200
c001c73a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c73e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c743:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c747:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c74f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c752:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c75a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c75d:	5b                   	pop    ebx
c001c75e:	5e                   	pop    esi
c001c75f:	5f                   	pop    edi
c001c760:	c3                   	ret    

c001c761 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c761:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c766:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c76b:	c1 e0 04             	shl    eax,0x4
c001c76e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c771:	c3                   	ret    

c001c772 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c772:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c777:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c77c:	c1 e0 04             	shl    eax,0x4
c001c77f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c783:	c3                   	ret    

c001c784 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c784:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c789:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c78e:	c1 e0 04             	shl    eax,0x4
c001c791:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c794:	c3                   	ret    

c001c795 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c795:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c79a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c79f:	c1 e0 04             	shl    eax,0x4
c001c7a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7a6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c7a9:	c3                   	ret    

c001c7aa <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c7aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c7b4:	c1 e0 04             	shl    eax,0x4
c001c7b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7bb:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c7bf:	c3                   	ret    

c001c7c0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c7c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c7ca:	c1 e0 04             	shl    eax,0x4
c001c7cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7d1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c7d4:	c3                   	ret    

c001c7d5 <Vm::faultHandler(regs*)>:
c001c7d5:	55                   	push   ebp
c001c7d6:	57                   	push   edi
c001c7d7:	56                   	push   esi
c001c7d8:	53                   	push   ebx
c001c7d9:	83 ec 1c             	sub    esp,0x1c
c001c7dc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7e0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c7e3:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c7e7:	0f b7 f0             	movzx  esi,ax
c001c7ea:	52                   	push   edx
c001c7eb:	0f b7 c0             	movzx  eax,ax
c001c7ee:	50                   	push   eax
c001c7ef:	e8 97 fd ff ff       	call   c001c58b <Vm::realToLinear(unsigned short, unsigned short)>
c001c7f4:	5a                   	pop    edx
c001c7f5:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c7f8:	59                   	pop    ecx
c001c7f9:	89 c7                	mov    edi,eax
c001c7fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c7fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c802:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c807:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c80b:	0f b7 c5             	movzx  eax,bp
c001c80e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c812:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c816:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c81a:	e8 6c fd ff ff       	call   c001c58b <Vm::realToLinear(unsigned short, unsigned short)>
c001c81f:	5a                   	pop    edx
c001c820:	59                   	pop    ecx
c001c821:	b1 06                	mov    cl,0x6
c001c823:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c828:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c82d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c830:	80 fa 9d             	cmp    dl,0x9d
c001c833:	0f 84 1d 02 00 00    	je     c001ca56 <Vm::faultHandler(regs*)+0x281>
c001c839:	0f 87 8e 00 00 00    	ja     c001c8cd <Vm::faultHandler(regs*)+0xf8>
c001c83f:	80 fa 66             	cmp    dl,0x66
c001c842:	0f 84 89 01 00 00    	je     c001c9d1 <Vm::faultHandler(regs*)+0x1fc>
c001c848:	77 44                	ja     c001c88e <Vm::faultHandler(regs*)+0xb9>
c001c84a:	80 fa 36             	cmp    dl,0x36
c001c84d:	0f 84 74 01 00 00    	je     c001c9c7 <Vm::faultHandler(regs*)+0x1f2>
c001c853:	77 1a                	ja     c001c86f <Vm::faultHandler(regs*)+0x9a>
c001c855:	80 fa 26             	cmp    dl,0x26
c001c858:	0f 84 4b 01 00 00    	je     c001c9a9 <Vm::faultHandler(regs*)+0x1d4>
c001c85e:	80 fa 2e             	cmp    dl,0x2e
c001c861:	0f 85 4a 05 00 00    	jne    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c867:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c86a:	31 c9                	xor    ecx,ecx
c001c86c:	47                   	inc    edi
c001c86d:	eb be                	jmp    c001c82d <Vm::faultHandler(regs*)+0x58>
c001c86f:	80 fa 64             	cmp    dl,0x64
c001c872:	0f 84 3b 01 00 00    	je     c001c9b3 <Vm::faultHandler(regs*)+0x1de>
c001c878:	0f 87 3f 01 00 00    	ja     c001c9bd <Vm::faultHandler(regs*)+0x1e8>
c001c87e:	80 fa 3e             	cmp    dl,0x3e
c001c881:	0f 85 2a 05 00 00    	jne    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c887:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c88a:	b1 01                	mov    cl,0x1
c001c88c:	eb de                	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c88e:	80 fa 6d             	cmp    dl,0x6d
c001c891:	0f 84 bf 02 00 00    	je     c001cb56 <Vm::faultHandler(regs*)+0x381>
c001c897:	77 17                	ja     c001c8b0 <Vm::faultHandler(regs*)+0xdb>
c001c899:	80 fa 67             	cmp    dl,0x67
c001c89c:	0f 84 3c 01 00 00    	je     c001c9de <Vm::faultHandler(regs*)+0x209>
c001c8a2:	80 fa 6c             	cmp    dl,0x6c
c001c8a5:	0f 84 5d 02 00 00    	je     c001cb08 <Vm::faultHandler(regs*)+0x333>
c001c8ab:	e9 01 05 00 00       	jmp    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c8b0:	80 fa 6f             	cmp    dl,0x6f
c001c8b3:	0f 84 8b 03 00 00    	je     c001cc44 <Vm::faultHandler(regs*)+0x46f>
c001c8b9:	0f 82 0f 03 00 00    	jb     c001cbce <Vm::faultHandler(regs*)+0x3f9>
c001c8bf:	80 fa 9c             	cmp    dl,0x9c
c001c8c2:	0f 84 23 01 00 00    	je     c001c9eb <Vm::faultHandler(regs*)+0x216>
c001c8c8:	e9 e4 04 00 00       	jmp    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c8cd:	80 fa ec             	cmp    dl,0xec
c001c8d0:	0f 84 7f 04 00 00    	je     c001cd55 <Vm::faultHandler(regs*)+0x580>
c001c8d6:	77 7b                	ja     c001c953 <Vm::faultHandler(regs*)+0x17e>
c001c8d8:	80 fa e4             	cmp    dl,0xe4
c001c8db:	0f 84 fe 03 00 00    	je     c001ccdf <Vm::faultHandler(regs*)+0x50a>
c001c8e1:	77 53                	ja     c001c936 <Vm::faultHandler(regs*)+0x161>
c001c8e3:	80 fa cd             	cmp    dl,0xcd
c001c8e6:	0f 84 cd 01 00 00    	je     c001cab9 <Vm::faultHandler(regs*)+0x2e4>
c001c8ec:	80 fa cf             	cmp    dl,0xcf
c001c8ef:	0f 85 bc 04 00 00    	jne    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c8f5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c8f8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c8fb:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c8ff:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c902:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c906:	81 ca 00 02 02 00    	or     edx,0x20200
c001c90c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c90f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c913:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c919:	66 c1 e8 09          	shr    ax,0x9
c001c91d:	83 e0 01             	and    eax,0x1
c001c920:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c923:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c926:	83 c0 06             	add    eax,0x6
c001c929:	25 ff ff 00 00       	and    eax,0xffff
c001c92e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c931:	e9 77 04 00 00       	jmp    c001cdad <Vm::faultHandler(regs*)+0x5d8>
c001c936:	80 fa e6             	cmp    dl,0xe6
c001c939:	0f 84 ea 03 00 00    	je     c001cd29 <Vm::faultHandler(regs*)+0x554>
c001c93f:	0f 82 b6 03 00 00    	jb     c001ccfb <Vm::faultHandler(regs*)+0x526>
c001c945:	80 fa e7             	cmp    dl,0xe7
c001c948:	0f 84 f2 03 00 00    	je     c001cd40 <Vm::faultHandler(regs*)+0x56b>
c001c94e:	e9 5e 04 00 00       	jmp    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c953:	80 fa ef             	cmp    dl,0xef
c001c956:	0f 84 3c 04 00 00    	je     c001cd98 <Vm::faultHandler(regs*)+0x5c3>
c001c95c:	77 28                	ja     c001c986 <Vm::faultHandler(regs*)+0x1b1>
c001c95e:	80 fa ed             	cmp    dl,0xed
c001c961:	0f 84 0a 04 00 00    	je     c001cd71 <Vm::faultHandler(regs*)+0x59c>
c001c967:	80 fa ee             	cmp    dl,0xee
c001c96a:	0f 85 41 04 00 00    	jne    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c970:	50                   	push   eax
c001c971:	50                   	push   eax
c001c972:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001c976:	50                   	push   eax
c001c977:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001c97b:	50                   	push   eax
c001c97c:	e8 00 fc ff ff       	call   c001c581 <Vm::outbv(unsigned short, unsigned char)>
c001c981:	e9 0a 04 00 00       	jmp    c001cd90 <Vm::faultHandler(regs*)+0x5bb>
c001c986:	80 fa fa             	cmp    dl,0xfa
c001c989:	0f 84 5d 01 00 00    	je     c001caec <Vm::faultHandler(regs*)+0x317>
c001c98f:	80 fa fb             	cmp    dl,0xfb
c001c992:	0f 84 62 01 00 00    	je     c001cafa <Vm::faultHandler(regs*)+0x325>
c001c998:	80 fa f3             	cmp    dl,0xf3
c001c99b:	0f 85 10 04 00 00    	jne    c001cdb1 <Vm::faultHandler(regs*)+0x5dc>
c001c9a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9a4:	e9 c3 fe ff ff       	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c9a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9ac:	b1 02                	mov    cl,0x2
c001c9ae:	e9 b9 fe ff ff       	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c9b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9b6:	b1 03                	mov    cl,0x3
c001c9b8:	e9 af fe ff ff       	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c9bd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9c0:	b1 04                	mov    cl,0x4
c001c9c2:	e9 a5 fe ff ff       	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c9c7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9ca:	b1 05                	mov    cl,0x5
c001c9cc:	e9 9b fe ff ff       	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c9d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9d4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001c9d9:	e9 8e fe ff ff       	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c9de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9e1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001c9e6:	e9 81 fe ff ff       	jmp    c001c86c <Vm::faultHandler(regs*)+0x97>
c001c9eb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c9ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c9f2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001c9f7:	74 30                	je     c001ca29 <Vm::faultHandler(regs*)+0x254>
c001c9f9:	83 e9 04             	sub    ecx,0x4
c001c9fc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca02:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ca08:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ca0b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ca0e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ca14:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ca18:	0f 84 8c 03 00 00    	je     c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001ca1e:	80 ce 02             	or     dh,0x2
c001ca21:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ca24:	e9 81 03 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001ca29:	83 e9 02             	sub    ecx,0x2
c001ca2c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ca32:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ca35:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca39:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ca3f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ca43:	74 05                	je     c001ca4a <Vm::faultHandler(regs*)+0x275>
c001ca45:	80 ce 02             	or     dh,0x2
c001ca48:	eb 03                	jmp    c001ca4d <Vm::faultHandler(regs*)+0x278>
c001ca4a:	80 e6 fd             	and    dh,0xfd
c001ca4d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca51:	e9 54 03 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001ca56:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca5b:	74 2a                	je     c001ca87 <Vm::faultHandler(regs*)+0x2b2>
c001ca5d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca5f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca65:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca6b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca70:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca76:	c1 e8 09             	shr    eax,0x9
c001ca79:	83 e0 01             	and    eax,0x1
c001ca7c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca7f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca82:	83 c0 04             	add    eax,0x4
c001ca85:	eb 25                	jmp    c001caac <Vm::faultHandler(regs*)+0x2d7>
c001ca87:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ca8a:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca90:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca93:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ca96:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca9c:	66 c1 e8 09          	shr    ax,0x9
c001caa0:	83 e0 01             	and    eax,0x1
c001caa3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001caa6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001caa9:	83 c0 02             	add    eax,0x2
c001caac:	25 ff ff 00 00       	and    eax,0xffff
c001cab1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cab4:	e9 f1 02 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001cab9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cabd:	3c ff                	cmp    al,0xff
c001cabf:	75 10                	jne    c001cad1 <Vm::faultHandler(regs*)+0x2fc>
c001cac1:	83 ec 0c             	sub    esp,0xc
c001cac4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001cac7:	e8 8c f9 ff ff       	call   c001c458 <Thr::terminateFromIRQ(int)>
c001cacc:	e9 c2 02 00 00       	jmp    c001cd93 <Vm::faultHandler(regs*)+0x5be>
c001cad1:	83 ec 0c             	sub    esp,0xc
c001cad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cadc:	57                   	push   edi
c001cadd:	50                   	push   eax
c001cade:	53                   	push   ebx
c001cadf:	e8 f3 fb ff ff       	call   c001c6d7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cae4:	83 c4 20             	add    esp,0x20
c001cae7:	e9 c1 02 00 00       	jmp    c001cdad <Vm::faultHandler(regs*)+0x5d8>
c001caec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caf1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001caf5:	e9 b0 02 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001cafa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caff:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cb03:	e9 a2 02 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001cb08:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb0d:	74 0d                	je     c001cb1c <Vm::faultHandler(regs*)+0x347>
c001cb0f:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cb16:	0f 87 e9 02 00 00    	ja     c001ce05 <Vm::faultHandler(regs*)+0x630>
c001cb1c:	83 ec 0c             	sub    esp,0xc
c001cb1f:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cb22:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cb26:	50                   	push   eax
c001cb27:	e8 4f fa ff ff       	call   c001c57b <Vm::inbv(unsigned short)>
c001cb2c:	83 c4 0c             	add    esp,0xc
c001cb2f:	0f b6 c0             	movzx  eax,al
c001cb32:	0f b7 c9             	movzx  ecx,cx
c001cb35:	50                   	push   eax
c001cb36:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cb3a:	50                   	push   eax
c001cb3b:	51                   	push   ecx
c001cb3c:	e8 54 fc ff ff       	call   c001c795 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cb41:	83 c4 10             	add    esp,0x10
c001cb44:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb47:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb4b:	74 03                	je     c001cb50 <Vm::faultHandler(regs*)+0x37b>
c001cb4d:	48                   	dec    eax
c001cb4e:	eb 01                	jmp    c001cb51 <Vm::faultHandler(regs*)+0x37c>
c001cb50:	40                   	inc    eax
c001cb51:	0f b7 c0             	movzx  eax,ax
c001cb54:	eb 70                	jmp    c001cbc6 <Vm::faultHandler(regs*)+0x3f1>
c001cb56:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cb59:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cb5c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb61:	74 0c                	je     c001cb6f <Vm::faultHandler(regs*)+0x39a>
c001cb63:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cb69:	0f 87 96 02 00 00    	ja     c001ce05 <Vm::faultHandler(regs*)+0x630>
c001cb6f:	0f b7 c9             	movzx  ecx,cx
c001cb72:	0f b7 f6             	movzx  esi,si
c001cb75:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cb78:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb7d:	74 20                	je     c001cb9f <Vm::faultHandler(regs*)+0x3ca>
c001cb7f:	ed                   	in     eax,dx
c001cb80:	55                   	push   ebp
c001cb81:	50                   	push   eax
c001cb82:	51                   	push   ecx
c001cb83:	56                   	push   esi
c001cb84:	e8 37 fc ff ff       	call   c001c7c0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cb89:	83 c4 10             	add    esp,0x10
c001cb8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb8f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb93:	74 05                	je     c001cb9a <Vm::faultHandler(regs*)+0x3c5>
c001cb95:	83 e8 04             	sub    eax,0x4
c001cb98:	eb 27                	jmp    c001cbc1 <Vm::faultHandler(regs*)+0x3ec>
c001cb9a:	83 c0 04             	add    eax,0x4
c001cb9d:	eb 22                	jmp    c001cbc1 <Vm::faultHandler(regs*)+0x3ec>
c001cb9f:	66 ed                	in     ax,dx
c001cba1:	0f b7 c0             	movzx  eax,ax
c001cba4:	57                   	push   edi
c001cba5:	50                   	push   eax
c001cba6:	51                   	push   ecx
c001cba7:	56                   	push   esi
c001cba8:	e8 fd fb ff ff       	call   c001c7aa <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cbad:	83 c4 10             	add    esp,0x10
c001cbb0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cbb3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cbb7:	74 05                	je     c001cbbe <Vm::faultHandler(regs*)+0x3e9>
c001cbb9:	83 e8 02             	sub    eax,0x2
c001cbbc:	eb 03                	jmp    c001cbc1 <Vm::faultHandler(regs*)+0x3ec>
c001cbbe:	83 c0 02             	add    eax,0x2
c001cbc1:	25 ff ff 00 00       	and    eax,0xffff
c001cbc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cbc9:	e9 dc 01 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001cbce:	49                   	dec    ecx
c001cbcf:	80 f9 05             	cmp    cl,0x5
c001cbd2:	77 24                	ja     c001cbf8 <Vm::faultHandler(regs*)+0x423>
c001cbd4:	0f b6 c9             	movzx  ecx,cl
c001cbd7:	ff 24 8d d8 7a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd8528]
c001cbde:	0f b7 f5             	movzx  esi,bp
c001cbe1:	eb 15                	jmp    c001cbf8 <Vm::faultHandler(regs*)+0x423>
c001cbe3:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cbe7:	eb 0f                	jmp    c001cbf8 <Vm::faultHandler(regs*)+0x423>
c001cbe9:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cbed:	eb 09                	jmp    c001cbf8 <Vm::faultHandler(regs*)+0x423>
c001cbef:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cbf3:	eb 03                	jmp    c001cbf8 <Vm::faultHandler(regs*)+0x423>
c001cbf5:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cbf8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbfb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc00:	74 0b                	je     c001cc0d <Vm::faultHandler(regs*)+0x438>
c001cc02:	3d ff ff 00 00       	cmp    eax,0xffff
c001cc07:	0f 87 f8 01 00 00    	ja     c001ce05 <Vm::faultHandler(regs*)+0x630>
c001cc0d:	0f b7 c0             	movzx  eax,ax
c001cc10:	52                   	push   edx
c001cc11:	52                   	push   edx
c001cc12:	50                   	push   eax
c001cc13:	56                   	push   esi
c001cc14:	e8 48 fb ff ff       	call   c001c761 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cc19:	59                   	pop    ecx
c001cc1a:	0f b6 c0             	movzx  eax,al
c001cc1d:	5e                   	pop    esi
c001cc1e:	50                   	push   eax
c001cc1f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cc23:	50                   	push   eax
c001cc24:	e8 58 f9 ff ff       	call   c001c581 <Vm::outbv(unsigned short, unsigned char)>
c001cc29:	83 c4 10             	add    esp,0x10
c001cc2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc2f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc33:	74 03                	je     c001cc38 <Vm::faultHandler(regs*)+0x463>
c001cc35:	48                   	dec    eax
c001cc36:	eb 01                	jmp    c001cc39 <Vm::faultHandler(regs*)+0x464>
c001cc38:	40                   	inc    eax
c001cc39:	0f b7 c0             	movzx  eax,ax
c001cc3c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cc3f:	e9 66 01 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001cc44:	49                   	dec    ecx
c001cc45:	80 f9 05             	cmp    cl,0x5
c001cc48:	77 1f                	ja     c001cc69 <Vm::faultHandler(regs*)+0x494>
c001cc4a:	0f b6 c9             	movzx  ecx,cl
c001cc4d:	ff 24 8d f0 7a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd8510]
c001cc54:	89 ee                	mov    esi,ebp
c001cc56:	eb 11                	jmp    c001cc69 <Vm::faultHandler(regs*)+0x494>
c001cc58:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cc5b:	eb 0c                	jmp    c001cc69 <Vm::faultHandler(regs*)+0x494>
c001cc5d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc60:	eb 07                	jmp    c001cc69 <Vm::faultHandler(regs*)+0x494>
c001cc62:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cc65:	eb 02                	jmp    c001cc69 <Vm::faultHandler(regs*)+0x494>
c001cc67:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cc69:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cc6c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc71:	74 0c                	je     c001cc7f <Vm::faultHandler(regs*)+0x4aa>
c001cc73:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc79:	0f 87 86 01 00 00    	ja     c001ce05 <Vm::faultHandler(regs*)+0x630>
c001cc7f:	0f b7 d6             	movzx  edx,si
c001cc82:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cc85:	0f b7 c1             	movzx  eax,cx
c001cc88:	81 e7 00 04 00 00    	and    edi,0x400
c001cc8e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cc91:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc96:	74 1d                	je     c001ccb5 <Vm::faultHandler(regs*)+0x4e0>
c001cc98:	55                   	push   ebp
c001cc99:	55                   	push   ebp
c001cc9a:	50                   	push   eax
c001cc9b:	52                   	push   edx
c001cc9c:	e8 e3 fa ff ff       	call   c001c784 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cca1:	83 c4 10             	add    esp,0x10
c001cca4:	89 f2                	mov    edx,esi
c001cca6:	ef                   	out    dx,eax
c001cca7:	85 ff                	test   edi,edi
c001cca9:	74 05                	je     c001ccb0 <Vm::faultHandler(regs*)+0x4db>
c001ccab:	83 e9 04             	sub    ecx,0x4
c001ccae:	eb 21                	jmp    c001ccd1 <Vm::faultHandler(regs*)+0x4fc>
c001ccb0:	83 c1 04             	add    ecx,0x4
c001ccb3:	eb 1c                	jmp    c001ccd1 <Vm::faultHandler(regs*)+0x4fc>
c001ccb5:	55                   	push   ebp
c001ccb6:	55                   	push   ebp
c001ccb7:	50                   	push   eax
c001ccb8:	52                   	push   edx
c001ccb9:	e8 b4 fa ff ff       	call   c001c772 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	89 f2                	mov    edx,esi
c001ccc3:	66 ef                	out    dx,ax
c001ccc5:	85 ff                	test   edi,edi
c001ccc7:	74 05                	je     c001ccce <Vm::faultHandler(regs*)+0x4f9>
c001ccc9:	83 e9 02             	sub    ecx,0x2
c001cccc:	eb 03                	jmp    c001ccd1 <Vm::faultHandler(regs*)+0x4fc>
c001ccce:	83 c1 02             	add    ecx,0x2
c001ccd1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ccd7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001ccda:	e9 cb 00 00 00       	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001ccdf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cce6:	83 ec 0c             	sub    esp,0xc
c001cce9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cced:	50                   	push   eax
c001ccee:	e8 88 f8 ff ff       	call   c001c57b <Vm::inbv(unsigned short)>
c001ccf3:	0f b6 c0             	movzx  eax,al
c001ccf6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ccf9:	eb 3f                	jmp    c001cd3a <Vm::faultHandler(regs*)+0x565>
c001ccfb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd00:	74 07                	je     c001cd09 <Vm::faultHandler(regs*)+0x534>
c001cd02:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd06:	ed                   	in     eax,dx
c001cd07:	eb 14                	jmp    c001cd1d <Vm::faultHandler(regs*)+0x548>
c001cd09:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001cd0c:	66 31 c9             	xor    cx,cx
c001cd0f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001cd12:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd16:	66 ed                	in     ax,dx
c001cd18:	0f b7 c0             	movzx  eax,ax
c001cd1b:	09 c8                	or     eax,ecx
c001cd1d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd20:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd24:	e9 84 00 00 00       	jmp    c001cdad <Vm::faultHandler(regs*)+0x5d8>
c001cd29:	52                   	push   edx
c001cd2a:	52                   	push   edx
c001cd2b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cd2f:	50                   	push   eax
c001cd30:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd34:	50                   	push   eax
c001cd35:	e8 47 f8 ff ff       	call   c001c581 <Vm::outbv(unsigned short, unsigned char)>
c001cd3a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd3e:	eb 53                	jmp    c001cd93 <Vm::faultHandler(regs*)+0x5be>
c001cd40:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd43:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd47:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd4c:	74 03                	je     c001cd51 <Vm::faultHandler(regs*)+0x57c>
c001cd4e:	ef                   	out    dx,eax
c001cd4f:	eb cf                	jmp    c001cd20 <Vm::faultHandler(regs*)+0x54b>
c001cd51:	66 ef                	out    dx,ax
c001cd53:	eb cb                	jmp    c001cd20 <Vm::faultHandler(regs*)+0x54b>
c001cd55:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd63:	50                   	push   eax
c001cd64:	e8 12 f8 ff ff       	call   c001c57b <Vm::inbv(unsigned short)>
c001cd69:	0f b6 c0             	movzx  eax,al
c001cd6c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd6f:	eb 1f                	jmp    c001cd90 <Vm::faultHandler(regs*)+0x5bb>
c001cd71:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd74:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd79:	74 03                	je     c001cd7e <Vm::faultHandler(regs*)+0x5a9>
c001cd7b:	ed                   	in     eax,dx
c001cd7c:	eb 0d                	jmp    c001cd8b <Vm::faultHandler(regs*)+0x5b6>
c001cd7e:	66 ed                	in     ax,dx
c001cd80:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001cd83:	0f b7 c0             	movzx  eax,ax
c001cd86:	66 31 d2             	xor    dx,dx
c001cd89:	09 d0                	or     eax,edx
c001cd8b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd8e:	eb 1a                	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001cd90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	eb 15                	jmp    c001cdad <Vm::faultHandler(regs*)+0x5d8>
c001cd98:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd9b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd9e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cda3:	74 03                	je     c001cda8 <Vm::faultHandler(regs*)+0x5d3>
c001cda5:	ef                   	out    dx,eax
c001cda6:	eb 02                	jmp    c001cdaa <Vm::faultHandler(regs*)+0x5d5>
c001cda8:	66 ef                	out    dx,ax
c001cdaa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cdad:	b0 01                	mov    al,0x1
c001cdaf:	eb 56                	jmp    c001ce07 <Vm::faultHandler(regs*)+0x632>
c001cdb1:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cdb5:	50                   	push   eax
c001cdb6:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001cdba:	50                   	push   eax
c001cdbb:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001cdbf:	50                   	push   eax
c001cdc0:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cdc4:	50                   	push   eax
c001cdc5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cdc9:	50                   	push   eax
c001cdca:	52                   	push   edx
c001cdcb:	52                   	push   edx
c001cdcc:	68 a9 7a 02 c0       	push   0xc0027aa9
c001cdd1:	e8 7b 54 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001cdd6:	83 c4 20             	add    esp,0x20
c001cdd9:	83 ec 0c             	sub    esp,0xc
c001cddc:	6a 60                	push   0x60
c001cdde:	e8 98 f7 ff ff       	call   c001c57b <Vm::inbv(unsigned short)>
c001cde3:	83 c4 10             	add    esp,0x10
c001cde6:	3c 1c                	cmp    al,0x1c
c001cde8:	74 04                	je     c001cdee <Vm::faultHandler(regs*)+0x619>
c001cdea:	3c 5a                	cmp    al,0x5a
c001cdec:	75 eb                	jne    c001cdd9 <Vm::faultHandler(regs*)+0x604>
c001cdee:	3c 5a                	cmp    al,0x5a
c001cdf0:	74 04                	je     c001cdf6 <Vm::faultHandler(regs*)+0x621>
c001cdf2:	3c 1c                	cmp    al,0x1c
c001cdf4:	75 0f                	jne    c001ce05 <Vm::faultHandler(regs*)+0x630>
c001cdf6:	83 ec 0c             	sub    esp,0xc
c001cdf9:	6a 60                	push   0x60
c001cdfb:	e8 7b f7 ff ff       	call   c001c57b <Vm::inbv(unsigned short)>
c001ce00:	83 c4 10             	add    esp,0x10
c001ce03:	eb e9                	jmp    c001cdee <Vm::faultHandler(regs*)+0x619>
c001ce05:	31 c0                	xor    eax,eax
c001ce07:	83 c4 1c             	add    esp,0x1c
c001ce0a:	5b                   	pop    ebx
c001ce0b:	5e                   	pop    esi
c001ce0c:	5f                   	pop    edi
c001ce0d:	5d                   	pop    ebp
c001ce0e:	c3                   	ret    
c001ce0f:	90                   	nop

c001ce10 <FAT::getName()>:
c001ce10:	b8 08 7b 02 c0       	mov    eax,0xc0027b08
c001ce15:	c3                   	ret    

c001ce16 <FAT::tell(void*, unsigned long long*)>:
c001ce16:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ce1b:	75 06                	jne    c001ce23 <FAT::tell(void*, unsigned long long*)+0xd>
c001ce1d:	b8 04 00 00 00       	mov    eax,0x4
c001ce22:	c3                   	ret    
c001ce23:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce28:	75 06                	jne    c001ce30 <FAT::tell(void*, unsigned long long*)+0x1a>
c001ce2a:	b8 04 00 00 00       	mov    eax,0x4
c001ce2f:	c3                   	ret    
c001ce30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce34:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ce37:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ce3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce3e:	89 01                	mov    DWORD PTR [ecx],eax
c001ce40:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ce43:	b8 00 00 00 00       	mov    eax,0x0
c001ce48:	c3                   	ret    
c001ce49:	90                   	nop

c001ce4a <FAT::stat(void*, unsigned long long*)>:
c001ce4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ce4f:	75 06                	jne    c001ce57 <FAT::stat(void*, unsigned long long*)+0xd>
c001ce51:	b8 04 00 00 00       	mov    eax,0x4
c001ce56:	c3                   	ret    
c001ce57:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce5c:	75 06                	jne    c001ce64 <FAT::stat(void*, unsigned long long*)+0x1a>
c001ce5e:	b8 04 00 00 00       	mov    eax,0x4
c001ce63:	c3                   	ret    
c001ce64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ce6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ce6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce72:	89 01                	mov    DWORD PTR [ecx],eax
c001ce74:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ce77:	b8 00 00 00 00       	mov    eax,0x0
c001ce7c:	c3                   	ret    
c001ce7d:	90                   	nop

c001ce7e <FAT::~FAT()>:
c001ce7e:	83 ec 0c             	sub    esp,0xc
c001ce81:	ba 8c 7b 02 c0       	mov    edx,0xc0027b8c
c001ce86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8a:	89 10                	mov    DWORD PTR [eax],edx
c001ce8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce90:	83 ec 0c             	sub    esp,0xc
c001ce93:	50                   	push   eax
c001ce94:	e8 e1 56 ff ff       	call   c001257a <Filesystem::~Filesystem()>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	90                   	nop
c001ce9d:	83 c4 0c             	add    esp,0xc
c001cea0:	c3                   	ret    
c001cea1:	90                   	nop

c001cea2 <FAT::~FAT()>:
c001cea2:	83 ec 0c             	sub    esp,0xc
c001cea5:	83 ec 0c             	sub    esp,0xc
c001cea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceac:	e8 cd ff ff ff       	call   c001ce7e <FAT::~FAT()>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	83 ec 08             	sub    esp,0x8
c001ceb7:	6a 08                	push   0x8
c001ceb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cebd:	e8 af 52 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001cec2:	83 c4 10             	add    esp,0x10
c001cec5:	83 c4 0c             	add    esp,0xc
c001cec8:	c3                   	ret    
c001cec9:	90                   	nop

c001ceca <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ceca:	83 ec 1c             	sub    esp,0x1c
c001cecd:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ced4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ced9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cedd:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001cee4:	83 f8 ff             	cmp    eax,0xffffffff
c001cee7:	75 34                	jne    c001cf1d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001cee9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ceed:	88 c2                	mov    dl,al
c001ceef:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001cef4:	01 d0                	add    eax,edx
c001cef6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001cefa:	8b 15 e0 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a8e0
c001cf00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf04:	89 14 85 00 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5700],edx
c001cf0b:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001cf10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf14:	89 14 85 80 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5680],edx
c001cf1b:	eb 17                	jmp    c001cf34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001cf1d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001cf21:	88 c2                	mov    dl,al
c001cf23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf27:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001cf2e:	01 d0                	add    eax,edx
c001cf30:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001cf34:	83 ec 04             	sub    esp,0x4
c001cf37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cf3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cf3f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001cf43:	50                   	push   eax
c001cf44:	e8 fa 9b fe ff       	call   c0006b43 <f_getlabel>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf55:	75 07                	jne    c001cf5e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001cf57:	b8 00 00 00 00       	mov    eax,0x0
c001cf5c:	eb 05                	jmp    c001cf63 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001cf5e:	b8 01 00 00 00       	mov    eax,0x1
c001cf63:	83 c4 1c             	add    esp,0x1c
c001cf66:	c3                   	ret    
c001cf67:	90                   	nop

c001cf68 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001cf68:	57                   	push   edi
c001cf69:	83 ec 58             	sub    esp,0x58
c001cf6c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001cf74:	8d 54 24 10          	lea    edx,[esp+0x10]
c001cf78:	b9 0f 00 00 00       	mov    ecx,0xf
c001cf7d:	b8 00 00 00 00       	mov    eax,0x0
c001cf82:	fc                   	cld    
c001cf83:	89 d7                	mov    edi,edx
c001cf85:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cf87:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cf8b:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001cf92:	83 f8 ff             	cmp    eax,0xffffffff
c001cf95:	75 34                	jne    c001cfcb <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001cf97:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cf9b:	88 c2                	mov    dl,al
c001cf9d:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001cfa2:	01 d0                	add    eax,edx
c001cfa4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cfa8:	8b 15 e0 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a8e0
c001cfae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cfb2:	89 14 85 00 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5700],edx
c001cfb9:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001cfbe:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001cfc2:	89 14 85 80 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5680],edx
c001cfc9:	eb 17                	jmp    c001cfe2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001cfcb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cfcf:	88 c2                	mov    dl,al
c001cfd1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cfd5:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001cfdc:	01 d0                	add    eax,edx
c001cfde:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cfe2:	83 ec 08             	sub    esp,0x8
c001cfe5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001cfe9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cfed:	50                   	push   eax
c001cfee:	e8 49 38 fe ff       	call   c000083c <strcat>
c001cff3:	83 c4 10             	add    esp,0x10
c001cff6:	83 ec 0c             	sub    esp,0xc
c001cff9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cffd:	50                   	push   eax
c001cffe:	e8 2e 9d fe ff       	call   c0006d31 <f_setlabel>
c001d003:	83 c4 10             	add    esp,0x10
c001d006:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d00a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001d00f:	75 07                	jne    c001d018 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001d011:	b8 00 00 00 00       	mov    eax,0x0
c001d016:	eb 05                	jmp    c001d01d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001d018:	b8 01 00 00 00       	mov    eax,0x1
c001d01d:	83 c4 58             	add    esp,0x58
c001d020:	5f                   	pop    edi
c001d021:	c3                   	ret    

c001d022 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001d022:	83 ec 2c             	sub    esp,0x2c
c001d025:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001d02d:	83 ec 08             	sub    esp,0x8
c001d030:	68 2c 7b 02 c0       	push   0xc0027b2c
c001d035:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d039:	e8 98 37 fe ff       	call   c00007d6 <strcmp>
c001d03e:	83 c4 10             	add    esp,0x10
c001d041:	85 c0                	test   eax,eax
c001d043:	0f 94 c0             	sete   al
c001d046:	84 c0                	test   al,al
c001d048:	74 0d                	je     c001d057 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001d04a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001d052:	e9 a6 00 00 00       	jmp    c001d0fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001d057:	83 ec 08             	sub    esp,0x8
c001d05a:	68 1e 7b 02 c0       	push   0xc0027b1e
c001d05f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d063:	e8 6e 37 fe ff       	call   c00007d6 <strcmp>
c001d068:	83 c4 10             	add    esp,0x10
c001d06b:	85 c0                	test   eax,eax
c001d06d:	0f 94 c0             	sete   al
c001d070:	84 c0                	test   al,al
c001d072:	74 0a                	je     c001d07e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001d074:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001d07c:	eb 7f                	jmp    c001d0fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001d07e:	83 ec 08             	sub    esp,0x8
c001d081:	68 24 7b 02 c0       	push   0xc0027b24
c001d086:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d08a:	e8 47 37 fe ff       	call   c00007d6 <strcmp>
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	85 c0                	test   eax,eax
c001d094:	0f 94 c0             	sete   al
c001d097:	84 c0                	test   al,al
c001d099:	74 0a                	je     c001d0a5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001d09b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001d0a3:	eb 58                	jmp    c001d0fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001d0a5:	83 ec 08             	sub    esp,0x8
c001d0a8:	68 0c 4f 02 c0       	push   0xc0024f0c
c001d0ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d0b1:	e8 20 37 fe ff       	call   c00007d6 <strcmp>
c001d0b6:	83 c4 10             	add    esp,0x10
c001d0b9:	85 c0                	test   eax,eax
c001d0bb:	0f 94 c0             	sete   al
c001d0be:	84 c0                	test   al,al
c001d0c0:	74 0a                	je     c001d0cc <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001d0c2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001d0ca:	eb 31                	jmp    c001d0fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001d0cc:	83 ec 08             	sub    esp,0x8
c001d0cf:	68 2a 7b 02 c0       	push   0xc0027b2a
c001d0d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d0d8:	e8 f9 36 fe ff       	call   c00007d6 <strcmp>
c001d0dd:	83 c4 10             	add    esp,0x10
c001d0e0:	85 c0                	test   eax,eax
c001d0e2:	0f 94 c0             	sete   al
c001d0e5:	84 c0                	test   al,al
c001d0e7:	74 0a                	je     c001d0f3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001d0e9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001d0f1:	eb 0a                	jmp    c001d0fd <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001d0f3:	b8 08 00 00 00       	mov    eax,0x8
c001d0f8:	e9 04 01 00 00       	jmp    c001d201 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001d0fd:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001d104:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001d109:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d10d:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001d114:	83 f8 ff             	cmp    eax,0xffffffff
c001d117:	75 34                	jne    c001d14d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001d119:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d11d:	88 c2                	mov    dl,al
c001d11f:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001d124:	01 d0                	add    eax,edx
c001d126:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001d12a:	8b 15 e0 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a8e0
c001d130:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d134:	89 14 85 00 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5700],edx
c001d13b:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001d140:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d144:	89 14 85 80 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5680],edx
c001d14b:	eb 17                	jmp    c001d164 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001d14d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001d151:	88 c2                	mov    dl,al
c001d153:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d157:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001d15e:	01 d0                	add    eax,edx
c001d160:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001d164:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d168:	88 04 24             	mov    BYTE PTR [esp],al
c001d16b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d16f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d173:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d17b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001d180:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d188:	83 ec 0c             	sub    esp,0xc
c001d18b:	68 00 20 00 00       	push   0x2000
c001d190:	e8 cb 1f ff ff       	call   c000f160 <malloc>
c001d195:	83 c4 10             	add    esp,0x10
c001d198:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d19c:	68 00 20 00 00       	push   0x2000
c001d1a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d1a9:	50                   	push   eax
c001d1aa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001d1ae:	50                   	push   eax
c001d1af:	e8 c8 9f fe ff       	call   c000717c <f_mkfs>
c001d1b4:	83 c4 10             	add    esp,0x10
c001d1b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d1c0:	75 07                	jne    c001d1c9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001d1c2:	b8 00 00 00 00       	mov    eax,0x0
c001d1c7:	eb 38                	jmp    c001d201 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001d1c9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001d1ce:	75 17                	jne    c001d1e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	68 5c 7b 02 c0       	push   0xc0027b5c
c001d1d8:	e8 74 50 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d1dd:	83 c4 10             	add    esp,0x10
c001d1e0:	b8 09 00 00 00       	mov    eax,0x9
c001d1e5:	eb 1a                	jmp    c001d201 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001d1e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1eb:	83 ec 08             	sub    esp,0x8
c001d1ee:	50                   	push   eax
c001d1ef:	68 30 7b 02 c0       	push   0xc0027b30
c001d1f4:	e8 58 50 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001d1f9:	83 c4 10             	add    esp,0x10
c001d1fc:	b8 01 00 00 00       	mov    eax,0x1
c001d201:	83 c4 2c             	add    esp,0x2c
c001d204:	c3                   	ret    
c001d205:	90                   	nop

c001d206 <FAT::tryMount(LogicalDisk*, int)>:
c001d206:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001d20c:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001d211:	83 f8 14             	cmp    eax,0x14
c001d214:	75 17                	jne    c001d22d <FAT::tryMount(LogicalDisk*, int)+0x27>
c001d216:	83 ec 0c             	sub    esp,0xc
c001d219:	68 42 7b 02 c0       	push   0xc0027b42
c001d21e:	e8 eb b7 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	b0 00                	mov    al,0x0
c001d228:	e9 d7 01 00 00       	jmp    c001d404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001d22d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d234:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d23a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d240:	3d 00 02 00 00       	cmp    eax,0x200
c001d245:	74 07                	je     c001d24e <FAT::tryMount(LogicalDisk*, int)+0x48>
c001d247:	b0 00                	mov    al,0x0
c001d249:	e9 b6 01 00 00       	jmp    c001d404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001d24e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001d256:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001d25d:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001d264:	83 f8 ff             	cmp    eax,0xffffffff
c001d267:	74 07                	je     c001d270 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001d269:	b0 01                	mov    al,0x1
c001d26b:	e9 94 01 00 00       	jmp    c001d404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001d270:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001d27a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001d282:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001d289:	88 c2                	mov    dl,al
c001d28b:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001d290:	01 d0                	add    eax,edx
c001d292:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001d299:	8b 15 e0 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a8e0
c001d29f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001d2a6:	89 14 85 00 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5700],edx
c001d2ad:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001d2b2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001d2b9:	89 14 85 80 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5680],edx
c001d2c0:	83 ec 0c             	sub    esp,0xc
c001d2c3:	68 54 02 00 00       	push   0x254
c001d2c8:	e8 93 1e ff ff       	call   c000f160 <malloc>
c001d2cd:	83 c4 10             	add    esp,0x10
c001d2d0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001d2d7:	83 ec 04             	sub    esp,0x4
c001d2da:	6a 00                	push   0x0
c001d2dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001d2e3:	50                   	push   eax
c001d2e4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001d2eb:	e8 4a 7a fe ff       	call   c0004d3a <f_mount>
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001d2fa:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001d302:	74 19                	je     c001d31d <FAT::tryMount(LogicalDisk*, int)+0x117>
c001d304:	83 ec 0c             	sub    esp,0xc
c001d307:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001d30e:	e8 6d 1e ff ff       	call   c000f180 <rfree>
c001d313:	83 c4 10             	add    esp,0x10
c001d316:	b0 00                	mov    al,0x0
c001d318:	e9 e7 00 00 00       	jmp    c001d404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001d31d:	83 ec 04             	sub    esp,0x4
c001d320:	68 00 01 00 00       	push   0x100
c001d325:	6a 00                	push   0x0
c001d327:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001d32e:	50                   	push   eax
c001d32f:	e8 b2 33 fe ff       	call   c00006e6 <memset>
c001d334:	83 c4 10             	add    esp,0x10
c001d337:	83 ec 08             	sub    esp,0x8
c001d33a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001d341:	50                   	push   eax
c001d342:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001d349:	50                   	push   eax
c001d34a:	e8 ed 34 fe ff       	call   c000083c <strcat>
c001d34f:	83 c4 10             	add    esp,0x10
c001d352:	83 ec 08             	sub    esp,0x8
c001d355:	68 50 7b 02 c0       	push   0xc0027b50
c001d35a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001d361:	50                   	push   eax
c001d362:	e8 d5 34 fe ff       	call   c000083c <strcat>
c001d367:	83 c4 10             	add    esp,0x10
c001d36a:	83 ec 04             	sub    esp,0x4
c001d36d:	6a 01                	push   0x1
c001d36f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001d376:	50                   	push   eax
c001d377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d37b:	50                   	push   eax
c001d37c:	e8 1b 7a fe ff       	call   c0004d9c <f_open>
c001d381:	83 c4 10             	add    esp,0x10
c001d384:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001d38b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001d392:	85 c0                	test   eax,eax
c001d394:	74 0a                	je     c001d3a0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001d396:	78 2d                	js     c001d3c5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001d398:	83 e8 04             	sub    eax,0x4
c001d39b:	83 f8 01             	cmp    eax,0x1
c001d39e:	77 25                	ja     c001d3c5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001d3a0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d3af:	50                   	push   eax
c001d3b0:	e8 39 85 fe ff       	call   c00058ee <f_close>
c001d3b5:	83 c4 10             	add    esp,0x10
c001d3b8:	90                   	nop
c001d3b9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001d3c1:	74 3a                	je     c001d3fd <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001d3c3:	eb 2d                	jmp    c001d3f2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001d3c5:	83 ec 0c             	sub    esp,0xc
c001d3c8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001d3cf:	e8 ac 1d ff ff       	call   c000f180 <rfree>
c001d3d4:	83 c4 10             	add    esp,0x10
c001d3d7:	83 ec 04             	sub    esp,0x4
c001d3da:	6a 00                	push   0x0
c001d3dc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001d3e3:	50                   	push   eax
c001d3e4:	6a 00                	push   0x0
c001d3e6:	e8 4f 79 fe ff       	call   c0004d3a <f_mount>
c001d3eb:	83 c4 10             	add    esp,0x10
c001d3ee:	b0 00                	mov    al,0x0
c001d3f0:	eb 12                	jmp    c001d404 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001d3f2:	a1 e0 a8 02 c0       	mov    eax,ds:0xc002a8e0
c001d3f7:	40                   	inc    eax
c001d3f8:	a3 e0 a8 02 c0       	mov    ds:0xc002a8e0,eax
c001d3fd:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001d404:	81 c4 6c 03 00 00    	add    esp,0x36c
c001d40a:	c3                   	ret    
c001d40b:	90                   	nop

c001d40c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001d40c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001d412:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001d41a:	74 0a                	je     c001d426 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001d41c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001d424:	75 0a                	jne    c001d430 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001d426:	b8 04 00 00 00       	mov    eax,0x4
c001d42b:	e9 db 00 00 00       	jmp    c001d50b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001d430:	83 ec 08             	sub    esp,0x8
c001d433:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d43a:	50                   	push   eax
c001d43b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001d442:	e8 b1 8a fe ff       	call   c0005ef8 <f_readdir>
c001d447:	83 c4 10             	add    esp,0x10
c001d44a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001d451:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d457:	83 ec 0c             	sub    esp,0xc
c001d45a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001d461:	83 c0 1a             	add    eax,0x1a
c001d464:	50                   	push   eax
c001d465:	e8 99 32 fe ff       	call   c0000703 <strlen>
c001d46a:	83 c4 10             	add    esp,0x10
c001d46d:	ba 00 00 00 00       	mov    edx,0x0
c001d472:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d476:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d47a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001d481:	0f b6 c0             	movzx  eax,al
c001d484:	83 e0 10             	and    eax,0x10
c001d487:	74 07                	je     c001d490 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001d489:	b8 02 00 00 00       	mov    eax,0x2
c001d48e:	eb 05                	jmp    c001d495 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001d490:	b8 01 00 00 00       	mov    eax,0x1
c001d495:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d499:	83 ec 08             	sub    esp,0x8
c001d49c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001d4a3:	83 c0 1a             	add    eax,0x1a
c001d4a6:	50                   	push   eax
c001d4a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001d4ab:	83 c0 10             	add    eax,0x10
c001d4ae:	50                   	push   eax
c001d4af:	e8 d1 32 fe ff       	call   c0000785 <strcpy>
c001d4b4:	83 c4 10             	add    esp,0x10
c001d4b7:	83 ec 04             	sub    esp,0x4
c001d4ba:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001d4c1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d4c5:	50                   	push   eax
c001d4c6:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001d4cd:	e8 de 31 fe ff       	call   c00006b0 <memcpy>
c001d4d2:	83 c4 10             	add    esp,0x10
c001d4d5:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001d4dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001d4e2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001d4e9:	84 c0                	test   al,al
c001d4eb:	75 07                	jne    c001d4f4 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001d4ed:	b8 07 00 00 00       	mov    eax,0x7
c001d4f2:	eb 17                	jmp    c001d50b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001d4f4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001d4fb:	85 c0                	test   eax,eax
c001d4fd:	75 07                	jne    c001d506 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001d4ff:	b8 00 00 00 00       	mov    eax,0x0
c001d504:	eb 05                	jmp    c001d50b <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001d506:	b8 01 00 00 00       	mov    eax,0x1
c001d50b:	81 c4 3c 02 00 00    	add    esp,0x23c
c001d511:	c3                   	ret    

c001d512 <FAT::read(void*, unsigned long, void*, int*)>:
c001d512:	83 ec 1c             	sub    esp,0x1c
c001d515:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d51a:	74 07                	je     c001d523 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001d51c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001d521:	75 07                	jne    c001d52a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001d523:	b8 04 00 00 00       	mov    eax,0x4
c001d528:	eb 3d                	jmp    c001d567 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001d52a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d52e:	50                   	push   eax
c001d52f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d533:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d537:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d53b:	e8 98 7c fe ff       	call   c00051d8 <f_read>
c001d540:	83 c4 10             	add    esp,0x10
c001d543:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d547:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d54b:	89 c2                	mov    edx,eax
c001d54d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d551:	89 10                	mov    DWORD PTR [eax],edx
c001d553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d557:	85 c0                	test   eax,eax
c001d559:	75 07                	jne    c001d562 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001d55b:	b8 00 00 00 00       	mov    eax,0x0
c001d560:	eb 05                	jmp    c001d567 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001d562:	b8 01 00 00 00       	mov    eax,0x1
c001d567:	83 c4 1c             	add    esp,0x1c
c001d56a:	c3                   	ret    
c001d56b:	90                   	nop

c001d56c <FAT::write(void*, unsigned long, void*, int*)>:
c001d56c:	83 ec 1c             	sub    esp,0x1c
c001d56f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d574:	74 07                	je     c001d57d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001d576:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001d57b:	75 07                	jne    c001d584 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001d57d:	b8 04 00 00 00       	mov    eax,0x4
c001d582:	eb 3d                	jmp    c001d5c1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001d584:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d588:	50                   	push   eax
c001d589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d58d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d591:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d595:	e8 be 7e fe ff       	call   c0005458 <f_write>
c001d59a:	83 c4 10             	add    esp,0x10
c001d59d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d5a5:	89 c2                	mov    edx,eax
c001d5a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5ab:	89 10                	mov    DWORD PTR [eax],edx
c001d5ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5b1:	85 c0                	test   eax,eax
c001d5b3:	75 07                	jne    c001d5bc <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001d5b5:	b8 00 00 00 00       	mov    eax,0x0
c001d5ba:	eb 05                	jmp    c001d5c1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001d5bc:	b8 01 00 00 00       	mov    eax,0x1
c001d5c1:	83 c4 1c             	add    esp,0x1c
c001d5c4:	c3                   	ret    
c001d5c5:	90                   	nop

c001d5c6 <FAT::close(void*)>:
c001d5c6:	83 ec 1c             	sub    esp,0x1c
c001d5c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d5ce:	75 07                	jne    c001d5d7 <FAT::close(void*)+0x11>
c001d5d0:	b8 04 00 00 00       	mov    eax,0x4
c001d5d5:	eb 36                	jmp    c001d60d <FAT::close(void*)+0x47>
c001d5d7:	83 ec 0c             	sub    esp,0xc
c001d5da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d5de:	e8 0b 83 fe ff       	call   c00058ee <f_close>
c001d5e3:	83 c4 10             	add    esp,0x10
c001d5e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5ea:	83 ec 0c             	sub    esp,0xc
c001d5ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d5f1:	e8 7a 1b ff ff       	call   c000f170 <free>
c001d5f6:	83 c4 10             	add    esp,0x10
c001d5f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5fd:	85 c0                	test   eax,eax
c001d5ff:	75 07                	jne    c001d608 <FAT::close(void*)+0x42>
c001d601:	b8 00 00 00 00       	mov    eax,0x0
c001d606:	eb 05                	jmp    c001d60d <FAT::close(void*)+0x47>
c001d608:	b8 01 00 00 00       	mov    eax,0x1
c001d60d:	83 c4 1c             	add    esp,0x1c
c001d610:	c3                   	ret    
c001d611:	90                   	nop

c001d612 <FAT::closeDir(void*)>:
c001d612:	83 ec 1c             	sub    esp,0x1c
c001d615:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d61a:	75 07                	jne    c001d623 <FAT::closeDir(void*)+0x11>
c001d61c:	b8 04 00 00 00       	mov    eax,0x4
c001d621:	eb 36                	jmp    c001d659 <FAT::closeDir(void*)+0x47>
c001d623:	83 ec 0c             	sub    esp,0xc
c001d626:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d62a:	e8 a7 88 fe ff       	call   c0005ed6 <f_closedir>
c001d62f:	83 c4 10             	add    esp,0x10
c001d632:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d636:	83 ec 0c             	sub    esp,0xc
c001d639:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d63d:	e8 2e 1b ff ff       	call   c000f170 <free>
c001d642:	83 c4 10             	add    esp,0x10
c001d645:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d649:	85 c0                	test   eax,eax
c001d64b:	75 07                	jne    c001d654 <FAT::closeDir(void*)+0x42>
c001d64d:	b8 00 00 00 00       	mov    eax,0x0
c001d652:	eb 05                	jmp    c001d659 <FAT::closeDir(void*)+0x47>
c001d654:	b8 01 00 00 00       	mov    eax,0x1
c001d659:	83 c4 1c             	add    esp,0x1c
c001d65c:	c3                   	ret    
c001d65d:	90                   	nop

c001d65e <FAT::seek(void*, unsigned long long)>:
c001d65e:	83 ec 2c             	sub    esp,0x2c
c001d661:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d669:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d66d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d671:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001d676:	75 07                	jne    c001d67f <FAT::seek(void*, unsigned long long)+0x21>
c001d678:	b8 04 00 00 00       	mov    eax,0x4
c001d67d:	eb 2f                	jmp    c001d6ae <FAT::seek(void*, unsigned long long)+0x50>
c001d67f:	83 ec 04             	sub    esp,0x4
c001d682:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d686:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d68a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d68e:	e8 8a 82 fe ff       	call   c000591d <f_lseek>
c001d693:	83 c4 10             	add    esp,0x10
c001d696:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d69a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d69e:	85 c0                	test   eax,eax
c001d6a0:	75 07                	jne    c001d6a9 <FAT::seek(void*, unsigned long long)+0x4b>
c001d6a2:	b8 00 00 00 00       	mov    eax,0x0
c001d6a7:	eb 05                	jmp    c001d6ae <FAT::seek(void*, unsigned long long)+0x50>
c001d6a9:	b8 01 00 00 00       	mov    eax,0x1
c001d6ae:	83 c4 2c             	add    esp,0x2c
c001d6b1:	c3                   	ret    

c001d6b2 <fatWrapperReadDisk>:
c001d6b2:	83 ec 1c             	sub    esp,0x1c
c001d6b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6b9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d6bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d6c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d6d1:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001d6d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d6e3:	52                   	push   edx
c001d6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6ec:	50                   	push   eax
c001d6ed:	e8 b4 81 ff ff       	call   c00158a6 <LogicalDisk::read(unsigned long long, int, void*)>
c001d6f2:	83 c4 20             	add    esp,0x20
c001d6f5:	83 c4 1c             	add    esp,0x1c
c001d6f8:	c3                   	ret    

c001d6f9 <fatWrapperWriteDisk>:
c001d6f9:	83 ec 1c             	sub    esp,0x1c
c001d6fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d700:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d708:	89 04 24             	mov    DWORD PTR [esp],eax
c001d70b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d70f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d713:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d718:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001d71f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d723:	83 ec 0c             	sub    esp,0xc
c001d726:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d72a:	52                   	push   edx
c001d72b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d72f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d733:	50                   	push   eax
c001d734:	e8 d9 81 ff ff       	call   c0015912 <LogicalDisk::write(unsigned long long, int, void*)>
c001d739:	83 c4 20             	add    esp,0x20
c001d73c:	83 c4 1c             	add    esp,0x1c
c001d73f:	c3                   	ret    

c001d740 <fatWrapperIoctl>:
c001d740:	53                   	push   ebx
c001d741:	83 ec 28             	sub    esp,0x28
c001d744:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d748:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d74c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001d750:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d754:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001d759:	75 31                	jne    c001d78c <fatWrapperIoctl+0x4c>
c001d75b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d75f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d763:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d768:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001d76f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d775:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d77b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d77f:	66 89 02             	mov    WORD PTR [edx],ax
c001d782:	b8 00 00 00 00       	mov    eax,0x0
c001d787:	e9 b2 00 00 00       	jmp    c001d83e <fatWrapperIoctl+0xfe>
c001d78c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001d791:	75 6a                	jne    c001d7fd <fatWrapperIoctl+0xbd>
c001d793:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d797:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d79b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d7a0:	8b 04 85 60 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65a0]
c001d7a7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001d7ad:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001d7b3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001d7b9:	89 c8                	mov    eax,ecx
c001d7bb:	89 da                	mov    edx,ebx
c001d7bd:	0f a4 c2 0a          	shld   edx,eax,0xa
c001d7c1:	c1 e0 0a             	shl    eax,0xa
c001d7c4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001d7c9:	8b 0c 8d 60 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd65a0]
c001d7d0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001d7d6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001d7dc:	89 cb                	mov    ebx,ecx
c001d7de:	c1 fb 1f             	sar    ebx,0x1f
c001d7e1:	53                   	push   ebx
c001d7e2:	51                   	push   ecx
c001d7e3:	52                   	push   edx
c001d7e4:	50                   	push   eax
c001d7e5:	e8 92 4c 00 00       	call   c002247c <__udivdi3>
c001d7ea:	83 c4 10             	add    esp,0x10
c001d7ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001d7f1:	89 01                	mov    DWORD PTR [ecx],eax
c001d7f3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001d7f6:	b8 00 00 00 00       	mov    eax,0x0
c001d7fb:	eb 41                	jmp    c001d83e <fatWrapperIoctl+0xfe>
c001d7fd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d802:	75 07                	jne    c001d80b <fatWrapperIoctl+0xcb>
c001d804:	b8 00 00 00 00       	mov    eax,0x0
c001d809:	eb 33                	jmp    c001d83e <fatWrapperIoctl+0xfe>
c001d80b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001d810:	75 19                	jne    c001d82b <fatWrapperIoctl+0xeb>
c001d812:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d816:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d81a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d81e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d824:	b8 00 00 00 00       	mov    eax,0x0
c001d829:	eb 13                	jmp    c001d83e <fatWrapperIoctl+0xfe>
c001d82b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001d830:	75 07                	jne    c001d839 <fatWrapperIoctl+0xf9>
c001d832:	b8 00 00 00 00       	mov    eax,0x0
c001d837:	eb 05                	jmp    c001d83e <fatWrapperIoctl+0xfe>
c001d839:	b8 04 00 00 00       	mov    eax,0x4
c001d83e:	83 c4 28             	add    esp,0x28
c001d841:	5b                   	pop    ebx
c001d842:	c3                   	ret    
c001d843:	90                   	nop

c001d844 <FAT::FAT()>:
c001d844:	83 ec 1c             	sub    esp,0x1c
c001d847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d84b:	83 ec 0c             	sub    esp,0xc
c001d84e:	50                   	push   eax
c001d84f:	e8 02 4d ff ff       	call   c0012556 <Filesystem::Filesystem()>
c001d854:	83 c4 10             	add    esp,0x10
c001d857:	ba 8c 7b 02 c0       	mov    edx,0xc0027b8c
c001d85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d860:	89 10                	mov    DWORD PTR [eax],edx
c001d862:	c7 05 e0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8e0,0x0
c001d86c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d874:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001d879:	7f 15                	jg     c001d890 <FAT::FAT()+0x4c>
c001d87b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d87f:	c7 04 85 00 a9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5700],0xffffffff
c001d88a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d88e:	eb e4                	jmp    c001d874 <FAT::FAT()+0x30>
c001d890:	90                   	nop
c001d891:	83 c4 1c             	add    esp,0x1c
c001d894:	c3                   	ret    
c001d895:	90                   	nop

c001d896 <FAT::fixFilepath(char*)>:
c001d896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d89a:	8a 00                	mov    al,BYTE PTR [eax]
c001d89c:	3c 40                	cmp    al,0x40
c001d89e:	7e 2c                	jle    c001d8cc <FAT::fixFilepath(char*)+0x36>
c001d8a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8a4:	8a 00                	mov    al,BYTE PTR [eax]
c001d8a6:	83 e8 41             	sub    eax,0x41
c001d8a9:	88 c2                	mov    dl,al
c001d8ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8af:	88 10                	mov    BYTE PTR [eax],dl
c001d8b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8b5:	8a 00                	mov    al,BYTE PTR [eax]
c001d8b7:	0f be c0             	movsx  eax,al
c001d8ba:	8b 04 85 00 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5700]
c001d8c1:	83 c0 30             	add    eax,0x30
c001d8c4:	88 c2                	mov    dl,al
c001d8c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d8ca:	88 10                	mov    BYTE PTR [eax],dl
c001d8cc:	90                   	nop
c001d8cd:	c3                   	ret    

c001d8ce <FAT::open(char const*, void**, FileOpenMode)>:
c001d8ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d8d4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001d8dc:	74 0a                	je     c001d8e8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001d8de:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001d8e6:	75 0a                	jne    c001d8f2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001d8e8:	b8 04 00 00 00       	mov    eax,0x4
c001d8ed:	e9 fd 00 00 00       	jmp    c001d9ef <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001d8f2:	83 ec 08             	sub    esp,0x8
c001d8f5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d8fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d900:	50                   	push   eax
c001d901:	e8 7f 2e fe ff       	call   c0000785 <strcpy>
c001d906:	83 c4 10             	add    esp,0x10
c001d909:	83 ec 08             	sub    esp,0x8
c001d90c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001d910:	50                   	push   eax
c001d911:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001d918:	e8 79 ff ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001d91d:	83 c4 10             	add    esp,0x10
c001d920:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001d928:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d92f:	83 e0 01             	and    eax,0x1
c001d932:	74 08                	je     c001d93c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001d934:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001d93c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d943:	83 e0 04             	and    eax,0x4
c001d946:	74 10                	je     c001d958 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001d948:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001d950:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001d958:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d95f:	83 e0 02             	and    eax,0x2
c001d962:	74 08                	je     c001d96c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001d964:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001d96c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d973:	83 e0 08             	and    eax,0x8
c001d976:	74 08                	je     c001d980 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001d978:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001d980:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001d987:	83 e0 10             	and    eax,0x10
c001d98a:	74 08                	je     c001d994 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001d98c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001d994:	83 ec 0c             	sub    esp,0xc
c001d997:	68 50 02 00 00       	push   0x250
c001d99c:	e8 bf 17 ff ff       	call   c000f160 <malloc>
c001d9a1:	83 c4 10             	add    esp,0x10
c001d9a4:	89 c2                	mov    edx,eax
c001d9a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d9ad:	89 10                	mov    DWORD PTR [eax],edx
c001d9af:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001d9b7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001d9be:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9c0:	83 ec 04             	sub    esp,0x4
c001d9c3:	52                   	push   edx
c001d9c4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001d9c8:	52                   	push   edx
c001d9c9:	50                   	push   eax
c001d9ca:	e8 cd 73 fe ff       	call   c0004d9c <f_open>
c001d9cf:	83 c4 10             	add    esp,0x10
c001d9d2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001d9d9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001d9e1:	74 07                	je     c001d9ea <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001d9e3:	b8 01 00 00 00       	mov    eax,0x1
c001d9e8:	eb 05                	jmp    c001d9ef <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001d9ea:	b8 00 00 00 00       	mov    eax,0x0
c001d9ef:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d9f5:	c3                   	ret    

c001d9f6 <FAT::openDir(char const*, void**)>:
c001d9f6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d9fc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001da04:	74 0a                	je     c001da10 <FAT::openDir(char const*, void**)+0x1a>
c001da06:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001da0e:	75 07                	jne    c001da17 <FAT::openDir(char const*, void**)+0x21>
c001da10:	b8 04 00 00 00       	mov    eax,0x4
c001da15:	eb 7d                	jmp    c001da94 <FAT::openDir(char const*, void**)+0x9e>
c001da17:	83 ec 08             	sub    esp,0x8
c001da1a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001da21:	8d 44 24 18          	lea    eax,[esp+0x18]
c001da25:	50                   	push   eax
c001da26:	e8 5a 2d fe ff       	call   c0000785 <strcpy>
c001da2b:	83 c4 10             	add    esp,0x10
c001da2e:	83 ec 08             	sub    esp,0x8
c001da31:	8d 44 24 14          	lea    eax,[esp+0x14]
c001da35:	50                   	push   eax
c001da36:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001da3d:	e8 54 fe ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001da42:	83 c4 10             	add    esp,0x10
c001da45:	83 ec 0c             	sub    esp,0xc
c001da48:	6a 4c                	push   0x4c
c001da4a:	e8 11 17 ff ff       	call   c000f160 <malloc>
c001da4f:	83 c4 10             	add    esp,0x10
c001da52:	89 c2                	mov    edx,eax
c001da54:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001da5b:	89 10                	mov    DWORD PTR [eax],edx
c001da5d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001da64:	8b 00                	mov    eax,DWORD PTR [eax]
c001da66:	83 ec 08             	sub    esp,0x8
c001da69:	8d 54 24 14          	lea    edx,[esp+0x14]
c001da6d:	52                   	push   edx
c001da6e:	50                   	push   eax
c001da6f:	e8 60 83 fe ff       	call   c0005dd4 <f_opendir>
c001da74:	83 c4 10             	add    esp,0x10
c001da77:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001da7e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001da86:	74 07                	je     c001da8f <FAT::openDir(char const*, void**)+0x99>
c001da88:	b8 01 00 00 00       	mov    eax,0x1
c001da8d:	eb 05                	jmp    c001da94 <FAT::openDir(char const*, void**)+0x9e>
c001da8f:	b8 00 00 00 00       	mov    eax,0x0
c001da94:	81 c4 1c 01 00 00    	add    esp,0x11c
c001da9a:	c3                   	ret    
c001da9b:	90                   	nop

c001da9c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001da9c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001daa2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001daaa:	75 0a                	jne    c001dab6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001daac:	b8 04 00 00 00       	mov    eax,0x4
c001dab1:	e9 c9 00 00 00       	jmp    c001db7f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001dab6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001dabe:	75 0a                	jne    c001daca <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001dac0:	b8 04 00 00 00       	mov    eax,0x4
c001dac5:	e9 b5 00 00 00       	jmp    c001db7f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001daca:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001dad2:	75 0a                	jne    c001dade <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001dad4:	b8 04 00 00 00       	mov    eax,0x4
c001dad9:	e9 a1 00 00 00       	jmp    c001db7f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001dade:	83 ec 08             	sub    esp,0x8
c001dae1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001dae8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001daef:	50                   	push   eax
c001daf0:	e8 90 2c fe ff       	call   c0000785 <strcpy>
c001daf5:	83 c4 10             	add    esp,0x10
c001daf8:	83 ec 08             	sub    esp,0x8
c001dafb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001db02:	50                   	push   eax
c001db03:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001db0a:	e8 87 fd ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001db0f:	83 c4 10             	add    esp,0x10
c001db12:	83 ec 08             	sub    esp,0x8
c001db15:	8d 44 24 08          	lea    eax,[esp+0x8]
c001db19:	50                   	push   eax
c001db1a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001db21:	50                   	push   eax
c001db22:	e8 6c 84 fe ff       	call   c0005f93 <f_stat>
c001db27:	83 c4 10             	add    esp,0x10
c001db2a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001db31:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001db38:	85 c0                	test   eax,eax
c001db3a:	74 07                	je     c001db43 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001db3c:	83 f8 04             	cmp    eax,0x4
c001db3f:	74 32                	je     c001db73 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001db41:	eb 37                	jmp    c001db7a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001db43:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001db47:	0f b6 c0             	movzx  eax,al
c001db4a:	83 e0 10             	and    eax,0x10
c001db4d:	0f 95 c2             	setne  dl
c001db50:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001db57:	88 10                	mov    BYTE PTR [eax],dl
c001db59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001db5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db60:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001db67:	89 01                	mov    DWORD PTR [ecx],eax
c001db69:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001db6c:	b8 00 00 00 00       	mov    eax,0x0
c001db71:	eb 0c                	jmp    c001db7f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001db73:	b8 02 00 00 00       	mov    eax,0x2
c001db78:	eb 05                	jmp    c001db7f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001db7a:	b8 01 00 00 00       	mov    eax,0x1
c001db7f:	81 c4 2c 02 00 00    	add    esp,0x22c
c001db85:	c3                   	ret    

c001db86 <FAT::unlink(char const*)>:
c001db86:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001db8c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001db94:	75 07                	jne    c001db9d <FAT::unlink(char const*)+0x17>
c001db96:	b8 04 00 00 00       	mov    eax,0x4
c001db9b:	eb 5c                	jmp    c001dbf9 <FAT::unlink(char const*)+0x73>
c001db9d:	83 ec 08             	sub    esp,0x8
c001dba0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001dba7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dbab:	50                   	push   eax
c001dbac:	e8 d4 2b fe ff       	call   c0000785 <strcpy>
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	83 ec 08             	sub    esp,0x8
c001dbb7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dbbb:	50                   	push   eax
c001dbbc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001dbc3:	e8 ce fc ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001dbc8:	83 c4 10             	add    esp,0x10
c001dbcb:	83 ec 0c             	sub    esp,0xc
c001dbce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dbd2:	50                   	push   eax
c001dbd3:	e8 0d 87 fe ff       	call   c00062e5 <f_unlink>
c001dbd8:	83 c4 10             	add    esp,0x10
c001dbdb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001dbe2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001dbe9:	85 c0                	test   eax,eax
c001dbeb:	75 07                	jne    c001dbf4 <FAT::unlink(char const*)+0x6e>
c001dbed:	b8 00 00 00 00       	mov    eax,0x0
c001dbf2:	eb 05                	jmp    c001dbf9 <FAT::unlink(char const*)+0x73>
c001dbf4:	b8 01 00 00 00       	mov    eax,0x1
c001dbf9:	81 c4 1c 01 00 00    	add    esp,0x11c
c001dbff:	c3                   	ret    

c001dc00 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001dc00:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001dc06:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001dc0d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001dc14:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001dc18:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001dc1c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001dc24:	75 0a                	jne    c001dc30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001dc26:	b8 04 00 00 00       	mov    eax,0x4
c001dc2b:	e9 1c 01 00 00       	jmp    c001dd4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001dc30:	83 ec 08             	sub    esp,0x8
c001dc33:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001dc3a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001dc3e:	50                   	push   eax
c001dc3f:	e8 41 2b fe ff       	call   c0000785 <strcpy>
c001dc44:	83 c4 10             	add    esp,0x10
c001dc47:	83 ec 08             	sub    esp,0x8
c001dc4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dc4e:	50                   	push   eax
c001dc4f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001dc56:	e8 3b fc ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001dc5b:	83 c4 10             	add    esp,0x10
c001dc5e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001dc66:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001dc6e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc73:	83 e0 01             	and    eax,0x1
c001dc76:	74 08                	je     c001dc80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001dc78:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001dc80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc85:	83 e0 02             	and    eax,0x2
c001dc88:	74 08                	je     c001dc92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001dc8a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001dc92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc97:	83 e0 04             	and    eax,0x4
c001dc9a:	74 08                	je     c001dca4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001dc9c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001dca4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dca9:	83 e0 08             	and    eax,0x8
c001dcac:	74 08                	je     c001dcb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001dcae:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001dcb6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcbb:	83 e0 01             	and    eax,0x1
c001dcbe:	74 08                	je     c001dcc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001dcc0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001dcc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dccd:	83 e0 02             	and    eax,0x2
c001dcd0:	74 08                	je     c001dcda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001dcd2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001dcda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcdf:	83 e0 04             	and    eax,0x4
c001dce2:	74 08                	je     c001dcec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001dce4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001dcec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcf1:	83 e0 08             	and    eax,0x8
c001dcf4:	74 08                	je     c001dcfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001dcf6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001dcfe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001dd05:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001dd0c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001dd14:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001dd1c:	83 ec 04             	sub    esp,0x4
c001dd1f:	52                   	push   edx
c001dd20:	50                   	push   eax
c001dd21:	8d 44 24 24          	lea    eax,[esp+0x24]
c001dd25:	50                   	push   eax
c001dd26:	e8 5c 8c fe ff       	call   c0006987 <f_chmod>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001dd35:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001dd3c:	85 c0                	test   eax,eax
c001dd3e:	75 07                	jne    c001dd47 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001dd40:	b8 00 00 00 00       	mov    eax,0x0
c001dd45:	eb 05                	jmp    c001dd4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001dd47:	b8 01 00 00 00       	mov    eax,0x1
c001dd4c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dd52:	c3                   	ret    
c001dd53:	90                   	nop

c001dd54 <FAT::rename(char const*, char const*)>:
c001dd54:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001dd5a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001dd62:	74 0a                	je     c001dd6e <FAT::rename(char const*, char const*)+0x1a>
c001dd64:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001dd6c:	75 0a                	jne    c001dd78 <FAT::rename(char const*, char const*)+0x24>
c001dd6e:	b8 04 00 00 00       	mov    eax,0x4
c001dd73:	e9 98 00 00 00       	jmp    c001de10 <FAT::rename(char const*, char const*)+0xbc>
c001dd78:	83 ec 08             	sub    esp,0x8
c001dd7b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001dd82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001dd89:	50                   	push   eax
c001dd8a:	e8 f6 29 fe ff       	call   c0000785 <strcpy>
c001dd8f:	83 c4 10             	add    esp,0x10
c001dd92:	83 ec 08             	sub    esp,0x8
c001dd95:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001dd9c:	50                   	push   eax
c001dd9d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001dda4:	e8 ed fa ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001dda9:	83 c4 10             	add    esp,0x10
c001ddac:	83 ec 08             	sub    esp,0x8
c001ddaf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ddb6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ddba:	50                   	push   eax
c001ddbb:	e8 c5 29 fe ff       	call   c0000785 <strcpy>
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	83 ec 08             	sub    esp,0x8
c001ddc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ddca:	50                   	push   eax
c001ddcb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ddd2:	e8 bf fa ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001ddd7:	83 c4 10             	add    esp,0x10
c001ddda:	83 ec 08             	sub    esp,0x8
c001dddd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dde1:	50                   	push   eax
c001dde2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001dde9:	50                   	push   eax
c001ddea:	e8 a5 88 fe ff       	call   c0006694 <f_rename>
c001ddef:	83 c4 10             	add    esp,0x10
c001ddf2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ddf9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001de00:	85 c0                	test   eax,eax
c001de02:	75 07                	jne    c001de0b <FAT::rename(char const*, char const*)+0xb7>
c001de04:	b8 00 00 00 00       	mov    eax,0x0
c001de09:	eb 05                	jmp    c001de10 <FAT::rename(char const*, char const*)+0xbc>
c001de0b:	b8 01 00 00 00       	mov    eax,0x1
c001de10:	81 c4 1c 02 00 00    	add    esp,0x21c
c001de16:	c3                   	ret    
c001de17:	90                   	nop

c001de18 <FAT::mkdir(char const*)>:
c001de18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001de1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001de26:	75 07                	jne    c001de2f <FAT::mkdir(char const*)+0x17>
c001de28:	b8 04 00 00 00       	mov    eax,0x4
c001de2d:	eb 5c                	jmp    c001de8b <FAT::mkdir(char const*)+0x73>
c001de2f:	83 ec 08             	sub    esp,0x8
c001de32:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001de39:	8d 44 24 18          	lea    eax,[esp+0x18]
c001de3d:	50                   	push   eax
c001de3e:	e8 42 29 fe ff       	call   c0000785 <strcpy>
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	83 ec 08             	sub    esp,0x8
c001de49:	8d 44 24 14          	lea    eax,[esp+0x14]
c001de4d:	50                   	push   eax
c001de4e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001de55:	e8 3c fa ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001de5a:	83 c4 10             	add    esp,0x10
c001de5d:	83 ec 0c             	sub    esp,0xc
c001de60:	8d 44 24 18          	lea    eax,[esp+0x18]
c001de64:	50                   	push   eax
c001de65:	e8 fe 85 fe ff       	call   c0006468 <f_mkdir>
c001de6a:	83 c4 10             	add    esp,0x10
c001de6d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001de74:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001de7b:	85 c0                	test   eax,eax
c001de7d:	75 07                	jne    c001de86 <FAT::mkdir(char const*)+0x6e>
c001de7f:	b8 00 00 00 00       	mov    eax,0x0
c001de84:	eb 05                	jmp    c001de8b <FAT::mkdir(char const*)+0x73>
c001de86:	b8 01 00 00 00       	mov    eax,0x1
c001de8b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001de91:	c3                   	ret    

c001de92 <FAT::exists(char const*)>:
c001de92:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001de98:	83 ec 08             	sub    esp,0x8
c001de9b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001dea2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001dea6:	50                   	push   eax
c001dea7:	e8 d9 28 fe ff       	call   c0000785 <strcpy>
c001deac:	83 c4 10             	add    esp,0x10
c001deaf:	83 ec 08             	sub    esp,0x8
c001deb2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001deb6:	50                   	push   eax
c001deb7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001debe:	e8 d3 f9 ff ff       	call   c001d896 <FAT::fixFilepath(char*)>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	83 ec 08             	sub    esp,0x8
c001dec9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ded0:	50                   	push   eax
c001ded1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ded5:	50                   	push   eax
c001ded6:	e8 b8 80 fe ff       	call   c0005f93 <f_stat>
c001dedb:	83 c4 10             	add    esp,0x10
c001dede:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001dee5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001deec:	85 c0                	test   eax,eax
c001deee:	75 04                	jne    c001def4 <FAT::exists(char const*)+0x62>
c001def0:	b0 01                	mov    al,0x1
c001def2:	eb 02                	jmp    c001def6 <FAT::exists(char const*)+0x64>
c001def4:	b0 00                	mov    al,0x0
c001def6:	81 c4 2c 02 00 00    	add    esp,0x22c
c001defc:	c3                   	ret    
c001defd:	90                   	nop

c001defe <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001defe:	b8 08 00 00 00       	mov    eax,0x8
c001df03:	c3                   	ret    

c001df04 <ISO9660::seek(void*, unsigned long long)>:
c001df04:	53                   	push   ebx
c001df05:	b8 04 00 00 00       	mov    eax,0x4
c001df0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001df0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df16:	85 d2                	test   edx,edx
c001df18:	74 17                	je     c001df31 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001df1a:	89 c8                	mov    eax,ecx
c001df1c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001df1f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001df22:	b8 01 00 00 00       	mov    eax,0x1
c001df27:	73 08                	jae    c001df31 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001df29:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001df2c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001df2f:	31 c0                	xor    eax,eax
c001df31:	5b                   	pop    ebx
c001df32:	c3                   	ret    
c001df33:	90                   	nop

c001df34 <ISO9660::tell(void*, unsigned long long*)>:
c001df34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df3c:	85 d2                	test   edx,edx
c001df3e:	74 12                	je     c001df52 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001df40:	85 c0                	test   eax,eax
c001df42:	74 0e                	je     c001df52 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001df44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001df47:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001df4a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001df4d:	89 10                	mov    DWORD PTR [eax],edx
c001df4f:	31 c0                	xor    eax,eax
c001df51:	c3                   	ret    
c001df52:	b8 04 00 00 00       	mov    eax,0x4
c001df57:	c3                   	ret    

c001df58 <ISO9660::getName()>:
c001df58:	b8 e8 7b 02 c0       	mov    eax,0xc0027be8
c001df5d:	c3                   	ret    

c001df5e <ISO9660::stat(void*, unsigned long long*)>:
c001df5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df66:	85 d2                	test   edx,edx
c001df68:	74 12                	je     c001df7c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001df6a:	85 c0                	test   eax,eax
c001df6c:	74 0e                	je     c001df7c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001df6e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001df71:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001df74:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001df77:	89 10                	mov    DWORD PTR [eax],edx
c001df79:	31 c0                	xor    eax,eax
c001df7b:	c3                   	ret    
c001df7c:	b8 04 00 00 00       	mov    eax,0x4
c001df81:	c3                   	ret    

c001df82 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001df82:	b8 01 00 00 00       	mov    eax,0x1
c001df87:	c3                   	ret    

c001df88 <ISO9660::unlink(char const*)>:
c001df88:	b8 01 00 00 00       	mov    eax,0x1
c001df8d:	c3                   	ret    

c001df8e <ISO9660::write(void*, unsigned long, void*, int*)>:
c001df8e:	b8 01 00 00 00       	mov    eax,0x1
c001df93:	c3                   	ret    

c001df94 <ISO9660::rename(char const*, char const*)>:
c001df94:	b8 01 00 00 00       	mov    eax,0x1
c001df99:	c3                   	ret    

c001df9a <ISO9660::mkdir(char const*)>:
c001df9a:	b8 01 00 00 00       	mov    eax,0x1
c001df9f:	c3                   	ret    

c001dfa0 <ISO9660::close(void*)>:
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	b8 04 00 00 00       	mov    eax,0x4
c001dfa8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfac:	85 d2                	test   edx,edx
c001dfae:	74 0e                	je     c001dfbe <ISO9660::close(void*)+0x1e>
c001dfb0:	83 ec 0c             	sub    esp,0xc
c001dfb3:	52                   	push   edx
c001dfb4:	e8 b7 11 ff ff       	call   c000f170 <free>
c001dfb9:	83 c4 10             	add    esp,0x10
c001dfbc:	31 c0                	xor    eax,eax
c001dfbe:	83 c4 0c             	add    esp,0xc
c001dfc1:	c3                   	ret    

c001dfc2 <ISO9660::closeDir(void*)>:
c001dfc2:	83 ec 0c             	sub    esp,0xc
c001dfc5:	b8 04 00 00 00       	mov    eax,0x4
c001dfca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfce:	85 d2                	test   edx,edx
c001dfd0:	74 0e                	je     c001dfe0 <ISO9660::closeDir(void*)+0x1e>
c001dfd2:	83 ec 0c             	sub    esp,0xc
c001dfd5:	52                   	push   edx
c001dfd6:	e8 95 11 ff ff       	call   c000f170 <free>
c001dfdb:	83 c4 10             	add    esp,0x10
c001dfde:	31 c0                	xor    eax,eax
c001dfe0:	83 c4 0c             	add    esp,0xc
c001dfe3:	c3                   	ret    

c001dfe4 <ISO9660::~ISO9660()>:
c001dfe4:	83 ec 0c             	sub    esp,0xc
c001dfe7:	ba 3c 7c 02 c0       	mov    edx,0xc0027c3c
c001dfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff0:	89 10                	mov    DWORD PTR [eax],edx
c001dff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dff6:	83 ec 0c             	sub    esp,0xc
c001dff9:	50                   	push   eax
c001dffa:	e8 7b 45 ff ff       	call   c001257a <Filesystem::~Filesystem()>
c001dfff:	83 c4 10             	add    esp,0x10
c001e002:	90                   	nop
c001e003:	83 c4 0c             	add    esp,0xc
c001e006:	c3                   	ret    
c001e007:	90                   	nop

c001e008 <ISO9660::~ISO9660()>:
c001e008:	83 ec 0c             	sub    esp,0xc
c001e00b:	83 ec 0c             	sub    esp,0xc
c001e00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e012:	e8 cd ff ff ff       	call   c001dfe4 <ISO9660::~ISO9660()>
c001e017:	83 c4 10             	add    esp,0x10
c001e01a:	83 ec 08             	sub    esp,0x8
c001e01d:	6a 08                	push   0x8
c001e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e023:	e8 49 41 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001e028:	83 c4 10             	add    esp,0x10
c001e02b:	83 c4 0c             	add    esp,0xc
c001e02e:	c3                   	ret    

c001e02f <__memmem(unsigned char*, int, unsigned char*, int)>:
c001e02f:	55                   	push   ebp
c001e030:	31 c9                	xor    ecx,ecx
c001e032:	57                   	push   edi
c001e033:	56                   	push   esi
c001e034:	53                   	push   ebx
c001e035:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001e039:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e03d:	89 eb                	mov    ebx,ebp
c001e03f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001e043:	39 ce                	cmp    esi,ecx
c001e045:	7e 17                	jle    c001e05e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001e047:	31 d2                	xor    edx,edx
c001e049:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001e04d:	7d 13                	jge    c001e062 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001e04f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e053:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001e056:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001e059:	75 0d                	jne    c001e068 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001e05b:	42                   	inc    edx
c001e05c:	eb eb                	jmp    c001e049 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001e05e:	31 c0                	xor    eax,eax
c001e060:	eb 0a                	jmp    c001e06c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001e062:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001e066:	eb 04                	jmp    c001e06c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001e068:	41                   	inc    ecx
c001e069:	43                   	inc    ebx
c001e06a:	eb d7                	jmp    c001e043 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001e06c:	5b                   	pop    ebx
c001e06d:	5e                   	pop    esi
c001e06e:	5f                   	pop    edi
c001e06f:	5d                   	pop    ebp
c001e070:	c3                   	ret    

c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001e071:	56                   	push   esi
c001e072:	53                   	push   ebx
c001e073:	52                   	push   edx
c001e074:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e078:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e07c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e080:	39 0d e0 a9 02 c0    	cmp    DWORD PTR ds:0xc002a9e0,ecx
c001e086:	75 08                	jne    c001e090 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001e088:	38 05 08 8a 02 c0    	cmp    BYTE PTR ds:0xc0028a08,al
c001e08e:	74 2b                	je     c001e0bb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001e090:	83 ec 0c             	sub    esp,0xc
c001e093:	a2 08 8a 02 c0       	mov    ds:0xc0028a08,al
c001e098:	68 00 aa 02 c0       	push   0xc002aa00
c001e09d:	0f be c0             	movsx  eax,al
c001e0a0:	6a 01                	push   0x1
c001e0a2:	89 0d e0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e0,ecx
c001e0a8:	31 db                	xor    ebx,ebx
c001e0aa:	53                   	push   ebx
c001e0ab:	51                   	push   ecx
c001e0ac:	ff 34 85 5c 99 02 c0 	push   DWORD PTR [eax*4-0x3ffd66a4]
c001e0b3:	e8 ee 77 ff ff       	call   c00158a6 <LogicalDisk::read(unsigned long long, int, void*)>
c001e0b8:	83 c4 20             	add    esp,0x20
c001e0bb:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001e0c3:	c7 44 24 14 00 aa 02 c0 	mov    DWORD PTR [esp+0x14],0xc002aa00
c001e0cb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001e0cf:	58                   	pop    eax
c001e0d0:	5b                   	pop    ebx
c001e0d1:	5e                   	pop    esi
c001e0d2:	e9 d9 25 fe ff       	jmp    c00006b0 <memcpy>
c001e0d7:	90                   	nop

c001e0d8 <ISO9660::tryMount(LogicalDisk*, int)>:
c001e0d8:	81 ec 10 08 00 00    	sub    esp,0x810
c001e0de:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001e0e5:	83 c0 41             	add    eax,0x41
c001e0e8:	0f be c0             	movsx  eax,al
c001e0eb:	50                   	push   eax
c001e0ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e0f0:	50                   	push   eax
c001e0f1:	6a 10                	push   0x10
c001e0f3:	e8 79 ff ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e0f8:	83 c4 10             	add    esp,0x10
c001e0fb:	31 c0                	xor    eax,eax
c001e0fd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001e102:	75 1d                	jne    c001e121 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001e104:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001e109:	75 16                	jne    c001e121 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001e10b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001e110:	75 0f                	jne    c001e121 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001e112:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001e117:	75 08                	jne    c001e121 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001e119:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001e11e:	0f 94 c0             	sete   al
c001e121:	81 c4 0c 08 00 00    	add    esp,0x80c
c001e127:	c3                   	ret    

c001e128 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001e128:	55                   	push   ebp
c001e129:	57                   	push   edi
c001e12a:	56                   	push   esi
c001e12b:	53                   	push   ebx
c001e12c:	81 ec 34 08 00 00    	sub    esp,0x834
c001e132:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001e139:	55                   	push   ebp
c001e13a:	68 03 7c 02 c0       	push   0xc0027c03
c001e13f:	e8 0d 41 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001e144:	83 c4 10             	add    esp,0x10
c001e147:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001e14f:	0f 84 06 02 00 00    	je     c001e35b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001e155:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001e15d:	0f 84 f8 01 00 00    	je     c001e35b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001e163:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001e16a:	b8 01 00 00 00       	mov    eax,0x1
c001e16f:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001e173:	0f 85 e7 01 00 00    	jne    c001e360 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001e179:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001e17c:	31 d2                	xor    edx,edx
c001e17e:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001e181:	89 e9                	mov    ecx,ebp
c001e183:	89 d3                	mov    ebx,edx
c001e185:	01 f1                	add    ecx,esi
c001e187:	11 fb                	adc    ebx,edi
c001e189:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e18d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001e191:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001e198:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001e19b:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001e19e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e1a2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e1a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e1aa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e1ae:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e1b2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001e1b6:	72 19                	jb     c001e1d1 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001e1b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001e1c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e1cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e1cf:	eb 13                	jmp    c001e1e4 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001e1d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e1d9:	29 f0                	sub    eax,esi
c001e1db:	19 fa                	sbb    edx,edi
c001e1dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001e1e0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e1e4:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001e1eb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e1ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1f0:	53                   	push   ebx
c001e1f1:	0f a4 c2 0b          	shld   edx,eax,0xb
c001e1f5:	c1 e0 0b             	shl    eax,0xb
c001e1f8:	01 c6                	add    esi,eax
c001e1fa:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001e201:	11 d7                	adc    edi,edx
c001e203:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001e207:	89 fa                	mov    edx,edi
c001e209:	50                   	push   eax
c001e20a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e20e:	50                   	push   eax
c001e20f:	89 f0                	mov    eax,esi
c001e211:	0f ac d0 0b          	shrd   eax,edx,0xb
c001e215:	50                   	push   eax
c001e216:	e8 56 fe ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e21b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001e222:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e226:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e229:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001e22d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001e233:	83 c4 10             	add    esp,0x10
c001e236:	b8 00 08 00 00       	mov    eax,0x800
c001e23b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001e23f:	29 d0                	sub    eax,edx
c001e241:	39 c1                	cmp    ecx,eax
c001e243:	83 db 00             	sbb    ebx,0x0
c001e246:	7d 19                	jge    c001e261 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001e248:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001e24d:	75 16                	jne    c001e265 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001e24f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001e256:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e25c:	e9 f6 00 00 00       	jmp    c001e357 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001e261:	89 c5                	mov    ebp,eax
c001e263:	eb 03                	jmp    c001e268 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001e265:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001e268:	51                   	push   ecx
c001e269:	55                   	push   ebp
c001e26a:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001e26e:	50                   	push   eax
c001e26f:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001e276:	e8 35 24 fe ff       	call   c00006b0 <memcpy>
c001e27b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e27f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e283:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001e28a:	01 e8                	add    eax,ebp
c001e28c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e290:	89 e8                	mov    eax,ebp
c001e292:	99                   	cdq    
c001e293:	01 ee                	add    esi,ebp
c001e295:	11 d7                	adc    edi,edx
c001e297:	29 e9                	sub    ecx,ebp
c001e299:	19 d3                	sbb    ebx,edx
c001e29b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e29f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	b8 ff 07 00 00       	mov    eax,0x7ff
c001e2ab:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001e2ae:	b8 00 00 00 00       	mov    eax,0x0
c001e2b3:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001e2b7:	7d 3f                	jge    c001e2f8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001e2b9:	52                   	push   edx
c001e2ba:	89 fa                	mov    edx,edi
c001e2bc:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001e2c3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001e2c7:	50                   	push   eax
c001e2c8:	89 f0                	mov    eax,esi
c001e2ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2ce:	0f ac d0 0b          	shrd   eax,edx,0xb
c001e2d2:	50                   	push   eax
c001e2d3:	e8 99 fd ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e2d8:	81 c6 00 08 00 00    	add    esi,0x800
c001e2de:	83 d7 00             	adc    edi,0x0
c001e2e1:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001e2e9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001e2f1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001e2f6:	eb ab                	jmp    c001e2a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001e2f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2fc:	0b 04 24             	or     eax,DWORD PTR [esp]
c001e2ff:	74 34                	je     c001e335 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001e301:	89 fa                	mov    edx,edi
c001e303:	50                   	push   eax
c001e304:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001e30b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001e30f:	50                   	push   eax
c001e310:	89 f0                	mov    eax,esi
c001e312:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001e316:	0f ac d0 0b          	shrd   eax,edx,0xb
c001e31a:	55                   	push   ebp
c001e31b:	50                   	push   eax
c001e31c:	e8 50 fd ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e321:	83 c4 0c             	add    esp,0xc
c001e324:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001e328:	55                   	push   ebp
c001e329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e32d:	e8 7e 23 fe ff       	call   c00006b0 <memcpy>
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001e33c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e340:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e344:	89 38                	mov    DWORD PTR [eax],edi
c001e346:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001e34d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e351:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001e354:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e357:	31 c0                	xor    eax,eax
c001e359:	eb 05                	jmp    c001e360 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001e35b:	b8 04 00 00 00       	mov    eax,0x4
c001e360:	81 c4 2c 08 00 00    	add    esp,0x82c
c001e366:	5b                   	pop    ebx
c001e367:	5e                   	pop    esi
c001e368:	5f                   	pop    edi
c001e369:	5d                   	pop    ebp
c001e36a:	c3                   	ret    
c001e36b:	90                   	nop

c001e36c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001e36c:	55                   	push   ebp
c001e36d:	57                   	push   edi
c001e36e:	56                   	push   esi
c001e36f:	53                   	push   ebx
c001e370:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001e376:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001e37d:	85 f6                	test   esi,esi
c001e37f:	0f 84 64 02 00 00    	je     c001e5e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001e385:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001e38d:	0f 84 56 02 00 00    	je     c001e5e9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001e393:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001e396:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001e399:	75 0a                	jne    c001e3a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001e39b:	b8 07 00 00 00       	mov    eax,0x7
c001e3a0:	e9 49 02 00 00       	jmp    c001e5ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001e3a5:	50                   	push   eax
c001e3a6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001e3aa:	50                   	push   eax
c001e3ab:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001e3b2:	53                   	push   ebx
c001e3b3:	8b 06                	mov    eax,DWORD PTR [esi]
c001e3b5:	c1 e0 0b             	shl    eax,0xb
c001e3b8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001e3bb:	c1 e8 0b             	shr    eax,0xb
c001e3be:	50                   	push   eax
c001e3bf:	e8 ad fc ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e3c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001e3c7:	83 c4 10             	add    esp,0x10
c001e3ca:	89 c1                	mov    ecx,eax
c001e3cc:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001e3cf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e3d5:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001e3d8:	84 db                	test   bl,bl
c001e3da:	0f 85 90 00 00 00    	jne    c001e470 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001e3e0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001e3e6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e3ec:	29 c7                	sub    edi,eax
c001e3ee:	89 fb                	mov    ebx,edi
c001e3f0:	c1 fb 1f             	sar    ebx,0x1f
c001e3f3:	01 f8                	add    eax,edi
c001e3f5:	11 da                	adc    edx,ebx
c001e3f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3ff:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001e402:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001e405:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001e408:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e40b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e40e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e412:	89 d8                	mov    eax,ebx
c001e414:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e417:	ba 00 00 00 00       	mov    edx,0x0
c001e41c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001e420:	b8 00 00 00 00       	mov    eax,0x0
c001e425:	73 0b                	jae    c001e432 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001e427:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e42a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e42e:	29 f8                	sub    eax,edi
c001e430:	19 da                	sbb    edx,ebx
c001e432:	89 d3                	mov    ebx,edx
c001e434:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001e437:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001e43a:	09 c3                	or     ebx,eax
c001e43c:	0f 84 59 ff ff ff    	je     c001e39b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001e442:	55                   	push   ebp
c001e443:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001e447:	50                   	push   eax
c001e448:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001e44f:	53                   	push   ebx
c001e450:	8b 06                	mov    eax,DWORD PTR [esi]
c001e452:	c1 e0 0b             	shl    eax,0xb
c001e455:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001e459:	c1 e8 0b             	shr    eax,0xb
c001e45c:	50                   	push   eax
c001e45d:	e8 0f fc ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e462:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001e465:	83 c4 10             	add    esp,0x10
c001e468:	25 ff 07 00 00       	and    eax,0x7ff
c001e46d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001e470:	57                   	push   edi
c001e471:	6a 28                	push   0x28
c001e473:	6a 00                	push   0x0
c001e475:	8d 44 24 24          	lea    eax,[esp+0x24]
c001e479:	50                   	push   eax
c001e47a:	e8 67 22 fe ff       	call   c00006e6 <memset>
c001e47f:	31 d2                	xor    edx,edx
c001e481:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001e484:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e48a:	89 f8                	mov    eax,edi
c001e48c:	83 c0 21             	add    eax,0x21
c001e48f:	83 d2 00             	adc    edx,0x0
c001e492:	89 c7                	mov    edi,eax
c001e494:	89 d5                	mov    ebp,edx
c001e496:	83 c4 10             	add    esp,0x10
c001e499:	31 c9                	xor    ecx,ecx
c001e49b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001e4a2:	83 f9 28             	cmp    ecx,0x28
c001e4a5:	88 04 24             	mov    BYTE PTR [esp],al
c001e4a8:	0f 94 c2             	sete   dl
c001e4ab:	88 d0                	mov    al,dl
c001e4ad:	ba ff 07 00 00       	mov    edx,0x7ff
c001e4b2:	39 fa                	cmp    edx,edi
c001e4b4:	ba 00 00 00 00       	mov    edx,0x0
c001e4b9:	19 ea                	sbb    edx,ebp
c001e4bb:	0f 92 c2             	setb   dl
c001e4be:	09 c2                	or     edx,eax
c001e4c0:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001e4c4:	0f 94 c0             	sete   al
c001e4c7:	08 d0                	or     al,dl
c001e4c9:	75 16                	jne    c001e4e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001e4cb:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001e4cf:	74 10                	je     c001e4e1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001e4d1:	8a 04 24             	mov    al,BYTE PTR [esp]
c001e4d4:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001e4d8:	41                   	inc    ecx
c001e4d9:	83 c7 01             	add    edi,0x1
c001e4dc:	83 d5 00             	adc    ebp,0x0
c001e4df:	eb ba                	jmp    c001e49b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001e4e1:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001e4e8:	83 ec 0c             	sub    esp,0xc
c001e4eb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e4ef:	57                   	push   edi
c001e4f0:	e8 0e 22 fe ff       	call   c0000703 <strlen>
c001e4f5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001e4fd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001e501:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001e508:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001e50b:	5a                   	pop    edx
c001e50c:	25 ff 07 00 00       	and    eax,0x7ff
c001e511:	01 c8                	add    eax,ecx
c001e513:	59                   	pop    ecx
c001e514:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001e51a:	83 e0 02             	and    eax,0x2
c001e51d:	3c 01                	cmp    al,0x1
c001e51f:	19 c0                	sbb    eax,eax
c001e521:	83 c0 02             	add    eax,0x2
c001e524:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001e528:	57                   	push   edi
c001e529:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001e52d:	50                   	push   eax
c001e52e:	e8 52 22 fe ff       	call   c0000785 <strcpy>
c001e533:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001e537:	83 c4 10             	add    esp,0x10
c001e53a:	84 c0                	test   al,al
c001e53c:	75 21                	jne    c001e55f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001e53e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001e546:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001e54e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001e556:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001e55d:	eb 28                	jmp    c001e587 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001e55f:	fe c8                	dec    al
c001e561:	75 24                	jne    c001e587 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001e563:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001e56b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001e573:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001e57b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001e582:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001e587:	0f b6 fb             	movzx  edi,bl
c001e58a:	31 db                	xor    ebx,ebx
c001e58c:	50                   	push   eax
c001e58d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001e594:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e598:	50                   	push   eax
c001e599:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001e5a0:	e8 0b 21 fe ff       	call   c00006b0 <memcpy>
c001e5a5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001e5ac:	89 f9                	mov    ecx,edi
c001e5ae:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e5b4:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001e5b7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001e5ba:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001e5bd:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001e5c0:	83 c4 10             	add    esp,0x10
c001e5c3:	39 c7                	cmp    edi,eax
c001e5c5:	89 df                	mov    edi,ebx
c001e5c7:	19 d7                	sbb    edi,edx
c001e5c9:	72 10                	jb     c001e5db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001e5cb:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001e5d2:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001e5d9:	eb 0a                	jmp    c001e5e5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001e5db:	29 c8                	sub    eax,ecx
c001e5dd:	19 da                	sbb    edx,ebx
c001e5df:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001e5e2:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001e5e5:	31 c0                	xor    eax,eax
c001e5e7:	eb 05                	jmp    c001e5ee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001e5e9:	b8 04 00 00 00       	mov    eax,0x4
c001e5ee:	81 c4 5c 09 00 00    	add    esp,0x95c
c001e5f4:	5b                   	pop    ebx
c001e5f5:	5e                   	pop    esi
c001e5f6:	5f                   	pop    edi
c001e5f7:	5d                   	pop    ebp
c001e5f8:	c3                   	ret    

c001e5f9 <readRoot(unsigned int*, unsigned int*, char)>:
c001e5f9:	81 ec 40 08 00 00    	sub    esp,0x840
c001e5ff:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001e607:	50                   	push   eax
c001e608:	8d 44 24 38          	lea    eax,[esp+0x38]
c001e60c:	50                   	push   eax
c001e60d:	6a 10                	push   0x10
c001e60f:	e8 5d fa ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e614:	83 c4 0c             	add    esp,0xc
c001e617:	6a 22                	push   0x22
c001e619:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001e620:	50                   	push   eax
c001e621:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e625:	50                   	push   eax
c001e626:	e8 85 20 fe ff       	call   c00006b0 <memcpy>
c001e62b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001e632:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e636:	89 10                	mov    DWORD PTR [eax],edx
c001e638:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001e63f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e643:	89 10                	mov    DWORD PTR [eax],edx
c001e645:	b0 01                	mov    al,0x1
c001e647:	81 c4 4c 08 00 00    	add    esp,0x84c
c001e64d:	c3                   	ret    

c001e64e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001e64e:	55                   	push   ebp
c001e64f:	57                   	push   edi
c001e650:	56                   	push   esi
c001e651:	53                   	push   ebx
c001e652:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e658:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001e65f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001e666:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e66a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001e66e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e672:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e676:	75 03                	jne    c001e67b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001e678:	83 c3 02             	add    ebx,0x2
c001e67b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001e67e:	75 03                	jne    c001e683 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001e680:	43                   	inc    ebx
c001e681:	eb f8                	jmp    c001e67b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001e683:	51                   	push   ecx
c001e684:	68 00 01 00 00       	push   0x100
c001e689:	6a 00                	push   0x0
c001e68b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e68f:	50                   	push   eax
c001e690:	e8 51 20 fe ff       	call   c00006e6 <memset>
c001e695:	83 c4 10             	add    esp,0x10
c001e698:	31 d2                	xor    edx,edx
c001e69a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001e69d:	84 c0                	test   al,al
c001e69f:	74 21                	je     c001e6c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001e6a1:	3c 2f                	cmp    al,0x2f
c001e6a3:	75 0b                	jne    c001e6b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001e6a5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001e6a9:	bd 01 00 00 00       	mov    ebp,0x1
c001e6ae:	eb 14                	jmp    c001e6c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001e6b0:	8d 48 9f             	lea    ecx,[eax-0x61]
c001e6b3:	80 f9 19             	cmp    cl,0x19
c001e6b6:	77 03                	ja     c001e6bb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001e6b8:	83 e8 20             	sub    eax,0x20
c001e6bb:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001e6bf:	42                   	inc    edx
c001e6c0:	eb d8                	jmp    c001e69a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001e6c2:	31 ed                	xor    ebp,ebp
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001e6ce:	e8 8d 0a ff ff       	call   c000f160 <malloc>
c001e6d3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001e6da:	89 c6                	mov    esi,eax
c001e6dc:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001e6e2:	c1 ef 0b             	shr    edi,0xb
c001e6e5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001e6ec:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001e6f0:	83 c4 10             	add    esp,0x10
c001e6f3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001e6f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e6fc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001e703:	74 28                	je     c001e72d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001e705:	52                   	push   edx
c001e706:	57                   	push   edi
c001e707:	50                   	push   eax
c001e708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e70c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001e713:	e8 59 f9 ff ff       	call   c001e071 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001e718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e71c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001e723:	05 00 08 00 00       	add    eax,0x800
c001e728:	83 c4 10             	add    esp,0x10
c001e72b:	eb cb                	jmp    c001e6f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001e72d:	83 ec 0c             	sub    esp,0xc
c001e730:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e734:	57                   	push   edi
c001e735:	e8 c9 1f fe ff       	call   c0000703 <strlen>
c001e73a:	50                   	push   eax
c001e73b:	57                   	push   edi
c001e73c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001e743:	56                   	push   esi
c001e744:	e8 e6 f8 ff ff       	call   c001e02f <__memmem(unsigned char*, int, unsigned char*, int)>
c001e749:	83 c4 20             	add    esp,0x20
c001e74c:	85 c0                	test   eax,eax
c001e74e:	75 13                	jne    c001e763 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001e750:	83 ec 0c             	sub    esp,0xc
c001e753:	56                   	push   esi
c001e754:	e8 17 0a ff ff       	call   c000f170 <free>
c001e759:	83 c4 10             	add    esp,0x10
c001e75c:	31 c0                	xor    eax,eax
c001e75e:	e9 b3 00 00 00       	jmp    c001e816 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001e763:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001e767:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001e76b:	c1 e7 08             	shl    edi,0x8
c001e76e:	c1 e2 10             	shl    edx,0x10
c001e771:	09 d7                	or     edi,edx
c001e773:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001e777:	09 d7                	or     edi,edx
c001e779:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001e77d:	c1 e2 18             	shl    edx,0x18
c001e780:	09 d7                	or     edi,edx
c001e782:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001e786:	89 d1                	mov    ecx,edx
c001e788:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001e78c:	c1 e1 08             	shl    ecx,0x8
c001e78f:	c1 e2 10             	shl    edx,0x10
c001e792:	09 ca                	or     edx,ecx
c001e794:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001e798:	09 ca                	or     edx,ecx
c001e79a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001e79e:	c1 e1 18             	shl    ecx,0x18
c001e7a1:	09 ca                	or     edx,ecx
c001e7a3:	89 e9                	mov    ecx,ebp
c001e7a5:	84 c9                	test   cl,cl
c001e7a7:	74 3c                	je     c001e7e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001e7a9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7ad:	83 ec 0c             	sub    esp,0xc
c001e7b0:	56                   	push   esi
c001e7b1:	e8 ba 09 ff ff       	call   c000f170 <free>
c001e7b6:	83 c4 0c             	add    esp,0xc
c001e7b9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001e7c0:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001e7c5:	50                   	push   eax
c001e7c6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001e7cd:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001e7d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e7d8:	52                   	push   edx
c001e7d9:	57                   	push   edi
c001e7da:	53                   	push   ebx
c001e7db:	e8 6e fe ff ff       	call   c001e64e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001e7e0:	83 c4 20             	add    esp,0x20
c001e7e3:	eb 31                	jmp    c001e816 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001e7e5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001e7e8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001e7ef:	d0 e8                	shr    al,1
c001e7f1:	89 3b                	mov    DWORD PTR [ebx],edi
c001e7f3:	83 e0 01             	and    eax,0x1
c001e7f6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001e7fd:	83 ec 0c             	sub    esp,0xc
c001e800:	89 13                	mov    DWORD PTR [ebx],edx
c001e802:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001e809:	89 03                	mov    DWORD PTR [ebx],eax
c001e80b:	56                   	push   esi
c001e80c:	e8 5f 09 ff ff       	call   c000f170 <free>
c001e811:	83 c4 10             	add    esp,0x10
c001e814:	b0 01                	mov    al,0x1
c001e816:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e81c:	5b                   	pop    ebx
c001e81d:	5e                   	pop    esi
c001e81e:	5f                   	pop    edi
c001e81f:	5d                   	pop    ebp
c001e820:	c3                   	ret    

c001e821 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001e821:	55                   	push   ebp
c001e822:	57                   	push   edi
c001e823:	56                   	push   esi
c001e824:	53                   	push   ebx
c001e825:	83 ec 20             	sub    esp,0x20
c001e828:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e82c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e830:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e834:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e83c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e844:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001e849:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001e84f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001e855:	57                   	push   edi
c001e856:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e85a:	50                   	push   eax
c001e85b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e85f:	50                   	push   eax
c001e860:	e8 94 fd ff ff       	call   c001e5f9 <readRoot(unsigned int*, unsigned int*, char)>
c001e865:	5a                   	pop    edx
c001e866:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e86a:	e8 94 1e fe ff       	call   c0000703 <strlen>
c001e86f:	83 c4 10             	add    esp,0x10
c001e872:	83 f8 03             	cmp    eax,0x3
c001e875:	77 17                	ja     c001e88e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001e877:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e87b:	89 03                	mov    DWORD PTR [ebx],eax
c001e87d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e881:	89 06                	mov    DWORD PTR [esi],eax
c001e883:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001e88a:	b0 01                	mov    al,0x1
c001e88c:	eb 19                	jmp    c001e8a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001e88e:	50                   	push   eax
c001e88f:	55                   	push   ebp
c001e890:	57                   	push   edi
c001e891:	56                   	push   esi
c001e892:	53                   	push   ebx
c001e893:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e897:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e89b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e89f:	e8 aa fd ff ff       	call   c001e64e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001e8a4:	83 c4 20             	add    esp,0x20
c001e8a7:	83 c4 1c             	add    esp,0x1c
c001e8aa:	5b                   	pop    ebx
c001e8ab:	5e                   	pop    esi
c001e8ac:	5f                   	pop    edi
c001e8ad:	5d                   	pop    ebp
c001e8ae:	c3                   	ret    
c001e8af:	90                   	nop

c001e8b0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001e8b0:	57                   	push   edi
c001e8b1:	56                   	push   esi
c001e8b2:	53                   	push   ebx
c001e8b3:	83 ec 10             	sub    esp,0x10
c001e8b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001e8ba:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001e8be:	85 ff                	test   edi,edi
c001e8c0:	74 7b                	je     c001e93d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001e8c2:	85 f6                	test   esi,esi
c001e8c4:	74 77                	je     c001e93d <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001e8c6:	83 ec 0c             	sub    esp,0xc
c001e8c9:	6a 1c                	push   0x1c
c001e8cb:	e8 90 08 ff ff       	call   c000f160 <malloc>
c001e8d0:	89 07                	mov    DWORD PTR [edi],eax
c001e8d2:	89 c3                	mov    ebx,eax
c001e8d4:	58                   	pop    eax
c001e8d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e8d9:	50                   	push   eax
c001e8da:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001e8dd:	50                   	push   eax
c001e8de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e8e2:	50                   	push   eax
c001e8e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e8e7:	50                   	push   eax
c001e8e8:	56                   	push   esi
c001e8e9:	e8 33 ff ff ff       	call   c001e821 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001e8ee:	83 c4 20             	add    esp,0x20
c001e8f1:	84 c0                	test   al,al
c001e8f3:	74 07                	je     c001e8fc <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001e8f5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e8fa:	74 0b                	je     c001e907 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001e8fc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001e900:	b8 01 00 00 00       	mov    eax,0x1
c001e905:	eb 3b                	jmp    c001e942 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001e907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001e90f:	89 03                	mov    DWORD PTR [ebx],eax
c001e911:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001e918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e91c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001e923:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e92a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e92d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e934:	8a 06                	mov    al,BYTE PTR [esi]
c001e936:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001e939:	31 c0                	xor    eax,eax
c001e93b:	eb 05                	jmp    c001e942 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001e93d:	b8 04 00 00 00       	mov    eax,0x4
c001e942:	83 c4 10             	add    esp,0x10
c001e945:	5b                   	pop    ebx
c001e946:	5e                   	pop    esi
c001e947:	5f                   	pop    edi
c001e948:	c3                   	ret    
c001e949:	90                   	nop

c001e94a <ISO9660::exists(char const*)>:
c001e94a:	83 ec 28             	sub    esp,0x28
c001e94d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e951:	8d 54 24 18          	lea    edx,[esp+0x18]
c001e955:	52                   	push   edx
c001e956:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001e959:	52                   	push   edx
c001e95a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001e95e:	52                   	push   edx
c001e95f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001e963:	52                   	push   edx
c001e964:	50                   	push   eax
c001e965:	e8 b7 fe ff ff       	call   c001e821 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001e96a:	83 c4 3c             	add    esp,0x3c
c001e96d:	c3                   	ret    

c001e96e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001e96e:	56                   	push   esi
c001e96f:	53                   	push   ebx
c001e970:	83 ec 14             	sub    esp,0x14
c001e973:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001e977:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e97b:	85 db                	test   ebx,ebx
c001e97d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e981:	0f 94 c2             	sete   dl
c001e984:	85 f6                	test   esi,esi
c001e986:	0f 94 c0             	sete   al
c001e989:	08 c2                	or     dl,al
c001e98b:	75 68                	jne    c001e9f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001e98d:	85 c9                	test   ecx,ecx
c001e98f:	74 64                	je     c001e9f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001e991:	83 ec 0c             	sub    esp,0xc
c001e994:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e997:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e99b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001e9a1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e9a8:	50                   	push   eax
c001e9a9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001e9ac:	50                   	push   eax
c001e9ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e9b1:	50                   	push   eax
c001e9b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e9b6:	50                   	push   eax
c001e9b7:	51                   	push   ecx
c001e9b8:	e8 64 fe ff ff       	call   c001e821 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001e9bd:	83 c4 20             	add    esp,0x20
c001e9c0:	ba 01 00 00 00       	mov    edx,0x1
c001e9c5:	84 c0                	test   al,al
c001e9c7:	74 31                	je     c001e9fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001e9c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e9d4:	89 03                	mov    DWORD PTR [ebx],eax
c001e9d6:	ba 00 00 00 00       	mov    edx,0x0
c001e9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9df:	85 c0                	test   eax,eax
c001e9e1:	0f 95 06             	setne  BYTE PTR [esi]
c001e9e4:	74 14                	je     c001e9fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001e9e6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001e9ec:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e9f3:	eb 05                	jmp    c001e9fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001e9f5:	ba 04 00 00 00       	mov    edx,0x4
c001e9fa:	83 c4 14             	add    esp,0x14
c001e9fd:	89 d0                	mov    eax,edx
c001e9ff:	5b                   	pop    ebx
c001ea00:	5e                   	pop    esi
c001ea01:	c3                   	ret    

c001ea02 <ISO9660::openDir(char const*, void**)>:
c001ea02:	57                   	push   edi
c001ea03:	56                   	push   esi
c001ea04:	53                   	push   ebx
c001ea05:	83 ec 10             	sub    esp,0x10
c001ea08:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ea0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ea10:	85 ff                	test   edi,edi
c001ea12:	0f 84 95 00 00 00    	je     c001eaad <ISO9660::openDir(char const*, void**)+0xab>
c001ea18:	85 f6                	test   esi,esi
c001ea1a:	0f 84 8d 00 00 00    	je     c001eaad <ISO9660::openDir(char const*, void**)+0xab>
c001ea20:	83 ec 0c             	sub    esp,0xc
c001ea23:	6a 1c                	push   0x1c
c001ea25:	e8 36 07 ff ff       	call   c000f160 <malloc>
c001ea2a:	89 07                	mov    DWORD PTR [edi],eax
c001ea2c:	89 c3                	mov    ebx,eax
c001ea2e:	59                   	pop    ecx
c001ea2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea33:	50                   	push   eax
c001ea34:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ea37:	50                   	push   eax
c001ea38:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ea3c:	50                   	push   eax
c001ea3d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ea41:	50                   	push   eax
c001ea42:	56                   	push   esi
c001ea43:	e8 d9 fd ff ff       	call   c001e821 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ea48:	83 c4 20             	add    esp,0x20
c001ea4b:	84 c0                	test   al,al
c001ea4d:	74 07                	je     c001ea56 <ISO9660::openDir(char const*, void**)+0x54>
c001ea4f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ea54:	75 21                	jne    c001ea77 <ISO9660::openDir(char const*, void**)+0x75>
c001ea56:	0f b6 c0             	movzx  eax,al
c001ea59:	52                   	push   edx
c001ea5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea5e:	50                   	push   eax
c001ea5f:	68 16 7c 02 c0       	push   0xc0027c16
c001ea64:	e8 e8 37 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001ea69:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ea6d:	83 c4 10             	add    esp,0x10
c001ea70:	b8 01 00 00 00       	mov    eax,0x1
c001ea75:	eb 3b                	jmp    c001eab2 <ISO9660::openDir(char const*, void**)+0xb0>
c001ea77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea7b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ea7f:	89 03                	mov    DWORD PTR [ebx],eax
c001ea81:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ea88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ea93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ea9a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ea9d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001eaa4:	8a 06                	mov    al,BYTE PTR [esi]
c001eaa6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001eaa9:	31 c0                	xor    eax,eax
c001eaab:	eb 05                	jmp    c001eab2 <ISO9660::openDir(char const*, void**)+0xb0>
c001eaad:	b8 04 00 00 00       	mov    eax,0x4
c001eab2:	83 c4 10             	add    esp,0x10
c001eab5:	5b                   	pop    ebx
c001eab6:	5e                   	pop    esi
c001eab7:	5f                   	pop    edi
c001eab8:	c3                   	ret    
c001eab9:	90                   	nop

c001eaba <ISO9660::ISO9660()>:
c001eaba:	83 ec 0c             	sub    esp,0xc
c001eabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac1:	83 ec 0c             	sub    esp,0xc
c001eac4:	50                   	push   eax
c001eac5:	e8 8c 3a ff ff       	call   c0012556 <Filesystem::Filesystem()>
c001eaca:	83 c4 10             	add    esp,0x10
c001eacd:	ba 3c 7c 02 c0       	mov    edx,0xc0027c3c
c001ead2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead6:	89 10                	mov    DWORD PTR [eax],edx
c001ead8:	90                   	nop
c001ead9:	83 c4 0c             	add    esp,0xc
c001eadc:	c3                   	ret    
c001eadd:	90                   	nop

c001eade <SoundChannel::~SoundChannel()>:
c001eade:	83 ec 0c             	sub    esp,0xc
c001eae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	50                   	push   eax
c001eaec:	e8 7f 06 ff ff       	call   c000f170 <free>
c001eaf1:	83 c4 10             	add    esp,0x10
c001eaf4:	90                   	nop
c001eaf5:	83 c4 0c             	add    esp,0xc
c001eaf8:	c3                   	ret    
c001eaf9:	90                   	nop

c001eafa <SoundChannel::setSpeed(float)>:
c001eafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eafe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb02:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001eb05:	c3                   	ret    

c001eb06 <SoundChannel::getSpeed()>:
c001eb06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb0a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001eb0d:	c3                   	ret    

c001eb0e <SoundChannel::setVolume(int)>:
c001eb0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eb12:	83 f8 64             	cmp    eax,0x64
c001eb15:	7e 05                	jle    c001eb1c <SoundChannel::setVolume(int)+0xe>
c001eb17:	b8 64 00 00 00       	mov    eax,0x64
c001eb1c:	85 c0                	test   eax,eax
c001eb1e:	79 02                	jns    c001eb22 <SoundChannel::setVolume(int)+0x14>
c001eb20:	31 c0                	xor    eax,eax
c001eb22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb26:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001eb29:	c3                   	ret    

c001eb2a <SoundChannel::getVolume()>:
c001eb2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb2e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001eb31:	c3                   	ret    

c001eb32 <SoundChannel::pause()>:
c001eb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb36:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001eb3a:	c3                   	ret    
c001eb3b:	90                   	nop

c001eb3c <SoundChannel::SoundChannel(int, int, int, int)>:
c001eb3c:	83 ec 1c             	sub    esp,0x1c
c001eb3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001eb43:	e8 ea ff ff ff       	call   c001eb32 <SoundChannel::pause()>
c001eb48:	83 c4 04             	add    esp,0x4
c001eb4b:	6a 50                	push   0x50
c001eb4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001eb51:	e8 b8 ff ff ff       	call   c001eb0e <SoundChannel::setVolume(int)>
c001eb56:	83 c4 08             	add    esp,0x8
c001eb59:	a1 b4 7c 02 c0       	mov    eax,ds:0xc0027cb4
c001eb5e:	50                   	push   eax
c001eb5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001eb63:	e8 92 ff ff ff       	call   c001eafa <SoundChannel::setSpeed(float)>
c001eb68:	83 c4 08             	add    esp,0x8
c001eb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb73:	89 10                	mov    DWORD PTR [eax],edx
c001eb75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001eb7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb84:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001eb88:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb8b:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001eb90:	75 23                	jne    c001ebb5 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001eb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb96:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb9f:	0f af c2             	imul   eax,edx
c001eba2:	85 c0                	test   eax,eax
c001eba4:	79 03                	jns    c001eba9 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001eba6:	83 c0 03             	add    eax,0x3
c001eba9:	c1 f8 02             	sar    eax,0x2
c001ebac:	05 a0 0f 00 00       	add    eax,0xfa0
c001ebb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ebb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ebbd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ebc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebc4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ebcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebcf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ebd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebda:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ebdd:	c1 e0 02             	shl    eax,0x2
c001ebe0:	83 ec 0c             	sub    esp,0xc
c001ebe3:	50                   	push   eax
c001ebe4:	e8 77 05 ff ff       	call   c000f160 <malloc>
c001ebe9:	83 c4 10             	add    esp,0x10
c001ebec:	89 c2                	mov    edx,eax
c001ebee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebf2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ebf5:	83 ec 04             	sub    esp,0x4
c001ebf8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ebfc:	50                   	push   eax
c001ebfd:	6a 01                	push   0x1
c001ebff:	6a 04                	push   0x4
c001ec01:	e8 82 9d fe ff       	call   c0008988 <src_new>
c001ec06:	83 c4 10             	add    esp,0x10
c001ec09:	89 c2                	mov    edx,eax
c001ec0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec0f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ec12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec16:	85 c0                	test   eax,eax
c001ec18:	74 10                	je     c001ec2a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001ec1a:	83 ec 0c             	sub    esp,0xc
c001ec1d:	68 98 7c 02 c0       	push   0xc0027c98
c001ec22:	e8 e7 9d ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001ec27:	83 c4 10             	add    esp,0x10
c001ec2a:	90                   	nop
c001ec2b:	83 c4 1c             	add    esp,0x1c
c001ec2e:	c3                   	ret    
c001ec2f:	90                   	nop

c001ec30 <SoundChannel::play()>:
c001ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec34:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001ec38:	c3                   	ret    
c001ec39:	90                   	nop

c001ec3a <SoundChannel::paused()>:
c001ec3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec3e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001ec41:	c3                   	ret    

c001ec42 <SoundChannel::getSampleRate()>:
c001ec42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec46:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec48:	c3                   	ret    
c001ec49:	90                   	nop

c001ec4a <SoundChannel::getBits()>:
c001ec4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec51:	c3                   	ret    

c001ec52 <SoundChannel::getBufferUsed()>:
c001ec52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec56:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ec59:	c3                   	ret    

c001ec5a <SoundChannel::getBufferSize()>:
c001ec5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec5e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ec61:	c3                   	ret    

c001ec62 <SoundChannel::unbuffer(float*, int, int)>:
c001ec62:	56                   	push   esi
c001ec63:	53                   	push   ebx
c001ec64:	83 ec 40             	sub    esp,0x40
c001ec67:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ec6b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ec72:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ec75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ec79:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ec7d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ec81:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ec85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ec89:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ec8d:	e8 15 41 00 00       	call   c0022da7 <__floatsisf>
c001ec92:	5a                   	pop    edx
c001ec93:	89 c6                	mov    esi,eax
c001ec95:	ff 33                	push   DWORD PTR [ebx]
c001ec97:	e8 0b 41 00 00       	call   c0022da7 <__floatsisf>
c001ec9c:	59                   	pop    ecx
c001ec9d:	5a                   	pop    edx
c001ec9e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001eca1:	50                   	push   eax
c001eca2:	e8 12 3d 00 00       	call   c00229b9 <__mulsf3>
c001eca7:	59                   	pop    ecx
c001eca8:	5a                   	pop    edx
c001eca9:	50                   	push   eax
c001ecaa:	56                   	push   esi
c001ecab:	e8 cc 3e 00 00       	call   c0022b7c <__divsf3>
c001ecb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecb3:	e8 bf 53 00 00       	call   c0024077 <__extendsfdf2>
c001ecb8:	59                   	pop    ecx
c001ecb9:	5e                   	pop    esi
c001ecba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ecbe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ecc2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ecca:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecce:	50                   	push   eax
c001eccf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ecd2:	e8 2b 99 fe ff       	call   c0008602 <src_process>
c001ecd7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ecdb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ecde:	83 c4 0c             	add    esp,0xc
c001ece1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ece4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ece7:	29 d0                	sub    eax,edx
c001ece9:	c1 e0 02             	shl    eax,0x2
c001ecec:	50                   	push   eax
c001eced:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ecf0:	50                   	push   eax
c001ecf1:	51                   	push   ecx
c001ecf2:	e8 81 19 fe ff       	call   c0000678 <memmove>
c001ecf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ecfb:	83 c4 44             	add    esp,0x44
c001ecfe:	5b                   	pop    ebx
c001ecff:	5e                   	pop    esi
c001ed00:	c3                   	ret    
c001ed01:	90                   	nop

c001ed02 <SoundChannel::buffer8(unsigned char*, int)>:
c001ed02:	55                   	push   ebp
c001ed03:	57                   	push   edi
c001ed04:	56                   	push   esi
c001ed05:	53                   	push   ebx
c001ed06:	83 ec 1c             	sub    esp,0x1c
c001ed09:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ed0d:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c001ed10:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c001ed13:	0f 84 d2 00 00 00    	je     c001edeb <SoundChannel::buffer8(unsigned char*, int)+0xe9>
c001ed19:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ed1d:	85 ed                	test   ebp,ebp
c001ed1f:	0f 8e c6 00 00 00    	jle    c001edeb <SoundChannel::buffer8(unsigned char*, int)+0xe9>
c001ed25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ed29:	bd 00 00 00 3c       	mov    ebp,0x3c000000
c001ed2e:	83 ec 0c             	sub    esp,0xc
c001ed31:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001ed34:	50                   	push   eax
c001ed35:	e8 e1 40 00 00       	call   c0022e1b <__floatunsisf>
c001ed3a:	59                   	pop    ecx
c001ed3b:	8d 4e 01             	lea    ecx,[esi+0x1]
c001ed3e:	5f                   	pop    edi
c001ed3f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c001ed42:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c001ed45:	55                   	push   ebp
c001ed46:	50                   	push   eax
c001ed47:	e8 6d 3c 00 00       	call   c00229b9 <__mulsf3>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c001ed52:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c001ed55:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c001ed58:	0f 84 99 00 00 00    	je     c001edf7 <SoundChannel::buffer8(unsigned char*, int)+0xf5>
c001ed5e:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c001ed63:	74 78                	je     c001eddd <SoundChannel::buffer8(unsigned char*, int)+0xdb>
c001ed65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ed69:	83 ec 0c             	sub    esp,0xc
c001ed6c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c001ed70:	50                   	push   eax
c001ed71:	e8 a5 40 00 00       	call   c0022e1b <__floatunsisf>
c001ed76:	5f                   	pop    edi
c001ed77:	8d 4e 01             	lea    ecx,[esi+0x1]
c001ed7a:	5a                   	pop    edx
c001ed7b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c001ed7e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c001ed81:	55                   	push   ebp
c001ed82:	50                   	push   eax
c001ed83:	e8 31 3c 00 00       	call   c00229b9 <__mulsf3>
c001ed88:	83 c4 10             	add    esp,0x10
c001ed8b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c001ed8e:	be 02 00 00 00       	mov    esi,0x2
c001ed93:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c001ed96:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c001ed99:	74 46                	je     c001ede1 <SoundChannel::buffer8(unsigned char*, int)+0xdf>
c001ed9b:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c001ed9f:	eb 36                	jmp    c001edd7 <SoundChannel::buffer8(unsigned char*, int)+0xd5>
c001eda1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001eda5:	83 ec 0c             	sub    esp,0xc
c001eda8:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c001edac:	46                   	inc    esi
c001edad:	50                   	push   eax
c001edae:	e8 68 40 00 00       	call   c0022e1b <__floatunsisf>
c001edb3:	5a                   	pop    edx
c001edb4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001edb7:	59                   	pop    ecx
c001edb8:	8d 4f 01             	lea    ecx,[edi+0x1]
c001edbb:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c001edbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001edc2:	50                   	push   eax
c001edc3:	e8 f1 3b 00 00       	call   c00229b9 <__mulsf3>
c001edc8:	83 c4 10             	add    esp,0x10
c001edcb:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c001edcf:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c001edd2:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c001edd5:	74 0a                	je     c001ede1 <SoundChannel::buffer8(unsigned char*, int)+0xdf>
c001edd7:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c001eddb:	75 c4                	jne    c001eda1 <SoundChannel::buffer8(unsigned char*, int)+0x9f>
c001eddd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ede1:	83 c4 1c             	add    esp,0x1c
c001ede4:	89 f0                	mov    eax,esi
c001ede6:	5b                   	pop    ebx
c001ede7:	5e                   	pop    esi
c001ede8:	5f                   	pop    edi
c001ede9:	5d                   	pop    ebp
c001edea:	c3                   	ret    
c001edeb:	83 c4 1c             	add    esp,0x1c
c001edee:	31 f6                	xor    esi,esi
c001edf0:	5b                   	pop    ebx
c001edf1:	89 f0                	mov    eax,esi
c001edf3:	5e                   	pop    esi
c001edf4:	5f                   	pop    edi
c001edf5:	5d                   	pop    ebp
c001edf6:	c3                   	ret    
c001edf7:	be 01 00 00 00       	mov    esi,0x1
c001edfc:	eb e3                	jmp    c001ede1 <SoundChannel::buffer8(unsigned char*, int)+0xdf>

c001edfe <SoundDevice::SoundDevice(char const*)>:
c001edfe:	83 ec 1c             	sub    esp,0x1c
c001ee01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee05:	83 ec 08             	sub    esp,0x8
c001ee08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ee0c:	50                   	push   eax
c001ee0d:	e8 3a 4a ff ff       	call   c001384c <Device::Device(char const*)>
c001ee12:	83 c4 10             	add    esp,0x10
c001ee15:	ba c0 7c 02 c0       	mov    edx,0xc0027cc0
c001ee1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee1e:	89 10                	mov    DWORD PTR [eax],edx
c001ee20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee24:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ee2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ee3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ee44:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ee49:	7f 19                	jg     c001ee64 <SoundDevice::SoundDevice(char const*)+0x66>
c001ee4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee53:	83 c2 54             	add    edx,0x54
c001ee56:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ee5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ee62:	eb e0                	jmp    c001ee44 <SoundDevice::SoundDevice(char const*)+0x46>
c001ee64:	90                   	nop
c001ee65:	83 c4 1c             	add    esp,0x1c
c001ee68:	c3                   	ret    
c001ee69:	90                   	nop

c001ee6a <SoundDevice::~SoundDevice()>:
c001ee6a:	53                   	push   ebx
c001ee6b:	83 ec 18             	sub    esp,0x18
c001ee6e:	ba c0 7c 02 c0       	mov    edx,0xc0027cc0
c001ee73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee77:	89 10                	mov    DWORD PTR [eax],edx
c001ee79:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ee81:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ee86:	7f 46                	jg     c001eece <SoundDevice::~SoundDevice()+0x64>
c001ee88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee90:	83 c2 54             	add    edx,0x54
c001ee93:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ee97:	85 c0                	test   eax,eax
c001ee99:	74 2d                	je     c001eec8 <SoundDevice::~SoundDevice()+0x5e>
c001ee9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eea3:	83 c2 54             	add    edx,0x54
c001eea6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001eeaa:	85 db                	test   ebx,ebx
c001eeac:	74 1a                	je     c001eec8 <SoundDevice::~SoundDevice()+0x5e>
c001eeae:	83 ec 0c             	sub    esp,0xc
c001eeb1:	53                   	push   ebx
c001eeb2:	e8 27 fc ff ff       	call   c001eade <SoundChannel::~SoundChannel()>
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	83 ec 08             	sub    esp,0x8
c001eebd:	6a 2c                	push   0x2c
c001eebf:	53                   	push   ebx
c001eec0:	e8 ac 32 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001eec5:	83 c4 10             	add    esp,0x10
c001eec8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001eecc:	eb b3                	jmp    c001ee81 <SoundDevice::~SoundDevice()+0x17>
c001eece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eed2:	83 ec 0c             	sub    esp,0xc
c001eed5:	50                   	push   eax
c001eed6:	e8 23 46 ff ff       	call   c00134fe <Device::~Device()>
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	90                   	nop
c001eedf:	83 c4 18             	add    esp,0x18
c001eee2:	5b                   	pop    ebx
c001eee3:	c3                   	ret    

c001eee4 <SoundDevice::~SoundDevice()>:
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	83 ec 0c             	sub    esp,0xc
c001eeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeee:	e8 77 ff ff ff       	call   c001ee6a <SoundDevice::~SoundDevice()>
c001eef3:	83 c4 10             	add    esp,0x10
c001eef6:	83 ec 08             	sub    esp,0x8
c001eef9:	68 e4 01 00 00       	push   0x1e4
c001eefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef02:	e8 6a 32 ff ff       	call   c0012171 <operator delete(void*, unsigned long)>
c001ef07:	83 c4 10             	add    esp,0x10
c001ef0a:	83 c4 0c             	add    esp,0xc
c001ef0d:	c3                   	ret    

c001ef0e <SoundDevice::getFreeChannelNum()>:
c001ef0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ef12:	31 c0                	xor    eax,eax
c001ef14:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ef1c:	74 09                	je     c001ef27 <SoundDevice::getFreeChannelNum()+0x19>
c001ef1e:	40                   	inc    eax
c001ef1f:	83 f8 20             	cmp    eax,0x20
c001ef22:	75 f0                	jne    c001ef14 <SoundDevice::getFreeChannelNum()+0x6>
c001ef24:	83 c8 ff             	or     eax,0xffffffff
c001ef27:	c3                   	ret    

c001ef28 <SoundDevice::addChannel(SoundChannel*)>:
c001ef28:	56                   	push   esi
c001ef29:	53                   	push   ebx
c001ef2a:	51                   	push   ecx
c001ef2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef33:	53                   	push   ebx
c001ef34:	e8 d5 ff ff ff       	call   c001ef0e <SoundDevice::getFreeChannelNum()>
c001ef39:	5a                   	pop    edx
c001ef3a:	83 f8 ff             	cmp    eax,0xffffffff
c001ef3d:	74 51                	je     c001ef90 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ef3f:	85 f6                	test   esi,esi
c001ef41:	74 4d                	je     c001ef90 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ef43:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ef4a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ef51:	75 30                	jne    c001ef83 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ef53:	83 ec 0c             	sub    esp,0xc
c001ef56:	56                   	push   esi
c001ef57:	e8 e6 fc ff ff       	call   c001ec42 <SoundChannel::getSampleRate()>
c001ef5c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ef62:	89 34 24             	mov    DWORD PTR [esp],esi
c001ef65:	e8 e0 fc ff ff       	call   c001ec4a <SoundChannel::getBits()>
c001ef6a:	83 c4 0c             	add    esp,0xc
c001ef6d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ef73:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ef75:	50                   	push   eax
c001ef76:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ef7c:	53                   	push   ebx
c001ef7d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ef80:	83 c4 10             	add    esp,0x10
c001ef83:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ef89:	b8 01 00 00 00       	mov    eax,0x1
c001ef8e:	eb 03                	jmp    c001ef93 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ef90:	83 c8 ff             	or     eax,0xffffffff
c001ef93:	5a                   	pop    edx
c001ef94:	5b                   	pop    ebx
c001ef95:	5e                   	pop    esi
c001ef96:	c3                   	ret    
c001ef97:	90                   	nop

c001ef98 <SoundDevice::removeChannel(int)>:
c001ef98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa0:	83 fa 1f             	cmp    edx,0x1f
c001efa3:	77 23                	ja     c001efc8 <SoundDevice::removeChannel(int)+0x30>
c001efa5:	8d 14 90             	lea    edx,[eax+edx*4]
c001efa8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001efaf:	74 17                	je     c001efc8 <SoundDevice::removeChannel(int)+0x30>
c001efb1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001efbb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001efc1:	75 05                	jne    c001efc8 <SoundDevice::removeChannel(int)+0x30>
c001efc3:	8b 00                	mov    eax,DWORD PTR [eax]
c001efc5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001efc8:	c3                   	ret    
c001efc9:	90                   	nop

c001efca <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001efca:	57                   	push   edi
c001efcb:	56                   	push   esi
c001efcc:	53                   	push   ebx
c001efcd:	31 db                	xor    ebx,ebx
c001efcf:	83 ec 10             	sub    esp,0x10
c001efd2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001efd6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001efda:	0f 8d cb 00 00 00    	jge    c001f0ab <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001efe0:	83 ec 0c             	sub    esp,0xc
c001efe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001efe7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001efea:	e8 88 50 00 00       	call   c0024077 <__extendsfdf2>
c001efef:	83 c4 10             	add    esp,0x10
c001eff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001effa:	68 00 00 f0 3f       	push   0x3ff00000
c001efff:	6a 00                	push   0x0
c001f001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f009:	e8 f5 3f 00 00       	call   c0023003 <__adddf3>
c001f00e:	83 c4 10             	add    esp,0x10
c001f011:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f015:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f019:	68 00 00 e0 3f       	push   0x3fe00000
c001f01e:	6a 00                	push   0x0
c001f020:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f024:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f028:	e8 53 46 00 00       	call   c0023680 <__muldf3>
c001f02d:	83 c4 10             	add    esp,0x10
c001f030:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f034:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f038:	68 00 00 60 40       	push   0x40600000
c001f03d:	6a 00                	push   0x0
c001f03f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f043:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f047:	e8 34 46 00 00       	call   c0023680 <__muldf3>
c001f04c:	59                   	pop    ecx
c001f04d:	5f                   	pop    edi
c001f04e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f052:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001f056:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f05a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f05e:	e8 f0 4e 00 00       	call   c0023f53 <__truncdfsf2>
c001f063:	5a                   	pop    edx
c001f064:	89 c7                	mov    edi,eax
c001f066:	59                   	pop    ecx
c001f067:	68 00 00 fe 42       	push   0x42fe0000
c001f06c:	50                   	push   eax
c001f06d:	e8 8b 3f 00 00       	call   c0022ffd <__gesf2>
c001f072:	83 c4 10             	add    esp,0x10
c001f075:	85 c0                	test   eax,eax
c001f077:	78 06                	js     c001f07f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001f079:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001f07d:	eb 26                	jmp    c001f0a5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001f07f:	50                   	push   eax
c001f080:	50                   	push   eax
c001f081:	6a 00                	push   0x0
c001f083:	57                   	push   edi
c001f084:	e8 78 3f 00 00       	call   c0023001 <__lesf2>
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	85 c0                	test   eax,eax
c001f08e:	7f 06                	jg     c001f096 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001f090:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001f094:	eb 0f                	jmp    c001f0a5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001f096:	83 ec 0c             	sub    esp,0xc
c001f099:	57                   	push   edi
c001f09a:	e8 6d 50 00 00       	call   c002410c <lrintf>
c001f09f:	83 c4 10             	add    esp,0x10
c001f0a2:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001f0a5:	43                   	inc    ebx
c001f0a6:	e9 2b ff ff ff       	jmp    c001efd6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001f0ab:	83 c4 10             	add    esp,0x10
c001f0ae:	5b                   	pop    ebx
c001f0af:	5e                   	pop    esi
c001f0b0:	5f                   	pop    edi
c001f0b1:	c3                   	ret    

c001f0b2 <SoundDevice::getAudio(int, float*, float*)>:
c001f0b2:	55                   	push   ebp
c001f0b3:	57                   	push   edi
c001f0b4:	56                   	push   esi
c001f0b5:	53                   	push   ebx
c001f0b6:	31 db                	xor    ebx,ebx
c001f0b8:	83 ec 20             	sub    esp,0x20
c001f0bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f0bf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f0c3:	c1 e0 02             	shl    eax,0x2
c001f0c6:	50                   	push   eax
c001f0c7:	6a 00                	push   0x0
c001f0c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f0cd:	e8 14 16 fe ff       	call   c00006e6 <memset>
c001f0d2:	83 c4 10             	add    esp,0x10
c001f0d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f0d9:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001f0e0:	85 c0                	test   eax,eax
c001f0e2:	0f 84 d7 00 00 00    	je     c001f1bf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001f0e8:	83 ec 0c             	sub    esp,0xc
c001f0eb:	50                   	push   eax
c001f0ec:	e8 49 fb ff ff       	call   c001ec3a <SoundChannel::paused()>
c001f0f1:	83 c4 10             	add    esp,0x10
c001f0f4:	84 c0                	test   al,al
c001f0f6:	0f 85 c3 00 00 00    	jne    c001f1bf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001f106:	e8 1f fa ff ff       	call   c001eb2a <SoundChannel::getVolume()>
c001f10b:	83 c4 10             	add    esp,0x10
c001f10e:	85 c0                	test   eax,eax
c001f110:	0f 84 a9 00 00 00    	je     c001f1bf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001f116:	83 ec 0c             	sub    esp,0xc
c001f119:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001f120:	e8 05 fa ff ff       	call   c001eb2a <SoundChannel::getVolume()>
c001f125:	83 ec 0c             	sub    esp,0xc
c001f128:	50                   	push   eax
c001f129:	e8 79 3c 00 00       	call   c0022da7 <__floatsisf>
c001f12e:	59                   	pop    ecx
c001f12f:	5d                   	pop    ebp
c001f130:	31 ed                	xor    ebp,ebp
c001f132:	68 00 00 c8 42       	push   0x42c80000
c001f137:	50                   	push   eax
c001f138:	e8 3f 3a 00 00       	call   c0022b7c <__divsf3>
c001f13d:	83 c4 10             	add    esp,0x10
c001f140:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f144:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001f148:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001f14e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001f152:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001f159:	e8 04 fb ff ff       	call   c001ec62 <SoundChannel::unbuffer(float*, int, int)>
c001f15e:	83 c4 20             	add    esp,0x20
c001f161:	89 c1                	mov    ecx,eax
c001f163:	39 cd                	cmp    ebp,ecx
c001f165:	7d 52                	jge    c001f1b9 <SoundDevice::getAudio(int, float*, float*)+0x107>
c001f167:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f16b:	50                   	push   eax
c001f16c:	50                   	push   eax
c001f16d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f171:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c001f174:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f178:	e8 3c 38 00 00       	call   c00229b9 <__mulsf3>
c001f17d:	5a                   	pop    edx
c001f17e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f182:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c001f188:	e8 1a 3c 00 00       	call   c0022da7 <__floatsisf>
c001f18d:	59                   	pop    ecx
c001f18e:	5a                   	pop    edx
c001f18f:	50                   	push   eax
c001f190:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f194:	e8 e3 39 00 00       	call   c0022b7c <__divsf3>
c001f199:	59                   	pop    ecx
c001f19a:	5a                   	pop    edx
c001f19b:	50                   	push   eax
c001f19c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f1a0:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c001f1a3:	e8 ee 34 00 00       	call   c0022696 <__addsf3>
c001f1a8:	83 c4 10             	add    esp,0x10
c001f1ab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f1af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1b3:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c001f1b6:	45                   	inc    ebp
c001f1b7:	eb aa                	jmp    c001f163 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c001f1b9:	39 cf                	cmp    edi,ecx
c001f1bb:	7e 02                	jle    c001f1bf <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001f1bd:	89 cf                	mov    edi,ecx
c001f1bf:	43                   	inc    ebx
c001f1c0:	83 fb 20             	cmp    ebx,0x20
c001f1c3:	0f 85 10 ff ff ff    	jne    c001f0d9 <SoundDevice::getAudio(int, float*, float*)+0x27>
c001f1c9:	83 c4 1c             	add    esp,0x1c
c001f1cc:	89 f8                	mov    eax,edi
c001f1ce:	5b                   	pop    ebx
c001f1cf:	5e                   	pop    esi
c001f1d0:	5f                   	pop    edi
c001f1d1:	5d                   	pop    ebp
c001f1d2:	c3                   	ret    
c001f1d3:	90                   	nop

c001f1d4 <PCI::open(int, int, void*)>:
c001f1d4:	83 ec 18             	sub    esp,0x18
c001f1d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1db:	8b 10                	mov    edx,DWORD PTR [eax]
c001f1dd:	50                   	push   eax
c001f1de:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001f1e1:	31 c0                	xor    eax,eax
c001f1e3:	83 c4 1c             	add    esp,0x1c
c001f1e6:	c3                   	ret    
c001f1e7:	90                   	nop

c001f1e8 <PCI::close(int, int, void*)>:
c001f1e8:	31 c0                	xor    eax,eax
c001f1ea:	c3                   	ret    
c001f1eb:	90                   	nop

c001f1ec <PCI::PCI()>:
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f3:	83 ec 08             	sub    esp,0x8
c001f1f6:	68 f0 7c 02 c0       	push   0xc0027cf0
c001f1fb:	50                   	push   eax
c001f1fc:	e8 d7 3c ff ff       	call   c0012ed8 <Bus::Bus(char const*)>
c001f201:	83 c4 10             	add    esp,0x10
c001f204:	ba 7c 7d 02 c0       	mov    edx,0xc0027d7c
c001f209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20d:	89 10                	mov    DWORD PTR [eax],edx
c001f20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f213:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f219:	0f b6 d0             	movzx  edx,al
c001f21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f220:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001f227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f231:	0f b6 d0             	movzx  edx,al
c001f234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f238:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001f23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f241:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f247:	8d 50 01             	lea    edx,[eax+0x1]
c001f24a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f24e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f254:	0f b6 d0             	movzx  edx,al
c001f257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f25f:	83 c9 c0             	or     ecx,0xffffffc0
c001f262:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f266:	90                   	nop
c001f267:	83 c4 0c             	add    esp,0xc
c001f26a:	c3                   	ret    
c001f26b:	90                   	nop

c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001f26c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f270:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f275:	89 ca                	mov    edx,ecx
c001f277:	c1 e0 10             	shl    eax,0x10
c001f27a:	81 e2 fc 00 00 00    	and    edx,0xfc
c001f280:	09 d0                	or     eax,edx
c001f282:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001f287:	c1 e2 08             	shl    edx,0x8
c001f28a:	09 d0                	or     eax,edx
c001f28c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001f291:	c1 e2 0b             	shl    edx,0xb
c001f294:	09 d0                	or     eax,edx
c001f296:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f29b:	0d 00 00 00 80       	or     eax,0x80000000
c001f2a0:	ef                   	out    dx,eax
c001f2a1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f2a6:	ed                   	in     eax,dx
c001f2a7:	83 e1 02             	and    ecx,0x2
c001f2aa:	0f b6 c9             	movzx  ecx,cl
c001f2ad:	c1 e1 03             	shl    ecx,0x3
c001f2b0:	d3 e8                	shr    eax,cl
c001f2b2:	c3                   	ret    
c001f2b3:	90                   	nop

c001f2b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001f2b4:	6a 00                	push   0x0
c001f2b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f2bb:	50                   	push   eax
c001f2bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f2c1:	50                   	push   eax
c001f2c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f2c7:	50                   	push   eax
c001f2c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f2cc:	e8 9b ff ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f2d1:	83 c4 14             	add    esp,0x14
c001f2d4:	c3                   	ret    
c001f2d5:	90                   	nop

c001f2d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001f2d6:	6a 0e                	push   0xe
c001f2d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f2dd:	50                   	push   eax
c001f2de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f2e3:	50                   	push   eax
c001f2e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f2e9:	50                   	push   eax
c001f2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f2ee:	e8 79 ff ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f2f3:	83 c4 14             	add    esp,0x14
c001f2f6:	0f b6 c0             	movzx  eax,al
c001f2f9:	c3                   	ret    

c001f2fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001f2fa:	55                   	push   ebp
c001f2fb:	57                   	push   edi
c001f2fc:	56                   	push   esi
c001f2fd:	53                   	push   ebx
c001f2fe:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001f303:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001f308:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001f30d:	6a 0a                	push   0xa
c001f30f:	56                   	push   esi
c001f310:	55                   	push   ebp
c001f311:	57                   	push   edi
c001f312:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001f316:	e8 51 ff ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f31b:	6a 0a                	push   0xa
c001f31d:	89 c3                	mov    ebx,eax
c001f31f:	56                   	push   esi
c001f320:	0f b6 db             	movzx  ebx,bl
c001f323:	55                   	push   ebp
c001f324:	57                   	push   edi
c001f325:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001f329:	e8 3e ff ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f32e:	83 c4 28             	add    esp,0x28
c001f331:	25 00 ff 00 00       	and    eax,0xff00
c001f336:	09 d8                	or     eax,ebx
c001f338:	5b                   	pop    ebx
c001f339:	5e                   	pop    esi
c001f33a:	5f                   	pop    edi
c001f33b:	5d                   	pop    ebp
c001f33c:	c3                   	ret    
c001f33d:	90                   	nop

c001f33e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001f33e:	6a 08                	push   0x8
c001f340:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f345:	50                   	push   eax
c001f346:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f34b:	50                   	push   eax
c001f34c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f351:	50                   	push   eax
c001f352:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f356:	e8 11 ff ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f35b:	83 c4 14             	add    esp,0x14
c001f35e:	0f b6 c4             	movzx  eax,ah
c001f361:	c3                   	ret    

c001f362 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001f362:	6a 08                	push   0x8
c001f364:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f369:	50                   	push   eax
c001f36a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f36f:	50                   	push   eax
c001f370:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f375:	50                   	push   eax
c001f376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f37a:	e8 ed fe ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f37f:	83 c4 14             	add    esp,0x14
c001f382:	c3                   	ret    
c001f383:	90                   	nop

c001f384 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001f384:	6a 3c                	push   0x3c
c001f386:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f38b:	50                   	push   eax
c001f38c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f391:	50                   	push   eax
c001f392:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f397:	50                   	push   eax
c001f398:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f39c:	e8 cb fe ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f3a1:	83 c4 14             	add    esp,0x14
c001f3a4:	c3                   	ret    
c001f3a5:	90                   	nop

c001f3a6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001f3a6:	6a 18                	push   0x18
c001f3a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f3ad:	50                   	push   eax
c001f3ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f3b3:	50                   	push   eax
c001f3b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f3b9:	50                   	push   eax
c001f3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f3be:	e8 a9 fe ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f3c3:	83 c4 14             	add    esp,0x14
c001f3c6:	0f b6 c4             	movzx  eax,ah
c001f3c9:	c3                   	ret    

c001f3ca <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001f3ca:	55                   	push   ebp
c001f3cb:	57                   	push   edi
c001f3cc:	56                   	push   esi
c001f3cd:	53                   	push   ebx
c001f3ce:	50                   	push   eax
c001f3cf:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001f3d3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001f3d8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001f3dd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001f3e2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001f3e9:	8d 43 12             	lea    eax,[ebx+0x12]
c001f3ec:	83 c3 10             	add    ebx,0x10
c001f3ef:	0f b6 c0             	movzx  eax,al
c001f3f2:	0f b6 db             	movzx  ebx,bl
c001f3f5:	50                   	push   eax
c001f3f6:	51                   	push   ecx
c001f3f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f3fb:	57                   	push   edi
c001f3fc:	55                   	push   ebp
c001f3fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001f401:	e8 66 fe ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f406:	53                   	push   ebx
c001f407:	89 c6                	mov    esi,eax
c001f409:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f40d:	c1 e6 10             	shl    esi,0x10
c001f410:	51                   	push   ecx
c001f411:	57                   	push   edi
c001f412:	55                   	push   ebp
c001f413:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f417:	e8 50 fe ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f41c:	83 c4 2c             	add    esp,0x2c
c001f41f:	0f b7 c0             	movzx  eax,ax
c001f422:	5b                   	pop    ebx
c001f423:	09 f0                	or     eax,esi
c001f425:	5e                   	pop    esi
c001f426:	5f                   	pop    edi
c001f427:	5d                   	pop    ebp
c001f428:	c3                   	ret    
c001f429:	90                   	nop

c001f42a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001f42a:	53                   	push   ebx
c001f42b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f430:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001f435:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f439:	c1 e1 10             	shl    ecx,0x10
c001f43c:	25 fc 00 00 00       	and    eax,0xfc
c001f441:	09 c1                	or     ecx,eax
c001f443:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f448:	c1 e0 08             	shl    eax,0x8
c001f44b:	09 c1                	or     ecx,eax
c001f44d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001f452:	c1 e0 0b             	shl    eax,0xb
c001f455:	09 c1                	or     ecx,eax
c001f457:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001f45d:	89 c8                	mov    eax,ecx
c001f45f:	ef                   	out    dx,eax
c001f460:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f465:	ed                   	in     eax,dx
c001f466:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001f46b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001f470:	74 0a                	je     c001f47c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001f472:	0f b7 d8             	movzx  ebx,ax
c001f475:	89 d0                	mov    eax,edx
c001f477:	c1 e0 10             	shl    eax,0x10
c001f47a:	eb 05                	jmp    c001f481 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001f47c:	66 31 c0             	xor    ax,ax
c001f47f:	89 d3                	mov    ebx,edx
c001f481:	09 c3                	or     ebx,eax
c001f483:	ba f8 0c 00 00       	mov    edx,0xcf8
c001f488:	89 c8                	mov    eax,ecx
c001f48a:	ef                   	out    dx,eax
c001f48b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001f490:	89 d8                	mov    eax,ebx
c001f492:	ef                   	out    dx,eax
c001f493:	5b                   	pop    ebx
c001f494:	c3                   	ret    
c001f495:	90                   	nop

c001f496 <PCI::checkBus(unsigned char)>:
c001f496:	56                   	push   esi
c001f497:	53                   	push   ebx
c001f498:	31 db                	xor    ebx,ebx
c001f49a:	51                   	push   ecx
c001f49b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f4a0:	52                   	push   edx
c001f4a1:	53                   	push   ebx
c001f4a2:	43                   	inc    ebx
c001f4a3:	56                   	push   esi
c001f4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4a8:	e8 29 03 00 00       	call   c001f7d6 <PCI::checkDevice(unsigned char, unsigned char)>
c001f4ad:	83 c4 10             	add    esp,0x10
c001f4b0:	83 fb 20             	cmp    ebx,0x20
c001f4b3:	75 eb                	jne    c001f4a0 <PCI::checkBus(unsigned char)+0xa>
c001f4b5:	58                   	pop    eax
c001f4b6:	5b                   	pop    ebx
c001f4b7:	5e                   	pop    esi
c001f4b8:	c3                   	ret    
c001f4b9:	90                   	nop

c001f4ba <PCI::foundDevice(PCIDeviceInfo)>:
c001f4ba:	55                   	push   ebp
c001f4bb:	57                   	push   edi
c001f4bc:	56                   	push   esi
c001f4bd:	53                   	push   ebx
c001f4be:	83 ec 1c             	sub    esp,0x1c
c001f4c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f4c5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001f4cb:	0f 84 51 01 00 00    	je     c001f622 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001f4d1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001f4d5:	66 81 f9 06 04       	cmp    cx,0x406
c001f4da:	75 2c                	jne    c001f508 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001f4dc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001f4e1:	50                   	push   eax
c001f4e2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001f4e7:	50                   	push   eax
c001f4e8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001f4ed:	50                   	push   eax
c001f4ee:	56                   	push   esi
c001f4ef:	e8 b2 fe ff ff       	call   c001f3a6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001f4f4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f4f8:	0f b6 c0             	movzx  eax,al
c001f4fb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001f4ff:	83 c4 2c             	add    esp,0x2c
c001f502:	5b                   	pop    ebx
c001f503:	5e                   	pop    esi
c001f504:	5f                   	pop    edi
c001f505:	5d                   	pop    ebp
c001f506:	eb 8e                	jmp    c001f496 <PCI::checkBus(unsigned char)>
c001f508:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f50c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001f512:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f516:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f51a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001f51e:	88 d3                	mov    bl,dl
c001f520:	85 c0                	test   eax,eax
c001f522:	74 33                	je     c001f557 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001f524:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f527:	85 d2                	test   edx,edx
c001f529:	74 28                	je     c001f553 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001f52b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001f531:	31 ef                	xor    edi,ebp
c001f533:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001f539:	75 18                	jne    c001f553 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001f53b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f53f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001f545:	75 0c                	jne    c001f553 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001f547:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001f54d:	0f 84 cf 00 00 00    	je     c001f622 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001f553:	8b 00                	mov    eax,DWORD PTR [eax]
c001f555:	eb c9                	jmp    c001f520 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001f557:	66 81 f9 01 06       	cmp    cx,0x601
c001f55c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001f560:	75 18                	jne    c001f57a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001f562:	83 ec 0c             	sub    esp,0xc
c001f565:	68 58 01 00 00       	push   0x158
c001f56a:	e8 f3 2b ff ff       	call   c0012162 <operator new(unsigned long)>
c001f56f:	59                   	pop    ecx
c001f570:	89 c5                	mov    ebp,eax
c001f572:	5f                   	pop    edi
c001f573:	68 f8 7c 02 c0       	push   0xc0027cf8
c001f578:	eb 7d                	jmp    c001f5f7 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001f57a:	66 81 f9 01 01       	cmp    cx,0x101
c001f57f:	75 60                	jne    c001f5e1 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001f581:	83 ec 0c             	sub    esp,0xc
c001f584:	68 70 02 00 00       	push   0x270
c001f589:	e8 d4 2b ff ff       	call   c0012162 <operator new(unsigned long)>
c001f58e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f591:	89 c5                	mov    ebp,eax
c001f593:	e8 02 03 00 00       	call   c001f89a <IDE::IDE()>
c001f598:	58                   	pop    eax
c001f599:	5a                   	pop    edx
c001f59a:	55                   	push   ebp
c001f59b:	56                   	push   esi
c001f59c:	e8 bb 40 ff ff       	call   c001365c <Device::addChild(Device*)>
c001f5a1:	83 ec 1c             	sub    esp,0x1c
c001f5a4:	b9 09 00 00 00       	mov    ecx,0x9
c001f5a9:	fc                   	cld    
c001f5aa:	89 e7                	mov    edi,esp
c001f5ac:	89 de                	mov    esi,ebx
c001f5ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f5b0:	55                   	push   ebp
c001f5b1:	e8 80 3f ff ff       	call   c0013536 <Device::preOpenPCI(PCIDeviceInfo)>
c001f5b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f5b9:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001f5bd:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001f5c5:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001f5cd:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001f5d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5d8:	83 c4 4c             	add    esp,0x4c
c001f5db:	5b                   	pop    ebx
c001f5dc:	5e                   	pop    esi
c001f5dd:	5f                   	pop    edi
c001f5de:	5d                   	pop    ebp
c001f5df:	ff e0                	jmp    eax
c001f5e1:	83 ec 0c             	sub    esp,0xc
c001f5e4:	68 58 01 00 00       	push   0x158
c001f5e9:	e8 74 2b ff ff       	call   c0012162 <operator new(unsigned long)>
c001f5ee:	59                   	pop    ecx
c001f5ef:	89 c5                	mov    ebp,eax
c001f5f1:	5f                   	pop    edi
c001f5f2:	68 17 7d 02 c0       	push   0xc0027d17
c001f5f7:	55                   	push   ebp
c001f5f8:	e8 4b 43 ff ff       	call   c0013948 <DriverlessDevice::DriverlessDevice(char const*)>
c001f5fd:	58                   	pop    eax
c001f5fe:	5a                   	pop    edx
c001f5ff:	55                   	push   ebp
c001f600:	56                   	push   esi
c001f601:	e8 56 40 ff ff       	call   c001365c <Device::addChild(Device*)>
c001f606:	b9 09 00 00 00       	mov    ecx,0x9
c001f60b:	fc                   	cld    
c001f60c:	89 df                	mov    edi,ebx
c001f60e:	89 de                	mov    esi,ebx
c001f610:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f612:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001f616:	83 c4 2c             	add    esp,0x2c
c001f619:	5b                   	pop    ebx
c001f61a:	5e                   	pop    esi
c001f61b:	5f                   	pop    edi
c001f61c:	5d                   	pop    ebp
c001f61d:	e9 14 3f ff ff       	jmp    c0013536 <Device::preOpenPCI(PCIDeviceInfo)>
c001f622:	83 c4 1c             	add    esp,0x1c
c001f625:	5b                   	pop    ebx
c001f626:	5e                   	pop    esi
c001f627:	5f                   	pop    edi
c001f628:	5d                   	pop    ebp
c001f629:	c3                   	ret    

c001f62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001f62a:	55                   	push   ebp
c001f62b:	57                   	push   edi
c001f62c:	56                   	push   esi
c001f62d:	53                   	push   ebx
c001f62e:	83 ec 5c             	sub    esp,0x5c
c001f631:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001f635:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f639:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001f63d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001f642:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f646:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001f64a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001f64f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f653:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001f658:	6a 0c                	push   0xc
c001f65a:	55                   	push   ebp
c001f65b:	53                   	push   ebx
c001f65c:	57                   	push   edi
c001f65d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001f664:	e8 03 fc ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f669:	55                   	push   ebp
c001f66a:	53                   	push   ebx
c001f66b:	57                   	push   edi
c001f66c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001f673:	e8 82 fc ff ff       	call   c001f2fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001f678:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001f67d:	83 c4 24             	add    esp,0x24
c001f680:	55                   	push   ebp
c001f681:	53                   	push   ebx
c001f682:	57                   	push   edi
c001f683:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001f687:	e8 f8 fc ff ff       	call   c001f384 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001f68c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001f690:	6a 3c                	push   0x3c
c001f692:	55                   	push   ebp
c001f693:	53                   	push   ebx
c001f694:	57                   	push   edi
c001f695:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001f69c:	e8 cb fb ff ff       	call   c001f26c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f6a1:	0f b6 c4             	movzx  eax,ah
c001f6a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001f6a8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001f6ac:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001f6b0:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c001f6b5:	83 c4 24             	add    esp,0x24
c001f6b8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001f6be:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001f6c5:	74 6c                	je     c001f733 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001f6c7:	31 f6                	xor    esi,esi
c001f6c9:	8b 15 68 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029468
c001f6cf:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001f6d5:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001f6db:	7e 56                	jle    c001f733 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001f6dd:	8d 14 f2             	lea    edx,[edx+esi*8]
c001f6e0:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001f6e7:	39 cb                	cmp    ebx,ecx
c001f6e9:	75 45                	jne    c001f730 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001f6eb:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001f6f2:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001f6f6:	75 38                	jne    c001f730 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001f6f8:	83 ec 0c             	sub    esp,0xc
c001f6fb:	68 31 7d 02 c0       	push   0xc0027d31
c001f700:	e8 4c 2b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001f705:	8b 15 68 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029468
c001f70b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001f711:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001f719:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001f71d:	52                   	push   edx
c001f71e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f722:	53                   	push   ebx
c001f723:	68 56 7d 02 c0       	push   0xc0027d56
c001f728:	e8 24 2b ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001f72d:	83 c4 20             	add    esp,0x20
c001f730:	46                   	inc    esi
c001f731:	eb 96                	jmp    c001f6c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001f733:	31 d2                	xor    edx,edx
c001f735:	83 ec 0c             	sub    esp,0xc
c001f738:	55                   	push   ebp
c001f739:	53                   	push   ebx
c001f73a:	57                   	push   edi
c001f73b:	52                   	push   edx
c001f73c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f740:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001f747:	e8 7e fc ff ff       	call   c001f3ca <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001f74c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001f750:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f754:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001f758:	42                   	inc    edx
c001f759:	83 c4 20             	add    esp,0x20
c001f75c:	83 fa 06             	cmp    edx,0x6
c001f75f:	75 d4                	jne    c001f735 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001f761:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f765:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001f769:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001f76d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001f771:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f775:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001f779:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001f77e:	86 e0                	xchg   al,ah
c001f780:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001f785:	55                   	push   ebp
c001f786:	53                   	push   ebx
c001f787:	57                   	push   edi
c001f788:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001f78c:	e8 ad fb ff ff       	call   c001f33e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001f791:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001f795:	55                   	push   ebp
c001f796:	53                   	push   ebx
c001f797:	57                   	push   edi
c001f798:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001f79f:	e8 10 fb ff ff       	call   c001f2b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f7a4:	83 ec 0c             	sub    esp,0xc
c001f7a7:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001f7ac:	b9 09 00 00 00       	mov    ecx,0x9
c001f7b1:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001f7b5:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001f7b9:	fc                   	cld    
c001f7ba:	89 e7                	mov    edi,esp
c001f7bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001f7be:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001f7c5:	e8 f0 fc ff ff       	call   c001f4ba <PCI::foundDevice(PCIDeviceInfo)>
c001f7ca:	81 c4 8c 00 00 00    	add    esp,0x8c
c001f7d0:	5b                   	pop    ebx
c001f7d1:	5e                   	pop    esi
c001f7d2:	5f                   	pop    edi
c001f7d3:	5d                   	pop    ebp
c001f7d4:	c3                   	ret    
c001f7d5:	90                   	nop

c001f7d6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001f7d6:	55                   	push   ebp
c001f7d7:	57                   	push   edi
c001f7d8:	56                   	push   esi
c001f7d9:	53                   	push   ebx
c001f7da:	83 ec 0c             	sub    esp,0xc
c001f7dd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f7e1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001f7e6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001f7eb:	6a 00                	push   0x0
c001f7ed:	56                   	push   esi
c001f7ee:	57                   	push   edi
c001f7ef:	55                   	push   ebp
c001f7f0:	e8 bf fa ff ff       	call   c001f2b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f7f5:	6a 00                	push   0x0
c001f7f7:	56                   	push   esi
c001f7f8:	57                   	push   edi
c001f7f9:	55                   	push   ebp
c001f7fa:	e8 2b fe ff ff       	call   c001f62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001f7ff:	83 c4 20             	add    esp,0x20
c001f802:	6a 00                	push   0x0
c001f804:	56                   	push   esi
c001f805:	57                   	push   edi
c001f806:	55                   	push   ebp
c001f807:	e8 ca fa ff ff       	call   c001f2d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001f80c:	83 c4 10             	add    esp,0x10
c001f80f:	84 c0                	test   al,al
c001f811:	79 27                	jns    c001f83a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001f813:	bb 01 00 00 00       	mov    ebx,0x1
c001f818:	53                   	push   ebx
c001f819:	56                   	push   esi
c001f81a:	57                   	push   edi
c001f81b:	55                   	push   ebp
c001f81c:	e8 93 fa ff ff       	call   c001f2b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f821:	83 c4 10             	add    esp,0x10
c001f824:	66 40                	inc    ax
c001f826:	74 0c                	je     c001f834 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001f828:	53                   	push   ebx
c001f829:	56                   	push   esi
c001f82a:	57                   	push   edi
c001f82b:	55                   	push   ebp
c001f82c:	e8 f9 fd ff ff       	call   c001f62a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001f831:	83 c4 10             	add    esp,0x10
c001f834:	43                   	inc    ebx
c001f835:	83 fb 08             	cmp    ebx,0x8
c001f838:	75 de                	jne    c001f818 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001f83a:	83 c4 0c             	add    esp,0xc
c001f83d:	5b                   	pop    ebx
c001f83e:	5e                   	pop    esi
c001f83f:	5f                   	pop    edi
c001f840:	5d                   	pop    ebp
c001f841:	c3                   	ret    

c001f842 <PCI::detect()>:
c001f842:	56                   	push   esi
c001f843:	53                   	push   ebx
c001f844:	53                   	push   ebx
c001f845:	31 db                	xor    ebx,ebx
c001f847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f84b:	6a 00                	push   0x0
c001f84d:	6a 00                	push   0x0
c001f84f:	6a 00                	push   0x0
c001f851:	56                   	push   esi
c001f852:	e8 7f fa ff ff       	call   c001f2d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001f857:	83 c4 10             	add    esp,0x10
c001f85a:	a8 80                	test   al,0x80
c001f85c:	75 21                	jne    c001f87f <PCI::detect()+0x3d>
c001f85e:	51                   	push   ecx
c001f85f:	51                   	push   ecx
c001f860:	6a 00                	push   0x0
c001f862:	56                   	push   esi
c001f863:	e8 2e fc ff ff       	call   c001f496 <PCI::checkBus(unsigned char)>
c001f868:	83 c4 10             	add    esp,0x10
c001f86b:	eb 24                	jmp    c001f891 <PCI::detect()+0x4f>
c001f86d:	52                   	push   edx
c001f86e:	52                   	push   edx
c001f86f:	53                   	push   ebx
c001f870:	43                   	inc    ebx
c001f871:	56                   	push   esi
c001f872:	e8 1f fc ff ff       	call   c001f496 <PCI::checkBus(unsigned char)>
c001f877:	83 c4 10             	add    esp,0x10
c001f87a:	83 fb 08             	cmp    ebx,0x8
c001f87d:	74 12                	je     c001f891 <PCI::detect()+0x4f>
c001f87f:	53                   	push   ebx
c001f880:	6a 00                	push   0x0
c001f882:	6a 00                	push   0x0
c001f884:	56                   	push   esi
c001f885:	e8 2a fa ff ff       	call   c001f2b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001f88a:	83 c4 10             	add    esp,0x10
c001f88d:	66 40                	inc    ax
c001f88f:	74 dc                	je     c001f86d <PCI::detect()+0x2b>
c001f891:	58                   	pop    eax
c001f892:	5b                   	pop    ebx
c001f893:	5e                   	pop    esi
c001f894:	c3                   	ret    
c001f895:	90                   	nop

c001f896 <IDE::close(int, int, void*)>:
c001f896:	83 c8 ff             	or     eax,0xffffffff
c001f899:	c3                   	ret    

c001f89a <IDE::IDE()>:
c001f89a:	83 ec 0c             	sub    esp,0xc
c001f89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a1:	83 ec 08             	sub    esp,0x8
c001f8a4:	68 a0 7d 02 c0       	push   0xc0027da0
c001f8a9:	50                   	push   eax
c001f8aa:	e8 2f 41 ff ff       	call   c00139de <HardDiskController::HardDiskController(char const*)>
c001f8af:	83 c4 10             	add    esp,0x10
c001f8b2:	ba e0 7f 02 c0       	mov    edx,0xc0027fe0
c001f8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bb:	89 10                	mov    DWORD PTR [eax],edx
c001f8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001f8c8:	90                   	nop
c001f8c9:	83 c4 0c             	add    esp,0xc
c001f8cc:	c3                   	ret    
c001f8cd:	90                   	nop

c001f8ce <IDE::prepareInterrupt(unsigned char)>:
c001f8ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f8d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8d7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001f8df:	c3                   	ret    

c001f8e0 <selectDrive(unsigned char, unsigned char)>:
c001f8e0:	c3                   	ret    
c001f8e1:	90                   	nop

c001f8e2 <IDE::getBase(unsigned char)>:
c001f8e2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001f8e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8eb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001f8f3:	c3                   	ret    

c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001f8f4:	55                   	push   ebp
c001f8f5:	57                   	push   edi
c001f8f6:	56                   	push   esi
c001f8f7:	53                   	push   ebx
c001f8f8:	83 ec 1c             	sub    esp,0x1c
c001f8fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f8ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f903:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001f906:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001f90a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f90e:	80 f9 03             	cmp    cl,0x3
c001f911:	77 51                	ja     c001f964 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001f913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f917:	0f b6 f2             	movzx  esi,dl
c001f91a:	0f b6 db             	movzx  ebx,bl
c001f91d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001f920:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001f924:	83 ca 80             	or     edx,0xffffff80
c001f927:	0f b6 d2             	movzx  edx,dl
c001f92a:	52                   	push   edx
c001f92b:	6a 0c                	push   0xc
c001f92d:	56                   	push   esi
c001f92e:	57                   	push   edi
c001f92f:	e8 c0 ff ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f934:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001f939:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f93d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001f941:	ee                   	out    dx,al
c001f942:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001f947:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001f94b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001f94f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f953:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f95b:	83 c4 2c             	add    esp,0x2c
c001f95e:	5b                   	pop    ebx
c001f95f:	5e                   	pop    esi
c001f960:	5f                   	pop    edi
c001f961:	5d                   	pop    ebp
c001f962:	eb 90                	jmp    c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f964:	80 fb 07             	cmp    bl,0x7
c001f967:	77 12                	ja     c001f97b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001f969:	0f b6 d2             	movzx  edx,dl
c001f96c:	0f b6 db             	movzx  ebx,bl
c001f96f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001f977:	89 da                	mov    edx,ebx
c001f979:	eb 2f                	jmp    c001f9aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001f97b:	80 fb 0d             	cmp    bl,0xd
c001f97e:	77 13                	ja     c001f993 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001f980:	0f b6 d2             	movzx  edx,dl
c001f983:	0f b6 db             	movzx  ebx,bl
c001f986:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001f98d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001f991:	eb 17                	jmp    c001f9aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001f993:	80 fb 15             	cmp    bl,0x15
c001f996:	77 13                	ja     c001f9ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001f998:	0f b6 d2             	movzx  edx,dl
c001f99b:	0f b6 db             	movzx  ebx,bl
c001f99e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001f9a6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001f9aa:	ee                   	out    dx,al
c001f9ab:	83 c4 1c             	add    esp,0x1c
c001f9ae:	5b                   	pop    ebx
c001f9af:	5e                   	pop    esi
c001f9b0:	5f                   	pop    edi
c001f9b1:	5d                   	pop    ebp
c001f9b2:	c3                   	ret    
c001f9b3:	90                   	nop

c001f9b4 <IDE::read(unsigned char, unsigned char)>:
c001f9b4:	55                   	push   ebp
c001f9b5:	57                   	push   edi
c001f9b6:	56                   	push   esi
c001f9b7:	53                   	push   ebx
c001f9b8:	83 ec 1c             	sub    esp,0x1c
c001f9bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f9bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f9c3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001f9c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001f9ca:	3c 03                	cmp    al,0x3
c001f9cc:	77 43                	ja     c001fa11 <IDE::read(unsigned char, unsigned char)+0x5d>
c001f9ce:	0f b6 f2             	movzx  esi,dl
c001f9d1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001f9d4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001f9d8:	83 c8 80             	or     eax,0xffffff80
c001f9db:	0f b6 c0             	movzx  eax,al
c001f9de:	50                   	push   eax
c001f9df:	6a 0c                	push   0xc
c001f9e1:	56                   	push   esi
c001f9e2:	57                   	push   edi
c001f9e3:	e8 0c ff ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9e8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001f9ed:	0f b6 c3             	movzx  eax,bl
c001f9f0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001f9f4:	ec                   	in     al,dx
c001f9f5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f9f9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001f9fe:	52                   	push   edx
c001f9ff:	6a 0c                	push   0xc
c001fa01:	56                   	push   esi
c001fa02:	57                   	push   edi
c001fa03:	e8 ec fe ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa08:	83 c4 20             	add    esp,0x20
c001fa0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fa0f:	eb 49                	jmp    c001fa5a <IDE::read(unsigned char, unsigned char)+0xa6>
c001fa11:	80 fb 07             	cmp    bl,0x7
c001fa14:	77 12                	ja     c001fa28 <IDE::read(unsigned char, unsigned char)+0x74>
c001fa16:	0f b6 d2             	movzx  edx,dl
c001fa19:	0f b6 c3             	movzx  eax,bl
c001fa1c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001fa24:	89 c2                	mov    edx,eax
c001fa26:	eb 31                	jmp    c001fa59 <IDE::read(unsigned char, unsigned char)+0xa5>
c001fa28:	80 fb 0d             	cmp    bl,0xd
c001fa2b:	77 13                	ja     c001fa40 <IDE::read(unsigned char, unsigned char)+0x8c>
c001fa2d:	0f b6 d2             	movzx  edx,dl
c001fa30:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001fa37:	0f b6 d3             	movzx  edx,bl
c001fa3a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001fa3e:	eb 19                	jmp    c001fa59 <IDE::read(unsigned char, unsigned char)+0xa5>
c001fa40:	31 c0                	xor    eax,eax
c001fa42:	80 fb 15             	cmp    bl,0x15
c001fa45:	77 13                	ja     c001fa5a <IDE::read(unsigned char, unsigned char)+0xa6>
c001fa47:	0f b6 d2             	movzx  edx,dl
c001fa4a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001fa52:	0f b6 d3             	movzx  edx,bl
c001fa55:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001fa59:	ec                   	in     al,dx
c001fa5a:	83 c4 1c             	add    esp,0x1c
c001fa5d:	5b                   	pop    ebx
c001fa5e:	5e                   	pop    esi
c001fa5f:	5f                   	pop    edi
c001fa60:	5d                   	pop    ebp
c001fa61:	c3                   	ret    

c001fa62 <IDE::waitInterrupt(unsigned char)>:
c001fa62:	55                   	push   ebp
c001fa63:	57                   	push   edi
c001fa64:	56                   	push   esi
c001fa65:	53                   	push   ebx
c001fa66:	31 db                	xor    ebx,ebx
c001fa68:	83 ec 0c             	sub    esp,0xc
c001fa6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001fa6f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001fa74:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001fa7c:	89 e8                	mov    eax,ebp
c001fa7e:	84 c0                	test   al,al
c001fa80:	75 34                	jne    c001fab6 <IDE::waitInterrupt(unsigned char)+0x54>
c001fa82:	52                   	push   edx
c001fa83:	6a 0c                	push   0xc
c001fa85:	56                   	push   esi
c001fa86:	57                   	push   edi
c001fa87:	e8 28 ff ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c001fa8c:	83 c4 10             	add    esp,0x10
c001fa8f:	a8 01                	test   al,0x1
c001fa91:	75 2b                	jne    c001fabe <IDE::waitInterrupt(unsigned char)+0x5c>
c001fa93:	f6 c3 04             	test   bl,0x4
c001fa96:	75 16                	jne    c001faae <IDE::waitInterrupt(unsigned char)+0x4c>
c001fa98:	83 fb 32             	cmp    ebx,0x32
c001fa9b:	7e 11                	jle    c001faae <IDE::waitInterrupt(unsigned char)+0x4c>
c001fa9d:	50                   	push   eax
c001fa9e:	50                   	push   eax
c001fa9f:	6a 00                	push   0x0
c001faa1:	68 80 96 98 00       	push   0x989680
c001faa6:	e8 ff c3 ff ff       	call   c001beaa <nanoSleep(unsigned long long)>
c001faab:	83 c4 10             	add    esp,0x10
c001faae:	83 fb 3c             	cmp    ebx,0x3c
c001fab1:	74 0b                	je     c001fabe <IDE::waitInterrupt(unsigned char)+0x5c>
c001fab3:	43                   	inc    ebx
c001fab4:	eb be                	jmp    c001fa74 <IDE::waitInterrupt(unsigned char)+0x12>
c001fab6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001fabe:	83 c4 0c             	add    esp,0xc
c001fac1:	89 e8                	mov    eax,ebp
c001fac3:	5b                   	pop    ebx
c001fac4:	5e                   	pop    esi
c001fac5:	5f                   	pop    edi
c001fac6:	5d                   	pop    ebp
c001fac7:	c3                   	ret    

c001fac8 <ideChannel0IRQHandler(regs*, void*)>:
c001fac8:	83 ec 10             	sub    esp,0x10
c001facb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001facf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001fad6:	6a 07                	push   0x7
c001fad8:	6a 00                	push   0x0
c001fada:	50                   	push   eax
c001fadb:	e8 d4 fe ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c001fae0:	83 c4 1c             	add    esp,0x1c
c001fae3:	c3                   	ret    

c001fae4 <ideChannel1IRQHandler(regs*, void*)>:
c001fae4:	83 ec 10             	sub    esp,0x10
c001fae7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001faeb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001faf2:	6a 07                	push   0x7
c001faf4:	6a 01                	push   0x1
c001faf6:	50                   	push   eax
c001faf7:	e8 b8 fe ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c001fafc:	83 c4 1c             	add    esp,0x1c
c001faff:	c3                   	ret    

c001fb00 <IDE::enableIRQs(unsigned char, bool)>:
c001fb00:	57                   	push   edi
c001fb01:	56                   	push   esi
c001fb02:	be 04 00 00 00       	mov    esi,0x4
c001fb07:	53                   	push   ebx
c001fb08:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001fb0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb11:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001fb16:	0f 94 c0             	sete   al
c001fb19:	d1 e0                	shl    eax,1
c001fb1b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001fb22:	0f b6 c0             	movzx  eax,al
c001fb25:	50                   	push   eax
c001fb26:	6a 0c                	push   0xc
c001fb28:	57                   	push   edi
c001fb29:	53                   	push   ebx
c001fb2a:	e8 c5 fd ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb2f:	83 c4 10             	add    esp,0x10
c001fb32:	50                   	push   eax
c001fb33:	6a 0c                	push   0xc
c001fb35:	57                   	push   edi
c001fb36:	53                   	push   ebx
c001fb37:	e8 78 fe ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c001fb3c:	83 c4 10             	add    esp,0x10
c001fb3f:	4e                   	dec    esi
c001fb40:	75 f0                	jne    c001fb32 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001fb42:	5b                   	pop    ebx
c001fb43:	5e                   	pop    esi
c001fb44:	5f                   	pop    edi
c001fb45:	c3                   	ret    

c001fb46 <IDE::open(int, int, void*)>:
c001fb46:	55                   	push   ebp
c001fb47:	57                   	push   edi
c001fb48:	56                   	push   esi
c001fb49:	53                   	push   ebx
c001fb4a:	83 ec 1c             	sub    esp,0x1c
c001fb4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb51:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001fb5a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001fb63:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001fb6a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001fb71:	0f 85 b0 02 00 00    	jne    c001fe27 <IDE::open(int, int, void*)+0x2e1>
c001fb77:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001fb7d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001fb81:	83 e0 7f             	and    eax,0x7f
c001fb84:	3c 05                	cmp    al,0x5
c001fb86:	74 04                	je     c001fb8c <IDE::open(int, int, void*)+0x46>
c001fb88:	3c 0f                	cmp    al,0xf
c001fb8a:	75 32                	jne    c001fbbe <IDE::open(int, int, void*)+0x78>
c001fb8c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001fb92:	83 e0 fc             	and    eax,0xfffffffc
c001fb95:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001fb9c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001fba2:	83 e0 fc             	and    eax,0xfffffffc
c001fba5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001fbac:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001fbb2:	83 e0 fc             	and    eax,0xfffffffc
c001fbb5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001fbbc:	eb 14                	jmp    c001fbd2 <IDE::open(int, int, void*)+0x8c>
c001fbbe:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001fbc8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001fbd2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001fbd9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001fbe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fbe4:	89 c6                	mov    esi,eax
c001fbe6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001fbeb:	c1 e6 10             	shl    esi,0x10
c001fbee:	89 e8                	mov    eax,ebp
c001fbf0:	89 fa                	mov    edx,edi
c001fbf2:	c1 e0 0b             	shl    eax,0xb
c001fbf5:	09 f0                	or     eax,esi
c001fbf7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001fbfe:	c1 e6 08             	shl    esi,0x8
c001fc01:	09 c6                	or     esi,eax
c001fc03:	89 f0                	mov    eax,esi
c001fc05:	0d 08 00 00 80       	or     eax,0x80000008
c001fc0a:	ef                   	out    dx,eax
c001fc0b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001fc10:	89 ca                	mov    edx,ecx
c001fc12:	ed                   	in     eax,dx
c001fc13:	c1 e8 10             	shr    eax,0x10
c001fc16:	3d ff ff 00 00       	cmp    eax,0xffff
c001fc1b:	0f 84 f5 00 00 00    	je     c001fd16 <IDE::open(int, int, void*)+0x1d0>
c001fc21:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001fc27:	89 fa                	mov    edx,edi
c001fc29:	89 f0                	mov    eax,esi
c001fc2b:	ef                   	out    dx,eax
c001fc2c:	b0 fe                	mov    al,0xfe
c001fc2e:	89 ca                	mov    edx,ecx
c001fc30:	ee                   	out    dx,al
c001fc31:	89 f0                	mov    eax,esi
c001fc33:	89 fa                	mov    edx,edi
c001fc35:	ef                   	out    dx,eax
c001fc36:	89 ca                	mov    edx,ecx
c001fc38:	ed                   	in     eax,dx
c001fc39:	3c fe                	cmp    al,0xfe
c001fc3b:	0f 85 a9 00 00 00    	jne    c001fcea <IDE::open(int, int, void*)+0x1a4>
c001fc41:	8b 15 68 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029468
c001fc47:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001fc4e:	74 33                	je     c001fc83 <IDE::open(int, int, void*)+0x13d>
c001fc50:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001fc56:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001fc5a:	40                   	inc    eax
c001fc5b:	83 ec 0c             	sub    esp,0xc
c001fc5e:	0f b6 c0             	movzx  eax,al
c001fc61:	50                   	push   eax
c001fc62:	55                   	push   ebp
c001fc63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fc67:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001fc6d:	51                   	push   ecx
c001fc6e:	e8 05 72 ff ff       	call   c0016e78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001fc73:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001fc78:	83 c4 1c             	add    esp,0x1c
c001fc7b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001fc81:	eb 0a                	jmp    c001fc8d <IDE::open(int, int, void*)+0x147>
c001fc83:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001fc8d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001fc94:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001fc9b:	c1 e1 10             	shl    ecx,0x10
c001fc9e:	c1 e0 08             	shl    eax,0x8
c001fca1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001fca6:	09 c1                	or     ecx,eax
c001fca8:	89 fa                	mov    edx,edi
c001fcaa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001fcb1:	c1 e0 0b             	shl    eax,0xb
c001fcb4:	09 c1                	or     ecx,eax
c001fcb6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001fcbc:	89 c8                	mov    eax,ecx
c001fcbe:	ef                   	out    dx,eax
c001fcbf:	be fc 0c 00 00       	mov    esi,0xcfc
c001fcc4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001fcca:	89 f2                	mov    edx,esi
c001fccc:	ee                   	out    dx,al
c001fccd:	89 c8                	mov    eax,ecx
c001fccf:	89 fa                	mov    edx,edi
c001fcd1:	ef                   	out    dx,eax
c001fcd2:	89 f2                	mov    edx,esi
c001fcd4:	ed                   	in     eax,dx
c001fcd5:	0f b6 c0             	movzx  eax,al
c001fcd8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001fcde:	74 46                	je     c001fd26 <IDE::open(int, int, void*)+0x1e0>
c001fce0:	83 ec 0c             	sub    esp,0xc
c001fce3:	68 b8 7d 02 c0       	push   0xc0027db8
c001fce8:	eb 34                	jmp    c001fd1e <IDE::open(int, int, void*)+0x1d8>
c001fcea:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001fcf3:	75 17                	jne    c001fd0c <IDE::open(int, int, void*)+0x1c6>
c001fcf5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001fcfa:	74 07                	je     c001fd03 <IDE::open(int, int, void*)+0x1bd>
c001fcfc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001fd01:	75 09                	jne    c001fd0c <IDE::open(int, int, void*)+0x1c6>
c001fd03:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001fd0a:	eb 1a                	jmp    c001fd26 <IDE::open(int, int, void*)+0x1e0>
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	68 c0 7d 02 c0       	push   0xc0027dc0
c001fd14:	eb 08                	jmp    c001fd1e <IDE::open(int, int, void*)+0x1d8>
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	68 f1 7d 02 c0       	push   0xc0027df1
c001fd1e:	e8 eb 8c ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001fd2d:	79 1a                	jns    c001fd49 <IDE::open(int, int, void*)+0x203>
c001fd2f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001fd35:	83 e0 fc             	and    eax,0xfffffffc
c001fd38:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001fd3f:	83 c0 08             	add    eax,0x8
c001fd42:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001fd49:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001fd4f:	89 c2                	mov    edx,eax
c001fd51:	83 e2 0f             	and    edx,0xf
c001fd54:	66 83 fa 08          	cmp    dx,0x8
c001fd58:	75 0a                	jne    c001fd64 <IDE::open(int, int, void*)+0x21e>
c001fd5a:	83 e8 02             	sub    eax,0x2
c001fd5d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001fd64:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001fd6a:	89 c2                	mov    edx,eax
c001fd6c:	83 e2 0f             	and    edx,0xf
c001fd6f:	66 83 fa 08          	cmp    dx,0x8
c001fd73:	75 0a                	jne    c001fd7f <IDE::open(int, int, void*)+0x239>
c001fd75:	83 e8 02             	sub    eax,0x2
c001fd78:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001fd7f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001fd86:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001fd8d:	89 d0                	mov    eax,edx
c001fd8f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001fd92:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001fd96:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001fd9a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001fd9d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001fda2:	0f b6 c9             	movzx  ecx,cl
c001fda5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001fdac:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001fdaf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001fdb3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001fdb7:	8d 50 02             	lea    edx,[eax+0x2]
c001fdba:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001fdbf:	0f b6 d2             	movzx  edx,dl
c001fdc2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001fdc8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001fdcb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001fdcf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001fdd3:	8d 48 03             	lea    ecx,[eax+0x3]
c001fdd6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001fddb:	0f b6 c9             	movzx  ecx,cl
c001fdde:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001fde4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001fde7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001fdeb:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001fdef:	8d 50 04             	lea    edx,[eax+0x4]
c001fdf2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001fdf8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001fdfd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001fe04:	66 85 f6             	test   si,si
c001fe07:	74 3e                	je     c001fe47 <IDE::open(int, int, void*)+0x301>
c001fe09:	0f b6 d2             	movzx  edx,dl
c001fe0c:	83 c0 05             	add    eax,0x5
c001fe0f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001fe12:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001fe16:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001fe1a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001fe20:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001fe25:	eb 20                	jmp    c001fe47 <IDE::open(int, int, void*)+0x301>
c001fe27:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001fe31:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001fe3b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001fe42:	e9 02 ff ff ff       	jmp    c001fd49 <IDE::open(int, int, void*)+0x203>
c001fe47:	52                   	push   edx
c001fe48:	52                   	push   edx
c001fe49:	6a 00                	push   0x0
c001fe4b:	53                   	push   ebx
c001fe4c:	e8 7d fa ff ff       	call   c001f8ce <IDE::prepareInterrupt(unsigned char)>
c001fe51:	59                   	pop    ecx
c001fe52:	5e                   	pop    esi
c001fe53:	6a 01                	push   0x1
c001fe55:	53                   	push   ebx
c001fe56:	e8 73 fa ff ff       	call   c001f8ce <IDE::prepareInterrupt(unsigned char)>
c001fe5b:	83 c4 0c             	add    esp,0xc
c001fe5e:	6a 00                	push   0x0
c001fe60:	6a 00                	push   0x0
c001fe62:	53                   	push   ebx
c001fe63:	e8 98 fc ff ff       	call   c001fb00 <IDE::enableIRQs(unsigned char, bool)>
c001fe68:	83 c4 0c             	add    esp,0xc
c001fe6b:	6a 00                	push   0x0
c001fe6d:	6a 01                	push   0x1
c001fe6f:	53                   	push   ebx
c001fe70:	e8 8b fc ff ff       	call   c001fb00 <IDE::enableIRQs(unsigned char, bool)>
c001fe75:	83 c4 10             	add    esp,0x10
c001fe78:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001fe7f:	74 40                	je     c001fec1 <IDE::open(int, int, void*)+0x37b>
c001fe81:	83 ec 0c             	sub    esp,0xc
c001fe84:	68 1b 7e 02 c0       	push   0xc0027e1b
c001fe89:	e8 c3 23 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001fe8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe91:	6a 01                	push   0x1
c001fe93:	68 c8 fa 01 c0       	push   0xc001fac8
c001fe98:	6a 0e                	push   0xe
c001fe9a:	53                   	push   ebx
c001fe9b:	e8 10 37 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001fea0:	83 c4 14             	add    esp,0x14
c001fea3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001fea9:	53                   	push   ebx
c001feaa:	6a 01                	push   0x1
c001feac:	68 e4 fa 01 c0       	push   0xc001fae4
c001feb1:	6a 0f                	push   0xf
c001feb3:	53                   	push   ebx
c001feb4:	e8 f7 36 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001feb9:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001febf:	eb 4a                	jmp    c001ff0b <IDE::open(int, int, void*)+0x3c5>
c001fec1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001fecb:	50                   	push   eax
c001fecc:	6a 0f                	push   0xf
c001fece:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001fed4:	68 37 7e 02 c0       	push   0xc0027e37
c001fed9:	e8 73 23 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c001fede:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fee1:	6a 00                	push   0x0
c001fee3:	68 c8 fa 01 c0       	push   0xc001fac8
c001fee8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001feee:	53                   	push   ebx
c001feef:	e8 bc 36 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001fef4:	83 c4 14             	add    esp,0x14
c001fef7:	53                   	push   ebx
c001fef8:	6a 00                	push   0x0
c001fefa:	68 e4 fa 01 c0       	push   0xc001fae4
c001feff:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ff05:	53                   	push   ebx
c001ff06:	e8 a5 36 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ff0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff0d:	83 c4 20             	add    esp,0x20
c001ff10:	83 ec 0c             	sub    esp,0xc
c001ff13:	53                   	push   ebx
c001ff14:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ff17:	83 c4 0c             	add    esp,0xc
c001ff1a:	6a 07                	push   0x7
c001ff1c:	6a 00                	push   0x0
c001ff1e:	53                   	push   ebx
c001ff1f:	e8 90 fa ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c001ff24:	83 c4 0c             	add    esp,0xc
c001ff27:	6a 07                	push   0x7
c001ff29:	6a 01                	push   0x1
c001ff2b:	53                   	push   ebx
c001ff2c:	e8 83 fa ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c001ff31:	83 c4 0c             	add    esp,0xc
c001ff34:	6a 01                	push   0x1
c001ff36:	6a 00                	push   0x0
c001ff38:	53                   	push   ebx
c001ff39:	e8 c2 fb ff ff       	call   c001fb00 <IDE::enableIRQs(unsigned char, bool)>
c001ff3e:	83 c4 0c             	add    esp,0xc
c001ff41:	6a 01                	push   0x1
c001ff43:	6a 01                	push   0x1
c001ff45:	53                   	push   ebx
c001ff46:	e8 b5 fb ff ff       	call   c001fb00 <IDE::enableIRQs(unsigned char, bool)>
c001ff4b:	83 c4 2c             	add    esp,0x2c
c001ff4e:	31 c0                	xor    eax,eax
c001ff50:	5b                   	pop    ebx
c001ff51:	5e                   	pop    esi
c001ff52:	5f                   	pop    edi
c001ff53:	5d                   	pop    ebp
c001ff54:	c3                   	ret    
c001ff55:	90                   	nop

c001ff56 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ff56:	55                   	push   ebp
c001ff57:	57                   	push   edi
c001ff58:	56                   	push   esi
c001ff59:	53                   	push   ebx
c001ff5a:	83 ec 1c             	sub    esp,0x1c
c001ff5d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff61:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ff65:	8d 50 f8             	lea    edx,[eax-0x8]
c001ff68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ff6c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ff70:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ff74:	80 fa 03             	cmp    dl,0x3
c001ff77:	77 5d                	ja     c001ffd6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ff79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ff7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff81:	0f b6 db             	movzx  ebx,bl
c001ff84:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ff87:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ff8b:	83 ca 80             	or     edx,0xffffff80
c001ff8e:	0f b6 d2             	movzx  edx,dl
c001ff91:	52                   	push   edx
c001ff92:	6a 0c                	push   0xc
c001ff94:	53                   	push   ebx
c001ff95:	56                   	push   esi
c001ff96:	e8 59 f9 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff9b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ffa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ffa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ffa8:	0f b6 c0             	movzx  eax,al
c001ffab:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ffaf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ffb1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ffb6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ffba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ffbe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ffc2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ffca:	83 c4 2c             	add    esp,0x2c
c001ffcd:	5b                   	pop    ebx
c001ffce:	5e                   	pop    esi
c001ffcf:	5f                   	pop    edi
c001ffd0:	5d                   	pop    ebp
c001ffd1:	e9 1e f9 ff ff       	jmp    c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffd6:	3c 07                	cmp    al,0x7
c001ffd8:	77 10                	ja     c001ffea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ffda:	0f b6 db             	movzx  ebx,bl
c001ffdd:	0f b6 d0             	movzx  edx,al
c001ffe0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ffe8:	eb 2d                	jmp    c0020017 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ffea:	3c 0d                	cmp    al,0xd
c001ffec:	77 13                	ja     c0020001 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ffee:	0f b6 db             	movzx  ebx,bl
c001fff1:	0f b6 c0             	movzx  eax,al
c001fff4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001fffb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ffff:	eb 16                	jmp    c0020017 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020001:	3c 15                	cmp    al,0x15
c0020003:	77 14                	ja     c0020019 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020005:	0f b6 db             	movzx  ebx,bl
c0020008:	0f b6 c0             	movzx  eax,al
c002000b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020013:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020017:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020019:	83 c4 1c             	add    esp,0x1c
c002001c:	5b                   	pop    ebx
c002001d:	5e                   	pop    esi
c002001e:	5f                   	pop    edi
c002001f:	5d                   	pop    ebp
c0020020:	c3                   	ret    
c0020021:	90                   	nop

c0020022 <IDE::detect()>:
c0020022:	55                   	push   ebp
c0020023:	57                   	push   edi
c0020024:	56                   	push   esi
c0020025:	53                   	push   ebx
c0020026:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002002c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020033:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002003a:	0f 85 be 02 00 00    	jne    c00202fe <IDE::detect()+0x2dc>
c0020040:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020047:	31 f6                	xor    esi,esi
c0020049:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020051:	31 ed                	xor    ebp,ebp
c0020053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020057:	c1 e0 06             	shl    eax,0x6
c002005a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020062:	89 e8                	mov    eax,ebp
c0020064:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020068:	c1 e0 04             	shl    eax,0x4
c002006b:	83 c8 a0             	or     eax,0xffffffa0
c002006e:	0f b6 c0             	movzx  eax,al
c0020071:	50                   	push   eax
c0020072:	6a 06                	push   0x6
c0020074:	56                   	push   esi
c0020075:	53                   	push   ebx
c0020076:	e8 79 f8 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002007b:	83 c4 0c             	add    esp,0xc
c002007e:	6a 0c                	push   0xc
c0020080:	56                   	push   esi
c0020081:	53                   	push   ebx
c0020082:	e8 2d f9 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c0020087:	83 c4 0c             	add    esp,0xc
c002008a:	6a 0c                	push   0xc
c002008c:	56                   	push   esi
c002008d:	53                   	push   ebx
c002008e:	e8 21 f9 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c0020093:	83 c4 0c             	add    esp,0xc
c0020096:	6a 0c                	push   0xc
c0020098:	56                   	push   esi
c0020099:	53                   	push   ebx
c002009a:	e8 15 f9 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c002009f:	83 c4 0c             	add    esp,0xc
c00200a2:	6a 0c                	push   0xc
c00200a4:	56                   	push   esi
c00200a5:	53                   	push   ebx
c00200a6:	e8 09 f9 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00200ab:	68 ec 00 00 00       	push   0xec
c00200b0:	6a 07                	push   0x7
c00200b2:	56                   	push   esi
c00200b3:	53                   	push   ebx
c00200b4:	e8 3b f8 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200b9:	83 c4 1c             	add    esp,0x1c
c00200bc:	6a 0c                	push   0xc
c00200be:	56                   	push   esi
c00200bf:	53                   	push   ebx
c00200c0:	e8 ef f8 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00200c5:	83 c4 0c             	add    esp,0xc
c00200c8:	6a 0c                	push   0xc
c00200ca:	56                   	push   esi
c00200cb:	53                   	push   ebx
c00200cc:	e8 e3 f8 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00200d1:	83 c4 0c             	add    esp,0xc
c00200d4:	6a 0c                	push   0xc
c00200d6:	56                   	push   esi
c00200d7:	53                   	push   ebx
c00200d8:	e8 d7 f8 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00200dd:	83 c4 0c             	add    esp,0xc
c00200e0:	6a 0c                	push   0xc
c00200e2:	56                   	push   esi
c00200e3:	53                   	push   ebx
c00200e4:	e8 cb f8 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00200e9:	83 c4 0c             	add    esp,0xc
c00200ec:	6a 0c                	push   0xc
c00200ee:	56                   	push   esi
c00200ef:	53                   	push   ebx
c00200f0:	e8 bf f8 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00200f5:	83 c4 10             	add    esp,0x10
c00200f8:	84 c0                	test   al,al
c00200fa:	0f 84 8b 01 00 00    	je     c002028b <IDE::detect()+0x269>
c0020100:	31 ff                	xor    edi,edi
c0020102:	50                   	push   eax
c0020103:	6a 0c                	push   0xc
c0020105:	56                   	push   esi
c0020106:	53                   	push   ebx
c0020107:	e8 a8 f8 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c002010c:	83 c4 10             	add    esp,0x10
c002010f:	a8 01                	test   al,0x1
c0020111:	0f 85 8e 01 00 00    	jne    c00202a5 <IDE::detect()+0x283>
c0020117:	84 c0                	test   al,al
c0020119:	78 04                	js     c002011f <IDE::detect()+0xfd>
c002011b:	a8 08                	test   al,0x8
c002011d:	75 27                	jne    c0020146 <IDE::detect()+0x124>
c002011f:	47                   	inc    edi
c0020120:	81 ff 17 01 00 00    	cmp    edi,0x117
c0020126:	7e da                	jle    c0020102 <IDE::detect()+0xe0>
c0020128:	50                   	push   eax
c0020129:	50                   	push   eax
c002012a:	6a 00                	push   0x0
c002012c:	68 40 4b 4c 00       	push   0x4c4b40
c0020131:	e8 74 bd ff ff       	call   c001beaa <nanoSleep(unsigned long long)>
c0020136:	83 c4 10             	add    esp,0x10
c0020139:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002013f:	75 c1                	jne    c0020102 <IDE::detect()+0xe0>
c0020141:	e9 5f 01 00 00       	jmp    c00202a5 <IDE::detect()+0x283>
c0020146:	31 c9                	xor    ecx,ecx
c0020148:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002014c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	68 80 00 00 00       	push   0x80
c0020158:	57                   	push   edi
c0020159:	6a 00                	push   0x0
c002015b:	56                   	push   esi
c002015c:	53                   	push   ebx
c002015d:	e8 f4 fd ff ff       	call   c001ff56 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0020162:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0020167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002016b:	89 d1                	mov    ecx,edx
c002016d:	c1 e0 06             	shl    eax,0x6
c0020170:	01 d8                	add    eax,ebx
c0020172:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0020179:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0020180:	89 f2                	mov    edx,esi
c0020182:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0020188:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002018c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0020192:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020196:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002019d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00201a5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00201ac:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00201b4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00201ba:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00201c1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00201c7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00201cb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00201cf:	83 c4 20             	add    esp,0x20
c00201d2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00201d5:	83 c0 02             	add    eax,0x2
c00201d8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00201de:	83 c7 02             	add    edi,0x2
c00201e1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00201e4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00201ea:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00201ee:	75 e2                	jne    c00201d2 <IDE::detect()+0x1b0>
c00201f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201f4:	c1 e0 06             	shl    eax,0x6
c00201f7:	01 d8                	add    eax,ebx
c00201f9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00201ff:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0020206:	66 c1 ea 09          	shr    dx,0x9
c002020a:	83 e2 01             	and    edx,0x1
c002020d:	84 c9                	test   cl,cl
c002020f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0020215:	75 2f                	jne    c0020246 <IDE::detect()+0x224>
c0020217:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002021d:	85 c0                	test   eax,eax
c002021f:	74 66                	je     c0020287 <IDE::detect()+0x265>
c0020221:	50                   	push   eax
c0020222:	55                   	push   ebp
c0020223:	56                   	push   esi
c0020224:	68 53 7e 02 c0       	push   0xc0027e53
c0020229:	e8 23 20 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002022e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0020235:	e8 28 1f ff ff       	call   c0012162 <operator new(unsigned long)>
c002023a:	89 c7                	mov    edi,eax
c002023c:	89 04 24             	mov    DWORD PTR [esp],eax
c002023f:	e8 e8 02 00 00       	call   c002052c <ATA::ATA()>
c0020244:	eb 28                	jmp    c002026e <IDE::detect()+0x24c>
c0020246:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002024c:	55                   	push   ebp
c002024d:	56                   	push   esi
c002024e:	68 82 7e 02 c0       	push   0xc0027e82
c0020253:	e8 f9 1f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020258:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002025f:	e8 fe 1e ff ff       	call   c0012162 <operator new(unsigned long)>
c0020264:	89 c7                	mov    edi,eax
c0020266:	89 04 24             	mov    DWORD PTR [esp],eax
c0020269:	e8 ee 08 00 00       	call   c0020b5c <ATAPI::ATAPI()>
c002026e:	5a                   	pop    edx
c002026f:	59                   	pop    ecx
c0020270:	57                   	push   edi
c0020271:	53                   	push   ebx
c0020272:	e8 e5 33 ff ff       	call   c001365c <Device::addChild(Device*)>
c0020277:	8b 07                	mov    eax,DWORD PTR [edi]
c0020279:	53                   	push   ebx
c002027a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002027e:	6a 00                	push   0x0
c0020280:	57                   	push   edi
c0020281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020284:	83 c4 20             	add    esp,0x20
c0020287:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002028b:	4d                   	dec    ebp
c002028c:	74 0a                	je     c0020298 <IDE::detect()+0x276>
c002028e:	bd 01 00 00 00       	mov    ebp,0x1
c0020293:	e9 bb fd ff ff       	jmp    c0020053 <IDE::detect()+0x31>
c0020298:	4e                   	dec    esi
c0020299:	74 63                	je     c00202fe <IDE::detect()+0x2dc>
c002029b:	be 01 00 00 00       	mov    esi,0x1
c00202a0:	e9 ac fd ff ff       	jmp    c0020051 <IDE::detect()+0x2f>
c00202a5:	50                   	push   eax
c00202a6:	6a 04                	push   0x4
c00202a8:	56                   	push   esi
c00202a9:	53                   	push   ebx
c00202aa:	e8 05 f7 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00202af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00202b3:	83 c4 0c             	add    esp,0xc
c00202b6:	6a 05                	push   0x5
c00202b8:	56                   	push   esi
c00202b9:	53                   	push   ebx
c00202ba:	e8 f5 f6 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00202bf:	83 c4 10             	add    esp,0x10
c00202c2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00202c6:	80 fa 14             	cmp    dl,0x14
c00202c9:	75 04                	jne    c00202cf <IDE::detect()+0x2ad>
c00202cb:	3c eb                	cmp    al,0xeb
c00202cd:	eb 07                	jmp    c00202d6 <IDE::detect()+0x2b4>
c00202cf:	3c 96                	cmp    al,0x96
c00202d1:	75 b8                	jne    c002028b <IDE::detect()+0x269>
c00202d3:	80 fa 69             	cmp    dl,0x69
c00202d6:	75 b3                	jne    c002028b <IDE::detect()+0x269>
c00202d8:	68 a1 00 00 00       	push   0xa1
c00202dd:	6a 07                	push   0x7
c00202df:	56                   	push   esi
c00202e0:	53                   	push   ebx
c00202e1:	e8 0e f6 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202e6:	5f                   	pop    edi
c00202e7:	58                   	pop    eax
c00202e8:	6a 00                	push   0x0
c00202ea:	68 40 42 0f 00       	push   0xf4240
c00202ef:	e8 b6 bb ff ff       	call   c001beaa <nanoSleep(unsigned long long)>
c00202f4:	83 c4 10             	add    esp,0x10
c00202f7:	b1 01                	mov    cl,0x1
c00202f9:	e9 4a fe ff ff       	jmp    c0020148 <IDE::detect()+0x126>
c00202fe:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020304:	5b                   	pop    ebx
c0020305:	5e                   	pop    esi
c0020306:	5f                   	pop    edi
c0020307:	5d                   	pop    ebp
c0020308:	c3                   	ret    
c0020309:	90                   	nop

c002030a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002030a:	55                   	push   ebp
c002030b:	57                   	push   edi
c002030c:	56                   	push   esi
c002030d:	53                   	push   ebx
c002030e:	83 ec 1c             	sub    esp,0x1c
c0020311:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020315:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020319:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002031d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0020321:	88 c3                	mov    bl,al
c0020323:	84 c0                	test   al,al
c0020325:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020329:	0f 84 67 01 00 00    	je     c0020496 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002032f:	83 ec 0c             	sub    esp,0xc
c0020332:	68 b3 7e 02 c0       	push   0xc0027eb3
c0020337:	e8 15 1f ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002033c:	83 c4 10             	add    esp,0x10
c002033f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020343:	3c 01                	cmp    al,0x1
c0020345:	75 17                	jne    c002035e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0020347:	83 ec 0c             	sub    esp,0xc
c002034a:	b3 13                	mov    bl,0x13
c002034c:	68 bf 7e 02 c0       	push   0xc0027ebf
c0020351:	e8 fb 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020356:	83 c4 10             	add    esp,0x10
c0020359:	e9 25 01 00 00       	jmp    c0020483 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002035e:	3c 02                	cmp    al,0x2
c0020360:	0f 85 ef 00 00 00    	jne    c0020455 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0020366:	d1 e6                	shl    esi,1
c0020368:	09 ee                	or     esi,ebp
c002036a:	52                   	push   edx
c002036b:	89 f0                	mov    eax,esi
c002036d:	6a 01                	push   0x1
c002036f:	0f b6 f0             	movzx  esi,al
c0020372:	c1 e6 06             	shl    esi,0x6
c0020375:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002037d:	50                   	push   eax
c002037e:	57                   	push   edi
c002037f:	e8 30 f6 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c0020384:	83 c4 10             	add    esp,0x10
c0020387:	89 c6                	mov    esi,eax
c0020389:	a8 01                	test   al,0x1
c002038b:	74 12                	je     c002039f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002038d:	83 ec 0c             	sub    esp,0xc
c0020390:	b3 07                	mov    bl,0x7
c0020392:	68 d4 7e 02 c0       	push   0xc0027ed4
c0020397:	e8 b5 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002039c:	83 c4 10             	add    esp,0x10
c002039f:	f7 c6 02 00 00 00    	test   esi,0x2
c00203a5:	74 12                	je     c00203b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00203a7:	83 ec 0c             	sub    esp,0xc
c00203aa:	b3 03                	mov    bl,0x3
c00203ac:	68 f2 7e 02 c0       	push   0xc0027ef2
c00203b1:	e8 9b 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00203b6:	83 c4 10             	add    esp,0x10
c00203b9:	f7 c6 04 00 00 00    	test   esi,0x4
c00203bf:	74 12                	je     c00203d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00203c1:	83 ec 0c             	sub    esp,0xc
c00203c4:	b3 14                	mov    bl,0x14
c00203c6:	68 12 7f 02 c0       	push   0xc0027f12
c00203cb:	e8 81 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00203d0:	83 c4 10             	add    esp,0x10
c00203d3:	f7 c6 08 00 00 00    	test   esi,0x8
c00203d9:	74 12                	je     c00203ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00203db:	83 ec 0c             	sub    esp,0xc
c00203de:	b3 03                	mov    bl,0x3
c00203e0:	68 f2 7e 02 c0       	push   0xc0027ef2
c00203e5:	e8 67 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00203ea:	83 c4 10             	add    esp,0x10
c00203ed:	f7 c6 10 00 00 00    	test   esi,0x10
c00203f3:	74 12                	je     c0020407 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00203f5:	83 ec 0c             	sub    esp,0xc
c00203f8:	b3 15                	mov    bl,0x15
c00203fa:	68 2a 7f 02 c0       	push   0xc0027f2a
c00203ff:	e8 4d 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020404:	83 c4 10             	add    esp,0x10
c0020407:	f7 c6 20 00 00 00    	test   esi,0x20
c002040d:	74 12                	je     c0020421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002040f:	83 ec 0c             	sub    esp,0xc
c0020412:	b3 03                	mov    bl,0x3
c0020414:	68 f2 7e 02 c0       	push   0xc0027ef2
c0020419:	e8 33 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c002041e:	83 c4 10             	add    esp,0x10
c0020421:	f7 c6 40 00 00 00    	test   esi,0x40
c0020427:	74 12                	je     c002043b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0020429:	83 ec 0c             	sub    esp,0xc
c002042c:	b3 16                	mov    bl,0x16
c002042e:	68 44 7f 02 c0       	push   0xc0027f44
c0020433:	e8 19 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020438:	83 c4 10             	add    esp,0x10
c002043b:	89 f0                	mov    eax,esi
c002043d:	84 c0                	test   al,al
c002043f:	79 42                	jns    c0020483 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0020441:	83 ec 0c             	sub    esp,0xc
c0020444:	b3 0d                	mov    bl,0xd
c0020446:	68 65 7f 02 c0       	push   0xc0027f65
c002044b:	e8 01 1e ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020450:	83 c4 10             	add    esp,0x10
c0020453:	eb 2e                	jmp    c0020483 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0020455:	3c 03                	cmp    al,0x3
c0020457:	75 14                	jne    c002046d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0020459:	83 ec 0c             	sub    esp,0xc
c002045c:	b3 17                	mov    bl,0x17
c002045e:	68 79 7f 02 c0       	push   0xc0027f79
c0020463:	e8 e9 1d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020468:	83 c4 10             	add    esp,0x10
c002046b:	eb 16                	jmp    c0020483 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002046d:	3c 04                	cmp    al,0x4
c002046f:	75 12                	jne    c0020483 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0020471:	83 ec 0c             	sub    esp,0xc
c0020474:	b3 08                	mov    bl,0x8
c0020476:	68 8f 7f 02 c0       	push   0xc0027f8f
c002047b:	e8 d1 1d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020480:	83 c4 10             	add    esp,0x10
c0020483:	50                   	push   eax
c0020484:	50                   	push   eax
c0020485:	0f b6 c3             	movzx  eax,bl
c0020488:	50                   	push   eax
c0020489:	68 a7 7f 02 c0       	push   0xc0027fa7
c002048e:	e8 be 1d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020493:	83 c4 10             	add    esp,0x10
c0020496:	83 c4 1c             	add    esp,0x1c
c0020499:	88 d8                	mov    al,bl
c002049b:	5b                   	pop    ebx
c002049c:	5e                   	pop    esi
c002049d:	5f                   	pop    edi
c002049e:	5d                   	pop    ebp
c002049f:	c3                   	ret    

c00204a0 <IDE::polling(unsigned char, unsigned int)>:
c00204a0:	57                   	push   edi
c00204a1:	56                   	push   esi
c00204a2:	53                   	push   ebx
c00204a3:	bb 04 00 00 00       	mov    ebx,0x4
c00204a8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00204ac:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00204b1:	52                   	push   edx
c00204b2:	6a 0c                	push   0xc
c00204b4:	56                   	push   esi
c00204b5:	57                   	push   edi
c00204b6:	e8 f9 f4 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00204bb:	83 c4 10             	add    esp,0x10
c00204be:	4b                   	dec    ebx
c00204bf:	75 f0                	jne    c00204b1 <IDE::polling(unsigned char, unsigned int)+0x11>
c00204c1:	bb a0 86 01 00       	mov    ebx,0x186a0
c00204c6:	50                   	push   eax
c00204c7:	6a 0c                	push   0xc
c00204c9:	56                   	push   esi
c00204ca:	57                   	push   edi
c00204cb:	e8 e4 f4 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00204d0:	83 c4 10             	add    esp,0x10
c00204d3:	a8 01                	test   al,0x1
c00204d5:	74 12                	je     c00204e9 <IDE::polling(unsigned char, unsigned int)+0x49>
c00204d7:	83 ec 0c             	sub    esp,0xc
c00204da:	68 c1 7f 02 c0       	push   0xc0027fc1
c00204df:	e8 6d 1d ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00204e4:	83 c4 10             	add    esp,0x10
c00204e7:	eb 17                	jmp    c0020500 <IDE::polling(unsigned char, unsigned int)+0x60>
c00204e9:	a8 20                	test   al,0x20
c00204eb:	75 0f                	jne    c00204fc <IDE::polling(unsigned char, unsigned int)+0x5c>
c00204ed:	4b                   	dec    ebx
c00204ee:	74 10                	je     c0020500 <IDE::polling(unsigned char, unsigned int)+0x60>
c00204f0:	84 c0                	test   al,al
c00204f2:	78 d2                	js     c00204c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c00204f4:	a8 08                	test   al,0x8
c00204f6:	74 ce                	je     c00204c6 <IDE::polling(unsigned char, unsigned int)+0x26>
c00204f8:	31 c0                	xor    eax,eax
c00204fa:	eb 06                	jmp    c0020502 <IDE::polling(unsigned char, unsigned int)+0x62>
c00204fc:	b0 01                	mov    al,0x1
c00204fe:	eb 02                	jmp    c0020502 <IDE::polling(unsigned char, unsigned int)+0x62>
c0020500:	b0 02                	mov    al,0x2
c0020502:	5b                   	pop    ebx
c0020503:	5e                   	pop    esi
c0020504:	5f                   	pop    edi
c0020505:	c3                   	ret    

c0020506 <ATA::close(int, int, void*)>:
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002050d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020513:	85 c0                	test   eax,eax
c0020515:	74 0c                	je     c0020523 <ATA::close(int, int, void*)+0x1d>
c0020517:	83 ec 0c             	sub    esp,0xc
c002051a:	8b 10                	mov    edx,DWORD PTR [eax]
c002051c:	50                   	push   eax
c002051d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020520:	83 c4 10             	add    esp,0x10
c0020523:	31 c0                	xor    eax,eax
c0020525:	83 c4 0c             	add    esp,0xc
c0020528:	c3                   	ret    
c0020529:	90                   	nop

c002052a <ATA::powerSaving(PowerSavingLevel)>:
c002052a:	c3                   	ret    
c002052b:	90                   	nop

c002052c <ATA::ATA()>:
c002052c:	83 ec 0c             	sub    esp,0xc
c002052f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020533:	83 ec 04             	sub    esp,0x4
c0020536:	68 00 02 00 00       	push   0x200
c002053b:	68 04 80 02 c0       	push   0xc0028004
c0020540:	50                   	push   eax
c0020541:	e8 1c 35 ff ff       	call   c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020546:	83 c4 10             	add    esp,0x10
c0020549:	ba 30 80 02 c0       	mov    edx,0xc0028030
c002054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020552:	89 10                	mov    DWORD PTR [eax],edx
c0020554:	90                   	nop
c0020555:	83 c4 0c             	add    esp,0xc
c0020558:	c3                   	ret    
c0020559:	90                   	nop

c002055a <ATA::flush(bool)>:
c002055a:	53                   	push   ebx
c002055b:	83 ec 08             	sub    esp,0x8
c002055e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0020563:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020567:	19 c0                	sbb    eax,eax
c0020569:	83 e0 fd             	and    eax,0xfffffffd
c002056c:	05 ea 00 00 00       	add    eax,0xea
c0020571:	50                   	push   eax
c0020572:	6a 07                	push   0x7
c0020574:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002057b:	50                   	push   eax
c002057c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020582:	e8 6d f3 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020587:	83 c4 0c             	add    esp,0xc
c002058a:	6a 00                	push   0x0
c002058c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020593:	50                   	push   eax
c0020594:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002059a:	e8 01 ff ff ff       	call   c00204a0 <IDE::polling(unsigned char, unsigned int)>
c002059f:	83 c4 18             	add    esp,0x18
c00205a2:	5b                   	pop    ebx
c00205a3:	c3                   	ret    

c00205a4 <ATA::readyForCommand()>:
c00205a4:	56                   	push   esi
c00205a5:	53                   	push   ebx
c00205a6:	31 db                	xor    ebx,ebx
c00205a8:	50                   	push   eax
c00205a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00205ad:	50                   	push   eax
c00205ae:	6a 0c                	push   0xc
c00205b0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00205b7:	50                   	push   eax
c00205b8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00205be:	e8 f1 f3 ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c00205c3:	83 c4 10             	add    esp,0x10
c00205c6:	a8 88                	test   al,0x88
c00205c8:	74 23                	je     c00205ed <ATA::readyForCommand()+0x49>
c00205ca:	43                   	inc    ebx
c00205cb:	83 fb 63             	cmp    ebx,0x63
c00205ce:	7e dd                	jle    c00205ad <ATA::readyForCommand()+0x9>
c00205d0:	51                   	push   ecx
c00205d1:	51                   	push   ecx
c00205d2:	6a 00                	push   0x0
c00205d4:	68 40 42 0f 00       	push   0xf4240
c00205d9:	e8 cc b8 ff ff       	call   c001beaa <nanoSleep(unsigned long long)>
c00205de:	83 c4 10             	add    esp,0x10
c00205e1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00205e7:	75 c4                	jne    c00205ad <ATA::readyForCommand()+0x9>
c00205e9:	31 c0                	xor    eax,eax
c00205eb:	eb 02                	jmp    c00205ef <ATA::readyForCommand()+0x4b>
c00205ed:	b0 01                	mov    al,0x1
c00205ef:	5a                   	pop    edx
c00205f0:	5b                   	pop    ebx
c00205f1:	5e                   	pop    esi
c00205f2:	c3                   	ret    
c00205f3:	90                   	nop

c00205f4 <ATA::access(unsigned long long, int, void*, bool)>:
c00205f4:	55                   	push   ebp
c00205f5:	57                   	push   edi
c00205f6:	56                   	push   esi
c00205f7:	53                   	push   ebx
c00205f8:	83 ec 2c             	sub    esp,0x2c
c00205fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00205ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020603:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020607:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002060b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002060f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020613:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020617:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002061d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020621:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020627:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002062b:	c1 e0 06             	shl    eax,0x6
c002062e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0020636:	74 5d                	je     c0020695 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0020638:	89 fa                	mov    edx,edi
c002063a:	89 f0                	mov    eax,esi
c002063c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0020640:	c1 ea 1c             	shr    edx,0x1c
c0020643:	89 d1                	mov    ecx,edx
c0020645:	09 c1                	or     ecx,eax
c0020647:	74 25                	je     c002066e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0020649:	31 ed                	xor    ebp,ebp
c002064b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0020652:	89 fa                	mov    edx,edi
c0020654:	89 f0                	mov    eax,esi
c0020656:	0f ad d0             	shrd   eax,edx,cl
c0020659:	d3 ea                	shr    edx,cl
c002065b:	f6 c1 20             	test   cl,0x20
c002065e:	74 02                	je     c0020662 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0020660:	89 d0                	mov    eax,edx
c0020662:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0020666:	45                   	inc    ebp
c0020667:	83 fd 06             	cmp    ebp,0x6
c002066a:	75 df                	jne    c002064b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002066c:	eb 76                	jmp    c00206e4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002066e:	89 f0                	mov    eax,esi
c0020670:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0020675:	89 fa                	mov    edx,edi
c0020677:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002067e:	0f ac d0 10          	shrd   eax,edx,0x10
c0020682:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0020687:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002068b:	c1 ee 18             	shr    esi,0x18
c002068e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0020693:	eb 56                	jmp    c00206eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0020695:	6a 00                	push   0x0
c0020697:	6a 3f                	push   0x3f
c0020699:	57                   	push   edi
c002069a:	56                   	push   esi
c002069b:	e8 dc 1e 00 00       	call   c002257c <__umoddi3>
c00206a0:	83 c4 10             	add    esp,0x10
c00206a3:	40                   	inc    eax
c00206a4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00206a8:	6a 00                	push   0x0
c00206aa:	68 f0 03 00 00       	push   0x3f0
c00206af:	57                   	push   edi
c00206b0:	56                   	push   esi
c00206b1:	e8 c6 1d 00 00       	call   c002247c <__udivdi3>
c00206b6:	83 c4 10             	add    esp,0x10
c00206b9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00206be:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00206c5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00206ca:	6a 00                	push   0x0
c00206cc:	6a 3f                	push   0x3f
c00206ce:	57                   	push   edi
c00206cf:	56                   	push   esi
c00206d0:	e8 a7 1d 00 00       	call   c002247c <__udivdi3>
c00206d5:	83 c4 10             	add    esp,0x10
c00206d8:	89 c6                	mov    esi,eax
c00206da:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00206df:	83 e6 0f             	and    esi,0xf
c00206e2:	eb 07                	jmp    c00206eb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00206e4:	31 f6                	xor    esi,esi
c00206e6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00206eb:	bf 01 00 00 00       	mov    edi,0x1
c00206f0:	50                   	push   eax
c00206f1:	6a 00                	push   0x0
c00206f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00206fa:	50                   	push   eax
c00206fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00206ff:	e8 fc f3 ff ff       	call   c001fb00 <IDE::enableIRQs(unsigned char, bool)>
c0020704:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020707:	e8 98 fe ff ff       	call   c00205a4 <ATA::readyForCommand()>
c002070c:	83 c4 10             	add    esp,0x10
c002070f:	84 c0                	test   al,al
c0020711:	0f 84 50 02 00 00    	je     c0020967 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0020717:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002071d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020723:	c1 e0 04             	shl    eax,0x4
c0020726:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002072d:	09 c6                	or     esi,eax
c002072f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0020734:	75 05                	jne    c002073b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0020736:	83 ce a0             	or     esi,0xffffffa0
c0020739:	eb 03                	jmp    c002073e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002073b:	83 ce e0             	or     esi,0xffffffe0
c002073e:	89 f0                	mov    eax,esi
c0020740:	0f b6 f0             	movzx  esi,al
c0020743:	56                   	push   esi
c0020744:	6a 06                	push   0x6
c0020746:	51                   	push   ecx
c0020747:	52                   	push   edx
c0020748:	e8 a7 f1 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002074d:	83 c4 10             	add    esp,0x10
c0020750:	6a 00                	push   0x0
c0020752:	6a 01                	push   0x1
c0020754:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002075b:	50                   	push   eax
c002075c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020762:	e8 8d f1 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020767:	83 c4 10             	add    esp,0x10
c002076a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002076f:	75 6e                	jne    c00207df <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0020771:	6a 00                	push   0x0
c0020773:	6a 08                	push   0x8
c0020775:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002077c:	50                   	push   eax
c002077d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020783:	e8 6c f1 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020788:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002078d:	50                   	push   eax
c002078e:	6a 09                	push   0x9
c0020790:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020797:	50                   	push   eax
c0020798:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002079e:	e8 51 f1 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207a3:	83 c4 20             	add    esp,0x20
c00207a6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00207ab:	50                   	push   eax
c00207ac:	6a 0a                	push   0xa
c00207ae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00207b5:	50                   	push   eax
c00207b6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00207bc:	e8 33 f1 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207c1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00207c6:	50                   	push   eax
c00207c7:	6a 0b                	push   0xb
c00207c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00207d0:	50                   	push   eax
c00207d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00207d7:	e8 18 f1 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207dc:	83 c4 20             	add    esp,0x20
c00207df:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00207e4:	50                   	push   eax
c00207e5:	6a 02                	push   0x2
c00207e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00207ee:	50                   	push   eax
c00207ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00207f5:	e8 fa f0 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00207fa:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00207ff:	50                   	push   eax
c0020800:	6a 03                	push   0x3
c0020802:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020809:	50                   	push   eax
c002080a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020810:	e8 df f0 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020815:	83 c4 20             	add    esp,0x20
c0020818:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002081d:	50                   	push   eax
c002081e:	6a 04                	push   0x4
c0020820:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020827:	50                   	push   eax
c0020828:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002082e:	e8 c1 f0 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020833:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020838:	50                   	push   eax
c0020839:	6a 05                	push   0x5
c002083b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020842:	50                   	push   eax
c0020843:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020849:	e8 a6 f0 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002084e:	83 c4 20             	add    esp,0x20
c0020851:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0020856:	0f 94 c0             	sete   al
c0020859:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002085e:	74 09                	je     c0020869 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0020860:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0020867:	eb 07                	jmp    c0020870 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020869:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0020870:	0f b6 c0             	movzx  eax,al
c0020873:	50                   	push   eax
c0020874:	6a 07                	push   0x7
c0020876:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002087d:	50                   	push   eax
c002087e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020884:	e8 6b f0 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020889:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002088d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0020891:	83 c4 10             	add    esp,0x10
c0020894:	85 f6                	test   esi,esi
c0020896:	0f 84 ac 00 00 00    	je     c0020948 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002089c:	50                   	push   eax
c002089d:	6a 01                	push   0x1
c002089f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00208a6:	50                   	push   eax
c00208a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00208ad:	e8 ee fb ff ff       	call   c00204a0 <IDE::polling(unsigned char, unsigned int)>
c00208b2:	83 c4 10             	add    esp,0x10
c00208b5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00208bb:	84 c0                	test   al,al
c00208bd:	74 20                	je     c00208df <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00208bf:	0f b6 f8             	movzx  edi,al
c00208c2:	0f b6 d2             	movzx  edx,dl
c00208c5:	57                   	push   edi
c00208c6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00208cd:	50                   	push   eax
c00208ce:	52                   	push   edx
c00208cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00208d5:	e8 30 fa ff ff       	call   c002030a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00208da:	e9 85 00 00 00       	jmp    c0020964 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00208df:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00208e4:	74 41                	je     c0020927 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00208e6:	31 c9                	xor    ecx,ecx
c00208e8:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00208ec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00208f0:	50                   	push   eax
c00208f1:	50                   	push   eax
c00208f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00208f9:	50                   	push   eax
c00208fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020900:	e8 dd ef ff ff       	call   c001f8e2 <IDE::getBase(unsigned char)>
c0020905:	89 c2                	mov    edx,eax
c0020907:	89 e8                	mov    eax,ebp
c0020909:	66 ef                	out    dx,ax
c002090b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002090f:	83 c4 10             	add    esp,0x10
c0020912:	41                   	inc    ecx
c0020913:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0020919:	75 cd                	jne    c00208e8 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c002091b:	4e                   	dec    esi
c002091c:	81 c7 00 02 00 00    	add    edi,0x200
c0020922:	e9 6d ff ff ff       	jmp    c0020894 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0020927:	0f b6 d2             	movzx  edx,dl
c002092a:	51                   	push   ecx
c002092b:	51                   	push   ecx
c002092c:	52                   	push   edx
c002092d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020933:	e8 aa ef ff ff       	call   c001f8e2 <IDE::getBase(unsigned char)>
c0020938:	b9 00 01 00 00       	mov    ecx,0x100
c002093d:	89 c2                	mov    edx,eax
c002093f:	fc                   	cld    
c0020940:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0020943:	83 c4 10             	add    esp,0x10
c0020946:	eb d3                	jmp    c002091b <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0020948:	31 ff                	xor    edi,edi
c002094a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002094f:	74 16                	je     c0020967 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0020951:	50                   	push   eax
c0020952:	50                   	push   eax
c0020953:	31 c0                	xor    eax,eax
c0020955:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002095a:	0f 94 c0             	sete   al
c002095d:	50                   	push   eax
c002095e:	53                   	push   ebx
c002095f:	e8 f6 fb ff ff       	call   c002055a <ATA::flush(bool)>
c0020964:	83 c4 10             	add    esp,0x10
c0020967:	83 c4 2c             	add    esp,0x2c
c002096a:	89 f8                	mov    eax,edi
c002096c:	5b                   	pop    ebx
c002096d:	5e                   	pop    esi
c002096e:	5f                   	pop    edi
c002096f:	5d                   	pop    ebp
c0020970:	c3                   	ret    
c0020971:	90                   	nop

c0020972 <ATA::read(unsigned long long, int, void*)>:
c0020972:	57                   	push   edi
c0020973:	b8 04 00 00 00       	mov    eax,0x4
c0020978:	56                   	push   esi
c0020979:	53                   	push   ebx
c002097a:	83 ec 10             	sub    esp,0x10
c002097d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020981:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020985:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0020988:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002098c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020990:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0020996:	77 3b                	ja     c00209d3 <ATA::read(unsigned long long, int, void*)+0x61>
c0020998:	b8 06 00 00 00       	mov    eax,0x6
c002099d:	85 d2                	test   edx,edx
c002099f:	74 32                	je     c00209d3 <ATA::read(unsigned long long, int, void*)+0x61>
c00209a1:	50                   	push   eax
c00209a2:	50                   	push   eax
c00209a3:	6a 00                	push   0x0
c00209a5:	52                   	push   edx
c00209a6:	53                   	push   ebx
c00209a7:	57                   	push   edi
c00209a8:	56                   	push   esi
c00209a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00209ad:	e8 42 fc ff ff       	call   c00205f4 <ATA::access(unsigned long long, int, void*, bool)>
c00209b2:	83 c4 20             	add    esp,0x20
c00209b5:	85 c0                	test   eax,eax
c00209b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209bb:	75 11                	jne    c00209ce <ATA::read(unsigned long long, int, void*)+0x5c>
c00209bd:	01 1d 04 b2 02 c0    	add    DWORD PTR ds:0xc002b204,ebx
c00209c3:	e8 74 f7 fe ff       	call   c001013c <VgaText::updateDiskUsage()>
c00209c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209cc:	eb 05                	jmp    c00209d3 <ATA::read(unsigned long long, int, void*)+0x61>
c00209ce:	b8 01 00 00 00       	mov    eax,0x1
c00209d3:	83 c4 10             	add    esp,0x10
c00209d6:	5b                   	pop    ebx
c00209d7:	5e                   	pop    esi
c00209d8:	5f                   	pop    edi
c00209d9:	c3                   	ret    

c00209da <ATA::write(unsigned long long, int, void*)>:
c00209da:	57                   	push   edi
c00209db:	b8 04 00 00 00       	mov    eax,0x4
c00209e0:	56                   	push   esi
c00209e1:	53                   	push   ebx
c00209e2:	83 ec 10             	sub    esp,0x10
c00209e5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00209e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00209ed:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00209f0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00209f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00209f8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00209fe:	77 3b                	ja     c0020a3b <ATA::write(unsigned long long, int, void*)+0x61>
c0020a00:	b8 06 00 00 00       	mov    eax,0x6
c0020a05:	85 d2                	test   edx,edx
c0020a07:	74 32                	je     c0020a3b <ATA::write(unsigned long long, int, void*)+0x61>
c0020a09:	50                   	push   eax
c0020a0a:	50                   	push   eax
c0020a0b:	6a 01                	push   0x1
c0020a0d:	52                   	push   edx
c0020a0e:	53                   	push   ebx
c0020a0f:	57                   	push   edi
c0020a10:	56                   	push   esi
c0020a11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020a15:	e8 da fb ff ff       	call   c00205f4 <ATA::access(unsigned long long, int, void*, bool)>
c0020a1a:	83 c4 20             	add    esp,0x20
c0020a1d:	85 c0                	test   eax,eax
c0020a1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a23:	75 11                	jne    c0020a36 <ATA::write(unsigned long long, int, void*)+0x5c>
c0020a25:	01 1d 00 b2 02 c0    	add    DWORD PTR ds:0xc002b200,ebx
c0020a2b:	e8 0c f7 fe ff       	call   c001013c <VgaText::updateDiskUsage()>
c0020a30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a34:	eb 05                	jmp    c0020a3b <ATA::write(unsigned long long, int, void*)+0x61>
c0020a36:	b8 01 00 00 00       	mov    eax,0x1
c0020a3b:	83 c4 10             	add    esp,0x10
c0020a3e:	5b                   	pop    ebx
c0020a3f:	5e                   	pop    esi
c0020a40:	5f                   	pop    edi
c0020a41:	c3                   	ret    

c0020a42 <ATA::detectCHS()>:
c0020a42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a46:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0020a4c:	c1 e0 06             	shl    eax,0x6
c0020a4f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020a55:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020a5f:	c7 44 24 04 13 80 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028013
c0020a67:	e9 a2 7f ff ff       	jmp    c0018a0e <Krnl::panic(char const*)>

c0020a6c <ATA::open(int, int, void*)>:
c0020a6c:	53                   	push   ebx
c0020a6d:	83 ec 08             	sub    esp,0x8
c0020a70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020a78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a7c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020a82:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020a88:	c1 e0 06             	shl    eax,0x6
c0020a8b:	01 d0                	add    eax,edx
c0020a8d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020a94:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020a9a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0020aa1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020aab:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0020ab1:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020ab8:	75 0c                	jne    c0020ac6 <ATA::open(int, int, void*)+0x5a>
c0020aba:	83 ec 0c             	sub    esp,0xc
c0020abd:	53                   	push   ebx
c0020abe:	e8 7f ff ff ff       	call   c0020a42 <ATA::detectCHS()>
c0020ac3:	83 c4 10             	add    esp,0x10
c0020ac6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020acc:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020ad2:	c1 e0 06             	shl    eax,0x6
c0020ad5:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020adc:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020ae6:	d1 e8                	shr    eax,1
c0020ae8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020aee:	6a 04                	push   0x4
c0020af0:	6a 0c                	push   0xc
c0020af2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020af9:	50                   	push   eax
c0020afa:	52                   	push   edx
c0020afb:	e8 f4 ed ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b00:	90                   	nop
c0020b01:	90                   	nop
c0020b02:	6a 00                	push   0x0
c0020b04:	6a 0c                	push   0xc
c0020b06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020b0d:	50                   	push   eax
c0020b0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020b14:	e8 db ed ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020b19:	83 c4 14             	add    esp,0x14
c0020b1c:	53                   	push   ebx
c0020b1d:	e8 a8 2f ff ff       	call   c0013aca <PhysicalDisk::startCache()>
c0020b22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020b25:	e8 80 4f ff ff       	call   c0015aaa <createPartitionsForDisk(PhysicalDisk*)>
c0020b2a:	31 c0                	xor    eax,eax
c0020b2c:	83 c4 18             	add    esp,0x18
c0020b2f:	5b                   	pop    ebx
c0020b30:	c3                   	ret    
c0020b31:	90                   	nop

c0020b32 <ATAPI::write(unsigned long long, int, void*)>:
c0020b32:	b8 03 00 00 00       	mov    eax,0x3
c0020b37:	c3                   	ret    

c0020b38 <ATAPI::close(int, int, void*)>:
c0020b38:	83 ec 0c             	sub    esp,0xc
c0020b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b3f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020b45:	85 c0                	test   eax,eax
c0020b47:	74 0c                	je     c0020b55 <ATAPI::close(int, int, void*)+0x1d>
c0020b49:	83 ec 0c             	sub    esp,0xc
c0020b4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0020b4e:	50                   	push   eax
c0020b4f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020b52:	83 c4 10             	add    esp,0x10
c0020b55:	31 c0                	xor    eax,eax
c0020b57:	83 c4 0c             	add    esp,0xc
c0020b5a:	c3                   	ret    
c0020b5b:	90                   	nop

c0020b5c <ATAPI::ATAPI()>:
c0020b5c:	83 ec 0c             	sub    esp,0xc
c0020b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b63:	83 ec 04             	sub    esp,0x4
c0020b66:	68 00 08 00 00       	push   0x800
c0020b6b:	68 5c 80 02 c0       	push   0xc002805c
c0020b70:	50                   	push   eax
c0020b71:	e8 ec 2e ff ff       	call   c0013a62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020b76:	83 c4 10             	add    esp,0x10
c0020b79:	ba 9c 80 02 c0       	mov    edx,0xc002809c
c0020b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b82:	89 10                	mov    DWORD PTR [eax],edx
c0020b84:	90                   	nop
c0020b85:	83 c4 0c             	add    esp,0xc
c0020b88:	c3                   	ret    
c0020b89:	90                   	nop

c0020b8a <ATAPI::readyForCommand()>:
c0020b8a:	56                   	push   esi
c0020b8b:	53                   	push   ebx
c0020b8c:	31 db                	xor    ebx,ebx
c0020b8e:	50                   	push   eax
c0020b8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020b93:	50                   	push   eax
c0020b94:	6a 0c                	push   0xc
c0020b96:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020b9d:	50                   	push   eax
c0020b9e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020ba4:	e8 0b ee ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c0020ba9:	83 c4 10             	add    esp,0x10
c0020bac:	a8 88                	test   al,0x88
c0020bae:	74 23                	je     c0020bd3 <ATAPI::readyForCommand()+0x49>
c0020bb0:	43                   	inc    ebx
c0020bb1:	83 fb 63             	cmp    ebx,0x63
c0020bb4:	7e dd                	jle    c0020b93 <ATAPI::readyForCommand()+0x9>
c0020bb6:	51                   	push   ecx
c0020bb7:	51                   	push   ecx
c0020bb8:	6a 00                	push   0x0
c0020bba:	68 40 42 0f 00       	push   0xf4240
c0020bbf:	e8 e6 b2 ff ff       	call   c001beaa <nanoSleep(unsigned long long)>
c0020bc4:	83 c4 10             	add    esp,0x10
c0020bc7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0020bcd:	75 c4                	jne    c0020b93 <ATAPI::readyForCommand()+0x9>
c0020bcf:	31 c0                	xor    eax,eax
c0020bd1:	eb 02                	jmp    c0020bd5 <ATAPI::readyForCommand()+0x4b>
c0020bd3:	b0 01                	mov    al,0x1
c0020bd5:	5a                   	pop    edx
c0020bd6:	5b                   	pop    ebx
c0020bd7:	5e                   	pop    esi
c0020bd8:	c3                   	ret    
c0020bd9:	90                   	nop

c0020bda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020bda:	55                   	push   ebp
c0020bdb:	57                   	push   edi
c0020bdc:	56                   	push   esi
c0020bdd:	53                   	push   ebx
c0020bde:	83 ec 20             	sub    esp,0x20
c0020be1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020be5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0020be9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020bed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020bf1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020bf5:	6a 01                	push   0x1
c0020bf7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020bfe:	50                   	push   eax
c0020bff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c05:	e8 f6 ee ff ff       	call   c001fb00 <IDE::enableIRQs(unsigned char, bool)>
c0020c0a:	5e                   	pop    esi
c0020c0b:	58                   	pop    eax
c0020c0c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c13:	50                   	push   eax
c0020c14:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c1a:	e8 af ec ff ff       	call   c001f8ce <IDE::prepareInterrupt(unsigned char)>
c0020c1f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020c22:	e8 63 ff ff ff       	call   c0020b8a <ATAPI::readyForCommand()>
c0020c27:	83 c4 10             	add    esp,0x10
c0020c2a:	84 c0                	test   al,al
c0020c2c:	75 0a                	jne    c0020c38 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0020c33:	e9 57 02 00 00       	jmp    c0020e8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020c38:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0020c3e:	c1 e0 04             	shl    eax,0x4
c0020c41:	0f b6 c0             	movzx  eax,al
c0020c44:	50                   	push   eax
c0020c45:	6a 06                	push   0x6
c0020c47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c4e:	50                   	push   eax
c0020c4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c55:	e8 9a ec ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020c5a:	6a 00                	push   0x0
c0020c5c:	6a 01                	push   0x1
c0020c5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c65:	50                   	push   eax
c0020c66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c6c:	e8 83 ec ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020c71:	83 c4 20             	add    esp,0x20
c0020c74:	0f b6 c3             	movzx  eax,bl
c0020c77:	0f b6 df             	movzx  ebx,bh
c0020c7a:	50                   	push   eax
c0020c7b:	6a 04                	push   0x4
c0020c7d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c84:	50                   	push   eax
c0020c85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020c8b:	e8 64 ec ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020c90:	53                   	push   ebx
c0020c91:	6a 05                	push   0x5
c0020c93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020c9a:	50                   	push   eax
c0020c9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020ca1:	e8 4e ec ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020ca6:	83 c4 20             	add    esp,0x20
c0020ca9:	68 a0 00 00 00       	push   0xa0
c0020cae:	6a 07                	push   0x7
c0020cb0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020cb7:	50                   	push   eax
c0020cb8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020cbe:	e8 31 ec ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020cc3:	83 c4 0c             	add    esp,0xc
c0020cc6:	6a 01                	push   0x1
c0020cc8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020ccf:	50                   	push   eax
c0020cd0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020cd6:	e8 c5 f7 ff ff       	call   c00204a0 <IDE::polling(unsigned char, unsigned int)>
c0020cdb:	83 c4 10             	add    esp,0x10
c0020cde:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0020ce4:	84 c0                	test   al,al
c0020ce6:	74 23                	je     c0020d0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020ce8:	0f b6 d8             	movzx  ebx,al
c0020ceb:	0f b6 d2             	movzx  edx,dl
c0020cee:	53                   	push   ebx
c0020cef:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0020cf6:	50                   	push   eax
c0020cf7:	52                   	push   edx
c0020cf8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020cfe:	e8 07 f6 ff ff       	call   c002030a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020d03:	83 c4 10             	add    esp,0x10
c0020d06:	e9 84 01 00 00       	jmp    c0020e8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020d0b:	0f b6 d2             	movzx  edx,dl
c0020d0e:	53                   	push   ebx
c0020d0f:	53                   	push   ebx
c0020d10:	52                   	push   edx
c0020d11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020d17:	e8 c6 eb ff ff       	call   c001f8e2 <IDE::getBase(unsigned char)>
c0020d1c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020d20:	b9 06 00 00 00       	mov    ecx,0x6
c0020d25:	89 c2                	mov    edx,eax
c0020d27:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020d2a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020d2e:	83 c4 10             	add    esp,0x10
c0020d31:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020d37:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020d3e:	85 db                	test   ebx,ebx
c0020d40:	0f 84 ec 00 00 00    	je     c0020e32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020d46:	51                   	push   ecx
c0020d47:	51                   	push   ecx
c0020d48:	52                   	push   edx
c0020d49:	50                   	push   eax
c0020d4a:	e8 13 ed ff ff       	call   c001fa62 <IDE::waitInterrupt(unsigned char)>
c0020d4f:	83 c4 10             	add    esp,0x10
c0020d52:	84 c0                	test   al,al
c0020d54:	0f 84 d4 fe ff ff    	je     c0020c2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020d5a:	56                   	push   esi
c0020d5b:	56                   	push   esi
c0020d5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020d63:	50                   	push   eax
c0020d64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020d6a:	e8 5f eb ff ff       	call   c001f8ce <IDE::prepareInterrupt(unsigned char)>
c0020d6f:	83 c4 0c             	add    esp,0xc
c0020d72:	6a 04                	push   0x4
c0020d74:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020d7b:	50                   	push   eax
c0020d7c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020d82:	e8 2d ec ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c0020d87:	83 c4 0c             	add    esp,0xc
c0020d8a:	89 c6                	mov    esi,eax
c0020d8c:	6a 05                	push   0x5
c0020d8e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020d95:	50                   	push   eax
c0020d96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020d9c:	e8 13 ec ff ff       	call   c001f9b4 <IDE::read(unsigned char, unsigned char)>
c0020da1:	89 f1                	mov    ecx,esi
c0020da3:	0f b6 c0             	movzx  eax,al
c0020da6:	0f b6 f1             	movzx  esi,cl
c0020da9:	c1 e0 08             	shl    eax,0x8
c0020dac:	09 c6                	or     esi,eax
c0020dae:	d1 fe                	sar    esi,1
c0020db0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020db4:	83 c4 10             	add    esp,0x10
c0020db7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0020dbc:	74 41                	je     c0020dff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020dbe:	31 c9                	xor    ecx,ecx
c0020dc0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020dc6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020dcd:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020dd1:	75 0a                	jne    c0020ddd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020dd3:	01 c9                	add    ecx,ecx
c0020dd5:	01 cd                	add    ebp,ecx
c0020dd7:	4b                   	dec    ebx
c0020dd8:	e9 54 ff ff ff       	jmp    c0020d31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0020ddd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020de2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020de6:	51                   	push   ecx
c0020de7:	51                   	push   ecx
c0020de8:	52                   	push   edx
c0020de9:	50                   	push   eax
c0020dea:	e8 f3 ea ff ff       	call   c001f8e2 <IDE::getBase(unsigned char)>
c0020def:	89 c2                	mov    edx,eax
c0020df1:	89 f0                	mov    eax,esi
c0020df3:	66 ef                	out    dx,ax
c0020df5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020df9:	83 c4 10             	add    esp,0x10
c0020dfc:	41                   	inc    ecx
c0020dfd:	eb c1                	jmp    c0020dc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0020dff:	31 f6                	xor    esi,esi
c0020e01:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020e07:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020e0e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020e12:	75 06                	jne    c0020e1a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0020e14:	01 f6                	add    esi,esi
c0020e16:	01 f5                	add    ebp,esi
c0020e18:	eb bd                	jmp    c0020dd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0020e1a:	51                   	push   ecx
c0020e1b:	51                   	push   ecx
c0020e1c:	52                   	push   edx
c0020e1d:	50                   	push   eax
c0020e1e:	e8 bf ea ff ff       	call   c001f8e2 <IDE::getBase(unsigned char)>
c0020e23:	89 c2                	mov    edx,eax
c0020e25:	66 ed                	in     ax,dx
c0020e27:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0020e2c:	83 c4 10             	add    esp,0x10
c0020e2f:	46                   	inc    esi
c0020e30:	eb cf                	jmp    c0020e01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020e32:	51                   	push   ecx
c0020e33:	51                   	push   ecx
c0020e34:	52                   	push   edx
c0020e35:	50                   	push   eax
c0020e36:	e8 27 ec ff ff       	call   c001fa62 <IDE::waitInterrupt(unsigned char)>
c0020e3b:	83 c4 10             	add    esp,0x10
c0020e3e:	84 c0                	test   al,al
c0020e40:	0f 84 e8 fd ff ff    	je     c0020c2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020e46:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020e4b:	52                   	push   edx
c0020e4c:	52                   	push   edx
c0020e4d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020e54:	50                   	push   eax
c0020e55:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020e5b:	e8 6e ea ff ff       	call   c001f8ce <IDE::prepareInterrupt(unsigned char)>
c0020e60:	83 c4 10             	add    esp,0x10
c0020e63:	50                   	push   eax
c0020e64:	50                   	push   eax
c0020e65:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020e6c:	50                   	push   eax
c0020e6d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020e73:	e8 6a ea ff ff       	call   c001f8e2 <IDE::getBase(unsigned char)>
c0020e78:	8d 50 07             	lea    edx,[eax+0x7]
c0020e7b:	ec                   	in     al,dx
c0020e7c:	83 c4 10             	add    esp,0x10
c0020e7f:	a8 88                	test   al,0x88
c0020e81:	74 0a                	je     c0020e8d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020e83:	4b                   	dec    ebx
c0020e84:	75 dd                	jne    c0020e63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020e86:	bb 02 00 00 00       	mov    ebx,0x2
c0020e8b:	eb 02                	jmp    c0020e8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020e8d:	31 db                	xor    ebx,ebx
c0020e8f:	83 c4 1c             	add    esp,0x1c
c0020e92:	89 d8                	mov    eax,ebx
c0020e94:	5b                   	pop    ebx
c0020e95:	5e                   	pop    esi
c0020e96:	5f                   	pop    edi
c0020e97:	5d                   	pop    ebp
c0020e98:	c3                   	ret    
c0020e99:	90                   	nop

c0020e9a <ATAPI::diskRemoved()>:
c0020e9a:	83 ec 18             	sub    esp,0x18
c0020e9d:	68 67 80 02 c0       	push   0xc0028067
c0020ea2:	e8 aa 13 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020ea7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020eab:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0020eb2:	83 c4 1c             	add    esp,0x1c
c0020eb5:	c3                   	ret    

c0020eb6 <ATAPI::eject()>:
c0020eb6:	57                   	push   edi
c0020eb7:	b9 03 00 00 00       	mov    ecx,0x3
c0020ebc:	53                   	push   ebx
c0020ebd:	83 ec 14             	sub    esp,0x14
c0020ec0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020ec4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020ec8:	fc                   	cld    
c0020ec9:	31 c0                	xor    eax,eax
c0020ecb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ecd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020ed2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020ed7:	50                   	push   eax
c0020ed8:	50                   	push   eax
c0020ed9:	6a 00                	push   0x0
c0020edb:	6a 00                	push   0x0
c0020edd:	6a 00                	push   0x0
c0020edf:	6a 02                	push   0x2
c0020ee1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ee5:	50                   	push   eax
c0020ee6:	53                   	push   ebx
c0020ee7:	e8 ee fc ff ff       	call   c0020bda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020eec:	83 c4 14             	add    esp,0x14
c0020eef:	53                   	push   ebx
c0020ef0:	e8 a5 ff ff ff       	call   c0020e9a <ATAPI::diskRemoved()>
c0020ef5:	83 c4 24             	add    esp,0x24
c0020ef8:	5b                   	pop    ebx
c0020ef9:	5f                   	pop    edi
c0020efa:	c3                   	ret    
c0020efb:	90                   	nop

c0020efc <ATAPI::diskInserted()>:
c0020efc:	53                   	push   ebx
c0020efd:	83 ec 14             	sub    esp,0x14
c0020f00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020f04:	68 7d 80 02 c0       	push   0xc002807d
c0020f09:	e8 43 13 ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0020f0e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0020f15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f18:	e8 ad 2b ff ff       	call   c0013aca <PhysicalDisk::startCache()>
c0020f1d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0020f21:	83 c4 18             	add    esp,0x18
c0020f24:	5b                   	pop    ebx
c0020f25:	e9 80 4b ff ff       	jmp    c0015aaa <createPartitionsForDisk(PhysicalDisk*)>

c0020f2a <ATAPI::detectMedia()>:
c0020f2a:	56                   	push   esi
c0020f2b:	53                   	push   ebx
c0020f2c:	83 ec 28             	sub    esp,0x28
c0020f2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020f33:	6a 0c                	push   0xc
c0020f35:	6a 00                	push   0x0
c0020f37:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020f3b:	56                   	push   esi
c0020f3c:	e8 a5 f7 fd ff       	call   c00006e6 <memset>
c0020f41:	58                   	pop    eax
c0020f42:	5a                   	pop    edx
c0020f43:	6a 00                	push   0x0
c0020f45:	6a 00                	push   0x0
c0020f47:	6a 00                	push   0x0
c0020f49:	6a 00                	push   0x0
c0020f4b:	56                   	push   esi
c0020f4c:	53                   	push   ebx
c0020f4d:	e8 88 fc ff ff       	call   c0020bda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020f52:	83 c4 1c             	add    esp,0x1c
c0020f55:	6a 0c                	push   0xc
c0020f57:	6a 00                	push   0x0
c0020f59:	56                   	push   esi
c0020f5a:	e8 87 f7 fd ff       	call   c00006e6 <memset>
c0020f5f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020f64:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020f69:	59                   	pop    ecx
c0020f6a:	58                   	pop    eax
c0020f6b:	6a 01                	push   0x1
c0020f6d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020f71:	50                   	push   eax
c0020f72:	6a 00                	push   0x0
c0020f74:	6a 12                	push   0x12
c0020f76:	56                   	push   esi
c0020f77:	53                   	push   ebx
c0020f78:	e8 5d fc ff ff       	call   c0020bda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020f7d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020f81:	83 c4 20             	add    esp,0x20
c0020f84:	83 e0 7f             	and    eax,0x7f
c0020f87:	3c 70                	cmp    al,0x70
c0020f89:	74 15                	je     c0020fa0 <ATAPI::detectMedia()+0x76>
c0020f8b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020f92:	75 0c                	jne    c0020fa0 <ATAPI::detectMedia()+0x76>
c0020f94:	83 ec 0c             	sub    esp,0xc
c0020f97:	53                   	push   ebx
c0020f98:	e8 5f ff ff ff       	call   c0020efc <ATAPI::diskInserted()>
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020fa4:	83 e0 0f             	and    eax,0xf
c0020fa7:	3c 02                	cmp    al,0x2
c0020fa9:	75 1b                	jne    c0020fc6 <ATAPI::detectMedia()+0x9c>
c0020fab:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020fb0:	75 2d                	jne    c0020fdf <ATAPI::detectMedia()+0xb5>
c0020fb2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020fb9:	74 24                	je     c0020fdf <ATAPI::detectMedia()+0xb5>
c0020fbb:	83 ec 0c             	sub    esp,0xc
c0020fbe:	53                   	push   ebx
c0020fbf:	e8 d6 fe ff ff       	call   c0020e9a <ATAPI::diskRemoved()>
c0020fc4:	eb 16                	jmp    c0020fdc <ATAPI::detectMedia()+0xb2>
c0020fc6:	84 c0                	test   al,al
c0020fc8:	75 15                	jne    c0020fdf <ATAPI::detectMedia()+0xb5>
c0020fca:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020fd1:	75 0c                	jne    c0020fdf <ATAPI::detectMedia()+0xb5>
c0020fd3:	83 ec 0c             	sub    esp,0xc
c0020fd6:	53                   	push   ebx
c0020fd7:	e8 20 ff ff ff       	call   c0020efc <ATAPI::diskInserted()>
c0020fdc:	83 c4 10             	add    esp,0x10
c0020fdf:	83 c4 24             	add    esp,0x24
c0020fe2:	5b                   	pop    ebx
c0020fe3:	5e                   	pop    esi
c0020fe4:	c3                   	ret    
c0020fe5:	90                   	nop

c0020fe6 <ATAPI::open(int, int, void*)>:
c0020fe6:	53                   	push   ebx
c0020fe7:	83 ec 08             	sub    esp,0x8
c0020fea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ff2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ff6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020ffc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021002:	c1 e0 06             	shl    eax,0x6
c0021005:	01 d0                	add    eax,edx
c0021007:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002100e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021014:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002101b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021025:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002102b:	6a 04                	push   0x4
c002102d:	6a 0c                	push   0xc
c002102f:	51                   	push   ecx
c0021030:	52                   	push   edx
c0021031:	e8 be e8 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021036:	90                   	nop
c0021037:	90                   	nop
c0021038:	6a 00                	push   0x0
c002103a:	6a 0c                	push   0xc
c002103c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021043:	50                   	push   eax
c0021044:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002104a:	e8 a5 e8 ff ff       	call   c001f8f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002104f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021056:	83 c4 14             	add    esp,0x14
c0021059:	53                   	push   ebx
c002105a:	e8 cb fe ff ff       	call   c0020f2a <ATAPI::detectMedia()>
c002105f:	31 c0                	xor    eax,eax
c0021061:	83 c4 18             	add    esp,0x18
c0021064:	5b                   	pop    ebx
c0021065:	c3                   	ret    

c0021066 <ATAPI::read(unsigned long long, int, void*)>:
c0021066:	55                   	push   ebp
c0021067:	57                   	push   edi
c0021068:	56                   	push   esi
c0021069:	53                   	push   ebx
c002106a:	83 ec 1c             	sub    esp,0x1c
c002106d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021071:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021075:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021079:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021080:	74 41                	je     c00210c3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021082:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021086:	b9 03 00 00 00       	mov    ecx,0x3
c002108b:	fc                   	cld    
c002108c:	31 c0                	xor    eax,eax
c002108e:	86 fb                	xchg   bl,bh
c0021090:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021092:	c1 c3 10             	rol    ebx,0x10
c0021095:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002109a:	89 e8                	mov    eax,ebp
c002109c:	86 fb                	xchg   bl,bh
c002109e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00210a2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00210a6:	50                   	push   eax
c00210a7:	50                   	push   eax
c00210a8:	55                   	push   ebp
c00210a9:	c1 e5 0b             	shl    ebp,0xb
c00210ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00210b0:	6a 00                	push   0x0
c00210b2:	55                   	push   ebp
c00210b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210b7:	50                   	push   eax
c00210b8:	56                   	push   esi
c00210b9:	e8 1c fb ff ff       	call   c0020bda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00210be:	83 c4 20             	add    esp,0x20
c00210c1:	eb 1a                	jmp    c00210dd <ATAPI::read(unsigned long long, int, void*)+0x77>
c00210c3:	83 ec 0c             	sub    esp,0xc
c00210c6:	56                   	push   esi
c00210c7:	e8 5e fe ff ff       	call   c0020f2a <ATAPI::detectMedia()>
c00210cc:	83 c4 10             	add    esp,0x10
c00210cf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00210d6:	75 aa                	jne    c0021082 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00210d8:	b8 02 00 00 00       	mov    eax,0x2
c00210dd:	83 c4 1c             	add    esp,0x1c
c00210e0:	5b                   	pop    ebx
c00210e1:	5e                   	pop    esi
c00210e2:	5f                   	pop    edi
c00210e3:	5d                   	pop    ebp
c00210e4:	c3                   	ret    
c00210e5:	90                   	nop

c00210e6 <AVX::open(int, int, void*)>:
c00210e6:	83 ec 0c             	sub    esp,0xc
c00210e9:	e8 0a 10 00 00       	call   c00220f8 <avxInit>
c00210ee:	b8 00 00 00 00       	mov    eax,0x0
c00210f3:	83 c4 0c             	add    esp,0xc
c00210f6:	c3                   	ret    
c00210f7:	90                   	nop

c00210f8 <AVX::close(int, int, void*)>:
c00210f8:	83 ec 0c             	sub    esp,0xc
c00210fb:	e8 f9 0f 00 00       	call   c00220f9 <avxClose>
c0021100:	b8 00 00 00 00       	mov    eax,0x0
c0021105:	83 c4 0c             	add    esp,0xc
c0021108:	c3                   	ret    
c0021109:	90                   	nop

c002110a <AVX::available()>:
c002110a:	83 ec 0c             	sub    esp,0xc
c002110d:	e8 de 0f 00 00       	call   c00220f0 <avxDetect>
c0021112:	85 c0                	test   eax,eax
c0021114:	0f 95 c0             	setne  al
c0021117:	83 c4 0c             	add    esp,0xc
c002111a:	c3                   	ret    
c002111b:	90                   	nop

c002111c <AVX::save(void*)>:
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021123:	83 ec 0c             	sub    esp,0xc
c0021126:	50                   	push   eax
c0021127:	e8 ca 0f 00 00       	call   c00220f6 <avxSave>
c002112c:	83 c4 10             	add    esp,0x10
c002112f:	90                   	nop
c0021130:	83 c4 0c             	add    esp,0xc
c0021133:	c3                   	ret    

c0021134 <AVX::load(void*)>:
c0021134:	83 ec 0c             	sub    esp,0xc
c0021137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002113b:	83 ec 0c             	sub    esp,0xc
c002113e:	50                   	push   eax
c002113f:	e8 b3 0f 00 00       	call   c00220f7 <avxLoad>
c0021144:	83 c4 10             	add    esp,0x10
c0021147:	90                   	nop
c0021148:	83 c4 0c             	add    esp,0xc
c002114b:	c3                   	ret    

c002114c <AVX::AVX()>:
c002114c:	83 ec 0c             	sub    esp,0xc
c002114f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021153:	83 ec 08             	sub    esp,0x8
c0021156:	68 c8 80 02 c0       	push   0xc00280c8
c002115b:	50                   	push   eax
c002115c:	e8 df 29 ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0021161:	83 c4 10             	add    esp,0x10
c0021164:	ba d8 80 02 c0       	mov    edx,0xc00280d8
c0021169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002116d:	89 10                	mov    DWORD PTR [eax],edx
c002116f:	90                   	nop
c0021170:	83 c4 0c             	add    esp,0xc
c0021173:	c3                   	ret    

c0021174 <MMX::available()>:
c0021174:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0021179:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002117f:	83 e0 20             	and    eax,0x20
c0021182:	84 c0                	test   al,al
c0021184:	0f 95 c0             	setne  al
c0021187:	c3                   	ret    

c0021188 <MMX::open(int, int, void*)>:
c0021188:	83 ec 0c             	sub    esp,0xc
c002118b:	e8 dc 0f 00 00       	call   c002216c <x87Init>
c0021190:	b8 00 00 00 00       	mov    eax,0x0
c0021195:	83 c4 0c             	add    esp,0xc
c0021198:	c3                   	ret    
c0021199:	90                   	nop

c002119a <MMX::close(int, int, void*)>:
c002119a:	83 ec 0c             	sub    esp,0xc
c002119d:	e8 e4 0f 00 00       	call   c0022186 <x87Close>
c00211a2:	b8 00 00 00 00       	mov    eax,0x0
c00211a7:	83 c4 0c             	add    esp,0xc
c00211aa:	c3                   	ret    
c00211ab:	90                   	nop

c00211ac <MMX::save(void*)>:
c00211ac:	83 ec 0c             	sub    esp,0xc
c00211af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211b3:	83 ec 0c             	sub    esp,0xc
c00211b6:	50                   	push   eax
c00211b7:	e8 a5 0f 00 00       	call   c0022161 <x87Save>
c00211bc:	83 c4 10             	add    esp,0x10
c00211bf:	90                   	nop
c00211c0:	83 c4 0c             	add    esp,0xc
c00211c3:	c3                   	ret    

c00211c4 <MMX::load(void*)>:
c00211c4:	83 ec 0c             	sub    esp,0xc
c00211c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211cb:	83 ec 0c             	sub    esp,0xc
c00211ce:	50                   	push   eax
c00211cf:	e8 93 0f 00 00       	call   c0022167 <x87Load>
c00211d4:	83 c4 10             	add    esp,0x10
c00211d7:	90                   	nop
c00211d8:	83 c4 0c             	add    esp,0xc
c00211db:	c3                   	ret    

c00211dc <MMX::MMX()>:
c00211dc:	83 ec 0c             	sub    esp,0xc
c00211df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e3:	83 ec 08             	sub    esp,0x8
c00211e6:	68 08 81 02 c0       	push   0xc0028108
c00211eb:	50                   	push   eax
c00211ec:	e8 4f 29 ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c00211f1:	83 c4 10             	add    esp,0x10
c00211f4:	ba 18 81 02 c0       	mov    edx,0xc0028118
c00211f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211fd:	89 10                	mov    DWORD PTR [eax],edx
c00211ff:	90                   	nop
c0021200:	83 c4 0c             	add    esp,0xc
c0021203:	c3                   	ret    

c0021204 <SSE::open(int, int, void*)>:
c0021204:	83 ec 0c             	sub    esp,0xc
c0021207:	e8 1b 0f 00 00       	call   c0022127 <sseInit>
c002120c:	b8 00 00 00 00       	mov    eax,0x0
c0021211:	83 c4 0c             	add    esp,0xc
c0021214:	c3                   	ret    
c0021215:	90                   	nop

c0021216 <SSE::close(int, int, void*)>:
c0021216:	83 ec 0c             	sub    esp,0xc
c0021219:	e8 19 0f 00 00       	call   c0022137 <sseClose>
c002121e:	b8 00 00 00 00       	mov    eax,0x0
c0021223:	83 c4 0c             	add    esp,0xc
c0021226:	c3                   	ret    
c0021227:	90                   	nop

c0021228 <SSE::available()>:
c0021228:	83 ec 1c             	sub    esp,0x1c
c002122b:	e8 d0 0e 00 00       	call   c0022100 <sseDetect>
c0021230:	85 c0                	test   eax,eax
c0021232:	0f 95 c0             	setne  al
c0021235:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021239:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002123d:	83 c4 1c             	add    esp,0x1c
c0021240:	c3                   	ret    
c0021241:	90                   	nop

c0021242 <SSE::save(void*)>:
c0021242:	83 ec 0c             	sub    esp,0xc
c0021245:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021249:	83 ec 0c             	sub    esp,0xc
c002124c:	50                   	push   eax
c002124d:	e8 c9 0e 00 00       	call   c002211b <sseSave>
c0021252:	83 c4 10             	add    esp,0x10
c0021255:	90                   	nop
c0021256:	83 c4 0c             	add    esp,0xc
c0021259:	c3                   	ret    

c002125a <SSE::load(void*)>:
c002125a:	83 ec 0c             	sub    esp,0xc
c002125d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021261:	83 ec 0c             	sub    esp,0xc
c0021264:	50                   	push   eax
c0021265:	e8 b7 0e 00 00       	call   c0022121 <sseLoad>
c002126a:	83 c4 10             	add    esp,0x10
c002126d:	90                   	nop
c002126e:	83 c4 0c             	add    esp,0xc
c0021271:	c3                   	ret    

c0021272 <SSE::SSE()>:
c0021272:	83 ec 0c             	sub    esp,0xc
c0021275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021279:	83 ec 08             	sub    esp,0x8
c002127c:	68 48 81 02 c0       	push   0xc0028148
c0021281:	50                   	push   eax
c0021282:	e8 b9 28 ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0021287:	83 c4 10             	add    esp,0x10
c002128a:	ba 58 81 02 c0       	mov    edx,0xc0028158
c002128f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021293:	89 10                	mov    DWORD PTR [eax],edx
c0021295:	90                   	nop
c0021296:	83 c4 0c             	add    esp,0xc
c0021299:	c3                   	ret    

c002129a <x87::open(int, int, void*)>:
c002129a:	83 ec 0c             	sub    esp,0xc
c002129d:	e8 ca 0e 00 00       	call   c002216c <x87Init>
c00212a2:	b8 00 00 00 00       	mov    eax,0x0
c00212a7:	83 c4 0c             	add    esp,0xc
c00212aa:	c3                   	ret    
c00212ab:	90                   	nop

c00212ac <x87::close(int, int, void*)>:
c00212ac:	83 ec 0c             	sub    esp,0xc
c00212af:	e8 d2 0e 00 00       	call   c0022186 <x87Close>
c00212b4:	b8 00 00 00 00       	mov    eax,0x0
c00212b9:	83 c4 0c             	add    esp,0xc
c00212bc:	c3                   	ret    
c00212bd:	90                   	nop

c00212be <x87::available()>:
c00212be:	83 ec 0c             	sub    esp,0xc
c00212c1:	e8 80 0e 00 00       	call   c0022146 <x87Detect>
c00212c6:	85 c0                	test   eax,eax
c00212c8:	0f 95 c0             	setne  al
c00212cb:	83 c4 0c             	add    esp,0xc
c00212ce:	c3                   	ret    
c00212cf:	90                   	nop

c00212d0 <x87::save(void*)>:
c00212d0:	83 ec 0c             	sub    esp,0xc
c00212d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212d7:	83 ec 0c             	sub    esp,0xc
c00212da:	50                   	push   eax
c00212db:	e8 81 0e 00 00       	call   c0022161 <x87Save>
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	90                   	nop
c00212e4:	83 c4 0c             	add    esp,0xc
c00212e7:	c3                   	ret    

c00212e8 <x87::load(void*)>:
c00212e8:	83 ec 0c             	sub    esp,0xc
c00212eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212ef:	83 ec 0c             	sub    esp,0xc
c00212f2:	50                   	push   eax
c00212f3:	e8 6f 0e 00 00       	call   c0022167 <x87Load>
c00212f8:	83 c4 10             	add    esp,0x10
c00212fb:	90                   	nop
c00212fc:	83 c4 0c             	add    esp,0xc
c00212ff:	c3                   	ret    

c0021300 <x87::x87()>:
c0021300:	83 ec 0c             	sub    esp,0xc
c0021303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021307:	83 ec 08             	sub    esp,0x8
c002130a:	68 88 81 02 c0       	push   0xc0028188
c002130f:	50                   	push   eax
c0021310:	e8 2b 28 ff ff       	call   c0013b40 <FPU::FPU(char const*)>
c0021315:	83 c4 10             	add    esp,0x10
c0021318:	ba 98 81 02 c0       	mov    edx,0xc0028198
c002131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021321:	89 10                	mov    DWORD PTR [eax],edx
c0021323:	90                   	nop
c0021324:	83 c4 0c             	add    esp,0xc
c0021327:	c3                   	ret    

c0021328 <APIC::disable()>:
c0021328:	90                   	nop
c0021329:	c3                   	ret    

c002132a <APIC::close(int, int, void*)>:
c002132a:	55                   	push   ebp
c002132b:	89 e5                	mov    ebp,esp
c002132d:	83 ec 08             	sub    esp,0x8
c0021330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021333:	8b 00                	mov    eax,DWORD PTR [eax]
c0021335:	83 c0 3c             	add    eax,0x3c
c0021338:	8b 00                	mov    eax,DWORD PTR [eax]
c002133a:	83 ec 0c             	sub    esp,0xc
c002133d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021340:	ff d0                	call   eax
c0021342:	83 c4 10             	add    esp,0x10
c0021345:	b8 00 00 00 00       	mov    eax,0x0
c002134a:	c9                   	leave  
c002134b:	c3                   	ret    

c002134c <IOAPIC::close(int, int, void*)>:
c002134c:	b8 00 00 00 00       	mov    eax,0x0
c0021351:	c3                   	ret    

c0021352 <APIC::io_wait()>:
c0021352:	eb 00                	jmp    c0021354 <APIC::io_wait()+0x2>
c0021354:	eb 00                	jmp    c0021356 <APIC::io_wait()+0x4>
c0021356:	90                   	nop
c0021357:	c3                   	ret    

c0021358 <APIC::getBase()>:
c0021358:	55                   	push   ebp
c0021359:	89 e5                	mov    ebp,esp
c002135b:	83 ec 18             	sub    esp,0x18
c002135e:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0021363:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021369:	83 e0 08             	and    eax,0x8
c002136c:	84 c0                	test   al,al
c002136e:	75 07                	jne    c0021377 <APIC::getBase()+0x1f>
c0021370:	b8 00 00 00 00       	mov    eax,0x0
c0021375:	eb 21                	jmp    c0021398 <APIC::getBase()+0x40>
c0021377:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c002137c:	83 ec 08             	sub    esp,0x8
c002137f:	6a 1b                	push   0x1b
c0021381:	50                   	push   eax
c0021382:	e8 79 d3 fe ff       	call   c000e700 <Computer::rdmsr(unsigned int)>
c0021387:	83 c4 10             	add    esp,0x10
c002138a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002138d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021390:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021393:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021398:	c9                   	leave  
c0021399:	c3                   	ret    

c002139a <APIC::eoi(unsigned char)>:
c002139a:	55                   	push   ebp
c002139b:	89 e5                	mov    ebp,esp
c002139d:	83 ec 28             	sub    esp,0x28
c00213a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00213a3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00213a6:	83 ec 0c             	sub    esp,0xc
c00213a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00213ac:	e8 a7 ff ff ff       	call   c0021358 <APIC::getBase()>
c00213b1:	83 c4 10             	add    esp,0x10
c00213b4:	05 b0 00 00 00       	add    eax,0xb0
c00213b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00213bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00213bf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00213c5:	90                   	nop
c00213c6:	c9                   	leave  
c00213c7:	c3                   	ret    

c00213c8 <APIC::open(int, int, void*)>:
c00213c8:	55                   	push   ebp
c00213c9:	89 e5                	mov    ebp,esp
c00213cb:	57                   	push   edi
c00213cc:	56                   	push   esi
c00213cd:	53                   	push   ebx
c00213ce:	83 ec 1c             	sub    esp,0x1c
c00213d1:	83 ec 0c             	sub    esp,0xc
c00213d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00213d7:	e8 7c ff ff ff       	call   c0021358 <APIC::getBase()>
c00213dc:	83 c4 10             	add    esp,0x10
c00213df:	05 f0 00 00 00       	add    eax,0xf0
c00213e4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00213e7:	83 ec 0c             	sub    esp,0xc
c00213ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00213ed:	e8 66 ff ff ff       	call   c0021358 <APIC::getBase()>
c00213f2:	83 c4 10             	add    esp,0x10
c00213f5:	89 c2                	mov    edx,eax
c00213f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00213fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021400:	0f b6 f8             	movzx  edi,al
c0021403:	89 d0                	mov    eax,edx
c0021405:	ba 00 00 00 00       	mov    edx,0x0
c002140a:	89 c1                	mov    ecx,eax
c002140c:	80 e5 ff             	and    ch,0xff
c002140f:	89 cb                	mov    ebx,ecx
c0021411:	0f b6 f2             	movzx  esi,dl
c0021414:	89 d8                	mov    eax,ebx
c0021416:	89 f2                	mov    edx,esi
c0021418:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002141b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002141e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021422:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021426:	83 e0 00             	and    eax,0x0
c0021429:	09 d0                	or     eax,edx
c002142b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002142f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021432:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021438:	8d 50 01             	lea    edx,[eax+0x1]
c002143b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002143e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021444:	0f b6 d0             	movzx  edx,al
c0021447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002144a:	83 c2 08             	add    edx,0x8
c002144d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021451:	0f b6 c9             	movzx  ecx,cl
c0021454:	81 c9 00 00 01 00    	or     ecx,0x10000
c002145a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002145e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021461:	8b 00                	mov    eax,DWORD PTR [eax]
c0021463:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021466:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c002146d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021470:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021473:	89 10                	mov    DWORD PTR [eax],edx
c0021475:	b8 00 00 00 00       	mov    eax,0x0
c002147a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002147d:	5b                   	pop    ebx
c002147e:	5e                   	pop    esi
c002147f:	5f                   	pop    edi
c0021480:	5d                   	pop    ebp
c0021481:	c3                   	ret    

c0021482 <IOAPIC::IOAPIC()>:
c0021482:	83 ec 0c             	sub    esp,0xc
c0021485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021489:	83 ec 08             	sub    esp,0x8
c002148c:	68 c8 81 02 c0       	push   0xc00281c8
c0021491:	50                   	push   eax
c0021492:	e8 b5 23 ff ff       	call   c001384c <Device::Device(char const*)>
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c002149f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a3:	89 10                	mov    DWORD PTR [eax],edx
c00214a5:	90                   	nop
c00214a6:	83 c4 0c             	add    esp,0xc
c00214a9:	c3                   	ret    

c00214aa <APIC::APIC()>:
c00214aa:	53                   	push   ebx
c00214ab:	83 ec 18             	sub    esp,0x18
c00214ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214b2:	83 ec 08             	sub    esp,0x8
c00214b5:	68 d0 81 02 c0       	push   0xc00281d0
c00214ba:	50                   	push   eax
c00214bb:	e8 da 2a ff ff       	call   c0013f9a <InterruptController::InterruptController(char const*)>
c00214c0:	83 c4 10             	add    esp,0x10
c00214c3:	ba a8 82 02 c0       	mov    edx,0xc00282a8
c00214c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214cc:	89 10                	mov    DWORD PTR [eax],edx
c00214ce:	a0 60 b2 02 c0       	mov    al,ds:0xc002b260
c00214d3:	83 f0 01             	xor    eax,0x1
c00214d6:	84 c0                	test   al,al
c00214d8:	0f 84 96 00 00 00    	je     c0021574 <APIC::APIC()+0xca>
c00214de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00214e3:	a0 10 9d 02 c0       	mov    al,ds:0xc0029d10
c00214e8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00214ec:	73 7f                	jae    c002156d <APIC::APIC()+0xc3>
c00214ee:	83 ec 0c             	sub    esp,0xc
c00214f1:	68 68 01 00 00       	push   0x168
c00214f6:	e8 67 0c ff ff       	call   c0012162 <operator new(unsigned long)>
c00214fb:	83 c4 10             	add    esp,0x10
c00214fe:	89 c3                	mov    ebx,eax
c0021500:	83 ec 0c             	sub    esp,0xc
c0021503:	53                   	push   ebx
c0021504:	e8 79 ff ff ff       	call   c0021482 <IOAPIC::IOAPIC()>
c0021509:	83 c4 10             	add    esp,0x10
c002150c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021510:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021519:	89 14 85 40 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4dc0],edx
c0021520:	a1 20 b2 02 c0       	mov    eax,ds:0xc002b220
c0021525:	40                   	inc    eax
c0021526:	a3 20 b2 02 c0       	mov    ds:0xc002b220,eax
c002152b:	a1 68 94 02 c0       	mov    eax,ds:0xc0029468
c0021530:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021536:	83 ec 08             	sub    esp,0x8
c0021539:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002153d:	50                   	push   eax
c002153e:	e8 19 21 ff ff       	call   c001365c <Device::addChild(Device*)>
c0021543:	83 c4 10             	add    esp,0x10
c0021546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002154a:	8b 00                	mov    eax,DWORD PTR [eax]
c002154c:	83 c0 08             	add    eax,0x8
c002154f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021551:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021556:	6a 00                	push   0x0
c0021558:	6a 00                	push   0x0
c002155a:	52                   	push   edx
c002155b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002155f:	ff d0                	call   eax
c0021561:	83 c4 10             	add    esp,0x10
c0021564:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021568:	e9 76 ff ff ff       	jmp    c00214e3 <APIC::APIC()+0x39>
c002156d:	c6 05 60 b2 02 c0 01 	mov    BYTE PTR ds:0xc002b260,0x1
c0021574:	90                   	nop
c0021575:	83 c4 18             	add    esp,0x18
c0021578:	5b                   	pop    ebx
c0021579:	c3                   	ret    

c002157a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002157a:	55                   	push   ebp
c002157b:	89 e5                	mov    ebp,esp
c002157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021580:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021586:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021589:	72 1d                	jb     c00215a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002158b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002158e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021597:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002159d:	01 d0                	add    eax,edx
c002159f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00215a2:	73 04                	jae    c00215a8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00215a4:	b0 01                	mov    al,0x1
c00215a6:	eb 02                	jmp    c00215aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00215a8:	b0 00                	mov    al,0x0
c00215aa:	5d                   	pop    ebp
c00215ab:	c3                   	ret    

c00215ac <IOAPIC::read(int)>:
c00215ac:	55                   	push   ebp
c00215ad:	89 e5                	mov    ebp,esp
c00215af:	83 ec 10             	sub    esp,0x10
c00215b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215bb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00215be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215c1:	0f b6 d0             	movzx  edx,al
c00215c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00215c7:	89 10                	mov    DWORD PTR [eax],edx
c00215c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00215cc:	83 c0 10             	add    eax,0x10
c00215cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00215d1:	c9                   	leave  
c00215d2:	c3                   	ret    
c00215d3:	90                   	nop

c00215d4 <IOAPIC::open(int, int, void*)>:
c00215d4:	55                   	push   ebp
c00215d5:	89 e5                	mov    ebp,esp
c00215d7:	57                   	push   edi
c00215d8:	56                   	push   esi
c00215d9:	53                   	push   ebx
c00215da:	83 ec 0c             	sub    esp,0xc
c00215dd:	83 ec 0c             	sub    esp,0xc
c00215e0:	68 fb 81 02 c0       	push   0xc00281fb
c00215e5:	e8 67 0c ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c00215ea:	83 c4 10             	add    esp,0x10
c00215ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00215f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00215f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021602:	8b 14 85 40 9d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd62c0]
c0021609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002160c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021615:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002161b:	8b 14 85 c0 9d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6240]
c0021622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021625:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002162b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002162e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021637:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002163d:	0f b6 f8             	movzx  edi,al
c0021640:	89 d0                	mov    eax,edx
c0021642:	ba 00 00 00 00       	mov    edx,0x0
c0021647:	89 c1                	mov    ecx,eax
c0021649:	80 e5 ff             	and    ch,0xff
c002164c:	89 cb                	mov    ebx,ecx
c002164e:	0f b6 f2             	movzx  esi,dl
c0021651:	89 d8                	mov    eax,ebx
c0021653:	89 f2                	mov    edx,esi
c0021655:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021658:	8d 5f 08             	lea    ebx,[edi+0x8]
c002165b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002165f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021663:	83 e0 00             	and    eax,0x0
c0021666:	09 d0                	or     eax,edx
c0021668:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002166c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002166f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021675:	8d 50 01             	lea    edx,[eax+0x1]
c0021678:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002167b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021681:	0f b6 d0             	movzx  edx,al
c0021684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021687:	83 c2 08             	add    edx,0x8
c002168a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002168e:	0f b6 c9             	movzx  ecx,cl
c0021691:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021697:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002169b:	83 ec 08             	sub    esp,0x8
c002169e:	6a 01                	push   0x1
c00216a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216a3:	e8 04 ff ff ff       	call   c00215ac <IOAPIC::read(int)>
c00216a8:	83 c4 10             	add    esp,0x10
c00216ab:	c1 f8 10             	sar    eax,0x10
c00216ae:	0f b6 c0             	movzx  eax,al
c00216b1:	8d 50 01             	lea    edx,[eax+0x1]
c00216b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216b7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00216bd:	b8 00 00 00 00       	mov    eax,0x0
c00216c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00216c5:	5b                   	pop    ebx
c00216c6:	5e                   	pop    esi
c00216c7:	5f                   	pop    edi
c00216c8:	5d                   	pop    ebp
c00216c9:	c3                   	ret    

c00216ca <IOAPIC::write(int, int)>:
c00216ca:	55                   	push   ebp
c00216cb:	89 e5                	mov    ebp,esp
c00216cd:	83 ec 10             	sub    esp,0x10
c00216d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00216d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00216dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00216df:	0f b6 d0             	movzx  edx,al
c00216e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00216e5:	89 10                	mov    DWORD PTR [eax],edx
c00216e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00216ea:	8d 50 10             	lea    edx,[eax+0x10]
c00216ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00216f0:	89 02                	mov    DWORD PTR [edx],eax
c00216f2:	90                   	nop
c00216f3:	c9                   	leave  
c00216f4:	c3                   	ret    
c00216f5:	90                   	nop

c00216f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c00216f6:	55                   	push   ebp
c00216f7:	89 e5                	mov    ebp,esp
c00216f9:	83 ec 20             	sub    esp,0x20
c00216fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00216ff:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021702:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021705:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021708:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002170b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002170e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0021711:	88 d0                	mov    al,dl
c0021713:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0021716:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c002171a:	83 c0 08             	add    eax,0x8
c002171d:	01 c0                	add    eax,eax
c002171f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021722:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c0021726:	83 c0 08             	add    eax,0x8
c0021729:	01 c0                	add    eax,eax
c002172b:	40                   	inc    eax
c002172c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c002172f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0021732:	50                   	push   eax
c0021733:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021736:	e8 71 fe ff ff       	call   c00215ac <IOAPIC::read(int)>
c002173b:	83 c4 08             	add    esp,0x8
c002173e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021741:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c0021748:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002174b:	c1 e0 18             	shl    eax,0x18
c002174e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021751:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021754:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0021757:	52                   	push   edx
c0021758:	50                   	push   eax
c0021759:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002175c:	e8 69 ff ff ff       	call   c00216ca <IOAPIC::write(int, int)>
c0021761:	83 c4 0c             	add    esp,0xc
c0021764:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021767:	50                   	push   eax
c0021768:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002176b:	e8 3c fe ff ff       	call   c00215ac <IOAPIC::read(int)>
c0021770:	83 c4 08             	add    esp,0x8
c0021773:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021776:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c002177d:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c0021784:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c002178b:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c0021792:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c0021796:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c0021799:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c002179c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002179f:	52                   	push   edx
c00217a0:	50                   	push   eax
c00217a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00217a4:	e8 21 ff ff ff       	call   c00216ca <IOAPIC::write(int, int)>
c00217a9:	83 c4 0c             	add    esp,0xc
c00217ac:	90                   	nop
c00217ad:	c9                   	leave  
c00217ae:	c3                   	ret    
c00217af:	90                   	nop

c00217b0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00217b0:	55                   	push   ebp
c00217b1:	89 e5                	mov    ebp,esp
c00217b3:	56                   	push   esi
c00217b4:	53                   	push   ebx
c00217b5:	83 ec 20             	sub    esp,0x20
c00217b8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00217bb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00217be:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c00217c2:	74 28                	je     c00217ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00217c4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00217c8:	7f 12                	jg     c00217dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c00217ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00217cd:	05 40 87 02 c0       	add    eax,0xc0028740
c00217d2:	8a 00                	mov    al,BYTE PTR [eax]
c00217d4:	0f b6 c0             	movzx  eax,al
c00217d7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00217da:	eb 10                	jmp    c00217ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	68 0c 82 02 c0       	push   0xc002820c
c00217e4:	e8 25 72 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c00217e9:	83 c4 10             	add    esp,0x10
c00217ec:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00217f0:	a1 20 b2 02 c0       	mov    eax,ds:0xc002b220
c00217f5:	83 ec 08             	sub    esp,0x8
c00217f8:	50                   	push   eax
c00217f9:	68 44 82 02 c0       	push   0xc0028244
c00217fe:	e8 4e 0a ff ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0021803:	83 c4 10             	add    esp,0x10
c0021806:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002180d:	a1 20 b2 02 c0       	mov    eax,ds:0xc002b220
c0021812:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0021815:	7d 58                	jge    c002186f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c0021817:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002181a:	8b 04 85 40 b2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4dc0]
c0021821:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021824:	83 ec 08             	sub    esp,0x8
c0021827:	52                   	push   edx
c0021828:	50                   	push   eax
c0021829:	e8 4c fd ff ff       	call   c002157a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002182e:	83 c4 10             	add    esp,0x10
c0021831:	84 c0                	test   al,al
c0021833:	74 35                	je     c002186a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c0021835:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021838:	8b 1c 85 40 b2 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd4dc0]
c002183f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021842:	83 c0 20             	add    eax,0x20
c0021845:	0f b6 f0             	movzx  esi,al
c0021848:	e8 3e 60 ff ff       	call   c001788b <getCPUNumber()>
c002184d:	99                   	cdq    
c002184e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021851:	0f b6 c9             	movzx  ecx,cl
c0021854:	83 ec 0c             	sub    esp,0xc
c0021857:	56                   	push   esi
c0021858:	52                   	push   edx
c0021859:	50                   	push   eax
c002185a:	51                   	push   ecx
c002185b:	53                   	push   ebx
c002185c:	e8 95 fe ff ff       	call   c00216f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c0021861:	83 c4 20             	add    esp,0x20
c0021864:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0021868:	eb 05                	jmp    c002186f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c002186a:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c002186d:	eb 9e                	jmp    c002180d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c002186f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0021872:	83 f0 01             	xor    eax,0x1
c0021875:	84 c0                	test   al,al
c0021877:	74 10                	je     c0021889 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c0021879:	83 ec 0c             	sub    esp,0xc
c002187c:	68 5b 82 02 c0       	push   0xc002825b
c0021881:	e8 88 71 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0021886:	83 c4 10             	add    esp,0x10
c0021889:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002188d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0021894:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c0021898:	7f 65                	jg     c00218ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c002189a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002189d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00218a0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00218a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00218aa:	01 ca                	add    edx,ecx
c00218ac:	83 c2 54             	add    edx,0x54
c00218af:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00218b3:	85 c0                	test   eax,eax
c00218b5:	75 43                	jne    c00218fa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c00218b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00218bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00218c4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00218c7:	01 ca                	add    edx,ecx
c00218c9:	8d 4a 54             	lea    ecx,[edx+0x54]
c00218cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00218cf:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00218d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00218d9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00218e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00218e3:	01 ca                	add    edx,ecx
c00218e5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00218eb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00218ee:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00218f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218f5:	83 e8 20             	sub    eax,0x20
c00218f8:	eb 1a                	jmp    c0021914 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c00218fa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00218fd:	eb 95                	jmp    c0021894 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c00218ff:	83 ec 0c             	sub    esp,0xc
c0021902:	68 68 82 02 c0       	push   0xc0028268
c0021907:	e8 02 71 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c002190c:	83 c4 10             	add    esp,0x10
c002190f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021914:	8d 65 f8             	lea    esp,[ebp-0x8]
c0021917:	5b                   	pop    ebx
c0021918:	5e                   	pop    esi
c0021919:	5d                   	pop    ebp
c002191a:	c3                   	ret    
c002191b:	90                   	nop

c002191c <PIC::disable()>:
c002191c:	55                   	push   ebp
c002191d:	89 e5                	mov    ebp,esp
c002191f:	83 ec 10             	sub    esp,0x10
c0021922:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021928:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002192c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002192f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021933:	ee                   	out    dx,al
c0021934:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002193a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002193e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021941:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021945:	ee                   	out    dx,al
c0021946:	90                   	nop
c0021947:	c9                   	leave  
c0021948:	c3                   	ret    
c0021949:	90                   	nop

c002194a <PIC::close(int, int, void*)>:
c002194a:	55                   	push   ebp
c002194b:	89 e5                	mov    ebp,esp
c002194d:	83 ec 08             	sub    esp,0x8
c0021950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021953:	8b 00                	mov    eax,DWORD PTR [eax]
c0021955:	83 c0 3c             	add    eax,0x3c
c0021958:	8b 00                	mov    eax,DWORD PTR [eax]
c002195a:	83 ec 0c             	sub    esp,0xc
c002195d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021960:	ff d0                	call   eax
c0021962:	83 c4 10             	add    esp,0x10
c0021965:	b8 00 00 00 00       	mov    eax,0x0
c002196a:	c9                   	leave  
c002196b:	c3                   	ret    

c002196c <PIC::PIC()>:
c002196c:	83 ec 0c             	sub    esp,0xc
c002196f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021973:	83 ec 08             	sub    esp,0x8
c0021976:	68 14 83 02 c0       	push   0xc0028314
c002197b:	50                   	push   eax
c002197c:	e8 19 26 ff ff       	call   c0013f9a <InterruptController::InterruptController(char const*)>
c0021981:	83 c4 10             	add    esp,0x10
c0021984:	ba 40 83 02 c0       	mov    edx,0xc0028340
c0021989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198d:	89 10                	mov    DWORD PTR [eax],edx
c002198f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021993:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021999:	0f b6 d0             	movzx  edx,al
c002199c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00219a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219b1:	0f b6 d0             	movzx  edx,al
c00219b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219b8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00219bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219c7:	8d 50 01             	lea    edx,[eax+0x1]
c00219ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219ce:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00219d4:	0f b6 d0             	movzx  edx,al
c00219d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219db:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00219df:	83 e1 3f             	and    ecx,0x3f
c00219e2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00219e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00219f0:	0f b6 d0             	movzx  edx,al
c00219f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00219fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021a08:	0f b6 d0             	movzx  edx,al
c0021a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021a1e:	8d 50 01             	lea    edx,[eax+0x1]
c0021a21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a25:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021a2b:	0f b6 d0             	movzx  edx,al
c0021a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a32:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021a36:	83 e1 3f             	and    ecx,0x3f
c0021a39:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021a3d:	90                   	nop
c0021a3e:	83 c4 0c             	add    esp,0xc
c0021a41:	c3                   	ret    

c0021a42 <PIC::ioWait()>:
c0021a42:	eb 00                	jmp    c0021a44 <PIC::ioWait()+0x2>
c0021a44:	eb 00                	jmp    c0021a46 <PIC::ioWait()+0x4>
c0021a46:	90                   	nop
c0021a47:	c3                   	ret    

c0021a48 <PIC::getIRQReg(int)>:
c0021a48:	55                   	push   ebp
c0021a49:	89 e5                	mov    ebp,esp
c0021a4b:	83 ec 10             	sub    esp,0x10
c0021a4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a51:	0f b6 c0             	movzx  eax,al
c0021a54:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021a5a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021a5d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021a60:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021a64:	ee                   	out    dx,al
c0021a65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a68:	0f b6 c0             	movzx  eax,al
c0021a6b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021a71:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021a74:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021a77:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021a7b:	ee                   	out    dx,al
c0021a7c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021a82:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021a86:	89 c2                	mov    edx,eax
c0021a88:	ec                   	in     al,dx
c0021a89:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021a8c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021a8f:	0f b6 c0             	movzx  eax,al
c0021a92:	c1 e0 08             	shl    eax,0x8
c0021a95:	89 c1                	mov    ecx,eax
c0021a97:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021a9d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021aa1:	89 c2                	mov    edx,eax
c0021aa3:	ec                   	in     al,dx
c0021aa4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021aa7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021aaa:	0f b6 c0             	movzx  eax,al
c0021aad:	09 c8                	or     eax,ecx
c0021aaf:	c9                   	leave  
c0021ab0:	c3                   	ret    
c0021ab1:	90                   	nop

c0021ab2 <PIC::eoi(unsigned char)>:
c0021ab2:	55                   	push   ebp
c0021ab3:	89 e5                	mov    ebp,esp
c0021ab5:	83 ec 14             	sub    esp,0x14
c0021ab8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021abb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021abe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021ac2:	75 1e                	jne    c0021ae2 <PIC::eoi(unsigned char)+0x30>
c0021ac4:	6a 0b                	push   0xb
c0021ac6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ac9:	e8 7a ff ff ff       	call   c0021a48 <PIC::getIRQReg(int)>
c0021ace:	83 c4 08             	add    esp,0x8
c0021ad1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021ad5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021ad9:	25 80 00 00 00       	and    eax,0x80
c0021ade:	85 c0                	test   eax,eax
c0021ae0:	74 5f                	je     c0021b41 <PIC::eoi(unsigned char)+0x8f>
c0021ae2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021ae6:	75 2d                	jne    c0021b15 <PIC::eoi(unsigned char)+0x63>
c0021ae8:	6a 0b                	push   0xb
c0021aea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021aed:	e8 56 ff ff ff       	call   c0021a48 <PIC::getIRQReg(int)>
c0021af2:	83 c4 08             	add    esp,0x8
c0021af5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021af9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021afc:	66 85 c0             	test   ax,ax
c0021aff:	78 14                	js     c0021b15 <PIC::eoi(unsigned char)+0x63>
c0021b01:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021b07:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021b0b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021b0e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021b12:	ee                   	out    dx,al
c0021b13:	eb 2d                	jmp    c0021b42 <PIC::eoi(unsigned char)+0x90>
c0021b15:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021b19:	76 12                	jbe    c0021b2d <PIC::eoi(unsigned char)+0x7b>
c0021b1b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021b21:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021b25:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021b28:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021b2c:	ee                   	out    dx,al
c0021b2d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021b33:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021b37:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021b3a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021b3e:	ee                   	out    dx,al
c0021b3f:	eb 01                	jmp    c0021b42 <PIC::eoi(unsigned char)+0x90>
c0021b41:	90                   	nop
c0021b42:	c9                   	leave  
c0021b43:	c3                   	ret    

c0021b44 <PIC::remap()>:
c0021b44:	55                   	push   ebp
c0021b45:	89 e5                	mov    ebp,esp
c0021b47:	83 ec 48             	sub    esp,0x48
c0021b4a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021b51:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021b58:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021b5e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021b61:	89 c2                	mov    edx,eax
c0021b63:	ec                   	in     al,dx
c0021b64:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021b67:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021b6a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021b6d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021b73:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021b76:	89 c2                	mov    edx,eax
c0021b78:	ec                   	in     al,dx
c0021b79:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021b7c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021b7f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021b82:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021b88:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021b8c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021b8f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021b92:	ee                   	out    dx,al
c0021b93:	83 ec 0c             	sub    esp,0xc
c0021b96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b99:	e8 a4 fe ff ff       	call   c0021a42 <PIC::ioWait()>
c0021b9e:	83 c4 10             	add    esp,0x10
c0021ba1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021ba7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021bab:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021bae:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021bb1:	ee                   	out    dx,al
c0021bb2:	83 ec 0c             	sub    esp,0xc
c0021bb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bb8:	e8 85 fe ff ff       	call   c0021a42 <PIC::ioWait()>
c0021bbd:	83 c4 10             	add    esp,0x10
c0021bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021bc3:	0f b6 c0             	movzx  eax,al
c0021bc6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021bcc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021bcf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021bd2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021bd5:	ee                   	out    dx,al
c0021bd6:	83 ec 0c             	sub    esp,0xc
c0021bd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bdc:	e8 61 fe ff ff       	call   c0021a42 <PIC::ioWait()>
c0021be1:	83 c4 10             	add    esp,0x10
c0021be4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021be7:	0f b6 c0             	movzx  eax,al
c0021bea:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021bf0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021bf3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021bf6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021bf9:	ee                   	out    dx,al
c0021bfa:	83 ec 0c             	sub    esp,0xc
c0021bfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c00:	e8 3d fe ff ff       	call   c0021a42 <PIC::ioWait()>
c0021c05:	83 c4 10             	add    esp,0x10
c0021c08:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021c0e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021c12:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021c15:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021c18:	ee                   	out    dx,al
c0021c19:	83 ec 0c             	sub    esp,0xc
c0021c1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c1f:	e8 1e fe ff ff       	call   c0021a42 <PIC::ioWait()>
c0021c24:	83 c4 10             	add    esp,0x10
c0021c27:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021c2d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021c31:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c37:	ee                   	out    dx,al
c0021c38:	83 ec 0c             	sub    esp,0xc
c0021c3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c3e:	e8 ff fd ff ff       	call   c0021a42 <PIC::ioWait()>
c0021c43:	83 c4 10             	add    esp,0x10
c0021c46:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021c4c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021c50:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021c53:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021c56:	ee                   	out    dx,al
c0021c57:	83 ec 0c             	sub    esp,0xc
c0021c5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c5d:	e8 e0 fd ff ff       	call   c0021a42 <PIC::ioWait()>
c0021c62:	83 c4 10             	add    esp,0x10
c0021c65:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021c6b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021c6f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021c72:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021c75:	ee                   	out    dx,al
c0021c76:	83 ec 0c             	sub    esp,0xc
c0021c79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c7c:	e8 c1 fd ff ff       	call   c0021a42 <PIC::ioWait()>
c0021c81:	83 c4 10             	add    esp,0x10
c0021c84:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021c88:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021c8e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021c91:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021c94:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021c97:	ee                   	out    dx,al
c0021c98:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021c9c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021ca2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021ca5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021ca8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021cab:	ee                   	out    dx,al
c0021cac:	90                   	nop
c0021cad:	c9                   	leave  
c0021cae:	c3                   	ret    
c0021caf:	90                   	nop

c0021cb0 <PIC::open(int, int, void*)>:
c0021cb0:	55                   	push   ebp
c0021cb1:	89 e5                	mov    ebp,esp
c0021cb3:	83 ec 18             	sub    esp,0x18
c0021cb6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021cbc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021cc0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021cc3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021cc7:	ee                   	out    dx,al
c0021cc8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021cce:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021cd2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021cd5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021cd9:	ee                   	out    dx,al
c0021cda:	83 ec 0c             	sub    esp,0xc
c0021cdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ce0:	e8 5f fe ff ff       	call   c0021b44 <PIC::remap()>
c0021ce5:	83 c4 10             	add    esp,0x10
c0021ce8:	b8 00 00 00 00       	mov    eax,0x0
c0021ced:	c9                   	leave  
c0021cee:	c3                   	ret    
c0021cef:	90                   	nop

c0021cf0 <APICTimer::close(int, int, void*)>:
c0021cf0:	b8 00 00 00 00       	mov    eax,0x0
c0021cf5:	c3                   	ret    

c0021cf6 <apicTimerHandler(regs*, void*)>:
c0021cf6:	83 ec 0c             	sub    esp,0xc
c0021cf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cff:	99                   	cdq    
c0021d00:	52                   	push   edx
c0021d01:	50                   	push   eax
c0021d02:	6a 00                	push   0x0
c0021d04:	68 00 ca 9a 3b       	push   0x3b9aca00
c0021d09:	e8 6e 07 00 00       	call   c002247c <__udivdi3>
c0021d0e:	83 c4 10             	add    esp,0x10
c0021d11:	83 ec 08             	sub    esp,0x8
c0021d14:	52                   	push   edx
c0021d15:	50                   	push   eax
c0021d16:	e8 b0 40 ff ff       	call   c0015dcb <timerHandler(unsigned long long)>
c0021d1b:	83 c4 10             	add    esp,0x10
c0021d1e:	90                   	nop
c0021d1f:	83 c4 0c             	add    esp,0xc
c0021d22:	c3                   	ret    
c0021d23:	90                   	nop

c0021d24 <APICTimer::write(int)>:
c0021d24:	53                   	push   ebx
c0021d25:	83 ec 28             	sub    esp,0x28
c0021d28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021d30:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021d36:	e8 53 5b ff ff       	call   c001788e <thisCPU()>
c0021d3b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021d41:	83 ec 0c             	sub    esp,0xc
c0021d44:	50                   	push   eax
c0021d45:	e8 0e f6 ff ff       	call   c0021358 <APIC::getBase()>
c0021d4a:	83 c4 10             	add    esp,0x10
c0021d4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021d51:	a1 d0 9a 02 c0       	mov    eax,ds:0xc0029ad0
c0021d56:	8b 15 d4 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029ad4
c0021d5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021d60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d68:	05 e0 03 00 00       	add    eax,0x3e0
c0021d6d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021d73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d77:	05 80 03 00 00       	add    eax,0x380
c0021d7c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021d82:	fb                   	sti    
c0021d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d87:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d8b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0021d90:	83 d2 00             	adc    edx,0x0
c0021d93:	89 c1                	mov    ecx,eax
c0021d95:	89 d3                	mov    ebx,edx
c0021d97:	a1 d0 9a 02 c0       	mov    eax,ds:0xc0029ad0
c0021d9c:	8b 15 d4 9a 02 c0    	mov    edx,DWORD PTR ds:0xc0029ad4
c0021da2:	39 c8                	cmp    eax,ecx
c0021da4:	89 d0                	mov    eax,edx
c0021da6:	19 d8                	sbb    eax,ebx
c0021da8:	73 02                	jae    c0021dac <APICTimer::write(int)+0x88>
c0021daa:	eb d7                	jmp    c0021d83 <APICTimer::write(int)+0x5f>
c0021dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021db0:	05 20 03 00 00       	add    eax,0x320
c0021db5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021dbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dbf:	05 90 03 00 00       	add    eax,0x390
c0021dc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dc6:	f7 d0                	not    eax
c0021dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021dcc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021dd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dd4:	ba 00 00 00 00       	mov    edx,0x0
c0021dd9:	f7 f3                	div    ebx
c0021ddb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021de3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021de9:	0d 00 00 02 00       	or     eax,0x20000
c0021dee:	89 c2                	mov    edx,eax
c0021df0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021df4:	05 20 03 00 00       	add    eax,0x320
c0021df9:	89 10                	mov    DWORD PTR [eax],edx
c0021dfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021dff:	05 e0 03 00 00       	add    eax,0x3e0
c0021e04:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021e0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e0e:	05 80 03 00 00       	add    eax,0x380
c0021e13:	89 c2                	mov    edx,eax
c0021e15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e19:	89 02                	mov    DWORD PTR [edx],eax
c0021e1b:	90                   	nop
c0021e1c:	83 c4 28             	add    esp,0x28
c0021e1f:	5b                   	pop    ebx
c0021e20:	c3                   	ret    
c0021e21:	90                   	nop

c0021e22 <APICTimer::open(int, int, void*)>:
c0021e22:	57                   	push   edi
c0021e23:	56                   	push   esi
c0021e24:	53                   	push   ebx
c0021e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e2b:	83 c0 24             	add    eax,0x24
c0021e2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e30:	83 ec 08             	sub    esp,0x8
c0021e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e3b:	ff d0                	call   eax
c0021e3d:	83 c4 10             	add    esp,0x10
c0021e40:	e8 49 5a ff ff       	call   c001788e <thisCPU()>
c0021e45:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021e4b:	83 ec 0c             	sub    esp,0xc
c0021e4e:	50                   	push   eax
c0021e4f:	e8 04 f5 ff ff       	call   c0021358 <APIC::getBase()>
c0021e54:	83 c4 10             	add    esp,0x10
c0021e57:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0021e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e61:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e67:	0f b6 f8             	movzx  edi,al
c0021e6a:	89 d0                	mov    eax,edx
c0021e6c:	ba 00 00 00 00       	mov    edx,0x0
c0021e71:	89 c1                	mov    ecx,eax
c0021e73:	80 e5 ff             	and    ch,0xff
c0021e76:	89 cb                	mov    ebx,ecx
c0021e78:	0f b6 f2             	movzx  esi,dl
c0021e7b:	89 d8                	mov    eax,ebx
c0021e7d:	89 f2                	mov    edx,esi
c0021e7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021e83:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021e86:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021e8a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021e8e:	83 e0 00             	and    eax,0x0
c0021e91:	09 d0                	or     eax,edx
c0021e93:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e9b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021ea1:	8d 50 01             	lea    edx,[eax+0x1]
c0021ea4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ea8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021eae:	0f b6 d0             	movzx  edx,al
c0021eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb5:	83 c2 08             	add    edx,0x8
c0021eb8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021ebc:	0f b6 c9             	movzx  ecx,cl
c0021ebf:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021ec5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ecd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021ed1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021edb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021edf:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021ee5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021ee9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021eef:	83 ec 0c             	sub    esp,0xc
c0021ef2:	51                   	push   ecx
c0021ef3:	6a 01                	push   0x1
c0021ef5:	68 f6 1c 02 c0       	push   0xc0021cf6
c0021efa:	52                   	push   edx
c0021efb:	50                   	push   eax
c0021efc:	e8 af 16 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021f01:	83 c4 20             	add    esp,0x20
c0021f04:	89 c2                	mov    edx,eax
c0021f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021f10:	b8 00 00 00 00       	mov    eax,0x0
c0021f15:	5b                   	pop    ebx
c0021f16:	5e                   	pop    esi
c0021f17:	5f                   	pop    edi
c0021f18:	c3                   	ret    
c0021f19:	90                   	nop

c0021f1a <APICTimer::APICTimer()>:
c0021f1a:	83 ec 0c             	sub    esp,0xc
c0021f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f21:	83 ec 08             	sub    esp,0x8
c0021f24:	68 80 83 02 c0       	push   0xc0028380
c0021f29:	50                   	push   eax
c0021f2a:	e8 0d 3e ff ff       	call   c0015d3c <Timer::Timer(char const*)>
c0021f2f:	83 c4 10             	add    esp,0x10
c0021f32:	ba 94 83 02 c0       	mov    edx,0xc0028394
c0021f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f3b:	89 10                	mov    DWORD PTR [eax],edx
c0021f3d:	90                   	nop
c0021f3e:	83 c4 0c             	add    esp,0xc
c0021f41:	c3                   	ret    

c0021f42 <PIT::write(int)>:
c0021f42:	83 ec 10             	sub    esp,0x10
c0021f45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f49:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021f4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021f53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f57:	a3 64 b2 02 c0       	mov    ds:0xc002b264,eax
c0021f5c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021f61:	99                   	cdq    
c0021f62:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f6a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021f71:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021f76:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021f7a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021f7f:	ee                   	out    dx,al
c0021f80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f84:	0f b6 c0             	movzx  eax,al
c0021f87:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021f8e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021f92:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021f96:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021f9b:	ee                   	out    dx,al
c0021f9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fa0:	c1 f8 08             	sar    eax,0x8
c0021fa3:	0f b6 c0             	movzx  eax,al
c0021fa6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0021fad:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021fb1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021fb5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021fba:	ee                   	out    dx,al
c0021fbb:	90                   	nop
c0021fbc:	83 c4 10             	add    esp,0x10
c0021fbf:	c3                   	ret    

c0021fc0 <pitHandler(regs*, void*)>:
c0021fc0:	83 ec 0c             	sub    esp,0xc
c0021fc3:	a1 64 b2 02 c0       	mov    eax,ds:0xc002b264
c0021fc8:	99                   	cdq    
c0021fc9:	52                   	push   edx
c0021fca:	50                   	push   eax
c0021fcb:	6a 00                	push   0x0
c0021fcd:	68 00 ca 9a 3b       	push   0x3b9aca00
c0021fd2:	e8 a5 04 00 00       	call   c002247c <__udivdi3>
c0021fd7:	83 c4 10             	add    esp,0x10
c0021fda:	83 ec 08             	sub    esp,0x8
c0021fdd:	52                   	push   edx
c0021fde:	50                   	push   eax
c0021fdf:	e8 e7 3d ff ff       	call   c0015dcb <timerHandler(unsigned long long)>
c0021fe4:	83 c4 10             	add    esp,0x10
c0021fe7:	90                   	nop
c0021fe8:	83 c4 0c             	add    esp,0xc
c0021feb:	c3                   	ret    

c0021fec <PIT::open(int, int, void*)>:
c0021fec:	83 ec 0c             	sub    esp,0xc
c0021fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ff5:	83 c0 24             	add    eax,0x24
c0021ff8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ffa:	83 ec 08             	sub    esp,0x8
c0021ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022005:	ff d0                	call   eax
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200e:	83 ec 0c             	sub    esp,0xc
c0022011:	6a 00                	push   0x0
c0022013:	6a 01                	push   0x1
c0022015:	68 c0 1f 02 c0       	push   0xc0021fc0
c002201a:	6a 00                	push   0x0
c002201c:	50                   	push   eax
c002201d:	e8 8e 15 ff ff       	call   c00135b0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022022:	83 c4 20             	add    esp,0x20
c0022025:	89 c2                	mov    edx,eax
c0022027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022031:	b8 00 00 00 00       	mov    eax,0x0
c0022036:	83 c4 0c             	add    esp,0xc
c0022039:	c3                   	ret    

c002203a <PIT::close(int, int, void*)>:
c002203a:	83 ec 0c             	sub    esp,0xc
c002203d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022041:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002204b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204f:	6a 01                	push   0x1
c0022051:	68 c0 1f 02 c0       	push   0xc0021fc0
c0022056:	6a 00                	push   0x0
c0022058:	50                   	push   eax
c0022059:	e8 b0 15 ff ff       	call   c001360e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002205e:	83 c4 10             	add    esp,0x10
c0022061:	b8 00 00 00 00       	mov    eax,0x0
c0022066:	83 c4 0c             	add    esp,0xc
c0022069:	c3                   	ret    

c002206a <PIT::PIT()>:
c002206a:	83 ec 0c             	sub    esp,0xc
c002206d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022071:	83 ec 08             	sub    esp,0x8
c0022074:	68 bc 83 02 c0       	push   0xc00283bc
c0022079:	50                   	push   eax
c002207a:	e8 bd 3c ff ff       	call   c0015d3c <Timer::Timer(char const*)>
c002207f:	83 c4 10             	add    esp,0x10
c0022082:	ba e4 83 02 c0       	mov    edx,0xc00283e4
c0022087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208b:	89 10                	mov    DWORD PTR [eax],edx
c002208d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022091:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022097:	0f b6 d0             	movzx  edx,al
c002209a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002209e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00220a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00220af:	0f b6 d0             	movzx  edx,al
c00220b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00220bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00220c5:	8d 50 01             	lea    edx,[eax+0x1]
c00220c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220cc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00220d2:	0f b6 d0             	movzx  edx,al
c00220d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00220dd:	83 e1 3f             	and    ecx,0x3f
c00220e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00220e4:	90                   	nop
c00220e5:	83 c4 0c             	add    esp,0xc
c00220e8:	c3                   	ret    
c00220e9:	66 90                	xchg   ax,ax
c00220eb:	66 90                	xchg   ax,ax
c00220ed:	66 90                	xchg   ax,ax
c00220ef:	90                   	nop

c00220f0 <avxDetect>:
c00220f0:	b8 00 00 00 00       	mov    eax,0x0
c00220f5:	c3                   	ret    

c00220f6 <avxSave>:
c00220f6:	c3                   	ret    

c00220f7 <avxLoad>:
c00220f7:	c3                   	ret    

c00220f8 <avxInit>:
c00220f8:	c3                   	ret    

c00220f9 <avxClose>:
c00220f9:	c3                   	ret    
c00220fa:	66 90                	xchg   ax,ax
c00220fc:	66 90                	xchg   ax,ax
c00220fe:	66 90                	xchg   ax,ax

c0022100 <sseDetect>:
c0022100:	b8 01 00 00 00       	mov    eax,0x1
c0022105:	0f a2                	cpuid  
c0022107:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002210d:	74 06                	je     c0022115 <sseDetect.noSSE>
c002210f:	b8 01 00 00 00       	mov    eax,0x1
c0022114:	c3                   	ret    

c0022115 <sseDetect.noSSE>:
c0022115:	b8 00 00 00 00       	mov    eax,0x0
c002211a:	c3                   	ret    

c002211b <sseSave>:
c002211b:	0f ae 44 24 08       	fxsave [esp+0x8]
c0022120:	c3                   	ret    

c0022121 <sseLoad>:
c0022121:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0022126:	c3                   	ret    

c0022127 <sseInit>:
c0022127:	e8 40 00 00 00       	call   c002216c <x87Init>
c002212c:	0f 20 e0             	mov    eax,cr4
c002212f:	66 0d 00 06          	or     ax,0x600
c0022133:	0f 22 e0             	mov    cr4,eax
c0022136:	c3                   	ret    

c0022137 <sseClose>:
c0022137:	c3                   	ret    
c0022138:	66 90                	xchg   ax,ax
c002213a:	66 90                	xchg   ax,ax
c002213c:	66 90                	xchg   ax,ax
c002213e:	66 90                	xchg   ax,ax

c0022140 <value_37F>:
c0022140:	7f 03                	jg     c0022145 <value_37A+0x1>

c0022142 <value_37E>:
c0022142:	7e 03                	jle    c0022147 <x87Detect+0x1>

c0022144 <value_37A>:
c0022144:	7a 03                	jp     c0022149 <x87Detect+0x3>

c0022146 <x87Detect>:
c0022146:	b8 01 00 00 00       	mov    eax,0x1
c002214b:	0f a2                	cpuid  
c002214d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022153:	74 06                	je     c002215b <x87Detect.nox87>
c0022155:	b8 01 00 00 00       	mov    eax,0x1
c002215a:	c3                   	ret    

c002215b <x87Detect.nox87>:
c002215b:	b8 00 00 00 00       	mov    eax,0x0
c0022160:	c3                   	ret    

c0022161 <x87Save>:
c0022161:	9b dd 74 24 08       	fsave  [esp+0x8]
c0022166:	c3                   	ret    

c0022167 <x87Load>:
c0022167:	dd 64 24 08          	frstor [esp+0x8]
c002216b:	c3                   	ret    

c002216c <x87Init>:
c002216c:	9b db e3             	finit  
c002216f:	0f 20 c0             	mov    eax,cr0
c0022172:	66 25 fb ff          	and    ax,0xfffb
c0022176:	66 0d 22 00          	or     ax,0x22
c002217a:	0f 22 c0             	mov    cr0,eax
c002217d:	0f 06                	clts   
c002217f:	d9 2d 44 21 02 c0    	fldcw  WORD PTR ds:0xc0022144
c0022185:	c3                   	ret    

c0022186 <x87Close>:
c0022186:	c3                   	ret    
c0022187:	90                   	nop

c0022188 <__do_global_ctors_aux>:
c0022188:	a1 a8 4c 02 c0       	mov    eax,ds:0xc0024ca8
c002218d:	83 f8 ff             	cmp    eax,0xffffffff
c0022190:	74 1a                	je     c00221ac <__do_global_ctors_aux+0x24>
c0022192:	55                   	push   ebp
c0022193:	89 e5                	mov    ebp,esp
c0022195:	53                   	push   ebx
c0022196:	52                   	push   edx
c0022197:	bb a8 4c 02 c0       	mov    ebx,0xc0024ca8
c002219c:	ff d0                	call   eax
c002219e:	83 eb 04             	sub    ebx,0x4
c00221a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00221a3:	83 f8 ff             	cmp    eax,0xffffffff
c00221a6:	75 f4                	jne    c002219c <__do_global_ctors_aux+0x14>
c00221a8:	58                   	pop    eax
c00221a9:	5b                   	pop    ebx
c00221aa:	5d                   	pop    ebp
c00221ab:	c3                   	ret    
c00221ac:	c3                   	ret    
c00221ad:	66 90                	xchg   ax,ax
c00221af:	90                   	nop

c00221b0 <__divdi3>:
c00221b0:	55                   	push   ebp
c00221b1:	57                   	push   edi
c00221b2:	56                   	push   esi
c00221b3:	53                   	push   ebx
c00221b4:	83 ec 1c             	sub    esp,0x1c
c00221b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00221bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00221bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00221c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00221c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00221ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00221ce:	85 db                	test   ebx,ebx
c00221d0:	0f 88 8e 00 00 00    	js     c0022264 <__divdi3+0xb4>
c00221d6:	89 dd                	mov    ebp,ebx
c00221d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00221e0:	89 d3                	mov    ebx,edx
c00221e2:	85 d2                	test   edx,edx
c00221e4:	79 0d                	jns    c00221f3 <__divdi3+0x43>
c00221e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00221ea:	f7 d8                	neg    eax
c00221ec:	83 d2 00             	adc    edx,0x0
c00221ef:	f7 da                	neg    edx
c00221f1:	89 d3                	mov    ebx,edx
c00221f3:	89 c7                	mov    edi,eax
c00221f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00221f8:	85 db                	test   ebx,ebx
c00221fa:	75 48                	jne    c0022244 <__divdi3+0x94>
c00221fc:	39 ef                	cmp    edi,ebp
c00221fe:	76 24                	jbe    c0022224 <__divdi3+0x74>
c0022200:	89 ea                	mov    edx,ebp
c0022202:	f7 f7                	div    edi
c0022204:	89 c1                	mov    ecx,eax
c0022206:	31 f6                	xor    esi,esi
c0022208:	89 c8                	mov    eax,ecx
c002220a:	89 f2                	mov    edx,esi
c002220c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022210:	85 c9                	test   ecx,ecx
c0022212:	74 07                	je     c002221b <__divdi3+0x6b>
c0022214:	f7 d8                	neg    eax
c0022216:	83 d2 00             	adc    edx,0x0
c0022219:	f7 da                	neg    edx
c002221b:	83 c4 1c             	add    esp,0x1c
c002221e:	5b                   	pop    ebx
c002221f:	5e                   	pop    esi
c0022220:	5f                   	pop    edi
c0022221:	5d                   	pop    ebp
c0022222:	c3                   	ret    
c0022223:	90                   	nop
c0022224:	85 ff                	test   edi,edi
c0022226:	75 0b                	jne    c0022233 <__divdi3+0x83>
c0022228:	b8 01 00 00 00       	mov    eax,0x1
c002222d:	31 d2                	xor    edx,edx
c002222f:	f7 f3                	div    ebx
c0022231:	89 c7                	mov    edi,eax
c0022233:	31 d2                	xor    edx,edx
c0022235:	89 e8                	mov    eax,ebp
c0022237:	f7 f7                	div    edi
c0022239:	89 c6                	mov    esi,eax
c002223b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002223e:	f7 f7                	div    edi
c0022240:	89 c1                	mov    ecx,eax
c0022242:	eb c4                	jmp    c0022208 <__divdi3+0x58>
c0022244:	39 eb                	cmp    ebx,ebp
c0022246:	77 3c                	ja     c0022284 <__divdi3+0xd4>
c0022248:	0f bd f3             	bsr    esi,ebx
c002224b:	83 f6 1f             	xor    esi,0x1f
c002224e:	75 40                	jne    c0022290 <__divdi3+0xe0>
c0022250:	39 eb                	cmp    ebx,ebp
c0022252:	72 09                	jb     c002225d <__divdi3+0xad>
c0022254:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022257:	0f 87 97 00 00 00    	ja     c00222f4 <__divdi3+0x144>
c002225d:	b9 01 00 00 00       	mov    ecx,0x1
c0022262:	eb a4                	jmp    c0022208 <__divdi3+0x58>
c0022264:	f7 d9                	neg    ecx
c0022266:	83 d3 00             	adc    ebx,0x0
c0022269:	f7 db                	neg    ebx
c002226b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002226e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022272:	89 dd                	mov    ebp,ebx
c0022274:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002227c:	e9 5f ff ff ff       	jmp    c00221e0 <__divdi3+0x30>
c0022281:	8d 76 00             	lea    esi,[esi+0x0]
c0022284:	31 f6                	xor    esi,esi
c0022286:	31 c9                	xor    ecx,ecx
c0022288:	e9 7b ff ff ff       	jmp    c0022208 <__divdi3+0x58>
c002228d:	8d 76 00             	lea    esi,[esi+0x0]
c0022290:	b8 20 00 00 00       	mov    eax,0x20
c0022295:	29 f0                	sub    eax,esi
c0022297:	89 f1                	mov    ecx,esi
c0022299:	d3 e3                	shl    ebx,cl
c002229b:	89 fa                	mov    edx,edi
c002229d:	88 c1                	mov    cl,al
c002229f:	d3 ea                	shr    edx,cl
c00222a1:	09 da                	or     edx,ebx
c00222a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222a7:	89 f1                	mov    ecx,esi
c00222a9:	d3 e7                	shl    edi,cl
c00222ab:	89 eb                	mov    ebx,ebp
c00222ad:	88 c1                	mov    cl,al
c00222af:	d3 eb                	shr    ebx,cl
c00222b1:	89 f1                	mov    ecx,esi
c00222b3:	d3 e5                	shl    ebp,cl
c00222b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00222b8:	88 c1                	mov    cl,al
c00222ba:	d3 ea                	shr    edx,cl
c00222bc:	09 d5                	or     ebp,edx
c00222be:	89 e8                	mov    eax,ebp
c00222c0:	89 da                	mov    edx,ebx
c00222c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00222c6:	89 d3                	mov    ebx,edx
c00222c8:	89 c5                	mov    ebp,eax
c00222ca:	f7 e7                	mul    edi
c00222cc:	39 d3                	cmp    ebx,edx
c00222ce:	72 18                	jb     c00222e8 <__divdi3+0x138>
c00222d0:	74 0a                	je     c00222dc <__divdi3+0x12c>
c00222d2:	89 e9                	mov    ecx,ebp
c00222d4:	31 f6                	xor    esi,esi
c00222d6:	e9 2d ff ff ff       	jmp    c0022208 <__divdi3+0x58>
c00222db:	90                   	nop
c00222dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00222df:	89 f1                	mov    ecx,esi
c00222e1:	d3 e7                	shl    edi,cl
c00222e3:	39 c7                	cmp    edi,eax
c00222e5:	73 eb                	jae    c00222d2 <__divdi3+0x122>
c00222e7:	90                   	nop
c00222e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00222eb:	31 f6                	xor    esi,esi
c00222ed:	e9 16 ff ff ff       	jmp    c0022208 <__divdi3+0x58>
c00222f2:	66 90                	xchg   ax,ax
c00222f4:	31 c9                	xor    ecx,ecx
c00222f6:	e9 0d ff ff ff       	jmp    c0022208 <__divdi3+0x58>
c00222fb:	90                   	nop

c00222fc <__moddi3>:
c00222fc:	55                   	push   ebp
c00222fd:	57                   	push   edi
c00222fe:	56                   	push   esi
c00222ff:	53                   	push   ebx
c0022300:	83 ec 2c             	sub    esp,0x2c
c0022303:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022307:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002230b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002230f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022313:	85 db                	test   ebx,ebx
c0022315:	0f 88 85 00 00 00    	js     c00223a0 <__moddi3+0xa4>
c002231b:	89 de                	mov    esi,ebx
c002231d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022325:	89 d7                	mov    edi,edx
c0022327:	85 d2                	test   edx,edx
c0022329:	79 09                	jns    c0022334 <__moddi3+0x38>
c002232b:	f7 d8                	neg    eax
c002232d:	83 d2 00             	adc    edx,0x0
c0022330:	f7 da                	neg    edx
c0022332:	89 d7                	mov    edi,edx
c0022334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022338:	89 cd                	mov    ebp,ecx
c002233a:	85 ff                	test   edi,edi
c002233c:	75 52                	jne    c0022390 <__moddi3+0x94>
c002233e:	89 c3                	mov    ebx,eax
c0022340:	39 f0                	cmp    eax,esi
c0022342:	76 24                	jbe    c0022368 <__moddi3+0x6c>
c0022344:	89 c8                	mov    eax,ecx
c0022346:	89 f2                	mov    edx,esi
c0022348:	f7 f3                	div    ebx
c002234a:	89 d6                	mov    esi,edx
c002234c:	89 f0                	mov    eax,esi
c002234e:	31 d2                	xor    edx,edx
c0022350:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022354:	85 c9                	test   ecx,ecx
c0022356:	74 07                	je     c002235f <__moddi3+0x63>
c0022358:	f7 d8                	neg    eax
c002235a:	83 d2 00             	adc    edx,0x0
c002235d:	f7 da                	neg    edx
c002235f:	83 c4 2c             	add    esp,0x2c
c0022362:	5b                   	pop    ebx
c0022363:	5e                   	pop    esi
c0022364:	5f                   	pop    edi
c0022365:	5d                   	pop    ebp
c0022366:	c3                   	ret    
c0022367:	90                   	nop
c0022368:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002236c:	85 db                	test   ebx,ebx
c002236e:	75 0d                	jne    c002237d <__moddi3+0x81>
c0022370:	b8 01 00 00 00       	mov    eax,0x1
c0022375:	31 d2                	xor    edx,edx
c0022377:	f7 f7                	div    edi
c0022379:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002237d:	89 f0                	mov    eax,esi
c002237f:	31 d2                	xor    edx,edx
c0022381:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022385:	f7 f7                	div    edi
c0022387:	89 e8                	mov    eax,ebp
c0022389:	f7 f7                	div    edi
c002238b:	89 d6                	mov    esi,edx
c002238d:	eb bd                	jmp    c002234c <__moddi3+0x50>
c002238f:	90                   	nop
c0022390:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022394:	39 f7                	cmp    edi,esi
c0022396:	76 20                	jbe    c00223b8 <__moddi3+0xbc>
c0022398:	89 c8                	mov    eax,ecx
c002239a:	89 f2                	mov    edx,esi
c002239c:	eb b2                	jmp    c0022350 <__moddi3+0x54>
c002239e:	66 90                	xchg   ax,ax
c00223a0:	f7 d9                	neg    ecx
c00223a2:	83 d3 00             	adc    ebx,0x0
c00223a5:	f7 db                	neg    ebx
c00223a7:	89 de                	mov    esi,ebx
c00223a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00223b1:	e9 6f ff ff ff       	jmp    c0022325 <__moddi3+0x29>
c00223b6:	66 90                	xchg   ax,ax
c00223b8:	0f bd c7             	bsr    eax,edi
c00223bb:	83 f0 1f             	xor    eax,0x1f
c00223be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223c2:	75 24                	jne    c00223e8 <__moddi3+0xec>
c00223c4:	39 f7                	cmp    edi,esi
c00223c6:	72 06                	jb     c00223ce <__moddi3+0xd2>
c00223c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00223cc:	77 0c                	ja     c00223da <__moddi3+0xde>
c00223ce:	89 e9                	mov    ecx,ebp
c00223d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00223d4:	19 fe                	sbb    esi,edi
c00223d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00223da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00223de:	89 f2                	mov    edx,esi
c00223e0:	e9 6b ff ff ff       	jmp    c0022350 <__moddi3+0x54>
c00223e5:	8d 76 00             	lea    esi,[esi+0x0]
c00223e8:	b8 20 00 00 00       	mov    eax,0x20
c00223ed:	89 c2                	mov    edx,eax
c00223ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00223f3:	29 da                	sub    edx,ebx
c00223f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00223f9:	88 d9                	mov    cl,bl
c00223fb:	d3 e7                	shl    edi,cl
c00223fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022401:	88 d1                	mov    cl,dl
c0022403:	d3 e8                	shr    eax,cl
c0022405:	09 c7                	or     edi,eax
c0022407:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002240b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002240f:	89 d8                	mov    eax,ebx
c0022411:	88 d9                	mov    cl,bl
c0022413:	d3 e7                	shl    edi,cl
c0022415:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022419:	89 f3                	mov    ebx,esi
c002241b:	88 d1                	mov    cl,dl
c002241d:	d3 eb                	shr    ebx,cl
c002241f:	89 c7                	mov    edi,eax
c0022421:	88 c1                	mov    cl,al
c0022423:	d3 e6                	shl    esi,cl
c0022425:	89 e8                	mov    eax,ebp
c0022427:	88 d1                	mov    cl,dl
c0022429:	d3 e8                	shr    eax,cl
c002242b:	09 f0                	or     eax,esi
c002242d:	89 f9                	mov    ecx,edi
c002242f:	d3 e5                	shl    ebp,cl
c0022431:	89 da                	mov    edx,ebx
c0022433:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0022437:	89 d3                	mov    ebx,edx
c0022439:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002243d:	89 c6                	mov    esi,eax
c002243f:	89 d1                	mov    ecx,edx
c0022441:	39 d3                	cmp    ebx,edx
c0022443:	72 27                	jb     c002246c <__moddi3+0x170>
c0022445:	74 21                	je     c0022468 <__moddi3+0x16c>
c0022447:	29 f5                	sub    ebp,esi
c0022449:	19 cb                	sbb    ebx,ecx
c002244b:	89 de                	mov    esi,ebx
c002244d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022451:	d3 e6                	shl    esi,cl
c0022453:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022457:	89 f9                	mov    ecx,edi
c0022459:	d3 ed                	shr    ebp,cl
c002245b:	09 ee                	or     esi,ebp
c002245d:	89 f0                	mov    eax,esi
c002245f:	d3 eb                	shr    ebx,cl
c0022461:	89 da                	mov    edx,ebx
c0022463:	e9 e8 fe ff ff       	jmp    c0022350 <__moddi3+0x54>
c0022468:	39 c5                	cmp    ebp,eax
c002246a:	73 db                	jae    c0022447 <__moddi3+0x14b>
c002246c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022470:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0022474:	89 d1                	mov    ecx,edx
c0022476:	89 c6                	mov    esi,eax
c0022478:	eb cd                	jmp    c0022447 <__moddi3+0x14b>
c002247a:	66 90                	xchg   ax,ax

c002247c <__udivdi3>:
c002247c:	55                   	push   ebp
c002247d:	57                   	push   edi
c002247e:	56                   	push   esi
c002247f:	53                   	push   ebx
c0022480:	83 ec 1c             	sub    esp,0x1c
c0022483:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022487:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002248b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002248f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022493:	85 d2                	test   edx,edx
c0022495:	75 41                	jne    c00224d8 <__udivdi3+0x5c>
c0022497:	39 f7                	cmp    edi,esi
c0022499:	76 15                	jbe    c00224b0 <__udivdi3+0x34>
c002249b:	89 e8                	mov    eax,ebp
c002249d:	89 f2                	mov    edx,esi
c002249f:	f7 f7                	div    edi
c00224a1:	31 db                	xor    ebx,ebx
c00224a3:	89 da                	mov    edx,ebx
c00224a5:	83 c4 1c             	add    esp,0x1c
c00224a8:	5b                   	pop    ebx
c00224a9:	5e                   	pop    esi
c00224aa:	5f                   	pop    edi
c00224ab:	5d                   	pop    ebp
c00224ac:	c3                   	ret    
c00224ad:	8d 76 00             	lea    esi,[esi+0x0]
c00224b0:	89 f9                	mov    ecx,edi
c00224b2:	85 ff                	test   edi,edi
c00224b4:	75 0b                	jne    c00224c1 <__udivdi3+0x45>
c00224b6:	b8 01 00 00 00       	mov    eax,0x1
c00224bb:	31 d2                	xor    edx,edx
c00224bd:	f7 f7                	div    edi
c00224bf:	89 c1                	mov    ecx,eax
c00224c1:	31 d2                	xor    edx,edx
c00224c3:	89 f0                	mov    eax,esi
c00224c5:	f7 f1                	div    ecx
c00224c7:	89 c3                	mov    ebx,eax
c00224c9:	89 e8                	mov    eax,ebp
c00224cb:	f7 f1                	div    ecx
c00224cd:	89 da                	mov    edx,ebx
c00224cf:	83 c4 1c             	add    esp,0x1c
c00224d2:	5b                   	pop    ebx
c00224d3:	5e                   	pop    esi
c00224d4:	5f                   	pop    edi
c00224d5:	5d                   	pop    ebp
c00224d6:	c3                   	ret    
c00224d7:	90                   	nop
c00224d8:	39 f2                	cmp    edx,esi
c00224da:	77 1c                	ja     c00224f8 <__udivdi3+0x7c>
c00224dc:	0f bd da             	bsr    ebx,edx
c00224df:	83 f3 1f             	xor    ebx,0x1f
c00224e2:	75 24                	jne    c0022508 <__udivdi3+0x8c>
c00224e4:	39 f2                	cmp    edx,esi
c00224e6:	72 08                	jb     c00224f0 <__udivdi3+0x74>
c00224e8:	39 ef                	cmp    edi,ebp
c00224ea:	0f 87 84 00 00 00    	ja     c0022574 <__udivdi3+0xf8>
c00224f0:	b8 01 00 00 00       	mov    eax,0x1
c00224f5:	eb ac                	jmp    c00224a3 <__udivdi3+0x27>
c00224f7:	90                   	nop
c00224f8:	31 db                	xor    ebx,ebx
c00224fa:	31 c0                	xor    eax,eax
c00224fc:	89 da                	mov    edx,ebx
c00224fe:	83 c4 1c             	add    esp,0x1c
c0022501:	5b                   	pop    ebx
c0022502:	5e                   	pop    esi
c0022503:	5f                   	pop    edi
c0022504:	5d                   	pop    ebp
c0022505:	c3                   	ret    
c0022506:	66 90                	xchg   ax,ax
c0022508:	b8 20 00 00 00       	mov    eax,0x20
c002250d:	29 d8                	sub    eax,ebx
c002250f:	88 d9                	mov    cl,bl
c0022511:	d3 e2                	shl    edx,cl
c0022513:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022517:	89 fa                	mov    edx,edi
c0022519:	88 c1                	mov    cl,al
c002251b:	d3 ea                	shr    edx,cl
c002251d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022521:	09 d1                	or     ecx,edx
c0022523:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022527:	88 d9                	mov    cl,bl
c0022529:	d3 e7                	shl    edi,cl
c002252b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002252f:	89 f7                	mov    edi,esi
c0022531:	88 c1                	mov    cl,al
c0022533:	d3 ef                	shr    edi,cl
c0022535:	88 d9                	mov    cl,bl
c0022537:	d3 e6                	shl    esi,cl
c0022539:	89 ea                	mov    edx,ebp
c002253b:	88 c1                	mov    cl,al
c002253d:	d3 ea                	shr    edx,cl
c002253f:	09 d6                	or     esi,edx
c0022541:	89 f0                	mov    eax,esi
c0022543:	89 fa                	mov    edx,edi
c0022545:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022549:	89 d7                	mov    edi,edx
c002254b:	89 c6                	mov    esi,eax
c002254d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022551:	39 d7                	cmp    edi,edx
c0022553:	72 13                	jb     c0022568 <__udivdi3+0xec>
c0022555:	74 09                	je     c0022560 <__udivdi3+0xe4>
c0022557:	89 f0                	mov    eax,esi
c0022559:	31 db                	xor    ebx,ebx
c002255b:	e9 43 ff ff ff       	jmp    c00224a3 <__udivdi3+0x27>
c0022560:	88 d9                	mov    cl,bl
c0022562:	d3 e5                	shl    ebp,cl
c0022564:	39 c5                	cmp    ebp,eax
c0022566:	73 ef                	jae    c0022557 <__udivdi3+0xdb>
c0022568:	8d 46 ff             	lea    eax,[esi-0x1]
c002256b:	31 db                	xor    ebx,ebx
c002256d:	e9 31 ff ff ff       	jmp    c00224a3 <__udivdi3+0x27>
c0022572:	66 90                	xchg   ax,ax
c0022574:	31 c0                	xor    eax,eax
c0022576:	e9 28 ff ff ff       	jmp    c00224a3 <__udivdi3+0x27>
c002257b:	90                   	nop

c002257c <__umoddi3>:
c002257c:	55                   	push   ebp
c002257d:	57                   	push   edi
c002257e:	56                   	push   esi
c002257f:	53                   	push   ebx
c0022580:	83 ec 1c             	sub    esp,0x1c
c0022583:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022587:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002258b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002258f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022593:	89 da                	mov    edx,ebx
c0022595:	85 c0                	test   eax,eax
c0022597:	75 37                	jne    c00225d0 <__umoddi3+0x54>
c0022599:	39 df                	cmp    edi,ebx
c002259b:	76 13                	jbe    c00225b0 <__umoddi3+0x34>
c002259d:	89 f0                	mov    eax,esi
c002259f:	f7 f7                	div    edi
c00225a1:	89 d0                	mov    eax,edx
c00225a3:	31 d2                	xor    edx,edx
c00225a5:	83 c4 1c             	add    esp,0x1c
c00225a8:	5b                   	pop    ebx
c00225a9:	5e                   	pop    esi
c00225aa:	5f                   	pop    edi
c00225ab:	5d                   	pop    ebp
c00225ac:	c3                   	ret    
c00225ad:	8d 76 00             	lea    esi,[esi+0x0]
c00225b0:	89 fd                	mov    ebp,edi
c00225b2:	85 ff                	test   edi,edi
c00225b4:	75 0b                	jne    c00225c1 <__umoddi3+0x45>
c00225b6:	b8 01 00 00 00       	mov    eax,0x1
c00225bb:	31 d2                	xor    edx,edx
c00225bd:	f7 f7                	div    edi
c00225bf:	89 c5                	mov    ebp,eax
c00225c1:	89 d8                	mov    eax,ebx
c00225c3:	31 d2                	xor    edx,edx
c00225c5:	f7 f5                	div    ebp
c00225c7:	89 f0                	mov    eax,esi
c00225c9:	f7 f5                	div    ebp
c00225cb:	89 d0                	mov    eax,edx
c00225cd:	eb d4                	jmp    c00225a3 <__umoddi3+0x27>
c00225cf:	90                   	nop
c00225d0:	89 f1                	mov    ecx,esi
c00225d2:	39 d8                	cmp    eax,ebx
c00225d4:	76 0a                	jbe    c00225e0 <__umoddi3+0x64>
c00225d6:	89 f0                	mov    eax,esi
c00225d8:	83 c4 1c             	add    esp,0x1c
c00225db:	5b                   	pop    ebx
c00225dc:	5e                   	pop    esi
c00225dd:	5f                   	pop    edi
c00225de:	5d                   	pop    ebp
c00225df:	c3                   	ret    
c00225e0:	0f bd e8             	bsr    ebp,eax
c00225e3:	83 f5 1f             	xor    ebp,0x1f
c00225e6:	75 1c                	jne    c0022604 <__umoddi3+0x88>
c00225e8:	39 d8                	cmp    eax,ebx
c00225ea:	72 04                	jb     c00225f0 <__umoddi3+0x74>
c00225ec:	39 f7                	cmp    edi,esi
c00225ee:	77 08                	ja     c00225f8 <__umoddi3+0x7c>
c00225f0:	89 da                	mov    edx,ebx
c00225f2:	29 fe                	sub    esi,edi
c00225f4:	19 c2                	sbb    edx,eax
c00225f6:	89 f1                	mov    ecx,esi
c00225f8:	89 c8                	mov    eax,ecx
c00225fa:	83 c4 1c             	add    esp,0x1c
c00225fd:	5b                   	pop    ebx
c00225fe:	5e                   	pop    esi
c00225ff:	5f                   	pop    edi
c0022600:	5d                   	pop    ebp
c0022601:	c3                   	ret    
c0022602:	66 90                	xchg   ax,ax
c0022604:	ba 20 00 00 00       	mov    edx,0x20
c0022609:	29 ea                	sub    edx,ebp
c002260b:	89 e9                	mov    ecx,ebp
c002260d:	d3 e0                	shl    eax,cl
c002260f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022613:	89 f8                	mov    eax,edi
c0022615:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022619:	88 d1                	mov    cl,dl
c002261b:	d3 e8                	shr    eax,cl
c002261d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022621:	09 c1                	or     ecx,eax
c0022623:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022627:	89 e9                	mov    ecx,ebp
c0022629:	d3 e7                	shl    edi,cl
c002262b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002262f:	89 d8                	mov    eax,ebx
c0022631:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022635:	88 d1                	mov    cl,dl
c0022637:	d3 e8                	shr    eax,cl
c0022639:	89 c7                	mov    edi,eax
c002263b:	89 e9                	mov    ecx,ebp
c002263d:	d3 e3                	shl    ebx,cl
c002263f:	89 f0                	mov    eax,esi
c0022641:	88 d1                	mov    cl,dl
c0022643:	d3 e8                	shr    eax,cl
c0022645:	09 d8                	or     eax,ebx
c0022647:	89 e9                	mov    ecx,ebp
c0022649:	d3 e6                	shl    esi,cl
c002264b:	89 f3                	mov    ebx,esi
c002264d:	89 fa                	mov    edx,edi
c002264f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022653:	89 d1                	mov    ecx,edx
c0022655:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022659:	89 c6                	mov    esi,eax
c002265b:	89 d7                	mov    edi,edx
c002265d:	39 d1                	cmp    ecx,edx
c002265f:	72 27                	jb     c0022688 <__umoddi3+0x10c>
c0022661:	74 21                	je     c0022684 <__umoddi3+0x108>
c0022663:	89 ca                	mov    edx,ecx
c0022665:	29 f3                	sub    ebx,esi
c0022667:	19 fa                	sbb    edx,edi
c0022669:	89 d0                	mov    eax,edx
c002266b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002266f:	d3 e0                	shl    eax,cl
c0022671:	89 e9                	mov    ecx,ebp
c0022673:	d3 eb                	shr    ebx,cl
c0022675:	09 d8                	or     eax,ebx
c0022677:	d3 ea                	shr    edx,cl
c0022679:	83 c4 1c             	add    esp,0x1c
c002267c:	5b                   	pop    ebx
c002267d:	5e                   	pop    esi
c002267e:	5f                   	pop    edi
c002267f:	5d                   	pop    ebp
c0022680:	c3                   	ret    
c0022681:	8d 76 00             	lea    esi,[esi+0x0]
c0022684:	39 c3                	cmp    ebx,eax
c0022686:	73 db                	jae    c0022663 <__umoddi3+0xe7>
c0022688:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002268c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022690:	89 d7                	mov    edi,edx
c0022692:	89 c6                	mov    esi,eax
c0022694:	eb cd                	jmp    c0022663 <__umoddi3+0xe7>

c0022696 <__addsf3>:
c0022696:	55                   	push   ebp
c0022697:	89 e5                	mov    ebp,esp
c0022699:	57                   	push   edi
c002269a:	56                   	push   esi
c002269b:	53                   	push   ebx
c002269c:	83 ec 08             	sub    esp,0x8
c002269f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00226a2:	89 fa                	mov    edx,edi
c00226a4:	89 f8                	mov    eax,edi
c00226a6:	c1 f8 17             	sar    eax,0x17
c00226a9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00226ac:	c1 e2 08             	shl    edx,0x8
c00226af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00226b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00226b8:	89 de                	mov    esi,ebx
c00226ba:	c1 fe 17             	sar    esi,0x17
c00226bd:	c1 e3 08             	shl    ebx,0x8
c00226c0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00226c6:	31 f0                	xor    eax,esi
c00226c8:	0f 88 3b 01 00 00    	js     c0022809 <__addsf3+0x173>
c00226ce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00226d1:	29 f1                	sub    ecx,esi
c00226d3:	85 c9                	test   ecx,ecx
c00226d5:	7e 54                	jle    c002272b <__addsf3+0x95>
c00226d7:	89 f0                	mov    eax,esi
c00226d9:	84 c0                	test   al,al
c00226db:	75 10                	jne    c00226ed <__addsf3+0x57>
c00226dd:	85 db                	test   ebx,ebx
c00226df:	0f 84 aa 02 00 00    	je     c002298f <__addsf3+0x2f9>
c00226e5:	49                   	dec    ecx
c00226e6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00226e9:	74 38                	je     c0022723 <__addsf3+0x8d>
c00226eb:	eb 13                	jmp    c0022700 <__addsf3+0x6a>
c00226ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226f0:	f7 d0                	not    eax
c00226f2:	84 c0                	test   al,al
c00226f4:	0f 84 95 02 00 00    	je     c002298f <__addsf3+0x2f9>
c00226fa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0022700:	83 f9 1f             	cmp    ecx,0x1f
c0022703:	0f 8f 86 02 00 00    	jg     c002298f <__addsf3+0x2f9>
c0022709:	89 de                	mov    esi,ebx
c002270b:	d3 ee                	shr    esi,cl
c002270d:	b8 20 00 00 00       	mov    eax,0x20
c0022712:	29 c8                	sub    eax,ecx
c0022714:	89 c1                	mov    ecx,eax
c0022716:	d3 e3                	shl    ebx,cl
c0022718:	31 c0                	xor    eax,eax
c002271a:	85 db                	test   ebx,ebx
c002271c:	0f 95 c0             	setne  al
c002271f:	09 f0                	or     eax,esi
c0022721:	01 d0                	add    eax,edx
c0022723:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0022726:	e9 b6 00 00 00       	jmp    c00227e1 <__addsf3+0x14b>
c002272b:	74 5c                	je     c0022789 <__addsf3+0xf3>
c002272d:	89 f1                	mov    ecx,esi
c002272f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0022732:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022735:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0022739:	75 14                	jne    c002274f <__addsf3+0xb9>
c002273b:	85 d2                	test   edx,edx
c002273d:	0f 84 4c 02 00 00    	je     c002298f <__addsf3+0x2f9>
c0022743:	49                   	dec    ecx
c0022744:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0022747:	0f 84 94 00 00 00    	je     c00227e1 <__addsf3+0x14b>
c002274d:	eb 12                	jmp    c0022761 <__addsf3+0xcb>
c002274f:	89 f0                	mov    eax,esi
c0022751:	f7 d0                	not    eax
c0022753:	84 c0                	test   al,al
c0022755:	0f 84 34 02 00 00    	je     c002298f <__addsf3+0x2f9>
c002275b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0022761:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022764:	83 f9 1f             	cmp    ecx,0x1f
c0022767:	0f 8f 22 02 00 00    	jg     c002298f <__addsf3+0x2f9>
c002276d:	89 d7                	mov    edi,edx
c002276f:	d3 ef                	shr    edi,cl
c0022771:	b8 20 00 00 00       	mov    eax,0x20
c0022776:	29 c8                	sub    eax,ecx
c0022778:	89 c1                	mov    ecx,eax
c002277a:	d3 e2                	shl    edx,cl
c002277c:	31 c0                	xor    eax,eax
c002277e:	85 d2                	test   edx,edx
c0022780:	0f 95 c0             	setne  al
c0022783:	09 f8                	or     eax,edi
c0022785:	01 d8                	add    eax,ebx
c0022787:	eb 58                	jmp    c00227e1 <__addsf3+0x14b>
c0022789:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002278c:	8d 70 01             	lea    esi,[eax+0x1]
c002278f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0022795:	75 32                	jne    c00227c9 <__addsf3+0x133>
c0022797:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002279b:	75 1f                	jne    c00227bc <__addsf3+0x126>
c002279d:	85 d2                	test   edx,edx
c002279f:	0f 84 e0 01 00 00    	je     c0022985 <__addsf3+0x2ef>
c00227a5:	85 db                	test   ebx,ebx
c00227a7:	0f 84 e2 01 00 00    	je     c002298f <__addsf3+0x2f9>
c00227ad:	89 d0                	mov    eax,edx
c00227af:	01 d8                	add    eax,ebx
c00227b1:	0f 89 a9 01 00 00    	jns    c0022960 <__addsf3+0x2ca>
c00227b7:	e9 9d 01 00 00       	jmp    c0022959 <__addsf3+0x2c3>
c00227bc:	85 d2                	test   edx,edx
c00227be:	0f 85 cb 01 00 00    	jne    c002298f <__addsf3+0x2f9>
c00227c4:	e9 bc 01 00 00       	jmp    c0022985 <__addsf3+0x2ef>
c00227c9:	31 c0                	xor    eax,eax
c00227cb:	89 f1                	mov    ecx,esi
c00227cd:	f7 d1                	not    ecx
c00227cf:	84 c9                	test   cl,cl
c00227d1:	0f 84 90 01 00 00    	je     c0022967 <__addsf3+0x2d1>
c00227d7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00227da:	d1 e8                	shr    eax,1
c00227dc:	e9 86 01 00 00       	jmp    c0022967 <__addsf3+0x2d1>
c00227e1:	85 c0                	test   eax,eax
c00227e3:	0f 89 7e 01 00 00    	jns    c0022967 <__addsf3+0x2d1>
c00227e9:	46                   	inc    esi
c00227ea:	89 f2                	mov    edx,esi
c00227ec:	f7 d2                	not    edx
c00227ee:	84 d2                	test   dl,dl
c00227f0:	0f 84 6f 01 00 00    	je     c0022965 <__addsf3+0x2cf>
c00227f6:	89 c2                	mov    edx,eax
c00227f8:	83 e2 01             	and    edx,0x1
c00227fb:	d1 e8                	shr    eax,1
c00227fd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0022802:	09 d0                	or     eax,edx
c0022804:	e9 5e 01 00 00       	jmp    c0022967 <__addsf3+0x2d1>
c0022809:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002280d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0022810:	89 f0                	mov    eax,esi
c0022812:	0f b6 c0             	movzx  eax,al
c0022815:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0022818:	29 c1                	sub    ecx,eax
c002281a:	85 c9                	test   ecx,ecx
c002281c:	7e 55                	jle    c0022873 <__addsf3+0x1dd>
c002281e:	85 c0                	test   eax,eax
c0022820:	75 11                	jne    c0022833 <__addsf3+0x19d>
c0022822:	85 db                	test   ebx,ebx
c0022824:	0f 84 65 01 00 00    	je     c002298f <__addsf3+0x2f9>
c002282a:	49                   	dec    ecx
c002282b:	75 19                	jne    c0022846 <__addsf3+0x1b0>
c002282d:	89 d0                	mov    eax,edx
c002282f:	29 d8                	sub    eax,ebx
c0022831:	eb 38                	jmp    c002286b <__addsf3+0x1d5>
c0022833:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022836:	f7 d0                	not    eax
c0022838:	84 c0                	test   al,al
c002283a:	0f 84 4f 01 00 00    	je     c002298f <__addsf3+0x2f9>
c0022840:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0022846:	83 f9 1f             	cmp    ecx,0x1f
c0022849:	0f 8f 40 01 00 00    	jg     c002298f <__addsf3+0x2f9>
c002284f:	89 de                	mov    esi,ebx
c0022851:	d3 ee                	shr    esi,cl
c0022853:	b8 20 00 00 00       	mov    eax,0x20
c0022858:	29 c8                	sub    eax,ecx
c002285a:	89 c1                	mov    ecx,eax
c002285c:	d3 e3                	shl    ebx,cl
c002285e:	31 c0                	xor    eax,eax
c0022860:	85 db                	test   ebx,ebx
c0022862:	0f 95 c0             	setne  al
c0022865:	09 f0                	or     eax,esi
c0022867:	29 c2                	sub    edx,eax
c0022869:	89 d0                	mov    eax,edx
c002286b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002286e:	e9 af 00 00 00       	jmp    c0022922 <__addsf3+0x28c>
c0022873:	74 5c                	je     c00228d1 <__addsf3+0x23b>
c0022875:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0022878:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002287b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002287f:	75 14                	jne    c0022895 <__addsf3+0x1ff>
c0022881:	85 d2                	test   edx,edx
c0022883:	0f 84 06 01 00 00    	je     c002298f <__addsf3+0x2f9>
c0022889:	48                   	dec    eax
c002288a:	75 1b                	jne    c00228a7 <__addsf3+0x211>
c002288c:	89 d8                	mov    eax,ebx
c002288e:	29 d0                	sub    eax,edx
c0022890:	e9 8d 00 00 00       	jmp    c0022922 <__addsf3+0x28c>
c0022895:	89 f1                	mov    ecx,esi
c0022897:	f7 d1                	not    ecx
c0022899:	84 c9                	test   cl,cl
c002289b:	0f 84 ee 00 00 00    	je     c002298f <__addsf3+0x2f9>
c00228a1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00228a7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00228aa:	83 f8 1f             	cmp    eax,0x1f
c00228ad:	0f 8f dc 00 00 00    	jg     c002298f <__addsf3+0x2f9>
c00228b3:	89 d7                	mov    edi,edx
c00228b5:	88 c1                	mov    cl,al
c00228b7:	d3 ef                	shr    edi,cl
c00228b9:	b9 20 00 00 00       	mov    ecx,0x20
c00228be:	29 c1                	sub    ecx,eax
c00228c0:	d3 e2                	shl    edx,cl
c00228c2:	31 c0                	xor    eax,eax
c00228c4:	85 d2                	test   edx,edx
c00228c6:	0f 95 c0             	setne  al
c00228c9:	09 f8                	or     eax,edi
c00228cb:	29 c3                	sub    ebx,eax
c00228cd:	89 d8                	mov    eax,ebx
c00228cf:	eb 51                	jmp    c0022922 <__addsf3+0x28c>
c00228d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00228d4:	40                   	inc    eax
c00228d5:	a8 fe                	test   al,0xfe
c00228d7:	75 3d                	jne    c0022916 <__addsf3+0x280>
c00228d9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00228dd:	0f 85 a7 00 00 00    	jne    c002298a <__addsf3+0x2f4>
c00228e3:	85 d2                	test   edx,edx
c00228e5:	75 12                	jne    c00228f9 <__addsf3+0x263>
c00228e7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00228ea:	85 db                	test   ebx,ebx
c00228ec:	0f 85 9d 00 00 00    	jne    c002298f <__addsf3+0x2f9>
c00228f2:	31 ff                	xor    edi,edi
c00228f4:	e9 96 00 00 00       	jmp    c002298f <__addsf3+0x2f9>
c00228f9:	85 db                	test   ebx,ebx
c00228fb:	0f 84 8e 00 00 00    	je     c002298f <__addsf3+0x2f9>
c0022901:	89 d0                	mov    eax,edx
c0022903:	29 d8                	sub    eax,ebx
c0022905:	79 06                	jns    c002290d <__addsf3+0x277>
c0022907:	89 d8                	mov    eax,ebx
c0022909:	29 d0                	sub    eax,edx
c002290b:	eb 5a                	jmp    c0022967 <__addsf3+0x2d1>
c002290d:	bf 00 00 00 00       	mov    edi,0x0
c0022912:	74 7b                	je     c002298f <__addsf3+0x2f9>
c0022914:	eb 4a                	jmp    c0022960 <__addsf3+0x2ca>
c0022916:	89 d0                	mov    eax,edx
c0022918:	29 d8                	sub    eax,ebx
c002291a:	79 12                	jns    c002292e <__addsf3+0x298>
c002291c:	89 d8                	mov    eax,ebx
c002291e:	29 d0                	sub    eax,edx
c0022920:	eb 09                	jmp    c002292b <__addsf3+0x295>
c0022922:	85 c0                	test   eax,eax
c0022924:	79 41                	jns    c0022967 <__addsf3+0x2d1>
c0022926:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002292b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002292e:	31 f6                	xor    esi,esi
c0022930:	85 c0                	test   eax,eax
c0022932:	74 33                	je     c0022967 <__addsf3+0x2d1>
c0022934:	0f bd c8             	bsr    ecx,eax
c0022937:	83 f1 1f             	xor    ecx,0x1f
c002293a:	d3 e0                	shl    eax,cl
c002293c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0022940:	39 ca                	cmp    edx,ecx
c0022942:	7f 10                	jg     c0022954 <__addsf3+0x2be>
c0022944:	29 d1                	sub    ecx,edx
c0022946:	41                   	inc    ecx
c0022947:	d3 e8                	shr    eax,cl
c0022949:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002294c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0022952:	eb 13                	jmp    c0022967 <__addsf3+0x2d1>
c0022954:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0022957:	29 ce                	sub    esi,ecx
c0022959:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002295e:	eb 07                	jmp    c0022967 <__addsf3+0x2d1>
c0022960:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0022963:	eb 02                	jmp    c0022967 <__addsf3+0x2d1>
c0022965:	31 c0                	xor    eax,eax
c0022967:	89 c2                	mov    edx,eax
c0022969:	c1 ea 08             	shr    edx,0x8
c002296c:	a8 7f                	test   al,0x7f
c002296e:	0f 95 c1             	setne  cl
c0022971:	09 d1                	or     ecx,edx
c0022973:	83 e1 01             	and    ecx,0x1
c0022976:	c1 e8 07             	shr    eax,0x7
c0022979:	21 c8                	and    eax,ecx
c002297b:	c1 e6 17             	shl    esi,0x17
c002297e:	09 d6                	or     esi,edx
c0022980:	8d 3c 30             	lea    edi,[eax+esi*1]
c0022983:	eb 0a                	jmp    c002298f <__addsf3+0x2f9>
c0022985:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0022988:	eb 05                	jmp    c002298f <__addsf3+0x2f9>
c002298a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002298f:	89 f8                	mov    eax,edi
c0022991:	5a                   	pop    edx
c0022992:	59                   	pop    ecx
c0022993:	5b                   	pop    ebx
c0022994:	5e                   	pop    esi
c0022995:	5f                   	pop    edi
c0022996:	5d                   	pop    ebp
c0022997:	c3                   	ret    

c0022998 <__subsf3>:
c0022998:	55                   	push   ebp
c0022999:	89 e5                	mov    ebp,esp
c002299b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002299e:	05 00 00 00 80       	add    eax,0x80000000
c00229a3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00229a6:	5d                   	pop    ebp
c00229a7:	e9 ea fc ff ff       	jmp    c0022696 <__addsf3>

c00229ac <__negsf2>:
c00229ac:	55                   	push   ebp
c00229ad:	89 e5                	mov    ebp,esp
c00229af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00229b2:	05 00 00 00 80       	add    eax,0x80000000
c00229b7:	5d                   	pop    ebp
c00229b8:	c3                   	ret    

c00229b9 <__mulsf3>:
c00229b9:	55                   	push   ebp
c00229ba:	89 e5                	mov    ebp,esp
c00229bc:	57                   	push   edi
c00229bd:	56                   	push   esi
c00229be:	53                   	push   ebx
c00229bf:	83 ec 1c             	sub    esp,0x1c
c00229c2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00229c5:	89 f0                	mov    eax,esi
c00229c7:	89 f1                	mov    ecx,esi
c00229c9:	c1 f9 17             	sar    ecx,0x17
c00229cc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00229cf:	c1 e0 08             	shl    eax,0x8
c00229d2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00229d7:	89 c1                	mov    ecx,eax
c00229d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00229dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00229df:	89 c7                	mov    edi,eax
c00229e1:	c1 ff 17             	sar    edi,0x17
c00229e4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00229e8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00229eb:	89 f8                	mov    eax,edi
c00229ed:	0f b6 c0             	movzx  eax,al
c00229f0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00229f3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00229f7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00229fa:	42                   	inc    edx
c00229fb:	80 e2 fe             	and    dl,0xfe
c00229fe:	75 7b                	jne    c0022a7b <__mulsf3+0xc2>
c0022a00:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0022a04:	74 54                	je     c0022a5a <__mulsf3+0xa1>
c0022a06:	85 c9                	test   ecx,ecx
c0022a08:	0f 85 64 01 00 00    	jne    c0022b72 <__mulsf3+0x1b9>
c0022a0e:	8d 57 01             	lea    edx,[edi+0x1]
c0022a11:	80 e2 fe             	and    dl,0xfe
c0022a14:	75 1f                	jne    c0022a35 <__mulsf3+0x7c>
c0022a16:	85 c0                	test   eax,eax
c0022a18:	b8 00 00 00 00       	mov    eax,0x0
c0022a1d:	74 29                	je     c0022a48 <__mulsf3+0x8f>
c0022a1f:	53                   	push   ebx
c0022a20:	53                   	push   ebx
c0022a21:	50                   	push   eax
c0022a22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022a25:	e8 96 05 00 00       	call   c0022fc0 <__nesf2>
c0022a2a:	83 c4 10             	add    esp,0x10
c0022a2d:	85 c0                	test   eax,eax
c0022a2f:	0f 85 3a 01 00 00    	jne    c0022b6f <__mulsf3+0x1b6>
c0022a35:	85 ff                	test   edi,edi
c0022a37:	0f 89 35 01 00 00    	jns    c0022b72 <__mulsf3+0x1b9>
c0022a3d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0022a43:	e9 2a 01 00 00       	jmp    c0022b72 <__mulsf3+0x1b9>
c0022a48:	51                   	push   ecx
c0022a49:	51                   	push   ecx
c0022a4a:	50                   	push   eax
c0022a4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022a4e:	e8 6d 05 00 00       	call   c0022fc0 <__nesf2>
c0022a53:	83 c4 10             	add    esp,0x10
c0022a56:	85 c0                	test   eax,eax
c0022a58:	eb 15                	jmp    c0022a6f <__mulsf3+0xb6>
c0022a5a:	85 c9                	test   ecx,ecx
c0022a5c:	74 0b                	je     c0022a69 <__mulsf3+0xb0>
c0022a5e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0022a61:	01 c9                	add    ecx,ecx
c0022a63:	78 16                	js     c0022a7b <__mulsf3+0xc2>
c0022a65:	89 d3                	mov    ebx,edx
c0022a67:	eb f5                	jmp    c0022a5e <__mulsf3+0xa5>
c0022a69:	89 f8                	mov    eax,edi
c0022a6b:	f7 d0                	not    eax
c0022a6d:	84 c0                	test   al,al
c0022a6f:	75 c4                	jne    c0022a35 <__mulsf3+0x7c>
c0022a71:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0022a76:	e9 f7 00 00 00       	jmp    c0022b72 <__mulsf3+0x1b9>
c0022a7b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0022a7e:	c1 e6 08             	shl    esi,0x8
c0022a81:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0022a87:	8d 57 01             	lea    edx,[edi+0x1]
c0022a8a:	80 e2 fe             	and    dl,0xfe
c0022a8d:	75 63                	jne    c0022af2 <__mulsf3+0x139>
c0022a8f:	85 c0                	test   eax,eax
c0022a91:	74 2f                	je     c0022ac2 <__mulsf3+0x109>
c0022a93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0022a97:	0f 89 d2 00 00 00    	jns    c0022b6f <__mulsf3+0x1b6>
c0022a9d:	52                   	push   edx
c0022a9e:	52                   	push   edx
c0022a9f:	6a 00                	push   0x0
c0022aa1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022aa4:	e8 dc 04 00 00       	call   c0022f85 <__eqsf2>
c0022aa9:	83 c4 10             	add    esp,0x10
c0022aac:	85 c0                	test   eax,eax
c0022aae:	0f 85 bb 00 00 00    	jne    c0022b6f <__mulsf3+0x1b6>
c0022ab4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022ab7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0022abd:	e9 b0 00 00 00       	jmp    c0022b72 <__mulsf3+0x1b9>
c0022ac2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0022ac5:	50                   	push   eax
c0022ac6:	50                   	push   eax
c0022ac7:	6a 00                	push   0x0
c0022ac9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022acc:	e8 b4 04 00 00       	call   c0022f85 <__eqsf2>
c0022ad1:	83 c4 10             	add    esp,0x10
c0022ad4:	85 c0                	test   eax,eax
c0022ad6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0022ad9:	75 0c                	jne    c0022ae7 <__mulsf3+0x12e>
c0022adb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0022adf:	0f 89 8a 00 00 00    	jns    c0022b6f <__mulsf3+0x1b6>
c0022ae5:	eb cd                	jmp    c0022ab4 <__mulsf3+0xfb>
c0022ae7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0022aea:	01 f6                	add    esi,esi
c0022aec:	78 04                	js     c0022af2 <__mulsf3+0x139>
c0022aee:	89 c3                	mov    ebx,eax
c0022af0:	eb f5                	jmp    c0022ae7 <__mulsf3+0x12e>
c0022af2:	89 c8                	mov    eax,ecx
c0022af4:	0d 00 00 00 80       	or     eax,0x80000000
c0022af9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0022aff:	f7 e6                	mul    esi
c0022b01:	85 c0                	test   eax,eax
c0022b03:	0f 95 c0             	setne  al
c0022b06:	0f b6 c0             	movzx  eax,al
c0022b09:	09 c2                	or     edx,eax
c0022b0b:	78 03                	js     c0022b10 <__mulsf3+0x157>
c0022b0d:	01 d2                	add    edx,edx
c0022b0f:	4b                   	dec    ebx
c0022b10:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0022b16:	7f 22                	jg     c0022b3a <__mulsf3+0x181>
c0022b18:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0022b1e:	85 db                	test   ebx,ebx
c0022b20:	7f 23                	jg     c0022b45 <__mulsf3+0x18c>
c0022b22:	83 fb e9             	cmp    ebx,0xffffffe9
c0022b25:	7c 1a                	jl     c0022b41 <__mulsf3+0x188>
c0022b27:	81 ca 00 00 00 80    	or     edx,0x80000000
c0022b2d:	b9 01 00 00 00       	mov    ecx,0x1
c0022b32:	29 d9                	sub    ecx,ebx
c0022b34:	d3 ea                	shr    edx,cl
c0022b36:	31 db                	xor    ebx,ebx
c0022b38:	eb 0b                	jmp    c0022b45 <__mulsf3+0x18c>
c0022b3a:	bb ff 00 00 00       	mov    ebx,0xff
c0022b3f:	eb 02                	jmp    c0022b43 <__mulsf3+0x18a>
c0022b41:	31 db                	xor    ebx,ebx
c0022b43:	31 d2                	xor    edx,edx
c0022b45:	89 d0                	mov    eax,edx
c0022b47:	c1 e8 08             	shr    eax,0x8
c0022b4a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0022b4d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0022b53:	09 fb                	or     ebx,edi
c0022b55:	c1 e3 17             	shl    ebx,0x17
c0022b58:	09 c3                	or     ebx,eax
c0022b5a:	f6 c2 7f             	test   dl,0x7f
c0022b5d:	0f 95 c1             	setne  cl
c0022b60:	09 c8                	or     eax,ecx
c0022b62:	83 e0 01             	and    eax,0x1
c0022b65:	c1 ea 07             	shr    edx,0x7
c0022b68:	21 c2                	and    edx,eax
c0022b6a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0022b6d:	eb 03                	jmp    c0022b72 <__mulsf3+0x1b9>
c0022b6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0022b72:	89 f0                	mov    eax,esi
c0022b74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022b77:	5b                   	pop    ebx
c0022b78:	5e                   	pop    esi
c0022b79:	5f                   	pop    edi
c0022b7a:	5d                   	pop    ebp
c0022b7b:	c3                   	ret    

c0022b7c <__divsf3>:
c0022b7c:	55                   	push   ebp
c0022b7d:	89 e5                	mov    ebp,esp
c0022b7f:	57                   	push   edi
c0022b80:	56                   	push   esi
c0022b81:	53                   	push   ebx
c0022b82:	83 ec 1c             	sub    esp,0x1c
c0022b85:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0022b88:	89 d8                	mov    eax,ebx
c0022b8a:	89 d9                	mov    ecx,ebx
c0022b8c:	c1 f9 17             	sar    ecx,0x17
c0022b8f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0022b92:	c1 e0 08             	shl    eax,0x8
c0022b95:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0022b9a:	89 c1                	mov    ecx,eax
c0022b9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022ba2:	89 c7                	mov    edi,eax
c0022ba4:	c1 ff 17             	sar    edi,0x17
c0022ba7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022bab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022bae:	89 f8                	mov    eax,edi
c0022bb0:	0f b6 c0             	movzx  eax,al
c0022bb3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0022bb6:	29 c6                	sub    esi,eax
c0022bb8:	83 c6 7f             	add    esi,0x7f
c0022bbb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022bbe:	42                   	inc    edx
c0022bbf:	80 e2 fe             	and    dl,0xfe
c0022bc2:	0f 85 9c 00 00 00    	jne    c0022c64 <__divsf3+0xe8>
c0022bc8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0022bcc:	74 33                	je     c0022c01 <__divsf3+0x85>
c0022bce:	85 c9                	test   ecx,ecx
c0022bd0:	0f 85 c7 01 00 00    	jne    c0022d9d <__divsf3+0x221>
c0022bd6:	8d 57 01             	lea    edx,[edi+0x1]
c0022bd9:	80 e2 fe             	and    dl,0xfe
c0022bdc:	75 2f                	jne    c0022c0d <__divsf3+0x91>
c0022bde:	85 c0                	test   eax,eax
c0022be0:	74 2b                	je     c0022c0d <__divsf3+0x91>
c0022be2:	51                   	push   ecx
c0022be3:	51                   	push   ecx
c0022be4:	6a 00                	push   0x0
c0022be6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022be9:	e8 d2 03 00 00       	call   c0022fc0 <__nesf2>
c0022bee:	83 c4 10             	add    esp,0x10
c0022bf1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0022bf4:	85 c0                	test   eax,eax
c0022bf6:	0f 85 a1 01 00 00    	jne    c0022d9d <__divsf3+0x221>
c0022bfc:	e9 92 01 00 00       	jmp    c0022d93 <__divsf3+0x217>
c0022c01:	85 c9                	test   ecx,ecx
c0022c03:	75 1b                	jne    c0022c20 <__divsf3+0xa4>
c0022c05:	8d 57 01             	lea    edx,[edi+0x1]
c0022c08:	80 e2 fe             	and    dl,0xfe
c0022c0b:	74 1e                	je     c0022c2b <__divsf3+0xaf>
c0022c0d:	85 ff                	test   edi,edi
c0022c0f:	0f 89 88 01 00 00    	jns    c0022d9d <__divsf3+0x221>
c0022c15:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0022c1b:	e9 7d 01 00 00       	jmp    c0022d9d <__divsf3+0x221>
c0022c20:	8d 56 ff             	lea    edx,[esi-0x1]
c0022c23:	01 c9                	add    ecx,ecx
c0022c25:	78 3d                	js     c0022c64 <__divsf3+0xe8>
c0022c27:	89 d6                	mov    esi,edx
c0022c29:	eb f5                	jmp    c0022c20 <__divsf3+0xa4>
c0022c2b:	85 c0                	test   eax,eax
c0022c2d:	b8 00 00 00 00       	mov    eax,0x0
c0022c32:	74 18                	je     c0022c4c <__divsf3+0xd0>
c0022c34:	52                   	push   edx
c0022c35:	52                   	push   edx
c0022c36:	50                   	push   eax
c0022c37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022c3a:	e8 81 03 00 00       	call   c0022fc0 <__nesf2>
c0022c3f:	83 c4 10             	add    esp,0x10
c0022c42:	85 c0                	test   eax,eax
c0022c44:	0f 85 50 01 00 00    	jne    c0022d9a <__divsf3+0x21e>
c0022c4a:	eb c1                	jmp    c0022c0d <__divsf3+0x91>
c0022c4c:	56                   	push   esi
c0022c4d:	56                   	push   esi
c0022c4e:	50                   	push   eax
c0022c4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022c52:	e8 69 03 00 00       	call   c0022fc0 <__nesf2>
c0022c57:	83 c4 10             	add    esp,0x10
c0022c5a:	85 c0                	test   eax,eax
c0022c5c:	0f 84 31 01 00 00    	je     c0022d93 <__divsf3+0x217>
c0022c62:	eb a9                	jmp    c0022c0d <__divsf3+0x91>
c0022c64:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0022c67:	c1 e3 08             	shl    ebx,0x8
c0022c6a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0022c70:	8d 57 01             	lea    edx,[edi+0x1]
c0022c73:	80 e2 fe             	and    dl,0xfe
c0022c76:	75 71                	jne    c0022ce9 <__divsf3+0x16d>
c0022c78:	85 c0                	test   eax,eax
c0022c7a:	ba 00 00 00 00       	mov    edx,0x0
c0022c7f:	74 2f                	je     c0022cb0 <__divsf3+0x134>
c0022c81:	51                   	push   ecx
c0022c82:	51                   	push   ecx
c0022c83:	52                   	push   edx
c0022c84:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022c87:	e8 f9 02 00 00       	call   c0022f85 <__eqsf2>
c0022c8c:	83 c4 10             	add    esp,0x10
c0022c8f:	85 c0                	test   eax,eax
c0022c91:	0f 85 03 01 00 00    	jne    c0022d9a <__divsf3+0x21e>
c0022c97:	31 d2                	xor    edx,edx
c0022c99:	89 d3                	mov    ebx,edx
c0022c9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022c9e:	31 f8                	xor    eax,edi
c0022ca0:	0f 89 f7 00 00 00    	jns    c0022d9d <__divsf3+0x221>
c0022ca6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0022cab:	e9 ed 00 00 00       	jmp    c0022d9d <__divsf3+0x221>
c0022cb0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0022cb3:	50                   	push   eax
c0022cb4:	50                   	push   eax
c0022cb5:	52                   	push   edx
c0022cb6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022cb9:	e8 c7 02 00 00       	call   c0022f85 <__eqsf2>
c0022cbe:	83 c4 10             	add    esp,0x10
c0022cc1:	85 c0                	test   eax,eax
c0022cc3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0022cc6:	75 16                	jne    c0022cde <__divsf3+0x162>
c0022cc8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0022ccb:	31 fb                	xor    ebx,edi
c0022ccd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0022cd3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0022cd9:	e9 bf 00 00 00       	jmp    c0022d9d <__divsf3+0x221>
c0022cde:	8d 46 01             	lea    eax,[esi+0x1]
c0022ce1:	01 db                	add    ebx,ebx
c0022ce3:	78 04                	js     c0022ce9 <__divsf3+0x16d>
c0022ce5:	89 c6                	mov    esi,eax
c0022ce7:	eb f5                	jmp    c0022cde <__divsf3+0x162>
c0022ce9:	89 c8                	mov    eax,ecx
c0022ceb:	0d 00 00 00 80       	or     eax,0x80000000
c0022cf0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0022cf6:	31 d2                	xor    edx,edx
c0022cf8:	39 d8                	cmp    eax,ebx
c0022cfa:	72 07                	jb     c0022d03 <__divsf3+0x187>
c0022cfc:	29 d8                	sub    eax,ebx
c0022cfe:	ba 01 00 00 00       	mov    edx,0x1
c0022d03:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0022d0a:	01 d2                	add    edx,edx
c0022d0c:	89 c1                	mov    ecx,eax
c0022d0e:	01 c0                	add    eax,eax
c0022d10:	85 c9                	test   ecx,ecx
c0022d12:	78 04                	js     c0022d18 <__divsf3+0x19c>
c0022d14:	39 c3                	cmp    ebx,eax
c0022d16:	77 05                	ja     c0022d1d <__divsf3+0x1a1>
c0022d18:	29 d8                	sub    eax,ebx
c0022d1a:	83 ca 01             	or     edx,0x1
c0022d1d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0022d20:	75 e8                	jne    c0022d0a <__divsf3+0x18e>
c0022d22:	85 c0                	test   eax,eax
c0022d24:	0f 95 c0             	setne  al
c0022d27:	0f b6 c0             	movzx  eax,al
c0022d2a:	c1 e2 06             	shl    edx,0x6
c0022d2d:	09 c2                	or     edx,eax
c0022d2f:	78 03                	js     c0022d34 <__divsf3+0x1b8>
c0022d31:	01 d2                	add    edx,edx
c0022d33:	4e                   	dec    esi
c0022d34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0022d3a:	7f 22                	jg     c0022d5e <__divsf3+0x1e2>
c0022d3c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0022d42:	85 f6                	test   esi,esi
c0022d44:	7f 23                	jg     c0022d69 <__divsf3+0x1ed>
c0022d46:	83 fe e9             	cmp    esi,0xffffffe9
c0022d49:	7c 1a                	jl     c0022d65 <__divsf3+0x1e9>
c0022d4b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0022d51:	b9 01 00 00 00       	mov    ecx,0x1
c0022d56:	29 f1                	sub    ecx,esi
c0022d58:	d3 ea                	shr    edx,cl
c0022d5a:	31 f6                	xor    esi,esi
c0022d5c:	eb 0b                	jmp    c0022d69 <__divsf3+0x1ed>
c0022d5e:	be ff 00 00 00       	mov    esi,0xff
c0022d63:	eb 02                	jmp    c0022d67 <__divsf3+0x1eb>
c0022d65:	31 f6                	xor    esi,esi
c0022d67:	31 d2                	xor    edx,edx
c0022d69:	89 d0                	mov    eax,edx
c0022d6b:	c1 e8 08             	shr    eax,0x8
c0022d6e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0022d71:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0022d77:	09 fe                	or     esi,edi
c0022d79:	c1 e6 17             	shl    esi,0x17
c0022d7c:	09 c6                	or     esi,eax
c0022d7e:	f6 c2 7f             	test   dl,0x7f
c0022d81:	0f 95 c1             	setne  cl
c0022d84:	09 c8                	or     eax,ecx
c0022d86:	83 e0 01             	and    eax,0x1
c0022d89:	c1 ea 07             	shr    edx,0x7
c0022d8c:	21 c2                	and    edx,eax
c0022d8e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0022d91:	eb 0a                	jmp    c0022d9d <__divsf3+0x221>
c0022d93:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0022d98:	eb 03                	jmp    c0022d9d <__divsf3+0x221>
c0022d9a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0022d9d:	89 d8                	mov    eax,ebx
c0022d9f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022da2:	5b                   	pop    ebx
c0022da3:	5e                   	pop    esi
c0022da4:	5f                   	pop    edi
c0022da5:	5d                   	pop    ebp
c0022da6:	c3                   	ret    

c0022da7 <__floatsisf>:
c0022da7:	55                   	push   ebp
c0022da8:	89 e5                	mov    ebp,esp
c0022daa:	53                   	push   ebx
c0022dab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0022dae:	85 d2                	test   edx,edx
c0022db0:	7e 2b                	jle    c0022ddd <__floatsisf+0x36>
c0022db2:	0f bd ca             	bsr    ecx,edx
c0022db5:	83 f1 1f             	xor    ecx,0x1f
c0022db8:	d3 e2                	shl    edx,cl
c0022dba:	89 d0                	mov    eax,edx
c0022dbc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0022dc1:	89 c3                	mov    ebx,eax
c0022dc3:	c1 eb 08             	shr    ebx,0x8
c0022dc6:	80 e2 7f             	and    dl,0x7f
c0022dc9:	0f 95 c2             	setne  dl
c0022dcc:	09 da                	or     edx,ebx
c0022dce:	83 e2 01             	and    edx,0x1
c0022dd1:	c1 e8 07             	shr    eax,0x7
c0022dd4:	21 c2                	and    edx,eax
c0022dd6:	b8 9e 00 00 00       	mov    eax,0x9e
c0022ddb:	eb 32                	jmp    c0022e0f <__floatsisf+0x68>
c0022ddd:	b8 00 00 00 00       	mov    eax,0x0
c0022de2:	74 34                	je     c0022e18 <__floatsisf+0x71>
c0022de4:	f7 da                	neg    edx
c0022de6:	0f bd ca             	bsr    ecx,edx
c0022de9:	83 f1 1f             	xor    ecx,0x1f
c0022dec:	d3 e2                	shl    edx,cl
c0022dee:	89 d0                	mov    eax,edx
c0022df0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0022df5:	89 c3                	mov    ebx,eax
c0022df7:	c1 eb 08             	shr    ebx,0x8
c0022dfa:	80 e2 7f             	and    dl,0x7f
c0022dfd:	0f 95 c2             	setne  dl
c0022e00:	09 da                	or     edx,ebx
c0022e02:	83 e2 01             	and    edx,0x1
c0022e05:	c1 e8 07             	shr    eax,0x7
c0022e08:	21 c2                	and    edx,eax
c0022e0a:	b8 9e 01 00 00       	mov    eax,0x19e
c0022e0f:	29 c8                	sub    eax,ecx
c0022e11:	c1 e0 17             	shl    eax,0x17
c0022e14:	09 d8                	or     eax,ebx
c0022e16:	01 d0                	add    eax,edx
c0022e18:	5b                   	pop    ebx
c0022e19:	5d                   	pop    ebp
c0022e1a:	c3                   	ret    

c0022e1b <__floatunsisf>:
c0022e1b:	55                   	push   ebp
c0022e1c:	89 e5                	mov    ebp,esp
c0022e1e:	53                   	push   ebx
c0022e1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0022e22:	31 c0                	xor    eax,eax
c0022e24:	85 d2                	test   edx,edx
c0022e26:	74 32                	je     c0022e5a <__floatunsisf+0x3f>
c0022e28:	0f bd ca             	bsr    ecx,edx
c0022e2b:	83 f1 1f             	xor    ecx,0x1f
c0022e2e:	d3 e2                	shl    edx,cl
c0022e30:	89 d0                	mov    eax,edx
c0022e32:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0022e37:	89 c3                	mov    ebx,eax
c0022e39:	c1 eb 08             	shr    ebx,0x8
c0022e3c:	80 e2 7f             	and    dl,0x7f
c0022e3f:	0f 95 c2             	setne  dl
c0022e42:	09 da                	or     edx,ebx
c0022e44:	83 e2 01             	and    edx,0x1
c0022e47:	c1 e8 07             	shr    eax,0x7
c0022e4a:	21 c2                	and    edx,eax
c0022e4c:	b8 9e 00 00 00       	mov    eax,0x9e
c0022e51:	29 c8                	sub    eax,ecx
c0022e53:	c1 e0 17             	shl    eax,0x17
c0022e56:	09 d8                	or     eax,ebx
c0022e58:	01 d0                	add    eax,edx
c0022e5a:	5b                   	pop    ebx
c0022e5b:	5d                   	pop    ebp
c0022e5c:	c3                   	ret    

c0022e5d <__fixsfsi>:
c0022e5d:	55                   	push   ebp
c0022e5e:	89 e5                	mov    ebp,esp
c0022e60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0022e63:	89 d1                	mov    ecx,edx
c0022e65:	c1 e1 08             	shl    ecx,0x8
c0022e68:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0022e6e:	c1 fa 17             	sar    edx,0x17
c0022e71:	78 1c                	js     c0022e8f <__fixsfsi+0x32>
c0022e73:	83 ea 7f             	sub    edx,0x7f
c0022e76:	31 c0                	xor    eax,eax
c0022e78:	83 fa 1e             	cmp    edx,0x1e
c0022e7b:	77 40                	ja     c0022ebd <__fixsfsi+0x60>
c0022e7d:	89 c8                	mov    eax,ecx
c0022e7f:	0d 00 00 00 80       	or     eax,0x80000000
c0022e84:	b9 1f 00 00 00       	mov    ecx,0x1f
c0022e89:	29 d1                	sub    ecx,edx
c0022e8b:	d3 e8                	shr    eax,cl
c0022e8d:	eb 2e                	jmp    c0022ebd <__fixsfsi+0x60>
c0022e8f:	31 c0                	xor    eax,eax
c0022e91:	81 c2 81 00 00 00    	add    edx,0x81
c0022e97:	78 24                	js     c0022ebd <__fixsfsi+0x60>
c0022e99:	83 fa 1e             	cmp    edx,0x1e
c0022e9c:	7e 09                	jle    c0022ea7 <__fixsfsi+0x4a>
c0022e9e:	83 fa 1f             	cmp    edx,0x1f
c0022ea1:	75 18                	jne    c0022ebb <__fixsfsi+0x5e>
c0022ea3:	85 c9                	test   ecx,ecx
c0022ea5:	75 14                	jne    c0022ebb <__fixsfsi+0x5e>
c0022ea7:	89 c8                	mov    eax,ecx
c0022ea9:	0d 00 00 00 80       	or     eax,0x80000000
c0022eae:	b9 1f 00 00 00       	mov    ecx,0x1f
c0022eb3:	29 d1                	sub    ecx,edx
c0022eb5:	d3 e8                	shr    eax,cl
c0022eb7:	f7 d8                	neg    eax
c0022eb9:	eb 02                	jmp    c0022ebd <__fixsfsi+0x60>
c0022ebb:	31 c0                	xor    eax,eax
c0022ebd:	5d                   	pop    ebp
c0022ebe:	c3                   	ret    

c0022ebf <__fixunssfsi>:
c0022ebf:	55                   	push   ebp
c0022ec0:	89 e5                	mov    ebp,esp
c0022ec2:	53                   	push   ebx
c0022ec3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0022ec6:	89 d3                	mov    ebx,edx
c0022ec8:	c1 fb 17             	sar    ebx,0x17
c0022ecb:	83 eb 7f             	sub    ebx,0x7f
c0022ece:	31 c0                	xor    eax,eax
c0022ed0:	83 fb 1f             	cmp    ebx,0x1f
c0022ed3:	77 18                	ja     c0022eed <__fixunssfsi+0x2e>
c0022ed5:	89 d0                	mov    eax,edx
c0022ed7:	c1 e0 08             	shl    eax,0x8
c0022eda:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0022edf:	0d 00 00 00 80       	or     eax,0x80000000
c0022ee4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0022ee9:	29 d9                	sub    ecx,ebx
c0022eeb:	d3 e8                	shr    eax,cl
c0022eed:	5b                   	pop    ebx
c0022eee:	5d                   	pop    ebp
c0022eef:	c3                   	ret    

c0022ef0 <__cmpsf2>:
c0022ef0:	55                   	push   ebp
c0022ef1:	89 e5                	mov    ebp,esp
c0022ef3:	57                   	push   edi
c0022ef4:	56                   	push   esi
c0022ef5:	53                   	push   ebx
c0022ef6:	83 ec 24             	sub    esp,0x24
c0022ef9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022efc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022eff:	e8 4f 10 00 00       	call   c0023f53 <__truncdfsf2>
c0022f04:	5a                   	pop    edx
c0022f05:	59                   	pop    ecx
c0022f06:	89 c3                	mov    ebx,eax
c0022f08:	c1 e8 17             	shr    eax,0x17
c0022f0b:	0f b6 f0             	movzx  esi,al
c0022f0e:	89 d8                	mov    eax,ebx
c0022f10:	c1 e8 1f             	shr    eax,0x1f
c0022f13:	31 c6                	xor    esi,eax
c0022f15:	c1 e3 08             	shl    ebx,0x8
c0022f18:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0022f1b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0022f1e:	e8 30 10 00 00       	call   c0023f53 <__truncdfsf2>
c0022f23:	83 c4 10             	add    esp,0x10
c0022f26:	89 c1                	mov    ecx,eax
c0022f28:	c1 e9 17             	shr    ecx,0x17
c0022f2b:	0f b6 c9             	movzx  ecx,cl
c0022f2e:	89 c7                	mov    edi,eax
c0022f30:	c1 ef 1f             	shr    edi,0x1f
c0022f33:	89 ca                	mov    edx,ecx
c0022f35:	31 fa                	xor    edx,edi
c0022f37:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0022f3a:	c1 e0 08             	shl    eax,0x8
c0022f3d:	89 c2                	mov    edx,eax
c0022f3f:	89 d8                	mov    eax,ebx
c0022f41:	09 d0                	or     eax,edx
c0022f43:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0022f48:	09 f0                	or     eax,esi
c0022f4a:	75 08                	jne    c0022f54 <__cmpsf2+0x64>
c0022f4c:	31 c0                	xor    eax,eax
c0022f4e:	39 f9                	cmp    ecx,edi
c0022f50:	75 0c                	jne    c0022f5e <__cmpsf2+0x6e>
c0022f52:	eb 29                	jmp    c0022f7d <__cmpsf2+0x8d>
c0022f54:	b8 01 00 00 00       	mov    eax,0x1
c0022f59:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0022f5c:	7f 1f                	jg     c0022f7d <__cmpsf2+0x8d>
c0022f5e:	83 c8 ff             	or     eax,0xffffffff
c0022f61:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0022f64:	7c 17                	jl     c0022f7d <__cmpsf2+0x8d>
c0022f66:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0022f6c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0022f72:	b8 01 00 00 00       	mov    eax,0x1
c0022f77:	39 d3                	cmp    ebx,edx
c0022f79:	77 02                	ja     c0022f7d <__cmpsf2+0x8d>
c0022f7b:	19 c0                	sbb    eax,eax
c0022f7d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022f80:	5b                   	pop    ebx
c0022f81:	5e                   	pop    esi
c0022f82:	5f                   	pop    edi
c0022f83:	5d                   	pop    ebp
c0022f84:	c3                   	ret    

c0022f85 <__eqsf2>:
c0022f85:	55                   	push   ebp
c0022f86:	89 e5                	mov    ebp,esp
c0022f88:	83 ec 24             	sub    esp,0x24
c0022f8b:	6a 01                	push   0x1
c0022f8d:	83 ec 0c             	sub    esp,0xc
c0022f90:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022f93:	e8 df 10 00 00       	call   c0024077 <__extendsfdf2>
c0022f98:	83 c4 10             	add    esp,0x10
c0022f9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022f9e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022fa1:	52                   	push   edx
c0022fa2:	50                   	push   eax
c0022fa3:	50                   	push   eax
c0022fa4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022fa7:	e8 cb 10 00 00       	call   c0024077 <__extendsfdf2>
c0022fac:	59                   	pop    ecx
c0022fad:	59                   	pop    ecx
c0022fae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022fb1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022fb4:	52                   	push   edx
c0022fb5:	50                   	push   eax
c0022fb6:	e8 35 ff ff ff       	call   c0022ef0 <__cmpsf2>
c0022fbb:	83 c4 20             	add    esp,0x20
c0022fbe:	c9                   	leave  
c0022fbf:	c3                   	ret    

c0022fc0 <__nesf2>:
c0022fc0:	eb c3                	jmp    c0022f85 <__eqsf2>

c0022fc2 <__gtsf2>:
c0022fc2:	55                   	push   ebp
c0022fc3:	89 e5                	mov    ebp,esp
c0022fc5:	83 ec 24             	sub    esp,0x24
c0022fc8:	6a ff                	push   0xffffffff
c0022fca:	83 ec 0c             	sub    esp,0xc
c0022fcd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0022fd0:	e8 a2 10 00 00       	call   c0024077 <__extendsfdf2>
c0022fd5:	83 c4 10             	add    esp,0x10
c0022fd8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022fdb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022fde:	52                   	push   edx
c0022fdf:	50                   	push   eax
c0022fe0:	50                   	push   eax
c0022fe1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022fe4:	e8 8e 10 00 00       	call   c0024077 <__extendsfdf2>
c0022fe9:	59                   	pop    ecx
c0022fea:	59                   	pop    ecx
c0022feb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022fee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022ff1:	52                   	push   edx
c0022ff2:	50                   	push   eax
c0022ff3:	e8 f8 fe ff ff       	call   c0022ef0 <__cmpsf2>
c0022ff8:	83 c4 20             	add    esp,0x20
c0022ffb:	c9                   	leave  
c0022ffc:	c3                   	ret    

c0022ffd <__gesf2>:
c0022ffd:	eb c3                	jmp    c0022fc2 <__gtsf2>

c0022fff <__ltsf2>:
c0022fff:	eb 84                	jmp    c0022f85 <__eqsf2>

c0023001 <__lesf2>:
c0023001:	eb 82                	jmp    c0022f85 <__eqsf2>

c0023003 <__adddf3>:
c0023003:	55                   	push   ebp
c0023004:	89 e5                	mov    ebp,esp
c0023006:	57                   	push   edi
c0023007:	56                   	push   esi
c0023008:	53                   	push   ebx
c0023009:	83 ec 24             	sub    esp,0x24
c002300c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002300f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023012:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023015:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023018:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002301b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002301e:	89 c8                	mov    eax,ecx
c0023020:	89 ce                	mov    esi,ecx
c0023022:	c1 fe 14             	sar    esi,0x14
c0023025:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0023028:	89 fb                	mov    ebx,edi
c002302a:	89 fa                	mov    edx,edi
c002302c:	c1 e2 0b             	shl    edx,0xb
c002302f:	c1 e0 0b             	shl    eax,0xb
c0023032:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023037:	c1 eb 15             	shr    ebx,0x15
c002303a:	09 d8                	or     eax,ebx
c002303c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002303f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0023042:	c1 fe 14             	sar    esi,0x14
c0023045:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0023048:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002304b:	89 f3                	mov    ebx,esi
c002304d:	c1 e3 0b             	shl    ebx,0xb
c0023050:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0023053:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023056:	c1 e3 0b             	shl    ebx,0xb
c0023059:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002305f:	c1 ee 15             	shr    esi,0x15
c0023062:	09 f3                	or     ebx,esi
c0023064:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0023067:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002306a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002306d:	0f 88 5f 02 00 00    	js     c00232d2 <__adddf3+0x2cf>
c0023073:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023076:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0023079:	85 db                	test   ebx,ebx
c002307b:	0f 8e c7 00 00 00    	jle    c0023148 <__adddf3+0x145>
c0023081:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0023088:	75 1a                	jne    c00230a4 <__adddf3+0xa1>
c002308a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002308d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0023090:	0f 84 b2 05 00 00    	je     c0023648 <__adddf3+0x645>
c0023096:	4b                   	dec    ebx
c0023097:	75 23                	jne    c00230bc <__adddf3+0xb9>
c0023099:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002309c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002309f:	e9 99 00 00 00       	jmp    c002313d <__adddf3+0x13a>
c00230a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00230a7:	f7 d6                	not    esi
c00230a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00230af:	0f 84 93 05 00 00    	je     c0023648 <__adddf3+0x645>
c00230b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00230bc:	83 fb 1f             	cmp    ebx,0x1f
c00230bf:	7e 42                	jle    c0023103 <__adddf3+0x100>
c00230c1:	83 fb 3f             	cmp    ebx,0x3f
c00230c4:	0f 8f 7e 05 00 00    	jg     c0023648 <__adddf3+0x645>
c00230ca:	83 e3 1f             	and    ebx,0x1f
c00230cd:	89 d9                	mov    ecx,ebx
c00230cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00230d2:	d3 ef                	shr    edi,cl
c00230d4:	31 db                	xor    ebx,ebx
c00230d6:	85 c9                	test   ecx,ecx
c00230d8:	74 15                	je     c00230ef <__adddf3+0xec>
c00230da:	be 20 00 00 00       	mov    esi,0x20
c00230df:	29 ce                	sub    esi,ecx
c00230e1:	89 f1                	mov    ecx,esi
c00230e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00230e6:	d3 e6                	shl    esi,cl
c00230e8:	31 db                	xor    ebx,ebx
c00230ea:	85 f6                	test   esi,esi
c00230ec:	0f 95 c3             	setne  bl
c00230ef:	31 c9                	xor    ecx,ecx
c00230f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00230f5:	0f 95 c1             	setne  cl
c00230f8:	09 cf                	or     edi,ecx
c00230fa:	09 fb                	or     ebx,edi
c00230fc:	01 da                	add    edx,ebx
c00230fe:	83 d0 00             	adc    eax,0x0
c0023101:	eb 3a                	jmp    c002313d <__adddf3+0x13a>
c0023103:	bf 20 00 00 00       	mov    edi,0x20
c0023108:	29 df                	sub    edi,ebx
c002310a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002310d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023110:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023113:	d3 e6                	shl    esi,cl
c0023115:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023118:	88 d9                	mov    cl,bl
c002311a:	d3 ef                	shr    edi,cl
c002311c:	09 fe                	or     esi,edi
c002311e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023121:	88 d9                	mov    cl,bl
c0023123:	d3 ef                	shr    edi,cl
c0023125:	89 fb                	mov    ebx,edi
c0023127:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002312a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002312d:	d3 e7                	shl    edi,cl
c002312f:	85 ff                	test   edi,edi
c0023131:	0f 95 c1             	setne  cl
c0023134:	0f b6 c9             	movzx  ecx,cl
c0023137:	09 ce                	or     esi,ecx
c0023139:	01 f2                	add    edx,esi
c002313b:	11 d8                	adc    eax,ebx
c002313d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0023140:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023143:	e9 52 01 00 00       	jmp    c002329a <__adddf3+0x297>
c0023148:	0f 84 d5 00 00 00    	je     c0023223 <__adddf3+0x220>
c002314e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0023151:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0023154:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0023157:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002315a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0023161:	75 20                	jne    c0023183 <__adddf3+0x180>
c0023163:	89 d6                	mov    esi,edx
c0023165:	09 c6                	or     esi,eax
c0023167:	0f 84 db 04 00 00    	je     c0023648 <__adddf3+0x645>
c002316d:	4b                   	dec    ebx
c002316e:	75 29                	jne    c0023199 <__adddf3+0x196>
c0023170:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023173:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023176:	01 d1                	add    ecx,edx
c0023178:	11 c6                	adc    esi,eax
c002317a:	89 f0                	mov    eax,esi
c002317c:	89 ca                	mov    edx,ecx
c002317e:	e9 17 01 00 00       	jmp    c002329a <__adddf3+0x297>
c0023183:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0023186:	f7 d6                	not    esi
c0023188:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002318e:	0f 84 b4 04 00 00    	je     c0023648 <__adddf3+0x645>
c0023194:	0d 00 00 00 80       	or     eax,0x80000000
c0023199:	83 fb 1f             	cmp    ebx,0x1f
c002319c:	7e 48                	jle    c00231e6 <__adddf3+0x1e3>
c002319e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00231a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00231a4:	83 fb 3f             	cmp    ebx,0x3f
c00231a7:	0f 8f 9b 04 00 00    	jg     c0023648 <__adddf3+0x645>
c00231ad:	83 e3 1f             	and    ebx,0x1f
c00231b0:	89 d9                	mov    ecx,ebx
c00231b2:	89 c7                	mov    edi,eax
c00231b4:	d3 ef                	shr    edi,cl
c00231b6:	31 db                	xor    ebx,ebx
c00231b8:	85 c9                	test   ecx,ecx
c00231ba:	74 12                	je     c00231ce <__adddf3+0x1cb>
c00231bc:	be 20 00 00 00       	mov    esi,0x20
c00231c1:	29 ce                	sub    esi,ecx
c00231c3:	89 f1                	mov    ecx,esi
c00231c5:	d3 e0                	shl    eax,cl
c00231c7:	31 db                	xor    ebx,ebx
c00231c9:	85 c0                	test   eax,eax
c00231cb:	0f 95 c3             	setne  bl
c00231ce:	31 c0                	xor    eax,eax
c00231d0:	85 d2                	test   edx,edx
c00231d2:	0f 95 c0             	setne  al
c00231d5:	09 c7                	or     edi,eax
c00231d7:	09 fb                	or     ebx,edi
c00231d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00231dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00231df:	01 da                	add    edx,ebx
c00231e1:	83 d6 00             	adc    esi,0x0
c00231e4:	eb 39                	jmp    c002321f <__adddf3+0x21c>
c00231e6:	be 20 00 00 00       	mov    esi,0x20
c00231eb:	29 de                	sub    esi,ebx
c00231ed:	89 c7                	mov    edi,eax
c00231ef:	89 f1                	mov    ecx,esi
c00231f1:	d3 e7                	shl    edi,cl
c00231f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00231f6:	89 d7                	mov    edi,edx
c00231f8:	88 d9                	mov    cl,bl
c00231fa:	d3 ef                	shr    edi,cl
c00231fc:	89 f9                	mov    ecx,edi
c00231fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0023201:	09 cf                	or     edi,ecx
c0023203:	88 d9                	mov    cl,bl
c0023205:	d3 e8                	shr    eax,cl
c0023207:	89 f1                	mov    ecx,esi
c0023209:	d3 e2                	shl    edx,cl
c002320b:	85 d2                	test   edx,edx
c002320d:	0f 95 c2             	setne  dl
c0023210:	0f b6 d2             	movzx  edx,dl
c0023213:	09 d7                	or     edi,edx
c0023215:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023218:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002321b:	01 fa                	add    edx,edi
c002321d:	11 c6                	adc    esi,eax
c002321f:	89 f0                	mov    eax,esi
c0023221:	eb 77                	jmp    c002329a <__adddf3+0x297>
c0023223:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023226:	46                   	inc    esi
c0023227:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002322a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0023230:	75 41                	jne    c0023273 <__adddf3+0x270>
c0023232:	89 d3                	mov    ebx,edx
c0023234:	09 c3                	or     ebx,eax
c0023236:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002323d:	75 27                	jne    c0023266 <__adddf3+0x263>
c002323f:	85 db                	test   ebx,ebx
c0023241:	0f 84 fb 03 00 00    	je     c0023642 <__adddf3+0x63f>
c0023247:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002324a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002324d:	0f 84 f5 03 00 00    	je     c0023648 <__adddf3+0x645>
c0023253:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023256:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023259:	85 c0                	test   eax,eax
c002325b:	0f 89 91 03 00 00    	jns    c00235f2 <__adddf3+0x5ef>
c0023261:	e9 85 03 00 00       	jmp    c00235eb <__adddf3+0x5e8>
c0023266:	85 db                	test   ebx,ebx
c0023268:	0f 85 da 03 00 00    	jne    c0023648 <__adddf3+0x645>
c002326e:	e9 cf 03 00 00       	jmp    c0023642 <__adddf3+0x63f>
c0023273:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023276:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023279:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002327c:	f7 d1                	not    ecx
c002327e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0023284:	0f 84 70 03 00 00    	je     c00235fa <__adddf3+0x5f7>
c002328a:	d1 ea                	shr    edx,1
c002328c:	89 c1                	mov    ecx,eax
c002328e:	c1 e1 1f             	shl    ecx,0x1f
c0023291:	09 ca                	or     edx,ecx
c0023293:	d1 e8                	shr    eax,1
c0023295:	e9 6f 03 00 00       	jmp    c0023609 <__adddf3+0x606>
c002329a:	85 c0                	test   eax,eax
c002329c:	0f 89 67 03 00 00    	jns    c0023609 <__adddf3+0x606>
c00232a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00232a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00232a8:	f7 d1                	not    ecx
c00232aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00232b0:	0f 84 44 03 00 00    	je     c00235fa <__adddf3+0x5f7>
c00232b6:	89 d1                	mov    ecx,edx
c00232b8:	d1 e9                	shr    ecx,1
c00232ba:	83 e2 01             	and    edx,0x1
c00232bd:	09 ca                	or     edx,ecx
c00232bf:	89 c1                	mov    ecx,eax
c00232c1:	c1 e1 1f             	shl    ecx,0x1f
c00232c4:	09 ca                	or     edx,ecx
c00232c6:	d1 e8                	shr    eax,1
c00232c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00232cd:	e9 37 03 00 00       	jmp    c0023609 <__adddf3+0x606>
c00232d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00232d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00232db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00232de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00232e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00232e7:	29 de                	sub    esi,ebx
c00232e9:	85 f6                	test   esi,esi
c00232eb:	0f 8e bd 00 00 00    	jle    c00233ae <__adddf3+0x3ab>
c00232f1:	85 db                	test   ebx,ebx
c00232f3:	75 17                	jne    c002330c <__adddf3+0x309>
c00232f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00232f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00232fb:	0f 84 47 03 00 00    	je     c0023648 <__adddf3+0x645>
c0023301:	4e                   	dec    esi
c0023302:	75 20                	jne    c0023324 <__adddf3+0x321>
c0023304:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0023307:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002330a:	eb 5b                	jmp    c0023367 <__adddf3+0x364>
c002330c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002330f:	f7 d3                	not    ebx
c0023311:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0023317:	0f 84 2b 03 00 00    	je     c0023648 <__adddf3+0x645>
c002331d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0023324:	83 fe 1f             	cmp    esi,0x1f
c0023327:	7e 49                	jle    c0023372 <__adddf3+0x36f>
c0023329:	83 fe 3f             	cmp    esi,0x3f
c002332c:	0f 8f 16 03 00 00    	jg     c0023648 <__adddf3+0x645>
c0023332:	83 e6 1f             	and    esi,0x1f
c0023335:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023338:	89 f1                	mov    ecx,esi
c002333a:	d3 ef                	shr    edi,cl
c002333c:	31 db                	xor    ebx,ebx
c002333e:	85 f6                	test   esi,esi
c0023340:	74 13                	je     c0023355 <__adddf3+0x352>
c0023342:	b9 20 00 00 00       	mov    ecx,0x20
c0023347:	29 f1                	sub    ecx,esi
c0023349:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002334c:	d3 e6                	shl    esi,cl
c002334e:	31 db                	xor    ebx,ebx
c0023350:	85 f6                	test   esi,esi
c0023352:	0f 95 c3             	setne  bl
c0023355:	31 c9                	xor    ecx,ecx
c0023357:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002335b:	0f 95 c1             	setne  cl
c002335e:	09 cf                	or     edi,ecx
c0023360:	09 fb                	or     ebx,edi
c0023362:	29 da                	sub    edx,ebx
c0023364:	83 d8 00             	sbb    eax,0x0
c0023367:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002336a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002336d:	e9 aa 01 00 00       	jmp    c002351c <__adddf3+0x519>
c0023372:	bf 20 00 00 00       	mov    edi,0x20
c0023377:	29 f7                	sub    edi,esi
c0023379:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002337c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002337f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023382:	d3 e3                	shl    ebx,cl
c0023384:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023387:	89 f1                	mov    ecx,esi
c0023389:	d3 ef                	shr    edi,cl
c002338b:	09 fb                	or     ebx,edi
c002338d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023390:	89 f1                	mov    ecx,esi
c0023392:	d3 ef                	shr    edi,cl
c0023394:	89 fe                	mov    esi,edi
c0023396:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023399:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002339c:	d3 e7                	shl    edi,cl
c002339e:	85 ff                	test   edi,edi
c00233a0:	0f 95 c1             	setne  cl
c00233a3:	0f b6 c9             	movzx  ecx,cl
c00233a6:	09 cb                	or     ebx,ecx
c00233a8:	29 da                	sub    edx,ebx
c00233aa:	19 f0                	sbb    eax,esi
c00233ac:	eb b9                	jmp    c0023367 <__adddf3+0x364>
c00233ae:	0f 84 cd 00 00 00    	je     c0023481 <__adddf3+0x47e>
c00233b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00233b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00233ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00233bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00233c1:	75 1b                	jne    c00233de <__adddf3+0x3db>
c00233c3:	89 d6                	mov    esi,edx
c00233c5:	09 c6                	or     esi,eax
c00233c7:	0f 84 7b 02 00 00    	je     c0023648 <__adddf3+0x645>
c00233cd:	4b                   	dec    ebx
c00233ce:	75 24                	jne    c00233f4 <__adddf3+0x3f1>
c00233d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00233d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00233d6:	29 d1                	sub    ecx,edx
c00233d8:	19 c6                	sbb    esi,eax
c00233da:	89 ca                	mov    edx,ecx
c00233dc:	eb 61                	jmp    c002343f <__adddf3+0x43c>
c00233de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00233e1:	f7 d6                	not    esi
c00233e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00233e9:	0f 84 59 02 00 00    	je     c0023648 <__adddf3+0x645>
c00233ef:	0d 00 00 00 80       	or     eax,0x80000000
c00233f4:	83 fb 1f             	cmp    ebx,0x1f
c00233f7:	7e 4d                	jle    c0023446 <__adddf3+0x443>
c00233f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00233fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00233ff:	83 fb 3f             	cmp    ebx,0x3f
c0023402:	0f 8f 40 02 00 00    	jg     c0023648 <__adddf3+0x645>
c0023408:	83 e3 1f             	and    ebx,0x1f
c002340b:	89 d9                	mov    ecx,ebx
c002340d:	89 c7                	mov    edi,eax
c002340f:	d3 ef                	shr    edi,cl
c0023411:	31 db                	xor    ebx,ebx
c0023413:	85 c9                	test   ecx,ecx
c0023415:	74 12                	je     c0023429 <__adddf3+0x426>
c0023417:	be 20 00 00 00       	mov    esi,0x20
c002341c:	29 ce                	sub    esi,ecx
c002341e:	89 f1                	mov    ecx,esi
c0023420:	d3 e0                	shl    eax,cl
c0023422:	31 db                	xor    ebx,ebx
c0023424:	85 c0                	test   eax,eax
c0023426:	0f 95 c3             	setne  bl
c0023429:	31 c0                	xor    eax,eax
c002342b:	85 d2                	test   edx,edx
c002342d:	0f 95 c0             	setne  al
c0023430:	09 c7                	or     edi,eax
c0023432:	09 fb                	or     ebx,edi
c0023434:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023437:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002343a:	29 da                	sub    edx,ebx
c002343c:	83 de 00             	sbb    esi,0x0
c002343f:	89 f0                	mov    eax,esi
c0023441:	e9 d6 00 00 00       	jmp    c002351c <__adddf3+0x519>
c0023446:	be 20 00 00 00       	mov    esi,0x20
c002344b:	29 de                	sub    esi,ebx
c002344d:	89 c7                	mov    edi,eax
c002344f:	89 f1                	mov    ecx,esi
c0023451:	d3 e7                	shl    edi,cl
c0023453:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0023456:	89 d7                	mov    edi,edx
c0023458:	88 d9                	mov    cl,bl
c002345a:	d3 ef                	shr    edi,cl
c002345c:	89 f9                	mov    ecx,edi
c002345e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0023461:	09 cf                	or     edi,ecx
c0023463:	88 d9                	mov    cl,bl
c0023465:	d3 e8                	shr    eax,cl
c0023467:	89 f1                	mov    ecx,esi
c0023469:	d3 e2                	shl    edx,cl
c002346b:	85 d2                	test   edx,edx
c002346d:	0f 95 c2             	setne  dl
c0023470:	0f b6 d2             	movzx  edx,dl
c0023473:	09 d7                	or     edi,edx
c0023475:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023478:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002347b:	29 fa                	sub    edx,edi
c002347d:	19 c6                	sbb    esi,eax
c002347f:	eb be                	jmp    c002343f <__adddf3+0x43c>
c0023481:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023484:	8d 5e 01             	lea    ebx,[esi+0x1]
c0023487:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002348d:	75 6a                	jne    c00234f9 <__adddf3+0x4f6>
c002348f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0023493:	75 58                	jne    c00234ed <__adddf3+0x4ea>
c0023495:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0023498:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002349b:	89 d6                	mov    esi,edx
c002349d:	09 c6                	or     esi,eax
c002349f:	75 17                	jne    c00234b8 <__adddf3+0x4b5>
c00234a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00234a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00234a7:	85 db                	test   ebx,ebx
c00234a9:	0f 85 99 01 00 00    	jne    c0023648 <__adddf3+0x645>
c00234af:	31 ff                	xor    edi,edi
c00234b1:	31 c9                	xor    ecx,ecx
c00234b3:	e9 90 01 00 00       	jmp    c0023648 <__adddf3+0x645>
c00234b8:	85 db                	test   ebx,ebx
c00234ba:	0f 84 88 01 00 00    	je     c0023648 <__adddf3+0x645>
c00234c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00234c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00234c6:	85 c0                	test   eax,eax
c00234c8:	79 10                	jns    c00234da <__adddf3+0x4d7>
c00234ca:	31 c9                	xor    ecx,ecx
c00234cc:	f7 da                	neg    edx
c00234ce:	0f 95 c1             	setne  cl
c00234d1:	01 c8                	add    eax,ecx
c00234d3:	f7 d8                	neg    eax
c00234d5:	e9 2f 01 00 00       	jmp    c0023609 <__adddf3+0x606>
c00234da:	31 ff                	xor    edi,edi
c00234dc:	31 c9                	xor    ecx,ecx
c00234de:	89 c3                	mov    ebx,eax
c00234e0:	09 d3                	or     ebx,edx
c00234e2:	0f 84 60 01 00 00    	je     c0023648 <__adddf3+0x645>
c00234e8:	e9 05 01 00 00       	jmp    c00235f2 <__adddf3+0x5ef>
c00234ed:	31 ff                	xor    edi,edi
c00234ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00234f4:	e9 4f 01 00 00       	jmp    c0023648 <__adddf3+0x645>
c00234f9:	89 c1                	mov    ecx,eax
c00234fb:	89 d0                	mov    eax,edx
c00234fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0023500:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0023503:	89 ca                	mov    edx,ecx
c0023505:	85 c9                	test   ecx,ecx
c0023507:	79 2c                	jns    c0023535 <__adddf3+0x532>
c0023509:	31 c9                	xor    ecx,ecx
c002350b:	f7 d8                	neg    eax
c002350d:	0f 95 c1             	setne  cl
c0023510:	01 ca                	add    edx,ecx
c0023512:	f7 da                	neg    edx
c0023514:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0023517:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002351a:	eb 19                	jmp    c0023535 <__adddf3+0x532>
c002351c:	85 c0                	test   eax,eax
c002351e:	0f 89 e5 00 00 00    	jns    c0023609 <__adddf3+0x606>
c0023524:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023529:	89 c1                	mov    ecx,eax
c002352b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002352e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0023531:	89 d0                	mov    eax,edx
c0023533:	89 ca                	mov    edx,ecx
c0023535:	85 d2                	test   edx,edx
c0023537:	74 59                	je     c0023592 <__adddf3+0x58f>
c0023539:	0f bd da             	bsr    ebx,edx
c002353c:	83 f3 1f             	xor    ebx,0x1f
c002353f:	88 d9                	mov    cl,bl
c0023541:	d3 e2                	shl    edx,cl
c0023543:	bf 20 00 00 00       	mov    edi,0x20
c0023548:	89 f9                	mov    ecx,edi
c002354a:	29 d9                	sub    ecx,ebx
c002354c:	89 c6                	mov    esi,eax
c002354e:	d3 ee                	shr    esi,cl
c0023550:	09 d6                	or     esi,edx
c0023552:	88 d9                	mov    cl,bl
c0023554:	d3 e0                	shl    eax,cl
c0023556:	89 c2                	mov    edx,eax
c0023558:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002355b:	25 ff 07 00 00       	and    eax,0x7ff
c0023560:	39 d8                	cmp    eax,ebx
c0023562:	7f 22                	jg     c0023586 <__adddf3+0x583>
c0023564:	29 c3                	sub    ebx,eax
c0023566:	43                   	inc    ebx
c0023567:	88 d9                	mov    cl,bl
c0023569:	d3 ea                	shr    edx,cl
c002356b:	29 df                	sub    edi,ebx
c002356d:	89 f9                	mov    ecx,edi
c002356f:	89 f0                	mov    eax,esi
c0023571:	d3 e0                	shl    eax,cl
c0023573:	09 c2                	or     edx,eax
c0023575:	89 f0                	mov    eax,esi
c0023577:	88 d9                	mov    cl,bl
c0023579:	d3 e8                	shr    eax,cl
c002357b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002357e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0023584:	eb 6f                	jmp    c00235f5 <__adddf3+0x5f2>
c0023586:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023589:	29 d8                	sub    eax,ebx
c002358b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002358e:	89 f0                	mov    eax,esi
c0023590:	eb 59                	jmp    c00235eb <__adddf3+0x5e8>
c0023592:	85 c0                	test   eax,eax
c0023594:	74 6a                	je     c0023600 <__adddf3+0x5fd>
c0023596:	0f bd c8             	bsr    ecx,eax
c0023599:	83 f1 1f             	xor    ecx,0x1f
c002359c:	d3 e0                	shl    eax,cl
c002359e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00235a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00235a7:	83 c1 20             	add    ecx,0x20
c00235aa:	39 cb                	cmp    ebx,ecx
c00235ac:	7f 35                	jg     c00235e3 <__adddf3+0x5e0>
c00235ae:	29 d9                	sub    ecx,ebx
c00235b0:	8d 71 01             	lea    esi,[ecx+0x1]
c00235b3:	83 fe 1f             	cmp    esi,0x1f
c00235b6:	7e 09                	jle    c00235c1 <__adddf3+0x5be>
c00235b8:	83 e9 1f             	sub    ecx,0x1f
c00235bb:	d3 e8                	shr    eax,cl
c00235bd:	89 c3                	mov    ebx,eax
c00235bf:	eb 11                	jmp    c00235d2 <__adddf3+0x5cf>
c00235c1:	b9 20 00 00 00       	mov    ecx,0x20
c00235c6:	29 f1                	sub    ecx,esi
c00235c8:	89 c3                	mov    ebx,eax
c00235ca:	d3 e3                	shl    ebx,cl
c00235cc:	89 f1                	mov    ecx,esi
c00235ce:	d3 e8                	shr    eax,cl
c00235d0:	89 c2                	mov    edx,eax
c00235d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00235d5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00235da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00235dd:	89 d0                	mov    eax,edx
c00235df:	89 da                	mov    edx,ebx
c00235e1:	eb 26                	jmp    c0023609 <__adddf3+0x606>
c00235e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00235e6:	29 cf                	sub    edi,ecx
c00235e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00235eb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00235f0:	eb 17                	jmp    c0023609 <__adddf3+0x606>
c00235f2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00235f5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00235f8:	eb 0f                	jmp    c0023609 <__adddf3+0x606>
c00235fa:	31 d2                	xor    edx,edx
c00235fc:	31 c0                	xor    eax,eax
c00235fe:	eb 09                	jmp    c0023609 <__adddf3+0x606>
c0023600:	89 c2                	mov    edx,eax
c0023602:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023609:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002360c:	c1 e1 14             	shl    ecx,0x14
c002360f:	89 c3                	mov    ebx,eax
c0023611:	c1 eb 0b             	shr    ebx,0xb
c0023614:	09 d9                	or     ecx,ebx
c0023616:	89 d3                	mov    ebx,edx
c0023618:	c1 eb 0b             	shr    ebx,0xb
c002361b:	c1 e0 15             	shl    eax,0x15
c002361e:	09 d8                	or     eax,ebx
c0023620:	89 c7                	mov    edi,eax
c0023622:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0023628:	0f 95 c0             	setne  al
c002362b:	89 c6                	mov    esi,eax
c002362d:	09 f3                	or     ebx,esi
c002362f:	83 e3 01             	and    ebx,0x1
c0023632:	c1 ea 0a             	shr    edx,0xa
c0023635:	21 da                	and    edx,ebx
c0023637:	89 f8                	mov    eax,edi
c0023639:	01 d0                	add    eax,edx
c002363b:	83 d1 00             	adc    ecx,0x0
c002363e:	89 c7                	mov    edi,eax
c0023640:	eb 06                	jmp    c0023648 <__adddf3+0x645>
c0023642:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0023645:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0023648:	89 f8                	mov    eax,edi
c002364a:	89 ca                	mov    edx,ecx
c002364c:	83 c4 24             	add    esp,0x24
c002364f:	5b                   	pop    ebx
c0023650:	5e                   	pop    esi
c0023651:	5f                   	pop    edi
c0023652:	5d                   	pop    ebp
c0023653:	c3                   	ret    

c0023654 <__subdf3>:
c0023654:	55                   	push   ebp
c0023655:	89 e5                	mov    ebp,esp
c0023657:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002365a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002365d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0023663:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0023666:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0023669:	5d                   	pop    ebp
c002366a:	e9 94 f9 ff ff       	jmp    c0023003 <__adddf3>

c002366f <__negdf2>:
c002366f:	55                   	push   ebp
c0023670:	89 e5                	mov    ebp,esp
c0023672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023675:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023678:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002367e:	5d                   	pop    ebp
c002367f:	c3                   	ret    

c0023680 <__muldf3>:
c0023680:	55                   	push   ebp
c0023681:	89 e5                	mov    ebp,esp
c0023683:	57                   	push   edi
c0023684:	56                   	push   esi
c0023685:	53                   	push   ebx
c0023686:	83 ec 24             	sub    esp,0x24
c0023689:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002368c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002368f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023692:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023695:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023698:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002369b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002369e:	89 c8                	mov    eax,ecx
c00236a0:	c1 f8 14             	sar    eax,0x14
c00236a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00236a6:	89 f8                	mov    eax,edi
c00236a8:	89 fb                	mov    ebx,edi
c00236aa:	c1 e3 0b             	shl    ebx,0xb
c00236ad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00236b0:	c1 e1 0b             	shl    ecx,0xb
c00236b3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00236b9:	c1 e8 15             	shr    eax,0x15
c00236bc:	09 c1                	or     ecx,eax
c00236be:	89 d6                	mov    esi,edx
c00236c0:	89 d0                	mov    eax,edx
c00236c2:	c1 f8 14             	sar    eax,0x14
c00236c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00236c8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00236cb:	89 c3                	mov    ebx,eax
c00236cd:	c1 e3 0b             	shl    ebx,0xb
c00236d0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00236d3:	c1 e6 0b             	shl    esi,0xb
c00236d6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00236dc:	c1 e8 15             	shr    eax,0x15
c00236df:	09 c6                	or     esi,eax
c00236e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00236e4:	25 ff 07 00 00       	and    eax,0x7ff
c00236e9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00236ec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00236ef:	25 ff 07 00 00       	and    eax,0x7ff
c00236f4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00236f7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00236fa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00236fd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0023704:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0023707:	40                   	inc    eax
c0023708:	a9 fe 07 00 00       	test   eax,0x7fe
c002370d:	0f 85 8d 00 00 00    	jne    c00237a0 <__muldf3+0x120>
c0023713:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023716:	09 c8                	or     eax,ecx
c0023718:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002371c:	74 44                	je     c0023762 <__muldf3+0xe2>
c002371e:	85 c0                	test   eax,eax
c0023720:	0f 85 31 02 00 00    	jne    c0023957 <__muldf3+0x2d7>
c0023726:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0023729:	40                   	inc    eax
c002372a:	a9 fe 07 00 00       	test   eax,0x7fe
c002372f:	75 13                	jne    c0023744 <__muldf3+0xc4>
c0023731:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023734:	09 f1                	or     ecx,esi
c0023736:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002373a:	74 22                	je     c002375e <__muldf3+0xde>
c002373c:	85 c9                	test   ecx,ecx
c002373e:	0f 85 0d 02 00 00    	jne    c0023951 <__muldf3+0x2d1>
c0023744:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0023748:	0f 89 09 02 00 00    	jns    c0023957 <__muldf3+0x2d7>
c002374e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023751:	05 00 00 00 80       	add    eax,0x80000000
c0023756:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023759:	e9 f9 01 00 00       	jmp    c0023957 <__muldf3+0x2d7>
c002375e:	85 c9                	test   ecx,ecx
c0023760:	eb 2e                	jmp    c0023790 <__muldf3+0x110>
c0023762:	85 c0                	test   eax,eax
c0023764:	74 20                	je     c0023786 <__muldf3+0x106>
c0023766:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0023769:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002376c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002376f:	c1 ef 1f             	shr    edi,0x1f
c0023772:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0023775:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0023778:	8d 43 ff             	lea    eax,[ebx-0x1]
c002377b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002377e:	09 f9                	or     ecx,edi
c0023780:	78 1e                	js     c00237a0 <__muldf3+0x120>
c0023782:	89 c3                	mov    ebx,eax
c0023784:	eb e0                	jmp    c0023766 <__muldf3+0xe6>
c0023786:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0023789:	f7 d0                	not    eax
c002378b:	a9 ff 07 00 00       	test   eax,0x7ff
c0023790:	75 b2                	jne    c0023744 <__muldf3+0xc4>
c0023792:	31 ff                	xor    edi,edi
c0023794:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002379b:	e9 b7 01 00 00       	jmp    c0023957 <__muldf3+0x2d7>
c00237a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00237a3:	40                   	inc    eax
c00237a4:	a9 fe 07 00 00       	test   eax,0x7fe
c00237a9:	75 57                	jne    c0023802 <__muldf3+0x182>
c00237ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00237ae:	09 f0                	or     eax,esi
c00237b0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00237b4:	74 23                	je     c00237d9 <__muldf3+0x159>
c00237b6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00237ba:	0f 89 91 01 00 00    	jns    c0023951 <__muldf3+0x2d1>
c00237c0:	85 c0                	test   eax,eax
c00237c2:	0f 85 89 01 00 00    	jne    c0023951 <__muldf3+0x2d1>
c00237c8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00237cb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00237d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00237d4:	e9 7e 01 00 00       	jmp    c0023957 <__muldf3+0x2d7>
c00237d9:	85 c0                	test   eax,eax
c00237db:	75 0c                	jne    c00237e9 <__muldf3+0x169>
c00237dd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00237e1:	0f 89 6a 01 00 00    	jns    c0023951 <__muldf3+0x2d1>
c00237e7:	eb df                	jmp    c00237c8 <__muldf3+0x148>
c00237e9:	01 f6                	add    esi,esi
c00237eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00237ee:	c1 ea 1f             	shr    edx,0x1f
c00237f1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00237f4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00237f7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00237fa:	09 d6                	or     esi,edx
c00237fc:	78 04                	js     c0023802 <__muldf3+0x182>
c00237fe:	89 c3                	mov    ebx,eax
c0023800:	eb e7                	jmp    c00237e9 <__muldf3+0x169>
c0023802:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023808:	81 ce 00 00 00 80    	or     esi,0x80000000
c002380e:	89 c8                	mov    eax,ecx
c0023810:	f7 e6                	mul    esi
c0023812:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0023815:	89 c7                	mov    edi,eax
c0023817:	89 c8                	mov    eax,ecx
c0023819:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002381c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002381f:	89 c1                	mov    ecx,eax
c0023821:	89 f0                	mov    eax,esi
c0023823:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0023826:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0023829:	89 c6                	mov    esi,eax
c002382b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002382e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0023831:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0023834:	31 c0                	xor    eax,eax
c0023836:	01 f1                	add    ecx,esi
c0023838:	0f 92 c0             	setb   al
c002383b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002383e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0023841:	83 d6 00             	adc    esi,0x0
c0023844:	01 c7                	add    edi,eax
c0023846:	83 d6 00             	adc    esi,0x0
c0023849:	01 ca                	add    edx,ecx
c002384b:	0f 92 c1             	setb   cl
c002384e:	0f b6 c9             	movzx  ecx,cl
c0023851:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0023854:	83 d6 00             	adc    esi,0x0
c0023857:	01 cf                	add    edi,ecx
c0023859:	83 d6 00             	adc    esi,0x0
c002385c:	31 c9                	xor    ecx,ecx
c002385e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0023861:	0f 95 c1             	setne  cl
c0023864:	09 cf                	or     edi,ecx
c0023866:	85 f6                	test   esi,esi
c0023868:	78 0c                	js     c0023876 <__muldf3+0x1f6>
c002386a:	01 f6                	add    esi,esi
c002386c:	89 f8                	mov    eax,edi
c002386e:	c1 e8 1f             	shr    eax,0x1f
c0023871:	09 c6                	or     esi,eax
c0023873:	01 ff                	add    edi,edi
c0023875:	4b                   	dec    ebx
c0023876:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002387c:	0f 8f 85 00 00 00    	jg     c0023907 <__muldf3+0x287>
c0023882:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0023888:	85 db                	test   ebx,ebx
c002388a:	0f 8f 84 00 00 00    	jg     c0023914 <__muldf3+0x294>
c0023890:	83 fb cc             	cmp    ebx,0xffffffcc
c0023893:	7c 79                	jl     c002390e <__muldf3+0x28e>
c0023895:	ba 01 00 00 00       	mov    edx,0x1
c002389a:	29 da                	sub    edx,ebx
c002389c:	81 ce 00 00 00 80    	or     esi,0x80000000
c00238a2:	83 fa 1f             	cmp    edx,0x1f
c00238a5:	7e 30                	jle    c00238d7 <__muldf3+0x257>
c00238a7:	83 fa 20             	cmp    edx,0x20
c00238aa:	75 0b                	jne    c00238b7 <__muldf3+0x237>
c00238ac:	31 c0                	xor    eax,eax
c00238ae:	85 ff                	test   edi,edi
c00238b0:	0f 95 c0             	setne  al
c00238b3:	89 c7                	mov    edi,eax
c00238b5:	eb 1a                	jmp    c00238d1 <__muldf3+0x251>
c00238b7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00238ba:	89 f0                	mov    eax,esi
c00238bc:	d3 e0                	shl    eax,cl
c00238be:	09 f8                	or     eax,edi
c00238c0:	0f 95 c0             	setne  al
c00238c3:	0f b6 c0             	movzx  eax,al
c00238c6:	89 c7                	mov    edi,eax
c00238c8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00238cd:	29 d9                	sub    ecx,ebx
c00238cf:	d3 ee                	shr    esi,cl
c00238d1:	09 f7                	or     edi,esi
c00238d3:	31 db                	xor    ebx,ebx
c00238d5:	eb 3b                	jmp    c0023912 <__muldf3+0x292>
c00238d7:	83 c3 1f             	add    ebx,0x1f
c00238da:	89 f0                	mov    eax,esi
c00238dc:	88 d9                	mov    cl,bl
c00238de:	d3 e0                	shl    eax,cl
c00238e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00238e3:	89 f8                	mov    eax,edi
c00238e5:	88 d1                	mov    cl,dl
c00238e7:	d3 e8                	shr    eax,cl
c00238e9:	89 c1                	mov    ecx,eax
c00238eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00238ee:	09 c8                	or     eax,ecx
c00238f0:	88 d9                	mov    cl,bl
c00238f2:	d3 e7                	shl    edi,cl
c00238f4:	31 db                	xor    ebx,ebx
c00238f6:	85 ff                	test   edi,edi
c00238f8:	0f 95 c3             	setne  bl
c00238fb:	89 df                	mov    edi,ebx
c00238fd:	09 c7                	or     edi,eax
c00238ff:	88 d1                	mov    cl,dl
c0023901:	d3 ee                	shr    esi,cl
c0023903:	31 db                	xor    ebx,ebx
c0023905:	eb 0d                	jmp    c0023914 <__muldf3+0x294>
c0023907:	bb ff 07 00 00       	mov    ebx,0x7ff
c002390c:	eb 02                	jmp    c0023910 <__muldf3+0x290>
c002390e:	31 db                	xor    ebx,ebx
c0023910:	31 ff                	xor    edi,edi
c0023912:	31 f6                	xor    esi,esi
c0023914:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0023917:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002391a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002391f:	09 c3                	or     ebx,eax
c0023921:	c1 e3 14             	shl    ebx,0x14
c0023924:	89 f0                	mov    eax,esi
c0023926:	c1 e8 0b             	shr    eax,0xb
c0023929:	09 c3                	or     ebx,eax
c002392b:	89 f8                	mov    eax,edi
c002392d:	c1 e8 0b             	shr    eax,0xb
c0023930:	c1 e6 15             	shl    esi,0x15
c0023933:	09 c6                	or     esi,eax
c0023935:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002393b:	0f 95 c1             	setne  cl
c002393e:	09 c8                	or     eax,ecx
c0023940:	83 e0 01             	and    eax,0x1
c0023943:	c1 ef 0a             	shr    edi,0xa
c0023946:	21 c7                	and    edi,eax
c0023948:	01 f7                	add    edi,esi
c002394a:	83 d3 00             	adc    ebx,0x0
c002394d:	89 da                	mov    edx,ebx
c002394f:	eb 03                	jmp    c0023954 <__muldf3+0x2d4>
c0023951:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0023954:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0023957:	89 f8                	mov    eax,edi
c0023959:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002395c:	83 c4 24             	add    esp,0x24
c002395f:	5b                   	pop    ebx
c0023960:	5e                   	pop    esi
c0023961:	5f                   	pop    edi
c0023962:	5d                   	pop    ebp
c0023963:	c3                   	ret    

c0023964 <__divdf3>:
c0023964:	55                   	push   ebp
c0023965:	89 e5                	mov    ebp,esp
c0023967:	57                   	push   edi
c0023968:	56                   	push   esi
c0023969:	53                   	push   ebx
c002396a:	83 ec 2c             	sub    esp,0x2c
c002396d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023970:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023973:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023976:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0023979:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002397c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002397f:	89 ce                	mov    esi,ecx
c0023981:	89 c8                	mov    eax,ecx
c0023983:	c1 f8 14             	sar    eax,0x14
c0023986:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023989:	89 f8                	mov    eax,edi
c002398b:	89 fb                	mov    ebx,edi
c002398d:	c1 e3 0b             	shl    ebx,0xb
c0023990:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0023993:	c1 e6 0b             	shl    esi,0xb
c0023996:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002399c:	c1 e8 15             	shr    eax,0x15
c002399f:	09 c6                	or     esi,eax
c00239a1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00239a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00239a7:	89 c2                	mov    edx,eax
c00239a9:	c1 fa 14             	sar    edx,0x14
c00239ac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00239af:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00239b2:	89 de                	mov    esi,ebx
c00239b4:	c1 e6 0b             	shl    esi,0xb
c00239b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00239ba:	c1 e0 0b             	shl    eax,0xb
c00239bd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00239c2:	c1 eb 15             	shr    ebx,0x15
c00239c5:	09 d8                	or     eax,ebx
c00239c7:	89 c2                	mov    edx,eax
c00239c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00239cc:	25 ff 07 00 00       	and    eax,0x7ff
c00239d1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00239d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00239d7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00239dd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00239e0:	29 d8                	sub    eax,ebx
c00239e2:	05 ff 03 00 00       	add    eax,0x3ff
c00239e7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00239ea:	46                   	inc    esi
c00239eb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00239f1:	0f 85 a5 00 00 00    	jne    c0023a9c <__divdf3+0x138>
c00239f7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00239fa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00239fd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0023a01:	74 2a                	je     c0023a2d <__divdf3+0xc9>
c0023a03:	85 f6                	test   esi,esi
c0023a05:	0f 85 cc 02 00 00    	jne    c0023cd7 <__divdf3+0x373>
c0023a0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023a0e:	40                   	inc    eax
c0023a0f:	a9 fe 07 00 00       	test   eax,0x7fe
c0023a14:	75 26                	jne    c0023a3c <__divdf3+0xd8>
c0023a16:	85 db                	test   ebx,ebx
c0023a18:	74 22                	je     c0023a3c <__divdf3+0xd8>
c0023a1a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0023a1d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0023a20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0023a23:	09 d0                	or     eax,edx
c0023a25:	0f 85 ac 02 00 00    	jne    c0023cd7 <__divdf3+0x373>
c0023a2b:	eb 63                	jmp    c0023a90 <__divdf3+0x12c>
c0023a2d:	85 f6                	test   esi,esi
c0023a2f:	75 22                	jne    c0023a53 <__divdf3+0xef>
c0023a31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023a34:	40                   	inc    eax
c0023a35:	a9 fe 07 00 00       	test   eax,0x7fe
c0023a3a:	74 36                	je     c0023a72 <__divdf3+0x10e>
c0023a3c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023a40:	0f 89 91 02 00 00    	jns    c0023cd7 <__divdf3+0x373>
c0023a46:	89 f8                	mov    eax,edi
c0023a48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0023a4e:	e9 80 02 00 00       	jmp    c0023cd3 <__divdf3+0x36f>
c0023a53:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023a56:	01 f6                	add    esi,esi
c0023a58:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0023a5b:	c1 ef 1f             	shr    edi,0x1f
c0023a5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0023a61:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0023a64:	8d 48 ff             	lea    ecx,[eax-0x1]
c0023a67:	09 f7                	or     edi,esi
c0023a69:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0023a6c:	78 2e                	js     c0023a9c <__divdf3+0x138>
c0023a6e:	89 c8                	mov    eax,ecx
c0023a70:	eb e1                	jmp    c0023a53 <__divdf3+0xef>
c0023a72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0023a75:	09 d0                	or     eax,edx
c0023a77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0023a7b:	74 0f                	je     c0023a8c <__divdf3+0x128>
c0023a7d:	85 c0                	test   eax,eax
c0023a7f:	74 bb                	je     c0023a3c <__divdf3+0xd8>
c0023a81:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0023a84:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0023a87:	e9 4b 02 00 00       	jmp    c0023cd7 <__divdf3+0x373>
c0023a8c:	85 c0                	test   eax,eax
c0023a8e:	75 ac                	jne    c0023a3c <__divdf3+0xd8>
c0023a90:	31 ff                	xor    edi,edi
c0023a92:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0023a97:	e9 3b 02 00 00       	jmp    c0023cd7 <__divdf3+0x373>
c0023a9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0023a9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0023aa2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0023aa8:	75 6b                	jne    c0023b15 <__divdf3+0x1b1>
c0023aaa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023aad:	09 d6                	or     esi,edx
c0023aaf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0023ab3:	74 28                	je     c0023add <__divdf3+0x179>
c0023ab5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0023ab8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0023abb:	85 f6                	test   esi,esi
c0023abd:	0f 85 14 02 00 00    	jne    c0023cd7 <__divdf3+0x373>
c0023ac3:	31 ff                	xor    edi,edi
c0023ac5:	31 c9                	xor    ecx,ecx
c0023ac7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0023aca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0023acd:	0f 89 04 02 00 00    	jns    c0023cd7 <__divdf3+0x373>
c0023ad3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0023ad8:	e9 fa 01 00 00       	jmp    c0023cd7 <__divdf3+0x373>
c0023add:	85 f6                	test   esi,esi
c0023adf:	75 1b                	jne    c0023afc <__divdf3+0x198>
c0023ae1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0023ae4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0023ae7:	25 00 00 00 80       	and    eax,0x80000000
c0023aec:	31 c9                	xor    ecx,ecx
c0023aee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0023af3:	89 cf                	mov    edi,ecx
c0023af5:	89 c1                	mov    ecx,eax
c0023af7:	e9 db 01 00 00       	jmp    c0023cd7 <__divdf3+0x373>
c0023afc:	01 d2                	add    edx,edx
c0023afe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023b01:	c1 eb 1f             	shr    ebx,0x1f
c0023b04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023b07:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0023b0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0023b0d:	09 da                	or     edx,ebx
c0023b0f:	78 04                	js     c0023b15 <__divdf3+0x1b1>
c0023b11:	89 c8                	mov    eax,ecx
c0023b13:	eb e7                	jmp    c0023afc <__divdf3+0x198>
c0023b15:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023b18:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023b1e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023b24:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0023b27:	39 d6                	cmp    esi,edx
c0023b29:	77 0d                	ja     c0023b38 <__divdf3+0x1d4>
c0023b2b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023b2e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0023b31:	72 1b                	jb     c0023b4e <__divdf3+0x1ea>
c0023b33:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0023b36:	75 16                	jne    c0023b4e <__divdf3+0x1ea>
c0023b38:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0023b3b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023b3e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0023b41:	83 de 00             	sbb    esi,0x0
c0023b44:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0023b47:	ba 01 00 00 00       	mov    edx,0x1
c0023b4c:	eb 02                	jmp    c0023b50 <__divdf3+0x1ec>
c0023b4e:	31 d2                	xor    edx,edx
c0023b50:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0023b57:	31 ff                	xor    edi,edi
c0023b59:	01 ff                	add    edi,edi
c0023b5b:	89 d1                	mov    ecx,edx
c0023b5d:	c1 e9 1f             	shr    ecx,0x1f
c0023b60:	09 cf                	or     edi,ecx
c0023b62:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0023b65:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0023b68:	89 da                	mov    edx,ebx
c0023b6a:	89 f3                	mov    ebx,esi
c0023b6c:	8d 34 36             	lea    esi,[esi+esi*1]
c0023b6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023b72:	c1 e9 1f             	shr    ecx,0x1f
c0023b75:	09 ce                	or     esi,ecx
c0023b77:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023b7a:	01 c9                	add    ecx,ecx
c0023b7c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0023b7f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0023b82:	85 db                	test   ebx,ebx
c0023b84:	78 29                	js     c0023baf <__divdf3+0x24b>
c0023b86:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0023b89:	72 07                	jb     c0023b92 <__divdf3+0x22e>
c0023b8b:	75 3c                	jne    c0023bc9 <__divdf3+0x265>
c0023b8d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0023b90:	77 37                	ja     c0023bc9 <__divdf3+0x265>
c0023b92:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0023b95:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0023b98:	31 d2                	xor    edx,edx
c0023b9a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0023b9d:	0f 97 c2             	seta   dl
c0023ba0:	29 d6                	sub    esi,edx
c0023ba2:	89 d9                	mov    ecx,ebx
c0023ba4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0023ba7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0023baa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0023bad:	eb 17                	jmp    c0023bc6 <__divdf3+0x262>
c0023baf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0023bb2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023bb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0023bb8:	0f 97 c1             	seta   cl
c0023bbb:	0f b6 c9             	movzx  ecx,cl
c0023bbe:	29 ce                	sub    esi,ecx
c0023bc0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0023bc3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0023bc6:	83 ca 01             	or     edx,0x1
c0023bc9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0023bcc:	75 8b                	jne    c0023b59 <__divdf3+0x1f5>
c0023bce:	c1 e7 09             	shl    edi,0x9
c0023bd1:	89 d1                	mov    ecx,edx
c0023bd3:	c1 e9 17             	shr    ecx,0x17
c0023bd6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0023bd9:	09 f3                	or     ebx,esi
c0023bdb:	0f 95 c3             	setne  bl
c0023bde:	0f b6 db             	movzx  ebx,bl
c0023be1:	c1 e2 09             	shl    edx,0x9
c0023be4:	09 d3                	or     ebx,edx
c0023be6:	89 ca                	mov    edx,ecx
c0023be8:	09 fa                	or     edx,edi
c0023bea:	78 0c                	js     c0023bf8 <__divdf3+0x294>
c0023bec:	01 d2                	add    edx,edx
c0023bee:	89 d9                	mov    ecx,ebx
c0023bf0:	c1 e9 1f             	shr    ecx,0x1f
c0023bf3:	09 ca                	or     edx,ecx
c0023bf5:	01 db                	add    ebx,ebx
c0023bf7:	48                   	dec    eax
c0023bf8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0023bfd:	0f 8f 83 00 00 00    	jg     c0023c86 <__divdf3+0x322>
c0023c03:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023c09:	85 c0                	test   eax,eax
c0023c0b:	0f 8f 82 00 00 00    	jg     c0023c93 <__divdf3+0x32f>
c0023c11:	83 f8 cc             	cmp    eax,0xffffffcc
c0023c14:	7c 77                	jl     c0023c8d <__divdf3+0x329>
c0023c16:	be 01 00 00 00       	mov    esi,0x1
c0023c1b:	29 c6                	sub    esi,eax
c0023c1d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c23:	83 fe 1f             	cmp    esi,0x1f
c0023c26:	7e 2f                	jle    c0023c57 <__divdf3+0x2f3>
c0023c28:	83 fe 20             	cmp    esi,0x20
c0023c2b:	75 0a                	jne    c0023c37 <__divdf3+0x2d3>
c0023c2d:	85 db                	test   ebx,ebx
c0023c2f:	0f 95 c3             	setne  bl
c0023c32:	0f b6 db             	movzx  ebx,bl
c0023c35:	eb 1a                	jmp    c0023c51 <__divdf3+0x2ed>
c0023c37:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0023c3a:	89 d7                	mov    edi,edx
c0023c3c:	d3 e7                	shl    edi,cl
c0023c3e:	89 f9                	mov    ecx,edi
c0023c40:	09 d9                	or     ecx,ebx
c0023c42:	0f 95 c3             	setne  bl
c0023c45:	0f b6 db             	movzx  ebx,bl
c0023c48:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0023c4d:	29 c1                	sub    ecx,eax
c0023c4f:	d3 ea                	shr    edx,cl
c0023c51:	09 d3                	or     ebx,edx
c0023c53:	31 c0                	xor    eax,eax
c0023c55:	eb 3a                	jmp    c0023c91 <__divdf3+0x32d>
c0023c57:	83 c0 1f             	add    eax,0x1f
c0023c5a:	89 d7                	mov    edi,edx
c0023c5c:	88 c1                	mov    cl,al
c0023c5e:	d3 e7                	shl    edi,cl
c0023c60:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023c63:	89 df                	mov    edi,ebx
c0023c65:	89 f1                	mov    ecx,esi
c0023c67:	d3 ef                	shr    edi,cl
c0023c69:	89 f9                	mov    ecx,edi
c0023c6b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0023c6e:	09 cf                	or     edi,ecx
c0023c70:	88 c1                	mov    cl,al
c0023c72:	d3 e3                	shl    ebx,cl
c0023c74:	85 db                	test   ebx,ebx
c0023c76:	0f 95 c3             	setne  bl
c0023c79:	0f b6 db             	movzx  ebx,bl
c0023c7c:	09 fb                	or     ebx,edi
c0023c7e:	89 f1                	mov    ecx,esi
c0023c80:	d3 ea                	shr    edx,cl
c0023c82:	31 c0                	xor    eax,eax
c0023c84:	eb 0d                	jmp    c0023c93 <__divdf3+0x32f>
c0023c86:	b8 ff 07 00 00       	mov    eax,0x7ff
c0023c8b:	eb 02                	jmp    c0023c8f <__divdf3+0x32b>
c0023c8d:	31 c0                	xor    eax,eax
c0023c8f:	31 db                	xor    ebx,ebx
c0023c91:	31 d2                	xor    edx,edx
c0023c93:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0023c96:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0023c99:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0023c9f:	09 c8                	or     eax,ecx
c0023ca1:	c1 e0 14             	shl    eax,0x14
c0023ca4:	89 d1                	mov    ecx,edx
c0023ca6:	c1 e9 0b             	shr    ecx,0xb
c0023ca9:	09 c8                	or     eax,ecx
c0023cab:	89 c6                	mov    esi,eax
c0023cad:	89 d9                	mov    ecx,ebx
c0023caf:	c1 e9 0b             	shr    ecx,0xb
c0023cb2:	c1 e2 15             	shl    edx,0x15
c0023cb5:	09 ca                	or     edx,ecx
c0023cb7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0023cbd:	0f 95 c0             	setne  al
c0023cc0:	09 c1                	or     ecx,eax
c0023cc2:	83 e1 01             	and    ecx,0x1
c0023cc5:	c1 eb 0a             	shr    ebx,0xa
c0023cc8:	21 cb                	and    ebx,ecx
c0023cca:	01 d3                	add    ebx,edx
c0023ccc:	89 d8                	mov    eax,ebx
c0023cce:	83 d6 00             	adc    esi,0x0
c0023cd1:	89 f2                	mov    edx,esi
c0023cd3:	89 c7                	mov    edi,eax
c0023cd5:	89 d1                	mov    ecx,edx
c0023cd7:	89 f8                	mov    eax,edi
c0023cd9:	89 ca                	mov    edx,ecx
c0023cdb:	83 c4 2c             	add    esp,0x2c
c0023cde:	5b                   	pop    ebx
c0023cdf:	5e                   	pop    esi
c0023ce0:	5f                   	pop    edi
c0023ce1:	5d                   	pop    ebp
c0023ce2:	c3                   	ret    

c0023ce3 <__floatsidf>:
c0023ce3:	55                   	push   ebp
c0023ce4:	89 e5                	mov    ebp,esp
c0023ce6:	56                   	push   esi
c0023ce7:	53                   	push   ebx
c0023ce8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023ceb:	85 db                	test   ebx,ebx
c0023ced:	7e 15                	jle    c0023d04 <__floatsidf+0x21>
c0023cef:	0f bd cb             	bsr    ecx,ebx
c0023cf2:	83 f1 1f             	xor    ecx,0x1f
c0023cf5:	d3 e3                	shl    ebx,cl
c0023cf7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023cfd:	b8 1e 04 00 00       	mov    eax,0x41e
c0023d02:	eb 21                	jmp    c0023d25 <__floatsidf+0x42>
c0023d04:	b8 00 00 00 00       	mov    eax,0x0
c0023d09:	ba 00 00 00 00       	mov    edx,0x0
c0023d0e:	74 2a                	je     c0023d3a <__floatsidf+0x57>
c0023d10:	f7 db                	neg    ebx
c0023d12:	0f bd cb             	bsr    ecx,ebx
c0023d15:	83 f1 1f             	xor    ecx,0x1f
c0023d18:	d3 e3                	shl    ebx,cl
c0023d1a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023d20:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0023d25:	29 c8                	sub    eax,ecx
c0023d27:	c1 e0 14             	shl    eax,0x14
c0023d2a:	89 c1                	mov    ecx,eax
c0023d2c:	89 de                	mov    esi,ebx
c0023d2e:	c1 ee 0b             	shr    esi,0xb
c0023d31:	09 f1                	or     ecx,esi
c0023d33:	89 ca                	mov    edx,ecx
c0023d35:	c1 e3 15             	shl    ebx,0x15
c0023d38:	89 d8                	mov    eax,ebx
c0023d3a:	5b                   	pop    ebx
c0023d3b:	5e                   	pop    esi
c0023d3c:	5d                   	pop    ebp
c0023d3d:	c3                   	ret    

c0023d3e <__floatunsidf>:
c0023d3e:	55                   	push   ebp
c0023d3f:	89 e5                	mov    ebp,esp
c0023d41:	56                   	push   esi
c0023d42:	53                   	push   ebx
c0023d43:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023d46:	85 db                	test   ebx,ebx
c0023d48:	74 2a                	je     c0023d74 <__floatunsidf+0x36>
c0023d4a:	0f bd cb             	bsr    ecx,ebx
c0023d4d:	83 f1 1f             	xor    ecx,0x1f
c0023d50:	d3 e3                	shl    ebx,cl
c0023d52:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023d58:	b8 1e 04 00 00       	mov    eax,0x41e
c0023d5d:	29 c8                	sub    eax,ecx
c0023d5f:	c1 e0 14             	shl    eax,0x14
c0023d62:	89 c1                	mov    ecx,eax
c0023d64:	89 de                	mov    esi,ebx
c0023d66:	c1 ee 0b             	shr    esi,0xb
c0023d69:	09 f1                	or     ecx,esi
c0023d6b:	89 ca                	mov    edx,ecx
c0023d6d:	c1 e3 15             	shl    ebx,0x15
c0023d70:	89 d8                	mov    eax,ebx
c0023d72:	eb 04                	jmp    c0023d78 <__floatunsidf+0x3a>
c0023d74:	31 c0                	xor    eax,eax
c0023d76:	31 d2                	xor    edx,edx
c0023d78:	5b                   	pop    ebx
c0023d79:	5e                   	pop    esi
c0023d7a:	5d                   	pop    ebp
c0023d7b:	c3                   	ret    

c0023d7c <__fixdfsi>:
c0023d7c:	55                   	push   ebp
c0023d7d:	89 e5                	mov    ebp,esp
c0023d7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023d82:	89 d1                	mov    ecx,edx
c0023d84:	c1 e1 0b             	shl    ecx,0xb
c0023d87:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0023d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d90:	c1 e8 15             	shr    eax,0x15
c0023d93:	09 c1                	or     ecx,eax
c0023d95:	c1 fa 14             	sar    edx,0x14
c0023d98:	78 1f                	js     c0023db9 <__fixdfsi+0x3d>
c0023d9a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0023da0:	31 c0                	xor    eax,eax
c0023da2:	83 fa 1e             	cmp    edx,0x1e
c0023da5:	77 40                	ja     c0023de7 <__fixdfsi+0x6b>
c0023da7:	89 c8                	mov    eax,ecx
c0023da9:	0d 00 00 00 80       	or     eax,0x80000000
c0023dae:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023db3:	29 d1                	sub    ecx,edx
c0023db5:	d3 e8                	shr    eax,cl
c0023db7:	eb 2e                	jmp    c0023de7 <__fixdfsi+0x6b>
c0023db9:	31 c0                	xor    eax,eax
c0023dbb:	81 c2 01 04 00 00    	add    edx,0x401
c0023dc1:	78 24                	js     c0023de7 <__fixdfsi+0x6b>
c0023dc3:	83 fa 1e             	cmp    edx,0x1e
c0023dc6:	7e 09                	jle    c0023dd1 <__fixdfsi+0x55>
c0023dc8:	83 fa 1f             	cmp    edx,0x1f
c0023dcb:	75 18                	jne    c0023de5 <__fixdfsi+0x69>
c0023dcd:	85 c9                	test   ecx,ecx
c0023dcf:	75 14                	jne    c0023de5 <__fixdfsi+0x69>
c0023dd1:	89 c8                	mov    eax,ecx
c0023dd3:	0d 00 00 00 80       	or     eax,0x80000000
c0023dd8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023ddd:	29 d1                	sub    ecx,edx
c0023ddf:	d3 e8                	shr    eax,cl
c0023de1:	f7 d8                	neg    eax
c0023de3:	eb 02                	jmp    c0023de7 <__fixdfsi+0x6b>
c0023de5:	31 c0                	xor    eax,eax
c0023de7:	5d                   	pop    ebp
c0023de8:	c3                   	ret    

c0023de9 <__fixunsdfsi>:
c0023de9:	55                   	push   ebp
c0023dea:	89 e5                	mov    ebp,esp
c0023dec:	53                   	push   ebx
c0023ded:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023df0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023df3:	89 d3                	mov    ebx,edx
c0023df5:	c1 fb 14             	sar    ebx,0x14
c0023df8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0023dfe:	31 c0                	xor    eax,eax
c0023e00:	83 fb 1f             	cmp    ebx,0x1f
c0023e03:	77 1d                	ja     c0023e22 <__fixunsdfsi+0x39>
c0023e05:	89 d0                	mov    eax,edx
c0023e07:	c1 e0 0b             	shl    eax,0xb
c0023e0a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023e0f:	c1 e9 15             	shr    ecx,0x15
c0023e12:	09 c8                	or     eax,ecx
c0023e14:	0d 00 00 00 80       	or     eax,0x80000000
c0023e19:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023e1e:	29 d9                	sub    ecx,ebx
c0023e20:	d3 e8                	shr    eax,cl
c0023e22:	5b                   	pop    ebx
c0023e23:	5d                   	pop    ebp
c0023e24:	c3                   	ret    

c0023e25 <__cmpdf2>:
c0023e25:	55                   	push   ebp
c0023e26:	89 e5                	mov    ebp,esp
c0023e28:	57                   	push   edi
c0023e29:	56                   	push   esi
c0023e2a:	53                   	push   ebx
c0023e2b:	83 ec 0c             	sub    esp,0xc
c0023e2e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0023e31:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023e34:	89 ca                	mov    edx,ecx
c0023e36:	c1 ea 14             	shr    edx,0x14
c0023e39:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0023e3f:	89 cb                	mov    ebx,ecx
c0023e41:	c1 fb 1f             	sar    ebx,0x1f
c0023e44:	31 da                	xor    edx,ebx
c0023e46:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023e49:	89 df                	mov    edi,ebx
c0023e4b:	c1 e7 0b             	shl    edi,0xb
c0023e4e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023e51:	c1 e1 0b             	shl    ecx,0xb
c0023e54:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0023e5a:	c1 eb 15             	shr    ebx,0x15
c0023e5d:	09 d9                	or     ecx,ebx
c0023e5f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0023e62:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0023e65:	89 ce                	mov    esi,ecx
c0023e67:	c1 ee 14             	shr    esi,0x14
c0023e6a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023e70:	89 cb                	mov    ebx,ecx
c0023e72:	c1 fb 1f             	sar    ebx,0x1f
c0023e75:	31 de                	xor    esi,ebx
c0023e77:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0023e7a:	89 df                	mov    edi,ebx
c0023e7c:	c1 e7 0b             	shl    edi,0xb
c0023e7f:	c1 e1 0b             	shl    ecx,0xb
c0023e82:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0023e88:	c1 eb 15             	shr    ebx,0x15
c0023e8b:	09 d9                	or     ecx,ebx
c0023e8d:	89 d3                	mov    ebx,edx
c0023e8f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0023e95:	43                   	inc    ebx
c0023e96:	83 fb 01             	cmp    ebx,0x1
c0023e99:	77 08                	ja     c0023ea3 <__cmpdf2+0x7e>
c0023e9b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0023e9e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0023ea1:	75 68                	jne    c0023f0b <__cmpdf2+0xe6>
c0023ea3:	89 f3                	mov    ebx,esi
c0023ea5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0023eab:	43                   	inc    ebx
c0023eac:	83 fb 01             	cmp    ebx,0x1
c0023eaf:	77 06                	ja     c0023eb7 <__cmpdf2+0x92>
c0023eb1:	89 fb                	mov    ebx,edi
c0023eb3:	09 cb                	or     ebx,ecx
c0023eb5:	75 54                	jne    c0023f0b <__cmpdf2+0xe6>
c0023eb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023eba:	09 f8                	or     eax,edi
c0023ebc:	09 c8                	or     eax,ecx
c0023ebe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0023ec1:	75 12                	jne    c0023ed5 <__cmpdf2+0xb0>
c0023ec3:	8d 42 01             	lea    eax,[edx+0x1]
c0023ec6:	83 f8 01             	cmp    eax,0x1
c0023ec9:	77 0a                	ja     c0023ed5 <__cmpdf2+0xb0>
c0023ecb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0023ece:	31 c0                	xor    eax,eax
c0023ed0:	83 fb 01             	cmp    ebx,0x1
c0023ed3:	76 36                	jbe    c0023f0b <__cmpdf2+0xe6>
c0023ed5:	b8 01 00 00 00       	mov    eax,0x1
c0023eda:	39 f2                	cmp    edx,esi
c0023edc:	7f 2d                	jg     c0023f0b <__cmpdf2+0xe6>
c0023ede:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023ee3:	7c 26                	jl     c0023f0b <__cmpdf2+0xe6>
c0023ee5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0023ee8:	77 07                	ja     c0023ef1 <__cmpdf2+0xcc>
c0023eea:	72 16                	jb     c0023f02 <__cmpdf2+0xdd>
c0023eec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0023eef:	76 0a                	jbe    c0023efb <__cmpdf2+0xd6>
c0023ef1:	89 d0                	mov    eax,edx
c0023ef3:	c1 f8 1f             	sar    eax,0x1f
c0023ef6:	83 c8 01             	or     eax,0x1
c0023ef9:	eb 10                	jmp    c0023f0b <__cmpdf2+0xe6>
c0023efb:	b8 00 00 00 00       	mov    eax,0x0
c0023f00:	73 09                	jae    c0023f0b <__cmpdf2+0xe6>
c0023f02:	89 d0                	mov    eax,edx
c0023f04:	c1 f8 1f             	sar    eax,0x1f
c0023f07:	83 e0 02             	and    eax,0x2
c0023f0a:	48                   	dec    eax
c0023f0b:	83 c4 0c             	add    esp,0xc
c0023f0e:	5b                   	pop    ebx
c0023f0f:	5e                   	pop    esi
c0023f10:	5f                   	pop    edi
c0023f11:	5d                   	pop    ebp
c0023f12:	c3                   	ret    

c0023f13 <__eqdf2>:
c0023f13:	55                   	push   ebp
c0023f14:	89 e5                	mov    ebp,esp
c0023f16:	50                   	push   eax
c0023f17:	6a 01                	push   0x1
c0023f19:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023f1c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023f1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023f22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f25:	e8 fb fe ff ff       	call   c0023e25 <__cmpdf2>
c0023f2a:	83 c4 18             	add    esp,0x18
c0023f2d:	c9                   	leave  
c0023f2e:	c3                   	ret    

c0023f2f <__nedf2>:
c0023f2f:	eb e2                	jmp    c0023f13 <__eqdf2>

c0023f31 <__gtdf2>:
c0023f31:	55                   	push   ebp
c0023f32:	89 e5                	mov    ebp,esp
c0023f34:	50                   	push   eax
c0023f35:	6a ff                	push   0xffffffff
c0023f37:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023f3a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023f3d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023f40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f43:	e8 dd fe ff ff       	call   c0023e25 <__cmpdf2>
c0023f48:	83 c4 18             	add    esp,0x18
c0023f4b:	c9                   	leave  
c0023f4c:	c3                   	ret    

c0023f4d <__gedf2>:
c0023f4d:	eb e2                	jmp    c0023f31 <__gtdf2>

c0023f4f <__ltdf2>:
c0023f4f:	eb c2                	jmp    c0023f13 <__eqdf2>

c0023f51 <__ledf2>:
c0023f51:	eb c0                	jmp    c0023f13 <__eqdf2>

c0023f53 <__truncdfsf2>:
c0023f53:	55                   	push   ebp
c0023f54:	89 e5                	mov    ebp,esp
c0023f56:	57                   	push   edi
c0023f57:	56                   	push   esi
c0023f58:	53                   	push   ebx
c0023f59:	83 ec 0c             	sub    esp,0xc
c0023f5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023f5f:	89 d1                	mov    ecx,edx
c0023f61:	c1 f9 14             	sar    ecx,0x14
c0023f64:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023f67:	89 df                	mov    edi,ebx
c0023f69:	c1 e7 0b             	shl    edi,0xb
c0023f6c:	89 d0                	mov    eax,edx
c0023f6e:	c1 e0 0b             	shl    eax,0xb
c0023f71:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023f76:	c1 eb 15             	shr    ebx,0x15
c0023f79:	09 d8                	or     eax,ebx
c0023f7b:	89 cb                	mov    ebx,ecx
c0023f7d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0023f83:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0023f89:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0023f8f:	0f 86 9e 00 00 00    	jbe    c0024033 <__truncdfsf2+0xe0>
c0023f95:	85 db                	test   ebx,ebx
c0023f97:	75 0a                	jne    c0023fa3 <__truncdfsf2+0x50>
c0023f99:	c1 fa 17             	sar    edx,0x17
c0023f9c:	30 d2                	xor    dl,dl
c0023f9e:	e9 84 00 00 00       	jmp    c0024027 <__truncdfsf2+0xd4>
c0023fa3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0023fa9:	83 fe 83             	cmp    esi,0xffffff83
c0023fac:	7d 4b                	jge    c0023ff9 <__truncdfsf2+0xa6>
c0023fae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0023fb3:	29 f1                	sub    ecx,esi
c0023fb5:	83 f9 1f             	cmp    ecx,0x1f
c0023fb8:	7f 6b                	jg     c0024025 <__truncdfsf2+0xd2>
c0023fba:	0d 00 00 00 80       	or     eax,0x80000000
c0023fbf:	89 c3                	mov    ebx,eax
c0023fc1:	d3 eb                	shr    ebx,cl
c0023fc3:	be 01 00 00 00       	mov    esi,0x1
c0023fc8:	d3 e6                	shl    esi,cl
c0023fca:	4e                   	dec    esi
c0023fcb:	21 f0                	and    eax,esi
c0023fcd:	09 f8                	or     eax,edi
c0023fcf:	0f 95 c0             	setne  al
c0023fd2:	0f b6 c0             	movzx  eax,al
c0023fd5:	09 c3                	or     ebx,eax
c0023fd7:	89 d9                	mov    ecx,ebx
c0023fd9:	c1 e9 08             	shr    ecx,0x8
c0023fdc:	f6 c3 7f             	test   bl,0x7f
c0023fdf:	0f 95 c0             	setne  al
c0023fe2:	09 c8                	or     eax,ecx
c0023fe4:	83 e0 01             	and    eax,0x1
c0023fe7:	c1 eb 07             	shr    ebx,0x7
c0023fea:	21 c3                	and    ebx,eax
c0023fec:	81 e2 00 00 00 80    	and    edx,0x80000000
c0023ff2:	09 d1                	or     ecx,edx
c0023ff4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0023ff7:	eb 76                	jmp    c002406f <__truncdfsf2+0x11c>
c0023ff9:	83 c6 80             	add    esi,0xffffff80
c0023ffc:	7e 1d                	jle    c002401b <__truncdfsf2+0xc8>
c0023ffe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024004:	75 0b                	jne    c0024011 <__truncdfsf2+0xbe>
c0024006:	09 f8                	or     eax,edi
c0024008:	74 09                	je     c0024013 <__truncdfsf2+0xc0>
c002400a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002400f:	eb 02                	jmp    c0024013 <__truncdfsf2+0xc0>
c0024011:	31 c0                	xor    eax,eax
c0024013:	c1 fa 17             	sar    edx,0x17
c0024016:	80 ca ff             	or     dl,0xff
c0024019:	eb 0e                	jmp    c0024029 <__truncdfsf2+0xd6>
c002401b:	c1 fa 1f             	sar    edx,0x1f
c002401e:	c1 e2 08             	shl    edx,0x8
c0024021:	09 ca                	or     edx,ecx
c0024023:	eb 04                	jmp    c0024029 <__truncdfsf2+0xd6>
c0024025:	31 d2                	xor    edx,edx
c0024027:	31 c0                	xor    eax,eax
c0024029:	c1 e2 17             	shl    edx,0x17
c002402c:	c1 e8 08             	shr    eax,0x8
c002402f:	09 d0                	or     eax,edx
c0024031:	eb 3c                	jmp    c002406f <__truncdfsf2+0x11c>
c0024033:	81 e9 80 03 00 00    	sub    ecx,0x380
c0024039:	89 ca                	mov    edx,ecx
c002403b:	c1 fa 0b             	sar    edx,0xb
c002403e:	c1 e2 08             	shl    edx,0x8
c0024041:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024044:	31 db                	xor    ebx,ebx
c0024046:	85 ff                	test   edi,edi
c0024048:	0f 95 c3             	setne  bl
c002404b:	09 d8                	or     eax,ebx
c002404d:	89 c3                	mov    ebx,eax
c002404f:	c1 eb 08             	shr    ebx,0x8
c0024052:	a8 7f                	test   al,0x7f
c0024054:	0f 95 c2             	setne  dl
c0024057:	89 d6                	mov    esi,edx
c0024059:	09 de                	or     esi,ebx
c002405b:	83 e6 01             	and    esi,0x1
c002405e:	c1 e8 07             	shr    eax,0x7
c0024061:	21 f0                	and    eax,esi
c0024063:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024066:	09 ca                	or     edx,ecx
c0024068:	c1 e2 17             	shl    edx,0x17
c002406b:	09 da                	or     edx,ebx
c002406d:	01 d0                	add    eax,edx
c002406f:	83 c4 0c             	add    esp,0xc
c0024072:	5b                   	pop    ebx
c0024073:	5e                   	pop    esi
c0024074:	5f                   	pop    edi
c0024075:	5d                   	pop    ebp
c0024076:	c3                   	ret    

c0024077 <__extendsfdf2>:
c0024077:	55                   	push   ebp
c0024078:	89 e5                	mov    ebp,esp
c002407a:	57                   	push   edi
c002407b:	56                   	push   esi
c002407c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002407f:	89 d1                	mov    ecx,edx
c0024081:	c1 f9 17             	sar    ecx,0x17
c0024084:	c1 e2 08             	shl    edx,0x8
c0024087:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002408d:	89 c8                	mov    eax,ecx
c002408f:	80 e4 f8             	and    ah,0xf8
c0024092:	8d 71 01             	lea    esi,[ecx+0x1]
c0024095:	81 e6 fe 00 00 00    	and    esi,0xfe
c002409b:	75 27                	jne    c00240c4 <__extendsfdf2+0x4d>
c002409d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00240a3:	75 18                	jne    c00240bd <__extendsfdf2+0x46>
c00240a5:	85 d2                	test   edx,edx
c00240a7:	74 20                	je     c00240c9 <__extendsfdf2+0x52>
c00240a9:	41                   	inc    ecx
c00240aa:	01 d2                	add    edx,edx
c00240ac:	79 fb                	jns    c00240a9 <__extendsfdf2+0x32>
c00240ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00240b4:	29 c8                	sub    eax,ecx
c00240b6:	05 81 03 00 00       	add    eax,0x381
c00240bb:	eb 0c                	jmp    c00240c9 <__extendsfdf2+0x52>
c00240bd:	05 00 07 00 00       	add    eax,0x700
c00240c2:	eb 05                	jmp    c00240c9 <__extendsfdf2+0x52>
c00240c4:	05 80 03 00 00       	add    eax,0x380
c00240c9:	c1 e0 14             	shl    eax,0x14
c00240cc:	89 c1                	mov    ecx,eax
c00240ce:	89 d0                	mov    eax,edx
c00240d0:	c1 e8 0b             	shr    eax,0xb
c00240d3:	09 c1                	or     ecx,eax
c00240d5:	c1 e2 15             	shl    edx,0x15
c00240d8:	89 d0                	mov    eax,edx
c00240da:	89 ca                	mov    edx,ecx
c00240dc:	5e                   	pop    esi
c00240dd:	5f                   	pop    edi
c00240de:	5d                   	pop    ebp
c00240df:	c3                   	ret    

c00240e0 <fabs>:
c00240e0:	83 ec 0c             	sub    esp,0xc
c00240e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00240ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00240f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240f7:	dd 04 24             	fld    QWORD PTR [esp]
c00240fa:	83 c4 0c             	add    esp,0xc
c00240fd:	c3                   	ret    
c00240fe:	66 90                	xchg   ax,ax

c0024100 <lrint>:
c0024100:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024104:	83 ec 04             	sub    esp,0x4
c0024107:	db 1c 24             	fistp  DWORD PTR [esp]
c002410a:	58                   	pop    eax
c002410b:	c3                   	ret    

c002410c <lrintf>:
c002410c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0024110:	83 ec 04             	sub    esp,0x4
c0024113:	db 1c 24             	fistp  DWORD PTR [esp]
c0024116:	58                   	pop    eax
c0024117:	c3                   	ret    

Disassembly of section .init:

c0024118 <_init>:
c0024118:	55                   	push   ebp
c0024119:	89 e5                	mov    ebp,esp
c002411b:	e8 f8 bf fd ff       	call   c0000118 <frame_dummy>
c0024120:	e8 63 e0 ff ff       	call   c0022188 <__do_global_ctors_aux>
c0024125:	5d                   	pop    ebp
c0024126:	c3                   	ret    

Disassembly of section .fini:

c0024127 <_fini>:
c0024127:	55                   	push   ebp
c0024128:	89 e5                	mov    ebp,esp
c002412a:	e8 79 bf fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002412f:	5d                   	pop    ebp
c0024130:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0024132 <Computer::~Computer()>:
c0024132:	83 ec 0c             	sub    esp,0xc
c0024135:	ba f0 5b 02 c0       	mov    edx,0xc0025bf0
c002413a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002413e:	89 10                	mov    DWORD PTR [eax],edx
c0024140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024144:	83 ec 0c             	sub    esp,0xc
c0024147:	50                   	push   eax
c0024148:	e8 b1 f3 fe ff       	call   c00134fe <Device::~Device()>
c002414d:	83 c4 10             	add    esp,0x10
c0024150:	90                   	nop
c0024151:	83 c4 0c             	add    esp,0xc
c0024154:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0024156 <Computer::~Computer()>:
c0024156:	83 ec 0c             	sub    esp,0xc
c0024159:	83 ec 0c             	sub    esp,0xc
c002415c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024160:	e8 cd ff ff ff       	call   c0024132 <Computer::~Computer()>
c0024165:	83 c4 10             	add    esp,0x10
c0024168:	83 ec 08             	sub    esp,0x8
c002416b:	68 ec 01 00 00       	push   0x1ec
c0024170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024174:	e8 f8 df fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024179:	83 c4 10             	add    esp,0x10
c002417c:	83 c4 0c             	add    esp,0xc
c002417f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0024180 <idleCommon()>:
c0024180:	83 ec 0c             	sub    esp,0xc
c0024183:	e8 da 77 ff ff       	call   c001b962 <lockScheduler()>
c0024188:	e8 09 7b ff ff       	call   c001bc96 <schedule()>
c002418d:	83 c4 0c             	add    esp,0xc
c0024190:	e9 cf 77 ff ff       	jmp    c001b964 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0024195 <CPU::readCR3()>:
c0024195:	83 ec 10             	sub    esp,0x10
c0024198:	0f 20 d8             	mov    eax,cr3
c002419b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002419f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00241a3:	83 c4 10             	add    esp,0x10
c00241a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c00241a7 <CPU::writeCR3(unsigned long)>:
c00241a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00241ab:	0f 22 d8             	mov    cr3,eax
c00241ae:	90                   	nop
c00241af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00241b0 <LinkedList<UnixFile>::~LinkedList()>:
c00241b0:	90                   	nop
c00241b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00241b2 <LinkedList<UnixFile>::LinkedList()>:
c00241b2:	83 ec 0c             	sub    esp,0xc
c00241b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00241bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00241ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00241d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00241df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00241ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00241f5:	83 ec 0c             	sub    esp,0xc
c00241f8:	68 66 5e 02 c0       	push   0xc0025e66
c00241fd:	e8 4f e0 fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0024202:	83 c4 10             	add    esp,0x10
c0024205:	90                   	nop
c0024206:	83 c4 0c             	add    esp,0xc
c0024209:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002420a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002420a:	83 ec 0c             	sub    esp,0xc
c002420d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0024212:	75 10                	jne    c0024224 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0024214:	83 ec 0c             	sub    esp,0xc
c0024217:	68 80 5e 02 c0       	push   0xc0025e80
c002421c:	e8 ed 47 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0024221:	83 c4 10             	add    esp,0x10
c0024224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024228:	8b 00                	mov    eax,DWORD PTR [eax]
c002422a:	85 c0                	test   eax,eax
c002422c:	74 34                	je     c0024262 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002422e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024232:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024235:	85 c0                	test   eax,eax
c0024237:	74 29                	je     c0024262 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0024239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002423d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024240:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024244:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0024247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002424b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002424f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0024252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024259:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0024260:	eb 65                	jmp    c00242c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0024262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024266:	8b 00                	mov    eax,DWORD PTR [eax]
c0024268:	85 c0                	test   eax,eax
c002426a:	75 4b                	jne    c00242b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002426c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024270:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024273:	85 c0                	test   eax,eax
c0024275:	75 40                	jne    c00242b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0024277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002427b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002427f:	89 10                	mov    DWORD PTR [eax],edx
c0024281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024285:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024289:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002428c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024290:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024293:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002429a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002429e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00242a1:	85 c0                	test   eax,eax
c00242a3:	74 22                	je     c00242c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00242a5:	83 ec 0c             	sub    esp,0xc
c00242a8:	68 a2 5e 02 c0       	push   0xc0025ea2
c00242ad:	e8 5c 47 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c00242b2:	83 c4 10             	add    esp,0x10
c00242b5:	eb 10                	jmp    c00242c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00242b7:	83 ec 0c             	sub    esp,0xc
c00242ba:	68 ac 5e 02 c0       	push   0xc0025eac
c00242bf:	e8 4a 47 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c00242c4:	83 c4 10             	add    esp,0x10
c00242c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00242ce:	8d 50 01             	lea    edx,[eax+0x1]
c00242d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00242d8:	90                   	nop
c00242d9:	83 c4 0c             	add    esp,0xc
c00242dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00242de <LinkedList<UnixFile>::getFirstElement()>:
c00242de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00242e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00242e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00242e6 <LinkedList<UnixFile>::removeFirst()>:
c00242e6:	83 ec 0c             	sub    esp,0xc
c00242e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00242ef:	85 c0                	test   eax,eax
c00242f1:	75 12                	jne    c0024305 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00242f3:	83 ec 0c             	sub    esp,0xc
c00242f6:	68 b8 5e 02 c0       	push   0xc0025eb8
c00242fb:	e8 0e 47 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0024300:	83 c4 10             	add    esp,0x10
c0024303:	eb 7e                	jmp    c0024383 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0024305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024309:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002430c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002430f:	85 c0                	test   eax,eax
c0024311:	74 10                	je     c0024323 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0024313:	83 ec 0c             	sub    esp,0xc
c0024316:	68 03 5f 02 c0       	push   0xc0025f03
c002431b:	e8 ee 46 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0024320:	83 c4 10             	add    esp,0x10
c0024323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024327:	8b 00                	mov    eax,DWORD PTR [eax]
c0024329:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002432c:	85 c0                	test   eax,eax
c002432e:	75 33                	jne    c0024363 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0024330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024334:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002433a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002433e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0024345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024349:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002434c:	83 f8 01             	cmp    eax,0x1
c002434f:	74 21                	je     c0024372 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0024351:	83 ec 0c             	sub    esp,0xc
c0024354:	68 dc 5e 02 c0       	push   0xc0025edc
c0024359:	e8 b0 46 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c002435e:	83 c4 10             	add    esp,0x10
c0024361:	eb 0f                	jmp    c0024372 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0024363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024367:	8b 00                	mov    eax,DWORD PTR [eax]
c0024369:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002436c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024370:	89 10                	mov    DWORD PTR [eax],edx
c0024372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024376:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0024379:	8d 50 ff             	lea    edx,[eax-0x1]
c002437c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024380:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0024383:	83 c4 0c             	add    esp,0xc
c0024386:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0024388 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0024388:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002438c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002438f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0024390 <DriverlessDevice::~DriverlessDevice()>:
c0024390:	ba 84 65 02 c0       	mov    edx,0xc0026584
c0024395:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024399:	89 10                	mov    DWORD PTR [eax],edx
c002439b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002439f:	50                   	push   eax
c00243a0:	e8 59 f1 fe ff       	call   c00134fe <Device::~Device()>
c00243a5:	83 c4 04             	add    esp,0x4
c00243a8:	90                   	nop
c00243a9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00243aa <DriverlessDevice::~DriverlessDevice()>:
c00243aa:	83 ec 0c             	sub    esp,0xc
c00243ad:	83 ec 0c             	sub    esp,0xc
c00243b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00243b4:	e8 d7 ff ff ff       	call   c0024390 <DriverlessDevice::~DriverlessDevice()>
c00243b9:	83 c4 10             	add    esp,0x10
c00243bc:	83 ec 08             	sub    esp,0x8
c00243bf:	68 58 01 00 00       	push   0x158
c00243c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00243c8:	e8 a4 dd fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00243cd:	83 c4 10             	add    esp,0x10
c00243d0:	83 c4 0c             	add    esp,0xc
c00243d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00243d4 <LinkedList<Device>::addElement(Device*)>:
c00243d4:	83 ec 0c             	sub    esp,0xc
c00243d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00243dc:	75 10                	jne    c00243ee <LinkedList<Device>::addElement(Device*)+0x1a>
c00243de:	83 ec 0c             	sub    esp,0xc
c00243e1:	68 80 5e 02 c0       	push   0xc0025e80
c00243e6:	e8 23 46 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c00243eb:	83 c4 10             	add    esp,0x10
c00243ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00243f4:	85 c0                	test   eax,eax
c00243f6:	74 3a                	je     c0024432 <LinkedList<Device>::addElement(Device*)+0x5e>
c00243f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00243ff:	85 c0                	test   eax,eax
c0024401:	74 2f                	je     c0024432 <LinkedList<Device>::addElement(Device*)+0x5e>
c0024403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024407:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002440a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002440e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0024414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024418:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002441c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002441f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024426:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0024430:	eb 68                	jmp    c002449a <LinkedList<Device>::addElement(Device*)+0xc6>
c0024432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024436:	8b 00                	mov    eax,DWORD PTR [eax]
c0024438:	85 c0                	test   eax,eax
c002443a:	75 4e                	jne    c002448a <LinkedList<Device>::addElement(Device*)+0xb6>
c002443c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024440:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024443:	85 c0                	test   eax,eax
c0024445:	75 43                	jne    c002448a <LinkedList<Device>::addElement(Device*)+0xb6>
c0024447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002444b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002444f:	89 10                	mov    DWORD PTR [eax],edx
c0024451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024455:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024459:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002445c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024463:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002446d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024471:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0024474:	85 c0                	test   eax,eax
c0024476:	74 22                	je     c002449a <LinkedList<Device>::addElement(Device*)+0xc6>
c0024478:	83 ec 0c             	sub    esp,0xc
c002447b:	68 a2 5e 02 c0       	push   0xc0025ea2
c0024480:	e8 89 45 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0024485:	83 c4 10             	add    esp,0x10
c0024488:	eb 10                	jmp    c002449a <LinkedList<Device>::addElement(Device*)+0xc6>
c002448a:	83 ec 0c             	sub    esp,0xc
c002448d:	68 ac 5e 02 c0       	push   0xc0025eac
c0024492:	e8 77 45 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0024497:	83 c4 10             	add    esp,0x10
c002449a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002449e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00244a1:	8d 50 01             	lea    edx,[eax+0x1]
c00244a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00244ab:	90                   	nop
c00244ac:	83 c4 0c             	add    esp,0xc
c00244af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00244b0 <LinkedList<Device>::LinkedList()>:
c00244b0:	83 ec 0c             	sub    esp,0xc
c00244b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00244bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00244c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00244d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00244dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00244e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00244f3:	83 ec 0c             	sub    esp,0xc
c00244f6:	68 66 5e 02 c0       	push   0xc0025e66
c00244fb:	e8 51 dd fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0024500:	83 c4 10             	add    esp,0x10
c0024503:	90                   	nop
c0024504:	83 c4 0c             	add    esp,0xc
c0024507:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c0024508 <CPU::readCR0()>:
c0024508:	83 ec 10             	sub    esp,0x10
c002450b:	0f 20 c0             	mov    eax,cr0
c002450e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024516:	83 c4 10             	add    esp,0x10
c0024519:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c002451a <CPU::writeCR0(unsigned long)>:
c002451a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002451e:	0f 22 c0             	mov    cr0,eax
c0024521:	90                   	nop
c0024522:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0024523 <CPU::readDR0()>:
c0024523:	83 ec 10             	sub    esp,0x10
c0024526:	0f 21 c0             	mov    eax,db0
c0024529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002452d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024531:	83 c4 10             	add    esp,0x10
c0024534:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0024535 <CPU::readDR1()>:
c0024535:	83 ec 10             	sub    esp,0x10
c0024538:	0f 21 c8             	mov    eax,db1
c002453b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002453f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024543:	83 c4 10             	add    esp,0x10
c0024546:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0024547 <CPU::readDR2()>:
c0024547:	83 ec 10             	sub    esp,0x10
c002454a:	0f 21 d0             	mov    eax,db2
c002454d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024555:	83 c4 10             	add    esp,0x10
c0024558:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0024559 <CPU::readDR3()>:
c0024559:	83 ec 10             	sub    esp,0x10
c002455c:	0f 21 d8             	mov    eax,db3
c002455f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024563:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024567:	83 c4 10             	add    esp,0x10
c002456a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c002456b <CPU::readDR6()>:
c002456b:	83 ec 10             	sub    esp,0x10
c002456e:	0f 21 f0             	mov    eax,db6
c0024571:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024575:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024579:	83 c4 10             	add    esp,0x10
c002457c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c002457d <CPU::readDR7()>:
c002457d:	83 ec 10             	sub    esp,0x10
c0024580:	0f 21 f8             	mov    eax,db7
c0024583:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024587:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002458b:	83 c4 10             	add    esp,0x10
c002458e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0024590 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0024590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024594:	8b 00                	mov    eax,DWORD PTR [eax]
c0024596:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0024598 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0024598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002459c:	8b 00                	mov    eax,DWORD PTR [eax]
c002459e:	85 c0                	test   eax,eax
c00245a0:	75 0e                	jne    c00245b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00245a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00245a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00245a9:	85 c0                	test   eax,eax
c00245ab:	75 03                	jne    c00245b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00245ad:	b0 01                	mov    al,0x1
c00245af:	c3                   	ret    
c00245b0:	b0 00                	mov    al,0x0
c00245b2:	90                   	nop
c00245b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00245b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00245b4:	83 ec 0c             	sub    esp,0xc
c00245b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00245bd:	85 c0                	test   eax,eax
c00245bf:	75 15                	jne    c00245d6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00245c1:	83 ec 0c             	sub    esp,0xc
c00245c4:	68 b8 5e 02 c0       	push   0xc0025eb8
c00245c9:	e8 40 44 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c00245ce:	83 c4 10             	add    esp,0x10
c00245d1:	e9 88 00 00 00       	jmp    c002465e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00245d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00245dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00245e0:	85 c0                	test   eax,eax
c00245e2:	0f 95 c0             	setne  al
c00245e5:	84 c0                	test   al,al
c00245e7:	74 10                	je     c00245f9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00245e9:	83 ec 0c             	sub    esp,0xc
c00245ec:	68 03 5f 02 c0       	push   0xc0025f03
c00245f1:	e8 18 44 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c00245f6:	83 c4 10             	add    esp,0x10
c00245f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00245ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0024602:	85 c0                	test   eax,eax
c0024604:	0f 94 c0             	sete   al
c0024607:	84 c0                	test   al,al
c0024609:	74 33                	je     c002463e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c002460b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002460f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0024615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024619:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0024620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024624:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0024627:	83 f8 01             	cmp    eax,0x1
c002462a:	74 21                	je     c002464d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002462c:	83 ec 0c             	sub    esp,0xc
c002462f:	68 dc 5e 02 c0       	push   0xc0025edc
c0024634:	e8 d5 43 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0024639:	83 c4 10             	add    esp,0x10
c002463c:	eb 0f                	jmp    c002464d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002463e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024642:	8b 00                	mov    eax,DWORD PTR [eax]
c0024644:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0024647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002464b:	89 10                	mov    DWORD PTR [eax],edx
c002464d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024651:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0024654:	8d 50 ff             	lea    edx,[eax-0x1]
c0024657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002465b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002465e:	83 c4 0c             	add    esp,0xc
c0024661:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0024662 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0024662:	83 ec 0c             	sub    esp,0xc
c0024665:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002466a:	75 10                	jne    c002467c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002466c:	83 ec 0c             	sub    esp,0xc
c002466f:	68 80 5e 02 c0       	push   0xc0025e80
c0024674:	e8 95 43 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c0024679:	83 c4 10             	add    esp,0x10
c002467c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024680:	8b 00                	mov    eax,DWORD PTR [eax]
c0024682:	85 c0                	test   eax,eax
c0024684:	74 34                	je     c00246ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0024686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002468a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002468d:	85 c0                	test   eax,eax
c002468f:	74 29                	je     c00246ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0024691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024695:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0024698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002469c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002469f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00246a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00246aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00246b1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00246b8:	eb 65                	jmp    c002471f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00246ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246be:	8b 00                	mov    eax,DWORD PTR [eax]
c00246c0:	85 c0                	test   eax,eax
c00246c2:	75 4b                	jne    c002470f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00246c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00246cb:	85 c0                	test   eax,eax
c00246cd:	75 40                	jne    c002470f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00246cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00246d7:	89 10                	mov    DWORD PTR [eax],edx
c00246d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00246e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00246e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00246eb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00246f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00246f9:	85 c0                	test   eax,eax
c00246fb:	74 22                	je     c002471f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00246fd:	83 ec 0c             	sub    esp,0xc
c0024700:	68 a2 5e 02 c0       	push   0xc0025ea2
c0024705:	e8 04 43 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c002470a:	83 c4 10             	add    esp,0x10
c002470d:	eb 10                	jmp    c002471f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002470f:	83 ec 0c             	sub    esp,0xc
c0024712:	68 ac 5e 02 c0       	push   0xc0025eac
c0024717:	e8 f2 42 ff ff       	call   c0018a0e <Krnl::panic(char const*)>
c002471c:	83 c4 10             	add    esp,0x10
c002471f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024723:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0024726:	8d 50 01             	lea    edx,[eax+0x1]
c0024729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002472d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0024730:	90                   	nop
c0024731:	83 c4 0c             	add    esp,0xc
c0024734:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0024736 <ACPI::~ACPI()>:
c0024736:	83 ec 0c             	sub    esp,0xc
c0024739:	ba 1c 6d 02 c0       	mov    edx,0xc0026d1c
c002473e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024742:	89 10                	mov    DWORD PTR [eax],edx
c0024744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024748:	83 ec 0c             	sub    esp,0xc
c002474b:	50                   	push   eax
c002474c:	e8 ad ed fe ff       	call   c00134fe <Device::~Device()>
c0024751:	83 c4 10             	add    esp,0x10
c0024754:	90                   	nop
c0024755:	83 c4 0c             	add    esp,0xc
c0024758:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002475a <ACPI::~ACPI()>:
c002475a:	83 ec 0c             	sub    esp,0xc
c002475d:	83 ec 0c             	sub    esp,0xc
c0024760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024764:	e8 cd ff ff ff       	call   c0024736 <ACPI::~ACPI()>
c0024769:	83 c4 10             	add    esp,0x10
c002476c:	83 ec 08             	sub    esp,0x8
c002476f:	68 68 22 00 00       	push   0x2268
c0024774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024778:	e8 f4 d9 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002477d:	83 c4 10             	add    esp,0x10
c0024780:	83 c4 0c             	add    esp,0xc
c0024783:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0024784 <CPU::~CPU()>:
c0024784:	83 ec 0c             	sub    esp,0xc
c0024787:	ba 0c 71 02 c0       	mov    edx,0xc002710c
c002478c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024790:	89 10                	mov    DWORD PTR [eax],edx
c0024792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024796:	83 ec 0c             	sub    esp,0xc
c0024799:	50                   	push   eax
c002479a:	e8 5f ed fe ff       	call   c00134fe <Device::~Device()>
c002479f:	83 c4 10             	add    esp,0x10
c00247a2:	90                   	nop
c00247a3:	83 c4 0c             	add    esp,0xc
c00247a6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00247a8 <CPU::~CPU()>:
c00247a8:	83 ec 0c             	sub    esp,0xc
c00247ab:	83 ec 0c             	sub    esp,0xc
c00247ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00247b2:	e8 cd ff ff ff       	call   c0024784 <CPU::~CPU()>
c00247b7:	83 c4 10             	add    esp,0x10
c00247ba:	83 ec 08             	sub    esp,0x8
c00247bd:	68 98 11 00 00       	push   0x1198
c00247c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00247c6:	e8 a6 d9 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00247cb:	83 c4 10             	add    esp,0x10
c00247ce:	83 c4 0c             	add    esp,0xc
c00247d1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00247d2 <CPU::readCR4()>:
c00247d2:	83 ec 10             	sub    esp,0x10
c00247d5:	0f 20 e0             	mov    eax,cr4
c00247d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00247dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00247e0:	83 c4 10             	add    esp,0x10
c00247e3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c00247e4 <CPU::writeDR7(unsigned long)>:
c00247e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00247e8:	0f 23 f8             	mov    db7,eax
c00247eb:	90                   	nop
c00247ec:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c00247ed <CPU::writeCR4(unsigned long)>:
c00247ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00247f1:	0f 22 e0             	mov    cr4,eax
c00247f4:	90                   	nop
c00247f5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c00247f6 <CPU::readCR2()>:
c00247f6:	83 ec 10             	sub    esp,0x10
c00247f9:	0f 20 d0             	mov    eax,cr2
c00247fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024804:	83 c4 10             	add    esp,0x10
c0024807:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0024808 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0024808:	90                   	nop
c0024809:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002480a <ThreadControlBlock::ThreadControlBlock()>:
c002480a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002480e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0024815:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024819:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0024820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024824:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002482b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002482f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0024836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002483a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002483e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024842:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0024846:	90                   	nop
c0024847:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0024848 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0024848:	83 ec 0c             	sub    esp,0xc
c002484b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002484f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0024855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024859:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0024860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024864:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002486b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002486f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0024875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024879:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0024880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024884:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002488b:	83 ec 0c             	sub    esp,0xc
c002488e:	68 66 5e 02 c0       	push   0xc0025e66
c0024893:	e8 b9 d9 fe ff       	call   c0012251 <Dbg::kprintf(char const*, ...)>
c0024898:	83 c4 10             	add    esp,0x10
c002489b:	90                   	nop
c002489c:	83 c4 0c             	add    esp,0xc
c002489f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00248a0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00248a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00248a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00248a7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00248a8 <PCI::~PCI()>:
c00248a8:	83 ec 0c             	sub    esp,0xc
c00248ab:	ba 7c 7d 02 c0       	mov    edx,0xc0027d7c
c00248b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b4:	89 10                	mov    DWORD PTR [eax],edx
c00248b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ba:	83 ec 0c             	sub    esp,0xc
c00248bd:	50                   	push   eax
c00248be:	e8 4b e6 fe ff       	call   c0012f0e <Bus::~Bus()>
c00248c3:	83 c4 10             	add    esp,0x10
c00248c6:	90                   	nop
c00248c7:	83 c4 0c             	add    esp,0xc
c00248ca:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00248cc <PCI::~PCI()>:
c00248cc:	83 ec 0c             	sub    esp,0xc
c00248cf:	83 ec 0c             	sub    esp,0xc
c00248d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00248d6:	e8 cd ff ff ff       	call   c00248a8 <PCI::~PCI()>
c00248db:	83 c4 10             	add    esp,0x10
c00248de:	83 ec 08             	sub    esp,0x8
c00248e1:	68 58 01 00 00       	push   0x158
c00248e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00248ea:	e8 82 d8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00248ef:	83 c4 10             	add    esp,0x10
c00248f2:	83 c4 0c             	add    esp,0xc
c00248f5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00248f6 <IDE::~IDE()>:
c00248f6:	83 ec 0c             	sub    esp,0xc
c00248f9:	ba e0 7f 02 c0       	mov    edx,0xc0027fe0
c00248fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024902:	89 10                	mov    DWORD PTR [eax],edx
c0024904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024908:	83 ec 0c             	sub    esp,0xc
c002490b:	50                   	push   eax
c002490c:	e8 03 f1 fe ff       	call   c0013a14 <HardDiskController::~HardDiskController()>
c0024911:	83 c4 10             	add    esp,0x10
c0024914:	90                   	nop
c0024915:	83 c4 0c             	add    esp,0xc
c0024918:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002491a <IDE::~IDE()>:
c002491a:	83 ec 0c             	sub    esp,0xc
c002491d:	83 ec 0c             	sub    esp,0xc
c0024920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024924:	e8 cd ff ff ff       	call   c00248f6 <IDE::~IDE()>
c0024929:	83 c4 10             	add    esp,0x10
c002492c:	83 ec 08             	sub    esp,0x8
c002492f:	68 70 02 00 00       	push   0x270
c0024934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024938:	e8 34 d8 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002493d:	83 c4 10             	add    esp,0x10
c0024940:	83 c4 0c             	add    esp,0xc
c0024943:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0024944 <ATA::~ATA()>:
c0024944:	83 ec 0c             	sub    esp,0xc
c0024947:	ba 30 80 02 c0       	mov    edx,0xc0028030
c002494c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024950:	89 10                	mov    DWORD PTR [eax],edx
c0024952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024956:	83 ec 0c             	sub    esp,0xc
c0024959:	50                   	push   eax
c002495a:	e8 93 f1 fe ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c002495f:	83 c4 10             	add    esp,0x10
c0024962:	90                   	nop
c0024963:	83 c4 0c             	add    esp,0xc
c0024966:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0024968 <ATA::~ATA()>:
c0024968:	83 ec 0c             	sub    esp,0xc
c002496b:	83 ec 0c             	sub    esp,0xc
c002496e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024972:	e8 cd ff ff ff       	call   c0024944 <ATA::~ATA()>
c0024977:	83 c4 10             	add    esp,0x10
c002497a:	83 ec 08             	sub    esp,0x8
c002497d:	68 7c 01 00 00       	push   0x17c
c0024982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024986:	e8 e6 d7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c002498b:	83 c4 10             	add    esp,0x10
c002498e:	83 c4 0c             	add    esp,0xc
c0024991:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0024992 <ATAPI::~ATAPI()>:
c0024992:	83 ec 0c             	sub    esp,0xc
c0024995:	ba 9c 80 02 c0       	mov    edx,0xc002809c
c002499a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002499e:	89 10                	mov    DWORD PTR [eax],edx
c00249a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249a4:	83 ec 0c             	sub    esp,0xc
c00249a7:	50                   	push   eax
c00249a8:	e8 45 f1 fe ff       	call   c0013af2 <PhysicalDisk::~PhysicalDisk()>
c00249ad:	83 c4 10             	add    esp,0x10
c00249b0:	90                   	nop
c00249b1:	83 c4 0c             	add    esp,0xc
c00249b4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00249b6 <ATAPI::~ATAPI()>:
c00249b6:	83 ec 0c             	sub    esp,0xc
c00249b9:	83 ec 0c             	sub    esp,0xc
c00249bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00249c0:	e8 cd ff ff ff       	call   c0024992 <ATAPI::~ATAPI()>
c00249c5:	83 c4 10             	add    esp,0x10
c00249c8:	83 ec 08             	sub    esp,0x8
c00249cb:	68 80 01 00 00       	push   0x180
c00249d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00249d4:	e8 98 d7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c00249d9:	83 c4 10             	add    esp,0x10
c00249dc:	83 c4 0c             	add    esp,0xc
c00249df:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00249e0 <AVX::~AVX()>:
c00249e0:	83 ec 0c             	sub    esp,0xc
c00249e3:	ba d8 80 02 c0       	mov    edx,0xc00280d8
c00249e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249ec:	89 10                	mov    DWORD PTR [eax],edx
c00249ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249f2:	83 ec 0c             	sub    esp,0xc
c00249f5:	50                   	push   eax
c00249f6:	e8 7b f1 fe ff       	call   c0013b76 <FPU::~FPU()>
c00249fb:	83 c4 10             	add    esp,0x10
c00249fe:	90                   	nop
c00249ff:	83 c4 0c             	add    esp,0xc
c0024a02:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0024a04 <AVX::~AVX()>:
c0024a04:	83 ec 0c             	sub    esp,0xc
c0024a07:	83 ec 0c             	sub    esp,0xc
c0024a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024a0e:	e8 cd ff ff ff       	call   c00249e0 <AVX::~AVX()>
c0024a13:	83 c4 10             	add    esp,0x10
c0024a16:	83 ec 08             	sub    esp,0x8
c0024a19:	68 58 01 00 00       	push   0x158
c0024a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024a22:	e8 4a d7 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024a27:	83 c4 10             	add    esp,0x10
c0024a2a:	83 c4 0c             	add    esp,0xc
c0024a2d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0024a2e <MMX::~MMX()>:
c0024a2e:	83 ec 0c             	sub    esp,0xc
c0024a31:	ba 18 81 02 c0       	mov    edx,0xc0028118
c0024a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a3a:	89 10                	mov    DWORD PTR [eax],edx
c0024a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a40:	83 ec 0c             	sub    esp,0xc
c0024a43:	50                   	push   eax
c0024a44:	e8 2d f1 fe ff       	call   c0013b76 <FPU::~FPU()>
c0024a49:	83 c4 10             	add    esp,0x10
c0024a4c:	90                   	nop
c0024a4d:	83 c4 0c             	add    esp,0xc
c0024a50:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0024a52 <MMX::~MMX()>:
c0024a52:	83 ec 0c             	sub    esp,0xc
c0024a55:	83 ec 0c             	sub    esp,0xc
c0024a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024a5c:	e8 cd ff ff ff       	call   c0024a2e <MMX::~MMX()>
c0024a61:	83 c4 10             	add    esp,0x10
c0024a64:	83 ec 08             	sub    esp,0x8
c0024a67:	68 58 01 00 00       	push   0x158
c0024a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024a70:	e8 fc d6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024a75:	83 c4 10             	add    esp,0x10
c0024a78:	83 c4 0c             	add    esp,0xc
c0024a7b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0024a7c <SSE::~SSE()>:
c0024a7c:	83 ec 0c             	sub    esp,0xc
c0024a7f:	ba 58 81 02 c0       	mov    edx,0xc0028158
c0024a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a88:	89 10                	mov    DWORD PTR [eax],edx
c0024a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a8e:	83 ec 0c             	sub    esp,0xc
c0024a91:	50                   	push   eax
c0024a92:	e8 df f0 fe ff       	call   c0013b76 <FPU::~FPU()>
c0024a97:	83 c4 10             	add    esp,0x10
c0024a9a:	90                   	nop
c0024a9b:	83 c4 0c             	add    esp,0xc
c0024a9e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0024aa0 <SSE::~SSE()>:
c0024aa0:	83 ec 0c             	sub    esp,0xc
c0024aa3:	83 ec 0c             	sub    esp,0xc
c0024aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024aaa:	e8 cd ff ff ff       	call   c0024a7c <SSE::~SSE()>
c0024aaf:	83 c4 10             	add    esp,0x10
c0024ab2:	83 ec 08             	sub    esp,0x8
c0024ab5:	68 58 01 00 00       	push   0x158
c0024aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024abe:	e8 ae d6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024ac3:	83 c4 10             	add    esp,0x10
c0024ac6:	83 c4 0c             	add    esp,0xc
c0024ac9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0024aca <x87::~x87()>:
c0024aca:	83 ec 0c             	sub    esp,0xc
c0024acd:	ba 98 81 02 c0       	mov    edx,0xc0028198
c0024ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ad6:	89 10                	mov    DWORD PTR [eax],edx
c0024ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024adc:	83 ec 0c             	sub    esp,0xc
c0024adf:	50                   	push   eax
c0024ae0:	e8 91 f0 fe ff       	call   c0013b76 <FPU::~FPU()>
c0024ae5:	83 c4 10             	add    esp,0x10
c0024ae8:	90                   	nop
c0024ae9:	83 c4 0c             	add    esp,0xc
c0024aec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0024aee <x87::~x87()>:
c0024aee:	83 ec 0c             	sub    esp,0xc
c0024af1:	83 ec 0c             	sub    esp,0xc
c0024af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024af8:	e8 cd ff ff ff       	call   c0024aca <x87::~x87()>
c0024afd:	83 c4 10             	add    esp,0x10
c0024b00:	83 ec 08             	sub    esp,0x8
c0024b03:	68 58 01 00 00       	push   0x158
c0024b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024b0c:	e8 60 d6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024b11:	83 c4 10             	add    esp,0x10
c0024b14:	83 c4 0c             	add    esp,0xc
c0024b17:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0024b18 <IOAPIC::~IOAPIC()>:
c0024b18:	83 ec 0c             	sub    esp,0xc
c0024b1b:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c0024b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b24:	89 10                	mov    DWORD PTR [eax],edx
c0024b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b2a:	83 ec 0c             	sub    esp,0xc
c0024b2d:	50                   	push   eax
c0024b2e:	e8 cb e9 fe ff       	call   c00134fe <Device::~Device()>
c0024b33:	83 c4 10             	add    esp,0x10
c0024b36:	90                   	nop
c0024b37:	83 c4 0c             	add    esp,0xc
c0024b3a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0024b3c <IOAPIC::~IOAPIC()>:
c0024b3c:	83 ec 0c             	sub    esp,0xc
c0024b3f:	83 ec 0c             	sub    esp,0xc
c0024b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024b46:	e8 cd ff ff ff       	call   c0024b18 <IOAPIC::~IOAPIC()>
c0024b4b:	83 c4 10             	add    esp,0x10
c0024b4e:	83 ec 08             	sub    esp,0x8
c0024b51:	68 68 01 00 00       	push   0x168
c0024b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024b5a:	e8 12 d6 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024b5f:	83 c4 10             	add    esp,0x10
c0024b62:	83 c4 0c             	add    esp,0xc
c0024b65:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0024b66 <APIC::~APIC()>:
c0024b66:	83 ec 0c             	sub    esp,0xc
c0024b69:	ba a8 82 02 c0       	mov    edx,0xc00282a8
c0024b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b72:	89 10                	mov    DWORD PTR [eax],edx
c0024b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b78:	83 ec 0c             	sub    esp,0xc
c0024b7b:	50                   	push   eax
c0024b7c:	e8 bf f4 fe ff       	call   c0014040 <InterruptController::~InterruptController()>
c0024b81:	83 c4 10             	add    esp,0x10
c0024b84:	90                   	nop
c0024b85:	83 c4 0c             	add    esp,0xc
c0024b88:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0024b8a <APIC::~APIC()>:
c0024b8a:	83 ec 0c             	sub    esp,0xc
c0024b8d:	83 ec 0c             	sub    esp,0xc
c0024b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024b94:	e8 cd ff ff ff       	call   c0024b66 <APIC::~APIC()>
c0024b99:	83 c4 10             	add    esp,0x10
c0024b9c:	83 ec 08             	sub    esp,0x8
c0024b9f:	68 58 21 00 00       	push   0x2158
c0024ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024ba8:	e8 c4 d5 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024bad:	83 c4 10             	add    esp,0x10
c0024bb0:	83 c4 0c             	add    esp,0xc
c0024bb3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0024bb4 <PIC::~PIC()>:
c0024bb4:	83 ec 0c             	sub    esp,0xc
c0024bb7:	ba 40 83 02 c0       	mov    edx,0xc0028340
c0024bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bc0:	89 10                	mov    DWORD PTR [eax],edx
c0024bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bc6:	83 ec 0c             	sub    esp,0xc
c0024bc9:	50                   	push   eax
c0024bca:	e8 71 f4 fe ff       	call   c0014040 <InterruptController::~InterruptController()>
c0024bcf:	83 c4 10             	add    esp,0x10
c0024bd2:	90                   	nop
c0024bd3:	83 c4 0c             	add    esp,0xc
c0024bd6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0024bd8 <PIC::~PIC()>:
c0024bd8:	83 ec 0c             	sub    esp,0xc
c0024bdb:	83 ec 0c             	sub    esp,0xc
c0024bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024be2:	e8 cd ff ff ff       	call   c0024bb4 <PIC::~PIC()>
c0024be7:	83 c4 10             	add    esp,0x10
c0024bea:	83 ec 08             	sub    esp,0x8
c0024bed:	68 58 21 00 00       	push   0x2158
c0024bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024bf6:	e8 76 d5 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024bfb:	83 c4 10             	add    esp,0x10
c0024bfe:	83 c4 0c             	add    esp,0xc
c0024c01:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0024c02 <APICTimer::~APICTimer()>:
c0024c02:	83 ec 0c             	sub    esp,0xc
c0024c05:	ba 94 83 02 c0       	mov    edx,0xc0028394
c0024c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c0e:	89 10                	mov    DWORD PTR [eax],edx
c0024c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c14:	83 ec 0c             	sub    esp,0xc
c0024c17:	50                   	push   eax
c0024c18:	e8 55 11 ff ff       	call   c0015d72 <Timer::~Timer()>
c0024c1d:	83 c4 10             	add    esp,0x10
c0024c20:	90                   	nop
c0024c21:	83 c4 0c             	add    esp,0xc
c0024c24:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0024c26 <APICTimer::~APICTimer()>:
c0024c26:	83 ec 0c             	sub    esp,0xc
c0024c29:	83 ec 0c             	sub    esp,0xc
c0024c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c30:	e8 cd ff ff ff       	call   c0024c02 <APICTimer::~APICTimer()>
c0024c35:	83 c4 10             	add    esp,0x10
c0024c38:	83 ec 08             	sub    esp,0x8
c0024c3b:	68 60 01 00 00       	push   0x160
c0024c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c44:	e8 28 d5 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024c49:	83 c4 10             	add    esp,0x10
c0024c4c:	83 c4 0c             	add    esp,0xc
c0024c4f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0024c50 <PIT::~PIT()>:
c0024c50:	83 ec 0c             	sub    esp,0xc
c0024c53:	ba e4 83 02 c0       	mov    edx,0xc00283e4
c0024c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c5c:	89 10                	mov    DWORD PTR [eax],edx
c0024c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c62:	83 ec 0c             	sub    esp,0xc
c0024c65:	50                   	push   eax
c0024c66:	e8 07 11 ff ff       	call   c0015d72 <Timer::~Timer()>
c0024c6b:	83 c4 10             	add    esp,0x10
c0024c6e:	90                   	nop
c0024c6f:	83 c4 0c             	add    esp,0xc
c0024c72:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0024c74 <PIT::~PIT()>:
c0024c74:	83 ec 0c             	sub    esp,0xc
c0024c77:	83 ec 0c             	sub    esp,0xc
c0024c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c7e:	e8 cd ff ff ff       	call   c0024c50 <PIT::~PIT()>
c0024c83:	83 c4 10             	add    esp,0x10
c0024c86:	83 ec 08             	sub    esp,0x8
c0024c89:	68 5c 01 00 00       	push   0x15c
c0024c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024c92:	e8 da d4 fe ff       	call   c0012171 <operator delete(void*, unsigned long)>
c0024c97:	83 c4 10             	add    esp,0x10
c0024c9a:	83 c4 0c             	add    esp,0xc
c0024c9d:	c3                   	ret    
